( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( ( VAR_1 . METHOD_2 ( ) ) == null ) ? STRING_1 : VAR_1 . METHOD_2 ( ) ) INIT = ( ( VAR_1 . METHOD_2 ( ) ) == null ) ? STRING_1 : VAR_1 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( INIT = ( ( VAR_2 . METHOD_2 ( ) ) == null ) ? STRING_1 : VAR_2 . METHOD_2 ( ) ) INIT = ( ( VAR_2 . METHOD_2 ( ) ) == null ) ? STRING_1 : VAR_2 . METHOD_2 ( ) ) VAR VAR (  return VAR_3 . METHOD_3 ( VAR_4 ) ; )  return VAR_3 . METHOD_3 ( VAR_4 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.DiskImage ) TYPE org.ovirt.engine.core.common.businessentities.DiskImage ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) )  METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) (  METHOD_2 ( ) . METHOD_5 ( VAR_1 . METHOD_6 ( ) ) )  METHOD_2 ( ) . METHOD_5 ( VAR_1 . METHOD_6 ( ) ) (  METHOD_2 ( ) . METHOD_7 ( METHOD_2 ( ) . METHOD_6 ( ) ) )  METHOD_2 ( ) . METHOD_7 ( METHOD_2 ( ) . METHOD_6 ( ) ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_8 ( ) . get ( METHOD_2 ( ) . METHOD_9 ( ) ) ) INIT = TYPE_2 . METHOD_8 ( ) . get ( METHOD_2 ( ) . METHOD_9 ( ) ) ) VAR VAR ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN (  VAR_2 . METHOD_10 ( VAR_1 . METHOD_11 ( ) ) )  VAR_2 . METHOD_10 ( VAR_1 . METHOD_11 ( ) ) (  TYPE_2 . METHOD_8 ( ) . METHOD_12 ( VAR_2 ) )  TYPE_2 . METHOD_8 ( ) . METHOD_12 ( VAR_2 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND source == null ) COND source == null ( THEN THEN (  return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ( ) ; )  return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ( ) ; ) THEN THEN ) IF IF (  return source ; )  return source ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ( ) ; } return source ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ( ) ; } return source ; } } (  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_1 , new TYPE_1 ( ( ( STRING_1 + name ) + STRING_2 ) , VAR_2 ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_1 , new TYPE_1 ( ( ( STRING_1 + name ) + STRING_2 ) , VAR_2 ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) ) ) )  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) ) ) (  METHOD_3 ( ) )  METHOD_3 ( ) (  METHOD_4 ( false , VAR_2 ) )  METHOD_4 ( false , VAR_2 ) (  cmd . METHOD_5 ( ) )  cmd . METHOD_5 ( ) (  org.mockito.Mockito . METHOD_6 ( VAR_3 , org.mockito.Mockito . METHOD_7 ( ) ) . METHOD_8 ( TYPE_3 . any ( VAR_4 . Guid class ) ) )  org.mockito.Mockito . METHOD_6 ( VAR_3 , org.mockito.Mockito . METHOD_7 ( ) ) . METHOD_8 ( TYPE_3 . any ( VAR_4 . Guid class ) ) (  TYPE_4 . assertEquals ( cmd . METHOD_9 ( ) , VAR_5 ) )  TYPE_4 . assertEquals ( cmd . METHOD_9 ( ) , VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ) ( source ) ) : null ; )  return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ) ( source ) ) : null ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ) ( source ) ) : null ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ) ( source ) ) : null ; } } (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_5 ) NAME METHOD_5 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_2 . getReturnValue ( ) ) INIT = VAR_2 . getReturnValue ( ) ) VAR VAR (  METHOD_6 ( null , ( ( VAR_3 != null ) && ( VAR_3 . getSucceeded ( ) ) ) ) )  METHOD_6 ( null , ( ( VAR_3 != null ) && ( VAR_3 . getSucceeded ( ) ) ) ) ) BLOCK BLOCK ) METHOD METHOD (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_2 ( VAR_1 , new TYPE_1 ( METHOD_3 ( ) . getId ( ) , METHOD_4 ( ) ) , new TYPE_2 ( ) { public void METHOD_5 ( TYPE_3 VAR_2 ) { TYPE_4 VAR_3 = VAR_2 . getReturnValue ( ) ; METHOD_6 ( null , ( ( VAR_3 != null ) && ( VAR_3 . getSucceeded ( ) ) ) ) ; } } , null ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_2 ( VAR_1 , new TYPE_1 ( METHOD_3 ( ) . getId ( ) , METHOD_4 ( ) ) , new TYPE_2 ( ) { public void METHOD_5 ( TYPE_3 VAR_2 ) { TYPE_4 VAR_3 = VAR_2 . getReturnValue ( ) ; METHOD_6 ( null , ( ( VAR_3 != null ) && ( VAR_3 . getSucceeded ( ) ) ) ) ; } } , null ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 = org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) )  VAR_1 = org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) (  VAR_2 = org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) )  VAR_2 = org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) (  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( cmd ) . METHOD_3 ( ) )  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( cmd ) . METHOD_3 ( ) (  org.mockito.Mockito.doReturn ( cluster ) . when ( cmd ) . METHOD_4 ( ) )  org.mockito.Mockito.doReturn ( cluster ) . when ( cmd ) . METHOD_4 ( ) (  org.mockito.Mockito.doReturn ( TYPE_2 . METHOD_5 ( ) ) . when ( cmd ) . METHOD_6 ( ) )  org.mockito.Mockito.doReturn ( TYPE_2 . METHOD_5 ( ) ) . when ( cmd ) . METHOD_6 ( ) (  METHOD_7 ( ) )  METHOD_7 ( ) (  METHOD_8 ( ) )  METHOD_8 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.DiskImage ) TYPE org.ovirt.engine.core.common.businessentities.DiskImage ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) )  TYPE_1 . METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) (  METHOD_5 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) )  METHOD_5 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_6 ( ) . METHOD_7 ( VAR_1 . getId ( ) ) ) INIT = METHOD_6 ( ) . METHOD_7 ( VAR_1 . getId ( ) ) ) VAR VAR ( IF IF ( COND ( VAR_2 == null ) || ( VAR_2 . isEmpty ( ) ) ) COND ( VAR_2 == null ) || ( VAR_2 . isEmpty ( ) ) ( THEN THEN (  METHOD_8 ( ) . METHOD_3 ( VAR_1 . getId ( ) ) )  METHOD_8 ( ) . METHOD_3 ( VAR_1 . getId ( ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ) TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME storageDomain ) NAME storageDomain ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_1.DiskImage> ) TYPE java.util.List<TYPE_1.DiskImage> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_1.DiskImage ) TYPE TYPE_1.DiskImage ( NAME disk ) NAME disk ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  disk . METHOD_2 ( new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( TYPE_2 . METHOD_3 ( storageDomain . getId ( ) ) ) ) )  disk . METHOD_2 ( new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( TYPE_2 . METHOD_3 ( storageDomain . getId ( ) ) ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  METHOD_4 ( storageDomain . METHOD_5 ( ) , VAR_1 . get ( 0 ) ) )  METHOD_4 ( storageDomain . METHOD_5 ( ) , VAR_1 . get ( 0 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME action ) NAME action ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  get ( ) )  get ( ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_3 ( ) ) INIT = new TYPE_3 ( ) ) VAR VAR (  VAR_1 . METHOD_2 ( id ) )  VAR_1 . METHOD_2 ( id ) ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 ) INIT = VAR_3 ) VAR VAR ( IF IF ( COND ( action != null ) && ( action . METHOD_3 ( ) ) ) COND ( action != null ) && ( action . METHOD_3 ( ) ) ( THEN THEN (  VAR_2 = METHOD_4 ( action . METHOD_5 ( ) ) )  VAR_2 = METHOD_4 ( action . METHOD_5 ( ) ) ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME parameters ) NAME parameters ( INIT = new TYPE_4 ( VAR_1 , VAR_2 ) ) INIT = new TYPE_4 ( VAR_1 , VAR_2 ) ) VAR VAR (  return METHOD_6 ( VAR_4 , parameters ) ; )  return METHOD_6 ( VAR_4 , parameters ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ! ( getParameters ( ) . METHOD_2 ( ) ) ) COND ! ( getParameters ( ) . METHOD_2 ( ) ) ( THEN THEN (  METHOD_3 ( null ) )  METHOD_3 ( null ) ) THEN THEN ) IF IF (  METHOD_4 ( ) )  METHOD_4 ( ) ( IF IF ( COND ( getVm ( ) ) != null ) COND ( getVm ( ) ) != null ( THEN THEN (  TYPE_1 . METHOD_5 ( getVm ( ) . getId ( ) ) )  TYPE_1 . METHOD_5 ( getVm ( ) . getId ( ) ) (  METHOD_6 ( ) )  METHOD_6 ( ) ) THEN THEN ( ELSE ELSE (  METHOD_7 ( false ) )  METHOD_7 ( false ) (  VAR_1 . METHOD_8 ( STRING_1 ) )  VAR_1 . METHOD_8 ( STRING_1 ) ) ELSE ELSE ) IF IF (  METHOD_9 ( true ) )  METHOD_9 ( true ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ) INIT = new TYPE_1 ( VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ) VAR VAR (  dao . METHOD_2 ( VAR_1 ) )  dao . METHOD_2 ( VAR_1 ) ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_6 ) NAME VAR_6 ( INIT = dao . METHOD_3 ( VAR_2 ) ) INIT = dao . METHOD_3 ( VAR_2 ) ) VAR VAR (  TYPE_2 . METHOD_4 ( VAR_6 ) )  TYPE_2 . METHOD_4 ( VAR_6 ) (  TYPE_2 . METHOD_5 ( ( ( VAR_6 . size ( ) ) == 1 ) ) )  TYPE_2 . METHOD_5 ( ( ( VAR_6 . size ( ) ) == 1 ) ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_7 ) NAME VAR_7 ( INIT = VAR_6 . get ( 0 ) ) INIT = VAR_6 . get ( 0 ) ) VAR VAR (  TYPE_2 . assertEquals ( VAR_1 , VAR_7 ) )  TYPE_2 . assertEquals ( VAR_1 , VAR_7 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  return TYPE_1 . METHOD_2 ( TYPE_2 . getVm ( ) , TYPE_2 . getReturnValue ( ) . METHOD_3 ( ) , TYPE_2 . getVm ( ) . getStoragePoolId ( ) , VAR_1 , true , true , false , false , false , false , true , true , METHOD_4 ( ) ) ; )  return TYPE_1 . METHOD_2 ( TYPE_2 . getVm ( ) , TYPE_2 . getReturnValue ( ) . METHOD_3 ( ) , TYPE_2 . getVm ( ) . getStoragePoolId ( ) , VAR_1 , true , true , false , false , false , false , true , true , METHOD_4 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME model ) NAME model ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SWITCH SWITCH ( NAME ( ( TYPE_2 ) ( model ) ) . METHOD_2 ( ) ) NAME ( ( TYPE_2 ) ( model ) ) . METHOD_2 ( ) ( CASE VAR_2 ( BLOCK BLOCK (  VAR_1 . METHOD_3 ( VAR_3 ) )  VAR_1 . METHOD_3 ( VAR_3 ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_2 ( CASE ERROR ( BLOCK BLOCK (  VAR_1 . METHOD_3 ( VAR_4 ) )  VAR_1 . METHOD_3 ( VAR_4 ) (  break ; )  break ; ) BLOCK BLOCK ) CASE ERROR ( CASE NORMAL ( BLOCK BLOCK (  VAR_1 . METHOD_3 ( VAR_5 ) )  VAR_1 . METHOD_3 ( VAR_5 ) (  break ; )  break ; ) BLOCK BLOCK ) CASE NORMAL ( CASE VAR_6 ( BLOCK BLOCK (  VAR_1 . METHOD_3 ( VAR_3 ) )  VAR_1 . METHOD_3 ( VAR_3 ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_6 ( DEFAULT DEFAULT ( BLOCK BLOCK (  VAR_1 . METHOD_3 ( VAR_7 ) )  VAR_1 . METHOD_3 ( VAR_7 ) (  break ; )  break ; ) BLOCK BLOCK ) DEFAULT DEFAULT ) SWITCH SWITCH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.Map<java.lang.String,java.lang.String> ) RETURN java.util.Map<java.lang.String,java.lang.String> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( RESOURCES RESOURCES ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME client ) NAME client ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ) RESOURCES RESOURCES ( BLOCK BLOCK (  METHOD_3 ( client , VAR_1 ) )  METHOD_3 ( client , VAR_1 ) (  METHOD_4 ( client , VAR_2 , VAR_3 ) )  METHOD_4 ( client , VAR_2 , VAR_3 ) ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_5 ) NAME VAR_5 ( INIT = METHOD_5 ( client ) ) INIT = METHOD_5 ( client ) ) VAR VAR (  return METHOD_6 ( METHOD_7 ( VAR_5 ) ) ; )  return METHOD_6 ( METHOD_7 ( VAR_5 ) ) ; ) BLOCK BLOCK ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.lang.Boolean ) RETURN java.lang.Boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND TYPE_1 . METHOD_2 ( TYPE_2 . getVm ( ) . METHOD_3 ( ) ) ) COND TYPE_1 . METHOD_2 ( TYPE_2 . getVm ( ) . METHOD_3 ( ) ) ( THEN THEN ( IF IF ( COND ( TYPE_2 . getVm ( ) . METHOD_1 ( ) ) != null ) COND ( TYPE_2 . getVm ( ) . METHOD_1 ( ) ) != null ( THEN THEN (  return TYPE_2 . getVm ( ) . METHOD_1 ( ) ; )  return TYPE_2 . getVm ( ) . METHOD_1 ( ) ; ) THEN THEN ) IF IF ( IF IF ( COND ( TYPE_2 . METHOD_4 ( ) . METHOD_1 ( ) ) != null ) COND ( TYPE_2 . METHOD_4 ( ) . METHOD_1 ( ) ) != null ( THEN THEN (  return TYPE_2 . METHOD_4 ( ) . METHOD_1 ( ) ; )  return TYPE_2 . METHOD_4 ( ) . METHOD_1 ( ) ; ) THEN THEN ) IF IF (  return TYPE_3 . getValue ( VAR_1 ) ; )  return TYPE_3 . getValue ( VAR_1 ) ; ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source != null ? ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; )  return source != null ? ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; } } (  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 = new TYPE_1 < TYPE_2 > ( false , true ) )  VAR_1 = new TYPE_1 < TYPE_2 > ( false , true ) ( VAR VAR ( TYPE TYPE_3<java.lang.String> ) TYPE TYPE_3<java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_3 < java.lang.String > ( ) { public java.lang.String getValue ( java.lang.String VAR_3 ) { return VAR_3 ; } } ) INIT = new TYPE_3 < java.lang.String > ( ) { public java.lang.String getValue ( java.lang.String VAR_3 ) { return VAR_3 ; } } ) VAR VAR ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME getValue ) NAME getValue ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD (  VAR_1 . addColumn ( VAR_2 , VAR_4 . METHOD_2 ( ) ) )  VAR_1 . addColumn ( VAR_2 , VAR_4 . METHOD_2 ( ) ) (  VAR_1 . METHOD_3 ( new java.util.ArrayList < org.ovirt.engine.ui.uicommonweb.models.EntityModel > ( ) ) )  VAR_1 . METHOD_3 ( new java.util.ArrayList < org.ovirt.engine.ui.uicommonweb.models.EntityModel > ( ) ) (  VAR_1 . METHOD_4 ( STRING_1 , true ) )  VAR_1 . METHOD_4 ( STRING_1 , true ) (  VAR_1 . METHOD_5 ( new TYPE_4 ( ) ) )  VAR_1 . METHOD_5 ( new TYPE_4 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 = new TYPE_1 ( ) )  VAR_1 = new TYPE_1 ( ) (  VAR_1 . METHOD_2 ( STRING_1 ) )  VAR_1 . METHOD_2 ( STRING_1 ) (  VAR_1 . METHOD_3 ( VAR_2 ) )  VAR_1 . METHOD_3 ( VAR_2 ) (  validator = org.mockito.Mockito . METHOD_4 ( new TYPE_2 ( VAR_1 ) ) )  validator = org.mockito.Mockito . METHOD_4 ( new TYPE_2 ( VAR_1 ) ) (  domain = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) )  domain = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) (  domain . METHOD_5 ( VAR_2 ) )  domain . METHOD_5 ( VAR_2 ) (  domain . setId ( org.ovirt.engine.core.compat.Guid . METHOD_6 ( STRING_2 ) ) )  domain . setId ( org.ovirt.engine.core.compat.Guid . METHOD_6 ( STRING_2 ) ) (  domain . METHOD_7 ( VAR_3 ) )  domain . METHOD_7 ( VAR_3 ) (  domain . METHOD_8 ( VAR_4 ) )  domain . METHOD_8 ( VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( TYPE_2 . METHOD_4 ( ) . getStoragePoolId ( ) ) ) INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( TYPE_2 . METHOD_4 ( ) . getStoragePoolId ( ) ) ) VAR VAR ( IF IF ( COND ( VAR_1 . size ( ) ) >= ( VAR_2 < java.lang.Integer > getValue ( VAR_3 ) ) ) COND ( VAR_1 . size ( ) ) >= ( VAR_2 < java.lang.Integer > getValue ( VAR_3 ) ) ( THEN THEN (  METHOD_5 ( ) )  METHOD_5 ( ) (  return ; )  return ; ) THEN THEN ) IF IF (  METHOD_6 ( VAR_1 ) )  METHOD_6 ( VAR_1 ) (  TYPE_2 . METHOD_7 ( true ) )  TYPE_2 . METHOD_7 ( true ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1.VdcActionParametersBase ) RETURN TYPE_1.VdcActionParametersBase ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.VdcActionType ) TYPE TYPE_1.VdcActionType ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.VdcActionParametersBase ) TYPE TYPE_1.VdcActionParametersBase ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( VAR_1 , getParameters ( ) ) ) INIT = METHOD_2 ( VAR_1 , getParameters ( ) ) ) VAR VAR ( IF IF ( COND ( ( VAR_2 . METHOD_3 ( ) ) == null ) && ( ( TYPE_2 . METHOD_4 ( ) ) != null ) ) COND ( ( VAR_2 . METHOD_3 ( ) ) == null ) && ( ( TYPE_2 . METHOD_4 ( ) ) != null ) ( THEN THEN (  VAR_2 . METHOD_5 ( TYPE_2 . METHOD_4 ( ) ) )  VAR_2 . METHOD_5 ( TYPE_2 . METHOD_4 ( ) ) ) THEN THEN ) IF IF (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( METHOD_3 ( ) ) )  METHOD_2 ( METHOD_3 ( ) ) ( TRY TRY ( BLOCK BLOCK (  VAR_1 . METHOD_4 ( ) )  VAR_1 . METHOD_4 ( ) (  ( ( TYPE_1 ) ( resource ) ) . METHOD_5 ( new TYPE_2 ( ) ) )  ( ( TYPE_1 ) ( resource ) ) . METHOD_5 ( new TYPE_2 ( ) ) (  METHOD_6 ( STRING_1 ) )  METHOD_6 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( BLOCK BLOCK (  METHOD_7 ( VAR_2 , STRING_2 , STRING_3 , STRING_4 ) )  METHOD_7 ( VAR_2 , STRING_2 , STRING_3 , STRING_4 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDS> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDS> ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_2 ( new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) , vm , null , org.mockito.Mockito . METHOD_3 ( VAR_3 class ) ) ) INIT = VAR_2 . METHOD_2 ( new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) , vm , null , org.mockito.Mockito . METHOD_3 ( VAR_3 class ) ) ) VAR VAR (  TYPE_1 . METHOD_4 ( VAR_1 , TYPE_2 . METHOD_5 ( TYPE_3 . METHOD_6 ( ) ) ) )  TYPE_1 . METHOD_4 ( VAR_1 , TYPE_2 . METHOD_5 ( TYPE_3 . METHOD_6 ( ) ) ) (  TYPE_1 . METHOD_4 ( METHOD_7 ( ) , TYPE_2 . METHOD_5 ( TYPE_3 . METHOD_6 ( ) ) ) )  TYPE_1 . METHOD_4 ( METHOD_7 ( ) , TYPE_2 . METHOD_5 ( TYPE_3 . METHOD_6 ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN java.util.ArrayList<TYPE_1> ) RETURN java.util.ArrayList<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.ArrayList<TYPE_1> ) TYPE java.util.ArrayList<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<TYPE_1> ) TYPE java.util.ArrayList<TYPE_1> ( NAME VAR_3 ) NAME VAR_3 ( INIT = new java.util.ArrayList < TYPE_1 > ( ) ) INIT = new java.util.ArrayList < TYPE_1 > ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_2 ( VAR_2 ) ) INIT = METHOD_2 ( VAR_2 ) ) VAR VAR ( IF IF ( COND VAR_4 != null ) COND VAR_4 != null ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME storageDomain ) NAME storageDomain ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( IF IF ( COND ! ( ( ( org.ovirt.engine.core.common.businessentities.DiskImage ) ( VAR_4 . METHOD_3 ( ) ) ) . METHOD_4 ( ) . METHOD_5 ( storageDomain . getId ( ) ) ) ) COND ! ( ( ( org.ovirt.engine.core.common.businessentities.DiskImage ) ( VAR_4 . METHOD_3 ( ) ) ) . METHOD_4 ( ) . METHOD_5 ( storageDomain . getId ( ) ) ) ( THEN THEN (  VAR_3 . add ( storageDomain ) )  VAR_3 . add ( storageDomain ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  VAR_1 . add ( STRING_1 ) )  VAR_1 . add ( STRING_1 ) (  METHOD_2 ( METHOD_3 ( ) ) )  METHOD_2 ( METHOD_3 ( ) ) (  METHOD_4 ( ) )  METHOD_4 ( ) (  METHOD_5 ( 1 ) )  METHOD_5 ( 1 ) (  METHOD_6 ( 1 ) )  METHOD_6 ( 1 ) (  METHOD_7 ( 1 ) )  METHOD_7 ( 1 ) (  METHOD_8 ( 1 ) )  METHOD_8 ( 1 ) (  VAR_2 . METHOD_9 ( ) )  VAR_2 . METHOD_9 ( ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME nic ) NAME nic ( INIT = resource . get ( ) ) INIT = resource . get ( ) ) VAR VAR (  METHOD_10 ( nic . METHOD_11 ( ) ) )  METHOD_10 ( nic . METHOD_11 ( ) ) (  TYPE_2 . METHOD_12 ( nic , 1 ) )  TYPE_2 . METHOD_12 ( nic , 1 ) (  METHOD_13 ( nic ) )  METHOD_13 ( nic ) ) BLOCK BLOCK ( FINALLY FINALLY (  VAR_1 . METHOD_14 ( ) )  VAR_1 . METHOD_14 ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.ArrayList<java.lang.String> ) TYPE java.util.ArrayList<java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( TYPE_1 . getVm ( ) . METHOD_2 ( ) ) == ( VAR_3 ) ) COND ( TYPE_1 . getVm ( ) . METHOD_2 ( ) ) == ( VAR_3 ) ( THEN THEN (  return super . METHOD_1 ( VAR_1 , VAR_2 ) ; )  return super . METHOD_1 ( VAR_1 , VAR_2 ) ; ) THEN THEN ( ELSE ELSE (  return METHOD_3 ( VAR_4 ) ; )  return METHOD_3 ( VAR_4 ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  org.mockito.Mockito.when ( VAR_2 . get ( TYPE_1 . METHOD_2 ( VAR_3 ) ) ) . thenReturn ( VAR_4 ) )  org.mockito.Mockito.when ( VAR_2 . get ( TYPE_1 . METHOD_2 ( VAR_3 ) ) ) . thenReturn ( VAR_4 ) (  org.mockito.Mockito.when ( VAR_4 . METHOD_3 ( ) ) . thenReturn ( VAR_1 ) )  org.mockito.Mockito.when ( VAR_4 . METHOD_3 ( ) ) . thenReturn ( VAR_1 ) ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_6 . METHOD_4 ( VAR_7 , VAR_8 ) ) INIT = VAR_6 . METHOD_4 ( VAR_7 , VAR_8 ) ) VAR VAR (  TYPE_2 . assertEquals ( VAR_1 , VAR_5 ) )  TYPE_2 . assertEquals ( VAR_1 , VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME type ) NAME type ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( VAR_1 . METHOD_2 ( ) ) != null ) && ( ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) == type ) ) COND ( ( VAR_1 . METHOD_2 ( ) ) != null ) && ( ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) == type ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.VM ) TYPE TYPE_1.VM ( NAME model ) NAME model ( INIT = new TYPE_1 . VM ( ) ) INIT = new TYPE_1 . VM ( ) ) VAR VAR (  model . METHOD_2 ( VAR_1 [ 0 ] ) )  model . METHOD_2 ( VAR_1 [ 0 ] ) (  METHOD_3 ( METHOD_4 ( ) ) )  METHOD_3 ( METHOD_4 ( ) ) (  VAR_2 . METHOD_5 ( ) )  VAR_2 . METHOD_5 ( ) ( TRY TRY ( BLOCK BLOCK (  VAR_3 . add ( model ) )  VAR_3 . add ( model ) (  METHOD_6 ( STRING_1 ) )  METHOD_6 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( BLOCK BLOCK (  METHOD_7 ( VAR_4 , STRING_2 , STRING_3 , STRING_4 , STRING_5 ) )  METHOD_7 ( VAR_4 , STRING_2 , STRING_3 , STRING_4 , STRING_5 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) . METHOD_3 ( VAR_2 . List , new TYPE_2 ( VAR_3 . METHOD_4 ( ) ) ) ) INIT = METHOD_2 ( ) . METHOD_3 ( VAR_2 . List , new TYPE_2 ( VAR_3 . METHOD_4 ( ) ) ) ) VAR VAR ( IF IF ( COND VAR_1 . getSucceeded ( ) ) COND VAR_1 . getSucceeded ( ) ( THEN THEN (  VAR_4 = ( ( java.util.Map < org.ovirt.engine.core.compat.Guid , TYPE_3 > ) ( VAR_1 . getReturnValue ( ) ) ) )  VAR_4 = ( ( java.util.Map < org.ovirt.engine.core.compat.Guid , TYPE_3 > ) ( VAR_1 . getReturnValue ( ) ) ) (  METHOD_5 ( ) )  METHOD_5 ( ) ) THEN THEN ( ELSE ELSE (  METHOD_6 ( ) )  METHOD_6 ( ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ) INIT = METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_1 . getId ( ) . equals ( VAR_3 . getId ( ) ) ) ) COND ! ( VAR_1 . getId ( ) . equals ( VAR_3 . getId ( ) ) ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) . METHOD_3 ( new TYPE_1 [ ] { new TYPE_2 ( ) } ) )  METHOD_2 ( ) . METHOD_3 ( new TYPE_1 [ ] { new TYPE_2 ( ) } ) (  METHOD_4 ( ) . METHOD_3 ( new TYPE_1 [ ] { new TYPE_2 ( ) , new TYPE_3 ( ) } ) )  METHOD_4 ( ) . METHOD_3 ( new TYPE_1 [ ] { new TYPE_2 ( ) , new TYPE_3 ( ) } ) (  return ( METHOD_2 ( ) . METHOD_5 ( ) ) && ( METHOD_4 ( ) . METHOD_5 ( ) ) ; )  return ( METHOD_2 ( ) . METHOD_5 ( ) ) && ( METHOD_4 ( ) . METHOD_5 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) RETURN org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME entity ) NAME entity ( INIT = new org.ovirt.engine.core.common.businessentities . VdsNetworkInterface ( ) ) INIT = new org.ovirt.engine.core.common.businessentities . VdsNetworkInterface ( ) ) VAR VAR (  entity . setId ( VAR_2 [ VAR_1 ] ) )  entity . setId ( VAR_2 [ VAR_1 ] ) (  entity . METHOD_2 ( VAR_3 [ VAR_1 ] ) )  entity . METHOD_2 ( VAR_3 [ VAR_1 ] ) (  entity . METHOD_3 ( VAR_4 ) )  entity . METHOD_3 ( VAR_4 ) (  entity . METHOD_4 ( VAR_5 ) )  entity . METHOD_4 ( VAR_5 ) (  entity = TYPE_1 . METHOD_5 ( entity , VAR_2 [ VAR_1 ] ) )  entity = TYPE_1 . METHOD_5 ( entity , VAR_2 [ VAR_1 ] ) (  entity . METHOD_6 ( ) . METHOD_7 ( VAR_6 ) )  entity . METHOD_6 ( ) . METHOD_7 ( VAR_6 ) (  entity . METHOD_8 ( VAR_7 ) )  entity . METHOD_8 ( VAR_7 ) (  return entity ; )  return entity ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_2 ( vm . getId ( ) , VAR_3 , TYPE_2 . getName ( ) ) ) INIT = VAR_2 . METHOD_2 ( vm . getId ( ) , VAR_3 , TYPE_2 . getName ( ) ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map ) TYPE java.util.Map ( NAME VAR_5 ) NAME VAR_5 ( INIT = new java.util.HashMap ( ) ) INIT = new java.util.HashMap ( ) ) VAR VAR (  VAR_5 . put ( VAR_6 , VAR_4 . METHOD_3 ( ) . getValue ( ) ) )  VAR_5 . put ( VAR_6 , VAR_4 . METHOD_3 ( ) . getValue ( ) ) (  VAR_5 . put ( VAR_7 , VAR_4 . METHOD_4 ( ) ) )  VAR_5 . put ( VAR_7 , VAR_4 . METHOD_4 ( ) ) (  METHOD_5 ( VAR_5 , VAR_4 , null ) )  METHOD_5 ( VAR_5 , VAR_4 , null ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ( INIT = false ) INIT = false ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_4 ) NAME VAR_4 ( INIT = new java.util.ArrayList < TYPE_1 > ( ) ) INIT = new java.util.ArrayList < TYPE_1 > ( ) ) VAR VAR (  VAR_3 = METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_4 , VAR_1 . METHOD_4 ( ) ) )  VAR_3 = METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_4 , VAR_1 . METHOD_4 ( ) ) (  METHOD_5 ( VAR_4 ) )  METHOD_5 ( VAR_4 ) ) BLOCK BLOCK ( FINALLY FINALLY (  VAR_2 . METHOD_6 ( ) )  VAR_2 . METHOD_6 ( ) (  VAR_5 . METHOD_7 ( STRING_1 , VAR_1 . METHOD_4 ( ) , ( VAR_3 ? STRING_2 : STRING_3 ) , VAR_1 . METHOD_3 ( ) ) )  VAR_5 . METHOD_7 ( STRING_1 , VAR_1 . METHOD_4 ( ) , ( VAR_3 ? STRING_2 : STRING_3 ) , VAR_1 . METHOD_3 ( ) ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < TYPE_1 > ( ) ) INIT = new java.util.ArrayList < TYPE_1 > ( ) ) VAR VAR (  VAR_1 . add ( new TYPE_1 ( ( ( METHOD_2 ( ) ) == null ? null : METHOD_2 ( ) . getValue ( ) ) , VAR_2 , TYPE_2 . METHOD_3 ( ) . METHOD_4 ( ) ) ) )  VAR_1 . add ( new TYPE_1 ( ( ( METHOD_2 ( ) ) == null ? null : METHOD_2 ( ) . getValue ( ) ) , VAR_2 , TYPE_2 . METHOD_3 ( ) . METHOD_4 ( ) ) ) (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  VAR_1 . METHOD_2 ( VAR_2 ) )  VAR_1 . METHOD_2 ( VAR_2 ) (  command = org.mockito.Mockito . METHOD_3 ( new TYPE_1 ( VAR_1 ) ) )  command = org.mockito.Mockito . METHOD_3 ( new TYPE_1 ( VAR_1 ) ) (  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( command ) . METHOD_4 ( ) )  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( command ) . METHOD_4 ( ) (  org.mockito.Mockito.doReturn ( VAR_4 ) . when ( command ) . METHOD_5 ( ) )  org.mockito.Mockito.doReturn ( VAR_4 ) . when ( command ) . METHOD_5 ( ) (  org.mockito.Mockito.doReturn ( VAR_5 ) . when ( command ) . METHOD_6 ( ) )  org.mockito.Mockito.doReturn ( VAR_5 ) . when ( command ) . METHOD_6 ( ) (  org.mockito.Mockito.doReturn ( VAR_6 ) . when ( command ) . METHOD_7 ( ) )  org.mockito.Mockito.doReturn ( VAR_6 ) . when ( command ) . METHOD_7 ( ) (  return command ; )  return command ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( STRING_1 ) ) ) COND ! ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( STRING_1 ) ) ( THEN THEN (  log . error ( STRING_2 , this , VAR_1 . METHOD_2 ( ) ) )  log . error ( STRING_2 , this , VAR_1 . METHOD_2 ( ) ) (  log . METHOD_4 ( STRING_3 , VAR_1 ) )  log . METHOD_4 ( STRING_3 , VAR_1 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ( INIT = true ) INIT = true ) VAR VAR ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ( INIT = getReturnValue ( ) . METHOD_2 ( ) ) INIT = getReturnValue ( ) . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE java.util.Map<org.ovirt.engine.core.compat.Guid,TYPE_1> ) TYPE java.util.Map<org.ovirt.engine.core.compat.Guid,TYPE_1> ( NAME VAR_3 ) NAME VAR_3 ( INIT = new java.util.HashMap < org.ovirt.engine.core.compat.Guid , TYPE_1 > ( ) ) INIT = new java.util.HashMap < org.ovirt.engine.core.compat.Guid , TYPE_1 > ( ) ) VAR VAR (  VAR_1 = METHOD_3 ( VAR_3 ) )  VAR_1 = METHOD_3 ( VAR_3 ) ( IF IF ( COND VAR_1 && ( getParameters ( ) . METHOD_4 ( ) ) ) COND VAR_1 && ( getParameters ( ) . METHOD_4 ( ) ) ( THEN THEN (  METHOD_5 ( ) )  METHOD_5 ( ) ) THEN THEN ) IF IF (  return VAR_1 && ( METHOD_6 ( VAR_2 , VAR_3 ) ) ; )  return VAR_1 && ( METHOD_6 ( VAR_2 , VAR_3 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME obj ) NAME obj ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND obj instanceof org.ovirt.engine.core.common.businessentities.VM ) COND obj instanceof org.ovirt.engine.core.common.businessentities.VM ( THEN THEN (  return ( ( org.ovirt.engine.core.common.businessentities.VM ) ( obj ) ) . getName ( ) ; )  return ( ( org.ovirt.engine.core.common.businessentities.VM ) ( obj ) ) . getName ( ) ; ) THEN THEN ) IF IF ( IF IF ( COND obj instanceof TYPE_1 ) COND obj instanceof TYPE_1 ( THEN THEN (  return ( ( TYPE_1 ) ( obj ) ) . getName ( ) ; )  return ( ( TYPE_1 ) ( obj ) ) . getName ( ) ; ) THEN THEN ) IF IF (  throw new TYPE_2 ( ) ; )  throw new TYPE_2 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( getEntity ( ) ) == null ) COND ( getEntity ( ) ) == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( java.util.List < TYPE_2 > ) ( returnValue ) ) ) INIT = ( ( java.util.List < TYPE_2 > ) ( returnValue ) ) ) VAR VAR (  setItems ( VAR_1 ) )  setItems ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD (  TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.util.List < TYPE_2 > VAR_1 = ( ( java.util.List < TYPE_2 > ) ( returnValue ) ) ; setItems ( VAR_1 ) ; } } ) , getEntity ( ) . getId ( ) ) )  TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.util.List < TYPE_2 > VAR_1 = ( ( java.util.List < TYPE_2 > ) ( returnValue ) ) ; setItems ( VAR_1 ) ; } } ) , getEntity ( ) . getId ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_2 ( ) )  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_2 ( ) (  METHOD_3 ( null ) )  METHOD_3 ( null ) (  METHOD_4 ( null ) )  METHOD_4 ( null ) (  org.mockito.Mockito.when ( VAR_1 . get ( command . getParameters ( ) . METHOD_5 ( ) ) ) . thenReturn ( null ) )  org.mockito.Mockito.when ( VAR_1 . get ( command . getParameters ( ) . METHOD_5 ( ) ) ) . thenReturn ( null ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  METHOD_3 ( TYPE_2 . METHOD_4 ( ) ) )  METHOD_3 ( TYPE_2 . METHOD_4 ( ) ) (  METHOD_5 ( ) )  METHOD_5 ( ) (  VAR_1 . METHOD_6 ( ) )  VAR_1 . METHOD_6 ( ) ( TRY TRY ( BLOCK BLOCK (  VAR_2 . add ( model ) )  VAR_2 . add ( model ) (  TYPE_2 . METHOD_7 ( STRING_1 ) )  TYPE_2 . METHOD_7 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( BLOCK BLOCK (  METHOD_8 ( VAR_3 , STRING_2 , STRING_3 , METHOD_9 ( ) ) )  METHOD_8 ( VAR_3 , STRING_2 , STRING_3 , METHOD_9 ( ) ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  METHOD_3 ( null ) )  METHOD_3 ( null ) ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_5 ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . < java.util.List < org.ovirt.engine.core.common.businessentities.VM > > getReturnValue ( ) ) )  METHOD_5 ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . < java.util.List < org.ovirt.engine.core.common.businessentities.VM > > getReturnValue ( ) ) ) BLOCK BLOCK ) METHOD METHOD (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new TYPE_1 ( METHOD_4 ( ) . getSelectedItem ( ) . getId ( ) , VAR_2 . getId ( ) ) , new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { METHOD_5 ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . < java.util.List < org.ovirt.engine.core.common.businessentities.VM > > getReturnValue ( ) ) ; } } ) ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new TYPE_1 ( METHOD_4 ( ) . getSelectedItem ( ) . getId ( ) , VAR_2 . getId ( ) ) , new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { METHOD_5 ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . < java.util.List < org.ovirt.engine.core.common.businessentities.VM > > getReturnValue ( ) ) ; } } ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( this . VAR_2 ) )  VAR_1 . METHOD_2 ( this . VAR_2 ) ( IF IF ( COND this . VAR_2 . METHOD_3 ( ) ) COND this . VAR_2 . METHOD_3 ( ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  this . VAR_2 . METHOD_4 ( ) )  this . VAR_2 . METHOD_4 ( ) (  this . VAR_3 . METHOD_5 ( this , VAR_1 , this . VAR_2 . METHOD_6 ( ) ) )  this . VAR_3 . METHOD_5 ( this , VAR_1 , this . VAR_2 . METHOD_6 ( ) ) (  this . VAR_2 = null )  this . VAR_2 = null (  this . VAR_4 . METHOD_7 ( ) )  this . VAR_4 . METHOD_7 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) ) ) INIT = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.DiskImage> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.DiskImage> ( NAME VAR_3 ) NAME VAR_3 ( INIT = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ) INIT = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ) VAR VAR (  VAR_3 . METHOD_2 ( VAR_2 ) )  VAR_3 . METHOD_2 ( VAR_2 ) (  TYPE_2 . METHOD_3 ( VAR_3 , new TYPE_3 ( ) ) )  TYPE_2 . METHOD_3 ( VAR_3 , new TYPE_3 ( ) ) ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_4 ) NAME VAR_4 ( INIT = ( ( TYPE_4 ) ( model ) ) ) INIT = ( ( TYPE_4 ) ( model ) ) ) VAR VAR (  VAR_4 . setItems ( VAR_3 ) )  VAR_4 . setItems ( VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<java.lang.String> ) TYPE java.util.ArrayList<java.lang.String> ( NAME VAR_3 ) NAME VAR_3 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR (  VAR_3 . add ( VAR_2 . name ( ) ) )  VAR_3 . add ( VAR_2 . name ( ) ) (  org.mockito.Mockito.when ( VAR_4 . METHOD_2 ( 1 , null ) ) . thenReturn ( VAR_3 ) )  org.mockito.Mockito.when ( VAR_4 . METHOD_2 ( 1 , null ) ) . thenReturn ( VAR_3 ) (  org.mockito.Mockito.when ( VAR_4 . METHOD_2 ( 2 , null ) ) . thenReturn ( new java.util.ArrayList < > ( ) ) )  org.mockito.Mockito.when ( VAR_4 . METHOD_2 ( 2 , null ) ) . thenReturn ( new java.util.ArrayList < > ( ) ) (  TYPE_2 . getInstance ( ) . METHOD_3 ( VAR_5 class , VAR_4 ) )  TYPE_2 . getInstance ( ) . METHOD_3 ( VAR_5 class , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME map ) NAME map ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME entity ) NAME entity ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) . addValue ( STRING_1 , entity . getId ( ) ) . addValue ( STRING_2 , entity . METHOD_1 ( ) ) . addValue ( STRING_3 , entity . METHOD_2 ( ) ) . addValue ( STRING_4 , entity . METHOD_3 ( ) ) . addValue ( STRING_5 , TYPE_3 . METHOD_4 ( entity . getStatus ( ) ) ) . addValue ( STRING_6 , entity . METHOD_5 ( ) ) ) INIT = new TYPE_1 ( ) . addValue ( STRING_1 , entity . getId ( ) ) . addValue ( STRING_2 , entity . METHOD_1 ( ) ) . addValue ( STRING_3 , entity . METHOD_2 ( ) ) . addValue ( STRING_4 , entity . METHOD_3 ( ) ) . addValue ( STRING_5 , TYPE_3 . METHOD_4 ( entity . getStatus ( ) ) ) . addValue ( STRING_6 , entity . METHOD_5 ( ) ) ) VAR VAR (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.VdcActionParametersBase ) TYPE TYPE_1.VdcActionParametersBase ( NAME params ) NAME params ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_2 ( VAR_3 ) ) INIT = VAR_2 . METHOD_2 ( VAR_3 ) ) VAR VAR ( IF IF ( COND ( VAR_1 != null ) && ( ( VAR_1 . size ( ) ) > 0 ) ) COND ( VAR_1 != null ) && ( ( VAR_1 . size ( ) ) > 0 ) ( THEN THEN (  params . METHOD_1 ( VAR_1 . get ( 0 ) ) )  params . METHOD_1 ( VAR_1 . get ( 0 ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Version ) TYPE org.ovirt.engine.core.compat.Version ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  this . VAR_1 = VAR_1 )  this . VAR_1 = VAR_1 (  this . VAR_2 = VAR_2 )  this . VAR_2 = VAR_2 (  this . VAR_3 = VAR_3 )  this . VAR_3 = VAR_3 (  VAR_5 = ( ( java.lang.Boolean ) ( TYPE_1 . METHOD_2 ( VAR_6 , VAR_1 . toString ( ) ) ) ) )  VAR_5 = ( ( java.lang.Boolean ) ( TYPE_1 . METHOD_2 ( VAR_6 , VAR_1 . toString ( ) ) ) ) (  METHOD_3 ( ) . setIsChangable ( METHOD_4 ( ) ) )  METHOD_3 ( ) . setIsChangable ( METHOD_4 ( ) ) (  METHOD_5 ( ) )  METHOD_5 ( ) (  METHOD_6 ( VAR_4 ) )  METHOD_6 ( VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN java.util.Map<java.lang.String,org.ovirt.engine.core.common.businessentities.network> ) RETURN java.util.Map<java.lang.String,org.ovirt.engine.core.common.businessentities.network> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<java.lang.String,org.ovirt.engine.core.common.businessentities.network> ) TYPE java.util.Map<java.lang.String,org.ovirt.engine.core.common.businessentities.network> ( NAME map ) NAME map ( INIT = new java.util.HashMap < java.lang.String , org.ovirt.engine.core.common.businessentities . network > ( ) ) INIT = new java.util.HashMap < java.lang.String , org.ovirt.engine.core.common.businessentities . network > ( ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.network ) TYPE org.ovirt.engine.core.common.businessentities.network ( NAME VAR_1 ) NAME VAR_1 ( INIT = new org.ovirt.engine.core.common.businessentities . network ( ) ) INIT = new org.ovirt.engine.core.common.businessentities . network ( ) ) VAR VAR (  VAR_1 . METHOD_2 ( STRING_1 ) )  VAR_1 . METHOD_2 ( STRING_1 ) (  VAR_1 . METHOD_3 ( INT_1 ) )  VAR_1 . METHOD_3 ( INT_1 ) (  map . put ( STRING_1 , VAR_1 ) )  map . put ( STRING_1 , VAR_1 ) (  return map ; )  return map ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND TYPE_1 . getInstance ( ) . METHOD_2 ( ) ) COND TYPE_1 . getInstance ( ) . METHOD_2 ( ) ( THEN THEN ( VAR VAR ( TYPE java.util.List<TYPE_2<org.ovirt.engine.core.common.businessentities.StoragePool>> ) TYPE java.util.List<TYPE_2<org.ovirt.engine.core.common.businessentities.StoragePool>> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_3 . getInstance ( ) . METHOD_3 ( STRING_1 , METHOD_4 ( ) ) ) INIT = TYPE_3 . getInstance ( ) . METHOD_3 ( STRING_1 , METHOD_4 ( ) ) ) VAR VAR ( IF IF ( COND ( VAR_1 != null ) && ( ( VAR_1 . size ( ) ) > 0 ) ) COND ( VAR_1 != null ) && ( ( VAR_1 . size ( ) ) > 0 ) ( THEN THEN (  getTable ( ) . METHOD_5 ( new TYPE_4 < org.ovirt.engine.core.common.businessentities.StoragePool > ( VAR_2 . METHOD_6 ( ) , VAR_1 ) ) )  getTable ( ) . METHOD_5 ( new TYPE_4 < org.ovirt.engine.core.common.businessentities.StoragePool > ( VAR_2 . METHOD_6 ( ) , VAR_1 ) ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( METHOD_4 ( ) . getEntity ( ) ) ) )  VAR_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( METHOD_4 ( ) . getEntity ( ) ) ) (  VAR_1 . METHOD_5 ( TYPE_2 . METHOD_3 ( METHOD_6 ( ) . getEntity ( ) ) ) )  VAR_1 . METHOD_5 ( TYPE_2 . METHOD_3 ( METHOD_6 ( ) . getEntity ( ) ) ) (  VAR_1 . METHOD_7 ( TYPE_2 . METHOD_3 ( METHOD_8 ( ) . getEntity ( ) ) ) )  VAR_1 . METHOD_7 ( TYPE_2 . METHOD_3 ( METHOD_8 ( ) . getEntity ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME entity ) NAME entity ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  entity . setId ( VAR_1 ) )  entity . setId ( VAR_1 ) ( FIELD FIELD ( MODIFIER private static final ) MODIFIER private static final ( TYPE long ) TYPE long ( NAME VAR_2 ) NAME VAR_2 ( INIT = INT_1 ) INIT = INT_1 ) FIELD FIELD ( STATIC-BLOCK STATIC-BLOCK (  add ( entity ) )  add ( entity ) ) STATIC-BLOCK STATIC-BLOCK (  return new java.util.ArrayList < TYPE_1 > ( ) { private static final long VAR_2 = INT_1 ; { add ( entity ) ; } } ; )  return new java.util.ArrayList < TYPE_1 > ( ) { private static final long VAR_2 = INT_1 ; { add ( entity ) ; } } ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.network.Network ) TYPE org.ovirt.engine.core.common.businessentities.network.Network ( NAME network ) NAME network ( INIT = ( ( org.ovirt.engine.core.common.businessentities.network.Network ) ( getSelectedItem ( ) ) ) ) INIT = ( ( org.ovirt.engine.core.common.businessentities.network.Network ) ( getSelectedItem ( ) ) ) ) VAR VAR ( IF IF ( COND ( getWindow ( ) ) != null ) COND ( getWindow ( ) ) != null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( network , this ) ) INIT = new TYPE_2 ( network , this ) ) VAR VAR (  METHOD_2 ( VAR_1 ) )  METHOD_2 ( VAR_1 ) (  VAR_1 . METHOD_3 ( ) . setItems ( TYPE_3 . METHOD_4 ( getEntity ( ) ) ) )  VAR_1 . METHOD_3 ( ) . setItems ( TYPE_3 . METHOD_4 ( getEntity ( ) ) ) (  VAR_1 . METHOD_3 ( ) . setSelectedItem ( getEntity ( ) ) )  VAR_1 . METHOD_3 ( ) . setSelectedItem ( getEntity ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( METHOD_3 ( null ) ) )  VAR_1 . METHOD_2 ( METHOD_3 ( null ) ) (  VAR_2 . add ( VAR_3 ) )  VAR_2 . add ( VAR_3 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_2 ( VAR_5 ) ) INIT = new TYPE_2 ( VAR_5 ) ) VAR VAR (  METHOD_4 ( VAR_4 ) )  METHOD_4 ( VAR_4 ) ( TRY TRY ( BLOCK BLOCK (  METHOD_5 ( ) )  METHOD_5 ( ) (  TYPE_3 . METHOD_6 ( STRING_1 ) )  TYPE_3 . METHOD_6 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_6 ) NAME VAR_6 ( BLOCK BLOCK (  METHOD_7 ( VAR_6 , VAR_7 , VAR_4 ) )  METHOD_7 ( VAR_6 , VAR_7 , VAR_4 ) ) BLOCK BLOCK ) CATCH CATCH ( FINALLY FINALLY (  VAR_2 . METHOD_8 ( ) )  VAR_2 . METHOD_8 ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  METHOD_3 ( ) )  METHOD_3 ( ) ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_5 ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . < java.util.List < org.ovirt.engine.core.common.businessentities.VM > > getReturnValue ( ) ) )  METHOD_5 ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . < java.util.List < org.ovirt.engine.core.common.businessentities.VM > > getReturnValue ( ) ) ) BLOCK BLOCK ) METHOD METHOD (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new TYPE_1 ( METHOD_4 ( ) . getSelectedItem ( ) . getId ( ) , VAR_2 . getId ( ) ) , new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { METHOD_5 ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . < java.util.List < org.ovirt.engine.core.common.businessentities.VM > > getReturnValue ( ) ) ; } } ) ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new TYPE_1 ( METHOD_4 ( ) . getSelectedItem ( ) . getId ( ) , VAR_2 . getId ( ) ) , new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { METHOD_5 ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . < java.util.List < org.ovirt.engine.core.common.businessentities.VM > > getReturnValue ( ) ) ; } } ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( METHOD_3 ( ) ) )  METHOD_2 ( METHOD_3 ( ) ) (  METHOD_4 ( METHOD_5 ( ) ) )  METHOD_4 ( METHOD_5 ( ) ) (  VAR_1 . METHOD_6 ( ) )  VAR_1 . METHOD_6 ( ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ( INIT = resource . get ( ) ) INIT = resource . get ( ) ) VAR VAR (  assertEquals ( VAR_2 [ 0 ] , model . getId ( ) ) )  assertEquals ( VAR_2 [ 0 ] , model . getId ( ) ) (  METHOD_7 ( model ) )  METHOD_7 ( model ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_1 ( false ) ) INIT = new TYPE_1 ( false ) ) VAR VAR (  VAR_3 . METHOD_2 ( TYPE_2 . METHOD_3 ( ) . getStoragePoolId ( ) ) )  VAR_3 . METHOD_2 ( TYPE_2 . METHOD_3 ( ) . getStoragePoolId ( ) ) (  VAR_3 . METHOD_4 ( VAR_1 ) )  VAR_3 . METHOD_4 ( VAR_1 ) (  VAR_3 . METHOD_5 ( VAR_2 ) )  VAR_3 . METHOD_5 ( VAR_2 ) (  VAR_3 . METHOD_6 ( VAR_4 ) )  VAR_3 . METHOD_6 ( VAR_4 ) (  METHOD_7 ( VAR_5 , VAR_3 , METHOD_8 ( ) ) )  METHOD_7 ( VAR_5 , VAR_3 , METHOD_8 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  model . METHOD_2 ( VAR_1 ) )  model . METHOD_2 ( VAR_1 ) (  model . METHOD_3 ( VAR_2 ) )  model . METHOD_3 ( VAR_2 ) (  model . setId ( TYPE_2 . toString ( ) ) )  model . setId ( TYPE_2 . toString ( ) ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME entity ) NAME entity ( INIT = TYPE_4 . map ( model , null ) ) INIT = TYPE_4 . map ( model , null ) ) VAR VAR (  TYPE_5 . METHOD_4 ( entity ) )  TYPE_5 . METHOD_4 ( entity ) (  TYPE_5 . assertEquals ( entity . METHOD_5 ( ) , VAR_3 ) )  TYPE_5 . assertEquals ( entity . METHOD_5 ( ) , VAR_3 ) (  TYPE_5 . assertEquals ( entity . getModel ( ) , VAR_4 ) )  TYPE_5 . assertEquals ( entity . getModel ( ) , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.Object> ) TYPE java.util.Map<java.lang.String,java.lang.Object> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.HashMap < > ( ) ) INIT = new java.util.HashMap < > ( ) ) VAR VAR ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.Object> ) TYPE java.util.Map<java.lang.String,java.lang.Object> ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_1 . METHOD_2 ( VAR_1 ) ) INIT = TYPE_1 . METHOD_2 ( VAR_1 ) ) VAR VAR (  TYPE_1 . METHOD_3 ( TYPE_1 . METHOD_4 ( ) , VAR_2 , false ) )  TYPE_1 . METHOD_3 ( TYPE_1 . METHOD_4 ( ) , VAR_2 , false ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ( NAME iface ) NAME iface ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source ; )  return source ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } (  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new TYPE_1 ( VAR_1 , iface ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new TYPE_1 ( VAR_1 , iface ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ) TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ( NAME VAR_1 ) NAME VAR_1 ( INIT = new org.ovirt.engine.core.common.businessentities.VDSGroup ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.VDSGroup ( ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDSGroup> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDSGroup> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ( ) ) INIT = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ( ) ) VAR VAR (  VAR_2 . add ( VAR_1 ) )  VAR_2 . add ( VAR_1 ) (  TYPE_1 . when ( VAR_3 . METHOD_2 ( TYPE_2 . any ( VAR_4 . Guid class ) ) ) . thenReturn ( VAR_2 ) )  TYPE_1 . when ( VAR_3 . METHOD_2 ( TYPE_2 . any ( VAR_4 . Guid class ) ) ) . thenReturn ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.Disk ) TYPE TYPE_1.Disk ( NAME model ) NAME model ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  model . METHOD_3 ( ) . METHOD_4 ( null ) )  model . METHOD_3 ( ) . METHOD_4 ( null ) (  METHOD_5 ( METHOD_6 ( ) ) )  METHOD_5 ( METHOD_6 ( ) ) (  VAR_1 . METHOD_7 ( ) )  VAR_1 . METHOD_7 ( ) ( TRY TRY ( BLOCK BLOCK (  VAR_2 . add ( model ) )  VAR_2 . add ( model ) (  METHOD_8 ( STRING_1 ) )  METHOD_8 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( BLOCK BLOCK (  METHOD_9 ( VAR_3 , STRING_2 , STRING_3 , STRING_4 ) )  METHOD_9 ( VAR_3 , STRING_2 , STRING_3 , STRING_4 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( METHOD_3 ( ) ) )  METHOD_2 ( METHOD_3 ( ) ) (  METHOD_4 ( 1 , METHOD_5 ( ) ) )  METHOD_4 ( 1 , METHOD_5 ( ) ) (  METHOD_4 ( VAR_1 , VAR_2 class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { TYPE_1 . toString ( ) } , null ) )  METHOD_4 ( VAR_1 , VAR_2 class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { TYPE_1 . toString ( ) } , null ) (  VAR_3 . METHOD_6 ( ) )  VAR_3 . METHOD_6 ( ) ( TRY TRY ( BLOCK BLOCK (  resource . get ( ) )  resource . get ( ) (  METHOD_7 ( STRING_2 ) )  METHOD_7 ( STRING_2 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( BLOCK BLOCK (  METHOD_8 ( VAR_4 ) )  METHOD_8 ( VAR_4 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ( INIT = ( ( TYPE_1 ) ( target ) ) ) INIT = ( ( TYPE_1 ) ( target ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDSGroup> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDSGroup> ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( returnValue ) ) ) INIT = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( returnValue ) ) ) VAR VAR (  model . METHOD_1 ( model , TYPE_2 . METHOD_2 ( VAR_2 ) , VAR_1 , vm . METHOD_3 ( ) . getValue ( ) ) )  model . METHOD_1 ( model , TYPE_2 . METHOD_2 ( VAR_2 ) , VAR_1 , vm . METHOD_3 ( ) . getValue ( ) ) (  METHOD_4 ( ) )  METHOD_4 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) ) ) )  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) ) ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_3 ( ) ) INIT = METHOD_3 ( ) ) VAR VAR (  VAR_2 . METHOD_4 ( TYPE_4 . METHOD_5 ( METHOD_6 ( 0 , VAR_3 ) ) ) )  VAR_2 . METHOD_4 ( TYPE_4 . METHOD_5 ( METHOD_6 ( 0 , VAR_3 ) ) ) (  METHOD_7 ( true , VAR_2 ) )  METHOD_7 ( true , VAR_2 ) (  TYPE_5 . METHOD_8 ( cmd . validate ( ) ) )  TYPE_5 . METHOD_8 ( cmd . validate ( ) ) (  TYPE_5 . METHOD_9 ( cmd . getReturnValue ( ) . METHOD_10 ( ) . METHOD_11 ( TYPE_6 . toString ( ) ) ) )  TYPE_5 . METHOD_9 ( cmd . getReturnValue ( ) . METHOD_10 ( ) . METHOD_11 ( TYPE_6 . toString ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME validator ) NAME validator ( INIT = new TYPE_1 ( TYPE_2 . METHOD_2 ( ) . get ( TYPE_2 . METHOD_3 ( ) . getId ( ) ) ) ) INIT = new TYPE_1 ( TYPE_2 . METHOD_2 ( ) . get ( TYPE_2 . METHOD_3 ( ) . getId ( ) ) ) ) VAR VAR (  return ( ( ( validate ( validator . METHOD_4 ( ) ) ) && ( validate ( validator . METHOD_5 ( ) ) ) ) && ( validate ( validator . METHOD_6 ( ) ) ) ) && ( validate ( validator . METHOD_7 ( ) ) ) ; )  return ( ( ( validate ( validator . METHOD_4 ( ) ) ) && ( validate ( validator . METHOD_5 ( ) ) ) ) && ( validate ( validator . METHOD_6 ( ) ) ) ) && ( validate ( validator . METHOD_7 ( ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME template ) NAME template ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN ( IF IF ( COND template == null ) COND template == null ( THEN THEN (  throw new TYPE_2 ( STRING_1 ) ; )  throw new TYPE_2 ( STRING_1 ) ; ) THEN THEN ( ELSE ELSE (  return TYPE_3 . METHOD_1 ( template , null ) ; )  return TYPE_3 . METHOD_1 ( template , null ) ; ) ELSE ELSE ) IF IF ) THEN THEN ( ELSE ELSE (  return TYPE_3 . METHOD_2 ( VAR_1 ) ; )  return TYPE_3 . METHOD_2 ( VAR_1 ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  METHOD_3 ( ) )  METHOD_3 ( ) (  cmd . getVm ( ) . METHOD_4 ( VAR_1 ) )  cmd . getVm ( ) . METHOD_4 ( VAR_1 ) (  METHOD_5 ( 2 ) )  METHOD_5 ( 2 ) (  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( VAR_3 ) . METHOD_6 ( TYPE_1 . any ( ) , TYPE_1 . any ( ) ) )  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( VAR_3 ) . METHOD_6 ( TYPE_1 . any ( ) , TYPE_1 . any ( ) ) (  org.mockito.Mockito.when ( VAR_4 . METHOD_7 ( TYPE_1 . METHOD_8 ( ) , TYPE_1 . any ( ) ) ) . thenReturn ( new TYPE_2 . ValidationResult ( VAR_5 ) ) )  org.mockito.Mockito.when ( VAR_4 . METHOD_7 ( TYPE_1 . METHOD_8 ( ) , TYPE_1 . any ( ) ) ) . thenReturn ( new TYPE_2 . ValidationResult ( VAR_5 ) ) (  TYPE_3 . METHOD_9 ( cmd , VAR_6 ) )  TYPE_3 . METHOD_9 ( cmd , VAR_6 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME returnValue ) NAME returnValue ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  returnValue . METHOD_2 ( true ) )  returnValue . METHOD_2 ( true ) (  returnValue . METHOD_3 ( VAR_1 ) )  returnValue . METHOD_3 ( VAR_1 ) (  org.mockito.Mockito.doReturn ( returnValue ) . when ( METHOD_4 ( ) ) . METHOD_5 ( TYPE_2 . METHOD_6 ( VAR_2 ) , TYPE_2 . any ( VAR_3 class ) ) )  org.mockito.Mockito.doReturn ( returnValue ) . when ( METHOD_4 ( ) ) . METHOD_5 ( TYPE_2 . METHOD_6 ( VAR_2 ) , TYPE_2 . any ( VAR_3 class ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.List<java.lang.Object> ) RETURN java.util.List<java.lang.Object> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.lang.Object> ) TYPE java.util.List<java.lang.Object> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < java.lang.Object > ( ( ( VAR_2 ) * 2 ) ) ) INIT = new java.util.ArrayList < java.lang.Object > ( ( ( VAR_2 ) * 2 ) ) ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < ( ( VAR_2 ) * 2 ) ) COND i < ( ( VAR_2 ) * 2 ) ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK (  VAR_1 . add ( METHOD_2 ( i ) ) )  VAR_1 . add ( METHOD_2 ( i ) ) ) BLOCK BLOCK ) FOR FOR (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( VAR_2 ) )  VAR_1 . METHOD_2 ( VAR_2 ) (  VAR_3 . METHOD_3 ( VAR_2 . METHOD_4 ( ) , new TYPE_2 ( ) ) )  VAR_3 . METHOD_3 ( VAR_2 . METHOD_4 ( ) , new TYPE_2 ( ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_4 . METHOD_5 ( STRING_1 , VAR_2 . getId ( ) , VAR_2 . METHOD_6 ( ) , e ) )  VAR_4 . METHOD_5 ( STRING_1 , VAR_2 . getId ( ) , VAR_2 . METHOD_6 ( ) , e ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source != null ? source : new java.util.HashMap < org.ovirt.engine.core.common.businessentities.VmTemplate , java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > > ( ) ; )  return source != null ? source : new java.util.HashMap < org.ovirt.engine.core.common.businessentities.VmTemplate , java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > > ( ) ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : new java.util.HashMap < org.ovirt.engine.core.common.businessentities.VmTemplate , java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > > ( ) ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : new java.util.HashMap < org.ovirt.engine.core.common.businessentities.VmTemplate , java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > > ( ) ; } } ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_1 ( VAR_1 , VAR_2 ) ) INIT = new TYPE_1 ( VAR_1 , VAR_2 ) ) VAR VAR (  VAR_3 . METHOD_2 ( true ) )  VAR_3 . METHOD_2 ( true ) (  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_4 , VAR_3 , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_4 , VAR_3 , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME obj ) NAME obj ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ( INIT = null ) INIT = null ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  returnValue = VAR_2 . METHOD_2 ( ) . METHOD_3 ( obj ) )  returnValue = VAR_2 . METHOD_2 ( ) . METHOD_3 ( obj ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_3 . METHOD_4 ( ( ( ( STRING_1 + ( VAR_2 . METHOD_5 ( ) ) ) + STRING_2 ) + ( obj . METHOD_6 ( ) . getName ( ) ) ) ) )  VAR_3 . METHOD_4 ( ( ( ( STRING_1 + ( VAR_2 . METHOD_5 ( ) ) ) + STRING_2 ) + ( obj . METHOD_6 ( ) . getName ( ) ) ) ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  return returnValue == null ? VAR_1 : returnValue ; )  return returnValue == null ? VAR_1 : returnValue ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN java.util.Map<java.lang.String,TYPE_1<java.lang.String,java.lang.String>> ) RETURN java.util.Map<java.lang.String,TYPE_1<java.lang.String,java.lang.String>> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ! ( TYPE_2 . METHOD_2 ( TYPE_3 . getParameters ( ) . getVm ( ) . METHOD_3 ( ) ) ) ) COND ! ( TYPE_2 . METHOD_2 ( TYPE_3 . getParameters ( ) . getVm ( ) . METHOD_3 ( ) ) ) ( THEN THEN (  return TYPE_4 . METHOD_4 ( TYPE_3 . getParameters ( ) . getVm ( ) . METHOD_3 ( ) , VAR_1 ) ; )  return TYPE_4 . METHOD_4 ( TYPE_3 . getParameters ( ) . getVm ( ) . METHOD_3 ( ) , VAR_1 ) ; ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . getParameters ( ) . METHOD_2 ( new TYPE_2 ( ) ) )  TYPE_1 . getParameters ( ) . METHOD_2 ( new TYPE_2 ( ) ) ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( METHOD_3 ( METHOD_4 ( ) ) ) && ( METHOD_5 ( ) ) ) INIT = ( METHOD_3 ( METHOD_4 ( ) ) ) && ( METHOD_5 ( ) ) ) VAR VAR ( IF IF ( COND ! VAR_1 ) COND ! VAR_1 ( THEN THEN (  TYPE_1 . getVm ( ) . METHOD_6 ( 0 ) )  TYPE_1 . getVm ( ) . METHOD_6 ( 0 ) (  TYPE_1 . getVm ( ) . METHOD_7 ( 0 ) )  TYPE_1 . getVm ( ) . METHOD_7 ( 0 ) (  throw new TYPE_3 ( VAR_2 ) ; )  throw new TYPE_3 ( VAR_2 ) ; ) THEN THEN ) IF IF (  TYPE_4 . METHOD_8 ( TYPE_1 . METHOD_9 ( ) , true ) )  TYPE_4 . METHOD_8 ( TYPE_1 . METHOD_9 ( ) , true ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( TYPE_2 . METHOD_3 ( ) ) ) INIT = METHOD_2 ( TYPE_2 . METHOD_3 ( ) ) ) VAR VAR (  return ( ( ( super . METHOD_1 ( ) ) && ( validate ( VAR_1 . METHOD_4 ( ) ) ) ) && ( validate ( VAR_1 . METHOD_5 ( ) ) ) ) && ( validate ( VAR_1 . METHOD_6 ( ) ) ) ; )  return ( ( ( super . METHOD_1 ( ) ) && ( validate ( VAR_1 . METHOD_4 ( ) ) ) ) && ( validate ( VAR_1 . METHOD_5 ( ) ) ) ) && ( validate ( VAR_1 . METHOD_6 ( ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME command ) NAME command ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME dao ) NAME dao ( INIT = org.mockito.Mockito . METHOD_2 ( VAR_1 class ) ) INIT = org.mockito.Mockito . METHOD_2 ( VAR_1 class ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME pool ) NAME pool ( INIT = new TYPE_3 ( ) ) INIT = new TYPE_3 ( ) ) VAR VAR (  pool . setId ( command . getParameters ( ) . getStoragePoolId ( ) ) )  pool . setId ( command . getParameters ( ) . getStoragePoolId ( ) ) (  org.mockito.Mockito.when ( dao . get ( TYPE_4 . any ( VAR_2 . Guid class ) ) ) . thenReturn ( pool ) )  org.mockito.Mockito.when ( dao . get ( TYPE_4 . any ( VAR_2 . Guid class ) ) ) . thenReturn ( pool ) (  org.mockito.Mockito.doReturn ( dao ) . when ( command ) . METHOD_3 ( ) )  org.mockito.Mockito.doReturn ( dao ) . when ( command ) . METHOD_3 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ( NAME nic ) NAME nic ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  VAR_1 . METHOD_2 ( nic . METHOD_3 ( ) ) )  VAR_1 . METHOD_2 ( nic . METHOD_3 ( ) ) (  VAR_1 . METHOD_4 ( nic . METHOD_5 ( ) ) )  VAR_1 . METHOD_4 ( nic . METHOD_5 ( ) ) (  VAR_1 . METHOD_6 ( nic . METHOD_7 ( ) ) )  VAR_1 . METHOD_6 ( nic . METHOD_7 ( ) ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_2 . METHOD_8 ( nic . METHOD_9 ( ) ) )  VAR_2 . METHOD_8 ( nic . METHOD_9 ( ) ) (  VAR_2 . METHOD_10 ( TYPE_3 . METHOD_11 ( VAR_1 ) ) )  VAR_2 . METHOD_10 ( TYPE_3 . METHOD_11 ( VAR_1 ) ) (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.network ) TYPE org.ovirt.engine.core.common.businessentities.network ( NAME network ) NAME network ( INIT = ( ( org.ovirt.engine.core.common.businessentities . network ) ( METHOD_2 ( ) . getSelectedItem ( ) ) ) ) INIT = ( ( org.ovirt.engine.core.common.businessentities . network ) ( METHOD_2 ( ) . getSelectedItem ( ) ) ) ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( METHOD_3 ( ) ) && ( network != null ) ) && ( ! ( network . getId ( ) . equals ( VAR_2 ) ) ) ) INIT = ( ( METHOD_3 ( ) ) && ( network != null ) ) && ( ! ( network . getId ( ) . equals ( VAR_2 ) ) ) ) VAR VAR (  METHOD_4 ( ) . setIsChangable ( VAR_1 ) )  METHOD_4 ( ) . setIsChangable ( VAR_1 ) (  METHOD_5 ( ) . setIsChangable ( VAR_1 ) )  METHOD_5 ( ) . setIsChangable ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME map ) NAME map ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME entity ) NAME entity ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME template ) NAME template ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ( INIT = ( template != null ) ? template : new TYPE_1 ( ) ) INIT = ( template != null ) ? template : new TYPE_1 ( ) ) VAR VAR (  model . setId ( entity . METHOD_1 ( ) . toString ( ) ) )  model . setId ( entity . METHOD_1 ( ) . toString ( ) ) (  model . METHOD_2 ( entity . METHOD_3 ( ) ) )  model . METHOD_2 ( entity . METHOD_3 ( ) ) (  model . METHOD_4 ( entity . METHOD_5 ( ) ) )  model . METHOD_4 ( entity . METHOD_5 ( ) ) (  return model ; )  return model ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StoragePool ) TYPE org.ovirt.engine.core.common.businessentities.StoragePool ( NAME VAR_1 ) NAME VAR_1 ( INIT = new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ) VAR VAR (  VAR_1 . METHOD_2 ( VAR_2 ) )  VAR_1 . METHOD_2 ( VAR_2 ) (  org.mockito.Mockito.when ( VAR_3 . get ( TYPE_1 . any ( VAR_4 . Guid class ) ) ) . thenReturn ( VAR_1 ) )  org.mockito.Mockito.when ( VAR_3 . get ( TYPE_1 . any ( VAR_4 . Guid class ) ) ) . thenReturn ( VAR_1 ) (  org.mockito.Mockito.when ( command . getStoragePoolId ( ) ) . thenReturn ( VAR_5 ) )  org.mockito.Mockito.when ( command . getStoragePoolId ( ) ) . thenReturn ( VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN org.ovirt.engine.core.common.businessentities.StorageDomain ) RETURN org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ) TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME VAR_2 ) NAME VAR_2 ( INIT = null ) INIT = null ) VAR VAR ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_1 . METHOD_2 ( ) ) INIT = TYPE_1 . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  VAR_2 = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) )  VAR_2 = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) (  VAR_2 . METHOD_3 ( ) . METHOD_4 ( new TYPE_2 ( ) ) )  VAR_2 . METHOD_3 ( ) . METHOD_4 ( new TYPE_2 ( ) ) (  VAR_3 = TYPE_1 . METHOD_5 ( VAR_2 ) )  VAR_3 = TYPE_1 . METHOD_5 ( VAR_2 ) ) THEN THEN ) IF IF (  org.mockito.Mockito.doReturn ( METHOD_6 ( VAR_3 ) ) . when ( VAR_4 ) . METHOD_7 ( TYPE_3 . METHOD_8 ( VAR_5 ) , TYPE_3 . any ( VAR_6 class ) ) )  org.mockito.Mockito.doReturn ( METHOD_6 ( VAR_3 ) ) . when ( VAR_4 ) . METHOD_7 ( TYPE_3 . METHOD_8 ( VAR_5 ) , TYPE_3 . any ( VAR_6 class ) ) (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> ) RETURN java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) == null ) COND ( VAR_1 ) == null ( THEN THEN (  VAR_1 = TYPE_1 . METHOD_2 ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( TYPE_2 . METHOD_5 ( ) ) , true , true ) )  VAR_1 = TYPE_1 . METHOD_2 ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( TYPE_2 . METHOD_5 ( ) ) , true , true ) ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . getInstance ( ) . METHOD_2 ( ) ) INIT = TYPE_2 . getInstance ( ) . METHOD_2 ( ) ) VAR VAR (  VAR_1 . METHOD_3 ( TYPE_2 . getInstance ( ) . METHOD_4 ( ) ) )  VAR_1 . METHOD_3 ( TYPE_2 . getInstance ( ) . METHOD_4 ( ) ) (  VAR_1 . METHOD_3 ( TYPE_2 . getInstance ( ) . METHOD_5 ( ) ) )  VAR_1 . METHOD_3 ( TYPE_2 . getInstance ( ) . METHOD_5 ( ) ) (  VAR_1 . METHOD_3 ( TYPE_2 . getInstance ( ) . METHOD_6 ( ) ) )  VAR_1 . METHOD_3 ( TYPE_2 . getInstance ( ) . METHOD_6 ( ) ) (  getModel ( ) . setItems ( VAR_1 ) )  getModel ( ) . setItems ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( getWindow ( ) ) != null ) COND ( getWindow ( ) ) != null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ( INIT = TYPE_2 . METHOD_2 ( getEntity ( ) , getEntity ( ) . getStoragePoolId ( ) , cluster . METHOD_3 ( ) , ( ( java.util.ArrayList < TYPE_3 > ) ( METHOD_4 ( ) ) ) , ( ( TYPE_3 ) ( getSelectedItem ( ) ) ) , this ) ) INIT = TYPE_2 . METHOD_2 ( getEntity ( ) , getEntity ( ) . getStoragePoolId ( ) , cluster . METHOD_3 ( ) , ( ( java.util.ArrayList < TYPE_3 > ) ( METHOD_4 ( ) ) ) , ( ( TYPE_3 ) ( getSelectedItem ( ) ) ) , this ) ) VAR VAR (  METHOD_5 ( model ) )  METHOD_5 ( model ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN java.util.Map<java.lang.String,java.lang.Object> ) RETURN java.util.Map<java.lang.String,java.lang.Object> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ) TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ( NAME cluster ) NAME cluster ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.Object> ) TYPE java.util.Map<java.lang.String,java.lang.Object> ( NAME parameters ) NAME parameters ( INIT = new java.util.HashMap < java.lang.String , java.lang.Object > ( ) ) INIT = new java.util.HashMap < java.lang.String , java.lang.Object > ( ) ) VAR VAR ( IF IF ( COND vm != null ) COND vm != null ( THEN THEN (  parameters . put ( VAR_1 . VM , vm ) )  parameters . put ( VAR_1 . VM , vm ) ) THEN THEN ) IF IF ( IF IF ( COND ( cluster . METHOD_2 ( ) ) != null ) COND ( cluster . METHOD_2 ( ) ) != null ( THEN THEN (  parameters . METHOD_3 ( cluster . METHOD_2 ( ) ) )  parameters . METHOD_3 ( cluster . METHOD_2 ( ) ) ) THEN THEN ) IF IF (  return parameters ; )  return parameters ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN ( IF IF ( COND VAR_1 . METHOD_2 ( ) ) COND VAR_1 . METHOD_2 ( ) ( THEN THEN (  TYPE_2 . METHOD_3 ( VAR_2 class , VAR_1 . METHOD_4 ( ) , true ) )  TYPE_2 . METHOD_3 ( VAR_2 class , VAR_1 . METHOD_4 ( ) , true ) ) THEN THEN ) IF IF ( IF IF ( COND VAR_1 . METHOD_5 ( ) ) COND VAR_1 . METHOD_5 ( ) ( THEN THEN (  TYPE_2 . METHOD_3 ( VAR_3 class , VAR_1 . METHOD_6 ( ) , true ) )  TYPE_2 . METHOD_3 ( VAR_3 class , VAR_1 . METHOD_6 ( ) , true ) ) THEN THEN ) IF IF ( IF IF ( COND VAR_1 . METHOD_7 ( ) ) COND VAR_1 . METHOD_7 ( ) ( THEN THEN (  TYPE_2 . METHOD_3 ( VAR_4 class , VAR_1 . METHOD_8 ( ) , true ) )  TYPE_2 . METHOD_3 ( VAR_4 class , VAR_1 . METHOD_8 ( ) , true ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( STRING_1 ) ) INIT = TYPE_1 . METHOD_2 ( STRING_1 ) ) VAR VAR (  TYPE_2 . METHOD_3 ( STRING_2 , VAR_1 ) )  TYPE_2 . METHOD_3 ( STRING_2 , VAR_1 ) (  TYPE_2 . assertEquals ( STRING_3 , ( - 1 ) , VAR_2 ) )  TYPE_2 . assertEquals ( STRING_3 , ( - 1 ) , VAR_2 ) (  VAR_1 = TYPE_1 . METHOD_2 ( STRING_4 ) )  VAR_1 = TYPE_1 . METHOD_2 ( STRING_4 ) (  TYPE_2 . METHOD_4 ( STRING_5 , VAR_1 ) )  TYPE_2 . METHOD_4 ( STRING_5 , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  model . setTitle ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_2 ( ) ) )  model . setTitle ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_2 ( ) ) (  model . METHOD_3 ( STRING_1 ) )  model . METHOD_3 ( STRING_1 ) (  model . METHOD_4 ( vm ) )  model . METHOD_4 ( vm ) (  model . METHOD_5 ( new org.ovirt.engine.ui.uicommonweb.UICommand ( STRING_2 , VAR_1 ) . setTitle ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_6 ( ) ) . METHOD_7 ( true ) ) )  model . METHOD_5 ( new org.ovirt.engine.ui.uicommonweb.UICommand ( STRING_2 , VAR_1 ) . setTitle ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_6 ( ) ) . METHOD_7 ( true ) ) (  model . METHOD_8 ( ) )  model . METHOD_8 ( ) (  return model ; )  return model ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.Object> ) TYPE java.util.Map<java.lang.String,java.lang.Object> ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . METHOD_1 ( VAR_1 . METHOD_2 ( ) ) ) INIT = VAR_3 . METHOD_1 ( VAR_1 . METHOD_2 ( ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_1 ( VAR_2 ) ) INIT = new TYPE_1 ( VAR_2 ) ) VAR VAR (  return VAR_4 ; )  return VAR_4 ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_5 ) NAME VAR_5 ( BLOCK BLOCK (  throw new TYPE_4 ( VAR_5 ) ; )  throw new TYPE_4 ( VAR_5 ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( VAR_1 , false ) ) INIT = METHOD_2 ( VAR_1 , false ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  VAR_2 . METHOD_3 ( VAR_3 ) )  VAR_2 . METHOD_3 ( VAR_3 ) (  VAR_2 . METHOD_4 ( ) )  VAR_2 . METHOD_4 ( ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_2 . METHOD_5 ( ) ) INIT = VAR_2 . METHOD_5 ( ) ) VAR VAR (  METHOD_6 ( false , VAR_4 , 1 , VAR_1 ) )  METHOD_6 ( false , VAR_4 , 1 , VAR_1 ) (  METHOD_7 ( 1 , VAR_1 ) )  METHOD_7 ( 1 , VAR_1 ) (  METHOD_8 ( TYPE_3 . METHOD_9 ( VAR_2 ) , 1 ) )  METHOD_8 ( TYPE_3 . METHOD_9 ( VAR_2 ) , 1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.DiskImage ) TYPE TYPE_1.DiskImage ( NAME diskImage ) NAME diskImage ( INIT = new TYPE_1 . DiskImage ( ) ) INIT = new TYPE_1 . DiskImage ( ) ) VAR VAR (  diskImage . METHOD_2 ( new java.util.ArrayList ( TYPE_2 . METHOD_3 ( VAR_1 ) ) ) )  diskImage . METHOD_2 ( new java.util.ArrayList ( TYPE_2 . METHOD_3 ( VAR_1 ) ) ) ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ( INIT = new org.ovirt.engine.core.common.businessentities.VM ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.VM ( ) ) VAR VAR (  vm . METHOD_4 ( VAR_2 ) )  vm . METHOD_4 ( VAR_2 ) (  vm . METHOD_5 ( VAR_3 ) )  vm . METHOD_5 ( VAR_3 ) (  org.mockito.Mockito.doReturn ( METHOD_6 ( false ) ) . when ( VAR_4 ) . METHOD_7 ( VAR_3 ) )  org.mockito.Mockito.doReturn ( METHOD_6 ( false ) ) . when ( VAR_4 ) . METHOD_7 ( VAR_3 ) (  TYPE_3 . assertEquals ( false , VAR_5 . METHOD_8 ( vm , diskImage ) . METHOD_9 ( ) ) )  TYPE_3 . assertEquals ( false , VAR_5 . METHOD_8 ( vm , diskImage ) . METHOD_9 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1.ValidationResult ) RETURN TYPE_1.ValidationResult ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME value ) NAME value ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( ( VAR_3 . length ( ) ) + VAR_1 ) + 1 ) <= ( METHOD_3 ( ) ) ) INIT = ( ( ( VAR_3 . length ( ) ) + VAR_1 ) + 1 ) <= ( METHOD_3 ( ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1.ValidationResult ) TYPE TYPE_1.ValidationResult ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_1 . ValidationResult ( ) ) INIT = new TYPE_1 . ValidationResult ( ) ) VAR VAR (  VAR_4 . METHOD_4 ( VAR_2 ) )  VAR_4 . METHOD_4 ( VAR_2 ) ( IF IF ( COND ! VAR_2 ) COND ! VAR_2 ( THEN THEN (  VAR_4 . METHOD_5 ( TYPE_2 . METHOD_6 ( METHOD_7 ( ) ) ) )  VAR_4 . METHOD_5 ( TYPE_2 . METHOD_6 ( METHOD_7 ( ) ) ) ) THEN THEN ) IF IF (  return VAR_4 ; )  return VAR_4 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ! ( super . METHOD_1 ( ) ) ) COND ! ( super . METHOD_1 ( ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( IF IF ( COND ( METHOD_2 ( ) . getStatus ( ) ) == ( VAR_1 ) ) COND ( METHOD_2 ( ) . getStatus ( ) ) == ( VAR_1 ) ( THEN THEN (  METHOD_3 ( VAR_2 , METHOD_2 ( ) . METHOD_4 ( ) ) )  METHOD_3 ( VAR_2 , METHOD_2 ( ) . METHOD_4 ( ) ) ) THEN THEN ) IF IF (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  return ! ( TYPE_1 . METHOD_2 ( ( ( java.lang.String ) ( METHOD_3 ( ) . getEntity ( ) ) ) ) ) ; )  return ! ( TYPE_1 . METHOD_2 ( ( ( java.lang.String ) ( METHOD_3 ( ) . getEntity ( ) ) ) ) ) ; ) THEN THEN ( ELSE ELSE (  return ! ( TYPE_1 . METHOD_2 ( ( ( java.lang.String ) ( METHOD_4 ( ) . getEntity ( ) ) ) ) ) ; )  return ! ( TYPE_1 . METHOD_2 ( ( ( java.lang.String ) ( METHOD_4 ( ) . getEntity ( ) ) ) ) ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VmTemplate> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VmTemplate> ( NAME list ) NAME list ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR ( IF IF ( COND source != null ) COND source != null ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.VmTemplate ) TYPE org.ovirt.engine.core.common.businessentities.VmTemplate ( NAME template ) NAME template ( IN ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmTemplate > ) ( source ) ) ) IN ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmTemplate > ) ( source ) ) ( BLOCK BLOCK ( IF IF ( COND ( template . getStatus ( ) ) == ( VAR_1 ) ) COND ( template . getStatus ( ) ) == ( VAR_1 ) ( THEN THEN (  list . add ( template ) )  list . add ( template ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  TYPE_1 . METHOD_2 ( list , new TYPE_2 ( ) ) )  TYPE_1 . METHOD_2 ( list , new TYPE_2 ( ) ) ) THEN THEN ) IF IF (  return list ; )  return list ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME action ) NAME action ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  action . METHOD_2 ( TYPE_3 . METHOD_3 ( TYPE_4 ) ) )  action . METHOD_2 ( TYPE_3 . METHOD_3 ( TYPE_4 ) ) (  action . METHOD_4 ( new TYPE_5 ( ) ) )  action . METHOD_4 ( new TYPE_5 ( ) ) (  action . METHOD_5 ( ) . METHOD_6 ( VAR_1 ) )  action . METHOD_5 ( ) . METHOD_6 ( VAR_1 ) (  return TYPE_1 . METHOD_7 ( ) . entity ( action ) . METHOD_8 ( ) ; )  return TYPE_1 . METHOD_7 ( ) . entity ( action ) . METHOD_8 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1.VdcActionParametersBase ) RETURN TYPE_1.VdcActionParametersBase ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ) TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME params ) NAME params ( INIT = new TYPE_2 ( VAR_1 . getId ( ) , new org.ovirt.engine.core.compat.Guid ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) ) ) INIT = new TYPE_2 ( VAR_1 . getId ( ) , new org.ovirt.engine.core.compat.Guid ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) ) ) VAR VAR (  params . METHOD_4 ( true ) )  params . METHOD_4 ( true ) (  return params ; )  return params ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( ) )  VAR_1 . METHOD_2 ( ) ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( IN ( ( java.util.ArrayList < TYPE_2 > ) ( model . METHOD_3 ( ) ) ) ) IN ( ( java.util.ArrayList < TYPE_2 > ) ( model . METHOD_3 ( ) ) ) ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_3 ( constants ) ) INIT = new TYPE_3 ( constants ) ) VAR VAR (  VAR_3 . METHOD_4 ( VAR_2 ) )  VAR_3 . METHOD_4 ( VAR_2 ) (  VAR_1 . add ( VAR_3 ) )  VAR_1 . add ( VAR_3 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME map ) NAME map ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) . addValue ( STRING_1 , map . METHOD_3 ( ) ) . addValue ( STRING_2 , map . METHOD_4 ( ) ) . addValue ( STRING_3 , map . METHOD_5 ( ) ) . addValue ( STRING_4 , map . METHOD_6 ( ) ) ) INIT = METHOD_2 ( ) . addValue ( STRING_1 , map . METHOD_3 ( ) ) . addValue ( STRING_2 , map . METHOD_4 ( ) ) . addValue ( STRING_3 , map . METHOD_5 ( ) ) . addValue ( STRING_4 , map . METHOD_6 ( ) ) ) VAR VAR (  METHOD_7 ( ) . METHOD_8 ( STRING_5 , VAR_1 ) )  METHOD_7 ( ) . METHOD_8 ( STRING_5 , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( java.util.List < TYPE_1 > ) ( returnValue ) ) ) INIT = ( ( java.util.List < TYPE_1 > ) ( returnValue ) ) ) VAR VAR (  VAR_1 = ( VAR_1 != null ) ? VAR_1 : new java.util.ArrayList < TYPE_1 > ( ) )  VAR_1 = ( VAR_1 != null ) ? VAR_1 : new java.util.ArrayList < TYPE_1 > ( ) (  METHOD_1 ( ) . setItems ( VAR_1 ) )  METHOD_1 ( ) . setItems ( VAR_1 ) (  METHOD_1 ( ) . setSelectedItem ( TYPE_2 . METHOD_2 ( VAR_1 ) ) )  METHOD_1 ( ) . setSelectedItem ( TYPE_2 . METHOD_2 ( VAR_1 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) )  VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.Object> ) TYPE java.util.Map<java.lang.String,java.lang.Object> ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_2 . METHOD_4 ( VAR_2 , VAR_4 ) ) INIT = TYPE_2 . METHOD_4 ( VAR_2 , VAR_4 ) ) VAR VAR (  TYPE_3 . METHOD_5 ( VAR_3 ) . isEmpty ( ) )  TYPE_3 . METHOD_5 ( VAR_3 ) . isEmpty ( ) ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.Object> ) TYPE java.util.Map<java.lang.String,java.lang.Object> ( NAME VAR_5 ) NAME VAR_5 ( INIT = TYPE_2 . METHOD_6 ( VAR_6 , VAR_2 , VAR_4 ) ) INIT = TYPE_2 . METHOD_6 ( VAR_6 , VAR_2 , VAR_4 ) ) VAR VAR (  TYPE_3 . METHOD_5 ( VAR_5 ) . METHOD_7 ( VAR_7 , VAR_8 ) )  TYPE_3 . METHOD_5 ( VAR_5 ) . METHOD_7 ( VAR_7 , VAR_8 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( METHOD_2 ( ) ) < VAR_1 ) COND ( METHOD_2 ( ) ) < VAR_1 ( THEN THEN (  throw new TYPE_2 ( VAR_2 ) ; )  throw new TYPE_2 ( VAR_2 ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME result ) NAME result ( INIT = new java.util.ArrayList < > ( VAR_1 ) ) INIT = new java.util.ArrayList < > ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 ) INIT = VAR_1 ) VAR VAR ( WHILE WHILE ( COND VAR_3 > 0 ) COND VAR_3 > 0 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_3 ( ) ) INIT = METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_4 . METHOD_4 ( VAR_3 ) ) INIT = VAR_4 . METHOD_4 ( VAR_3 ) ) VAR VAR (  VAR_3 -= VAR_5 . size ( ) )  VAR_3 -= VAR_5 . size ( ) (  result . METHOD_5 ( VAR_5 ) )  result . METHOD_5 ( VAR_5 ) ) BLOCK BLOCK ) WHILE WHILE (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME host ) NAME host ( INIT = context . host ) INIT = context . host ) VAR VAR ( IF IF ( COND ( host . METHOD_2 ( ) ) != null ) COND ( host . METHOD_2 ( ) ) != null ( THEN THEN ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 = ( ( org.ovirt.engine.core.common.businessentities.VDSGroup ) ( returnValue ) ) )  VAR_1 = ( ( org.ovirt.engine.core.common.businessentities.VDSGroup ) ( returnValue ) ) (  METHOD_4 ( ) )  METHOD_4 ( ) ) BLOCK BLOCK ) METHOD METHOD (  TYPE_1 . METHOD_3 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 = ( ( org.ovirt.engine.core.common.businessentities.VDSGroup ) ( returnValue ) ) ; METHOD_4 ( ) ; } } , VAR_2 ) , host . METHOD_2 ( ) ) )  TYPE_1 . METHOD_3 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 = ( ( org.ovirt.engine.core.common.businessentities.VDSGroup ) ( returnValue ) ) ; METHOD_4 ( ) ; } } , VAR_2 ) , host . METHOD_2 ( ) ) ) THEN THEN ( ELSE ELSE (  METHOD_4 ( ) )  METHOD_4 ( ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<TYPE_1> ) TYPE java.util.ArrayList<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( java.util.ArrayList < TYPE_1 > ) ( result ) ) ) INIT = ( ( java.util.ArrayList < TYPE_1 > ) ( result ) ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = 0 ) INIT = 0 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = 0 ) INIT = 0 ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_4 . getStatus ( ) ) == ( VAR_5 ) ) COND ( VAR_4 . getStatus ( ) ) == ( VAR_5 ) ( THEN THEN (  VAR_2 ++ )  VAR_2 ++ ) THEN THEN ( ELSE ELSE (  VAR_3 ++ )  VAR_3 ++ ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  METHOD_1 ( VAR_1 . size ( ) ) )  METHOD_1 ( VAR_1 . size ( ) ) (  METHOD_2 ( VAR_2 ) )  METHOD_2 ( VAR_2 ) (  METHOD_3 ( VAR_3 ) )  METHOD_3 ( VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.doReturn ( STRING_1 ) . when ( VAR_1 ) . METHOD_2 ( ) )  org.mockito.Mockito.doReturn ( STRING_1 ) . when ( VAR_1 ) . METHOD_2 ( ) (  VAR_2 = org.mockito.Mockito . METHOD_3 ( new TYPE_1 ( VAR_1 , new TYPE_2 ( ) ) ) )  VAR_2 = org.mockito.Mockito . METHOD_3 ( new TYPE_1 ( VAR_1 , new TYPE_2 ( ) ) ) (  org.mockito.Mockito.doReturn ( VAR_3 ) . doReturn ( VAR_4 ) . when ( VAR_2 ) . METHOD_4 ( TYPE_3 . any ( VAR_5 . List class ) ) )  org.mockito.Mockito.doReturn ( VAR_3 ) . doReturn ( VAR_4 ) . when ( VAR_2 ) . METHOD_4 ( TYPE_3 . any ( VAR_5 . List class ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN org.ovirt.engine.core.compat.Guid ) RETURN org.ovirt.engine.core.compat.Guid ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( VAR_1 , VAR_3 ) ) INIT = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( VAR_1 , VAR_3 ) ) VAR VAR ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME map ) NAME map ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK ( IF IF ( COND METHOD_4 ( map . METHOD_5 ( ) ) ) COND METHOD_4 ( map . METHOD_5 ( ) ) ( THEN THEN (  return map . METHOD_5 ( ) ; )  return map . METHOD_5 ( ) ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF (  return VAR_4 ; )  return VAR_4 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) . METHOD_3 ( getVm ( ) . METHOD_4 ( ) , getVm ( ) . METHOD_5 ( ) ) )  METHOD_2 ( ) . METHOD_3 ( getVm ( ) . METHOD_4 ( ) , getVm ( ) . METHOD_5 ( ) ) (  METHOD_6 ( getVm ( ) . METHOD_4 ( ) ) )  METHOD_6 ( getVm ( ) . METHOD_4 ( ) ) (  METHOD_2 ( ) . METHOD_7 ( ) )  METHOD_2 ( ) . METHOD_7 ( ) (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StoragePool ) TYPE org.ovirt.engine.core.common.businessentities.StoragePool ( NAME pool ) NAME pool ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) . getStoragePoolId ( ) ) INIT = METHOD_2 ( ) . getStoragePoolId ( ) ) VAR VAR ( IF IF ( COND pool != null ) COND pool != null ( THEN THEN (  pool . setId ( VAR_1 ) )  pool . setId ( VAR_1 ) ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = org.mockito.Mockito . METHOD_3 ( VAR_3 class ) ) INIT = org.mockito.Mockito . METHOD_3 ( VAR_3 class ) ) VAR VAR (  org.mockito.Mockito.when ( VAR_2 . get ( VAR_1 , METHOD_4 ( ) . getId ( ) , METHOD_2 ( ) . METHOD_5 ( ) ) ) . thenReturn ( pool ) )  org.mockito.Mockito.when ( VAR_2 . get ( VAR_1 , METHOD_4 ( ) . getId ( ) , METHOD_2 ( ) . METHOD_5 ( ) ) ) . thenReturn ( pool ) (  org.mockito.Mockito.when ( METHOD_6 ( ) . METHOD_7 ( ) ) . thenReturn ( VAR_2 ) )  org.mockito.Mockito.when ( METHOD_6 ( ) . METHOD_7 ( ) ) . thenReturn ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) . METHOD_5 ( ) ) )  TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) . METHOD_5 ( ) ) (  TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( ) . METHOD_4 ( VAR_2 ) . METHOD_5 ( ) ) )  TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( ) . METHOD_4 ( VAR_2 ) . METHOD_5 ( ) ) (  TYPE_1 . METHOD_2 ( ( ( VAR_3 . METHOD_6 ( ) . size ( ) ) == 2 ) ) )  TYPE_1 . METHOD_2 ( ( ( VAR_3 . METHOD_6 ( ) . size ( ) ) == 2 ) ) (  TYPE_2 . METHOD_3 ( ) . METHOD_7 ( ) )  TYPE_2 . METHOD_3 ( ) . METHOD_7 ( ) (  TYPE_1 . METHOD_2 ( VAR_3 . METHOD_6 ( ) . isEmpty ( ) ) )  TYPE_1 . METHOD_2 ( VAR_3 . METHOD_6 ( ) . isEmpty ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ( STRING_1 + ( VAR_2 ) ) , VAR_3 . VM ) ) INIT = new TYPE_1 ( ( STRING_1 + ( VAR_2 ) ) , VAR_3 . VM ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2<TYPE_1> ) TYPE TYPE_2<TYPE_1> ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_2 ( VAR_1 ) ) INIT = METHOD_2 ( VAR_1 ) ) VAR VAR (  VAR_4 . METHOD_3 ( ) )  VAR_4 . METHOD_3 ( ) (  TYPE_3 . METHOD_4 ( ( ( VAR_5 ) == ( VAR_4 . METHOD_5 ( ) . getReturnValue ( ) ) ) ) )  TYPE_3 . METHOD_4 ( ( ( VAR_5 ) == ( VAR_4 . METHOD_5 ( ) . getReturnValue ( ) ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME runQuery ) NAME runQuery ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.VdcQueryType ) TYPE TYPE_1.VdcQueryType ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_1 ( VAR_2 , VAR_3 ) )  METHOD_1 ( VAR_2 , VAR_3 ) ( VAR VAR ( TYPE TYPE_1.VdcQueryReturnValue ) TYPE TYPE_1.VdcQueryReturnValue ( NAME result ) NAME result ( INIT = VAR_4 . runQuery ( VAR_1 , VAR_2 ) ) INIT = VAR_4 . runQuery ( VAR_1 , VAR_2 ) ) VAR VAR (  return result . getSucceeded ( ) ? result . getReturnValue ( ) : null ; )  return result . getSucceeded ( ) ? result . getReturnValue ( ) : null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN TYPE_1.Disk ) RETURN TYPE_1.Disk ( NAME getModel ) NAME getModel ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.Disk ) TYPE TYPE_1.Disk ( NAME model ) NAME model ( INIT = new TYPE_1 . Disk ( ) ) INIT = new TYPE_1 . Disk ( ) ) VAR VAR (  model . METHOD_1 ( ( INT_1 * INT_2 ) ) )  model . METHOD_1 ( ( INT_1 * INT_2 ) ) (  model . METHOD_2 ( TYPE_2 . value ( ) ) )  model . METHOD_2 ( TYPE_2 . value ( ) ) (  model . METHOD_3 ( TYPE_3 . value ( ) ) )  model . METHOD_3 ( TYPE_3 . value ( ) ) (  model . METHOD_4 ( true ) )  model . METHOD_4 ( true ) (  model . METHOD_5 ( false ) )  model . METHOD_5 ( false ) (  model . METHOD_6 ( false ) )  model . METHOD_6 ( false ) (  model . METHOD_7 ( false ) )  model . METHOD_7 ( false ) (  model . METHOD_8 ( true ) )  model . METHOD_8 ( true ) (  return model ; )  return model ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME context ) NAME context ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME status ) NAME status ( INIT = TYPE_5 . METHOD_2 ( VAR_1 ) ) INIT = TYPE_5 . METHOD_2 ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_3 ( status ) ) INIT = METHOD_3 ( status ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_4 ( status ) ) INIT = METHOD_4 ( status ) ) VAR VAR ( VAR VAR ( TYPE TYPE_7 ) TYPE TYPE_7 ( NAME VAR_5 ) NAME VAR_5 ( INIT = TYPE_8 . METHOD_5 ( TYPE_9 . METHOD_6 ( VAR_3 ) . METHOD_7 ( ) ) ) INIT = TYPE_8 . METHOD_5 ( TYPE_9 . METHOD_6 ( VAR_3 ) . METHOD_7 ( ) ) ) VAR VAR (  VAR_2 . append ( VAR_6 . METHOD_8 ( VAR_5 , VAR_4 ) ) )  VAR_2 . append ( VAR_6 . METHOD_8 ( VAR_5 , VAR_4 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND METHOD_2 ( ) ) COND METHOD_2 ( ) ( THEN THEN ( IF IF ( COND ( getParameters ( ) . METHOD_3 ( ) ) == ( VAR_1 ) ) COND ( getParameters ( ) . METHOD_3 ( ) ) == ( VAR_1 ) ( THEN THEN (  return METHOD_4 ( ) . METHOD_5 ( ) ; )  return METHOD_4 ( ) . METHOD_5 ( ) ; ) THEN THEN ) IF IF (  return METHOD_4 ( ) . METHOD_6 ( ) ; )  return METHOD_4 ( ) . METHOD_6 ( ) ; ) THEN THEN ) IF IF (  return METHOD_5 ( ) ; )  return METHOD_5 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( ( ( METHOD_2 ( ) ) != null ) && ( ( METHOD_3 ( ) ) != null ) ) && ( ( METHOD_4 ( ) ) != null ) ) COND ( ( ( METHOD_2 ( ) ) != null ) && ( ( METHOD_3 ( ) ) != null ) ) && ( ( METHOD_4 ( ) ) != null ) ( THEN THEN (  VAR_1 = ( ( ( METHOD_5 ( ) ) * ( METHOD_3 ( ) ) ) / FLOAT_1 ) - ( ( METHOD_2 ( ) ) + ( METHOD_4 ( ) ) ) )  VAR_1 = ( ( ( METHOD_5 ( ) ) * ( METHOD_3 ( ) ) ) / FLOAT_1 ) - ( ( METHOD_2 ( ) ) + ( METHOD_4 ( ) ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME parameters ) NAME parameters ( INIT = new TYPE_1 ( METHOD_2 ( 2 , true ) , true ) ) INIT = new TYPE_1 ( METHOD_2 ( 2 , true ) , true ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME command ) NAME command ( INIT = new TYPE_2 ( parameters ) ) INIT = new TYPE_2 ( parameters ) ) VAR VAR (  cmd = org.mockito.Mockito . METHOD_3 ( command ) )  cmd = org.mockito.Mockito . METHOD_3 ( command ) (  METHOD_4 ( cmd ) )  METHOD_4 ( cmd ) (  TYPE_3 . METHOD_5 ( cmd , VAR_1 ) )  TYPE_3 . METHOD_5 ( cmd , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME tempVar ) NAME tempVar ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  tempVar . METHOD_2 ( 1 ) )  tempVar . METHOD_2 ( 1 ) (  tempVar . METHOD_3 ( INT_1 ) )  tempVar . METHOD_3 ( INT_1 ) (  METHOD_4 ( ) . METHOD_5 ( new TYPE_2 [ ] { new TYPE_3 ( ) , tempVar } ) )  METHOD_4 ( ) . METHOD_5 ( new TYPE_2 [ ] { new TYPE_3 ( ) , tempVar } ) (  return METHOD_4 ( ) . METHOD_6 ( ) ; )  return METHOD_4 ( ) . METHOD_6 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME vds ) NAME vds ( INIT = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) . get ( TYPE_1 . getParameters ( ) . METHOD_4 ( ) ) ) INIT = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) . get ( TYPE_1 . getParameters ( ) . METHOD_4 ( ) ) ) VAR VAR ( IF IF ( COND vds != null ) COND vds != null ( THEN THEN (  vds . METHOD_5 ( TYPE_2 . METHOD_6 ( vds . METHOD_7 ( ) , vds . METHOD_8 ( ) ) ) )  vds . METHOD_5 ( TYPE_2 . METHOD_6 ( vds . METHOD_7 ( ) , vds . METHOD_8 ( ) ) ) ) THEN THEN ) IF IF (  TYPE_1 . METHOD_9 ( ) . METHOD_10 ( vds ) )  TYPE_1 . METHOD_9 ( ) . METHOD_10 ( vds ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = null ) INIT = null ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_1 = new TYPE_2 ( VAR_2 ) )  VAR_1 = new TYPE_2 ( VAR_2 ) (  VAR_3 . METHOD_1 ( VAR_1 ) )  VAR_3 . METHOD_1 ( VAR_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( BLOCK BLOCK (  VAR_5 . METHOD_2 ( STRING_1 , VAR_2 , VAR_3 . METHOD_3 ( VAR_6 ) ) )  VAR_5 . METHOD_2 ( STRING_1 , VAR_2 , VAR_3 . METHOD_3 ( VAR_6 ) ) ) BLOCK BLOCK ) CATCH CATCH ( FINALLY FINALLY ( TRY TRY ( BLOCK BLOCK ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN (  VAR_1 . METHOD_4 ( ) )  VAR_1 . METHOD_4 ( ) ) THEN THEN ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( BLOCK BLOCK (  VAR_5 . error ( STRING_2 , VAR_4 ) )  VAR_5 . error ( STRING_2 , VAR_4 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) FINALLY FINALLY ) TRY TRY (  return this ; )  return this ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . assertEquals ( STRING_1 , STRING_2 , VAR_1 . METHOD_2 ( STRING_1 ) ) )  TYPE_1 . assertEquals ( STRING_1 , STRING_2 , VAR_1 . METHOD_2 ( STRING_1 ) ) (  TYPE_1 . METHOD_3 ( STRING_3 , VAR_1 . METHOD_2 ( STRING_4 ) ) )  TYPE_1 . METHOD_3 ( STRING_3 , VAR_1 . METHOD_2 ( STRING_4 ) ) (  TYPE_1 . METHOD_3 ( STRING_5 , VAR_1 . METHOD_2 ( null ) ) )  TYPE_1 . METHOD_3 ( STRING_5 , VAR_1 . METHOD_2 ( null ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND source != null ) COND source != null ( THEN THEN ( VAR VAR ( TYPE java.util.ArrayList<TYPE_1> ) TYPE java.util.ArrayList<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) INIT = ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) VAR VAR (  return VAR_1 . isEmpty ( ) ; )  return VAR_1 . isEmpty ( ) ; ) THEN THEN ) IF IF (  return source ; )  return source ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < TYPE_1 > VAR_1 = ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ; return VAR_1 . isEmpty ( ) ; } return source ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < TYPE_1 > VAR_1 = ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ; return VAR_1 . isEmpty ( ) ; } return source ; } } (  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new TYPE_2 ( ( STRING_1 + name ) , VAR_3 . StorageDomain ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new TYPE_2 ( ( STRING_1 + name ) , VAR_3 . StorageDomain ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( VAR_2 , VAR_3 ) ) INIT = new TYPE_1 ( VAR_2 , VAR_3 ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR (  TYPE_2 . assertEquals ( VAR_2 , VAR_4 ) )  TYPE_2 . assertEquals ( VAR_2 , VAR_4 ) ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_1 . METHOD_3 ( ) ) INIT = VAR_1 . METHOD_3 ( ) ) VAR VAR (  TYPE_2 . assertEquals ( VAR_3 , VAR_5 ) )  TYPE_2 . assertEquals ( VAR_3 , VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) ( FOR-EACH FOR-EACH ( TYPE TYPE_2<org.ovirt.engine.core.compat.Guid,TYPE_3<TYPE_4.VdcActionType,TYPE_4.VdcActionParametersBase>> ) TYPE TYPE_2<org.ovirt.engine.core.compat.Guid,TYPE_3<TYPE_4.VdcActionType,TYPE_4.VdcActionParametersBase>> ( NAME VAR_1 ) NAME VAR_1 ( IN VAR_2 . METHOD_3 ( ) ) IN VAR_2 . METHOD_3 ( ) ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_5<?> ) TYPE TYPE_5<?> ( NAME command ) NAME command ( INIT = TYPE_6 . METHOD_4 ( log ) . METHOD_5 ( VAR_1 . getValue ( ) . METHOD_6 ( ) , VAR_1 . getValue ( ) . METHOD_7 ( ) ) ) INIT = TYPE_6 . METHOD_4 ( log ) . METHOD_5 ( VAR_1 . getValue ( ) . METHOD_6 ( ) , VAR_1 . getValue ( ) . METHOD_7 ( ) ) ) VAR VAR (  command . METHOD_8 ( ) )  command . METHOD_8 ( ) (  VAR_3 . put ( VAR_1 . METHOD_9 ( ) , command ) )  VAR_3 . put ( VAR_1 . METHOD_9 ( ) , command ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME map ) NAME map ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME action ) NAME action ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SWITCH SWITCH ( NAME action ) NAME action ( CASE VAR_2 ( BLOCK BLOCK (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) CASE VAR_2 ( CASE VAR_4 ( BLOCK BLOCK (  return VAR_5 ; )  return VAR_5 ; ) BLOCK BLOCK ) CASE VAR_4 ( CASE VAR_6 ( BLOCK BLOCK (  return VAR_7 ; )  return VAR_7 ; ) BLOCK BLOCK ) CASE VAR_6 ( CASE VAR_8 ( BLOCK BLOCK (  return VAR_9 ; )  return VAR_9 ; ) BLOCK BLOCK ) CASE VAR_8 ( CASE VAR_10 ( BLOCK BLOCK (  return VAR_11 ; )  return VAR_11 ; ) BLOCK BLOCK ) CASE VAR_10 ( DEFAULT DEFAULT ( BLOCK BLOCK (  return null ; )  return null ; ) BLOCK BLOCK ) DEFAULT DEFAULT ) SWITCH SWITCH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( TYPE_1 . METHOD_2 ( ) ) != null ) COND ( TYPE_1 . METHOD_2 ( ) ) != null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( IF IF ( COND ! ( validate ( ) ) ) COND ! ( validate ( ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  METHOD_3 ( ) )  METHOD_3 ( ) (  TYPE_1 . METHOD_4 ( null ) )  TYPE_1 . METHOD_4 ( null ) ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_6 ) NAME METHOD_6 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_7 ( ) )  METHOD_7 ( ) (  METHOD_8 ( ) )  METHOD_8 ( ) ) BLOCK BLOCK ) METHOD METHOD (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_5 ( VAR_1 , getParameters ( ) , new TYPE_2 ( ) { public void METHOD_6 ( TYPE_3 result ) { METHOD_7 ( ) ; METHOD_8 ( ) ; } } , this ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_5 ( VAR_1 , getParameters ( ) , new TYPE_2 ( ) { public void METHOD_6 ( TYPE_3 result ) { METHOD_7 ( ) ; METHOD_8 ( ) ; } } , this ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . getVm ( ) . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) ) )  TYPE_1 . getVm ( ) . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) ) (  TYPE_1 . getVm ( ) . METHOD_2 ( ) . METHOD_5 ( TYPE_1 . getParameters ( ) . METHOD_6 ( ) ) )  TYPE_1 . getVm ( ) . METHOD_2 ( ) . METHOD_5 ( TYPE_1 . getParameters ( ) . METHOD_6 ( ) ) (  return validate ( TYPE_2 . METHOD_1 ( TYPE_1 . getVm ( ) . METHOD_2 ( ) , TYPE_1 . getVdsGroup ( ) . METHOD_7 ( ) ) ) ; )  return validate ( TYPE_2 . METHOD_1 ( TYPE_1 . getVm ( ) . METHOD_2 ( ) , TYPE_1 . getVdsGroup ( ) . METHOD_7 ( ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( java.lang.Boolean ) ( METHOD_2 ( ) . METHOD_3 ( VAR_2 , new TYPE_1 ( getVm ( ) . METHOD_4 ( ) ) ) . getReturnValue ( ) ) ) ) INIT = ( ( java.lang.Boolean ) ( METHOD_2 ( ) . METHOD_3 ( VAR_2 , new TYPE_1 ( getVm ( ) . METHOD_4 ( ) ) ) . getReturnValue ( ) ) ) ) VAR VAR ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  addCanDoActionMessage ( VAR_3 ) )  addCanDoActionMessage ( VAR_3 ) ) THEN THEN ) IF IF (  return ! VAR_1 ; )  return ! VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME obj ) NAME obj ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND obj instanceof org.ovirt.engine.core.common.businessentities.VM ) COND obj instanceof org.ovirt.engine.core.common.businessentities.VM ( THEN THEN (  return ( ( org.ovirt.engine.core.common.businessentities.VM ) ( obj ) ) . METHOD_2 ( ) ; )  return ( ( org.ovirt.engine.core.common.businessentities.VM ) ( obj ) ) . METHOD_2 ( ) ; ) THEN THEN ) IF IF ( IF IF ( COND obj instanceof TYPE_1 ) COND obj instanceof TYPE_1 ( THEN THEN (  return ( ( TYPE_1 ) ( obj ) ) . METHOD_3 ( ) ; )  return ( ( TYPE_1 ) ( obj ) ) . METHOD_3 ( ) ; ) THEN THEN ) IF IF (  throw new TYPE_2 ( ) ; )  throw new TYPE_2 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN org.ovirt.engine.core.compat.Guid ) RETURN org.ovirt.engine.core.compat.Guid ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.DiskImage ) TYPE TYPE_1.DiskImage ( NAME disk ) NAME disk ( INIT = new TYPE_1 . DiskImage ( ) ) INIT = new TYPE_1 . DiskImage ( ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_3 ) NAME VAR_3 ( INIT = org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) INIT = org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) VAR VAR (  disk . setId ( VAR_3 ) )  disk . setId ( VAR_3 ) (  disk . METHOD_3 ( VAR_1 ) )  disk . METHOD_3 ( VAR_1 ) (  VAR_4 . add ( disk ) )  VAR_4 . add ( disk ) (  VAR_5 . add ( METHOD_4 ( VAR_3 , VAR_2 ) ) )  VAR_5 . add ( METHOD_4 ( VAR_3 , VAR_2 ) ) (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  setItems ( ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) ) ) )  setItems ( ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) ) ) (  METHOD_1 ( ( ( ( ( java.util.List ) ( METHOD_2 ( ) ) ) . size ( ) ) == 0 ) ) )  METHOD_1 ( ( ( ( ( java.util.List ) ( METHOD_2 ( ) ) ) . size ( ) ) == 0 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME obj ) NAME obj ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME map ) NAME map ( INIT = METHOD_2 ( obj . getId ( ) ) . addValue ( STRING_1 , obj . getName ( ) ) . addValue ( STRING_2 , obj . METHOD_3 ( ) ) . addValue ( STRING_3 , obj . METHOD_4 ( ) ) ) INIT = METHOD_2 ( obj . getId ( ) ) . addValue ( STRING_1 , obj . getName ( ) ) . addValue ( STRING_2 , obj . METHOD_3 ( ) ) . addValue ( STRING_3 , obj . METHOD_4 ( ) ) ) VAR VAR (  return map ; )  return map ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME sender ) NAME sender ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME args ) NAME args ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( METHOD_2 ( ) . getEntity ( ) ) == null ) COND ( METHOD_2 ( ) . getEntity ( ) ) == null ( THEN THEN (  METHOD_3 ( ) . setIsChangable ( false ) )  METHOD_3 ( ) . setIsChangable ( false ) ) THEN THEN ( ELSE ELSE (  METHOD_3 ( ) . setIsChangable ( ( ( java.lang.Boolean ) ( METHOD_2 ( ) . getEntity ( ) ) ) ) )  METHOD_3 ( ) . setIsChangable ( ( ( java.lang.Boolean ) ( METHOD_2 ( ) . getEntity ( ) ) ) ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME validate ) NAME validate ( BLOCK BLOCK ( IF IF ( COND ( TYPE_1 . getVm ( ) ) == null ) COND ( TYPE_1 . getVm ( ) ) == null ( THEN THEN (  return METHOD_1 ( VAR_1 ) ; )  return METHOD_1 ( VAR_1 ) ; ) THEN THEN ) IF IF ( IF IF ( COND ( TYPE_1 . getVm ( ) . getStatus ( ) ) != ( VAR_2 ) ) COND ( TYPE_1 . getVm ( ) . getStatus ( ) ) != ( VAR_2 ) ( THEN THEN (  return TYPE_1 . METHOD_2 ( ) ; )  return TYPE_1 . METHOD_2 ( ) ; ) THEN THEN ) IF IF ( IF IF ( COND ! ( TYPE_2 . METHOD_3 ( TYPE_1 . getVm ( ) . METHOD_4 ( ) ) ) ) COND ! ( TYPE_2 . METHOD_3 ( TYPE_1 . getVm ( ) . METHOD_4 ( ) ) ) ( THEN THEN (  return METHOD_1 ( VAR_3 ) ; )  return METHOD_1 ( VAR_3 ) ; ) THEN THEN ) IF IF (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_2 ) . METHOD_2 ( VAR_3 ) )  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_2 ) . METHOD_2 ( VAR_3 ) (  org.mockito.Mockito.doReturn ( VAR_4 ) . when ( VAR_1 ) . getStatus ( ) )  org.mockito.Mockito.doReturn ( VAR_4 ) . when ( VAR_1 ) . getStatus ( ) (  org.mockito.Mockito.doReturn ( cluster ) . when ( command ) . METHOD_3 ( ) )  org.mockito.Mockito.doReturn ( cluster ) . when ( command ) . METHOD_3 ( ) (  org.mockito.Mockito.doReturn ( vds ) . when ( command ) . METHOD_4 ( ) )  org.mockito.Mockito.doReturn ( vds ) . when ( command ) . METHOD_4 ( ) (  org.mockito.Mockito.doReturn ( VAR_5 ) . when ( vds ) . getStatus ( ) )  org.mockito.Mockito.doReturn ( VAR_5 ) . when ( vds ) . getStatus ( ) (  org.mockito.Mockito.doReturn ( VAR_6 ) . when ( command ) . METHOD_5 ( ) )  org.mockito.Mockito.doReturn ( VAR_6 ) . when ( command ) . METHOD_5 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( VAR_1 . getName ( ) . METHOD_3 ( ) ) )  VAR_1 . METHOD_2 ( VAR_1 . getName ( ) . METHOD_3 ( ) ) (  VAR_1 . METHOD_4 ( VAR_1 . METHOD_5 ( ) . METHOD_3 ( ) ) )  VAR_1 . METHOD_4 ( VAR_1 . METHOD_5 ( ) . METHOD_3 ( ) ) (  VAR_1 . METHOD_6 ( false ) )  VAR_1 . METHOD_6 ( false ) (  dao . METHOD_7 ( VAR_1 ) )  dao . METHOD_7 ( VAR_1 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ( INIT = dao . get ( VAR_1 . getId ( ) ) ) INIT = dao . get ( VAR_1 . getId ( ) ) ) VAR VAR (  TYPE_2 . METHOD_8 ( result ) )  TYPE_2 . METHOD_8 ( result ) (  TYPE_2 . assertEquals ( VAR_1 , result ) )  TYPE_2 . assertEquals ( VAR_1 , result ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_2<TYPE_3>> ) TYPE java.util.List<TYPE_2<TYPE_3>> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_3> ) TYPE java.util.List<TYPE_3> ( NAME VAR_3 ) NAME VAR_3 ( INIT = new java.util.ArrayList < TYPE_3 > ( VAR_1 . METHOD_2 ( ) ) ) INIT = new java.util.ArrayList < TYPE_3 > ( VAR_1 . METHOD_2 ( ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_3> ) TYPE java.util.List<TYPE_3> ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_3 ) INIT = VAR_3 ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_2<TYPE_3> ) TYPE TYPE_2<TYPE_3> ( NAME VAR_5 ) NAME VAR_5 ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK (  VAR_4 = TYPE_4 . METHOD_3 ( VAR_4 , VAR_5 ) )  VAR_4 = TYPE_4 . METHOD_3 ( VAR_4 , VAR_5 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ( IF IF ( COND ( VAR_4 . size ( ) ) > 0 ) COND ( VAR_4 . size ( ) ) > 0 ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF (  return VAR_1 . METHOD_2 ( ) . map ( TYPE_2 : : METHOD_3 ) . METHOD_4 ( ) . METHOD_5 ( TYPE_3 . METHOD_6 ( STRING_1 ) ) ; )  return VAR_1 . METHOD_2 ( ) . map ( TYPE_2 : : METHOD_3 ) . METHOD_4 ( ) . METHOD_5 ( TYPE_3 . METHOD_6 ( STRING_1 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( ( ( java.lang.String ) ( METHOD_3 ( ) . getSelectedItem ( ) ) ) ) )  VAR_1 . METHOD_2 ( ( ( java.lang.String ) ( METHOD_3 ( ) . getSelectedItem ( ) ) ) ) (  METHOD_3 ( ) . setItems ( new java.util.ArrayList < java.lang.String > ( VAR_1 . METHOD_4 ( ) ) ) )  METHOD_3 ( ) . setItems ( new java.util.ArrayList < java.lang.String > ( VAR_1 . METHOD_4 ( ) ) ) (  METHOD_3 ( ) . setSelectedItem ( TYPE_1 . METHOD_5 ( VAR_1 . METHOD_4 ( ) ) ) )  METHOD_3 ( ) . setSelectedItem ( TYPE_1 . METHOD_5 ( VAR_1 . METHOD_4 ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<java.lang.String,TYPE_1> ) TYPE java.util.Map<java.lang.String,TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.HashMap < java.lang.String , TYPE_1 > ( ) ) INIT = new java.util.HashMap < java.lang.String , TYPE_1 > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.Network ) TYPE org.ovirt.engine.core.common.businessentities.Network ( NAME network ) NAME network ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK (  VAR_3 . put ( network . METHOD_2 ( ) , new TYPE_2 ( network ) ) )  VAR_3 . put ( network . METHOD_2 ( ) , new TYPE_2 ( network ) ) (  VAR_1 . put ( network . METHOD_2 ( ) , new TYPE_1 ( network , this ) ) )  VAR_1 . put ( network . METHOD_2 ( ) , new TYPE_1 ( network , this ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  METHOD_3 ( VAR_1 ) )  METHOD_3 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  vm . METHOD_3 ( VAR_1 ) )  vm . METHOD_3 ( VAR_1 ) (  METHOD_4 ( TYPE_1 . METHOD_5 ( ) , true ) )  METHOD_4 ( TYPE_1 . METHOD_5 ( ) , true ) (  METHOD_6 ( ) )  METHOD_6 ( ) (  org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_7 ( ) )  org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_7 ( ) (  command . METHOD_8 ( ) )  command . METHOD_8 ( ) (  TYPE_2 . METHOD_9 ( command ) )  TYPE_2 . METHOD_9 ( command ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.uicommonweb.UICommand ) TYPE org.ovirt.engine.ui.uicommonweb.UICommand ( NAME command ) NAME command ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  super . METHOD_1 ( command ) )  super . METHOD_1 ( command ) ( IF IF ( COND command == ( METHOD_2 ( ) ) ) COND command == ( METHOD_2 ( ) ) ( THEN THEN (  METHOD_3 ( ) )  METHOD_3 ( ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND command == ( METHOD_4 ( ) ) ) COND command == ( METHOD_4 ( ) ) ( THEN THEN (  METHOD_5 ( ) )  METHOD_5 ( ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND TYPE_1 . METHOD_6 ( command . getName ( ) , STRING_1 ) ) COND TYPE_1 . METHOD_6 ( command . getName ( ) , STRING_1 ) ( THEN THEN (  METHOD_7 ( ) )  METHOD_7 ( ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND TYPE_1 . METHOD_6 ( command . getName ( ) , STRING_2 ) ) COND TYPE_1 . METHOD_6 ( command . getName ( ) , STRING_2 ) ( THEN THEN (  METHOD_8 ( ) )  METHOD_8 ( ) ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME params ) NAME params ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  params . METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) )  params . METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) (  params . METHOD_4 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) )  params . METHOD_4 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) (  cmd = org.mockito.Mockito . METHOD_5 ( new TYPE_2 < TYPE_1 > ( params ) ) )  cmd = org.mockito.Mockito . METHOD_5 ( new TYPE_2 < TYPE_1 > ( params ) ) (  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( cmd ) . METHOD_6 ( ) )  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( cmd ) . METHOD_6 ( ) (  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( cmd ) . METHOD_7 ( ) )  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( cmd ) . METHOD_7 ( ) (  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( cmd ) . METHOD_8 ( ) )  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( cmd ) . METHOD_8 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND source == null ) COND source == null ( THEN THEN (  return new java.util.ArrayList < TYPE_2 > ( ) ; )  return new java.util.ArrayList < TYPE_2 > ( ) ; ) THEN THEN ) IF IF (  return source ; )  return source ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < TYPE_2 > ( ) ; } return source ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < TYPE_2 > ( ) ; } return source ; } } (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new TYPE_3 ( VAR_1 ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new TYPE_3 ( VAR_1 ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  org.mockito.Mockito . METHOD_2 ( frontend , org.mockito.Mockito . METHOD_3 ( VAR_1 ) ) . METHOD_4 ( TYPE_2 . METHOD_5 ( VAR_3 ) , TYPE_2 . METHOD_6 ( VAR_4 class ) , VAR_5 . METHOD_7 ( ) , TYPE_2 . METHOD_5 ( false ) , TYPE_2 . METHOD_5 ( VAR_2 ) ) )  org.mockito.Mockito . METHOD_2 ( frontend , org.mockito.Mockito . METHOD_3 ( VAR_1 ) ) . METHOD_4 ( TYPE_2 . METHOD_5 ( VAR_3 ) , TYPE_2 . METHOD_6 ( VAR_4 class ) , VAR_5 . METHOD_7 ( ) , TYPE_2 . METHOD_5 ( false ) , TYPE_2 . METHOD_5 ( VAR_2 ) ) (  return VAR_5 . METHOD_8 ( ) ; )  return VAR_5 . METHOD_8 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ( INIT = TYPE_1 . METHOD_2 ( ) ) INIT = TYPE_1 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_3 ( vm , new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ) ) INIT = VAR_2 . METHOD_3 ( vm , new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ) ) VAR VAR (  TYPE_2 . METHOD_4 ( VAR_1 ) )  TYPE_2 . METHOD_4 ( VAR_1 ) ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME VAR_3 ) NAME VAR_3 ( INIT = new org.ovirt.engine.core.common.businessentities.VM ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.VM ( ) ) VAR VAR (  VAR_2 . METHOD_5 ( VAR_1 , VAR_3 , new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) , new java.util.ArrayList < TYPE_3 > ( ) ) )  VAR_2 . METHOD_5 ( VAR_1 , VAR_3 , new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) , new java.util.ArrayList < TYPE_3 > ( ) ) (  METHOD_6 ( vm , VAR_3 , vm . METHOD_7 ( ) ) )  METHOD_6 ( vm , VAR_3 , vm . METHOD_7 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_2 ( ) ) INIT = VAR_2 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR (  TYPE_1 . METHOD_3 ( VAR_1 , VAR_3 ) )  TYPE_1 . METHOD_3 ( VAR_1 , VAR_3 ) (  VAR_2 . METHOD_4 ( VAR_3 ) )  VAR_2 . METHOD_4 ( VAR_3 ) (  dao . METHOD_4 ( VAR_2 . getId ( ) , VAR_3 , false ) )  dao . METHOD_4 ( VAR_2 . getId ( ) , VAR_3 , false ) (  TYPE_1 . assertEquals ( VAR_3 , dao . get ( VAR_2 . getId ( ) ) . METHOD_2 ( ) ) )  TYPE_1 . assertEquals ( VAR_3 , dao . get ( VAR_2 . getId ( ) ) . METHOD_2 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND METHOD_2 ( ) ) COND METHOD_2 ( ) ( THEN THEN (  addCanDoActionMessage ( VAR_1 ) )  addCanDoActionMessage ( VAR_1 ) (  TYPE_1 . getReturnValue ( ) . METHOD_3 ( ) . add ( java.lang.String . METHOD_4 ( STRING_1 , VAR_2 < java.lang.Integer > METHOD_5 ( VAR_3 ) ) ) )  TYPE_1 . getReturnValue ( ) . METHOD_3 ( ) . add ( java.lang.String . METHOD_4 ( STRING_1 , VAR_2 < java.lang.Integer > METHOD_5 ( VAR_3 ) ) ) (  return false ; )  return false ; ) THEN THEN ) IF IF (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ) INIT = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 ( VAR_1 ) ) INIT = new TYPE_2 ( VAR_1 ) ) VAR VAR (  VAR_2 . METHOD_4 ( new TYPE_3 ( VAR_3 . VM , VAR_1 ) ) )  VAR_2 . METHOD_4 ( new TYPE_3 ( VAR_3 . VM , VAR_1 ) ) (  VAR_2 . METHOD_5 ( VAR_2 ) )  VAR_2 . METHOD_5 ( VAR_2 ) (  VAR_2 . METHOD_6 ( VAR_4 ) )  VAR_2 . METHOD_6 ( VAR_4 ) ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME returnValue ) NAME returnValue ( INIT = METHOD_7 ( VAR_4 , VAR_2 ) ) INIT = METHOD_7 ( VAR_4 , VAR_2 ) ) VAR VAR ( IF IF ( COND returnValue . getSucceeded ( ) ) COND returnValue . getSucceeded ( ) ( THEN THEN (  METHOD_8 ( returnValue . METHOD_9 ( ) ) )  METHOD_8 ( returnValue . METHOD_9 ( ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME equals ) NAME equals ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME obj ) NAME obj ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( this ) == obj ) COND ( this ) == obj ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ( IF IF ( COND obj == null ) COND obj == null ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( IF IF ( COND ( METHOD_1 ( ) ) != ( obj . METHOD_1 ( ) ) ) COND ( METHOD_1 ( ) ) != ( obj . METHOD_1 ( ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME other ) NAME other ( INIT = ( ( TYPE_1 ) ( obj ) ) ) INIT = ( ( TYPE_1 ) ( obj ) ) ) VAR VAR ( IF IF ( COND ( length ) != ( other . length ) ) COND ( length ) != ( other . length ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_1 ) != ( VAR_2 ) ) COND ( VAR_1 ) != ( VAR_2 ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source != null ? ( ( org.ovirt.engine.core.common.businessentities.StorageDomain ) ( source ) ) : null ; )  return source != null ? ( ( org.ovirt.engine.core.common.businessentities.StorageDomain ) ( source ) ) : null ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( org.ovirt.engine.core.common.businessentities.StorageDomain ) ( source ) ) : null ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( org.ovirt.engine.core.common.businessentities.StorageDomain ) ( source ) ) : null ; } } (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME result ) NAME result ( INIT = null ) INIT = null ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_2 . METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) , ( VAR_2 == null ? STRING_1 : VAR_2 ) ) . toString ( ) ) INIT = TYPE_2 . METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) , ( VAR_2 == null ? STRING_1 : VAR_2 ) ) . toString ( ) ) VAR VAR ( IF IF ( COND ( VAR_2 != null ) && ( TYPE_3 . METHOD_5 ( VAR_3 ) ) ) COND ( VAR_2 != null ) && ( TYPE_3 . METHOD_5 ( VAR_3 ) ) ( THEN THEN (  result = VAR_3 )  result = VAR_3 ) THEN THEN ( ELSE ELSE (  VAR_4 . error ( ( ( STRING_2 + VAR_3 ) + STRING_3 ) ) )  VAR_4 . error ( ( ( STRING_2 + VAR_3 ) + STRING_3 ) ) ) ELSE ELSE ) IF IF (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( STRING_1 , null ) ) INIT = METHOD_2 ( STRING_1 , null ) ) VAR VAR (  VAR_1 . METHOD_3 ( false ) )  VAR_1 . METHOD_3 ( false ) (  cmd = org.mockito.Mockito . METHOD_4 ( new TYPE_2 ( new TYPE_3 ( VAR_2 , STRING_2 , STRING_3 , VAR_3 , null , null , TYPE_4 . METHOD_5 ( VAR_1 ) ) ) ) )  cmd = org.mockito.Mockito . METHOD_4 ( new TYPE_2 ( new TYPE_3 ( VAR_2 , STRING_2 , STRING_3 , VAR_3 , null , null , TYPE_4 . METHOD_5 ( VAR_1 ) ) ) ) (  METHOD_6 ( cmd , VAR_4 ) )  METHOD_6 ( cmd , VAR_4 ) (  TYPE_5 . METHOD_7 ( cmd . validate ( ) ) )  TYPE_5 . METHOD_7 ( cmd . validate ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.Disk ) TYPE TYPE_1.Disk ( NAME disk ) NAME disk ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.Object> ) TYPE java.util.Map<java.lang.String,java.lang.Object> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_3 < > ( ) ) INIT = new TYPE_3 < > ( ) ) VAR VAR (  VAR_1 . put ( VAR_2 , disk . METHOD_2 ( ) ) )  VAR_1 . put ( VAR_2 , disk . METHOD_2 ( ) ) (  VAR_1 . put ( VAR_3 , ( ( disk . METHOD_3 ( ) ) != null ? disk . METHOD_3 ( ) : STRING_1 ) ) )  VAR_1 . put ( VAR_3 , ( ( disk . METHOD_3 ( ) ) != null ? disk . METHOD_3 ( ) : STRING_1 ) ) (  return TYPE_4 . METHOD_4 ( VAR_1 , false ) ; )  return TYPE_4 . METHOD_4 ( VAR_1 , false ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ; )  return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ; } } ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( STRING_1 , VAR_2 . Disk ) ) INIT = new TYPE_1 ( STRING_1 , VAR_2 . Disk ) ) VAR VAR (  VAR_1 . METHOD_2 ( INT_1 ) )  VAR_1 . METHOD_2 ( INT_1 ) (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_3 , VAR_1 , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_3 , VAR_1 , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  disk . METHOD_2 ( STRING_1 ) )  disk . METHOD_2 ( STRING_1 ) (  disk . METHOD_3 ( STRING_2 ) )  disk . METHOD_3 ( STRING_2 ) (  METHOD_4 ( disk , TYPE_1 . METHOD_5 ( TYPE_1 . METHOD_6 ( STRING_1 ) ) , TYPE_1 . METHOD_7 ( TYPE_1 . METHOD_6 ( STRING_2 ) ) , TYPE_1 . METHOD_8 ( INT_1 ) ) )  METHOD_4 ( disk , TYPE_1 . METHOD_5 ( TYPE_1 . METHOD_6 ( STRING_1 ) ) , TYPE_1 . METHOD_7 ( TYPE_1 . METHOD_6 ( STRING_2 ) ) , TYPE_1 . METHOD_8 ( INT_1 ) ) (  TYPE_1 . METHOD_9 ( disk ) )  TYPE_1 . METHOD_9 ( disk ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME map ) NAME map ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME type ) NAME type ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME vm ) NAME vm ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = vm . METHOD_1 ( ) ) INIT = vm . METHOD_1 ( ) ) VAR VAR ( IF IF ( COND VAR_2 == null ) COND VAR_2 == null ( THEN THEN (  VAR_2 = new TYPE_3 ( ) )  VAR_2 = new TYPE_3 ( ) (  vm . METHOD_2 ( VAR_2 ) )  vm . METHOD_2 ( VAR_2 ) ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_2 . METHOD_3 ( ) ) INIT = VAR_2 . METHOD_3 ( ) ) VAR VAR ( IF IF ( COND VAR_3 == null ) COND VAR_3 == null ( THEN THEN (  VAR_3 = new TYPE_4 ( ) )  VAR_3 = new TYPE_4 ( ) (  VAR_2 . METHOD_4 ( VAR_3 ) )  VAR_2 . METHOD_4 ( VAR_3 ) ) THEN THEN ) IF IF (  VAR_3 . METHOD_5 ( VAR_1 ) )  VAR_3 . METHOD_5 ( VAR_1 ) (  VAR_3 . METHOD_6 ( type . value ( ) ) )  VAR_3 . METHOD_6 ( type . value ( ) ) (  return vm ; )  return vm ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME action ) NAME action ( INIT = args . get ( VAR_1 ) ) INIT = args . get ( VAR_1 ) ) VAR VAR ( IF IF ( COND TYPE_2 . equals ( action ) ) COND TYPE_2 . equals ( action ) ( THEN THEN (  METHOD_2 ( ) )  METHOD_2 ( ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND TYPE_3 . equals ( action ) ) COND TYPE_3 . equals ( action ) ( THEN THEN (  METHOD_3 ( ) )  METHOD_3 ( ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND TYPE_4 . equals ( action ) ) COND TYPE_4 . equals ( action ) ( THEN THEN (  METHOD_4 ( ) )  METHOD_4 ( ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND TYPE_5 . equals ( action ) ) COND TYPE_5 . equals ( action ) ( THEN THEN (  validate ( ) )  validate ( ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND TYPE_6 . equals ( action ) ) COND TYPE_6 . equals ( action ) ( THEN THEN (  METHOD_5 ( ) )  METHOD_5 ( ) ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( VAR_2 , new TYPE_3 ( TYPE_4 . getVm ( ) . METHOD_4 ( ) . getValue ( ) , TYPE_4 . getParameters ( ) . METHOD_5 ( ) ) ) ) INIT = TYPE_2 . getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( VAR_2 , new TYPE_3 ( TYPE_4 . getVm ( ) . METHOD_4 ( ) . getValue ( ) , TYPE_4 . getParameters ( ) . METHOD_5 ( ) ) ) ) VAR VAR (  METHOD_6 ( VAR_1 . getSucceeded ( ) ) )  METHOD_6 ( VAR_1 . getSucceeded ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<TYPE_2.DiskImage> ) TYPE TYPE_1<TYPE_2.DiskImage> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_2.DiskImage ) TYPE TYPE_2.DiskImage ( NAME image ) NAME image ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2.DiskImage ) TYPE TYPE_2.DiskImage ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_3 . METHOD_2 ( VAR_2 , image ) ) INIT = TYPE_3 . METHOD_2 ( VAR_2 , image ) ) VAR VAR ( IF IF ( COND VAR_3 == null ) COND VAR_3 == null ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) ( VAR VAR ( TYPE java.lang.Boolean ) TYPE java.lang.Boolean ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ! ( METHOD_3 ( ) . METHOD_4 ( ) ) ) || ( METHOD_3 ( ) . getEntity ( ) ) ) INIT = ( ! ( METHOD_3 ( ) . METHOD_4 ( ) ) ) || ( METHOD_3 ( ) . getEntity ( ) ) ) VAR VAR (  METHOD_5 ( VAR_1 ) )  METHOD_5 ( VAR_1 ) (  METHOD_6 ( ) . METHOD_7 ( VAR_1 ) )  METHOD_6 ( ) . METHOD_7 ( VAR_1 ) (  METHOD_8 ( ) )  METHOD_8 ( ) (  METHOD_9 ( ) . METHOD_7 ( VAR_1 ) )  METHOD_9 ( ) . METHOD_7 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( false ) )  org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( false ) ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 < > ( ) ) INIT = new TYPE_1 < > ( ) ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME result ) NAME result ( INIT = validator . METHOD_2 ( new org.ovirt.engine.core.common.businessentities.VDS ( ) , VAR_2 ) ) INIT = validator . METHOD_2 ( new org.ovirt.engine.core.common.businessentities.VDS ( ) , VAR_2 ) ) VAR VAR (  TYPE_2 . METHOD_3 ( result ) )  TYPE_2 . METHOD_3 ( result ) (  TYPE_2 . assertEquals ( VAR_2 . size ( ) , 1 ) )  TYPE_2 . assertEquals ( VAR_2 . size ( ) , 1 ) (  TYPE_2 . assertEquals ( VAR_2 . get ( 0 ) , STRING_1 ) )  TYPE_2 . assertEquals ( VAR_2 . get ( 0 ) , STRING_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected static ) MODIFIER protected static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME vmId ) NAME vmId ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME returnValue ) NAME returnValue ( INIT = true ) INIT = true ) VAR VAR ( VAR VAR ( TYPE java.util.ArrayList<java.lang.String> ) TYPE java.util.ArrayList<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < java.lang.String > ( ) ) INIT = new java.util.ArrayList < java.lang.String > ( ) ) VAR VAR ( IF IF ( COND TYPE_1 . METHOD_2 ( vmId , VAR_1 ) ) COND TYPE_1 . METHOD_2 ( vmId , VAR_1 ) ( THEN THEN (  returnValue = false )  returnValue = false ) THEN THEN ) IF IF ( IF IF ( COND returnValue ) COND returnValue ( THEN THEN ( IF IF ( COND ! ( TYPE_1 . METHOD_3 ( vmId , VAR_1 ) ) ) COND ! ( TYPE_1 . METHOD_3 ( vmId , VAR_1 ) ) ( THEN THEN (  returnValue = false )  returnValue = false ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return returnValue ; )  return returnValue ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  METHOD_3 ( getParameters ( ) . METHOD_4 ( ) ) )  METHOD_3 ( getParameters ( ) . METHOD_4 ( ) ) (  METHOD_5 ( getParameters ( ) . METHOD_4 ( ) ) )  METHOD_5 ( getParameters ( ) . METHOD_4 ( ) ) (  METHOD_6 ( true ) )  METHOD_6 ( true ) (  METHOD_7 ( METHOD_8 ( ) ) )  METHOD_7 ( METHOD_8 ( ) ) (  METHOD_9 ( ) . METHOD_10 ( ) )  METHOD_9 ( ) . METHOD_10 ( ) (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1<TYPE_2> ) RETURN TYPE_1<TYPE_2> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME parameters ) NAME parameters ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME command ) NAME command ( INIT = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( parameters ) ) ) INIT = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( parameters ) ) ) VAR VAR (  org.mockito.Mockito.when ( command . METHOD_3 ( ) ) . thenReturn ( VAR_1 ) )  org.mockito.Mockito.when ( command . METHOD_3 ( ) ) . thenReturn ( VAR_1 ) (  org.mockito.Mockito.when ( VAR_1 . METHOD_4 ( ) ) . thenReturn ( VAR_2 ) )  org.mockito.Mockito.when ( VAR_1 . METHOD_4 ( ) ) . thenReturn ( VAR_2 ) (  org.mockito.Mockito.when ( VAR_1 . METHOD_5 ( ) ) . thenReturn ( VAR_3 ) )  org.mockito.Mockito.when ( VAR_1 . METHOD_5 ( ) ) . thenReturn ( VAR_3 ) (  org.mockito.Mockito.when ( VAR_1 . METHOD_6 ( ) ) . thenReturn ( VAR_4 ) )  org.mockito.Mockito.when ( VAR_1 . METHOD_6 ( ) ) . thenReturn ( VAR_4 ) (  command . METHOD_7 ( ) )  command . METHOD_7 ( ) (  return command ; )  return command ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( STRING_1 ) )  VAR_1 . METHOD_2 ( STRING_1 ) ( IF IF ( COND ( VAR_2 . size ( ) ) > 0 ) COND ( VAR_2 . size ( ) ) > 0 ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE TYPE_1<?> ) TYPE TYPE_1<?> ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK (  VAR_3 . METHOD_3 ( true ) )  VAR_3 . METHOD_3 ( true ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_4 . size ( ) ) > 0 ) COND ( VAR_4 . size ( ) ) > 0 ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_5 ) NAME VAR_5 ( IN VAR_4 ) IN VAR_4 ( BLOCK BLOCK (  VAR_5 . METHOD_4 ( ) )  VAR_5 . METHOD_4 ( ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF (  VAR_1 . METHOD_2 ( STRING_2 ) )  VAR_1 . METHOD_2 ( STRING_2 ) (  TYPE_3 . METHOD_5 ( 0 ) )  TYPE_3 . METHOD_5 ( 0 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN java.util.HashMap<org.ovirt.engine.core.common.businessentities.VmTemplate,TYPE_1> ) RETURN java.util.HashMap<org.ovirt.engine.core.common.businessentities.VmTemplate,TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.HashMap<org.ovirt.engine.core.common.businessentities.VmTemplate,TYPE_1> ) TYPE java.util.HashMap<org.ovirt.engine.core.common.businessentities.VmTemplate,TYPE_1> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.HashMap < org.ovirt.engine.core.common.businessentities.VmTemplate , TYPE_1 > ( ) ) INIT = new java.util.HashMap < org.ovirt.engine.core.common.businessentities.VmTemplate , TYPE_1 > ( ) ) VAR VAR ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  return VAR_2 ; )  return VAR_2 ; ) THEN THEN ) IF IF ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < ( VAR_3 . length ) ) COND i < ( VAR_3 . length ) ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK (  VAR_2 . put ( getEntity ( i ) , new TYPE_1 ( ) ) )  VAR_2 . put ( getEntity ( i ) , new TYPE_1 ( ) ) ) BLOCK BLOCK ) FOR FOR (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 = org.mockito.Mockito . METHOD_2 ( VAR_2 class ) )  VAR_1 = org.mockito.Mockito . METHOD_2 ( VAR_2 class ) (  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_3 ) . METHOD_3 ( ) )  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_3 ) . METHOD_3 ( ) (  VAR_4 = org.mockito.Mockito . METHOD_2 ( VAR_5 class ) )  VAR_4 = org.mockito.Mockito . METHOD_2 ( VAR_5 class ) (  org.mockito.Mockito.doReturn ( VAR_4 ) . when ( VAR_3 ) . METHOD_4 ( ) )  org.mockito.Mockito.doReturn ( VAR_4 ) . when ( VAR_3 ) . METHOD_4 ( ) (  VAR_6 = org.mockito.Mockito . METHOD_2 ( VAR_7 class ) )  VAR_6 = org.mockito.Mockito . METHOD_2 ( VAR_7 class ) (  org.mockito.Mockito.doReturn ( VAR_6 ) . when ( VAR_3 ) . METHOD_5 ( ) )  org.mockito.Mockito.doReturn ( VAR_6 ) . when ( VAR_3 ) . METHOD_5 ( ) (  org.mockito.Mockito.when ( VAR_6 . get ( VAR_8 ) ) . thenReturn ( VAR_9 ) )  org.mockito.Mockito.when ( VAR_6 . get ( VAR_8 ) ) . thenReturn ( VAR_9 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.when ( METHOD_2 ( ) . METHOD_3 ( ) ) . thenReturn ( VAR_1 ) )  org.mockito.Mockito.when ( METHOD_2 ( ) . METHOD_3 ( ) ) . thenReturn ( VAR_1 ) (  VAR_2 = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ( ) )  VAR_2 = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ( ) (  org.mockito.Mockito.when ( METHOD_4 ( ) . METHOD_5 ( ) ) . thenReturn ( VAR_3 ) )  org.mockito.Mockito.when ( METHOD_4 ( ) . METHOD_5 ( ) ) . thenReturn ( VAR_3 ) (  org.mockito.Mockito.when ( VAR_1 . METHOD_6 ( VAR_3 ) ) . thenReturn ( VAR_2 ) )  org.mockito.Mockito.when ( VAR_1 . METHOD_6 ( VAR_3 ) ) . thenReturn ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ( INIT = ( ( TYPE_1 ) ( getWindow ( ) ) ) ) INIT = ( ( TYPE_1 ) ( getWindow ( ) ) ) ) VAR VAR ( IF IF ( COND ! ( model . validate ( ) ) ) COND ! ( model . validate ( ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2.VdcActionParametersBase ) TYPE TYPE_2.VdcActionParametersBase ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 . VdcActionParametersBase ( ) ) INIT = new TYPE_2 . VdcActionParametersBase ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME tempVar ) NAME tempVar ( INIT = new TYPE_3 ( ( ( org.ovirt.engine.core.common.businessentities.StoragePool ) ( getSelectedItem ( ) ) ) . getId ( ) ) ) INIT = new TYPE_3 ( ( ( org.ovirt.engine.core.common.businessentities.StoragePool ) ( getSelectedItem ( ) ) ) . getId ( ) ) ) VAR VAR (  tempVar . METHOD_2 ( true ) )  tempVar . METHOD_2 ( true ) (  VAR_1 = tempVar )  VAR_1 = tempVar (  org.ovirt.engine.ui.frontend.Frontend . METHOD_3 ( VAR_2 , VAR_1 ) )  org.ovirt.engine.ui.frontend.Frontend . METHOD_3 ( VAR_2 , VAR_1 ) (  METHOD_4 ( ) )  METHOD_4 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( ) . METHOD_4 ( TYPE_3 . getInstance ( ) . METHOD_5 ( ) . METHOD_6 ( ) , VAR_1 < java.lang.String > METHOD_7 ( VAR_2 ) ) ) )  TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( ) . METHOD_4 ( TYPE_3 . getInstance ( ) . METHOD_5 ( ) . METHOD_6 ( ) , VAR_1 < java.lang.String > METHOD_7 ( VAR_2 ) ) ) (  TYPE_4 . METHOD_2 ( TYPE_1 . METHOD_8 ( ) ) )  TYPE_4 . METHOD_2 ( TYPE_1 . METHOD_8 ( ) ) ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 ) INIT = VAR_4 ) VAR VAR (  TYPE_6 . getInstance ( ) . METHOD_9 ( VAR_5 class , VAR_3 ) )  TYPE_6 . getInstance ( ) . METHOD_9 ( VAR_5 class , VAR_3 ) (  org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_10 ( VAR_3 . METHOD_11 ( ) ) )  org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_10 ( VAR_3 . METHOD_11 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) || ( ! ( VAR_2 ) ) ) COND ( VAR_1 ) || ( ! ( VAR_2 ) ) ( THEN THEN (  VAR_3 . METHOD_2 ( ) )  VAR_3 . METHOD_2 ( ) ) THEN THEN ( ELSE ELSE ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME VAR_4 ) NAME VAR_4 ( INIT = ( ( java.lang.String [ ] ) ( VAR_3 . METHOD_3 ( VAR_5 ) ) ) ) INIT = ( ( java.lang.String [ ] ) ( VAR_3 . METHOD_3 ( VAR_5 ) ) ) ) VAR VAR (  VAR_6 . METHOD_4 ( VAR_7 , STRING_1 ) )  VAR_6 . METHOD_4 ( VAR_7 , STRING_1 ) ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_8 ) NAME VAR_8 ( IN VAR_4 ) IN VAR_4 ( BLOCK BLOCK (  VAR_6 . METHOD_4 ( VAR_7 , VAR_8 ) )  VAR_6 . METHOD_4 ( VAR_7 , VAR_8 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) ELSE ELSE ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . getParameters ( ) . METHOD_2 ( ) . setId ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) )  TYPE_1 . getParameters ( ) . METHOD_2 ( ) . setId ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) (  org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_4 ( ) . METHOD_5 ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) ) )  org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_4 ( ) . METHOD_5 ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) ) (  METHOD_6 ( ) )  METHOD_6 ( ) (  TYPE_1 . getReturnValue ( ) . METHOD_7 ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) . getId ( ) ) )  TYPE_1 . getReturnValue ( ) . METHOD_7 ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) . getId ( ) ) (  TYPE_1 . METHOD_8 ( true ) )  TYPE_1 . METHOD_8 ( true ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_2 ) . METHOD_2 ( ) )  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_2 ) . METHOD_2 ( ) (  org.mockito.Mockito.doReturn ( new TYPE_1 . ValidationResult ( VAR_3 ) ) . when ( VAR_2 ) . METHOD_3 ( TYPE_2 . METHOD_4 ( ) ) )  org.mockito.Mockito.doReturn ( new TYPE_1 . ValidationResult ( VAR_3 ) ) . when ( VAR_2 ) . METHOD_3 ( TYPE_2 . METHOD_4 ( ) ) (  TYPE_3 . METHOD_5 ( cmd . METHOD_6 ( ) ) )  TYPE_3 . METHOD_5 ( cmd . METHOD_6 ( ) ) (  org.mockito.Mockito . METHOD_7 ( VAR_2 ) . METHOD_3 ( TYPE_2 . METHOD_4 ( ) ) )  org.mockito.Mockito . METHOD_7 ( VAR_2 ) . METHOD_3 ( TYPE_2 . METHOD_4 ( ) ) (  org.mockito.Mockito . METHOD_7 ( VAR_2 , org.mockito.Mockito . METHOD_8 ( ) ) . METHOD_9 ( TYPE_2 . METHOD_4 ( ) ) )  org.mockito.Mockito . METHOD_7 ( VAR_2 , org.mockito.Mockito . METHOD_8 ( ) ) . METHOD_9 ( TYPE_2 . METHOD_4 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME response ) NAME response ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_2 ( ( ( TYPE_7 ) ( VAR_1 ) ) ) ) INIT = METHOD_2 ( ( ( TYPE_7 ) ( VAR_1 ) ) ) ) VAR VAR (  VAR_1 . METHOD_3 ( VAR_4 , VAR_3 ) )  VAR_1 . METHOD_3 ( VAR_4 , VAR_3 ) (  METHOD_4 ( ( ( TYPE_8 ) ( response ) ) , VAR_1 . METHOD_5 ( ) , VAR_3 ) )  METHOD_4 ( ( ( TYPE_8 ) ( response ) ) , VAR_1 . METHOD_5 ( ) , VAR_3 ) (  VAR_2 . METHOD_1 ( VAR_1 , response ) )  VAR_2 . METHOD_1 ( VAR_1 , response ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( STRING_1 ) ) INIT = new TYPE_1 ( STRING_1 ) ) VAR VAR (  VAR_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( STRING_2 , STRING_3 ) ) )  VAR_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( STRING_2 , STRING_3 ) ) ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > ( TYPE_2 . METHOD_3 ( VAR_1 ) ) ) INIT = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > ( TYPE_2 . METHOD_3 ( VAR_1 ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_3 ( VAR_1 . getId ( ) , VAR_1 . getName ( ) , STRING_4 ) ) INIT = new TYPE_3 ( VAR_1 . getId ( ) , VAR_1 . getName ( ) , STRING_4 ) ) VAR VAR (  TYPE_4 . METHOD_4 ( METHOD_5 ( VAR_2 ) . METHOD_6 ( VAR_3 ) , TYPE_5 . METHOD_7 ( ) ) )  TYPE_4 . METHOD_4 ( METHOD_5 ( VAR_2 ) . METHOD_6 ( VAR_3 ) , TYPE_5 . METHOD_7 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME vds ) NAME vds ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME iface ) NAME iface ) VAR VAR ( VAR VAR ( TYPE java.lang.Object[] ) TYPE java.lang.Object[] ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  vds . METHOD_2 ( ) . add ( iface ) )  vds . METHOD_2 ( ) . add ( iface ) ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME name ) NAME name ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME VAR_2 ) NAME VAR_2 ( IN vds . METHOD_2 ( ) ) IN vds . METHOD_2 ( ) ( BLOCK BLOCK ( IF IF ( COND VAR_2 . getName ( ) . equals ( name . toString ( ) ) ) COND VAR_2 . getName ( ) . equals ( name . toString ( ) ) ( THEN THEN (  VAR_2 . METHOD_3 ( iface . getName ( ) ) )  VAR_2 . METHOD_3 ( iface . getName ( ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( ! ( super . METHOD_1 ( ) ) ) || ( ! ( TYPE_1 . METHOD_2 ( ) ) ) ) COND ( ! ( super . METHOD_1 ( ) ) ) || ( ! ( TYPE_1 . METHOD_2 ( ) ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  VAR_1 = TYPE_1 . METHOD_3 ( ) . get ( TYPE_1 . METHOD_4 ( ) . getId ( ) ) )  VAR_1 = TYPE_1 . METHOD_3 ( ) . get ( TYPE_1 . METHOD_4 ( ) . getId ( ) ) (  TYPE_1 . METHOD_4 ( ) . METHOD_5 ( VAR_1 . METHOD_6 ( ) ) )  TYPE_1 . METHOD_4 ( ) . METHOD_5 ( VAR_1 . METHOD_6 ( ) ) (  return METHOD_7 ( ) ; )  return METHOD_7 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME METHOD_2 ) NAME METHOD_2 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source != null ? ( ( java.lang.Integer ) ( source ) ) . METHOD_3 ( ) : 1 ; )  return source != null ? ( ( java.lang.Integer ) ( source ) ) . METHOD_3 ( ) : 1 ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object METHOD_2 ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . METHOD_3 ( ) : 1 ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object METHOD_2 ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . METHOD_3 ( ) : 1 ; } } (  METHOD_4 ( new TYPE_1 ( VAR_1 , METHOD_5 ( ) ) , aQuery ) )  METHOD_4 ( new TYPE_1 ( VAR_1 , METHOD_5 ( ) ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME parameters ) NAME parameters ( INIT = new TYPE_1 ( TYPE_2 . getVm ( ) . getId ( ) , VAR_1 ) ) INIT = new TYPE_1 ( TYPE_2 . getVm ( ) . getId ( ) , VAR_1 ) ) VAR VAR (  parameters . METHOD_2 ( false ) )  parameters . METHOD_2 ( false ) (  parameters . METHOD_3 ( TYPE_2 . METHOD_4 ( ) ) )  parameters . METHOD_3 ( TYPE_2 . METHOD_4 ( ) ) (  parameters . METHOD_5 ( TYPE_2 . getParameters ( ) ) )  parameters . METHOD_5 ( TYPE_2 . getParameters ( ) ) (  parameters . METHOD_6 ( TYPE_2 . getParameters ( ) . METHOD_7 ( ) ) )  parameters . METHOD_6 ( TYPE_2 . getParameters ( ) . METHOD_7 ( ) ) (  parameters . METHOD_8 ( VAR_2 ) )  parameters . METHOD_8 ( VAR_2 ) (  return parameters ; )  return parameters ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_1 ) ( model ) ) ) INIT = ( ( TYPE_1 ) ( model ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( ( TYPE_3 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) INIT = ( ( TYPE_3 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) VAR VAR ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> ( NAME VAR_4 ) NAME VAR_4 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_3 . METHOD_1 ( ) ) INIT = VAR_3 . METHOD_1 ( ) ) VAR VAR ( WHILE WHILE ( COND VAR_5 . METHOD_2 ( ) ) COND VAR_5 . METHOD_2 ( ) ( BLOCK BLOCK (  VAR_4 . add ( ( ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ) ( VAR_5 . METHOD_3 ( ) ) ) ) )  VAR_4 . add ( ( ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ) ( VAR_5 . METHOD_3 ( ) ) ) ) ) BLOCK BLOCK ) WHILE WHILE (  VAR_2 . METHOD_4 ( VAR_4 ) )  VAR_2 . METHOD_4 ( VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( VAR_2 ) )  VAR_1 . METHOD_2 ( VAR_2 ) (  VAR_1 . METHOD_3 ( VAR_3 ) )  VAR_1 . METHOD_3 ( VAR_3 ) ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StoragePool ) TYPE org.ovirt.engine.core.common.businessentities.StoragePool ( NAME VAR_4 ) NAME VAR_4 ( INIT = new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ) VAR VAR (  VAR_4 . METHOD_4 ( VAR_5 ) )  VAR_4 . METHOD_4 ( VAR_5 ) (  org.mockito.Mockito.when ( VAR_6 . get ( TYPE_1 . any ( VAR_7 . Guid class ) ) ) . thenReturn ( VAR_4 ) )  org.mockito.Mockito.when ( VAR_6 . get ( TYPE_1 . any ( VAR_7 . Guid class ) ) ) . thenReturn ( VAR_4 ) (  TYPE_2 . METHOD_5 ( validator . METHOD_6 ( ) , TYPE_3 . METHOD_7 ( ) ) )  TYPE_2 . METHOD_5 ( validator . METHOD_6 ( ) , TYPE_3 . METHOD_7 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.Map<java.lang.String,org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> ) TYPE java.util.Map<java.lang.String,org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<java.lang.String,org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> ) TYPE java.util.Map<java.lang.String,org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) INIT = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( IN TYPE_1 . getParameters ( ) . METHOD_4 ( ) ) IN TYPE_1 . getParameters ( ) . METHOD_4 ( ) ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_2 . get ( VAR_3 ) ) INIT = VAR_2 . get ( VAR_3 ) ) VAR VAR (  VAR_4 . METHOD_5 ( ) . METHOD_6 ( VAR_3 ) )  VAR_4 . METHOD_5 ( ) . METHOD_6 ( VAR_3 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ( INIT = TYPE_1 . METHOD_2 ( VAR_2 , VAR_3 , VAR_1 ) ) INIT = TYPE_1 . METHOD_2 ( VAR_2 , VAR_3 , VAR_1 ) ) VAR VAR (  org.mockito.Mockito.when ( VAR_4 . METHOD_3 ( TYPE_2 . any ( VAR_5 . Guid class ) ) ) . thenReturn ( TYPE_3 . METHOD_4 ( vm ) ) )  org.mockito.Mockito.when ( VAR_4 . METHOD_3 ( TYPE_2 . any ( VAR_5 . Guid class ) ) ) . thenReturn ( TYPE_3 . METHOD_4 ( vm ) ) (  org.mockito.Mockito.when ( VAR_6 . METHOD_5 ( vm . getId ( ) ) ) . thenReturn ( vm . METHOD_6 ( ) ) )  org.mockito.Mockito.when ( VAR_6 . METHOD_5 ( vm . getId ( ) ) ) . thenReturn ( vm . METHOD_6 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME value ) NAME value ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( VAR_3 , STRING_1 ) )  VAR_1 . METHOD_2 ( VAR_3 , STRING_1 ) (  VAR_1 . METHOD_2 ( VAR_3 , STRING_2 ) )  VAR_1 . METHOD_2 ( VAR_3 , STRING_2 ) (  VAR_1 . METHOD_2 ( VAR_4 , VAR_2 ) )  VAR_1 . METHOD_2 ( VAR_4 , VAR_2 ) (  VAR_1 . METHOD_3 ( name , value ) )  VAR_1 . METHOD_3 ( name , value ) (  VAR_1 . METHOD_4 ( ) )  VAR_1 . METHOD_4 ( ) (  VAR_1 . METHOD_4 ( ) )  VAR_1 . METHOD_4 ( ) (  VAR_1 . METHOD_4 ( ) )  VAR_1 . METHOD_4 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1.Disk> ) TYPE java.util.List<TYPE_1.Disk> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR (  VAR_1 . add ( new TYPE_1 . DiskImage ( ) ) )  VAR_1 . add ( new TYPE_1 . DiskImage ( ) ) (  TYPE_2 . METHOD_2 ( VAR_2 . METHOD_3 ( new org.ovirt.engine.core.common.businessentities.VM ( ) , null , VAR_1 , null ) , true , null ) )  TYPE_2 . METHOD_2 ( VAR_2 . METHOD_3 ( new org.ovirt.engine.core.common.businessentities.VM ( ) , null , VAR_1 , null ) , true , null ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( VAR_2 ) ) )  VAR_1 = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( VAR_2 ) ) (  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( VAR_1 ) . METHOD_3 ( ) )  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( VAR_1 ) . METHOD_3 ( ) (  org.mockito.Mockito.doReturn ( VAR_4 ) . when ( VAR_1 ) . METHOD_4 ( ) )  org.mockito.Mockito.doReturn ( VAR_4 ) . when ( VAR_1 ) . METHOD_4 ( ) (  org.mockito.Mockito.doReturn ( VAR_5 ) . when ( VAR_1 ) . METHOD_5 ( ) )  org.mockito.Mockito.doReturn ( VAR_5 ) . when ( VAR_1 ) . METHOD_5 ( ) (  org.mockito.Mockito . METHOD_6 ( ) . when ( VAR_1 ) . METHOD_7 ( TYPE_2 . METHOD_8 ( ) ) )  org.mockito.Mockito . METHOD_6 ( ) . when ( VAR_1 ) . METHOD_7 ( TYPE_2 . METHOD_8 ( ) ) (  VAR_6 . METHOD_9 ( VAR_7 class , VAR_8 ) )  VAR_6 . METHOD_9 ( VAR_7 class , VAR_8 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME VAR_1 ) NAME VAR_1 ( INIT = this . METHOD_2 ( ) ) INIT = this . METHOD_2 ( ) ) VAR VAR (  this . VAR_2 = new java.util.ArrayList < > ( ) )  this . VAR_2 = new java.util.ArrayList < > ( ) ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME id ) NAME id ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( IF IF ( COND ! ( TYPE_1 . equals ( id ) ) ) COND ! ( TYPE_1 . equals ( id ) ) ( THEN THEN (  VAR_2 . add ( id ) )  VAR_2 . add ( id ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_1 ) ( target ) ) ) INIT = ( ( TYPE_1 ) ( target ) ) ) VAR VAR (  VAR_1 . METHOD_2 ( ( ( java.util.ArrayList < TYPE_2 > ) ( returnValue ) ) ) )  VAR_1 . METHOD_2 ( ( ( java.util.ArrayList < TYPE_2 > ) ( returnValue ) ) ) (  VAR_1 . METHOD_3 ( ) . add ( VAR_2 ) )  VAR_1 . METHOD_3 ( ) . add ( VAR_2 ) (  VAR_1 . METHOD_4 ( VAR_1 ) )  VAR_1 . METHOD_4 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_1 ( ) )  METHOD_1 ( ) ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( TYPE_2 . METHOD_3 ( ( ( TYPE_3 < TYPE_1 > ) ( returnValue ) ) ) ) ) INIT = TYPE_2 . METHOD_2 ( TYPE_2 . METHOD_3 ( ( ( TYPE_3 < TYPE_1 > ) ( returnValue ) ) ) ) ) VAR VAR (  VAR_1 . add ( 0 , null ) )  VAR_1 . add ( 0 , null ) (  METHOD_4 ( ) . setItems ( VAR_1 ) )  METHOD_4 ( ) . setItems ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME action ) NAME action ( INIT = null ) INIT = null ) VAR VAR ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  action = VAR_5 )  action = VAR_5 ) THEN THEN ( ELSE ELSE ( IF IF ( COND VAR_3 ) COND VAR_3 ( THEN THEN (  action = VAR_6 )  action = VAR_6 ) THEN THEN ( ELSE ELSE ( IF IF ( COND VAR_4 ) COND VAR_4 ( THEN THEN (  action = VAR_7 )  action = VAR_7 ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF (  return action ; )  return action ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . getParameters ( ) . METHOD_2 ( ) ) INIT = TYPE_1 . getParameters ( ) . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  VAR_2 . add ( VAR_3 , java.lang.Boolean . toString ( VAR_1 ) ) )  VAR_2 . add ( VAR_3 , java.lang.Boolean . toString ( VAR_1 ) ) ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_1 . getParameters ( ) . METHOD_3 ( ) . getValue ( ) ) INIT = TYPE_1 . getParameters ( ) . METHOD_3 ( ) . getValue ( ) ) VAR VAR (  VAR_5 = TYPE_1 . METHOD_4 ( ) . METHOD_5 ( VAR_4 , VAR_2 ) )  VAR_5 = TYPE_1 . METHOD_4 ( ) . METHOD_5 ( VAR_4 , VAR_2 ) (  TYPE_1 . METHOD_6 ( ) )  TYPE_1 . METHOD_6 ( ) (  METHOD_7 ( TYPE_1 . METHOD_8 ( VAR_6 ) ) )  METHOD_7 ( TYPE_1 . METHOD_8 ( VAR_6 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> ) RETURN java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) == null ) COND ( VAR_1 ) == null ( THEN THEN (  VAR_1 = TYPE_1 . METHOD_2 ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( TYPE_2 . METHOD_5 ( ) ) , false , true ) )  VAR_1 = TYPE_1 . METHOD_2 ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( TYPE_2 . METHOD_5 ( ) ) , false , true ) ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1.ValidationResult ) RETURN TYPE_1.ValidationResult ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.ValidationResult ) TYPE TYPE_1.ValidationResult ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( vm ) ) INIT = METHOD_2 ( vm ) ) VAR VAR ( IF IF ( COND ! ( VAR_1 . METHOD_3 ( ) ) ) COND ! ( VAR_1 . METHOD_3 ( ) ) ( THEN THEN (  return VAR_1 ; )  return VAR_1 ; ) THEN THEN ) IF IF (  VAR_1 = METHOD_4 ( vm , METHOD_5 ( ) , METHOD_6 ( ) ) )  VAR_1 = METHOD_4 ( vm , METHOD_5 ( ) , METHOD_6 ( ) ) ( IF IF ( COND ! ( VAR_1 . METHOD_3 ( ) ) ) COND ! ( VAR_1 . METHOD_3 ( ) ) ( THEN THEN (  return VAR_1 ; )  return VAR_1 ; ) THEN THEN ) IF IF (  VAR_1 = METHOD_7 ( METHOD_8 ( ) , METHOD_6 ( ) ) )  VAR_1 = METHOD_7 ( METHOD_8 ( ) , METHOD_6 ( ) ) ( IF IF ( COND ! ( VAR_1 . METHOD_3 ( ) ) ) COND ! ( VAR_1 . METHOD_3 ( ) ) ( THEN THEN (  return VAR_1 ; )  return VAR_1 ; ) THEN THEN ) IF IF (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1.ValidationResult ) RETURN TYPE_1.ValidationResult ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME value ) NAME value ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.ValidationResult ) TYPE TYPE_1.ValidationResult ( NAME result ) NAME result ( INIT = new TYPE_1 . ValidationResult ( ) ) INIT = new TYPE_1 . ValidationResult ( ) ) VAR VAR ( IF IF ( COND ( value == null ) || ( TYPE_2 . METHOD_2 ( value ) ) ) COND ( value == null ) || ( TYPE_2 . METHOD_2 ( value ) ) ( THEN THEN (  result . METHOD_3 ( false ) )  result . METHOD_3 ( false ) (  result . METHOD_4 ( ) . add ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_5 ( ) ) )  result . METHOD_4 ( ) . add ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_5 ( ) ) ) THEN THEN ) IF IF (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME returnValue ) NAME returnValue ) VAR VAR ( IF IF ( COND VAR_1 . METHOD_2 ( TYPE_2 . getParameters ( ) . getStoragePoolId ( ) ) ) COND VAR_1 . METHOD_2 ( TYPE_2 . getParameters ( ) . getStoragePoolId ( ) ) ( THEN THEN (  returnValue = VAR_1 . get ( TYPE_2 . getParameters ( ) . getStoragePoolId ( ) ) )  returnValue = VAR_1 . get ( TYPE_2 . getParameters ( ) . getStoragePoolId ( ) ) ) THEN THEN ( ELSE ELSE (  VAR_1 . put ( TYPE_2 . getParameters ( ) . getStoragePoolId ( ) , new TYPE_1 ( TYPE_2 . getParameters ( ) . getStoragePoolId ( ) ) ) )  VAR_1 . put ( TYPE_2 . getParameters ( ) . getStoragePoolId ( ) , new TYPE_1 ( TYPE_2 . getParameters ( ) . getStoragePoolId ( ) ) ) (  returnValue = VAR_1 . get ( TYPE_2 . getParameters ( ) . getStoragePoolId ( ) ) )  returnValue = VAR_1 . get ( TYPE_2 . getParameters ( ) . getStoragePoolId ( ) ) ) ELSE ELSE ) IF IF (  return returnValue ; )  return returnValue ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 < TYPE_2 > ( new TYPE_2 ( null ) ) ) )  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 < TYPE_2 > ( new TYPE_2 ( null ) ) ) (  TYPE_3 . METHOD_3 ( cmd . METHOD_4 ( ) ) )  TYPE_3 . METHOD_3 ( cmd . METHOD_4 ( ) ) (  TYPE_3 . METHOD_5 ( cmd . getReturnValue ( ) . METHOD_6 ( ) . METHOD_7 ( TYPE_4 . toString ( ) ) ) )  TYPE_3 . METHOD_5 ( cmd . getReturnValue ( ) . METHOD_6 ( ) . METHOD_7 ( TYPE_4 . toString ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) . equals ( VAR_1 ) ) COND TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) . equals ( VAR_1 ) ( THEN THEN (  TYPE_1 . METHOD_4 ( new java.util.ArrayList < TYPE_2 > ( ) ) )  TYPE_1 . METHOD_4 ( new java.util.ArrayList < TYPE_2 > ( ) ) ) THEN THEN ( ELSE ELSE (  VAR_2 . METHOD_5 ( STRING_1 , TYPE_1 . getParameters ( ) . getStoragePoolId ( ) ) )  VAR_2 . METHOD_5 ( STRING_1 , TYPE_1 . getParameters ( ) . getStoragePoolId ( ) ) (  METHOD_4 ( TYPE_3 . getInstance ( ) . METHOD_6 ( VAR_3 , new TYPE_4 ( TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ) ) . getReturnValue ( ) ) )  METHOD_4 ( TYPE_3 . getInstance ( ) . METHOD_6 ( VAR_3 , new TYPE_4 ( TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ) ) . getReturnValue ( ) ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( null ) )  org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( null ) (  METHOD_3 ( false ) )  METHOD_3 ( false ) (  cmd . METHOD_4 ( ) )  cmd . METHOD_4 ( ) (  TYPE_1 . METHOD_5 ( STRING_1 , cmd , VAR_2 ) )  TYPE_1 . METHOD_5 ( STRING_1 , cmd , VAR_2 ) (  org.mockito.Mockito . METHOD_6 ( VAR_3 , org.mockito.Mockito . METHOD_7 ( 1 ) ) . METHOD_8 ( TYPE_2 . METHOD_9 ( VAR_4 ) , TYPE_2 . any ( VAR_5 class ) ) )  org.mockito.Mockito . METHOD_6 ( VAR_3 , org.mockito.Mockito . METHOD_7 ( 1 ) ) . METHOD_8 ( TYPE_2 . METHOD_9 ( VAR_4 ) , TYPE_2 . any ( VAR_5 class ) ) (  org.mockito.Mockito . METHOD_6 ( cmd , org.mockito.Mockito . METHOD_7 ( 0 ) ) . METHOD_10 ( ) )  org.mockito.Mockito . METHOD_6 ( cmd , org.mockito.Mockito . METHOD_7 ( 0 ) ) . METHOD_10 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( ! ( METHOD_2 ( ) ) ) || ( ! ( METHOD_3 ( ) ) ) ) COND ( ! ( METHOD_2 ( ) ) ) || ( ! ( METHOD_3 ( ) ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( IF IF ( COND TYPE_1 . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ) COND TYPE_1 . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ( THEN THEN (  VAR_2 . METHOD_6 ( METHOD_7 ( ) ) )  VAR_2 . METHOD_6 ( METHOD_7 ( ) ) ) THEN THEN ( ELSE ELSE (  VAR_2 . METHOD_6 ( null ) )  VAR_2 . METHOD_6 ( null ) ) ELSE ELSE ) IF IF (  VAR_2 . METHOD_8 ( ) )  VAR_2 . METHOD_8 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.ArrayList < TYPE_2 > ( ) ) INIT = new java.util.ArrayList < TYPE_2 > ( ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( ( java.util.List < TYPE_2 > ) ( VAR_1 . METHOD_2 ( METHOD_3 ( ) ) ) ) ) INIT = ( ( java.util.List < TYPE_2 > ) ( VAR_1 . METHOD_2 ( METHOD_3 ( ) ) ) ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( IN VAR_3 ) IN VAR_3 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME user ) NAME user ( INIT = METHOD_4 ( VAR_4 , METHOD_3 ( ) . METHOD_5 ( ) ) ) INIT = METHOD_4 ( VAR_4 , METHOD_3 ( ) . METHOD_5 ( ) ) ) VAR VAR (  VAR_2 . add ( user ) )  VAR_2 . add ( user ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  METHOD_6 ( VAR_2 ) )  METHOD_6 ( VAR_2 ) (  METHOD_7 ( true ) )  METHOD_7 ( true ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME sender ) NAME sender ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME args ) NAME args ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( java.lang.Boolean ) ( METHOD_2 ( ) . getEntity ( ) ) ) == true ) COND ( ( java.lang.Boolean ) ( METHOD_2 ( ) . getEntity ( ) ) ) == true ( THEN THEN (  METHOD_3 ( ) . setEntity ( true ) )  METHOD_3 ( ) . setEntity ( true ) (  METHOD_3 ( ) . setIsChangable ( false ) )  METHOD_3 ( ) . setIsChangable ( false ) ) THEN THEN ( ELSE ELSE (  METHOD_3 ( ) . setIsChangable ( true ) )  METHOD_3 ( ) . setIsChangable ( true ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.Map ) RETURN java.util.Map ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  log . METHOD_2 ( STRING_1 , new java.lang.Object [ ] { VAR_2 , VAR_1 } ) )  log . METHOD_2 ( STRING_1 , new java.lang.Object [ ] { VAR_2 , VAR_1 } ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_3 ( VAR_2 ) ) INIT = METHOD_3 ( VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2.StorageDomain ) TYPE TYPE_2.StorageDomain ( NAME storageDomain ) NAME storageDomain ( INIT = VAR_3 . METHOD_4 ( ) . get ( VAR_1 ) ) INIT = VAR_3 . METHOD_4 ( ) . get ( VAR_1 ) ) VAR VAR (  storageDomain . METHOD_5 ( VAR_4 ) )  storageDomain . METHOD_5 ( VAR_4 ) (  METHOD_6 ( storageDomain ) )  METHOD_6 ( storageDomain ) (  return METHOD_7 ( ) ; )  return METHOD_7 ( ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ( BLOCK BLOCK (  throw error ( e ) ; )  throw error ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.util.List<java.lang.String> ) RETURN java.util.List<java.lang.String> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.network> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.network> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1<java.lang.String> ) TYPE TYPE_1<java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME list ) NAME list ( INIT = new java.util.ArrayList < java.lang.String > ( ) ) INIT = new java.util.ArrayList < java.lang.String > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.network ) TYPE org.ovirt.engine.core.common.businessentities.network ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( IF IF ( COND ( ! ( VAR_3 . METHOD_2 ( ) ) ) && ( VAR_2 . METHOD_3 ( VAR_3 . getName ( ) ) ) ) COND ( ! ( VAR_3 . METHOD_2 ( ) ) ) && ( VAR_2 . METHOD_3 ( VAR_3 . getName ( ) ) ) ( THEN THEN (  list . add ( VAR_3 . getName ( ) ) )  list . add ( VAR_3 . getName ( ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return list ; )  return list ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ( VAR VAR ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME VAR_6 ) NAME VAR_6 ) VAR VAR ( VAR VAR ( TYPE TYPE_7 ) TYPE TYPE_7 ( NAME VAR_7 ) NAME VAR_7 ) VAR VAR ( VAR VAR ( TYPE TYPE_8 ) TYPE TYPE_8 ( NAME VAR_8 ) NAME VAR_8 ) VAR VAR ( VAR VAR ( TYPE TYPE_9 ) TYPE TYPE_9 ( NAME VAR_9 ) NAME VAR_9 ) VAR VAR ( VAR VAR ( TYPE TYPE_10 ) TYPE TYPE_10 ( NAME VAR_10 ) NAME VAR_10 ) VAR VAR ( VAR VAR ( TYPE TYPE_11 ) TYPE TYPE_11 ( NAME constants ) NAME constants ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_11 . add ( new TYPE_12 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 , VAR_8 , VAR_9 , VAR_10 , constants ) ) )  VAR_11 . add ( new TYPE_12 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 , VAR_8 , VAR_9 , VAR_10 , constants ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME vmId ) NAME vmId ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND source != null ) COND source != null ( THEN THEN (  return source ; )  return source ; ) THEN THEN ) IF IF (  return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ; )  return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return source ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return source ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ; } } ( VAR VAR ( TYPE org.ovirt.engine.core.common.queries.IdQueryParameters ) TYPE org.ovirt.engine.core.common.queries.IdQueryParameters ( NAME params ) NAME params ( INIT = new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) ) INIT = new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) ) VAR VAR (  params . METHOD_2 ( VAR_1 ) )  params . METHOD_2 ( VAR_1 ) (  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , params , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , params , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME id ) NAME id ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  getModel ( ) . METHOD_3 ( ) . setEntity ( ( ( java.lang.Boolean ) ( returnValue ) ) ) )  getModel ( ) . METHOD_3 ( ) . setEntity ( ( ( java.lang.Boolean ) ( returnValue ) ) ) ) BLOCK BLOCK ) METHOD METHOD (  TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( getModel ( ) , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { getModel ( ) . METHOD_3 ( ) . setEntity ( ( ( java.lang.Boolean ) ( returnValue ) ) ) ; } } ) , id ) )  TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( getModel ( ) , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { getModel ( ) . METHOD_3 ( ) . setEntity ( ( ( java.lang.Boolean ) ( returnValue ) ) ) ; } } ) , id ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( 1 , false , false , false ) )  METHOD_2 ( 1 , false , false , false ) (  METHOD_2 ( 1 , true , true , true ) )  METHOD_2 ( 1 , true , true , true ) (  METHOD_3 ( VAR_1 [ 1 ] ) )  METHOD_3 ( VAR_1 [ 1 ] ) (  METHOD_4 ( METHOD_5 ( VAR_2 , VAR_3 class , new java.lang.String [ ] { } , new java.lang.Object [ ] { } , true , true ) ) )  METHOD_4 ( METHOD_5 ( VAR_2 , VAR_3 class , new java.lang.String [ ] { } , new java.lang.Object [ ] { } , true , true ) ) (  METHOD_6 ( resource . METHOD_7 ( getModel ( 0 ) ) , 0 ) )  METHOD_6 ( resource . METHOD_7 ( getModel ( 0 ) ) , 0 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( VAR_2 , null ) ) INIT = METHOD_2 ( VAR_2 , null ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VdsNetworkInterface> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VdsNetworkInterface> ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_3 ( VAR_1 . getName ( ) ) ) INIT = METHOD_3 ( VAR_1 . getName ( ) ) ) VAR VAR (  METHOD_4 ( VAR_1 , VAR_3 ) )  METHOD_4 ( VAR_1 , VAR_3 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME parameters ) NAME parameters ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_3 . add ( VAR_1 ) )  VAR_3 . add ( VAR_1 ) (  parameters . METHOD_5 ( VAR_3 ) )  parameters . METHOD_5 ( VAR_3 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_6 ( parameters ) ) INIT = METHOD_6 ( parameters ) ) VAR VAR (  METHOD_7 ( VAR_4 ) )  METHOD_7 ( VAR_4 ) (  METHOD_8 ( VAR_4 ) )  METHOD_8 ( VAR_4 ) (  METHOD_9 ( VAR_4 ) )  METHOD_9 ( VAR_4 ) (  METHOD_10 ( VAR_4 ) )  METHOD_10 ( VAR_4 ) (  METHOD_11 ( VAR_4 ) )  METHOD_11 ( VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < TYPE_1 > ( ) ) INIT = new java.util.ArrayList < TYPE_1 > ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( VAR_1 ) ) INIT = METHOD_2 ( VAR_1 ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_3 ( VAR_2 , STRING_1 , null ) ) INIT = new TYPE_3 ( VAR_2 , STRING_1 , null ) ) VAR VAR (  TYPE_4 . METHOD_3 ( VAR_3 ) )  TYPE_4 . METHOD_3 ( VAR_3 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ( BLOCK BLOCK (  return ; )  return ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  TYPE_5 . METHOD_4 ( STRING_2 ) )  TYPE_5 . METHOD_4 ( STRING_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.lang.Integer ) RETURN java.lang.Integer ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME entity ) NAME entity ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND entity instanceof java.lang.Integer ) COND entity instanceof java.lang.Integer ( THEN THEN (  return ( ( java.lang.Integer ) ( entity ) ) ; )  return ( ( java.lang.Integer ) ( entity ) ) ; ) THEN THEN ) IF IF ( IF IF ( COND ! ( entity instanceof java.lang.String ) ) COND ! ( entity instanceof java.lang.String ) ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( java.lang.String ) ( entity ) ) ) INIT = ( ( java.lang.String ) ( entity ) ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  return new java.lang.Integer ( VAR_1 ) ; )  return new java.lang.Integer ( VAR_1 ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ( BLOCK BLOCK (  return null ; )  return null ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.ArrayList<java.lang.Integer> ) RETURN java.util.ArrayList<java.lang.Integer> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<java.lang.Integer> ) TYPE java.util.ArrayList<java.lang.Integer> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( IN METHOD_2 ( ) ) IN METHOD_2 ( ) ( BLOCK BLOCK ( IF IF ( COND METHOD_3 ( VAR_2 ) . METHOD_4 ( STRING_1 ) ) COND METHOD_3 ( VAR_2 ) . METHOD_4 ( STRING_1 ) ( THEN THEN (  VAR_1 . add ( VAR_2 ) )  VAR_1 . add ( VAR_2 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.ArrayList<TYPE_1> ) RETURN java.util.ArrayList<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2.VdcActionType ) TYPE TYPE_2.VdcActionType ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.ArrayList<TYPE_2.VdcActionParametersBase> ) TYPE java.util.ArrayList<TYPE_2.VdcActionParametersBase> ( NAME parameters ) NAME parameters ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME returnValue ) NAME returnValue ( INIT = METHOD_2 ( VAR_1 ) ) INIT = METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND returnValue != null ) COND returnValue != null ( THEN THEN ( VAR VAR ( TYPE java.util.ArrayList<TYPE_1> ) TYPE java.util.ArrayList<TYPE_1> ( NAME list ) NAME list ( INIT = new java.util.ArrayList < TYPE_1 > ( ) ) INIT = new java.util.ArrayList < TYPE_1 > ( ) ) VAR VAR (  list . add ( returnValue ) )  list . add ( returnValue ) (  return list ; )  return list ; ) THEN THEN ( ELSE ELSE (  return METHOD_3 ( VAR_1 , parameters , false , VAR_2 , VAR_3 ) ; )  return METHOD_3 ( VAR_1 , parameters , false , VAR_2 , VAR_3 ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME VAR_1 ) NAME VAR_1 ( INIT = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ) INIT = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ) VAR VAR (  VAR_1 . METHOD_2 ( this ) )  VAR_1 . METHOD_2 ( this ) ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_3 ( ( ( java.util.List < TYPE_1 > ) ( returnValue ) ) ) )  METHOD_3 ( ( ( java.util.List < TYPE_1 > ) ( returnValue ) ) ) ) BLOCK BLOCK ) METHOD METHOD (  VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { METHOD_3 ( ( ( java.util.List < TYPE_1 > ) ( returnValue ) ) ) ; } } )  VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { METHOD_3 ( ( ( java.util.List < TYPE_1 > ) ( returnValue ) ) ) ; } } (  TYPE_2 . METHOD_4 ( VAR_1 ) )  TYPE_2 . METHOD_4 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<TYPE_2>.TYPE_3 ) TYPE TYPE_1<TYPE_2>.TYPE_3 ( NAME validator ) NAME validator ( INIT = new TYPE_3 ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) , TYPE_1 . getParameters ( ) . METHOD_3 ( ) ) ) INIT = new TYPE_3 ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) , TYPE_1 . getParameters ( ) . METHOD_3 ( ) ) ) VAR VAR (  return ( ( validate ( validator . METHOD_4 ( ) ) ) && ( validate ( validator . METHOD_5 ( ) ) ) ) && ( validate ( validator . METHOD_6 ( ) ) ) ; )  return ( ( validate ( validator . METHOD_4 ( ) ) ) && ( validate ( validator . METHOD_5 ( ) ) ) ) && ( validate ( validator . METHOD_6 ( ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( STRING_1 , STRING_2 ) ) INIT = METHOD_2 ( STRING_1 , STRING_2 ) ) VAR VAR (  VAR_2 . METHOD_3 ( VAR_1 ) )  VAR_2 . METHOD_3 ( VAR_1 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_2 . METHOD_4 ( ) ) INIT = VAR_2 . METHOD_4 ( ) ) VAR VAR (  TYPE_2 . METHOD_5 ( VAR_3 ) )  TYPE_2 . METHOD_5 ( VAR_3 ) (  TYPE_2 . assertEquals ( VAR_3 . METHOD_6 ( ) , VAR_4 ) )  TYPE_2 . assertEquals ( VAR_3 . METHOD_6 ( ) , VAR_4 ) (  TYPE_2 . assertEquals ( 1 , VAR_3 . METHOD_7 ( ) . size ( ) ) )  TYPE_2 . assertEquals ( 1 , VAR_3 . METHOD_7 ( ) . size ( ) ) (  TYPE_2 . assertEquals ( STRING_1 , VAR_3 . METHOD_7 ( ) . get ( 0 ) . METHOD_8 ( ) ) )  TYPE_2 . assertEquals ( STRING_1 , VAR_3 . METHOD_7 ( ) . get ( 0 ) . METHOD_8 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.ValidationResult ) TYPE TYPE_1.ValidationResult ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_4 . METHOD_2 ( VAR_5 , null , VAR_2 ) )  VAR_4 . METHOD_2 ( VAR_5 , null , VAR_2 ) (  org.mockito.Mockito.when ( nic . METHOD_3 ( ) ) . thenReturn ( VAR_3 ) )  org.mockito.Mockito.when ( nic . METHOD_3 ( ) ) . thenReturn ( VAR_3 ) (  TYPE_2 . assertEquals ( VAR_1 , validator . METHOD_4 ( ) ) )  TYPE_2 . assertEquals ( VAR_1 , validator . METHOD_4 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME id ) NAME id ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME log ) NAME log ( INIT = org.mockito.Mockito . METHOD_2 ( VAR_1 class ) ) INIT = org.mockito.Mockito . METHOD_2 ( VAR_1 class ) ) VAR VAR (  org.mockito.Mockito.when ( log . METHOD_3 ( ) ) . thenReturn ( true ) )  org.mockito.Mockito.when ( log . METHOD_3 ( ) ) . thenReturn ( true ) (  TYPE_2 . METHOD_4 ( log , id , new TYPE_3 ( ) ) )  TYPE_2 . METHOD_4 ( log , id , new TYPE_3 ( ) ) (  org.mockito.Mockito . METHOD_5 ( log ) . METHOD_6 ( TYPE_4 . METHOD_7 ( VAR_2 ) , new java.lang.Object [ ] { TYPE_4 . METHOD_8 ( ) , TYPE_4 . METHOD_7 ( id ) } ) )  org.mockito.Mockito . METHOD_5 ( log ) . METHOD_6 ( TYPE_4 . METHOD_7 ( VAR_2 ) , new java.lang.Object [ ] { TYPE_4 . METHOD_8 ( ) , TYPE_4 . METHOD_7 ( id ) } ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND source == null ) COND source == null ( THEN THEN (  return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ( ) ; )  return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ( ) ; ) THEN THEN ) IF IF (  return source ; )  return source ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ( ) ; } return source ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ( ) ; } return source ; } } (  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_1 , new TYPE_1 ( ( ( STRING_1 + name ) + STRING_2 ) , VAR_2 . StoragePool ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_1 , new TYPE_1 ( ( ( STRING_1 + name ) + STRING_2 ) , VAR_2 . StoragePool ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1<TYPE_2> ) RETURN TYPE_1<TYPE_2> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ( INIT = METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ) INIT = METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ) VAR VAR (  METHOD_3 ( vm ) )  METHOD_3 ( vm ) ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME cmd ) NAME cmd ( INIT = METHOD_4 ( vm , VAR_4 ) ) INIT = METHOD_4 ( vm , VAR_4 ) ) VAR VAR (  TYPE_3 . METHOD_5 ( cmd ) )  TYPE_3 . METHOD_5 ( cmd ) (  return cmd ; )  return cmd ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  METHOD_3 ( ) )  METHOD_3 ( ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_4 ( ) ) INIT = METHOD_4 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME result ) NAME result ( INIT = VAR_2 . METHOD_5 ( VAR_3 , VAR_1 ) ) INIT = VAR_2 . METHOD_5 ( VAR_3 , VAR_1 ) ) VAR VAR (  org.mockito.Mockito . METHOD_6 ( VAR_4 ) . METHOD_7 ( org.mockito.Mockito . METHOD_8 ( VAR_5 ) , TYPE_3 . any ( VAR_6 class ) ) )  org.mockito.Mockito . METHOD_6 ( VAR_4 ) . METHOD_7 ( org.mockito.Mockito . METHOD_8 ( VAR_5 ) , TYPE_3 . any ( VAR_6 class ) ) (  TYPE_4 . METHOD_9 ( result . getSucceeded ( ) ) )  TYPE_4 . METHOD_9 ( result . getSucceeded ( ) ) (  TYPE_4 . assertEquals ( result . METHOD_10 ( ) , VAR_1 ) )  TYPE_4 . assertEquals ( result . METHOD_10 ( ) , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.AuditLogType ) TYPE TYPE_1.AuditLogType ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  VAR_4 . METHOD_2 ( STRING_1 , VAR_2 ) )  VAR_4 . METHOD_2 ( STRING_1 , VAR_2 ) (  VAR_4 . METHOD_2 ( STRING_2 , VAR_3 ) )  VAR_4 . METHOD_2 ( STRING_2 , VAR_3 ) (  new TYPE_3 . AuditLogDirector ( ) . log ( VAR_4 , VAR_1 ) )  new TYPE_3 . AuditLogDirector ( ) . log ( VAR_4 , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND METHOD_2 ( ) ) COND METHOD_2 ( ) ( THEN THEN (  METHOD_3 ( ) )  METHOD_3 ( ) (  METHOD_4 ( ) )  METHOD_4 ( ) ) THEN THEN ( ELSE ELSE ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.String> ) TYPE java.util.Map<java.lang.String,java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_5 ( STRING_1 , TYPE_2 . METHOD_6 ( ) ) ) INIT = TYPE_1 . METHOD_5 ( STRING_1 , TYPE_2 . METHOD_6 ( ) ) ) VAR VAR (  METHOD_7 ( VAR_2 , VAR_1 ) )  METHOD_7 ( VAR_2 , VAR_1 ) (  return false ; )  return false ; ) ELSE ELSE ) IF IF (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . get ( 1 ) ) INIT = VAR_2 . get ( 1 ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_2.Disk> ) TYPE java.util.List<TYPE_2.Disk> ( NAME VAR_3 ) NAME VAR_3 ( INIT = new java.util.ArrayList ( TYPE_3 . METHOD_2 ( TYPE_4 . METHOD_3 ( VAR_1 ) , METHOD_4 ( ) . getId ( ) ) ) ) INIT = new java.util.ArrayList ( TYPE_3 . METHOD_2 ( TYPE_4 . METHOD_3 ( VAR_1 ) , METHOD_4 ( ) . getId ( ) ) ) ) VAR VAR (  org.mockito.Mockito.when ( VAR_4 . METHOD_5 ( VAR_5 , METHOD_6 ( ) . getId ( ) , false ) ) . thenReturn ( VAR_3 ) )  org.mockito.Mockito.when ( VAR_4 . METHOD_5 ( VAR_5 , METHOD_6 ( ) . getId ( ) , false ) ) . thenReturn ( VAR_3 ) (  org.mockito.Mockito.when ( METHOD_7 ( ) . METHOD_8 ( ) ) . thenReturn ( VAR_4 ) )  org.mockito.Mockito.when ( METHOD_7 ( ) . METHOD_8 ( ) ) . thenReturn ( VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME rs ) NAME rs ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME entity ) NAME entity ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  entity . METHOD_2 ( VAR_2 . METHOD_1 ( rs , VAR_1 ) ) )  entity . METHOD_2 ( VAR_2 . METHOD_1 ( rs , VAR_1 ) ) (  entity . METHOD_3 ( rs.getString ( STRING_1 ) ) )  entity . METHOD_3 ( rs.getString ( STRING_1 ) ) (  entity . METHOD_4 ( new org.ovirt.engine.core.compat . Version ( rs.getString ( STRING_2 ) ) ) )  entity . METHOD_4 ( new org.ovirt.engine.core.compat . Version ( rs.getString ( STRING_2 ) ) ) (  return entity ; )  return entity ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<TYPE_1> ) TYPE java.util.ArrayList<TYPE_1> ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( java.util.ArrayList < TYPE_1 > ) ( result ) ) ) INIT = ( ( java.util.ArrayList < TYPE_1 > ) ( result ) ) ) VAR VAR ( IF IF ( COND ( VAR_2 . size ( ) ) > 0 ) COND ( VAR_2 . size ( ) ) > 0 ( THEN THEN (  VAR_3 . METHOD_2 ( ) . setIsChangable ( false ) )  VAR_3 . METHOD_2 ( ) . setIsChangable ( false ) ( IF IF ( COND ! VAR_4 ) COND ! VAR_4 ( THEN THEN (  VAR_3 . METHOD_3 ( ) . setIsChangable ( false ) )  VAR_3 . METHOD_3 ( ) . setIsChangable ( false ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  VAR_2 . METHOD_2 ( returnValue ) )  VAR_2 . METHOD_2 ( returnValue ) (  org.mockito.Mockito.when ( VAR_3 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_1 ) , TYPE_3 . any ( VAR_4 class ) ) ) . thenReturn ( VAR_2 ) )  org.mockito.Mockito.when ( VAR_3 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_1 ) , TYPE_3 . any ( VAR_4 class ) ) ) . thenReturn ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected final ) MODIFIER protected final ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME entity ) NAME entity ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_2 . METHOD_2 ( entity . getId ( ) ) . METHOD_3 ( VAR_2 [ VAR_1 ] ) . METHOD_4 ( ) )  TYPE_2 . METHOD_2 ( entity . getId ( ) ) . METHOD_3 ( VAR_2 [ VAR_1 ] ) . METHOD_4 ( ) (  TYPE_2 . METHOD_2 ( entity . METHOD_5 ( ) ) . METHOD_3 ( VAR_2 [ VAR_1 ] ) . METHOD_4 ( ) )  TYPE_2 . METHOD_2 ( entity . METHOD_5 ( ) ) . METHOD_3 ( VAR_2 [ VAR_1 ] ) . METHOD_4 ( ) (  METHOD_1 ( entity ) )  METHOD_1 ( entity ) (  return entity ; )  return entity ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN org.ovirt.engine.core.common.businessentities.VM ) RETURN org.ovirt.engine.core.common.businessentities.VM ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME entity ) NAME entity ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_2 . METHOD_2 ( entity . METHOD_3 ( ) ) . METHOD_4 ( VAR_2 ) . METHOD_5 ( ) )  TYPE_2 . METHOD_2 ( entity . METHOD_3 ( ) ) . METHOD_4 ( VAR_2 ) . METHOD_5 ( ) (  TYPE_2 . METHOD_2 ( entity . METHOD_6 ( ) ) . METHOD_4 ( VAR_1 ) . METHOD_5 ( ) )  TYPE_2 . METHOD_2 ( entity . METHOD_6 ( ) ) . METHOD_4 ( VAR_1 ) . METHOD_5 ( ) (  TYPE_2 . METHOD_2 ( entity . METHOD_7 ( ) ) . METHOD_4 ( TYPE_3 . METHOD_7 ( ) ) . METHOD_5 ( ) )  TYPE_2 . METHOD_2 ( entity . METHOD_7 ( ) ) . METHOD_4 ( TYPE_3 . METHOD_7 ( ) ) . METHOD_5 ( ) (  return entity ; )  return entity ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<java.util.List<TYPE_2>> ) TYPE TYPE_1<java.util.List<TYPE_2>> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  super . METHOD_2 ( VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) , false ) )  super . METHOD_2 ( VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) , false ) (  super . METHOD_1 ( VAR_1 ) )  super . METHOD_1 ( VAR_1 ) (  VAR_2 . METHOD_5 ( ) )  VAR_2 . METHOD_5 ( ) ( FOR-EACH FOR-EACH ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME value ) NAME value ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  METHOD_6 ( value ) )  METHOD_6 ( value ) (  VAR_2 . add ( value . get ( 0 ) ) )  VAR_2 . add ( value . get ( 0 ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( METHOD_3 ( ) ) )  METHOD_2 ( METHOD_3 ( ) ) ( TRY TRY ( BLOCK BLOCK (  resource . METHOD_4 ( new TYPE_1 ( ) ) )  resource . METHOD_4 ( new TYPE_1 ( ) ) (  METHOD_5 ( STRING_1 ) )  METHOD_5 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( BLOCK BLOCK (  METHOD_6 ( VAR_1 , STRING_2 , STRING_3 , STRING_4 , STRING_5 ) )  METHOD_6 ( VAR_1 , STRING_2 , STRING_3 , STRING_4 , STRING_5 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_1 ) ( VAR_1 ) ) ) INIT = ( ( TYPE_1 ) ( VAR_1 ) ) ) VAR VAR (  VAR_2 . METHOD_2 ( ) . setEntity ( null ) )  VAR_2 . METHOD_2 ( ) . setEntity ( null ) ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ( INIT = true ) INIT = true ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( IN VAR_2 . METHOD_3 ( ) ) IN VAR_2 . METHOD_3 ( ) ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_2 . METHOD_4 ( ) . METHOD_5 ( VAR_4 ) ) ) COND ! ( VAR_2 . METHOD_4 ( ) . METHOD_5 ( VAR_4 ) ) ( THEN THEN (  VAR_3 = false )  VAR_3 = false (  break ; )  break ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  VAR_2 . METHOD_2 ( ) . setEntity ( VAR_3 ) )  VAR_2 . METHOD_2 ( ) . setEntity ( VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<TYPE_1.VdcActionType> ) TYPE java.util.List<TYPE_1.VdcActionType> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_1.VdcActionParametersBase> ) TYPE java.util.List<TYPE_1.VdcActionParametersBase> ( NAME parameters ) NAME parameters ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_1 ( VAR_1 , parameters , VAR_2 , VAR_3 , VAR_4 , false ) )  METHOD_1 ( VAR_1 , parameters , VAR_2 , VAR_3 , VAR_4 , false ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME iface ) NAME iface ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( TYPE_2 . isEmpty ( iface . METHOD_2 ( ) ) ) && ( ( TYPE_3 . METHOD_3 ( ) . METHOD_4 ( ) ) > 0 ) ) COND ( TYPE_2 . isEmpty ( iface . METHOD_2 ( ) ) ) && ( ( TYPE_3 . METHOD_3 ( ) . METHOD_4 ( ) ) > 0 ) ( THEN THEN (  iface . METHOD_5 ( TYPE_3 . METHOD_3 ( ) . METHOD_6 ( ) ) )  iface . METHOD_5 ( TYPE_3 . METHOD_3 ( ) . METHOD_6 ( ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME id ) NAME id ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME resource ) NAME resource ( INIT = new TYPE_1 ( id , new TYPE_2 ( VAR_1 ) ) ) INIT = new TYPE_1 ( id , new TYPE_2 ( VAR_1 ) ) ) VAR VAR (  resource . METHOD_2 ( ) . METHOD_3 ( VAR_2 ) )  resource . METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ( TRY TRY ( BLOCK BLOCK (  VAR_3 . METHOD_4 ( ) )  VAR_3 . METHOD_4 ( ) (  resource . get ( ) )  resource . get ( ) (  METHOD_5 ( STRING_1 ) )  METHOD_5 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( BLOCK BLOCK (  assertEquals ( INT_1 , VAR_4 . METHOD_6 ( ) . getStatus ( ) ) )  assertEquals ( INT_1 , VAR_4 . METHOD_6 ( ) . getStatus ( ) ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) ( IF IF ( COND ( getEntity ( ) ) != null ) COND ( getEntity ( ) ) != null ( THEN THEN ( VAR VAR ( TYPE java.util.ArrayList<TYPE_1> ) TYPE java.util.ArrayList<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < TYPE_1 > ( ) ) INIT = new java.util.ArrayList < TYPE_1 > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( IN getEntity ( ) . METHOD_2 ( ) . METHOD_3 ( STRING_1 , ( - 1 ) ) ) IN getEntity ( ) . METHOD_2 ( ) . METHOD_3 ( STRING_1 , ( - 1 ) ) ( BLOCK BLOCK (  VAR_1 . add ( TYPE_2 . METHOD_4 ( VAR_2 ) ) )  VAR_1 . add ( TYPE_2 . METHOD_4 ( VAR_2 ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  setItems ( VAR_1 ) )  setItems ( VAR_1 ) ) THEN THEN ( ELSE ELSE (  setItems ( null ) )  setItems ( null ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( STRING_1 ) )  VAR_1 . METHOD_2 ( STRING_1 ) (  VAR_2 . METHOD_3 ( ) )  VAR_2 . METHOD_3 ( ) ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.compat.Version ) TYPE org.ovirt.engine.core.compat.Version ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_4 < TYPE_1 < org.ovirt.engine.core.compat . Version > > getValue ( VAR_5 ) ) IN VAR_4 < TYPE_1 < org.ovirt.engine.core.compat . Version > > getValue ( VAR_5 ) ( BLOCK BLOCK (  VAR_2 . put ( VAR_3 , new TYPE_2 ( VAR_3 ) ) )  VAR_2 . put ( VAR_3 , new TYPE_2 ( VAR_3 ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  VAR_1 . METHOD_2 ( STRING_2 ) )  VAR_1 . METHOD_2 ( STRING_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<?extendsTYPE_2> ) TYPE TYPE_1<?extendsTYPE_2> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME sender ) NAME sender ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME args ) NAME args ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND STRING_1 . equals ( VAR_2 ) ) COND STRING_1 . equals ( VAR_2 ) ( THEN THEN (  METHOD_2 ( model ) )  METHOD_2 ( model ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND STRING_2 . equals ( VAR_2 ) ) COND STRING_2 . equals ( VAR_2 ) ( THEN THEN (  METHOD_3 ( model ) )  METHOD_3 ( model ) (  METHOD_4 ( model ) )  METHOD_4 ( model ) ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 = new TYPE_1 ( new TYPE_2 ( ) ) )  VAR_1 = new TYPE_1 ( new TYPE_2 ( ) ) (  VAR_2 = new TYPE_3 ( ) )  VAR_2 = new TYPE_3 ( ) (  VAR_3 = new TYPE_4 ( new TYPE_5 ( VAR_4 . METHOD_2 ( ) ) , VAR_2 ) )  VAR_3 = new TYPE_4 ( new TYPE_5 ( VAR_4 . METHOD_2 ( ) ) , VAR_2 ) (  VAR_3 . METHOD_3 ( TYPE_6 . METHOD_4 ( VAR_4 . METHOD_5 ( ) ) ) )  VAR_3 . METHOD_3 ( TYPE_6 . METHOD_4 ( VAR_4 . METHOD_5 ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( ( VAR_1 ) == null ) && ( METHOD_2 ( ) . METHOD_3 ( ) ) ) COND ( ( VAR_1 ) == null ) && ( METHOD_2 ( ) . METHOD_3 ( ) ) ( THEN THEN ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . METHOD_4 ( ) . METHOD_5 ( ) ) INIT = VAR_3 . METHOD_4 ( ) . METHOD_5 ( ) ) VAR VAR (  VAR_1 = new TYPE_2 ( VAR_4 < java.lang.String > METHOD_6 ( VAR_5 ) , METHOD_2 ( ) . METHOD_7 ( ) , METHOD_2 ( ) . METHOD_8 ( ) ) . METHOD_9 ( VAR_2 ) )  VAR_1 = new TYPE_2 ( VAR_4 < java.lang.String > METHOD_6 ( VAR_5 ) , METHOD_2 ( ) . METHOD_7 ( ) , METHOD_2 ( ) . METHOD_8 ( ) ) . METHOD_9 ( VAR_2 ) ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ) TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME storageDomain ) NAME storageDomain ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( ) . get ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( storageDomain . METHOD_4 ( ) ) ) ) INIT = METHOD_2 ( ) . get ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( storageDomain . METHOD_4 ( ) ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_5 ( ) . METHOD_6 ( VAR_2 . getId ( ) ) ) INIT = METHOD_5 ( ) . METHOD_6 ( VAR_2 . getId ( ) ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME vds ) NAME vds ( INIT = METHOD_7 ( ) . get ( VAR_1 ) ) INIT = METHOD_7 ( ) . get ( VAR_1 ) ) VAR VAR (  return TYPE_3 . METHOD_8 ( storageDomain , vds , VAR_3 ) ; )  return TYPE_3 . METHOD_8 ( storageDomain , vds , VAR_3 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME source ) NAME source ( INIT = TYPE_1 . METHOD_2 ( STRING_1 , STRING_2 , STRING_3 , STRING_4 ) ) INIT = TYPE_1 . METHOD_2 ( STRING_1 , STRING_2 , STRING_3 , STRING_4 ) ) VAR VAR (  TYPE_2 . assertEquals ( STRING_2 , TYPE_3 . METHOD_3 ( source , STRING_2 , STRING_5 ) ) )  TYPE_2 . assertEquals ( STRING_2 , TYPE_3 . METHOD_3 ( source , STRING_2 , STRING_5 ) ) (  TYPE_2 . assertEquals ( STRING_2 , TYPE_3 . METHOD_3 ( source , STRING_5 , STRING_2 ) ) )  TYPE_2 . assertEquals ( STRING_2 , TYPE_3 . METHOD_3 ( source , STRING_5 , STRING_2 ) ) (  TYPE_2 . assertEquals ( null , TYPE_3 . METHOD_3 ( source , null ) ) )  TYPE_2 . assertEquals ( null , TYPE_3 . METHOD_3 ( source , null ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  return new TYPE_2 ( METHOD_2 ( ) . getParameters ( ) . getStoragePoolId ( ) , METHOD_2 ( ) . getParameters ( ) . METHOD_3 ( ) , METHOD_2 ( ) . getParameters ( ) . METHOD_4 ( ) , org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_5 ( ) . get ( METHOD_2 ( ) . getParameters ( ) . METHOD_6 ( ) ) . METHOD_7 ( ) , METHOD_2 ( ) . getParameters ( ) . METHOD_8 ( ) , null ) ; )  return new TYPE_2 ( METHOD_2 ( ) . getParameters ( ) . getStoragePoolId ( ) , METHOD_2 ( ) . getParameters ( ) . METHOD_3 ( ) , METHOD_2 ( ) . getParameters ( ) . METHOD_4 ( ) , org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_5 ( ) . get ( METHOD_2 ( ) . getParameters ( ) . METHOD_6 ( ) ) . METHOD_7 ( ) , METHOD_2 ( ) . getParameters ( ) . METHOD_8 ( ) , null ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  return ( ( ( validate ( VAR_1 . METHOD_3 ( ) ) ) && ( validate ( VAR_1 . METHOD_4 ( ) ) ) ) && ( validate ( VAR_1 . METHOD_5 ( TYPE_2 . METHOD_6 ( ) ) ) ) ) && ( METHOD_1 ( VAR_1 ) ) ; )  return ( ( ( validate ( VAR_1 . METHOD_3 ( ) ) ) && ( validate ( VAR_1 . METHOD_4 ( ) ) ) ) && ( validate ( VAR_1 . METHOD_5 ( TYPE_2 . METHOD_6 ( ) ) ) ) ) && ( METHOD_1 ( VAR_1 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.StoragePool > ) ( returnValue ) ) ) INIT = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.StoragePool > ) ( returnValue ) ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.StoragePool ) TYPE org.ovirt.engine.core.common.businessentities.StoragePool ( NAME VAR_2 ) NAME VAR_2 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  VAR_3 . METHOD_1 ( VAR_2 . getId ( ) . toString ( ) ) )  VAR_3 . METHOD_1 ( VAR_2 . getId ( ) . toString ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ( IF IF ( COND VAR_3 == null ) COND VAR_3 == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  METHOD_2 ( VAR_3 ) )  METHOD_2 ( VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.uicommonweb.UICommand ) TYPE org.ovirt.engine.ui.uicommonweb.UICommand ( NAME command ) NAME command ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME parameters ) NAME parameters ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( command == ( METHOD_2 ( ) ) ) && ( ( parameters . length ) > 0 ) ) && ( TYPE_1 . equals ( parameters [ 0 ] ) ) ) COND ( ( command == ( METHOD_2 ( ) ) ) && ( ( parameters . length ) > 0 ) ) && ( TYPE_1 . equals ( parameters [ 0 ] ) ) ( THEN THEN (  this . VAR_1 = true )  this . VAR_1 = true (  super . METHOD_1 ( command , parameters ) )  super . METHOD_1 ( command , parameters ) (  this . VAR_1 = false )  this . VAR_1 = false ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_2 . METHOD_2 ( ) . METHOD_3 ( VAR_3 ) )  VAR_2 . METHOD_2 ( ) . METHOD_3 ( VAR_3 ) (  VAR_4 . METHOD_4 ( ) . put ( VAR_2 . METHOD_5 ( ) , VAR_2 ) )  VAR_4 . METHOD_4 ( ) . put ( VAR_2 . METHOD_5 ( ) , VAR_2 ) (  VAR_4 . METHOD_6 ( ) . add ( VAR_2 ) )  VAR_4 . METHOD_6 ( ) . add ( VAR_2 ) (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.VM ) TYPE TYPE_1.VM ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( model . METHOD_3 ( ) . getId ( ) ) )  METHOD_2 ( model . METHOD_3 ( ) . getId ( ) ) (  assertEquals ( VAR_2 [ 2 ] . toString ( ) , model . METHOD_3 ( ) . getId ( ) ) )  assertEquals ( VAR_2 [ 2 ] . toString ( ) , model . METHOD_3 ( ) . getId ( ) ) (  METHOD_4 ( model , VAR_1 ) )  METHOD_4 ( model , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( VAR_2 class , VAR_1 ) )  METHOD_2 ( VAR_2 class , VAR_1 ) (  METHOD_3 ( VAR_1 ) )  METHOD_3 ( VAR_1 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ( INIT = METHOD_4 ( VAR_1 , new TYPE_2 ( VAR_3 , VAR_4 class ) , VAR_5 , new TYPE_3 ( ) ) ) INIT = METHOD_4 ( VAR_1 , new TYPE_2 ( VAR_3 , VAR_4 class ) , VAR_5 , new TYPE_3 ( ) ) ) VAR VAR ( IF IF ( COND result != null ) COND result != null ( THEN THEN (  TYPE_4 . METHOD_5 ( this , result ) )  TYPE_4 . METHOD_5 ( this , result ) ) THEN THEN ) IF IF (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = dao . get ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( STRING_1 ) ) ) INIT = dao . get ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( STRING_1 ) ) ) VAR VAR (  VAR_1 . METHOD_3 ( org.ovirt.engine.core.compat.Guid . METHOD_4 ( STRING_2 ) ) )  VAR_1 . METHOD_3 ( org.ovirt.engine.core.compat.Guid . METHOD_4 ( STRING_2 ) ) ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME result ) NAME result ( INIT = dao . METHOD_5 ( VAR_1 ) ) INIT = dao . METHOD_5 ( VAR_1 ) ) VAR VAR (  TYPE_2 . METHOD_6 ( result ) )  TYPE_2 . METHOD_6 ( result ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) ) ) )  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) ) ) (  METHOD_3 ( VAR_2 ) )  METHOD_3 ( VAR_2 ) (  TYPE_3 . METHOD_4 ( cmd . validate ( ) ) )  TYPE_3 . METHOD_4 ( cmd . validate ( ) ) (  TYPE_3 . METHOD_5 ( cmd . getReturnValue ( ) . METHOD_6 ( ) . METHOD_7 ( TYPE_4 . toString ( ) ) ) )  TYPE_3 . METHOD_5 ( cmd . getReturnValue ( ) . METHOD_6 ( ) . METHOD_7 ( TYPE_4 . toString ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( null ) )  org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( null ) (  VAR_2 . METHOD_3 ( VAR_1 , VAR_3 , VAR_4 ) )  VAR_2 . METHOD_3 ( VAR_1 , VAR_3 , VAR_4 ) (  org.mockito.Mockito . METHOD_4 ( VAR_4 ) . METHOD_3 ( VAR_1 , VAR_3 ) )  org.mockito.Mockito . METHOD_4 ( VAR_4 ) . METHOD_3 ( VAR_1 , VAR_3 ) (  org.mockito.Mockito . METHOD_4 ( VAR_1 ) . METHOD_5 ( VAR_5 , VAR_6 ) )  org.mockito.Mockito . METHOD_4 ( VAR_1 ) . METHOD_5 ( VAR_5 , VAR_6 ) (  org.mockito.Mockito . METHOD_4 ( VAR_3 , org.mockito.Mockito . METHOD_6 ( 1 ) ) . METHOD_7 ( ( ( TYPE_3 ) ( org.mockito.Mockito . any ( ) ) ) ) )  org.mockito.Mockito . METHOD_4 ( VAR_3 , org.mockito.Mockito . METHOD_6 ( 1 ) ) . METHOD_7 ( ( ( TYPE_3 ) ( org.mockito.Mockito . any ( ) ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( returnValue ) ) )  VAR_1 = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( returnValue ) ) (  METHOD_3 ( ) )  METHOD_3 ( ) ) BLOCK BLOCK ) METHOD METHOD (  TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( returnValue ) ) ; METHOD_3 ( ) ; } } , VAR_2 ) ) )  TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( returnValue ) ) ; METHOD_3 ( ) ; } } , VAR_2 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) ) ) )  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) ) ) (  METHOD_3 ( ) )  METHOD_3 ( ) (  METHOD_4 ( true , null ) )  METHOD_4 ( true , null ) (  cmd . METHOD_1 ( ) )  cmd . METHOD_1 ( ) (  org.mockito.Mockito . METHOD_5 ( VAR_2 , org.mockito.Mockito . METHOD_6 ( 1 ) ) . METHOD_7 ( TYPE_3 . any ( VAR_3 class ) ) )  org.mockito.Mockito . METHOD_5 ( VAR_2 , org.mockito.Mockito . METHOD_6 ( 1 ) ) . METHOD_7 ( TYPE_3 . any ( VAR_3 class ) ) (  TYPE_4 . assertEquals ( cmd . METHOD_8 ( ) , VAR_4 ) )  TYPE_4 . assertEquals ( cmd . METHOD_8 ( ) , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( INT_1 , null , null ) . equals ( STRING_1 ) ) )  TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( INT_1 , null , null ) . equals ( STRING_1 ) ) (  TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( INT_1 , null , VAR_1 ) . equals ( STRING_1 ) ) )  TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( INT_1 , null , VAR_1 ) . equals ( STRING_1 ) ) (  TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( INT_1 , null , VAR_2 ) . equals ( STRING_2 ) ) )  TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( INT_1 , null , VAR_2 ) . equals ( STRING_2 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_2 ( ) ) INIT = VAR_2 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME version ) NAME version ( INIT = VAR_2 . METHOD_3 ( ) ) INIT = VAR_2 . METHOD_3 ( ) ) VAR VAR ( IF IF ( COND TYPE_1 . METHOD_4 ( version ) ) COND TYPE_1 . METHOD_4 ( version ) ( THEN THEN ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_5 ( VAR_1 ) ) INIT = METHOD_5 ( VAR_1 ) ) VAR VAR (  METHOD_6 ( VAR_3 ) )  METHOD_6 ( VAR_3 ) ( IF IF ( COND VAR_3 == null ) COND VAR_3 == null ( THEN THEN (  throw new TYPE_3 ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) ) ; )  throw new TYPE_3 ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) ) ; ) THEN THEN ) IF IF (  METHOD_7 ( VAR_3 . METHOD_2 ( ) ) )  METHOD_7 ( VAR_3 . METHOD_2 ( ) ) ) THEN THEN ( ELSE ELSE (  METHOD_8 ( VAR_1 , version ) )  METHOD_8 ( VAR_1 , version ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  org.mockito.Mockito.when ( VAR_2 . METHOD_2 ( TYPE_1 . METHOD_3 ( VAR_1 ) ) ) . thenReturn ( VAR_3 ) )  org.mockito.Mockito.when ( VAR_2 . METHOD_2 ( TYPE_1 . METHOD_3 ( VAR_1 ) ) ) . thenReturn ( VAR_3 ) (  org.mockito.Mockito.when ( VAR_2 . METHOD_4 ( TYPE_1 . any ( VAR_4 . Guid class ) ) ) . thenReturn ( TYPE_2 . METHOD_5 ( VAR_1 ) ) )  org.mockito.Mockito.when ( VAR_2 . METHOD_4 ( TYPE_1 . any ( VAR_4 . Guid class ) ) ) . thenReturn ( TYPE_2 . METHOD_5 ( VAR_1 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( STRING_1 , VAR_2 , STRING_2 , STRING_3 ) ) INIT = METHOD_2 ( STRING_1 , VAR_2 , STRING_2 , STRING_3 ) ) VAR VAR (  VAR_1 . METHOD_3 ( org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) . toString ( ) ) )  VAR_1 . METHOD_3 ( org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) . toString ( ) ) (  parameters . METHOD_5 ( VAR_1 ) )  parameters . METHOD_5 ( VAR_1 ) (  parameters . METHOD_6 ( VAR_3 ) )  parameters . METHOD_6 ( VAR_3 ) (  org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_7 ( VAR_1 , null ) )  org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_7 ( VAR_1 , null ) (  TYPE_2 . METHOD_8 ( command , VAR_4 ) )  TYPE_2 . METHOD_8 ( command , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND source != null ) COND source != null ( THEN THEN ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS> ( NAME list ) NAME list ( INIT = VAR_2 . Linq < org.ovirt.engine.core.common.businessentities.VDS > METHOD_2 ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) ) INIT = VAR_2 . Linq < org.ovirt.engine.core.common.businessentities.VDS > METHOD_2 ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) ) VAR VAR (  return list ; )  return list ; ) THEN THEN ) IF IF (  return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ; )  return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > list = VAR_2 . Linq < org.ovirt.engine.core.common.businessentities.VDS > METHOD_2 ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) ; return list ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > list = VAR_2 . Linq < org.ovirt.engine.core.common.businessentities.VDS > METHOD_2 ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) ; return list ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ; } } (  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_3 , new TYPE_2 ( VAR_1 ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_3 , new TYPE_2 ( VAR_1 ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 < TYPE_1 > ( ) ) INIT = new TYPE_2 < TYPE_1 > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( IN VAR_3 ) IN VAR_3 ( BLOCK BLOCK ( IF IF ( COND ( ! ( VAR_2 . METHOD_2 ( ) ) ) && ( VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) ) ) COND ( ! ( VAR_2 . METHOD_2 ( ) ) ) && ( VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) ) ( THEN THEN (  VAR_1 . add ( VAR_2 . METHOD_3 ( ) ) )  VAR_1 . add ( VAR_2 . METHOD_3 ( ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME vmId ) NAME vmId ( INIT = org.ovirt.engine.core.compat.Guid . METHOD_2 ( STRING_1 ) ) INIT = org.ovirt.engine.core.compat.Guid . METHOD_2 ( STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ( INIT = org.ovirt.engine.core.compat.Guid . METHOD_2 ( STRING_2 ) ) INIT = org.ovirt.engine.core.compat.Guid . METHOD_2 ( STRING_2 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_3 ( VAR_1 , vmId ) ) INIT = METHOD_3 ( VAR_1 , vmId ) ) VAR VAR (  TYPE_2 . METHOD_4 ( ( ( VAR_2 . METHOD_5 ( VAR_2 ) ) == 0 ) ) )  TYPE_2 . METHOD_4 ( ( ( VAR_2 . METHOD_5 ( VAR_2 ) ) == 0 ) ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_3 ( VAR_1 , vmId ) ) INIT = METHOD_3 ( VAR_1 , vmId ) ) VAR VAR (  TYPE_2 . METHOD_4 ( ( ( VAR_2 . METHOD_5 ( VAR_3 ) ) == 0 ) ) )  TYPE_2 . METHOD_4 ( ( ( VAR_2 . METHOD_5 ( VAR_3 ) ) == 0 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( INIT = ( VAR_1 + VAR_2 ) + VAR_3 ) INIT = ( VAR_1 + VAR_2 ) + VAR_3 ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_5 ) NAME VAR_5 ( INIT = TYPE_2 . getInstance ( VAR_6 ) . METHOD_2 ( VAR_4 . METHOD_3 ( ) ) ) INIT = TYPE_2 . getInstance ( VAR_6 ) . METHOD_2 ( VAR_4 . METHOD_3 ( ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_7 ) NAME VAR_7 ( INIT = new TYPE_1 ( VAR_5 , true ) ) INIT = new TYPE_1 ( VAR_5 , true ) ) VAR VAR (  return VAR_7 ; )  return VAR_7 ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_4 ( e ) ; )  throw new TYPE_4 ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = null ) INIT = null ) VAR VAR ( IF IF ( COND ( ( ! ( getModel ( ) . METHOD_2 ( ) ) ) && ( getModel ( ) . METHOD_3 ( ) ) ) && ( ! ( getModel ( ) . METHOD_4 ( ) ) ) ) COND ( ( ! ( getModel ( ) . METHOD_2 ( ) ) ) && ( getModel ( ) . METHOD_3 ( ) ) ) && ( ! ( getModel ( ) . METHOD_4 ( ) ) ) ( THEN THEN (  VAR_1 = TYPE_2 . METHOD_5 ( VAR_2 . METHOD_6 ( ) ) )  VAR_1 = TYPE_2 . METHOD_5 ( VAR_2 . METHOD_6 ( ) ) ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . METHOD_2 ( VAR_4 , new TYPE_4 ( METHOD_3 ( ) , VAR_1 , false ) ) ) INIT = VAR_3 . METHOD_2 ( VAR_4 , new TYPE_4 ( METHOD_3 ( ) , VAR_1 , false ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_5> ) TYPE java.util.List<TYPE_5> ( NAME VAR_5 ) NAME VAR_5 ( INIT = ( ( java.util.List < TYPE_5 > ) ( VAR_2 . getReturnValue ( ) ) ) ) INIT = ( ( java.util.List < TYPE_5 > ) ( VAR_2 . getReturnValue ( ) ) ) ) VAR VAR (  return METHOD_4 ( VAR_5 ) ; )  return METHOD_4 ( VAR_5 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<TYPE_1<org.ovirt.engine.core.compat.Guid,java.lang.Integer>> ) RETURN java.util.List<TYPE_1<org.ovirt.engine.core.compat.Guid,java.lang.Integer>> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDS> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDS> ( NAME hosts ) NAME hosts ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ) VAR VAR ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.String> ) TYPE java.util.Map<java.lang.String,java.lang.String> ( NAME parameters ) NAME parameters ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1<org.ovirt.engine.core.compat.Guid,java.lang.Integer>> ) TYPE java.util.List<TYPE_1<org.ovirt.engine.core.compat.Guid,java.lang.Integer>> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < TYPE_1 < org.ovirt.engine.core.compat.Guid , java.lang.Integer > > ( ) ) INIT = new java.util.ArrayList < TYPE_1 < org.ovirt.engine.core.compat.Guid , java.lang.Integer > > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME vds ) NAME vds ( IN hosts ) IN hosts ( BLOCK BLOCK (  VAR_1 . add ( new TYPE_1 < org.ovirt.engine.core.compat.Guid , java.lang.Integer > ( vds . getId ( ) , METHOD_2 ( vds , parameters ) ) ) )  VAR_1 . add ( new TYPE_1 < org.ovirt.engine.core.compat.Guid , java.lang.Integer > ( vds . getId ( ) , METHOD_2 ( vds , parameters ) ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_1 ) ( target ) ) ) INIT = ( ( TYPE_1 ) ( target ) ) ) VAR VAR ( IF IF ( COND returnValue != null ) COND returnValue != null ( THEN THEN ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( returnValue ) ) ) INIT = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( returnValue ) ) ) VAR VAR (  VAR_3 = VAR_2 )  VAR_3 = VAR_2 ) THEN THEN ( ELSE ELSE (  VAR_4 = true )  VAR_4 = true ) ELSE ELSE ) IF IF (  VAR_1 . METHOD_2 ( ) )  VAR_1 . METHOD_2 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ) TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME storageDomain ) NAME storageDomain ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_2 ( ) . METHOD_3 ( TYPE_2 . METHOD_4 ( ) . METHOD_5 ( ) ) ) INIT = TYPE_2 . METHOD_2 ( ) . METHOD_3 ( TYPE_2 . METHOD_4 ( ) . METHOD_5 ( ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3<java.lang.String> ) TYPE TYPE_3<java.lang.String> ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_4 < > ( VAR_1 ) ) INIT = new TYPE_4 < > ( VAR_1 ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK ( IF IF ( COND VAR_3 . METHOD_6 ( VAR_4 . METHOD_7 ( ) ) ) COND VAR_3 . METHOD_6 ( VAR_4 . METHOD_7 ( ) ) ( THEN THEN (  VAR_3 . METHOD_8 ( VAR_4 . METHOD_7 ( ) ) )  VAR_3 . METHOD_8 ( VAR_4 . METHOD_7 ( ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_3 . isEmpty ( ) ; )  return VAR_3 . isEmpty ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME command ) NAME command ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_2 ( ) )  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_2 ( ) (  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( command ) . METHOD_3 ( ) )  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( command ) . METHOD_3 ( ) (  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( command ) . METHOD_4 ( ) )  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( command ) . METHOD_4 ( ) (  org.mockito.Mockito.doReturn ( VAR_4 ) . when ( command ) . METHOD_5 ( ) )  org.mockito.Mockito.doReturn ( VAR_4 ) . when ( command ) . METHOD_5 ( ) (  org.mockito.Mockito.doReturn ( METHOD_6 ( ) ) . when ( VAR_3 ) . METHOD_7 ( TYPE_2 . any ( VAR_5 . Guid class ) ) )  org.mockito.Mockito.doReturn ( METHOD_6 ( ) ) . when ( VAR_3 ) . METHOD_7 ( TYPE_2 . any ( VAR_5 . Guid class ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ( INIT = ( ( TYPE_1 ) ( target ) ) ) INIT = ( ( TYPE_1 ) ( target ) ) ) VAR VAR (  VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) )  VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) ( VAR VAR ( TYPE int ) TYPE int ( NAME value ) NAME value ( INIT = TYPE_2 . getInstance ( ) . METHOD_1 ( VAR_2 , VAR_1 ) ) INIT = TYPE_2 . getInstance ( ) . METHOD_1 ( VAR_2 , VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.uicommonweb.models.EntityModel ) TYPE org.ovirt.engine.ui.uicommonweb.models.EntityModel ( NAME tempVar ) NAME tempVar ( INIT = new org.ovirt.engine.ui.uicommonweb.models.EntityModel ( ) ) INIT = new org.ovirt.engine.ui.uicommonweb.models.EntityModel ( ) ) VAR VAR (  tempVar . setEntity ( value ) )  tempVar . setEntity ( value ) (  METHOD_2 ( VAR_3 ) )  METHOD_2 ( VAR_3 ) (  model . METHOD_3 ( ) . setSelectedItem ( tempVar ) )  model . METHOD_3 ( ) . setSelectedItem ( tempVar ) (  METHOD_4 ( VAR_3 ) )  METHOD_4 ( VAR_3 ) (  METHOD_5 ( VAR_3 ) )  METHOD_5 ( VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  METHOD_3 ( ) )  METHOD_3 ( ) ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME id ) NAME id ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.network> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.network> ( NAME VAR_2 ) NAME VAR_2 ( INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_4 ( ) . METHOD_5 ( id ) ) INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_4 ( ) . METHOD_5 ( id ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.network ) TYPE org.ovirt.engine.core.common.businessentities.network ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK (  TYPE_1 . METHOD_6 ( id , VAR_3 ) )  TYPE_1 . METHOD_6 ( id , VAR_3 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  TYPE_2 . METHOD_7 ( true ) )  TYPE_2 . METHOD_7 ( true ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1.ValidationResult ) RETURN TYPE_1.ValidationResult ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME value ) NAME value ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.ValidationResult ) TYPE TYPE_1.ValidationResult ( NAME result ) NAME result ( INIT = super . METHOD_1 ( value ) ) INIT = super . METHOD_1 ( value ) ) VAR VAR ( IF IF ( COND ! ( result . METHOD_2 ( ) ) ) COND ! ( result . METHOD_2 ( ) ) ( THEN THEN (  result . METHOD_3 ( ) . add ( METHOD_4 ( ( ( java.lang.String ) ( value ) ) ) ) )  result . METHOD_3 ( ) . add ( METHOD_4 ( ( ( java.lang.String ) ( value ) ) ) ) ) THEN THEN ) IF IF (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ) TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ( NAME cluster ) NAME cluster ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDS> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDS> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND cluster . METHOD_2 ( ) ) COND cluster . METHOD_2 ( ) ( THEN THEN (  VAR_3 . METHOD_3 ( STRING_1 , cluster . METHOD_4 ( ) ) )  VAR_3 . METHOD_3 ( STRING_1 , cluster . METHOD_4 ( ) ) (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_5 ( cluster , VAR_1 , VAR_2 ) ) INIT = METHOD_5 ( cluster , VAR_1 , VAR_2 ) ) VAR VAR ( IF IF ( COND VAR_4 != null ) COND VAR_4 != null ( THEN THEN (  METHOD_6 ( VAR_2 , VAR_4 ) )  METHOD_6 ( VAR_2 , VAR_4 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<?> ) TYPE TYPE_1<?> ( NAME args ) NAME args ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_4 ) NAME METHOD_4 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  this . VAR_5 = result )  this . VAR_5 = result (  this . VAR_6 = VAR_3 )  this . VAR_6 = VAR_3 ) BLOCK BLOCK ) METHOD METHOD (  return VAR_2 . METHOD_3 ( args , VAR_3 , new TYPE_3 < java.lang.String > ( ) { public void METHOD_4 ( java.lang.String result ) { VAR_4 this . VAR_5 = result ; VAR_4 this . VAR_6 = VAR_3 ; } } , VAR_1 ) ; )  return VAR_2 . METHOD_3 ( args , VAR_3 , new TYPE_3 < java.lang.String > ( ) { public void METHOD_4 ( java.lang.String result ) { VAR_4 this . VAR_5 = result ; VAR_4 this . VAR_6 = VAR_3 ; } } , VAR_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME VAR_1 ) NAME VAR_1 ( INIT = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ) INIT = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ) VAR VAR ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_3 = ( ( java.util.Map < TYPE_1 < java.lang.Integer , org.ovirt.engine.core.compat . Version > , java.lang.Boolean > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) )  VAR_3 = ( ( java.util.Map < TYPE_1 < java.lang.Integer , org.ovirt.engine.core.compat . Version > , java.lang.Boolean > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD (  VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { VAR_3 = ( ( java.util.Map < TYPE_1 < java.lang.Integer , org.ovirt.engine.core.compat . Version > , java.lang.Boolean > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ; } } )  VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { VAR_3 = ( ( java.util.Map < TYPE_1 < java.lang.Integer , org.ovirt.engine.core.compat . Version > , java.lang.Boolean > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ; } } (  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_4 , new TYPE_3 ( VAR_5 ) , VAR_1 ) )  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_4 , new TYPE_3 ( VAR_5 ) , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME setEntity ) NAME setEntity ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME value ) NAME value ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME vds ) NAME vds ( INIT = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( value ) ) ) INIT = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( value ) ) ) VAR VAR (  VAR_1 = ( ( ( vds == null ) || ( ( getEntity ( ) ) == null ) ) || ( ! ( vds . getId ( ) . equals ( getEntity ( ) . getId ( ) ) ) ) ) || ( ! ( vds . getStatus ( ) . equals ( getEntity ( ) . getStatus ( ) ) ) ) )  VAR_1 = ( ( ( vds == null ) || ( ( getEntity ( ) ) == null ) ) || ( ! ( vds . getId ( ) . equals ( getEntity ( ) . getId ( ) ) ) ) ) || ( ! ( vds . getStatus ( ) . equals ( getEntity ( ) . getStatus ( ) ) ) ) (  super . setEntity ( value ) )  super . setEntity ( value ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND returnValue != null ) COND returnValue != null ( THEN THEN (  VAR_1 . METHOD_3 ( ( ( java.util.HashMap < TYPE_1 < TYPE_2 , java.lang.String > , java.lang.Object > ) ( returnValue ) ) ) )  VAR_1 . METHOD_3 ( ( ( java.util.HashMap < TYPE_1 < TYPE_2 , java.lang.String > , java.lang.Object > ) ( returnValue ) ) ) ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object returnValue , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( returnValue != null ) { VAR_1 . METHOD_3 ( ( ( java.util.HashMap < TYPE_1 < TYPE_2 , java.lang.String > , java.lang.Object > ) ( returnValue ) ) ) ; } return VAR_1 ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object returnValue , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( returnValue != null ) { VAR_1 . METHOD_3 ( ( ( java.util.HashMap < TYPE_1 < TYPE_2 , java.lang.String > , java.lang.Object > ) ( returnValue ) ) ) ; } return VAR_1 ; } } (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new TYPE_3 ( ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new TYPE_3 ( ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 instanceof TYPE_5 ) COND VAR_1 instanceof TYPE_5 ( THEN THEN (  return new TYPE_6 ( ( ( TYPE_5 ) ( VAR_1 ) ) , VAR_2 ) ; )  return new TYPE_6 ( ( ( TYPE_5 ) ( VAR_1 ) ) , VAR_2 ) ; ) THEN THEN ( ELSE ELSE ( IF IF ( COND VAR_1 instanceof TYPE_7 ) COND VAR_1 instanceof TYPE_7 ( THEN THEN (  return new TYPE_8 ( ( ( TYPE_7 ) ( VAR_1 ) ) , VAR_2 , VAR_3 ) ; )  return new TYPE_8 ( ( ( TYPE_7 ) ( VAR_1 ) ) , VAR_2 , VAR_3 ) ; ) THEN THEN ( ELSE ELSE (  return new TYPE_9 ( VAR_1 , VAR_2 ) ; )  return new TYPE_9 ( VAR_1 , VAR_2 ) ; ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME dao ) NAME dao ( INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) ) INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = dao . METHOD_3 ( VAR_1 . METHOD_4 ( ) , VAR_1 . getId ( ) ) ) INIT = dao . METHOD_3 ( VAR_1 . METHOD_4 ( ) , VAR_1 . getId ( ) ) ) VAR VAR ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN (  dao . METHOD_5 ( VAR_2 ) )  dao . METHOD_5 ( VAR_2 ) ) THEN THEN ( ELSE ELSE (  VAR_2 = new TYPE_1 ( VAR_1 ) )  VAR_2 = new TYPE_1 ( VAR_1 ) (  VAR_2 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_6 ( ) ) )  VAR_2 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_6 ( ) ) (  dao . METHOD_7 ( VAR_2 ) )  dao . METHOD_7 ( VAR_2 ) ) ELSE ELSE ) IF IF (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ! ( super . METHOD_1 ( ) ) ) COND ! ( super . METHOD_1 ( ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  return validate ( VAR_1 . METHOD_2 ( getParameters ( ) . METHOD_3 ( ) , METHOD_4 ( ) , getParameters ( ) . METHOD_5 ( ) , false ) ) ; )  return validate ( VAR_1 . METHOD_2 ( getParameters ( ) . METHOD_3 ( ) , METHOD_4 ( ) , getParameters ( ) . METHOD_5 ( ) , false ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME status ) NAME status ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  vm . METHOD_2 ( status ) )  vm . METHOD_2 ( status ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = vm . getStatus ( ) ) INIT = vm . getStatus ( ) ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = org.ovirt.engine.core.common.businessentities.VM . METHOD_3 ( VAR_1 ) ) INIT = org.ovirt.engine.core.common.businessentities.VM . METHOD_3 ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_2 || ( VAR_1 == ( VAR_3 ) ) ) COND VAR_2 || ( VAR_1 == ( VAR_3 ) ) ( THEN THEN (  METHOD_4 ( vm ) )  METHOD_4 ( vm ) ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  vm . METHOD_5 ( null ) )  vm . METHOD_5 ( null ) (  vm . METHOD_6 ( VAR_4 ) )  vm . METHOD_6 ( VAR_4 ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 = new TYPE_1 < TYPE_2 > ( false , true ) )  VAR_1 = new TYPE_1 < TYPE_2 > ( false , true ) ( VAR VAR ( TYPE TYPE_3<java.lang.String> ) TYPE TYPE_3<java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_3 < java.lang.String > ( ) { public java.lang.String getValue ( java.lang.String VAR_3 ) { return VAR_3 ; } } ) INIT = new TYPE_3 < java.lang.String > ( ) { public java.lang.String getValue ( java.lang.String VAR_3 ) { return VAR_3 ; } } ) VAR VAR ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME getValue ) NAME getValue ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD (  VAR_1 . addColumn ( VAR_2 , VAR_4 . METHOD_2 ( ) ) )  VAR_1 . addColumn ( VAR_2 , VAR_4 . METHOD_2 ( ) ) (  VAR_1 . METHOD_3 ( new java.util.ArrayList < org.ovirt.engine.ui.uicommonweb.models.EntityModel > ( ) ) )  VAR_1 . METHOD_3 ( new java.util.ArrayList < org.ovirt.engine.ui.uicommonweb.models.EntityModel > ( ) ) (  VAR_1 . METHOD_4 ( STRING_1 , true ) )  VAR_1 . METHOD_4 ( STRING_1 , true ) (  VAR_1 . METHOD_5 ( new TYPE_4 ( ) ) )  VAR_1 . METHOD_5 ( new TYPE_4 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , null ) ) ) )  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , null ) ) ) (  METHOD_3 ( cmd ) )  METHOD_3 ( cmd ) (  TYPE_3 . METHOD_4 ( cmd . METHOD_5 ( ) ) )  TYPE_3 . METHOD_4 ( cmd . METHOD_5 ( ) ) (  TYPE_3 . METHOD_6 ( cmd . getReturnValue ( ) . METHOD_7 ( ) . METHOD_8 ( TYPE_4 . toString ( ) ) ) )  TYPE_3 . METHOD_6 ( cmd . getReturnValue ( ) . METHOD_7 ( ) . METHOD_8 ( TYPE_4 . toString ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) )  METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) (  METHOD_4 ( 1 , 0 , false ) )  METHOD_4 ( 1 , 0 , false ) (  VAR_1 . METHOD_5 ( ) )  VAR_1 . METHOD_5 ( ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME model ) NAME model ( INIT = getModel ( 1 ) ) INIT = getModel ( 1 ) ) VAR VAR (  model . setId ( VAR_2 [ 1 ] . toString ( ) ) )  model . setId ( VAR_2 [ 1 ] . toString ( ) ) ( TRY TRY ( BLOCK BLOCK (  resource . METHOD_6 ( model ) )  resource . METHOD_6 ( model ) (  TYPE_1 . METHOD_7 ( STRING_1 ) )  TYPE_1 . METHOD_7 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( BLOCK BLOCK (  METHOD_8 ( VAR_3 ) )  METHOD_8 ( VAR_3 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME vds ) NAME vds ( INIT = null ) INIT = null ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ( INIT = new org.ovirt.engine.core.common.businessentities.VM ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.VM ( ) ) VAR VAR (  vm . METHOD_2 ( VAR_2 ) )  vm . METHOD_2 ( VAR_2 ) (  VAR_1 . METHOD_3 ( vds ) )  VAR_1 . METHOD_3 ( vds ) (  VAR_1 . METHOD_4 ( VAR_3 ) )  VAR_1 . METHOD_4 ( VAR_3 ) (  VAR_1 . METHOD_5 ( vm ) )  VAR_1 . METHOD_5 ( vm ) ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_1 . METHOD_6 ( ) ) INIT = VAR_1 . METHOD_6 ( ) ) VAR VAR (  TYPE_3 . METHOD_7 ( VAR_4 ) )  TYPE_3 . METHOD_7 ( VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_5 ) NAME VAR_5 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  VAR_5 . METHOD_3 ( STRING_1 , VAR_2 ) )  VAR_5 . METHOD_3 ( STRING_1 , VAR_2 ) (  VAR_5 . METHOD_3 ( STRING_2 , VAR_4 ) )  VAR_5 . METHOD_3 ( STRING_2 , VAR_4 ) (  VAR_5 . METHOD_3 ( STRING_3 , VAR_3 ) )  VAR_5 . METHOD_3 ( STRING_3 , VAR_3 ) (  TYPE_3 . log ( VAR_5 , VAR_6 ) )  TYPE_3 . log ( VAR_5 , VAR_6 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME resource ) NAME resource ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( resource , VAR_1 ) )  METHOD_2 ( resource , VAR_1 ) ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.network ) TYPE org.ovirt.engine.core.common.businessentities.network ( NAME network ) NAME network ( INIT = METHOD_3 ( resource ) ) INIT = METHOD_3 ( resource ) ) VAR VAR ( IF IF ( COND network != null ) COND network != null ( THEN THEN (  resource . METHOD_4 ( ) . METHOD_5 ( network . METHOD_6 ( ) ) )  resource . METHOD_4 ( ) . METHOD_5 ( network . METHOD_6 ( ) ) (  resource . METHOD_4 ( ) . setId ( null ) )  resource . METHOD_4 ( ) . setId ( null ) ) THEN THEN ) IF IF (  return METHOD_7 ( resource , VAR_2 , VAR_3 , VAR_4 ) ; )  return METHOD_7 ( resource , VAR_2 , VAR_3 , VAR_4 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 = org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) )  VAR_1 = org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) (  org.mockito.Mockito.doReturn ( cluster ) . when ( VAR_2 ) . get ( TYPE_1 . any ( VAR_3 . Guid class ) ) )  org.mockito.Mockito.doReturn ( cluster ) . when ( VAR_2 ) . get ( TYPE_1 . any ( VAR_3 . Guid class ) ) (  org.mockito.Mockito.doReturn ( VAR_4 ) . when ( command ) . METHOD_3 ( ) )  org.mockito.Mockito.doReturn ( VAR_4 ) . when ( command ) . METHOD_3 ( ) (  org.mockito.Mockito.when ( VAR_5 . METHOD_4 ( VAR_1 ) ) . thenReturn ( METHOD_5 ( VAR_6 ) ) )  org.mockito.Mockito.when ( VAR_5 . METHOD_4 ( VAR_1 ) ) . thenReturn ( METHOD_5 ( VAR_6 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . METHOD_3 ( ( ( java.util.List < TYPE_3 > ) ( returnValue ) ) ) )  VAR_1 . METHOD_3 ( ( ( java.util.List < TYPE_3 > ) ( returnValue ) ) ) ) BLOCK BLOCK ) METHOD METHOD (  TYPE_2 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 . METHOD_3 ( ( ( java.util.List < TYPE_3 > ) ( returnValue ) ) ) ; } } ) ) )  TYPE_2 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 . METHOD_3 ( ( ( java.util.List < TYPE_3 > ) ( returnValue ) ) ) ; } } ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) == null ) COND ( VAR_1 ) == null ( THEN THEN ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) )  VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) (  METHOD_3 ( ) )  METHOD_3 ( ) ) BLOCK BLOCK ) METHOD METHOD (  TYPE_1 . getInstance ( ) . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) ; METHOD_3 ( ) ; } } , model . METHOD_4 ( ) ) ) )  TYPE_1 . getInstance ( ) . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) ; METHOD_3 ( ) ; } } , model . METHOD_4 ( ) ) ) ) THEN THEN ( ELSE ELSE (  METHOD_3 ( ) )  METHOD_3 ( ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_4.VdcActionParametersBase ) RETURN TYPE_4.VdcActionParametersBase ( NAME getParameters ) NAME getParameters ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME entity ) NAME entity ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return new TYPE_5 ( METHOD_3 ( VAR_6 , VAR_7 class ) . map ( VAR_5 , entity ) ) ; )  return new TYPE_5 ( METHOD_3 ( VAR_6 , VAR_7 class ) . map ( VAR_5 , entity ) ) ; ) BLOCK BLOCK ) METHOD METHOD (  return METHOD_2 ( VAR_1 , new TYPE_2 < org.ovirt.engine.core.compat.Guid > ( VAR_2 , VAR_3 . IdQueryParameters class ) , VAR_4 , new TYPE_3 < TYPE_1 , TYPE_1 > ( ) { public TYPE_4 . VdcActionParametersBase getParameters ( TYPE_1 VAR_5 , TYPE_1 entity ) { return new TYPE_5 ( METHOD_3 ( VAR_6 , VAR_7 class ) . map ( VAR_5 , entity ) ) ; } } ) ; )  return METHOD_2 ( VAR_1 , new TYPE_2 < org.ovirt.engine.core.compat.Guid > ( VAR_2 , VAR_3 . IdQueryParameters class ) , VAR_4 , new TYPE_3 < TYPE_1 , TYPE_1 > ( ) { public TYPE_4 . VdcActionParametersBase getParameters ( TYPE_1 VAR_5 , TYPE_1 entity ) { return new TYPE_5 ( METHOD_3 ( VAR_6 , VAR_7 class ) . map ( VAR_5 , entity ) ) ; } } ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.AuditLogType ) TYPE TYPE_1.AuditLogType ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  VAR_3 . METHOD_2 ( METHOD_3 ( ) ) )  VAR_3 . METHOD_2 ( METHOD_3 ( ) ) (  VAR_3 . METHOD_4 ( STRING_1 , VAR_2 ) )  VAR_3 . METHOD_4 ( STRING_1 , VAR_2 ) (  TYPE_3 . METHOD_5 ( VAR_3 , VAR_1 , VAR_4 ) )  TYPE_3 . METHOD_5 ( VAR_3 , VAR_1 , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ) VAR VAR ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( ) . METHOD_3 ( vm . METHOD_4 ( ) , vm . METHOD_5 ( ) ) ) INIT = METHOD_2 ( ) . METHOD_3 ( vm . METHOD_4 ( ) , vm . METHOD_5 ( ) ) ) VAR VAR ( IF IF ( COND ! ( VAR_2 . isEmpty ( ) ) ) COND ! ( VAR_2 . isEmpty ( ) ) ( THEN THEN (  TYPE_2 . getInstance ( ) . METHOD_6 ( VAR_2 , VAR_1 ) )  TYPE_2 . getInstance ( ) . METHOD_6 ( VAR_2 , VAR_1 ) (  return false ; )  return false ; ) THEN THEN ) IF IF (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ( INIT = new org.ovirt.engine.core.compat.Guid ( STRING_1 ) ) INIT = new org.ovirt.engine.core.compat.Guid ( STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_2 . setId ( VAR_1 ) )  VAR_2 . setId ( VAR_1 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME command ) NAME command ( INIT = new TYPE_2 ( new TYPE_3 ( VAR_1 , VAR_2 ) ) { protected void METHOD_2 ( ) { } } ) INIT = new TYPE_2 ( new TYPE_3 ( VAR_1 , VAR_2 ) ) { protected void METHOD_2 ( ) { } } ) VAR VAR ( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_2 ) NAME METHOD_2 ( BLOCK BLOCK ) BLOCK BLOCK ) METHOD METHOD (  VAR_3 = METHOD_3 ( ) )  VAR_3 = METHOD_3 ( ) (  TYPE_4 . METHOD_4 ( command . METHOD_5 ( ) ) )  TYPE_4 . METHOD_4 ( command . METHOD_5 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDS> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDS> ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( result ) )  TYPE_1 . METHOD_2 ( result ) (  TYPE_1 . METHOD_3 ( result . isEmpty ( ) ) )  TYPE_1 . METHOD_3 ( result . isEmpty ( ) ) ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME vds ) NAME vds ( IN result ) IN result ( BLOCK BLOCK (  TYPE_1 . assertEquals ( STRING_1 , VAR_1 . METHOD_4 ( ) , vds . METHOD_4 ( ) ) )  TYPE_1 . assertEquals ( STRING_1 , VAR_1 . METHOD_4 ( ) , vds . METHOD_4 ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2<org.ovirt.engine.core.compat.Guid> ) TYPE TYPE_2<org.ovirt.engine.core.compat.Guid> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 < org.ovirt.engine.core.compat.Guid > ( ) { public TYPE_3 METHOD_2 ( org.ovirt.engine.core.compat.Guid VAR_2 ) throws TYPE_4 { return VAR_3 . METHOD_2 ( VAR_2 ) ; } } ) INIT = new TYPE_2 < org.ovirt.engine.core.compat.Guid > ( ) { public TYPE_3 METHOD_2 ( org.ovirt.engine.core.compat.Guid VAR_2 ) throws TYPE_4 { return VAR_3 . METHOD_2 ( VAR_2 ) ; } } ) VAR VAR ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_3 ) RETURN TYPE_3 ( NAME METHOD_2 ) NAME METHOD_2 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return VAR_3 . METHOD_2 ( VAR_2 ) ; )  return VAR_3 . METHOD_2 ( VAR_2 ) ; ) BLOCK BLOCK ) METHOD METHOD ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_5 ( VAR_1 , METHOD_3 ( id ) ) ) INIT = new TYPE_5 ( VAR_1 , METHOD_3 ( id ) ) ) VAR VAR (  return inject ( new TYPE_6 < TYPE_7 , TYPE_3 > ( VAR_5 , VAR_2 , VAR_4 ) ) ; )  return inject ( new TYPE_6 < TYPE_7 , TYPE_3 > ( VAR_5 , VAR_2 , VAR_4 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ( NAME iface ) NAME iface ) VAR VAR ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ( NAME i ) NAME i ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( IF IF ( COND ( TYPE_1 . METHOD_2 ( i ) ) && ( TYPE_1 . METHOD_3 ( i . getName ( ) , iface . getName ( ) ) ) ) COND ( TYPE_1 . METHOD_2 ( i ) ) && ( TYPE_1 . METHOD_3 ( i . getName ( ) , iface . getName ( ) ) ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_3 . getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( VAR_2 , new TYPE_4 ( host . getId ( ) ) ) ) INIT = TYPE_3 . getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( VAR_2 , new TYPE_4 ( host . getId ( ) ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME returnValue ) NAME returnValue ( INIT = VAR_1 . get ( VAR_3 < java.lang.Integer > METHOD_4 ( VAR_4 ) , VAR_5 ) ) INIT = VAR_1 . get ( VAR_3 < java.lang.Integer > METHOD_4 ( VAR_4 ) , VAR_5 ) ) VAR VAR ( IF IF ( COND returnValue . getSucceeded ( ) ) COND returnValue . getSucceeded ( ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME id ) NAME id ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME log ) NAME log ( INIT = org.mockito.Mockito . METHOD_2 ( VAR_1 class ) ) INIT = org.mockito.Mockito . METHOD_2 ( VAR_1 class ) ) VAR VAR (  org.mockito.Mockito.when ( log . METHOD_3 ( ) ) . thenReturn ( true ) )  org.mockito.Mockito.when ( log . METHOD_3 ( ) ) . thenReturn ( true ) (  TYPE_2 . METHOD_4 ( log , id , new TYPE_3 ( ) , new java.lang.Object ( ) ) )  TYPE_2 . METHOD_4 ( log , id , new TYPE_3 ( ) , new java.lang.Object ( ) ) (  org.mockito.Mockito . METHOD_5 ( log ) . METHOD_6 ( TYPE_4 . METHOD_7 ( VAR_2 ) , new java.lang.Object [ ] { TYPE_4 . METHOD_8 ( ) , TYPE_4 . METHOD_7 ( id ) } ) )  org.mockito.Mockito . METHOD_5 ( log ) . METHOD_6 ( TYPE_4 . METHOD_7 ( VAR_2 ) , new java.lang.Object [ ] { TYPE_4 . METHOD_8 ( ) , TYPE_4 . METHOD_7 ( id ) } ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( SWITCH SWITCH ( NAME METHOD_2 ( ) . METHOD_3 ( ) ) NAME METHOD_2 ( ) . METHOD_3 ( ) ( CASE VAR_2 ( BLOCK BLOCK (  return null ; )  return null ; ) BLOCK BLOCK ) CASE VAR_2 ( CASE VAR_3 ( BLOCK BLOCK (  VAR_1 = METHOD_4 ( ) . METHOD_5 ( ) )  VAR_1 = METHOD_4 ( ) . METHOD_5 ( ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_3 ( CASE VAR_4 ( BLOCK BLOCK (  VAR_1 = METHOD_6 ( ) . METHOD_7 ( ) )  VAR_1 = METHOD_6 ( ) . METHOD_7 ( ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_4 ( DEFAULT DEFAULT ( BLOCK BLOCK (  VAR_1 = METHOD_4 ( ) . METHOD_5 ( ) )  VAR_1 = METHOD_4 ( ) . METHOD_5 ( ) (  VAR_1 . METHOD_8 ( METHOD_6 ( ) . METHOD_7 ( ) ) )  VAR_1 . METHOD_8 ( METHOD_6 ( ) . METHOD_7 ( ) ) (  break ; )  break ; ) BLOCK BLOCK ) DEFAULT DEFAULT ) SWITCH SWITCH (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ( INIT = ( ( TYPE_1 ) ( target ) ) ) INIT = ( ( TYPE_1 ) ( target ) ) ) VAR VAR ( IF IF ( COND returnValue != null ) COND returnValue != null ( THEN THEN (  model . METHOD_2 ( ( ( java.util.HashMap < org.ovirt.engine.core.compat . Version , java.util.ArrayList < java.lang.String > > ) ( returnValue ) ) ) )  model . METHOD_2 ( ( ( java.util.HashMap < org.ovirt.engine.core.compat . Version , java.util.ArrayList < java.lang.String > > ) ( returnValue ) ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_5 . METHOD_2 ( VAR_2 , VAR_6 class , METHOD_3 ( VAR_1 ) ) ) INIT = VAR_5 . METHOD_2 ( VAR_2 , VAR_6 class , METHOD_3 ( VAR_1 ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_7 ) NAME VAR_7 ( INIT = METHOD_4 ( VAR_1 , VAR_4 , VAR_3 ) ) INIT = METHOD_4 ( VAR_1 , VAR_4 , VAR_3 ) ) VAR VAR (  return VAR_7 ; )  return VAR_7 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME value ) NAME value ) VAR VAR ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = false ) INIT = false ) VAR VAR ( IF IF ( COND ( value >= 0 ) && ( value <= ( VAR_3 < java.lang.Integer > METHOD_2 ( VAR_4 ) ) ) ) COND ( value >= 0 ) && ( value <= ( VAR_3 < java.lang.Integer > METHOD_2 ( VAR_4 ) ) ) ( THEN THEN (  VAR_2 = true )  VAR_2 = true ) THEN THEN ( ELSE ELSE (  VAR_1 . add ( TYPE_1 . toString ( ) ) )  VAR_1 . add ( TYPE_1 . toString ( ) ) (  VAR_1 . add ( java.lang.String . METHOD_3 ( STRING_1 , VAR_3 < java.lang.Integer > METHOD_2 ( VAR_4 ) ) ) )  VAR_1 . add ( java.lang.String . METHOD_3 ( STRING_1 , VAR_3 < java.lang.Integer > METHOD_2 ( VAR_4 ) ) ) ) ELSE ELSE ) IF IF (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.lang.Integer ) RETURN java.lang.Integer ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME entity ) NAME entity ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND entity instanceof java.lang.Integer ) COND entity instanceof java.lang.Integer ( THEN THEN (  return ( ( java.lang.Integer ) ( entity ) ) ; )  return ( ( java.lang.Integer ) ( entity ) ) ; ) THEN THEN ) IF IF ( IF IF ( COND ( entity == null ) || ( ! ( entity instanceof java.lang.String ) ) ) COND ( entity == null ) || ( ! ( entity instanceof java.lang.String ) ) ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( java.lang.String ) ( entity ) ) ) INIT = ( ( java.lang.String ) ( entity ) ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  return new java.lang.Integer ( VAR_1 ) ; )  return new java.lang.Integer ( VAR_1 ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ( BLOCK BLOCK (  return null ; )  return null ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < TYPE_1 > ( ) ) INIT = new java.util.ArrayList < TYPE_1 > ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( VAR_1 ) ) INIT = METHOD_2 ( VAR_1 ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_3 ( VAR_2 , STRING_1 , VAR_1 . get ( 0 ) ) ) INIT = new TYPE_3 ( VAR_2 , STRING_1 , VAR_1 . get ( 0 ) ) ) VAR VAR (  TYPE_4 . METHOD_3 ( VAR_3 ) )  TYPE_4 . METHOD_3 ( VAR_3 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ( BLOCK BLOCK (  return ; )  return ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  TYPE_5 . METHOD_4 ( STRING_2 ) )  TYPE_5 . METHOD_4 ( STRING_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME returnValue ) NAME returnValue ( INIT = org.ovirt.engine.ui.frontend.Frontend . METHOD_2 ( VAR_1 , new TYPE_2 ( ( ( java.lang.String ) ( METHOD_3 ( ) . getEntity ( ) ) ) , ( ( java.lang.String ) ( METHOD_4 ( ) . getEntity ( ) ) ) , ( ( java.lang.String ) ( METHOD_5 ( ) . getEntity ( ) ) ) , ( ( java.lang.String ) ( METHOD_6 ( ) . getSelectedItem ( ) ) ) ) ) ) INIT = org.ovirt.engine.ui.frontend.Frontend . METHOD_2 ( VAR_1 , new TYPE_2 ( ( ( java.lang.String ) ( METHOD_3 ( ) . getEntity ( ) ) ) , ( ( java.lang.String ) ( METHOD_4 ( ) . getEntity ( ) ) ) , ( ( java.lang.String ) ( METHOD_5 ( ) . getEntity ( ) ) ) , ( ( java.lang.String ) ( METHOD_6 ( ) . getSelectedItem ( ) ) ) ) ) ) VAR VAR ( IF IF ( COND ( returnValue != null ) && ( returnValue . getSucceeded ( ) ) ) COND ( returnValue != null ) && ( returnValue . getSucceeded ( ) ) ( THEN THEN ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME object ) NAME object ( INIT = new TYPE_1 ( METHOD_2 ( VAR_1 ) , VAR_2 , INT_1 ) ) INIT = new TYPE_1 ( METHOD_2 ( VAR_1 ) , VAR_2 , INT_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = org.mockito.Mockito . METHOD_3 ( object ) ) INIT = org.mockito.Mockito . METHOD_3 ( object ) ) VAR VAR (  org.mockito.Mockito.doReturn ( true ) . when ( VAR_4 ) . METHOD_4 ( ) )  org.mockito.Mockito.doReturn ( true ) . when ( VAR_4 ) . METHOD_4 ( ) (  TYPE_2 . METHOD_5 ( VAR_4 . validate ( null ) . METHOD_6 ( ) , TYPE_3 . METHOD_7 ( TYPE_4 . METHOD_8 ( VAR_3 ) ) ) )  TYPE_2 . METHOD_5 ( VAR_4 . validate ( null ) . METHOD_6 ( ) , TYPE_3 . METHOD_7 ( TYPE_4 . METHOD_8 ( VAR_3 ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_1 . setId ( VAR_2 ) )  VAR_1 . setId ( VAR_2 ) (  VAR_1 . METHOD_2 ( VAR_3 ) )  VAR_1 . METHOD_2 ( VAR_3 ) (  org.mockito.Mockito.when ( VAR_4 . get ( VAR_2 ) ) . thenReturn ( VAR_1 ) )  org.mockito.Mockito.when ( VAR_4 . get ( VAR_2 ) ) . thenReturn ( VAR_1 ) (  org.mockito.Mockito.doReturn ( VAR_4 ) . when ( VAR_5 ) . METHOD_3 ( ) )  org.mockito.Mockito.doReturn ( VAR_4 ) . when ( VAR_5 ) . METHOD_3 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME vmId ) NAME vmId ( INIT = org.ovirt.engine.core.compat.Guid . METHOD_2 ( STRING_1 ) ) INIT = org.ovirt.engine.core.compat.Guid . METHOD_2 ( STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ( INIT = org.ovirt.engine.core.compat.Guid . METHOD_2 ( STRING_2 ) ) INIT = org.ovirt.engine.core.compat.Guid . METHOD_2 ( STRING_2 ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ( INIT = org.ovirt.engine.core.compat.Guid . METHOD_2 ( STRING_3 ) ) INIT = org.ovirt.engine.core.compat.Guid . METHOD_2 ( STRING_3 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_3 ( VAR_1 , vmId ) ) INIT = METHOD_3 ( VAR_1 , vmId ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_3 ( VAR_2 , vmId ) ) INIT = METHOD_3 ( VAR_2 , vmId ) ) VAR VAR (  METHOD_4 ( VAR_3 , VAR_4 ) )  METHOD_4 ( VAR_3 , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.VM ) TYPE TYPE_1.VM ( NAME entity ) NAME entity ( INIT = new TYPE_1 . VM ( ) ) INIT = new TYPE_1 . VM ( ) ) VAR VAR (  entity . METHOD_2 ( VAR_1 ) )  entity . METHOD_2 ( VAR_1 ) ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ( INIT = org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) INIT = org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) VAR VAR (  entity . METHOD_4 ( VAR_2 ) )  entity . METHOD_4 ( VAR_2 ) (  TYPE_2 . METHOD_5 ( ) )  TYPE_2 . METHOD_5 ( ) ( VAR VAR ( TYPE TYPE_1.VM ) TYPE TYPE_1.VM ( NAME model ) NAME model ( INIT = TYPE_3 . map ( entity , null ) ) INIT = TYPE_3 . map ( entity , null ) ) VAR VAR (  assertEquals ( VAR_2 . toString ( ) , model . METHOD_6 ( ) . getId ( ) ) )  assertEquals ( VAR_2 . toString ( ) , model . METHOD_6 ( ) . getId ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , STRING_1 , STRING_2 , VAR_2 , null , null , TYPE_3 . METHOD_3 ( ) ) , null ) ) )  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , STRING_1 , STRING_2 , VAR_2 , null , null , TYPE_3 . METHOD_3 ( ) ) , null ) ) (  METHOD_4 ( cmd , VAR_3 ) )  METHOD_4 ( cmd , VAR_3 ) (  TYPE_4 . METHOD_5 ( cmd . validate ( ) ) )  TYPE_4 . METHOD_5 ( cmd . validate ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , STRING_1 , STRING_2 , VAR_2 , null , null , TYPE_3 . METHOD_3 ( METHOD_4 ( STRING_3 , null ) ) ) , null ) ) )  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , STRING_1 , STRING_2 , VAR_2 , null , null , TYPE_3 . METHOD_3 ( METHOD_4 ( STRING_3 , null ) ) ) , null ) ) (  METHOD_5 ( cmd , VAR_3 ) )  METHOD_5 ( cmd , VAR_3 ) (  TYPE_4 . METHOD_6 ( cmd . validate ( ) ) )  TYPE_4 . METHOD_6 ( cmd . validate ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME result ) NAME result ( INIT = VAR_1 . METHOD_2 ( new java.lang.String [ ] { VAR_2 } , VAR_3 , VAR_4 , STRING_1 ) ) INIT = VAR_1 . METHOD_2 ( new java.lang.String [ ] { VAR_2 } , VAR_3 , VAR_4 , STRING_1 ) ) VAR VAR (  TYPE_2 . METHOD_3 ( ( ( result . size ( ) ) == 2 ) ) )  TYPE_2 . METHOD_3 ( ( ( result . size ( ) ) == 2 ) ) (  TYPE_2 . METHOD_3 ( result . METHOD_4 ( VAR_5 ) ) )  TYPE_2 . METHOD_3 ( result . METHOD_4 ( VAR_5 ) ) (  TYPE_2 . METHOD_3 ( result . METHOD_4 ( VAR_6 ) ) )  TYPE_2 . METHOD_3 ( result . METHOD_4 ( VAR_6 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) )  METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) (  VAR_1 . METHOD_4 ( ) )  VAR_1 . METHOD_4 ( ) ( TRY TRY ( BLOCK BLOCK (  VAR_2 . add ( new TYPE_2 ( ) ) )  VAR_2 . add ( new TYPE_2 ( ) ) (  TYPE_1 . METHOD_5 ( STRING_1 ) )  TYPE_1 . METHOD_5 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( BLOCK BLOCK (  METHOD_6 ( VAR_3 , STRING_2 , STRING_3 , STRING_4 ) )  METHOD_6 ( VAR_3 , STRING_2 , STRING_3 , STRING_4 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_3 . METHOD_2 ( VAR_1 ) ) COND VAR_3 . METHOD_2 ( VAR_1 ) ( THEN THEN (  return VAR_3 . get ( VAR_1 ) ; )  return VAR_3 . get ( VAR_1 ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME storageDomain ) NAME storageDomain ( INIT = METHOD_3 ( ) . METHOD_4 ( VAR_1 , VAR_2 ) ) INIT = METHOD_3 ( ) . METHOD_4 ( VAR_1 , VAR_2 ) ) VAR VAR (  VAR_3 . put ( VAR_1 , storageDomain ) )  VAR_3 . put ( VAR_1 , storageDomain ) (  return storageDomain ; )  return storageDomain ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN java.lang.Object[] ) RETURN java.lang.Object[] ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( METHOD_2 ( ) ) == null ) COND ( METHOD_2 ( ) ) == null ( THEN THEN (  return new java.lang.Object [ 0 ] ; )  return new java.lang.Object [ 0 ] ; ) THEN THEN ( ELSE ELSE ( VAR VAR ( TYPE java.util.ArrayList<java.lang.Object> ) TYPE java.util.ArrayList<java.lang.Object> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < java.lang.Object > ( ) ) INIT = new java.util.ArrayList < java.lang.Object > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME item ) NAME item ( IN METHOD_2 ( ) ) IN METHOD_2 ( ) ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME i ) NAME i ( INIT = ( ( TYPE_1 ) ( item ) ) ) INIT = ( ( TYPE_1 ) ( item ) ) ) VAR VAR (  VAR_1 . add ( i . getId ( ) ) )  VAR_1 . add ( i . getId ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_1 . METHOD_3 ( new java.lang.Object [ ] { } ) ; )  return VAR_1 . METHOD_3 ( new java.lang.Object [ ] { } ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . METHOD_1 ( STRING_1 ) )  VAR_1 . METHOD_1 ( STRING_1 ) (  VAR_2 . METHOD_2 ( ) . onSuccess ( VAR_2 . getModel ( ) , result ) )  VAR_2 . METHOD_2 ( ) . onSuccess ( VAR_2 . getModel ( ) , result ) ( IF IF ( COND ( org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_3 ( ) ) != null ) COND ( org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_3 ( ) ) != null ( THEN THEN (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) (  dao = VAR_1 . METHOD_2 ( ) )  dao = VAR_1 . METHOD_2 ( ) (  VAR_2 = new org.ovirt.engine.core.common.businessentities.network.Network ( ) )  VAR_2 = new org.ovirt.engine.core.common.businessentities.network.Network ( ) (  VAR_2 . METHOD_3 ( STRING_1 ) )  VAR_2 . METHOD_3 ( STRING_1 ) (  VAR_2 . METHOD_4 ( STRING_1 ) )  VAR_2 . METHOD_4 ( STRING_1 ) (  VAR_2 . METHOD_5 ( STRING_2 ) )  VAR_2 . METHOD_5 ( STRING_2 ) (  VAR_2 . METHOD_6 ( VAR_3 ) )  VAR_2 . METHOD_6 ( VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME from ) NAME from ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( WHILE WHILE ( COND ( from . METHOD_2 ( ) ) == 0 ) COND ( from . METHOD_2 ( ) ) == 0 ( BLOCK BLOCK (  from . METHOD_3 ( TYPE_2 . METHOD_4 ( INT_1 ) ) )  from . METHOD_3 ( TYPE_2 . METHOD_4 ( INT_1 ) ) ) BLOCK BLOCK ) WHILE WHILE (  from . METHOD_5 ( TYPE_2 . METHOD_6 ( VAR_1 class ) ) )  from . METHOD_5 ( TYPE_2 . METHOD_6 ( VAR_1 class ) ) (  from . METHOD_7 ( ) . METHOD_8 ( INT_2 ) )  from . METHOD_7 ( ) . METHOD_8 ( INT_2 ) (  from . METHOD_9 ( ) . METHOD_10 ( new TYPE_3 ( ) ) )  from . METHOD_9 ( ) . METHOD_10 ( new TYPE_3 ( ) ) (  return from ; )  return from ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  METHOD_3 ( METHOD_4 ( VAR_2 , false , STRING_1 , VAR_1 , false ) ) )  METHOD_3 ( METHOD_4 ( VAR_2 , false , STRING_1 , VAR_1 , false ) ) (  METHOD_5 ( false ) )  METHOD_5 ( false ) (  VAR_3 . METHOD_6 ( VAR_4 ) )  VAR_3 . METHOD_6 ( VAR_4 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME response ) NAME response ( INIT = VAR_3 . add ( METHOD_7 ( ) ) ) INIT = VAR_3 . add ( METHOD_7 ( ) ) ) VAR VAR (  assertEquals ( INT_1 , response . getStatus ( ) ) )  assertEquals ( INT_1 , response . getStatus ( ) ) (  METHOD_8 ( ( ( response . getEntity ( ) ) instanceof TYPE_3 ) ) )  METHOD_8 ( ( ( response . getEntity ( ) ) instanceof TYPE_3 ) ) (  METHOD_9 ( ( ( TYPE_3 ) ( response . getEntity ( ) ) ) , 1 ) )  METHOD_9 ( ( ( TYPE_3 ) ( response . getEntity ( ) ) ) , 1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_1 . METHOD_2 ( METHOD_3 ( ) . getId ( ) ) )  VAR_1 . METHOD_2 ( METHOD_3 ( ) . getId ( ) ) (  VAR_1 . METHOD_4 ( ( ( java.lang.String ) ( getName ( ) . getEntity ( ) ) ) ) )  VAR_1 . METHOD_4 ( ( ( java.lang.String ) ( getName ( ) . getEntity ( ) ) ) ) (  VAR_1 . METHOD_5 ( ( ( java.lang.String ) ( METHOD_6 ( ) . getEntity ( ) ) ) ) )  VAR_1 . METHOD_5 ( ( ( java.lang.String ) ( METHOD_6 ( ) . getEntity ( ) ) ) ) (  VAR_1 . METHOD_7 ( METHOD_8 ( ) ) )  VAR_1 . METHOD_7 ( METHOD_8 ( ) ) (  VAR_1 . METHOD_9 ( METHOD_10 ( ) ) )  VAR_1 . METHOD_9 ( METHOD_10 ( ) ) (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( STRING_1 ) )  VAR_1 . METHOD_2 ( STRING_1 ) ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ) TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ( NAME cluster ) NAME cluster ( IN METHOD_3 ( ) . METHOD_4 ( ) ) IN METHOD_3 ( ) . METHOD_4 ( ) ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  METHOD_5 ( cluster ) )  METHOD_5 ( cluster ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_1 . METHOD_6 ( STRING_2 , cluster . METHOD_7 ( ) , e ) )  VAR_1 . METHOD_6 ( STRING_2 , cluster . METHOD_7 ( ) , e ) (  continue ; )  continue ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < ( VAR_1 . size ( ) ) ) COND i < ( VAR_1 . size ( ) ) ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.HashMap<java.lang.String,java.lang.Boolean> ) TYPE java.util.HashMap<java.lang.String,java.lang.Boolean> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.HashMap < java.lang.String , java.lang.Boolean > ( ) ) INIT = new java.util.HashMap < java.lang.String , java.lang.Boolean > ( ) ) VAR VAR (  VAR_2 . put ( VAR_3 , true ) )  VAR_2 . put ( VAR_3 , true ) (  VAR_1 . get ( i ) . METHOD_3 ( VAR_2 ) )  VAR_1 . get ( i ) . METHOD_3 ( VAR_2 ) ) BLOCK BLOCK ) FOR FOR (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME response ) NAME response ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  TYPE_5 . METHOD_2 ( response , TYPE_6 . METHOD_3 ( METHOD_4 ( ) ) ) )  TYPE_5 . METHOD_2 ( response , TYPE_6 . METHOD_3 ( METHOD_4 ( ) ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME VAR_2 ) NAME VAR_2 ( BLOCK BLOCK (  TYPE_5 . METHOD_5 ( response , VAR_3 , VAR_2 ) )  TYPE_5 . METHOD_5 ( response , VAR_3 , VAR_2 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 . getStatus ( ) ) != ( VAR_2 . METHOD_2 ( ) ) ) COND ( VAR_1 . getStatus ( ) ) != ( VAR_2 . METHOD_2 ( ) ) ( THEN THEN (  VAR_3 . METHOD_3 ( STRING_1 , VAR_1 . METHOD_4 ( ) , VAR_1 . getId ( ) , VAR_1 . getStatus ( ) . name ( ) , VAR_2 . METHOD_2 ( ) . name ( ) ) )  VAR_3 . METHOD_3 ( STRING_1 , VAR_1 . METHOD_4 ( ) , VAR_1 . getId ( ) , VAR_1 . getStatus ( ) . name ( ) , VAR_2 . METHOD_2 ( ) . name ( ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( ) )  VAR_1 . METHOD_2 ( ) ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = true ) INIT = true ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( IN result . getReturnValue ( ) ) IN result . getReturnValue ( ) ( BLOCK BLOCK (  VAR_2 = VAR_3 . METHOD_3 ( ) )  VAR_2 = VAR_3 . METHOD_3 ( ) ( IF IF ( COND ! VAR_2 ) COND ! VAR_2 ( THEN THEN (  break ; )  break ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  METHOD_4 ( ) )  METHOD_4 ( ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = null ) INIT = null ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_1 = new TYPE_1 ( STRING_1 ) )  VAR_1 = new TYPE_1 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME e ) NAME e ( BLOCK BLOCK (  e . METHOD_2 ( ) )  e . METHOD_2 ( ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  TYPE_3 . METHOD_3 ( VAR_1 ) )  TYPE_3 . METHOD_3 ( VAR_1 ) ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_2 ) NAME VAR_2 ( INIT = - 1 ) INIT = - 1 ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_2 = VAR_1 . METHOD_4 ( VAR_3 , INT_1 ) )  VAR_2 = VAR_1 . METHOD_4 ( VAR_3 , INT_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  TYPE_3 . assertEquals ( VAR_2 , INT_2 ) )  TYPE_3 . assertEquals ( VAR_2 , INT_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME getModel ) NAME getModel ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  model . setId ( VAR_2 [ VAR_1 ] . toString ( ) ) )  model . setId ( VAR_2 [ VAR_1 ] . toString ( ) ) (  model . METHOD_1 ( VAR_3 [ VAR_1 ] ) )  model . METHOD_1 ( VAR_3 [ VAR_1 ] ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  VAR_4 . setId ( VAR_2 [ 0 ] . toString ( ) ) )  VAR_4 . setId ( VAR_2 [ 0 ] . toString ( ) ) (  model . METHOD_2 ( VAR_4 ) )  model . METHOD_2 ( VAR_4 ) (  model . METHOD_3 ( TYPE_3 . name ( ) ) )  model . METHOD_3 ( TYPE_3 . name ( ) ) (  return model ; )  return model ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME pool ) NAME pool ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . put ( pool . getId ( ) , new java.util.HashMap < org.ovirt.engine.core.compat.Guid , TYPE_2 < java.lang.String , java.util.List < org.ovirt.engine.core.compat.Guid > > > ( ) ) )  VAR_1 . put ( pool . getId ( ) , new java.util.HashMap < org.ovirt.engine.core.compat.Guid , TYPE_2 < java.lang.String , java.util.List < org.ovirt.engine.core.compat.Guid > > > ( ) ) (  VAR_2 . put ( pool . getId ( ) , new TYPE_3 < org.ovirt.engine.core.compat.Guid > ( ) ) )  VAR_2 . put ( pool . getId ( ) , new TYPE_3 < org.ovirt.engine.core.compat.Guid > ( ) ) (  VAR_3 . put ( pool . getId ( ) , new java.util.HashMap < org.ovirt.engine.core.compat.Guid , TYPE_4 > ( ) ) )  VAR_3 . put ( pool . getId ( ) , new java.util.HashMap < org.ovirt.engine.core.compat.Guid , TYPE_4 > ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ( INIT = ( ( TYPE_1 ) ( target ) ) ) INIT = ( ( TYPE_1 ) ( target ) ) ) VAR VAR (  model . METHOD_1 ( model , VAR_1 , ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( returnValue ) ) , null ) )  model . METHOD_1 ( model , VAR_1 , ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( returnValue ) ) , null ) (  METHOD_2 ( ) )  METHOD_2 ( ) (  METHOD_3 ( ) )  METHOD_3 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) . METHOD_3 ( METHOD_4 ( ) , METHOD_4 ( ) . getStatus ( ) ) )  METHOD_2 ( ) . METHOD_3 ( METHOD_4 ( ) , METHOD_4 ( ) . getStatus ( ) ) (  METHOD_4 ( ) . METHOD_5 ( VAR_1 ) )  METHOD_4 ( ) . METHOD_5 ( VAR_1 ) (  METHOD_6 ( ) . METHOD_7 ( METHOD_4 ( ) . getId ( ) , METHOD_4 ( ) . getStatus ( ) ) )  METHOD_6 ( ) . METHOD_7 ( METHOD_4 ( ) . getId ( ) , METHOD_4 ( ) . getStatus ( ) ) (  METHOD_2 ( ) . METHOD_8 ( ) )  METHOD_2 ( ) . METHOD_8 ( ) (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  return TYPE_1 . getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( VAR_1 , new TYPE_2 ( TYPE_3 . getParameters ( ) . METHOD_4 ( ) , TYPE_3 . getParameters ( ) . getStoragePoolId ( ) , TYPE_3 . getParameters ( ) . METHOD_5 ( ) . METHOD_6 ( ) , new java.util.ArrayList < TYPE_4 > ( TYPE_5 . METHOD_7 ( new TYPE_4 [ ] { TYPE_3 . METHOD_8 ( ) } ) ) ) ) . getSucceeded ( ) ; )  return TYPE_1 . getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( VAR_1 , new TYPE_2 ( TYPE_3 . getParameters ( ) . METHOD_4 ( ) , TYPE_3 . getParameters ( ) . getStoragePoolId ( ) , TYPE_3 . getParameters ( ) . METHOD_5 ( ) . METHOD_6 ( ) , new java.util.ArrayList < TYPE_4 > ( TYPE_5 . METHOD_7 ( new TYPE_4 [ ] { TYPE_3 . METHOD_8 ( ) } ) ) ) ) . getSucceeded ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = command . METHOD_2 ( ) . METHOD_3 ( ) ) INIT = command . METHOD_2 ( ) . METHOD_3 ( ) ) VAR VAR (  org.mockito.Mockito.doReturn ( new TYPE_2 ( VAR_1 , VAR_1 . getId ( ) ) ) . when ( command ) . METHOD_4 ( TYPE_3 . any ( VAR_2 class ) ) )  org.mockito.Mockito.doReturn ( new TYPE_2 ( VAR_1 , VAR_1 . getId ( ) ) ) . when ( command ) . METHOD_4 ( TYPE_3 . any ( VAR_2 class ) ) (  TYPE_4 . METHOD_5 ( command ) )  TYPE_4 . METHOD_5 ( command ) (  command . METHOD_6 ( ) )  command . METHOD_6 ( ) (  TYPE_5 . METHOD_7 ( command . getReturnValue ( ) . getSucceeded ( ) ) )  TYPE_5 . METHOD_7 ( command . getReturnValue ( ) . getSucceeded ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_2 ) . METHOD_2 ( TYPE_3 . METHOD_3 ( VAR_3 . Integer class ) ) )  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_2 ) . METHOD_2 ( TYPE_3 . METHOD_3 ( VAR_3 . Integer class ) ) (  org.mockito.Mockito.doReturn ( VAR_4 ) . when ( VAR_2 ) . METHOD_4 ( TYPE_3 . any ( ) ) )  org.mockito.Mockito.doReturn ( VAR_4 ) . when ( VAR_2 ) . METHOD_4 ( TYPE_3 . any ( ) ) (  VAR_2 . METHOD_5 ( VAR_5 , VAR_6 ) )  VAR_2 . METHOD_5 ( VAR_5 , VAR_6 ) (  org.mockito.Mockito . METHOD_6 ( VAR_5 ) . METHOD_7 ( VAR_7 , VAR_1 ) )  org.mockito.Mockito . METHOD_6 ( VAR_5 ) . METHOD_7 ( VAR_7 , VAR_1 ) (  org.mockito.Mockito . METHOD_6 ( VAR_5 ) . METHOD_7 ( VAR_8 , VAR_4 ) )  org.mockito.Mockito . METHOD_6 ( VAR_5 ) . METHOD_7 ( VAR_8 , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( getEntity ( ) ) == null ) COND ( getEntity ( ) ) == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  setItems ( ( ( java.util.List < TYPE_2 > ) ( returnValue ) ) ) )  setItems ( ( ( java.util.List < TYPE_2 > ) ( returnValue ) ) ) (  METHOD_3 ( ) )  METHOD_3 ( ) ) BLOCK BLOCK ) METHOD METHOD (  TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { setItems ( ( ( java.util.List < TYPE_2 > ) ( returnValue ) ) ) ; METHOD_3 ( ) ; } } ) , getEntity ( ) . getId ( ) ) )  TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { setItems ( ( ( java.util.List < TYPE_2 > ) ( returnValue ) ) ) ; METHOD_3 ( ) ; } } ) , getEntity ( ) . getId ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME event ) NAME event ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME value ) NAME value ( INIT = event . getValue ( ) ) INIT = event . getValue ( ) ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( value ) ) INIT = METHOD_2 ( value ) ) VAR VAR ( IF IF ( COND VAR_1 != ( VAR_2 ) ) COND VAR_1 != ( VAR_2 ) ( THEN THEN (  ( ( TYPE_3 < TYPE_4 , TYPE_2 , TYPE_5 > . VAR_3 ) ( widget . METHOD_3 ( ) ) ) . METHOD_4 ( ( ! VAR_1 ) ) )  ( ( TYPE_3 < TYPE_4 , TYPE_2 , TYPE_5 > . VAR_3 ) ( widget . METHOD_3 ( ) ) ) . METHOD_4 ( ( ! VAR_1 ) ) (  METHOD_5 ( value , widget , VAR_1 ) )  METHOD_5 ( value , widget , VAR_1 ) (  VAR_2 = VAR_1 )  VAR_2 = VAR_1 ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND source != null ) COND source != null ( THEN THEN (  return source ; )  return source ; ) THEN THEN ) IF IF (  return STRING_1 ; )  return STRING_1 ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return source ; } return STRING_1 ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return source ; } return STRING_1 ; } } ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME params ) NAME params ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  params . METHOD_2 ( VAR_1 ) )  params . METHOD_2 ( VAR_1 ) (  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , params , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , params , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE TYPE_2<?extendsTYPE_3> ) TYPE TYPE_2<?extendsTYPE_3> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  model = METHOD_2 ( model ) )  model = METHOD_2 ( model ) (  model = METHOD_3 ( model , VAR_1 , VAR_2 ) )  model = METHOD_3 ( model , VAR_1 , VAR_2 ) (  model = TYPE_4 . METHOD_1 ( TYPE_5 . METHOD_4 ( ) , model , VAR_1 ) )  model = TYPE_4 . METHOD_1 ( TYPE_5 . METHOD_4 ( ) , model , VAR_1 ) (  return model ; )  return model ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_1 ) ( getSelectedItem ( ) ) ) ) INIT = ( ( TYPE_1 ) ( getSelectedItem ( ) ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME parameters ) NAME parameters ( INIT = new TYPE_2 ( VAR_1 . METHOD_2 ( ) ) ) INIT = new TYPE_2 ( VAR_1 . METHOD_2 ( ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_3 ( ) { public void METHOD_3 ( TYPE_4 result ) { METHOD_4 ( result . getReturnValue ( ) ) ; } } ) INIT = new TYPE_3 ( ) { public void METHOD_3 ( TYPE_4 result ) { METHOD_4 ( result . getReturnValue ( ) ) ; } } ) VAR VAR ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_3 ) NAME METHOD_3 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_4 ( result . getReturnValue ( ) ) )  METHOD_4 ( result . getReturnValue ( ) ) ) BLOCK BLOCK ) METHOD METHOD (  getWindow ( ) . METHOD_5 ( null ) )  getWindow ( ) . METHOD_5 ( null ) (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_6 ( VAR_3 , parameters , VAR_2 ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_6 ( VAR_3 , parameters , VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS> ( NAME hosts ) NAME hosts ( INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ) ( result ) ) ) INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ) ( result ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1<org.ovirt.engine.core.common.businessentities.VDS> ) TYPE TYPE_1<org.ovirt.engine.core.common.businessentities.VDS> ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_1 ( ) ) INIT = METHOD_1 ( ) ) VAR VAR (  hosts . add ( 0 , null ) )  hosts . add ( 0 , null ) (  VAR_1 . setItems ( hosts ) )  VAR_1 . setItems ( hosts ) (  VAR_1 . setIsChangable ( true ) )  VAR_1 . setIsChangable ( true ) (  METHOD_2 ( true ) )  METHOD_2 ( true ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME result ) NAME result ( INIT = false ) INIT = false ) VAR VAR ( IF IF ( COND ( ( TYPE_1 . METHOD_2 ( VAR_1 ) ) && ( TYPE_1 . METHOD_2 ( VAR_2 ) ) ) && ( VAR_3 . METHOD_3 ( VAR_1 ) ) ) COND ( ( TYPE_1 . METHOD_2 ( VAR_1 ) ) && ( TYPE_1 . METHOD_2 ( VAR_2 ) ) ) && ( VAR_3 . METHOD_3 ( VAR_1 ) ) ( THEN THEN ( VAR VAR ( TYPE java.util.HashMap<java.lang.String,java.lang.String> ) TYPE java.util.HashMap<java.lang.String,java.lang.String> ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_3 . get ( VAR_1 ) ) INIT = VAR_3 . get ( VAR_1 ) ) VAR VAR (  result = ( VAR_4 == null ) ? false : VAR_4 . METHOD_3 ( VAR_2 ) )  result = ( VAR_4 == null ) ? false : VAR_4 . METHOD_3 ( VAR_2 ) ) THEN THEN ( ELSE ELSE (  VAR_5 . METHOD_4 ( VAR_6 , VAR_1 ) )  VAR_5 . METHOD_4 ( VAR_6 , VAR_1 ) ) ELSE ELSE ) IF IF (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( STRING_1 ) )  VAR_1 . METHOD_2 ( STRING_1 ) ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDSGroup> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDSGroup> ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_3 ( ) . METHOD_4 ( ) ) INIT = METHOD_3 ( ) . METHOD_4 ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ) TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ( NAME cluster ) NAME cluster ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK ( IF IF ( COND cluster . METHOD_5 ( ) ) COND cluster . METHOD_5 ( ) ( THEN THEN ( TRY TRY ( BLOCK BLOCK (  METHOD_6 ( cluster ) )  METHOD_6 ( cluster ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_1 . METHOD_7 ( STRING_2 , cluster . METHOD_8 ( ) , e ) )  VAR_1 . METHOD_7 ( STRING_2 , cluster . METHOD_8 ( ) , e ) (  continue ; )  continue ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( 1 , VAR_1 ) )  METHOD_2 ( 1 , VAR_1 ) (  disk = TYPE_1 . METHOD_3 ( ) )  disk = TYPE_1 . METHOD_3 ( ) (  disk . METHOD_4 ( STRING_1 ) )  disk . METHOD_4 ( STRING_1 ) (  disk . METHOD_5 ( VAR_1 ) )  disk . METHOD_5 ( VAR_1 ) (  validator = org.mockito.Mockito . METHOD_6 ( new TYPE_2 ( disk ) ) )  validator = org.mockito.Mockito . METHOD_6 ( new TYPE_2 ( disk ) ) (  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( validator ) . METHOD_7 ( ) )  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( validator ) . METHOD_7 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( VAR_1 ) )  METHOD_2 ( VAR_1 ) (  assertEquals ( ( ( VAR_2 . length ) * 2 ) , VAR_1 . size ( ) ) )  assertEquals ( ( ( VAR_2 . length ) * 2 ) , VAR_1 . size ( ) ) ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < ( VAR_2 . length ) ) COND i < ( VAR_2 . length ) ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK (  METHOD_3 ( VAR_1 . get ( i ) , i ) )  METHOD_3 ( VAR_1 . get ( i ) , i ) ) BLOCK BLOCK ) FOR FOR ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME nic ) NAME nic ( INIT = METHOD_2 ( STRING_1 , null ) ) INIT = METHOD_2 ( STRING_1 , null ) ) VAR VAR (  METHOD_3 ( nic ) )  METHOD_3 ( nic ) ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = STRING_2 ) INIT = STRING_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_4 ( METHOD_5 ( nic , METHOD_6 ( nic . getName ( ) , INT_1 , VAR_1 ) ) ) ) INIT = METHOD_4 ( METHOD_5 ( nic , METHOD_6 ( nic . getName ( ) , INT_1 , VAR_1 ) ) ) ) VAR VAR (  METHOD_7 ( VAR_2 , VAR_3 , VAR_1 ) )  METHOD_7 ( VAR_2 , VAR_3 , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME parameters ) NAME parameters ) VAR VAR ( VAR VAR ( TYPE TYPE_2<TYPE_3.AuditLogType,TYPE_4> ) TYPE TYPE_2<TYPE_3.AuditLogType,TYPE_4> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME result ) NAME result ( INIT = METHOD_2 ( parameters , VAR_1 ) ) INIT = METHOD_2 ( parameters , VAR_1 ) ) VAR VAR ( IF IF ( COND result ) COND result ( THEN THEN (  result = METHOD_3 ( parameters , VAR_1 ) )  result = METHOD_3 ( parameters , VAR_1 ) ( IF IF ( COND result ) COND result ( THEN THEN (  return true ; )  return true ; ) THEN THEN ( ELSE ELSE ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_4 ( parameters ) ) INIT = METHOD_4 ( parameters ) ) VAR VAR (  METHOD_2 ( VAR_2 , VAR_1 ) )  METHOD_2 ( VAR_2 , VAR_1 ) (  METHOD_3 ( parameters , VAR_1 ) )  METHOD_3 ( parameters , VAR_1 ) ) ELSE ELSE ) IF IF ) THEN THEN ( ELSE ELSE ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_4 ( parameters ) ) INIT = METHOD_4 ( parameters ) ) VAR VAR (  METHOD_2 ( VAR_2 , VAR_1 ) )  METHOD_2 ( VAR_2 , VAR_1 ) ) ELSE ELSE ) IF IF (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( METHOD_3 ( ) ) )  METHOD_2 ( METHOD_3 ( ) ) (  METHOD_4 ( 1 , true ) )  METHOD_4 ( 1 , true ) (  VAR_1 . METHOD_5 ( ) )  VAR_1 . METHOD_5 ( ) ( TRY TRY ( BLOCK BLOCK (  resource . METHOD_6 ( getModel ( 0 ) ) )  resource . METHOD_6 ( getModel ( 0 ) ) (  METHOD_7 ( STRING_1 ) )  METHOD_7 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( BLOCK BLOCK (  METHOD_8 ( VAR_2 ) )  METHOD_8 ( VAR_2 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities . network > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . network > ( ) ; )  return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities . network > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . network > ( ) ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities . network > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . network > ( ) ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities . network > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . network > ( ) ; } } (  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new TYPE_1 ( VAR_1 ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new TYPE_1 ( VAR_1 ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME vmId ) NAME vmId ) VAR VAR ( VAR VAR ( TYPE TYPE_1<java.lang.String> ) TYPE TYPE_1<java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 . METHOD_2 ( VAR_1 ) ) INIT = VAR_4 . METHOD_2 ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME VAR_5 ) NAME VAR_5 ( INIT = TYPE_3 . METHOD_3 ( VAR_3 , new TYPE_4 < TYPE_2 > ( ) { public boolean METHOD_4 ( TYPE_2 VAR_6 ) { return ( VAR_2 . METHOD_5 ( VAR_6 . METHOD_6 ( ) ) ) && ( METHOD_7 ( VAR_6 ) ) ; } } ) ) INIT = TYPE_3 . METHOD_3 ( VAR_3 , new TYPE_4 < TYPE_2 > ( ) { public boolean METHOD_4 ( TYPE_2 VAR_6 ) { return ( VAR_2 . METHOD_5 ( VAR_6 . METHOD_6 ( ) ) ) && ( METHOD_7 ( VAR_6 ) ) ; } } ) ) VAR VAR ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_4 ) NAME METHOD_4 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_6 ) NAME VAR_6 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return ( VAR_2 . METHOD_5 ( VAR_6 . METHOD_6 ( ) ) ) && ( METHOD_7 ( VAR_6 ) ) ; )  return ( VAR_2 . METHOD_5 ( VAR_6 . METHOD_6 ( ) ) ) && ( METHOD_7 ( VAR_6 ) ) ; ) BLOCK BLOCK ) METHOD METHOD (  METHOD_8 ( VAR_1 , vmId , new TYPE_5 ( VAR_5 ) ) )  METHOD_8 ( VAR_1 , vmId , new TYPE_5 ( VAR_5 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1<java.lang.Boolean,TYPE_2<java.lang.String>> ) RETURN TYPE_1<java.lang.Boolean,TYPE_2<java.lang.String>> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_5 . get ( VAR_1 ) ) INIT = VAR_5 . get ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_4 != null ) COND VAR_4 != null ( THEN THEN (  return new TYPE_1 < java.lang.Boolean , TYPE_2 < java.lang.String > > ( java.lang.Boolean . FALSE , VAR_4 . METHOD_2 ( ) ) ; )  return new TYPE_1 < java.lang.Boolean , TYPE_2 < java.lang.String > > ( java.lang.Boolean . FALSE , VAR_4 . METHOD_2 ( ) ) ; ) THEN THEN ) IF IF ( IF IF ( COND ! VAR_3 ) COND ! VAR_3 ( THEN THEN (  VAR_5 . put ( VAR_1 , new TYPE_3 ( 0 , VAR_2 , true ) ) )  VAR_5 . put ( VAR_1 , new TYPE_3 ( 0 , VAR_2 , true ) ) ) THEN THEN ) IF IF (  return VAR_6 ; )  return VAR_6 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( METHOD_3 ( ) ) )  METHOD_2 ( METHOD_3 ( ) ) (  METHOD_4 ( 1 , 0 , false ) )  METHOD_4 ( 1 , 0 , false ) (  VAR_1 . METHOD_5 ( ) )  VAR_1 . METHOD_5 ( ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ( INIT = TYPE_2 . getModel ( 1 ) ) INIT = TYPE_2 . getModel ( 1 ) ) VAR VAR (  model . setId ( VAR_2 [ 1 ] . toString ( ) ) )  model . setId ( VAR_2 [ 1 ] . toString ( ) ) ( TRY TRY ( BLOCK BLOCK (  resource . METHOD_6 ( model ) )  resource . METHOD_6 ( model ) (  METHOD_7 ( STRING_1 ) )  METHOD_7 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( BLOCK BLOCK (  METHOD_8 ( VAR_3 ) )  METHOD_8 ( VAR_3 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME version ) NAME version ) VAR VAR ( VAR VAR ( TYPE java.util.Map<TYPE_2<TYPE_1,java.lang.String>,java.lang.Object> ) TYPE java.util.Map<TYPE_2<TYPE_1,java.lang.String>,java.lang.Object> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2<TYPE_1,java.lang.String> ) TYPE TYPE_2<TYPE_1,java.lang.String> ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_2 ( VAR_1 , version ) ) INIT = new TYPE_2 ( VAR_1 , version ) ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME value ) NAME value ( INIT = TYPE_3 . getValue ( TYPE_4 . valueOf ( VAR_1 . toString ( ) ) , version ) ) INIT = TYPE_3 . getValue ( TYPE_4 . valueOf ( VAR_1 . toString ( ) ) , version ) ) VAR VAR (  VAR_2 . put ( VAR_3 , value ) )  VAR_2 . put ( VAR_3 , value ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) . METHOD_5 ( ) . get ( TYPE_1 . getParameters ( ) . getStoragePoolId ( ) , TYPE_1 . METHOD_6 ( ) , TYPE_1 . getParameters ( ) . METHOD_7 ( ) ) ) )  TYPE_1 . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) . METHOD_5 ( ) . get ( TYPE_1 . getParameters ( ) . getStoragePoolId ( ) , TYPE_1 . METHOD_6 ( ) , TYPE_1 . getParameters ( ) . METHOD_7 ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1.Network ) RETURN TYPE_1.Network ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_1.Network> ) TYPE java.util.List<TYPE_1.Network> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_1.Network ) TYPE TYPE_1.Network ( NAME network ) NAME network ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK ( IF IF ( COND ( ( id != null ) && ( id . equals ( network . getId ( ) ) ) ) || ( ( name != null ) && ( name . equals ( network . METHOD_2 ( ) ) ) ) ) COND ( ( id != null ) && ( id . equals ( network . getId ( ) ) ) ) || ( ( name != null ) && ( name . equals ( network . METHOD_2 ( ) ) ) ) ( THEN THEN (  return network ; )  return network ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  return ( ( ( ! ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) ) ) && ( METHOD_3 ( ) ) ) && ( ( TYPE_1 . METHOD_4 ( ) . getStatus ( ) ) == ( VAR_1 ) ) ) && ( TYPE_1 . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( ) ) ; )  return ( ( ( ! ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) ) ) && ( METHOD_3 ( ) ) ) && ( ( TYPE_1 . METHOD_4 ( ) . getStatus ( ) ) == ( VAR_1 ) ) ) && ( TYPE_1 . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.uicommonweb.UICommand ) TYPE org.ovirt.engine.ui.uicommonweb.UICommand ( NAME command ) NAME command ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  super . METHOD_1 ( command ) )  super . METHOD_1 ( command ) ( IF IF ( COND command == ( METHOD_2 ( ) ) ) COND command == ( METHOD_2 ( ) ) ( THEN THEN (  METHOD_3 ( ) )  METHOD_3 ( ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND TYPE_1 . METHOD_4 ( command . getName ( ) , STRING_1 ) ) COND TYPE_1 . METHOD_4 ( command . getName ( ) , STRING_1 ) ( THEN THEN (  METHOD_5 ( ) )  METHOD_5 ( ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND TYPE_1 . METHOD_4 ( command . getName ( ) , STRING_2 ) ) COND TYPE_1 . METHOD_4 ( command . getName ( ) , STRING_2 ) ( THEN THEN (  METHOD_6 ( ) )  METHOD_6 ( ) ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( METHOD_3 ( ) ) )  METHOD_2 ( METHOD_3 ( ) ) (  METHOD_4 ( 1 , 0 , true ) )  METHOD_4 ( 1 , 0 , true ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME resource ) NAME resource ( INIT = ( ( TYPE_1 ) ( this . resource ) ) ) INIT = ( ( TYPE_1 ) ( this . resource ) ) ) VAR VAR (  VAR_1 . METHOD_5 ( ) )  VAR_1 . METHOD_5 ( ) ( TRY TRY ( BLOCK BLOCK (  resource . METHOD_6 ( TYPE_2 . getModel ( 0 ) ) )  resource . METHOD_6 ( TYPE_2 . getModel ( 0 ) ) (  METHOD_7 ( STRING_1 ) )  METHOD_7 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( BLOCK BLOCK (  METHOD_8 ( VAR_2 ) )  METHOD_8 ( VAR_2 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) . METHOD_3 ( getName ( ) ) ) INIT = METHOD_2 ( ) . METHOD_3 ( getName ( ) ) ) VAR VAR (  getEntity ( ) . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) )  getEntity ( ) . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) (  getEntity ( ) . METHOD_6 ( VAR_1 . METHOD_7 ( ) ) )  getEntity ( ) . METHOD_6 ( VAR_1 . METHOD_7 ( ) ) (  getEntity ( ) . METHOD_8 ( VAR_1 . METHOD_9 ( ) ) )  getEntity ( ) . METHOD_8 ( VAR_1 . METHOD_9 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<org.ovirt.engine.core.common.businessentities.VDS> ) RETURN java.util.List<org.ovirt.engine.core.common.businessentities.VDS> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME status ) NAME status ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return METHOD_2 ( ) . METHOD_3 ( STRING_1 , new TYPE_2 ( ) , METHOD_4 ( ) . addValue ( STRING_2 , VAR_1 ) . addValue ( STRING_3 , status . getValue ( ) ) ) ; )  return METHOD_2 ( ) . METHOD_3 ( STRING_1 , new TYPE_2 ( ) , METHOD_4 ( ) . addValue ( STRING_2 , VAR_1 ) . addValue ( STRING_3 , status . getValue ( ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME id ) NAME id ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND source == null ) COND source == null ( THEN THEN (  return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ( ) ; )  return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ( ) ; ) THEN THEN ) IF IF (  return source ; )  return source ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ( ) ; } return source ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ( ) ; } return source ; } } (  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN org.ovirt.engine.core.common.businessentities.VM ) RETURN org.ovirt.engine.core.common.businessentities.VM ( NAME getVm ) NAME getVm ( BLOCK BLOCK ( IF IF ( COND ( ( VAR_1 ) == null ) && ( ( METHOD_1 ( ) ) != null ) ) COND ( ( VAR_1 ) == null ) && ( ( METHOD_1 ( ) ) != null ) ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ( IN TYPE_1 . METHOD_2 ( ) . METHOD_3 ( METHOD_1 ( ) . getId ( ) ) ) IN TYPE_1 . METHOD_2 ( ) . METHOD_3 ( METHOD_1 ( ) . getId ( ) ) ( BLOCK BLOCK (  VAR_1 = vm )  VAR_1 = vm (  break ; )  break ; ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME entity ) NAME entity ( INIT = ( ( TYPE_1 ) ( METHOD_2 ( ) . getEntity ( ) ) ) ) INIT = ( ( TYPE_1 ) ( METHOD_2 ( ) . getEntity ( ) ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME params ) NAME params ( INIT = new TYPE_2 ( entity . METHOD_3 ( ) , org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_4 ( ) , false ) ) INIT = new TYPE_2 ( entity . METHOD_3 ( ) , org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_4 ( ) , false ) ) VAR VAR ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_6 ) NAME METHOD_6 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( result . getReturnValue ( ) . getSucceeded ( ) ) ) COND ! ( result . getReturnValue ( ) . getSucceeded ( ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_5 ( VAR_1 , params , new TYPE_3 ( ) { public void METHOD_6 ( TYPE_4 result ) { if ( ! ( result . getReturnValue ( ) . getSucceeded ( ) ) ) { return ; } } } , this ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_5 ( VAR_1 , params , new TYPE_3 ( ) { public void METHOD_6 ( TYPE_4 result ) { if ( ! ( result . getReturnValue ( ) . getSucceeded ( ) ) ) { return ; } } } , this ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME returnValue ) NAME returnValue ( INIT = TYPE_2 . METHOD_2 ( VAR_1 , METHOD_3 ( ) , TYPE_3 . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( ) , false ) ) INIT = TYPE_2 . METHOD_2 ( VAR_1 , METHOD_3 ( ) , TYPE_3 . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( ) , false ) ) VAR VAR ( IF IF ( COND ! ( returnValue . METHOD_7 ( ) ) ) COND ! ( returnValue . METHOD_7 ( ) ) ( THEN THEN (  TYPE_3 . getReturnValue ( ) . METHOD_8 ( returnValue . METHOD_9 ( ) ) )  TYPE_3 . getReturnValue ( ) . METHOD_8 ( returnValue . METHOD_9 ( ) ) (  return false ; )  return false ; ) THEN THEN ) IF IF (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.DiskImage ) TYPE org.ovirt.engine.core.common.businessentities.DiskImage ( NAME disk ) NAME disk ( INIT = new org.ovirt.engine.core.common.businessentities.DiskImage ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.DiskImage ( ) ) VAR VAR (  disk . METHOD_2 ( VAR_1 ) )  disk . METHOD_2 ( VAR_1 ) (  disk . METHOD_3 ( VAR_2 ) )  disk . METHOD_3 ( VAR_2 ) (  disk . METHOD_4 ( true ) )  disk . METHOD_4 ( true ) (  disk . METHOD_5 ( vmId ) )  disk . METHOD_5 ( vmId ) (  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( command ) . METHOD_6 ( ) )  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( command ) . METHOD_6 ( ) (  org.mockito.Mockito.when ( VAR_3 . get ( VAR_1 ) ) . thenReturn ( disk ) )  org.mockito.Mockito.when ( VAR_3 . get ( VAR_1 ) ) . thenReturn ( disk ) (  METHOD_7 ( false ) )  METHOD_7 ( false ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = super . METHOD_1 ( ) ) INIT = super . METHOD_1 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_3 . getParameters ( ) ) INIT = TYPE_3 . getParameters ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_4 ( ) ) INIT = new TYPE_4 ( ) ) VAR VAR (  VAR_3 . METHOD_2 ( VAR_2 . METHOD_3 ( ) ) )  VAR_3 . METHOD_2 ( VAR_2 . METHOD_3 ( ) ) (  VAR_3 . METHOD_4 ( VAR_2 . METHOD_5 ( ) ) )  VAR_3 . METHOD_4 ( VAR_2 . METHOD_5 ( ) ) (  VAR_3 . METHOD_6 ( VAR_2 . METHOD_7 ( ) ) )  VAR_3 . METHOD_6 ( VAR_2 . METHOD_7 ( ) ) (  VAR_1 . METHOD_8 ( VAR_3 ) )  VAR_1 . METHOD_8 ( VAR_3 ) (  VAR_1 . METHOD_9 ( VAR_2 . METHOD_10 ( ) ) )  VAR_1 . METHOD_9 ( VAR_2 . METHOD_10 ( ) ) (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  org.mockito.Mockito.doReturn ( false ) . when ( command ) . METHOD_3 ( TYPE_1 . any ( ) , TYPE_1 . any ( ) ) )  org.mockito.Mockito.doReturn ( false ) . when ( command ) . METHOD_3 ( TYPE_1 . any ( ) , TYPE_1 . any ( ) ) (  VAR_1 . METHOD_4 ( org.ovirt.engine.core.compat.Guid . METHOD_5 ( ) ) )  VAR_1 . METHOD_4 ( org.ovirt.engine.core.compat.Guid . METHOD_5 ( ) ) (  TYPE_2 . METHOD_6 ( STRING_1 , command . validate ( ) ) )  TYPE_2 . METHOD_6 ( STRING_1 , command . validate ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND STRING_1 . equals ( VAR_1 ) ) COND STRING_1 . equals ( VAR_1 ) ( THEN THEN (  return new TYPE_2 ( VAR_2 class ) ; )  return new TYPE_2 ( VAR_2 class ) ; ) THEN THEN ( ELSE ELSE ( IF IF ( COND STRING_2 . equals ( VAR_1 ) ) COND STRING_2 . equals ( VAR_1 ) ( THEN THEN (  return new TYPE_2 ( VAR_3 class ) ; )  return new TYPE_2 ( VAR_3 class ) ; ) THEN THEN ( ELSE ELSE ( IF IF ( COND STRING_3 . equals ( VAR_1 ) ) COND STRING_3 . equals ( VAR_1 ) ( THEN THEN (  return new TYPE_2 ( VAR_4 class ) ; )  return new TYPE_2 ( VAR_4 class ) ; ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME map ) NAME map ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME template ) NAME template ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME value ) NAME value ( INIT = TYPE_4 . map ( VAR_1 , ( ( TYPE_3 ) ( null ) ) ) ) INIT = TYPE_4 . map ( VAR_1 , ( ( TYPE_3 ) ( null ) ) ) ) VAR VAR ( IF IF ( COND value == null ) COND value == null ( THEN THEN (  return null ; )  return null ; ) THEN THEN ( ELSE ELSE (  template = ( template == null ) ? new TYPE_1 ( ) : template )  template = ( template == null ) ? new TYPE_1 ( ) : template (  template . METHOD_1 ( value . value ( ) ) )  template . METHOD_1 ( value . value ( ) ) (  return template ; )  return template ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME vds ) NAME vds ( INIT = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( METHOD_2 ( ) . getSelectedItem ( ) ) ) ) INIT = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( METHOD_2 ( ) . getSelectedItem ( ) ) ) ) VAR VAR ( IF IF ( COND vds == null ) COND vds == null ( THEN THEN (  vds = new org.ovirt.engine.core.common.businessentities.VDS ( ) )  vds = new org.ovirt.engine.core.common.businessentities.VDS ( ) ) THEN THEN ) IF IF (  METHOD_3 ( vds , null , false , null ) )  METHOD_3 ( vds , null , false , null ) (  getName ( ) . setIsChangable ( false ) )  getName ( ) . setIsChangable ( false ) (  METHOD_4 ( ) . setIsChangable ( false ) )  METHOD_4 ( ) . setIsChangable ( false ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  VAR_1 = METHOD_3 ( VAR_1 , STRING_1 ) )  VAR_1 = METHOD_3 ( VAR_1 , STRING_1 ) (  METHOD_4 ( VAR_1 ) )  METHOD_4 ( VAR_1 ) (  METHOD_5 ( getVm ( ) ) )  METHOD_5 ( getVm ( ) ) (  VAR_2 . METHOD_6 ( ) )  VAR_2 . METHOD_6 ( ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = resource . get ( ) ) INIT = resource . get ( ) ) VAR VAR (  METHOD_7 ( VAR_3 ) )  METHOD_7 ( VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.util.Map<java.lang.String,org.ovirt.engine.core.common.businessentities.network> ) RETURN java.util.Map<java.lang.String,org.ovirt.engine.core.common.businessentities.network> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.network> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.network> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_1 . isEmpty ( ) ) ) COND ! ( VAR_1 . isEmpty ( ) ) ( THEN THEN ( VAR VAR ( TYPE java.util.Map<java.lang.String,org.ovirt.engine.core.common.businessentities.network> ) TYPE java.util.Map<java.lang.String,org.ovirt.engine.core.common.businessentities.network> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.HashMap < java.lang.String , org.ovirt.engine.core.common.businessentities . network > ( ) ) INIT = new java.util.HashMap < java.lang.String , org.ovirt.engine.core.common.businessentities . network > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.network ) TYPE org.ovirt.engine.core.common.businessentities.network ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  VAR_2 . put ( VAR_3 . METHOD_2 ( ) , VAR_3 ) )  VAR_2 . put ( VAR_3 . METHOD_2 ( ) , VAR_3 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_2 ; )  return VAR_2 ; ) THEN THEN ( ELSE ELSE (  return TYPE_1 . METHOD_3 ( ) ; )  return TYPE_1 . METHOD_3 ( ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  model . METHOD_2 ( VAR_1 [ 0 ] . toString ( ) ) )  model . METHOD_2 ( VAR_1 [ 0 ] . toString ( ) ) (  METHOD_3 ( METHOD_4 ( ) ) )  METHOD_3 ( METHOD_4 ( ) ) (  VAR_2 . METHOD_5 ( ) )  VAR_2 . METHOD_5 ( ) ( TRY TRY ( BLOCK BLOCK (  VAR_3 . add ( model ) )  VAR_3 . add ( model ) (  METHOD_6 ( STRING_1 ) )  METHOD_6 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( BLOCK BLOCK (  METHOD_7 ( VAR_4 , STRING_2 , STRING_3 , STRING_4 ) )  METHOD_7 ( VAR_4 , STRING_2 , STRING_3 , STRING_4 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VM> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VM> ( NAME result ) NAME result ( INIT = dao . METHOD_2 ( VAR_1 ) ) INIT = dao . METHOD_2 ( VAR_1 ) ) VAR VAR (  TYPE_1 . assertEquals ( 1 , result . size ( ) ) )  TYPE_1 . assertEquals ( 1 , result . size ( ) ) (  TYPE_1 . assertEquals ( result . METHOD_3 ( ) . METHOD_4 ( ) . getId ( ) , VAR_2 ) )  TYPE_1 . assertEquals ( result . METHOD_3 ( ) . METHOD_4 ( ) . getId ( ) , VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ( INIT = ( ( TYPE_1 ) ( target ) ) ) INIT = ( ( TYPE_1 ) ( target ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.ArrayList<TYPE_2> ) TYPE java.util.ArrayList<TYPE_2> ( NAME list ) NAME list ( INIT = new java.util.ArrayList < TYPE_2 > ( ) ) INIT = new java.util.ArrayList < TYPE_2 > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME a ) NAME a ( IN ( ( java.util.ArrayList < TYPE_2 > ) ( returnValue ) ) ) IN ( ( java.util.ArrayList < TYPE_2 > ) ( returnValue ) ) ( BLOCK BLOCK ( IF IF ( COND ( a . METHOD_2 ( ) ) == ( VAR_1 ) ) COND ( a . METHOD_2 ( ) ) == ( VAR_1 ) ( THEN THEN (  list . add ( a ) )  list . add ( a ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  model . METHOD_3 ( model , list ) )  model . METHOD_3 ( model , list ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( METHOD_2 ( ) ) ) INIT = new TYPE_2 ( METHOD_2 ( ) ) ) VAR VAR (  VAR_1 . METHOD_3 ( ( ( java.lang.Boolean ) ( model . METHOD_4 ( ) . getEntity ( ) ) ) ) )  VAR_1 . METHOD_3 ( ( ( java.lang.Boolean ) ( model . METHOD_4 ( ) . getEntity ( ) ) ) ) (  VAR_1 . METHOD_5 ( ( ( java.lang.Boolean ) ( model . METHOD_6 ( ) . getEntity ( ) ) ) ) )  VAR_1 . METHOD_5 ( ( ( java.lang.Boolean ) ( model . METHOD_6 ( ) . getEntity ( ) ) ) ) (  org.ovirt.engine.ui.frontend.Frontend . METHOD_7 ( VAR_2 , VAR_1 , new TYPE_3 ( model , VAR_3 , METHOD_2 ( ) . getId ( ) ) , this ) )  org.ovirt.engine.ui.frontend.Frontend . METHOD_7 ( VAR_2 , VAR_1 , new TYPE_3 ( model , VAR_3 , METHOD_2 ( ) . getId ( ) ) , this ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , VAR_2 ) , null ) ) )  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , VAR_2 ) , null ) ) (  METHOD_3 ( ) )  METHOD_3 ( ) (  METHOD_4 ( false , VAR_3 ) )  METHOD_4 ( false , VAR_3 ) ( TRY TRY ( BLOCK BLOCK (  cmd . METHOD_5 ( ) )  cmd . METHOD_5 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK (  TYPE_4 . assertEquals ( e . METHOD_6 ( ) , VAR_3 ) )  TYPE_4 . assertEquals ( e . METHOD_6 ( ) , VAR_3 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  org.mockito.Mockito . METHOD_7 ( VAR_4 , org.mockito.Mockito . METHOD_8 ( ) ) . METHOD_9 ( TYPE_5 . any ( VAR_5 class ) ) )  org.mockito.Mockito . METHOD_7 ( VAR_4 , org.mockito.Mockito . METHOD_8 ( ) ) . METHOD_9 ( TYPE_5 . any ( VAR_5 class ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( true , new org.ovirt.engine.core.common.businessentities.VDS ( ) , true ) )  METHOD_2 ( true , new org.ovirt.engine.core.common.businessentities.VDS ( ) , true ) (  org.mockito.Mockito.when ( VAR_1 . METHOD_3 ( TYPE_1 . any ( VAR_2 . Guid class ) , TYPE_1 . METHOD_4 ( VAR_3 ) ) ) . thenReturn ( false ) )  org.mockito.Mockito.when ( VAR_1 . METHOD_3 ( TYPE_1 . any ( VAR_2 . Guid class ) , TYPE_1 . METHOD_4 ( VAR_3 ) ) ) . thenReturn ( false ) (  TYPE_2 . METHOD_5 ( command . validate ( ) ) )  TYPE_2 . METHOD_5 ( command . validate ( ) ) (  TYPE_2 . METHOD_6 ( command . getReturnValue ( ) . METHOD_7 ( ) . METHOD_8 ( TYPE_3 . toString ( ) ) ) )  TYPE_2 . METHOD_6 ( command . getReturnValue ( ) . METHOD_7 ( ) . METHOD_8 ( TYPE_3 . toString ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source != null ? ! ( ( ( java.lang.Boolean ) ( source ) ) . METHOD_2 ( ) ) : false ; )  return source != null ? ! ( ( ( java.lang.Boolean ) ( source ) ) . METHOD_2 ( ) ) : false ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ! ( ( ( java.lang.Boolean ) ( source ) ) . METHOD_2 ( ) ) : false ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ! ( ( ( java.lang.Boolean ) ( source ) ) . METHOD_2 ( ) ) : false ; } } (  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_1 , new TYPE_1 ( name ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_1 , new TYPE_1 ( name ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME vmId ) NAME vmId ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_2 ( ) . addValue ( STRING_1 , METHOD_3 ( VAR_3 ) ) . addValue ( STRING_2 , VAR_1 ) . addValue ( STRING_3 , VAR_2 ) . addValue ( STRING_4 , vmId ) . addValue ( STRING_5 , TYPE_2 . name ( ) ) ) INIT = METHOD_2 ( ) . addValue ( STRING_1 , METHOD_3 ( VAR_3 ) ) . addValue ( STRING_2 , VAR_1 ) . addValue ( STRING_3 , VAR_2 ) . addValue ( STRING_4 , vmId ) . addValue ( STRING_5 , TYPE_2 . name ( ) ) ) VAR VAR (  METHOD_4 ( ) . METHOD_5 ( STRING_6 , VAR_4 ) )  METHOD_4 ( ) . METHOD_5 ( STRING_6 , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> ( NAME VAR_1 ) NAME VAR_1 ( INIT = dao . METHOD_2 ( new org.ovirt.engine.core.compat.Guid ( STRING_1 ) ) ) INIT = dao . METHOD_2 ( new org.ovirt.engine.core.compat.Guid ( STRING_1 ) ) ) VAR VAR (  TYPE_1 . assertEquals ( STRING_2 , VAR_1 . size ( ) , 1 ) )  TYPE_1 . assertEquals ( STRING_2 , VAR_1 . size ( ) , 1 ) (  TYPE_1 . assertEquals ( STRING_3 , VAR_1 . get ( 0 ) . getId ( ) , VAR_2 ) )  TYPE_1 . assertEquals ( STRING_3 , VAR_1 . get ( 0 ) . getId ( ) , VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME value ) NAME value ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME result ) NAME result ( INIT = value . METHOD_2 ( ) ) INIT = value . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND ( ( VAR_1 ) > 0 ) && ( ( result . length ( ) ) > ( VAR_1 ) ) ) COND ( ( VAR_1 ) > 0 ) && ( ( result . length ( ) ) > ( VAR_1 ) ) ( THEN THEN (  result = result . METHOD_3 ( 0 , TYPE_2 . METHOD_4 ( ( ( VAR_1 ) - ( TYPE_3 . length ( ) ) ) , 0 ) ) )  result = result . METHOD_3 ( 0 , TYPE_2 . METHOD_4 ( ( ( VAR_1 ) - ( TYPE_3 . length ( ) ) ) , 0 ) ) (  result = result + ( TYPE_3 ) )  result = result + ( TYPE_3 ) ) THEN THEN ) IF IF (  return TYPE_4 . METHOD_5 ( result ) ; )  return TYPE_4 . METHOD_5 ( result ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  disk . METHOD_2 ( STRING_1 ) )  disk . METHOD_2 ( STRING_1 ) (  disk . METHOD_3 ( STRING_2 ) )  disk . METHOD_3 ( STRING_2 ) (  METHOD_4 ( disk , TYPE_1 . METHOD_5 ( TYPE_1 . METHOD_6 ( STRING_1 ) ) , TYPE_1 . METHOD_7 ( STRING_2 ) , TYPE_1 . METHOD_8 ( 1 ) ) )  METHOD_4 ( disk , TYPE_1 . METHOD_5 ( TYPE_1 . METHOD_6 ( STRING_1 ) ) , TYPE_1 . METHOD_7 ( STRING_2 ) , TYPE_1 . METHOD_8 ( 1 ) ) (  TYPE_1 . METHOD_9 ( disk ) )  TYPE_1 . METHOD_9 ( disk ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.Object[] ) TYPE java.lang.Object[] ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( java.lang.Object [ ] ) ( target ) ) ) INIT = ( ( java.lang.Object [ ] ) ( target ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_1 ) ( VAR_1 [ 0 ] ) ) ) INIT = ( ( TYPE_1 ) ( VAR_1 [ 0 ] ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( ( TYPE_2 ) ( VAR_1 [ 1 ] ) ) ) INIT = ( ( TYPE_2 ) ( VAR_1 [ 1 ] ) ) ) VAR VAR (  VAR_2 . METHOD_1 ( VAR_2 , VAR_3 , ( returnValue == null ) ) )  VAR_2 . METHOD_1 ( VAR_2 , VAR_3 , ( returnValue == null ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_2 . setId ( new TYPE_2 ( ) ) )  VAR_2 . setId ( new TYPE_2 ( ) ) (  VAR_2 . METHOD_2 ( VAR_1 ) )  VAR_2 . METHOD_2 ( VAR_1 ) (  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( command ) . METHOD_3 ( ) )  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( command ) . METHOD_3 ( ) (  org.mockito.Mockito.when ( VAR_3 . get ( org.mockito.Mockito . any ( VAR_4 class ) ) ) . thenReturn ( VAR_2 ) )  org.mockito.Mockito.when ( VAR_3 . get ( org.mockito.Mockito . any ( VAR_4 class ) ) ) . thenReturn ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME vmId ) NAME vmId ) VAR VAR ( VAR VAR ( TYPE java.lang.Boolean ) TYPE java.lang.Boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN ( IF IF ( COND ! ( TYPE_1 . METHOD_2 ( vmId ) ) ) COND ! ( TYPE_1 . METHOD_2 ( vmId ) ) ( THEN THEN (  TYPE_1 . METHOD_3 ( vmId ) )  TYPE_1 . METHOD_3 ( vmId ) ) THEN THEN ) IF IF ) THEN THEN ( ELSE ELSE (  TYPE_1 . METHOD_4 ( vmId ) )  TYPE_1 . METHOD_4 ( vmId ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_1 ) ( model ) ) ) INIT = ( ( TYPE_1 ) ( model ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VM> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VM> ( NAME vms ) NAME vms ( INIT = ( ( TYPE_2 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) INIT = ( ( TYPE_2 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) VAR VAR (  TYPE_3 . METHOD_1 ( vms , new TYPE_4 ( ) ) )  TYPE_3 . METHOD_1 ( vms , new TYPE_4 ( ) ) (  VAR_2 . setItems ( vms ) )  VAR_2 . setItems ( vms ) (  VAR_2 . METHOD_2 ( ( ( vms . size ( ) ) == 0 ) ) )  VAR_2 . METHOD_2 ( ( ( vms . size ( ) ) == 0 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < TYPE_1 > ( ) ) INIT = new java.util.ArrayList < TYPE_1 > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME domain ) NAME domain ( IN METHOD_2 ( ) ) IN METHOD_2 ( ) ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_2 . METHOD_3 ( domain ) )  VAR_2 . METHOD_3 ( domain ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_2 ( domain . METHOD_4 ( ) , true ) ) INIT = new TYPE_2 ( domain . METHOD_4 ( ) , true ) ) VAR VAR (  VAR_2 . setId ( ( VAR_3 != null ? VAR_3 . toString ( ) : null ) ) )  VAR_2 . setId ( ( VAR_3 != null ? VAR_3 . toString ( ) : null ) ) (  VAR_1 . add ( VAR_2 ) )  VAR_1 . add ( VAR_2 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN java.lang.Object[] ) RETURN java.lang.Object[] ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object[] ) TYPE java.lang.Object[] ( NAME parameters ) NAME parameters ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND parameters == null ) COND parameters == null ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE java.lang.Object[] ) TYPE java.lang.Object[] ( NAME VAR_2 ) NAME VAR_2 ( INIT = parameters . METHOD_2 ( ) ) INIT = parameters . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = 0 ) INIT = 0 ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_4 ) NAME VAR_4 ( IN parameters ) IN parameters ( BLOCK BLOCK ( IF IF ( COND VAR_4 instanceof TYPE_2 ) COND VAR_4 instanceof TYPE_2 ( THEN THEN (  VAR_2 [ VAR_3 ] = VAR_1 . METHOD_3 ( ( ( TYPE_2 ) ( VAR_4 ) ) ) )  VAR_2 [ VAR_3 ] = VAR_1 . METHOD_3 ( ( ( TYPE_2 ) ( VAR_4 ) ) ) ) THEN THEN ) IF IF (  VAR_3 ++ )  VAR_3 ++ ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_1 . METHOD_2 ( 1 ) )  VAR_1 . METHOD_2 ( 1 ) (  VAR_1 . METHOD_3 ( INT_1 ) )  VAR_1 . METHOD_3 ( INT_1 ) (  METHOD_4 ( ) . METHOD_5 ( true ) )  METHOD_4 ( ) . METHOD_5 ( true ) ( IF IF ( COND ( ( java.lang.Boolean ) ( METHOD_6 ( ) . getEntity ( ) ) ) ) COND ( ( java.lang.Boolean ) ( METHOD_6 ( ) . getEntity ( ) ) ) ( THEN THEN (  METHOD_4 ( ) . METHOD_7 ( new TYPE_2 [ ] { VAR_1 , new TYPE_3 ( ) } ) )  METHOD_4 ( ) . METHOD_7 ( new TYPE_2 [ ] { VAR_1 , new TYPE_3 ( ) } ) ) THEN THEN ) IF IF (  return METHOD_4 ( ) . METHOD_8 ( ) ; )  return METHOD_4 ( ) . METHOD_8 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( METHOD_3 ( null ) ) )  VAR_1 . METHOD_2 ( METHOD_3 ( null ) ) (  METHOD_4 ( VAR_2 ) )  METHOD_4 ( VAR_2 ) (  VAR_3 . METHOD_5 ( ) )  VAR_3 . METHOD_5 ( ) ( TRY TRY ( BLOCK BLOCK (  METHOD_6 ( ) )  METHOD_6 ( ) (  METHOD_7 ( STRING_1 ) )  METHOD_7 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( BLOCK BLOCK (  METHOD_8 ( ( ( VAR_4 . METHOD_9 ( ) . getEntity ( ) ) instanceof TYPE_2 ) ) )  METHOD_8 ( ( ( VAR_4 . METHOD_9 ( ) . getEntity ( ) ) instanceof TYPE_2 ) ) (  assertEquals ( METHOD_10 ( VAR_2 ) , ( ( TYPE_2 ) ( VAR_4 . METHOD_9 ( ) . getEntity ( ) ) ) . METHOD_11 ( ) ) )  assertEquals ( METHOD_10 ( VAR_2 ) , ( ( TYPE_2 ) ( VAR_4 . METHOD_9 ( ) . getEntity ( ) ) ) . METHOD_11 ( ) ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND VAR_1 < java.lang.Boolean > getValue ( VAR_2 ) ) COND VAR_1 < java.lang.Boolean > getValue ( VAR_2 ) ( THEN THEN (  VAR_3 . METHOD_2 ( STRING_1 ) )  VAR_3 . METHOD_2 ( STRING_1 ) ( VAR VAR ( TYPE java.lang.Integer ) TYPE java.lang.Integer ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_1 < java.lang.Integer > getValue ( VAR_5 ) ) INIT = VAR_1 < java.lang.Integer > getValue ( VAR_5 ) ) VAR VAR (  TYPE_1 . get ( VAR_6 class ) . METHOD_3 ( VAR_7 . instance , STRING_2 , new TYPE_2 [ ] { } , new java.lang.Object [ ] { } , VAR_4 , VAR_4 , VAR_8 ) )  TYPE_1 . get ( VAR_6 class ) . METHOD_3 ( VAR_7 . instance , STRING_2 , new TYPE_2 [ ] { } , new java.lang.Object [ ] { } , VAR_4 , VAR_4 , VAR_8 ) (  VAR_3 . METHOD_2 ( STRING_3 ) )  VAR_3 . METHOD_2 ( STRING_3 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( TYPE_1 . any ( ) , TYPE_2 . METHOD_3 ( ) ) ) . thenReturn ( TYPE_3 . METHOD_4 ( org.mockito.Mockito . METHOD_5 ( VAR_2 class ) ) ) )  org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( TYPE_1 . any ( ) , TYPE_2 . METHOD_3 ( ) ) ) . thenReturn ( TYPE_3 . METHOD_4 ( org.mockito.Mockito . METHOD_5 ( VAR_2 class ) ) ) (  org.mockito.Mockito.when ( VAR_3 . METHOD_6 ( ) ) . thenReturn ( VAR_1 ) )  org.mockito.Mockito.when ( VAR_3 . METHOD_6 ( ) ) . thenReturn ( VAR_1 ) (  validator = new TYPE_4 ( VAR_3 , cluster , VAR_4 ) )  validator = new TYPE_4 ( VAR_3 , cluster , VAR_4 ) (  TYPE_5 . METHOD_7 ( validator . METHOD_8 ( ) , TYPE_6 . METHOD_9 ( VAR_5 ) ) )  TYPE_5 . METHOD_7 ( validator . METHOD_8 ( ) , TYPE_6 . METHOD_9 ( VAR_5 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME context ) NAME context ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME value ) NAME value ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME event ) NAME event ) VAR VAR ( VAR VAR ( TYPE TYPE_5<java.lang.String> ) TYPE TYPE_5<java.lang.String> ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_4 . METHOD_1 ( context , VAR_1 , value , event , VAR_3 ) )  VAR_4 . METHOD_1 ( context , VAR_1 , value , event , VAR_3 ) (  super . METHOD_1 ( context , VAR_1 , value , VAR_2 , event , VAR_3 ) )  super . METHOD_1 ( context , VAR_1 , value , VAR_2 , event , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( ( TYPE_1 . VdcQueryReturnValue ) ( VAR_2 ) ) . getReturnValue ( ) ) INIT = ( ( TYPE_1 . VdcQueryReturnValue ) ( VAR_2 ) ) . getReturnValue ( ) ) VAR VAR (  TYPE_2 . METHOD_1 ( VAR_3 , new TYPE_3 ( ) ) )  TYPE_2 . METHOD_1 ( VAR_3 , new TYPE_3 ( ) ) ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_4 ) NAME VAR_4 ( INIT = ( ( TYPE_4 ) ( VAR_1 ) ) ) INIT = ( ( TYPE_4 ) ( VAR_1 ) ) ) VAR VAR (  VAR_4 . setItems ( VAR_3 ) )  VAR_4 . setItems ( VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME status ) NAME status ( INIT = VAR_1 ) INIT = VAR_1 ) VAR VAR (  cmd . METHOD_2 ( status ) )  cmd . METHOD_2 ( status ) ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ( INIT = cmd . getReturnValue ( ) . METHOD_3 ( ) ) INIT = cmd . getReturnValue ( ) . METHOD_3 ( ) ) VAR VAR (  TYPE_2 . assertEquals ( VAR_2 . get ( 0 ) , TYPE_3 . toString ( ) ) )  TYPE_2 . assertEquals ( VAR_2 . get ( 0 ) , TYPE_3 . toString ( ) ) (  TYPE_2 . assertEquals ( VAR_2 . get ( 1 ) , java.lang.String . METHOD_4 ( STRING_1 , status ) ) )  TYPE_2 . assertEquals ( VAR_2 . get ( 1 ) , java.lang.String . METHOD_4 ( STRING_1 , status ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME type ) NAME type ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_2 . METHOD_2 ( id . toString ( ) ) )  VAR_2 . METHOD_2 ( id . toString ( ) ) (  VAR_2 . METHOD_3 ( VAR_1 ) )  VAR_2 . METHOD_3 ( VAR_1 ) (  VAR_2 . METHOD_4 ( type ) )  VAR_2 . METHOD_4 ( type ) (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_1 ) ( target ) ) ) INIT = ( ( TYPE_1 ) ( target ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.ArrayList<TYPE_2> ) TYPE java.util.ArrayList<TYPE_2> ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( java.util.ArrayList < TYPE_2 > ) ( returnValue ) ) ) INIT = ( ( java.util.ArrayList < TYPE_2 > ) ( returnValue ) ) ) VAR VAR ( IF IF ( COND VAR_1 . METHOD_2 ( VAR_2 ) ) COND VAR_1 . METHOD_2 ( VAR_2 ) ( THEN THEN (  VAR_1 . METHOD_3 ( ) . add ( METHOD_4 ( ) ) )  VAR_1 . METHOD_3 ( ) . add ( METHOD_4 ( ) ) (  VAR_1 . METHOD_5 ( ) )  VAR_1 . METHOD_5 ( ) ) THEN THEN ( ELSE ELSE (  VAR_1 . METHOD_6 ( ) )  VAR_1 . METHOD_6 ( ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source != null ? ( ( java.lang.String ) ( source ) ) : STRING_1 ; )  return source != null ? ( ( java.lang.String ) ( source ) ) : STRING_1 ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.String ) ( source ) ) : STRING_1 ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.String ) ( source ) ) : STRING_1 ; } } (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_2 ( VAR_1 , new TYPE_1 ( VAR_2 , TYPE_2 . METHOD_3 ( ) ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_2 ( VAR_1 , new TYPE_1 ( VAR_2 , TYPE_2 . METHOD_3 ( ) ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN org.ovirt.engine.core.common.businessentities.VM ) RETURN org.ovirt.engine.core.common.businessentities.VM ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME VAR_2 ) NAME VAR_2 ( INIT = new org.ovirt.engine.core.common.businessentities.VM ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.VM ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = org.mockito.Mockito . METHOD_2 ( VAR_4 class ) ) INIT = org.mockito.Mockito . METHOD_2 ( VAR_4 class ) ) VAR VAR (  org.mockito.Mockito.when ( VAR_3 . METHOD_3 ( VAR_1 ) ) . thenReturn ( TYPE_2 . METHOD_4 ( VAR_2 ) ) )  org.mockito.Mockito.when ( VAR_3 . METHOD_3 ( VAR_1 ) ) . thenReturn ( TYPE_2 . METHOD_4 ( VAR_2 ) ) (  org.mockito.Mockito.when ( METHOD_5 ( ) . METHOD_6 ( ) ) . thenReturn ( VAR_3 ) )  org.mockito.Mockito.when ( METHOD_5 ( ) . METHOD_6 ( ) ) . thenReturn ( VAR_3 ) (  TYPE_3 . METHOD_7 ( VAR_5 class ) )  TYPE_3 . METHOD_7 ( VAR_5 class ) (  TYPE_3 . METHOD_8 ( ) . when ( VAR_5 class ) )  TYPE_3 . METHOD_8 ( ) . when ( VAR_5 class ) (  TYPE_4 . METHOD_9 ( VAR_2 ) )  TYPE_4 . METHOD_9 ( VAR_2 ) (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND source != null ) COND source != null ( THEN THEN (  return source ; )  return source ; ) THEN THEN ) IF IF (  return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ; )  return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return source ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return source ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ; } } (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_3 , new TYPE_1 ( VAR_1 , VAR_2 ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_3 , new TYPE_1 ( VAR_1 , VAR_2 ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( TYPE_1 . getVm ( ) . METHOD_2 ( ) ) != ( VAR_1 ) ) COND ( TYPE_1 . getVm ( ) . METHOD_2 ( ) ) != ( VAR_1 ) ( THEN THEN (  TYPE_2 . METHOD_3 ( TYPE_1 . getVm ( ) . METHOD_4 ( ) , TYPE_1 . METHOD_5 ( ) ) )  TYPE_2 . METHOD_3 ( TYPE_1 . getVm ( ) . METHOD_4 ( ) , TYPE_1 . METHOD_5 ( ) ) ) THEN THEN ) IF IF (  TYPE_1 . METHOD_6 ( ) )  TYPE_1 . METHOD_6 ( ) (  TYPE_1 . METHOD_7 ( METHOD_8 ( ) ) )  TYPE_1 . METHOD_7 ( METHOD_8 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) == null ) COND ( VAR_1 ) == null ( THEN THEN ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) )  VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) (  METHOD_3 ( ) )  METHOD_3 ( ) ) BLOCK BLOCK ) METHOD METHOD (  TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) ; METHOD_3 ( ) ; } } , model . METHOD_4 ( ) ) ) )  TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) ; METHOD_3 ( ) ; } } , model . METHOD_4 ( ) ) ) ) THEN THEN ( ELSE ELSE (  METHOD_3 ( ) )  METHOD_3 ( ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( METHOD_2 ( ) ) ) INIT = new TYPE_1 ( METHOD_2 ( ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( METHOD_3 ( ) ) ) INIT = new TYPE_1 ( METHOD_3 ( ) ) ) VAR VAR (  return ( ( validate ( VAR_1 . METHOD_4 ( ) ) ) && ( ( METHOD_5 ( ) ) || ( validate ( VAR_2 . METHOD_6 ( ) ) ) ) ) && ( validate ( METHOD_7 ( METHOD_2 ( ) , METHOD_3 ( ) ) ) ) ; )  return ( ( validate ( VAR_1 . METHOD_4 ( ) ) ) && ( ( METHOD_5 ( ) ) || ( validate ( VAR_2 . METHOD_6 ( ) ) ) ) ) && ( validate ( METHOD_7 ( METHOD_2 ( ) , METHOD_3 ( ) ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME result ) NAME result ( INIT = dao . METHOD_2 ( VAR_1 ) ) INIT = dao . METHOD_2 ( VAR_1 ) ) VAR VAR (  TYPE_2 . METHOD_3 ( result ) )  TYPE_2 . METHOD_3 ( result ) (  TYPE_2 . METHOD_4 ( result . isEmpty ( ) ) )  TYPE_2 . METHOD_4 ( result . isEmpty ( ) ) ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME pool ) NAME pool ( IN result ) IN result ( BLOCK BLOCK (  TYPE_2 . assertEquals ( VAR_1 , pool . METHOD_5 ( ) ) )  TYPE_2 . assertEquals ( VAR_1 , pool . METHOD_5 ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = null ) INIT = null ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME storageDomain ) NAME storageDomain ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( IF IF ( COND ( storageDomain . METHOD_2 ( ) ) != ( VAR_3 ) ) COND ( storageDomain . METHOD_2 ( ) ) != ( VAR_3 ) ( THEN THEN ( IF IF ( COND ( storageDomain . METHOD_2 ( ) ) != ( VAR_4 ) ) COND ( storageDomain . METHOD_2 ( ) ) != ( VAR_4 ) ( THEN THEN (  METHOD_3 ( storageDomain ) )  METHOD_3 ( storageDomain ) ) THEN THEN ) IF IF ) THEN THEN ( ELSE ELSE (  VAR_2 = storageDomain )  VAR_2 = storageDomain ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN (  METHOD_3 ( VAR_2 ) )  METHOD_3 ( VAR_2 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ( INIT = getEntity ( ) ) INIT = getEntity ( ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Version ) TYPE org.ovirt.engine.core.compat.Version ( NAME VAR_1 ) NAME VAR_1 ( INIT = vm . METHOD_2 ( ) ) INIT = vm . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  METHOD_3 ( false ) )  METHOD_3 ( false ) ) THEN THEN ( ELSE ELSE (  METHOD_3 ( ( ( java.lang.Boolean ) ( ! ( TYPE_1 . METHOD_4 ( getEntity ( ) . METHOD_5 ( ) , VAR_1 ) . isEmpty ( ) ) ) ) ) )  METHOD_3 ( ( ( java.lang.Boolean ) ( ! ( TYPE_1 . METHOD_4 ( getEntity ( ) . METHOD_5 ( ) , VAR_1 ) . isEmpty ( ) ) ) ) ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ( INIT = getEntity ( ) ) INIT = getEntity ( ) ) VAR VAR (  return ( vm != null ) && ( ( ( ( vm . METHOD_2 ( ) ) == ( VAR_1 ) ) || ( ( vm . METHOD_2 ( ) ) == ( VAR_2 ) ) ) || ( ( vm . METHOD_2 ( ) ) == ( VAR_3 ) ) ) ; )  return ( vm != null ) && ( ( ( ( vm . METHOD_2 ( ) ) == ( VAR_1 ) ) || ( ( vm . METHOD_2 ( ) ) == ( VAR_2 ) ) ) || ( ( vm . METHOD_2 ( ) ) == ( VAR_3 ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ( INIT = ( ( TYPE_1 ) ( target ) ) ) INIT = ( ( TYPE_1 ) ( target ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2.VdcQueryReturnValue ) TYPE TYPE_2.VdcQueryReturnValue ( NAME response ) NAME response ( INIT = ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) ) INIT = ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) ) VAR VAR ( IF IF ( COND response . getSucceeded ( ) ) COND response . getSucceeded ( ) ( THEN THEN (  model . METHOD_1 ( ( ( java.util.ArrayList < TYPE_3 > ) ( response . getReturnValue ( ) ) ) , false ) )  model . METHOD_1 ( ( ( java.util.ArrayList < TYPE_3 > ) ( response . getReturnValue ( ) ) ) , false ) (  model . METHOD_2 ( STRING_1 ) )  model . METHOD_2 ( STRING_1 ) ) THEN THEN ( ELSE ELSE (  model . METHOD_2 ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_3 ( ) ) )  model . METHOD_2 ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_3 ( ) ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND VAR_1 < java.lang.Boolean > getValue ( VAR_2 ) ) COND VAR_1 < java.lang.Boolean > getValue ( VAR_2 ) ( THEN THEN (  VAR_3 . METHOD_2 ( STRING_1 ) )  VAR_3 . METHOD_2 ( STRING_1 ) (  TYPE_1 . get ( VAR_4 class ) . METHOD_3 ( VAR_5 . instance , STRING_2 , new TYPE_2 [ ] { } , new java.lang.Object [ ] { } , VAR_1 < java.lang.Integer > getValue ( VAR_6 ) , VAR_1 < java.lang.Integer > getValue ( VAR_6 ) , VAR_7 ) )  TYPE_1 . get ( VAR_4 class ) . METHOD_3 ( VAR_5 . instance , STRING_2 , new TYPE_2 [ ] { } , new java.lang.Object [ ] { } , VAR_1 < java.lang.Integer > getValue ( VAR_6 ) , VAR_1 < java.lang.Integer > getValue ( VAR_6 ) , VAR_7 ) (  VAR_3 . METHOD_2 ( STRING_3 ) )  VAR_3 . METHOD_2 ( STRING_3 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME vds ) NAME vds ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) == null ) COND ( VAR_1 ) == null ( THEN THEN (  VAR_1 = new java.util.HashMap < java.lang.String , java.lang.String > ( ) )  VAR_1 = new java.util.HashMap < java.lang.String , java.lang.String > ( ) ) THEN THEN ) IF IF (  VAR_1 . put ( vds . METHOD_2 ( ) . toString ( ) , TYPE_1 . name ( ) ) )  VAR_1 . put ( vds . METHOD_2 ( ) . toString ( ) , TYPE_1 . name ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) (  METHOD_2 ( ) . setEntity ( true ) )  METHOD_2 ( ) . setEntity ( true ) (  METHOD_3 ( ) . METHOD_4 ( TYPE_1 . METHOD_5 ( ) . get ( vm . METHOD_6 ( ) ) ) )  METHOD_3 ( ) . METHOD_4 ( TYPE_1 . METHOD_5 ( ) . get ( vm . METHOD_6 ( ) ) ) (  METHOD_3 ( ) . METHOD_7 ( vm . METHOD_8 ( ) ) )  METHOD_3 ( ) . METHOD_7 ( vm . METHOD_8 ( ) ) (  METHOD_9 ( ) )  METHOD_9 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( VAR_1 != null ) ? VAR_1 : vm . METHOD_2 ( ) ) INIT = ( VAR_1 != null ) ? VAR_1 : vm . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_3 ( ) . METHOD_1 ( vm . METHOD_4 ( ) , VAR_3 ) ) INIT = METHOD_3 ( ) . METHOD_1 ( vm . METHOD_4 ( ) , VAR_3 ) ) VAR VAR ( IF IF ( COND ! ( VAR_4 . isEmpty ( ) ) ) COND ! ( VAR_4 . isEmpty ( ) ) ( THEN THEN (  METHOD_3 ( ) . METHOD_5 ( VAR_4 , VAR_2 ) )  METHOD_3 ( ) . METHOD_5 ( VAR_4 , VAR_2 ) (  return false ; )  return false ; ) THEN THEN ) IF IF (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = dao . METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( STRING_1 ) ) ) INIT = dao . METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( STRING_1 ) ) ) VAR VAR (  TYPE_2 . assertEquals ( VAR_1 . size ( ) , 1 ) )  TYPE_2 . assertEquals ( VAR_1 . size ( ) , 1 ) (  TYPE_2 . assertEquals ( VAR_1 . get ( 0 ) . METHOD_4 ( ) , STRING_2 ) )  TYPE_2 . assertEquals ( VAR_1 . get ( 0 ) . METHOD_4 ( ) , STRING_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME value ) NAME value ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME resource ) NAME resource ( INIT = VAR_1 . METHOD_2 ( METHOD_3 ( value ) ) ) INIT = VAR_1 . METHOD_2 ( METHOD_3 ( value ) ) ) VAR VAR ( IF IF ( COND ( resource == null ) || ( ! ( resource instanceof TYPE_1 ) ) ) COND ( resource == null ) || ( ! ( resource instanceof TYPE_1 ) ) ( THEN THEN (  return ( ( TYPE_1 ) ( VAR_1 . METHOD_2 ( METHOD_4 ( value ) ) ) ) ; )  return ( ( TYPE_1 ) ( VAR_1 . METHOD_2 ( METHOD_4 ( value ) ) ) ) ; ) THEN THEN ) IF IF (  return ( ( TYPE_1 ) ( resource ) ) ; )  return ( ( TYPE_1 ) ( resource ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( 1 ) )  METHOD_2 ( 1 ) (  METHOD_3 ( ) )  METHOD_3 ( ) (  METHOD_4 ( METHOD_5 ( VAR_1 , VAR_2 class , new java.lang.String [ ] { STRING_1 , STRING_2 } , new java.lang.Object [ ] { VAR_3 [ 0 ] , java.lang.Boolean . FALSE } , VAR_3 [ 0 ] ) ) )  METHOD_4 ( METHOD_5 ( VAR_1 , VAR_2 class , new java.lang.String [ ] { STRING_1 , STRING_2 } , new java.lang.Object [ ] { VAR_3 [ 0 ] , java.lang.Boolean . FALSE } , VAR_3 [ 0 ] ) ) (  METHOD_6 ( resource . METHOD_7 ( new TYPE_1 ( ) ) ) )  METHOD_6 ( resource . METHOD_7 ( new TYPE_1 ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME context ) NAME context ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME value ) NAME value ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME id ) NAME id ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( METHOD_2 ( value ) ) ) COND ! ( METHOD_2 ( value ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  VAR_1 . METHOD_3 ( ( ( STRING_1 + id ) + STRING_2 ) ) )  VAR_1 . METHOD_3 ( ( ( STRING_1 + id ) + STRING_2 ) ) ( VAR VAR ( TYPE TYPE_4<TYPE_5<TYPE_2,?>> ) TYPE TYPE_4<TYPE_5<TYPE_2,?>> ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . METHOD_4 ( ) ) INIT = VAR_3 . METHOD_4 ( ) ) VAR VAR ( WHILE WHILE ( COND VAR_2 . METHOD_5 ( ) ) COND VAR_2 . METHOD_5 ( ) ( BLOCK BLOCK (  METHOD_1 ( context , value , VAR_1 , VAR_2 . METHOD_6 ( ) , id ) )  METHOD_1 ( context , value , VAR_1 , VAR_2 . METHOD_6 ( ) , id ) ) BLOCK BLOCK ) WHILE WHILE (  VAR_1 . METHOD_3 ( STRING_3 ) )  VAR_1 . METHOD_3 ( STRING_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME object ) NAME object ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME vds ) NAME vds ( INIT = METHOD_2 ( ) . getEntity ( ) ) INIT = METHOD_2 ( ) . getEntity ( ) ) VAR VAR ( IF IF ( COND ( object . getStatus ( ) . equals ( VAR_1 ) ) && ( vds . getId ( ) . equals ( object . METHOD_3 ( ) ) ) ) COND ( object . getStatus ( ) . equals ( VAR_1 ) ) && ( vds . getId ( ) . equals ( object . METHOD_3 ( ) ) ) ( THEN THEN (  return VAR_2 ; )  return VAR_2 ; ) THEN THEN ) IF IF (  return object . getStatus ( ) ; )  return object . getStatus ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME returnValue ) NAME returnValue ( INIT = true ) INIT = true ) VAR VAR ( IF IF ( COND ( TYPE_1 . METHOD_2 ( ) ) == null ) COND ( TYPE_1 . METHOD_2 ( ) ) == null ( THEN THEN (  addCanDoActionMessage ( VAR_1 ) )  addCanDoActionMessage ( VAR_1 ) (  returnValue = false )  returnValue = false ) THEN THEN ( ELSE ELSE ( IF IF ( COND ( METHOD_3 ( ) ) && ( ( TYPE_1 . METHOD_2 ( ) . METHOD_4 ( ) ) != ( VAR_2 ) ) ) COND ( METHOD_3 ( ) ) && ( ( TYPE_1 . METHOD_2 ( ) . METHOD_4 ( ) ) != ( VAR_2 ) ) ( THEN THEN (  addCanDoActionMessage ( VAR_3 ) )  addCanDoActionMessage ( VAR_3 ) (  returnValue = false )  returnValue = false ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF (  return returnValue ; )  return returnValue ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_1 ) ( target ) ) ) INIT = ( ( TYPE_1 ) ( target ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS> ( NAME hosts ) NAME hosts ( INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ) ( returnValue ) ) ) INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ) ( returnValue ) ) ) VAR VAR (  VAR_1 . hosts = hosts )  VAR_1 . hosts = hosts (  VAR_1 . METHOD_2 ( ) )  VAR_1 . METHOD_2 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_1 . METHOD_2 ( ) ) ) COND ! ( VAR_1 . METHOD_2 ( ) ) ( THEN THEN (  METHOD_3 ( STRING_1 ) )  METHOD_3 ( STRING_1 ) ) THEN THEN ) IF IF ( IF IF ( COND ! ( VAR_1 . METHOD_4 ( ) ) ) COND ! ( VAR_1 . METHOD_4 ( ) ) ( THEN THEN (  METHOD_3 ( STRING_2 ) )  METHOD_3 ( STRING_2 ) ) THEN THEN ) IF IF ( IF IF ( COND ! ( VAR_1 . METHOD_5 ( ) ) ) COND ! ( VAR_1 . METHOD_5 ( ) ) ( THEN THEN (  METHOD_3 ( STRING_3 ) )  METHOD_3 ( STRING_3 ) ) THEN THEN ) IF IF ( IF IF ( COND ! ( VAR_1 . METHOD_6 ( ) . METHOD_7 ( ) ) ) COND ! ( VAR_1 . METHOD_6 ( ) . METHOD_7 ( ) ) ( THEN THEN (  METHOD_3 ( STRING_4 ) )  METHOD_3 ( STRING_4 ) ) THEN THEN ) IF IF (  METHOD_8 ( VAR_1 . METHOD_6 ( ) . getId ( ) ) )  METHOD_8 ( VAR_1 . METHOD_6 ( ) . getId ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  org.mockito.Mockito.when ( VAR_2 . get ( TYPE_2 . any ( VAR_3 . Guid class ) ) ) . thenReturn ( VAR_1 ) )  org.mockito.Mockito.when ( VAR_2 . get ( TYPE_2 . any ( VAR_3 . Guid class ) ) ) . thenReturn ( VAR_1 ) (  org.mockito.Mockito.when ( VAR_4 . get ( VAR_5 . METHOD_3 ( ) ) ) . thenReturn ( null ) )  org.mockito.Mockito.when ( VAR_4 . get ( VAR_5 . METHOD_3 ( ) ) ) . thenReturn ( null ) (  org.mockito.Mockito.when ( VAR_4 . get ( VAR_6 . METHOD_3 ( ) ) ) . thenReturn ( null ) )  org.mockito.Mockito.when ( VAR_4 . get ( VAR_6 . METHOD_3 ( ) ) ) . thenReturn ( null ) (  TYPE_3 . METHOD_4 ( validator . METHOD_5 ( VAR_1 . getId ( ) ) , TYPE_4 . METHOD_6 ( ) ) )  TYPE_3 . METHOD_4 ( validator . METHOD_5 ( VAR_1 . getId ( ) ) , TYPE_4 . METHOD_6 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<?extendsTYPE_2,?> ) RETURN TYPE_1<?extendsTYPE_2,?> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.uicommonweb.UICommand ) TYPE org.ovirt.engine.ui.uicommonweb.UICommand ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 == ( getModel ( ) . METHOD_2 ( ) ) ) COND VAR_1 == ( getModel ( ) . METHOD_2 ( ) ) ( THEN THEN (  return VAR_3 . get ( ) ; )  return VAR_3 . get ( ) ; ) THEN THEN ( ELSE ELSE ( IF IF ( COND VAR_1 == ( getModel ( ) . METHOD_3 ( ) ) ) COND VAR_1 == ( getModel ( ) . METHOD_3 ( ) ) ( THEN THEN (  return VAR_4 . get ( ) ; )  return VAR_4 . get ( ) ; ) THEN THEN ( ELSE ELSE (  return super . METHOD_1 ( source , VAR_1 , VAR_2 ) ; )  return super . METHOD_1 ( source , VAR_1 , VAR_2 ) ; ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1<TYPE_2.ValidationResult> ) TYPE TYPE_1<TYPE_2.ValidationResult> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  org.mockito.Mockito.when ( VAR_3 . METHOD_2 ( ) ) . thenReturn ( VAR_4 ) )  org.mockito.Mockito.when ( VAR_3 . METHOD_2 ( ) ) . thenReturn ( VAR_4 ) (  org.mockito.Mockito.when ( VAR_5 . METHOD_3 ( VAR_4 ) ) . thenReturn ( ( VAR_1 ? TYPE_3 . METHOD_4 ( ) : TYPE_3 . METHOD_5 ( null ) ) ) )  org.mockito.Mockito.when ( VAR_5 . METHOD_3 ( VAR_4 ) ) . thenReturn ( ( VAR_1 ? TYPE_3 . METHOD_4 ( ) : TYPE_3 . METHOD_5 ( null ) ) ) (  TYPE_4 . METHOD_6 ( validator . METHOD_7 ( ) , VAR_2 ) )  TYPE_4 . METHOD_6 ( validator . METHOD_7 ( ) , VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1.Disk> ) TYPE java.util.List<TYPE_1.Disk> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR (  VAR_1 . add ( new TYPE_1 . DiskImage ( ) ) )  VAR_1 . add ( new TYPE_1 . DiskImage ( ) ) (  TYPE_2 . METHOD_2 ( VAR_2 . METHOD_3 ( new org.ovirt.engine.core.common.businessentities.VM ( ) , VAR_1 , null ) , true , null ) )  TYPE_2 . METHOD_2 ( VAR_2 . METHOD_3 ( new org.ovirt.engine.core.common.businessentities.VM ( ) , VAR_1 , null ) , true , null ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_2 ( ) )  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_2 ( ) (  org.mockito.Mockito.doReturn ( null ) . when ( command ) . METHOD_3 ( TYPE_1 . any ( VAR_2 class ) ) )  org.mockito.Mockito.doReturn ( null ) . when ( command ) . METHOD_3 ( TYPE_1 . any ( VAR_2 class ) ) (  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( command ) . METHOD_4 ( ) )  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( command ) . METHOD_4 ( ) (  org.mockito.Mockito.doReturn ( VAR_4 ) . when ( command ) . METHOD_5 ( ) )  org.mockito.Mockito.doReturn ( VAR_4 ) . when ( command ) . METHOD_5 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_3 ( VAR_4 ) . METHOD_2 ( ) ) INIT = new TYPE_3 ( VAR_4 ) . METHOD_2 ( ) ) VAR VAR (  this . VAR_5 = new TYPE_4 ( VAR_3 ) )  this . VAR_5 = new TYPE_4 ( VAR_3 ) (  this . VAR_6 = new TYPE_5 ( VAR_3 , this . VAR_5 ) )  this . VAR_6 = new TYPE_5 ( VAR_3 , this . VAR_5 ) (  VAR_2 . put ( VAR_7 , VAR_8 ) )  VAR_2 . put ( VAR_7 , VAR_8 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_3 . METHOD_2 ( VAR_1 ) )  VAR_3 . METHOD_2 ( VAR_1 ) (  VAR_3 . METHOD_3 ( VAR_2 ) )  VAR_3 . METHOD_3 ( VAR_2 ) (  VAR_3 . METHOD_4 ( new java.util.ArrayList ( METHOD_5 ( ) ) ) )  VAR_3 . METHOD_4 ( new java.util.ArrayList ( METHOD_5 ( ) ) ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_4 . METHOD_2 ( VAR_1 ) )  VAR_4 . METHOD_2 ( VAR_1 ) (  VAR_4 . METHOD_3 ( VAR_2 ) )  VAR_4 . METHOD_3 ( VAR_2 ) (  VAR_4 . METHOD_4 ( new java.util.ArrayList ( METHOD_5 ( ) ) ) )  VAR_4 . METHOD_4 ( new java.util.ArrayList ( METHOD_5 ( ) ) ) (  return new java.util.ArrayList ( TYPE_2 . METHOD_6 ( VAR_3 , VAR_4 ) ) ; )  return new java.util.ArrayList ( TYPE_2 . METHOD_6 ( VAR_3 , VAR_4 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( TYPE_1 . METHOD_2 ( ) ) != null ) COND ( TYPE_1 . METHOD_2 ( ) ) != null ( THEN THEN (  TYPE_1 . METHOD_3 ( this ) )  TYPE_1 . METHOD_3 ( this ) ) THEN THEN ) IF IF ( IF IF ( COND ! ( METHOD_4 ( ) ) ) COND ! ( METHOD_4 ( ) ) ( THEN THEN ( IF IF ( COND ( TYPE_1 . METHOD_2 ( ) ) == null ) COND ( TYPE_1 . METHOD_2 ( ) ) == null ( THEN THEN (  TYPE_2 . METHOD_5 ( this ) )  TYPE_2 . METHOD_5 ( this ) ) THEN THEN ) IF IF (  TYPE_1 . METHOD_6 ( ) )  TYPE_1 . METHOD_6 ( ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  return ( METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ) && ( METHOD_4 ( TYPE_1 . getParameters ( ) . METHOD_5 ( ) , TYPE_1 . getParameters ( ) . METHOD_6 ( ) , TYPE_1 . METHOD_7 ( ) ) ) ; )  return ( METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ) && ( METHOD_4 ( TYPE_1 . getParameters ( ) . METHOD_5 ( ) , TYPE_1 . getParameters ( ) . METHOD_6 ( ) , TYPE_1 . METHOD_7 ( ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND METHOD_2 ( TYPE_1 . METHOD_3 ( ) . VAR_1 ) ) COND METHOD_2 ( TYPE_1 . METHOD_3 ( ) . VAR_1 ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 ( vds . getId ( ) ) ) INIT = new TYPE_2 ( vds . getId ( ) ) ) VAR VAR (  VAR_2 . METHOD_4 ( vds ) )  VAR_2 . METHOD_4 ( vds ) (  VAR_2 . METHOD_5 ( STRING_1 , TYPE_1 . METHOD_3 ( ) . VAR_1 ) )  VAR_2 . METHOD_5 ( STRING_1 , TYPE_1 . METHOD_3 ( ) . VAR_1 ) (  VAR_3 . log ( VAR_2 , VAR_4 ) )  VAR_3 . log ( VAR_2 , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME params ) NAME params ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  org.mockito.Mockito.when ( params . METHOD_3 ( ) ) . thenReturn ( vmId ) )  org.mockito.Mockito.when ( params . METHOD_3 ( ) ) . thenReturn ( vmId ) ( VAR VAR ( TYPE TYPE_2<TYPE_1> ) TYPE TYPE_2<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_4 ( ) ) INIT = METHOD_4 ( ) ) VAR VAR (  VAR_1 . METHOD_5 ( ) )  VAR_1 . METHOD_5 ( ) ( VAR VAR ( TYPE java.util.List<TYPE_3> ) TYPE java.util.List<TYPE_3> ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( java.util.List < TYPE_3 > ) ( VAR_1 . METHOD_6 ( ) . getReturnValue ( ) ) ) ) INIT = ( ( java.util.List < TYPE_3 > ) ( VAR_1 . METHOD_6 ( ) . getReturnValue ( ) ) ) ) VAR VAR (  TYPE_4 . METHOD_7 ( STRING_1 , VAR_2 . METHOD_8 ( VAR_3 ) ) )  TYPE_4 . METHOD_7 ( STRING_1 , VAR_2 . METHOD_8 ( VAR_3 ) ) (  TYPE_4 . assertEquals ( STRING_2 , 1 , VAR_2 . size ( ) ) )  TYPE_4 . assertEquals ( STRING_2 , 1 , VAR_2 . size ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.Object> ) TYPE java.util.Map<java.lang.String,java.lang.Object> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.String> ) TYPE java.util.Map<java.lang.String,java.lang.String> ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) INIT = TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) VAR VAR ( IF IF ( COND ( VAR_3 . size ( ) ) > 0 ) COND ( VAR_3 . size ( ) ) > 0 ( THEN THEN (  VAR_2 . put ( VAR_4 , VAR_3 ) )  VAR_2 . put ( VAR_4 , VAR_3 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.Disk ) TYPE org.ovirt.engine.core.common.businessentities.Disk ( NAME disk ) NAME disk ( IN vm . METHOD_2 ( ) . METHOD_3 ( ) ) IN vm . METHOD_2 ( ) . METHOD_3 ( ) ( BLOCK BLOCK ( IF IF ( COND ( disk . METHOD_4 ( ) ) == ( VAR_1 ) ) COND ( disk . METHOD_4 ( ) ) == ( VAR_1 ) ( THEN THEN ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.DiskImage ) TYPE org.ovirt.engine.core.common.businessentities.DiskImage ( NAME diskImage ) NAME diskImage ( INIT = ( ( org.ovirt.engine.core.common.businessentities.DiskImage ) ( disk ) ) ) INIT = ( ( org.ovirt.engine.core.common.businessentities.DiskImage ) ( disk ) ) ) VAR VAR (  diskImage . METHOD_5 ( ) . METHOD_6 ( TYPE_1 . METHOD_7 ( diskImage . METHOD_8 ( ) , diskImage . METHOD_9 ( ) ) ) )  diskImage . METHOD_5 ( ) . METHOD_6 ( TYPE_1 . METHOD_7 ( diskImage . METHOD_8 ( ) , diskImage . METHOD_9 ( ) ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME equals ) NAME equals ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME obj ) NAME obj ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND obj == null ) COND obj == null ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( IF IF ( COND ( this ) == obj ) COND ( this ) == obj ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ( IF IF ( COND ( obj . METHOD_1 ( ) ) != ( this . METHOD_1 ( ) ) ) COND ( obj . METHOD_1 ( ) ) != ( this . METHOD_1 ( ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME other ) NAME other ( INIT = ( ( TYPE_1 ) ( obj ) ) ) INIT = ( ( TYPE_1 ) ( obj ) ) ) VAR VAR (  return ( TYPE_2 . equals ( VAR_1 , VAR_2 ) ) && ( TYPE_2 . equals ( VAR_3 , VAR_4 ) ) ; )  return ( TYPE_2 . equals ( VAR_1 , VAR_2 ) ) && ( TYPE_2 . equals ( VAR_3 , VAR_4 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<java.lang.String,TYPE_1> ) TYPE java.util.Map<java.lang.String,TYPE_1> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.HashMap < > ( ) ) INIT = new java.util.HashMap < > ( ) ) VAR VAR (  TYPE_2 . METHOD_1 ( VAR_1 , VAR_3 , VAR_2 ) )  TYPE_2 . METHOD_1 ( VAR_1 , VAR_3 , VAR_2 ) (  VAR_1 . put ( VAR_3 , new java.util.ArrayList ( VAR_2 . METHOD_2 ( ) ) ) )  VAR_1 . put ( VAR_3 , new java.util.ArrayList ( VAR_2 . METHOD_2 ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_4 . METHOD_2 ( VAR_2 , VAR_3 . METHOD_3 ( ) , VAR_3 . METHOD_4 ( ) , VAR_3 . METHOD_5 ( ) , VAR_3 . METHOD_6 ( ) , VAR_3 . METHOD_7 ( ) ) ) INIT = TYPE_4 . METHOD_2 ( VAR_2 , VAR_3 . METHOD_3 ( ) , VAR_3 . METHOD_4 ( ) , VAR_3 . METHOD_5 ( ) , VAR_3 . METHOD_6 ( ) , VAR_3 . METHOD_7 ( ) ) ) VAR VAR (  METHOD_8 ( VAR_5 , new TYPE_5 ( VAR_4 , VAR_1 ) ) )  METHOD_8 ( VAR_5 , new TYPE_5 ( VAR_4 , VAR_1 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.Network ) TYPE TYPE_1.Network ( NAME model ) NAME model ( INIT = new TYPE_1 . Network ( ) ) INIT = new TYPE_1 . Network ( ) ) VAR VAR (  model . METHOD_2 ( VAR_1 [ 0 ] ) )  model . METHOD_2 ( VAR_1 [ 0 ] ) (  METHOD_3 ( METHOD_4 ( ) ) )  METHOD_3 ( METHOD_4 ( ) ) (  VAR_2 . METHOD_5 ( ) )  VAR_2 . METHOD_5 ( ) ( TRY TRY ( BLOCK BLOCK (  VAR_3 . add ( model ) )  VAR_3 . add ( model ) (  METHOD_6 ( STRING_1 ) )  METHOD_6 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( BLOCK BLOCK (  METHOD_7 ( VAR_4 , STRING_2 , STRING_3 , STRING_4 ) )  METHOD_7 ( VAR_4 , STRING_2 , STRING_3 , STRING_4 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( null ) )  METHOD_2 ( null ) (  METHOD_3 ( null ) )  METHOD_3 ( null ) ( IF IF ( COND METHOD_4 ( ) ) COND METHOD_4 ( ) ( THEN THEN ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( METHOD_5 ( ) . METHOD_6 ( ) , METHOD_5 ( ) . getStoragePoolId ( ) , VAR_2 ) ) INIT = new TYPE_2 ( METHOD_5 ( ) . METHOD_6 ( ) , METHOD_5 ( ) . getStoragePoolId ( ) , VAR_2 ) ) VAR VAR (  org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_7 ( ) . METHOD_8 ( VAR_1 ) )  org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_7 ( ) . METHOD_8 ( VAR_1 ) (  METHOD_9 ( ) . METHOD_10 ( VAR_3 ) )  METHOD_9 ( ) . METHOD_10 ( VAR_3 ) (  METHOD_11 ( ) )  METHOD_11 ( ) ) THEN THEN ) IF IF (  return new TYPE_1 ( VAR_4 , VAR_5 ) ; )  return new TYPE_1 ( VAR_4 , VAR_5 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME id ) NAME id ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source != null ? new java.util.ArrayList < TYPE_1 > ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; )  return source != null ? new java.util.ArrayList < TYPE_1 > ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? new java.util.ArrayList < TYPE_1 > ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? new java.util.ArrayList < TYPE_1 > ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; } } (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new TYPE_2 ( id ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new TYPE_2 ( id ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  dao . METHOD_2 ( new TYPE_1 ( new org.ovirt.engine.core.compat.Guid ( VAR_1 . METHOD_3 ( ) . toString ( ) ) , VAR_1 . METHOD_4 ( ) ) ) )  dao . METHOD_2 ( new TYPE_1 ( new org.ovirt.engine.core.compat.Guid ( VAR_1 . METHOD_3 ( ) . toString ( ) ) , VAR_1 . METHOD_4 ( ) ) ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME result ) NAME result ( INIT = dao . get ( new TYPE_1 ( VAR_1 . METHOD_3 ( ) , new org.ovirt.engine.core.compat.Guid ( VAR_1 . METHOD_4 ( ) . toString ( ) ) ) ) ) INIT = dao . get ( new TYPE_1 ( VAR_1 . METHOD_3 ( ) , new org.ovirt.engine.core.compat.Guid ( VAR_1 . METHOD_4 ( ) . toString ( ) ) ) ) ) VAR VAR (  TYPE_3 . METHOD_5 ( result ) )  TYPE_3 . METHOD_5 ( result ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( METHOD_2 ( ) ) ) INIT = new TYPE_2 ( METHOD_2 ( ) ) ) VAR VAR (  command = org.mockito.Mockito . METHOD_3 ( new TYPE_1 ( VAR_1 , null ) ) )  command = org.mockito.Mockito . METHOD_3 ( new TYPE_1 ( VAR_1 , null ) ) (  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( command ) . METHOD_4 ( ) )  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( command ) . METHOD_4 ( ) (  org.mockito.Mockito.doReturn ( null ) . when ( VAR_2 ) . METHOD_5 ( TYPE_3 . any ( VAR_3 . String class ) , TYPE_3 . any ( VAR_4 . Guid class ) ) )  org.mockito.Mockito.doReturn ( null ) . when ( VAR_2 ) . METHOD_5 ( TYPE_3 . any ( VAR_3 . String class ) , TYPE_3 . any ( VAR_4 . Guid class ) ) (  return command ; )  return command ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND source != null ) COND source != null ( THEN THEN ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain> ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( source ) ) ) INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( source ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ) TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME storageDomain ) NAME storageDomain ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( IF IF ( COND ( storageDomain . METHOD_2 ( ) ) == ( VAR_3 ) ) COND ( storageDomain . METHOD_2 ( ) ) == ( VAR_3 ) ( THEN THEN (  VAR_2 . add ( storageDomain ) )  VAR_2 . add ( storageDomain ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_2 ; )  return VAR_2 ; ) THEN THEN ) IF IF (  return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ; )  return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  cmd . getParameters ( ) . getVm ( ) . METHOD_2 ( cluster . getId ( ) ) )  cmd . getParameters ( ) . getVm ( ) . METHOD_2 ( cluster . getId ( ) ) (  cmd . METHOD_3 ( ) )  cmd . METHOD_3 ( ) (  org.mockito.Mockito.when ( VAR_1 . METHOD_4 ( TYPE_1 . METHOD_5 ( ) , TYPE_1 . any ( VAR_2 . Version class ) ) ) . thenReturn ( new java.util.ArrayList < > ( TYPE_2 . METHOD_6 ( STRING_1 ) ) ) )  org.mockito.Mockito.when ( VAR_1 . METHOD_4 ( TYPE_1 . METHOD_5 ( ) , TYPE_1 . any ( VAR_2 . Version class ) ) ) . thenReturn ( new java.util.ArrayList < > ( TYPE_2 . METHOD_6 ( STRING_1 ) ) ) (  TYPE_3 . METHOD_7 ( STRING_2 , cmd . METHOD_8 ( ) ) )  TYPE_3 . METHOD_7 ( STRING_2 , cmd . METHOD_8 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( VAR_1 , TYPE_1 . METHOD_3 ( TYPE_2 , STRING_1 ) ) )  METHOD_2 ( VAR_1 , TYPE_1 . METHOD_3 ( TYPE_2 , STRING_1 ) ) (  METHOD_2 ( VAR_2 , TYPE_1 . METHOD_3 ( TYPE_2 , STRING_2 ) ) )  METHOD_2 ( VAR_2 , TYPE_1 . METHOD_3 ( TYPE_2 , STRING_2 ) ) (  METHOD_2 ( VAR_3 , TYPE_1 . METHOD_3 ( TYPE_2 , STRING_3 ) ) )  METHOD_2 ( VAR_3 , TYPE_1 . METHOD_3 ( TYPE_2 , STRING_3 ) ) (  METHOD_2 ( VAR_4 , TYPE_1 . METHOD_3 ( TYPE_2 , STRING_4 ) ) )  METHOD_2 ( VAR_4 , TYPE_1 . METHOD_3 ( TYPE_2 , STRING_4 ) ) (  METHOD_2 ( VAR_5 , TYPE_1 . METHOD_3 ( TYPE_2 , STRING_5 ) ) )  METHOD_2 ( VAR_5 , TYPE_1 . METHOD_3 ( TYPE_2 , STRING_5 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.AsyncQuery ) TYPE TYPE_1.AsyncQuery ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 . AsyncQuery ( ) ) INIT = new TYPE_1 . AsyncQuery ( ) ) VAR VAR ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3<TYPE_4> ) TYPE TYPE_3<TYPE_4> ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( ( TYPE_3 < TYPE_4 > ) ( returnValue ) ) ) INIT = ( ( TYPE_3 < TYPE_4 > ) ( returnValue ) ) ) VAR VAR (  VAR_4 = TYPE_5 . METHOD_2 ( VAR_3 ) )  VAR_4 = TYPE_5 . METHOD_2 ( VAR_3 ) (  METHOD_3 ( ) )  METHOD_3 ( ) ) BLOCK BLOCK ) METHOD METHOD (  VAR_2 = new TYPE_2 ( ) { public void onSuccess ( java.lang.Object returnValue ) { TYPE_3 < TYPE_4 > VAR_3 = ( ( TYPE_3 < TYPE_4 > ) ( returnValue ) ) ; VAR_4 = TYPE_5 . METHOD_2 ( VAR_3 ) ; METHOD_3 ( ) ; } } )  VAR_2 = new TYPE_2 ( ) { public void onSuccess ( java.lang.Object returnValue ) { TYPE_3 < TYPE_4 > VAR_3 = ( ( TYPE_3 < TYPE_4 > ) ( returnValue ) ) ; VAR_4 = TYPE_5 . METHOD_2 ( VAR_3 ) ; METHOD_3 ( ) ; } } (  TYPE_6 . getInstance ( ) . METHOD_4 ( getEntity ( ) . getStoragePoolId ( ) , VAR_1 ) )  TYPE_6 . getInstance ( ) . METHOD_4 ( getEntity ( ) . getStoragePoolId ( ) , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source != null ? ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; )  return source != null ? ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; } } (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME version ) NAME version ) VAR VAR ( VAR VAR ( TYPE java.util.Map<TYPE_2<TYPE_1,java.lang.String>,java.lang.Object> ) TYPE java.util.Map<TYPE_2<TYPE_1,java.lang.String>,java.lang.Object> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2<TYPE_1,java.lang.String> ) TYPE TYPE_2<TYPE_1,java.lang.String> ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_2 < TYPE_1 , java.lang.String > ( VAR_1 , version ) ) INIT = new TYPE_2 < TYPE_1 , java.lang.String > ( VAR_1 , version ) ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME value ) NAME value ( INIT = VAR_4 < java.lang.Object > METHOD_2 ( TYPE_3 . valueOf ( VAR_1 . toString ( ) ) , version ) ) INIT = VAR_4 < java.lang.Object > METHOD_2 ( TYPE_3 . valueOf ( VAR_1 . toString ( ) ) , version ) ) VAR VAR (  VAR_2 . put ( VAR_3 , value ) )  VAR_2 . put ( VAR_3 , value ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME resource ) NAME resource ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  resource . METHOD_2 ( VAR_1 ) )  resource . METHOD_2 ( VAR_1 ) (  resource . METHOD_3 ( VAR_2 ) )  resource . METHOD_3 ( VAR_2 ) (  resource . METHOD_4 ( VAR_3 ) )  resource . METHOD_4 ( VAR_3 ) ( IF IF ( COND resource instanceof TYPE_2 ) COND resource instanceof TYPE_2 ( THEN THEN (  ( ( TYPE_2 ) ( resource ) ) . METHOD_5 ( VAR_4 ) )  ( ( TYPE_2 ) ( resource ) ) . METHOD_5 ( VAR_4 ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND resource instanceof TYPE_3 ) COND resource instanceof TYPE_3 ( THEN THEN (  ( ( TYPE_4 ) ( resource ) ) . METHOD_5 ( VAR_4 ) )  ( ( TYPE_4 ) ( resource ) ) . METHOD_5 ( VAR_4 ) ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF (  resource . METHOD_6 ( VAR_5 ) )  resource . METHOD_6 ( VAR_5 ) (  VAR_6 . add ( resource ) )  VAR_6 . add ( resource ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ( INIT = ( ( TYPE_1 ) ( target ) ) ) INIT = ( ( TYPE_1 ) ( target ) ) ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME result ) NAME result ( INIT = ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) INIT = ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) VAR VAR (  model . METHOD_2 ( ( result != null ? ( ( java.util.ArrayList < TYPE_3 > ) ( result ) ) : new java.util.ArrayList < TYPE_3 > ( ) ) ) )  model . METHOD_2 ( ( result != null ? ( ( java.util.ArrayList < TYPE_3 > ) ( result ) ) : new java.util.ArrayList < TYPE_3 > ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1.DiskImage ) RETURN TYPE_1.DiskImage ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.DiskImage ) TYPE TYPE_1.DiskImage ( NAME disk ) NAME disk ( INIT = new TYPE_1 . DiskImage ( ) ) INIT = new TYPE_1 . DiskImage ( ) ) VAR VAR (  disk . setId ( VAR_1 ) )  disk . setId ( VAR_1 ) (  TYPE_2 . METHOD_2 ( VAR_2 ) )  TYPE_2 . METHOD_2 ( VAR_2 ) (  disk . METHOD_3 ( new java.util.ArrayList ( TYPE_2 . METHOD_2 ( VAR_2 ) ) ) )  disk . METHOD_3 ( new java.util.ArrayList ( TYPE_2 . METHOD_2 ( VAR_2 ) ) ) (  return disk ; )  return disk ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) (  dao = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) )  dao = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) (  VAR_2 = dao . get ( new org.ovirt.engine.core.compat.Guid ( STRING_1 ) ) )  VAR_2 = dao . get ( new org.ovirt.engine.core.compat.Guid ( STRING_1 ) ) (  VAR_2 . METHOD_4 ( VAR_3 ) )  VAR_2 . METHOD_4 ( VAR_3 ) (  vds = new org.ovirt.engine.core.compat.Guid ( STRING_2 ) )  vds = new org.ovirt.engine.core.compat.Guid ( STRING_2 ) (  VAR_4 = new org.ovirt.engine.core.compat.Guid ( STRING_3 ) )  VAR_4 = new org.ovirt.engine.core.compat.Guid ( STRING_3 ) (  storageDomain = new org.ovirt.engine.core.compat.Guid ( STRING_4 ) )  storageDomain = new org.ovirt.engine.core.compat.Guid ( STRING_4 ) (  VAR_5 = new TYPE_1 ( ) )  VAR_5 = new TYPE_1 ( ) (  VAR_5 . METHOD_5 ( STRING_5 ) )  VAR_5 . METHOD_5 ( STRING_5 ) (  VAR_5 . METHOD_6 ( new org.ovirt.engine.core.compat . Version ( STRING_6 ) ) )  VAR_5 . METHOD_6 ( new org.ovirt.engine.core.compat . Version ( STRING_6 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND result != null ) COND result != null ( THEN THEN ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ( INIT = ( ( org.ovirt.engine.core.common.businessentities.VM ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( result ) ) . getReturnValue ( ) ) ) ) INIT = ( ( org.ovirt.engine.core.common.businessentities.VM ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( result ) ) . getReturnValue ( ) ) ) ) VAR VAR ( IF IF ( COND vm == null ) COND vm == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_2 ) ( model ) ) ) INIT = ( ( TYPE_2 ) ( model ) ) ) VAR VAR (  VAR_1 . METHOD_2 ( VAR_2 , new TYPE_3 ( vm . getId ( ) ) ) )  VAR_1 . METHOD_2 ( VAR_2 , new TYPE_3 ( vm . getId ( ) ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME returnValue ) NAME returnValue ( INIT = super . METHOD_1 ( ) ) INIT = super . METHOD_1 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . get ( TYPE_2 . METHOD_3 ( ) . METHOD_4 ( ) ) ) INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . get ( TYPE_2 . METHOD_3 ( ) . METHOD_4 ( ) ) ) VAR VAR ( IF IF ( COND returnValue && ( VAR_1 == null ) ) COND returnValue && ( VAR_1 == null ) ( THEN THEN (  addCanDoActionMessage ( VAR_2 ) )  addCanDoActionMessage ( VAR_2 ) (  returnValue = false )  returnValue = false ) THEN THEN ( ELSE ELSE ( IF IF ( COND returnValue && ( ( TYPE_2 . getParameters ( ) . METHOD_5 ( ) ) < 0 ) ) COND returnValue && ( ( TYPE_2 . getParameters ( ) . METHOD_5 ( ) ) < 0 ) ( THEN THEN (  addCanDoActionMessage ( VAR_3 ) )  addCanDoActionMessage ( VAR_3 ) (  returnValue = false )  returnValue = false ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF (  return returnValue ; )  return returnValue ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( ) . METHOD_3 ( METHOD_4 ( ) ) )  TYPE_1 . METHOD_2 ( ) . METHOD_3 ( METHOD_4 ( ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_5 ( e . METHOD_6 ( ) ) . map ( TYPE_3 : : METHOD_7 ) . METHOD_8 ( STRING_1 ) ) INIT = TYPE_2 . METHOD_5 ( e . METHOD_6 ( ) ) . map ( TYPE_3 : : METHOD_7 ) . METHOD_8 ( STRING_1 ) ) VAR VAR (  log . error ( STRING_2 , VAR_1 ) )  log . error ( STRING_2 , VAR_1 ) (  TYPE_1 . METHOD_2 ( ) . METHOD_9 ( VAR_1 ) )  TYPE_1 . METHOD_2 ( ) . METHOD_9 ( VAR_1 ) (  TYPE_1 . METHOD_2 ( ) . METHOD_10 ( false ) )  TYPE_1 . METHOD_2 ( ) . METHOD_10 ( false ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN org.ovirt.engine.core.common.businessentities.StorageDomain ) RETURN org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<TYPE_1.DiskImage> ) TYPE java.util.List<TYPE_1.DiskImage> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1.DiskImage> ) TYPE java.util.List<TYPE_1.DiskImage> ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_2 ( getVm ( ) . METHOD_3 ( ) , VAR_3 ) ) INIT = TYPE_2 . METHOD_2 ( getVm ( ) . METHOD_3 ( ) , VAR_3 ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ) TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME storageDomain ) NAME storageDomain ( INIT = TYPE_3 . METHOD_4 ( getParameters ( ) . getStoragePoolId ( ) , VAR_2 ) ) INIT = TYPE_3 . METHOD_4 ( getParameters ( ) . getStoragePoolId ( ) , VAR_2 ) ) VAR VAR (  VAR_1 . METHOD_5 ( VAR_2 ) )  VAR_1 . METHOD_5 ( VAR_2 ) (  return storageDomain ; )  return storageDomain ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public final ) MODIFIER public final ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( 0 ) ) INIT = new TYPE_1 ( 0 ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_2 ( VAR_4 . String , name , VAR_1 ) . toString ( ) ) INIT = METHOD_2 ( VAR_4 . String , name , VAR_1 ) . toString ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_2 = new TYPE_2 ( STRING_1 ) . METHOD_3 ( VAR_3 ) )  VAR_2 = new TYPE_2 ( STRING_1 ) . METHOD_3 ( VAR_3 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2<?extendsTYPE_3.Disk> ) TYPE TYPE_2<?extendsTYPE_3.Disk> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_3 ) NAME VAR_3 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_3.Disk ) TYPE TYPE_3.Disk ( NAME disk ) NAME disk ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( IF IF ( COND ( disk . METHOD_2 ( ) ) == ( VAR_4 ) ) COND ( disk . METHOD_2 ( ) ) == ( VAR_4 ) ( THEN THEN ( IF IF ( COND ( ! VAR_2 ) || ( disk . METHOD_3 ( ) ) ) COND ( ! VAR_2 ) || ( disk . METHOD_3 ( ) ) ( THEN THEN (  VAR_3 . add ( ( ( TYPE_1 ) ( disk ) ) ) )  VAR_3 . add ( ( ( TYPE_1 ) ( disk ) ) ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_2 . METHOD_2 ( ( ! VAR_1 ) ) )  VAR_2 . METHOD_2 ( ( ! VAR_1 ) ) (  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( command ) . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_3 ) , TYPE_2 . any ( VAR_4 class ) ) )  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( command ) . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_3 ) , TYPE_2 . any ( VAR_4 class ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  METHOD_3 ( true , null ) )  METHOD_3 ( true , null ) (  cmd . METHOD_1 ( ) )  cmd . METHOD_1 ( ) (  org.mockito.Mockito . METHOD_4 ( VAR_1 , org.mockito.Mockito . METHOD_5 ( 1 ) ) . METHOD_6 ( TYPE_1 . any ( VAR_2 . Guid class ) ) )  org.mockito.Mockito . METHOD_4 ( VAR_1 , org.mockito.Mockito . METHOD_5 ( 1 ) ) . METHOD_6 ( TYPE_1 . any ( VAR_2 . Guid class ) ) (  TYPE_2 . assertEquals ( VAR_3 , cmd . METHOD_7 ( ) ) )  TYPE_2 . assertEquals ( VAR_3 , cmd . METHOD_7 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  this . METHOD_1 ( ( returnValue == null ? new java.util.ArrayList < TYPE_1 > ( ) : ( ( java.util.List < TYPE_1 > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ) ) )  this . METHOD_1 ( ( returnValue == null ? new java.util.ArrayList < TYPE_1 > ( ) : ( ( java.util.List < TYPE_1 > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND returnValue != null ) COND returnValue != null ( THEN THEN ( VAR VAR ( TYPE TYPE_1<java.lang.String> ) TYPE TYPE_1<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 < java.lang.String > ( ( ( TYPE_3 < java.lang.String > ) ( returnValue ) ) ) ) INIT = new TYPE_2 < java.lang.String > ( ( ( TYPE_3 < java.lang.String > ) ( returnValue ) ) ) ) VAR VAR (  VAR_1 . add ( STRING_1 ) )  VAR_1 . add ( STRING_1 ) ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = getModel ( ) . METHOD_1 ( ) . getSelectedItem ( ) ) INIT = getModel ( ) . METHOD_1 ( ) . getSelectedItem ( ) ) VAR VAR (  getModel ( ) . METHOD_1 ( ) . setItems ( VAR_1 ) )  getModel ( ) . METHOD_1 ( ) . setItems ( VAR_1 ) (  getModel ( ) . METHOD_1 ( ) . setSelectedItem ( VAR_2 ) )  getModel ( ) . METHOD_1 ( ) . setSelectedItem ( VAR_2 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME constants ) NAME constants ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( constants . METHOD_3 ( ) ) )  VAR_1 . METHOD_2 ( constants . METHOD_3 ( ) ) (  VAR_2 . METHOD_4 ( constants . METHOD_5 ( ) ) )  VAR_2 . METHOD_4 ( constants . METHOD_5 ( ) ) (  VAR_3 . METHOD_4 ( constants . METHOD_6 ( ) ) )  VAR_3 . METHOD_4 ( constants . METHOD_6 ( ) ) (  VAR_4 . METHOD_4 ( constants . METHOD_7 ( ) ) )  VAR_4 . METHOD_4 ( constants . METHOD_7 ( ) ) (  VAR_5 . METHOD_4 ( constants . METHOD_8 ( ) ) )  VAR_5 . METHOD_4 ( constants . METHOD_8 ( ) ) (  VAR_6 . METHOD_2 ( constants . METHOD_9 ( ) ) )  VAR_6 . METHOD_2 ( constants . METHOD_9 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  METHOD_3 ( VAR_1 ) )  METHOD_3 ( VAR_1 ) (  VAR_2 . METHOD_4 ( ) )  VAR_2 . METHOD_4 ( ) ( TRY TRY ( BLOCK BLOCK (  resource . METHOD_5 ( ) )  resource . METHOD_5 ( ) (  METHOD_6 ( STRING_1 ) )  METHOD_6 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( BLOCK BLOCK (  assertEquals ( INT_1 , VAR_3 . METHOD_7 ( ) . getStatus ( ) ) )  assertEquals ( INT_1 , VAR_3 . METHOD_7 ( ) . getStatus ( ) ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.VdcActionType ) TYPE TYPE_1.VdcActionType ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1.VdcActionParametersBase ) TYPE TYPE_1.VdcActionParametersBase ( NAME parameters ) NAME parameters ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  org.ovirt.engine.ui.frontend.Frontend . METHOD_2 ( VAR_1 , parameters , ( VAR_2 != null ? VAR_2 : VAR_5 ) , VAR_3 , VAR_4 ) )  org.ovirt.engine.ui.frontend.Frontend . METHOD_2 ( VAR_1 , parameters , ( VAR_2 != null ? VAR_2 : VAR_5 ) , VAR_3 , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_2 . METHOD_2 ( ( VAR_1 ++ ) ) )  VAR_2 . METHOD_2 ( ( VAR_1 ++ ) ) (  VAR_3 . METHOD_2 ( ( VAR_1 ++ ) ) )  VAR_3 . METHOD_2 ( ( VAR_1 ++ ) ) (  VAR_4 . METHOD_2 ( ( VAR_1 ++ ) ) )  VAR_4 . METHOD_2 ( ( VAR_1 ++ ) ) (  VAR_1 = VAR_5 . METHOD_1 ( VAR_1 ) )  VAR_1 = VAR_5 . METHOD_1 ( VAR_1 ) (  VAR_6 . METHOD_2 ( ( VAR_1 ++ ) ) )  VAR_6 . METHOD_2 ( ( VAR_1 ++ ) ) (  VAR_7 . METHOD_2 ( ( VAR_1 ++ ) ) )  VAR_7 . METHOD_2 ( ( VAR_1 ++ ) ) (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  cmd = org.mockito.Mockito . METHOD_2 ( METHOD_3 ( VAR_1 , 0 ) ) )  cmd = org.mockito.Mockito . METHOD_2 ( METHOD_3 ( VAR_1 , 0 ) ) (  METHOD_4 ( cmd ) )  METHOD_4 ( cmd ) (  METHOD_5 ( false , VAR_2 ) )  METHOD_5 ( false , VAR_2 ) (  TYPE_1 . METHOD_6 ( cmd . validate ( ) ) )  TYPE_1 . METHOD_6 ( cmd . validate ( ) ) (  cmd . METHOD_7 ( ) )  cmd . METHOD_7 ( ) (  TYPE_1 . assertEquals ( cmd . METHOD_8 ( ) , VAR_3 ) )  TYPE_1 . assertEquals ( cmd . METHOD_8 ( ) , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ) TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME storageDomain ) NAME storageDomain ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_1.DiskImage> ) TYPE java.util.List<TYPE_1.DiskImage> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_1.DiskImage ) TYPE TYPE_1.DiskImage ( NAME disk ) NAME disk ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  disk . METHOD_2 ( new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( TYPE_2 . METHOD_3 ( storageDomain . getId ( ) ) ) ) )  disk . METHOD_2 ( new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( TYPE_2 . METHOD_3 ( storageDomain . getId ( ) ) ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  METHOD_4 ( storageDomain . METHOD_5 ( ) , VAR_1 . get ( 0 ) ) )  METHOD_4 ( storageDomain . METHOD_5 ( ) , VAR_1 . get ( 0 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  METHOD_3 ( ) )  METHOD_3 ( ) ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME id ) NAME id ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.Network> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.Network> ( NAME VAR_2 ) NAME VAR_2 ( INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_4 ( ) . METHOD_5 ( id ) ) INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_4 ( ) . METHOD_5 ( id ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.Network ) TYPE org.ovirt.engine.core.common.businessentities.Network ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK (  TYPE_1 . METHOD_6 ( id , VAR_3 ) )  TYPE_1 . METHOD_6 ( id , VAR_3 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  TYPE_2 . METHOD_7 ( true ) )  TYPE_2 . METHOD_7 ( true ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_1 . assertEquals ( STRING_1 , VAR_1 ) )  TYPE_1 . assertEquals ( STRING_1 , VAR_1 ) (  METHOD_2 ( VAR_3 , VAR_4 , new java.lang.String [ ] { VAR_5 } , new java.lang.Object [ ] { TYPE_2 . toString ( ) } , TYPE_1 . METHOD_3 ( ) , VAR_2 ) )  METHOD_2 ( VAR_3 , VAR_4 , new java.lang.String [ ] { VAR_5 } , new java.lang.Object [ ] { TYPE_2 . toString ( ) } , TYPE_1 . METHOD_3 ( ) , VAR_2 ) (  VAR_6 . METHOD_4 ( ) )  VAR_6 . METHOD_4 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME section ) NAME section ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( ) . setId ( new org.ovirt.engine.core.compat.Guid ( TYPE_2 . get ( STRING_1 ) . getValue ( ) ) ) )  VAR_1 . METHOD_2 ( ) . setId ( new org.ovirt.engine.core.compat.Guid ( TYPE_2 . get ( STRING_1 ) . getValue ( ) ) ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME node ) NAME node ( INIT = section . METHOD_3 ( STRING_2 ) ) INIT = section . METHOD_3 ( STRING_2 ) ) VAR VAR ( IF IF ( COND node != null ) COND node != null ( THEN THEN ( IF IF ( COND TYPE_3 . equals ( java.lang.String.valueOf ( VAR_2 ) ) ) COND TYPE_3 . equals ( java.lang.String.valueOf ( VAR_2 ) ) ( THEN THEN (  TYPE_3 = java.lang.String.valueOf ( VAR_3 ) )  TYPE_3 = java.lang.String.valueOf ( VAR_3 ) ) THEN THEN ) IF IF (  VAR_1 . METHOD_2 ( ) . METHOD_4 ( VAR_4 . METHOD_5 ( TYPE_3 ) ) )  VAR_1 . METHOD_2 ( ) . METHOD_4 ( VAR_4 . METHOD_5 ( TYPE_3 ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( ) ) ) . thenReturn ( TYPE_2 . METHOD_3 ( ) ) )  org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( ) ) ) . thenReturn ( TYPE_2 . METHOD_3 ( ) ) (  METHOD_4 ( ) )  METHOD_4 ( ) (  METHOD_5 ( ) )  METHOD_5 ( ) (  METHOD_6 ( ) )  METHOD_6 ( ) (  METHOD_7 ( ) )  METHOD_7 ( ) (  METHOD_8 ( VAR_2 ) )  METHOD_8 ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  assertEquals ( TYPE_2 . value ( ) , model . METHOD_2 ( ) ) )  assertEquals ( TYPE_2 . value ( ) , model . METHOD_2 ( ) ) (  assertEquals ( VAR_2 [ VAR_1 ] . toString ( ) , model . getId ( ) ) )  assertEquals ( VAR_2 [ VAR_1 ] . toString ( ) , model . getId ( ) ) (  assertEquals ( 1 , model . METHOD_3 ( ) . METHOD_3 ( ) . size ( ) ) )  assertEquals ( 1 , model . METHOD_3 ( ) . METHOD_3 ( ) . size ( ) ) (  assertEquals ( VAR_2 [ VAR_1 ] . toString ( ) , model . METHOD_3 ( ) . METHOD_3 ( ) . get ( 0 ) . getId ( ) ) )  assertEquals ( VAR_2 [ VAR_1 ] . toString ( ) , model . METHOD_3 ( ) . METHOD_3 ( ) . get ( 0 ) . getId ( ) ) (  METHOD_4 ( model ) )  METHOD_4 ( model ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 = new org.ovirt.engine.core.common.businessentities.StoragePool ( ) )  VAR_1 = new org.ovirt.engine.core.common.businessentities.StoragePool ( ) (  VAR_1 . METHOD_2 ( VAR_2 ) )  VAR_1 . METHOD_2 ( VAR_2 ) (  org.mockito.Mockito.when ( VAR_3 . get ( TYPE_1 . any ( VAR_4 . Guid class ) ) ) . thenReturn ( VAR_1 ) )  org.mockito.Mockito.when ( VAR_3 . get ( TYPE_1 . any ( VAR_4 . Guid class ) ) ) . thenReturn ( VAR_1 ) (  org.mockito.Mockito.when ( command . getStoragePoolId ( ) ) . thenReturn ( VAR_5 ) )  org.mockito.Mockito.when ( command . getStoragePoolId ( ) ) . thenReturn ( VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) , TYPE_2 . toString ( ) , VAR_2 , VAR_3 , VAR_4 . VM ) ) )  TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) , TYPE_2 . toString ( ) , VAR_2 , VAR_3 , VAR_4 . VM ) ) (  TYPE_1 . METHOD_5 ( VAR_1 . METHOD_3 ( org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) , TYPE_2 . toString ( ) , VAR_5 , VAR_3 , VAR_4 . VM ) ) )  TYPE_1 . METHOD_5 ( VAR_1 . METHOD_3 ( org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) , TYPE_2 . toString ( ) , VAR_5 , VAR_3 , VAR_4 . VM ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_2 ( ) . METHOD_3 ( cluster ) ) INIT = VAR_2 . METHOD_2 ( ) . METHOD_3 ( cluster ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . get ( 0 ) ) INIT = VAR_1 . get ( 0 ) ) VAR VAR (  TYPE_2 . METHOD_4 ( VAR_3 ) )  TYPE_2 . METHOD_4 ( VAR_3 ) (  VAR_4 . METHOD_5 ( VAR_3 ) )  VAR_4 . METHOD_5 ( VAR_3 ) (  VAR_4 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_6 ( ) ) )  VAR_4 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_6 ( ) ) (  dao . METHOD_7 ( VAR_4 ) )  dao . METHOD_7 ( VAR_4 ) ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.network ) TYPE org.ovirt.engine.core.common.businessentities.network ( NAME result ) NAME result ( INIT = dao . METHOD_8 ( VAR_4 . METHOD_9 ( ) ) ) INIT = dao . METHOD_8 ( VAR_4 . METHOD_9 ( ) ) ) VAR VAR (  TYPE_2 . METHOD_4 ( result ) )  TYPE_2 . METHOD_4 ( result ) (  TYPE_2 . assertEquals ( VAR_4 , result ) )  TYPE_2 . assertEquals ( VAR_4 , result ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( TYPE_2 . METHOD_3 ( ) ) ) INIT = METHOD_2 ( TYPE_2 . METHOD_3 ( ) ) ) VAR VAR ( SWITCH SWITCH ( NAME VAR_1 ) NAME VAR_1 ( CASE VAR_2 ( BLOCK BLOCK (  VAR_3 . error ( java.lang.String . METHOD_4 ( STRING_1 , TYPE_2 . getParameters ( ) . METHOD_5 ( ) ) ) )  VAR_3 . error ( java.lang.String . METHOD_4 ( STRING_1 , TYPE_2 . getParameters ( ) . METHOD_5 ( ) ) ) (  return ; )  return ; ) BLOCK BLOCK ) CASE VAR_2 ( CASE VAR_4 ( BLOCK BLOCK (  METHOD_6 ( VAR_1 ) )  METHOD_6 ( VAR_1 ) (  TYPE_2 . METHOD_7 ( ) . METHOD_8 ( false ) )  TYPE_2 . METHOD_7 ( ) . METHOD_8 ( false ) (  return ; )  return ; ) BLOCK BLOCK ) CASE VAR_4 ) SWITCH SWITCH (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<TYPE_1> ) TYPE java.util.ArrayList<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( java.util.ArrayList < TYPE_1 > ) ( returnValue ) ) ) INIT = ( ( java.util.ArrayList < TYPE_1 > ) ( returnValue ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME pool ) NAME pool ( INIT = VAR_1 . get ( 0 ) ) INIT = VAR_1 . get ( 0 ) ) VAR VAR ( IF IF ( COND pool != null ) COND pool != null ( THEN THEN (  TYPE_2 . METHOD_2 ( ( ( org.ovirt.engine.ui.frontend.AsyncQuery ) ( model ) ) , pool . getId ( ) ) )  TYPE_2 . METHOD_2 ( ( ( org.ovirt.engine.ui.frontend.AsyncQuery ) ( model ) ) , pool . getId ( ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . METHOD_2 ( METHOD_3 ( ) ) ) INIT = VAR_3 . METHOD_2 ( METHOD_3 ( ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.ArrayList<TYPE_3.VdcActionParametersBase> ) TYPE java.util.ArrayList<TYPE_3.VdcActionParametersBase> ( NAME VAR_4 ) NAME VAR_4 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR (  VAR_4 . METHOD_4 ( VAR_2 . METHOD_5 ( VAR_1 . METHOD_6 ( ) , VAR_1 . METHOD_7 ( ) ) ) )  VAR_4 . METHOD_4 ( VAR_2 . METHOD_5 ( VAR_1 . METHOD_6 ( ) , VAR_1 . METHOD_7 ( ) ) ) (  TYPE_4 . METHOD_8 ( VAR_4 ) )  TYPE_4 . METHOD_8 ( VAR_4 ) (  METHOD_9 ( VAR_5 , VAR_4 ) )  METHOD_9 ( VAR_5 , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static final ) MODIFIER public static final ( RETURN TYPE_1<org.ovirt.engine.core.common.businessentities.Disk> ) RETURN TYPE_1<org.ovirt.engine.core.common.businessentities.Disk> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2<org.ovirt.engine.core.common.businessentities.Disk> ) TYPE TYPE_2<org.ovirt.engine.core.common.businessentities.Disk> ( NAME column ) NAME column ( INIT = new TYPE_1 < org.ovirt.engine.core.common.businessentities . Disk > ( ) { protected TYPE_3 METHOD_2 ( org.ovirt.engine.core.common.businessentities . Disk object ) { return ( ( org.ovirt.engine.core.common.businessentities.DiskImage ) ( object ) ) . METHOD_3 ( ) ; } } ) INIT = new TYPE_1 < org.ovirt.engine.core.common.businessentities . Disk > ( ) { protected TYPE_3 METHOD_2 ( org.ovirt.engine.core.common.businessentities . Disk object ) { return ( ( org.ovirt.engine.core.common.businessentities.DiskImage ) ( object ) ) . METHOD_3 ( ) ; } } ) VAR VAR ( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_3 ) RETURN TYPE_3 ( NAME METHOD_2 ) NAME METHOD_2 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.Disk ) TYPE org.ovirt.engine.core.common.businessentities.Disk ( NAME object ) NAME object ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return ( ( org.ovirt.engine.core.common.businessentities.DiskImage ) ( object ) ) . METHOD_3 ( ) ; )  return ( ( org.ovirt.engine.core.common.businessentities.DiskImage ) ( object ) ) . METHOD_3 ( ) ; ) BLOCK BLOCK ) METHOD METHOD (  return ( ( TYPE_1 < org.ovirt.engine.core.common.businessentities . Disk > ) ( TYPE_4 . METHOD_4 ( column , VAR_1 ) ) ) ; )  return ( ( TYPE_1 < org.ovirt.engine.core.common.businessentities . Disk > ) ( TYPE_4 . METHOD_4 ( column , VAR_1 ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND vm == null ) COND vm == null ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( vm . METHOD_3 ( ) , vm . METHOD_4 ( ) ) ) INIT = TYPE_1 . METHOD_2 ( vm . METHOD_3 ( ) , vm . METHOD_4 ( ) ) ) VAR VAR (  return ( ( java.lang.Boolean ) ( TYPE_1 . METHOD_5 ( VAR_2 , vm . METHOD_4 ( ) . toString ( ) ) ) ) && VAR_1 ; )  return ( ( java.lang.Boolean ) ( TYPE_1 . METHOD_5 ( VAR_2 , vm . METHOD_4 ( ) . toString ( ) ) ) ) && VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  throw new TYPE_2 ( VAR_2 , STRING_1 ) ; )  throw new TYPE_2 ( VAR_2 , STRING_1 ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ) TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ( NAME cluster ) NAME cluster ( INIT = METHOD_2 ( ) . get ( VAR_1 . METHOD_3 ( ) ) ) INIT = METHOD_2 ( ) . get ( VAR_1 . METHOD_3 ( ) ) ) VAR VAR (  METHOD_4 ( cluster , VAR_1 . getName ( ) ) )  METHOD_4 ( cluster , VAR_1 . getName ( ) ) ( VAR VAR ( TYPE java.util.List<TYPE_3> ) TYPE java.util.List<TYPE_3> ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_5 ( ) . METHOD_6 ( VAR_1 . getId ( ) ) ) INIT = METHOD_5 ( ) . METHOD_6 ( VAR_1 . getId ( ) ) ) VAR VAR (  METHOD_7 ( cluster , VAR_3 ) )  METHOD_7 ( cluster , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_1 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) INIT = ( ( TYPE_1 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) VAR VAR (  TYPE_2 . METHOD_1 ( VAR_2 , new TYPE_3 ( ) ) )  TYPE_2 . METHOD_1 ( VAR_2 , new TYPE_3 ( ) ) ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( ( TYPE_4 ) ( model ) ) ) INIT = ( ( TYPE_4 ) ( model ) ) ) VAR VAR (  VAR_3 . setItems ( VAR_2 ) )  VAR_3 . setItems ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.Object> ) TYPE java.util.Map<java.lang.String,java.lang.Object> ( NAME VAR_3 ) NAME VAR_3 ( INIT = null ) INIT = null ) VAR VAR ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN (  VAR_3 = VAR_4 . METHOD_1 ( VAR_1 , VAR_2 ) )  VAR_3 = VAR_4 . METHOD_1 ( VAR_1 , VAR_2 ) ) THEN THEN ( ELSE ELSE (  VAR_3 = VAR_4 . METHOD_1 ( VAR_1 ) )  VAR_3 = VAR_4 . METHOD_1 ( VAR_1 ) ) ELSE ELSE ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_5 ) NAME VAR_5 ( INIT = new TYPE_1 ( VAR_3 ) ) INIT = new TYPE_1 ( VAR_3 ) ) VAR VAR (  return VAR_5 ; )  return VAR_5 ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_6 ) NAME VAR_6 ( BLOCK BLOCK (  throw new TYPE_3 ( VAR_6 ) ; )  throw new TYPE_3 ( VAR_6 ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.AddVmCommand<TYPE_2> ) TYPE TYPE_1.AddVmCommand<TYPE_2> ( NAME command ) NAME command ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ) TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME VAR_1 ) NAME VAR_1 ( INIT = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ) TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME VAR_2 ) NAME VAR_2 ( INIT = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) ) VAR VAR (  VAR_1 . setId ( VAR_3 ) )  VAR_1 . setId ( VAR_3 ) (  VAR_2 . setId ( VAR_4 ) )  VAR_2 . setId ( VAR_4 ) (  VAR_5 . put ( VAR_3 , VAR_1 ) )  VAR_5 . put ( VAR_3 , VAR_1 ) (  VAR_5 . put ( VAR_4 , VAR_2 ) )  VAR_5 . put ( VAR_4 , VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<?extendsTYPE_2> ) TYPE TYPE_1<?extendsTYPE_2> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME sender ) NAME sender ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME args ) NAME args ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3<org.ovirt.engine.core.common.businessentities.StorageDomain> ) TYPE TYPE_3<org.ovirt.engine.core.common.businessentities.StorageDomain> ( NAME list ) NAME list ( INIT = ( ( TYPE_3 < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( sender ) ) ) INIT = ( ( TYPE_3 < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( sender ) ) ) VAR VAR ( IF IF ( COND ( list . getSelectedItem ( ) . METHOD_2 ( ) . METHOD_3 ( ) ) && ( METHOD_4 ( ) ) ) COND ( list . getSelectedItem ( ) . METHOD_2 ( ) . METHOD_3 ( ) ) && ( METHOD_4 ( ) ) ( THEN THEN (  METHOD_5 ( VAR_2 . METHOD_6 ( ) ) )  METHOD_5 ( VAR_2 . METHOD_6 ( ) ) ) THEN THEN ( ELSE ELSE (  METHOD_5 ( STRING_1 ) )  METHOD_5 ( STRING_1 ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
