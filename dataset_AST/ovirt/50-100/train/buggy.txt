( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1.ValidationResult ) RETURN TYPE_1.ValidationResult ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ) TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME storageDomain ) NAME storageDomain ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.ValidationResult ) TYPE TYPE_1.ValidationResult ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( storageDomain ) ) INIT = METHOD_2 ( storageDomain ) ) VAR VAR ( IF IF ( COND ! ( VAR_1 . METHOD_3 ( ) ) ) COND ! ( VAR_1 . METHOD_3 ( ) ) ( THEN THEN (  return VAR_1 ; )  return VAR_1 ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . METHOD_4 ( ) ) INIT = VAR_3 . METHOD_4 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = storageDomain . METHOD_5 ( ) ) INIT = storageDomain . METHOD_5 ( ) ) VAR VAR ( IF IF ( COND ( ! ( VAR_2 . equals ( VAR_5 ) ) ) || ( ! ( VAR_4 . equals ( VAR_5 ) ) ) ) COND ( ! ( VAR_2 . equals ( VAR_5 ) ) ) || ( ! ( VAR_4 . equals ( VAR_5 ) ) ) ( THEN THEN (  return new TYPE_1 . ValidationResult ( VAR_6 ) ; )  return new TYPE_1 . ValidationResult ( VAR_6 ) ; ) THEN THEN ) IF IF (  return VAR_7 ; )  return VAR_7 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.Integer ) TYPE java.lang.Integer ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) . METHOD_3 ( ) ) INIT = METHOD_2 ( ) . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.Integer ) TYPE java.lang.Integer ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( ) . METHOD_4 ( ) ) INIT = METHOD_2 ( ) . METHOD_4 ( ) ) VAR VAR ( IF IF ( COND ( VAR_1 != null ) && ( VAR_2 != null ) ) COND ( VAR_1 != null ) && ( VAR_2 != null ) ( THEN THEN (  METHOD_5 ( ( VAR_1 + VAR_2 ) ) )  METHOD_5 ( ( VAR_1 + VAR_2 ) ) ) THEN THEN ( ELSE ELSE (  METHOD_5 ( null ) )  METHOD_5 ( null ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME equals ) NAME equals ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME obj ) NAME obj ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND obj == null ) COND obj == null ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( IF IF ( COND ( this ) == obj ) COND ( this ) == obj ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ( IF IF ( COND ! ( obj instanceof TYPE_1 ) ) COND ! ( obj instanceof TYPE_1 ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME other ) NAME other ( INIT = ( ( TYPE_1 ) ( obj ) ) ) INIT = ( ( TYPE_1 ) ( obj ) ) ) VAR VAR (  return ( TYPE_2 . equals ( VAR_1 , VAR_2 ) ) && ( TYPE_2 . equals ( VAR_3 , VAR_4 ) ) ; )  return ( TYPE_2 . equals ( VAR_1 , VAR_2 ) ) && ( TYPE_2 . equals ( VAR_3 , VAR_4 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source ; )  return source ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new TYPE_1 ( VAR_1 ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new TYPE_1 ( VAR_1 ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_3 ) NAME VAR_3 ( INIT = this . client . METHOD_2 ( ) ) INIT = this . client . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_5 ( VAR_1 , VAR_2 , new TYPE_6 ( VAR_3 ) , TYPE_7 . METHOD_3 ( VAR_3 . METHOD_4 ( ) , VAR_3 . METHOD_5 ( ) ) , this . client ) ) INIT = new TYPE_5 ( VAR_1 , VAR_2 , new TYPE_6 ( VAR_3 ) , TYPE_7 . METHOD_3 ( VAR_3 . METHOD_4 ( ) , VAR_3 . METHOD_5 ( ) ) , this . client ) ) VAR VAR (  this . VAR_5 . METHOD_6 ( VAR_1 , VAR_4 ) )  this . VAR_5 . METHOD_6 ( VAR_1 , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( getWindow ( ) . METHOD_2 ( ) ) != null ) COND ( getWindow ( ) . METHOD_2 ( ) ) != null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  getWindow ( ) . METHOD_3 ( null ) )  getWindow ( ) . METHOD_3 ( null ) (  TYPE_1 . METHOD_4 ( this , new java.util.ArrayList < java.lang.Object > ( TYPE_2 . METHOD_5 ( new java.lang.Object [ ] { STRING_1 } ) ) ) . METHOD_6 ( ) )  TYPE_1 . METHOD_4 ( this , new java.util.ArrayList < java.lang.Object > ( TYPE_2 . METHOD_5 ( new java.lang.Object [ ] { STRING_1 } ) ) ) . METHOD_6 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1.VdcQueryReturnValue ) RETURN TYPE_1.VdcQueryReturnValue ( NAME runQuery ) NAME runQuery ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.VdcQueryType ) TYPE TYPE_1.VdcQueryType ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_3 . METHOD_1 ( STRING_1 ) )  VAR_3 . METHOD_1 ( STRING_1 ) (  METHOD_2 ( VAR_1 , VAR_2 ) )  METHOD_2 ( VAR_1 , VAR_2 ) (  VAR_2 . METHOD_3 ( METHOD_4 ( ) ) )  VAR_2 . METHOD_3 ( METHOD_4 ( ) ) ( VAR VAR ( TYPE TYPE_1.VdcQueryReturnValue ) TYPE TYPE_1.VdcQueryReturnValue ( NAME returnValue ) NAME returnValue ( INIT = METHOD_5 ( ) . runQuery ( VAR_1 , VAR_2 ) ) INIT = METHOD_5 ( ) . runQuery ( VAR_1 , VAR_2 ) ) VAR VAR (  returnValue . METHOD_6 ( TYPE_3 . METHOD_7 ( returnValue . getReturnValue ( ) ) ) )  returnValue . METHOD_6 ( TYPE_3 . METHOD_7 ( returnValue . getReturnValue ( ) ) ) (  return returnValue ; )  return returnValue ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( VAR_2 ) == null ) || ( ! ( VAR_2 . METHOD_2 ( ) . equals ( VAR_1 . METHOD_2 ( ) ) ) ) ) COND ( ( VAR_2 ) == null ) || ( ! ( VAR_2 . METHOD_2 ( ) . equals ( VAR_1 . METHOD_2 ( ) ) ) ) ( THEN THEN (  VAR_2 = VAR_1 )  VAR_2 = VAR_1 (  METHOD_3 ( ) )  METHOD_3 ( ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1.ValidationResult ) RETURN TYPE_1.ValidationResult ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE TYPE_2.VdcBllMessages ) TYPE TYPE_2.VdcBllMessages ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_5 ) NAME VAR_5 ( INIT = ( VAR_2 != null ) && ( VAR_3 != null ) ) INIT = ( VAR_2 != null ) && ( VAR_3 != null ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME VAR_6 ) NAME VAR_6 ( INIT = METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ) INIT = METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ) VAR VAR (  return TYPE_3 . METHOD_3 ( VAR_4 , VAR_6 ) . when ( ( VAR_5 && ( METHOD_4 ( VAR_2 , VAR_3 ) ) ) ) ; )  return TYPE_3 . METHOD_3 ( VAR_4 , VAR_6 ) . when ( ( VAR_5 && ( METHOD_4 ( VAR_2 , VAR_3 ) ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<TYPE_1.DiskImage,org.ovirt.engine.core.compat.Guid> ) TYPE java.util.Map<TYPE_1.DiskImage,org.ovirt.engine.core.compat.Guid> ( NAME map ) NAME map ( INIT = new java.util.HashMap < > ( ) ) INIT = new java.util.HashMap < > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME parameters ) NAME parameters ( IN TYPE_3 . getParameters ( ) . METHOD_2 ( ) ) IN TYPE_3 . getParameters ( ) . METHOD_2 ( ) ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.DiskImage ) TYPE TYPE_1.DiskImage ( NAME diskImage ) NAME diskImage ( INIT = METHOD_3 ( parameters . METHOD_4 ( ) ) ) INIT = METHOD_3 ( parameters . METHOD_4 ( ) ) ) VAR VAR (  map . put ( diskImage , diskImage . METHOD_5 ( ) . get ( 0 ) ) )  map . put ( diskImage , diskImage . METHOD_5 ( ) . get ( 0 ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return validate ( TYPE_4 . METHOD_1 ( map , TYPE_3 . METHOD_6 ( ) . METHOD_7 ( ) , TYPE_3 . METHOD_8 ( ) ) ) ; )  return validate ( TYPE_4 . METHOD_1 ( map , TYPE_3 . METHOD_6 ( ) . METHOD_7 ( ) , TYPE_3 . METHOD_8 ( ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.network.Network ) TYPE org.ovirt.engine.core.common.businessentities.network.Network ( NAME network ) NAME network ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_3 ( VAR_2 , null , null ) ) INIT = METHOD_3 ( VAR_2 , null , null ) ) VAR VAR (  VAR_1 . METHOD_4 ( network . getId ( ) ) )  VAR_1 . METHOD_4 ( network . getId ( ) ) (  METHOD_5 ( true , true , false , TYPE_2 . METHOD_6 ( VAR_3 , TYPE_3 . METHOD_7 ( VAR_4 , network . getName ( ) ) ) , network , VAR_1 ) )  METHOD_5 ( true , true , false , TYPE_2 . METHOD_6 ( VAR_3 , TYPE_3 . METHOD_7 ( VAR_4 , network . getName ( ) ) ) , network , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( ( METHOD_3 ( ) . METHOD_4 ( ) ? ( METHOD_3 ( ) . getEntity ( ) ) == null ? null : ( ( java.lang.String ) ( METHOD_3 ( ) . getEntity ( ) ) ) . METHOD_5 ( ) : METHOD_6 ( ) ) ) )  VAR_1 . METHOD_2 ( ( METHOD_3 ( ) . METHOD_4 ( ) ? ( METHOD_3 ( ) . getEntity ( ) ) == null ? null : ( ( java.lang.String ) ( METHOD_3 ( ) . getEntity ( ) ) ) . METHOD_5 ( ) : METHOD_6 ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 = org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) )  VAR_1 = org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) (  org.mockito.Mockito.doReturn ( cluster ) . when ( VAR_2 ) . get ( TYPE_1 . any ( VAR_3 . Guid class ) ) )  org.mockito.Mockito.doReturn ( cluster ) . when ( VAR_2 ) . get ( TYPE_1 . any ( VAR_3 . Guid class ) ) (  org.mockito.Mockito.when ( VAR_4 . METHOD_3 ( VAR_1 ) ) . thenReturn ( METHOD_4 ( VAR_5 ) ) )  org.mockito.Mockito.when ( VAR_4 . METHOD_3 ( VAR_1 ) ) . thenReturn ( METHOD_4 ( VAR_5 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1.ValidationResult ) RETURN TYPE_1.ValidationResult ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . getId ( ) ) INIT = VAR_1 . getId ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . getName ( ) ) INIT = VAR_1 . getName ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3.EngineMessage ) TYPE TYPE_3.EngineMessage ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_5 ) INIT = VAR_5 ) VAR VAR (  return TYPE_4 . METHOD_2 ( VAR_1 . getName ( ) , VAR_2 , VAR_3 , VAR_4 , VAR_6 ) ; )  return TYPE_4 . METHOD_2 ( VAR_1 . getName ( ) , VAR_2 , VAR_3 , VAR_4 , VAR_6 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME setEntity ) NAME setEntity ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME value ) NAME value ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( super . getEntity ( ) ) != null ) COND ( super . getEntity ( ) ) != null ( THEN THEN ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME VAR_1 ) NAME VAR_1 ( INIT = super . getEntity ( ) ) INIT = super . getEntity ( ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . getId ( ) ) INIT = VAR_1 . getId ( ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_3 ) NAME VAR_3 ( INIT = value . getId ( ) ) INIT = value . getId ( ) ) VAR VAR ( IF IF ( COND VAR_2 . equals ( VAR_3 ) ) COND VAR_2 . equals ( VAR_3 ) ( THEN THEN (  setEntity ( value , false ) )  setEntity ( value , false ) (  METHOD_1 ( ) )  METHOD_1 ( ) (  return ; )  return ; ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  super . setEntity ( value ) )  super . setEntity ( value ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.AuditLogType ) TYPE TYPE_1.AuditLogType ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  VAR_3 . METHOD_2 ( TYPE_3 . METHOD_3 ( ) . getId ( ) ) )  VAR_3 . METHOD_2 ( TYPE_3 . METHOD_3 ( ) . getId ( ) ) ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( INIT = ( VAR_2 == null ) ? TYPE_3 . METHOD_4 ( ) . name ( ) : VAR_2 ) INIT = ( VAR_2 == null ) ? TYPE_3 . METHOD_4 ( ) . name ( ) : VAR_2 ) VAR VAR (  VAR_3 . METHOD_5 ( STRING_1 , VAR_4 ) )  VAR_3 . METHOD_5 ( STRING_1 , VAR_4 ) (  TYPE_4 . METHOD_6 ( VAR_3 , VAR_1 , VAR_5 ) )  TYPE_4 . METHOD_6 ( VAR_3 , VAR_1 , VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( STRING_1 , STRING_2 ) ) INIT = TYPE_1 . METHOD_2 ( STRING_1 , STRING_2 ) ) VAR VAR (  VAR_1 . METHOD_3 ( ) )  VAR_1 . METHOD_3 ( ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 ( INT_1 , INT_1 , VAR_3 ) ) INIT = new TYPE_2 ( INT_1 , INT_1 , VAR_3 ) ) VAR VAR ( IF IF ( COND ! ( TYPE_3 . METHOD_4 ( VAR_2 , STRING_3 , VAR_1 ) ) ) COND ! ( TYPE_3 . METHOD_4 ( VAR_2 , STRING_3 , VAR_1 ) ) ( THEN THEN (  TYPE_4 . METHOD_5 ( STRING_4 ) )  TYPE_4 . METHOD_5 ( STRING_4 ) ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_4 ) NAME VAR_4 ( BLOCK BLOCK (  TYPE_4 . METHOD_5 ( ( STRING_5 + ( VAR_4 . METHOD_6 ( ) ) ) ) )  TYPE_4 . METHOD_5 ( ( STRING_5 + ( VAR_4 . METHOD_6 ( ) ) ) ) (  return null ; )  return null ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2<TYPE_1,TYPE_3> ) TYPE TYPE_2<TYPE_1,TYPE_3> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  new TYPE_4 ( VAR_2 , new TYPE_5 ( ) , new TYPE_6 ( ) , new TYPE_7 ( new TYPE_8 ( ) . METHOD_2 ( ) , new TYPE_9 ( new TYPE_10 ( ) , new TYPE_11 ( ) . METHOD_2 ( ) ) . METHOD_2 ( ) ) ) . METHOD_3 ( VAR_1 , getModel ( ) ) )  new TYPE_4 ( VAR_2 , new TYPE_5 ( ) , new TYPE_6 ( ) , new TYPE_7 ( new TYPE_8 ( ) . METHOD_2 ( ) , new TYPE_9 ( new TYPE_10 ( ) , new TYPE_11 ( ) . METHOD_2 ( ) ) . METHOD_2 ( ) ) ) . METHOD_3 ( VAR_1 , getModel ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.util.List<java.lang.String> ) RETURN java.util.List<java.lang.String> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1<?> ) TYPE TYPE_1<?> ( NAME command ) NAME command ) VAR VAR ( VAR VAR ( TYPE TYPE_2.VdcBllMessages ) TYPE TYPE_2.VdcBllMessages ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_3 ) NAME VAR_3 ( INIT = command . getReturnValue ( ) . METHOD_2 ( ) ) INIT = command . getReturnValue ( ) . METHOD_2 ( ) ) VAR VAR (  TYPE_3 . METHOD_3 ( TYPE_4 . METHOD_4 ( STRING_1 , TYPE_5 . METHOD_5 ( VAR_1 ) , VAR_2 . name ( ) , VAR_3 ) , VAR_3 . METHOD_6 ( VAR_2 . name ( ) ) ) )  TYPE_3 . METHOD_3 ( TYPE_4 . METHOD_4 ( STRING_1 , TYPE_5 . METHOD_5 ( VAR_1 ) , VAR_2 . name ( ) , VAR_3 ) , VAR_3 . METHOD_6 ( VAR_2 . name ( ) ) ) (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME VAR_1 ) NAME VAR_1 ( INIT = new org.ovirt.engine.core.common.businessentities.VM ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.VM ( ) ) VAR VAR (  TYPE_1 . METHOD_2 ( METHOD_3 ( VAR_1 , VAR_2 , VAR_3 ) ) . METHOD_4 ( TYPE_2 . METHOD_5 ( VAR_2 , VAR_4 ) , TYPE_2 . METHOD_5 ( VAR_3 , VAR_5 ) ) )  TYPE_1 . METHOD_2 ( METHOD_3 ( VAR_1 , VAR_2 , VAR_3 ) ) . METHOD_4 ( TYPE_2 . METHOD_5 ( VAR_2 , VAR_4 ) , TYPE_2 . METHOD_5 ( VAR_3 , VAR_5 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN java.util.Map<java.lang.String,TYPE_1<java.lang.String,java.lang.String>> ) RETURN java.util.Map<java.lang.String,TYPE_1<java.lang.String,java.lang.String>> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( METHOD_2 ( ) ) == null ) COND ( METHOD_2 ( ) ) == null ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF ( SWITCH SWITCH ( NAME METHOD_2 ( ) . METHOD_3 ( ) ) NAME METHOD_2 ( ) . METHOD_3 ( ) ( CASE VM ( BLOCK BLOCK (  return METHOD_4 ( ) ; )  return METHOD_4 ( ) ; ) BLOCK BLOCK ) CASE VM ( CASE VAR_1 ( BLOCK BLOCK (  return METHOD_5 ( ) ; )  return METHOD_5 ( ) ; ) BLOCK BLOCK ) CASE VAR_1 ( DEFAULT DEFAULT ( BLOCK BLOCK (  log . METHOD_6 ( STRING_1 , METHOD_2 ( ) . METHOD_3 ( ) ) )  log . METHOD_6 ( STRING_1 , METHOD_2 ( ) . METHOD_3 ( ) ) (  return null ; )  return null ; ) BLOCK BLOCK ) DEFAULT DEFAULT ) SWITCH SWITCH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2.DiskImage ) TYPE TYPE_2.DiskImage ( NAME disk ) NAME disk ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME parameters ) NAME parameters ( INIT = new TYPE_1 ( VAR_1 , disk ) ) INIT = new TYPE_1 ( VAR_1 , disk ) ) VAR VAR (  parameters . METHOD_2 ( METHOD_3 ( ) ) )  parameters . METHOD_2 ( METHOD_3 ( ) ) (  parameters . METHOD_4 ( TYPE_3 . METHOD_5 ( ) ) )  parameters . METHOD_4 ( TYPE_3 . METHOD_5 ( ) ) (  parameters . METHOD_6 ( TYPE_3 . getParameters ( ) ) )  parameters . METHOD_6 ( TYPE_3 . getParameters ( ) ) (  parameters . METHOD_7 ( false ) )  parameters . METHOD_7 ( false ) (  return parameters ; )  return parameters ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME storageDomain ) NAME storageDomain ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( storageDomain . METHOD_2 ( ) ) == ( VAR_2 ) ) || ( ( storageDomain . METHOD_2 ( ) ) == ( VAR_3 ) ) ) INIT = ( ( storageDomain . METHOD_2 ( ) ) == ( VAR_2 ) ) || ( ( storageDomain . METHOD_2 ( ) ) == ( VAR_3 ) ) ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_2 . METHOD_3 ( storageDomain ) ) INIT = TYPE_2 . METHOD_3 ( storageDomain ) ) VAR VAR (  return VAR_1 && VAR_4 ; )  return VAR_1 && VAR_4 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN ( IF IF ( COND VAR_1 . METHOD_2 ( ) ) COND VAR_1 . METHOD_2 ( ) ( THEN THEN (  TYPE_2 . METHOD_3 ( VAR_2 class , TYPE_3 . METHOD_4 ( ) , VAR_1 . METHOD_5 ( ) , true ) )  TYPE_2 . METHOD_3 ( VAR_2 class , TYPE_3 . METHOD_4 ( ) , VAR_1 . METHOD_5 ( ) , true ) ) THEN THEN ) IF IF ( IF IF ( COND VAR_1 . METHOD_6 ( ) ) COND VAR_1 . METHOD_6 ( ) ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_1 . METHOD_7 ( ) ) IN VAR_1 . METHOD_7 ( ) ( BLOCK BLOCK (  VAR_4 . METHOD_1 ( VAR_3 ) )  VAR_4 . METHOD_1 ( VAR_3 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.network ) TYPE org.ovirt.engine.core.common.businessentities.network ( NAME VAR_1 ) NAME VAR_1 ( INIT = dao . METHOD_2 ( VAR_2 ) ) INIT = dao . METHOD_2 ( VAR_2 ) ) VAR VAR (  VAR_1 . METHOD_3 ( STRING_1 ) )  VAR_1 . METHOD_3 ( STRING_1 ) (  dao . METHOD_4 ( VAR_1 ) )  dao . METHOD_4 ( VAR_1 ) ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.network ) TYPE org.ovirt.engine.core.common.businessentities.network ( NAME VAR_3 ) NAME VAR_3 ( INIT = dao . METHOD_2 ( VAR_2 ) ) INIT = dao . METHOD_2 ( VAR_2 ) ) VAR VAR (  TYPE_1 . METHOD_5 ( VAR_3 ) )  TYPE_1 . METHOD_5 ( VAR_3 ) (  TYPE_1 . assertEquals ( VAR_1 , VAR_3 ) )  TYPE_1 . assertEquals ( VAR_1 , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public final ) MODIFIER public final ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_2 ( VAR_1 ) ) INIT = METHOD_2 ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME value ) NAME value ( INIT = null ) INIT = null ) VAR VAR ( IF IF ( COND VAR_4 != null ) COND VAR_4 != null ( THEN THEN ( IF IF ( COND VAR_3 ) COND VAR_3 ( THEN THEN (  METHOD_3 ( VAR_4 ) )  METHOD_3 ( VAR_4 ) ) THEN THEN ) IF IF (  value = VAR_5 . get ( VAR_2 ) )  value = VAR_5 . get ( VAR_2 ) ) THEN THEN ) IF IF (  return value ; )  return value ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( IF IF ( COND TYPE_1 . isEmpty ( METHOD_2 ( VAR_2 , true ) ) ) COND TYPE_1 . isEmpty ( METHOD_2 ( VAR_2 , true ) ) ( THEN THEN (  throw new TYPE_2 ( java.lang.String . METHOD_3 ( ( ( VAR_3 ) + STRING_1 ) , VAR_2 ) ) ; )  throw new TYPE_2 ( java.lang.String . METHOD_3 ( ( ( VAR_3 ) + STRING_1 ) , VAR_2 ) ) ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source ; )  return source ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new TYPE_2 ( VAR_1 ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new TYPE_2 ( VAR_1 ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  VAR_1 = org.mockito.Mockito . METHOD_3 ( new TYPE_1 ( vds , new TYPE_2 ( ) ) ) )  VAR_1 = org.mockito.Mockito . METHOD_3 ( new TYPE_1 ( vds , new TYPE_2 ( ) ) ) (  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( VAR_1 ) . METHOD_4 ( ) )  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( VAR_1 ) . METHOD_4 ( ) (  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( VAR_1 ) . METHOD_5 ( ) )  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( VAR_1 ) . METHOD_5 ( ) (  org.mockito.Mockito.doReturn ( VAR_4 ) . when ( VAR_1 ) . METHOD_6 ( ) )  org.mockito.Mockito.doReturn ( VAR_4 ) . when ( VAR_1 ) . METHOD_6 ( ) (  org.mockito.Mockito.doReturn ( VAR_5 ) . when ( VAR_1 ) . METHOD_7 ( TYPE_3 . any ( ) , TYPE_3 . any ( ) ) )  org.mockito.Mockito.doReturn ( VAR_5 ) . when ( VAR_1 ) . METHOD_7 ( TYPE_3 . any ( ) , TYPE_3 . any ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = dao . METHOD_2 ( VAR_2 ) ) INIT = dao . METHOD_2 ( VAR_2 ) ) VAR VAR (  TYPE_2 . METHOD_3 ( VAR_1 ) )  TYPE_2 . METHOD_3 ( VAR_1 ) (  TYPE_2 . METHOD_4 ( ( ( VAR_1 . size ( ) ) == 2 ) ) )  TYPE_2 . METHOD_4 ( ( ( VAR_1 . size ( ) ) == 2 ) ) (  TYPE_2 . METHOD_4 ( VAR_1 . METHOD_5 ( VAR_3 ) ) )  TYPE_2 . METHOD_4 ( VAR_1 . METHOD_5 ( VAR_3 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_1 ( METHOD_1 ( ) , true ) ) INIT = new TYPE_1 ( METHOD_1 ( ) , true ) ) VAR VAR (  VAR_4 . METHOD_2 ( STRING_1 , VAR_1 ) )  VAR_4 . METHOD_2 ( STRING_1 , VAR_1 ) (  VAR_4 . METHOD_2 ( STRING_2 , VAR_2 ) )  VAR_4 . METHOD_2 ( STRING_2 , VAR_2 ) (  VAR_4 . METHOD_2 ( STRING_3 , VAR_3 ) )  VAR_4 . METHOD_2 ( STRING_3 , VAR_3 ) (  return VAR_4 . toString ( ) ; )  return VAR_4 . toString ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( VAR_3 , VAR_4 class , new java.lang.String [ ] { } , new java.lang.Object [ ] { } , TYPE_1 . METHOD_3 ( ) , VAR_2 ) )  METHOD_2 ( VAR_3 , VAR_4 class , new java.lang.String [ ] { } , new java.lang.Object [ ] { } , TYPE_1 . METHOD_3 ( ) , VAR_2 ) ( IF IF ( COND VAR_2 == null ) COND VAR_2 == null ( THEN THEN (  METHOD_2 ( VAR_5 , VAR_4 class , new java.lang.String [ ] { } , new java.lang.Object [ ] { } , TYPE_1 . METHOD_4 ( ) ) )  METHOD_2 ( VAR_5 , VAR_4 class , new java.lang.String [ ] { } , new java.lang.Object [ ] { } , TYPE_1 . METHOD_4 ( ) ) ) THEN THEN ) IF IF (  VAR_6 . METHOD_5 ( ) )  VAR_6 . METHOD_5 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.doReturn ( METHOD_2 ( 2 ) ) . when ( VAR_1 ) . METHOD_3 ( TYPE_1 . METHOD_4 ( VAR_2 ) , TYPE_1 . any ( VAR_3 class ) ) )  org.mockito.Mockito.doReturn ( METHOD_2 ( 2 ) ) . when ( VAR_1 ) . METHOD_3 ( TYPE_1 . METHOD_4 ( VAR_2 ) , TYPE_1 . any ( VAR_3 class ) ) (  VAR_1 . METHOD_5 ( ) )  VAR_1 . METHOD_5 ( ) (  org.mockito.Mockito . METHOD_6 ( VAR_4 , org.mockito.Mockito . METHOD_7 ( 2 ) ) . METHOD_8 ( TYPE_1 . any ( VAR_5 class ) ) )  org.mockito.Mockito . METHOD_6 ( VAR_4 , org.mockito.Mockito . METHOD_7 ( 2 ) ) . METHOD_8 ( TYPE_1 . any ( VAR_5 class ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( STRING_1 , VAR_2 , VAR_3 , INT_1 , 0 ) ) INIT = METHOD_2 ( STRING_1 , VAR_2 , VAR_3 , INT_1 , 0 ) ) VAR VAR (  parameters . METHOD_3 ( VAR_1 ) )  parameters . METHOD_3 ( VAR_1 ) (  parameters . METHOD_4 ( VAR_4 ) )  parameters . METHOD_4 ( VAR_4 ) (  org.mockito.Mockito.when ( VAR_5 . get ( VAR_1 . METHOD_5 ( ) ) ) . thenReturn ( VAR_6 ) )  org.mockito.Mockito.when ( VAR_5 . get ( VAR_1 . METHOD_5 ( ) ) ) . thenReturn ( VAR_6 ) (  TYPE_2 . METHOD_6 ( command ) )  TYPE_2 . METHOD_6 ( command ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND METHOD_2 ( ) ) COND METHOD_2 ( ) ( THEN THEN (  METHOD_3 ( ) )  METHOD_3 ( ) (  getModel ( ) . METHOD_4 ( ) . setEntity ( METHOD_5 ( VAR_1 . METHOD_6 ( ) , TYPE_2 . getName ( ) ) ) )  getModel ( ) . METHOD_4 ( ) . setEntity ( METHOD_5 ( VAR_1 . METHOD_6 ( ) , TYPE_2 . getName ( ) ) ) (  getModel ( ) . METHOD_7 ( ) . setEntity ( METHOD_5 ( VAR_1 . METHOD_6 ( ) , TYPE_3 . getName ( ) ) ) )  getModel ( ) . METHOD_7 ( ) . setEntity ( METHOD_5 ( VAR_1 . METHOD_6 ( ) , TYPE_3 . getName ( ) ) ) (  METHOD_8 ( ) )  METHOD_8 ( ) ) THEN THEN ) IF IF (  METHOD_9 ( VAR_1 ) )  METHOD_9 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME map ) NAME map ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME template ) NAME template ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME entity ) NAME entity ( INIT = ( template != null ) ? template : new TYPE_1 ( ) ) INIT = ( template != null ) ? template : new TYPE_1 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_1 ( VAR_1 ) ) INIT = TYPE_2 . METHOD_1 ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME result ) NAME result ( INIT = null ) INIT = null ) VAR VAR ( SWITCH SWITCH ( NAME VAR_2 ) NAME VAR_2 ( CASE VAR_3 ( BLOCK BLOCK (  result = VAR_4 )  result = VAR_4 (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_3 ( CASE VAR_5 ( BLOCK BLOCK (  result = VAR_6 )  result = VAR_6 (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_5 ( CASE VAR_7 ( BLOCK BLOCK (  result = VAR_8 )  result = VAR_8 (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_7 ( DEFAULT DEFAULT ( BLOCK BLOCK (  result = VAR_8 )  result = VAR_8 (  break ; )  break ; ) BLOCK BLOCK ) DEFAULT DEFAULT ) SWITCH SWITCH (  entity . METHOD_2 ( result ) )  entity . METHOD_2 ( result ) (  return entity ; )  return entity ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN org.ovirt.engine.core.common.businessentities.StorageDomain ) RETURN org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<TYPE_1.DiskImage> ) TYPE java.util.List<TYPE_1.DiskImage> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1.DiskImage> ) TYPE java.util.List<TYPE_1.DiskImage> ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_2 ( getVm ( ) . METHOD_3 ( ) , VAR_3 ) ) INIT = TYPE_2 . METHOD_2 ( getVm ( ) . METHOD_3 ( ) , VAR_3 ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ) TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME storageDomain ) NAME storageDomain ( INIT = TYPE_3 . getInstance ( ) . METHOD_4 ( getParameters ( ) . getStoragePoolId ( ) , VAR_2 , METHOD_5 ( ) ) ) INIT = TYPE_3 . getInstance ( ) . METHOD_4 ( getParameters ( ) . getStoragePoolId ( ) , VAR_2 , METHOD_5 ( ) ) ) VAR VAR (  VAR_1 . METHOD_6 ( VAR_2 ) )  VAR_1 . METHOD_6 ( VAR_2 ) (  return storageDomain ; )  return storageDomain ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = org.mockito.Mockito . METHOD_3 ( new TYPE_1 ( cmd . getVm ( ) ) ) ) INIT = org.mockito.Mockito . METHOD_3 ( new TYPE_1 ( cmd . getVm ( ) ) ) ) VAR VAR (  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( VAR_1 ) . METHOD_4 ( TYPE_2 . METHOD_5 ( ) ) )  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( VAR_1 ) . METHOD_4 ( TYPE_2 . METHOD_5 ( ) ) (  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( cmd ) . METHOD_6 ( TYPE_2 . any ( VAR_3 . VM class ) ) )  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( cmd ) . METHOD_6 ( TYPE_2 . any ( VAR_3 . VM class ) ) (  org.mockito.Mockito.doReturn ( VAR_4 ) . when ( cmd ) . getStoragePoolId ( ) )  org.mockito.Mockito.doReturn ( VAR_4 ) . when ( cmd ) . getStoragePoolId ( ) (  METHOD_7 ( VAR_5 ) )  METHOD_7 ( VAR_5 ) (  METHOD_8 ( ) )  METHOD_8 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1.StorageDomain ) RETURN TYPE_1.StorageDomain ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.StorageDomain ) TYPE TYPE_1.StorageDomain ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME entity ) NAME entity ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND TYPE_3 . equals ( entity . METHOD_2 ( ) ) ) COND TYPE_3 . equals ( entity . METHOD_2 ( ) ) ( THEN THEN (  model . METHOD_3 ( TYPE_4 . METHOD_4 ( VAR_1 ) ) )  model . METHOD_3 ( TYPE_4 . METHOD_4 ( VAR_1 ) ) ) THEN THEN ( ELSE ELSE (  model . METHOD_3 ( null ) )  model . METHOD_3 ( null ) ) ELSE ELSE ) IF IF (  return super . METHOD_1 ( model , entity ) ; )  return super . METHOD_1 ( model , entity ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_1.DiskImage ) TYPE TYPE_1.DiskImage ( NAME diskImage ) NAME diskImage ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ) TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 . METHOD_2 ( VAR_4 ) ) COND VAR_1 . METHOD_2 ( VAR_4 ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  return super . METHOD_1 ( VAR_1 , VAR_2 , diskImage , VAR_3 , VAR_4 ) ; )  return super . METHOD_1 ( VAR_1 , VAR_2 , diskImage , VAR_3 , VAR_4 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_2 ( ) . get ( VAR_3 . METHOD_3 ( ) ) . METHOD_4 ( ) ) INIT = VAR_2 . METHOD_2 ( ) . get ( VAR_3 . METHOD_3 ( ) ) . METHOD_4 ( ) ) VAR VAR (  TYPE_2 . METHOD_5 ( VAR_1 . getValue ( ) ) )  TYPE_2 . METHOD_5 ( VAR_1 . getValue ( ) ) ( VAR VAR ( TYPE java.util.List<TYPE_3> ) TYPE java.util.List<TYPE_3> ( NAME result ) NAME result ( INIT = dao . METHOD_6 ( VAR_1 . getValue ( ) ) ) INIT = dao . METHOD_6 ( VAR_1 . getValue ( ) ) ) VAR VAR (  TYPE_2 . METHOD_5 ( result ) )  TYPE_2 . METHOD_5 ( result ) (  TYPE_2 . METHOD_7 ( result . isEmpty ( ) ) )  TYPE_2 . METHOD_7 ( result . isEmpty ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.Object> ) TYPE java.util.Map<java.lang.String,java.lang.Object> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.HashMap < > ( ) ) INIT = new java.util.HashMap < > ( ) ) VAR VAR (  VAR_1 . put ( VAR_2 , VAR_3 ) )  VAR_1 . put ( VAR_2 , VAR_3 ) (  VAR_1 . put ( VAR_4 , TYPE_2 . getParameters ( ) . METHOD_2 ( ) ) )  VAR_1 . put ( VAR_4 , TYPE_2 . getParameters ( ) . METHOD_2 ( ) ) (  return new TYPE_1 ( new TYPE_3 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , TYPE_2 . METHOD_4 ( ) ) , VAR_5 , TYPE_4 . getName ( ) , STRING_1 , 0 , VAR_1 , true , true , false , STRING_1 , null , null , null ) ; )  return new TYPE_1 ( new TYPE_3 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , TYPE_2 . METHOD_4 ( ) ) , VAR_5 , TYPE_4 . getName ( ) , STRING_1 , 0 , VAR_1 , true , true , false , STRING_1 , null , null , null ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_2<TYPE_3>> ) TYPE java.util.List<TYPE_2<TYPE_3>> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_3> ) TYPE java.util.List<TYPE_3> ( NAME VAR_3 ) NAME VAR_3 ( INIT = new java.util.ArrayList < TYPE_3 > ( VAR_1 . METHOD_2 ( ) ) ) INIT = new java.util.ArrayList < TYPE_3 > ( VAR_1 . METHOD_2 ( ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_3> ) TYPE java.util.List<TYPE_3> ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_3 ) INIT = VAR_3 ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_2<TYPE_3> ) TYPE TYPE_2<TYPE_3> ( NAME VAR_5 ) NAME VAR_5 ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK (  VAR_4 = TYPE_4 . METHOD_3 ( VAR_4 , VAR_5 ) )  VAR_4 = TYPE_4 . METHOD_3 ( VAR_4 , VAR_5 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return ! ( VAR_4 . isEmpty ( ) ) ; )  return ! ( VAR_4 . isEmpty ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1<?> ) RETURN TYPE_1<?> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<?> ) TYPE TYPE_1<?> ( NAME VAR_1 ) NAME VAR_1 ( INIT = org.mockito.Mockito . METHOD_2 ( VAR_2 class , org.mockito.Mockito . METHOD_3 ( ) . METHOD_4 ( params ) . METHOD_5 ( VAR_3 ) ) ) INIT = org.mockito.Mockito . METHOD_2 ( VAR_2 class , org.mockito.Mockito . METHOD_3 ( ) . METHOD_4 ( params ) . METHOD_5 ( VAR_3 ) ) ) VAR VAR (  org.mockito.Mockito.doReturn ( VAR_4 ) . when ( VAR_1 ) . METHOD_6 ( ) )  org.mockito.Mockito.doReturn ( VAR_4 ) . when ( VAR_1 ) . METHOD_6 ( ) (  VAR_1 . METHOD_7 ( ) )  VAR_1 . METHOD_7 ( ) (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME getValue ) NAME getValue ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ) TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_1 ( VAR_1 . METHOD_2 ( ) ) )  METHOD_1 ( VAR_1 . METHOD_2 ( ) ) ( SWITCH SWITCH ( NAME VAR_1 . METHOD_2 ( ) ) NAME VAR_1 . METHOD_2 ( ) ( CASE VAR_2 ( BLOCK BLOCK (  return METHOD_3 ( ) . METHOD_4 ( ) ; )  return METHOD_3 ( ) . METHOD_4 ( ) ; ) BLOCK BLOCK ) CASE VAR_2 ( CASE VAR_3 ( BLOCK BLOCK (  return METHOD_3 ( ) . METHOD_5 ( ) ; )  return METHOD_3 ( ) . METHOD_5 ( ) ; ) BLOCK BLOCK ) CASE VAR_3 ( CASE VAR_4 ( BLOCK BLOCK (  return METHOD_3 ( ) . METHOD_6 ( ) ; )  return METHOD_3 ( ) . METHOD_6 ( ) ; ) BLOCK BLOCK ) CASE VAR_4 ( CASE VAR_5 ( BLOCK BLOCK (  return METHOD_3 ( ) . METHOD_7 ( ) ; )  return METHOD_3 ( ) . METHOD_7 ( ) ; ) BLOCK BLOCK ) CASE VAR_5 ( CASE VAR_6 ( BLOCK BLOCK (  return METHOD_3 ( ) . METHOD_8 ( ) ; )  return METHOD_3 ( ) . METHOD_8 ( ) ; ) BLOCK BLOCK ) CASE VAR_6 ( DEFAULT DEFAULT ( BLOCK BLOCK (  return METHOD_3 ( ) . METHOD_6 ( ) ; )  return METHOD_3 ( ) . METHOD_6 ( ) ; ) BLOCK BLOCK ) DEFAULT DEFAULT ) SWITCH SWITCH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME id ) NAME id ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND org.ovirt.engine.core.compat.Guid . METHOD_3 ( id ) ) COND org.ovirt.engine.core.compat.Guid . METHOD_3 ( id ) ( THEN THEN (  id = org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) )  id = org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) (  VAR_1 . METHOD_5 ( id ) )  VAR_1 . METHOD_5 ( id ) ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_3 ( VAR_1 ) ) INIT = new TYPE_3 ( VAR_1 ) ) VAR VAR (  METHOD_6 ( ) . METHOD_7 ( STRING_1 , VAR_2 ) )  METHOD_6 ( ) . METHOD_7 ( STRING_1 , VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  cmd = org.mockito.Mockito . METHOD_2 ( METHOD_3 ( VAR_1 , 0 ) ) )  cmd = org.mockito.Mockito . METHOD_2 ( METHOD_3 ( VAR_1 , 0 ) ) (  METHOD_4 ( cmd ) )  METHOD_4 ( cmd ) (  METHOD_5 ( false , VAR_2 ) )  METHOD_5 ( false , VAR_2 ) (  TYPE_1 . METHOD_6 ( cmd . validate ( ) ) )  TYPE_1 . METHOD_6 ( cmd . validate ( ) ) (  cmd . METHOD_7 ( ) )  cmd . METHOD_7 ( ) (  TYPE_1 . assertEquals ( VAR_3 , cmd . METHOD_8 ( ) ) )  TYPE_1 . assertEquals ( VAR_3 , cmd . METHOD_8 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ) TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( org.ovirt.engine.core.common.businessentities.StorageDomain ) ( result ) ) ) INIT = ( ( org.ovirt.engine.core.common.businessentities.StorageDomain ) ( result ) ) ) VAR VAR ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( vm . getStoragePoolId ( ) , VAR_3 ) ) INIT = new TYPE_1 ( vm . getStoragePoolId ( ) , VAR_3 ) ) VAR VAR (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_4 , VAR_2 , VAR_5 ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_4 , VAR_2 , VAR_5 ) ) THEN THEN ( ELSE ELSE (  ( ( TYPE_2 ) ( model ) ) . METHOD_1 ( null ) )  ( ( TYPE_2 ) ( model ) ) . METHOD_1 ( null ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( VAR_2 , METHOD_3 ( ) ) ) INIT = METHOD_2 ( VAR_2 , METHOD_3 ( ) ) ) VAR VAR ( IF IF ( COND VAR_1 . getSucceeded ( ) ) COND VAR_1 . getSucceeded ( ) ( THEN THEN (  METHOD_4 ( ) . METHOD_5 ( TYPE_2 . METHOD_6 ( ) , VAR_3 ) )  METHOD_4 ( ) . METHOD_5 ( TYPE_2 . METHOD_6 ( ) , VAR_3 ) (  TYPE_2 . METHOD_7 ( true ) )  TYPE_2 . METHOD_7 ( true ) ) THEN THEN ( ELSE ELSE (  VAR_4 . error ( STRING_1 ) )  VAR_4 . error ( STRING_1 ) (  METHOD_8 ( VAR_5 ) )  METHOD_8 ( VAR_5 ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_4 . error ( STRING_1 , e ) )  VAR_4 . error ( STRING_1 , e ) (  METHOD_8 ( VAR_5 ) )  METHOD_8 ( VAR_5 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) ) INIT = TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StoragePool ) TYPE org.ovirt.engine.core.common.businessentities.StoragePool ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_4 ( ) ) INIT = METHOD_4 ( ) ) VAR VAR ( IF IF ( COND VAR_2 == null ) COND VAR_2 == null ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_3<TYPE_1> ) TYPE TYPE_3<TYPE_1> ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_5 ( VAR_2 . METHOD_6 ( ) ) ) INIT = METHOD_5 ( VAR_2 . METHOD_6 ( ) ) ) VAR VAR ( IF IF ( COND ! ( VAR_3 . METHOD_7 ( VAR_1 ) ) ) COND ! ( VAR_3 . METHOD_7 ( VAR_1 ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.List<org.ovirt.engine.core.common.businessentities.VdsNetworkInterface> ) RETURN java.util.List<org.ovirt.engine.core.common.businessentities.VdsNetworkInterface> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_1 . instance ( ) . METHOD_2 ( 2 , INT_1 ) ) INIT = TYPE_1 . instance ( ) . METHOD_2 ( 2 , INT_1 ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VdsNetworkInterface> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VdsNetworkInterface> ( NAME VAR_3 ) NAME VAR_3 ( INIT = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . VdsNetworkInterface > ( VAR_2 ) ) INIT = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . VdsNetworkInterface > ( VAR_2 ) ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < VAR_2 ) COND i < VAR_2 ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK (  VAR_3 . add ( METHOD_3 ( ( STRING_1 + i ) , VAR_1 . getName ( ) , null , null ) ) )  VAR_3 . add ( METHOD_3 ( ( STRING_1 + i ) , VAR_1 . getName ( ) , null , null ) ) ) BLOCK BLOCK ) FOR FOR (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( VAR_1 , VAR_2 ) )  METHOD_2 ( VAR_1 , VAR_2 ) ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_3 ) NAME VAR_3 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR (  VAR_3 . add ( STRING_1 ) )  VAR_3 . add ( STRING_1 ) (  TYPE_1 . METHOD_3 ( VAR_4 . METHOD_4 ( VAR_5 ) ) . METHOD_5 ( VAR_3 ) . METHOD_6 ( ) )  TYPE_1 . METHOD_3 ( VAR_4 . METHOD_4 ( VAR_5 ) ) . METHOD_5 ( VAR_3 ) . METHOD_6 ( ) (  METHOD_7 ( VAR_2 ) )  METHOD_7 ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME node ) NAME node ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME resource ) NAME resource ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( node . METHOD_2 ( resource , VAR_2 ) ) != null ) && ( ! ( TYPE_3 . isEmpty ( node . METHOD_2 ( resource , VAR_2 ) . VAR_3 ) ) ) ) COND ( ( node . METHOD_2 ( resource , VAR_2 ) ) != null ) && ( ! ( TYPE_3 . isEmpty ( node . METHOD_2 ( resource , VAR_2 ) . VAR_3 ) ) ) ( THEN THEN (  return java.lang.Integer . valueOf ( node . METHOD_2 ( resource , VAR_2 ) . VAR_3 ) ; )  return java.lang.Integer . valueOf ( node . METHOD_2 ( resource , VAR_2 ) . VAR_3 ) ; ) THEN THEN ) IF IF (  return - 1 ; )  return - 1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME add ) NAME add ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_1 ( VAR_2 class , VAR_1 ) )  METHOD_1 ( VAR_2 class , VAR_1 ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME parameters ) NAME parameters ( INIT = new TYPE_3 ( ) ) INIT = new TYPE_3 ( ) ) VAR VAR (  parameters . METHOD_2 ( map ( VAR_1 ) ) )  parameters . METHOD_2 ( map ( VAR_1 ) ) (  parameters . METHOD_3 ( METHOD_4 ( VAR_3 ) ) )  parameters . METHOD_3 ( METHOD_4 ( VAR_3 ) ) (  parameters . METHOD_5 ( VAR_4 ) )  parameters . METHOD_5 ( VAR_4 ) (  return METHOD_6 ( VAR_5 , parameters , new TYPE_4 ( VAR_1 . getName ( ) ) ) ; )  return METHOD_6 ( VAR_5 , parameters , new TYPE_4 ( VAR_1 . getName ( ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( STRING_1 , VAR_2 , STRING_2 , STRING_3 ) ) INIT = METHOD_2 ( STRING_1 , VAR_2 , STRING_2 , STRING_3 ) ) VAR VAR (  parameters . METHOD_3 ( VAR_1 ) )  parameters . METHOD_3 ( VAR_1 ) (  parameters . METHOD_4 ( VAR_3 ) )  parameters . METHOD_4 ( VAR_3 ) (  parameters . METHOD_5 ( VAR_3 ) )  parameters . METHOD_5 ( VAR_3 ) (  org.mockito.Mockito.doReturn ( false ) . when ( command ) . METHOD_6 ( VAR_1 ) )  org.mockito.Mockito.doReturn ( false ) . when ( command ) . METHOD_6 ( VAR_1 ) (  org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_7 ( ) )  org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_7 ( ) (  TYPE_2 . METHOD_8 ( command ) )  TYPE_2 . METHOD_8 ( command ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) ( VAR VAR ( TYPE TYPE_1.AddVmCommand<TYPE_2> ) TYPE TYPE_1.AddVmCommand<TYPE_2> ( NAME cmd ) NAME cmd ( INIT = METHOD_3 ( METHOD_4 ( 1 , 1 ) ) ) INIT = METHOD_3 ( METHOD_4 ( 1 , 1 ) ) ) VAR VAR (  cmd . getParameters ( ) . getVm ( ) . METHOD_5 ( STRING_1 ) )  cmd . getParameters ( ) . getVm ( ) . METHOD_5 ( STRING_1 ) (  TYPE_3 . METHOD_6 ( STRING_2 , cmd . METHOD_7 ( ) ) )  TYPE_3 . METHOD_6 ( STRING_2 , cmd . METHOD_7 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_5 . METHOD_2 ( VAR_1 , result . METHOD_3 ( ) , VAR_3 . Collections < java.lang.String > METHOD_4 ( ) , VAR_4 . METHOD_5 ( ) ) ) INIT = TYPE_5 . METHOD_2 ( VAR_1 , result . METHOD_3 ( ) , VAR_3 . Collections < java.lang.String > METHOD_4 ( ) , VAR_4 . METHOD_5 ( ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_5 ) NAME VAR_5 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_5 . METHOD_6 ( VAR_2 . METHOD_7 ( ) ) )  VAR_5 . METHOD_6 ( VAR_2 . METHOD_7 ( ) ) (  VAR_5 . METHOD_8 ( VAR_2 . METHOD_9 ( ) ) )  VAR_5 . METHOD_8 ( VAR_2 . METHOD_9 ( ) ) (  return VAR_5 ; )  return VAR_5 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  METHOD_3 ( ) )  METHOD_3 ( ) (  METHOD_4 ( ) )  METHOD_4 ( ) (  VAR_1 . METHOD_5 ( ) )  VAR_1 . METHOD_5 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( BLOCK BLOCK (  VAR_3 . error ( STRING_1 , VAR_1 . METHOD_6 ( ) , VAR_2 ) )  VAR_3 . error ( STRING_1 , VAR_1 . METHOD_6 ( ) , VAR_2 ) (  VAR_3 . METHOD_7 ( STRING_2 , VAR_2 ) )  VAR_3 . METHOD_7 ( STRING_2 , VAR_2 ) ) BLOCK BLOCK ) CATCH CATCH ( FINALLY FINALLY (  METHOD_8 ( ) )  METHOD_8 ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME version ) NAME version ) VAR VAR ( VAR VAR ( TYPE java.util.Map<TYPE_2<TYPE_1,java.lang.String>,java.lang.Object> ) TYPE java.util.Map<TYPE_2<TYPE_1,java.lang.String>,java.lang.Object> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2<TYPE_1,java.lang.String> ) TYPE TYPE_2<TYPE_1,java.lang.String> ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_2 < TYPE_1 , java.lang.String > ( VAR_1 , version ) ) INIT = new TYPE_2 < TYPE_1 , java.lang.String > ( VAR_1 , version ) ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME value ) NAME value ( INIT = VAR_4 < java.lang.Object > getValue ( TYPE_3 . valueOf ( VAR_1 . toString ( ) ) , version ) ) INIT = VAR_4 < java.lang.Object > getValue ( TYPE_3 . valueOf ( VAR_1 . toString ( ) ) , version ) ) VAR VAR (  VAR_2 . put ( VAR_3 , value ) )  VAR_2 . put ( VAR_3 , value ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( METHOD_3 ( ) ) )  METHOD_2 ( METHOD_3 ( ) ) (  METHOD_4 ( 1 ) )  METHOD_4 ( 1 ) (  METHOD_5 ( 0 ) )  METHOD_5 ( 0 ) (  METHOD_6 ( ) )  METHOD_6 ( ) (  METHOD_7 ( ) )  METHOD_7 ( ) (  VAR_1 . METHOD_8 ( ) )  VAR_1 . METHOD_8 ( ) ( VAR VAR ( TYPE TYPE_1.VM ) TYPE TYPE_1.VM ( NAME response ) NAME response ( INIT = resource . get ( ) ) INIT = resource . get ( ) ) VAR VAR (  METHOD_9 ( response , 0 ) )  METHOD_9 ( response , 0 ) (  METHOD_10 ( response ) )  METHOD_10 ( response ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME vm ) NAME vm ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = 1 ) INIT = 1 ) VAR VAR ) INIT INIT ( COND VAR_2 <= VAR_1 ) COND VAR_2 <= VAR_1 ( UPDATE UPDATE (  VAR_2 ++ )  VAR_2 ++ ) UPDATE UPDATE ( BLOCK BLOCK (  TYPE_2 . METHOD_2 ( new TYPE_3 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , vm . getId ( ) ) , VAR_3 , VAR_4 , TYPE_2 . METHOD_4 ( ) , true , false , null ) )  TYPE_2 . METHOD_2 ( new TYPE_3 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , vm . getId ( ) ) , VAR_3 , VAR_4 , TYPE_2 . METHOD_4 ( ) , true , false , null ) ) BLOCK BLOCK ) FOR FOR ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1.Disk ) RETURN TYPE_1.Disk ( NAME getEntity ) NAME getEntity ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.DiskImage ) TYPE org.ovirt.engine.core.common.businessentities.DiskImage ( NAME entity ) NAME entity ( INIT = new org.ovirt.engine.core.common.businessentities.DiskImage ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.DiskImage ( ) ) VAR VAR (  entity . setId ( VAR_2 [ VAR_1 ] ) )  entity . setId ( VAR_2 [ VAR_1 ] ) (  entity . METHOD_1 ( VAR_3 ) )  entity . METHOD_1 ( VAR_3 ) (  entity . METHOD_2 ( VAR_4 ) )  entity . METHOD_2 ( VAR_4 ) (  entity . METHOD_3 ( VAR_5 ) )  entity . METHOD_3 ( VAR_5 ) (  entity . METHOD_4 ( VAR_6 ) )  entity . METHOD_4 ( VAR_6 ) (  entity . METHOD_5 ( false ) )  entity . METHOD_5 ( false ) (  entity . METHOD_6 ( false ) )  entity . METHOD_6 ( false ) (  entity . METHOD_7 ( false ) )  entity . METHOD_7 ( false ) (  entity . METHOD_8 ( VAR_7 ) )  entity . METHOD_8 ( VAR_7 ) (  return TYPE_2 . METHOD_9 ( entity ) ; )  return TYPE_2 . METHOD_9 ( entity ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = dao . get ( METHOD_2 ( ) ) ) INIT = dao . get ( METHOD_2 ( ) ) ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = ! ( VAR_1 . METHOD_3 ( ) ) ) INIT = ! ( VAR_1 . METHOD_3 ( ) ) ) VAR VAR (  TYPE_2 . METHOD_4 ( TYPE_3 . METHOD_5 ( VAR_1 . METHOD_6 ( ) ) ) )  TYPE_2 . METHOD_4 ( TYPE_3 . METHOD_5 ( VAR_1 . METHOD_6 ( ) ) ) (  VAR_1 . METHOD_7 ( VAR_2 ) )  VAR_1 . METHOD_7 ( VAR_2 ) (  dao . METHOD_8 ( VAR_1 ) )  dao . METHOD_8 ( VAR_1 ) (  dao . get ( METHOD_2 ( ) ) )  dao . get ( METHOD_2 ( ) ) (  TYPE_4 . assertEquals ( VAR_1 . METHOD_3 ( ) , VAR_2 ) )  TYPE_4 . assertEquals ( VAR_1 . METHOD_3 ( ) , VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN org.ovirt.engine.core.common.businessentities.VM ) RETURN org.ovirt.engine.core.common.businessentities.VM ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ( INIT = new org.ovirt.engine.core.common.businessentities.VM ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.VM ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  VAR_2 . METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) )  VAR_2 . METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) (  VAR_2 . METHOD_4 ( STRING_1 ) )  VAR_2 . METHOD_4 ( STRING_1 ) (  VAR_2 . METHOD_5 ( 1 ) )  VAR_2 . METHOD_5 ( 1 ) (  vm . METHOD_6 ( VAR_2 ) )  vm . METHOD_6 ( VAR_2 ) (  vm . METHOD_7 ( VAR_1 ) )  vm . METHOD_7 ( VAR_1 ) (  vm . METHOD_8 ( false ) )  vm . METHOD_8 ( false ) (  return vm ; )  return vm ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( VAR_2 ) && ( METHOD_2 ( ) ) ) INIT = ( VAR_2 ) && ( METHOD_2 ( ) ) ) VAR VAR (  METHOD_3 ( ) . METHOD_4 ( ( VAR_1 && ( ! ( VAR_3 ) ) ? org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_5 ( ) : null ) ) )  METHOD_3 ( ) . METHOD_4 ( ( VAR_1 && ( ! ( VAR_3 ) ) ? org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_5 ( ) : null ) ) (  METHOD_3 ( ) . setIsChangable ( ( VAR_1 && ( VAR_3 ) ) ) )  METHOD_3 ( ) . setIsChangable ( ( VAR_1 && ( VAR_3 ) ) ) (  METHOD_6 ( ) . setIsChangable ( VAR_1 ) )  METHOD_6 ( ) . setIsChangable ( VAR_1 ) (  METHOD_7 ( ) . setIsChangable ( VAR_1 ) )  METHOD_7 ( ) . setIsChangable ( VAR_1 ) (  METHOD_8 ( ) . setIsChangable ( VAR_2 ) )  METHOD_8 ( ) . setIsChangable ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public synchronized ) MODIFIER public synchronized ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.StorageDomain ) TYPE TYPE_1.StorageDomain ( NAME storageDomain ) NAME storageDomain ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( STRING_1 , storageDomain . getId ( ) ) )  VAR_1 . METHOD_2 ( STRING_1 , storageDomain . getId ( ) ) ( IF IF ( COND ! ( VAR_2 . METHOD_3 ( storageDomain . getId ( ) ) ) ) COND ! ( VAR_2 . METHOD_3 ( storageDomain . getId ( ) ) ) ( THEN THEN (  VAR_2 . put ( storageDomain . getId ( ) , storageDomain ) )  VAR_2 . put ( storageDomain . getId ( ) , storageDomain ) ) THEN THEN ) IF IF (  METHOD_4 ( storageDomain ) )  METHOD_4 ( storageDomain ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( 2 ) )  METHOD_2 ( 2 ) (  METHOD_3 ( METHOD_4 ( VAR_1 , VAR_2 class , new java.lang.String [ ] { STRING_1 , STRING_2 , STRING_3 } , new java.lang.Object [ ] { VAR_3 , VAR_4 , java.lang.Boolean . FALSE } , true , true ) ) )  METHOD_3 ( METHOD_4 ( VAR_1 , VAR_2 class , new java.lang.String [ ] { STRING_1 , STRING_2 , STRING_3 } , new java.lang.Object [ ] { VAR_3 , VAR_4 , java.lang.Boolean . FALSE } , true , true ) ) ( VAR VAR ( TYPE TYPE_1.Disk ) TYPE TYPE_1.Disk ( NAME disk ) NAME disk ( INIT = resource . METHOD_5 ( METHOD_6 ( ) ) ) INIT = resource . METHOD_5 ( METHOD_6 ( ) ) ) VAR VAR (  METHOD_7 ( disk ) )  METHOD_7 ( disk ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) (  org.mockito.Mockito . METHOD_2 ( ) . when ( cmd ) . METHOD_3 ( ) )  org.mockito.Mockito . METHOD_2 ( ) . when ( cmd ) . METHOD_3 ( ) (  org.mockito.Mockito.doReturn ( true ) . when ( cmd ) . METHOD_4 ( ) )  org.mockito.Mockito.doReturn ( true ) . when ( cmd ) . METHOD_4 ( ) (  org.mockito.Mockito.doReturn ( true ) . when ( cmd ) . METHOD_5 ( TYPE_1 . any ( ) , TYPE_1 . METHOD_6 ( ) ) )  org.mockito.Mockito.doReturn ( true ) . when ( cmd ) . METHOD_5 ( TYPE_1 . any ( ) , TYPE_1 . METHOD_6 ( ) ) (  METHOD_7 ( ) )  METHOD_7 ( ) (  METHOD_8 ( ) )  METHOD_8 ( ) (  METHOD_9 ( ) )  METHOD_9 ( ) (  cmd . METHOD_10 ( ) )  cmd . METHOD_10 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( METHOD_3 ( ) ) )  METHOD_2 ( METHOD_3 ( ) ) (  METHOD_4 ( ) )  METHOD_4 ( ) (  METHOD_5 ( 0 ) )  METHOD_5 ( 0 ) (  METHOD_6 ( ) )  METHOD_6 ( ) (  METHOD_7 ( VAR_1 , VAR_2 class , new java.lang.String [ ] { STRING_1 , STRING_2 } , new java.lang.Object [ ] { VAR_3 [ 0 ] , java.lang.Boolean . FALSE } , true , true ) )  METHOD_7 ( VAR_1 , VAR_2 class , new java.lang.String [ ] { STRING_1 , STRING_2 } , new java.lang.Object [ ] { VAR_3 [ 0 ] , java.lang.Boolean . FALSE } , true , true ) (  METHOD_8 ( VAR_4 . METHOD_9 ( VAR_3 [ 0 ] . toString ( ) ) ) )  METHOD_8 ( VAR_4 . METHOD_9 ( VAR_3 [ 0 ] . toString ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND source != null ) COND source != null ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME item ) NAME item ( IN ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) IN ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ( BLOCK BLOCK (  return item ; )  return item ; ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { for ( TYPE_1 item : ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) { return item ; } } return null ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { for ( TYPE_1 item : ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) { return item ; } } return null ; } } ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 ( ( STRING_1 + VAR_1 ) , VAR_3 . VDS ) ) INIT = new TYPE_2 ( ( STRING_1 + VAR_1 ) , VAR_3 . VDS ) ) VAR VAR (  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_4 , VAR_2 , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_4 , VAR_2 , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ( INIT = ( ( TYPE_1 ) ( target ) ) ) INIT = ( ( TYPE_1 ) ( target ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDSGroup> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDSGroup> ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( returnValue ) ) ) INIT = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( returnValue ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDSGroup> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDSGroup> ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_1 ( VAR_1 ) ) INIT = TYPE_2 . METHOD_1 ( VAR_1 ) ) VAR VAR (  model . METHOD_2 ( model , VAR_3 , VAR_2 , null ) )  model . METHOD_2 ( model , VAR_3 , VAR_2 , null ) (  METHOD_3 ( ) )  METHOD_3 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME validate ) NAME validate ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( IF IF ( COND METHOD_1 ( ) . getEntity ( ) ) COND METHOD_1 ( ) . getEntity ( ) ( THEN THEN (  METHOD_2 ( ) . METHOD_3 ( new TYPE_1 [ ] { new TYPE_2 ( ) } ) )  METHOD_2 ( ) . METHOD_3 ( new TYPE_1 [ ] { new TYPE_2 ( ) } ) (  VAR_2 = METHOD_2 ( ) . METHOD_4 ( ) )  VAR_2 = METHOD_2 ( ) . METHOD_4 ( ) ) THEN THEN ( ELSE ELSE (  VAR_2 = false )  VAR_2 = false ) ELSE ELSE ) IF IF ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( ! VAR_1 ) || ( VAR_4 . validate ( ) ) ) INIT = ( ! VAR_1 ) || ( VAR_4 . validate ( ) ) ) VAR VAR (  return VAR_2 && VAR_3 ; )  return VAR_2 && VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.network ) TYPE org.ovirt.engine.core.common.businessentities.network ( NAME network ) NAME network ( INIT = ( ( org.ovirt.engine.core.common.businessentities . network ) ( METHOD_2 ( ) . getSelectedItem ( ) ) ) ) INIT = ( ( org.ovirt.engine.core.common.businessentities . network ) ( METHOD_2 ( ) . getSelectedItem ( ) ) ) ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( METHOD_3 ( ) ) && ( network != null ) ) && ( ! ( network . getId ( ) . equals ( VAR_2 ) ) ) ) INIT = ( ( METHOD_3 ( ) ) && ( network != null ) ) && ( ! ( network . getId ( ) . equals ( VAR_2 ) ) ) ) VAR VAR (  METHOD_4 ( ) . setIsChangable ( VAR_1 ) )  METHOD_4 ( ) . setIsChangable ( VAR_1 ) (  METHOD_5 ( ) . setIsChangable ( VAR_1 ) )  METHOD_5 ( ) . setIsChangable ( VAR_1 ) (  METHOD_6 ( ) . setIsChangable ( VAR_1 ) )  METHOD_6 ( ) . setIsChangable ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  return TYPE_2 . METHOD_2 ( new TYPE_1 ( ( ( TYPE_3 . getStoragePoolId ( ) ) == null ? null : TYPE_3 . getStoragePoolId ( ) . getValue ( ) ) , VAR_1 . StoragePool , TYPE_3 . METHOD_3 ( ) . METHOD_4 ( ) ) ) ; )  return TYPE_2 . METHOD_2 ( new TYPE_1 ( ( ( TYPE_3 . getStoragePoolId ( ) ) == null ? null : TYPE_3 . getStoragePoolId ( ) . getValue ( ) ) , VAR_1 . StoragePool , TYPE_3 . METHOD_3 ( ) . METHOD_4 ( ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( java.util.List < TYPE_2 > ) ( VAR_1 ) ) ) INIT = ( ( java.util.List < TYPE_2 > ) ( VAR_1 ) ) ) VAR VAR (  TYPE_3 . METHOD_2 ( VAR_2 ) )  TYPE_3 . METHOD_2 ( VAR_2 ) (  METHOD_3 ( VAR_2 . get ( 0 ) , VAR_2 . get ( ( ( VAR_2 . size ( ) ) - 1 ) ) ) )  METHOD_3 ( VAR_2 . get ( 0 ) , VAR_2 . get ( ( ( VAR_2 . size ( ) ) - 1 ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME id ) NAME id ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return ( ( TYPE_1 ) ( source ) ) ; )  return ( ( TYPE_1 ) ( source ) ) ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter < TYPE_1 > ( ) { public TYPE_1 Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return ( ( TYPE_1 ) ( source ) ) ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter < TYPE_1 > ( ) { public TYPE_1 Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return ( ( TYPE_1 ) ( source ) ) ; } } (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR ( VAR VAR ( TYPE java.util.ArrayList<java.lang.String> ) TYPE java.util.ArrayList<java.lang.String> ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_2 . METHOD_2 ( VAR_1 , VAR_2 ) ) INIT = TYPE_2 . METHOD_2 ( VAR_1 , VAR_2 ) ) VAR VAR (  METHOD_3 ( STRING_1 , ( ( VAR_3 . size ( ) ) == 0 ) ) )  METHOD_3 ( STRING_1 , ( ( VAR_3 . size ( ) ) == 0 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<TYPE_1> ) TYPE java.util.ArrayList<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_2.DiskImage ) TYPE TYPE_2.DiskImage ( NAME disk ) NAME disk ( IN METHOD_2 ( ) ) IN METHOD_2 ( ) ( BLOCK BLOCK (  VAR_1 . add ( TYPE_3 . METHOD_3 ( disk ) ) )  VAR_1 . add ( TYPE_3 . METHOD_3 ( disk ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  METHOD_4 ( VAR_1 ) )  METHOD_4 ( VAR_1 ) (  METHOD_5 ( ) )  METHOD_5 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( new TYPE_4 ( this . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( STRING_1 ) . METHOD_6 ( ) . METHOD_7 ( ) ) ) )  org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( new TYPE_4 ( this . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( STRING_1 ) . METHOD_6 ( ) . METHOD_7 ( ) ) ) (  org.mockito.Mockito.when ( VAR_1 . METHOD_8 ( STRING_2 ) ) . thenReturn ( null ) )  org.mockito.Mockito.when ( VAR_1 . METHOD_8 ( STRING_2 ) ) . thenReturn ( null ) (  VAR_2 . METHOD_9 ( VAR_3 , VAR_4 ) )  VAR_2 . METHOD_9 ( VAR_3 , VAR_4 ) (  org.mockito.Mockito . METHOD_10 ( VAR_4 ) . METHOD_11 ( VAR_5 ) )  org.mockito.Mockito . METHOD_10 ( VAR_4 ) . METHOD_11 ( VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( ( TYPE_2 . getParameters ( ) . METHOD_2 ( ) ) != null ) && ( ( TYPE_2 . getParameters ( ) . METHOD_3 ( ) ) instanceof TYPE_3 ) ) COND ( ( TYPE_2 . getParameters ( ) . METHOD_2 ( ) ) != null ) && ( ( TYPE_2 . getParameters ( ) . METHOD_3 ( ) ) instanceof TYPE_3 ) ( THEN THEN (  return TYPE_4 . METHOD_4 ( new TYPE_1 ( VAR_1 . Disk , ( ( TYPE_3 ) ( TYPE_2 . getParameters ( ) . METHOD_3 ( ) ) ) . METHOD_5 ( ) , TYPE_2 . getParameters ( ) . METHOD_2 ( ) ) ) ; )  return TYPE_4 . METHOD_4 ( new TYPE_1 ( VAR_1 . Disk , ( ( TYPE_3 ) ( TYPE_2 . getParameters ( ) . METHOD_3 ( ) ) ) . METHOD_5 ( ) , TYPE_2 . getParameters ( ) . METHOD_2 ( ) ) ) ; ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VmTemplate ) TYPE org.ovirt.engine.core.common.businessentities.VmTemplate ( NAME VAR_1 ) NAME VAR_1 ( INIT = new org.ovirt.engine.core.common.businessentities.VmTemplate ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.VmTemplate ( ) ) VAR VAR (  VAR_1 . METHOD_2 ( STRING_1 ) )  VAR_1 . METHOD_2 ( STRING_1 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , VAR_1 ) ) INIT = new TYPE_1 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , VAR_1 ) ) VAR VAR (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME host ) NAME host ( INIT = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( METHOD_2 ( ) . getSelectedItem ( ) ) ) ) INIT = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( METHOD_2 ( ) . getSelectedItem ( ) ) ) ) VAR VAR ( IF IF ( COND host == null ) COND host == null ( THEN THEN (  host = new org.ovirt.engine.core.common.businessentities.VDS ( ) )  host = new org.ovirt.engine.core.common.businessentities.VDS ( ) ) THEN THEN ) IF IF (  METHOD_3 ( host , null , false , null , true ) )  METHOD_3 ( host , null , false , null , true ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  throw new TYPE_2 ( ) ; )  throw new TYPE_2 ( ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_3 ( VAR_3 ) . METHOD_2 ( ) . get ( VAR_1 ) ) INIT = new TYPE_3 ( VAR_3 ) . METHOD_2 ( ) . get ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN (  return VAR_2 ; )  return VAR_2 ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_3 ( VAR_1 ) ) INIT = METHOD_3 ( VAR_1 ) ) VAR VAR ( IF IF ( COND ( VAR_4 != null ) && ( ! ( METHOD_4 ( VAR_4 . getId ( ) ) ) ) ) COND ( VAR_4 != null ) && ( ! ( METHOD_4 ( VAR_4 . getId ( ) ) ) ) ( THEN THEN (  return VAR_4 ; )  return VAR_4 ; ) THEN THEN ) IF IF (  throw new TYPE_2 ( ( STRING_1 + VAR_1 ) ) ; )  throw new TYPE_2 ( ( STRING_1 + VAR_1 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.Map<java.lang.Boolean,java.util.List<org.ovirt.engine.core.common.businessentities.VM>> ) TYPE java.util.Map<java.lang.Boolean,java.util.List<org.ovirt.engine.core.common.businessentities.VM>> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 . get ( java.lang.Boolean . TRUE ) ) != null ) COND ( VAR_1 . get ( java.lang.Boolean . TRUE ) ) != null ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ( IN VAR_1 . get ( java.lang.Boolean . TRUE ) ) IN VAR_1 . get ( java.lang.Boolean . TRUE ) ( BLOCK BLOCK ( IF IF ( COND ( vm . getStatus ( ) ) != ( VAR_2 ) ) COND ( vm . getStatus ( ) ) != ( VAR_2 ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ( NAME iface ) NAME iface ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  METHOD_3 ( iface , false , iface . METHOD_4 ( ) , ( ! ( iface . METHOD_5 ( ) ) ) , iface . METHOD_6 ( ) , iface . METHOD_7 ( ) , METHOD_8 ( ) ) )  METHOD_3 ( iface , false , iface . METHOD_4 ( ) , ( ! ( iface . METHOD_5 ( ) ) ) , iface . METHOD_6 ( ) , iface . METHOD_7 ( ) , METHOD_8 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME sender ) NAME sender ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME args ) NAME args ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME model ) NAME model ( INIT = ( ( TYPE_3 ) ( sender ) ) ) INIT = ( ( TYPE_3 ) ( sender ) ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_4 ) ( args ) ) . VAR_3 ) INIT = ( ( TYPE_4 ) ( args ) ) . VAR_3 ) VAR VAR ( IF IF ( COND STRING_1 . equals ( VAR_2 ) ) COND STRING_1 . equals ( VAR_2 ) ( THEN THEN (  METHOD_2 ( ) . METHOD_3 ( model . METHOD_4 ( ) ) )  METHOD_2 ( ) . METHOD_3 ( model . METHOD_4 ( ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) (  VAR_1 = METHOD_2 ( null , null ) )  VAR_1 = METHOD_2 ( null , null ) ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_3 ( VAR_1 , VAR_3 , VAR_4 ) ) INIT = METHOD_3 ( VAR_1 , VAR_3 , VAR_4 ) ) VAR VAR (  METHOD_4 ( VAR_2 ) )  METHOD_4 ( VAR_2 ) (  org.mockito.Mockito.when ( VAR_5 . METHOD_5 ( VAR_2 ) ) . thenReturn ( VAR_1 ) )  org.mockito.Mockito.when ( VAR_5 . METHOD_5 ( VAR_2 ) ) . thenReturn ( VAR_1 ) (  org.mockito.Mockito.when ( VAR_5 . METHOD_5 ( VAR_1 ) ) . thenReturn ( VAR_1 ) )  org.mockito.Mockito.when ( VAR_5 . METHOD_5 ( VAR_1 ) ) . thenReturn ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.doReturn ( METHOD_2 ( VAR_1 ) ) . when ( VAR_2 ) . METHOD_3 ( VAR_3 [ 1 ] ) )  org.mockito.Mockito.doReturn ( METHOD_2 ( VAR_1 ) ) . when ( VAR_2 ) . METHOD_3 ( VAR_3 [ 1 ] ) (  METHOD_4 ( ) )  METHOD_4 ( ) (  VAR_4 . METHOD_5 ( ) )  VAR_4 . METHOD_5 ( ) (  org.mockito.Mockito . METHOD_6 ( VAR_5 , org.mockito.Mockito . METHOD_7 ( 2 ) ) . METHOD_8 ( TYPE_1 . any ( VAR_6 class ) , TYPE_1 . any ( VAR_7 class ) , TYPE_1 . METHOD_9 ( ) ) )  org.mockito.Mockito . METHOD_6 ( VAR_5 , org.mockito.Mockito . METHOD_7 ( 2 ) ) . METHOD_8 ( TYPE_1 . any ( VAR_6 class ) , TYPE_1 . any ( VAR_7 class ) , TYPE_1 . METHOD_9 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND VAR_3 . isEmpty ( ) ) COND VAR_3 . isEmpty ( ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  METHOD_3 ( ) . METHOD_1 ( VAR_1 . getId ( ) ) )  METHOD_3 ( ) . METHOD_1 ( VAR_1 . getId ( ) ) ) THEN THEN ) IF IF (  return METHOD_4 ( VAR_3 ) ; )  return METHOD_4 ( VAR_3 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( false ) )  VAR_1 . METHOD_2 ( false ) (  VAR_1 . METHOD_3 ( STRING_1 ) )  VAR_1 . METHOD_3 ( STRING_1 ) (  VAR_2 . METHOD_2 ( true ) )  VAR_2 . METHOD_2 ( true ) (  VAR_3 . METHOD_4 ( VAR_4 ) )  VAR_3 . METHOD_4 ( VAR_4 ) (  VAR_3 . METHOD_5 ( ) )  VAR_3 . METHOD_5 ( ) (  VAR_2 . METHOD_6 ( VAR_5 . METHOD_7 ( ) ) )  VAR_2 . METHOD_6 ( VAR_5 . METHOD_7 ( ) ) (  VAR_2 . METHOD_3 ( ( ( VAR_6 ) + STRING_2 ) ) )  VAR_2 . METHOD_3 ( ( ( VAR_6 ) + STRING_2 ) ) (  VAR_7 . METHOD_8 ( VAR_8 ) )  VAR_7 . METHOD_8 ( VAR_8 ) (  VAR_7 . METHOD_6 ( VAR_5 . METHOD_9 ( ) ) )  VAR_7 . METHOD_6 ( VAR_5 . METHOD_9 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 == null ) || ( VAR_1 . isEmpty ( ) ) ) COND ( VAR_1 == null ) || ( VAR_1 . isEmpty ( ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_2<org.ovirt.engine.core.compat.Guid,TYPE_2<java.lang.Boolean,java.lang.Integer>> ) TYPE TYPE_2<org.ovirt.engine.core.compat.Guid,TYPE_2<java.lang.Boolean,java.lang.Integer>> ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_2 . METHOD_2 ( ) ) IN VAR_2 . METHOD_2 ( ) ( BLOCK BLOCK ( IF IF ( COND ( ( VAR_3 . METHOD_3 ( ) ) != null ) && ( VAR_3 . METHOD_3 ( ) . METHOD_4 ( ) ) ) COND ( ( VAR_3 . METHOD_3 ( ) ) != null ) && ( VAR_3 . METHOD_3 ( ) . METHOD_4 ( ) ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VM> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VM> ( NAME vms ) NAME vms ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.core.common.businessentities.VM>> ) TYPE java.util.List<org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.core.common.businessentities.VM>> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ( IN vms ) IN vms ( BLOCK BLOCK (  VAR_1 . add ( new org.ovirt.engine.ui.uicommonweb.models.EntityModel < org.ovirt.engine.core.common.businessentities.VM > ( vm ) ) )  VAR_1 . add ( new org.ovirt.engine.ui.uicommonweb.models.EntityModel < org.ovirt.engine.core.common.businessentities.VM > ( vm ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  VAR_2 . setItems ( VAR_1 ) )  VAR_2 . setItems ( VAR_1 ) (  METHOD_3 ( ) )  METHOD_3 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND org.ovirt.engine.ui.frontend.Frontend . METHOD_2 ( VAR_1 ) ) COND org.ovirt.engine.ui.frontend.Frontend . METHOD_2 ( VAR_1 ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  VAR_2 . log ( VAR_3 , ( STRING_1 + VAR_1 ) , VAR_1 ) )  VAR_2 . log ( VAR_3 , ( STRING_1 + VAR_1 ) , VAR_1 ) (  org.ovirt.engine.ui.frontend.Frontend . METHOD_3 ( ) . METHOD_4 ( null ) )  org.ovirt.engine.ui.frontend.Frontend . METHOD_3 ( ) . METHOD_4 ( null ) (  org.ovirt.engine.ui.frontend.Frontend . METHOD_5 ( VAR_1 ) )  org.ovirt.engine.ui.frontend.Frontend . METHOD_5 ( VAR_1 ) (  VAR_4 . METHOD_6 ( VAR_5 . getModel ( ) , null ) )  VAR_4 . METHOD_6 ( VAR_5 . getModel ( ) , null ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  return ( ( ( getEntity ( ) . getStatus ( ) ) == ( VAR_1 ) ) || ( ( getEntity ( ) . getStatus ( ) ) == ( VAR_2 ) ) ) && ( TYPE_1 . METHOD_2 ( getEntity ( ) . METHOD_3 ( ) ) ) ; )  return ( ( ( getEntity ( ) . getStatus ( ) ) == ( VAR_1 ) ) || ( ( getEntity ( ) . getStatus ( ) ) == ( VAR_2 ) ) ) && ( TYPE_1 . METHOD_2 ( getEntity ( ) . METHOD_3 ( ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( ) . METHOD_3 ( VAR_1 , 0 , ( - VAR_2 ) , ( - VAR_3 ) , 0 , 0 ) )  METHOD_2 ( ) . METHOD_3 ( VAR_1 , 0 , ( - VAR_2 ) , ( - VAR_3 ) , 0 , 0 ) (  METHOD_4 ( VAR_1 ) . METHOD_5 ( java.lang.Boolean . TRUE ) )  METHOD_4 ( VAR_1 ) . METHOD_5 ( java.lang.Boolean . TRUE ) ( IF IF ( COND VAR_5 . METHOD_6 ( ) ) COND VAR_5 . METHOD_6 ( ) ( THEN THEN (  VAR_5 . METHOD_7 ( STRING_1 , VAR_1 , VAR_2 , VAR_3 , VAR_4 ) )  VAR_5 . METHOD_7 ( STRING_1 , VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<TYPE_2<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface,org.ovirt.engine.core.common.businessentities.VDS>> ) TYPE TYPE_1<TYPE_2<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface,org.ovirt.engine.core.common.businessentities.VDS>> ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( METHOD_2 ( ) ) != null ) ? METHOD_2 ( ) : new java.util.ArrayList ( ) ) INIT = ( ( METHOD_2 ( ) ) != null ) ? METHOD_2 ( ) : new java.util.ArrayList ( ) ) VAR VAR (  METHOD_3 ( ) . METHOD_4 ( ( ( ( VAR_1 . size ( ) ) == 1 ) && ( ( VAR_1 . METHOD_5 ( ) . METHOD_6 ( ) . METHOD_7 ( ) . METHOD_8 ( ) . METHOD_9 ( VAR_2 ) ) >= 0 ) ) ) )  METHOD_3 ( ) . METHOD_4 ( ( ( ( VAR_1 . size ( ) ) == 1 ) && ( ( VAR_1 . METHOD_5 ( ) . METHOD_6 ( ) . METHOD_7 ( ) . METHOD_8 ( ) . METHOD_9 ( VAR_2 ) ) >= 0 ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( ) )  TYPE_1 . METHOD_2 ( ) ( IF IF ( COND ( METHOD_3 ( ) ) == ( VAR_1 ) ) COND ( METHOD_3 ( ) ) == ( VAR_1 ) ( THEN THEN ( IF IF ( COND TYPE_1 . getParameters ( ) . METHOD_4 ( ) ) COND TYPE_1 . getParameters ( ) . METHOD_4 ( ) ( THEN THEN (  TYPE_1 . METHOD_5 ( ) . METHOD_6 ( new TYPE_2 ( TYPE_1 . getParameters ( ) . METHOD_7 ( ) , TYPE_1 . getParameters ( ) . METHOD_8 ( ) ) ) )  TYPE_1 . METHOD_5 ( ) . METHOD_6 ( new TYPE_2 ( TYPE_1 . getParameters ( ) . METHOD_7 ( ) , TYPE_1 . getParameters ( ) . METHOD_8 ( ) ) ) ) THEN THEN ) IF IF (  METHOD_9 ( ) )  METHOD_9 ( ) ) THEN THEN ) IF IF (  TYPE_1 . METHOD_10 ( true ) )  TYPE_1 . METHOD_10 ( true ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME event ) NAME event ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_3 < TYPE_2 > ) ( event . METHOD_2 ( ) ) ) . METHOD_3 ( ) ) INIT = ( ( TYPE_3 < TYPE_2 > ) ( event . METHOD_2 ( ) ) ) . METHOD_3 ( ) ) VAR VAR (  VAR_2 . METHOD_4 ( ( ( java.lang.Boolean ) ( VAR_1 . METHOD_5 ( ) . getEntity ( ) ) ) , constants . METHOD_6 ( ) ) )  VAR_2 . METHOD_4 ( ( ( java.lang.Boolean ) ( VAR_1 . METHOD_5 ( ) . getEntity ( ) ) ) , constants . METHOD_6 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( TYPE_2 . METHOD_2 ( VAR_1 , STRING_1 ) ) || ( TYPE_2 . METHOD_2 ( VAR_1 , STRING_2 ) ) ) || ( TYPE_2 . METHOD_2 ( VAR_1 , STRING_3 ) ) ) COND ( ( TYPE_2 . METHOD_2 ( VAR_1 , STRING_1 ) ) || ( TYPE_2 . METHOD_2 ( VAR_1 , STRING_2 ) ) ) || ( TYPE_2 . METHOD_2 ( VAR_1 , STRING_3 ) ) ( THEN THEN (  return VAR_2 ; )  return VAR_2 ; ) THEN THEN ( ELSE ELSE (  return VAR_3 ; )  return VAR_3 ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( ) . get ( TYPE_2 . getVm ( ) . getId ( ) ) ) INIT = TYPE_2 . METHOD_2 ( ) . get ( TYPE_2 . getVm ( ) . getId ( ) ) ) VAR VAR (  return VAR_1 == null ? true : METHOD_3 ( VAR_2 , java.lang.String . METHOD_4 ( STRING_1 , VAR_1 . getName ( ) ) ) ; )  return VAR_1 == null ? true : METHOD_3 ( VAR_2 , java.lang.String . METHOD_4 ( STRING_1 , VAR_1 . getName ( ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME validator ) NAME validator ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  return ( ( ( ( validate ( validator . METHOD_3 ( ) ) ) && ( validate ( validator . METHOD_4 ( ) ) ) ) && ( validate ( validator . METHOD_5 ( ) ) ) ) && ( validate ( validator . METHOD_6 ( ) ) ) ) && ( validate ( validator . METHOD_7 ( ) ) ) ; )  return ( ( ( ( validate ( validator . METHOD_3 ( ) ) ) && ( validate ( validator . METHOD_4 ( ) ) ) ) && ( validate ( validator . METHOD_5 ( ) ) ) ) && ( validate ( validator . METHOD_6 ( ) ) ) ) && ( validate ( validator . METHOD_7 ( ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.Map<TYPE_1,TYPE_2> ) TYPE java.util.Map<TYPE_1,TYPE_2> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN ( IF IF ( COND VAR_1 . METHOD_2 ( VAR_2 ) ) COND VAR_1 . METHOD_2 ( VAR_2 ) ( THEN THEN (  return VAR_3 ; )  return VAR_3 ; ) THEN THEN ) IF IF ( IF IF ( COND VAR_1 . METHOD_2 ( VAR_4 ) ) COND VAR_1 . METHOD_2 ( VAR_4 ) ( THEN THEN (  return VAR_5 ; )  return VAR_5 ; ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( VAR_2 ) ) INIT = new TYPE_2 ( VAR_2 ) ) VAR VAR (  METHOD_2 ( VAR_1 ) )  METHOD_2 ( VAR_1 ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_4 . METHOD_3 ( null ) ) INIT = TYPE_4 . METHOD_3 ( null ) ) VAR VAR (  VAR_4 . METHOD_4 ( VAR_3 ) )  VAR_4 . METHOD_4 ( VAR_3 ) (  VAR_5 . METHOD_5 ( ) )  VAR_5 . METHOD_5 ( ) ( TRY TRY ( BLOCK BLOCK (  METHOD_6 ( ) )  METHOD_6 ( ) (  TYPE_4 . METHOD_7 ( STRING_1 ) )  TYPE_4 . METHOD_7 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_6 ) NAME VAR_6 ( BLOCK BLOCK (  METHOD_8 ( VAR_6 , VAR_7 , VAR_1 ) )  METHOD_8 ( VAR_6 , VAR_7 , VAR_1 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_1 . METHOD_2 ( null ) )  VAR_1 . METHOD_2 ( null ) (  VAR_1 . METHOD_3 ( null ) )  VAR_1 . METHOD_3 ( null ) ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ) TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME VAR_2 ) NAME VAR_2 ( INIT = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) ) VAR VAR (  VAR_2 . METHOD_2 ( VAR_3 ) )  VAR_2 . METHOD_2 ( VAR_3 ) (  VAR_1 . METHOD_4 ( VAR_2 ) )  VAR_1 . METHOD_4 ( VAR_2 ) ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_1 . getStoragePoolId ( ) ) INIT = VAR_1 . getStoragePoolId ( ) ) VAR VAR (  TYPE_2 . assertEquals ( VAR_3 , VAR_4 ) )  TYPE_2 . assertEquals ( VAR_3 , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME validate ) NAME validate ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME returnValue ) NAME returnValue ( INIT = TYPE_2 . METHOD_1 ( VAR_1 , METHOD_2 ( ) , TYPE_3 . METHOD_3 ( ) . METHOD_4 ( ) , true ) ) INIT = TYPE_2 . METHOD_1 ( VAR_1 , METHOD_2 ( ) , TYPE_3 . METHOD_3 ( ) . METHOD_4 ( ) , true ) ) VAR VAR (  TYPE_3 . getReturnValue ( ) . METHOD_5 ( returnValue . METHOD_6 ( ) ) )  TYPE_3 . getReturnValue ( ) . METHOD_5 ( returnValue . METHOD_6 ( ) ) (  return returnValue . METHOD_7 ( ) ; )  return returnValue . METHOD_7 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.network ) TYPE org.ovirt.engine.core.common.businessentities.network ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 . METHOD_2 ( ) ) != null ) COND ( VAR_1 . METHOD_2 ( ) ) != null ( THEN THEN (  return ( VAR_1 . METHOD_2 ( ) . equals ( getParameters ( ) . METHOD_3 ( ) . METHOD_2 ( ) ) ) && ( VAR_1 . METHOD_4 ( ) . equals ( getParameters ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) ) ; )  return ( VAR_1 . METHOD_2 ( ) . equals ( getParameters ( ) . METHOD_3 ( ) . METHOD_2 ( ) ) ) && ( VAR_1 . METHOD_4 ( ) . equals ( getParameters ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) ) ; ) THEN THEN ) IF IF (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN java.util.HashMap<org.ovirt.engine.core.common.businessentities.VmTemplate,TYPE_1> ) RETURN java.util.HashMap<org.ovirt.engine.core.common.businessentities.VmTemplate,TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.HashMap<org.ovirt.engine.core.common.businessentities.VmTemplate,TYPE_1> ) TYPE java.util.HashMap<org.ovirt.engine.core.common.businessentities.VmTemplate,TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 < org.ovirt.engine.core.common.businessentities.VmTemplate , TYPE_1 > ( ) ) INIT = new TYPE_2 < org.ovirt.engine.core.common.businessentities.VmTemplate , TYPE_1 > ( ) ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < ( VAR_2 . length ) ) COND i < ( VAR_2 . length ) ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK (  VAR_1 . put ( getEntity ( i ) , new TYPE_1 ( ) ) )  VAR_1 . put ( getEntity ( i ) , new TYPE_1 ( ) ) ) BLOCK BLOCK ) FOR FOR (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  return ( TYPE_2 . getParameters ( ) ) != null ? ! ( TYPE_2 . getParameters ( ) . METHOD_1 ( ) . equals ( TYPE_3 ) ) ? TYPE_2 . getParameters ( ) . METHOD_1 ( ) : super . METHOD_1 ( ) : super . METHOD_1 ( ) ; )  return ( TYPE_2 . getParameters ( ) ) != null ? ! ( TYPE_2 . getParameters ( ) . METHOD_1 ( ) . equals ( TYPE_3 ) ) ? TYPE_2 . getParameters ( ) . METHOD_1 ( ) : super . METHOD_1 ( ) : super . METHOD_1 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.ArrayList ) TYPE java.util.ArrayList ( NAME parameters ) NAME parameters ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  super . METHOD_1 ( parameters ) )  super . METHOD_1 ( parameters ) ( IF IF ( COND ! ( ( parameters . get ( INT_1 ) ) instanceof java.lang.Boolean ) ) COND ! ( ( parameters . get ( INT_1 ) ) instanceof java.lang.Boolean ) ( THEN THEN (  throw new TYPE_1 ( ) ; )  throw new TYPE_1 ( ) ; ) THEN THEN ) IF IF (  VAR_1 = ( ( java.lang.Boolean ) ( parameters . get ( INT_1 ) ) ) )  VAR_1 = ( ( java.lang.Boolean ) ( parameters . get ( INT_1 ) ) ) ( IF IF ( COND ! ( ( parameters . get ( INT_2 ) ) instanceof org.ovirt.engine.core.compat.Guid ) ) COND ! ( ( parameters . get ( INT_2 ) ) instanceof org.ovirt.engine.core.compat.Guid ) ( THEN THEN (  throw new TYPE_1 ( ) ; )  throw new TYPE_1 ( ) ; ) THEN THEN ) IF IF (  VAR_2 = ( ( org.ovirt.engine.core.compat.Guid ) ( parameters . get ( INT_2 ) ) ) )  VAR_2 = ( ( org.ovirt.engine.core.compat.Guid ) ( parameters . get ( INT_2 ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( VAR_1 , false ) )  METHOD_2 ( VAR_1 , false ) (  METHOD_3 ( false ) )  METHOD_3 ( false ) (  METHOD_4 ( VAR_1 ) )  METHOD_4 ( VAR_1 ) (  TYPE_2 . METHOD_5 ( ( ( VAR_1 . METHOD_6 ( ) ) == null ) ) )  TYPE_2 . METHOD_5 ( ( ( VAR_1 . METHOD_6 ( ) ) == null ) ) (  TYPE_2 . METHOD_5 ( ( ( VAR_1 . METHOD_7 ( ) ) != null ) ) )  TYPE_2 . METHOD_5 ( ( ( VAR_1 . METHOD_7 ( ) ) != null ) ) (  VAR_2 . METHOD_8 ( ) )  VAR_2 . METHOD_8 ( ) (  TYPE_3 . METHOD_9 ( VAR_2 . METHOD_10 ( ) ) )  TYPE_3 . METHOD_9 ( VAR_2 . METHOD_10 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public synchronized ) MODIFIER public synchronized ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_2 . METHOD_2 ( STRING_1 , VAR_1 . METHOD_3 ( ) ) )  VAR_2 . METHOD_2 ( STRING_1 , VAR_1 . METHOD_3 ( ) ) (  METHOD_4 ( VAR_1 ) )  METHOD_4 ( VAR_1 ) ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME list ) NAME list ( INIT = TYPE_3 . METHOD_5 ( VAR_3 . METHOD_6 ( ) , new TYPE_4 < TYPE_2 > ( ) { public boolean METHOD_7 ( TYPE_2 a ) { return a . METHOD_8 ( ) . equals ( VAR_1 . getId ( ) ) ; } } ) ) INIT = TYPE_3 . METHOD_5 ( VAR_3 . METHOD_6 ( ) , new TYPE_4 < TYPE_2 > ( ) { public boolean METHOD_7 ( TYPE_2 a ) { return a . METHOD_8 ( ) . equals ( VAR_1 . getId ( ) ) ; } } ) ) VAR VAR ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_7 ) NAME METHOD_7 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME a ) NAME a ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return a . METHOD_8 ( ) . equals ( VAR_1 . getId ( ) ) ; )  return a . METHOD_8 ( ) . equals ( VAR_1 . getId ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( IN list ) IN list ( BLOCK BLOCK (  VAR_4 . METHOD_9 ( ) )  VAR_4 . METHOD_9 ( ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.DiskImage ) TYPE org.ovirt.engine.core.common.businessentities.DiskImage ( NAME image ) NAME image ( IN getParameters ( ) . METHOD_2 ( ) ) IN getParameters ( ) . METHOD_2 ( ) ( BLOCK BLOCK ( IF IF ( COND getParameters ( ) . METHOD_3 ( ) ) COND getParameters ( ) . METHOD_3 ( ) ( THEN THEN (  METHOD_4 ( image ) )  METHOD_4 ( image ) (  METHOD_5 ( image , METHOD_6 ( ) . METHOD_7 ( ) ) )  METHOD_5 ( image , METHOD_6 ( ) . METHOD_7 ( ) ) ) THEN THEN ( ELSE ELSE (  VAR_1 . put ( image . getId ( ) , image ) )  VAR_1 . put ( image . getId ( ) , image ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source ; )  return source ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME params ) NAME params ( INIT = new TYPE_2 ( VAR_1 , VAR_2 ) ) INIT = new TYPE_2 ( VAR_1 , VAR_2 ) ) VAR VAR (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_3 , params , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_3 , params , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_1 ) ( model ) ) ) INIT = ( ( TYPE_1 ) ( model ) ) ) VAR VAR (  VAR_2 . METHOD_2 ( ( ( java.lang.String ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) ) ) )  VAR_2 . METHOD_2 ( ( ( java.lang.String ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = org.mockito.Mockito . METHOD_2 ( VAR_2 class ) ) INIT = org.mockito.Mockito . METHOD_2 ( VAR_2 class ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  VAR_3 . setId ( VAR_4 ) )  VAR_3 . setId ( VAR_4 ) (  org.mockito.Mockito.when ( VAR_1 . get ( VAR_4 ) ) . thenReturn ( VAR_3 ) )  org.mockito.Mockito.when ( VAR_1 . get ( VAR_4 ) ) . thenReturn ( VAR_3 ) (  org.mockito.Mockito.when ( VAR_1 . get ( VAR_5 ) ) . thenReturn ( null ) )  org.mockito.Mockito.when ( VAR_1 . get ( VAR_5 ) ) . thenReturn ( null ) (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN org.ovirt.engine.core.common.businessentities.StorageDomain ) RETURN org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.DiskImage ) TYPE org.ovirt.engine.core.common.businessentities.DiskImage ( NAME diskImage ) NAME diskImage ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ) TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME storage ) NAME storage ( INIT = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) ) VAR VAR (  storage . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) )  storage . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) (  storage . METHOD_3 ( VAR_1 ) )  storage . METHOD_3 ( VAR_1 ) (  diskImage . METHOD_4 ( new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( TYPE_2 . METHOD_5 ( storage . getId ( ) ) ) ) )  diskImage . METHOD_4 ( new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( TYPE_2 . METHOD_5 ( storage . getId ( ) ) ) ) (  return storage ; )  return storage ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1.ValidationResult ) RETURN TYPE_1.ValidationResult ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME value ) NAME value ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.ValidationResult ) TYPE TYPE_1.ValidationResult ( NAME result ) NAME result ( INIT = super . METHOD_1 ( value ) ) INIT = super . METHOD_1 ( value ) ) VAR VAR ( IF IF ( COND ! ( result . METHOD_2 ( ) ) ) COND ! ( result . METHOD_2 ( ) ) ( THEN THEN (  result . METHOD_3 ( ) . add ( METHOD_4 ( ) ) )  result . METHOD_3 ( ) . add ( METHOD_4 ( ) ) ) THEN THEN ) IF IF (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( STRING_1 ) )  VAR_1 . METHOD_2 ( STRING_1 ) (  METHOD_3 ( ) )  METHOD_3 ( ) (  METHOD_4 ( ) )  METHOD_4 ( ) ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  METHOD_5 ( ) )  METHOD_5 ( ) ) THEN THEN ) IF IF (  VAR_1 . METHOD_2 ( STRING_2 ) )  VAR_1 . METHOD_2 ( STRING_2 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME e ) NAME e ( BLOCK BLOCK ( IF IF ( COND ! ( TYPE_2 . METHOD_6 ( ) ) ) COND ! ( TYPE_2 . METHOD_6 ( ) ) ( THEN THEN (  VAR_1 . error ( java.lang.String . METHOD_7 ( STRING_3 , e . METHOD_8 ( ) ) , e ) )  VAR_1 . error ( java.lang.String . METHOD_7 ( STRING_3 , e . METHOD_8 ( ) ) , e ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME vmId ) NAME vmId ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Boolean ) TYPE java.lang.Boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.Boolean ) TYPE java.lang.Boolean ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return TYPE_2 . METHOD_2 ( new TYPE_3 ( VAR_1 , vmId ) , VAR_6 , VAR_7 , VAR_8 , VAR_2 , VAR_3 , VAR_4 , null , VAR_5 ) ; )  return TYPE_2 . METHOD_2 ( new TYPE_3 ( VAR_1 , vmId ) , VAR_6 , VAR_7 , VAR_8 , VAR_2 , VAR_3 , VAR_4 , null , VAR_5 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ) TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME storageDomain ) NAME storageDomain ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( storageDomain . METHOD_2 ( ) ) == null ) COND ( storageDomain . METHOD_2 ( ) ) == null ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ( INIT = storageDomain . getId ( ) ) INIT = storageDomain . getId ( ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ( INIT = storageDomain . METHOD_2 ( ) . getValue ( ) ) INIT = storageDomain . METHOD_2 ( ) . getValue ( ) ) VAR VAR (  return ( TYPE_1 . METHOD_3 ( ) . METHOD_4 ( ) . get ( new TYPE_2 ( VAR_1 , VAR_2 ) ) ) != null ; )  return ( TYPE_1 . METHOD_3 ( ) . METHOD_4 ( ) . get ( new TYPE_2 ( VAR_1 , VAR_2 ) ) ) != null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > ( ) ) INIT = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > ( ) ) VAR VAR (  VAR_1 = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > ) ( source ) ) )  VAR_1 = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > ) ( source ) ) ( IF IF ( COND ( VAR_1 . size ( ) ) > 0 ) COND ( VAR_1 . size ( ) ) > 0 ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME storageDomain ) NAME storageDomain ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  storageDomain . setId ( VAR_1 ) )  storageDomain . setId ( VAR_1 ) (  storageDomain . METHOD_2 ( VAR_2 ) )  storageDomain . METHOD_2 ( VAR_2 ) (  org.mockito.Mockito.when ( VAR_3 . get ( TYPE_2 . any ( VAR_4 . Guid class ) ) ) . thenReturn ( storageDomain ) )  org.mockito.Mockito.when ( VAR_3 . get ( TYPE_2 . any ( VAR_4 . Guid class ) ) ) . thenReturn ( storageDomain ) (  org.mockito.Mockito.when ( VAR_3 . METHOD_3 ( VAR_1 , VAR_2 ) ) . thenReturn ( storageDomain ) )  org.mockito.Mockito.when ( VAR_3 . METHOD_3 ( VAR_1 , VAR_2 ) ) . thenReturn ( storageDomain ) (  return storageDomain ; )  return storageDomain ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_4 ) NAME METHOD_4 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME a ) NAME a ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return a . METHOD_5 ( ) . equals ( VAR_1 ) ; )  return a . METHOD_5 ( ) . equals ( VAR_1 ) ; ) BLOCK BLOCK ) METHOD METHOD (  return TYPE_2 . METHOD_2 ( METHOD_3 ( ) , new TYPE_3 < TYPE_1 > ( ) { public boolean METHOD_4 ( TYPE_1 a ) { return a . METHOD_5 ( ) . equals ( VAR_1 ) ; } } ) ; )  return TYPE_2 . METHOD_2 ( METHOD_3 ( ) , new TYPE_3 < TYPE_1 > ( ) { public boolean METHOD_4 ( TYPE_1 a ) { return a . METHOD_5 ( ) . equals ( VAR_1 ) ; } } ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  dao . METHOD_2 ( new TYPE_1 ( VAR_1 , VAR_2 ) ) )  dao . METHOD_2 ( new TYPE_1 ( VAR_1 , VAR_2 ) ) ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME VAR_3 ) NAME VAR_3 ( INIT = dao . METHOD_3 ( VAR_1 ) ) INIT = dao . METHOD_3 ( VAR_1 ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( IN VAR_3 ) IN VAR_3 ( BLOCK BLOCK (  TYPE_3 . METHOD_4 ( VAR_4 . METHOD_5 ( ) , VAR_2 ) )  TYPE_3 . METHOD_4 ( VAR_4 . METHOD_5 ( ) , VAR_2 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  TYPE_3 . METHOD_6 ( VAR_3 ) )  TYPE_3 . METHOD_6 ( VAR_3 ) (  TYPE_3 . METHOD_7 ( VAR_3 . isEmpty ( ) ) )  TYPE_3 . METHOD_7 ( VAR_3 . isEmpty ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<org.ovirt.engine.core.common.queries.IdQueryParameters> ) TYPE TYPE_1<org.ovirt.engine.core.common.queries.IdQueryParameters> ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ) INIT = METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ) VAR VAR (  org.mockito.Mockito.when ( VAR_2 . get ( TYPE_2 . any ( VAR_3 . Guid class ) ) ) . thenReturn ( null ) )  org.mockito.Mockito.when ( VAR_2 . get ( TYPE_2 . any ( VAR_3 . Guid class ) ) ) . thenReturn ( null ) ( VAR VAR ( TYPE TYPE_3.VdcQueryReturnValue ) TYPE TYPE_3.VdcQueryReturnValue ( NAME returnValue ) NAME returnValue ( INIT = VAR_1 . METHOD_4 ( ) ) INIT = VAR_1 . METHOD_4 ( ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME VAR_4 ) NAME VAR_4 ( INIT = returnValue . getReturnValue ( ) ) INIT = returnValue . getReturnValue ( ) ) VAR VAR (  TYPE_4 . METHOD_5 ( STRING_1 , VAR_4 ) )  TYPE_4 . METHOD_5 ( STRING_1 , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( STRING_1 , null ) ) INIT = METHOD_2 ( STRING_1 , null ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( STRING_2 , null ) ) INIT = METHOD_2 ( STRING_2 , null ) ) VAR VAR (  VAR_2 . METHOD_3 ( STRING_3 ) )  VAR_2 . METHOD_3 ( STRING_3 ) (  cmd = org.mockito.Mockito . METHOD_4 ( new TYPE_2 ( new TYPE_3 ( VAR_3 , STRING_4 , STRING_5 , VAR_4 , null , null , TYPE_4 . METHOD_5 ( VAR_1 , VAR_2 ) ) , null ) ) )  cmd = org.mockito.Mockito . METHOD_4 ( new TYPE_2 ( new TYPE_3 ( VAR_3 , STRING_4 , STRING_5 , VAR_4 , null , null , TYPE_4 . METHOD_5 ( VAR_1 , VAR_2 ) ) , null ) ) (  METHOD_6 ( VAR_5 ) )  METHOD_6 ( VAR_5 ) (  TYPE_5 . METHOD_7 ( cmd . validate ( ) ) )  TYPE_5 . METHOD_7 ( cmd . validate ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.network.Network ) TYPE org.ovirt.engine.core.common.businessentities.network.Network ( NAME network ) NAME network ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_3 ( VAR_2 , null , null ) ) INIT = METHOD_3 ( VAR_2 , null , null ) ) VAR VAR (  VAR_1 . METHOD_4 ( network . getId ( ) ) )  VAR_1 . METHOD_4 ( network . getId ( ) ) (  METHOD_5 ( true , false , false , TYPE_2 . METHOD_6 ( ) , network , VAR_1 ) )  METHOD_5 ( true , false , false , TYPE_2 . METHOD_6 ( ) , network , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( 0 ) )  METHOD_2 ( 0 ) (  METHOD_3 ( METHOD_4 ( VAR_4 , VAR_5 class , new java.lang.String [ ] { } , new java.lang.Object [ ] { } , VAR_1 , VAR_2 ) ) )  METHOD_3 ( METHOD_4 ( VAR_4 , VAR_5 class , new java.lang.String [ ] { } , new java.lang.Object [ ] { } , VAR_1 , VAR_2 ) ) ( TRY TRY ( BLOCK BLOCK (  resource . METHOD_5 ( TYPE_1 . getModel ( 0 , false ) ) )  resource . METHOD_5 ( TYPE_1 . getModel ( 0 , false ) ) (  METHOD_6 ( STRING_1 ) )  METHOD_6 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_6 ) NAME VAR_6 ( BLOCK BLOCK (  METHOD_7 ( VAR_6 , VAR_3 ) )  METHOD_7 ( VAR_6 , VAR_3 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME vds ) NAME vds ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( VAR_2 < java.util.List < java.lang.String > > METHOD_3 ( VAR_3 , vds . METHOD_4 ( ) . getValue ( ) ) , vds . METHOD_5 ( ) . METHOD_6 ( STRING_1 ) ) ) INIT = TYPE_1 . METHOD_2 ( VAR_2 < java.util.List < java.lang.String > > METHOD_3 ( VAR_3 , vds . METHOD_4 ( ) . getValue ( ) ) , vds . METHOD_5 ( ) . METHOD_6 ( STRING_1 ) ) ) VAR VAR ( IF IF ( COND ( VAR_1 != null ) && ( ! ( VAR_1 . isEmpty ( ) ) ) ) COND ( VAR_1 != null ) && ( ! ( VAR_1 . isEmpty ( ) ) ) ( THEN THEN (  METHOD_7 ( vds , VAR_1 ) )  METHOD_7 ( vds , VAR_1 ) (  return true ; )  return true ; ) THEN THEN ) IF IF (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain> ) RETURN java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME status ) NAME status ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ) TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME i ) NAME i ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( IF IF ( COND ( i . METHOD_2 ( ) ) == status ) COND ( i . METHOD_2 ( ) ) == status ( THEN THEN (  VAR_2 . add ( i ) )  VAR_2 . add ( i ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.Object[] ) TYPE java.lang.Object[] ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( java.lang.Object [ ] ) ( target ) ) ) INIT = ( ( java.lang.Object [ ] ) ( target ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_1 ) ( VAR_1 [ 0 ] ) ) ) INIT = ( ( TYPE_1 ) ( VAR_1 [ 0 ] ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME model ) NAME model ( INIT = ( ( TYPE_2 ) ( VAR_1 [ 1 ] ) ) ) INIT = ( ( TYPE_2 ) ( VAR_1 [ 1 ] ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDSGroup> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDSGroup> ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( returnValue ) ) ) INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( returnValue ) ) ) VAR VAR (  model . METHOD_2 ( model , VAR_3 , null ) )  model . METHOD_2 ( model , VAR_3 , null ) (  VAR_2 . METHOD_3 ( ) )  VAR_2 . METHOD_3 ( ) (  VAR_2 . METHOD_4 ( ) )  VAR_2 . METHOD_4 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME runQuery ) NAME runQuery ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.VdcQueryType ) TYPE TYPE_1.VdcQueryType ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_1 ( VAR_2 , VAR_3 ) )  METHOD_1 ( VAR_2 , VAR_3 ) ( VAR VAR ( TYPE TYPE_1.VdcQueryReturnValue ) TYPE TYPE_1.VdcQueryReturnValue ( NAME result ) NAME result ( INIT = VAR_4 . RunQuery ( VAR_1 , VAR_2 ) ) INIT = VAR_4 . RunQuery ( VAR_1 , VAR_2 ) ) VAR VAR (  return result . getSucceeded ( ) ? result . getReturnValue ( ) : null ; )  return result . getSucceeded ( ) ? result . getReturnValue ( ) : null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME equals ) NAME equals ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( this ) == VAR_1 ) COND ( this ) == VAR_1 ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_1 == null ) || ( ( METHOD_1 ( ) ) != ( VAR_1 . METHOD_1 ( ) ) ) ) COND ( VAR_1 == null ) || ( ( METHOD_1 ( ) ) != ( VAR_1 . METHOD_1 ( ) ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_1 ) ( VAR_1 ) ) ) INIT = ( ( TYPE_1 ) ( VAR_1 ) ) ) VAR VAR (  return vm . equals ( VAR_2 . vm ) ; )  return vm . equals ( VAR_2 . vm ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 < java.lang.Integer > METHOD_2 ( VAR_3 ) ) INIT = VAR_2 < java.lang.Integer > METHOD_2 ( VAR_3 ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_1 . METHOD_3 ( TYPE_2 . getParameters ( ) . METHOD_4 ( ) , 0 ) ) INIT = TYPE_1 . METHOD_3 ( TYPE_2 . getParameters ( ) . METHOD_4 ( ) , 0 ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_3> ) TYPE java.util.List<TYPE_3> ( NAME VAR_5 ) NAME VAR_5 ( INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_5 ( ) . METHOD_6 ( ( VAR_4 * VAR_1 ) , VAR_1 ) ) INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_5 ( ) . METHOD_6 ( ( VAR_4 * VAR_1 ) , VAR_1 ) ) VAR VAR (  TYPE_2 . METHOD_7 ( ) . METHOD_8 ( VAR_5 ) )  TYPE_2 . METHOD_7 ( ) . METHOD_8 ( VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ) TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME storageDomain ) NAME storageDomain ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_1.DiskImage> ) TYPE java.util.List<TYPE_1.DiskImage> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_1.DiskImage ) TYPE TYPE_1.DiskImage ( NAME disk ) NAME disk ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  disk . METHOD_2 ( new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( TYPE_2 . METHOD_3 ( storageDomain . getId ( ) ) ) ) )  disk . METHOD_2 ( new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( TYPE_2 . METHOD_3 ( storageDomain . getId ( ) ) ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  TYPE_3 . METHOD_4 ( storageDomain . METHOD_5 ( ) , VAR_1 . get ( 0 ) ) )  TYPE_3 . METHOD_4 ( storageDomain . METHOD_5 ( ) , VAR_1 . get ( 0 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME getValue ) NAME getValue ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME object ) NAME object ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = 0 ) INIT = 0 ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ( IN object . METHOD_1 ( ) ) IN object . METHOD_1 ( ) ( BLOCK BLOCK (  VAR_1 . append ( name ) )  VAR_1 . append ( name ) ( IF IF ( COND VAR_2 < ( ( object . METHOD_1 ( ) . size ( ) ) - 1 ) ) COND VAR_2 < ( ( object . METHOD_1 ( ) . size ( ) ) - 1 ) ( THEN THEN (  VAR_1 . append ( STRING_1 ) )  VAR_1 . append ( STRING_1 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_1 . toString ( ) ; )  return VAR_1 . toString ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Version ) TYPE org.ovirt.engine.core.compat.Version ( NAME version ) NAME version ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME value ) NAME value ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . get ( version ) . get ( VAR_1 ) ) INIT = VAR_3 . get ( version ) . get ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_5 . get ( version ) . get ( VAR_1 ) ) INIT = VAR_5 . get ( version ) . get ( VAR_1 ) ) VAR VAR (  return ( ( VAR_2 != null ) && ( VAR_2 . METHOD_2 ( value ) . METHOD_3 ( ) ) ) || ( ( VAR_4 != null ) && ( VAR_4 . METHOD_2 ( value ) . METHOD_3 ( ) ) ) ; )  return ( ( VAR_2 != null ) && ( VAR_2 . METHOD_2 ( value ) . METHOD_3 ( ) ) ) || ( ( VAR_4 != null ) && ( VAR_4 . METHOD_2 ( value ) . METHOD_3 ( ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( getWindow ( ) ) != null ) COND ( getWindow ( ) ) != null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ( INIT = TYPE_2 . METHOD_2 ( getEntity ( ) . METHOD_3 ( ) , getEntity ( ) . getStoragePoolId ( ) , getEntity ( ) . METHOD_4 ( ) , ( ( java.util.ArrayList < TYPE_3 > ) ( METHOD_5 ( ) ) ) , this ) ) INIT = TYPE_2 . METHOD_2 ( getEntity ( ) . METHOD_3 ( ) , getEntity ( ) . getStoragePoolId ( ) , getEntity ( ) . METHOD_4 ( ) , ( ( java.util.ArrayList < TYPE_3 > ) ( METHOD_5 ( ) ) ) , this ) ) VAR VAR (  METHOD_6 ( model ) )  METHOD_6 ( model ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source != null ? ( ( java.lang.Integer ) ( source ) ) . METHOD_2 ( ) : INT_1 ; )  return source != null ? ( ( java.lang.Integer ) ( source ) ) . METHOD_2 ( ) : INT_1 ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . METHOD_2 ( ) : INT_1 ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . METHOD_2 ( ) : INT_1 ; } } (  TYPE_1 . METHOD_3 ( new TYPE_2 ( VAR_1 , TYPE_1 . METHOD_4 ( ) ) , aQuery ) )  TYPE_1 . METHOD_3 ( new TYPE_2 ( VAR_1 , TYPE_1 . METHOD_4 ( ) ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  assertEquals ( VAR_2 [ VAR_1 ] . toString ( ) , model . getId ( ) ) )  assertEquals ( VAR_2 [ VAR_1 ] . toString ( ) , model . getId ( ) ) (  assertEquals ( VAR_2 [ VAR_1 ] . toString ( ) , model . getName ( ) ) )  assertEquals ( VAR_2 [ VAR_1 ] . toString ( ) , model . getName ( ) ) (  METHOD_2 ( model . METHOD_3 ( ) ) )  METHOD_2 ( model . METHOD_3 ( ) ) (  assertEquals ( VAR_3 [ 0 ] . toString ( ) , model . METHOD_3 ( ) . getId ( ) ) )  assertEquals ( VAR_3 [ 0 ] . toString ( ) , model . METHOD_3 ( ) . getId ( ) ) (  METHOD_4 ( model ) )  METHOD_4 ( model ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ( INIT = new org.ovirt.engine.core.common.businessentities.VM ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.VM ( ) ) VAR VAR (  org.mockito.Mockito.doReturn ( true ) . when ( VAR_1 ) . METHOD_2 ( TYPE_1 . any ( VAR_2 . VM class ) ) )  org.mockito.Mockito.doReturn ( true ) . when ( VAR_1 ) . METHOD_2 ( TYPE_1 . any ( VAR_2 . VM class ) ) (  TYPE_2 . METHOD_3 ( VAR_1 . METHOD_4 ( vm ) , false , VAR_3 ) )  TYPE_2 . METHOD_3 ( VAR_1 . METHOD_4 ( vm ) , false , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( 2 ) )  METHOD_2 ( 2 ) (  METHOD_3 ( 0 , 1 ) )  METHOD_3 ( 0 , 1 ) (  METHOD_4 ( ) )  METHOD_4 ( ) (  METHOD_5 ( 1 ) )  METHOD_5 ( 1 ) (  METHOD_6 ( METHOD_7 ( ) ) )  METHOD_6 ( METHOD_7 ( ) ) (  VAR_1 . METHOD_8 ( ) )  VAR_1 . METHOD_8 ( ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ( INIT = TYPE_2 . getModel ( 1 ) ) INIT = TYPE_2 . getModel ( 1 ) ) VAR VAR (  model . setId ( VAR_2 [ 1 ] . toString ( ) ) )  model . setId ( VAR_2 [ 1 ] . toString ( ) ) ( TRY TRY ( BLOCK BLOCK (  resource . METHOD_9 ( model ) )  resource . METHOD_9 ( model ) (  METHOD_10 ( STRING_1 ) )  METHOD_10 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( BLOCK BLOCK (  METHOD_11 ( VAR_3 ) )  METHOD_11 ( VAR_3 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  command = org.mockito.Mockito . METHOD_2 ( new TYPE_1 < TYPE_2 > ( new TYPE_2 ( new java.util.ArrayList < TYPE_3 > ( ) , vmId ) ) ) )  command = org.mockito.Mockito . METHOD_2 ( new TYPE_1 < TYPE_2 > ( new TYPE_2 ( new java.util.ArrayList < TYPE_3 > ( ) , vmId ) ) ) (  org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_3 ( ) )  org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_3 ( ) (  org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_4 ( ) )  org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_4 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( INT_1 ) )  METHOD_2 ( INT_1 ) (  METHOD_3 ( ) )  METHOD_3 ( ) (  METHOD_4 ( 2 ) )  METHOD_4 ( 2 ) (  METHOD_5 ( 2 ) )  METHOD_5 ( 2 ) (  METHOD_6 ( 2 ) )  METHOD_6 ( 2 ) (  METHOD_7 ( METHOD_8 ( VAR_1 , VAR_2 class , new java.lang.String [ ] { STRING_1 , STRING_2 } , new java.lang.Object [ ] { VAR_3 , VAR_4 [ 1 ] } , true , true ) ) )  METHOD_7 ( METHOD_8 ( VAR_1 , VAR_2 class , new java.lang.String [ ] { STRING_1 , STRING_2 } , new java.lang.Object [ ] { VAR_3 , VAR_4 [ 1 ] } , true , true ) ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME nic ) NAME nic ( INIT = resource . METHOD_9 ( METHOD_10 ( false ) ) ) INIT = resource . METHOD_9 ( METHOD_10 ( false ) ) ) VAR VAR (  METHOD_11 ( nic ) )  METHOD_11 ( nic ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR (  VAR_2 . add ( VAR_3 ) )  VAR_2 . add ( VAR_3 ) (  VAR_2 . add ( VAR_4 ) )  VAR_2 . add ( VAR_4 ) (  VAR_2 . METHOD_2 ( VAR_1 ) )  VAR_2 . METHOD_2 ( VAR_1 ) (  org.mockito.Mockito.when ( VAR_5 . METHOD_3 ( VAR_6 ) ) . thenReturn ( VAR_2 ) )  org.mockito.Mockito.when ( VAR_5 . METHOD_3 ( VAR_6 ) ) . thenReturn ( VAR_2 ) (  org.mockito.Mockito.when ( VAR_5 . METHOD_4 ( ) ) . thenReturn ( VAR_2 ) )  org.mockito.Mockito.when ( VAR_5 . METHOD_4 ( ) ) . thenReturn ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) )  VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) (  METHOD_3 ( ) )  METHOD_3 ( ) ) BLOCK BLOCK ) METHOD METHOD (  TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) ; METHOD_3 ( ) ; } } ) ) )  TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) ; METHOD_3 ( ) ; } } ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 . METHOD_2 ( ) ) != ( VAR_2 ) ) COND ( VAR_1 . METHOD_2 ( ) ) != ( VAR_2 ) ( THEN THEN (  VAR_3 = VAR_4 < java.lang.Integer > METHOD_3 ( VAR_1 . METHOD_2 ( ) , VAR_5 ) )  VAR_3 = VAR_4 < java.lang.Integer > METHOD_3 ( VAR_1 . METHOD_2 ( ) , VAR_5 ) ) THEN THEN ( ELSE ELSE (  VAR_3 = VAR_1 . METHOD_4 ( ) )  VAR_3 = VAR_1 . METHOD_4 ( ) ) ELSE ELSE ) IF IF (  VAR_6 = VAR_4 < java.lang.Integer > METHOD_3 ( VAR_1 . METHOD_5 ( ) , VAR_5 ) )  VAR_6 = VAR_4 < java.lang.Integer > METHOD_3 ( VAR_1 . METHOD_5 ( ) , VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2<?extendsTYPE_3> ) TYPE TYPE_2<?extendsTYPE_3> ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_2 < ? extends TYPE_3 > ) ( VAR_1 . METHOD_2 ( ) [ 0 ] ) ) ) INIT = ( ( TYPE_2 < ? extends TYPE_3 > ) ( VAR_1 . METHOD_2 ( ) [ 0 ] ) ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_1 . METHOD_3 ( model , TYPE_4 . METHOD_1 ( VAR_2 ) ) )  VAR_1 . METHOD_3 ( model , TYPE_4 . METHOD_1 ( VAR_2 ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . assertEquals ( new TYPE_2 ( STRING_1 ) . METHOD_2 ( ) , STRING_2 ) )  TYPE_1 . assertEquals ( new TYPE_2 ( STRING_1 ) . METHOD_2 ( ) , STRING_2 ) (  TYPE_1 . assertEquals ( new TYPE_2 ( STRING_3 ) . METHOD_2 ( ) , STRING_4 ) )  TYPE_1 . assertEquals ( new TYPE_2 ( STRING_3 ) . METHOD_2 ( ) , STRING_4 ) (  TYPE_1 . assertEquals ( new TYPE_2 ( STRING_5 ) . METHOD_2 ( ) , STRING_6 ) )  TYPE_1 . assertEquals ( new TYPE_2 ( STRING_5 ) . METHOD_2 ( ) , STRING_6 ) (  TYPE_1 . assertEquals ( new TYPE_2 ( STRING_7 , STRING_8 , true ) . METHOD_2 ( ) , STRING_9 ) )  TYPE_1 . assertEquals ( new TYPE_2 ( STRING_7 , STRING_8 , true ) . METHOD_2 ( ) , STRING_9 ) (  TYPE_1 . assertEquals ( new TYPE_2 ( STRING_7 , STRING_10 , false ) . METHOD_2 ( ) , STRING_9 ) )  TYPE_1 . assertEquals ( new TYPE_2 ( STRING_7 , STRING_10 , false ) . METHOD_2 ( ) , STRING_9 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2[] ) TYPE TYPE_2[] ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 [ 0 ] ) INIT = new TYPE_2 [ 0 ] ) VAR VAR ( VAR VAR ( TYPE java.lang.Object[] ) TYPE java.lang.Object[] ( NAME args ) NAME args ( INIT = new java.lang.Object [ 0 ] ) INIT = new java.lang.Object [ 0 ] ) VAR VAR ( VAR VAR ( TYPE java.lang.Integer ) TYPE java.lang.Integer ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 < java.lang.Integer > METHOD_2 ( VAR_4 ) ) INIT = VAR_3 < java.lang.Integer > METHOD_2 ( VAR_4 ) ) VAR VAR (  VAR_5 = METHOD_3 ( ) . METHOD_4 ( this , STRING_1 , VAR_1 , args , VAR_2 , VAR_6 ) )  VAR_5 = METHOD_3 ( ) . METHOD_4 ( this , STRING_1 , VAR_1 , args , VAR_2 , VAR_6 ) (  return this ; )  return this ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.List<java.lang.String> ) RETURN java.util.List<java.lang.String> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDS> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDS> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.ArrayList < java.lang.String > ( VAR_1 . size ( ) ) ) INIT = new java.util.ArrayList < java.lang.String > ( VAR_1 . size ( ) ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME vds ) NAME vds ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  VAR_2 . add ( vds . getName ( ) ) )  VAR_2 . add ( vds . getName ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME event ) NAME event ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2<TYPE_3>.VAR_1 ) TYPE TYPE_2<TYPE_3>.VAR_1 ( NAME item ) NAME item ( INIT = ( ( TYPE_2 < TYPE_3 > . VAR_1 ) ( event . METHOD_2 ( ) ) ) ) INIT = ( ( TYPE_2 < TYPE_3 > . VAR_1 ) ( event . METHOD_2 ( ) ) ) ) VAR VAR (  this . METHOD_3 ( item . getValue ( ) , true ) )  this . METHOD_3 ( item . getValue ( ) , true ) ( IF IF ( COND this . VAR_2 ) COND this . VAR_2 ( THEN THEN (  event . METHOD_4 ( ) )  event . METHOD_4 ( ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( java.util.List < TYPE_1 > ) ( returnValue ) ) ) INIT = ( ( java.util.List < TYPE_1 > ) ( returnValue ) ) ) VAR VAR ( IF IF ( COND ( VAR_2 != null ) && ( ! ( VAR_2 . isEmpty ( ) ) ) ) COND ( VAR_2 != null ) && ( ! ( VAR_2 . isEmpty ( ) ) ) ( THEN THEN ( VAR VAR ( TYPE TYPE_2<TYPE_1> ) TYPE TYPE_2<TYPE_1> ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( ( VAR_4 ) == null ) ? VAR_5 : TYPE_3 . METHOD_2 ( VAR_4 , VAR_6 ) ) INIT = ( ( VAR_4 ) == null ) ? VAR_5 : TYPE_3 . METHOD_2 ( VAR_4 , VAR_6 ) ) VAR VAR (  TYPE_4 . METHOD_3 ( VAR_2 , VAR_3 ) )  TYPE_4 . METHOD_3 ( VAR_2 , VAR_3 ) ) THEN THEN ) IF IF (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME get ) NAME get ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( IN VAR_3 . list ( ) . METHOD_1 ( ) ) IN VAR_3 . list ( ) . METHOD_1 ( ) ( BLOCK BLOCK ( IF IF ( COND VAR_4 . equals ( VAR_2 . getId ( ) ) ) COND VAR_4 . equals ( VAR_2 . getId ( ) ) ( THEN THEN (  return VAR_2 ; )  return VAR_2 ; ) THEN THEN ) IF IF (  VAR_1 . add ( VAR_2 . getId ( ) ) )  VAR_1 . add ( VAR_2 . getId ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  throw new TYPE_2 ( TYPE_3 . status ( VAR_5 ) . METHOD_2 ( ) ) ; )  throw new TYPE_2 ( TYPE_3 . status ( VAR_5 ) . METHOD_2 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  return ( ( ( TYPE_2 . METHOD_3 ( ) ) != null ) && ( validate ( VAR_1 . METHOD_4 ( TYPE_2 . METHOD_3 ( ) ) ) ) ) && ( validate ( VAR_1 . METHOD_5 ( TYPE_2 . METHOD_3 ( ) ) ) ) ; )  return ( ( ( TYPE_2 . METHOD_3 ( ) ) != null ) && ( validate ( VAR_1 . METHOD_4 ( TYPE_2 . METHOD_3 ( ) ) ) ) ) && ( validate ( VAR_1 . METHOD_5 ( TYPE_2 . METHOD_3 ( ) ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ( INIT = TYPE_1 . METHOD_2 ( ) ) INIT = TYPE_1 . METHOD_2 ( ) ) VAR VAR (  METHOD_3 ( vm . METHOD_4 ( ) , VAR_1 ) )  METHOD_3 ( vm . METHOD_4 ( ) , VAR_1 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  VAR_2 . METHOD_5 ( VAR_1 ) )  VAR_2 . METHOD_5 ( VAR_1 ) (  TYPE_3 . METHOD_6 ( validator . METHOD_7 ( vm , VAR_2 ) , TYPE_4 . METHOD_8 ( ) ) )  TYPE_3 . METHOD_6 ( validator . METHOD_7 ( vm , VAR_2 ) , TYPE_4 . METHOD_8 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source != null ? ( ( org.ovirt.engine.core.common.businessentities.VM ) ( source ) ) : null ; )  return source != null ? ( ( org.ovirt.engine.core.common.businessentities.VM ) ( source ) ) : null ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( org.ovirt.engine.core.common.businessentities.VM ) ( source ) ) : null ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( org.ovirt.engine.core.common.businessentities.VM ) ( source ) ) : null ; } } (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) . METHOD_2 ( ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) . METHOD_2 ( ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( IF IF ( COND VAR_1 instanceof TYPE_2 ) COND VAR_1 instanceof TYPE_2 ( THEN THEN (  VAR_2 = ( ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_2 ( ) ) + STRING_1 ) + ( ( ( TYPE_2 ) ( VAR_1 ) ) . METHOD_3 ( ) ) )  VAR_2 = ( ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_2 ( ) ) + STRING_1 ) + ( ( ( TYPE_2 ) ( VAR_1 ) ) . METHOD_3 ( ) ) ) THEN THEN ( ELSE ELSE (  VAR_2 = ( ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_4 ( ) ) + STRING_1 ) + ( VAR_1 . METHOD_5 ( ) ) )  VAR_2 = ( ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_4 ( ) ) + STRING_1 ) + ( VAR_1 . METHOD_5 ( ) ) ) ELSE ELSE ) IF IF (  org.ovirt.engine.ui.frontend.Frontend . METHOD_1 ( VAR_2 ) )  org.ovirt.engine.ui.frontend.Frontend . METHOD_1 ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( java.lang.String ) ( returnValue ) ) ) INIT = ( ( java.lang.String ) ( returnValue ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_2 ) ( model ) ) ) INIT = ( ( TYPE_2 ) ( model ) ) ) VAR VAR (  VAR_2 . METHOD_3 ( ) . setEntity ( VAR_1 ) )  VAR_2 . METHOD_3 ( ) . setEntity ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD (  TYPE_1 . getInstance ( ) . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.lang.String VAR_1 = ( ( java.lang.String ) ( returnValue ) ) ; TYPE_2 VAR_2 = ( ( TYPE_2 ) ( model ) ) ; VAR_2 . METHOD_3 ( ) . setEntity ( VAR_1 ) ; } } , METHOD_4 ( ) ) , getVm ( ) . getId ( ) ) )  TYPE_1 . getInstance ( ) . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.lang.String VAR_1 = ( ( java.lang.String ) ( returnValue ) ) ; TYPE_2 VAR_2 = ( ( TYPE_2 ) ( model ) ) ; VAR_2 . METHOD_3 ( ) . setEntity ( VAR_1 ) ; } } , METHOD_4 ( ) ) , getVm ( ) . getId ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1.ValidationResult ) RETURN TYPE_1.ValidationResult ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.Boolean ) TYPE java.lang.Boolean ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 < java.lang.Boolean > METHOD_2 ( VAR_3 ) ) INIT = VAR_2 < java.lang.Boolean > METHOD_2 ( VAR_3 ) ) VAR VAR (  return ( TYPE_2 . getInstance ( ) . METHOD_3 ( METHOD_4 ( ) ) ) && ( ! VAR_1 ) ? new TYPE_1 . ValidationResult ( VAR_4 ) : VAR_5 ; )  return ( TYPE_2 . getInstance ( ) . METHOD_3 ( METHOD_4 ( ) ) ) && ( ! VAR_1 ) ? new TYPE_1 . ValidationResult ( VAR_4 ) : VAR_5 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( METHOD_2 ( ) ) || ( TYPE_1 . METHOD_3 ( ) ) ) COND ( METHOD_2 ( ) ) || ( TYPE_1 . METHOD_3 ( ) ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF (  return validate ( TYPE_2 . METHOD_1 ( TYPE_1 . METHOD_4 ( ) , TYPE_1 . getVdsGroup ( ) . METHOD_5 ( ) ) ) ; )  return validate ( TYPE_2 . METHOD_1 ( TYPE_1 . METHOD_4 ( ) , TYPE_1 . getVdsGroup ( ) . METHOD_5 ( ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( METHOD_2 ( ) ) ) INIT = new TYPE_2 ( METHOD_2 ( ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_3> ) TYPE java.util.List<TYPE_3> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR (  TYPE_4 . METHOD_3 ( VAR_2 , org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) , STRING_1 , VAR_1 ) )  TYPE_4 . METHOD_3 ( VAR_2 , org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) , STRING_1 , VAR_1 ) (  TYPE_5 . METHOD_5 ( STRING_2 , VAR_2 . isEmpty ( ) ) )  TYPE_5 . METHOD_5 ( STRING_2 , VAR_2 . isEmpty ( ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ( BLOCK BLOCK (  e . METHOD_6 ( ) )  e . METHOD_6 ( ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . instance ( ) . METHOD_2 ( INT_1 ) ) INIT = TYPE_1 . instance ( ) . METHOD_2 ( INT_1 ) ) VAR VAR (  org.mockito.Mockito.when ( METHOD_3 ( ) . METHOD_4 ( ) ) . thenReturn ( VAR_1 ) )  org.mockito.Mockito.when ( METHOD_3 ( ) . METHOD_4 ( ) ) . thenReturn ( VAR_1 ) ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME result ) NAME result ( INIT = TYPE_1 . instance ( ) . METHOD_5 ( ) ) INIT = TYPE_1 . instance ( ) . METHOD_5 ( ) ) VAR VAR (  org.mockito.Mockito.doReturn ( result ) . when ( METHOD_6 ( ) ) . METHOD_7 ( ) )  org.mockito.Mockito.doReturn ( result ) . when ( METHOD_6 ( ) ) . METHOD_7 ( ) (  METHOD_6 ( ) . METHOD_8 ( ) )  METHOD_6 ( ) . METHOD_8 ( ) (  TYPE_2 . assertEquals ( STRING_1 , result , METHOD_6 ( ) . METHOD_9 ( ) . getReturnValue ( ) ) )  TYPE_2 . assertEquals ( STRING_1 , result , METHOD_6 ( ) . METHOD_9 ( ) . getReturnValue ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME returnValue ) NAME returnValue ( INIT = result . getReturnValue ( ) ) INIT = result . getReturnValue ( ) ) VAR VAR ( IF IF ( COND ( returnValue != null ) && ( returnValue . getSucceeded ( ) ) ) COND ( returnValue != null ) && ( returnValue . getSucceeded ( ) ) ( THEN THEN (  VAR_1 . METHOD_2 ( ( ( VAR_2 ) == null ? ( ( org.ovirt.engine.core.compat.Guid ) ( returnValue . METHOD_3 ( ) ) ) : VAR_2 ) , ( ( TYPE_3 < TYPE_4 > ) ( VAR_3 . METHOD_4 ( ) . METHOD_5 ( ) ) ) ) )  VAR_1 . METHOD_2 ( ( ( VAR_2 ) == null ? ( ( org.ovirt.engine.core.compat.Guid ) ( returnValue . METHOD_3 ( ) ) ) : VAR_2 ) , ( ( TYPE_3 < TYPE_4 > ) ( VAR_3 . METHOD_4 ( ) . METHOD_5 ( ) ) ) ) ) THEN THEN ( ELSE ELSE (  VAR_1 . METHOD_6 ( ) . METHOD_7 ( ) )  VAR_1 . METHOD_6 ( ) . METHOD_7 ( ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_1 ) ( getSelectedItem ( ) ) ) ) INIT = ( ( TYPE_1 ) ( getSelectedItem ( ) ) ) ) VAR VAR ( IF IF ( COND ( getWindow ( ) ) != null ) COND ( getWindow ( ) ) != null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_3 ( VAR_1 , this ) ) INIT = new TYPE_3 ( VAR_1 , this ) ) VAR VAR (  METHOD_2 ( VAR_2 ) )  METHOD_2 ( VAR_2 ) (  VAR_2 . METHOD_3 ( ) . setItems ( TYPE_4 . METHOD_4 ( getEntity ( ) ) ) )  VAR_2 . METHOD_3 ( ) . setItems ( TYPE_4 . METHOD_4 ( getEntity ( ) ) ) (  VAR_2 . METHOD_3 ( ) . setSelectedItem ( getEntity ( ) ) )  VAR_2 . METHOD_3 ( ) . setSelectedItem ( getEntity ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME type ) NAME type ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ( INIT = type . METHOD_2 ( ) ) INIT = type . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_3 ( VAR_1 ) ) INIT = METHOD_3 ( VAR_1 ) ) VAR VAR (  VAR_2 . METHOD_4 ( VAR_3 . List class ) )  VAR_2 . METHOD_4 ( VAR_3 . List class ) (  VAR_2 . METHOD_5 ( ( ( STRING_1 + ( VAR_2 . METHOD_6 ( ) ) ) + STRING_2 ) ) )  VAR_2 . METHOD_5 ( ( ( STRING_1 + ( VAR_2 . METHOD_6 ( ) ) ) + STRING_2 ) ) (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<TYPE_2,?> ) TYPE TYPE_1<TYPE_2,?> ( NAME column ) NAME column ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( METHOD_2 ( column ) ) ) COND ! ( METHOD_2 ( column ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ( INIT = true ) INIT = true ) VAR VAR ( IF IF ( COND VAR_2 . METHOD_3 ( column ) ) COND VAR_2 . METHOD_3 ( column ) ( THEN THEN (  VAR_1 = VAR_2 . get ( column ) )  VAR_1 = VAR_2 . get ( column ) ) THEN THEN ) IF IF ( IF IF ( COND VAR_1 && ( VAR_3 . METHOD_3 ( column ) ) ) COND VAR_1 && ( VAR_3 . METHOD_3 ( column ) ) ( THEN THEN (  VAR_1 = VAR_3 . get ( column ) )  VAR_1 = VAR_3 . get ( column ) ) THEN THEN ) IF IF (  VAR_1 = VAR_1 && ( ( METHOD_4 ( column ) ) == null ) )  VAR_1 = VAR_1 && ( ( METHOD_4 ( column ) ) == null ) (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.VdcActionType ) TYPE TYPE_1.VdcActionType ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.VdcActionParametersBase ) TYPE TYPE_1.VdcActionParametersBase ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_2 ( VAR_1 ) ) INIT = METHOD_2 ( VAR_1 ) ) VAR VAR (  TYPE_2 . METHOD_1 ( TYPE_3 . METHOD_3 ( METHOD_4 ( ) , VAR_3 . METHOD_4 ( ) , METHOD_5 ( ) , getParameters ( ) , VAR_4 , VAR_2 ) ) )  TYPE_2 . METHOD_1 ( TYPE_3 . METHOD_3 ( METHOD_4 ( ) , VAR_3 . METHOD_4 ( ) , METHOD_5 ( ) , getParameters ( ) , VAR_4 , VAR_2 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME vmId ) NAME vmId ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ( INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . get ( vmId ) ) INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . get ( vmId ) ) VAR VAR ( IF IF ( COND ( vm . METHOD_3 ( ) ) == ( VAR_1 ) ) COND ( vm . METHOD_3 ( ) ) == ( VAR_1 ) ( THEN THEN (  TYPE_1 . getInstance ( ) . METHOD_4 ( ) . METHOD_5 ( VAR_2 , new TYPE_2 ( vmId , VAR_3 ) ) )  TYPE_1 . getInstance ( ) . METHOD_4 ( ) . METHOD_5 ( VAR_2 , new TYPE_2 ( vmId , VAR_3 ) ) ) THEN THEN ( ELSE ELSE (  VAR_4 . METHOD_6 ( STRING_1 , vm . METHOD_7 ( ) , vm . METHOD_3 ( ) ) )  VAR_4 . METHOD_6 ( STRING_1 , vm . METHOD_7 ( ) , vm . METHOD_3 ( ) ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.Network ) TYPE TYPE_1.Network ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1.Network ) TYPE TYPE_1.Network ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 . getId ( ) . equals ( VAR_2 . getId ( ) ) ) COND VAR_1 . getId ( ) . equals ( VAR_2 . getId ( ) ) ( THEN THEN (  return 0 ; )  return 0 ; ) THEN THEN ( ELSE ELSE (  return VAR_1 . getId ( ) . toString ( ) . METHOD_2 ( VAR_2 . getId ( ) . toString ( ) ) ; )  return VAR_1 . getId ( ) . toString ( ) . METHOD_2 ( VAR_2 . getId ( ) . toString ( ) ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> ) RETURN java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2.VdcQueryReturnValue ) TYPE TYPE_2.VdcQueryReturnValue ( NAME returnValue ) NAME returnValue ( INIT = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( VAR_2 , new TYPE_4 ( TYPE_3 . METHOD_4 ( ) , VAR_1 . METHOD_5 ( ) , VAR_3 , VAR_1 . METHOD_6 ( ) ) ) ) INIT = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( VAR_2 , new TYPE_4 ( TYPE_3 . METHOD_4 ( ) , VAR_1 . METHOD_5 ( ) , VAR_3 , VAR_1 . METHOD_6 ( ) ) ) ) VAR VAR (  return returnValue . getReturnValue ( ) ; )  return returnValue . getReturnValue ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_1 ) ( target ) ) ) INIT = ( ( TYPE_1 ) ( target ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain> ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( returnValue ) ) ) INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( returnValue ) ) ) VAR VAR (  VAR_3 = VAR_2 )  VAR_3 = VAR_2 (  VAR_1 . METHOD_2 ( ) )  VAR_1 . METHOD_2 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = org.mockito.Mockito.when ( VAR_3 . METHOD_2 ( TYPE_3 . any ( VAR_4 class ) , TYPE_3 . any ( VAR_5 class ) , TYPE_3 . any ( VAR_6 class ) , TYPE_3 . METHOD_3 ( ) ) ) ) INIT = org.mockito.Mockito.when ( VAR_3 . METHOD_2 ( TYPE_3 . any ( VAR_4 class ) , TYPE_3 . any ( VAR_5 class ) , TYPE_3 . any ( VAR_6 class ) , TYPE_3 . METHOD_3 ( ) ) ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME command ) NAME command ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  VAR_2 = VAR_2 . thenReturn ( command ) )  VAR_2 = VAR_2 . thenReturn ( command ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME resource ) NAME resource ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  METHOD_3 ( METHOD_4 ( ) ) )  METHOD_3 ( METHOD_4 ( ) ) (  METHOD_5 ( ) )  METHOD_5 ( ) (  VAR_1 . METHOD_6 ( ) )  VAR_1 . METHOD_6 ( ) ( TRY TRY ( BLOCK BLOCK (  resource . get ( ) )  resource . get ( ) (  METHOD_7 ( STRING_1 ) )  METHOD_7 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( BLOCK BLOCK (  METHOD_8 ( VAR_2 ) )  METHOD_8 ( VAR_2 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME host ) NAME host ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( host , VAR_1 ) ) INIT = new TYPE_1 ( host , VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_3 . METHOD_2 ( ) ) INIT = TYPE_3 . METHOD_2 ( ) ) VAR VAR (  VAR_2 . METHOD_3 ( VAR_3 ) )  VAR_2 . METHOD_3 ( VAR_3 ) ( IF IF ( COND TYPE_4 . isEmpty ( VAR_3 ) ) COND TYPE_4 . isEmpty ( VAR_3 ) ( THEN THEN (  VAR_3 = TYPE_5 . METHOD_4 ( host ) )  VAR_3 = TYPE_5 . METHOD_4 ( host ) ) THEN THEN ) IF IF (  VAR_2 . METHOD_3 ( VAR_3 ) )  VAR_2 . METHOD_3 ( VAR_3 ) (  VAR_2 . METHOD_5 ( ) )  VAR_2 . METHOD_5 ( ) (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  command = org.mockito.Mockito . METHOD_2 ( new TYPE_1 < TYPE_2 > ( new TYPE_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , true ) ) ) )  command = org.mockito.Mockito . METHOD_2 ( new TYPE_1 < TYPE_2 > ( new TYPE_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , true ) ) ) (  METHOD_4 ( command ) )  METHOD_4 ( command ) (  METHOD_5 ( VAR_1 ) )  METHOD_5 ( VAR_1 ) (  METHOD_6 ( ) )  METHOD_6 ( ) (  METHOD_7 ( VAR_2 . Collections < java.lang.String > METHOD_8 ( ) ) )  METHOD_7 ( VAR_2 . Collections < java.lang.String > METHOD_8 ( ) ) (  METHOD_9 ( true ) )  METHOD_9 ( true ) (  METHOD_10 ( true ) )  METHOD_10 ( true ) (  METHOD_11 ( ) )  METHOD_11 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ( INIT = TYPE_1 . METHOD_2 ( ) ) INIT = TYPE_1 . METHOD_2 ( ) ) VAR VAR (  vm . METHOD_3 ( 2 ) )  vm . METHOD_3 ( 2 ) (  METHOD_4 ( vm . METHOD_5 ( ) , VAR_1 ) )  METHOD_4 ( vm . METHOD_5 ( ) , VAR_1 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  VAR_2 . METHOD_6 ( VAR_1 ) )  VAR_2 . METHOD_6 ( VAR_1 ) (  TYPE_3 . METHOD_7 ( validator . METHOD_8 ( vm , VAR_2 ) , TYPE_4 . METHOD_9 ( VAR_3 ) ) )  TYPE_3 . METHOD_7 ( validator . METHOD_8 ( vm , VAR_2 ) , TYPE_4 . METHOD_9 ( VAR_3 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 class . METHOD_2 ( STRING_1 ) ) INIT = VAR_3 class . METHOD_2 ( STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = org.mockito.Mockito . METHOD_3 ( VAR_5 class ) ) INIT = org.mockito.Mockito . METHOD_3 ( VAR_5 class ) ) VAR VAR (  org.mockito.Mockito.when ( VAR_4 . METHOD_4 ( ) ) . thenReturn ( VAR_1 ) )  org.mockito.Mockito.when ( VAR_4 . METHOD_4 ( ) ) . thenReturn ( VAR_1 ) (  METHOD_5 ( VAR_2 , VAR_4 ) )  METHOD_5 ( VAR_2 , VAR_4 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ( BLOCK BLOCK (  e . METHOD_6 ( ) )  e . METHOD_6 ( ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VdsNetworkInterface> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VdsNetworkInterface> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_4 ) NAME VAR_4 ( INIT = false ) INIT = false ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME VAR_5 ) NAME VAR_5 ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK ( IF IF ( COND TYPE_2 . equals ( VAR_3 . METHOD_2 ( ) , VAR_5 . METHOD_2 ( ) ) ) COND TYPE_2 . equals ( VAR_3 . METHOD_2 ( ) , VAR_5 . METHOD_2 ( ) ) ( THEN THEN (  VAR_4 = true )  VAR_4 = true (  break ; )  break ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ( IF IF ( COND ! VAR_4 ) COND ! VAR_4 ( THEN THEN (  VAR_6 . METHOD_3 ( STRING_1 ) )  VAR_6 . METHOD_3 ( STRING_1 ) (  return false ; )  return false ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.AuditLogType[] ) TYPE TYPE_1.AuditLogType[] ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( ) ) INIT = TYPE_2 . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND ( VAR_1 . length ) != ( VAR_2 . size ( ) ) ) COND ( VAR_1 . length ) != ( VAR_2 . size ( ) ) ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE TYPE_1.AuditLogType ) TYPE TYPE_1.AuditLogType ( NAME value ) NAME value ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_2 . METHOD_3 ( value ) ) ) COND ! ( VAR_2 . METHOD_3 ( value ) ) ( THEN THEN (  VAR_3 . METHOD_4 ( STRING_1 , value . toString ( ) ) )  VAR_3 . METHOD_4 ( STRING_1 , value . toString ( ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<TYPE_1.VdcActionParametersBase> ) TYPE java.util.ArrayList<TYPE_1.VdcActionParametersBase> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ) TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME a ) NAME a ( IN VAR_2 . Linq < org.ovirt.engine.core.common.businessentities.StorageDomain > METHOD_2 ( METHOD_3 ( ) ) ) IN VAR_2 . Linq < org.ovirt.engine.core.common.businessentities.StorageDomain > METHOD_2 ( METHOD_3 ( ) ) ( BLOCK BLOCK (  VAR_1 . add ( new TYPE_2 ( a . getId ( ) , getEntity ( ) . getId ( ) ) ) )  VAR_1 . add ( new TYPE_2 ( a . getId ( ) , getEntity ( ) . getId ( ) ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_4 ( VAR_3 , VAR_1 ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_4 ( VAR_3 , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < TYPE_1 > ( ) { { add ( METHOD_2 ( VAR_2 . METHOD_3 ( ) , true ) ) ; add ( METHOD_2 ( VAR_2 . METHOD_4 ( ) , true ) ) ; add ( METHOD_2 ( VAR_2 . METHOD_5 ( ) , true ) ) ; } } ) INIT = new java.util.ArrayList < TYPE_1 > ( ) { { add ( METHOD_2 ( VAR_2 . METHOD_3 ( ) , true ) ) ; add ( METHOD_2 ( VAR_2 . METHOD_4 ( ) , true ) ) ; add ( METHOD_2 ( VAR_2 . METHOD_5 ( ) , true ) ) ; } } ) VAR VAR ( STATIC-BLOCK STATIC-BLOCK (  add ( METHOD_2 ( VAR_2 . METHOD_3 ( ) , true ) ) )  add ( METHOD_2 ( VAR_2 . METHOD_3 ( ) , true ) ) (  add ( METHOD_2 ( VAR_2 . METHOD_4 ( ) , true ) ) )  add ( METHOD_2 ( VAR_2 . METHOD_4 ( ) , true ) ) (  add ( METHOD_2 ( VAR_2 . METHOD_5 ( ) , true ) ) )  add ( METHOD_2 ( VAR_2 . METHOD_5 ( ) , true ) ) ) STATIC-BLOCK STATIC-BLOCK (  METHOD_6 ( VAR_1 , VAR_3 ) )  METHOD_6 ( VAR_1 , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<?extendsTYPE_2,?> ) RETURN TYPE_1<?extendsTYPE_2,?> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.uicommonweb.UICommand ) TYPE org.ovirt.engine.ui.uicommonweb.UICommand ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 == ( getModel ( ) . METHOD_2 ( ) ) ) COND VAR_1 == ( getModel ( ) . METHOD_2 ( ) ) ( THEN THEN (  return VAR_2 . get ( ) ; )  return VAR_2 . get ( ) ; ) THEN THEN ( ELSE ELSE ( IF IF ( COND VAR_1 == ( getModel ( ) . METHOD_3 ( ) ) ) COND VAR_1 == ( getModel ( ) . METHOD_3 ( ) ) ( THEN THEN (  return VAR_3 . get ( ) ; )  return VAR_3 . get ( ) ; ) THEN THEN ( ELSE ELSE (  return super . METHOD_1 ( source , VAR_1 ) ; )  return super . METHOD_1 ( source , VAR_1 ) ; ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN ( IF IF ( COND ( ( java.lang.Boolean ) ( METHOD_2 ( ) . getEntity ( ) ) ) ) COND ( ( java.lang.Boolean ) ( METHOD_2 ( ) . getEntity ( ) ) ) ( THEN THEN (  METHOD_3 ( VAR_1 ) )  METHOD_3 ( VAR_1 ) ) THEN THEN ( ELSE ELSE (  METHOD_4 ( ) )  METHOD_4 ( ) (  METHOD_5 ( ) )  METHOD_5 ( ) ) ELSE ELSE ) IF IF ) THEN THEN ) IF IF (  METHOD_4 ( ) )  METHOD_4 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) ) != null ) COND ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) ) != null ( THEN THEN (  TYPE_2 . METHOD_3 ( TYPE_1 . getParameters ( ) . METHOD_4 ( ) ) )  TYPE_2 . METHOD_3 ( TYPE_1 . getParameters ( ) . METHOD_4 ( ) ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND ( TYPE_1 . getParameters ( ) . METHOD_5 ( ) ) != null ) COND ( TYPE_1 . getParameters ( ) . METHOD_5 ( ) ) != null ( THEN THEN (  TYPE_3 . METHOD_6 ( TYPE_1 . getParameters ( ) . METHOD_5 ( ) ) )  TYPE_3 . METHOD_6 ( TYPE_1 . getParameters ( ) . METHOD_5 ( ) ) ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF (  TYPE_1 . METHOD_7 ( true ) )  TYPE_1 . METHOD_7 ( true ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME constants ) NAME constants ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_2 . METHOD_2 ( constants . METHOD_3 ( ) ) )  VAR_2 . METHOD_2 ( constants . METHOD_3 ( ) ) (  VAR_3 . METHOD_2 ( constants . METHOD_4 ( ) ) )  VAR_3 . METHOD_2 ( constants . METHOD_4 ( ) ) (  VAR_4 . METHOD_2 ( constants . METHOD_5 ( ) ) )  VAR_4 . METHOD_2 ( constants . METHOD_5 ( ) ) (  VAR_5 . METHOD_2 ( constants . METHOD_6 ( ) ) )  VAR_5 . METHOD_2 ( constants . METHOD_6 ( ) ) (  VAR_6 . METHOD_7 ( constants . METHOD_8 ( ) ) )  VAR_6 . METHOD_7 ( constants . METHOD_8 ( ) ) (  VAR_7 . METHOD_7 ( constants . METHOD_9 ( ) ) )  VAR_7 . METHOD_7 ( constants . METHOD_9 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( aQuery.converterCallback ) == null ) COND ( aQuery.converterCallback ) == null ( THEN THEN ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND source == null ) COND source == null ( THEN THEN (  return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ( ) ; )  return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ( ) ; ) THEN THEN ) IF IF (  return source ; )  return source ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ( ) ; } return source ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ( ) ; } return source ; } } ) THEN THEN ) IF IF (  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_1 ) ( model ) ) ) INIT = ( ( TYPE_1 ) ( model ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.ArrayList<TYPE_2> ) TYPE java.util.ArrayList<TYPE_2> ( NAME list ) NAME list ( INIT = ( ( java.util.ArrayList < TYPE_2 > ) ( ( ( TYPE_3 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ) INIT = ( ( java.util.ArrayList < TYPE_2 > ) ( ( ( TYPE_3 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ) VAR VAR (  TYPE_4 . METHOD_1 ( list , new TYPE_5 ( ) ) )  TYPE_4 . METHOD_1 ( list , new TYPE_5 ( ) ) (  VAR_1 . setItems ( list ) )  VAR_1 . setItems ( list ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public synchronized ) MODIFIER public synchronized ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StoragePool ) TYPE org.ovirt.engine.core.common.businessentities.StoragePool ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_2 . METHOD_2 ( STRING_1 , VAR_1 . METHOD_3 ( ) ) )  VAR_2 . METHOD_2 ( STRING_1 , VAR_1 . METHOD_3 ( ) ) (  METHOD_4 ( VAR_1 ) )  METHOD_4 ( VAR_1 ) ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME list ) NAME list ( INIT = TYPE_2 . METHOD_5 ( VAR_3 . METHOD_6 ( ) , new TYPE_3 < TYPE_1 > ( ) { public boolean METHOD_7 ( TYPE_1 a ) { return a . METHOD_8 ( ) . equals ( VAR_1 . getId ( ) ) ; } } ) ) INIT = TYPE_2 . METHOD_5 ( VAR_3 . METHOD_6 ( ) , new TYPE_3 < TYPE_1 > ( ) { public boolean METHOD_7 ( TYPE_1 a ) { return a . METHOD_8 ( ) . equals ( VAR_1 . getId ( ) ) ; } } ) ) VAR VAR ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_7 ) NAME METHOD_7 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME a ) NAME a ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return a . METHOD_8 ( ) . equals ( VAR_1 . getId ( ) ) ; )  return a . METHOD_8 ( ) . equals ( VAR_1 . getId ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( IN list ) IN list ( BLOCK BLOCK (  VAR_4 . METHOD_9 ( ) )  VAR_4 . METHOD_9 ( ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  METHOD_3 ( ) )  METHOD_3 ( ) (  org.mockito.Mockito.doReturn ( TYPE_1 . METHOD_4 ( ) ) . when ( cmd ) . METHOD_5 ( ) )  org.mockito.Mockito.doReturn ( TYPE_1 . METHOD_4 ( ) ) . when ( cmd ) . METHOD_5 ( ) (  org.mockito.Mockito.doReturn ( new TYPE_2 . ValidationResult ( VAR_1 ) ) . when ( VAR_2 ) . METHOD_6 ( ) )  org.mockito.Mockito.doReturn ( new TYPE_2 . ValidationResult ( VAR_1 ) ) . when ( VAR_2 ) . METHOD_6 ( ) (  TYPE_3 . METHOD_7 ( cmd . validate ( ) ) )  TYPE_3 . METHOD_7 ( cmd . validate ( ) ) (  TYPE_3 . METHOD_8 ( cmd . getReturnValue ( ) . METHOD_9 ( ) . METHOD_10 ( TYPE_4 . name ( ) ) ) )  TYPE_3 . METHOD_8 ( cmd . getReturnValue ( ) . METHOD_9 ( ) . METHOD_10 ( TYPE_4 . name ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<org.ovirt.engine.core.common.businessentities.VDS> ) RETURN java.util.List<org.ovirt.engine.core.common.businessentities.VDS> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDS> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDS> ( NAME hosts ) NAME hosts ) VAR VAR ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.Object> ) TYPE java.util.Map<java.lang.String,java.lang.Object> ( NAME parameters ) NAME parameters ) VAR VAR ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_2 . error ( ( ( STRING_1 + ( getName ( ) ) ) + STRING_2 ) ) )  VAR_2 . error ( ( ( STRING_1 + ( getName ( ) ) ) + STRING_2 ) ) (  return hosts ; )  return hosts ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME value ) NAME value ( INIT = VAR_3 ) INIT = VAR_3 ) VAR VAR (  VAR_1 . METHOD_2 ( VAR_2 , value ) )  VAR_1 . METHOD_2 ( VAR_2 , value ) ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_1 . METHOD_3 ( VAR_2 ) ) INIT = VAR_1 . METHOD_3 ( VAR_2 ) ) VAR VAR (  TYPE_3 . assertEquals ( value , VAR_4 ) )  TYPE_3 . assertEquals ( value , VAR_4 ) ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.String> ) TYPE java.util.Map<java.lang.String,java.lang.String> ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_1 . METHOD_4 ( ) ) INIT = VAR_1 . METHOD_4 ( ) ) VAR VAR (  VAR_5 . METHOD_5 ( ) )  VAR_5 . METHOD_5 ( ) ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_6 ) NAME VAR_6 ( INIT = VAR_1 . METHOD_3 ( VAR_2 ) ) INIT = VAR_1 . METHOD_3 ( VAR_2 ) ) VAR VAR (  TYPE_3 . assertEquals ( STRING_2 , VAR_6 ) )  TYPE_3 . assertEquals ( STRING_2 , VAR_6 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME vmId ) NAME vmId ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND source == null ) COND source == null ( THEN THEN (  return new java.util.ArrayList < TYPE_1 > ( ) ; )  return new java.util.ArrayList < TYPE_1 > ( ) ; ) THEN THEN ) IF IF (  return source ; )  return source ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < TYPE_1 > ( ) ; } return source ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < TYPE_1 > ( ) ; } return source ; } } (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) . METHOD_2 ( ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) . METHOD_2 ( ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME validate ) NAME validate ( BLOCK BLOCK (  VAR_1 . METHOD_1 ( new TYPE_1 [ ] { new TYPE_2 ( ) , new TYPE_3 ( 0 , METHOD_2 ( ) . getEntity ( ) ) } ) )  VAR_1 . METHOD_1 ( new TYPE_1 [ ] { new TYPE_2 ( ) , new TYPE_3 ( 0 , METHOD_2 ( ) . getEntity ( ) ) } ) (  VAR_2 . validate ( ) )  VAR_2 . validate ( ) (  METHOD_3 ( ( ( VAR_2 . METHOD_4 ( ) ) && ( VAR_1 . METHOD_4 ( ) ) ) ) )  METHOD_3 ( ( ( VAR_2 . METHOD_4 ( ) ) && ( VAR_1 . METHOD_4 ( ) ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) . get ( VAR_1 ) ) INIT = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) . get ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN ( VAR VAR ( TYPE TYPE_3<?> ) TYPE TYPE_3<?> ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_1 . METHOD_2 ( ) . METHOD_4 ( ) . get ( new org.ovirt.engine.core.compat.Guid ( VAR_2 . METHOD_5 ( ) ) ) ) INIT = TYPE_1 . METHOD_2 ( ) . METHOD_4 ( ) . get ( new org.ovirt.engine.core.compat.Guid ( VAR_2 . METHOD_5 ( ) ) ) ) VAR VAR (  return TYPE_4 . getInstance ( ) . METHOD_6 ( VAR_3 ) ; )  return TYPE_4 . getInstance ( ) . METHOD_6 ( VAR_3 ) ; ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1.ValidationResult ) RETURN TYPE_1.ValidationResult ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.Boolean ) TYPE java.lang.Boolean ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 < java.lang.Boolean > METHOD_2 ( VAR_3 ) ) INIT = VAR_2 < java.lang.Boolean > METHOD_2 ( VAR_3 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR ( IF IF ( COND VAR_1 || ( ! ( VAR_4 . METHOD_3 ( TYPE_3 . getParameters ( ) . METHOD_4 ( ) ) ) ) ) COND VAR_1 || ( ! ( VAR_4 . METHOD_3 ( TYPE_3 . getParameters ( ) . METHOD_4 ( ) ) ) ) ( THEN THEN (  return VAR_5 ; )  return VAR_5 ; ) THEN THEN ( ELSE ELSE (  return new TYPE_1 . ValidationResult ( VAR_6 ) ; )  return new TYPE_1 . ValidationResult ( VAR_6 ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_1 . METHOD_2 ( VAR_2 ) )  VAR_1 . METHOD_2 ( VAR_2 ) (  VAR_1 . METHOD_3 ( VAR_3 ) )  VAR_1 . METHOD_3 ( VAR_3 ) (  VAR_1 . METHOD_4 ( STRING_1 ) )  VAR_1 . METHOD_4 ( STRING_1 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_5 . METHOD_5 ( ) . get ( VAR_1 . METHOD_6 ( ) ) ) INIT = VAR_5 . METHOD_5 ( ) . get ( VAR_1 . METHOD_6 ( ) ) ) VAR VAR (  TYPE_2 . METHOD_7 ( VAR_4 ) )  TYPE_2 . METHOD_7 ( VAR_4 ) (  TYPE_2 . assertEquals ( VAR_1 , VAR_4 ) )  TYPE_2 . assertEquals ( VAR_1 , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( VAR_2 ) )  VAR_1 . METHOD_2 ( VAR_2 ) (  dao . METHOD_3 ( VAR_1 ) )  dao . METHOD_3 ( VAR_1 ) (  dao . METHOD_4 ( VAR_3 ) )  dao . METHOD_4 ( VAR_3 ) ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VdsNetworkInterface> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VdsNetworkInterface> ( NAME result ) NAME result ( INIT = dao . METHOD_5 ( VAR_2 ) ) INIT = dao . METHOD_5 ( VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_4 ) NAME VAR_4 ( INIT = false ) INIT = false ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME iface ) NAME iface ( IN result ) IN result ( BLOCK BLOCK (  VAR_4 |= iface . getName ( ) . equals ( VAR_1 . getName ( ) ) )  VAR_4 |= iface . getName ( ) . equals ( VAR_1 . getName ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  TYPE_1 . METHOD_6 ( VAR_4 ) )  TYPE_1 . METHOD_6 ( VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND TYPE_2 . METHOD_2 ( VAR_1 , STRING_1 ) ) COND TYPE_2 . METHOD_2 ( VAR_1 , STRING_1 ) ( THEN THEN (  return new TYPE_3 ( VAR_2 . AuditLogSeverity class ) ; )  return new TYPE_3 ( VAR_2 . AuditLogSeverity class ) ; ) THEN THEN ( ELSE ELSE ( IF IF ( COND TYPE_2 . METHOD_2 ( VAR_1 , STRING_2 ) ) COND TYPE_2 . METHOD_2 ( VAR_1 , STRING_2 ) ( THEN THEN (  return new TYPE_4 ( VAR_3 class ) ; )  return new TYPE_4 ( VAR_3 class ) ; ) THEN THEN ( ELSE ELSE (  return null ; )  return null ; ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME getValue ) NAME getValue ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME value ) NAME value ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( value != null ) && ( ( value . METHOD_1 ( ) ) != null ) ) && ( ! ( value . METHOD_1 ( ) . isEmpty ( ) ) ) ) COND ( ( value != null ) && ( ( value . METHOD_1 ( ) ) != null ) ) && ( ! ( value . METHOD_1 ( ) . isEmpty ( ) ) ) ( THEN THEN (  return TYPE_3 . METHOD_2 ( ) . METHOD_3 ( ) ; )  return TYPE_3 . METHOD_2 ( ) . METHOD_3 ( ) ; ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = resource . METHOD_2 ( ) . METHOD_2 ( ) . METHOD_2 ( ) ) INIT = resource . METHOD_2 ( ) . METHOD_2 ( ) . METHOD_2 ( ) ) VAR VAR (  VAR_1 . METHOD_3 ( VAR_2 ) )  VAR_1 . METHOD_3 ( VAR_2 ) (  VAR_1 . METHOD_4 ( VAR_3 ) )  VAR_1 . METHOD_4 ( VAR_3 ) (  VAR_1 . METHOD_5 ( VAR_4 ) )  VAR_1 . METHOD_5 ( VAR_4 ) (  VAR_1 . METHOD_6 ( VAR_5 ) )  VAR_1 . METHOD_6 ( VAR_5 ) (  VAR_1 . METHOD_7 ( VAR_6 ) )  VAR_1 . METHOD_7 ( VAR_6 ) (  VAR_1 . METHOD_8 ( VAR_7 ) )  VAR_1 . METHOD_8 ( VAR_7 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( 2 ) )  METHOD_2 ( 2 ) (  METHOD_3 ( METHOD_4 ( VAR_4 , VAR_5 class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_6 [ 0 ] } , VAR_1 , VAR_2 ) ) )  METHOD_3 ( METHOD_4 ( VAR_4 , VAR_5 class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_6 [ 0 ] } , VAR_1 , VAR_2 ) ) ( TRY TRY ( BLOCK BLOCK (  VAR_7 . METHOD_5 ( VAR_6 [ 0 ] . toString ( ) ) )  VAR_7 . METHOD_5 ( VAR_6 [ 0 ] . toString ( ) ) (  METHOD_6 ( STRING_2 ) )  METHOD_6 ( STRING_2 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_8 ) NAME VAR_8 ( BLOCK BLOCK (  METHOD_7 ( VAR_8 , VAR_3 ) )  METHOD_7 ( VAR_8 , VAR_3 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( VAR_2 ) ) ) . thenReturn ( new java.util.ArrayList < > ( ) ) )  org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( VAR_2 ) ) ) . thenReturn ( new java.util.ArrayList < > ( ) ) ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_4 ( STRING_1 ) ) INIT = METHOD_4 ( STRING_1 ) ) VAR VAR (  VAR_3 . METHOD_5 ( STRING_2 ) )  VAR_3 . METHOD_5 ( STRING_2 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_6 ( TYPE_3 . METHOD_7 ( ) , VAR_3 ) ) INIT = METHOD_6 ( TYPE_3 . METHOD_7 ( ) , VAR_3 ) ) VAR VAR (  VAR_4 . METHOD_8 ( ) )  VAR_4 . METHOD_8 ( ) (  org.mockito.Mockito . METHOD_9 ( VAR_1 ) . METHOD_2 ( TYPE_1 . any ( VAR_5 . Guid class ) ) )  org.mockito.Mockito . METHOD_9 ( VAR_1 ) . METHOD_2 ( TYPE_1 . any ( VAR_5 . Guid class ) ) (  org.mockito.Mockito . METHOD_10 ( VAR_1 ) )  org.mockito.Mockito . METHOD_10 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_1 ) ( model ) ) ) INIT = ( ( TYPE_1 ) ( model ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2<org.ovirt.engine.core.common.businessentities.VDS> ) TYPE TYPE_2<org.ovirt.engine.core.common.businessentities.VDS> ( NAME hosts ) NAME hosts ( INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ) ( ( ( TYPE_3 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) ) ) INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ) ( ( ( TYPE_3 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) ) ) VAR VAR (  VAR_2 . METHOD_2 ( hosts ) )  VAR_2 . METHOD_2 ( hosts ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME storageDomain ) NAME storageDomain ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  VAR_1 . METHOD_1 ( VAR_2 ) )  VAR_1 . METHOD_1 ( VAR_2 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR (  TYPE_3 . assertEquals ( VAR_2 , VAR_3 ) )  TYPE_3 . assertEquals ( VAR_2 , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.util.List<java.lang.String> ) RETURN java.util.List<java.lang.String> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.Network> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.Network> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1<java.lang.String> ) TYPE TYPE_1<java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME list ) NAME list ( INIT = new java.util.ArrayList < java.lang.String > ( ) ) INIT = new java.util.ArrayList < java.lang.String > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.Network ) TYPE org.ovirt.engine.core.common.businessentities.Network ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( IF IF ( COND ( ! ( VAR_3 . METHOD_2 ( ) ) ) && ( VAR_2 . METHOD_3 ( VAR_3 . getName ( ) ) ) ) COND ( ! ( VAR_3 . METHOD_2 ( ) ) ) && ( VAR_2 . METHOD_3 ( VAR_3 . getName ( ) ) ) ( THEN THEN (  list . add ( VAR_3 . getName ( ) ) )  list . add ( VAR_3 . getName ( ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return list ; )  return list ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ( INIT = ( ( TYPE_1 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) INIT = ( ( TYPE_1 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( java.util.List < TYPE_2 > ) ( returnValue ) ) ) INIT = ( ( java.util.List < TYPE_2 > ) ( returnValue ) ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK (  VAR_4 . add ( VAR_3 ) )  VAR_4 . add ( VAR_3 ) (  VAR_5 . put ( VAR_3 . METHOD_1 ( ) , new TYPE_2 ( VAR_3 ) ) )  VAR_5 . put ( VAR_3 . METHOD_1 ( ) , new TYPE_2 ( VAR_3 ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  METHOD_2 ( ) )  METHOD_2 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_7 ( VAR_1 ) ) INIT = new TYPE_7 ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_1 . getInstance ( STRING_1 ) ) INIT = TYPE_1 . getInstance ( STRING_1 ) ) VAR VAR (  VAR_4 . METHOD_2 ( VAR_3 , VAR_2 . METHOD_3 ( ) ) )  VAR_4 . METHOD_2 ( VAR_3 , VAR_2 . METHOD_3 ( ) ) (  return VAR_4 ; )  return VAR_4 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( getModel ( ) . METHOD_2 ( ) ) == null ) COND ( getModel ( ) . METHOD_2 ( ) ) == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ) TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ( NAME cluster ) NAME cluster ( INIT = getModel ( ) . METHOD_2 ( ) ) INIT = getModel ( ) . METHOD_2 ( ) ) VAR VAR (  getModel ( ) . METHOD_3 ( ) . METHOD_4 ( getModel ( ) . METHOD_5 ( ) . get ( cluster . METHOD_6 ( ) ) ) )  getModel ( ) . METHOD_3 ( ) . METHOD_4 ( getModel ( ) . METHOD_5 ( ) . get ( cluster . METHOD_6 ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME sender ) NAME sender ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME args ) NAME args ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_3 ) ( args ) ) ) INIT = ( ( TYPE_3 ) ( args ) ) ) VAR VAR ( IF IF ( COND STRING_1 . equals ( VAR_3 ) ) COND STRING_1 . equals ( VAR_3 ) ( THEN THEN ( IF IF ( COND ( VAR_4 . getModel ( ) . METHOD_2 ( ) ) != null ) COND ( VAR_4 . getModel ( ) . METHOD_2 ( ) ) != null ( THEN THEN ( IF IF ( COND ( METHOD_3 ( ) . getTable ( ) ) != null ) COND ( METHOD_3 ( ) . getTable ( ) ) != null ( THEN THEN (  METHOD_3 ( ) . getTable ( ) . METHOD_4 ( VAR_5 ) )  METHOD_3 ( ) . getTable ( ) . METHOD_4 ( VAR_5 ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( STRING_1 , VAR_2 , STRING_2 , STRING_3 , STRING_4 ) ) INIT = METHOD_2 ( STRING_1 , VAR_2 , STRING_2 , STRING_3 , STRING_4 ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_3 ) NAME VAR_3 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR (  VAR_3 . add ( VAR_1 ) )  VAR_3 . add ( VAR_1 ) (  org.mockito.Mockito.when ( VAR_4 . METHOD_3 ( VAR_1 ) ) . thenReturn ( VAR_3 ) )  org.mockito.Mockito.when ( VAR_4 . METHOD_3 ( VAR_1 ) ) . thenReturn ( VAR_3 ) ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_5 ) NAME VAR_5 ( INIT = command . METHOD_4 ( VAR_1 ) ) INIT = command . METHOD_4 ( VAR_1 ) ) VAR VAR (  TYPE_2 . METHOD_5 ( VAR_5 ) )  TYPE_2 . METHOD_5 ( VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME entity ) NAME entity ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.network ) TYPE org.ovirt.engine.core.common.businessentities.network ( NAME network ) NAME network ( INIT = METHOD_2 ( model ) ) INIT = METHOD_2 ( model ) ) VAR VAR (  model . METHOD_3 ( ) . setId ( network . getId ( ) . toString ( ) ) )  model . METHOD_3 ( ) . setId ( network . getId ( ) . toString ( ) ) (  model . METHOD_3 ( ) . METHOD_4 ( null ) )  model . METHOD_3 ( ) . METHOD_4 ( null ) (  return model ; )  return model ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME source ) NAME source ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( source == null ) || ( ( source . METHOD_2 ( ) . length ( ) ) == 0 ) ) COND ( source == null ) || ( ( source . METHOD_2 ( ) . length ( ) ) == 0 ) ( THEN THEN (  return source ; )  return source ; ) THEN THEN ( ELSE ELSE ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . getInstance ( STRING_1 ) ) INIT = TYPE_2 . getInstance ( STRING_1 ) ) VAR VAR (  VAR_1 . METHOD_3 ( VAR_2 , TYPE_3 . METHOD_4 ( ) . METHOD_5 ( ) ) )  VAR_1 . METHOD_3 ( VAR_2 , TYPE_3 . METHOD_4 ( ) . METHOD_5 ( ) ) (  return new java.lang.String ( VAR_1 . METHOD_6 ( new TYPE_4 ( ) . METHOD_7 ( source ) ) , TYPE_5 . METHOD_8 ( STRING_2 ) ) ; )  return new java.lang.String ( VAR_1 . METHOD_6 ( new TYPE_4 ( ) . METHOD_7 ( source ) ) , TYPE_5 . METHOD_8 ( STRING_2 ) ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source != null ? source : new java.util.ArrayList < TYPE_1 > ( ) ; )  return source != null ? source : new java.util.ArrayList < TYPE_1 > ( ) ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : new java.util.ArrayList < TYPE_1 > ( ) ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : new java.util.ArrayList < TYPE_1 > ( ) ; } } (  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new TYPE_2 ( VAR_1 ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new TYPE_2 ( VAR_1 ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( STRING_1 , VAR_2 , VAR_3 , INT_1 , 0 ) ) INIT = METHOD_2 ( STRING_1 , VAR_2 , VAR_3 , INT_1 , 0 ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_4 ) NAME VAR_4 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_1 ) INIT = VAR_1 ) VAR VAR (  VAR_4 . add ( VAR_5 ) )  VAR_4 . add ( VAR_5 ) (  org.mockito.Mockito.when ( VAR_6 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ) . thenReturn ( VAR_4 ) )  org.mockito.Mockito.when ( VAR_6 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ) . thenReturn ( VAR_4 ) ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_7 ) NAME VAR_7 ( INIT = command . METHOD_5 ( VAR_1 ) ) INIT = command . METHOD_5 ( VAR_1 ) ) VAR VAR (  TYPE_2 . METHOD_6 ( VAR_7 ) )  TYPE_2 . METHOD_6 ( VAR_7 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME VAR_1 ) NAME VAR_1 ( INIT = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ) INIT = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ) VAR VAR ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_3 = ( ( java.util.HashMap < java.lang.Integer , java.lang.String > ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) )  VAR_3 = ( ( java.util.HashMap < java.lang.Integer , java.lang.String > ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) (  TYPE_2 . getInstance ( ) . METHOD_2 ( new TYPE_3 ( VAR_3 ) ) )  TYPE_2 . getInstance ( ) . METHOD_2 ( new TYPE_3 ( VAR_3 ) ) ) BLOCK BLOCK ) METHOD METHOD (  VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { VAR_3 = ( ( java.util.HashMap < java.lang.Integer , java.lang.String > ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ; TYPE_2 . getInstance ( ) . METHOD_2 ( new TYPE_3 ( VAR_3 ) ) ; } } )  VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { VAR_3 = ( ( java.util.HashMap < java.lang.Integer , java.lang.String > ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ; TYPE_2 . getInstance ( ) . METHOD_2 ( new TYPE_3 ( VAR_3 ) ) ; } } (  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_4 , new TYPE_4 ( VAR_5 ) , VAR_1 ) )  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_4 , new TYPE_4 ( VAR_5 ) , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.VdcQueryReturnValue ) TYPE TYPE_1.VdcQueryReturnValue ( NAME returnValue ) NAME returnValue ( INIT = new TYPE_1 . VdcQueryReturnValue ( ) ) INIT = new TYPE_1 . VdcQueryReturnValue ( ) ) VAR VAR (  returnValue . METHOD_2 ( true ) )  returnValue . METHOD_2 ( true ) (  returnValue . METHOD_3 ( VAR_1 ) )  returnValue . METHOD_3 ( VAR_1 ) (  org.mockito.Mockito.when ( VAR_2 . RunQuery ( TYPE_2 . METHOD_4 ( VAR_3 ) , TYPE_3 . METHOD_5 ( VAR_4 class ) ) ) . thenReturn ( returnValue ) )  org.mockito.Mockito.when ( VAR_2 . RunQuery ( TYPE_2 . METHOD_4 ( VAR_3 ) , TYPE_3 . METHOD_5 ( VAR_4 class ) ) ) . thenReturn ( returnValue ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2.Disk ) TYPE TYPE_2.Disk ( NAME object ) NAME object ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( object . METHOD_2 ( ) ) == null ) COND ( object . METHOD_2 ( ) ) == null ( THEN THEN (  return TYPE_3 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; )  return TYPE_3 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; ) THEN THEN ( ELSE ELSE ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME status ) NAME status ( INIT = TYPE_4 . getInstance ( ) . METHOD_5 ( object . METHOD_2 ( ) ) ) INIT = TYPE_4 . getInstance ( ) . METHOD_5 ( object . METHOD_2 ( ) ) ) VAR VAR (  return TYPE_3 . METHOD_6 ( status ) ; )  return TYPE_3 . METHOD_6 ( status ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_2 ( VAR_3 [ VAR_4 ] . toString ( ) ) ) INIT = VAR_2 . METHOD_2 ( VAR_3 [ VAR_4 ] . toString ( ) ) ) VAR VAR (  METHOD_3 ( METHOD_4 ( ) ) )  METHOD_3 ( METHOD_4 ( ) ) (  METHOD_5 ( STRING_1 , null , false ) )  METHOD_5 ( STRING_1 , null , false ) (  METHOD_6 ( VAR_1 . get ( ) , VAR_4 ) )  METHOD_6 ( VAR_1 . get ( ) , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( model . METHOD_2 ( ) ) instanceof TYPE_2 ) && ( METHOD_3 ( ) ) ) INIT = ( ( model . METHOD_2 ( ) ) instanceof TYPE_2 ) && ( METHOD_3 ( ) ) ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = model . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( ) ) INIT = model . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( ) ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( model . METHOD_4 ( ) . METHOD_7 ( ) ) != null ) INIT = ( model . METHOD_4 ( ) . METHOD_7 ( ) ) != null ) VAR VAR (  return ( VAR_1 && VAR_2 ) && VAR_3 ; )  return ( VAR_1 && VAR_2 ) && VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND VAR_1 < java.lang.Boolean > METHOD_2 ( VAR_2 ) ) COND VAR_1 < java.lang.Boolean > METHOD_2 ( VAR_2 ) ( THEN THEN (  VAR_3 . METHOD_3 ( STRING_1 ) )  VAR_3 . METHOD_3 ( STRING_1 ) ) THEN THEN ) IF IF ( IF IF ( COND METHOD_4 ( ) ) COND METHOD_4 ( ) ( THEN THEN ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.compat.Guid> ) TYPE java.util.List<org.ovirt.engine.core.compat.Guid> ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_5 ( ) ) INIT = METHOD_5 ( ) ) VAR VAR (  METHOD_6 ( ) )  METHOD_6 ( ) (  METHOD_7 ( ) )  METHOD_7 ( ) (  METHOD_8 ( ) )  METHOD_8 ( ) (  METHOD_9 ( ) )  METHOD_9 ( ) (  METHOD_10 ( ) )  METHOD_10 ( ) (  METHOD_11 ( VAR_4 ) )  METHOD_11 ( VAR_4 ) (  METHOD_12 ( ) )  METHOD_12 ( ) ( IF IF ( COND ! ( TYPE_1 . METHOD_13 ( VAR_5 . METHOD_14 ( ) ) ) ) COND ! ( TYPE_1 . METHOD_13 ( VAR_5 . METHOD_14 ( ) ) ) ( THEN THEN (  METHOD_15 ( ) )  METHOD_15 ( ) ) THEN THEN ) IF IF (  METHOD_16 ( ) )  METHOD_16 ( ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 = new TYPE_1 ( ) )  VAR_1 = new TYPE_1 ( ) (  VAR_1 . setId ( params . METHOD_2 ( ) ) )  VAR_1 . setId ( params . METHOD_2 ( ) ) (  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( command ) . METHOD_3 ( ) )  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( command ) . METHOD_3 ( ) (  org.mockito.Mockito.when ( VAR_2 . get ( params . METHOD_2 ( ) ) ) . thenReturn ( VAR_1 ) )  org.mockito.Mockito.when ( VAR_2 . get ( params . METHOD_2 ( ) ) ) . thenReturn ( VAR_1 ) (  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( command ) . METHOD_4 ( ) )  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( command ) . METHOD_4 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.Network ) TYPE org.ovirt.engine.core.common.businessentities.Network ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( STRING_1 ) ) INIT = METHOD_2 ( STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME nic ) NAME nic ( INIT = METHOD_3 ( STRING_2 , VAR_1 ) ) INIT = METHOD_3 ( STRING_2 , VAR_1 ) ) VAR VAR (  nic . METHOD_4 ( ( ! ( VAR_1 . METHOD_5 ( ) ) ) ) )  nic . METHOD_4 ( ( ! ( VAR_1 . METHOD_5 ( ) ) ) ) (  METHOD_6 ( VAR_1 ) )  METHOD_6 ( VAR_1 ) (  METHOD_7 ( nic ) )  METHOD_7 ( nic ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_8 ( METHOD_9 ( nic ) ) ) INIT = METHOD_8 ( METHOD_9 ( nic ) ) ) VAR VAR (  METHOD_10 ( VAR_2 ) )  METHOD_10 ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 = new TYPE_1 ( VAR_2 , VAR_3 , false ) )  VAR_1 = new TYPE_1 ( VAR_2 , VAR_3 , false ) (  command = org.mockito.Mockito . METHOD_2 ( new TYPE_2 ( VAR_1 , null ) ) )  command = org.mockito.Mockito . METHOD_2 ( new TYPE_2 ( VAR_1 , null ) ) (  org.mockito.Mockito.doReturn ( validator ) . when ( command ) . METHOD_3 ( ) )  org.mockito.Mockito.doReturn ( validator ) . when ( command ) . METHOD_3 ( ) (  org.mockito.Mockito.doReturn ( VAR_4 ) . when ( command ) . METHOD_4 ( ) )  org.mockito.Mockito.doReturn ( VAR_4 ) . when ( command ) . METHOD_4 ( ) (  org.mockito.Mockito.doReturn ( VAR_5 ) . when ( command ) . METHOD_5 ( ) )  org.mockito.Mockito.doReturn ( VAR_5 ) . when ( command ) . METHOD_5 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  return new TYPE_1 ( new TYPE_2 ( disk . getId ( ) , TYPE_3 . METHOD_2 ( ) ) , VAR_1 , TYPE_4 . getName ( ) , STRING_1 , 0 , null , true , TYPE_3 . getParameters ( ) . METHOD_3 ( ) , TYPE_3 . getParameters ( ) . METHOD_4 ( ) , STRING_1 , null , TYPE_3 . getParameters ( ) . METHOD_5 ( ) ) ; )  return new TYPE_1 ( new TYPE_2 ( disk . getId ( ) , TYPE_3 . METHOD_2 ( ) ) , VAR_1 , TYPE_4 . getName ( ) , STRING_1 , 0 , null , true , TYPE_3 . getParameters ( ) . METHOD_3 ( ) , TYPE_3 . getParameters ( ) . METHOD_4 ( ) , STRING_1 , null , TYPE_3 . getParameters ( ) . METHOD_5 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.queries.IdQueryParameters ) TYPE org.ovirt.engine.core.common.queries.IdQueryParameters ( NAME params ) NAME params ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  org.mockito.Mockito.when ( params . getId ( ) ) . thenReturn ( VAR_1 ) )  org.mockito.Mockito.when ( params . getId ( ) ) . thenReturn ( VAR_1 ) ( VAR VAR ( TYPE TYPE_1<org.ovirt.engine.core.common.queries.IdQueryParameters> ) TYPE TYPE_1<org.ovirt.engine.core.common.queries.IdQueryParameters> ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_3 ( ) ) INIT = METHOD_3 ( ) ) VAR VAR (  VAR_2 . METHOD_4 ( ) )  VAR_2 . METHOD_4 ( ) ( VAR VAR ( TYPE java.util.List<TYPE_2.DiskImage> ) TYPE java.util.List<TYPE_2.DiskImage> ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_2 . METHOD_5 ( ) . getReturnValue ( ) ) INIT = VAR_2 . METHOD_5 ( ) . getReturnValue ( ) ) VAR VAR (  TYPE_3 . assertEquals ( STRING_1 , VAR_3 . size ( ) , 2 ) )  TYPE_3 . assertEquals ( STRING_1 , VAR_3 . size ( ) , 2 ) (  TYPE_3 . assertEquals ( STRING_2 , VAR_3 . get ( 0 ) . METHOD_6 ( ) , VAR_4 ) )  TYPE_3 . assertEquals ( STRING_2 , VAR_3 . get ( 0 ) . METHOD_6 ( ) , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . getParameters ( ) . METHOD_2 ( ) ) INIT = TYPE_2 . getParameters ( ) . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME user ) NAME user ( INIT = null ) INIT = null ) VAR VAR ( IF IF ( COND ! ( TYPE_3 . METHOD_3 ( VAR_1 ) ) ) COND ! ( TYPE_3 . METHOD_3 ( VAR_1 ) ) ( THEN THEN (  user = TYPE_4 . getInstance ( ) . METHOD_4 ( VAR_1 ) )  user = TYPE_4 . getInstance ( ) . METHOD_4 ( VAR_1 ) ) THEN THEN ) IF IF (  return user ; )  return user ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME result ) NAME result ( INIT = METHOD_2 ( VAR_4 , new TYPE_3 ( VAR_1 . getId ( ) , VAR_2 , VAR_3 , null , false , true ) ) ) INIT = METHOD_2 ( VAR_4 , new TYPE_3 ( VAR_1 . getId ( ) , VAR_2 , VAR_3 , null , false , true ) ) ) VAR VAR (  return result . getSucceeded ( ) ? ( ( TYPE_1 ) ( result . getReturnValue ( ) ) ) : null ; )  return result . getSucceeded ( ) ? ( ( TYPE_1 ) ( result . getReturnValue ( ) ) ) : null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) . METHOD_3 ( getVm ( ) . METHOD_4 ( ) ) )  METHOD_2 ( ) . METHOD_3 ( getVm ( ) . METHOD_4 ( ) ) (  getVm ( ) . METHOD_5 ( VAR_1 ) )  getVm ( ) . METHOD_5 ( VAR_1 ) (  METHOD_6 ( VAR_2 , new TYPE_1 ( METHOD_7 ( ) , getVm ( ) . METHOD_4 ( ) ) ) )  METHOD_6 ( VAR_2 , new TYPE_1 ( METHOD_7 ( ) , getVm ( ) . METHOD_4 ( ) ) ) (  METHOD_2 ( ) . METHOD_8 ( ) )  METHOD_2 ( ) . METHOD_8 ( ) (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  diskImage . METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) )  diskImage . METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) (  diskImage . setId ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) )  diskImage . setId ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) (  diskImage . METHOD_4 ( VAR_1 ) )  diskImage . METHOD_4 ( VAR_1 ) (  diskImage . METHOD_5 ( VAR_1 ) )  diskImage . METHOD_5 ( VAR_1 ) (  diskImage . METHOD_6 ( METHOD_7 ( ) ) )  diskImage . METHOD_6 ( METHOD_7 ( ) ) (  TYPE_2 . METHOD_8 ( diskImage , getVm ( ) ) )  TYPE_2 . METHOD_8 ( diskImage , getVm ( ) ) (  TYPE_2 . METHOD_9 ( diskImage ) )  TYPE_2 . METHOD_9 ( diskImage ) (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  result = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . getParameters ( ) . METHOD_4 ( ) . toString ( ) ) )  result = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . getParameters ( ) . METHOD_4 ( ) . toString ( ) ) (  TYPE_1 . METHOD_5 ( ) )  TYPE_1 . METHOD_5 ( ) ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.compat.Guid> ) TYPE java.util.ArrayList<org.ovirt.engine.core.compat.Guid> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( result . METHOD_6 ( ) . length ) ) INIT = new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( result . METHOD_6 ( ) . length ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME id ) NAME id ( IN result . METHOD_6 ( ) ) IN result . METHOD_6 ( ) ( BLOCK BLOCK (  VAR_1 . add ( new org.ovirt.engine.core.compat.Guid ( id ) ) )  VAR_1 . add ( new org.ovirt.engine.core.compat.Guid ( id ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  METHOD_7 ( VAR_1 ) )  METHOD_7 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  METHOD_3 ( ) )  METHOD_3 ( ) (  METHOD_4 ( ) )  METHOD_4 ( ) (  TYPE_1 . METHOD_5 ( command . METHOD_6 ( ) ) )  TYPE_1 . METHOD_5 ( command . METHOD_6 ( ) ) (  TYPE_1 . METHOD_7 ( command . getReturnValue ( ) . METHOD_8 ( ) . METHOD_9 ( TYPE_2 . toString ( ) ) ) )  TYPE_1 . METHOD_7 ( command . getReturnValue ( ) . METHOD_8 ( ) . METHOD_9 ( TYPE_2 . toString ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.HashMap<java.lang.Boolean,org.ovirt.engine.core.common.businessentities.VmTemplate> ) TYPE java.util.HashMap<java.lang.Boolean,org.ovirt.engine.core.common.businessentities.VmTemplate> ( NAME map ) NAME map ( INIT = ( ( TYPE_1 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) INIT = ( ( TYPE_1 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VmTemplate> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VmTemplate> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR (  VAR_2 . add ( map . get ( true ) ) )  VAR_2 . add ( map . get ( true ) ) (  setItems ( VAR_2 ) )  setItems ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.ArrayList<java.lang.String> ) RETURN java.util.ArrayList<java.lang.String> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<java.lang.String> ) TYPE java.util.ArrayList<java.lang.String> ( NAME list ) NAME list ( INIT = new java.util.ArrayList < > ( VAR_1 . length ) ) INIT = new java.util.ArrayList < > ( VAR_1 . length ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME e ) NAME e ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  e = e . METHOD_2 ( ) )  e = e . METHOD_2 ( ) ( IF IF ( COND ( e . length ( ) ) > 0 ) COND ( e . length ( ) ) > 0 ( THEN THEN (  list . add ( e ) )  list . add ( e ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return list ; )  return list ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.Object[] ) TYPE java.lang.Object[] ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( java.lang.Object [ ] ) ( target ) ) ) INIT = ( ( java.lang.Object [ ] ) ( target ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_1 ) ( VAR_1 [ 0 ] ) ) ) INIT = ( ( TYPE_1 ) ( VAR_1 [ 0 ] ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( ( TYPE_2 ) ( VAR_1 [ 1 ] ) ) ) INIT = ( ( TYPE_2 ) ( VAR_1 [ 1 ] ) ) ) VAR VAR (  VAR_2 . METHOD_2 ( VAR_2 , VAR_3 , ( returnValue == null ) ) )  VAR_2 . METHOD_2 ( VAR_2 , VAR_3 , ( returnValue == null ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ) ( returnValue ) ) )  VAR_1 = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ) ( returnValue ) ) (  METHOD_3 ( ) )  METHOD_3 ( ) ) BLOCK BLOCK ) METHOD METHOD (  TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( null , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ) ( returnValue ) ) ; METHOD_3 ( ) ; } } , VAR_2 ) , ( ( METHOD_4 ( ) ) + STRING_1 ) ) )  TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( null , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ) ( returnValue ) ) ; METHOD_3 ( ) ; } } , VAR_2 ) , ( ( METHOD_4 ( ) ) + STRING_1 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.Object>> ) RETURN java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.Object>> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_1 . getSucceeded ( ) ) ) COND ! ( VAR_1 . getSucceeded ( ) ) ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.Object>> ) TYPE java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.Object>> ( NAME result ) NAME result ( INIT = ( ( java.util.Map < java.lang.String , java.util.Map < java.lang.String , java.lang.Object > > ) ( VAR_1 . getReturnValue ( ) ) ) ) INIT = ( ( java.util.Map < java.lang.String , java.util.Map < java.lang.String , java.lang.Object > > ) ( VAR_1 . getReturnValue ( ) ) ) ) VAR VAR (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  org.mockito.Mockito.doReturn ( new TYPE_1 . ValidationResult ( VAR_1 ) ) . when ( VAR_2 ) . METHOD_3 ( TYPE_2 . METHOD_4 ( ) ) )  org.mockito.Mockito.doReturn ( new TYPE_1 . ValidationResult ( VAR_1 ) ) . when ( VAR_2 ) . METHOD_3 ( TYPE_2 . METHOD_4 ( ) ) (  TYPE_3 . METHOD_5 ( command . validate ( ) ) )  TYPE_3 . METHOD_5 ( command . validate ( ) ) (  TYPE_3 . METHOD_6 ( command . getReturnValue ( ) . METHOD_7 ( ) . METHOD_8 ( TYPE_4 . toString ( ) ) ) )  TYPE_3 . METHOD_6 ( command . getReturnValue ( ) . METHOD_7 ( ) . METHOD_8 ( TYPE_4 . toString ( ) ) ) (  org.mockito.Mockito . METHOD_9 ( VAR_2 ) . METHOD_10 ( ) )  org.mockito.Mockito . METHOD_9 ( VAR_2 ) . METHOD_10 ( ) (  org.mockito.Mockito . METHOD_9 ( VAR_2 ) . METHOD_3 ( TYPE_2 . METHOD_4 ( ) ) )  org.mockito.Mockito . METHOD_9 ( VAR_2 ) . METHOD_3 ( TYPE_2 . METHOD_4 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ( STRING_1 + ( VAR_2 ) ) , VAR_3 . Disk ) ) INIT = new TYPE_1 ( ( STRING_1 + ( VAR_2 ) ) , VAR_3 . Disk ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2<TYPE_1> ) TYPE TYPE_2<TYPE_1> ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_2 ( VAR_1 ) ) INIT = METHOD_2 ( VAR_1 ) ) VAR VAR (  VAR_4 . METHOD_3 ( ) )  VAR_4 . METHOD_3 ( ) (  TYPE_3 . METHOD_4 ( ( ( VAR_5 ) == ( VAR_4 . METHOD_5 ( ) . getReturnValue ( ) ) ) ) )  TYPE_3 . METHOD_4 ( ( ( VAR_5 ) == ( VAR_4 . METHOD_5 ( ) . getReturnValue ( ) ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME type ) NAME type ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.Object> ) TYPE java.util.Map<java.lang.String,java.lang.Object> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE java.lang.Boolean ) TYPE java.lang.Boolean ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.String> ) TYPE java.util.Map<java.lang.String,java.lang.String> ( NAME VAR_6 ) NAME VAR_6 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_7 ) NAME VAR_7 ( INIT = TYPE_5 . METHOD_1 ( id , type , VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_6 ) ) INIT = TYPE_5 . METHOD_1 ( id , type , VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_6 ) ) VAR VAR ( IF IF ( COND TYPE_6 . METHOD_2 ( VAR_5 ) ) COND TYPE_6 . METHOD_2 ( VAR_5 ) ( THEN THEN (  VAR_7 . METHOD_3 ( VAR_5 ) )  VAR_7 . METHOD_3 ( VAR_5 ) ) THEN THEN ) IF IF (  return VAR_7 ; )  return VAR_7 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_1 ) ( model ) ) ) INIT = ( ( TYPE_1 ) ( model ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.ArrayList<TYPE_2> ) TYPE java.util.ArrayList<TYPE_2> ( NAME list ) NAME list ( INIT = ( ( java.util.ArrayList < TYPE_2 > ) ( ( ( TYPE_3 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) ) ) INIT = ( ( java.util.ArrayList < TYPE_2 > ) ( ( ( TYPE_3 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) ) ) VAR VAR (  VAR_2 . setItems ( list ) )  VAR_2 . setItems ( list ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND org.ovirt.engine.ui.frontend.Frontend . METHOD_2 ( VAR_1 ) ) COND org.ovirt.engine.ui.frontend.Frontend . METHOD_2 ( VAR_1 ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  VAR_2 . log ( VAR_3 , ( STRING_1 + VAR_1 ) , VAR_1 ) )  VAR_2 . log ( VAR_3 , ( STRING_1 + VAR_1 ) , VAR_1 ) (  org.ovirt.engine.ui.frontend.Frontend . METHOD_3 ( VAR_1 ) )  org.ovirt.engine.ui.frontend.Frontend . METHOD_3 ( VAR_1 ) (  VAR_4 . METHOD_4 ( null ) )  VAR_4 . METHOD_4 ( null ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( VAR_2 ) && ( ! ( VAR_3 ) ) ) INIT = ( VAR_2 ) && ( ! ( VAR_3 ) ) ) VAR VAR ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  VAR_4 . METHOD_2 ( VAR_5 , STRING_1 ) )  VAR_4 . METHOD_2 ( VAR_5 , STRING_1 ) ) THEN THEN ) IF IF (  VAR_6 . METHOD_3 ( VAR_7 , VAR_1 ) )  VAR_6 . METHOD_3 ( VAR_7 , VAR_1 ) (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Boolean ) RETURN java.lang.Boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( VAR_1 , new TYPE_2 ( METHOD_4 ( ) , getParameters ( ) . METHOD_5 ( ) ) ) )  TYPE_1 . getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( VAR_1 , new TYPE_2 ( METHOD_4 ( ) , getParameters ( ) . METHOD_5 ( ) ) ) ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.network.Network ) TYPE org.ovirt.engine.core.common.businessentities.network.Network ( NAME VAR_2 ) NAME VAR_2 ( IN METHOD_6 ( ) ) IN METHOD_6 ( ) ( BLOCK BLOCK (  TYPE_3 . METHOD_7 ( METHOD_8 ( ) , VAR_2 ) )  TYPE_3 . METHOD_7 ( METHOD_8 ( ) , VAR_2 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return java.lang.Boolean . TRUE ; )  return java.lang.Boolean . TRUE ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( context . METHOD_2 ( ) ) == null ) COND ( context . METHOD_2 ( ) ) == null ( THEN THEN ( VAR VAR ( TYPE java.util.Map<java.lang.String,TYPE_1<java.lang.String,java.lang.String>> ) TYPE java.util.Map<java.lang.String,TYPE_1<java.lang.String,java.lang.String>> ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_3 ( ) ) INIT = METHOD_3 ( ) ) VAR VAR ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 ( VAR_1 , null ) ) INIT = new TYPE_2 ( VAR_1 , null ) ) VAR VAR (  METHOD_4 ( ) . METHOD_5 ( VAR_2 ) )  METHOD_4 ( ) . METHOD_5 ( VAR_2 ) (  context . METHOD_6 ( VAR_2 ) )  context . METHOD_6 ( VAR_2 ) (  log . METHOD_7 ( STRING_1 , VAR_2 ) )  log . METHOD_7 ( STRING_1 , VAR_2 ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( ) . METHOD_3 ( TYPE_2 . METHOD_4 ( TYPE_1 . getParameters ( ) . METHOD_5 ( ) , TYPE_3 . METHOD_6 ( TYPE_4 . getInstance ( ) . METHOD_7 ( TYPE_1 . getParameters ( ) . METHOD_5 ( ) ) , TYPE_1 . getParameters ( ) . METHOD_8 ( ) ) ) ) )  TYPE_1 . METHOD_2 ( ) . METHOD_3 ( TYPE_2 . METHOD_4 ( TYPE_1 . getParameters ( ) . METHOD_5 ( ) , TYPE_3 . METHOD_6 ( TYPE_4 . getInstance ( ) . METHOD_7 ( TYPE_1 . getParameters ( ) . METHOD_5 ( ) ) , TYPE_1 . getParameters ( ) . METHOD_8 ( ) ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( vm ) ) ) INIT = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( vm ) ) ) VAR VAR (  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_3 ( vm ) )  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_3 ( vm ) (  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( VAR_1 ) . METHOD_4 ( ) )  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( VAR_1 ) . METHOD_4 ( ) (  org.mockito.Mockito.doReturn ( METHOD_5 ( ) ) . when ( VAR_3 ) . get ( TYPE_2 . any ( VAR_4 class ) ) )  org.mockito.Mockito.doReturn ( METHOD_5 ( ) ) . when ( VAR_3 ) . get ( TYPE_2 . any ( VAR_4 class ) ) (  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( VAR_1 ) . METHOD_6 ( ) )  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( VAR_1 ) . METHOD_6 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_4 . METHOD_2 ( VAR_1 ) )  VAR_4 . METHOD_2 ( VAR_1 ) (  VAR_4 . METHOD_3 ( VAR_2 ) )  VAR_4 . METHOD_3 ( VAR_2 ) (  VAR_4 . METHOD_4 ( VAR_5 ) )  VAR_4 . METHOD_4 ( VAR_5 ) (  VAR_4 . METHOD_5 ( VAR_3 ) )  VAR_4 . METHOD_5 ( VAR_3 ) (  return VAR_4 ; )  return VAR_4 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( ) ) INIT = TYPE_1 . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  VAR_1 = TYPE_1 . METHOD_3 ( ) . METHOD_4 ( ) )  VAR_1 = TYPE_1 . METHOD_3 ( ) . METHOD_4 ( ) ( IF IF ( COND ! VAR_1 ) COND ! VAR_1 ( THEN THEN (  addCanDoActionMessage ( VAR_2 ) )  addCanDoActionMessage ( VAR_2 ) ( IF IF ( COND log . METHOD_5 ( ) ) COND log . METHOD_5 ( ) ( THEN THEN (  log . METHOD_6 ( STRING_1 ) )  log . METHOD_6 ( STRING_1 ) ) THEN THEN ) IF IF ) THEN THEN ( ELSE ELSE (  VAR_1 = TYPE_1 . METHOD_7 ( ) )  VAR_1 = TYPE_1 . METHOD_7 ( ) ) ELSE ELSE ) IF IF ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_1 . METHOD_2 ( VAR_2 ) )  VAR_1 . METHOD_2 ( VAR_2 ) (  VAR_1 . METHOD_3 ( STRING_1 ) )  VAR_1 . METHOD_3 ( STRING_1 ) (  VAR_3 . METHOD_4 ( ) . METHOD_5 ( STRING_2 , VAR_1 ) )  VAR_3 . METHOD_4 ( ) . METHOD_5 ( STRING_2 , VAR_1 ) (  VAR_1 . METHOD_6 ( VAR_4 ) )  VAR_1 . METHOD_6 ( VAR_4 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_3 . METHOD_4 ( ) . get ( VAR_1 . METHOD_7 ( ) ) ) INIT = VAR_3 . METHOD_4 ( ) . get ( VAR_1 . METHOD_7 ( ) ) ) VAR VAR (  TYPE_2 . METHOD_8 ( VAR_5 ) )  TYPE_2 . METHOD_8 ( VAR_5 ) (  TYPE_2 . assertEquals ( VAR_1 , VAR_5 ) )  TYPE_2 . assertEquals ( VAR_1 , VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VM> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VM> ( NAME vms ) NAME vms ( INIT = VAR_2 . Linq < org.ovirt.engine.core.common.businessentities.VM > METHOD_2 ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) ) INIT = VAR_2 . Linq < org.ovirt.engine.core.common.businessentities.VM > METHOD_2 ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) ) VAR VAR (  return vms ; )  return vms ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > vms = VAR_2 . Linq < org.ovirt.engine.core.common.businessentities.VM > METHOD_2 ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) ; return vms ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > vms = VAR_2 . Linq < org.ovirt.engine.core.common.businessentities.VM > METHOD_2 ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) ; return vms ; } } (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_3 , new TYPE_2 ( ( STRING_1 + VAR_1 ) , VAR_4 . VM ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_3 , new TYPE_2 ( ( STRING_1 + VAR_1 ) , VAR_4 . VM ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME iface ) NAME iface ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  org.mockito.Mockito.when ( VAR_4 . METHOD_2 ( iface . METHOD_3 ( ) ) ) . thenReturn ( VAR_1 ) )  org.mockito.Mockito.when ( VAR_4 . METHOD_2 ( iface . METHOD_3 ( ) ) ) . thenReturn ( VAR_1 ) (  TYPE_3 . assertEquals ( VAR_3 , VAR_5 . add ( iface , TYPE_4 . getInstance ( ) , false ) ) )  TYPE_3 . assertEquals ( VAR_3 , VAR_5 . add ( iface , TYPE_4 . getInstance ( ) , false ) ) (  METHOD_4 ( iface , VAR_2 ) )  METHOD_4 ( iface , VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( METHOD_3 ( INT_1 , false , VAR_1 , INT_1 , true ) ) )  METHOD_2 ( METHOD_3 ( INT_1 , false , VAR_1 , INT_1 , true ) ) (  org.mockito.Mockito.doReturn ( METHOD_4 ( true , VAR_2 ) ) . when ( VAR_3 ) . get ( TYPE_1 . any ( VAR_4 . Guid class ) ) )  org.mockito.Mockito.doReturn ( METHOD_4 ( true , VAR_2 ) ) . when ( VAR_3 ) . get ( TYPE_1 . any ( VAR_4 . Guid class ) ) (  TYPE_2 . METHOD_5 ( cmd , VAR_5 ) )  TYPE_2 . METHOD_5 ( cmd , VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME host ) NAME host ( INIT = context . host ) INIT = context . host ) VAR VAR ( IF IF ( COND ( host . METHOD_2 ( ) ) != null ) COND ( host . METHOD_2 ( ) ) != null ( THEN THEN ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_4 ) NAME METHOD_4 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 = ( ( TYPE_2 ) ( returnValue ) ) )  VAR_1 = ( ( TYPE_2 ) ( returnValue ) ) (  METHOD_5 ( ) )  METHOD_5 ( ) ) BLOCK BLOCK ) METHOD METHOD (  TYPE_1 . METHOD_3 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void METHOD_4 ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 = ( ( TYPE_2 ) ( returnValue ) ) ; METHOD_5 ( ) ; } } , VAR_2 ) , host . METHOD_2 ( ) ) )  TYPE_1 . METHOD_3 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void METHOD_4 ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 = ( ( TYPE_2 ) ( returnValue ) ) ; METHOD_5 ( ) ; } } , VAR_2 ) , host . METHOD_2 ( ) ) ) THEN THEN ( ELSE ELSE (  METHOD_5 ( ) )  METHOD_5 ( ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME status ) NAME status ) VAR VAR ( VAR VAR ( TYPE TYPE_2.VdcBllMessages ) TYPE TYPE_2.VdcBllMessages ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME returnValue ) NAME returnValue ( INIT = false ) INIT = false ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StoragePool ) TYPE org.ovirt.engine.core.common.businessentities.StoragePool ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_3 . METHOD_2 ( ) ) INIT = TYPE_3 . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN (  returnValue = ( VAR_2 . METHOD_3 ( ) ) != status )  returnValue = ( VAR_2 . METHOD_3 ( ) ) != status ( IF IF ( COND ( ! returnValue ) && ( ! ( TYPE_3 . getReturnValue ( ) . METHOD_4 ( ) . METHOD_5 ( VAR_1 . name ( ) ) ) ) ) COND ( ! returnValue ) && ( ! ( TYPE_3 . getReturnValue ( ) . METHOD_4 ( ) . METHOD_5 ( VAR_1 . name ( ) ) ) ) ( THEN THEN (  addCanDoActionMessage ( VAR_1 ) )  addCanDoActionMessage ( VAR_1 ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return returnValue ; )  return returnValue ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( METHOD_2 ( ) ) . METHOD_3 ( ) )  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( METHOD_2 ( ) ) . METHOD_3 ( ) (  org.mockito.Mockito.doReturn ( METHOD_4 ( VAR_2 ) ) . when ( VAR_1 ) . METHOD_5 ( VAR_3 ) )  org.mockito.Mockito.doReturn ( METHOD_4 ( VAR_2 ) ) . when ( VAR_1 ) . METHOD_5 ( VAR_3 ) (  org.mockito.Mockito.doReturn ( STRING_1 ) . when ( METHOD_2 ( ) ) . METHOD_6 ( VAR_4 ) )  org.mockito.Mockito.doReturn ( STRING_1 ) . when ( METHOD_2 ( ) ) . METHOD_6 ( VAR_4 ) (  org.mockito.Mockito.doReturn ( METHOD_7 ( ) ) . when ( VAR_5 ) . METHOD_8 ( TYPE_1 . any ( VAR_6 . Guid class ) ) )  org.mockito.Mockito.doReturn ( METHOD_7 ( ) ) . when ( VAR_5 ) . METHOD_8 ( TYPE_1 . any ( VAR_6 . Guid class ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( VAR_2 . METHOD_3 ( ) ) )  VAR_1 . METHOD_2 ( VAR_2 . METHOD_3 ( ) ) (  VAR_3 . METHOD_2 ( VAR_2 . METHOD_3 ( ) ) )  VAR_3 . METHOD_2 ( VAR_2 . METHOD_3 ( ) ) (  VAR_4 . METHOD_2 ( VAR_2 . METHOD_4 ( ) ) )  VAR_4 . METHOD_2 ( VAR_2 . METHOD_4 ( ) ) (  VAR_5 . METHOD_2 ( VAR_2 . METHOD_5 ( ) ) )  VAR_5 . METHOD_2 ( VAR_2 . METHOD_5 ( ) ) (  VAR_6 . METHOD_2 ( VAR_2 . METHOD_5 ( ) ) )  VAR_6 . METHOD_2 ( VAR_2 . METHOD_5 ( ) ) (  VAR_7 . METHOD_2 ( VAR_2 . METHOD_6 ( ) ) )  VAR_7 . METHOD_2 ( VAR_2 . METHOD_6 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_1 ) ( target ) ) ) INIT = ( ( TYPE_1 ) ( target ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME model ) NAME model ( INIT = ( ( TYPE_2 ) ( VAR_1 . getWindow ( ) ) ) ) INIT = ( ( TYPE_2 ) ( VAR_1 . getWindow ( ) ) ) ) VAR VAR (  model . setEntity ( returnValue ) )  model . setEntity ( returnValue ) ( VAR VAR ( TYPE org.ovirt.engine.ui.uicommonweb.UICommand ) TYPE org.ovirt.engine.ui.uicommonweb.UICommand ( NAME tempVar ) NAME tempVar ( INIT = new org.ovirt.engine.ui.uicommonweb.UICommand ( STRING_1 , VAR_1 ) ) INIT = new org.ovirt.engine.ui.uicommonweb.UICommand ( STRING_1 , VAR_1 ) ) VAR VAR (  tempVar . setTitle ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_2 ( ) ) )  tempVar . setTitle ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_2 ( ) ) (  tempVar . METHOD_3 ( true ) )  tempVar . METHOD_3 ( true ) (  tempVar . METHOD_4 ( true ) )  tempVar . METHOD_4 ( true ) (  model . METHOD_5 ( ) . add ( tempVar ) )  model . METHOD_5 ( ) . add ( tempVar ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( java.lang.Boolean ) ( METHOD_2 ( ) . getEntity ( ) ) ) ) INIT = ( ( java.lang.Boolean ) ( METHOD_2 ( ) . getEntity ( ) ) ) ) VAR VAR (  METHOD_3 ( ) . setIsChangable ( VAR_1 ) )  METHOD_3 ( ) . setIsChangable ( VAR_1 ) (  METHOD_4 ( ) . setIsChangable ( VAR_1 ) )  METHOD_4 ( ) . setIsChangable ( VAR_1 ) (  METHOD_5 ( ) . setIsChangable ( ( ! VAR_1 ) ) )  METHOD_5 ( ) . setIsChangable ( ( ! VAR_1 ) ) (  METHOD_6 ( ) . setIsChangable ( ( ! VAR_1 ) ) )  METHOD_6 ( ) . setIsChangable ( ( ! VAR_1 ) ) ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  METHOD_5 ( ) . setEntity ( true ) )  METHOD_5 ( ) . setEntity ( true ) (  METHOD_6 ( ) . setEntity ( false ) )  METHOD_6 ( ) . setEntity ( false ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = dao . METHOD_2 ( VAR_2 , VAR_3 ) ) INIT = dao . METHOD_2 ( VAR_2 , VAR_3 ) ) VAR VAR (  TYPE_2 . METHOD_3 ( VAR_1 ) )  TYPE_2 . METHOD_3 ( VAR_1 ) (  TYPE_2 . assertEquals ( VAR_1 . METHOD_4 ( ) , STRING_1 ) )  TYPE_2 . assertEquals ( VAR_1 . METHOD_4 ( ) , STRING_1 ) (  dao . METHOD_5 ( VAR_2 , VAR_3 , STRING_2 ) )  dao . METHOD_5 ( VAR_2 , VAR_3 , STRING_2 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = dao . METHOD_2 ( VAR_2 , VAR_3 ) ) INIT = dao . METHOD_2 ( VAR_2 , VAR_3 ) ) VAR VAR (  TYPE_2 . METHOD_3 ( VAR_4 ) )  TYPE_2 . METHOD_3 ( VAR_4 ) (  TYPE_2 . assertEquals ( VAR_4 . METHOD_4 ( ) , STRING_2 ) )  TYPE_2 . assertEquals ( VAR_4 . METHOD_4 ( ) , STRING_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( METHOD_3 ( ) ) )  METHOD_2 ( METHOD_3 ( ) ) (  METHOD_4 ( 1 , 0 , true ) )  METHOD_4 ( 1 , 0 , true ) (  VAR_1 . METHOD_5 ( ) )  VAR_1 . METHOD_5 ( ) ( TRY TRY ( BLOCK BLOCK (  resource . get ( ) )  resource . get ( ) (  METHOD_6 ( STRING_1 ) )  METHOD_6 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( BLOCK BLOCK (  METHOD_7 ( VAR_2 ) )  METHOD_7 ( VAR_2 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN java.util.List<TYPE_1<java.lang.Object,org.ovirt.engine.core.common.businessentities.VM>> ) RETURN java.util.List<TYPE_1<java.lang.Object,org.ovirt.engine.core.common.businessentities.VM>> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<TYPE_1<java.lang.Object,org.ovirt.engine.core.common.businessentities.VM>> ) TYPE java.util.List<TYPE_1<java.lang.Object,org.ovirt.engine.core.common.businessentities.VM>> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_4 ) NAME METHOD_4 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_5<java.lang.Object,org.ovirt.engine.core.common.businessentities.VM> ) TYPE TYPE_5<java.lang.Object,org.ovirt.engine.core.common.businessentities.VM> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return ( VAR_2 . METHOD_5 ( ) ) != null ; )  return ( VAR_2 . METHOD_5 ( ) ) != null ; ) BLOCK BLOCK ) METHOD METHOD (  return TYPE_2 . METHOD_2 ( new java.util.ArrayList ( TYPE_3 . METHOD_3 ( VAR_1 , new TYPE_4 < TYPE_1 < java.lang.Object , org.ovirt.engine.core.common.businessentities.VM > > ( ) { public boolean METHOD_4 ( TYPE_5 < java.lang.Object , org.ovirt.engine.core.common.businessentities.VM > VAR_2 ) { return ( VAR_2 . METHOD_5 ( ) ) != null ; } } ) ) ) ; )  return TYPE_2 . METHOD_2 ( new java.util.ArrayList ( TYPE_3 . METHOD_3 ( VAR_1 , new TYPE_4 < TYPE_1 < java.lang.Object , org.ovirt.engine.core.common.businessentities.VM > > ( ) { public boolean METHOD_4 ( TYPE_5 < java.lang.Object , org.ovirt.engine.core.common.businessentities.VM > VAR_2 ) { return ( VAR_2 . METHOD_5 ( ) ) != null ; } } ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( null ) ) INIT = METHOD_2 ( null ) ) VAR VAR (  VAR_2 . METHOD_3 ( VAR_1 ) )  VAR_2 . METHOD_3 ( VAR_1 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_3 ( VAR_4 ) ) INIT = new TYPE_3 ( VAR_4 ) ) VAR VAR (  METHOD_4 ( VAR_3 ) )  METHOD_4 ( VAR_3 ) (  VAR_5 . METHOD_5 ( ) )  VAR_5 . METHOD_5 ( ) ( TRY TRY ( BLOCK BLOCK (  METHOD_6 ( ) )  METHOD_6 ( ) (  METHOD_7 ( STRING_1 ) )  METHOD_7 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_6 ) NAME VAR_6 ( BLOCK BLOCK (  METHOD_8 ( VAR_6 , VAR_7 , VAR_3 ) )  METHOD_8 ( VAR_6 , VAR_7 , VAR_3 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( null ) ) INIT = TYPE_2 . METHOD_2 ( null ) ) VAR VAR (  VAR_2 . add ( VAR_3 ) )  VAR_2 . add ( VAR_3 ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_4 ( VAR_5 ) ) INIT = new TYPE_4 ( VAR_5 ) ) VAR VAR (  METHOD_3 ( VAR_4 ) )  METHOD_3 ( VAR_4 ) (  VAR_6 . METHOD_4 ( VAR_1 ) )  VAR_6 . METHOD_4 ( VAR_1 ) ( TRY TRY ( BLOCK BLOCK (  TYPE_2 . METHOD_5 ( ) )  TYPE_2 . METHOD_5 ( ) (  TYPE_2 . METHOD_6 ( STRING_1 ) )  TYPE_2 . METHOD_6 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_7 ) NAME VAR_7 ( BLOCK BLOCK (  METHOD_7 ( VAR_7 , VAR_8 , VAR_4 ) )  METHOD_7 ( VAR_7 , VAR_8 , VAR_4 ) ) BLOCK BLOCK ) CATCH CATCH ( FINALLY FINALLY (  VAR_2 . METHOD_8 ( ) )  VAR_2 . METHOD_8 ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS> ( NAME hosts ) NAME hosts ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( METHOD_2 ( ) ) && VAR_2 ) COND ( METHOD_2 ( ) ) && VAR_2 ( THEN THEN ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME VAR_3 ) NAME VAR_3 ( INIT = null ) INIT = null ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME host ) NAME host ( IN hosts ) IN hosts ( BLOCK BLOCK ( IF IF ( COND host . getId ( ) . equals ( VAR_1 ) ) COND host . getId ( ) . equals ( VAR_1 ) ( THEN THEN (  VAR_3 = host )  VAR_3 = host ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  hosts . METHOD_3 ( VAR_3 ) )  hosts . METHOD_3 ( VAR_3 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.uicommonweb.UICommand ) TYPE org.ovirt.engine.ui.uicommonweb.UICommand ( NAME command ) NAME command ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  super . METHOD_1 ( command ) )  super . METHOD_1 ( command ) ( IF IF ( COND TYPE_1 . METHOD_2 ( command . getName ( ) , STRING_1 ) ) COND TYPE_1 . METHOD_2 ( command . getName ( ) , STRING_1 ) ( THEN THEN (  METHOD_3 ( ) )  METHOD_3 ( ) ) THEN THEN ) IF IF ( IF IF ( COND TYPE_1 . METHOD_2 ( command . getName ( ) , STRING_2 ) ) COND TYPE_1 . METHOD_2 ( command . getName ( ) , STRING_2 ) ( THEN THEN (  METHOD_4 ( ) )  METHOD_4 ( ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND TYPE_1 . METHOD_2 ( command . getName ( ) , STRING_3 ) ) COND TYPE_1 . METHOD_2 ( command . getName ( ) , STRING_3 ) ( THEN THEN (  METHOD_5 ( ) )  METHOD_5 ( ) ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME response ) NAME response ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND TYPE_3 . METHOD_2 ( VAR_2 ) . METHOD_3 ( STRING_1 ) ) COND TYPE_3 . METHOD_2 ( VAR_2 ) . METHOD_3 ( STRING_1 ) ( THEN THEN (  TYPE_4 . METHOD_4 ( VAR_1 , response , VAR_2 ) )  TYPE_4 . METHOD_4 ( VAR_1 , response , VAR_2 ) ) THEN THEN ( ELSE ELSE (  TYPE_4 . METHOD_5 ( VAR_1 , response , VAR_2 ) )  TYPE_4 . METHOD_5 ( VAR_1 , response , VAR_2 ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.DiskImage ) TYPE TYPE_1.DiskImage ( NAME image ) NAME image ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_2 . METHOD_1 ( image , image . METHOD_2 ( ) , new TYPE_3 ( image . METHOD_3 ( ) , image . METHOD_4 ( ) . get ( 0 ) , image . METHOD_5 ( ) , image . METHOD_6 ( ) ) ) )  TYPE_2 . METHOD_1 ( image , image . METHOD_2 ( ) , new TYPE_3 ( image . METHOD_3 ( ) , image . METHOD_4 ( ) . get ( 0 ) , image . METHOD_5 ( ) , image . METHOD_6 ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  return ( getModel ( ) . METHOD_2 ( ) . getEntity ( ) ) != null ? java.lang.Integer . METHOD_3 ( getModel ( ) . METHOD_2 ( ) . getEntity ( ) . toString ( ) ) : 0 ; )  return ( getModel ( ) . METHOD_2 ( ) . getEntity ( ) ) != null ? java.lang.Integer . METHOD_3 ( getModel ( ) . METHOD_2 ( ) . getEntity ( ) . toString ( ) ) : 0 ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME e ) NAME e ( BLOCK BLOCK (  return 0 ; )  return 0 ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME user ) NAME user ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_2 . METHOD_2 ( STRING_1 ) )  VAR_2 . METHOD_2 ( STRING_1 ) ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = null ) INIT = null ) VAR VAR ( IF IF ( COND user != null ) COND user != null ( THEN THEN (  VAR_3 = ( ( VAR_1 + STRING_2 ) + user ) + STRING_3 )  VAR_3 = ( ( VAR_1 + STRING_2 ) + user ) + STRING_3 ) THEN THEN ( ELSE ELSE (  VAR_3 = VAR_1 + STRING_3 )  VAR_3 = VAR_1 + STRING_3 ) ELSE ELSE ) IF IF (  return new java.lang.String ( VAR_4 . METHOD_3 ( VAR_3 ) ) ; )  return new java.lang.String ( VAR_4 . METHOD_3 ( VAR_3 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . getParameters ( ) . METHOD_2 ( ) ) INIT = TYPE_1 . getParameters ( ) . METHOD_2 ( ) ) VAR VAR (  TYPE_1 . METHOD_3 ( ) . METHOD_4 ( TYPE_1 . METHOD_5 ( ) . METHOD_6 ( ) . METHOD_7 ( VAR_1 , TYPE_1 . METHOD_8 ( ) , TYPE_1 . getParameters ( ) . METHOD_9 ( ) ) ) )  TYPE_1 . METHOD_3 ( ) . METHOD_4 ( TYPE_1 . METHOD_5 ( ) . METHOD_6 ( ) . METHOD_7 ( VAR_1 , TYPE_1 . METHOD_8 ( ) , TYPE_1 . getParameters ( ) . METHOD_9 ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = null ) INIT = null ) VAR VAR ( IF IF ( COND TYPE_2 . METHOD_2 ( VAR_1 , STRING_1 ) ) COND TYPE_2 . METHOD_2 ( VAR_1 , STRING_1 ) ( THEN THEN (  VAR_2 = new TYPE_3 ( VAR_3 class ) )  VAR_2 = new TYPE_3 ( VAR_3 class ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND TYPE_2 . METHOD_2 ( VAR_1 , STRING_2 ) ) COND TYPE_2 . METHOD_2 ( VAR_1 , STRING_2 ) ( THEN THEN (  VAR_2 = new TYPE_3 ( VAR_4 class ) )  VAR_2 = new TYPE_3 ( VAR_4 class ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND TYPE_2 . METHOD_2 ( VAR_1 , STRING_3 ) ) COND TYPE_2 . METHOD_2 ( VAR_1 , STRING_3 ) ( THEN THEN (  VAR_2 = new TYPE_3 ( VAR_5 class ) )  VAR_2 = new TYPE_3 ( VAR_5 class ) ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source ; )  return source ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME parameters ) NAME parameters ( INIT = new TYPE_1 ( VAR_1 , null , null , false ) ) INIT = new TYPE_1 ( VAR_1 , null , null , false ) ) VAR VAR (  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , parameters , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , parameters , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StoragePool ) TYPE org.ovirt.engine.core.common.businessentities.StoragePool ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( java.lang.Boolean ) ( TYPE_1 . getInstance ( ) . METHOD_2 ( VAR_3 , VAR_1 . METHOD_3 ( ) . getValue ( ) ) ) ) ) INIT = ( ( java.lang.Boolean ) ( TYPE_1 . getInstance ( ) . METHOD_2 ( VAR_3 , VAR_1 . METHOD_3 ( ) . getValue ( ) ) ) ) ) VAR VAR ( IF IF ( COND METHOD_4 ( ) . METHOD_5 ( ) ) COND METHOD_4 ( ) . METHOD_5 ( ) ( THEN THEN (  METHOD_4 ( ) . METHOD_6 ( TYPE_2 . METHOD_7 ( ) ) )  METHOD_4 ( ) . METHOD_6 ( TYPE_2 . METHOD_7 ( ) ) (  METHOD_4 ( ) . setIsChangable ( ( VAR_2 && ( METHOD_8 ( ) ) ) ) )  METHOD_4 ( ) . setIsChangable ( ( VAR_2 && ( METHOD_8 ( ) ) ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_1 . METHOD_2 ( VAR_2 ) )  VAR_1 . METHOD_2 ( VAR_2 ) (  VAR_1 . METHOD_3 ( VAR_3 ) )  VAR_1 . METHOD_3 ( VAR_3 ) (  VAR_1 . METHOD_4 ( VAR_4 ) )  VAR_1 . METHOD_4 ( VAR_4 ) (  VAR_1 . METHOD_5 ( VAR_5 ) )  VAR_1 . METHOD_5 ( VAR_5 ) (  VAR_1 . METHOD_6 ( VAR_6 ) )  VAR_1 . METHOD_6 ( VAR_6 ) (  VAR_1 . METHOD_7 ( VAR_7 ) )  VAR_1 . METHOD_7 ( VAR_7 ) (  VAR_1 . METHOD_8 ( VAR_8 ) )  VAR_1 . METHOD_8 ( VAR_8 ) (  VAR_1 . METHOD_9 ( VAR_9 ) )  VAR_1 . METHOD_9 ( VAR_9 ) (  VAR_1 . METHOD_10 ( VAR_10 ) )  VAR_1 . METHOD_10 ( VAR_10 ) (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) (  dao = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) )  dao = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) (  VAR_2 = METHOD_2 ( VAR_1 . METHOD_4 ( ) ) )  VAR_2 = METHOD_2 ( VAR_1 . METHOD_4 ( ) ) (  VAR_3 = VAR_2 . get ( STRING_1 ) )  VAR_3 = VAR_2 . get ( STRING_1 ) (  VAR_4 = new TYPE_1 ( ) )  VAR_4 = new TYPE_1 ( ) (  VAR_4 . METHOD_5 ( STRING_2 ) )  VAR_4 . METHOD_5 ( STRING_2 ) (  VAR_4 . METHOD_6 ( VAR_5 ) )  VAR_4 . METHOD_6 ( VAR_5 ) (  VAR_6 = dao . get ( new TYPE_2 ( STRING_3 , VAR_3 . METHOD_7 ( ) ) ) )  VAR_6 = dao . get ( new TYPE_2 ( STRING_3 , VAR_3 . METHOD_7 ( ) ) ) (  VAR_7 = new TYPE_3 ( VAR_8 , VAR_3 . METHOD_7 ( ) ) )  VAR_7 = new TYPE_3 ( VAR_8 , VAR_3 . METHOD_7 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME version ) NAME version ) VAR VAR ( VAR VAR ( TYPE TYPE_2[] ) TYPE TYPE_2[] ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND TYPE_3 . METHOD_2 ( version , VAR_2 ) ) COND TYPE_3 . METHOD_2 ( version , VAR_2 ) ( THEN THEN (  version . METHOD_3 ( new TYPE_4 ( ) ) )  version . METHOD_3 ( new TYPE_4 ( ) ) ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  version . METHOD_4 ( ) . METHOD_5 ( ) . add ( VAR_3 . value ( ) ) )  version . METHOD_4 ( ) . METHOD_5 ( ) . add ( VAR_3 . value ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( STRING_1 , STRING_2 ) ) INIT = TYPE_1 . METHOD_2 ( STRING_1 , STRING_2 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 ( VAR_1 ) ) INIT = new TYPE_2 ( VAR_1 ) ) VAR VAR (  VAR_2 . METHOD_3 ( STRING_3 ) )  VAR_2 . METHOD_3 ( STRING_3 ) (  VAR_2 . METHOD_4 ( ) )  VAR_2 . METHOD_4 ( ) ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < INT_1 ) COND i < INT_1 ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_3 . METHOD_5 ( VAR_1 . METHOD_6 ( ) ) ) INIT = TYPE_3 . METHOD_5 ( VAR_1 . METHOD_6 ( ) ) ) VAR VAR (  TYPE_4 . assertEquals ( STRING_4 , STRING_3 , VAR_3 ) )  TYPE_4 . assertEquals ( STRING_4 , STRING_3 , VAR_3 ) ) BLOCK BLOCK ) FOR FOR ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME host ) NAME host ) VAR VAR ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<java.lang.String,org.ovirt.engine.core.common.businessentities.network.Network> ) TYPE java.util.Map<java.lang.String,org.ovirt.engine.core.common.businessentities.network.Network> ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_1 . METHOD_2 ( VAR_2 ) ) INIT = TYPE_1 . METHOD_2 ( VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2<org.ovirt.engine.core.common.businessentities.network.Network> ) TYPE TYPE_2<org.ovirt.engine.core.common.businessentities.network.Network> ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_3 ( VAR_1 , VAR_3 ) ) INIT = METHOD_3 ( VAR_1 , VAR_3 ) ) VAR VAR (  METHOD_4 ( host , VAR_4 , VAR_1 ) )  METHOD_4 ( host , VAR_4 , VAR_1 ) (  METHOD_5 ( host , VAR_3 ) )  METHOD_5 ( host , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) , null ) ) )  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) , null ) ) (  METHOD_3 ( cmd ) )  METHOD_3 ( cmd ) (  METHOD_4 ( cmd , true ) )  METHOD_4 ( cmd , true ) (  cmd . METHOD_1 ( ) )  cmd . METHOD_1 ( ) (  TYPE_3 . METHOD_5 ( cmd . getReturnValue ( ) . getSucceeded ( ) ) )  TYPE_3 . METHOD_5 ( cmd . getReturnValue ( ) . getSucceeded ( ) ) (  TYPE_3 . assertEquals ( cmd . METHOD_6 ( ) , VAR_2 ) )  TYPE_3 . assertEquals ( cmd . METHOD_6 ( ) , VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( VAR_1 ) )  METHOD_2 ( VAR_1 ) (  VAR_2 . METHOD_3 ( ) )  VAR_2 . METHOD_3 ( ) ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME action ) NAME action ( IN TYPE_1 . METHOD_4 ( ) ) IN TYPE_1 . METHOD_4 ( ) ( BLOCK BLOCK (  resource . id = java.lang.Integer . toString ( action . getId ( ) ) )  resource . id = java.lang.Integer . toString ( action . getId ( ) ) (  METHOD_5 ( resource . get ( ) , action ) )  METHOD_5 ( resource . get ( ) , action ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  resource . id = STRING_1 )  resource . id = STRING_1 ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( VAR_2 ) ) INIT = new TYPE_2 ( VAR_2 ) ) VAR VAR (  METHOD_2 ( VAR_1 ) )  METHOD_2 ( VAR_1 ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_3 ( null ) ) INIT = METHOD_3 ( null ) ) VAR VAR (  VAR_4 . METHOD_4 ( VAR_3 ) )  VAR_4 . METHOD_4 ( VAR_3 ) (  VAR_5 . METHOD_5 ( ) )  VAR_5 . METHOD_5 ( ) ( TRY TRY ( BLOCK BLOCK (  METHOD_6 ( ) )  METHOD_6 ( ) (  METHOD_7 ( STRING_1 ) )  METHOD_7 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_6 ) NAME VAR_6 ( BLOCK BLOCK (  METHOD_8 ( VAR_6 , VAR_7 , VAR_1 ) )  METHOD_8 ( VAR_6 , VAR_7 , VAR_1 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME entity ) NAME entity ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1<TYPE_2,org.ovirt.engine.core.common.businessentities.VdsNetworkInterface> ) TYPE TYPE_1<TYPE_2,org.ovirt.engine.core.common.businessentities.VdsNetworkInterface> ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_1 < TYPE_2 , org.ovirt.engine.core.common.businessentities . VdsNetworkInterface > ) ( resource . METHOD_3 ( ) ) ) ) INIT = ( ( TYPE_1 < TYPE_2 , org.ovirt.engine.core.common.businessentities . VdsNetworkInterface > ) ( resource . METHOD_3 ( ) ) ) ) VAR VAR (  METHOD_4 ( VAR_1 ) )  METHOD_4 ( VAR_1 ) (  METHOD_5 ( VAR_1 . METHOD_6 ( ) , entity ) )  METHOD_5 ( VAR_1 . METHOD_6 ( ) , entity ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME sender ) NAME sender ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME args ) NAME args ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME model ) NAME model ( INIT = ( ( TYPE_3 ) ( sender ) ) ) INIT = ( ( TYPE_3 ) ( sender ) ) ) VAR VAR ( IF IF ( COND STRING_1 . equals ( ( ( TYPE_4 ) ( args ) ) . VAR_2 ) ) COND STRING_1 . equals ( ( ( TYPE_4 ) ( args ) ) . VAR_2 ) ( THEN THEN (  VAR_3 . METHOD_2 ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( model . METHOD_5 ( ) . METHOD_6 ( ) . size ( ) ) ) )  VAR_3 . METHOD_2 ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( model . METHOD_5 ( ) . METHOD_6 ( ) . size ( ) ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME resource ) NAME resource ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( resource , VAR_1 ) )  METHOD_2 ( resource , VAR_1 ) ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.Network ) TYPE org.ovirt.engine.core.common.businessentities.Network ( NAME network ) NAME network ( INIT = METHOD_3 ( resource ) ) INIT = METHOD_3 ( resource ) ) VAR VAR ( IF IF ( COND network != null ) COND network != null ( THEN THEN (  resource . METHOD_4 ( ) . METHOD_5 ( network . METHOD_6 ( ) ) )  resource . METHOD_4 ( ) . METHOD_5 ( network . METHOD_6 ( ) ) (  resource . METHOD_4 ( ) . setId ( null ) )  resource . METHOD_4 ( ) . setId ( null ) ) THEN THEN ) IF IF (  return METHOD_7 ( resource , VAR_2 , VAR_3 , VAR_4 ) ; )  return METHOD_7 ( resource , VAR_2 , VAR_3 , VAR_4 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1.Disk ) RETURN TYPE_1.Disk ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.Disk ) TYPE TYPE_1.Disk ( NAME model ) NAME model ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  model . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_1 class ) ) )  model . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_1 class ) ) (  model . METHOD_4 ( TYPE_2 . METHOD_3 ( VAR_2 class ) ) )  model . METHOD_4 ( TYPE_2 . METHOD_3 ( VAR_2 class ) ) (  model . METHOD_5 ( TYPE_2 . METHOD_3 ( VAR_3 class ) ) )  model . METHOD_5 ( TYPE_2 . METHOD_3 ( VAR_3 class ) ) (  model . METHOD_6 ( TYPE_2 . METHOD_3 ( VAR_4 class ) ) )  model . METHOD_6 ( TYPE_2 . METHOD_3 ( VAR_4 class ) ) (  model . METHOD_7 ( null ) )  model . METHOD_7 ( null ) (  return model ; )  return model ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ( INIT = true ) INIT = true ) VAR VAR ( IF IF ( COND ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) . METHOD_3 ( ) ) != 0 ) COND ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) . METHOD_3 ( ) ) != 0 ( THEN THEN (  VAR_1 = VAR_2 < java.lang.Boolean > METHOD_4 ( VAR_3 , TYPE_1 . METHOD_5 ( ) . METHOD_6 ( ) . getValue ( ) ) )  VAR_1 = VAR_2 < java.lang.Boolean > METHOD_4 ( VAR_3 , TYPE_1 . METHOD_5 ( ) . METHOD_6 ( ) . getValue ( ) ) ( IF IF ( COND ! VAR_1 ) COND ! VAR_1 ( THEN THEN (  addCanDoActionMessage ( VAR_4 ) )  addCanDoActionMessage ( VAR_4 ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.Disk ) TYPE TYPE_1.Disk ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  assertEquals ( VAR_2 [ VAR_1 ] . toString ( ) , model . getId ( ) ) )  assertEquals ( VAR_2 [ VAR_1 ] . toString ( ) , model . getId ( ) ) (  METHOD_2 ( model . METHOD_3 ( ) ) )  METHOD_2 ( model . METHOD_3 ( ) ) (  assertEquals ( TYPE_2 . toString ( ) , model . getVm ( ) . getId ( ) ) )  assertEquals ( TYPE_2 . toString ( ) , model . getVm ( ) . getId ( ) ) (  METHOD_2 ( model . METHOD_4 ( ) ) )  METHOD_2 ( model . METHOD_4 ( ) ) (  METHOD_2 ( ( ! ( model . METHOD_5 ( ) ) ) ) )  METHOD_2 ( ( ! ( model . METHOD_5 ( ) ) ) ) (  METHOD_2 ( model . METHOD_6 ( ) ) )  METHOD_2 ( model . METHOD_6 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ) TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ( NAME cluster ) NAME cluster ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.Integer ) TYPE java.lang.Integer ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_3 ( ) . getSelectedItem ( ) ) INIT = METHOD_3 ( ) . getSelectedItem ( ) ) VAR VAR ( IF IF ( COND ( cluster == null ) || ( VAR_1 == null ) ) COND ( cluster == null ) || ( VAR_1 == null ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  METHOD_1 ( VAR_1 , cluster . METHOD_4 ( ) ) )  METHOD_1 ( VAR_1 , cluster . METHOD_4 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> ) RETURN java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME size ) NAME size ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < size ) COND i < size ( UPDATE UPDATE (  ++ i )  ++ i ) UPDATE UPDATE ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.DiskImage ) TYPE org.ovirt.engine.core.common.businessentities.DiskImage ( NAME diskImage ) NAME diskImage ( INIT = new org.ovirt.engine.core.common.businessentities.DiskImage ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.DiskImage ( ) ) VAR VAR (  diskImage . METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) )  diskImage . METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) (  VAR_1 . add ( diskImage ) )  VAR_1 . add ( diskImage ) ) BLOCK BLOCK ) FOR FOR (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( ( TYPE_1 ) ( VAR_1 ) ) ) INIT = ( ( TYPE_1 ) ( VAR_1 ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME storage ) NAME storage ( INIT = ( ( TYPE_2 ) ( ( ( TYPE_3 . VdcQueryReturnValue ) ( VAR_2 ) ) . getReturnValue ( ) ) ) ) INIT = ( ( TYPE_2 ) ( ( ( TYPE_3 . VdcQueryReturnValue ) ( VAR_2 ) ) . getReturnValue ( ) ) ) ) VAR VAR (  VAR_3 . METHOD_2 ( storage . METHOD_3 ( ) ) )  VAR_3 . METHOD_2 ( storage . METHOD_3 ( ) ) (  VAR_3 . METHOD_4 ( ) . METHOD_5 ( this , VAR_4 ) )  VAR_3 . METHOD_4 ( ) . METHOD_5 ( this , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  result = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . getParameters ( ) . METHOD_4 ( ) . toString ( ) ) )  result = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . getParameters ( ) . METHOD_4 ( ) . toString ( ) ) (  TYPE_1 . METHOD_5 ( ) )  TYPE_1 . METHOD_5 ( ) ( VAR VAR ( TYPE TYPE_2<TYPE_3,org.ovirt.engine.core.compat.Guid> ) TYPE TYPE_2<TYPE_3,org.ovirt.engine.core.compat.Guid> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_6 ( VAR_2 ) ) INIT = TYPE_1 . METHOD_6 ( VAR_2 ) ) VAR VAR (  VAR_1 . METHOD_7 ( ) . setId ( TYPE_1 . getParameters ( ) . METHOD_4 ( ) ) )  VAR_1 . METHOD_7 ( ) . setId ( TYPE_1 . getParameters ( ) . METHOD_4 ( ) ) (  METHOD_8 ( VAR_1 ) )  METHOD_8 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.util.List<java.lang.String> ) RETURN java.util.List<java.lang.String> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME entity ) NAME entity ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME result ) NAME result ( INIT = new java.util.ArrayList ( ( entity != null ? entity . size ( ) : 0 ) ) ) INIT = new java.util.ArrayList ( ( entity != null ? entity . size ( ) : 0 ) ) ) VAR VAR ( IF IF ( COND entity != null ) COND entity != null ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME source ) NAME source ( IN entity ) IN entity ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_4 . map ( source , null ) ) INIT = TYPE_4 . map ( source , null ) ) VAR VAR (  result . add ( VAR_1 . name ( ) ) )  result . add ( VAR_1 . name ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ( INIT = ( ( TYPE_1 ) ( target ) ) ) INIT = ( ( TYPE_1 ) ( target ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain> ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( returnValue ) ) ) INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( returnValue ) ) ) VAR VAR (  TYPE_2 . METHOD_2 ( VAR_1 , new TYPE_3 ( ) ) )  TYPE_2 . METHOD_2 ( VAR_1 , new TYPE_3 ( ) ) (  METHOD_3 ( VAR_1 ) )  METHOD_3 ( VAR_1 ) (  setItems ( model . value ) )  setItems ( model . value ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) ( VAR VAR ( TYPE TYPE_1.EngineMessage ) TYPE TYPE_1.EngineMessage ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 ) INIT = VAR_2 ) VAR VAR (  org.mockito.Mockito.doReturn ( new TYPE_2 . ValidationResult ( VAR_1 ) ) . when ( VAR_3 ) . METHOD_3 ( TYPE_3 . METHOD_4 ( ) , TYPE_3 . any ( ) ) )  org.mockito.Mockito.doReturn ( new TYPE_2 . ValidationResult ( VAR_1 ) ) . when ( VAR_3 ) . METHOD_3 ( TYPE_3 . METHOD_4 ( ) , TYPE_3 . any ( ) ) (  TYPE_4 . METHOD_5 ( command , VAR_1 ) )  TYPE_4 . METHOD_5 ( command , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME object ) NAME object ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.Integer ) TYPE java.lang.Integer ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( object ) ) INIT = TYPE_2 . METHOD_2 ( object ) ) VAR VAR ( IF IF ( COND ( VAR_1 != null ) && ( VAR_1 >= INT_1 ) ) COND ( VAR_1 != null ) && ( VAR_1 >= INT_1 ) ( THEN THEN (  return METHOD_3 ( ) . METHOD_4 ( ) ; )  return METHOD_3 ( ) . METHOD_4 ( ) ; ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_1 != null ) && ( VAR_1 < 0 ) ) COND ( VAR_1 != null ) && ( VAR_1 < 0 ) ( THEN THEN (  return METHOD_3 ( ) . METHOD_5 ( ) ; )  return METHOD_3 ( ) . METHOD_5 ( ) ; ) THEN THEN ) IF IF (  return VAR_1 != null ? VAR_1 + STRING_1 : STRING_2 ; )  return VAR_1 != null ? VAR_1 + STRING_1 : STRING_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1.VdcQueryType ) TYPE TYPE_1.VdcQueryType ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 ) INIT = VAR_3 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME result ) NAME result ( INIT = VAR_4 . runQuery ( VAR_2 , VAR_5 , VAR_1 ) ) INIT = VAR_4 . runQuery ( VAR_2 , VAR_5 , VAR_1 ) ) VAR VAR (  TYPE_2 . assertEquals ( result , VAR_6 ) )  TYPE_2 . assertEquals ( result , VAR_6 ) (  org.mockito.Mockito . METHOD_2 ( VAR_5 ) . METHOD_3 ( VAR_1 ) )  org.mockito.Mockito . METHOD_2 ( VAR_5 ) . METHOD_3 ( VAR_1 ) (  org.mockito.Mockito . METHOD_2 ( VAR_5 ) . METHOD_4 ( VAR_1 ) )  org.mockito.Mockito . METHOD_2 ( VAR_5 ) . METHOD_4 ( VAR_1 ) (  org.mockito.Mockito . METHOD_2 ( VAR_5 ) . METHOD_5 ( VAR_4 . METHOD_6 ( ) ) )  org.mockito.Mockito . METHOD_2 ( VAR_5 ) . METHOD_5 ( VAR_4 . METHOD_6 ( ) ) (  org.mockito.Mockito . METHOD_2 ( VAR_7 ) . runQuery ( VAR_2 , VAR_5 ) )  org.mockito.Mockito . METHOD_2 ( VAR_7 ) . runQuery ( VAR_2 , VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( TYPE_2 . METHOD_4 ( ) ) ) INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( TYPE_2 . METHOD_4 ( ) ) ) VAR VAR ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME iface ) NAME iface ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  TYPE_3 . getInstance ( ) . METHOD_5 ( iface . METHOD_6 ( ) ) )  TYPE_3 . getInstance ( ) . METHOD_5 ( iface . METHOD_6 ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) ( IF IF ( COND ( getEntity ( ) ) != null ) COND ( getEntity ( ) ) != null ( THEN THEN ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_1 ) ( getEntity ( ) ) ) ) INIT = ( ( TYPE_1 ) ( getEntity ( ) ) ) ) VAR VAR (  setItems ( VAR_1 . METHOD_2 ( ) ) )  setItems ( VAR_1 . METHOD_2 ( ) ) ) THEN THEN ( ELSE ELSE (  setItems ( null ) )  setItems ( null ) ) ELSE ELSE ) IF IF (  METHOD_3 ( ( ( TYPE_1 ) ( getEntity ( ) ) ) ) )  METHOD_3 ( ( ( TYPE_1 ) ( getEntity ( ) ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) (  dao = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) )  dao = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) (  VAR_2 = new TYPE_1 ( ) )  VAR_2 = new TYPE_1 ( ) (  VAR_2 . METHOD_4 ( org.ovirt.engine.core.compat.Guid . METHOD_5 ( ) ) )  VAR_2 . METHOD_4 ( org.ovirt.engine.core.compat.Guid . METHOD_5 ( ) ) (  VAR_2 . METHOD_6 ( STRING_1 ) )  VAR_2 . METHOD_6 ( STRING_1 ) (  VAR_2 . METHOD_7 ( STRING_2 ) )  VAR_2 . METHOD_7 ( STRING_2 ) (  VAR_2 . METHOD_8 ( VAR_3 ) )  VAR_2 . METHOD_8 ( VAR_3 ) (  VAR_4 = dao . get ( new org.ovirt.engine.core.compat.Guid ( STRING_3 ) ) )  VAR_4 = dao . get ( new org.ovirt.engine.core.compat.Guid ( STRING_3 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME resource ) NAME resource ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME entity ) NAME entity ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  model . METHOD_2 ( new TYPE_4 ( ) ) )  model . METHOD_2 ( new TYPE_4 ( ) ) ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_5 ( model ) ) INIT = new TYPE_5 ( model ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_6> ) TYPE java.util.List<TYPE_6> ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_3 ( entity ) ) INIT = VAR_1 . METHOD_3 ( entity ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK (  TYPE_7 . METHOD_4 ( resource . METHOD_5 ( ) , VAR_3 , VAR_1 . METHOD_6 ( ) ) )  TYPE_7 . METHOD_4 ( resource . METHOD_5 ( ) , VAR_3 , VAR_1 . METHOD_6 ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  model . METHOD_3 ( ) . METHOD_3 ( ) . METHOD_7 ( VAR_2 ) )  model . METHOD_3 ( ) . METHOD_3 ( ) . METHOD_7 ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<?> ) TYPE TYPE_1<?> ( NAME args ) NAME args ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_4 ) NAME METHOD_4 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  this . VAR_5 = result )  this . VAR_5 = result (  this . VAR_6 = VAR_3 )  this . VAR_6 = VAR_3 ) BLOCK BLOCK ) METHOD METHOD (  return VAR_2 . METHOD_3 ( args , VAR_3 , new TYPE_3 < TYPE_4 > ( ) { public void METHOD_4 ( TYPE_4 result ) { VAR_4 this . VAR_5 = result ; VAR_4 this . VAR_6 = VAR_3 ; } } , VAR_1 ) ; )  return VAR_2 . METHOD_3 ( args , VAR_3 , new TYPE_3 < TYPE_4 > ( ) { public void METHOD_4 ( TYPE_4 result ) { VAR_4 this . VAR_5 = result ; VAR_4 this . VAR_6 = VAR_3 ; } } , VAR_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( null ) )  org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( null ) ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ) TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_3 ( true ) ) INIT = METHOD_3 ( true ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = new TYPE_1 ( ) . METHOD_4 ( VAR_3 . length ) ) INIT = new TYPE_1 ( ) . METHOD_4 ( VAR_3 . length ) ) VAR VAR (  VAR_2 . METHOD_5 ( VAR_4 [ i ] ) )  VAR_2 . METHOD_5 ( VAR_4 [ i ] ) (  VAR_2 . setId ( VAR_5 ) )  VAR_2 . setId ( VAR_5 ) (  cmd . METHOD_6 ( ) )  cmd . METHOD_6 ( ) (  TYPE_2 . METHOD_7 ( cmd . validate ( ) ) )  TYPE_2 . METHOD_7 ( cmd . validate ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( VAR_1 class ) . METHOD_3 ( VAR_2 class ) )  METHOD_2 ( VAR_1 class ) . METHOD_3 ( VAR_2 class ) (  METHOD_2 ( VAR_3 class ) . METHOD_3 ( VAR_2 class ) )  METHOD_2 ( VAR_3 class ) . METHOD_3 ( VAR_2 class ) (  METHOD_2 ( VAR_4 class ) . METHOD_3 ( VAR_2 class ) )  METHOD_2 ( VAR_4 class ) . METHOD_3 ( VAR_2 class ) (  METHOD_2 ( VAR_5 class ) . METHOD_3 ( VAR_2 class ) )  METHOD_2 ( VAR_5 class ) . METHOD_3 ( VAR_2 class ) (  METHOD_2 ( VAR_6 class ) . METHOD_3 ( VAR_2 class ) )  METHOD_2 ( VAR_6 class ) . METHOD_3 ( VAR_2 class ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_3 . METHOD_2 ( VAR_1 . METHOD_3 ( STRING_1 ) ) ) INIT = TYPE_3 . METHOD_2 ( VAR_1 . METHOD_3 ( STRING_1 ) ) ) VAR VAR (  TYPE_4 . METHOD_4 ( STRING_2 , VAR_2 . METHOD_5 ( STRING_2 ) ) )  TYPE_4 . METHOD_4 ( STRING_2 , VAR_2 . METHOD_5 ( STRING_2 ) ) (  TYPE_4 . METHOD_4 ( STRING_3 , ( ! ( VAR_2 . METHOD_5 ( STRING_3 ) ) ) ) )  TYPE_4 . METHOD_4 ( STRING_3 , ( ! ( VAR_2 . METHOD_5 ( STRING_3 ) ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ( INIT = ( ( org.ovirt.engine.core.common.businessentities.VM ) ( getEntity ( ) ) ) ) INIT = ( ( org.ovirt.engine.core.common.businessentities.VM ) ( getEntity ( ) ) ) ) VAR VAR ( IF IF ( COND vm != null ) COND vm != null ( THEN THEN ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_4 ) NAME METHOD_4 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ) BLOCK BLOCK ) METHOD METHOD (  org.ovirt.engine.ui.frontend.Frontend . METHOD_3 ( VAR_2 , new TYPE_2 ( vm . getId ( ) , VAR_1 . getId ( ) ) , new TYPE_3 ( ) { public void METHOD_4 ( TYPE_4 result ) { } } , null ) )  org.ovirt.engine.ui.frontend.Frontend . METHOD_3 ( VAR_2 , new TYPE_2 ( vm . getId ( ) , VAR_1 . getId ( ) ) , new TYPE_3 ( ) { public void METHOD_4 ( TYPE_4 result ) { } } , null ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND result != null ) COND result != null ( THEN THEN ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ( INIT = ( ( org.ovirt.engine.core.common.businessentities.VM ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( result ) ) . getReturnValue ( ) ) ) ) INIT = ( ( org.ovirt.engine.core.common.businessentities.VM ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( result ) ) . getReturnValue ( ) ) ) ) VAR VAR ( IF IF ( COND vm == null ) COND vm == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_2 ) ( model ) ) ) INIT = ( ( TYPE_2 ) ( model ) ) ) VAR VAR (  VAR_1 . METHOD_2 ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( vm . getId ( ) ) ) )  VAR_1 . METHOD_2 ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( vm . getId ( ) ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( client ) != null ) COND ( client ) != null ( THEN THEN ( TRY TRY ( BLOCK BLOCK (  client . METHOD_2 ( java.lang.String . METHOD_3 ( STRING_1 , VAR_1 ) , null , null , null ) )  client . METHOD_2 ( java.lang.String . METHOD_3 ( STRING_1 , VAR_1 ) , null , null , null ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ( TRY TRY ( BLOCK BLOCK (  client . METHOD_4 ( ) )  client . METHOD_4 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  client = null )  client = null ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_2 ) != null ) COND ( VAR_2 ) != null ( THEN THEN (  VAR_2 . METHOD_5 ( ) )  VAR_2 . METHOD_5 ( ) (  VAR_2 = null )  VAR_2 = null ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3.VdcQueryReturnValue ) TYPE TYPE_3.VdcQueryReturnValue ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_3 . VdcQueryReturnValue ) ( returnValue ) ) ) INIT = ( ( TYPE_3 . VdcQueryReturnValue ) ( returnValue ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_2 . getReturnValue ( ) ) INIT = VAR_2 . getReturnValue ( ) ) VAR VAR ( IF IF ( COND VAR_3 != null ) COND VAR_3 != null ( THEN THEN (  METHOD_3 ( VAR_3 ) )  METHOD_3 ( VAR_3 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD (  TYPE_2 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { TYPE_3 . VdcQueryReturnValue VAR_2 = ( ( TYPE_3 . VdcQueryReturnValue ) ( returnValue ) ) ; TYPE_4 VAR_3 = VAR_2 . getReturnValue ( ) ; if ( VAR_3 != null ) { METHOD_3 ( VAR_3 ) ; } } } ) , VAR_1 . METHOD_4 ( ) , VAR_1 . getId ( ) ) )  TYPE_2 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { TYPE_3 . VdcQueryReturnValue VAR_2 = ( ( TYPE_3 . VdcQueryReturnValue ) ( returnValue ) ) ; TYPE_4 VAR_3 = VAR_2 . getReturnValue ( ) ; if ( VAR_3 != null ) { METHOD_3 ( VAR_3 ) ; } } } ) , VAR_1 . METHOD_4 ( ) , VAR_1 . getId ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME type ) NAME type ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  this . type = type )  this . type = type (  METHOD_2 ( ) . METHOD_1 ( VAR_1 ) )  METHOD_2 ( ) . METHOD_1 ( VAR_1 ) ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( IN type . METHOD_3 ( ) . METHOD_4 ( ) ) IN type . METHOD_3 ( ) . METHOD_4 ( ) ( BLOCK BLOCK (  METHOD_2 ( ) . METHOD_5 ( VAR_3 ) )  METHOD_2 ( ) . METHOD_5 ( VAR_3 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  VAR_4 . METHOD_6 ( VAR_5 ) )  VAR_4 . METHOD_6 ( VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) ) != VAR_1 ) COND ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) ) != VAR_1 ( THEN THEN (  TYPE_1 . getParameters ( ) . METHOD_3 ( VAR_1 ) )  TYPE_1 . getParameters ( ) . METHOD_3 ( VAR_1 ) (  METHOD_4 ( TYPE_1 . getParameters ( ) . METHOD_5 ( ) , true ) )  METHOD_4 ( TYPE_1 . getParameters ( ) . METHOD_5 ( ) , true ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME status ) NAME status ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  org.mockito.Mockito.when ( cmd . METHOD_2 ( ) ) . thenReturn ( cluster ) )  org.mockito.Mockito.when ( cmd . METHOD_2 ( ) ) . thenReturn ( cluster ) (  org.mockito.Mockito.doReturn ( vds ) . when ( cmd ) . METHOD_3 ( ) )  org.mockito.Mockito.doReturn ( vds ) . when ( cmd ) . METHOD_3 ( ) (  org.mockito.Mockito.doReturn ( status ) . when ( vds ) . getStatus ( ) )  org.mockito.Mockito.doReturn ( status ) . when ( vds ) . getStatus ( ) (  METHOD_4 ( true ) )  METHOD_4 ( true ) (  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( cmd ) . METHOD_5 ( ) )  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( cmd ) . METHOD_5 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( ( ( VAR_1 ) != null ) && ( VAR_1 . equals ( VAR_2 ) ) ) && ( ( METHOD_2 ( ) ) != null ) ) COND ( ( ( VAR_1 ) != null ) && ( VAR_1 . equals ( VAR_2 ) ) ) && ( ( METHOD_2 ( ) ) != null ) ( THEN THEN (  VAR_1 = METHOD_2 ( ) . METHOD_1 ( ) )  VAR_1 = METHOD_2 ( ) . METHOD_1 ( ) ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1.Disk> ) TYPE java.util.List<TYPE_1.Disk> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1.DiskImage ) TYPE TYPE_1.DiskImage ( NAME diskImage ) NAME diskImage ( INIT = new TYPE_1 . DiskImage ( ) ) INIT = new TYPE_1 . DiskImage ( ) ) VAR VAR (  diskImage . METHOD_2 ( new java.util.ArrayList ( TYPE_2 . METHOD_3 ( org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) ) ) ) )  diskImage . METHOD_2 ( new java.util.ArrayList ( TYPE_2 . METHOD_3 ( org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) ) ) ) (  VAR_1 . add ( diskImage ) )  VAR_1 . add ( diskImage ) (  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( VAR_3 ) . METHOD_5 ( ) )  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( VAR_3 ) . METHOD_5 ( ) (  org.mockito.Mockito.when ( VAR_2 . METHOD_6 ( vmId ) ) . thenReturn ( VAR_1 ) )  org.mockito.Mockito.when ( VAR_2 . METHOD_6 ( vmId ) ) . thenReturn ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected static ) MODIFIER protected static ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VM> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VM> ( NAME VAR_2 ) NAME VAR_2 ( INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( VAR_1 ) ) INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = 0 ) INIT = 0 ) VAR VAR ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK ( IF IF ( COND ( vm . METHOD_4 ( ) ) && ( TYPE_2 . METHOD_5 ( vm . getId ( ) ) ) ) COND ( vm . METHOD_4 ( ) ) && ( TYPE_2 . METHOD_5 ( vm . getId ( ) ) ) ( THEN THEN (  ++ VAR_3 )  ++ VAR_3 ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_1 ) ) COND ! ( VAR_1 ) ( THEN THEN (  VAR_1 = true )  VAR_1 = true ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.compat.Version ) TYPE org.ovirt.engine.core.compat.Version ( NAME item ) NAME item ( IN METHOD_2 ( ) . METHOD_3 ( ) ) IN METHOD_2 ( ) . METHOD_3 ( ) ( BLOCK BLOCK ( IF IF ( COND TYPE_1 . METHOD_4 ( item , getEntity ( ) . METHOD_5 ( ) ) ) COND TYPE_1 . METHOD_4 ( item , getEntity ( ) . METHOD_5 ( ) ) ( THEN THEN (  METHOD_2 ( ) . setSelectedItem ( item ) )  METHOD_2 ( ) . setSelectedItem ( item ) (  break ; )  break ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME getValue ) NAME getValue ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME item ) NAME item ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_3 . METHOD_1 ( ) . get ( VAR_2 . METHOD_2 ( item ) ) ) INIT = TYPE_3 . METHOD_1 ( ) . get ( VAR_2 . METHOD_2 ( item ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME resource ) NAME resource ( INIT = TYPE_5 . METHOD_3 ( ) . METHOD_4 ( ( VAR_1 + STRING_1 ) ) ) INIT = TYPE_5 . METHOD_3 ( ) . METHOD_4 ( ( VAR_1 + STRING_1 ) ) ) VAR VAR ( IF IF ( COND ! ( resource instanceof TYPE_1 ) ) COND ! ( resource instanceof TYPE_1 ) ( THEN THEN (  resource = TYPE_5 . METHOD_3 ( ) . METHOD_5 ( ) )  resource = TYPE_5 . METHOD_3 ( ) . METHOD_5 ( ) ) THEN THEN ) IF IF (  return ( ( TYPE_1 ) ( resource ) ) ; )  return ( ( TYPE_1 ) ( resource ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ( INIT = ( ( org.ovirt.engine.core.common.businessentities.VM ) ( getEntity ( ) ) ) ) INIT = ( ( org.ovirt.engine.core.common.businessentities.VM ) ( getEntity ( ) ) ) ) VAR VAR ( IF IF ( COND vm != null ) COND vm != null ( THEN THEN ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_1 ) ( getSelectedItem ( ) ) ) ) INIT = ( ( TYPE_1 ) ( getSelectedItem ( ) ) ) ) VAR VAR ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_3 ) NAME METHOD_3 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ) BLOCK BLOCK ) METHOD METHOD (  org.ovirt.engine.ui.frontend.Frontend . METHOD_2 ( VAR_2 , new TYPE_2 ( vm . getId ( ) , VAR_1 . getId ( ) ) , new TYPE_3 ( ) { public void METHOD_3 ( TYPE_4 result ) { } } , null ) )  org.ovirt.engine.ui.frontend.Frontend . METHOD_2 ( VAR_2 , new TYPE_2 ( vm . getId ( ) , VAR_1 . getId ( ) ) , new TYPE_3 ( ) { public void METHOD_3 ( TYPE_4 result ) { } } , null ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  return VAR_2 ; )  return VAR_2 ; ) THEN THEN ) IF IF ( IF IF ( COND ( METHOD_2 ( ) ) == ( VAR_3 ) ) COND ( METHOD_2 ( ) ) == ( VAR_3 ) ( THEN THEN (  return TYPE_1 . METHOD_3 ( ) . METHOD_4 ( ) ; )  return TYPE_1 . METHOD_3 ( ) . METHOD_4 ( ) ; ) THEN THEN ) IF IF ( IF IF ( COND ! ( TYPE_2 . METHOD_5 ( TYPE_1 . getVm ( ) . METHOD_6 ( ) , TYPE_1 . getVm ( ) . METHOD_7 ( ) ) ) ) COND ! ( TYPE_2 . METHOD_5 ( TYPE_1 . getVm ( ) . METHOD_6 ( ) , TYPE_1 . getVm ( ) . METHOD_7 ( ) ) ) ( THEN THEN (  return VAR_2 ; )  return VAR_2 ; ) THEN THEN ) IF IF (  return TYPE_1 . METHOD_3 ( ) . METHOD_4 ( ) ; )  return TYPE_1 . METHOD_3 ( ) . METHOD_4 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ! ( TYPE_1 . METHOD_2 ( METHOD_3 ( ) . METHOD_4 ( ) ) ) ) COND ! ( TYPE_1 . METHOD_2 ( METHOD_3 ( ) . METHOD_4 ( ) ) ) ( THEN THEN (  return METHOD_3 ( ) . METHOD_4 ( ) ; )  return METHOD_3 ( ) . METHOD_4 ( ) ; ) THEN THEN ) IF IF ( IF IF ( COND ! ( TYPE_1 . METHOD_2 ( METHOD_3 ( ) . METHOD_5 ( ) ) ) ) COND ! ( TYPE_1 . METHOD_2 ( METHOD_3 ( ) . METHOD_5 ( ) ) ) ( THEN THEN (  return METHOD_3 ( ) . METHOD_5 ( ) ; )  return METHOD_3 ( ) . METHOD_5 ( ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_6 ( VAR_2 ) ) INIT = METHOD_6 ( VAR_2 ) ) VAR VAR ( IF IF ( COND TYPE_1 . METHOD_2 ( VAR_1 ) ) COND TYPE_1 . METHOD_2 ( VAR_1 ) ( THEN THEN (  return VAR_1 ; )  return VAR_1 ; ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) ( IF IF ( COND ( TYPE_1 . getVm ( ) ) != null ) COND ( TYPE_1 . getVm ( ) ) != null ( THEN THEN (  METHOD_2 ( TYPE_1 . getVm ( ) . getStoragePoolId ( ) ) )  METHOD_2 ( TYPE_1 . getVm ( ) . getStoragePoolId ( ) ) (  METHOD_3 ( ) )  METHOD_3 ( ) (  VAR_1 = VAR_2 . METHOD_4 ( TYPE_1 . getVm ( ) ) )  VAR_1 = VAR_2 . METHOD_4 ( TYPE_1 . getVm ( ) ) (  METHOD_5 ( ) )  METHOD_5 ( ) (  METHOD_6 ( ) )  METHOD_6 ( ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( METHOD_2 ( ) . METHOD_3 ( STRING_1 ) ) && ( METHOD_4 ( ) . METHOD_3 ( STRING_2 ) ) ) COND ( METHOD_2 ( ) . METHOD_3 ( STRING_1 ) ) && ( METHOD_4 ( ) . METHOD_3 ( STRING_2 ) ) ( THEN THEN ( IF IF ( COND METHOD_5 ( ) . METHOD_3 ( STRING_3 ) ) COND METHOD_5 ( ) . METHOD_3 ( STRING_3 ) ( THEN THEN (  METHOD_6 ( ) )  METHOD_6 ( ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND METHOD_5 ( ) . METHOD_3 ( STRING_4 ) ) COND METHOD_5 ( ) . METHOD_3 ( STRING_4 ) ( THEN THEN (  METHOD_7 ( ) )  METHOD_7 ( ) ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1.Disk ) RETURN TYPE_1.Disk ( NAME getEntity ) NAME getEntity ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2.DiskImage ) TYPE TYPE_2.DiskImage ( NAME entity ) NAME entity ( INIT = new TYPE_2 . DiskImage ( ) ) INIT = new TYPE_2 . DiskImage ( ) ) VAR VAR (  entity . setId ( VAR_2 [ VAR_1 ] ) )  entity . setId ( VAR_2 [ VAR_1 ] ) (  entity . METHOD_1 ( VAR_3 ) )  entity . METHOD_1 ( VAR_3 ) (  entity . METHOD_2 ( VAR_4 ) )  entity . METHOD_2 ( VAR_4 ) (  entity . METHOD_3 ( VAR_5 ) )  entity . METHOD_3 ( VAR_5 ) (  entity . METHOD_4 ( VAR_6 ) )  entity . METHOD_4 ( VAR_6 ) (  entity . METHOD_5 ( false ) )  entity . METHOD_5 ( false ) (  entity . METHOD_6 ( false ) )  entity . METHOD_6 ( false ) (  entity . METHOD_7 ( VAR_7 ) )  entity . METHOD_7 ( VAR_7 ) (  return TYPE_3 . METHOD_8 ( entity ) ; )  return TYPE_3 . METHOD_8 ( entity ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  dao . METHOD_2 ( VAR_1 ) )  dao . METHOD_2 ( VAR_1 ) ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_2 ) NAME VAR_2 ( INIT = dao . METHOD_3 ( VAR_3 ) ) INIT = dao . METHOD_3 ( VAR_3 ) ) VAR VAR (  TYPE_2 . METHOD_4 ( ( ( VAR_2 . size ( ) ) == 1 ) ) )  TYPE_2 . METHOD_4 ( ( ( VAR_2 . size ( ) ) == 1 ) ) (  TYPE_2 . METHOD_5 ( VAR_2 . METHOD_6 ( VAR_4 ) ) )  TYPE_2 . METHOD_5 ( VAR_2 . METHOD_6 ( VAR_4 ) ) (  TYPE_2 . METHOD_4 ( VAR_2 . METHOD_6 ( VAR_5 ) ) )  TYPE_2 . METHOD_4 ( VAR_2 . METHOD_6 ( VAR_5 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.Disk ) TYPE org.ovirt.engine.core.common.businessentities.Disk ( NAME disk ) NAME disk ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.Object> ) TYPE java.util.Map<java.lang.String,java.lang.Object> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 < > ( ) ) INIT = new TYPE_2 < > ( ) ) VAR VAR (  VAR_1 . put ( VAR_2 , disk . METHOD_2 ( ) ) )  VAR_1 . put ( VAR_2 , disk . METHOD_2 ( ) ) (  VAR_1 . put ( VAR_3 , ( ( disk . METHOD_3 ( ) ) != null ? disk . METHOD_3 ( ) : STRING_1 ) ) )  VAR_1 . put ( VAR_3 , ( ( disk . METHOD_3 ( ) ) != null ? disk . METHOD_3 ( ) : STRING_1 ) ) (  return TYPE_3 . METHOD_4 ( VAR_1 , false ) ; )  return TYPE_3 . METHOD_4 ( VAR_1 , false ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<TYPE_2.ValidationResult> ) TYPE TYPE_1<TYPE_2.ValidationResult> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.network.Network ) TYPE org.ovirt.engine.core.common.businessentities.network.Network ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_3> ) TYPE java.util.List<TYPE_3> ( NAME VAR_3 ) NAME VAR_3 ( INIT = new java.util.ArrayList ( VAR_2 . length ) ) INIT = new java.util.ArrayList ( VAR_2 . length ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.network.Network ) TYPE org.ovirt.engine.core.common.businessentities.network.Network ( NAME network ) NAME network ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK (  VAR_3 . add ( METHOD_2 ( STRING_1 , network ) ) )  VAR_3 . add ( METHOD_2 ( STRING_1 , network ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME validator ) NAME validator ( INIT = new TYPE_4 ( VAR_3 , VAR_4 ) ) INIT = new TYPE_4 ( VAR_3 , VAR_4 ) ) VAR VAR (  TYPE_5 . METHOD_3 ( validator . METHOD_4 ( ) , VAR_1 ) )  TYPE_5 . METHOD_3 ( validator . METHOD_4 ( ) , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME vds ) NAME vds ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return ( ( ! ( vds . getId ( ) . equals ( VAR_1 . getId ( ) ) ) ) && ( vds . METHOD_2 ( ) . equals ( VAR_1 . METHOD_2 ( ) ) ) ) && ( ( vds . METHOD_3 ( ) ) == ( VAR_2 ) ) ; )  return ( ( ! ( vds . getId ( ) . equals ( VAR_1 . getId ( ) ) ) ) && ( vds . METHOD_2 ( ) . equals ( VAR_1 . METHOD_2 ( ) ) ) ) && ( ( vds . METHOD_3 ( ) ) == ( VAR_2 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<TYPE_2.ValidationResult> ) TYPE TYPE_1<TYPE_2.ValidationResult> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VM> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VM> ( NAME vms ) NAME vms ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = org.mockito.Mockito . METHOD_2 ( VAR_3 class ) ) INIT = org.mockito.Mockito . METHOD_2 ( VAR_3 class ) ) VAR VAR (  org.mockito.Mockito.when ( VAR_2 . METHOD_3 ( TYPE_4 . any ( VAR_4 . Guid class ) ) ) . thenReturn ( vms ) )  org.mockito.Mockito.when ( VAR_2 . METHOD_3 ( TYPE_4 . any ( VAR_4 . Guid class ) ) ) . thenReturn ( vms ) (  org.mockito.Mockito.when ( VAR_5 . METHOD_4 ( ) ) . thenReturn ( VAR_2 ) )  org.mockito.Mockito.when ( VAR_5 . METHOD_4 ( ) ) . thenReturn ( VAR_2 ) (  TYPE_5 . METHOD_5 ( validator . METHOD_6 ( ) , VAR_1 ) )  TYPE_5 . METHOD_5 ( validator . METHOD_6 ( ) , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( VAR_1 , true ) )  METHOD_2 ( VAR_1 , true ) (  METHOD_3 ( STRING_1 ) )  METHOD_3 ( STRING_1 ) (  command . METHOD_4 ( ) )  command . METHOD_4 ( ) (  org.mockito.Mockito . METHOD_5 ( VAR_2 , org.mockito.Mockito . METHOD_6 ( 2 ) ) . log ( TYPE_1 . any ( VAR_3 class ) , TYPE_1 . any ( VAR_4 . AuditLogType class ) ) )  org.mockito.Mockito . METHOD_5 ( VAR_2 , org.mockito.Mockito . METHOD_6 ( 2 ) ) . log ( TYPE_1 . any ( VAR_3 class ) , TYPE_1 . any ( VAR_4 . AuditLogType class ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1.VdcActionParametersBase ) RETURN TYPE_1.VdcActionParametersBase ( NAME getParameters ) NAME getParameters ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME entity ) NAME entity ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME parameters ) NAME parameters ( INIT = new TYPE_4 ( ) ) INIT = new TYPE_4 ( ) ) VAR VAR (  parameters . METHOD_1 ( TYPE_5 . map ( TYPE_6 . METHOD_2 ( model . METHOD_3 ( ) ) ) ) )  parameters . METHOD_1 ( TYPE_5 . map ( TYPE_6 . METHOD_2 ( model . METHOD_3 ( ) ) ) ) (  parameters . METHOD_4 ( TYPE_5 . map ( TYPE_7 . METHOD_2 ( model . getModel ( ) ) ) ) )  parameters . METHOD_4 ( TYPE_5 . map ( TYPE_7 . METHOD_2 ( model . getModel ( ) ) ) ) (  parameters . setId ( VAR_1 ) )  parameters . setId ( VAR_1 ) (  parameters . METHOD_5 ( false ) )  parameters . METHOD_5 ( false ) (  return parameters ; )  return parameters ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_1 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) )  VAR_1 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) (  org.mockito.Mockito.when ( METHOD_3 ( ) . getId ( ) ) . thenReturn ( VAR_2 ) )  org.mockito.Mockito.when ( METHOD_3 ( ) . getId ( ) ) . thenReturn ( VAR_2 ) (  org.mockito.Mockito.when ( VAR_3 . get ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) ) . thenReturn ( VAR_1 ) )  org.mockito.Mockito.when ( VAR_3 . get ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) ) . thenReturn ( VAR_1 ) (  METHOD_4 ( ) . METHOD_5 ( ) )  METHOD_4 ( ) . METHOD_5 ( ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ( INIT = METHOD_4 ( ) . METHOD_6 ( ) . getReturnValue ( ) ) INIT = METHOD_4 ( ) . METHOD_6 ( ) . getReturnValue ( ) ) VAR VAR (  TYPE_2 . METHOD_7 ( result ) )  TYPE_2 . METHOD_7 ( result ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.network ) TYPE org.ovirt.engine.core.common.businessentities.network ( NAME result ) NAME result ( INIT = dao . METHOD_2 ( VAR_1 ) ) INIT = dao . METHOD_2 ( VAR_1 ) ) VAR VAR (  TYPE_1 . METHOD_3 ( result ) )  TYPE_1 . METHOD_3 ( result ) (  dao . METHOD_4 ( result . getId ( ) ) )  dao . METHOD_4 ( result . getId ( ) ) (  result = dao . METHOD_2 ( VAR_1 ) )  result = dao . METHOD_2 ( VAR_1 ) (  TYPE_1 . METHOD_5 ( result ) )  TYPE_1 . METHOD_5 ( result ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( ( ( TYPE_3 ) ( VAR_2 . getReturnValue ( ) ) ) . METHOD_2 ( ) ) ) COND ! ( ( ( TYPE_3 ) ( VAR_2 . getReturnValue ( ) ) ) . METHOD_2 ( ) ) ( THEN THEN (  TYPE_4 . METHOD_3 ( false ) )  TYPE_4 . METHOD_3 ( false ) (  VAR_3 . METHOD_4 ( STRING_1 , TYPE_4 . getParameters ( ) . METHOD_5 ( ) . name ( ) . METHOD_6 ( ) ) )  VAR_3 . METHOD_4 ( STRING_1 , TYPE_4 . getParameters ( ) . METHOD_5 ( ) . name ( ) . METHOD_6 ( ) ) (  throw new TYPE_5 ( VAR_4 ) ; )  throw new TYPE_5 ( VAR_4 ) ; ) THEN THEN ( ELSE ELSE (  METHOD_7 ( VAR_1 ) )  METHOD_7 ( VAR_1 ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . getParameters ( ) . METHOD_2 ( ) ) INIT = TYPE_2 . getParameters ( ) . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN (  TYPE_3 . METHOD_3 ( new TYPE_4 ( org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) , TYPE_2 . getParameters ( ) . METHOD_5 ( ) ) , VAR_2 , VAR_1 . METHOD_6 ( ) , VAR_1 . METHOD_7 ( ) , true , true , null ) )  TYPE_3 . METHOD_3 ( new TYPE_4 ( org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) , TYPE_2 . getParameters ( ) . METHOD_5 ( ) ) , VAR_2 , VAR_1 . METHOD_6 ( ) , VAR_1 . METHOD_7 ( ) , true , true , null ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) (  params = METHOD_2 ( ) )  params = METHOD_2 ( ) (  org.mockito.Mockito.when ( METHOD_3 ( ) . METHOD_4 ( ) ) . thenReturn ( VAR_1 ) )  org.mockito.Mockito.when ( METHOD_3 ( ) . METHOD_4 ( ) ) . thenReturn ( VAR_1 ) (  org.mockito.Mockito.when ( params . METHOD_5 ( ) ) . thenReturn ( VAR_2 ) )  org.mockito.Mockito.when ( params . METHOD_5 ( ) ) . thenReturn ( VAR_2 ) (  VAR_3 = METHOD_6 ( ) )  VAR_3 = METHOD_6 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( VAR_2 ) ) INIT = new TYPE_2 ( VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME error ) NAME error ( INIT = VAR_1 . METHOD_2 ( TYPE_3 . METHOD_3 ( VAR_3 ) ) ) INIT = VAR_1 . METHOD_2 ( TYPE_3 . METHOD_3 ( VAR_3 ) ) ) VAR VAR (  TYPE_4 . METHOD_4 ( STRING_1 , ( ( error . size ( ) ) == 1 ) ) )  TYPE_4 . METHOD_4 ( STRING_1 , ( ( error . size ( ) ) == 1 ) ) (  TYPE_4 . assertEquals ( STRING_2 , STRING_3 , error . get ( 0 ) ) )  TYPE_4 . assertEquals ( STRING_2 , STRING_3 , error . get ( 0 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.Network ) TYPE org.ovirt.engine.core.common.businessentities.Network ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( STRING_1 ) ) INIT = METHOD_2 ( STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME nic ) NAME nic ( INIT = METHOD_3 ( STRING_2 , VAR_1 ) ) INIT = METHOD_3 ( STRING_2 , VAR_1 ) ) VAR VAR (  nic . METHOD_4 ( ( ! ( VAR_1 . METHOD_5 ( ) ) ) ) )  nic . METHOD_4 ( ( ! ( VAR_1 . METHOD_5 ( ) ) ) ) (  nic . METHOD_6 ( VAR_2 ) )  nic . METHOD_6 ( VAR_2 ) (  METHOD_7 ( VAR_1 ) )  METHOD_7 ( VAR_1 ) (  METHOD_8 ( nic ) )  METHOD_8 ( nic ) (  nic . METHOD_6 ( VAR_3 ) )  nic . METHOD_6 ( VAR_3 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_9 ( METHOD_10 ( nic ) ) ) INIT = METHOD_9 ( METHOD_10 ( nic ) ) ) VAR VAR (  METHOD_11 ( VAR_4 , VAR_5 , VAR_1 . getName ( ) ) )  METHOD_11 ( VAR_4 , VAR_5 , VAR_1 . getName ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1.DiskImage ) RETURN TYPE_1.DiskImage ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME size ) NAME size ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.DiskImage ) TYPE TYPE_1.DiskImage ( NAME diskImage ) NAME diskImage ( INIT = new TYPE_1 . DiskImage ( ) ) INIT = new TYPE_1 . DiskImage ( ) ) VAR VAR (  diskImage . METHOD_2 ( size ) )  diskImage . METHOD_2 ( size ) (  diskImage . METHOD_3 ( size ) )  diskImage . METHOD_3 ( size ) (  diskImage . setId ( org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) ) )  diskImage . setId ( org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) ) (  diskImage . METHOD_5 ( org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) ) )  diskImage . METHOD_5 ( org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) ) (  diskImage . METHOD_6 ( new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( TYPE_2 . METHOD_7 ( VAR_1 ) ) ) )  diskImage . METHOD_6 ( new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( TYPE_2 . METHOD_7 ( VAR_1 ) ) ) (  return diskImage ; )  return diskImage ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( METHOD_3 ( ) ) )  METHOD_2 ( METHOD_3 ( ) ) (  METHOD_4 ( TYPE_1 . METHOD_5 ( ) ) )  METHOD_4 ( TYPE_1 . METHOD_5 ( ) ) (  VAR_1 . METHOD_6 ( ) )  VAR_1 . METHOD_6 ( ) ( TRY TRY ( BLOCK BLOCK (  resource . get ( ) )  resource . get ( ) (  METHOD_7 ( STRING_1 ) )  METHOD_7 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( BLOCK BLOCK (  METHOD_8 ( VAR_2 ) )  METHOD_8 ( VAR_2 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME obj ) NAME obj ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME map ) NAME map ( INIT = METHOD_2 ( obj . getId ( ) ) . addValue ( STRING_1 , METHOD_3 ( ) ) . addValue ( STRING_2 , obj . getName ( ) ) . addValue ( STRING_3 , obj . METHOD_4 ( ) ) . addValue ( STRING_4 , obj . getStoragePoolId ( ) ) ) INIT = METHOD_2 ( obj . getId ( ) ) . addValue ( STRING_1 , METHOD_3 ( ) ) . addValue ( STRING_2 , obj . getName ( ) ) . addValue ( STRING_3 , obj . METHOD_4 ( ) ) . addValue ( STRING_4 , obj . getStoragePoolId ( ) ) ) VAR VAR (  return map ; )  return map ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( ( TYPE_1 . getStoragePoolId ( ) ) == null ) || ( TYPE_2 . equals ( TYPE_1 . getStoragePoolId ( ) ) ) ) COND ( ( TYPE_1 . getStoragePoolId ( ) ) == null ) || ( TYPE_2 . equals ( TYPE_1 . getStoragePoolId ( ) ) ) ( THEN THEN (  METHOD_2 ( ( ( ( TYPE_1 . METHOD_3 ( ) ) != null ) && ( ( TYPE_1 . METHOD_3 ( ) . METHOD_4 ( ) ) != null ) ? TYPE_1 . METHOD_3 ( ) . METHOD_4 ( ) . getValue ( ) : VAR_1 ) ) )  METHOD_2 ( ( ( ( TYPE_1 . METHOD_3 ( ) ) != null ) && ( ( TYPE_1 . METHOD_3 ( ) . METHOD_4 ( ) ) != null ) ? TYPE_1 . METHOD_3 ( ) . METHOD_4 ( ) . getValue ( ) : VAR_1 ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME parameters ) NAME parameters ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SWITCH SWITCH ( NAME parameters . METHOD_2 ( ) ) NAME parameters . METHOD_2 ( ) ( CASE VAR_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3<?> ) TYPE TYPE_3<?> ( NAME command ) NAME command ( INIT = TYPE_4 . METHOD_3 ( parameters . METHOD_2 ( ) , parameters ) ) INIT = TYPE_4 . METHOD_3 ( parameters . METHOD_2 ( ) , parameters ) ) VAR VAR (  command . METHOD_4 ( ) )  command . METHOD_4 ( ) (  return command . METHOD_5 ( ) ; )  return command . METHOD_5 ( ) ; ) BLOCK BLOCK ) CASE VAR_1 ( CASE VAR_2 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3<?> ) TYPE TYPE_3<?> ( NAME command ) NAME command ( INIT = TYPE_4 . METHOD_3 ( parameters . METHOD_2 ( ) , parameters ) ) INIT = TYPE_4 . METHOD_3 ( parameters . METHOD_2 ( ) , parameters ) ) VAR VAR (  command . METHOD_4 ( ) )  command . METHOD_4 ( ) (  return command . METHOD_5 ( ) ; )  return command . METHOD_5 ( ) ; ) BLOCK BLOCK ) CASE VAR_2 ( DEFAULT DEFAULT ( BLOCK BLOCK (  return METHOD_6 ( VAR_3 ) ; )  return METHOD_6 ( VAR_3 ) ; ) BLOCK BLOCK ) DEFAULT DEFAULT ) SWITCH SWITCH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ( INIT = ( ( TYPE_1 ) ( target ) ) ) INIT = ( ( TYPE_1 ) ( target ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_2 ) ( returnValue ) ) ) INIT = ( ( TYPE_2 ) ( returnValue ) ) ) VAR VAR (  model . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) )  model . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) (  model . METHOD_4 ( ) )  model . METHOD_4 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( getParameters ( ) . METHOD_2 ( ) ) ) INIT = new TYPE_1 ( getParameters ( ) . METHOD_2 ( ) ) ) VAR VAR (  return ( ( validate ( VAR_1 . METHOD_3 ( ) ) ) && ( validate ( VAR_1 . METHOD_4 ( ) ) ) ) && ( validate ( VAR_1 . METHOD_5 ( ) ) ) ; )  return ( ( validate ( VAR_1 . METHOD_3 ( ) ) ) && ( validate ( VAR_1 . METHOD_4 ( ) ) ) ) && ( validate ( VAR_1 . METHOD_5 ( ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( STRING_1 ) ) INIT = TYPE_2 . METHOD_2 ( STRING_1 ) ) VAR VAR (  TYPE_3 . METHOD_3 ( VAR_1 ) )  TYPE_3 . METHOD_3 ( VAR_1 ) (  TYPE_3 . assertEquals ( VAR_1 , TYPE_2 . METHOD_2 ( STRING_1 ) ) )  TYPE_3 . assertEquals ( VAR_1 , TYPE_2 . METHOD_2 ( STRING_1 ) ) (  TYPE_3 . assertEquals ( STRING_1 , TYPE_2 . METHOD_4 ( ) ) )  TYPE_3 . assertEquals ( STRING_1 , TYPE_2 . METHOD_4 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDS> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDS> ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_2 ( new java.util.ArrayList < > ( ) , vm , null , org.mockito.Mockito . METHOD_3 ( VAR_3 class ) ) ) INIT = VAR_2 . METHOD_2 ( new java.util.ArrayList < > ( ) , vm , null , org.mockito.Mockito . METHOD_3 ( VAR_3 class ) ) ) VAR VAR (  TYPE_1 . METHOD_4 ( VAR_1 , TYPE_2 . METHOD_5 ( TYPE_3 . METHOD_6 ( ) ) ) )  TYPE_1 . METHOD_4 ( VAR_1 , TYPE_2 . METHOD_5 ( TYPE_3 . METHOD_6 ( ) ) ) (  TYPE_1 . METHOD_4 ( METHOD_7 ( ) , TYPE_2 . METHOD_5 ( TYPE_3 . METHOD_6 ( ) ) ) )  TYPE_1 . METHOD_4 ( METHOD_7 ( ) , TYPE_2 . METHOD_5 ( TYPE_3 . METHOD_6 ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( ) ) INIT = TYPE_2 . METHOD_2 ( ) ) VAR VAR ( SWITCH SWITCH ( NAME TYPE_2 . getParameters ( ) . METHOD_3 ( ) ) NAME TYPE_2 . getParameters ( ) . METHOD_3 ( ) ( CASE VAR_2 ( BLOCK BLOCK (  VAR_1 . METHOD_4 ( ) )  VAR_1 . METHOD_4 ( ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_2 ( CASE VAR_3 ( BLOCK BLOCK (  VAR_1 . METHOD_5 ( ) )  VAR_1 . METHOD_5 ( ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_3 ( DEFAULT DEFAULT ( BLOCK BLOCK (  break ; )  break ; ) BLOCK BLOCK ) DEFAULT DEFAULT ) SWITCH SWITCH ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_4 . error ( ( STRING_1 + ( TYPE_2 . getParameters ( ) . getStoragePoolId ( ) ) ) , e ) )  VAR_4 . error ( ( STRING_1 + ( TYPE_2 . getParameters ( ) . getStoragePoolId ( ) ) ) , e ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  TYPE_2 . METHOD_6 ( ) . METHOD_7 ( true ) )  TYPE_2 . METHOD_6 ( ) . METHOD_7 ( true ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME VAR_1 ) NAME VAR_1 ( INIT = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ) INIT = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ) VAR VAR ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_3 = ( ( java.util.HashMap < java.lang.Integer , java.lang.String > ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) )  VAR_3 = ( ( java.util.HashMap < java.lang.Integer , java.lang.String > ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) (  TYPE_2 . METHOD_2 ( ) )  TYPE_2 . METHOD_2 ( ) ) BLOCK BLOCK ) METHOD METHOD (  VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { VAR_3 = ( ( java.util.HashMap < java.lang.Integer , java.lang.String > ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ; TYPE_2 . METHOD_2 ( ) ; } } )  VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { VAR_3 = ( ( java.util.HashMap < java.lang.Integer , java.lang.String > ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ; TYPE_2 . METHOD_2 ( ) ; } } (  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_4 , new TYPE_3 ( VAR_5 ) , VAR_1 ) )  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_4 , new TYPE_3 ( VAR_5 ) , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( 2 ) )  METHOD_2 ( 2 ) (  METHOD_3 ( METHOD_4 ( VAR_1 , VAR_2 class , new java.lang.String [ ] { STRING_1 , STRING_2 , STRING_3 } , new java.lang.Object [ ] { VAR_3 , VAR_4 [ 1 ] , INT_1 } , true , true ) ) )  METHOD_3 ( METHOD_4 ( VAR_1 , VAR_2 class , new java.lang.String [ ] { STRING_1 , STRING_2 , STRING_3 } , new java.lang.Object [ ] { VAR_3 , VAR_4 [ 1 ] , INT_1 } , true , true ) ) (  METHOD_5 ( resource . METHOD_6 ( getModel ( ) ) , 0 ) )  METHOD_5 ( resource . METHOD_6 ( getModel ( ) ) , 0 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VmTemplate ) TYPE org.ovirt.engine.core.common.businessentities.VmTemplate ( NAME template ) NAME template ( INIT = getModel ( ) . METHOD_2 ( ) . getSelectedItem ( ) ) INIT = getModel ( ) . METHOD_2 ( ) . getSelectedItem ( ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = getModel ( ) . METHOD_3 ( ) . getSelectedItem ( ) ) INIT = getModel ( ) . METHOD_3 ( ) . getSelectedItem ( ) ) VAR VAR ( IF IF ( COND template != null ) COND template != null ( THEN THEN (  METHOD_4 ( template . getId ( ) , VAR_1 ) )  METHOD_4 ( template . getId ( ) , VAR_1 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( getParameters ( ) . METHOD_2 ( ) ) != null ) COND ( getParameters ( ) . METHOD_2 ( ) ) != null ( THEN THEN ( VAR VAR ( TYPE java.util.List<TYPE_1.DiskImage> ) TYPE java.util.List<TYPE_1.DiskImage> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_3 ( METHOD_4 ( ) , getParameters ( ) . METHOD_2 ( ) ) ) INIT = TYPE_2 . METHOD_3 ( METHOD_4 ( ) , getParameters ( ) . METHOD_2 ( ) ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1.DiskImage ) TYPE TYPE_1.DiskImage ( NAME diskImage ) NAME diskImage ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  TYPE_3 . METHOD_5 ( ) . METHOD_6 ( diskImage . METHOD_7 ( ) , VAR_2 ) )  TYPE_3 . METHOD_5 ( ) . METHOD_6 ( diskImage . METHOD_7 ( ) , VAR_2 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( INT_1 , null ) ) INIT = TYPE_1 . METHOD_2 ( INT_1 , null ) ) VAR VAR (  TYPE_2 . METHOD_3 ( ( ( VAR_1 . size ( ) ) == 2 ) ) )  TYPE_2 . METHOD_3 ( ( ( VAR_1 . size ( ) ) == 2 ) ) ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( IN TYPE_3 . METHOD_4 ( STRING_1 ) ) IN TYPE_3 . METHOD_4 ( STRING_1 ) ( BLOCK BLOCK (  TYPE_2 . METHOD_3 ( VAR_1 . METHOD_5 ( VAR_2 ) ) )  TYPE_2 . METHOD_3 ( VAR_1 . METHOD_5 ( VAR_2 ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.doReturn ( TYPE_1 . METHOD_2 ( ) ) . when ( command ) . METHOD_3 ( parameters . METHOD_4 ( ) . METHOD_5 ( ) ) )  org.mockito.Mockito.doReturn ( TYPE_1 . METHOD_2 ( ) ) . when ( command ) . METHOD_3 ( parameters . METHOD_4 ( ) . METHOD_5 ( ) ) (  TYPE_2 . METHOD_6 ( STRING_1 , command . METHOD_7 ( ) ) )  TYPE_2 . METHOD_6 ( STRING_1 , command . METHOD_7 ( ) ) (  TYPE_2 . METHOD_8 ( STRING_2 , command . getReturnValue ( ) . METHOD_9 ( ) . METHOD_10 ( TYPE_3 . toString ( ) ) ) )  TYPE_2 . METHOD_8 ( STRING_2 , command . getReturnValue ( ) . METHOD_9 ( ) . METHOD_10 ( TYPE_3 . toString ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN org.ovirt.engine.core.common.businessentities.VDSGroup ) RETURN org.ovirt.engine.core.common.businessentities.VDSGroup ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ) TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ( NAME entity ) NAME entity ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( entity . getId ( ) ) . METHOD_3 ( VAR_2 [ VAR_1 ] ) . METHOD_4 ( ) )  TYPE_1 . METHOD_2 ( entity . getId ( ) ) . METHOD_3 ( VAR_2 [ VAR_1 ] ) . METHOD_4 ( ) (  TYPE_1 . METHOD_2 ( entity . METHOD_5 ( ) ) . METHOD_3 ( VAR_3 [ VAR_1 ] ) . METHOD_4 ( ) )  TYPE_1 . METHOD_2 ( entity . METHOD_5 ( ) ) . METHOD_3 ( VAR_3 [ VAR_1 ] ) . METHOD_4 ( ) (  TYPE_1 . METHOD_2 ( entity . METHOD_6 ( ) ) . METHOD_3 ( VAR_4 [ VAR_1 ] ) . METHOD_4 ( ) )  TYPE_1 . METHOD_2 ( entity . METHOD_6 ( ) ) . METHOD_3 ( VAR_4 [ VAR_1 ] ) . METHOD_4 ( ) (  return entity ; )  return entity ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<TYPE_1.DiskImage> ) TYPE java.util.ArrayList<TYPE_1.DiskImage> ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( METHOD_2 ( ) ) != null ) ? VAR_2 . Linq < TYPE_1 . DiskImage > METHOD_3 ( METHOD_2 ( ) ) : new java.util.ArrayList < TYPE_1 . DiskImage > ( ) ) INIT = ( ( METHOD_2 ( ) ) != null ) ? VAR_2 . Linq < TYPE_1 . DiskImage > METHOD_3 ( METHOD_2 ( ) ) : new java.util.ArrayList < TYPE_1 . DiskImage > ( ) ) VAR VAR (  METHOD_4 ( ) . METHOD_5 ( ( ( ( VAR_1 . size ( ) ) > 0 ) && ( ( getEntity ( ) . getStatus ( ) ) == ( VAR_3 ) ) ) ) )  METHOD_4 ( ) . METHOD_5 ( ( ( ( VAR_1 . size ( ) ) > 0 ) && ( ( getEntity ( ) . getStatus ( ) ) == ( VAR_3 ) ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.Disk ) TYPE TYPE_1.Disk ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  assertEquals ( VAR_2 [ VAR_1 ] . toString ( ) , model . getId ( ) ) )  assertEquals ( VAR_2 [ VAR_1 ] . toString ( ) , model . getId ( ) ) (  METHOD_2 ( model . METHOD_3 ( ) ) )  METHOD_2 ( model . METHOD_3 ( ) ) (  METHOD_4 ( model . METHOD_5 ( ) ) )  METHOD_4 ( model . METHOD_5 ( ) ) (  METHOD_4 ( ( ! ( model . METHOD_6 ( ) ) ) ) )  METHOD_4 ( ( ! ( model . METHOD_6 ( ) ) ) ) (  METHOD_4 ( model . METHOD_7 ( ) ) )  METHOD_4 ( model . METHOD_7 ( ) ) (  assertEquals ( model . METHOD_8 ( ) . getId ( ) , TYPE_2 . toString ( ) ) )  assertEquals ( model . METHOD_8 ( ) . getId ( ) , TYPE_2 . toString ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ) TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_2 ( ) . get ( VAR_3 ) ) INIT = VAR_2 . METHOD_2 ( ) . get ( VAR_3 ) ) VAR VAR (  TYPE_1 . METHOD_3 ( VAR_1 ) )  TYPE_1 . METHOD_3 ( VAR_1 ) ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ( INIT = VAR_1 . METHOD_4 ( ) ) INIT = VAR_1 . METHOD_4 ( ) ) VAR VAR (  TYPE_1 . METHOD_5 ( name . equals ( VAR_2 . METHOD_6 ( VAR_3 , VAR_4 ) ) ) )  TYPE_1 . METHOD_5 ( name . equals ( VAR_2 . METHOD_6 ( VAR_3 , VAR_4 ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.Map<java.lang.String,java.lang.String> ) RETURN java.util.Map<java.lang.String,java.lang.String> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.HashMap<java.lang.String,java.lang.String> ) TYPE java.util.HashMap<java.lang.String,java.lang.String> ( NAME result ) NAME result ( INIT = new java.util.HashMap < java.lang.String , java.lang.String > ( ) ) INIT = new java.util.HashMap < java.lang.String , java.lang.String > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( IN this . VAR_2 ) IN this . VAR_2 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME status ) NAME status ( INIT = VAR_1 . METHOD_2 ( STRING_1 ) . toString ( ) ) INIT = VAR_1 . METHOD_2 ( STRING_1 ) . toString ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME id ) NAME id ( INIT = VAR_1 . METHOD_2 ( STRING_2 ) . toString ( ) ) INIT = VAR_1 . METHOD_2 ( STRING_2 ) . toString ( ) ) VAR VAR (  result . put ( id , status ) )  result . put ( id , status ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 = org.mockito.Mockito . METHOD_2 ( TYPE_1 . getInstance ( ) ) )  VAR_1 = org.mockito.Mockito . METHOD_2 ( TYPE_1 . getInstance ( ) ) (  org.mockito.Mockito.when ( VAR_2 . METHOD_3 ( TYPE_2 . any ( VAR_3 . Guid class ) ) ) . thenReturn ( TYPE_3 . METHOD_4 ( ) ) )  org.mockito.Mockito.when ( VAR_2 . METHOD_3 ( TYPE_2 . any ( VAR_3 . Guid class ) ) ) . thenReturn ( TYPE_3 . METHOD_4 ( ) ) (  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( VAR_1 ) . METHOD_5 ( ) )  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( VAR_1 ) . METHOD_5 ( ) (  org.mockito.Mockito . METHOD_6 ( ) . when ( VAR_1 ) . METHOD_7 ( TYPE_2 . any ( VAR_4 class ) ) )  org.mockito.Mockito . METHOD_6 ( ) . when ( VAR_1 ) . METHOD_7 ( TYPE_2 . any ( VAR_4 class ) ) (  VAR_1 . METHOD_8 ( ) )  VAR_1 . METHOD_8 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 < java.lang.Integer > METHOD_2 ( VAR_3 ) ) INIT = VAR_2 < java.lang.Integer > METHOD_2 ( VAR_3 ) ) VAR VAR (  VAR_4 . METHOD_3 ( STRING_1 , VAR_1 ) )  VAR_4 . METHOD_3 ( STRING_1 , VAR_1 ) (  TYPE_1 . METHOD_4 ( ( VAR_1 * INT_1 ) ) )  TYPE_1 . METHOD_4 ( ( VAR_1 * INT_1 ) ) (  TYPE_2 . getInstance ( ) . METHOD_5 ( ) . METHOD_6 ( VAR_5 , new TYPE_3 ( TYPE_4 . METHOD_7 ( ) , VAR_6 ) ) )  TYPE_2 . getInstance ( ) . METHOD_5 ( ) . METHOD_6 ( VAR_5 , new TYPE_3 ( TYPE_4 . METHOD_7 ( ) , VAR_6 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<java.lang.String> ) TYPE TYPE_1<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( vm ) ) INIT = METHOD_2 ( vm ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ( DO-WHILE DO-WHILE ( COND VAR_1 . METHOD_5 ( VAR_2 ) ) COND VAR_1 . METHOD_5 ( VAR_2 ) ( BLOCK BLOCK (  i ++ )  i ++ (  VAR_2 = TYPE_2 . METHOD_3 ( vm . getName ( ) , java.lang.Integer . toString ( ( ( vm . METHOD_4 ( ) ) + i ) ) ) )  VAR_2 = TYPE_2 . METHOD_3 ( vm . getName ( ) , java.lang.Integer . toString ( ( ( vm . METHOD_4 ( ) ) + i ) ) ) ) BLOCK BLOCK ) DO-WHILE DO-WHILE (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME returnValue ) NAME returnValue ( INIT = ( ( java.lang.Boolean ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( result ) ) . getReturnValue ( ) ) ) ) INIT = ( ( java.lang.Boolean ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( result ) ) . getReturnValue ( ) ) ) ) VAR VAR ( IF IF ( COND returnValue ) COND returnValue ( THEN THEN (  command . METHOD_2 ( ) )  command . METHOD_2 ( ) ) THEN THEN ( ELSE ELSE (  METHOD_3 ( command ) )  METHOD_3 ( command ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( VAR_3 ) . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_4 ) , TYPE_2 . any ( VAR_5 class ) ) )  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( VAR_3 ) . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_4 ) , TYPE_2 . any ( VAR_5 class ) ) (  org.mockito.Mockito.doReturn ( true ) . when ( VAR_2 ) . getSucceeded ( ) )  org.mockito.Mockito.doReturn ( true ) . when ( VAR_2 ) . getSucceeded ( ) (  org.mockito.Mockito.doReturn ( VAR_6 ) . when ( VAR_2 ) . getReturnValue ( ) )  org.mockito.Mockito.doReturn ( VAR_6 ) . when ( VAR_2 ) . getReturnValue ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME section ) NAME section ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . setId ( new org.ovirt.engine.core.compat.Guid ( TYPE_2 . get ( STRING_1 ) . getValue ( ) ) ) )  VAR_1 . setId ( new org.ovirt.engine.core.compat.Guid ( TYPE_2 . get ( STRING_1 ) . getValue ( ) ) ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME node ) NAME node ( INIT = section . METHOD_2 ( STRING_2 ) ) INIT = section . METHOD_2 ( STRING_2 ) ) VAR VAR ( IF IF ( COND node != null ) COND node != null ( THEN THEN ( IF IF ( COND TYPE_3 . equals ( java.lang.String.valueOf ( VAR_2 ) ) ) COND TYPE_3 . equals ( java.lang.String.valueOf ( VAR_2 ) ) ( THEN THEN (  TYPE_3 = java.lang.String.valueOf ( VAR_3 ) )  TYPE_3 = java.lang.String.valueOf ( VAR_3 ) ) THEN THEN ) IF IF (  VAR_1 . METHOD_3 ( VAR_4 . METHOD_4 ( TYPE_3 ) ) )  VAR_1 . METHOD_3 ( VAR_4 . METHOD_4 ( TYPE_3 ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND result != null ) COND result != null ( THEN THEN ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ( INIT = ( ( org.ovirt.engine.core.common.businessentities.VM ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( result ) ) . getReturnValue ( ) ) ) ) INIT = ( ( org.ovirt.engine.core.common.businessentities.VM ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( result ) ) . getReturnValue ( ) ) ) ) VAR VAR ( IF IF ( COND vm == null ) COND vm == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_2 ) ( model ) ) ) INIT = ( ( TYPE_2 ) ( model ) ) ) VAR VAR (  VAR_1 . METHOD_2 ( vm ) )  VAR_1 . METHOD_2 ( vm ) (  VAR_1 . METHOD_3 ( ) )  VAR_1 . METHOD_3 ( ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN org.ovirt.engine.core.compat.Guid ) RETURN org.ovirt.engine.core.compat.Guid ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) ) != null ) && ( ( VAR_1 ) == ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) . METHOD_3 ( ) ) ) ) COND ( ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) ) != null ) && ( ( VAR_1 ) == ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) . METHOD_3 ( ) ) ) ( THEN THEN (  return ( ( org.ovirt.engine.core.common.businessentities.DiskImage ) ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) ) ) . METHOD_1 ( ) ; )  return ( ( org.ovirt.engine.core.common.businessentities.DiskImage ) ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) ) ) . METHOD_1 ( ) ; ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME params ) NAME params ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  params . METHOD_2 ( VAR_1 ) )  params . METHOD_2 ( VAR_1 ) (  params . METHOD_3 ( VAR_2 ) )  params . METHOD_3 ( VAR_2 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME command ) NAME command ( INIT = new TYPE_2 ( params ) ) INIT = new TYPE_2 ( params ) ) VAR VAR ( VAR VAR ( TYPE java.util.HashMap<java.lang.String,java.lang.Object> ) TYPE java.util.HashMap<java.lang.String,java.lang.Object> ( NAME VAR_3 ) NAME VAR_3 ( INIT = command . METHOD_1 ( ) ) INIT = command . METHOD_1 ( ) ) VAR VAR (  TYPE_3 . METHOD_4 ( VAR_3 ) )  TYPE_3 . METHOD_4 ( VAR_3 ) (  TYPE_3 . assertEquals ( STRING_1 , VAR_3 . get ( STRING_2 ) ) )  TYPE_3 . assertEquals ( STRING_1 , VAR_3 . get ( STRING_2 ) ) (  TYPE_3 . assertEquals ( STRING_3 , VAR_3 . get ( STRING_4 ) ) )  TYPE_3 . assertEquals ( STRING_3 , VAR_3 . get ( STRING_4 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME id ) NAME id ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source != null ? new java.util.ArrayList < TYPE_1 > ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; )  return source != null ? new java.util.ArrayList < TYPE_1 > ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? new java.util.ArrayList < TYPE_1 > ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? new java.util.ArrayList < TYPE_1 > ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; } } (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.util.List<org.ovirt.engine.core.common.businessentities.VdsNetworkInterface> ) RETURN java.util.List<org.ovirt.engine.core.common.businessentities.VdsNetworkInterface> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VdsNetworkInterface> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VdsNetworkInterface> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . VdsNetworkInterface > ( ) ) INIT = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . VdsNetworkInterface > ( ) ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < ( VAR_2 . length ) ) COND i < ( VAR_2 . length ) ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK (  VAR_1 . add ( TYPE_1 . METHOD_2 ( i ) ) )  VAR_1 . add ( TYPE_1 . METHOD_2 ( i ) ) ) BLOCK BLOCK ) FOR FOR (  VAR_1 . add ( TYPE_1 . METHOD_3 ( ) ) )  VAR_1 . add ( TYPE_1 . METHOD_3 ( ) ) (  VAR_1 . add ( TYPE_1 . METHOD_4 ( ) ) )  VAR_1 . add ( TYPE_1 . METHOD_4 ( ) ) (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.uicommonweb.UICommand ) TYPE org.ovirt.engine.ui.uicommonweb.UICommand ( NAME command ) NAME command ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  super . METHOD_1 ( command ) )  super . METHOD_1 ( command ) ( IF IF ( COND command == ( METHOD_2 ( ) ) ) COND command == ( METHOD_2 ( ) ) ( THEN THEN (  METHOD_3 ( ) )  METHOD_3 ( ) ) THEN THEN ) IF IF ( IF IF ( COND TYPE_1 . METHOD_4 ( command . getName ( ) , STRING_1 ) ) COND TYPE_1 . METHOD_4 ( command . getName ( ) , STRING_1 ) ( THEN THEN (  METHOD_5 ( ) )  METHOD_5 ( ) ) THEN THEN ) IF IF ( IF IF ( COND TYPE_1 . METHOD_4 ( command . getName ( ) , STRING_2 ) ) COND TYPE_1 . METHOD_4 ( command . getName ( ) , STRING_2 ) ( THEN THEN (  METHOD_6 ( ) )  METHOD_6 ( ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND source == null ) COND source == null ( THEN THEN (  return new java.util.ArrayList < TYPE_2 > ( ) ; )  return new java.util.ArrayList < TYPE_2 > ( ) ; ) THEN THEN ) IF IF (  return source ; )  return source ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < TYPE_2 > ( ) ; } return source ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < TYPE_2 > ( ) ; } return source ; } } ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME params ) NAME params ( INIT = new TYPE_3 ( ) ) INIT = new TYPE_3 ( ) ) VAR VAR (  params . METHOD_2 ( VAR_1 ) )  params . METHOD_2 ( VAR_1 ) (  params . METHOD_3 ( VAR_2 ) )  params . METHOD_3 ( VAR_2 ) (  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_3 , params , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_3 , params , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  METHOD_3 ( ) )  METHOD_3 ( ) ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  METHOD_4 ( ) )  METHOD_4 ( ) ) THEN THEN ) IF IF (  TYPE_2 . METHOD_5 ( getVm ( ) . METHOD_6 ( ) , getParameters ( ) . METHOD_7 ( ) ) )  TYPE_2 . METHOD_5 ( getVm ( ) . METHOD_6 ( ) , getParameters ( ) . METHOD_7 ( ) ) (  TYPE_3 . METHOD_8 ( getVm ( ) . getId ( ) ) )  TYPE_3 . METHOD_8 ( getVm ( ) . getId ( ) ) ( IF IF ( COND getParameters ( ) . METHOD_7 ( ) ) COND getParameters ( ) . METHOD_7 ( ) ( THEN THEN (  getParameters ( ) . METHOD_9 ( getVm ( ) ) )  getParameters ( ) . METHOD_9 ( getVm ( ) ) (  METHOD_10 ( getVm ( ) . getId ( ) ) )  METHOD_10 ( getVm ( ) . getId ( ) ) ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( ) ) ) . thenReturn ( TYPE_2 . METHOD_3 ( ) ) )  org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( ) ) ) . thenReturn ( TYPE_2 . METHOD_3 ( ) ) (  VAR_2 . METHOD_4 ( VAR_3 , java.lang.Boolean . FALSE ) )  VAR_2 . METHOD_4 ( VAR_3 , java.lang.Boolean . FALSE ) (  METHOD_5 ( ) )  METHOD_5 ( ) (  METHOD_6 ( ) )  METHOD_6 ( ) (  METHOD_7 ( VAR_4 ) )  METHOD_7 ( VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) ( VAR VAR ( TYPE java.util.ArrayList<TYPE_1.VdcQueryType> ) TYPE java.util.ArrayList<TYPE_1.VdcQueryType> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < TYPE_1 . VdcQueryType > ( ) ) INIT = new java.util.ArrayList < TYPE_1 . VdcQueryType > ( ) ) VAR VAR (  VAR_1 . add ( VAR_2 ) )  VAR_1 . add ( VAR_2 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  VAR_3 . METHOD_2 ( VAR_4 ) )  VAR_3 . METHOD_2 ( VAR_4 ) ( VAR VAR ( TYPE java.util.ArrayList<TYPE_3> ) TYPE java.util.ArrayList<TYPE_3> ( NAME VAR_5 ) NAME VAR_5 ( INIT = new java.util.ArrayList < TYPE_3 > ( TYPE_4 . METHOD_3 ( new TYPE_3 [ ] { VAR_3 } ) ) ) INIT = new java.util.ArrayList < TYPE_3 > ( TYPE_4 . METHOD_3 ( new TYPE_3 [ ] { VAR_3 } ) ) ) VAR VAR (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_4 ( VAR_1 , VAR_5 , this , getModel ( ) ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_4 ( VAR_1 , VAR_5 , this , getModel ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<?> ) TYPE TYPE_1<?> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1<?> ) TYPE TYPE_1<?> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME network ) NAME network ( IN ( ( TYPE_3 ) ( VAR_1 ) ) . METHOD_2 ( ) ) IN ( ( TYPE_3 ) ( VAR_1 ) ) . METHOD_2 ( ) ( BLOCK BLOCK ( IF IF ( COND TYPE_4 . METHOD_1 ( network , null ) ) COND TYPE_4 . METHOD_1 ( network , null ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 = cmd . getParameters ( ) . METHOD_2 ( ) )  VAR_1 = cmd . getParameters ( ) . METHOD_2 ( ) (  cmd . METHOD_3 ( ) )  cmd . METHOD_3 ( ) (  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( cmd ) . METHOD_4 ( ) )  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( cmd ) . METHOD_4 ( ) (  org.mockito.Mockito.when ( VAR_2 . get ( VAR_1 . getId ( ) ) ) . thenReturn ( VAR_1 ) )  org.mockito.Mockito.when ( VAR_2 . get ( VAR_1 . getId ( ) ) ) . thenReturn ( VAR_1 ) (  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( cmd ) . METHOD_5 ( ) )  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( cmd ) . METHOD_5 ( ) (  org.mockito.Mockito.when ( VAR_3 . METHOD_6 ( TYPE_1 . any ( VAR_4 . Guid class ) ) ) . thenReturn ( TYPE_2 . METHOD_7 ( ) ) )  org.mockito.Mockito.when ( VAR_3 . METHOD_6 ( TYPE_1 . any ( VAR_4 . Guid class ) ) ) . thenReturn ( TYPE_2 . METHOD_7 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME cluster ) NAME cluster ( INIT = METHOD_2 ( true , VAR_1 ) ) INIT = METHOD_2 ( true , VAR_1 ) ) VAR VAR (  org.mockito.Mockito.doReturn ( METHOD_3 ( VAR_1 , VAR_2 ) ) . when ( VAR_3 ) . METHOD_4 ( VAR_1 ) )  org.mockito.Mockito.doReturn ( METHOD_3 ( VAR_1 , VAR_2 ) ) . when ( VAR_3 ) . METHOD_4 ( VAR_1 ) ( VAR VAR ( TYPE TYPE_2<org.ovirt.engine.core.compat.Guid> ) TYPE TYPE_2<org.ovirt.engine.core.compat.Guid> ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_3 . METHOD_5 ( VAR_5 , VAR_6 ) ) INIT = TYPE_3 . METHOD_5 ( VAR_5 , VAR_6 ) ) VAR VAR (  TYPE_4 . METHOD_6 ( STRING_1 , VAR_7 . METHOD_7 ( cluster , VAR_4 ) . isEmpty ( ) ) )  TYPE_4 . METHOD_6 ( STRING_1 , VAR_7 . METHOD_7 ( cluster , VAR_4 ) . isEmpty ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<TYPE_1.Disk> ) TYPE java.util.ArrayList<TYPE_1.Disk> ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( java.util.ArrayList < TYPE_1 . Disk > ) ( returnValue ) ) ) INIT = ( ( java.util.ArrayList < TYPE_1 . Disk > ) ( returnValue ) ) ) VAR VAR (  METHOD_1 ( ) . METHOD_2 ( ) )  METHOD_1 ( ) . METHOD_2 ( ) ( FOR-EACH FOR-EACH ( TYPE TYPE_1.Disk ) TYPE TYPE_1.Disk ( NAME disk ) NAME disk ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( IF IF ( COND ( disk . METHOD_3 ( ) ) == ( VAR_2 ) ) COND ( disk . METHOD_3 ( ) ) == ( VAR_2 ) ( THEN THEN (  continue ; )  continue ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1.DiskImage ) TYPE TYPE_1.DiskImage ( NAME diskImage ) NAME diskImage ( INIT = ( ( TYPE_1 . DiskImage ) ( disk ) ) ) INIT = ( ( TYPE_1 . DiskImage ) ( disk ) ) ) VAR VAR (  METHOD_1 ( ) . add ( diskImage ) )  METHOD_1 ( ) . add ( diskImage ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) INIT = ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) VAR VAR (  VAR_3 = new java.util.HashMap < > ( ) )  VAR_3 = new java.util.HashMap < > ( ) ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME cluster ) NAME cluster ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK ( IF IF ( COND ( cluster . METHOD_1 ( ) ) && ( ( cluster . METHOD_2 ( ) ) != null ) ) COND ( cluster . METHOD_1 ( ) ) && ( ( cluster . METHOD_2 ( ) ) != null ) ( THEN THEN (  METHOD_3 ( cluster . getStoragePoolId ( ) , cluster . METHOD_2 ( ) ) )  METHOD_3 ( cluster . getStoragePoolId ( ) , cluster . METHOD_2 ( ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( ( VAR_1 != null ) && ( ( VAR_1 . length ( ) ) >= 1 ) ) && ( VAR_1 . METHOD_2 ( STRING_1 ) ) ) && ( VAR_1 . METHOD_3 ( STRING_2 ) ) ) COND ( ( ( VAR_1 != null ) && ( ( VAR_1 . length ( ) ) >= 1 ) ) && ( VAR_1 . METHOD_2 ( STRING_1 ) ) ) && ( VAR_1 . METHOD_3 ( STRING_2 ) ) ( THEN THEN (  return VAR_1 . METHOD_4 ( 1 , ( ( VAR_1 . length ( ) ) - 2 ) ) ; )  return VAR_1 . METHOD_4 ( 1 , ( ( VAR_1 . length ( ) ) - 2 ) ) ; ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source ; )  return source ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_3 , new TYPE_1 ( VAR_1 , VAR_2 ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_3 , new TYPE_1 ( VAR_1 , VAR_2 ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 . isEmpty ( ) ) && ( ( ( VAR_2 ) == null ) || ( ! ( VAR_2 . METHOD_2 ( ) ) ) ) ) COND ( VAR_1 . isEmpty ( ) ) && ( ( ( VAR_2 ) == null ) || ( ! ( VAR_2 . METHOD_2 ( ) ) ) ) ( THEN THEN (  METHOD_3 ( ) . METHOD_4 ( VAR_3 ) )  METHOD_3 ( ) . METHOD_4 ( VAR_3 ) ) THEN THEN ( ELSE ELSE (  METHOD_3 ( ) . METHOD_4 ( ( ( VAR_3 ) | ( VAR_4 ) ) ) )  METHOD_3 ( ) . METHOD_4 ( ( ( VAR_3 ) | ( VAR_4 ) ) ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<?>[] ) TYPE TYPE_1<?>[] ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1<?>[] ) TYPE TYPE_1<?>[] ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 . length ) != ( VAR_2 . length ) ) COND ( VAR_1 . length ) != ( VAR_2 . length ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < ( VAR_1 . length ) ) COND i < ( VAR_1 . length ) ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_2 [ i ] . METHOD_2 ( VAR_1 [ i ] ) ) ) COND ! ( VAR_2 [ i ] . METHOD_2 ( VAR_1 [ i ] ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR FOR (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  parameters . METHOD_2 ( TYPE_1 ) )  parameters . METHOD_2 ( TYPE_1 ) (  parameters . METHOD_3 ( VAR_1 ) )  parameters . METHOD_3 ( VAR_1 ) (  org.mockito.Mockito . METHOD_4 ( ) . when ( VAR_2 ) . METHOD_5 ( TYPE_1 . METHOD_6 ( ) ) )  org.mockito.Mockito . METHOD_4 ( ) . when ( VAR_2 ) . METHOD_5 ( TYPE_1 . METHOD_6 ( ) ) (  command . METHOD_7 ( ) )  command . METHOD_7 ( ) (  org.mockito.Mockito . METHOD_8 ( command , org.mockito.Mockito . METHOD_9 ( ) ) . METHOD_10 ( ) )  org.mockito.Mockito . METHOD_8 ( command , org.mockito.Mockito . METHOD_9 ( ) ) . METHOD_10 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ( INIT = getEntity ( ) ) INIT = getEntity ( ) ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( vm != null ) && ( ( ( ( vm . getStatus ( ) ) == ( VAR_2 ) ) || ( ( ( vm . getStatus ( ) ) == ( VAR_3 ) ) | ( ( vm . getStatus ( ) ) == ( VAR_4 ) ) ) ) || ( ( vm . getStatus ( ) ) == ( VAR_5 ) ) ) ) INIT = ( vm != null ) && ( ( ( ( vm . getStatus ( ) ) == ( VAR_2 ) ) || ( ( ( vm . getStatus ( ) ) == ( VAR_3 ) ) | ( ( vm . getStatus ( ) ) == ( VAR_4 ) ) ) ) || ( ( vm . getStatus ( ) ) == ( VAR_5 ) ) ) ) VAR VAR (  return ( VAR_6 ) && VAR_1 ; )  return ( VAR_6 ) && VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME parameters ) NAME parameters ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME returnValue ) NAME returnValue ( INIT = METHOD_2 ( ) . METHOD_3 ( VAR_1 , parameters ) ) INIT = METHOD_2 ( ) . METHOD_3 ( VAR_1 , parameters ) ) VAR VAR ( IF IF ( COND ! ( returnValue . getSucceeded ( ) ) ) COND ! ( returnValue . getSucceeded ( ) ) ( THEN THEN (  throw new TYPE_4 ( returnValue . METHOD_4 ( ) . METHOD_5 ( ) , returnValue . METHOD_4 ( ) . METHOD_6 ( ) ) ; )  throw new TYPE_4 ( returnValue . METHOD_4 ( ) . METHOD_5 ( ) , returnValue . METHOD_4 ( ) . METHOD_6 ( ) ) ; ) THEN THEN ) IF IF (  return returnValue ; )  return returnValue ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME dao ) NAME dao ( INIT = org.mockito.Mockito . METHOD_2 ( VAR_1 class ) ) INIT = org.mockito.Mockito . METHOD_2 ( VAR_1 class ) ) VAR VAR (  org.mockito.Mockito.doReturn ( dao ) . when ( VAR_2 ) . METHOD_3 ( ) )  org.mockito.Mockito.doReturn ( dao ) . when ( VAR_2 ) . METHOD_3 ( ) ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ( INIT = new org.ovirt.engine.core.common.businessentities.VM ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.VM ( ) ) VAR VAR (  vm . METHOD_4 ( VAR_3 ) )  vm . METHOD_4 ( VAR_3 ) (  TYPE_2 . METHOD_5 ( VAR_2 . METHOD_6 ( vm , new java.util.ArrayList < > ( ) , null ) , false , VAR_4 ) )  TYPE_2 . METHOD_5 ( VAR_2 . METHOD_6 ( vm , new java.util.ArrayList < > ( ) , null ) , false , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME version ) NAME version ) VAR VAR ( VAR VAR ( TYPE TYPE_2[] ) TYPE TYPE_2[] ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND TYPE_3 . METHOD_2 ( version , VAR_2 ) ) COND TYPE_3 . METHOD_2 ( version , VAR_2 ) ( THEN THEN (  version . METHOD_3 ( new TYPE_4 ( ) ) )  version . METHOD_3 ( new TYPE_4 ( ) ) ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME type ) NAME type ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  version . METHOD_4 ( ) . METHOD_4 ( ) . add ( type . value ( ) ) )  version . METHOD_4 ( ) . METHOD_4 ( ) . add ( type . value ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , null , VAR_1 , VAR_2 ) , null ) ) )  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , null , VAR_1 , VAR_2 ) , null ) ) (  METHOD_4 ( ) )  METHOD_4 ( ) (  METHOD_5 ( false , VAR_3 , VAR_4 ) )  METHOD_5 ( false , VAR_3 , VAR_4 ) (  cmd . METHOD_6 ( ) )  cmd . METHOD_6 ( ) (  org.mockito.Mockito . METHOD_7 ( VAR_5 , org.mockito.Mockito . METHOD_8 ( ) ) . METHOD_9 ( TYPE_3 . any ( VAR_6 class ) ) )  org.mockito.Mockito . METHOD_7 ( VAR_5 , org.mockito.Mockito . METHOD_8 ( ) ) . METHOD_9 ( TYPE_3 . any ( VAR_6 class ) ) (  TYPE_4 . assertEquals ( cmd . METHOD_10 ( ) , VAR_7 ) )  TYPE_4 . assertEquals ( cmd . METHOD_10 ( ) , VAR_7 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ) TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME storageDomain ) NAME storageDomain ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( storageDomain . getStoragePoolId ( ) ) == null ) COND ( storageDomain . getStoragePoolId ( ) ) == null ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ( INIT = storageDomain . getId ( ) ) INIT = storageDomain . getId ( ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ( INIT = storageDomain . getStoragePoolId ( ) . getValue ( ) ) INIT = storageDomain . getStoragePoolId ( ) . getValue ( ) ) VAR VAR (  return ( TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) . get ( new TYPE_2 ( VAR_1 , VAR_2 ) ) ) != null ; )  return ( TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) . get ( new TYPE_2 ( VAR_1 , VAR_2 ) ) ) != null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND returnValue != null ) COND returnValue != null ( THEN THEN (  VAR_1 = ( ( java.lang.String ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) )  VAR_1 = ( ( java.lang.String ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ) THEN THEN ( ELSE ELSE (  VAR_1 = VAR_2 )  VAR_1 = VAR_2 ) ELSE ELSE ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( ( TYPE_2 ) ( model ) ) ) INIT = ( ( TYPE_2 ) ( model ) ) ) VAR VAR (  VAR_3 . METHOD_2 ( ) . METHOD_3 ( VAR_3 , VAR_4 ) )  VAR_3 . METHOD_2 ( ) . METHOD_3 ( VAR_3 , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . getInstance ( ) . METHOD_2 ( METHOD_3 ( ) . getId ( ) ) ) INIT = TYPE_1 . getInstance ( ) . METHOD_2 ( METHOD_3 ( ) . getId ( ) ) ) VAR VAR ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  VAR_2 . METHOD_4 ( STRING_1 , METHOD_5 ( ) ) )  VAR_2 . METHOD_4 ( STRING_1 , METHOD_5 ( ) ) (  TYPE_3 . log ( VAR_2 , VAR_3 ) )  TYPE_3 . log ( VAR_2 , VAR_3 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( 1 , false , false , false ) )  METHOD_2 ( 1 , false , false , false ) (  METHOD_2 ( 1 , true , true , true ) )  METHOD_2 ( 1 , true , true , true ) (  METHOD_3 ( VAR_1 [ 1 ] ) )  METHOD_3 ( VAR_1 [ 1 ] ) (  METHOD_4 ( METHOD_5 ( VAR_2 , VAR_3 class , new java.lang.String [ ] { } , new java.lang.Object [ ] { } , true , true ) ) )  METHOD_4 ( METHOD_5 ( VAR_2 , VAR_3 class , new java.lang.String [ ] { } , new java.lang.Object [ ] { } , true , true ) ) (  METHOD_6 ( resource . METHOD_7 ( getModel ( 0 ) ) ) )  METHOD_6 ( resource . METHOD_7 ( getModel ( 0 ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  METHOD_3 ( VAR_2 , VAR_3 , VAR_1 ) )  METHOD_3 ( VAR_2 , VAR_3 , VAR_1 ) (  VAR_4 . METHOD_4 ( ) )  VAR_4 . METHOD_4 ( ) (  org.mockito.Mockito . METHOD_5 ( VAR_5 ) . METHOD_6 ( VAR_2 . METHOD_7 ( ) , VAR_3 . METHOD_7 ( ) , TYPE_2 . METHOD_8 ( VAR_1 ) , true , VAR_4 . METHOD_9 ( ) ) )  org.mockito.Mockito . METHOD_5 ( VAR_5 ) . METHOD_6 ( VAR_2 . METHOD_7 ( ) , VAR_3 . METHOD_7 ( ) , TYPE_2 . METHOD_8 ( VAR_1 ) , true , VAR_4 . METHOD_9 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN org.ovirt.engine.core.common.businessentities.VM ) RETURN org.ovirt.engine.core.common.businessentities.VM ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ( INIT = new org.ovirt.engine.core.common.businessentities.VM ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.VM ( ) ) VAR VAR (  vm . METHOD_2 ( STRING_1 ) )  vm . METHOD_2 ( STRING_1 ) (  vm . METHOD_3 ( VAR_1 ) )  vm . METHOD_3 ( VAR_1 ) (  vm . setId ( org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) ) )  vm . setId ( org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) ) (  vm . METHOD_5 ( STRING_2 ) )  vm . METHOD_5 ( STRING_2 ) (  vm . METHOD_6 ( ) . METHOD_7 ( STRING_3 ) )  vm . METHOD_6 ( ) . METHOD_7 ( STRING_3 ) (  vm . METHOD_8 ( STRING_4 ) )  vm . METHOD_8 ( STRING_4 ) (  vm . METHOD_9 ( INT_1 ) )  vm . METHOD_9 ( INT_1 ) (  vm . METHOD_10 ( false ) )  vm . METHOD_10 ( false ) (  vm . METHOD_11 ( VAR_2 ) )  vm . METHOD_11 ( VAR_2 ) (  TYPE_1 . METHOD_12 ( vm ) )  TYPE_1 . METHOD_12 ( vm ) (  return vm ; )  return vm ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN org.ovirt.engine.core.common.businessentities.VDS ) RETURN org.ovirt.engine.core.common.businessentities.VDS ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDS> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDS> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( IF IF ( COND ( ( VAR_3 . METHOD_2 ( ) ) == ( VAR_4 ) ) && ( ! ( VAR_3 . getId ( ) . equals ( VAR_2 . getId ( ) ) ) ) ) COND ( ( VAR_3 . METHOD_2 ( ) ) == ( VAR_4 ) ) && ( ! ( VAR_3 . getId ( ) . equals ( VAR_2 . getId ( ) ) ) ) ( THEN THEN (  return VAR_3 ; )  return VAR_3 ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  super . METHOD_1 ( VAR_1 ) )  super . METHOD_1 ( VAR_1 ) (  VAR_2 . METHOD_2 ( VAR_3 ) )  VAR_2 . METHOD_2 ( VAR_3 ) (  VAR_4 . METHOD_3 ( VAR_5 ) )  VAR_4 . METHOD_3 ( VAR_5 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_6 ) NAME VAR_6 ( INIT = METHOD_4 ( ) ) INIT = METHOD_4 ( ) ) VAR VAR ( IF IF ( COND ( ( VAR_6 . getId ( ) ) == null ) || ( VAR_6 . getId ( ) . isEmpty ( ) ) ) COND ( ( VAR_6 . getId ( ) ) == null ) || ( VAR_6 . getId ( ) . isEmpty ( ) ) ( THEN THEN (  METHOD_5 ( TYPE_3 . METHOD_6 ( ) ) )  METHOD_5 ( TYPE_3 . METHOD_6 ( ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME map ) NAME map ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME template ) NAME template ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ( INIT = ( template != null ) ? template : new TYPE_1 ( ) ) INIT = ( template != null ) ? template : new TYPE_1 ( ) ) VAR VAR (  model . METHOD_1 ( VAR_1 ) )  model . METHOD_1 ( VAR_1 ) (  model . setId ( new TYPE_2 ( VAR_1 . METHOD_2 ( ) , true ) . toString ( ) ) )  model . setId ( new TYPE_2 ( VAR_1 . METHOD_2 ( ) , true ) . toString ( ) ) (  return model ; )  return model ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN org.ovirt.engine.core.common.businessentities.StorageDomain ) RETURN org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME status ) NAME status ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ) TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( status , STRING_1 , VAR_2 ) ) INIT = METHOD_2 ( status , STRING_1 , VAR_2 ) ) VAR VAR (  VAR_1 . METHOD_3 ( VAR_3 ) )  VAR_1 . METHOD_3 ( VAR_3 ) (  org.mockito.Mockito.when ( VAR_4 . METHOD_4 ( TYPE_2 . any ( VAR_5 . Guid class ) ) ) . thenReturn ( TYPE_3 . METHOD_5 ( VAR_1 ) ) )  org.mockito.Mockito.when ( VAR_4 . METHOD_4 ( TYPE_2 . any ( VAR_5 . Guid class ) ) ) . thenReturn ( TYPE_3 . METHOD_5 ( VAR_1 ) ) (  cmd . METHOD_6 ( new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ) )  cmd . METHOD_6 ( new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ) (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( ( ( METHOD_2 ( ) ) != null ) && ( ( METHOD_3 ( ) ) != null ) ) && ( ( METHOD_4 ( ) ) != null ) ) COND ( ( ( METHOD_2 ( ) ) != null ) && ( ( METHOD_3 ( ) ) != null ) ) && ( ( METHOD_4 ( ) ) != null ) ( THEN THEN (  VAR_1 = ( METHOD_5 ( ) ) - ( METHOD_6 ( ) ) )  VAR_1 = ( METHOD_5 ( ) ) - ( METHOD_6 ( ) ) (  VAR_1 = ( ( VAR_1 ) > 0 ) ? VAR_1 : 0 )  VAR_1 = ( ( VAR_1 ) > 0 ) ? VAR_1 : 0 ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public final ) MODIFIER public final ( RETURN java.lang.String[] ) RETURN java.lang.String[] ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.lang.String [ 0 ] ) INIT = new java.lang.String [ 0 ] ) VAR VAR ( IF IF ( COND VAR_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) COND VAR_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ( THEN THEN ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_3 . get ( VAR_1 . METHOD_3 ( ) ) ) INIT = VAR_3 . get ( VAR_1 . METHOD_3 ( ) ) ) VAR VAR (  VAR_2 = new java.lang.String [ VAR_4 . size ( ) ] )  VAR_2 = new java.lang.String [ VAR_4 . size ( ) ] (  VAR_2 = VAR_4 . METHOD_4 ( new java.lang.String [ ] { } ) )  VAR_2 = VAR_4 . METHOD_4 ( new java.lang.String [ ] { } ) ) THEN THEN ) IF IF (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( VAR_2 class ) ) INIT = new TYPE_1 ( VAR_2 class ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( STRING_1 ) ) ) INIT = TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( STRING_1 ) ) ) VAR VAR (  TYPE_3 . METHOD_4 ( STRING_2 , ( ( VAR_3 . METHOD_5 ( STRING_2 ) ) || ( VAR_3 . METHOD_5 ( STRING_3 ) ) ) ) )  TYPE_3 . METHOD_4 ( STRING_2 , ( ( VAR_3 . METHOD_5 ( STRING_2 ) ) || ( VAR_3 . METHOD_5 ( STRING_3 ) ) ) ) (  TYPE_3 . METHOD_4 ( STRING_4 , VAR_3 . METHOD_5 ( STRING_4 ) ) )  TYPE_3 . METHOD_4 ( STRING_4 , VAR_3 . METHOD_5 ( STRING_4 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND METHOD_2 ( ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) , VAR_1 ) ) COND METHOD_2 ( ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) , VAR_1 ) ( THEN THEN (  VAR_2 . METHOD_5 ( STRING_1 , TYPE_1 . METHOD_4 ( ) ) )  VAR_2 . METHOD_5 ( STRING_1 , TYPE_1 . METHOD_4 ( ) ) (  TYPE_2 . getInstance ( ) . METHOD_6 ( VAR_3 , new TYPE_3 ( TYPE_1 . METHOD_4 ( ) ) , TYPE_4 . METHOD_7 ( TYPE_1 . METHOD_8 ( ) , TYPE_1 . METHOD_9 ( ) ) ) )  TYPE_2 . getInstance ( ) . METHOD_6 ( VAR_3 , new TYPE_3 ( TYPE_1 . METHOD_4 ( ) ) , TYPE_4 . METHOD_7 ( TYPE_1 . METHOD_8 ( ) , TYPE_1 . METHOD_9 ( ) ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.Network ) TYPE org.ovirt.engine.core.common.businessentities.Network ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( STRING_1 ) ) INIT = METHOD_2 ( STRING_1 ) ) VAR VAR (  METHOD_3 ( VAR_1 ) )  METHOD_3 ( VAR_1 ) ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME nic ) NAME nic ( INIT = METHOD_4 ( STRING_2 , VAR_1 ) ) INIT = METHOD_4 ( STRING_2 , VAR_1 ) ) VAR VAR (  METHOD_5 ( nic ) )  METHOD_5 ( nic ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_6 ( METHOD_7 ( nic ) ) ) INIT = METHOD_6 ( METHOD_7 ( nic ) ) ) VAR VAR (  METHOD_8 ( VAR_2 ) )  METHOD_8 ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1.DiskImage ) RETURN TYPE_1.DiskImage ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.DiskImage ) TYPE TYPE_1.DiskImage ( NAME image ) NAME image ( INIT = new TYPE_1 . DiskImage ( ) ) INIT = new TYPE_1 . DiskImage ( ) ) VAR VAR (  image . METHOD_2 ( TYPE_3 . METHOD_3 ( vm ) ) )  image . METHOD_2 ( TYPE_3 . METHOD_3 ( vm ) ) (  image . METHOD_4 ( TYPE_4 . METHOD_5 ( VAR_1 ) ) )  image . METHOD_4 ( TYPE_4 . METHOD_5 ( VAR_1 ) ) (  image . METHOD_6 ( VAR_2 ) )  image . METHOD_6 ( VAR_2 ) (  image . METHOD_7 ( VAR_3 ) )  image . METHOD_7 ( VAR_3 ) (  return image ; )  return image ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME iface ) NAME iface ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VdsNetworkInterface> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VdsNetworkInterface> ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . get ( iface . METHOD_2 ( ) ) ) INIT = VAR_2 . get ( iface . METHOD_2 ( ) ) ) VAR VAR ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  VAR_1 = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . VdsNetworkInterface > ( ) )  VAR_1 = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . VdsNetworkInterface > ( ) (  VAR_2 . put ( iface . METHOD_2 ( ) , VAR_1 ) )  VAR_2 . put ( iface . METHOD_2 ( ) , VAR_1 ) ) THEN THEN ) IF IF (  VAR_1 . add ( iface ) )  VAR_1 . add ( iface ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1<java.lang.String> ) RETURN TYPE_1<java.lang.String> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<java.lang.String> ) TYPE TYPE_1<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 < java.lang.String > ( ) ) INIT = new TYPE_2 < java.lang.String > ( ) ) VAR VAR ( IF IF ( COND ( METHOD_2 ( ) ) != null ) COND ( METHOD_2 ( ) ) != null ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME item ) NAME item ( IN METHOD_2 ( ) ) IN METHOD_2 ( ) ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME a ) NAME a ( INIT = ( ( TYPE_3 ) ( item ) ) ) INIT = ( ( TYPE_3 ) ( item ) ) ) VAR VAR (  VAR_1 . add ( a . METHOD_3 ( ) ) )  VAR_1 . add ( a . METHOD_3 ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  cluster = org.mockito.Mockito . METHOD_2 ( VAR_1 class ) )  cluster = org.mockito.Mockito . METHOD_2 ( VAR_1 class ) (  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( cluster ) . getId ( ) )  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( cluster ) . getId ( ) (  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( cluster ) . getStoragePoolId ( ) )  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( cluster ) . getStoragePoolId ( ) (  org.mockito.Mockito.doReturn ( VAR_4 ) . when ( cluster ) . METHOD_3 ( ) )  org.mockito.Mockito.doReturn ( VAR_4 ) . when ( cluster ) . METHOD_3 ( ) (  org.mockito.Mockito.doReturn ( null ) . when ( cluster ) . METHOD_4 ( ) )  org.mockito.Mockito.doReturn ( null ) . when ( cluster ) . METHOD_4 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) ( VAR VAR ( TYPE TYPE_1.DiskImage ) TYPE TYPE_1.DiskImage ( NAME diskImage ) NAME diskImage ( INIT = METHOD_3 ( VAR_1 , VAR_2 ) ) INIT = METHOD_3 ( VAR_1 , VAR_2 ) ) VAR VAR (  diskImage . METHOD_4 ( true ) )  diskImage . METHOD_4 ( true ) (  METHOD_5 ( VAR_3 , org.ovirt.engine.core.compat.Guid . METHOD_6 ( ) , VAR_1 ) )  METHOD_5 ( VAR_3 , org.ovirt.engine.core.compat.Guid . METHOD_6 ( ) , VAR_1 ) (  TYPE_2 . METHOD_7 ( command . validate ( ) ) )  TYPE_2 . METHOD_7 ( command . validate ( ) ) (  TYPE_2 . METHOD_8 ( command . getReturnValue ( ) . METHOD_9 ( ) . METHOD_10 ( TYPE_3 . toString ( ) ) ) )  TYPE_2 . METHOD_8 ( command . getReturnValue ( ) . METHOD_9 ( ) . METHOD_10 ( TYPE_3 . toString ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN org.ovirt.engine.core.common.businessentities.VM ) RETURN org.ovirt.engine.core.common.businessentities.VM ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ( INIT = new org.ovirt.engine.core.common.businessentities.VM ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.VM ( ) ) VAR VAR (  vm . METHOD_2 ( VAR_1 ) )  vm . METHOD_2 ( VAR_1 ) (  vm . METHOD_3 ( INT_1 ) )  vm . METHOD_3 ( INT_1 ) (  vm . setId ( vmId ) )  vm . setId ( vmId ) (  vm . METHOD_4 ( VAR_2 ) )  vm . METHOD_4 ( VAR_2 ) (  vm . METHOD_5 ( org.ovirt.engine.core.compat.Guid . METHOD_6 ( ) ) )  vm . METHOD_5 ( org.ovirt.engine.core.compat.Guid . METHOD_6 ( ) ) (  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( command ) . METHOD_7 ( ) )  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( command ) . METHOD_7 ( ) (  METHOD_8 ( vm ) )  METHOD_8 ( vm ) (  return vm ; )  return vm ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME vds ) NAME vds ( INIT = null ) INIT = null ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ( INIT = new org.ovirt.engine.core.common.businessentities.VM ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.VM ( ) ) VAR VAR (  vm . METHOD_2 ( VAR_2 ) )  vm . METHOD_2 ( VAR_2 ) ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_3 ) NAME VAR_3 ( INIT = null ) INIT = null ) VAR VAR (  VAR_1 . METHOD_3 ( vds ) )  VAR_1 . METHOD_3 ( vds ) (  VAR_1 . METHOD_4 ( VAR_3 ) )  VAR_1 . METHOD_4 ( VAR_3 ) (  VAR_1 . METHOD_5 ( vm ) )  VAR_1 . METHOD_5 ( vm ) ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_1 . METHOD_6 ( ) ) INIT = VAR_1 . METHOD_6 ( ) ) VAR VAR (  TYPE_3 . assertEquals ( VAR_2 , VAR_4 . getId ( ) ) )  TYPE_3 . assertEquals ( VAR_2 , VAR_4 . getId ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_2 ( VAR_1 , VAR_2 , VAR_4 , VAR_5 ) ) INIT = METHOD_2 ( VAR_1 , VAR_2 , VAR_4 , VAR_5 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_6 ) NAME VAR_6 ( INIT = new TYPE_2 ( ) { public void METHOD_3 ( org.ovirt.engine.core.compat.Guid VAR_7 , TYPE_3 < java.lang.String > VAR_8 ) { TYPE_4 . METHOD_4 ( VAR_7 , VAR_8 ) ; } } ) INIT = new TYPE_2 ( ) { public void METHOD_3 ( org.ovirt.engine.core.compat.Guid VAR_7 , TYPE_3 < java.lang.String > VAR_8 ) { TYPE_4 . METHOD_4 ( VAR_7 , VAR_8 ) ; } } ) VAR VAR ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_3 ) NAME METHOD_3 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_7 ) NAME VAR_7 ) VAR VAR ( VAR VAR ( TYPE TYPE_3<java.lang.String> ) TYPE TYPE_3<java.lang.String> ( NAME VAR_8 ) NAME VAR_8 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_4 . METHOD_4 ( VAR_7 , VAR_8 ) )  TYPE_4 . METHOD_4 ( VAR_7 , VAR_8 ) ) BLOCK BLOCK ) METHOD METHOD (  return METHOD_5 ( VAR_1 , VAR_2 , VAR_6 , VAR_9 , METHOD_6 ( VAR_3 ) ) ; )  return METHOD_5 ( VAR_1 , VAR_2 , VAR_6 , VAR_9 , METHOD_6 ( VAR_3 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( STRING_1 , null ) ) INIT = METHOD_2 ( STRING_1 , null ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( STRING_2 , null ) ) INIT = METHOD_2 ( STRING_2 , null ) ) VAR VAR (  METHOD_3 ( VAR_1 , VAR_2 ) )  METHOD_3 ( VAR_1 , VAR_2 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_4 ( METHOD_5 ( VAR_1 , VAR_1 , VAR_2 , VAR_2 ) ) ) INIT = METHOD_4 ( METHOD_5 ( VAR_1 , VAR_1 , VAR_2 , VAR_2 ) ) ) VAR VAR (  METHOD_6 ( VAR_3 , VAR_4 , VAR_1 . getName ( ) , VAR_2 . getName ( ) ) )  METHOD_6 ( VAR_3 , VAR_4 , VAR_1 . getName ( ) , VAR_2 . getName ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( METHOD_3 ( ) ) )  METHOD_2 ( METHOD_3 ( ) ) ( TRY TRY ( BLOCK BLOCK (  VAR_1 . METHOD_4 ( ) )  VAR_1 . METHOD_4 ( ) (  resource . METHOD_5 ( new TYPE_1 ( ) ) )  resource . METHOD_5 ( new TYPE_1 ( ) ) (  METHOD_6 ( STRING_1 ) )  METHOD_6 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( BLOCK BLOCK (  METHOD_7 ( VAR_2 , STRING_2 , STRING_3 , STRING_4 , STRING_5 ) )  METHOD_7 ( VAR_2 , STRING_2 , STRING_3 , STRING_4 , STRING_5 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME returnValue ) NAME returnValue ( INIT = VAR_1 ) INIT = VAR_1 ) VAR VAR ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.String> ) TYPE java.util.Map<java.lang.String,java.lang.String> ( NAME map ) NAME map ( INIT = TYPE_2 . METHOD_2 ( VAR_1 , VAR_2 ) ) INIT = TYPE_2 . METHOD_2 ( VAR_1 , VAR_2 ) ) VAR VAR (  returnValue = TYPE_2 . METHOD_1 ( VAR_1 , map ) )  returnValue = TYPE_2 . METHOD_1 ( VAR_1 , map ) ) THEN THEN ) IF IF (  return returnValue ; )  return returnValue ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( TYPE_1 . any ( ) , TYPE_1 . METHOD_3 ( ) ) ) . thenReturn ( TYPE_2 . METHOD_4 ( org.mockito.Mockito . METHOD_5 ( VAR_2 class ) ) ) )  org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( TYPE_1 . any ( ) , TYPE_1 . METHOD_3 ( ) ) ) . thenReturn ( TYPE_2 . METHOD_4 ( org.mockito.Mockito . METHOD_5 ( VAR_2 class ) ) ) (  validator = new TYPE_3 ( VAR_1 , VAR_3 , cluster , VAR_4 ) )  validator = new TYPE_3 ( VAR_1 , VAR_3 , cluster , VAR_4 ) (  TYPE_4 . METHOD_6 ( validator . METHOD_7 ( ) , TYPE_5 . METHOD_8 ( VAR_5 ) ) )  TYPE_4 . METHOD_6 ( validator . METHOD_7 ( ) , TYPE_5 . METHOD_8 ( VAR_5 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StoragePool ) TYPE org.ovirt.engine.core.common.businessentities.StoragePool ( NAME pool ) NAME pool ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( TYPE_1 . METHOD_2 ( pool ) . isEmpty ( ) ) ) COND ! ( TYPE_1 . METHOD_2 ( pool ) . isEmpty ( ) ) ( THEN THEN (  VAR_1 . METHOD_3 ( ( STRING_1 + STRING_2 ) , pool . getName ( ) , pool . getId ( ) ) )  VAR_1 . METHOD_3 ( ( STRING_1 + STRING_2 ) , pool . getName ( ) , pool . getId ( ) ) (  TYPE_2 . getInstance ( ) . METHOD_4 ( VAR_2 , new TYPE_3 ( pool . getId ( ) , VAR_3 , VAR_4 ) ) )  TYPE_2 . getInstance ( ) . METHOD_4 ( VAR_2 , new TYPE_3 ( pool . getId ( ) , VAR_3 , VAR_4 ) ) ( SYNCHRONIZED SYNCHRONIZED (  VAR_5 )  VAR_5 ( BLOCK BLOCK (  VAR_5 . METHOD_5 ( pool . getId ( ) ) )  VAR_5 . METHOD_5 ( pool . getId ( ) ) ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<TYPE_1<org.ovirt.engine.core.compat.Guid,java.lang.Integer>> ) RETURN java.util.List<TYPE_1<org.ovirt.engine.core.compat.Guid,java.lang.Integer>> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDS> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDS> ( NAME hosts ) NAME hosts ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ) VAR VAR ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.String> ) TYPE java.util.Map<java.lang.String,java.lang.String> ( NAME parameters ) NAME parameters ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1<org.ovirt.engine.core.compat.Guid,java.lang.Integer>> ) TYPE java.util.List<TYPE_1<org.ovirt.engine.core.compat.Guid,java.lang.Integer>> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME vds ) NAME vds ( IN hosts ) IN hosts ( BLOCK BLOCK (  VAR_1 . add ( new TYPE_1 ( vds . getId ( ) , METHOD_2 ( vds , parameters ) ) ) )  VAR_1 . add ( new TYPE_1 ( vds . getId ( ) , METHOD_2 ( vds , parameters ) ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 < TYPE_2 > ( new TYPE_2 ( VAR_1 ) ) ) )  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 < TYPE_2 > ( new TYPE_2 ( VAR_1 ) ) ) (  METHOD_3 ( cmd ) )  METHOD_3 ( cmd ) (  METHOD_4 ( cmd , true ) )  METHOD_4 ( cmd , true ) (  cmd . METHOD_1 ( ) )  cmd . METHOD_1 ( ) (  TYPE_3 . assertEquals ( cmd . METHOD_5 ( ) , VAR_2 ) )  TYPE_3 . assertEquals ( cmd . METHOD_5 ( ) , VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_3 ( ) ) INIT = METHOD_3 ( ) ) VAR VAR ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN (  METHOD_4 ( TYPE_2 . getInstance ( ) . METHOD_5 ( ) . METHOD_6 ( METHOD_3 ( ) , METHOD_7 ( ) ) ) )  METHOD_4 ( TYPE_2 . getInstance ( ) . METHOD_5 ( ) . METHOD_6 ( METHOD_3 ( ) , METHOD_7 ( ) ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) RETURN org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME network ) NAME network ) VAR VAR ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VdsNetworkInterface> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VdsNetworkInterface> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VdsNetworkInterface> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VdsNetworkInterface> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME i ) NAME i ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( IF IF ( COND network . equals ( i . METHOD_2 ( ) ) ) COND network . equals ( i . METHOD_2 ( ) ) ( THEN THEN (  return i ; )  return i ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME i ) NAME i ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK ( IF IF ( COND network . equals ( i . METHOD_2 ( ) ) ) COND network . equals ( i . METHOD_2 ( ) ) ( THEN THEN (  return i ; )  return i ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND source != null ) COND source != null ( THEN THEN ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS> ( NAME list ) NAME list ( INIT = VAR_1 . Linq < org.ovirt.engine.core.common.businessentities.VDS > METHOD_1 ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) ) INIT = VAR_1 . Linq < org.ovirt.engine.core.common.businessentities.VDS > METHOD_1 ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) ) VAR VAR (  return list ; )  return list ; ) THEN THEN ) IF IF (  return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ; )  return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( TYPE_1 . METHOD_2 ( ) ) && ( ! ( METHOD_3 ( VAR_1 , VAR_2 ) ) ) ) COND ( TYPE_1 . METHOD_2 ( ) ) && ( ! ( METHOD_3 ( VAR_1 , VAR_2 ) ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  METHOD_4 ( TYPE_1 . METHOD_5 ( ) . getStoragePoolId ( ) , TYPE_1 . getVm ( ) . METHOD_6 ( ) ) )  METHOD_4 ( TYPE_1 . METHOD_5 ( ) . getStoragePoolId ( ) , TYPE_1 . getVm ( ) . METHOD_6 ( ) ) (  return super . METHOD_1 ( ) ; )  return super . METHOD_1 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( METHOD_3 ( ) ) )  METHOD_2 ( METHOD_3 ( ) ) (  VAR_1 . METHOD_4 ( ) )  VAR_1 . METHOD_4 ( ) ( VAR VAR ( TYPE TYPE_1.StorageDomain ) TYPE TYPE_1.StorageDomain ( NAME model ) NAME model ( INIT = TYPE_2 . getModel ( 0 ) ) INIT = TYPE_2 . getModel ( 0 ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_2 . add ( model ) )  VAR_2 . add ( model ) (  METHOD_5 ( STRING_1 ) )  METHOD_5 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( BLOCK BLOCK (  METHOD_6 ( VAR_3 , STRING_2 , STRING_3 , STRING_4 ) )  METHOD_6 ( VAR_3 , STRING_2 , STRING_3 , STRING_4 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_2 ) ( target ) ) ) INIT = ( ( TYPE_2 ) ( target ) ) ) VAR VAR (  VAR_1 . METHOD_3 ( ( ( java.lang.Integer ) ( returnValue ) ) ) )  VAR_1 . METHOD_3 ( ( ( java.lang.Integer ) ( returnValue ) ) ) (  VAR_1 . METHOD_4 ( ) )  VAR_1 . METHOD_4 ( ) ) BLOCK BLOCK ) METHOD METHOD (  TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_2 VAR_1 = ( ( TYPE_2 ) ( target ) ) ; VAR_1 . METHOD_3 ( ( ( java.lang.Integer ) ( returnValue ) ) ) ; VAR_1 . METHOD_4 ( ) ; } } ) ) )  TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_2 VAR_1 = ( ( TYPE_2 ) ( target ) ) ; VAR_1 . METHOD_3 ( ( ( java.lang.Integer ) ( returnValue ) ) ) ; VAR_1 . METHOD_4 ( ) ; } } ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1.VdcQueryReturnValue ) RETURN TYPE_1.VdcQueryReturnValue ( NAME RunQuery ) NAME RunQuery ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.VdcQueryType ) TYPE TYPE_1.VdcQueryType ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_3 . METHOD_1 ( STRING_1 ) )  VAR_3 . METHOD_1 ( STRING_1 ) (  METHOD_2 ( VAR_1 , VAR_2 ) )  METHOD_2 ( VAR_1 , VAR_2 ) (  VAR_2 . METHOD_3 ( METHOD_4 ( ) . getId ( ) ) )  VAR_2 . METHOD_3 ( METHOD_4 ( ) . getId ( ) ) (  return METHOD_5 ( ) . runQuery ( VAR_1 , VAR_2 ) ; )  return METHOD_5 ( ) . runQuery ( VAR_1 , VAR_2 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_2 ) ( model ) ) ) INIT = ( ( TYPE_2 ) ( model ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_3> ) TYPE java.util.List<TYPE_3> ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( ( java.util.List < TYPE_3 > ) ( ( ( TYPE_4 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) ) ) INIT = ( ( java.util.List < TYPE_3 > ) ( ( ( TYPE_4 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) ) ) VAR VAR ( IF IF ( COND VAR_3 != null ) COND VAR_3 != null ( THEN THEN (  TYPE_5 . METHOD_2 ( VAR_3 , VAR_4 ) )  TYPE_5 . METHOD_2 ( VAR_3 , VAR_4 ) ) THEN THEN ) IF IF (  METHOD_3 ( true ) )  METHOD_3 ( true ) (  VAR_2 . setItems ( VAR_3 ) )  VAR_2 . setItems ( VAR_3 ) (  METHOD_3 ( false ) )  METHOD_3 ( false ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( STRING_1 , VAR_2 , VAR_3 , INT_1 , 0 ) ) INIT = METHOD_2 ( STRING_1 , VAR_2 , VAR_3 , INT_1 , 0 ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_4 ) NAME VAR_4 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR (  org.mockito.Mockito.when ( VAR_5 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ) . thenReturn ( VAR_4 ) )  org.mockito.Mockito.when ( VAR_5 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ) . thenReturn ( VAR_4 ) ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_6 ) NAME VAR_6 ( INIT = command . METHOD_5 ( VAR_1 ) ) INIT = command . METHOD_5 ( VAR_1 ) ) VAR VAR (  TYPE_2 . METHOD_6 ( VAR_6 ) )  TYPE_2 . METHOD_6 ( VAR_6 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source != null ? new java.util.ArrayList < java.lang.String > ( ( ( java.util.ArrayList < java.lang.String > ) ( source ) ) ) : new java.util.ArrayList < java.lang.String > ( ) ; )  return source != null ? new java.util.ArrayList < java.lang.String > ( ( ( java.util.ArrayList < java.lang.String > ) ( source ) ) ) : new java.util.ArrayList < java.lang.String > ( ) ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? new java.util.ArrayList < java.lang.String > ( ( ( java.util.ArrayList < java.lang.String > ) ( source ) ) ) : new java.util.ArrayList < java.lang.String > ( ) ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? new java.util.ArrayList < java.lang.String > ( ( ( java.util.ArrayList < java.lang.String > ) ( source ) ) ) : new java.util.ArrayList < java.lang.String > ( ) ; } } ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME tempVar ) NAME tempVar ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  tempVar . METHOD_2 ( VAR_1 ) )  tempVar . METHOD_2 ( VAR_1 ) (  org.ovirt.engine.ui.frontend.Frontend . METHOD_3 ( VAR_2 , tempVar , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend . METHOD_3 ( VAR_2 , tempVar , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VdsNetworkInterface> ) RETURN java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VdsNetworkInterface> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VdsNetworkInterface> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VdsNetworkInterface> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VdsNetworkInterface> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VdsNetworkInterface> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . VdsNetworkInterface > ( ) ) INIT = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . VdsNetworkInterface > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME i ) NAME i ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( IF IF ( COND TYPE_1 . METHOD_2 ( i . METHOD_3 ( ) ) ) COND TYPE_1 . METHOD_2 ( i . METHOD_3 ( ) ) ( THEN THEN (  VAR_2 . add ( i ) )  VAR_2 . add ( i ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( VAR_2 ) ) INIT = new TYPE_2 ( VAR_2 ) ) VAR VAR (  METHOD_2 ( VAR_1 ) )  METHOD_2 ( VAR_1 ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_4 . METHOD_3 ( null ) ) INIT = TYPE_4 . METHOD_3 ( null ) ) VAR VAR (  VAR_4 . METHOD_4 ( VAR_3 ) )  VAR_4 . METHOD_4 ( VAR_3 ) (  VAR_5 . METHOD_5 ( ) )  VAR_5 . METHOD_5 ( ) ( TRY TRY ( BLOCK BLOCK (  TYPE_4 . METHOD_6 ( ) )  TYPE_4 . METHOD_6 ( ) (  TYPE_4 . METHOD_7 ( STRING_1 ) )  TYPE_4 . METHOD_7 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_6 ) NAME VAR_6 ( BLOCK BLOCK (  METHOD_8 ( VAR_6 , VAR_7 , VAR_1 ) )  METHOD_8 ( VAR_6 , VAR_7 , VAR_1 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VM> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VM> ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ) ( result ) ) ) INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ) ( result ) ) ) VAR VAR ( IF IF ( COND ( VAR_2 . size ( ) ) > 0 ) COND ( VAR_2 . size ( ) ) > 0 ( THEN THEN (  VAR_3 . METHOD_2 ( ) . setIsChangable ( false ) )  VAR_3 . METHOD_2 ( ) . setIsChangable ( false ) ( IF IF ( COND ! VAR_4 ) COND ! VAR_4 ( THEN THEN (  VAR_3 . METHOD_3 ( ) . setIsChangable ( false ) )  VAR_3 . METHOD_3 ( ) . setIsChangable ( false ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( new TYPE_1 . DiskImage ( ) ) )  METHOD_2 ( new TYPE_1 . DiskImage ( ) ) (  METHOD_3 ( ) )  METHOD_3 ( ) (  METHOD_4 ( ) )  METHOD_4 ( ) (  METHOD_5 ( false ) )  METHOD_5 ( false ) (  METHOD_6 ( ) )  METHOD_6 ( ) (  METHOD_7 ( VAR_1 ) )  METHOD_7 ( VAR_1 ) (  org.mockito.Mockito.when ( VAR_2 . METHOD_8 ( TYPE_2 . any ( VAR_3 . Guid class ) ) ) . thenReturn ( new TYPE_3 . ValidationResult ( VAR_4 ) ) )  org.mockito.Mockito.when ( VAR_2 . METHOD_8 ( TYPE_2 . any ( VAR_3 . Guid class ) ) ) . thenReturn ( new TYPE_3 . ValidationResult ( VAR_4 ) ) (  TYPE_4 . METHOD_9 ( command , VAR_5 ) )  TYPE_4 . METHOD_9 ( command , VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_1 . setId ( TYPE_2 . METHOD_2 ( ) ) )  VAR_1 . setId ( TYPE_2 . METHOD_2 ( ) ) (  TYPE_2 . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) )  TYPE_2 . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) (  TYPE_2 . METHOD_5 ( ) . METHOD_6 ( VAR_1 ) )  TYPE_2 . METHOD_5 ( ) . METHOD_6 ( VAR_1 ) (  TYPE_2 . METHOD_5 ( ) . METHOD_7 ( ) )  TYPE_2 . METHOD_5 ( ) . METHOD_7 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( VAR_2 ) )  VAR_1 . METHOD_2 ( VAR_2 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_2 ( VAR_4 ) ) INIT = new TYPE_2 ( VAR_4 ) ) VAR VAR (  VAR_3 . METHOD_3 ( VAR_5 ) )  VAR_3 . METHOD_3 ( VAR_5 ) (  TYPE_3 . log ( VAR_3 , VAR_6 ) )  TYPE_3 . log ( VAR_3 , VAR_6 ) (  return TYPE_4 . getInstance ( ) . METHOD_4 ( ) . METHOD_5 ( VAR_5 , VAR_7 ) ; )  return TYPE_4 . getInstance ( ) . METHOD_4 ( ) . METHOD_5 ( VAR_5 , VAR_7 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME VAR_1 ) NAME VAR_1 ( INIT = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ) INIT = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ) VAR VAR (  VAR_1 . METHOD_2 ( this ) )  VAR_1 . METHOD_2 ( this ) ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_3 = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.network.Network > ) ( returnValue ) ) )  VAR_3 = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.network.Network > ) ( returnValue ) ) (  METHOD_3 ( ) )  METHOD_3 ( ) (  METHOD_4 ( ) )  METHOD_4 ( ) (  METHOD_5 ( ) )  METHOD_5 ( ) ) BLOCK BLOCK ) METHOD METHOD (  VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { VAR_3 = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.network.Network > ) ( returnValue ) ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; } } )  VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { VAR_3 = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.network.Network > ) ( returnValue ) ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; } } ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME vds ) NAME vds ( INIT = getEntity ( ) ) INIT = getEntity ( ) ) VAR VAR (  TYPE_1 . getInstance ( ) . METHOD_6 ( VAR_1 , vds . METHOD_7 ( ) ) )  TYPE_1 . getInstance ( ) . METHOD_6 ( VAR_1 , vds . METHOD_7 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  return new TYPE_1 ( new TYPE_2 ( disk . getId ( ) , TYPE_3 . METHOD_2 ( ) ) , VAR_1 , TYPE_4 . getName ( ) , STRING_1 , 0 , null , true , TYPE_3 . getParameters ( ) . METHOD_3 ( ) , TYPE_3 . getParameters ( ) . METHOD_4 ( ) , STRING_1 , null , TYPE_3 . getParameters ( ) . METHOD_5 ( ) , null ) ; )  return new TYPE_1 ( new TYPE_2 ( disk . getId ( ) , TYPE_3 . METHOD_2 ( ) ) , VAR_1 , TYPE_4 . getName ( ) , STRING_1 , 0 , null , true , TYPE_3 . getParameters ( ) . METHOD_3 ( ) , TYPE_3 . getParameters ( ) . METHOD_4 ( ) , STRING_1 , null , TYPE_3 . getParameters ( ) . METHOD_5 ( ) , null ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( INT_1 ) )  METHOD_2 ( INT_1 ) (  METHOD_3 ( 0 , 2 ) )  METHOD_3 ( 0 , 2 ) (  METHOD_4 ( ) )  METHOD_4 ( ) (  METHOD_4 ( ) )  METHOD_4 ( ) (  METHOD_5 ( 1 ) )  METHOD_5 ( 1 ) (  METHOD_6 ( new int [ ] { 0 } ) )  METHOD_6 ( new int [ ] { 0 } ) (  METHOD_7 ( new int [ ] { 0 } ) )  METHOD_7 ( new int [ ] { 0 } ) (  METHOD_8 ( new int [ ] { 0 } ) )  METHOD_8 ( new int [ ] { 0 } ) (  METHOD_9 ( new int [ ] { 0 } ) )  METHOD_9 ( new int [ ] { 0 } ) (  METHOD_10 ( new int [ ] { 0 } ) )  METHOD_10 ( new int [ ] { 0 } ) (  METHOD_5 ( 1 ) )  METHOD_5 ( 1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.network.Network ) TYPE org.ovirt.engine.core.common.businessentities.network.Network ( NAME network ) NAME network ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_3 ( VAR_2 ) ) INIT = METHOD_3 ( VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_4 ( network , VAR_1 , null ) ) INIT = METHOD_4 ( network , VAR_1 , null ) ) VAR VAR (  org.mockito.Mockito.when ( VAR_4 . get ( VAR_3 . getId ( ) ) ) . thenReturn ( VAR_3 ) )  org.mockito.Mockito.when ( VAR_4 . get ( VAR_3 . getId ( ) ) ) . thenReturn ( VAR_3 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME validator ) NAME validator ( INIT = new TYPE_3 ( ) . METHOD_5 ( new TYPE_4 ( ) . METHOD_6 ( VAR_3 ) ) . METHOD_7 ( network ) . METHOD_8 ( VAR_1 ) . METHOD_9 ( ) ) INIT = new TYPE_3 ( ) . METHOD_5 ( new TYPE_4 ( ) . METHOD_6 ( VAR_3 ) ) . METHOD_7 ( network ) . METHOD_8 ( VAR_1 ) . METHOD_9 ( ) ) VAR VAR (  return validator ; )  return validator ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME a ) NAME a ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( IF IF ( COND ( ( ( a . METHOD_2 ( ) ) == ( VAR_2 ) ) && ( ( a . METHOD_3 ( ) ) != null ) ) && ( ( a . METHOD_3 ( ) ) == ( VAR_3 ) ) ) COND ( ( ( a . METHOD_2 ( ) ) == ( VAR_2 ) ) && ( ( a . METHOD_3 ( ) ) != null ) ) && ( ( a . METHOD_3 ( ) ) == ( VAR_3 ) ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_2 . METHOD_2 ( ) ) INIT = VAR_2 . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND ( VAR_3 == null ) || ( VAR_4 == null ) ) COND ( VAR_3 == null ) || ( VAR_4 == null ) ( THEN THEN (  throw new TYPE_2 ( STRING_1 ) ; )  throw new TYPE_2 ( STRING_1 ) ; ) THEN THEN ) IF IF (  return VAR_3 . METHOD_3 ( VAR_4 ) ; )  return VAR_3 . METHOD_3 ( VAR_4 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ( NAME iface ) NAME iface ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > ) ( source ) ) ) INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > ) ( source ) ) ) VAR VAR (  return ! ( VAR_2 . isEmpty ( ) ) ; )  return ! ( VAR_2 . isEmpty ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > VAR_2 = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > ) ( source ) ) ; return ! ( VAR_2 . isEmpty ( ) ) ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > VAR_2 = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > ) ( source ) ) ; return ! ( VAR_2 . isEmpty ( ) ) ; } } (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_3 , new TYPE_1 ( VAR_1 , iface ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_3 , new TYPE_1 ( VAR_1 , iface ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.Map ) RETURN java.util.Map ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME host ) NAME host ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE java.util.Map ) TYPE java.util.Map ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_3 ( ) ) INIT = METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE java.util.List ) TYPE java.util.List ( NAME VAR_3 ) NAME VAR_3 ( INIT = new java.util.ArrayList ( ) ) INIT = new java.util.ArrayList ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2.VM ) TYPE TYPE_2.VM ( NAME vm ) NAME vm ( INIT = host . METHOD_4 ( ) . get ( VAR_1 ) ) INIT = host . METHOD_4 ( ) . get ( VAR_1 ) ) VAR VAR ( IF IF ( COND vm != null ) COND vm != null ( THEN THEN (  VAR_3 . add ( METHOD_5 ( vm ) ) )  VAR_3 . add ( METHOD_5 ( vm ) ) ) THEN THEN ) IF IF (  VAR_2 . put ( STRING_1 , VAR_3 ) )  VAR_2 . put ( STRING_1 , VAR_3 ) (  TYPE_3 . METHOD_6 ( ) )  TYPE_3 . METHOD_6 ( ) (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR (  disk . METHOD_2 ( VAR_1 ) )  disk . METHOD_2 ( VAR_1 ) (  disk . METHOD_3 ( STRING_2 ) )  disk . METHOD_3 ( STRING_2 ) (  METHOD_4 ( disk , TYPE_2 . METHOD_5 ( TYPE_2 . METHOD_6 ( VAR_1 . METHOD_7 ( 0 , INT_1 ) ) ) , TYPE_2 . METHOD_8 ( 1 ) ) )  METHOD_4 ( disk , TYPE_2 . METHOD_5 ( TYPE_2 . METHOD_6 ( VAR_1 . METHOD_7 ( 0 , INT_1 ) ) ) , TYPE_2 . METHOD_8 ( 1 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ( INIT = ( ( TYPE_1 ) ( target ) ) ) INIT = ( ( TYPE_1 ) ( target ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.StoragePool > ) ( returnValue ) ) ) INIT = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.StoragePool > ) ( returnValue ) ) ) VAR VAR (  TYPE_2 . METHOD_1 ( VAR_1 , new TYPE_3 ( ) ) )  TYPE_2 . METHOD_1 ( VAR_1 , new TYPE_3 ( ) ) (  model . METHOD_2 ( ) . setItems ( VAR_1 ) )  model . METHOD_2 ( ) . setItems ( VAR_1 ) (  model . METHOD_2 ( ) . METHOD_3 ( VAR_1 . isEmpty ( ) ) )  model . METHOD_2 ( ) . METHOD_3 ( VAR_1 . isEmpty ( ) ) (  model . METHOD_4 ( ) )  model . METHOD_4 ( ) (  METHOD_5 ( ) )  METHOD_5 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.when ( command . METHOD_2 ( ) . get ( TYPE_1 . any ( VAR_1 . Guid class ) ) ) . thenReturn ( null ) )  org.mockito.Mockito.when ( command . METHOD_2 ( ) . get ( TYPE_1 . any ( VAR_1 . Guid class ) ) ) . thenReturn ( null ) (  org.mockito.Mockito.when ( command . METHOD_3 ( parameters . METHOD_4 ( ) . METHOD_5 ( ) ) ) . thenReturn ( TYPE_2 . METHOD_6 ( ) ) )  org.mockito.Mockito.when ( command . METHOD_3 ( parameters . METHOD_4 ( ) . METHOD_5 ( ) ) ) . thenReturn ( TYPE_2 . METHOD_6 ( ) ) (  command . METHOD_7 ( ) )  command . METHOD_7 ( ) (  TYPE_3 . METHOD_8 ( command . getReturnValue ( ) . getSucceeded ( ) ) )  TYPE_3 . METHOD_8 ( command . getReturnValue ( ) . getSucceeded ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( null ) )  METHOD_2 ( null ) ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_4 ( ) )  METHOD_4 ( ) ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( java.util.List < TYPE_2 > ) ( returnValue ) ) ) INIT = ( ( java.util.List < TYPE_2 > ) ( returnValue ) ) ) VAR VAR (  VAR_1 . add ( 0 , null ) )  VAR_1 . add ( 0 , null ) (  METHOD_5 ( ) . setItems ( VAR_1 ) )  METHOD_5 ( ) . setItems ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD (  TYPE_1 . METHOD_3 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { METHOD_4 ( ) ; java.util.List < TYPE_2 > VAR_1 = ( ( java.util.List < TYPE_2 > ) ( returnValue ) ) ; VAR_1 . add ( 0 , null ) ; METHOD_5 ( ) . setItems ( VAR_1 ) ; } } ) ) )  TYPE_1 . METHOD_3 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { METHOD_4 ( ) ; java.util.List < TYPE_2 > VAR_1 = ( ( java.util.List < TYPE_2 > ) ( returnValue ) ) ; VAR_1 . add ( 0 , null ) ; METHOD_5 ( ) . setItems ( VAR_1 ) ; } } ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME parameters ) NAME parameters ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  super . METHOD_2 ( parameters . METHOD_3 ( ) ) )  super . METHOD_2 ( parameters . METHOD_3 ( ) ) ( IF IF ( COND ( ( METHOD_4 ( ) ) != null ) && ( ( METHOD_4 ( ) . getStoragePoolId ( ) ) != null ) ) COND ( ( METHOD_4 ( ) ) != null ) && ( ( METHOD_4 ( ) . getStoragePoolId ( ) ) != null ) ( THEN THEN (  METHOD_5 ( METHOD_4 ( ) . getStoragePoolId ( ) ) )  METHOD_5 ( METHOD_4 ( ) . getStoragePoolId ( ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public synchronized ) MODIFIER public synchronized ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME id ) NAME id ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = null ) INIT = null ) VAR VAR ( IF IF ( COND VAR_2 . METHOD_2 ( id ) ) COND VAR_2 . METHOD_2 ( id ) ( THEN THEN (  return VAR_2 . get ( id ) ; )  return VAR_2 . get ( id ) ; ) THEN THEN ) IF IF (  VAR_1 = ( ( TYPE_1 ) ( METHOD_3 ( VAR_3 class , id ) ) ) )  VAR_1 = ( ( TYPE_1 ) ( METHOD_3 ( VAR_3 class , id ) ) ) ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  VAR_1 = new TYPE_1 ( ) )  VAR_1 = new TYPE_1 ( ) (  VAR_1 . setId ( id ) )  VAR_1 . setId ( id ) ) THEN THEN ( ELSE ELSE (  VAR_4 . METHOD_4 ( STRING_1 , id ) )  VAR_4 . METHOD_4 ( STRING_1 , id ) ) ELSE ELSE ) IF IF (  VAR_2 . put ( id , VAR_1 ) )  VAR_2 . put ( id , VAR_1 ) (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_2 ( VAR_1 ) ) INIT = METHOD_2 ( VAR_1 ) ) VAR VAR (  TYPE_3 . METHOD_3 ( ) . METHOD_1 ( VAR_3 ) )  TYPE_3 . METHOD_3 ( ) . METHOD_1 ( VAR_3 ) (  VAR_3 . METHOD_3 ( ) . METHOD_4 ( ) . setId ( TYPE_4 . METHOD_5 ( VAR_4 , VAR_2 ) ) )  VAR_3 . METHOD_3 ( ) . METHOD_4 ( ) . setId ( TYPE_4 . METHOD_5 ( VAR_4 , VAR_2 ) ) (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  METHOD_3 ( VAR_1 , VAR_2 ) )  METHOD_3 ( VAR_1 , VAR_2 ) (  METHOD_4 ( VAR_3 , org.ovirt.engine.core.compat.Guid . METHOD_5 ( ) , VAR_1 ) )  METHOD_4 ( VAR_3 , org.ovirt.engine.core.compat.Guid . METHOD_5 ( ) , VAR_1 ) ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ) TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_6 ( VAR_5 ) ) INIT = METHOD_6 ( VAR_5 ) ) VAR VAR (  VAR_4 . METHOD_7 ( VAR_6 ) )  VAR_4 . METHOD_7 ( VAR_6 ) ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ) TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME VAR_7 ) NAME VAR_7 ( INIT = METHOD_6 ( VAR_8 ) ) INIT = METHOD_6 ( VAR_8 ) ) VAR VAR (  VAR_7 . METHOD_7 ( VAR_6 ) )  VAR_7 . METHOD_7 ( VAR_6 ) (  org.mockito.Mockito.when ( VAR_9 . METHOD_8 ( TYPE_1 . any ( VAR_10 . Guid class ) ) ) . thenReturn ( new TYPE_2 . ValidationResult ( VAR_11 ) ) )  org.mockito.Mockito.when ( VAR_9 . METHOD_8 ( TYPE_1 . any ( VAR_10 . Guid class ) ) ) . thenReturn ( new TYPE_2 . ValidationResult ( VAR_11 ) ) (  TYPE_3 . METHOD_9 ( command , VAR_12 ) )  TYPE_3 . METHOD_9 ( command , VAR_12 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = super . METHOD_1 ( model ) ) INIT = super . METHOD_1 ( model ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR (  VAR_2 . METHOD_3 ( TYPE_3 . name ( ) ) )  VAR_2 . METHOD_3 ( TYPE_3 . name ( ) ) (  VAR_2 . METHOD_4 ( null ) )  VAR_2 . METHOD_4 ( null ) (  VAR_2 . METHOD_5 ( null ) )  VAR_2 . METHOD_5 ( null ) (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_5 ) NAME VAR_5 ( INIT = ( VAR_2 == null ) ? TYPE_3 . METHOD_2 ( ) : TYPE_3 . METHOD_3 ( VAR_2 ) ) INIT = ( VAR_2 == null ) ? TYPE_3 . METHOD_2 ( ) : TYPE_3 . METHOD_3 ( VAR_2 ) ) VAR VAR (  TYPE_4 . METHOD_4 ( STRING_1 , VAR_1 . getId ( ) , VAR_5 ) )  TYPE_4 . METHOD_4 ( STRING_1 , VAR_1 . getId ( ) , VAR_5 ) (  TYPE_4 . METHOD_4 ( STRING_2 , VAR_1 . METHOD_5 ( ) , TYPE_3 . METHOD_6 ( VAR_3 ) ) )  TYPE_4 . METHOD_4 ( STRING_2 , VAR_1 . METHOD_5 ( ) , TYPE_3 . METHOD_6 ( VAR_3 ) ) (  TYPE_4 . METHOD_4 ( STRING_3 , VAR_1 . METHOD_7 ( ) , TYPE_3 . METHOD_6 ( VAR_4 ) ) )  TYPE_4 . METHOD_4 ( STRING_3 , VAR_1 . METHOD_7 ( ) , TYPE_3 . METHOD_6 ( VAR_4 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_1 ) ( target ) ) ) INIT = ( ( TYPE_1 ) ( target ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VmTemplate> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VmTemplate> ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmTemplate > ) ( returnValue ) ) ) INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmTemplate > ) ( returnValue ) ) ) VAR VAR (  VAR_1 . METHOD_1 ( TYPE_2 . getInstance ( ) . METHOD_2 ( VAR_2 , VAR_3 . METHOD_3 ( ) . METHOD_4 ( ) ) ) )  VAR_1 . METHOD_1 ( TYPE_2 . getInstance ( ) . METHOD_2 ( VAR_2 , VAR_3 . METHOD_3 ( ) . METHOD_4 ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.DiskImage ) TYPE org.ovirt.engine.core.common.businessentities.DiskImage ( NAME diskImage ) NAME diskImage ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_1 . METHOD_2 ( true ) )  VAR_1 . METHOD_2 ( true ) (  VAR_1 . setId ( new TYPE_2 ( diskImage . METHOD_3 ( ) , org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) ) ) )  VAR_1 . setId ( new TYPE_2 ( diskImage . METHOD_3 ( ) , org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) ) ) (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_1 . METHOD_2 ( 2 ) )  VAR_1 . METHOD_2 ( 2 ) (  VAR_1 . METHOD_3 ( new TYPE_2 < java.lang.Integer , java.lang.String > ( new java.lang.Integer ( 2 ) , TYPE_3 . toString ( ) ) ) )  VAR_1 . METHOD_3 ( new TYPE_2 < java.lang.Integer , java.lang.String > ( new java.lang.Integer ( 2 ) , TYPE_3 . toString ( ) ) ) (  VAR_1 . METHOD_4 ( 0 ) )  VAR_1 . METHOD_4 ( 0 ) (  VAR_1 . METHOD_5 ( 0 ) )  VAR_1 . METHOD_5 ( 0 ) (  VAR_1 . METHOD_6 ( METHOD_7 ( ) ) )  VAR_1 . METHOD_6 ( METHOD_7 ( ) ) (  VAR_1 . METHOD_8 ( METHOD_9 ( ) ) )  VAR_1 . METHOD_8 ( METHOD_9 ( ) ) (  return TYPE_4 . METHOD_10 ( VAR_1 ) ; )  return TYPE_4 . METHOD_10 ( VAR_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( VAR_2 . METHOD_2 ( ) , VAR_2 . METHOD_3 ( ) ) ) INIT = new TYPE_1 ( VAR_2 . METHOD_2 ( ) , VAR_2 . METHOD_3 ( ) ) ) VAR VAR (  VAR_1 . append ( VAR_2 . METHOD_4 ( ) , VAR_2 . METHOD_5 ( ) ) )  VAR_1 . append ( VAR_2 . METHOD_4 ( ) , VAR_2 . METHOD_5 ( ) ) ( IF IF ( COND TYPE_2 . getInstance ( ) . METHOD_6 ( ) ) COND TYPE_2 . getInstance ( ) . METHOD_6 ( ) ( THEN THEN (  VAR_1 . append ( VAR_2 . METHOD_7 ( ) , VAR_2 . METHOD_8 ( ) ) )  VAR_1 . append ( VAR_2 . METHOD_7 ( ) , VAR_2 . METHOD_8 ( ) ) ) THEN THEN ) IF IF (  VAR_1 . append ( VAR_2 . METHOD_9 ( ) , VAR_2 . METHOD_10 ( ) ) )  VAR_1 . append ( VAR_2 . METHOD_9 ( ) , VAR_2 . METHOD_10 ( ) ) (  return VAR_1 . toString ( ) ; )  return VAR_1 . toString ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ) RETURN org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.network.Network ) TYPE org.ovirt.engine.core.common.businessentities.network.Network ( NAME network ) NAME network ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ( NAME nic ) NAME nic ( INIT = METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , VAR_1 , false , null , network . METHOD_4 ( ) , network . getName ( ) , network . METHOD_5 ( ) , network . METHOD_6 ( ) , false , null ) ) INIT = METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , VAR_1 , false , null , network . METHOD_4 ( ) , network . getName ( ) , network . METHOD_5 ( ) , network . METHOD_6 ( ) , false , null ) ) VAR VAR (  return nic ; )  return nic ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source ; )  return source ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } (  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_3 , new TYPE_1 ( VAR_1 , VAR_2 ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_3 , new TYPE_1 ( VAR_1 , VAR_2 ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( METHOD_3 ( ) ) )  METHOD_2 ( METHOD_3 ( ) ) ( VAR VAR ( TYPE TYPE_1.Network ) TYPE TYPE_1.Network ( NAME model ) NAME model ( INIT = new TYPE_1 . Network ( ) ) INIT = new TYPE_1 . Network ( ) ) VAR VAR (  model . setId ( STRING_1 ) )  model . setId ( STRING_1 ) (  METHOD_4 ( 1 , null ) )  METHOD_4 ( 1 , null ) (  METHOD_5 ( 1 , null ) )  METHOD_5 ( 1 , null ) (  METHOD_6 ( 1 , null ) )  METHOD_6 ( 1 , null ) (  METHOD_7 ( VAR_1 ) )  METHOD_7 ( VAR_1 ) (  METHOD_8 ( VAR_2 , VAR_3 class , new java.lang.String [ ] { STRING_2 } , new java.lang.Object [ ] { VAR_1 } , true , true ) )  METHOD_8 ( VAR_2 , VAR_3 class , new java.lang.String [ ] { STRING_2 } , new java.lang.Object [ ] { VAR_1 } , true , true ) (  VAR_4 . add ( model ) )  VAR_4 . add ( model ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( getModel ( ) . METHOD_3 ( ) ) ) INIT = METHOD_2 ( getModel ( ) . METHOD_3 ( ) ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_4 ( ) ) INIT = METHOD_4 ( ) ) VAR VAR ( IF IF ( COND ( VAR_1 == 0 ) || ( VAR_1 == 0 ) ) COND ( VAR_1 == 0 ) || ( VAR_1 == 0 ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  getModel ( ) . METHOD_5 ( ) . setSelectedItem ( ( VAR_2 / VAR_1 ) ) )  getModel ( ) . METHOD_5 ( ) . setSelectedItem ( ( VAR_2 / VAR_1 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_1 . setId ( TYPE_2 . getParameters ( ) . METHOD_2 ( ) . getId ( ) ) )  VAR_1 . setId ( TYPE_2 . getParameters ( ) . METHOD_2 ( ) . getId ( ) ) ( IF IF ( COND TYPE_2 . getParameters ( ) . METHOD_3 ( ) ) COND TYPE_2 . getParameters ( ) . METHOD_3 ( ) ( THEN THEN (  VAR_1 . METHOD_4 ( VAR_2 ) )  VAR_1 . METHOD_4 ( VAR_2 ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND VAR_3 < java.lang.Boolean > METHOD_5 ( VAR_4 ) ) COND VAR_3 < java.lang.Boolean > METHOD_5 ( VAR_4 ) ( THEN THEN (  VAR_1 . METHOD_4 ( VAR_5 ) )  VAR_1 . METHOD_4 ( VAR_5 ) ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF (  org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_6 ( ) . METHOD_7 ( VAR_1 ) )  org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_6 ( ) . METHOD_7 ( VAR_1 ) (  TYPE_2 . METHOD_8 ( ) . METHOD_9 ( VAR_1 ) )  TYPE_2 . METHOD_8 ( ) . METHOD_9 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.HashMap<org.ovirt.engine.core.compat.Guid,org.ovirt.engine.core.common.businessentities.DiskImage> ) RETURN java.util.HashMap<org.ovirt.engine.core.compat.Guid,org.ovirt.engine.core.common.businessentities.DiskImage> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<TYPE_2.Disk> ) TYPE TYPE_1<TYPE_2.Disk> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.HashMap<org.ovirt.engine.core.compat.Guid,org.ovirt.engine.core.common.businessentities.DiskImage> ) TYPE java.util.HashMap<org.ovirt.engine.core.compat.Guid,org.ovirt.engine.core.common.businessentities.DiskImage> ( NAME result ) NAME result ( INIT = new java.util.HashMap < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ) INIT = new java.util.HashMap < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_2.Disk ) TYPE TYPE_2.Disk ( NAME diskImage ) NAME diskImage ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  result . put ( ( ( org.ovirt.engine.core.common.businessentities.DiskImage ) ( diskImage ) ) . METHOD_2 ( ) , ( ( org.ovirt.engine.core.common.businessentities.DiskImage ) ( diskImage ) ) ) )  result . put ( ( ( org.ovirt.engine.core.common.businessentities.DiskImage ) ( diskImage ) ) . METHOD_2 ( ) , ( ( org.ovirt.engine.core.common.businessentities.DiskImage ) ( diskImage ) ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( 1 , VAR_1 ) )  METHOD_2 ( 1 , VAR_1 ) (  disk = TYPE_1 . METHOD_3 ( ) )  disk = TYPE_1 . METHOD_3 ( ) (  disk . METHOD_4 ( STRING_1 ) )  disk . METHOD_4 ( STRING_1 ) (  validator = org.mockito.Mockito . METHOD_5 ( new TYPE_2 ( disk , VAR_2 ) ) )  validator = org.mockito.Mockito . METHOD_5 ( new TYPE_2 ( disk , VAR_2 ) ) (  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( validator ) . METHOD_6 ( ) )  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( validator ) . METHOD_6 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN java.util.Map<java.lang.String,TYPE_1<java.lang.String,java.lang.String>> ) RETURN java.util.Map<java.lang.String,TYPE_1<java.lang.String,java.lang.String>> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ! ( TYPE_2 . METHOD_2 ( getParameters ( ) . getVm ( ) . METHOD_3 ( ) ) ) ) COND ! ( TYPE_2 . METHOD_2 ( getParameters ( ) . getVm ( ) . METHOD_3 ( ) ) ) ( THEN THEN (  return TYPE_3 . METHOD_4 ( getParameters ( ) . getVm ( ) . METHOD_3 ( ) , VAR_1 ) ; )  return TYPE_3 . METHOD_4 ( getParameters ( ) . getVm ( ) . METHOD_3 ( ) , VAR_1 ) ; ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME vm ) NAME vm ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  super . METHOD_1 ( vm ) )  super . METHOD_1 ( vm ) (  VAR_1 . METHOD_2 ( false ) )  VAR_1 . METHOD_2 ( false ) (  VAR_2 . METHOD_2 ( false ) )  VAR_2 . METHOD_2 ( false ) (  VAR_3 . METHOD_2 ( false ) )  VAR_3 . METHOD_2 ( false ) (  VAR_4 . METHOD_2 ( true ) )  VAR_4 . METHOD_2 ( true ) (  VAR_5 . METHOD_2 ( false ) )  VAR_5 . METHOD_2 ( false ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  VAR_2 . METHOD_2 ( VAR_3 ) )  VAR_2 . METHOD_2 ( VAR_3 ) (  VAR_1 . METHOD_3 ( VAR_2 ) )  VAR_1 . METHOD_3 ( VAR_2 ) ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_1 . METHOD_4 ( ) ) INIT = VAR_1 . METHOD_4 ( ) ) VAR VAR (  TYPE_3 . assertEquals ( VAR_3 , VAR_4 ) )  TYPE_3 . assertEquals ( VAR_3 , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_3 . METHOD_2 ( METHOD_3 ( ) , METHOD_3 ( ) ) ) INIT = TYPE_3 . METHOD_2 ( METHOD_3 ( ) , METHOD_3 ( ) ) ) VAR VAR (  org.mockito.Mockito.when ( VAR_4 . METHOD_4 ( TYPE_4 . any ( VAR_5 . Guid class ) ) ) . thenReturn ( VAR_3 ) )  org.mockito.Mockito.when ( VAR_4 . METHOD_4 ( TYPE_4 . any ( VAR_5 . Guid class ) ) ) . thenReturn ( VAR_3 ) (  VAR_6 . METHOD_5 ( VAR_1 , org.ovirt.engine.core.compat.Guid . METHOD_6 ( ) ) )  VAR_6 . METHOD_5 ( VAR_1 , org.ovirt.engine.core.compat.Guid . METHOD_6 ( ) ) ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME iface ) NAME iface ( IN VAR_3 ) IN VAR_3 ( BLOCK BLOCK (  METHOD_7 ( iface , VAR_2 ) )  METHOD_7 ( iface , VAR_2 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source != null ? ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; )  return source != null ? ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; } } (  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new TYPE_2 ( VAR_1 ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new TYPE_2 ( VAR_1 ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source ; )  return source ; ) BLOCK BLOCK ) METHOD METHOD (  VAR_1 . converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } )  VAR_1 . converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME parameters ) NAME parameters ( INIT = new TYPE_1 ( VAR_2 ) ) INIT = new TYPE_1 ( VAR_2 ) ) VAR VAR (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_3 , parameters , VAR_1 ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_3 , parameters , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.Object[] ) TYPE java.lang.Object[] ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( ( java.lang.Object [ ] ) ( VAR_1 ) ) ) INIT = ( ( java.lang.Object [ ] ) ( VAR_1 ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = ( ( TYPE_1 ) ( VAR_3 [ 0 ] ) ) ) INIT = ( ( TYPE_1 ) ( VAR_3 [ 0 ] ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_5 ) NAME VAR_5 ( INIT = ( ( TYPE_2 ) ( VAR_3 [ 1 ] ) ) ) INIT = ( ( TYPE_2 ) ( VAR_3 [ 1 ] ) ) ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_6 ) NAME VAR_6 ( INIT = ( ( VAR_5 . METHOD_2 ( ) ) == ( VAR_7 ) ) && ( VAR_2 == null ) ) INIT = ( ( VAR_5 . METHOD_2 ( ) ) == ( VAR_7 ) ) && ( VAR_2 == null ) ) VAR VAR (  VAR_4 . METHOD_3 ( VAR_5 , VAR_6 ) )  VAR_4 . METHOD_3 ( VAR_5 , VAR_6 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME vds ) NAME vds ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  return new TYPE_1 ( vds . METHOD_2 ( ) , STRING_1 , true ) ; )  return new TYPE_1 ( vds . METHOD_2 ( ) , STRING_1 , true ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_1 . error ( STRING_2 , vds . getId ( ) , vds . getName ( ) , vds . METHOD_2 ( ) , TYPE_3 . METHOD_3 ( e ) ) )  VAR_1 . error ( STRING_2 , vds . getId ( ) , vds . getName ( ) , vds . METHOD_2 ( ) , TYPE_3 . METHOD_3 ( e ) ) (  VAR_1 . METHOD_4 ( STRING_3 , e ) )  VAR_1 . METHOD_4 ( STRING_3 , e ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.Disk> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.Disk> ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  TYPE_1 . when ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) ) . thenReturn ( VAR_2 ) )  TYPE_1 . when ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) ) . thenReturn ( VAR_2 ) (  TYPE_1 . when ( VAR_2 . METHOD_3 ( ) ) . thenReturn ( VAR_3 ) )  TYPE_1 . when ( VAR_2 . METHOD_3 ( ) ) . thenReturn ( VAR_3 ) (  TYPE_1 . when ( VAR_3 . METHOD_4 ( vmId ) ) . thenReturn ( VAR_1 ) )  TYPE_1 . when ( VAR_3 . METHOD_4 ( vmId ) ) . thenReturn ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME VAR_1 ) NAME VAR_1 ( INIT = org.mockito.Mockito . METHOD_2 ( new TYPE_1 < TYPE_2 > ( VAR_2 ) ) ) INIT = org.mockito.Mockito . METHOD_2 ( new TYPE_1 < TYPE_2 > ( VAR_2 ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_3 ( ) ) INIT = new TYPE_3 ( ) ) VAR VAR (  VAR_3 . METHOD_3 ( INT_1 ) )  VAR_3 . METHOD_3 ( INT_1 ) (  VAR_3 . METHOD_4 ( 2 ) )  VAR_3 . METHOD_4 ( 2 ) (  VAR_3 . METHOD_5 ( new TYPE_4 < org.ovirt.engine.core.compat.Guid > ( ) ) )  VAR_3 . METHOD_5 ( new TYPE_4 < org.ovirt.engine.core.compat.Guid > ( ) ) (  TYPE_5 . METHOD_6 ( VAR_1 . METHOD_7 ( STRING_1 , VAR_3 ) ) )  TYPE_5 . METHOD_6 ( VAR_1 . METHOD_7 ( STRING_1 , VAR_3 ) ) (  TYPE_5 . METHOD_6 ( VAR_1 . getReturnValue ( ) . METHOD_8 ( ) . METHOD_9 ( VAR_4 ) ) )  TYPE_5 . METHOD_6 ( VAR_1 . getReturnValue ( ) . METHOD_8 ( ) . METHOD_9 ( VAR_4 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  org.mockito.Mockito.doReturn ( new TYPE_1 . ValidationResult ( VAR_1 ) ) . when ( VAR_2 ) . METHOD_3 ( TYPE_2 . any ( VAR_3 . Guid class ) ) )  org.mockito.Mockito.doReturn ( new TYPE_1 . ValidationResult ( VAR_1 ) ) . when ( VAR_2 ) . METHOD_3 ( TYPE_2 . any ( VAR_3 . Guid class ) ) (  org.mockito.Mockito.doReturn ( TYPE_3 . METHOD_4 ( ) ) . when ( cmd ) . METHOD_5 ( ) )  org.mockito.Mockito.doReturn ( TYPE_3 . METHOD_4 ( ) ) . when ( cmd ) . METHOD_5 ( ) (  TYPE_4 . METHOD_6 ( cmd . validate ( ) ) )  TYPE_4 . METHOD_6 ( cmd . validate ( ) ) (  TYPE_4 . METHOD_7 ( cmd . getReturnValue ( ) . METHOD_8 ( ) . METHOD_9 ( TYPE_5 . name ( ) ) ) )  TYPE_4 . METHOD_7 ( cmd . getReturnValue ( ) . METHOD_8 ( ) . METHOD_9 ( TYPE_5 . name ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  org.mockito.Mockito.doReturn ( new TYPE_1 . ValidationResult ( VAR_1 ) ) . when ( VAR_2 ) . METHOD_3 ( ) )  org.mockito.Mockito.doReturn ( new TYPE_1 . ValidationResult ( VAR_1 ) ) . when ( VAR_2 ) . METHOD_3 ( ) (  org.mockito.Mockito.doReturn ( TYPE_2 . METHOD_4 ( ) ) . when ( cmd ) . METHOD_5 ( ) )  org.mockito.Mockito.doReturn ( TYPE_2 . METHOD_4 ( ) ) . when ( cmd ) . METHOD_5 ( ) (  TYPE_3 . METHOD_6 ( cmd . validate ( ) ) )  TYPE_3 . METHOD_6 ( cmd . validate ( ) ) (  TYPE_3 . METHOD_7 ( cmd . getReturnValue ( ) . METHOD_8 ( ) . METHOD_9 ( TYPE_4 . name ( ) ) ) )  TYPE_3 . METHOD_7 ( cmd . getReturnValue ( ) . METHOD_8 ( ) . METHOD_9 ( TYPE_4 . name ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( new TYPE_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , VAR_1 ) , VAR_2 , VAR_3 , VAR_4 . Collections < java.lang.String , java.lang.Object > METHOD_4 ( VAR_5 , STRING_1 ) , true , true ) )  TYPE_1 . METHOD_2 ( new TYPE_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , VAR_1 ) , VAR_2 , VAR_3 , VAR_4 . Collections < java.lang.String , java.lang.Object > METHOD_4 ( VAR_5 , STRING_1 ) , true , true ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.Network ) TYPE org.ovirt.engine.core.common.businessentities.Network ( NAME VAR_1 ) NAME VAR_1 ( INIT = dao . METHOD_2 ( VAR_2 ) ) INIT = dao . METHOD_2 ( VAR_2 ) ) VAR VAR (  VAR_1 . METHOD_3 ( STRING_1 ) )  VAR_1 . METHOD_3 ( STRING_1 ) (  dao . METHOD_4 ( VAR_1 ) )  dao . METHOD_4 ( VAR_1 ) ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.Network ) TYPE org.ovirt.engine.core.common.businessentities.Network ( NAME VAR_3 ) NAME VAR_3 ( INIT = dao . METHOD_2 ( VAR_2 ) ) INIT = dao . METHOD_2 ( VAR_2 ) ) VAR VAR (  TYPE_1 . METHOD_5 ( VAR_3 ) )  TYPE_1 . METHOD_5 ( VAR_3 ) (  TYPE_1 . assertEquals ( VAR_1 , VAR_3 ) )  TYPE_1 . assertEquals ( VAR_1 , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<TYPE_1> ) TYPE java.util.ArrayList<TYPE_1> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.ArrayList ( VAR_1 . size ( ) ) ) INIT = new java.util.ArrayList ( VAR_1 . size ( ) ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_4 . METHOD_2 ( VAR_3 . getName ( ) ) )  VAR_4 . METHOD_2 ( VAR_3 . getName ( ) ) (  VAR_4 . setId ( VAR_3 . getId ( ) ) )  VAR_4 . setId ( VAR_3 . getId ( ) ) (  VAR_2 . add ( VAR_4 ) )  VAR_2 . add ( VAR_4 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME vmId ) NAME vmId ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return new TYPE_1 ( new TYPE_2 ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) , vmId ) , VAR_1 , TYPE_3 . getName ( ) , STRING_1 , 0 , new java.util.HashMap < java.lang.String , java.lang.Object > ( ) , true , true , false , STRING_1 , null , null ) ; )  return new TYPE_1 ( new TYPE_2 ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) , vmId ) , VAR_1 , TYPE_3 . getName ( ) , STRING_1 , 0 , new java.util.HashMap < java.lang.String , java.lang.Object > ( ) , true , true , false , STRING_1 , null , null ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_3 ( ) ) INIT = new TYPE_3 ( ) ) VAR VAR (  VAR_1 . METHOD_2 ( VAR_2 ) )  VAR_1 . METHOD_2 ( VAR_2 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . METHOD_3 ( ) ) INIT = VAR_1 . METHOD_3 ( ) ) VAR VAR (  TYPE_4 . assertEquals ( VAR_2 , VAR_3 ) )  TYPE_4 . assertEquals ( VAR_2 , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1.VdcQueryReturnValue ) RETURN TYPE_1.VdcQueryReturnValue ( NAME RunQuery ) NAME RunQuery ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.VdcQueryType ) TYPE TYPE_1.VdcQueryType ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_3 . METHOD_1 ( STRING_1 ) )  VAR_3 . METHOD_1 ( STRING_1 ) (  METHOD_2 ( VAR_1 , VAR_2 ) )  METHOD_2 ( VAR_1 , VAR_2 ) (  VAR_2 . METHOD_3 ( METHOD_4 ( ) ) )  VAR_2 . METHOD_3 ( METHOD_4 ( ) ) (  return METHOD_5 ( ) . RunQuery ( VAR_1 , VAR_2 ) ; )  return METHOD_5 ( ) . RunQuery ( VAR_1 , VAR_2 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.DiskImage ) TYPE TYPE_1.DiskImage ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  VAR_2 . METHOD_3 ( ) )  VAR_2 . METHOD_3 ( ) (  TYPE_2 . METHOD_4 ( VAR_2 . getParameters ( ) . METHOD_5 ( ) . equals ( VAR_1 . METHOD_6 ( ) . get ( 0 ) ) ) )  TYPE_2 . METHOD_4 ( VAR_2 . getParameters ( ) . METHOD_5 ( ) . equals ( VAR_1 . METHOD_6 ( ) . get ( 0 ) ) ) (  TYPE_2 . METHOD_4 ( ( ( VAR_2 . getParameters ( ) . METHOD_7 ( ) ) == ( VAR_1 . METHOD_8 ( ) ) ) ) )  TYPE_2 . METHOD_4 ( ( ( VAR_2 . getParameters ( ) . METHOD_7 ( ) ) == ( VAR_1 . METHOD_8 ( ) ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.Network> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.Network> ( NAME VAR_1 ) NAME VAR_1 ( INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( vds . METHOD_4 ( ) ) ) INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( vds . METHOD_4 ( ) ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.Network ) TYPE org.ovirt.engine.core.common.businessentities.Network ( NAME VAR_2 ) NAME VAR_2 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  TYPE_2 . METHOD_5 ( vds . METHOD_4 ( ) , VAR_2 ) )  TYPE_2 . METHOD_5 ( vds . METHOD_4 ( ) , VAR_2 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME getEntity ) NAME getEntity ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME entity ) NAME entity ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  entity . setId ( VAR_2 [ VAR_1 ] ) )  entity . setId ( VAR_2 [ VAR_1 ] ) (  entity . METHOD_1 ( VAR_3 [ VAR_1 ] ) )  entity . METHOD_1 ( VAR_3 [ VAR_1 ] ) (  entity . METHOD_2 ( VAR_4 [ VAR_1 ] ) )  entity . METHOD_2 ( VAR_4 [ VAR_1 ] ) (  entity . METHOD_3 ( new TYPE_2 < java.lang.String > ( TYPE_3 . METHOD_4 ( TYPE_4 . METHOD_5 ( STRING_1 ) ) ) ) )  entity . METHOD_3 ( new TYPE_2 < java.lang.String > ( TYPE_3 . METHOD_4 ( TYPE_4 . METHOD_5 ( STRING_1 ) ) ) ) (  entity . METHOD_6 ( VAR_5 ) )  entity . METHOD_6 ( VAR_5 ) (  return entity ; )  return entity ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME a ) NAME a ( IN VAR_1 . Linq < TYPE_2 > METHOD_2 ( METHOD_3 ( ) ) ) IN VAR_1 . Linq < TYPE_2 > METHOD_2 ( METHOD_3 ( ) ) ( BLOCK BLOCK ( IF IF ( COND ( a . METHOD_4 ( ) ) == ( VAR_2 ) ) COND ( a . METHOD_4 ( ) ) == ( VAR_2 ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_1.DiskImage ) TYPE TYPE_1.DiskImage ( NAME diskImage ) NAME diskImage ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ) TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_5 ) NAME VAR_5 ( INIT = METHOD_2 ( diskImage ) ) INIT = METHOD_2 ( diskImage ) ) VAR VAR ( IF IF ( COND VAR_5 && ( VAR_1 . METHOD_3 ( VAR_4 ) ) ) COND VAR_5 && ( VAR_1 . METHOD_3 ( VAR_4 ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  return super . METHOD_1 ( VAR_1 , VAR_2 , diskImage , VAR_3 , VAR_4 ) ; )  return super . METHOD_1 ( VAR_1 , VAR_2 , diskImage , VAR_3 , VAR_4 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME type ) NAME type ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME dao ) NAME dao ( INIT = org.mockito.Mockito . METHOD_2 ( VAR_4 class ) ) INIT = org.mockito.Mockito . METHOD_2 ( VAR_4 class ) ) VAR VAR (  org.mockito.Mockito.when ( VAR_5 . METHOD_3 ( ) ) . thenReturn ( dao ) )  org.mockito.Mockito.when ( VAR_5 . METHOD_3 ( ) ) . thenReturn ( dao ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_6 ) NAME VAR_6 ( INIT = METHOD_4 ( VAR_1 , VAR_2 , type , VAR_3 ) ) INIT = METHOD_4 ( VAR_1 , VAR_2 , type , VAR_3 ) ) VAR VAR (  org.mockito.Mockito.when ( dao . METHOD_5 ( VAR_1 , VAR_2 ) ) . thenReturn ( VAR_6 ) )  org.mockito.Mockito.when ( dao . METHOD_5 ( VAR_1 , VAR_2 ) ) . thenReturn ( VAR_6 ) (  return VAR_6 ; )  return VAR_6 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.VdcQueryReturnValue ) TYPE TYPE_1.VdcQueryReturnValue ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) ) INIT = ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) ) VAR VAR ( IF IF ( COND ! ( VAR_1 . getSucceeded ( ) ) ) COND ! ( VAR_1 . getSucceeded ( ) ) ( THEN THEN ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_2 ) ( TYPE_3 . getInstance ( ) . METHOD_1 ( VAR_3 class ) ) ) ) INIT = ( ( TYPE_2 ) ( TYPE_3 . getInstance ( ) . METHOD_1 ( VAR_3 class ) ) ) ) VAR VAR (  VAR_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) )  VAR_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) (  return ; )  return ; ) THEN THEN ) IF IF (  VAR_4 . onSuccess ( model , returnValue ) )  VAR_4 . onSuccess ( model , returnValue ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN org.ovirt.engine.core.common.businessentities.VM ) RETURN org.ovirt.engine.core.common.businessentities.VM ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.DiskImage ) TYPE org.ovirt.engine.core.common.businessentities.DiskImage ( NAME disk ) NAME disk ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( disk . METHOD_2 ( ) ) ) COND ! ( disk . METHOD_2 ( ) ) ( THEN THEN ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VM> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VM> ( NAME vms ) NAME vms ( INIT = TYPE_1 . METHOD_3 ( ) . METHOD_4 ( disk . getId ( ) ) ) INIT = TYPE_1 . METHOD_3 ( ) . METHOD_4 ( disk . getId ( ) ) ) VAR VAR ( IF IF ( COND ! ( vms . isEmpty ( ) ) ) COND ! ( vms . isEmpty ( ) ) ( THEN THEN (  return vms . get ( 0 ) ; )  return vms . get ( 0 ) ; ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( VAR_2 , VAR_3 ) ) INIT = new TYPE_1 ( VAR_2 , VAR_3 ) ) VAR VAR (  VAR_1 . METHOD_2 ( STRING_1 , VAR_4 ) )  VAR_1 . METHOD_2 ( STRING_1 , VAR_4 ) (  VAR_1 . METHOD_2 ( VAR_5 , STRING_2 ) )  VAR_1 . METHOD_2 ( VAR_5 , STRING_2 ) ( IF IF ( COND ( VAR_6 ) != null ) COND ( VAR_6 ) != null ( THEN THEN (  VAR_1 . METHOD_2 ( VAR_7 , VAR_6 ) )  VAR_1 . METHOD_2 ( VAR_7 , VAR_6 ) ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME VAR_1 ) NAME VAR_1 ( INIT = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ) INIT = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ) VAR VAR (  VAR_1 . METHOD_2 ( this ) )  VAR_1 . METHOD_2 ( this ) ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( ( TYPE_1 ) ( model ) ) ) INIT = ( ( TYPE_1 ) ( model ) ) ) VAR VAR (  VAR_3 . METHOD_3 ( ( ( java.util.List < org.ovirt.engine.core.common.businessentities.StoragePool > ) ( result ) ) ) )  VAR_3 . METHOD_3 ( ( ( java.util.List < org.ovirt.engine.core.common.businessentities.StoragePool > ) ( result ) ) ) (  METHOD_4 ( ) )  METHOD_4 ( ) ) BLOCK BLOCK ) METHOD METHOD (  VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object result ) { final TYPE_1 VAR_3 = ( ( TYPE_1 ) ( model ) ) ; VAR_3 . METHOD_3 ( ( ( java.util.List < org.ovirt.engine.core.common.businessentities.StoragePool > ) ( result ) ) ) ; METHOD_4 ( ) ; } } )  VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object result ) { final TYPE_1 VAR_3 = ( ( TYPE_1 ) ( model ) ) ; VAR_3 . METHOD_3 ( ( ( java.util.List < org.ovirt.engine.core.common.businessentities.StoragePool > ) ( result ) ) ) ; METHOD_4 ( ) ; } } (  TYPE_2 . getInstance ( ) . METHOD_5 ( VAR_1 ) )  TYPE_2 . getInstance ( ) . METHOD_5 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_1 . METHOD_2 ( null ) )  VAR_1 . METHOD_2 ( null ) ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME VAR_2 ) NAME VAR_2 ( INIT = new org.ovirt.engine.core.common.businessentities.VDS ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.VDS ( ) ) VAR VAR (  VAR_2 . METHOD_3 ( VAR_3 ) )  VAR_2 . METHOD_3 ( VAR_3 ) (  VAR_1 . METHOD_4 ( VAR_2 ) )  VAR_1 . METHOD_4 ( VAR_2 ) ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_1 . METHOD_5 ( ) ) INIT = VAR_1 . METHOD_5 ( ) ) VAR VAR (  TYPE_2 . assertEquals ( VAR_3 , VAR_4 ) )  TYPE_2 . assertEquals ( VAR_3 , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) RETURN org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME iface ) NAME iface ( INIT = new org.ovirt.engine.core.common.businessentities . VdsNetworkInterface ( ) ) INIT = new org.ovirt.engine.core.common.businessentities . VdsNetworkInterface ( ) ) VAR VAR (  iface . METHOD_2 ( TYPE_1 . instance ( ) . METHOD_3 ( INT_1 ) ) )  iface . METHOD_2 ( TYPE_1 . instance ( ) . METHOD_3 ( INT_1 ) ) (  iface . METHOD_4 ( TYPE_1 . instance ( ) . METHOD_5 ( ) ) )  iface . METHOD_4 ( TYPE_1 . instance ( ) . METHOD_5 ( ) ) (  iface . METHOD_6 ( INT_2 ) )  iface . METHOD_6 ( INT_2 ) (  iface . METHOD_7 ( INT_2 ) )  iface . METHOD_7 ( INT_2 ) (  return iface ; )  return iface ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < ( VAR_1 . length ) ) COND i < ( VAR_1 . length ) ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK (  org.mockito.Mockito.when ( VAR_2 . get ( VAR_1 [ i ] . toString ( ) ) ) . thenReturn ( TYPE_1 . METHOD_2 ( i ) ) )  org.mockito.Mockito.when ( VAR_2 . get ( VAR_1 [ i ] . toString ( ) ) ) . thenReturn ( TYPE_1 . METHOD_2 ( i ) ) ) BLOCK BLOCK ) FOR FOR ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.Network ) TYPE org.ovirt.engine.core.common.businessentities.Network ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_3 ( VAR_2 , null , VAR_1 ) ) INIT = METHOD_3 ( VAR_2 , null , VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_3 != null ) COND VAR_3 != null ( THEN THEN (  return VAR_3 . getId ( ) . toString ( ) ; )  return VAR_3 . getId ( ) . toString ( ) ; ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( - 1 ) * ( java.lang.Boolean . METHOD_1 ( VAR_1 . METHOD_2 ( ) , VAR_2 . METHOD_2 ( ) ) ) ) INIT = ( - 1 ) * ( java.lang.Boolean . METHOD_1 ( VAR_1 . METHOD_2 ( ) , VAR_2 . METHOD_2 ( ) ) ) ) VAR VAR ( IF IF ( COND VAR_3 != 0 ) COND VAR_3 != 0 ( THEN THEN (  return VAR_3 ; )  return VAR_3 ; ) THEN THEN ) IF IF (  return VAR_4 . METHOD_1 ( VAR_1 . getName ( ) , VAR_2 . getName ( ) ) ; )  return VAR_4 . METHOD_1 ( VAR_1 . getName ( ) , VAR_2 . getName ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_1 . METHOD_2 ( STRING_1 ) )  VAR_1 . METHOD_2 ( STRING_1 ) ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_3 ( ) ) INIT = METHOD_3 ( ) ) VAR VAR (  VAR_2 . add ( VAR_1 ) )  VAR_2 . add ( VAR_1 ) (  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( validator ) . METHOD_4 ( domain . getId ( ) ) )  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( validator ) . METHOD_4 ( domain . getId ( ) ) (  TYPE_2 . METHOD_5 ( validator . METHOD_1 ( domain ) ) )  TYPE_2 . METHOD_5 ( validator . METHOD_1 ( domain ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( VAR_1 ) ) INIT = new TYPE_1 ( VAR_1 ) ) VAR VAR (  VAR_2 . METHOD_2 ( new TYPE_2 ( ) ) )  VAR_2 . METHOD_2 ( new TYPE_2 ( ) ) (  TYPE_3 . METHOD_3 ( STRING_1 ) . METHOD_4 ( VAR_2 ) )  TYPE_3 . METHOD_3 ( STRING_1 ) . METHOD_4 ( VAR_2 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4|TYPE_5 ) TYPE TYPE_4|TYPE_5 ( NAME VAR_3 ) NAME VAR_3 ( BLOCK BLOCK (  throw new TYPE_6 ( java.lang.String . METHOD_5 ( STRING_2 , VAR_1 , VAR_3 . METHOD_6 ( ) ) , VAR_3 ) ; )  throw new TYPE_6 ( java.lang.String . METHOD_5 ( STRING_2 , VAR_1 , VAR_3 . METHOD_6 ( ) ) , VAR_3 ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  TYPE_1 . METHOD_3 ( command . validate ( ) ) )  TYPE_1 . METHOD_3 ( command . validate ( ) ) (  org.mockito.Mockito . METHOD_4 ( validator , org.mockito.Mockito . METHOD_5 ( 1 ) ) . METHOD_6 ( TYPE_2 . any ( VAR_1 . Boolean class ) , TYPE_2 . any ( VAR_2 class ) ) )  org.mockito.Mockito . METHOD_4 ( validator , org.mockito.Mockito . METHOD_5 ( 1 ) ) . METHOD_6 ( TYPE_2 . any ( VAR_1 . Boolean class ) , TYPE_2 . any ( VAR_2 class ) ) (  org.mockito.Mockito . METHOD_4 ( validator , org.mockito.Mockito . METHOD_5 ( 1 ) ) . METHOD_7 ( TYPE_2 . any ( VAR_1 . Boolean class ) , TYPE_2 . any ( VAR_3 class ) ) )  org.mockito.Mockito . METHOD_4 ( validator , org.mockito.Mockito . METHOD_5 ( 1 ) ) . METHOD_7 ( TYPE_2 . any ( VAR_1 . Boolean class ) , TYPE_2 . any ( VAR_3 class ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME version ) NAME version ( INIT = METHOD_2 ( ) . toString ( ) ) INIT = METHOD_2 ( ) . toString ( ) ) VAR VAR ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_2 ) ( target ) ) ) INIT = ( ( TYPE_2 ) ( target ) ) ) VAR VAR (  VAR_2 = ( ( java.lang.Integer ) ( returnValue ) ) )  VAR_2 = ( ( java.lang.Integer ) ( returnValue ) ) (  VAR_1 . METHOD_4 ( ) )  VAR_1 . METHOD_4 ( ) ) BLOCK BLOCK ) METHOD METHOD (  TYPE_1 . METHOD_3 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_2 VAR_1 = ( ( TYPE_2 ) ( target ) ) ; VAR_2 = ( ( java.lang.Integer ) ( returnValue ) ) ; VAR_1 . METHOD_4 ( ) ; } } , getModel ( ) . METHOD_5 ( ) ) , version ) )  TYPE_1 . METHOD_3 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_2 VAR_1 = ( ( TYPE_2 ) ( target ) ) ; VAR_2 = ( ( java.lang.Integer ) ( returnValue ) ) ; VAR_1 . METHOD_4 ( ) ; } } , getModel ( ) . METHOD_5 ( ) ) , version ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( getWindow ( ) ) != null ) COND ( getWindow ( ) ) != null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( this , getEntity ( ) ) ) INIT = new TYPE_1 ( this , getEntity ( ) ) ) VAR VAR (  METHOD_2 ( VAR_1 ) )  METHOD_2 ( VAR_1 ) (  VAR_1 . METHOD_3 ( ) . setItems ( TYPE_2 . METHOD_4 ( getEntity ( ) ) ) )  VAR_1 . METHOD_3 ( ) . setItems ( TYPE_2 . METHOD_4 ( getEntity ( ) ) ) (  VAR_1 . METHOD_3 ( ) . setSelectedItem ( getEntity ( ) ) )  VAR_1 . METHOD_3 ( ) . setSelectedItem ( getEntity ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( getModel ( ) . METHOD_2 ( ) ) != null ) COND ( getModel ( ) . METHOD_2 ( ) ) != null ( THEN THEN ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ) TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ( NAME cluster ) NAME cluster ( INIT = getModel ( ) . METHOD_2 ( ) ) INIT = getModel ( ) . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( cluster . METHOD_3 ( ) . METHOD_4 ( VAR_2 ) ) >= 0 ) INIT = ( cluster . METHOD_3 ( ) . METHOD_4 ( VAR_2 ) ) >= 0 ) VAR VAR (  getModel ( ) . METHOD_5 ( ) . METHOD_6 ( VAR_1 ) )  getModel ( ) . METHOD_5 ( ) . METHOD_6 ( VAR_1 ) (  getModel ( ) . METHOD_7 ( ) . METHOD_6 ( VAR_1 ) )  getModel ( ) . METHOD_7 ( ) . METHOD_6 ( VAR_1 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME validate ) NAME validate ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( TYPE_1 . METHOD_1 ( vm . METHOD_2 ( ) ) ) ? TYPE_1 . METHOD_3 ( ) : TYPE_1 . METHOD_4 ( ) ) INIT = ( TYPE_1 . METHOD_1 ( vm . METHOD_2 ( ) ) ) ? TYPE_1 . METHOD_3 ( ) : TYPE_1 . METHOD_4 ( ) ) VAR VAR (  METHOD_5 ( ) . METHOD_6 ( new TYPE_2 [ ] { new TYPE_3 ( ) , new TYPE_4 ( VAR_1 ) , new TYPE_5 ( ) } ) )  METHOD_5 ( ) . METHOD_6 ( new TYPE_2 [ ] { new TYPE_3 ( ) , new TYPE_4 ( VAR_1 ) , new TYPE_5 ( ) } ) (  return METHOD_5 ( ) . METHOD_7 ( ) ; )  return METHOD_5 ( ) . METHOD_7 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1.Disk ) RETURN TYPE_1.Disk ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<TYPE_1.Disk> ) TYPE java.util.List<TYPE_1.Disk> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_1.Disk ) TYPE TYPE_1.Disk ( NAME disk ) NAME disk ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = disk . METHOD_2 ( getVm ( ) . getId ( ) ) ) INIT = disk . METHOD_2 ( getVm ( ) . getId ( ) ) ) VAR VAR ( IF IF ( COND ( VAR_2 != null ) && ( VAR_2 . METHOD_3 ( ) ) ) COND ( VAR_2 != null ) && ( VAR_2 . METHOD_3 ( ) ) ( THEN THEN (  return disk ; )  return disk ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.VM ) TYPE TYPE_1.VM ( NAME vm ) NAME vm ( INIT = new TYPE_1 . VM ( ) ) INIT = new TYPE_1 . VM ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  VAR_1 . METHOD_2 ( VAR_2 ) )  VAR_1 . METHOD_2 ( VAR_2 ) (  VAR_1 . METHOD_3 ( STRING_1 ) )  VAR_1 . METHOD_3 ( STRING_1 ) (  vm . METHOD_4 ( VAR_1 ) )  vm . METHOD_4 ( VAR_1 ) (  TYPE_3 . METHOD_5 ( ) )  TYPE_3 . METHOD_5 ( ) ( VAR VAR ( TYPE TYPE_1.VM ) TYPE TYPE_1.VM ( NAME map ) NAME map ( INIT = TYPE_4 . map ( vm , null ) ) INIT = TYPE_4 . map ( vm , null ) ) VAR VAR (  METHOD_6 ( map . METHOD_7 ( ) . METHOD_8 ( ) ) )  METHOD_6 ( map . METHOD_7 ( ) . METHOD_8 ( ) ) (  assertEquals ( map . METHOD_7 ( ) . METHOD_8 ( ) , STRING_1 ) )  assertEquals ( map . METHOD_7 ( ) . METHOD_8 ( ) , STRING_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2<org.ovirt.engine.core.compat.Guid> ) TYPE TYPE_2<org.ovirt.engine.core.compat.Guid> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 < org.ovirt.engine.core.compat.Guid > ( ) { public TYPE_3 . Disk METHOD_2 ( org.ovirt.engine.core.compat.Guid VAR_2 ) throws TYPE_4 { return VAR_3 . METHOD_2 ( VAR_2 ) ; } } ) INIT = new TYPE_2 < org.ovirt.engine.core.compat.Guid > ( ) { public TYPE_3 . Disk METHOD_2 ( org.ovirt.engine.core.compat.Guid VAR_2 ) throws TYPE_4 { return VAR_3 . METHOD_2 ( VAR_2 ) ; } } ) VAR VAR ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_3.Disk ) RETURN TYPE_3.Disk ( NAME METHOD_2 ) NAME METHOD_2 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return VAR_3 . METHOD_2 ( VAR_2 ) ; )  return VAR_3 . METHOD_2 ( VAR_2 ) ; ) BLOCK BLOCK ) METHOD METHOD ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_5 ( VAR_1 , METHOD_3 ( id ) ) ) INIT = new TYPE_5 ( VAR_1 , METHOD_3 ( id ) ) ) VAR VAR (  return inject ( new TYPE_6 < TYPE_3 . Disk , TYPE_3 . Disk > ( VAR_5 , VAR_2 , VAR_4 ) ) ; )  return inject ( new TYPE_6 < TYPE_3 . Disk , TYPE_3 . Disk > ( VAR_5 , VAR_2 , VAR_4 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ( INIT = new org.ovirt.engine.core.common.businessentities.VM ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.VM ( ) ) VAR VAR (  vm . METHOD_2 ( STRING_1 ) )  vm . METHOD_2 ( STRING_1 ) (  vm . METHOD_3 ( VAR_1 ) )  vm . METHOD_3 ( VAR_1 ) ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.ArrayList < java.lang.String > ( ) ) INIT = new java.util.ArrayList < java.lang.String > ( ) ) VAR VAR (  TYPE_1 . METHOD_4 ( VAR_3 . METHOD_5 ( vm , VAR_2 ) ) )  TYPE_1 . METHOD_4 ( VAR_3 . METHOD_5 ( vm , VAR_2 ) ) (  TYPE_1 . METHOD_4 ( VAR_2 . isEmpty ( ) ) )  TYPE_1 . METHOD_4 ( VAR_2 . isEmpty ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME action ) NAME action ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_2 . METHOD_2 ( TYPE_1 . METHOD_3 ( action ) ) )  VAR_2 . METHOD_2 ( TYPE_1 . METHOD_3 ( action ) ) ( IF IF ( COND ( action . equals ( STRING_1 ) ) || ( action . equals ( STRING_2 ) ) ) COND ( action . equals ( STRING_1 ) ) || ( action . equals ( STRING_2 ) ) ( THEN THEN (  VAR_2 . METHOD_4 ( VAR_1 ) )  VAR_2 . METHOD_4 ( VAR_1 ) ) THEN THEN ( ELSE ELSE (  VAR_3 . METHOD_5 ( STRING_3 ) )  VAR_3 . METHOD_5 ( STRING_3 ) (  throw new TYPE_2 ( ( ( ( ( STRING_4 + action ) + CHAR_1 ) + VAR_1 ) + STRING_5 ) ) ; )  throw new TYPE_2 ( ( ( ( ( STRING_4 + action ) + CHAR_1 ) + VAR_1 ) + STRING_5 ) ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = org.mockito.Mockito . METHOD_2 ( VAR_2 class ) ) INIT = org.mockito.Mockito . METHOD_2 ( VAR_2 class ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME value ) NAME value ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  value . METHOD_3 ( STRING_1 ) )  value . METHOD_3 ( STRING_1 ) (  value . METHOD_4 ( ) . add ( VAR_3 ) )  value . METHOD_4 ( ) . add ( VAR_3 ) (  value . METHOD_5 ( VAR_4 ) )  value . METHOD_5 ( VAR_4 ) (  org.mockito.Mockito.when ( VAR_1 . get ( TYPE_3 . any ( VAR_5 . Guid class ) ) ) . thenReturn ( value ) )  org.mockito.Mockito.when ( VAR_1 . get ( TYPE_3 . any ( VAR_5 . Guid class ) ) ) . thenReturn ( value ) (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ( INIT = ( ( org.ovirt.engine.core.common.businessentities.VM ) ( getSelectedItem ( ) ) ) ) INIT = ( ( org.ovirt.engine.core.common.businessentities.VM ) ( getSelectedItem ( ) ) ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME VAR_1 ) NAME VAR_1 ( INIT = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ) INIT = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ) VAR VAR ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_2 ( ( ( org.ovirt.engine.core.common.businessentities.VM ) ( result ) ) , VAR_4 this ) ) INIT = new TYPE_2 ( ( ( org.ovirt.engine.core.common.businessentities.VM ) ( result ) ) , VAR_4 this ) ) VAR VAR (  METHOD_2 ( VAR_3 ) )  METHOD_2 ( VAR_3 ) (  VAR_3 . METHOD_3 ( ) )  VAR_3 . METHOD_3 ( ) ) BLOCK BLOCK ) METHOD METHOD (  VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object result ) { TYPE_1 VAR_3 = new TYPE_2 ( ( ( org.ovirt.engine.core.common.businessentities.VM ) ( result ) ) , VAR_4 this ) ; METHOD_2 ( VAR_3 ) ; VAR_3 . METHOD_3 ( ) ; } } )  VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object result ) { TYPE_1 VAR_3 = new TYPE_2 ( ( ( org.ovirt.engine.core.common.businessentities.VM ) ( result ) ) , VAR_4 this ) ; METHOD_2 ( VAR_3 ) ; VAR_3 . METHOD_3 ( ) ; } } (  TYPE_3 . METHOD_4 ( VAR_1 , vm . getId ( ) ) )  TYPE_3 . METHOD_4 ( VAR_1 , vm . getId ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  METHOD_3 ( ) )  METHOD_3 ( ) (  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_2 ) . METHOD_4 ( TYPE_1 . any ( VAR_3 . VM class ) ) )  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_2 ) . METHOD_4 ( TYPE_1 . any ( VAR_3 . VM class ) ) (  command . METHOD_5 ( ) )  command . METHOD_5 ( ) (  TYPE_2 . METHOD_6 ( command ) )  TYPE_2 . METHOD_6 ( command ) (  org.mockito.Mockito . METHOD_7 ( VAR_2 , org.mockito.Mockito . METHOD_8 ( 0 ) ) . METHOD_4 ( TYPE_1 . any ( VAR_3 . VM class ) ) )  org.mockito.Mockito . METHOD_7 ( VAR_2 , org.mockito.Mockito . METHOD_8 ( 0 ) ) . METHOD_4 ( TYPE_1 . any ( VAR_3 . VM class ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.network> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.network> ( NAME VAR_1 ) NAME VAR_1 ( INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( getStoragePoolId ( ) . getValue ( ) ) ) INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( getStoragePoolId ( ) . getValue ( ) ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.network ) TYPE org.ovirt.engine.core.common.businessentities.network ( NAME VAR_2 ) NAME VAR_2 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  METHOD_4 ( ) . METHOD_5 ( VAR_2 ) )  METHOD_4 ( ) . METHOD_5 ( VAR_2 ) (  org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_6 ( VAR_2 . getId ( ) ) )  org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_6 ( VAR_2 . getId ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  METHOD_4 ( ) . METHOD_7 ( ) )  METHOD_4 ( ) . METHOD_7 ( ) (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME sender ) NAME sender ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME args ) NAME args ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME model ) NAME model ( INIT = ( ( TYPE_3 ) ( sender ) ) ) INIT = ( ( TYPE_3 ) ( sender ) ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_4 ) ( args ) ) . VAR_3 ) INIT = ( ( TYPE_4 ) ( args ) ) . VAR_3 ) VAR VAR ( IF IF ( COND STRING_1 . equals ( VAR_2 ) ) COND STRING_1 . equals ( VAR_2 ) ( THEN THEN (  METHOD_2 ( model ) )  METHOD_2 ( model ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StoragePool ) TYPE org.ovirt.engine.core.common.businessentities.StoragePool ( NAME VAR_1 ) NAME VAR_1 ( INIT = new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ) VAR VAR (  VAR_1 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) )  VAR_1 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) (  VAR_1 . METHOD_3 ( VAR_2 ) )  VAR_1 . METHOD_3 ( VAR_2 ) (  org.mockito.Mockito.when ( VAR_3 . get ( VAR_1 . getId ( ) ) ) . thenReturn ( VAR_1 ) )  org.mockito.Mockito.when ( VAR_3 . get ( VAR_1 . getId ( ) ) ) . thenReturn ( VAR_1 ) (  command . METHOD_4 ( VAR_1 . getId ( ) ) )  command . METHOD_4 ( VAR_1 . getId ( ) ) (  TYPE_1 . METHOD_5 ( command . METHOD_6 ( ) ) )  TYPE_1 . METHOD_5 ( command . METHOD_6 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . getParameters ( ) . METHOD_4 ( ) . toString ( ) ) )  VAR_1 = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . getParameters ( ) . METHOD_4 ( ) . toString ( ) ) (  TYPE_1 . METHOD_5 ( ) )  TYPE_1 . METHOD_5 ( ) ( VAR VAR ( TYPE TYPE_2<TYPE_3,TYPE_4> ) TYPE TYPE_2<TYPE_3,TYPE_4> ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_6 ( VAR_3 ) ) INIT = METHOD_6 ( VAR_3 ) ) VAR VAR (  VAR_2 . METHOD_7 ( ) . setId ( TYPE_1 . getParameters ( ) . METHOD_4 ( ) ) )  VAR_2 . METHOD_7 ( ) . setId ( TYPE_1 . getParameters ( ) . METHOD_4 ( ) ) (  METHOD_8 ( VAR_2 ) )  METHOD_8 ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( METHOD_2 ( ) ) ) INIT = new TYPE_2 ( METHOD_2 ( ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3<org.ovirt.engine.core.compat.Guid> ) TYPE TYPE_3<org.ovirt.engine.core.compat.Guid> ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_4 . METHOD_3 ( VAR_1 ) ) INIT = TYPE_4 . METHOD_3 ( VAR_1 ) ) VAR VAR (  TYPE_5 . METHOD_4 ( STRING_1 , VAR_2 ) )  TYPE_5 . METHOD_4 ( STRING_1 , VAR_2 ) (  TYPE_5 . METHOD_5 ( STRING_2 , ( ! ( VAR_2 . isEmpty ( ) ) ) ) )  TYPE_5 . METHOD_5 ( STRING_2 , ( ! ( VAR_2 . isEmpty ( ) ) ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ( BLOCK BLOCK (  e . METHOD_6 ( ) )  e . METHOD_6 ( ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME vds ) NAME vds ( INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . get ( TYPE_1 . getParameters ( ) . METHOD_3 ( ) ) ) INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . get ( TYPE_1 . getParameters ( ) . METHOD_3 ( ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( vds ) ) INIT = new TYPE_2 ( vds ) ) VAR VAR (  TYPE_1 . METHOD_4 ( ) . METHOD_5 ( VAR_1 . METHOD_6 ( VAR_2 ) ) )  TYPE_1 . METHOD_4 ( ) . METHOD_5 ( VAR_1 . METHOD_6 ( VAR_2 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) RETURN org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME map ) NAME map ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME entity ) NAME entity ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME template ) NAME template ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME iface ) NAME iface ( INIT = super . map ( entity , template ) ) INIT = super . map ( entity , template ) ) VAR VAR ( IF IF ( COND entity . METHOD_1 ( ) ) COND entity . METHOD_1 ( ) ( THEN THEN ( VAR VAR ( TYPE TYPE_2.Network ) TYPE TYPE_2.Network ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( entity . METHOD_3 ( ) ) ) INIT = METHOD_2 ( entity . METHOD_3 ( ) ) ) VAR VAR (  iface . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) )  iface . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ) THEN THEN ) IF IF (  return iface ; )  return iface ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.Object> ) TYPE java.util.Map<java.lang.String,java.lang.Object> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = new java.lang.Integer ( VAR_1 . METHOD_2 ( ) ) . toString ( ) ) INIT = new java.lang.Integer ( VAR_1 . METHOD_2 ( ) ) . toString ( ) ) VAR VAR ( IF IF ( COND ( ! ( TYPE_2 . isEmpty ( VAR_3 ) ) ) && ( ! ( VAR_3 . equals ( STRING_1 ) ) ) ) COND ( ! ( TYPE_2 . isEmpty ( VAR_3 ) ) ) && ( ! ( VAR_3 . equals ( STRING_1 ) ) ) ( THEN THEN (  VAR_2 . put ( VAR_4 , VAR_3 ) )  VAR_2 . put ( VAR_4 , VAR_3 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_2 . METHOD_2 ( STRING_1 ) )  VAR_2 . METHOD_2 ( STRING_1 ) (  VAR_3 . METHOD_3 ( ) . METHOD_4 ( ) )  VAR_3 . METHOD_3 ( ) . METHOD_4 ( ) ( TRY TRY ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_4 ) ) COND ! ( VAR_4 ) ( THEN THEN (  METHOD_5 ( STRING_2 ) )  METHOD_5 ( STRING_2 ) ) THEN THEN ) IF IF ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_5 ) NAME VAR_5 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  METHOD_6 ( VAR_5 ) )  METHOD_6 ( VAR_5 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ( FINALLY FINALLY (  VAR_3 . METHOD_3 ( ) . METHOD_7 ( ) )  VAR_3 . METHOD_3 ( ) . METHOD_7 ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = null ) INIT = null ) VAR VAR ( IF IF ( COND TYPE_2 . METHOD_2 ( VAR_1 , STRING_1 ) ) COND TYPE_2 . METHOD_2 ( VAR_1 , STRING_1 ) ( THEN THEN (  VAR_2 = new TYPE_3 ( VAR_3 class ) )  VAR_2 = new TYPE_3 ( VAR_3 class ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND TYPE_2 . METHOD_2 ( VAR_1 , STRING_2 ) ) COND TYPE_2 . METHOD_2 ( VAR_1 , STRING_2 ) ( THEN THEN (  VAR_2 = new TYPE_3 ( VAR_4 class ) )  VAR_2 = new TYPE_3 ( VAR_4 class ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND TYPE_2 . METHOD_2 ( VAR_1 , STRING_3 ) ) COND TYPE_2 . METHOD_2 ( VAR_1 , STRING_3 ) ( THEN THEN (  VAR_2 = new TYPE_3 ( VAR_5 class ) )  VAR_2 = new TYPE_3 ( VAR_5 class ) ) THEN THEN ( ELSE ELSE ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ) TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ( NAME cluster ) NAME cluster ( INIT = getModel ( ) . METHOD_2 ( ) ) INIT = getModel ( ) . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.Integer ) TYPE java.lang.Integer ( NAME VAR_1 ) NAME VAR_1 ( INIT = getModel ( ) . METHOD_3 ( ) . getSelectedItem ( ) ) INIT = getModel ( ) . METHOD_3 ( ) . getSelectedItem ( ) ) VAR VAR ( IF IF ( COND ( cluster != null ) && ( VAR_1 != null ) ) COND ( cluster != null ) && ( VAR_1 != null ) ( THEN THEN (  METHOD_1 ( cluster . METHOD_4 ( ) , VAR_1 ) )  METHOD_1 ( cluster . METHOD_4 ( ) , VAR_1 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) . METHOD_3 ( ) ) INIT = METHOD_2 ( ) . METHOD_3 ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( IF IF ( COND VAR_2 . METHOD_4 ( ) ) COND VAR_2 . METHOD_4 ( ) ( THEN THEN (  VAR_3 . put ( VAR_2 . getId ( ) , TYPE_2 . METHOD_5 ( VAR_2 , METHOD_6 ( ) ) ) )  VAR_3 . put ( VAR_2 . getId ( ) , TYPE_2 . METHOD_5 ( VAR_2 , METHOD_6 ( ) ) ) ) THEN THEN ( ELSE ELSE (  VAR_3 . put ( VAR_2 . getId ( ) , new TYPE_2 ( VAR_2 , METHOD_6 ( ) ) ) )  VAR_3 . put ( VAR_2 . getId ( ) , new TYPE_2 ( VAR_2 , METHOD_6 ( ) ) ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  assertEquals ( STRING_1 , VAR_1 ) )  assertEquals ( STRING_1 , VAR_1 ) (  METHOD_2 ( VAR_3 , VAR_4 class , new java.lang.String [ ] { STRING_2 } , new java.lang.Object [ ] { VAR_5 } , METHOD_3 ( ) , VAR_2 ) )  METHOD_2 ( VAR_3 , VAR_4 class , new java.lang.String [ ] { STRING_2 } , new java.lang.Object [ ] { VAR_5 } , METHOD_3 ( ) , VAR_2 ) (  VAR_6 . METHOD_4 ( ) )  VAR_6 . METHOD_4 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  METHOD_3 ( true , null ) )  METHOD_3 ( true , null ) (  cmd . METHOD_1 ( ) )  cmd . METHOD_1 ( ) (  org.mockito.Mockito . METHOD_4 ( VAR_1 , org.mockito.Mockito . METHOD_5 ( 1 ) ) . METHOD_6 ( TYPE_1 . any ( VAR_2 class ) ) )  org.mockito.Mockito . METHOD_4 ( VAR_1 , org.mockito.Mockito . METHOD_5 ( 1 ) ) . METHOD_6 ( TYPE_1 . any ( VAR_2 class ) ) (  TYPE_2 . assertEquals ( VAR_3 , cmd . METHOD_7 ( ) ) )  TYPE_2 . assertEquals ( VAR_3 , cmd . METHOD_7 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) ) ) )  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) ) ) (  METHOD_3 ( ) )  METHOD_3 ( ) (  org.mockito.Mockito . METHOD_4 ( ) . when ( VAR_2 ) . METHOD_5 ( METHOD_6 ( ) , true ) )  org.mockito.Mockito . METHOD_4 ( ) . when ( VAR_2 ) . METHOD_5 ( METHOD_6 ( ) , true ) (  cmd . METHOD_1 ( ) )  cmd . METHOD_1 ( ) (  TYPE_3 . assertEquals ( cmd . METHOD_7 ( ) , VAR_3 ) )  TYPE_3 . assertEquals ( cmd . METHOD_7 ( ) , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME action ) NAME action ) VAR VAR ( VAR VAR ( TYPE TYPE_2.VdcActionType ) TYPE TYPE_2.VdcActionType ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_6 ) NAME VAR_6 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_7 ) NAME VAR_7 ( INIT = getSelectedItem ( ) ) INIT = getSelectedItem ( ) ) VAR VAR ( IF IF ( COND VAR_7 == null ) COND VAR_7 == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  METHOD_2 ( VAR_2 , VAR_3 , VAR_4 , VAR_8 . METHOD_3 ( ) , VAR_9 . METHOD_4 ( action ) , VAR_1 , VAR_7 . METHOD_5 ( ) , VAR_7 . METHOD_6 ( ) , VAR_7 . METHOD_7 ( ) ) )  METHOD_2 ( VAR_2 , VAR_3 , VAR_4 , VAR_8 . METHOD_3 ( ) , VAR_9 . METHOD_4 ( action ) , VAR_1 , VAR_7 . METHOD_5 ( ) , VAR_7 . METHOD_6 ( ) , VAR_7 . METHOD_7 ( ) ) (  METHOD_8 ( VAR_5 ) )  METHOD_8 ( VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( VAR_2 , null ) ) INIT = METHOD_2 ( VAR_2 , null ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VdsNetworkInterface> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VdsNetworkInterface> ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_3 ( null ) ) INIT = METHOD_3 ( null ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME parameters ) NAME parameters ( INIT = METHOD_4 ( VAR_1 , VAR_3 ) ) INIT = METHOD_4 ( VAR_1 , VAR_3 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_5 ( parameters ) ) INIT = METHOD_5 ( parameters ) ) VAR VAR (  METHOD_6 ( VAR_1 , VAR_3 ) )  METHOD_6 ( VAR_1 , VAR_3 ) (  METHOD_7 ( VAR_4 ) )  METHOD_7 ( VAR_4 ) (  METHOD_8 ( VAR_4 , VAR_1 ) )  METHOD_8 ( VAR_4 , VAR_1 ) (  METHOD_9 ( VAR_4 ) )  METHOD_9 ( VAR_4 ) (  METHOD_10 ( VAR_4 ) )  METHOD_10 ( VAR_4 ) (  METHOD_11 ( VAR_4 ) )  METHOD_11 ( VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_1.Disk ) TYPE TYPE_1.Disk ( NAME image ) NAME image ( IN METHOD_2 ( ) ) IN METHOD_2 ( ) ( BLOCK BLOCK (  VAR_1 . put ( image . getId ( ) , ( ( org.ovirt.engine.core.common.businessentities.DiskImage ) ( image ) ) ) )  VAR_1 . put ( image . getId ( ) , ( ( org.ovirt.engine.core.common.businessentities.DiskImage ) ( image ) ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  TYPE_2 . getParameters ( ) . METHOD_3 ( VAR_1 ) )  TYPE_2 . getParameters ( ) . METHOD_3 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ( INIT = ( ( TYPE_1 ) ( target ) ) ) INIT = ( ( TYPE_1 ) ( target ) ) ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME result ) NAME result ( INIT = ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) INIT = ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) VAR VAR (  model . METHOD_1 ( ( result != null ? ( ( java.util.ArrayList < TYPE_3 > ) ( result ) ) : new java.util.ArrayList < TYPE_3 > ( ) ) ) )  model . METHOD_1 ( ( result != null ? ( ( java.util.ArrayList < TYPE_3 > ) ( result ) ) : new java.util.ArrayList < TYPE_3 > ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> ) RETURN java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ) VAR VAR ( VAR VAR ( TYPE TYPE_1<org.ovirt.engine.core.common.businessentities.Disk> ) TYPE TYPE_1<org.ovirt.engine.core.common.businessentities.Disk> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  return TYPE_2 . METHOD_2 ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( vm . getId ( ) ) , true , false ) ; )  return TYPE_2 . METHOD_2 ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( vm . getId ( ) ) , true , false ) ; ) THEN THEN ( ELSE ELSE (  return TYPE_2 . METHOD_2 ( VAR_1 , true , false ) ; )  return TYPE_2 . METHOD_2 ( VAR_1 , true , false ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME tempVar ) NAME tempVar ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  tempVar . METHOD_2 ( INT_1 ) )  tempVar . METHOD_2 ( INT_1 ) (  getName ( ) . METHOD_3 ( new TYPE_2 [ ] { new TYPE_3 ( ) , tempVar } ) )  getName ( ) . METHOD_3 ( new TYPE_2 [ ] { new TYPE_3 ( ) , tempVar } ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_1 . METHOD_2 ( INT_2 ) )  VAR_1 . METHOD_2 ( INT_2 ) (  METHOD_4 ( ) . METHOD_3 ( new TYPE_2 [ ] { new TYPE_3 ( ) , VAR_1 } ) )  METHOD_4 ( ) . METHOD_3 ( new TYPE_2 [ ] { new TYPE_3 ( ) , VAR_1 } ) (  return ( getName ( ) . METHOD_5 ( ) ) && ( METHOD_4 ( ) . METHOD_5 ( ) ) ; )  return ( getName ( ) . METHOD_5 ( ) ) && ( METHOD_4 ( ) . METHOD_5 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( TYPE_1 . any ( VAR_2 . String class ) ) ) . thenReturn ( org.mockito.Mockito . METHOD_3 ( VAR_3 . VDS class ) ) )  org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( TYPE_1 . any ( VAR_2 . String class ) ) ) . thenReturn ( org.mockito.Mockito . METHOD_3 ( VAR_3 . VDS class ) ) (  TYPE_2 . METHOD_4 ( validator . METHOD_5 ( ) , TYPE_3 . METHOD_6 ( VAR_4 ) ) )  TYPE_2 . METHOD_4 ( validator . METHOD_5 ( ) , TYPE_3 . METHOD_6 ( VAR_4 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND source != null ) COND source != null ( THEN THEN (  return ! ( ( java.lang.Boolean ) ( source ) ) ; )  return ! ( ( java.lang.Boolean ) ( source ) ) ; ) THEN THEN ) IF IF (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return ! ( ( java.lang.Boolean ) ( source ) ) ; } return false ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return ! ( ( java.lang.Boolean ) ( source ) ) ; } return false ; } } (  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_1 , new TYPE_1 ( name ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_1 , new TYPE_1 ( name ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.DiskImage ) TYPE TYPE_1.DiskImage ( NAME disk ) NAME disk ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  disk . METHOD_3 ( VAR_1 ) )  disk . METHOD_3 ( VAR_1 ) (  disk . METHOD_4 ( true ) )  disk . METHOD_4 ( true ) (  org.mockito.Mockito.when ( VAR_2 . get ( VAR_3 ) ) . thenReturn ( disk ) )  org.mockito.Mockito.when ( VAR_2 . get ( VAR_3 ) ) . thenReturn ( disk ) (  org.mockito.Mockito.when ( VAR_4 . METHOD_5 ( TYPE_2 . any ( VAR_5 . Integer class ) , TYPE_2 . any ( VAR_6 . Version class ) ) ) . thenReturn ( new TYPE_3 < > ( VAR_7 ) ) )  org.mockito.Mockito.when ( VAR_4 . METHOD_5 ( TYPE_2 . any ( VAR_5 . Integer class ) , TYPE_2 . any ( VAR_6 . Version class ) ) ) . thenReturn ( new TYPE_3 < > ( VAR_7 ) ) (  METHOD_6 ( false ) )  METHOD_6 ( false ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN org.ovirt.engine.core.common.businessentities.VM ) RETURN org.ovirt.engine.core.common.businessentities.VM ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.RunVmCommand<TYPE_2> ) TYPE TYPE_1.RunVmCommand<TYPE_2> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ( INIT = new org.ovirt.engine.core.common.businessentities.VM ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.VM ( ) ) VAR VAR (  vm . METHOD_2 ( VAR_2 ) )  vm . METHOD_2 ( VAR_2 ) (  TYPE_3 . METHOD_3 ( VAR_1 , VAR_3 ) )  TYPE_3 . METHOD_3 ( VAR_1 , VAR_3 ) (  org.mockito.Mockito.when ( VAR_3 . get ( command . getParameters ( ) . METHOD_4 ( ) ) ) . thenReturn ( vm ) )  org.mockito.Mockito.when ( VAR_3 . get ( command . getParameters ( ) . METHOD_4 ( ) ) ) . thenReturn ( vm ) (  TYPE_4 . METHOD_5 ( VAR_4 class ) )  TYPE_4 . METHOD_5 ( VAR_4 class ) (  return vm ; )  return vm ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source ; )  return source ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME parameters ) NAME parameters ( IN VAR_1 . getParameters ( ) . METHOD_3 ( ) ) IN VAR_1 . getParameters ( ) . METHOD_3 ( ) ( BLOCK BLOCK (  METHOD_4 ( parameters ) )  METHOD_4 ( parameters ) (  TYPE_2 . METHOD_5 ( parameters . METHOD_6 ( ) , VAR_2 ) )  TYPE_2 . METHOD_5 ( parameters . METHOD_6 ( ) , VAR_2 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  TYPE_3 . METHOD_7 ( VAR_1 . METHOD_8 ( ) , true ) )  TYPE_3 . METHOD_7 ( VAR_1 . METHOD_8 ( ) , true ) (  VAR_1 . METHOD_9 ( null ) )  VAR_1 . METHOD_9 ( null ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN float ) RETURN float ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE float ) TYPE float ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 <= FLOAT_1 ) COND VAR_1 <= FLOAT_1 ( THEN THEN (  throw new TYPE_1 ( STRING_1 ) ; )  throw new TYPE_1 ( STRING_1 ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE float ) TYPE float ( NAME VAR_3 ) NAME VAR_3 ( INIT = super . METHOD_1 ( ) ) INIT = super . METHOD_1 ( ) ) VAR VAR ( IF IF ( COND ! VAR_2 ) COND ! VAR_2 ( THEN THEN ( WHILE WHILE ( COND VAR_3 == FLOAT_2 ) COND VAR_3 == FLOAT_2 ( BLOCK BLOCK (  VAR_3 = super . METHOD_1 ( ) )  VAR_3 = super . METHOD_1 ( ) ) BLOCK BLOCK ) WHILE WHILE ) THEN THEN ) IF IF (  return VAR_3 * VAR_1 ; )  return VAR_3 * VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> ( NAME result ) NAME result ( INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . getParameters ( ) . getId ( ) ) ) INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . getParameters ( ) . getId ( ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( result ) ) INIT = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( result ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ) TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME domain ) NAME domain ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( IF IF ( COND ( domain . METHOD_4 ( ) ) == ( VAR_2 ) ) COND ( domain . METHOD_4 ( ) ) == ( VAR_2 ) ( THEN THEN (  result . METHOD_5 ( domain ) )  result . METHOD_5 ( domain ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  TYPE_1 . METHOD_6 ( ) . METHOD_7 ( result ) )  TYPE_1 . METHOD_6 ( ) . METHOD_7 ( result ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME length ) NAME length ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < length ) COND i < length ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . METHOD_2 ( TYPE_3 . length ( ) ) ) INIT = VAR_1 . METHOD_2 ( TYPE_3 . length ( ) ) ) VAR VAR ( VAR VAR ( TYPE char ) TYPE char ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_3 . METHOD_3 ( VAR_3 ) ) INIT = TYPE_3 . METHOD_3 ( VAR_3 ) ) VAR VAR (  VAR_2 . append ( VAR_4 ) )  VAR_2 . append ( VAR_4 ) ) BLOCK BLOCK ) FOR FOR (  return VAR_2 . toString ( ) ; )  return VAR_2 . toString ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < TYPE_1 > ( ) ) INIT = new java.util.ArrayList < TYPE_1 > ( ) ) VAR VAR (  VAR_1 . add ( new TYPE_1 ( VAR_2 ) ) )  VAR_1 . add ( new TYPE_1 ( VAR_2 ) ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_2 ( VAR_1 ) ) INIT = METHOD_2 ( VAR_1 ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  TYPE_3 . METHOD_3 ( new TYPE_4 ( VAR_3 , STRING_1 , VAR_1 . get ( 0 ) ) ) )  TYPE_3 . METHOD_3 ( new TYPE_4 ( VAR_3 , STRING_1 , VAR_1 . get ( 0 ) ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_4 ) NAME VAR_4 ( BLOCK BLOCK (  return ; )  return ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  TYPE_6 . METHOD_4 ( STRING_2 ) )  TYPE_6 . METHOD_4 ( STRING_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( ) )  VAR_1 . METHOD_2 ( ) (  org.mockito.Mockito . METHOD_3 ( VAR_2 ) . METHOD_4 ( cluster ) )  org.mockito.Mockito . METHOD_3 ( VAR_2 ) . METHOD_4 ( cluster ) (  org.mockito.Mockito . METHOD_3 ( VAR_3 ) . METHOD_5 ( TYPE_1 . METHOD_6 ( VAR_4 ) , TYPE_1 . any ( VAR_5 class ) ) )  org.mockito.Mockito . METHOD_3 ( VAR_3 ) . METHOD_5 ( TYPE_1 . METHOD_6 ( VAR_4 ) , TYPE_1 . any ( VAR_5 class ) ) (  TYPE_2 . METHOD_7 ( VAR_1 . getReturnValue ( ) . getSucceeded ( ) ) )  TYPE_2 . METHOD_7 ( VAR_1 . getReturnValue ( ) . getSucceeded ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.doReturn ( METHOD_2 ( VAR_1 ) ) . when ( VAR_2 ) . METHOD_3 ( VAR_3 ) )  org.mockito.Mockito.doReturn ( METHOD_2 ( VAR_1 ) ) . when ( VAR_2 ) . METHOD_3 ( VAR_3 ) (  org.mockito.Mockito.doReturn ( STRING_1 ) . when ( METHOD_4 ( ) ) . METHOD_5 ( VAR_4 ) )  org.mockito.Mockito.doReturn ( STRING_1 ) . when ( METHOD_4 ( ) ) . METHOD_5 ( VAR_4 ) (  org.mockito.Mockito.doReturn ( METHOD_6 ( ) ) . when ( VAR_5 ) . METHOD_7 ( TYPE_1 . any ( VAR_6 . Guid class ) ) )  org.mockito.Mockito.doReturn ( METHOD_6 ( ) ) . when ( VAR_5 ) . METHOD_7 ( TYPE_1 . any ( VAR_6 . Guid class ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_1 ( ) )  METHOD_1 ( ) (  getModel ( ) . METHOD_2 ( ) . setEntity ( ( ( java.lang.Boolean ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ) )  getModel ( ) . METHOD_2 ( ) . setEntity ( ( ( java.lang.Boolean ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ) (  METHOD_3 ( ) )  METHOD_3 ( ) ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  METHOD_4 ( VAR_3 ) )  METHOD_4 ( VAR_3 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.doReturn ( METHOD_2 ( VAR_1 ) ) . when ( cmd ) . METHOD_3 ( ) )  org.mockito.Mockito.doReturn ( METHOD_2 ( VAR_1 ) ) . when ( cmd ) . METHOD_3 ( ) (  org.mockito.Mockito.doReturn ( METHOD_4 ( VAR_2 ) ) . when ( VAR_3 ) . METHOD_5 ( VAR_2 ) )  org.mockito.Mockito.doReturn ( METHOD_4 ( VAR_2 ) ) . when ( VAR_3 ) . METHOD_5 ( VAR_2 ) (  org.mockito.Mockito.doReturn ( METHOD_4 ( VAR_4 ) ) . when ( VAR_3 ) . METHOD_5 ( VAR_4 ) )  org.mockito.Mockito.doReturn ( METHOD_4 ( VAR_4 ) ) . when ( VAR_3 ) . METHOD_5 ( VAR_4 ) (  org.mockito.Mockito.doReturn ( VAR_5 ) . when ( cmd ) . METHOD_6 ( ) )  org.mockito.Mockito.doReturn ( VAR_5 ) . when ( cmd ) . METHOD_6 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( STRING_1 ) ) INIT = METHOD_2 ( STRING_1 ) ) VAR VAR (  VAR_1 . METHOD_3 ( false ) )  VAR_1 . METHOD_3 ( false ) (  cmd = org.mockito.Mockito . METHOD_4 ( new TYPE_2 ( new TYPE_3 ( VAR_2 , STRING_2 , STRING_3 , VAR_3 , null , null , TYPE_4 . METHOD_5 ( VAR_1 ) ) , null ) ) )  cmd = org.mockito.Mockito . METHOD_4 ( new TYPE_2 ( new TYPE_3 ( VAR_2 , STRING_2 , STRING_3 , VAR_3 , null , null , TYPE_4 . METHOD_5 ( VAR_1 ) ) , null ) ) (  METHOD_6 ( VAR_4 ) )  METHOD_6 ( VAR_4 ) (  TYPE_5 . METHOD_7 ( cmd . validate ( ) ) )  TYPE_5 . METHOD_7 ( cmd . validate ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME response ) NAME response ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME id ) NAME id ( INIT = response . getId ( ) ) INIT = response . getId ( ) ) VAR VAR ( IF IF ( COND VAR_1 class . METHOD_2 ( id ) ) COND VAR_1 class . METHOD_2 ( id ) ( THEN THEN (  this . VAR_2 . METHOD_3 ( response ) )  this . VAR_2 . METHOD_3 ( response ) ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = this . VAR_2 . METHOD_4 ( response . getId ( ) ) ) INIT = this . VAR_2 . METHOD_4 ( response . getId ( ) ) ) VAR VAR ( IF IF ( COND VAR_3 == null ) COND VAR_3 == null ( THEN THEN (  this . log . error ( STRING_1 , response . getId ( ) ) )  this . log . error ( STRING_1 , response . getId ( ) ) (  return ; )  return ; ) THEN THEN ) IF IF (  VAR_3 . METHOD_5 ( response ) )  VAR_3 . METHOD_5 ( response ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2<?> ) TYPE TYPE_2<?> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_4 ) RETURN TYPE_4 ( NAME METHOD_2 ) NAME METHOD_2 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_4 ) NAME VAR_4 ( INIT = ( ( TYPE_4 ) ( VAR_5 . METHOD_3 ( VAR_6 ) . METHOD_4 ( VAR_1 ) ) ) ) INIT = ( ( TYPE_4 ) ( VAR_5 . METHOD_3 ( VAR_6 ) . METHOD_4 ( VAR_1 ) ) ) ) VAR VAR (  VAR_4 . METHOD_5 ( VAR_7 , VAR_2 ) )  VAR_4 . METHOD_5 ( VAR_7 , VAR_2 ) (  VAR_4 . METHOD_6 ( ) . METHOD_7 ( TYPE_5 . METHOD_8 ( VAR_3 ) . METHOD_9 ( ) ) )  VAR_4 . METHOD_6 ( ) . METHOD_7 ( TYPE_5 . METHOD_8 ( VAR_3 ) . METHOD_9 ( ) ) (  return VAR_4 ; )  return VAR_4 ; ) BLOCK BLOCK ) METHOD METHOD (  return new TYPE_1 ( ) { public TYPE_4 METHOD_2 ( ) { TYPE_4 VAR_4 = ( ( TYPE_4 ) ( VAR_5 . METHOD_3 ( VAR_6 ) . METHOD_4 ( VAR_1 ) ) ) ; VAR_4 . METHOD_5 ( VAR_7 , VAR_2 ) ; VAR_4 . METHOD_6 ( ) . METHOD_7 ( TYPE_5 . METHOD_8 ( VAR_3 ) . METHOD_9 ( ) ) ; return VAR_4 ; } } ; )  return new TYPE_1 ( ) { public TYPE_4 METHOD_2 ( ) { TYPE_4 VAR_4 = ( ( TYPE_4 ) ( VAR_5 . METHOD_3 ( VAR_6 ) . METHOD_4 ( VAR_1 ) ) ) ; VAR_4 . METHOD_5 ( VAR_7 , VAR_2 ) ; VAR_4 . METHOD_6 ( ) . METHOD_7 ( TYPE_5 . METHOD_8 ( VAR_3 ) . METHOD_9 ( ) ) ; return VAR_4 ; } } ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<?extendsTYPE_2> ) TYPE TYPE_1<?extendsTYPE_2> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME sender ) NAME sender ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME args ) NAME args ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3<TYPE_4> ) TYPE TYPE_3<TYPE_4> ( NAME VAR_2 ) NAME VAR_2 ( INIT = model . METHOD_2 ( ) . METHOD_3 ( ) ) INIT = model . METHOD_2 ( ) . METHOD_3 ( ) ) VAR VAR ( IF IF ( COND VAR_2 . METHOD_4 ( ) ) COND VAR_2 . METHOD_4 ( ) ( THEN THEN ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_3 ) NAME VAR_3 ( INIT = model . METHOD_5 ( VAR_2 . METHOD_6 ( ) ) ) INIT = model . METHOD_5 ( VAR_2 . METHOD_6 ( ) ) ) VAR VAR (  METHOD_7 ( TYPE_5 . METHOD_8 ( VAR_3 ) ) )  METHOD_7 ( TYPE_5 . METHOD_8 ( VAR_3 ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME action ) NAME action ) VAR VAR ( VAR VAR ( TYPE TYPE_2.VdcActionType ) TYPE TYPE_2.VdcActionType ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_6 ) NAME VAR_6 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_7 ) NAME VAR_7 ( INIT = getSelectedItem ( ) ) INIT = getSelectedItem ( ) ) VAR VAR ( IF IF ( COND VAR_7 == null ) COND VAR_7 == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  METHOD_2 ( VAR_2 , VAR_3 , VAR_4 , VAR_8 . METHOD_3 ( ) , VAR_9 . METHOD_4 ( action ) , VAR_1 , VAR_7 . METHOD_5 ( ) , VAR_7 . METHOD_6 ( ) , VAR_7 . METHOD_7 ( ) , null ) )  METHOD_2 ( VAR_2 , VAR_3 , VAR_4 , VAR_8 . METHOD_3 ( ) , VAR_9 . METHOD_4 ( action ) , VAR_1 , VAR_7 . METHOD_5 ( ) , VAR_7 . METHOD_6 ( ) , VAR_7 . METHOD_7 ( ) , null ) (  METHOD_8 ( VAR_5 ) )  METHOD_8 ( VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.ArrayList < java.lang.String > ( ) ) INIT = new java.util.ArrayList < java.lang.String > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( IN ( ( TYPE_2 < TYPE_1 > ) ( source ) ) ) IN ( ( TYPE_2 < TYPE_1 > ) ( source ) ) ( BLOCK BLOCK ( IF IF ( COND ( ! VAR_1 ) || ( VAR_3 . METHOD_2 ( ) ) ) COND ( ! VAR_1 ) || ( VAR_3 . METHOD_2 ( ) ) ( THEN THEN (  VAR_2 . add ( VAR_3 . METHOD_3 ( ) ) )  VAR_2 . add ( VAR_3 . METHOD_3 ( ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { java.util.List < java.lang.String > VAR_2 = new java.util.ArrayList < java.lang.String > ( ) ; for ( TYPE_1 VAR_3 : ( ( TYPE_2 < TYPE_1 > ) ( source ) ) ) { if ( ( ! VAR_1 ) || ( VAR_3 . METHOD_2 ( ) ) ) { VAR_2 . add ( VAR_3 . METHOD_3 ( ) ) ; } } return VAR_2 ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { java.util.List < java.lang.String > VAR_2 = new java.util.ArrayList < java.lang.String > ( ) ; for ( TYPE_1 VAR_3 : ( ( TYPE_2 < TYPE_1 > ) ( source ) ) ) { if ( ( ! VAR_1 ) || ( VAR_3 . METHOD_2 ( ) ) ) { VAR_2 . add ( VAR_3 . METHOD_3 ( ) ) ; } } return VAR_2 ; } } ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.Disk ) TYPE TYPE_1.Disk ( NAME model ) NAME model ( INIT = new TYPE_1 . Disk ( ) ) INIT = new TYPE_1 . Disk ( ) ) VAR VAR (  model . METHOD_2 ( VAR_1 [ 0 ] ) )  model . METHOD_2 ( VAR_1 [ 0 ] ) (  METHOD_3 ( METHOD_4 ( ) ) )  METHOD_3 ( METHOD_4 ( ) ) (  VAR_2 . METHOD_5 ( ) )  VAR_2 . METHOD_5 ( ) ( TRY TRY ( BLOCK BLOCK (  VAR_3 . add ( model ) )  VAR_3 . add ( model ) (  METHOD_6 ( STRING_1 ) )  METHOD_6 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( BLOCK BLOCK (  METHOD_7 ( VAR_4 , STRING_2 , STRING_3 , STRING_4 , STRING_5 , STRING_6 ) )  METHOD_7 ( VAR_4 , STRING_2 , STRING_3 , STRING_4 , STRING_5 , STRING_6 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( METHOD_3 ( null ) ) )  VAR_1 . METHOD_2 ( METHOD_3 ( null ) ) (  VAR_2 . add ( VAR_3 ) )  VAR_2 . add ( VAR_3 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_2 ( VAR_5 ) ) INIT = new TYPE_2 ( VAR_5 ) ) VAR VAR (  METHOD_4 ( VAR_4 ) )  METHOD_4 ( VAR_4 ) (  VAR_6 . METHOD_5 ( ) )  VAR_6 . METHOD_5 ( ) ( TRY TRY ( BLOCK BLOCK (  METHOD_6 ( ) )  METHOD_6 ( ) (  METHOD_7 ( STRING_1 ) )  METHOD_7 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_7 ) NAME VAR_7 ( BLOCK BLOCK (  METHOD_8 ( VAR_7 , VAR_8 , VAR_4 ) )  METHOD_8 ( VAR_7 , VAR_8 , VAR_4 ) ) BLOCK BLOCK ) CATCH CATCH ( FINALLY FINALLY (  VAR_2 . METHOD_9 ( ) )  VAR_2 . METHOD_9 ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND VAR_2 == ( VAR_3 ) ) COND VAR_2 == ( VAR_3 ) ( THEN THEN (  return METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; )  return METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; ) THEN THEN ( ELSE ELSE ( IF IF ( COND VAR_2 == ( VAR_4 ) ) COND VAR_2 == ( VAR_4 ) ( THEN THEN (  return METHOD_5 ( VAR_1 . METHOD_4 ( ) ) ; )  return METHOD_5 ( VAR_1 . METHOD_4 ( ) ) ; ) THEN THEN ( ELSE ELSE (  VAR_5 . error ( STRING_1 , VAR_1 . METHOD_6 ( ) , VAR_1 . METHOD_4 ( ) ) )  VAR_5 . error ( STRING_1 , VAR_1 . METHOD_6 ( ) , VAR_1 . METHOD_4 ( ) ) ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF (  return VAR_6 ; )  return VAR_6 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( model ) )  METHOD_2 ( model ) (  assertEquals ( TYPE_2 . METHOD_3 ( VAR_1 , STRING_1 ) , model . getId ( ) ) )  assertEquals ( TYPE_2 . METHOD_3 ( VAR_1 , STRING_1 ) , model . getId ( ) ) (  assertEquals ( TYPE_3 . value ( ) , model . getStatus ( ) . METHOD_4 ( ) ) )  assertEquals ( TYPE_3 . value ( ) , model . getStatus ( ) . METHOD_4 ( ) ) (  METHOD_5 ( model ) )  METHOD_5 ( model ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.VM ) TYPE TYPE_1.VM ( NAME vm ) NAME vm ( INIT = new TYPE_1 . VM ( ) ) INIT = new TYPE_1 . VM ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  VAR_1 . METHOD_2 ( VAR_2 ) )  VAR_1 . METHOD_2 ( VAR_2 ) (  VAR_1 . METHOD_3 ( STRING_1 ) )  VAR_1 . METHOD_3 ( STRING_1 ) (  vm . METHOD_4 ( VAR_1 ) )  vm . METHOD_4 ( VAR_1 ) ( VAR VAR ( TYPE TYPE_1.VM ) TYPE TYPE_1.VM ( NAME map ) NAME map ( INIT = TYPE_3 . map ( vm , ( ( TYPE_1 . VM ) ( null ) ) ) ) INIT = TYPE_3 . map ( vm , ( ( TYPE_1 . VM ) ( null ) ) ) ) VAR VAR (  METHOD_5 ( map . METHOD_6 ( ) . METHOD_7 ( ) ) )  METHOD_5 ( map . METHOD_6 ( ) . METHOD_7 ( ) ) (  assertEquals ( map . METHOD_6 ( ) . METHOD_7 ( ) , STRING_1 ) )  assertEquals ( map . METHOD_6 ( ) . METHOD_7 ( ) , STRING_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME METHOD_2 ) NAME METHOD_2 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source != null ? ( ( java.lang.Integer ) ( source ) ) . METHOD_3 ( ) : 0 ; )  return source != null ? ( ( java.lang.Integer ) ( source ) ) . METHOD_3 ( ) : 0 ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object METHOD_2 ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . METHOD_3 ( ) : 0 ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object METHOD_2 ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . METHOD_3 ( ) : 0 ; } } (  METHOD_4 ( new TYPE_1 ( VAR_1 , METHOD_5 ( ) ) , aQuery ) )  METHOD_4 ( new TYPE_1 ( VAR_1 , METHOD_5 ( ) ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME tempVar ) NAME tempVar ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  tempVar . METHOD_2 ( INT_1 ) )  tempVar . METHOD_2 ( INT_1 ) (  getName ( ) . METHOD_3 ( new TYPE_2 [ ] { new TYPE_3 ( ) , tempVar , new TYPE_4 ( ) } ) )  getName ( ) . METHOD_3 ( new TYPE_2 [ ] { new TYPE_3 ( ) , tempVar , new TYPE_4 ( ) } ) (  return getName ( ) . METHOD_4 ( ) ; )  return getName ( ) . METHOD_4 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.AuditLogType ) TYPE TYPE_1.AuditLogType ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . name ( ) ) INIT = VAR_1 . name ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  return VAR_3 . getString ( VAR_2 ) ; )  return VAR_3 . getString ( VAR_2 ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_4 . error ( STRING_1 , VAR_2 , TYPE_2 . METHOD_2 ( ) ) )  VAR_4 . error ( STRING_1 , VAR_2 , TYPE_2 . METHOD_2 ( ) ) (  return null ; )  return null ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.Network ) TYPE org.ovirt.engine.core.common.businessentities.Network ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( STRING_1 ) ) INIT = METHOD_2 ( STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME nic ) NAME nic ( INIT = METHOD_3 ( STRING_2 , VAR_1 ) ) INIT = METHOD_3 ( STRING_2 , VAR_1 ) ) VAR VAR (  nic . METHOD_4 ( TYPE_1 . instance ( ) . METHOD_5 ( ) ) )  nic . METHOD_4 ( TYPE_1 . instance ( ) . METHOD_5 ( ) ) (  METHOD_6 ( VAR_1 ) )  METHOD_6 ( VAR_1 ) (  METHOD_7 ( nic ) )  METHOD_7 ( nic ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_8 ( METHOD_9 ( nic ) ) ) INIT = METHOD_8 ( METHOD_9 ( nic ) ) ) VAR VAR (  METHOD_10 ( VAR_2 ) )  METHOD_10 ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) ) == null ) COND ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) ) == null ( THEN THEN ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_3 ( VAR_2 ) ) INIT = METHOD_3 ( VAR_2 ) ) VAR VAR ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN (  TYPE_1 . getVm ( ) . METHOD_4 ( VAR_1 ) )  TYPE_1 . getVm ( ) . METHOD_4 ( VAR_1 ) ) THEN THEN ( ELSE ELSE (  TYPE_1 . getVm ( ) . METHOD_4 ( METHOD_3 ( VAR_3 ) ) )  TYPE_1 . getVm ( ) . METHOD_4 ( METHOD_3 ( VAR_3 ) ) ) ELSE ELSE ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( VAR_1 . getId ( ) ) != null ) && ( ! ( VAR_1 . getId ( ) . equals ( STRING_1 ) ) ) ) COND ( ( VAR_1 . getId ( ) ) != null ) && ( ! ( VAR_1 . getId ( ) . equals ( STRING_1 ) ) ) ( THEN THEN (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_2 ( VAR_3 , new TYPE_2 ( VAR_1 , VAR_2 ) , null , this ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_2 ( VAR_3 , new TYPE_2 ( VAR_1 , VAR_2 ) , null , this ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME url ) NAME url ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME params ) NAME params ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_2 . METHOD_2 ( ( VAR_1 + ( VAR_3 ) ) ) )  VAR_2 . METHOD_2 ( ( VAR_1 + ( VAR_3 ) ) ) (  VAR_2 . METHOD_3 ( TYPE_3 . METHOD_4 ( ( url + ( VAR_4 ) ) , params ) ) )  VAR_2 . METHOD_3 ( TYPE_3 . METHOD_4 ( ( url + ( VAR_4 ) ) , params ) ) (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_2 ( VAR_1 ) ) INIT = METHOD_2 ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = ( VAR_2 == null ) ? null : METHOD_2 ( VAR_2 ) ) INIT = ( VAR_2 == null ) ? null : METHOD_2 ( VAR_2 ) ) VAR VAR (  org.mockito.Mockito.when ( VAR_5 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_6 ) , TYPE_3 . any ( VAR_7 class ) ) ) . thenReturn ( VAR_3 ) . thenReturn ( VAR_4 ) )  org.mockito.Mockito.when ( VAR_5 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_6 ) , TYPE_3 . any ( VAR_7 class ) ) ) . thenReturn ( VAR_3 ) . thenReturn ( VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ( STRING_1 + ( VAR_2 ) ) , VAR_3 . VDS ) ) INIT = new TYPE_1 ( ( STRING_1 + ( VAR_2 ) ) , VAR_3 . VDS ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2<TYPE_1> ) TYPE TYPE_2<TYPE_1> ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_2 ( VAR_1 ) ) INIT = METHOD_2 ( VAR_1 ) ) VAR VAR (  VAR_4 . METHOD_3 ( ) )  VAR_4 . METHOD_3 ( ) (  TYPE_3 . METHOD_4 ( ( ( VAR_5 ) == ( VAR_4 . METHOD_5 ( ) . getReturnValue ( ) ) ) ) )  TYPE_3 . METHOD_4 ( ( ( VAR_5 ) == ( VAR_4 . METHOD_5 ( ) . getReturnValue ( ) ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) (  dao = VAR_1 . METHOD_2 ( ) )  dao = VAR_1 . METHOD_2 ( ) (  VAR_2 = new TYPE_1 ( ) )  VAR_2 = new TYPE_1 ( ) (  VAR_2 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) )  VAR_2 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) (  VAR_2 . METHOD_4 ( STRING_1 ) )  VAR_2 . METHOD_4 ( STRING_1 ) (  VAR_2 . METHOD_5 ( STRING_2 ) )  VAR_2 . METHOD_5 ( STRING_2 ) (  VAR_2 . METHOD_6 ( STRING_3 ) )  VAR_2 . METHOD_6 ( STRING_3 ) (  VAR_2 . METHOD_7 ( true ) )  VAR_2 . METHOD_7 ( true ) (  VAR_2 . METHOD_8 ( STRING_4 ) )  VAR_2 . METHOD_8 ( STRING_4 ) (  VAR_3 = dao . get ( new org.ovirt.engine.core.compat.Guid ( STRING_5 ) ) )  VAR_3 = dao . get ( new org.ovirt.engine.core.compat.Guid ( STRING_5 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Integer ) TYPE java.lang.Integer ( NAME value ) NAME value ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME context ) NAME context ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 < java.util.List < java.lang.String > > METHOD_2 ( VAR_3 ) ) INIT = VAR_2 < java.util.List < java.lang.String > > METHOD_2 ( VAR_3 ) ) VAR VAR ( IF IF ( COND ( value == null ) || ( VAR_1 == null ) ) COND ( value == null ) || ( VAR_1 == null ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  return VAR_1 . METHOD_3 ( value . toString ( ) ) ; )  return VAR_1 . METHOD_3 ( value . toString ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public final ) MODIFIER public final ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME value ) NAME value ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_2 ( VAR_1 ) ) INIT = METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_3 == null ) COND VAR_3 == null ( THEN THEN (  VAR_3 = new TYPE_1 ( ) )  VAR_3 = new TYPE_1 ( ) (  VAR_4 . put ( VAR_5 , VAR_1 ) )  VAR_4 . put ( VAR_5 , VAR_1 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_6 ) NAME VAR_6 ( INIT = VAR_7 . METHOD_3 ( VAR_1 , VAR_3 ) ) INIT = VAR_7 . METHOD_3 ( VAR_1 , VAR_3 ) ) VAR VAR ( IF IF ( COND VAR_6 != null ) COND VAR_6 != null ( THEN THEN (  VAR_3 = VAR_6 )  VAR_3 = VAR_6 ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  VAR_4 . put ( VAR_2 , value ) )  VAR_4 . put ( VAR_2 , value ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME object ) NAME object ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( new java.util.ArrayList < org.ovirt.engine.ui.uicommonweb.models.EntityModel > ( ) ) )  VAR_1 . METHOD_2 ( new java.util.ArrayList < org.ovirt.engine.ui.uicommonweb.models.EntityModel > ( ) ) (  VAR_1 . METHOD_1 ( object . METHOD_3 ( ) ) )  VAR_1 . METHOD_1 ( object . METHOD_3 ( ) ) (  VAR_2 . METHOD_1 ( object ) )  VAR_2 . METHOD_1 ( object ) (  METHOD_4 ( object ) )  METHOD_4 ( object ) (  METHOD_5 ( object ) )  METHOD_5 ( object ) (  METHOD_6 ( object ) )  METHOD_6 ( object ) (  METHOD_7 ( object ) )  METHOD_7 ( object ) (  VAR_3 . METHOD_8 ( false ) )  VAR_3 . METHOD_8 ( false ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME id ) NAME id ( INIT = null ) INIT = null ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  id = new TYPE_2 ( name . METHOD_2 ( STRING_1 ) ) )  id = new TYPE_2 ( name . METHOD_2 ( STRING_1 ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK (  return null ; )  return null ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  return new TYPE_1 ( this , id , name ) ; )  return new TYPE_1 ( this , id , name ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<TYPE_1> ) TYPE java.util.ArrayList<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_2.DiskImage ) TYPE TYPE_2.DiskImage ( NAME diskImage ) NAME diskImage ( IN vm . METHOD_2 ( ) ) IN vm . METHOD_2 ( ) ( BLOCK BLOCK (  VAR_1 . add ( TYPE_3 . METHOD_3 ( diskImage ) ) )  VAR_1 . add ( TYPE_3 . METHOD_3 ( diskImage ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  getModel ( ) . METHOD_4 ( VAR_1 ) )  getModel ( ) . METHOD_4 ( VAR_1 ) (  getModel ( ) . METHOD_5 ( ) . METHOD_6 ( true ) )  getModel ( ) . METHOD_5 ( ) . METHOD_6 ( true ) (  getModel ( ) . METHOD_5 ( ) . METHOD_7 ( true ) )  getModel ( ) . METHOD_5 ( ) . METHOD_7 ( true ) (  METHOD_8 ( ) )  METHOD_8 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.DiskImage ) TYPE TYPE_1.DiskImage ( NAME disk ) NAME disk ( INIT = new TYPE_1 . DiskImage ( ) ) INIT = new TYPE_1 . DiskImage ( ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_3 ) NAME VAR_3 ( INIT = org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) INIT = org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) VAR VAR (  disk . setId ( VAR_3 ) )  disk . setId ( VAR_3 ) (  disk . METHOD_3 ( VAR_1 ) )  disk . METHOD_3 ( VAR_1 ) (  VAR_4 . add ( disk ) )  VAR_4 . add ( disk ) (  VAR_5 . add ( METHOD_4 ( VAR_3 , VAR_2 ) ) )  VAR_5 . add ( METHOD_4 ( VAR_3 , VAR_2 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.String> ) TYPE java.util.Map<java.lang.String,java.lang.String> ( NAME VAR_4 ) NAME VAR_4 ( INIT = new java.util.HashMap < > ( ) ) INIT = new java.util.HashMap < > ( ) ) VAR VAR (  VAR_4 . put ( STRING_1 , VAR_2 ) )  VAR_4 . put ( STRING_1 , VAR_2 ) (  VAR_4 . put ( STRING_2 , VAR_3 ) )  VAR_4 . put ( STRING_2 , VAR_3 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME tempVar ) NAME tempVar ( INIT = new TYPE_2 ( TYPE_3 . METHOD_2 ( ) , VAR_1 , VAR_4 ) ) INIT = new TYPE_2 ( TYPE_3 . METHOD_2 ( ) , VAR_1 , VAR_4 ) ) VAR VAR (  tempVar . METHOD_3 ( true ) )  tempVar . METHOD_3 ( true ) (  TYPE_4 . getInstance ( ) . METHOD_4 ( VAR_5 , tempVar , TYPE_5 . METHOD_5 ( ) ) )  TYPE_4 . getInstance ( ) . METHOD_4 ( VAR_5 , tempVar , TYPE_5 . METHOD_5 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = dao . get ( new org.ovirt.engine.core.compat.Guid ( STRING_1 ) ) ) INIT = dao . get ( new org.ovirt.engine.core.compat.Guid ( STRING_1 ) ) ) VAR VAR (  VAR_2 . METHOD_2 ( VAR_3 ) )  VAR_2 . METHOD_2 ( VAR_3 ) (  VAR_1 . METHOD_3 ( STRING_2 ) )  VAR_1 . METHOD_3 ( STRING_2 ) (  VAR_1 . METHOD_4 ( STRING_3 ) )  VAR_1 . METHOD_4 ( STRING_3 ) (  dao . METHOD_5 ( TYPE_2 . METHOD_6 ( new TYPE_1 [ ] { VAR_2 , VAR_1 } ) ) )  dao . METHOD_5 ( TYPE_2 . METHOD_6 ( new TYPE_1 [ ] { VAR_2 , VAR_1 } ) ) (  TYPE_3 . assertEquals ( VAR_2 , dao . get ( VAR_2 . getId ( ) ) ) )  TYPE_3 . assertEquals ( VAR_2 , dao . get ( VAR_2 . getId ( ) ) ) (  TYPE_3 . assertEquals ( VAR_1 , dao . get ( VAR_1 . getId ( ) ) ) )  TYPE_3 . assertEquals ( VAR_1 , dao . get ( VAR_1 . getId ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK (  VAR_3 . put ( VAR_4 , VAR_4 ) )  VAR_3 . put ( VAR_4 , VAR_4 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  METHOD_2 ( ) )  METHOD_2 ( ) ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK (  METHOD_3 ( ) . put ( VAR_4 , VAR_5 ) )  METHOD_3 ( ) . put ( VAR_4 , VAR_5 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK (  VAR_6 . put ( VAR_4 , VAR_7 ) )  VAR_6 . put ( VAR_4 , VAR_7 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  METHOD_4 ( ) )  METHOD_4 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  cluster = ( ( org.ovirt.engine.core.common.businessentities.VDSGroup ) ( returnValue ) ) )  cluster = ( ( org.ovirt.engine.core.common.businessentities.VDSGroup ) ( returnValue ) ) (  VAR_2 = ( ( java.lang.Boolean ) ( TYPE_1 . METHOD_2 ( VAR_3 , cluster . METHOD_3 ( ) . getValue ( ) ) ) ) )  VAR_2 = ( ( java.lang.Boolean ) ( TYPE_1 . METHOD_2 ( VAR_3 , cluster . METHOD_3 ( ) . getValue ( ) ) ) ) (  METHOD_4 ( ) )  METHOD_4 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( source != null ) && ( ! ( ( ( java.util.List < ? > ) ( source ) ) . isEmpty ( ) ) ) ) COND ( source != null ) && ( ! ( ( ( java.util.List < ? > ) ( source ) ) . isEmpty ( ) ) ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( ( source != null ) && ( ! ( ( ( java.util.List < ? > ) ( source ) ) . isEmpty ( ) ) ) ) { return true ; } return false ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( ( source != null ) && ( ! ( ( ( java.util.List < ? > ) ( source ) ) . isEmpty ( ) ) ) ) { return true ; } return false ; } } (  TYPE_1 . METHOD_2 ( aQuery , VAR_1 , 1 ) )  TYPE_1 . METHOD_2 ( aQuery , VAR_1 , 1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND source == null ) COND source == null ( THEN THEN (  return new java.util.ArrayList < TYPE_1 > ( ) ; )  return new java.util.ArrayList < TYPE_1 > ( ) ; ) THEN THEN ) IF IF (  return source ; )  return source ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < TYPE_1 > ( ) ; } return source ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < TYPE_1 > ( ) ; } return source ; } } (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( METHOD_2 ( ) ) == null ) COND ( METHOD_2 ( ) ) == null ( THEN THEN (  return METHOD_3 ( VAR_1 ) ; )  return METHOD_3 ( VAR_1 ) ; ) THEN THEN ) IF IF ( IF IF ( COND ( ( METHOD_2 ( ) . METHOD_4 ( ) ) == null ) || ( ! ( METHOD_2 ( ) . METHOD_4 ( ) . METHOD_5 ( TYPE_1 . getParameters ( ) . METHOD_6 ( ) ) ) ) ) COND ( ( METHOD_2 ( ) . METHOD_4 ( ) ) == null ) || ( ! ( METHOD_2 ( ) . METHOD_4 ( ) . METHOD_5 ( TYPE_1 . getParameters ( ) . METHOD_6 ( ) ) ) ) ( THEN THEN (  return METHOD_3 ( VAR_2 ) ; )  return METHOD_3 ( VAR_2 ) ; ) THEN THEN ) IF IF (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . add ( VAR_2 , vm . METHOD_2 ( ) . toString ( ) ) )  VAR_1 . add ( VAR_2 , vm . METHOD_2 ( ) . toString ( ) ) ( IF IF ( COND ( vm . METHOD_2 ( ) ) != ( vm . METHOD_3 ( ) ) ) COND ( vm . METHOD_2 ( ) ) != ( vm . METHOD_3 ( ) ) ( THEN THEN (  METHOD_4 ( vm . METHOD_2 ( ) ) )  METHOD_4 ( vm . METHOD_2 ( ) ) ) THEN THEN ( ELSE ELSE (  METHOD_5 ( vm . getId ( ) ) )  METHOD_5 ( vm . getId ( ) ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ) RETURN org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ) INIT = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK ( IF IF ( COND TYPE_2 . METHOD_6 ( VAR_1 . getName ( ) , VAR_3 . getName ( ) ) ) COND TYPE_2 . METHOD_6 ( VAR_1 . getName ( ) , VAR_3 . getName ( ) ) ( THEN THEN (  return VAR_3 ; )  return VAR_3 ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  throw new TYPE_3 ( VAR_4 ) ; )  throw new TYPE_3 ( VAR_4 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME command ) NAME command ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME dao ) NAME dao ( INIT = org.mockito.Mockito . METHOD_2 ( VAR_1 class ) ) INIT = org.mockito.Mockito . METHOD_2 ( VAR_1 class ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StoragePool ) TYPE org.ovirt.engine.core.common.businessentities.StoragePool ( NAME pool ) NAME pool ( INIT = new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ) VAR VAR (  pool . setId ( command . getParameters ( ) . getStoragePoolId ( ) ) )  pool . setId ( command . getParameters ( ) . getStoragePoolId ( ) ) (  org.mockito.Mockito.when ( dao . get ( TYPE_3 . any ( VAR_2 . Guid class ) ) ) . thenReturn ( pool ) )  org.mockito.Mockito.when ( dao . get ( TYPE_3 . any ( VAR_2 . Guid class ) ) ) . thenReturn ( pool ) (  org.mockito.Mockito.doReturn ( dao ) . when ( command ) . METHOD_3 ( ) )  org.mockito.Mockito.doReturn ( dao ) . when ( command ) . METHOD_3 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2<TYPE_3> ) TYPE TYPE_2<TYPE_3> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_4 < > ( ) ) INIT = new TYPE_4 < > ( ) ) VAR VAR (  VAR_2 . add ( VAR_3 ) )  VAR_2 . add ( VAR_3 ) ( FOR-EACH FOR-EACH ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_4 ) NAME VAR_4 ( IN VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) IN VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ( BLOCK BLOCK (  VAR_2 . add ( VAR_4 . METHOD_4 ( ) ) )  VAR_2 . add ( VAR_4 . METHOD_4 ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  VAR_1 . METHOD_4 ( ) . setItems ( VAR_2 ) )  VAR_1 . METHOD_4 ( ) . setItems ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_2 ( ) )  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_2 ( ) (  org.mockito.Mockito . METHOD_3 ( ) . when ( command ) . METHOD_4 ( ) )  org.mockito.Mockito . METHOD_3 ( ) . when ( command ) . METHOD_4 ( ) (  org.mockito.Mockito . METHOD_3 ( ) . when ( command ) . METHOD_5 ( ) )  org.mockito.Mockito . METHOD_3 ( ) . when ( command ) . METHOD_5 ( ) (  org.mockito.Mockito . METHOD_3 ( ) . when ( command ) . METHOD_6 ( TYPE_1 . METHOD_7 ( VAR_2 class ) ) )  org.mockito.Mockito . METHOD_3 ( ) . when ( command ) . METHOD_6 ( TYPE_1 . METHOD_7 ( VAR_2 class ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  command = org.mockito.Mockito . METHOD_2 ( new TYPE_1 < TYPE_2 > ( new TYPE_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , false ) ) ) )  command = org.mockito.Mockito . METHOD_2 ( new TYPE_1 < TYPE_2 > ( new TYPE_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , false ) ) ) (  METHOD_4 ( ) )  METHOD_4 ( ) (  METHOD_5 ( VAR_1 ) )  METHOD_5 ( VAR_1 ) (  METHOD_6 ( ) )  METHOD_6 ( ) (  METHOD_7 ( VAR_2 . Collections < java.lang.String > METHOD_8 ( ) ) )  METHOD_7 ( VAR_2 . Collections < java.lang.String > METHOD_8 ( ) ) (  METHOD_9 ( true ) )  METHOD_9 ( true ) (  METHOD_10 ( true ) )  METHOD_10 ( true ) (  TYPE_3 . METHOD_11 ( command , VAR_3 ) )  TYPE_3 . METHOD_11 ( command , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_2 . METHOD_2 ( VAR_1 ) )  VAR_2 . METHOD_2 ( VAR_1 ) (  VAR_2 . METHOD_3 ( METHOD_4 ( ) ) )  VAR_2 . METHOD_3 ( METHOD_4 ( ) ) (  VAR_2 . METHOD_5 ( TYPE_3 . METHOD_6 ( ) ) )  VAR_2 . METHOD_5 ( TYPE_3 . METHOD_6 ( ) ) (  VAR_2 . METHOD_7 ( TYPE_3 . getParameters ( ) ) )  VAR_2 . METHOD_7 ( TYPE_3 . getParameters ( ) ) (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME getStoragePoolId ) NAME getStoragePoolId ( BLOCK BLOCK ( IF IF ( COND ( super . getStoragePoolId ( ) ) == null ) COND ( super . getStoragePoolId ( ) ) == null ( THEN THEN ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ( INIT = TYPE_2 . getVm ( ) ) INIT = TYPE_2 . getVm ( ) ) VAR VAR ( IF IF ( COND vm != null ) COND vm != null ( THEN THEN (  METHOD_1 ( vm . METHOD_2 ( ) ) )  METHOD_1 ( vm . METHOD_2 ( ) ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return super . getStoragePoolId ( ) ; )  return super . getStoragePoolId ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  return ( ( TYPE_1 . getVm ( ) . METHOD_2 ( ) . isEmpty ( ) ) == false ) && ( ( TYPE_1 . getVm ( ) . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . getVm ( ) . METHOD_4 ( ) ) ) == false ) ; )  return ( ( TYPE_1 . getVm ( ) . METHOD_2 ( ) . isEmpty ( ) ) == false ) && ( ( TYPE_1 . getVm ( ) . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . getVm ( ) . METHOD_4 ( ) ) ) == false ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . get ( VAR_2 ) ) INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . get ( VAR_2 ) ) VAR VAR ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN (  VAR_1 . METHOD_4 ( null ) )  VAR_1 . METHOD_4 ( null ) (  org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . METHOD_5 ( VAR_1 ) )  org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . METHOD_5 ( VAR_1 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( VAR_2 ) )  VAR_1 . METHOD_2 ( VAR_2 ) (  dao . METHOD_3 ( VAR_1 ) )  dao . METHOD_3 ( VAR_1 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ( INIT = dao . get ( new TYPE_2 ( VAR_1 . METHOD_4 ( ) , new org.ovirt.engine.core.compat.Guid ( VAR_1 . METHOD_5 ( ) . toString ( ) ) ) ) ) INIT = dao . get ( new TYPE_2 ( VAR_1 . METHOD_4 ( ) , new org.ovirt.engine.core.compat.Guid ( VAR_1 . METHOD_5 ( ) . toString ( ) ) ) ) ) VAR VAR (  TYPE_3 . METHOD_6 ( result ) )  TYPE_3 . METHOD_6 ( result ) (  TYPE_3 . assertEquals ( VAR_1 , result ) )  TYPE_3 . assertEquals ( VAR_1 , result ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Version ) TYPE org.ovirt.engine.core.compat.Version ( NAME version ) NAME version ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source != null ? ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; )  return source != null ? ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; } } (  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_1 , new TYPE_2 ( version ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_1 , new TYPE_2 ( version ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_2.VdcQueryReturnValue> ) TYPE java.util.List<TYPE_2.VdcQueryReturnValue> ( NAME VAR_1 ) NAME VAR_1 ( INIT = result . METHOD_2 ( ) ) INIT = result . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDSGroup> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDSGroup> ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( VAR_1 . get ( 0 ) . getReturnValue ( ) ) ) ) INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( VAR_1 . get ( 0 ) . getReturnValue ( ) ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VmTemplate> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VmTemplate> ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmTemplate > ) ( VAR_1 . get ( 1 ) . getReturnValue ( ) ) ) ) INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmTemplate > ) ( VAR_1 . get ( 1 ) . getReturnValue ( ) ) ) ) VAR VAR (  METHOD_3 ( VAR_2 , true , false ) )  METHOD_3 ( VAR_2 , true , false ) (  METHOD_4 ( VAR_3 ) )  METHOD_4 ( VAR_3 ) (  METHOD_5 ( ) )  METHOD_5 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_2 ( VAR_2 . METHOD_3 ( ) ) . addValue ( STRING_1 , VAR_1 ) . addValue ( STRING_2 , VAR_2 . METHOD_4 ( ) ) . addValue ( STRING_3 , null ) . addValue ( STRING_4 , null ) . addValue ( STRING_5 , VAR_2 . METHOD_5 ( ) ) . addValue ( STRING_6 , VAR_2 . METHOD_6 ( ) ) ) INIT = METHOD_2 ( VAR_2 . METHOD_3 ( ) ) . addValue ( STRING_1 , VAR_1 ) . addValue ( STRING_2 , VAR_2 . METHOD_4 ( ) ) . addValue ( STRING_3 , null ) . addValue ( STRING_4 , null ) . addValue ( STRING_5 , VAR_2 . METHOD_5 ( ) ) . addValue ( STRING_6 , VAR_2 . METHOD_6 ( ) ) ) VAR VAR (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME list ) NAME list ( INIT = new java.util.ArrayList < TYPE_1 > ( ) ) INIT = new java.util.ArrayList < TYPE_1 > ( ) ) VAR VAR (  list . add ( new TYPE_1 ( TYPE_2 . METHOD_2 ( ) , ( ( org.ovirt.engine.core.common.businessentities.DiskImage ) ( TYPE_2 . getParameters ( ) . METHOD_3 ( ) ) ) . METHOD_4 ( ) . get ( 0 ) , ( ( org.ovirt.engine.core.common.businessentities.DiskImage ) ( TYPE_2 . getParameters ( ) . METHOD_3 ( ) ) ) . METHOD_5 ( ) ) ) )  list . add ( new TYPE_1 ( TYPE_2 . METHOD_2 ( ) , ( ( org.ovirt.engine.core.common.businessentities.DiskImage ) ( TYPE_2 . getParameters ( ) . METHOD_3 ( ) ) ) . METHOD_4 ( ) . get ( 0 ) , ( ( org.ovirt.engine.core.common.businessentities.DiskImage ) ( TYPE_2 . getParameters ( ) . METHOD_3 ( ) ) ) . METHOD_5 ( ) ) ) (  return list ; )  return list ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  command = org.mockito.Mockito . METHOD_2 ( new TYPE_1 < TYPE_2 > ( new TYPE_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , true ) ) ) )  command = org.mockito.Mockito . METHOD_2 ( new TYPE_1 < TYPE_2 > ( new TYPE_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , true ) ) ) (  METHOD_4 ( ) )  METHOD_4 ( ) (  METHOD_5 ( VAR_1 ) )  METHOD_5 ( VAR_1 ) (  METHOD_6 ( true ) )  METHOD_6 ( true ) (  METHOD_7 ( true ) )  METHOD_7 ( true ) (  METHOD_8 ( true ) )  METHOD_8 ( true ) (  TYPE_3 . METHOD_9 ( command , VAR_2 ) )  TYPE_3 . METHOD_9 ( command , VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( IN VAR_1 . METHOD_2 ( ) ) IN VAR_1 . METHOD_2 ( ) ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) ) INIT = VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) ) VAR VAR ( IF IF ( COND VAR_3 == null ) COND VAR_3 == null ( THEN THEN (  continue ; )  continue ; ) THEN THEN ) IF IF ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( IN METHOD_2 ( ) ) IN METHOD_2 ( ) ( BLOCK BLOCK ( IF IF ( COND VAR_3 . equals ( VAR_4 . METHOD_3 ( ) . METHOD_4 ( ) ) ) COND VAR_3 . equals ( VAR_4 . METHOD_3 ( ) . METHOD_4 ( ) ) ( THEN THEN (  METHOD_5 ( VAR_2 . METHOD_3 ( ) , VAR_4 . METHOD_3 ( ) ) )  METHOD_5 ( VAR_2 . METHOD_3 ( ) , VAR_4 . METHOD_3 ( ) ) (  break ; )  break ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_4 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_4 ) ) INIT = TYPE_4 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_4 ) ) VAR VAR ( IF IF ( COND ( null != VAR_3 ) && ( ! ( TYPE_4 . METHOD_4 ( VAR_3 ) ) ) ) COND ( null != VAR_3 ) && ( ! ( TYPE_4 . METHOD_4 ( VAR_3 ) ) ) ( THEN THEN (  VAR_3 = TYPE_4 . METHOD_2 ( METHOD_5 ( VAR_1 . METHOD_3 ( ) , VAR_2 ) , VAR_4 ) )  VAR_3 = TYPE_4 . METHOD_2 ( METHOD_5 ( VAR_1 . METHOD_3 ( ) , VAR_2 ) , VAR_4 ) ) THEN THEN ) IF IF (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME setEntity ) NAME setEntity ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME value ) NAME value ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( super . getEntity ( ) ) != null ) COND ( super . getEntity ( ) ) != null ( THEN THEN ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( super . getEntity ( ) ) ) ) INIT = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( super . getEntity ( ) ) ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME VAR_2 ) NAME VAR_2 ( INIT = value ) INIT = value ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . getId ( ) ) INIT = VAR_1 . getId ( ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_2 . getId ( ) ) INIT = VAR_2 . getId ( ) ) VAR VAR ( IF IF ( COND VAR_3 . equals ( VAR_4 ) ) COND VAR_3 . equals ( VAR_4 ) ( THEN THEN (  setEntity ( value , false ) )  setEntity ( value , false ) (  METHOD_1 ( ) )  METHOD_1 ( ) (  return ; )  return ; ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  super . setEntity ( value ) )  super . setEntity ( value ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( ( VAR_1 ) == null ) && ( ( VAR_2 ) == null ) ) COND ( ( VAR_1 ) == null ) && ( ( VAR_2 ) == null ) ( THEN THEN (  VAR_2 = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . get ( METHOD_3 ( ) ) )  VAR_2 = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . get ( METHOD_3 ( ) ) ( IF IF ( COND ( VAR_2 ) != null ) COND ( VAR_2 ) != null ( THEN THEN (  VAR_1 = VAR_2 . METHOD_4 ( ) )  VAR_1 = VAR_2 . METHOD_4 ( ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  cluster = new TYPE_1 ( ) )  cluster = new TYPE_1 ( ) (  cluster . METHOD_2 ( VAR_1 ) )  cluster . METHOD_2 ( VAR_1 ) (  cluster . METHOD_3 ( VAR_2 ) )  cluster . METHOD_3 ( VAR_2 ) (  cluster . METHOD_4 ( VAR_3 ) )  cluster . METHOD_4 ( VAR_3 ) (  cluster . METHOD_5 ( VAR_4 ) )  cluster . METHOD_5 ( VAR_4 ) (  cluster . METHOD_6 ( VAR_5 ) )  cluster . METHOD_6 ( VAR_5 ) (  cluster . METHOD_7 ( VAR_6 ) )  cluster . METHOD_7 ( VAR_6 ) (  cluster . METHOD_8 ( VAR_7 ) )  cluster . METHOD_8 ( VAR_7 ) (  cluster . METHOD_9 ( VAR_8 ) )  cluster . METHOD_9 ( VAR_8 ) (  cluster . METHOD_10 ( VAR_9 ) )  cluster . METHOD_10 ( VAR_9 ) (  cluster . METHOD_11 ( VAR_10 ) )  cluster . METHOD_11 ( VAR_10 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ! ( validate ( METHOD_2 ( ) . METHOD_3 ( ) ) ) ) COND ! ( validate ( METHOD_2 ( ) . METHOD_3 ( ) ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( IF IF ( COND ! ( validate ( METHOD_4 ( ) . METHOD_5 ( ) ) ) ) COND ! ( validate ( METHOD_4 ( ) . METHOD_5 ( ) ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  return METHOD_6 ( ) ; )  return METHOD_6 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 . METHOD_2 ( ) . isEmpty ( ) ) COND VAR_1 . METHOD_2 ( ) . isEmpty ( ) ( THEN THEN (  org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) )  org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( IN METHOD_6 ( VAR_1 . METHOD_7 ( ) , STRING_1 , VAR_1 . METHOD_5 ( ) ) ) IN METHOD_6 ( VAR_1 . METHOD_7 ( ) , STRING_1 , VAR_1 . METHOD_5 ( ) ) ( BLOCK BLOCK (  org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_8 ( ) . METHOD_4 ( VAR_2 . METHOD_9 ( ) ) )  org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_8 ( ) . METHOD_4 ( VAR_2 . METHOD_9 ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_2 ( VAR_3 , VAR_1 ) ) INIT = TYPE_2 . METHOD_2 ( VAR_3 , VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_2 . METHOD_2 ( VAR_5 , VAR_1 ) ) INIT = TYPE_2 . METHOD_2 ( VAR_5 , VAR_1 ) ) VAR VAR ( IF IF ( COND ( VAR_2 != null ) && ( VAR_4 != null ) ) COND ( VAR_2 != null ) && ( VAR_4 != null ) ( THEN THEN (  return new TYPE_1 ( VAR_2 , VAR_4 ) ; )  return new TYPE_1 ( VAR_2 , VAR_4 ) ; ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME action ) NAME action ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ( INIT = action . METHOD_2 ( ) ) INIT = action . METHOD_2 ( ) ) VAR VAR (  METHOD_3 ( VAR_1 , STRING_1 ) )  METHOD_3 ( VAR_1 , STRING_1 ) (  return METHOD_1 ( action , VAR_1 . getName ( ) , ( action . METHOD_4 ( ) ? action . METHOD_5 ( ) : false ) ) ; )  return METHOD_1 ( action , VAR_1 . getName ( ) , ( action . METHOD_4 ( ) ? action . METHOD_5 ( ) : false ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_2 = VAR_1 . METHOD_2 ( VAR_3 ) )  VAR_2 = VAR_1 . METHOD_2 ( VAR_3 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_2 ( STRING_1 , e ) ; )  throw new TYPE_2 ( STRING_1 , e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  VAR_4 . add ( VAR_5 , VAR_2 ) )  VAR_4 . add ( VAR_5 , VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> ( NAME result ) NAME result ( INIT = dao . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ) INIT = dao . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ) VAR VAR (  TYPE_1 . METHOD_3 ( result ) )  TYPE_1 . METHOD_3 ( result ) (  TYPE_1 . METHOD_4 ( result . isEmpty ( ) ) )  TYPE_1 . METHOD_4 ( result . isEmpty ( ) ) (  TYPE_1 . assertEquals ( result . get ( 0 ) . getId ( ) , VAR_4 . getId ( ) ) )  TYPE_1 . assertEquals ( result . get ( 0 ) . getId ( ) , VAR_4 . getId ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME value ) NAME value ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_4 . get ( ) . METHOD_2 ( STRING_1 ) ) INIT = TYPE_4 . get ( ) . METHOD_2 ( STRING_1 ) ) VAR VAR (  VAR_3 . METHOD_3 ( value ) )  VAR_3 . METHOD_3 ( value ) (  VAR_2 . METHOD_4 ( VAR_3 ) )  VAR_2 . METHOD_4 ( VAR_3 ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_4 . get ( ) . METHOD_2 ( STRING_2 ) ) INIT = TYPE_4 . get ( ) . METHOD_2 ( STRING_2 ) ) VAR VAR (  VAR_4 . METHOD_5 ( VAR_1 ) )  VAR_4 . METHOD_5 ( VAR_1 ) (  VAR_2 . METHOD_4 ( VAR_4 ) )  VAR_2 . METHOD_4 ( VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME value ) NAME value ) VAR VAR ( VAR VAR ( TYPE java.util.ArrayList<java.lang.String> ) TYPE java.util.ArrayList<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = false ) INIT = false ) VAR VAR ( IF IF ( COND ( value >= 0 ) && ( value <= ( VAR_3 < java.lang.Integer > METHOD_2 ( VAR_4 ) ) ) ) COND ( value >= 0 ) && ( value <= ( VAR_3 < java.lang.Integer > METHOD_2 ( VAR_4 ) ) ) ( THEN THEN (  VAR_2 = true )  VAR_2 = true ) THEN THEN ( ELSE ELSE (  VAR_1 . add ( TYPE_1 . toString ( ) ) )  VAR_1 . add ( TYPE_1 . toString ( ) ) (  VAR_1 . add ( java.lang.String . METHOD_3 ( STRING_1 , VAR_3 < java.lang.Integer > METHOD_2 ( VAR_4 ) ) ) )  VAR_1 . add ( java.lang.String . METHOD_3 ( STRING_1 , VAR_3 < java.lang.Integer > METHOD_2 ( VAR_4 ) ) ) ) ELSE ELSE ) IF IF (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( METHOD_3 ( null ) ) )  VAR_1 . METHOD_2 ( METHOD_3 ( null ) ) (  VAR_2 . add ( VAR_3 ) )  VAR_2 . add ( VAR_3 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_2 ( VAR_5 ) ) INIT = new TYPE_2 ( VAR_5 ) ) VAR VAR (  METHOD_4 ( VAR_6 , VAR_4 ) )  METHOD_4 ( VAR_6 , VAR_4 ) (  VAR_1 . METHOD_5 ( VAR_7 ) )  VAR_1 . METHOD_5 ( VAR_7 ) ( TRY TRY ( BLOCK BLOCK (  METHOD_6 ( ) )  METHOD_6 ( ) (  TYPE_3 . METHOD_7 ( STRING_1 ) )  TYPE_3 . METHOD_7 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_8 ) NAME VAR_8 ( BLOCK BLOCK (  METHOD_8 ( VAR_8 , VAR_9 , VAR_4 ) )  METHOD_8 ( VAR_8 , VAR_9 , VAR_4 ) ) BLOCK BLOCK ) CATCH CATCH ( FINALLY FINALLY (  VAR_2 . METHOD_9 ( ) )  VAR_2 . METHOD_9 ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  org.mockito.Mockito.when ( METHOD_2 ( ) . METHOD_3 ( ) ) . thenReturn ( VAR_2 ) )  org.mockito.Mockito.when ( METHOD_2 ( ) . METHOD_3 ( ) ) . thenReturn ( VAR_2 ) (  org.mockito.Mockito.when ( METHOD_2 ( ) . METHOD_4 ( ) ) . thenReturn ( VAR_3 ) )  org.mockito.Mockito.when ( METHOD_2 ( ) . METHOD_4 ( ) ) . thenReturn ( VAR_3 ) (  METHOD_5 ( VAR_2 , VAR_1 ) )  METHOD_5 ( VAR_2 , VAR_1 ) (  METHOD_6 ( ) )  METHOD_6 ( ) (  METHOD_7 ( VAR_4 ) )  METHOD_7 ( VAR_4 ) (  METHOD_8 ( VAR_5 ) )  METHOD_8 ( VAR_5 ) (  METHOD_9 ( ) . METHOD_10 ( true ) )  METHOD_9 ( ) . METHOD_10 ( true ) (  METHOD_9 ( ) . METHOD_11 ( ) )  METHOD_9 ( ) . METHOD_11 ( ) (  TYPE_1 . METHOD_12 ( METHOD_9 ( ) , true ) )  TYPE_1 . METHOD_12 ( METHOD_9 ( ) , true ) (  METHOD_13 ( METHOD_9 ( ) ) )  METHOD_13 ( METHOD_9 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN java.util.Map<TYPE_1,java.lang.Integer> ) RETURN java.util.Map<TYPE_1,java.lang.Integer> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2<org.ovirt.engine.core.common.businessentities.DiskImage> ) TYPE TYPE_2<org.ovirt.engine.core.common.businessentities.DiskImage> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<org.ovirt.engine.core.common.businessentities.DiskImage,TYPE_1> ) TYPE java.util.Map<org.ovirt.engine.core.common.businessentities.DiskImage,TYPE_1> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.HashMap < org.ovirt.engine.core.common.businessentities.DiskImage , TYPE_1 > ( ) ) INIT = new java.util.HashMap < org.ovirt.engine.core.common.businessentities.DiskImage , TYPE_1 > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.DiskImage ) TYPE org.ovirt.engine.core.common.businessentities.DiskImage ( NAME image ) NAME image ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME domain ) NAME domain ( INIT = METHOD_2 ( VAR_3 . get ( image . getId ( ) ) ) ) INIT = METHOD_2 ( VAR_3 . get ( image . getId ( ) ) ) ) VAR VAR (  VAR_2 . put ( image , domain ) )  VAR_2 . put ( image , domain ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return TYPE_3 . METHOD_1 ( VAR_2 ) ; )  return TYPE_3 . METHOD_1 ( VAR_2 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( getWindow ( ) ) != null ) COND ( getWindow ( ) ) != null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ( INIT = new TYPE_1 ( this , getEntity ( ) . METHOD_2 ( ) , ( ( TYPE_2 ) ( getSelectedItem ( ) ) ) , getEntity ( ) . METHOD_3 ( ) ) ) INIT = new TYPE_1 ( this , getEntity ( ) . METHOD_2 ( ) , ( ( TYPE_2 ) ( getSelectedItem ( ) ) ) , getEntity ( ) . METHOD_3 ( ) ) ) VAR VAR (  METHOD_4 ( model ) )  METHOD_4 ( model ) (  METHOD_5 ( model ) )  METHOD_5 ( model ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1.VdcBllMessages ) RETURN TYPE_1.VdcBllMessages ( NAME validate ) NAME validate ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME vds ) NAME vds ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( getVm ( ) . METHOD_1 ( ) ) != ( VAR_3 ) ) && ( ! ( VAR_4 . METHOD_2 ( vds , getVm ( ) ) ) ) ) COND ( ( getVm ( ) . METHOD_1 ( ) ) != ( VAR_3 ) ) && ( ! ( VAR_4 . METHOD_2 ( vds , getVm ( ) ) ) ) ( THEN THEN (  VAR_1 . append ( STRING_1 ) )  VAR_1 . append ( STRING_1 ) (  return VAR_5 ; )  return VAR_5 ; ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.when ( params . getId ( ) ) . thenReturn ( VAR_1 ) )  org.mockito.Mockito.when ( params . getId ( ) ) . thenReturn ( VAR_1 ) (  METHOD_2 ( ) )  METHOD_2 ( ) (  METHOD_3 ( ) )  METHOD_3 ( ) (  METHOD_4 ( ) )  METHOD_4 ( ) (  METHOD_5 ( ) )  METHOD_5 ( ) ( VAR VAR ( TYPE TYPE_1<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface,org.ovirt.engine.core.common.businessentities.VDS> ) TYPE TYPE_1<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface,org.ovirt.engine.core.common.businessentities.VDS> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( VAR_3 , vds ) ) INIT = new TYPE_1 ( VAR_3 , vds ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_1<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface,org.ovirt.engine.core.common.businessentities.VDS>> ) TYPE java.util.List<TYPE_1<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface,org.ovirt.engine.core.common.businessentities.VDS>> ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_2 . METHOD_6 ( VAR_2 ) ) INIT = TYPE_2 . METHOD_6 ( VAR_2 ) ) VAR VAR (  METHOD_7 ( ) . METHOD_8 ( ) )  METHOD_7 ( ) . METHOD_8 ( ) (  TYPE_3 . assertEquals ( STRING_1 , VAR_4 , METHOD_7 ( ) . METHOD_9 ( ) . getReturnValue ( ) ) )  TYPE_3 . assertEquals ( STRING_1 , VAR_4 , METHOD_7 ( ) . METHOD_9 ( ) . getReturnValue ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<?> ) TYPE TYPE_1<?> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1<?> ) TYPE TYPE_1<?> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 == null ) && ( VAR_2 == null ) ) COND ( VAR_1 == null ) && ( VAR_2 == null ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ( IF IF ( COND ( ( VAR_1 == null ) || ( VAR_2 == null ) ) || ( ( VAR_1 . size ( ) ) != ( VAR_2 . size ( ) ) ) ) COND ( ( VAR_1 == null ) || ( VAR_2 == null ) ) || ( ( VAR_1 . size ( ) ) != ( VAR_2 . size ( ) ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  return ( VAR_1 . METHOD_2 ( VAR_2 ) ) && ( VAR_2 . METHOD_2 ( VAR_1 ) ) ; )  return ( VAR_1 . METHOD_2 ( VAR_2 ) ) && ( VAR_2 . METHOD_2 ( VAR_1 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.Integer> ) TYPE java.util.Map<java.lang.String,java.lang.Integer> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME returnValue ) NAME returnValue ( INIT = false ) INIT = false ) VAR VAR ( IF IF ( COND ! ( VAR_1 . METHOD_2 ( VAR_2 ) ) ) COND ! ( VAR_1 . METHOD_2 ( VAR_2 ) ) ( THEN THEN (  VAR_1 . put ( VAR_2 , 1 ) )  VAR_1 . put ( VAR_2 , 1 ) (  returnValue = true )  returnValue = true ) THEN THEN ( ELSE ELSE ( IF IF ( COND METHOD_3 ( ) ) COND METHOD_3 ( ) ( THEN THEN (  METHOD_4 ( VAR_1 , VAR_2 ) )  METHOD_4 ( VAR_1 , VAR_2 ) (  returnValue = true )  returnValue = true ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF (  return returnValue ; )  return returnValue ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME iface ) NAME iface ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  METHOD_3 ( iface , false , iface . METHOD_4 ( ) , ( ! ( iface . METHOD_5 ( ) ) ) , 0 , TYPE_1 . instance ( ) . METHOD_6 ( ) ) )  METHOD_3 ( iface , false , iface . METHOD_4 ( ) , ( ! ( iface . METHOD_5 ( ) ) ) , 0 , TYPE_1 . instance ( ) . METHOD_6 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source != null ? ( ( java.lang.Integer ) ( source ) ) . METHOD_2 ( ) : 0 ; )  return source != null ? ( ( java.lang.Integer ) ( source ) ) . METHOD_2 ( ) : 0 ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . METHOD_2 ( ) : 0 ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . METHOD_2 ( ) : 0 ; } } (  TYPE_1 . METHOD_3 ( new TYPE_2 ( VAR_1 , TYPE_1 . METHOD_4 ( ) ) , aQuery ) )  TYPE_1 . METHOD_3 ( new TYPE_2 ( VAR_1 , TYPE_1 . METHOD_4 ( ) ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND source == null ) COND source == null ( THEN THEN (  return new java.util.ArrayList < TYPE_1 > ( ) ; )  return new java.util.ArrayList < TYPE_1 > ( ) ; ) THEN THEN ) IF IF (  return source ; )  return source ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < TYPE_1 > ( ) ; } return source ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < TYPE_1 > ( ) ; } return source ; } } (  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new TYPE_2 ( VAR_1 ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new TYPE_2 ( VAR_1 ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN java.util.List<org.ovirt.engine.core.common.businessentities.VM> ) RETURN java.util.List<org.ovirt.engine.core.common.businessentities.VM> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( getParameters ( ) . getStoragePoolId ( ) , getParameters ( ) . METHOD_2 ( ) ) ) INIT = new TYPE_1 ( getParameters ( ) . getStoragePoolId ( ) , getParameters ( ) . METHOD_2 ( ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2.VdcQueryReturnValue ) TYPE TYPE_2.VdcQueryReturnValue ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_3 . getInstance ( ) . METHOD_3 ( VAR_3 , VAR_1 ) ) INIT = TYPE_3 . getInstance ( ) . METHOD_3 ( VAR_3 , VAR_1 ) ) VAR VAR (  return VAR_2 . getSucceeded ( ) ? VAR_4 < java.util.List < org.ovirt.engine.core.common.businessentities.VM > > getReturnValue ( ) : null ; )  return VAR_2 . getSucceeded ( ) ? VAR_4 < java.util.List < org.ovirt.engine.core.common.businessentities.VM > > getReturnValue ( ) : null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME value ) NAME value ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  value . METHOD_2 ( false ) )  value . METHOD_2 ( false ) (  value . METHOD_3 ( new TYPE_2 ( STRING_1 ) ) )  value . METHOD_3 ( new TYPE_2 ( STRING_1 ) ) (  org.mockito.Mockito.when ( VAR_1 . METHOD_4 ( TYPE_3 . any ( ) , TYPE_3 . any ( ) ) ) . thenReturn ( value ) )  org.mockito.Mockito.when ( VAR_1 . METHOD_4 ( TYPE_3 . any ( ) , TYPE_3 . any ( ) ) ) . thenReturn ( value ) (  VAR_2 . METHOD_5 ( ) )  VAR_2 . METHOD_5 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ) TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ( NAME cluster ) NAME cluster ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME VAR_1 ) NAME VAR_1 ( INIT = new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { boolean VAR_2 = ( ( java.lang.Boolean ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ; METHOD_2 ( ( ! VAR_2 ) ) ; } } ) ) INIT = new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { boolean VAR_2 = ( ( java.lang.Boolean ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ; METHOD_2 ( ( ! VAR_2 ) ) ; } } ) ) VAR VAR ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( java.lang.Boolean ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ) INIT = ( ( java.lang.Boolean ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ) VAR VAR (  METHOD_2 ( ( ! VAR_2 ) ) )  METHOD_2 ( ( ! VAR_2 ) ) ) BLOCK BLOCK ) METHOD METHOD (  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_3 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( cluster . getId ( ) ) , VAR_1 ) )  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_3 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( cluster . getId ( ) ) , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME vmId ) NAME vmId ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_3 ( ) ) INIT = new TYPE_3 ( ) ) VAR VAR (  VAR_3 . METHOD_2 ( true , vmId ) )  VAR_3 . METHOD_2 ( true , vmId ) ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  VAR_4 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) )  VAR_4 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) (  VAR_4 . METHOD_4 ( vmId ) )  VAR_4 . METHOD_4 ( vmId ) (  VAR_3 . add ( VAR_4 , VAR_2 ) )  VAR_3 . add ( VAR_4 , VAR_2 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME vmId ) NAME vmId ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_3 ( ) ) INIT = new TYPE_3 ( ) ) VAR VAR (  VAR_3 . METHOD_2 ( vmId ) )  VAR_3 . METHOD_2 ( vmId ) ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_4 . getId ( ) ) == null ) COND ( VAR_4 . getId ( ) ) == null ( THEN THEN (  VAR_4 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) )  VAR_4 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ) THEN THEN ) IF IF (  VAR_4 . METHOD_4 ( vmId ) )  VAR_4 . METHOD_4 ( vmId ) (  VAR_3 . add ( VAR_4 , VAR_2 , false ) )  VAR_3 . add ( VAR_4 , VAR_2 , false ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME vmId ) NAME vmId ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return new TYPE_1 ( new TYPE_2 ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) , vmId ) , VAR_1 , TYPE_3 . getName ( ) , STRING_1 , 0 , new java.util.HashMap < java.lang.String , java.lang.Object > ( ) , true , true , false , STRING_1 , null , null , null ) ; )  return new TYPE_1 ( new TYPE_2 ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) , vmId ) , VAR_1 , TYPE_3 . getName ( ) , STRING_1 , 0 , new java.util.HashMap < java.lang.String , java.lang.Object > ( ) , true , true , false , STRING_1 , null , null , null ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME vds ) NAME vds ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME returnValue ) NAME returnValue ( INIT = VAR_3 . METHOD_2 ( ) . METHOD_3 ( VAR_4 , new TYPE_3 ( vds . getId ( ) , VAR_1 , VAR_2 ) ) ) INIT = VAR_3 . METHOD_2 ( ) . METHOD_3 ( VAR_4 , new TYPE_3 ( vds . getId ( ) , VAR_1 , VAR_2 ) ) ) VAR VAR (  return returnValue . getSucceeded ( ) ; )  return returnValue . getSucceeded ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  METHOD_3 ( TYPE_2 . METHOD_4 ( ) ) )  METHOD_3 ( TYPE_2 . METHOD_4 ( ) ) (  VAR_1 . METHOD_5 ( ) )  VAR_1 . METHOD_5 ( ) ( TRY TRY ( BLOCK BLOCK (  VAR_2 . add ( model ) )  VAR_2 . add ( model ) (  TYPE_2 . METHOD_6 ( STRING_1 ) )  TYPE_2 . METHOD_6 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( BLOCK BLOCK (  METHOD_7 ( VAR_3 , STRING_2 , STRING_3 , METHOD_8 ( ) ) )  METHOD_7 ( VAR_3 , STRING_2 , STRING_3 , METHOD_8 ( ) ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ( ( java.lang.Integer ) ( TYPE_2 . getValue ( VAR_2 ) ) ) ) ) INIT = METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ( ( java.lang.Integer ) ( TYPE_2 . getValue ( VAR_2 ) ) ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR ( IF IF ( COND ! ( ( VAR_1 . METHOD_5 ( VAR_3 ) ) || ( VAR_1 . equals ( VAR_3 ) ) ) ) COND ! ( ( VAR_1 . METHOD_5 ( VAR_3 ) ) || ( VAR_1 . equals ( VAR_3 ) ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ( ELSE ELSE (  return true ; )  return true ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.ArrayList<TYPE_1> ) RETURN java.util.ArrayList<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.compat.Guid> ) TYPE java.util.ArrayList<org.ovirt.engine.core.compat.Guid> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<TYPE_1> ) TYPE java.util.ArrayList<TYPE_1> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.ArrayList < TYPE_1 > ( ) ) INIT = new java.util.ArrayList < TYPE_1 > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME storageDomain ) NAME storageDomain ( IN VAR_4 ) IN VAR_4 ( BLOCK BLOCK ( IF IF ( COND VAR_3 . equals ( storageDomain . getId ( ) ) ) COND VAR_3 . equals ( storageDomain . getId ( ) ) ( THEN THEN (  VAR_2 . add ( storageDomain ) )  VAR_2 . add ( storageDomain ) (  break ; )  break ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_2 ( VAR_2 ) . addValue ( STRING_1 , VAR_1 ) . addValue ( STRING_2 , VAR_3 ) ) INIT = METHOD_2 ( VAR_2 ) . addValue ( STRING_1 , VAR_1 ) . addValue ( STRING_2 , VAR_3 ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_5 ) NAME VAR_5 ( INIT = METHOD_3 ( ) . METHOD_4 ( STRING_3 , METHOD_5 ( ) , VAR_4 ) ) INIT = METHOD_3 ( ) . METHOD_4 ( STRING_3 , METHOD_5 ( ) , VAR_4 ) ) VAR VAR (  return VAR_5 ; )  return VAR_5 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.doReturn ( METHOD_2 ( VAR_1 ) ) . when ( VAR_2 ) . METHOD_3 ( VAR_3 [ 1 ] ) )  org.mockito.Mockito.doReturn ( METHOD_2 ( VAR_1 ) ) . when ( VAR_2 ) . METHOD_3 ( VAR_3 [ 1 ] ) (  VAR_4 . METHOD_4 ( ) )  VAR_4 . METHOD_4 ( ) (  org.mockito.Mockito . METHOD_5 ( VAR_5 , org.mockito.Mockito . METHOD_6 ( 0 ) ) . METHOD_7 ( TYPE_1 . any ( VAR_6 class ) ) )  org.mockito.Mockito . METHOD_5 ( VAR_5 , org.mockito.Mockito . METHOD_6 ( 0 ) ) . METHOD_7 ( TYPE_1 . any ( VAR_6 class ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ( ) ; )  return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ( ) ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ( ) ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ( ) ; } } (  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1.DiskImage ) RETURN TYPE_1.DiskImage ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.DiskImage ) TYPE TYPE_1.DiskImage ( NAME disk ) NAME disk ( INIT = new TYPE_1 . DiskImage ( ) ) INIT = new TYPE_1 . DiskImage ( ) ) VAR VAR (  disk . setId ( VAR_1 ) )  disk . setId ( VAR_1 ) (  disk . METHOD_2 ( INT_1 ) )  disk . METHOD_2 ( INT_1 ) (  disk . METHOD_3 ( VAR_2 ) )  disk . METHOD_3 ( VAR_2 ) (  disk . METHOD_4 ( new java.util.ArrayList ( TYPE_2 . METHOD_5 ( VAR_3 ) ) ) )  disk . METHOD_4 ( new java.util.ArrayList ( TYPE_2 . METHOD_5 ( VAR_3 ) ) ) (  disk . METHOD_6 ( VAR_4 ) )  disk . METHOD_6 ( VAR_4 ) (  disk . METHOD_7 ( TYPE_3 . instance ( ) . METHOD_8 ( INT_2 ) ) )  disk . METHOD_7 ( TYPE_3 . instance ( ) . METHOD_8 ( INT_2 ) ) (  return disk ; )  return disk ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME result ) NAME result ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_8 . METHOD_2 ( source ) ) INIT = TYPE_8 . METHOD_2 ( source ) ) VAR VAR ( VAR VAR ( TYPE TYPE_9 ) TYPE TYPE_9 ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_9 . getInstance ( VAR_4 ) ) INIT = TYPE_9 . getInstance ( VAR_4 ) ) VAR VAR (  VAR_3 . METHOD_3 ( VAR_5 , VAR_1 ) )  VAR_3 . METHOD_3 ( VAR_5 , VAR_1 ) ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_6 ) NAME VAR_6 ( INIT = VAR_3 . METHOD_4 ( VAR_2 ) ) INIT = VAR_3 . METHOD_4 ( VAR_2 ) ) VAR VAR (  result = new java.lang.String ( VAR_6 , STRING_2 ) )  result = new java.lang.String ( VAR_6 , STRING_2 ) (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<TYPE_1> ) TYPE java.util.ArrayList<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList ( TYPE_2 . METHOD_2 ( VAR_2 , VAR_2 ) ) ) INIT = new java.util.ArrayList ( TYPE_2 . METHOD_2 ( VAR_2 , VAR_2 ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.ArrayList<TYPE_3> ) TYPE java.util.ArrayList<TYPE_3> ( NAME VAR_3 ) NAME VAR_3 ( INIT = new java.util.ArrayList ( TYPE_2 . METHOD_2 ( new TYPE_3 ( ) , new TYPE_3 ( ) ) ) ) INIT = new java.util.ArrayList ( TYPE_2 . METHOD_2 ( new TYPE_3 ( ) , new TYPE_3 ( ) ) ) ) VAR VAR (  VAR_4 . METHOD_3 ( VAR_1 , VAR_3 ) )  VAR_4 . METHOD_3 ( VAR_1 , VAR_3 ) (  org.mockito.Mockito . METHOD_4 ( VAR_5 , org.mockito.Mockito . METHOD_5 ( 2 ) ) . runQuery ( TYPE_4 . any ( VAR_6 class ) , TYPE_4 . any ( VAR_7 class ) ) )  org.mockito.Mockito . METHOD_4 ( VAR_5 , org.mockito.Mockito . METHOD_5 ( 2 ) ) . runQuery ( TYPE_4 . any ( VAR_6 class ) , TYPE_4 . any ( VAR_7 class ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN byte[] ) RETURN byte[] ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . toString ( ) ) INIT = VAR_1 . toString ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_2 . METHOD_2 ( STRING_1 ) ) INIT = VAR_2 . METHOD_2 ( STRING_1 ) ) VAR VAR ( IF IF ( COND ( VAR_3 == null ) || ( ( VAR_3 . length ) == 0 ) ) COND ( VAR_3 == null ) || ( ( VAR_3 . length ) == 0 ) ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_5 ) NAME VAR_5 ( IN VAR_3 ) IN VAR_3 ( BLOCK BLOCK (  TYPE_3 . METHOD_3 ( VAR_5 , VAR_4 ) )  TYPE_3 . METHOD_3 ( VAR_5 , VAR_4 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_4 . METHOD_4 ( ) ; )  return VAR_4 . METHOD_4 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.Network ) TYPE org.ovirt.engine.core.common.businessentities.Network ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( STRING_1 ) ) INIT = METHOD_2 ( STRING_1 ) ) VAR VAR (  METHOD_3 ( VAR_1 ) )  METHOD_3 ( VAR_1 ) ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME nic ) NAME nic ( INIT = METHOD_4 ( STRING_2 , VAR_1 ) ) INIT = METHOD_4 ( STRING_2 , VAR_1 ) ) VAR VAR (  nic . METHOD_5 ( VAR_2 ) )  nic . METHOD_5 ( VAR_2 ) (  METHOD_6 ( nic ) )  METHOD_6 ( nic ) (  nic . METHOD_5 ( VAR_3 ) )  nic . METHOD_5 ( VAR_3 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_7 ( METHOD_8 ( nic ) ) ) INIT = METHOD_7 ( METHOD_8 ( nic ) ) ) VAR VAR (  METHOD_9 ( VAR_4 , VAR_1 ) )  METHOD_9 ( VAR_4 , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( vm . getId ( ) ) ) INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( vm . getId ( ) ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_4 ( VAR_1 ) . toString ( ) . METHOD_5 ( ) ) INIT = TYPE_2 . METHOD_4 ( VAR_1 ) . toString ( ) . METHOD_5 ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = vm . METHOD_4 ( ) . toString ( ) . METHOD_5 ( ) ) INIT = vm . METHOD_4 ( ) . toString ( ) . METHOD_5 ( ) ) VAR VAR ( IF IF ( COND VAR_3 . equals ( VAR_2 ) ) COND VAR_3 . equals ( VAR_2 ) ( THEN THEN (  VAR_4 . add ( VAR_5 , VAR_2 ) )  VAR_4 . add ( VAR_5 , VAR_2 ) ) THEN THEN ( ELSE ELSE (  VAR_4 . add ( VAR_5 , VAR_3 ) )  VAR_4 . add ( VAR_5 , VAR_3 ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ( NAME iface ) NAME iface ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = iface . METHOD_2 ( ) . METHOD_3 ( ) ) INIT = iface . METHOD_2 ( ) . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = iface . METHOD_2 ( ) . METHOD_4 ( ) ) INIT = iface . METHOD_2 ( ) . METHOD_4 ( ) ) VAR VAR ( IF IF ( COND ! VAR_1 ) COND ! VAR_1 ( THEN THEN (  VAR_2 = TYPE_2 . METHOD_5 ( VAR_2 ) )  VAR_2 = TYPE_2 . METHOD_5 ( VAR_2 ) (  VAR_3 = TYPE_2 . METHOD_5 ( VAR_3 ) )  VAR_3 = TYPE_2 . METHOD_5 ( VAR_3 ) ) THEN THEN ) IF IF ( IF IF ( COND VAR_2 == null ) COND VAR_2 == null ( THEN THEN (  return VAR_3 ; )  return VAR_3 ; ) THEN THEN ( ELSE ELSE ( IF IF ( COND VAR_3 == null ) COND VAR_3 == null ( THEN THEN (  return VAR_2 ; )  return VAR_2 ; ) THEN THEN ( ELSE ELSE (  return TYPE_3 . METHOD_6 ( VAR_2 , VAR_3 ) ; )  return TYPE_3 . METHOD_6 ( VAR_2 , VAR_3 ) ; ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( ) . setId ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) )  TYPE_1 . METHOD_2 ( ) . setId ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) (  TYPE_1 . METHOD_4 ( ) . METHOD_5 ( TYPE_1 . METHOD_2 ( ) ) )  TYPE_1 . METHOD_4 ( ) . METHOD_5 ( TYPE_1 . METHOD_2 ( ) ) (  TYPE_2 . METHOD_6 ( TYPE_1 . METHOD_7 ( ) . METHOD_8 ( ) , TYPE_1 . METHOD_2 ( ) . getId ( ) , TYPE_1 . getParameters ( ) . METHOD_9 ( ) ) )  TYPE_2 . METHOD_6 ( TYPE_1 . METHOD_7 ( ) . METHOD_8 ( ) , TYPE_1 . METHOD_2 ( ) . getId ( ) , TYPE_1 . getParameters ( ) . METHOD_9 ( ) ) (  TYPE_1 . getReturnValue ( ) . METHOD_10 ( TYPE_1 . METHOD_2 ( ) . getId ( ) ) )  TYPE_1 . getReturnValue ( ) . METHOD_10 ( TYPE_1 . METHOD_2 ( ) . getId ( ) ) (  TYPE_1 . METHOD_11 ( true ) )  TYPE_1 . METHOD_11 ( true ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN org.ovirt.engine.core.common.businessentities.VM ) RETURN org.ovirt.engine.core.common.businessentities.VM ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ( INIT = new org.ovirt.engine.core.common.businessentities.VM ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.VM ( ) ) VAR VAR (  vm . METHOD_2 ( VAR_1 ) )  vm . METHOD_2 ( VAR_1 ) (  vm . METHOD_3 ( INT_1 ) )  vm . METHOD_3 ( INT_1 ) (  vm . setId ( vmId ) )  vm . setId ( vmId ) (  vm . METHOD_4 ( org.ovirt.engine.core.compat.Guid . METHOD_5 ( ) ) )  vm . METHOD_4 ( org.ovirt.engine.core.compat.Guid . METHOD_5 ( ) ) (  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( command ) . METHOD_6 ( ) )  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( command ) . METHOD_6 ( ) (  METHOD_7 ( vm ) )  METHOD_7 ( vm ) (  return vm ; )  return vm ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_1 . METHOD_2 ( VAR_2 ) )  VAR_1 . METHOD_2 ( VAR_2 ) (  VAR_1 . METHOD_3 ( STRING_1 ) )  VAR_1 . METHOD_3 ( STRING_1 ) (  VAR_1 . METHOD_4 ( TYPE_2 . METHOD_5 ( ) ) )  VAR_1 . METHOD_4 ( TYPE_2 . METHOD_5 ( ) ) (  VAR_1 . METHOD_6 ( 0 ) )  VAR_1 . METHOD_6 ( 0 ) (  VAR_1 . METHOD_7 ( null ) )  VAR_1 . METHOD_7 ( null ) (  VAR_1 . METHOD_8 ( VAR_3 ) )  VAR_1 . METHOD_8 ( VAR_3 ) (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  command = org.mockito.Mockito . METHOD_2 ( new TYPE_1 < TYPE_2 > ( new TYPE_2 ( new java.util.ArrayList < TYPE_3 > ( ) , vmId ) , null ) ) )  command = org.mockito.Mockito . METHOD_2 ( new TYPE_1 < TYPE_2 > ( new TYPE_2 ( new java.util.ArrayList < TYPE_3 > ( ) , vmId ) , null ) ) (  org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_3 ( ) )  org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_3 ( ) (  org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_4 ( ) )  org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_4 ( ) (  org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_5 ( ) )  org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_5 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( VAR_1 . METHOD_2 ( ) ) != null ) && ( ! ( VAR_1 . METHOD_2 ( ) . equals ( STRING_1 ) ) ) ) COND ( ( VAR_1 . METHOD_2 ( ) ) != null ) && ( ! ( VAR_1 . METHOD_2 ( ) . equals ( STRING_1 ) ) ) ( THEN THEN (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_3 ( VAR_3 , new TYPE_2 ( VAR_1 , VAR_2 ) , null , this ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_3 ( VAR_3 , new TYPE_2 ( VAR_1 , VAR_2 ) , null , this ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  parameters . METHOD_2 ( TYPE_1 ) )  parameters . METHOD_2 ( TYPE_1 ) (  org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . METHOD_3 ( ) ) ) . thenReturn ( TYPE_1 ) )  org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . METHOD_3 ( ) ) ) . thenReturn ( TYPE_1 ) ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR (  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( command ) . METHOD_4 ( TYPE_1 . METHOD_3 ( ) ) )  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( command ) . METHOD_4 ( TYPE_1 . METHOD_3 ( ) ) (  TYPE_2 . METHOD_5 ( command ) )  TYPE_2 . METHOD_5 ( command ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . METHOD_3 ( ) . getEntity ( ) ) INIT = VAR_1 . METHOD_3 ( ) . getEntity ( ) ) VAR VAR (  METHOD_4 ( VAR_1 ) )  METHOD_4 ( VAR_1 ) (  frontend . METHOD_5 ( VAR_2 , VAR_3 ) )  frontend . METHOD_5 ( VAR_2 , VAR_3 ) (  user . METHOD_6 ( VAR_2 ) )  user . METHOD_6 ( VAR_2 ) (  VAR_1 . METHOD_3 ( ) . setEntity ( null ) )  VAR_1 . METHOD_3 ( ) . setEntity ( null ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) (  dao = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) )  dao = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) (  VAR_2 = METHOD_2 ( VAR_1 . METHOD_4 ( ) ) )  VAR_2 = METHOD_2 ( VAR_1 . METHOD_4 ( ) ) (  VAR_3 = METHOD_2 ( VAR_1 . METHOD_5 ( ) ) )  VAR_3 = METHOD_2 ( VAR_1 . METHOD_5 ( ) ) (  VAR_4 = dao . get ( VAR_5 ) )  VAR_4 = dao . get ( VAR_5 ) (  VAR_6 = new TYPE_1 ( ) )  VAR_6 = new TYPE_1 ( ) (  VAR_6 . METHOD_6 ( STRING_1 ) )  VAR_6 . METHOD_6 ( STRING_1 ) (  VAR_6 . METHOD_7 ( VAR_4 . METHOD_8 ( ) ) )  VAR_6 . METHOD_7 ( VAR_4 . METHOD_8 ( ) ) (  VAR_6 . METHOD_9 ( STRING_2 ) )  VAR_6 . METHOD_9 ( STRING_2 ) (  VAR_6 . METHOD_10 ( new TYPE_2 ( ) ) )  VAR_6 . METHOD_10 ( new TYPE_2 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1<java.lang.String> ) RETURN TYPE_1<java.lang.String> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<java.lang.String> ) TYPE TYPE_1<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 < java.lang.String > ( ) ) INIT = new TYPE_2 < java.lang.String > ( ) ) VAR VAR ( IF IF ( COND ( METHOD_2 ( ) ) != null ) COND ( METHOD_2 ( ) ) != null ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME item ) NAME item ( IN METHOD_2 ( ) ) IN METHOD_2 ( ) ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME a ) NAME a ( INIT = item ) INIT = item ) VAR VAR (  VAR_1 . add ( a . METHOD_3 ( ) ) )  VAR_1 . add ( a . METHOD_3 ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> ) RETURN java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ( NAME i ) NAME i ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( IF IF ( COND TYPE_1 . METHOD_2 ( i . METHOD_3 ( ) ) ) COND TYPE_1 . METHOD_2 ( i . METHOD_3 ( ) ) ( THEN THEN (  VAR_2 . add ( i ) )  VAR_2 . add ( i ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return new TYPE_1 ( METHOD_2 ( ) . getEntity ( ) , METHOD_3 ( ) . getEntity ( ) , TYPE_2 . METHOD_4 ( METHOD_5 ( ) . getEntity ( ) , METHOD_6 ( ) . getEntity ( ) ) , METHOD_7 ( ) . getEntity ( ) , VAR_1 , ( ( METHOD_8 ( ) . getSelectedItem ( ) ) != null ? METHOD_8 ( ) . getSelectedItem ( ) . getId ( ) : null ) ) ; )  return new TYPE_1 ( METHOD_2 ( ) . getEntity ( ) , METHOD_3 ( ) . getEntity ( ) , TYPE_2 . METHOD_4 ( METHOD_5 ( ) . getEntity ( ) , METHOD_6 ( ) . getEntity ( ) ) , METHOD_7 ( ) . getEntity ( ) , VAR_1 , ( ( METHOD_8 ( ) . getSelectedItem ( ) ) != null ? METHOD_8 ( ) . getSelectedItem ( ) . getId ( ) : null ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Version ) TYPE org.ovirt.engine.core.compat.Version ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME vds ) NAME vds ( INIT = METHOD_2 ( TYPE_1 . getParameters ( ) . METHOD_3 ( ) ) ) INIT = METHOD_2 ( TYPE_1 . getParameters ( ) . METHOD_3 ( ) ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Version ) TYPE org.ovirt.engine.core.compat.Version ( NAME VAR_2 ) NAME VAR_2 ( INIT = vds . METHOD_4 ( ) ) INIT = vds . METHOD_4 ( ) ) VAR VAR (  log . METHOD_5 ( STRING_1 , VAR_2 , VAR_1 ) )  log . METHOD_5 ( STRING_1 , VAR_2 , VAR_1 ) (  return ( ( VAR_2 . METHOD_6 ( ) ) == ( VAR_1 . METHOD_6 ( ) ) ) && ( ( VAR_2 . METHOD_7 ( ) ) <= ( VAR_1 . METHOD_7 ( ) ) ) ; )  return ( ( VAR_2 . METHOD_6 ( ) ) == ( VAR_1 . METHOD_6 ( ) ) ) && ( ( VAR_2 . METHOD_7 ( ) ) <= ( VAR_1 . METHOD_7 ( ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME version ) NAME version ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  version . METHOD_2 ( new TYPE_2 ( ) ) )  version . METHOD_2 ( new TYPE_2 ( ) ) ( IF IF ( COND TYPE_3 . METHOD_3 ( version , VAR_1 ) ) COND TYPE_3 . METHOD_3 ( version , VAR_1 ) ( THEN THEN (  METHOD_4 ( version , VAR_2 ) )  METHOD_4 ( version , VAR_2 ) ) THEN THEN ) IF IF ( IF IF ( COND TYPE_3 . METHOD_3 ( version , VAR_3 ) ) COND TYPE_3 . METHOD_3 ( version , VAR_3 ) ( THEN THEN (  METHOD_4 ( version , VAR_4 , VAR_5 ) )  METHOD_4 ( version , VAR_4 , VAR_5 ) ) THEN THEN ) IF IF ( IF IF ( COND TYPE_3 . METHOD_3 ( version , VAR_6 ) ) COND TYPE_3 . METHOD_3 ( version , VAR_6 ) ( THEN THEN (  METHOD_4 ( version , VAR_7 ) )  METHOD_4 ( version , VAR_7 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME vmId ) NAME vmId ) VAR VAR ( VAR VAR ( TYPE java.util.ArrayList<java.lang.String> ) TYPE java.util.ArrayList<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = false ) INIT = false ) VAR VAR ( IF IF ( COND ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( vmId ) . size ( ) ) > 0 ) COND ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( vmId ) . size ( ) ) > 0 ( THEN THEN (  VAR_2 = true )  VAR_2 = true ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN (  VAR_1 . add ( TYPE_1 . toString ( ) ) )  VAR_1 . add ( TYPE_1 . toString ( ) ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME result ) NAME result ( INIT = false ) INIT = false ) VAR VAR ( SWITCH SWITCH ( NAME vds . getStatus ( ) ) NAME vds . getStatus ( ) ( CASE VAR_1 ( BLOCK BLOCK (  result = true )  result = true (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_1 ( CASE VAR_2 ( BLOCK BLOCK (  result = true )  result = true (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_2 ( CASE VAR_3 ( BLOCK BLOCK (  result = true )  result = true (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_3 ( CASE VAR_4 ( BLOCK BLOCK (  result = true )  result = true (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_4 ( CASE VAR_5 ( BLOCK BLOCK (  result = true )  result = true (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_5 ( DEFAULT DEFAULT ( BLOCK BLOCK (  break ; )  break ; ) BLOCK BLOCK ) DEFAULT DEFAULT ) SWITCH SWITCH (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Version ) TYPE org.ovirt.engine.core.compat.Version ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ( INIT = org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) INIT = org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_3 . setId ( VAR_2 ) )  VAR_3 . setId ( VAR_2 ) (  VAR_3 . METHOD_3 ( VAR_1 ) )  VAR_3 . METHOD_3 ( VAR_1 ) (  VAR_3 . METHOD_4 ( VAR_4 ) )  VAR_3 . METHOD_4 ( VAR_4 ) (  org.mockito.Mockito.when ( VAR_5 . get ( VAR_2 ) ) . thenReturn ( VAR_3 ) )  org.mockito.Mockito.when ( VAR_5 . get ( VAR_2 ) ) . thenReturn ( VAR_3 ) (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( this . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( STRING_1 ) . METHOD_5 ( ) . METHOD_6 ( ) ) ) INIT = new TYPE_2 ( this . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( STRING_1 ) . METHOD_5 ( ) . METHOD_6 ( ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 ( VAR_1 . METHOD_7 ( ) , STRING_2 ) ) INIT = new TYPE_2 ( VAR_1 . METHOD_7 ( ) , STRING_2 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_3 ( VAR_2 . METHOD_8 ( ) , VAR_1 , 1 ) ) INIT = new TYPE_3 ( VAR_2 . METHOD_8 ( ) , VAR_1 , 1 ) ) VAR VAR (  TYPE_4 . METHOD_9 ( STRING_3 , VAR_3 . METHOD_10 ( ) ) )  TYPE_4 . METHOD_9 ( STRING_3 , VAR_3 . METHOD_10 ( ) ) (  TYPE_4 . METHOD_11 ( STRING_4 , VAR_3 . METHOD_12 ( STRING_5 ) ) )  TYPE_4 . METHOD_11 ( STRING_4 , VAR_3 . METHOD_12 ( STRING_5 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME iface ) NAME iface ) VAR VAR ( VAR VAR ( TYPE java.util.Map<java.lang.String,org.ovirt.engine.core.common.businessentities.Network> ) TYPE java.util.Map<java.lang.String,org.ovirt.engine.core.common.businessentities.Network> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = iface . METHOD_2 ( ) ) INIT = iface . METHOD_2 ( ) ) VAR VAR (  return ( VAR_1 . METHOD_3 ( VAR_2 ) ) && ( VAR_1 . get ( VAR_2 ) . METHOD_4 ( ) ) ; )  return ( VAR_1 . METHOD_3 ( VAR_2 ) ) && ( VAR_1 . get ( VAR_2 ) . METHOD_4 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.ArrayList < TYPE_1 > ( ) ) INIT = new java.util.ArrayList < TYPE_1 > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME TYPE_2 ) NAME TYPE_2 ( IN VAR_3 ) IN VAR_3 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_4 . METHOD_2 ( TYPE_2 . toString ( ) ) )  VAR_4 . METHOD_2 ( TYPE_2 . toString ( ) ) (  VAR_2 . add ( VAR_4 ) )  VAR_2 . add ( VAR_4 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_5 ) NAME VAR_5 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_5 . METHOD_2 ( VAR_6 ) )  VAR_5 . METHOD_2 ( VAR_6 ) (  VAR_2 . add ( VAR_5 ) )  VAR_2 . add ( VAR_5 ) ) THEN THEN ) IF IF (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( source != null ) && ( ( ( ( java.util.List ) ( source ) ) . size ( ) ) > 0 ) ) COND ( source != null ) && ( ( ( ( java.util.List ) ( source ) ) . size ( ) ) > 0 ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( ( source != null ) && ( ( ( ( java.util.List ) ( source ) ) . size ( ) ) > 0 ) ) { return true ; } return false ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( ( source != null ) && ( ( ( ( java.util.List ) ( source ) ) . size ( ) ) > 0 ) ) { return true ; } return false ; } } (  TYPE_1 . METHOD_2 ( aQuery , VAR_1 , 1 ) )  TYPE_1 . METHOD_2 ( aQuery , VAR_1 , 1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ( NAME iface ) NAME iface ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source ; )  return source ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new TYPE_1 ( VAR_1 , iface ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new TYPE_1 ( VAR_1 , iface ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<?extendsTYPE_2,?> ) RETURN TYPE_1<?extendsTYPE_2,?> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.uicommonweb.UICommand ) TYPE org.ovirt.engine.ui.uicommonweb.UICommand ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 == ( getModel ( ) . METHOD_2 ( ) ) ) COND VAR_1 == ( getModel ( ) . METHOD_2 ( ) ) ( THEN THEN (  return VAR_2 . get ( ) ; )  return VAR_2 . get ( ) ; ) THEN THEN ( ELSE ELSE ( IF IF ( COND VAR_1 . getName ( ) . equals ( STRING_1 ) ) COND VAR_1 . getName ( ) . equals ( STRING_1 ) ( THEN THEN (  return VAR_3 . get ( ) ; )  return VAR_3 . get ( ) ; ) THEN THEN ( ELSE ELSE (  return super . METHOD_1 ( source , VAR_1 ) ; )  return super . METHOD_1 ( source , VAR_1 ) ; ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( VAR_2 ) , TYPE_1 . METHOD_3 ( TYPE_2 . valueOf ( 0 ) ) , TYPE_3 . METHOD_4 ( STRING_1 ) ) )  VAR_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( VAR_2 ) , TYPE_1 . METHOD_3 ( TYPE_2 . valueOf ( 0 ) ) , TYPE_3 . METHOD_4 ( STRING_1 ) ) ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.compat.Guid> ) TYPE java.util.List<org.ovirt.engine.core.compat.Guid> ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . METHOD_5 ( VAR_4 ) ) INIT = VAR_1 . METHOD_5 ( VAR_4 ) ) VAR VAR (  TYPE_4 . assertEquals ( STRING_2 , 1 , VAR_3 . size ( ) ) )  TYPE_4 . assertEquals ( STRING_2 , 1 , VAR_3 . size ( ) ) (  TYPE_4 . assertEquals ( STRING_3 , VAR_3 . get ( 0 ) , VAR_2 ) )  TYPE_4 . assertEquals ( STRING_3 , VAR_3 . get ( 0 ) , VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND source != null ) COND source != null ( THEN THEN ( VAR VAR ( TYPE java.util.ArrayList<TYPE_1> ) TYPE java.util.ArrayList<TYPE_1> ( NAME list ) NAME list ( INIT = METHOD_2 ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) , VAR_1 , VAR_2 ) ) INIT = METHOD_2 ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) , VAR_1 , VAR_2 ) ) VAR VAR (  TYPE_2 . METHOD_3 ( list , new TYPE_3 ( ) ) )  TYPE_2 . METHOD_3 ( list , new TYPE_3 ( ) ) (  return list ; )  return list ; ) THEN THEN ) IF IF (  return new java.util.ArrayList < TYPE_1 > ( ) ; )  return new java.util.ArrayList < TYPE_1 > ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  return ( ( ! ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) ) ) || ( ( TYPE_1 . getParameters ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) == null ) ) || ( METHOD_5 ( TYPE_1 . getParameters ( ) . METHOD_3 ( ) . METHOD_4 ( ) , TYPE_1 . getParameters ( ) . METHOD_6 ( ) ) ) ; )  return ( ( ! ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) ) ) || ( ( TYPE_1 . getParameters ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) == null ) ) || ( METHOD_5 ( TYPE_1 . getParameters ( ) . METHOD_3 ( ) . METHOD_4 ( ) , TYPE_1 . getParameters ( ) . METHOD_6 ( ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME type ) NAME type ( INIT = TYPE_2 . instance ( ) . METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ) INIT = TYPE_2 . instance ( ) . METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ) VAR VAR (  org.mockito.Mockito.when ( METHOD_4 ( ) . METHOD_5 ( ) ) . thenReturn ( type ) )  org.mockito.Mockito.when ( METHOD_4 ( ) . METHOD_5 ( ) ) . thenReturn ( type ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ( INIT = org.mockito.Mockito . METHOD_6 ( VAR_2 class ) ) INIT = org.mockito.Mockito . METHOD_6 ( VAR_2 class ) ) VAR VAR (  org.mockito.Mockito.when ( VAR_1 . METHOD_7 ( VAR_3 , type , VAR_4 , METHOD_4 ( ) . METHOD_8 ( ) ) ) . thenReturn ( VAR_5 ) )  org.mockito.Mockito.when ( VAR_1 . METHOD_7 ( VAR_3 , type , VAR_4 , METHOD_4 ( ) . METHOD_8 ( ) ) ) . thenReturn ( VAR_5 ) (  org.mockito.Mockito.when ( METHOD_9 ( ) . METHOD_10 ( ) ) . thenReturn ( VAR_1 ) )  org.mockito.Mockito.when ( METHOD_9 ( ) . METHOD_10 ( ) ) . thenReturn ( VAR_1 ) (  METHOD_11 ( false ) )  METHOD_11 ( false ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1.DiskImage ) RETURN TYPE_1.DiskImage ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( diskImage ) == null ) COND ( diskImage ) == null ( THEN THEN ( VAR VAR ( TYPE TYPE_1.Disk ) TYPE TYPE_1.Disk ( NAME disk ) NAME disk ( INIT = METHOD_2 ( ) . get ( TYPE_2 . getParameters ( ) . METHOD_3 ( ) ) ) INIT = METHOD_2 ( ) . get ( TYPE_2 . getParameters ( ) . METHOD_3 ( ) ) ) VAR VAR ( IF IF ( COND ( disk != null ) && ( ( disk . METHOD_4 ( ) ) == ( VAR_1 ) ) ) COND ( disk != null ) && ( ( disk . METHOD_4 ( ) ) == ( VAR_1 ) ) ( THEN THEN (  diskImage = ( ( TYPE_1 . DiskImage ) ( disk ) ) )  diskImage = ( ( TYPE_1 . DiskImage ) ( disk ) ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return diskImage ; )  return diskImage ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( INT_1 , INT_1 , INT_1 ) ) INIT = new TYPE_1 ( INT_1 , INT_1 , INT_1 ) ) VAR VAR (  VAR_2 . METHOD_2 ( VAR_1 ) )  VAR_2 . METHOD_2 ( VAR_1 ) (  assertEquals ( STRING_1 , INT_1 , VAR_3 ) )  assertEquals ( STRING_1 , INT_1 , VAR_3 ) (  assertEquals ( STRING_2 , INT_1 , VAR_4 ) )  assertEquals ( STRING_2 , INT_1 , VAR_4 ) (  assertEquals ( STRING_3 , INT_1 , VAR_5 ) )  assertEquals ( STRING_3 , INT_1 , VAR_5 ) (  assertEquals ( STRING_4 , 0 , VAR_6 ) )  assertEquals ( STRING_4 , 0 , VAR_6 ) (  assertEquals ( STRING_5 , 0 , VAR_7 ) )  assertEquals ( STRING_5 , 0 , VAR_7 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME status ) NAME status ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME returnValue ) NAME returnValue ( INIT = false ) INIT = false ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StoragePool ) TYPE org.ovirt.engine.core.common.businessentities.StoragePool ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( ) ) INIT = TYPE_2 . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN (  returnValue = ( VAR_1 . METHOD_3 ( ) ) == status )  returnValue = ( VAR_1 . METHOD_3 ( ) ) == status ( IF IF ( COND ( ! returnValue ) && ( ! ( TYPE_2 . getReturnValue ( ) . METHOD_4 ( ) . METHOD_5 ( TYPE_3 . toString ( ) ) ) ) ) COND ( ! returnValue ) && ( ! ( TYPE_2 . getReturnValue ( ) . METHOD_4 ( ) . METHOD_5 ( TYPE_3 . toString ( ) ) ) ) ( THEN THEN (  addCanDoActionMessage ( TYPE_3 ) )  addCanDoActionMessage ( TYPE_3 ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return returnValue ; )  return returnValue ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_2 ( VAR_3 , VAR_4 ) ) INIT = VAR_2 . METHOD_2 ( VAR_3 , VAR_4 ) ) VAR VAR (  TYPE_2 . METHOD_3 ( VAR_1 ) )  TYPE_2 . METHOD_3 ( VAR_1 ) (  TYPE_2 . METHOD_4 ( VAR_1 . isEmpty ( ) ) )  TYPE_2 . METHOD_4 ( VAR_1 . isEmpty ( ) ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_6 . METHOD_5 ( ) ) INIT = VAR_6 . METHOD_5 ( ) ) VAR VAR (  VAR_5 . METHOD_6 ( VAR_3 ) )  VAR_5 . METHOD_6 ( VAR_3 ) (  VAR_1 = METHOD_7 ( ) )  VAR_1 = METHOD_7 ( ) (  TYPE_2 . METHOD_3 ( VAR_1 ) )  TYPE_2 . METHOD_3 ( VAR_1 ) (  TYPE_2 . METHOD_8 ( VAR_1 . isEmpty ( ) ) )  TYPE_2 . METHOD_8 ( VAR_1 . isEmpty ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( IF IF ( COND TYPE_1 . isEmpty ( vm . METHOD_1 ( ) ) ) COND TYPE_1 . isEmpty ( vm . METHOD_1 ( ) ) ( THEN THEN (  vm . METHOD_2 ( VAR_2 < java.lang.String > METHOD_3 ( VAR_3 ) ) )  vm . METHOD_2 ( VAR_2 < java.lang.String > METHOD_3 ( VAR_3 ) ) ) THEN THEN ) IF IF ( IF IF ( COND VAR_4 . METHOD_4 ( vm . METHOD_5 ( ) . METHOD_6 ( ) , null ) ) COND VAR_4 . METHOD_4 ( vm . METHOD_5 ( ) . METHOD_6 ( ) , null ) ( THEN THEN (  VAR_1 = TYPE_2 . METHOD_7 ( vm . METHOD_1 ( ) ) )  VAR_1 = TYPE_2 . METHOD_7 ( vm . METHOD_1 ( ) ) ) THEN THEN ( ELSE ELSE (  VAR_1 = vm . METHOD_1 ( ) )  VAR_1 = vm . METHOD_1 ( ) ) ELSE ELSE ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( ) )  TYPE_1 . METHOD_2 ( ) ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ( INIT = TYPE_1 . getVm ( ) ) INIT = TYPE_1 . getVm ( ) ) VAR VAR (  TYPE_2 . METHOD_3 ( vm ) )  TYPE_2 . METHOD_3 ( vm ) (  METHOD_4 ( vm ) )  METHOD_4 ( vm ) ( IF IF ( COND TYPE_1 . getParameters ( ) . METHOD_5 ( ) ) COND TYPE_1 . getParameters ( ) . METHOD_5 ( ) ( THEN THEN (  METHOD_6 ( vm ) )  METHOD_6 ( vm ) ) THEN THEN ( ELSE ELSE (  METHOD_7 ( vm ) )  METHOD_7 ( vm ) ) ELSE ELSE ) IF IF (  TYPE_1 . METHOD_8 ( true ) )  TYPE_1 . METHOD_8 ( true ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME result ) NAME result ( INIT = new java.util.ArrayList ( VAR_1 ) ) INIT = new java.util.ArrayList ( VAR_1 ) ) VAR VAR ( IF IF ( COND ( ( VAR_2 ) != null ) && ( ( VAR_2 ) instanceof TYPE_2 ) ) COND ( ( VAR_2 ) != null ) && ( ( VAR_2 ) instanceof TYPE_2 ) ( THEN THEN (  result . METHOD_2 ( ( ( TYPE_2 ) ( VAR_2 ) ) . METHOD_1 ( ) ) )  result . METHOD_2 ( ( ( TYPE_2 ) ( VAR_2 ) ) . METHOD_1 ( ) ) ) THEN THEN ) IF IF (  result . METHOD_3 ( TYPE_3 . METHOD_4 ( TYPE_4 : : getName ) ) )  result . METHOD_3 ( TYPE_3 . METHOD_4 ( TYPE_4 : : getName ) ) (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1.ValidationResult ) RETURN TYPE_1.ValidationResult ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . METHOD_3 ( ) ) INIT = VAR_1 . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_1 . getId ( ) ) INIT = VAR_1 . getId ( ) ) VAR VAR (  return TYPE_3 . METHOD_4 ( ( VAR_4 == null ? null : VAR_4 . toString ( ) ) , VAR_2 , VAR_3 , VAR_5 , VAR_6 ) ; )  return TYPE_3 . METHOD_4 ( ( VAR_4 == null ? null : VAR_4 . toString ( ) ) , VAR_2 , VAR_3 , VAR_5 , VAR_6 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( METHOD_2 ( ) . getSelectedItem ( ) ) == null ) ? VAR_2 : ( ( TYPE_1 ) ( METHOD_2 ( ) . getSelectedItem ( ) ) ) ) INIT = ( ( METHOD_2 ( ) . getSelectedItem ( ) ) == null ) ? VAR_2 : ( ( TYPE_1 ) ( METHOD_2 ( ) . getSelectedItem ( ) ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( ( METHOD_3 ( ) . getSelectedItem ( ) ) == null ) ? VAR_4 : ( ( org.ovirt.engine.core.common.businessentities.StorageDomain ) ( METHOD_3 ( ) . getSelectedItem ( ) ) ) . METHOD_4 ( ) ) INIT = ( ( METHOD_3 ( ) . getSelectedItem ( ) ) == null ) ? VAR_4 : ( ( org.ovirt.engine.core.common.businessentities.StorageDomain ) ( METHOD_3 ( ) . getSelectedItem ( ) ) ) . METHOD_4 ( ) ) VAR VAR (  METHOD_5 ( VAR_1 , VAR_3 ) )  METHOD_5 ( VAR_1 , VAR_3 ) (  METHOD_6 ( VAR_1 , VAR_3 ) )  METHOD_6 ( VAR_1 , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = org.mockito.Mockito . METHOD_2 ( VAR_2 ) ) INIT = org.mockito.Mockito . METHOD_2 ( VAR_2 ) ) VAR VAR (  VAR_1 . METHOD_3 ( VAR_3 ) )  VAR_1 . METHOD_3 ( VAR_3 ) (  org.mockito.Mockito . METHOD_4 ( VAR_1 ) . METHOD_3 ( TYPE_2 . any ( VAR_4 . VdsNetworkInterface class ) , TYPE_3 . METHOD_5 ( ) ) )  org.mockito.Mockito . METHOD_4 ( VAR_1 ) . METHOD_3 ( TYPE_2 . any ( VAR_4 . VdsNetworkInterface class ) , TYPE_3 . METHOD_5 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.List<java.lang.String> ) RETURN java.util.List<java.lang.String> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.ArrayList < java.lang.String > ( ) ) INIT = new java.util.ArrayList < java.lang.String > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME nic ) NAME nic ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( IF IF ( COND ( ( nic . METHOD_2 ( ) ) && ( nic . METHOD_3 ( ) ) ) && ( nic . METHOD_4 ( ) ) ) COND ( ( nic . METHOD_2 ( ) ) && ( nic . METHOD_3 ( ) ) ) && ( nic . METHOD_4 ( ) ) ( THEN THEN ( VAR VAR ( TYPE TYPE_2.Network ) TYPE TYPE_2.Network ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_5 ( nic . METHOD_6 ( ) ) ) INIT = METHOD_5 ( nic . METHOD_6 ( ) ) ) VAR VAR (  VAR_2 . add ( VAR_3 . METHOD_7 ( ) ) )  VAR_2 . add ( VAR_3 . METHOD_7 ( ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME models ) NAME models ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ( IN models ) IN models ( BLOCK BLOCK ( IF IF ( COND model instanceof TYPE_2 ) COND model instanceof TYPE_2 ( THEN THEN (  ( ( TYPE_2 ) ( model ) ) . METHOD_2 ( ) . METHOD_3 ( this ) )  ( ( TYPE_2 ) ( model ) ) . METHOD_2 ( ) . METHOD_3 ( this ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND model instanceof org.ovirt.engine.ui.uicommonweb.models.EntityModel ) COND model instanceof org.ovirt.engine.ui.uicommonweb.models.EntityModel ( THEN THEN (  ( ( org.ovirt.engine.ui.uicommonweb.models.EntityModel ) ( model ) ) . METHOD_4 ( ) . METHOD_3 ( this ) )  ( ( org.ovirt.engine.ui.uicommonweb.models.EntityModel ) ( model ) ) . METHOD_4 ( ) . METHOD_3 ( this ) ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME params ) NAME params ( INIT = super . METHOD_1 ( ) ) INIT = super . METHOD_1 ( ) ) VAR VAR ( IF IF ( COND ( METHOD_2 ( ) . getSelectedItem ( ) ) != null ) COND ( METHOD_2 ( ) . getSelectedItem ( ) ) != null ( THEN THEN (  params . METHOD_3 ( ( ( java.lang.String ) ( METHOD_2 ( ) . getSelectedItem ( ) ) ) ) )  params . METHOD_3 ( ( ( java.lang.String ) ( METHOD_2 ( ) . getSelectedItem ( ) ) ) ) ) THEN THEN ) IF IF (  return params ; )  return params ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND org.ovirt.engine.ui.frontend.Frontend . METHOD_2 ( VAR_1 ) ) COND org.ovirt.engine.ui.frontend.Frontend . METHOD_2 ( VAR_1 ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  VAR_2 . log ( VAR_3 , ( STRING_1 + VAR_1 ) , VAR_1 ) )  VAR_2 . log ( VAR_3 , ( STRING_1 + VAR_1 ) , VAR_1 ) (  org.ovirt.engine.ui.frontend.Frontend . METHOD_3 ( ) . METHOD_4 ( null ) )  org.ovirt.engine.ui.frontend.Frontend . METHOD_3 ( ) . METHOD_4 ( null ) (  org.ovirt.engine.ui.frontend.Frontend . METHOD_5 ( VAR_1 ) )  org.ovirt.engine.ui.frontend.Frontend . METHOD_5 ( VAR_1 ) ( IF IF ( COND VAR_4 . METHOD_6 ( ) ) COND VAR_4 . METHOD_6 ( ) ( THEN THEN (  VAR_5 . METHOD_7 ( VAR_4 . getModel ( ) , null ) )  VAR_5 . METHOD_7 ( VAR_4 . getModel ( ) , null ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<org.ovirt.engine.core.common.businessentities.VDS,TYPE_2> ) RETURN TYPE_1<org.ovirt.engine.core.common.businessentities.VDS,TYPE_2> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME returnValue ) NAME returnValue ) VAR VAR (  returnValue = METHOD_2 ( VAR_1 , new TYPE_3 ( VAR_2 . getId ( ) , entity . METHOD_3 ( ) , entity . METHOD_4 ( ) , entity . getName ( ) ) ) )  returnValue = METHOD_2 ( VAR_1 , new TYPE_3 ( VAR_2 . getId ( ) , entity . METHOD_3 ( ) , entity . METHOD_4 ( ) , entity . getName ( ) ) ) (  return new TYPE_1 < org.ovirt.engine.core.common.businessentities.VDS , TYPE_2 > ( VAR_2 , returnValue ) ; )  return new TYPE_1 < org.ovirt.engine.core.common.businessentities.VDS , TYPE_2 > ( VAR_2 , returnValue ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VmTemplate ) TYPE org.ovirt.engine.core.common.businessentities.VmTemplate ( NAME template ) NAME template ( INIT = ( ( org.ovirt.engine.core.common.businessentities.VmTemplate ) ( getModel ( ) . METHOD_2 ( ) . getSelectedItem ( ) ) ) ) INIT = ( ( org.ovirt.engine.core.common.businessentities.VmTemplate ) ( getModel ( ) . METHOD_2 ( ) . getSelectedItem ( ) ) ) ) VAR VAR ( IF IF ( COND template == null ) COND template == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  METHOD_3 ( template , template . getStoragePoolId ( ) ) )  METHOD_3 ( template , template . getStoragePoolId ( ) ) (  METHOD_4 ( template . METHOD_5 ( ) ) )  METHOD_4 ( template . METHOD_5 ( ) ) (  METHOD_6 ( template . METHOD_7 ( ) ) )  METHOD_6 ( template . METHOD_7 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.network.Network ) TYPE org.ovirt.engine.core.common.businessentities.network.Network ( NAME network ) NAME network ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( ) . METHOD_3 ( network . getId ( ) ) ) INIT = METHOD_2 ( ) . METHOD_3 ( network . getId ( ) ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK ( IF IF ( COND METHOD_4 ( VAR_1 , VAR_3 , VAR_3 . METHOD_5 ( ) ) ) COND METHOD_4 ( VAR_1 , VAR_3 , VAR_3 . METHOD_5 ( ) ) ( THEN THEN (  return VAR_3 ; )  return VAR_3 ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME vds ) NAME vds ( INIT = new org.ovirt.engine.core.common.businessentities.VDS ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.VDS ( ) ) VAR VAR (  vds . setId ( VAR_1 . getValue ( ) ) )  vds . setId ( VAR_1 . getValue ( ) ) (  getModel ( ) . METHOD_2 ( ) . setItems ( TYPE_1 . METHOD_3 ( vds ) ) )  getModel ( ) . METHOD_2 ( ) . setItems ( TYPE_1 . METHOD_3 ( vds ) ) ) THEN THEN ) IF IF (  super . METHOD_1 ( VAR_1 ) )  super . METHOD_1 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = INT_1 ) INIT = INT_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = INT_2 ) INIT = INT_2 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_3 ) NAME VAR_3 ( INIT = org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) INIT = org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) VAR VAR (  METHOD_3 ( VAR_3 , VAR_4 ) )  METHOD_3 ( VAR_3 , VAR_4 ) (  METHOD_4 ( ) )  METHOD_4 ( ) ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ) TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME VAR_5 ) NAME VAR_5 ( INIT = METHOD_5 ( VAR_3 , VAR_1 , VAR_2 ) ) INIT = METHOD_5 ( VAR_3 , VAR_1 , VAR_2 ) ) VAR VAR (  METHOD_6 ( ) )  METHOD_6 ( ) (  TYPE_1 . METHOD_7 ( command . METHOD_8 ( ) ) )  TYPE_1 . METHOD_7 ( command . METHOD_8 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME id ) NAME id ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source != null ? new java.util.ArrayList < TYPE_1 > ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; )  return source != null ? new java.util.ArrayList < TYPE_1 > ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? new java.util.ArrayList < TYPE_1 > ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? new java.util.ArrayList < TYPE_1 > ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; } } (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new TYPE_2 ( id ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new TYPE_2 ( id ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = getSelectedItem ( ) ) INIT = getSelectedItem ( ) ) VAR VAR ( IF IF ( COND ( getWindow ( ) ) != null ) COND ( getWindow ( ) ) != null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_3 ( VAR_1 , this , getEntity ( ) ) ) INIT = new TYPE_3 ( VAR_1 , this , getEntity ( ) ) ) VAR VAR (  METHOD_2 ( VAR_2 ) )  METHOD_2 ( VAR_2 ) (  VAR_2 . METHOD_3 ( ) . setItems ( TYPE_4 . METHOD_4 ( getEntity ( ) ) ) )  VAR_2 . METHOD_3 ( ) . setItems ( TYPE_4 . METHOD_4 ( getEntity ( ) ) ) (  VAR_2 . METHOD_3 ( ) . setSelectedItem ( getEntity ( ) ) )  VAR_2 . METHOD_3 ( ) . setSelectedItem ( getEntity ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME vds ) NAME vds ( INIT = new org.ovirt.engine.core.common.businessentities.VDS ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.VDS ( ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ( INIT = null ) INIT = null ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ( INIT = null ) INIT = null ) VAR VAR (  VAR_1 . METHOD_2 ( vds ) )  VAR_1 . METHOD_2 ( vds ) (  VAR_1 . METHOD_3 ( VAR_2 ) )  VAR_1 . METHOD_3 ( VAR_2 ) (  VAR_1 . METHOD_4 ( vm ) )  VAR_1 . METHOD_4 ( vm ) ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . METHOD_5 ( ) ) INIT = VAR_1 . METHOD_5 ( ) ) VAR VAR (  TYPE_2 . assertEquals ( vds , VAR_3 ) )  TYPE_2 . assertEquals ( vds , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ) TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME a ) NAME a ( IN VAR_2 . Linq < org.ovirt.engine.core.common.businessentities.StorageDomain > METHOD_2 ( METHOD_3 ( ) ) ) IN VAR_2 . Linq < org.ovirt.engine.core.common.businessentities.StorageDomain > METHOD_2 ( METHOD_3 ( ) ) ( BLOCK BLOCK ( IF IF ( COND ( a . METHOD_4 ( ) ) == ( VAR_3 ) ) COND ( a . METHOD_4 ( ) ) == ( VAR_3 ) ( THEN THEN (  VAR_1 . append ( a . METHOD_5 ( ) ) . append ( STRING_1 ) )  VAR_1 . append ( a . METHOD_5 ( ) ) . append ( STRING_1 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_1 . METHOD_6 ( 0 , ( ( VAR_1 . length ( ) ) - 2 ) ) ; )  return VAR_1 . METHOD_6 ( 0 , ( ( VAR_1 . length ( ) ) - 2 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2.VdcBllMessages ) TYPE TYPE_2.VdcBllMessages ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . validate ( ) ) INIT = VAR_1 . validate ( ) ) VAR VAR (  TYPE_3 . METHOD_2 ( TYPE_4 . METHOD_3 ( STRING_1 , VAR_2 , VAR_3 ) , VAR_3 . METHOD_4 ( VAR_2 . name ( ) ) ) )  TYPE_3 . METHOD_2 ( TYPE_4 . METHOD_3 ( STRING_1 , VAR_2 , VAR_3 ) , VAR_3 . METHOD_4 ( VAR_2 . name ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_2 . METHOD_2 ( ) ) COND VAR_2 . METHOD_2 ( ) ( THEN THEN (  TYPE_1 . METHOD_3 ( ) )  TYPE_1 . METHOD_3 ( ) ) THEN THEN ) IF IF (  org.ovirt.engine.ui.frontend.Frontend . METHOD_4 ( null ) )  org.ovirt.engine.ui.frontend.Frontend . METHOD_4 ( null ) (  METHOD_5 ( ) . METHOD_6 ( ) )  METHOD_5 ( ) . METHOD_6 ( ) (  TYPE_2 . METHOD_7 ( ) )  TYPE_2 . METHOD_7 ( ) (  VAR_3 . METHOD_8 ( ) )  VAR_3 . METHOD_8 ( ) (  super . METHOD_9 ( ) )  super . METHOD_9 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME vds ) NAME vds ( INIT = new org.ovirt.engine.core.common.businessentities.VDS ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.VDS ( ) ) VAR VAR (  vds . METHOD_2 ( new org.ovirt.engine.core.compat . Version ( STRING_1 ) ) )  vds . METHOD_2 ( new org.ovirt.engine.core.compat . Version ( STRING_1 ) ) (  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_3 ( ) )  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_3 ( ) (  TYPE_1 . when ( VAR_1 . get ( org.mockito.Mockito . any ( VAR_2 . Guid class ) ) ) . thenReturn ( vds ) )  TYPE_1 . when ( VAR_1 . get ( org.mockito.Mockito . any ( VAR_2 . Guid class ) ) ) . thenReturn ( vds ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_1 ) ( target ) ) ) INIT = ( ( TYPE_1 ) ( target ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( returnValue ) ) ) INIT = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( returnValue ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> ( NAME VAR_3 ) NAME VAR_3 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ) TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME a ) NAME a ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK ( IF IF ( COND ( a . METHOD_1 ( ) ) == ( VAR_4 ) ) COND ( a . METHOD_1 ( ) ) == ( VAR_4 ) ( THEN THEN (  VAR_3 . add ( a ) )  VAR_3 . add ( a ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  VAR_1 . METHOD_2 ( VAR_3 ) )  VAR_1 . METHOD_2 ( VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.uicommonweb.models.EntityModel ) TYPE org.ovirt.engine.ui.uicommonweb.models.EntityModel ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME object ) NAME object ( IN VAR_3 . METHOD_2 ( ) ) IN VAR_3 . METHOD_2 ( ) ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VmTemplate ) TYPE org.ovirt.engine.core.common.businessentities.VmTemplate ( NAME template ) NAME template ( INIT = ( ( org.ovirt.engine.core.common.businessentities.VmTemplate ) ( object ) ) ) INIT = ( ( org.ovirt.engine.core.common.businessentities.VmTemplate ) ( object ) ) ) VAR VAR ( IF IF ( COND ! ( METHOD_3 ( ( ( template . METHOD_4 ( ) ) + VAR_1 ) , template . METHOD_5 ( ) , VAR_2 ) ) ) COND ! ( METHOD_3 ( ( ( template . METHOD_4 ( ) ) + VAR_1 ) , template . METHOD_5 ( ) , VAR_2 ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME sender ) NAME sender ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME args ) NAME args ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_3 ) ( args ) ) . VAR_3 ) INIT = ( ( TYPE_3 ) ( args ) ) . VAR_3 ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_4> ) TYPE java.util.List<TYPE_4> ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_5 . get ( VAR_2 ) ) INIT = VAR_5 . get ( VAR_2 ) ) VAR VAR ( IF IF ( COND VAR_4 != null ) COND VAR_4 != null ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME item ) NAME item ( IN VAR_4 ) IN VAR_4 ( BLOCK BLOCK (  item . METHOD_2 ( ) )  item . METHOD_2 ( ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME status ) NAME status ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR (  VAR_2 . add ( METHOD_2 ( STRING_2 , VAR_4 , VAR_5 , INT_1 , VAR_3 , METHOD_3 ( 1 ) , status ) ) )  VAR_2 . add ( METHOD_2 ( STRING_2 , VAR_4 , VAR_5 , INT_1 , VAR_3 , METHOD_3 ( 1 ) , status ) ) (  VAR_2 . add ( METHOD_2 ( STRING_3 , VAR_6 , VAR_7 , INT_1 , STRING_4 , METHOD_3 ( 2 ) , status ) ) )  VAR_2 . add ( METHOD_2 ( STRING_3 , VAR_6 , VAR_7 , INT_1 , STRING_4 , METHOD_3 ( 2 ) , status ) ) (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ) TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . getVdsGroup ( ) ) INIT = TYPE_1 . getVdsGroup ( ) ) VAR VAR ( IF IF ( COND VAR_1 . METHOD_2 ( ) ) COND VAR_1 . METHOD_2 ( ) ( THEN THEN (  METHOD_3 ( ) )  METHOD_3 ( ) ) THEN THEN ) IF IF ( IF IF ( COND VAR_1 . METHOD_4 ( ) ) COND VAR_1 . METHOD_4 ( ) ( THEN THEN (  METHOD_5 ( ) )  METHOD_5 ( ) ) THEN THEN ) IF IF (  TYPE_1 . METHOD_6 ( true ) )  TYPE_1 . METHOD_6 ( true ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.Object[] ) TYPE java.lang.Object[] ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( java.lang.Object [ ] ) ( target ) ) ) INIT = ( ( java.lang.Object [ ] ) ( target ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_1 ) ( VAR_1 [ 0 ] ) ) ) INIT = ( ( TYPE_1 ) ( VAR_1 [ 0 ] ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME model ) NAME model ( INIT = ( ( TYPE_2 ) ( VAR_1 [ 1 ] ) ) ) INIT = ( ( TYPE_2 ) ( VAR_1 [ 1 ] ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDSGroup> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDSGroup> ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( returnValue ) ) ) INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( returnValue ) ) ) VAR VAR (  METHOD_2 ( VAR_3 , model ) )  METHOD_2 ( VAR_3 , model ) (  VAR_2 . METHOD_3 ( ) )  VAR_2 . METHOD_3 ( ) (  VAR_2 . METHOD_4 ( ) )  VAR_2 . METHOD_4 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VM> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VM> ( NAME vms ) NAME vms ( INIT = VAR_2 . Linq < org.ovirt.engine.core.common.businessentities.VM > METHOD_2 ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) ) INIT = VAR_2 . Linq < org.ovirt.engine.core.common.businessentities.VM > METHOD_2 ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) ) VAR VAR (  return vms ; )  return vms ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > vms = VAR_2 . Linq < org.ovirt.engine.core.common.businessentities.VM > METHOD_2 ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) ; return vms ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > vms = VAR_2 . Linq < org.ovirt.engine.core.common.businessentities.VM > METHOD_2 ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) ; return vms ; } } (  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_3 , new TYPE_2 ( ( STRING_1 + VAR_1 ) , VAR_4 . VM ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_3 , new TYPE_2 ( ( STRING_1 + VAR_1 ) , VAR_4 . VM ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<TYPE_2,TYPE_3> ) RETURN TYPE_1<TYPE_2,TYPE_3> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME returnValue ) NAME returnValue ( INIT = METHOD_2 ( VAR_1 , new TYPE_4 ( VAR_2 . getId ( ) , VAR_3 . METHOD_3 ( ) , VAR_3 . METHOD_4 ( ) , VAR_3 . getName ( ) ) ) ) INIT = METHOD_2 ( VAR_1 , new TYPE_4 ( VAR_2 . getId ( ) , VAR_3 . METHOD_3 ( ) , VAR_3 . METHOD_4 ( ) , VAR_3 . getName ( ) ) ) ) VAR VAR (  return new TYPE_1 < TYPE_2 , TYPE_3 > ( VAR_3 , returnValue ) ; )  return new TYPE_1 < TYPE_2 , TYPE_3 > ( VAR_3 , returnValue ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME id ) NAME id ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source ; )  return source ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } (  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_2 ( VAR_2 . METHOD_3 ( ) ) . addValue ( STRING_1 , VAR_1 ) . addValue ( STRING_2 , VAR_2 . METHOD_4 ( ) ) . addValue ( STRING_3 , null ) . addValue ( STRING_4 , VAR_2 . METHOD_5 ( ) ) . addValue ( STRING_5 , null ) . addValue ( STRING_6 , null ) ) INIT = METHOD_2 ( VAR_2 . METHOD_3 ( ) ) . addValue ( STRING_1 , VAR_1 ) . addValue ( STRING_2 , VAR_2 . METHOD_4 ( ) ) . addValue ( STRING_3 , null ) . addValue ( STRING_4 , VAR_2 . METHOD_5 ( ) ) . addValue ( STRING_5 , null ) . addValue ( STRING_6 , null ) ) VAR VAR (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ) != null ) COND ( TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ) != null ( THEN THEN ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME tempVar ) NAME tempVar ( INIT = new TYPE_2 ( TYPE_1 . METHOD_2 ( ) . getId ( ) , TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) . getValue ( ) ) ) INIT = new TYPE_2 ( TYPE_1 . METHOD_2 ( ) . getId ( ) , TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) . getValue ( ) ) ) VAR VAR (  tempVar . METHOD_4 ( true ) )  tempVar . METHOD_4 ( true ) (  TYPE_3 . getInstance ( ) . METHOD_5 ( ) . METHOD_6 ( VAR_1 , tempVar ) )  TYPE_3 . getInstance ( ) . METHOD_5 ( ) . METHOD_6 ( VAR_1 , tempVar ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME entity ) NAME entity ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 . METHOD_2 ( ) ) COND VAR_1 . METHOD_2 ( ) ( THEN THEN ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_3 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ) INIT = TYPE_3 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ) VAR VAR (  entity . METHOD_5 ( TYPE_4 . map ( VAR_2 , null ) ) )  entity . METHOD_5 ( TYPE_4 . map ( VAR_2 , null ) ) ) THEN THEN ) IF IF ( IF IF ( COND VAR_1 . METHOD_6 ( ) ) COND VAR_1 . METHOD_6 ( ) ( THEN THEN ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( STRING_1 . equals ( VAR_1 . getValue ( ) ) ) ? null : VAR_1 . getValue ( ) ) INIT = ( STRING_1 . equals ( VAR_1 . getValue ( ) ) ) ? null : VAR_1 . getValue ( ) ) VAR VAR (  entity . METHOD_7 ( VAR_3 ) )  entity . METHOD_7 ( VAR_3 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1.ValidationResult ) RETURN TYPE_1.ValidationResult ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( METHOD_2 ( ) ) == ( VAR_1 ) ) COND ( METHOD_2 ( ) ) == ( VAR_1 ) ( THEN THEN ( IF IF ( COND ! ( TYPE_2 . METHOD_3 ( version ) ) ) COND ! ( TYPE_2 . METHOD_3 ( version ) ) ( THEN THEN (  return new TYPE_1 . ValidationResult ( VAR_2 , TYPE_3 . METHOD_4 ( ) ) ; )  return new TYPE_1 . ValidationResult ( VAR_2 , TYPE_3 . METHOD_4 ( ) ) ; ) THEN THEN ( ELSE ELSE ( IF IF ( COND METHOD_5 ( ) . METHOD_6 ( ) ) COND METHOD_5 ( ) . METHOD_6 ( ) ( THEN THEN (  return new TYPE_1 . ValidationResult ( VAR_3 ) ; )  return new TYPE_1 . ValidationResult ( VAR_3 ) ; ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ) THEN THEN ) IF IF (  return VAR_4 ; )  return VAR_4 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND source == null ) COND source == null ( THEN THEN (  return new java.util.HashMap < org.ovirt.engine.core.common.businessentities.network.Network , TYPE_1 < org.ovirt.engine.core.compat.Guid > > ( ) ; )  return new java.util.HashMap < org.ovirt.engine.core.common.businessentities.network.Network , TYPE_1 < org.ovirt.engine.core.compat.Guid > > ( ) ; ) THEN THEN ) IF IF (  return source ; )  return source ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.HashMap < org.ovirt.engine.core.common.businessentities.network.Network , TYPE_1 < org.ovirt.engine.core.compat.Guid > > ( ) ; } return source ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.HashMap < org.ovirt.engine.core.common.businessentities.network.Network , TYPE_1 < org.ovirt.engine.core.compat.Guid > > ( ) ; } return source ; } } (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . add ( VAR_2 ) )  VAR_1 . add ( VAR_2 ) (  VAR_3 . METHOD_2 ( METHOD_3 ( null ) ) )  VAR_3 . METHOD_2 ( METHOD_3 ( null ) ) (  METHOD_4 ( VAR_4 ) )  METHOD_4 ( VAR_4 ) (  VAR_5 . METHOD_5 ( ) )  VAR_5 . METHOD_5 ( ) ( TRY TRY ( BLOCK BLOCK (  METHOD_6 ( ) )  METHOD_6 ( ) (  METHOD_7 ( STRING_1 ) )  METHOD_7 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_6 ) NAME VAR_6 ( BLOCK BLOCK (  METHOD_8 ( VAR_6 , VAR_7 , new TYPE_2 ( VAR_8 ) ) )  METHOD_8 ( VAR_6 , VAR_7 , new TYPE_2 ( VAR_8 ) ) ) BLOCK BLOCK ) CATCH CATCH ( FINALLY FINALLY (  VAR_1 . METHOD_9 ( ) )  VAR_1 . METHOD_9 ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME pool ) NAME pool ( INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . get ( VAR_1 . getId ( ) ) ) INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . get ( VAR_1 . getId ( ) ) ) VAR VAR (  pool . METHOD_3 ( null ) )  pool . METHOD_3 ( null ) (  org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_4 ( pool ) )  org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_4 ( pool ) (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . getParameters ( ) . METHOD_4 ( ) ) )  TYPE_1 . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . getParameters ( ) . METHOD_4 ( ) ) ( IF IF ( COND TYPE_1 . getParameters ( ) . METHOD_4 ( ) . METHOD_5 ( ) ) COND TYPE_1 . getParameters ( ) . METHOD_4 ( ) . METHOD_5 ( ) ( THEN THEN (  TYPE_1 . METHOD_2 ( ) . METHOD_6 ( TYPE_1 . METHOD_7 ( ) , METHOD_8 ( ) . getId ( ) ) )  TYPE_1 . METHOD_2 ( ) . METHOD_6 ( TYPE_1 . METHOD_7 ( ) , METHOD_8 ( ) . getId ( ) ) ) THEN THEN ) IF IF (  TYPE_2 . METHOD_9 ( TYPE_1 . METHOD_7 ( ) , METHOD_8 ( ) ) )  TYPE_2 . METHOD_9 ( TYPE_1 . METHOD_7 ( ) , METHOD_8 ( ) ) (  TYPE_1 . METHOD_10 ( true ) )  TYPE_1 . METHOD_10 ( true ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( ) . METHOD_3 ( TYPE_2 . METHOD_4 ( ) ) ) INIT = TYPE_2 . METHOD_2 ( ) . METHOD_3 ( TYPE_2 . METHOD_4 ( ) ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( IF IF ( COND VAR_2 . METHOD_5 ( ) . equals ( TYPE_2 . getParameters ( ) . METHOD_6 ( ) . METHOD_5 ( ) ) ) COND VAR_2 . METHOD_5 ( ) . equals ( TYPE_2 . getParameters ( ) . METHOD_6 ( ) . METHOD_5 ( ) ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1.ValidationResult ) RETURN TYPE_1.ValidationResult ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( VAR_2 . METHOD_2 ( ) ) == null ) ? vm . METHOD_3 ( ) : VAR_2 . METHOD_2 ( ) ? VAR_3 : VAR_4 ) INIT = ( ( VAR_2 . METHOD_2 ( ) ) == null ) ? vm . METHOD_3 ( ) : VAR_2 . METHOD_2 ( ) ? VAR_3 : VAR_4 ) VAR VAR ( IF IF ( COND ! ( TYPE_3 . METHOD_4 ( vm . METHOD_5 ( ) , vm . METHOD_6 ( ) , VAR_1 ) ) ) COND ! ( TYPE_3 . METHOD_4 ( vm . METHOD_5 ( ) , vm . METHOD_6 ( ) , VAR_1 ) ) ( THEN THEN (  return new TYPE_1 . ValidationResult ( VAR_5 ) ; )  return new TYPE_1 . ValidationResult ( VAR_5 ) ; ) THEN THEN ) IF IF (  return VAR_6 ; )  return VAR_6 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME user ) NAME user ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_2 . METHOD_2 ( STRING_1 ) )  VAR_2 . METHOD_2 ( STRING_1 ) ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = null ) INIT = null ) VAR VAR ( IF IF ( COND user != null ) COND user != null ( THEN THEN (  VAR_3 = ( ( VAR_1 + STRING_2 ) + user ) + STRING_3 )  VAR_3 = ( ( VAR_1 + STRING_2 ) + user ) + STRING_3 ) THEN THEN ( ELSE ELSE (  VAR_3 = VAR_1 + STRING_3 )  VAR_3 = VAR_1 + STRING_3 ) ELSE ELSE ) IF IF ( VAR VAR ( TYPE char[] ) TYPE char[] ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_5 . METHOD_3 ( VAR_3 ) ) INIT = VAR_5 . METHOD_3 ( VAR_3 ) ) VAR VAR (  return VAR_4 == null ? STRING_4 : new java.lang.String ( VAR_4 ) ; )  return VAR_4 == null ? STRING_4 : new java.lang.String ( VAR_4 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1.ValidationResult ) RETURN TYPE_1.ValidationResult ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.DiskImage ) TYPE org.ovirt.engine.core.common.businessentities.DiskImage ( NAME diskImage ) NAME diskImage ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK ( IF IF ( COND ( diskImage . METHOD_2 ( ) ) != VAR_1 ) COND ( diskImage . METHOD_2 ( ) ) != VAR_1 ( THEN THEN (  return new TYPE_1 . ValidationResult ( VAR_3 , java.lang.String . METHOD_3 ( STRING_1 , diskImage . METHOD_2 ( ) . name ( ) ) ) ; )  return new TYPE_1 . ValidationResult ( VAR_3 , java.lang.String . METHOD_3 ( STRING_1 , diskImage . METHOD_2 ( ) . name ( ) ) ) ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_4 ; )  return VAR_4 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE char[] ) TYPE char[] ( NAME VAR_1 ) NAME VAR_1 ( INIT = new char [ ( VAR_2 < java.lang.Integer > METHOD_2 ( VAR_3 ) ) + 1 ] ) INIT = new char [ ( VAR_2 < java.lang.Integer > METHOD_2 ( VAR_3 ) ) + 1 ] ) VAR VAR (  TYPE_1 . METHOD_3 ( VAR_1 , CHAR_1 ) )  TYPE_1 . METHOD_3 ( VAR_1 , CHAR_1 ) (  VAR_4 . METHOD_4 ( INT_1 ) )  VAR_4 . METHOD_4 ( INT_1 ) (  VAR_4 . METHOD_5 ( new java.lang.String ( VAR_1 ) ) )  VAR_4 . METHOD_5 ( new java.lang.String ( VAR_1 ) ) (  dao . METHOD_6 ( VAR_4 ) )  dao . METHOD_6 ( VAR_4 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME result ) NAME result ( INIT = dao . get ( VAR_4 . METHOD_7 ( ) ) ) INIT = dao . get ( VAR_4 . METHOD_7 ( ) ) ) VAR VAR (  TYPE_3 . METHOD_8 ( result ) )  TYPE_3 . METHOD_8 ( result ) (  TYPE_3 . METHOD_9 ( result . METHOD_10 ( ) . METHOD_11 ( STRING_1 ) ) )  TYPE_3 . METHOD_9 ( result . METHOD_10 ( ) . METHOD_11 ( STRING_1 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( STRING_1 , VAR_2 , VAR_3 , INT_1 , 0 ) ) INIT = METHOD_2 ( STRING_1 , VAR_2 , VAR_3 , INT_1 , 0 ) ) VAR VAR (  parameters . METHOD_3 ( VAR_1 ) )  parameters . METHOD_3 ( VAR_1 ) ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> ( NAME VAR_4 ) NAME VAR_4 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR (  org.mockito.Mockito.when ( VAR_5 . get ( VAR_1 . METHOD_4 ( ) ) ) . thenReturn ( VAR_6 ) )  org.mockito.Mockito.when ( VAR_5 . get ( VAR_1 . METHOD_4 ( ) ) ) . thenReturn ( VAR_6 ) (  org.mockito.Mockito.doReturn ( VAR_4 ) . when ( command ) . METHOD_5 ( VAR_1 . METHOD_4 ( ) ) )  org.mockito.Mockito.doReturn ( VAR_4 ) . when ( command ) . METHOD_5 ( VAR_1 . METHOD_4 ( ) ) (  TYPE_2 . METHOD_6 ( command ) )  TYPE_2 . METHOD_6 ( command ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Boolean ) RETURN java.lang.Boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( VAR_1 , new TYPE_2 ( VAR_2 . METHOD_4 ( ) ) ) )  TYPE_1 . getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( VAR_1 , new TYPE_2 ( VAR_2 . METHOD_4 ( ) ) ) ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.network ) TYPE org.ovirt.engine.core.common.businessentities.network ( NAME VAR_3 ) NAME VAR_3 ( IN METHOD_5 ( ) ) IN METHOD_5 ( ) ( BLOCK BLOCK (  TYPE_3 . METHOD_6 ( METHOD_7 ( ) , VAR_3 ) )  TYPE_3 . METHOD_6 ( METHOD_7 ( ) , VAR_3 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return java.lang.Boolean . TRUE ; )  return java.lang.Boolean . TRUE ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 . METHOD_2 ( ) ) == null ) COND ( VAR_1 . METHOD_2 ( ) ) == null ( THEN THEN ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_3 ( VAR_1 ) ) INIT = TYPE_2 . METHOD_3 ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN (  VAR_1 . setId ( VAR_2 . METHOD_2 ( ) ) )  VAR_1 . setId ( VAR_2 . METHOD_2 ( ) ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( STRING_1 ) )  VAR_1 . METHOD_2 ( STRING_1 ) ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ) TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ( NAME cluster ) NAME cluster ( IN METHOD_3 ( ) . METHOD_4 ( ) ) IN METHOD_3 ( ) . METHOD_4 ( ) ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  METHOD_5 ( cluster ) )  METHOD_5 ( cluster ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_1 . METHOD_6 ( STRING_2 , cluster . METHOD_7 ( ) , e ) )  VAR_1 . METHOD_6 ( STRING_2 , cluster . METHOD_7 ( ) , e ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME sender ) NAME sender ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME args ) NAME args ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( false ) )  METHOD_2 ( false ) ( IF IF ( COND ( ( METHOD_3 ( ) . getEntity ( ) ) == null ) || ( ( ( ( java.lang.String ) ( METHOD_3 ( ) . getEntity ( ) ) ) . METHOD_4 ( ) . length ( ) ) == 0 ) ) COND ( ( METHOD_3 ( ) . getEntity ( ) ) == null ) || ( ( ( ( java.lang.String ) ( METHOD_3 ( ) . getEntity ( ) ) ) . METHOD_4 ( ) . length ( ) ) == 0 ) ( THEN THEN (  METHOD_5 ( ) . setEntity ( STRING_1 ) )  METHOD_5 ( ) . setEntity ( STRING_1 ) (  return ; )  return ; ) THEN THEN ) IF IF (  METHOD_6 ( ( ( java.lang.String ) ( METHOD_3 ( ) . getEntity ( ) ) ) ) )  METHOD_6 ( ( ( java.lang.String ) ( METHOD_3 ( ) . getEntity ( ) ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( METHOD_2 ( ) ) == null ) COND ( METHOD_2 ( ) ) == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE java.util.ArrayList<TYPE_1.VdcActionParametersBase> ) TYPE java.util.ArrayList<TYPE_1.VdcActionParametersBase> ( NAME list ) NAME list ( INIT = new java.util.ArrayList < TYPE_1 . VdcActionParametersBase > ( ) ) INIT = new java.util.ArrayList < TYPE_1 . VdcActionParametersBase > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME item ) NAME item ( IN METHOD_2 ( ) ) IN METHOD_2 ( ) ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_2 ) ( item ) ) ) INIT = ( ( TYPE_2 ) ( item ) ) ) VAR VAR (  list . add ( new TYPE_3 ( VAR_1 . getId ( ) , false , false ) ) )  list . add ( new TYPE_3 ( VAR_1 . getId ( ) , false , false ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_3 ( VAR_2 , list ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_3 ( VAR_2 , list ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_2 == ( VAR_4 ) ) COND VAR_2 == ( VAR_4 ) ( THEN THEN (  return ( ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) + VAR_3 ) >= ( VAR_1 . METHOD_2 ( ) . METHOD_4 ( ) ) ; )  return ( ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) + VAR_3 ) >= ( VAR_1 . METHOD_2 ( ) . METHOD_4 ( ) ) ; ) THEN THEN ) IF IF ( IF IF ( COND VAR_2 == ( VAR_5 ) ) COND VAR_2 == ( VAR_5 ) ( THEN THEN (  return ( ( VAR_1 . METHOD_2 ( ) . METHOD_5 ( ) ) + VAR_3 ) >= ( VAR_1 . METHOD_2 ( ) . METHOD_6 ( ) ) ; )  return ( ( VAR_1 . METHOD_2 ( ) . METHOD_5 ( ) ) + VAR_3 ) >= ( VAR_1 . METHOD_2 ( ) . METHOD_6 ( ) ) ; ) THEN THEN ) IF IF (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( STRING_1 ) )  VAR_1 . METHOD_2 ( STRING_1 ) (  TYPE_1 . METHOD_3 ( STRING_1 , VAR_1 . METHOD_4 ( ) ) )  TYPE_1 . METHOD_3 ( STRING_1 , VAR_1 . METHOD_4 ( ) ) (  dao . METHOD_5 ( VAR_1 ) )  dao . METHOD_5 ( VAR_1 ) (  TYPE_1 . assertEquals ( STRING_1 , VAR_1 . METHOD_4 ( ) ) )  TYPE_1 . assertEquals ( STRING_1 , VAR_1 . METHOD_4 ( ) ) (  VAR_1 . METHOD_6 ( true ) )  VAR_1 . METHOD_6 ( true ) (  dao . METHOD_5 ( VAR_1 ) )  dao . METHOD_5 ( VAR_1 ) (  TYPE_1 . assertEquals ( true , VAR_1 . METHOD_7 ( ) ) )  TYPE_1 . assertEquals ( true , VAR_1 . METHOD_7 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR (  VAR_1 . add ( STRING_1 ) )  VAR_1 . add ( STRING_1 ) (  org.mockito.Mockito . METHOD_2 ( VAR_2 ) )  org.mockito.Mockito . METHOD_2 ( VAR_2 ) (  org.mockito.Mockito.when ( VAR_2 . METHOD_3 ( VAR_3 ) ) . thenReturn ( VAR_1 ) )  org.mockito.Mockito.when ( VAR_2 . METHOD_3 ( VAR_3 ) ) . thenReturn ( VAR_1 ) (  METHOD_4 ( 1 ) )  METHOD_4 ( 1 ) (  METHOD_5 ( METHOD_6 ( ) ) )  METHOD_5 ( METHOD_6 ( ) ) ( VAR VAR ( TYPE java.util.List<TYPE_1.Network> ) TYPE java.util.List<TYPE_1.Network> ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_7 ( ) ) INIT = METHOD_7 ( ) ) VAR VAR (  TYPE_2 . METHOD_8 ( VAR_4 , TYPE_3 . METHOD_9 ( Network : : getId ) ) )  TYPE_2 . METHOD_8 ( VAR_4 , TYPE_3 . METHOD_9 ( Network : : getId ) ) (  METHOD_10 ( VAR_4 ) )  METHOD_10 ( VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1<org.ovirt.engine.core.compat.Guid> ) RETURN TYPE_1<org.ovirt.engine.core.compat.Guid> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<TYPE_2.DiskImage> ) TYPE TYPE_1<TYPE_2.DiskImage> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<org.ovirt.engine.core.compat.Guid> ) TYPE TYPE_1<org.ovirt.engine.core.compat.Guid> ( NAME result ) NAME result ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE TYPE_2.DiskImage ) TYPE TYPE_2.DiskImage ( NAME diskImage ) NAME diskImage ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  result . add ( diskImage . METHOD_2 ( ) ) )  result . add ( diskImage . METHOD_2 ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) (  dao = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) )  dao = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) (  cluster = new org.ovirt.engine.core.compat.Guid ( STRING_1 ) )  cluster = new org.ovirt.engine.core.compat.Guid ( STRING_1 ) (  VAR_2 = new org.ovirt.engine.core.compat.Guid ( STRING_2 ) )  VAR_2 = new org.ovirt.engine.core.compat.Guid ( STRING_2 ) (  VAR_3 = new org.ovirt.engine.core.common.businessentities . Network ( ) )  VAR_3 = new org.ovirt.engine.core.common.businessentities . Network ( ) (  VAR_3 . METHOD_4 ( STRING_3 ) )  VAR_3 . METHOD_4 ( STRING_3 ) (  VAR_3 . METHOD_5 ( STRING_4 ) )  VAR_3 . METHOD_5 ( STRING_4 ) (  VAR_3 . METHOD_6 ( VAR_2 ) )  VAR_3 . METHOD_6 ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME disk ) NAME disk ) VAR VAR ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( VAR_1 . isEmpty ( ) ) ? constants . METHOD_2 ( ) : VAR_1 . get ( 0 ) . METHOD_3 ( ) ) INIT = ( VAR_1 . isEmpty ( ) ) ? constants . METHOD_2 ( ) : VAR_1 . get ( 0 ) . METHOD_3 ( ) ) VAR VAR (  disk . METHOD_4 ( ) . setEntity ( VAR_2 ) )  disk . METHOD_4 ( ) . setEntity ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME pool ) NAME pool ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) . getStoragePoolId ( ) ) INIT = METHOD_2 ( ) . getStoragePoolId ( ) ) VAR VAR ( IF IF ( COND pool != null ) COND pool != null ( THEN THEN (  pool . setId ( VAR_1 ) )  pool . setId ( VAR_1 ) ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = org.mockito.Mockito . METHOD_3 ( VAR_3 class ) ) INIT = org.mockito.Mockito . METHOD_3 ( VAR_3 class ) ) VAR VAR (  org.mockito.Mockito.when ( VAR_2 . get ( VAR_1 , METHOD_4 ( ) . METHOD_5 ( ) , METHOD_2 ( ) . METHOD_6 ( ) ) ) . thenReturn ( pool ) )  org.mockito.Mockito.when ( VAR_2 . get ( VAR_1 , METHOD_4 ( ) . METHOD_5 ( ) , METHOD_2 ( ) . METHOD_6 ( ) ) ) . thenReturn ( pool ) (  org.mockito.Mockito.when ( METHOD_7 ( ) . METHOD_8 ( ) . METHOD_9 ( ) ) . thenReturn ( VAR_2 ) )  org.mockito.Mockito.when ( METHOD_7 ( ) . METHOD_8 ( ) . METHOD_9 ( ) ) . thenReturn ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( null ) ) INIT = METHOD_2 ( null ) ) VAR VAR (  METHOD_3 ( VAR_2 [ INT_1 ] , 1 ) )  METHOD_3 ( VAR_2 [ INT_1 ] , 1 ) (  METHOD_4 ( STRING_1 , null , VAR_3 , true ) )  METHOD_4 ( STRING_1 , null , VAR_3 , true ) (  VAR_4 . METHOD_5 ( VAR_1 ) )  VAR_4 . METHOD_5 ( VAR_1 ) (  METHOD_6 ( METHOD_7 ( ) ) )  METHOD_6 ( METHOD_7 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_3 . METHOD_2 ( VAR_1 ) )  VAR_3 . METHOD_2 ( VAR_1 ) ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  VAR_3 . METHOD_3 ( METHOD_4 ( VAR_2 ) ) )  VAR_3 . METHOD_3 ( METHOD_4 ( VAR_2 ) ) ) THEN THEN ( ELSE ELSE (  VAR_3 . METHOD_3 ( null ) )  VAR_3 . METHOD_3 ( null ) ) ELSE ELSE ) IF IF (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  VAR_2 . METHOD_3 ( false ) )  VAR_2 . METHOD_3 ( false ) (  VAR_3 . METHOD_3 ( false ) )  VAR_3 . METHOD_3 ( false ) (  METHOD_4 ( ) . METHOD_5 ( METHOD_6 ( VAR_1 ) ) )  METHOD_4 ( ) . METHOD_5 ( METHOD_6 ( VAR_1 ) ) (  METHOD_7 ( ) . METHOD_5 ( java.lang.String.valueOf ( VAR_1 . METHOD_8 ( VAR_4 ) ) ) )  METHOD_7 ( ) . METHOD_5 ( java.lang.String.valueOf ( VAR_1 . METHOD_8 ( VAR_4 ) ) ) (  METHOD_9 ( ) . METHOD_5 ( java.lang.String.valueOf ( VAR_1 . METHOD_8 ( VAR_5 ) ) ) )  METHOD_9 ( ) . METHOD_5 ( java.lang.String.valueOf ( VAR_1 . METHOD_8 ( VAR_5 ) ) ) (  VAR_6 . METHOD_3 ( true ) )  VAR_6 . METHOD_3 ( true ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME params ) NAME params ( INIT = new TYPE_1 ( TYPE_2 . METHOD_2 ( ) , VAR_1 ) ) INIT = new TYPE_1 ( TYPE_2 . METHOD_2 ( ) , VAR_1 ) ) VAR VAR (  params . METHOD_3 ( TYPE_2 . METHOD_4 ( ) ) )  params . METHOD_3 ( TYPE_2 . METHOD_4 ( ) ) (  params . METHOD_5 ( TYPE_2 . getParameters ( ) . METHOD_6 ( ) ) )  params . METHOD_5 ( TYPE_2 . getParameters ( ) . METHOD_6 ( ) ) (  params . METHOD_7 ( TYPE_2 . getParameters ( ) ) )  params . METHOD_7 ( TYPE_2 . getParameters ( ) ) (  return params ; )  return params ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_2 ( ) . get ( VAR_3 ) ) INIT = VAR_2 . METHOD_2 ( ) . get ( VAR_3 ) ) VAR VAR (  TYPE_2 . METHOD_3 ( VAR_1 ) )  TYPE_2 . METHOD_3 ( VAR_1 ) ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ( INIT = VAR_1 . METHOD_4 ( ) ) INIT = VAR_1 . METHOD_4 ( ) ) VAR VAR (  TYPE_2 . METHOD_5 ( name . equals ( VAR_2 . METHOD_6 ( VAR_4 , VAR_5 . VM ) ) ) )  TYPE_2 . METHOD_5 ( name . equals ( VAR_2 . METHOD_6 ( VAR_4 , VAR_5 . VM ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ( INIT = ( ( TYPE_1 ) ( target ) ) ) INIT = ( ( TYPE_1 ) ( target ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Disk> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Disk> ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Disk > ) ( returnValue ) ) ) INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Disk > ) ( returnValue ) ) ) VAR VAR (  TYPE_2 . METHOD_2 ( model , VAR_1 , VAR_2 ) )  TYPE_2 . METHOD_2 ( model , VAR_1 , VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  map = new TYPE_1 ( ) )  map = new TYPE_1 ( ) (  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_2 < TYPE_3 > ( params ) ) )  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_2 < TYPE_3 > ( params ) ) (  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( cmd ) . METHOD_3 ( ) )  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( cmd ) . METHOD_3 ( ) (  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( cmd ) . METHOD_4 ( ) )  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( cmd ) . METHOD_4 ( ) (  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( cmd ) . METHOD_5 ( ) )  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( cmd ) . METHOD_5 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1.AddVmCommand<TYPE_2> ) RETURN TYPE_1.AddVmCommand<TYPE_2> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ( INIT = METHOD_2 ( VAR_1 , VAR_2 ) ) INIT = METHOD_2 ( VAR_1 , VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1.AddVmCommand<TYPE_2> ) TYPE TYPE_1.AddVmCommand<TYPE_2> ( NAME cmd ) NAME cmd ( INIT = METHOD_3 ( vm ) ) INIT = METHOD_3 ( vm ) ) VAR VAR (  TYPE_3 . METHOD_4 ( cmd ) )  TYPE_3 . METHOD_4 ( cmd ) (  org.mockito.Mockito.doReturn ( METHOD_5 ( ) ) . when ( cmd ) . METHOD_6 ( ) )  org.mockito.Mockito.doReturn ( METHOD_5 ( ) ) . when ( cmd ) . METHOD_6 ( ) (  org.mockito.Mockito.doReturn ( METHOD_7 ( ) ) . when ( cmd ) . METHOD_8 ( ) )  org.mockito.Mockito.doReturn ( METHOD_7 ( ) ) . when ( cmd ) . METHOD_8 ( ) (  return cmd ; )  return cmd ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  command = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , true ) ) ) )  command = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , true ) ) ) (  METHOD_4 ( ) )  METHOD_4 ( ) (  METHOD_5 ( VAR_1 ) )  METHOD_5 ( VAR_1 ) (  METHOD_6 ( ) )  METHOD_6 ( ) (  METHOD_7 ( VAR_2 . Collections < java.lang.String > METHOD_8 ( ) ) )  METHOD_7 ( VAR_2 . Collections < java.lang.String > METHOD_8 ( ) ) (  METHOD_9 ( true ) )  METHOD_9 ( true ) (  METHOD_10 ( true ) )  METHOD_10 ( true ) (  TYPE_3 . METHOD_11 ( command ) )  TYPE_3 . METHOD_11 ( command ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) (  VAR_1 = org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) )  VAR_1 = org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) (  VAR_2 = org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) )  VAR_2 = org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) (  VAR_3 = org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) )  VAR_3 = org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) (  VAR_4 = org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) )  VAR_4 = org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) (  VAR_5 = new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( TYPE_1 . METHOD_3 ( VAR_1 , VAR_2 ) ) )  VAR_5 = new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( TYPE_1 . METHOD_3 ( VAR_1 , VAR_2 ) ) (  METHOD_4 ( ) )  METHOD_4 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ) TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( ( org.ovirt.engine.core.common.businessentities.VDSGroup ) ( VAR_1 ) ) ) INIT = ( ( org.ovirt.engine.core.common.businessentities.VDSGroup ) ( VAR_1 ) ) ) VAR VAR (  METHOD_2 ( ) . METHOD_3 ( ( ( VAR_3 != null ) && ( ( VAR_3 . METHOD_4 ( ) ) != null ) ) ) )  METHOD_2 ( ) . METHOD_3 ( ( ( VAR_3 != null ) && ( ( VAR_3 . METHOD_4 ( ) ) != null ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN java.util.List<TYPE_1.Disk> ) RETURN java.util.List<TYPE_1.Disk> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1.Disk> ) TYPE java.util.List<TYPE_1.Disk> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList ( vm . METHOD_2 ( ) . METHOD_3 ( ) ) ) INIT = new java.util.ArrayList ( vm . METHOD_2 ( ) . METHOD_3 ( ) ) ) VAR VAR (  TYPE_2 . METHOD_4 ( VAR_1 , new TYPE_3 ( ) ) )  TYPE_2 . METHOD_4 ( VAR_1 , new TYPE_3 ( ) ) (  TYPE_2 . METHOD_4 ( VAR_1 , TYPE_2 . METHOD_5 ( new TYPE_4 ( ) ) ) )  TYPE_2 . METHOD_4 ( VAR_1 , TYPE_2 . METHOD_5 ( new TYPE_4 ( ) ) ) (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1.DiskImage ) RETURN TYPE_1.DiskImage ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.DiskImage ) TYPE TYPE_1.DiskImage ( NAME i ) NAME i ( INIT = new TYPE_1 . DiskImage ( ) ) INIT = new TYPE_1 . DiskImage ( ) ) VAR VAR (  i . METHOD_2 ( ( ( VAR_1 ) + ( VAR_2 ) ) ) )  i . METHOD_2 ( ( ( VAR_1 ) + ( VAR_2 ) ) ) (  i . METHOD_3 ( ( ( ( ( VAR_3 ) * INT_1 ) * INT_1 ) * INT_1 ) ) )  i . METHOD_3 ( ( ( ( ( VAR_3 ) * INT_1 ) * INT_1 ) * INT_1 ) ) (  i . METHOD_4 ( org.ovirt.engine.core.compat.Guid . METHOD_5 ( ) ) )  i . METHOD_4 ( org.ovirt.engine.core.compat.Guid . METHOD_5 ( ) ) (  i . METHOD_6 ( new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( TYPE_2 . METHOD_7 ( VAR_4 ) ) ) )  i . METHOD_6 ( new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( TYPE_2 . METHOD_7 ( VAR_4 ) ) ) (  return i ; )  return i ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME id ) NAME id ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND source == null ) COND source == null ( THEN THEN (  return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ( ) ; )  return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ( ) ; ) THEN THEN ) IF IF (  return source ; )  return source ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ( ) ; } return source ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ( ) ; } return source ; } } (  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_1 , new TYPE_1 ( id ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_1 , new TYPE_1 ( id ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ) TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . getId ( ) ) INIT = VAR_1 . getId ( ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . METHOD_2 ( ) . getValue ( ) ) INIT = VAR_1 . METHOD_2 ( ) . getValue ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME params ) NAME params ( INIT = new TYPE_1 ( VAR_2 , VAR_3 ) ) INIT = new TYPE_1 ( VAR_2 , VAR_3 ) ) VAR VAR (  params . METHOD_3 ( TYPE_2 . getParameters ( ) . METHOD_4 ( ) ) )  params . METHOD_3 ( TYPE_2 . getParameters ( ) . METHOD_4 ( ) ) (  return TYPE_2 . METHOD_5 ( ) . METHOD_6 ( VAR_4 , params ) . getSucceeded ( ) ; )  return TYPE_2 . METHOD_5 ( ) . METHOD_6 ( VAR_4 , params ) . getSucceeded ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ( INIT = ( ( TYPE_1 ) ( target ) ) ) INIT = ( ( TYPE_1 ) ( target ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDSGroup> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDSGroup> ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( returnValue ) ) ) INIT = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( returnValue ) ) ) VAR VAR (  VAR_1 = TYPE_2 . METHOD_1 ( VAR_1 ) )  VAR_1 = TYPE_2 . METHOD_1 ( VAR_1 ) (  model . METHOD_2 ( model , VAR_2 , VAR_1 , null ) )  model . METHOD_2 ( model , VAR_2 , VAR_1 , null ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 != null ) && ( ! ( VAR_1 . equals ( VAR_3 ) ) ) ) COND ( VAR_1 != null ) && ( ! ( VAR_1 . equals ( VAR_3 ) ) ) ( THEN THEN ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ) TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ( NAME VAR_4 ) NAME VAR_4 ( INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( VAR_1 ) ) INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_4 != null ) COND VAR_4 != null ( THEN THEN (  VAR_2 . add ( VAR_4 . METHOD_4 ( ) ) )  VAR_2 . add ( VAR_4 . METHOD_4 ( ) ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( TYPE_2 . METHOD_2 ( ) , getStoragePoolId ( ) , TYPE_2 . getVdsGroup ( ) . METHOD_3 ( ) , VAR_2 ) ) INIT = new TYPE_1 ( TYPE_2 . METHOD_2 ( ) , getStoragePoolId ( ) , TYPE_2 . getVdsGroup ( ) . METHOD_3 ( ) , VAR_2 ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME iface ) NAME iface ( IN VAR_3 . METHOD_4 ( ) ) IN VAR_3 . METHOD_4 ( ) ( BLOCK BLOCK (  VAR_1 . METHOD_5 ( iface , TYPE_2 . METHOD_6 ( ) . METHOD_7 ( ) ) )  VAR_1 . METHOD_5 ( iface , TYPE_2 . METHOD_6 ( ) . METHOD_7 ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  VAR_1 . METHOD_8 ( TYPE_2 . METHOD_9 ( ) ) )  VAR_1 . METHOD_8 ( TYPE_2 . METHOD_9 ( ) ) (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( METHOD_2 ( ) ) ) INIT = new TYPE_1 ( METHOD_2 ( ) ) ) VAR VAR (  return ( ( validate ( VAR_1 . METHOD_3 ( ) ) ) && ( validate ( VAR_1 . METHOD_4 ( ) ) ) ) && ( validate ( METHOD_5 ( ) ) ) ; )  return ( ( validate ( VAR_1 . METHOD_3 ( ) ) ) && ( validate ( VAR_1 . METHOD_4 ( ) ) ) ) && ( validate ( METHOD_5 ( ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( java.util.ArrayList < TYPE_1 > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ) INIT = ( ( java.util.ArrayList < TYPE_1 > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ) VAR VAR (  VAR_2 = new java.util.HashMap < > ( ) )  VAR_2 = new java.util.HashMap < > ( ) ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  VAR_2 . put ( VAR_3 . getId ( ) , VAR_3 ) )  VAR_2 . put ( VAR_3 . getId ( ) , VAR_3 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF (  METHOD_1 ( ) )  METHOD_1 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.lang.Boolean ) RETURN java.lang.Boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND TYPE_1 . METHOD_2 ( TYPE_2 . getVm ( ) . METHOD_3 ( ) ) ) COND TYPE_1 . METHOD_2 ( TYPE_2 . getVm ( ) . METHOD_3 ( ) ) ( THEN THEN (  return ( TYPE_2 . getVm ( ) . METHOD_4 ( ) ) != null ? TYPE_2 . getVm ( ) . METHOD_4 ( ) : TYPE_2 . getVdsGroup ( ) . METHOD_5 ( ) ; )  return ( TYPE_2 . getVm ( ) . METHOD_4 ( ) ) != null ? TYPE_2 . getVm ( ) . METHOD_4 ( ) : TYPE_2 . getVdsGroup ( ) . METHOD_5 ( ) ; ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ( INIT = TYPE_1 . METHOD_2 ( ) ) INIT = TYPE_1 . METHOD_2 ( ) ) VAR VAR (  org.mockito.Mockito.when ( VAR_1 . METHOD_3 ( TYPE_2 . any ( VAR_2 . Guid class ) , TYPE_2 . METHOD_4 ( ) ) ) . thenReturn ( TYPE_3 . METHOD_5 ( vm ) ) )  org.mockito.Mockito.when ( VAR_1 . METHOD_3 ( TYPE_2 . any ( VAR_2 . Guid class ) , TYPE_2 . METHOD_4 ( ) ) ) . thenReturn ( TYPE_3 . METHOD_5 ( vm ) ) (  TYPE_4 . METHOD_6 ( validator . METHOD_7 ( vm ) , TYPE_5 . METHOD_8 ( ) ) )  TYPE_4 . METHOD_6 ( validator . METHOD_7 ( vm ) , TYPE_5 . METHOD_8 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( 1 , false ) )  METHOD_2 ( 1 , false ) (  METHOD_2 ( 1 , true ) )  METHOD_2 ( 1 , true ) (  METHOD_3 ( VAR_1 [ 1 ] ) )  METHOD_3 ( VAR_1 [ 1 ] ) (  METHOD_4 ( METHOD_5 ( VAR_2 , VAR_3 class , new java.lang.String [ ] { } , new java.lang.Object [ ] { } , true , true ) ) )  METHOD_4 ( METHOD_5 ( VAR_2 , VAR_3 class , new java.lang.String [ ] { } , new java.lang.Object [ ] { } , true , true ) ) (  METHOD_6 ( resource . METHOD_7 ( getModel ( 0 ) ) , 0 ) )  METHOD_6 ( resource . METHOD_7 ( getModel ( 0 ) ) , 0 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 < TYPE_2 > ( new TYPE_2 ( VAR_1 ) ) ) )  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 < TYPE_2 > ( new TYPE_2 ( VAR_1 ) ) ) (  METHOD_3 ( cmd ) )  METHOD_3 ( cmd ) (  METHOD_4 ( cmd , false ) )  METHOD_4 ( cmd , false ) (  cmd . METHOD_5 ( ) )  cmd . METHOD_5 ( ) (  TYPE_3 . assertEquals ( cmd . METHOD_6 ( ) , VAR_2 ) )  TYPE_3 . assertEquals ( cmd . METHOD_6 ( ) , VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( VAR_1 . getId ( ) ) . addValue ( STRING_1 , VAR_1 . METHOD_3 ( ) ) . addValue ( STRING_2 , VAR_1 . METHOD_4 ( ) ) . addValue ( STRING_3 , TYPE_3 . METHOD_5 ( ) . METHOD_6 ( VAR_1 . METHOD_7 ( ) ) ) ) INIT = METHOD_2 ( VAR_1 . getId ( ) ) . addValue ( STRING_1 , VAR_1 . METHOD_3 ( ) ) . addValue ( STRING_2 , VAR_1 . METHOD_4 ( ) ) . addValue ( STRING_3 , TYPE_3 . METHOD_5 ( ) . METHOD_6 ( VAR_1 . METHOD_7 ( ) ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . METHOD_8 ( ) ) INIT = VAR_1 . METHOD_8 ( ) ) VAR VAR (  METHOD_9 ( VAR_2 , ( VAR_3 == null ? new TYPE_4 ( ) : VAR_3 ) ) )  METHOD_9 ( VAR_2 , ( VAR_3 == null ? new TYPE_4 ( ) : VAR_3 ) ) (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<TYPE_1> ) TYPE java.util.ArrayList<TYPE_1> ( NAME models ) NAME models ( INIT = new java.util.ArrayList < TYPE_1 > ( ) ) INIT = new java.util.ArrayList < TYPE_1 > ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  models . add ( VAR_1 ) )  models . add ( VAR_1 ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_3 ( ) ) INIT = new TYPE_3 ( ) ) VAR VAR (  models . add ( VAR_2 ) )  models . add ( VAR_2 ) ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_4 ( ) ) INIT = new TYPE_4 ( ) ) VAR VAR (  models . add ( VAR_3 ) )  models . add ( VAR_3 ) (  TYPE_5 . METHOD_2 ( VAR_4 , models ) )  TYPE_5 . METHOD_2 ( VAR_4 , models ) (  return models ; )  return models ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VmTemplate ) TYPE org.ovirt.engine.core.common.businessentities.VmTemplate ( NAME template ) NAME template ( INIT = ( ( org.ovirt.engine.core.common.businessentities.VmTemplate ) ( getModel ( ) . METHOD_2 ( ) . getSelectedItem ( ) ) ) ) INIT = ( ( org.ovirt.engine.core.common.businessentities.VmTemplate ) ( getModel ( ) . METHOD_2 ( ) . getSelectedItem ( ) ) ) ) VAR VAR (  METHOD_3 ( template ) )  METHOD_3 ( template ) (  METHOD_4 ( template . METHOD_5 ( ) ) )  METHOD_4 ( template . METHOD_5 ( ) ) (  METHOD_6 ( template . METHOD_7 ( ) ) )  METHOD_6 ( template . METHOD_7 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ) TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ( NAME cluster ) NAME cluster ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  log . METHOD_2 ( STRING_1 , cluster . METHOD_3 ( ) ) )  log . METHOD_2 ( STRING_1 , cluster . METHOD_3 ( ) ) ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDS> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDS> ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_4 ( ) . METHOD_5 ( cluster . getId ( ) ) ) INIT = METHOD_4 ( ) . METHOD_5 ( cluster . getId ( ) ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_6 ( ) . METHOD_7 ( cluster . getId ( ) ) ) INIT = METHOD_6 ( ) . METHOD_7 ( cluster . getId ( ) ) ) VAR VAR ( IF IF ( COND VAR_2 == null ) COND VAR_2 == null ( THEN THEN (  log . METHOD_2 ( STRING_2 , cluster . METHOD_3 ( ) ) )  log . METHOD_2 ( STRING_2 , cluster . METHOD_3 ( ) ) (  return ; )  return ; ) THEN THEN ) IF IF (  METHOD_8 ( cluster , VAR_2 , VAR_1 ) )  METHOD_8 ( cluster , VAR_2 , VAR_1 ) (  METHOD_9 ( cluster , VAR_2 , VAR_1 ) )  METHOD_9 ( cluster , VAR_2 , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = dao . METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( VAR_2 ) , VAR_3 ) ) INIT = dao . METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( VAR_2 ) , VAR_3 ) ) VAR VAR (  TYPE_2 . METHOD_4 ( VAR_1 ) )  TYPE_2 . METHOD_4 ( VAR_1 ) (  TYPE_2 . assertEquals ( 1 , VAR_1 . size ( ) ) )  TYPE_2 . assertEquals ( 1 , VAR_1 . size ( ) ) (  METHOD_5 ( VAR_1 . get ( 0 ) ) )  METHOD_5 ( VAR_1 . get ( 0 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( METHOD_3 ( ) ) )  METHOD_2 ( METHOD_3 ( ) ) (  METHOD_4 ( ) )  METHOD_4 ( ) (  METHOD_5 ( 0 ) )  METHOD_5 ( 0 ) (  METHOD_6 ( ) )  METHOD_6 ( ) (  METHOD_7 ( VAR_1 , VAR_2 class , new java.lang.String [ ] { STRING_1 , STRING_2 } , new java.lang.Object [ ] { VAR_3 [ 0 ] , java.lang.Boolean . TRUE } , true , true ) )  METHOD_7 ( VAR_1 , VAR_2 class , new java.lang.String [ ] { STRING_1 , STRING_2 } , new java.lang.Object [ ] { VAR_3 [ 0 ] , java.lang.Boolean . TRUE } , true , true ) ( STATIC-BLOCK STATIC-BLOCK (  METHOD_10 ( true ) )  METHOD_10 ( true ) ) STATIC-BLOCK STATIC-BLOCK (  METHOD_8 ( VAR_4 . METHOD_9 ( VAR_3 [ 0 ] . toString ( ) , new TYPE_1 ( ) { { METHOD_10 ( true ) ; } } ) ) )  METHOD_8 ( VAR_4 . METHOD_9 ( VAR_3 [ 0 ] . toString ( ) , new TYPE_1 ( ) { { METHOD_10 ( true ) ; } } ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.uicommonweb.UICommand ) TYPE org.ovirt.engine.ui.uicommonweb.UICommand ( NAME command ) NAME command ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  super . METHOD_1 ( command ) )  super . METHOD_1 ( command ) ( IF IF ( COND command == ( METHOD_2 ( ) ) ) COND command == ( METHOD_2 ( ) ) ( THEN THEN (  METHOD_3 ( ) )  METHOD_3 ( ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND command == ( METHOD_4 ( ) ) ) COND command == ( METHOD_4 ( ) ) ( THEN THEN (  METHOD_5 ( ) )  METHOD_5 ( ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND command == ( METHOD_6 ( ) ) ) COND command == ( METHOD_6 ( ) ) ( THEN THEN (  METHOD_7 ( ) )  METHOD_7 ( ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND TYPE_1 . METHOD_8 ( command . getName ( ) , STRING_1 ) ) COND TYPE_1 . METHOD_8 ( command . getName ( ) , STRING_1 ) ( THEN THEN (  METHOD_9 ( ) )  METHOD_9 ( ) ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1<TYPE_2> ) RETURN TYPE_1<TYPE_2> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_3 < TYPE_2 > ( ) ) INIT = new TYPE_3 < TYPE_2 > ( ) ) VAR VAR ( IF IF ( COND ( METHOD_2 ( ) ) != null ) COND ( METHOD_2 ( ) ) != null ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME item ) NAME item ( IN METHOD_2 ( ) ) IN METHOD_2 ( ) ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME a ) NAME a ( INIT = ( ( TYPE_4 ) ( item ) ) ) INIT = ( ( TYPE_4 ) ( item ) ) ) VAR VAR (  VAR_1 . add ( a . METHOD_3 ( ) ) )  VAR_1 . add ( a . METHOD_3 ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN org.ovirt.engine.core.common.businessentities.VDS ) RETURN org.ovirt.engine.core.common.businessentities.VDS ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME to ) NAME to ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME VAR_1 ) NAME VAR_1 ( INIT = new org.ovirt.engine.core.common.businessentities.VDS ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.VDS ( ) ) VAR VAR (  VAR_1 . setId ( to . getId ( ) ) )  VAR_1 . setId ( to . getId ( ) ) (  VAR_1 . METHOD_2 ( to . METHOD_3 ( ) ) )  VAR_1 . METHOD_2 ( to . METHOD_3 ( ) ) (  VAR_1 . METHOD_4 ( to . METHOD_5 ( ) ) )  VAR_1 . METHOD_4 ( to . METHOD_5 ( ) ) (  VAR_1 . METHOD_6 ( to . METHOD_7 ( ) ) )  VAR_1 . METHOD_6 ( to . METHOD_7 ( ) ) (  VAR_1 . METHOD_8 ( to . METHOD_9 ( ) ) )  VAR_1 . METHOD_8 ( to . METHOD_9 ( ) ) (  VAR_1 . METHOD_10 ( to . METHOD_11 ( ) ) )  VAR_1 . METHOD_10 ( to . METHOD_11 ( ) ) (  VAR_1 . METHOD_12 ( to . METHOD_13 ( ) ) )  VAR_1 . METHOD_12 ( to . METHOD_13 ( ) ) (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( ( VAR_1 . getStatus ( ) ) == ( VAR_2 ) ) && ( VAR_3 . METHOD_2 ( VAR_1 ) ) ) COND ( ( VAR_1 . getStatus ( ) ) == ( VAR_2 ) ) && ( VAR_3 . METHOD_2 ( VAR_1 ) ) ( THEN THEN (  VAR_4 . METHOD_3 ( VAR_5 , VAR_1 ) )  VAR_4 . METHOD_3 ( VAR_5 , VAR_1 ) (  VAR_6 = true )  VAR_6 = true (  VAR_7 = true )  VAR_7 = true (  VAR_8 . METHOD_4 ( STRING_1 , VAR_1 . getId ( ) , VAR_1 . METHOD_5 ( ) ) )  VAR_8 . METHOD_4 ( STRING_1 , VAR_1 . getId ( ) , VAR_1 . METHOD_5 ( ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.HashMap<java.lang.Integer,java.lang.String> ) TYPE java.util.HashMap<java.lang.Integer,java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . getInstance ( ) . get ( VAR_2 class ) . METHOD_2 ( ) ) INIT = TYPE_1 . getInstance ( ) . get ( VAR_2 class ) . METHOD_2 ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_2<java.lang.Integer,java.lang.String> ) TYPE TYPE_2<java.lang.Integer,java.lang.String> ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_1 . METHOD_3 ( ) ) IN VAR_1 . METHOD_3 ( ) ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_4 . METHOD_4 ( VAR_3 . getValue ( ) ) ) INIT = TYPE_4 . METHOD_4 ( VAR_3 . getValue ( ) ) ) VAR VAR ( IF IF ( COND VAR_4 != null ) COND VAR_4 != null ( THEN THEN (  VAR_5 . put ( VAR_3 . METHOD_5 ( ) , VAR_4 ) )  VAR_5 . put ( VAR_3 . METHOD_5 ( ) , VAR_4 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.uicommonweb.models.EntityModel ) TYPE org.ovirt.engine.ui.uicommonweb.models.EntityModel ( NAME object ) NAME object ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_1 ) ( object . getEntity ( ) ) ) ) INIT = ( ( TYPE_1 ) ( object . getEntity ( ) ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2.Disk ) TYPE TYPE_2.Disk ( NAME disk ) NAME disk ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = disk . METHOD_3 ( ) ) INIT = disk . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( disk . METHOD_4 ( ) ) == ( VAR_4 ) ) INIT = ( disk . METHOD_4 ( ) ) == ( VAR_4 ) ) VAR VAR (  return ( ! VAR_2 ) && ( ! VAR_3 ) ; )  return ( ! VAR_2 ) && ( ! VAR_3 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 = new TYPE_1 ( ) )  VAR_1 = new TYPE_1 ( ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  VAR_2 . METHOD_2 ( VAR_3 . METHOD_3 ( ) ) )  VAR_2 . METHOD_2 ( VAR_3 . METHOD_3 ( ) ) (  VAR_4 = new TYPE_3 ( VAR_2 , VAR_1 ) )  VAR_4 = new TYPE_3 ( VAR_2 , VAR_1 ) (  VAR_4 . METHOD_4 ( VAR_5 . METHOD_5 ( VAR_3 . METHOD_6 ( ) ) ) )  VAR_4 . METHOD_4 ( VAR_5 . METHOD_5 ( VAR_3 . METHOD_6 ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) (  dao = VAR_1 . METHOD_2 ( ) )  dao = VAR_1 . METHOD_2 ( ) (  VAR_2 = VAR_1 . METHOD_3 ( ) )  VAR_2 = VAR_1 . METHOD_3 ( ) (  VAR_3 = VAR_2 . get ( STRING_1 ) )  VAR_3 = VAR_2 . get ( STRING_1 ) (  VAR_4 = new TYPE_1 ( ) )  VAR_4 = new TYPE_1 ( ) (  VAR_4 . METHOD_4 ( STRING_2 ) )  VAR_4 . METHOD_4 ( STRING_2 ) (  VAR_4 . METHOD_5 ( VAR_5 ) )  VAR_4 . METHOD_5 ( VAR_5 ) (  VAR_6 = dao . get ( new TYPE_2 ( STRING_3 , VAR_3 . METHOD_6 ( ) ) ) )  VAR_6 = dao . get ( new TYPE_2 ( STRING_3 , VAR_3 . METHOD_6 ( ) ) ) (  VAR_7 = new TYPE_3 ( VAR_8 , VAR_3 . METHOD_6 ( ) ) )  VAR_7 = new TYPE_3 ( VAR_8 , VAR_3 . METHOD_6 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_1 ( ) )  METHOD_1 ( ) ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) INIT = ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) VAR VAR (  getModel ( ) . METHOD_2 ( ) . setEntity ( ( ! ( VAR_1 . isEmpty ( ) ) ) ) )  getModel ( ) . METHOD_2 ( ) . setEntity ( ( ! ( VAR_1 . isEmpty ( ) ) ) ) (  METHOD_3 ( ) )  METHOD_3 ( ) (  METHOD_4 ( VAR_2 ) )  METHOD_4 ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  return TYPE_1 . METHOD_2 ( TYPE_2 . getVm ( ) , TYPE_2 . getReturnValue ( ) . METHOD_3 ( ) , TYPE_2 . getVm ( ) . getStoragePoolId ( ) , VAR_1 , METHOD_4 ( ) , METHOD_4 ( ) , METHOD_4 ( ) , METHOD_4 ( ) , false , true , true , null ) ; )  return TYPE_1 . METHOD_2 ( TYPE_2 . getVm ( ) , TYPE_2 . getReturnValue ( ) . METHOD_3 ( ) , TYPE_2 . getVm ( ) . getStoragePoolId ( ) , VAR_1 , METHOD_4 ( ) , METHOD_4 ( ) , METHOD_4 ( ) , METHOD_4 ( ) , false , true , true , null ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.HashMap<java.lang.String,java.lang.Object> ) RETURN java.util.HashMap<java.lang.String,java.lang.Object> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.HashMap<java.lang.String,java.lang.Object> ) TYPE java.util.HashMap<java.lang.String,java.lang.Object> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.HashMap < > ( ) ) INIT = new java.util.HashMap < > ( ) ) VAR VAR (  VAR_1 . put ( VAR_2 , model . name ( ) ) )  VAR_1 . put ( VAR_2 , model . name ( ) ) (  VAR_1 . put ( VAR_3 , action . name ( ) . METHOD_2 ( ) ) )  VAR_1 . put ( VAR_3 , action . name ( ) . METHOD_2 ( ) ) (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME event ) NAME event ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_2 ( ) ) INIT = VAR_2 . METHOD_2 ( ) ) VAR VAR (  VAR_3 . setSelectedItem ( VAR_3 . METHOD_3 ( ) . get ( VAR_1 ) ) )  VAR_3 . setSelectedItem ( VAR_3 . METHOD_3 ( ) . get ( VAR_1 ) ) (  VAR_4 . METHOD_4 ( VAR_3 . METHOD_5 ( ) . METHOD_6 ( ) ) )  VAR_4 . METHOD_4 ( VAR_3 . METHOD_5 ( ) . METHOD_6 ( ) ) (  VAR_5 . METHOD_4 ( VAR_3 . METHOD_7 ( ) . METHOD_6 ( ) ) )  VAR_5 . METHOD_4 ( VAR_3 . METHOD_7 ( ) . METHOD_6 ( ) ) (  METHOD_8 ( ) )  METHOD_8 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND TYPE_1 . getInstance ( ) . METHOD_2 ( ) ) COND TYPE_1 . getInstance ( ) . METHOD_2 ( ) ( THEN THEN ( VAR VAR ( TYPE java.util.List<TYPE_2<org.ovirt.engine.core.common.businessentities.VDS>> ) TYPE java.util.List<TYPE_2<org.ovirt.engine.core.common.businessentities.VDS>> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_3 . getInstance ( ) . METHOD_3 ( STRING_1 , METHOD_4 ( ) ) ) INIT = TYPE_3 . getInstance ( ) . METHOD_3 ( STRING_1 , METHOD_4 ( ) ) ) VAR VAR ( IF IF ( COND ( VAR_1 != null ) && ( ( VAR_1 . size ( ) ) > 0 ) ) COND ( VAR_1 != null ) && ( ( VAR_1 . size ( ) ) > 0 ) ( THEN THEN (  getTable ( ) . METHOD_5 ( new TYPE_4 < org.ovirt.engine.core.common.businessentities.VDS > ( VAR_2 . METHOD_6 ( ) , VAR_1 ) ) )  getTable ( ) . METHOD_5 ( new TYPE_4 < org.ovirt.engine.core.common.businessentities.VDS > ( VAR_2 . METHOD_6 ( ) , VAR_1 ) ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( true , false ) )  METHOD_2 ( true , false ) (  METHOD_3 ( ) )  METHOD_3 ( ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = org.mockito.Mockito . METHOD_4 ( VAR_2 class ) ) INIT = org.mockito.Mockito . METHOD_4 ( VAR_2 class ) ) VAR VAR (  org.mockito.Mockito.when ( VAR_1 . get ( TYPE_2 . any ( VAR_3 . Guid class ) ) ) . thenReturn ( TYPE_3 . METHOD_5 ( ) ) )  org.mockito.Mockito.when ( VAR_1 . get ( TYPE_2 . any ( VAR_3 . Guid class ) ) ) . thenReturn ( TYPE_3 . METHOD_5 ( ) ) (  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( cmd ) . METHOD_6 ( ) )  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( cmd ) . METHOD_6 ( ) (  TYPE_4 . METHOD_7 ( cmd . METHOD_8 ( ) ) )  TYPE_4 . METHOD_7 ( cmd . METHOD_8 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( getEntity ( ) . METHOD_2 ( ) ) != null ) ? getEntity ( ) . METHOD_2 ( ) : getEntity ( ) . METHOD_3 ( ) ) INIT = ( ( getEntity ( ) . METHOD_2 ( ) ) != null ) ? getEntity ( ) . METHOD_2 ( ) : getEntity ( ) . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . equals ( TYPE_3 . METHOD_4 ( getEntity ( ) . METHOD_5 ( ) , getEntity ( ) . METHOD_6 ( ) ) ) ) INIT = TYPE_2 . equals ( TYPE_3 . METHOD_4 ( getEntity ( ) . METHOD_5 ( ) , getEntity ( ) . METHOD_6 ( ) ) ) ) VAR VAR (  return ( VAR_1 == ( VAR_3 ) ) && VAR_2 ; )  return ( VAR_1 == ( VAR_3 ) ) && VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.DiskImage ) TYPE TYPE_1.DiskImage ( NAME diskImage ) NAME diskImage ( INIT = new TYPE_1 . DiskImage ( ) ) INIT = new TYPE_1 . DiskImage ( ) ) VAR VAR (  diskImage . METHOD_2 ( new java.util.ArrayList ( TYPE_2 . METHOD_3 ( VAR_1 ) ) ) )  diskImage . METHOD_2 ( new java.util.ArrayList ( TYPE_2 . METHOD_3 ( VAR_1 ) ) ) ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ( INIT = new org.ovirt.engine.core.common.businessentities.VM ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.VM ( ) ) VAR VAR (  vm . METHOD_4 ( VAR_2 ) )  vm . METHOD_4 ( VAR_2 ) (  vm . METHOD_5 ( VAR_3 ) )  vm . METHOD_5 ( VAR_3 ) (  org.mockito.Mockito.doReturn ( METHOD_6 ( true ) ) . when ( VAR_4 ) . METHOD_7 ( VAR_3 ) )  org.mockito.Mockito.doReturn ( METHOD_6 ( true ) ) . when ( VAR_4 ) . METHOD_7 ( VAR_3 ) (  TYPE_3 . assertEquals ( VAR_5 , VAR_6 . METHOD_8 ( vm , diskImage ) . get ( ) ) )  TYPE_3 . assertEquals ( VAR_5 , VAR_6 . METHOD_8 ( vm , diskImage ) . get ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  parameters = new TYPE_1 ( ) )  parameters = new TYPE_1 ( ) (  parameters . METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) )  parameters . METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) (  parameters . METHOD_4 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) )  parameters . METHOD_4 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) (  command = org.mockito.Mockito . METHOD_5 ( new TYPE_2 < TYPE_1 > ( parameters ) ) )  command = org.mockito.Mockito . METHOD_5 ( new TYPE_2 < TYPE_1 > ( parameters ) ) (  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_6 ( ) )  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_6 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_2 ( VAR_3 ) ) INIT = VAR_2 . METHOD_2 ( VAR_3 ) ) VAR VAR (  TYPE_2 . assertEquals ( VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) , 2 ) )  TYPE_2 . assertEquals ( VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) , 2 ) (  dao . METHOD_5 ( VAR_3 ) )  dao . METHOD_5 ( VAR_3 ) ( VAR VAR ( TYPE java.util.List<TYPE_3> ) TYPE java.util.List<TYPE_3> ( NAME VAR_4 ) NAME VAR_4 ( INIT = dao . METHOD_6 ( VAR_3 ) ) INIT = dao . METHOD_6 ( VAR_3 ) ) VAR VAR (  TYPE_2 . METHOD_7 ( VAR_4 . isEmpty ( ) ) )  TYPE_2 . METHOD_7 ( VAR_4 . isEmpty ( ) ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_2 . METHOD_2 ( VAR_3 ) ) INIT = VAR_2 . METHOD_2 ( VAR_3 ) ) VAR VAR (  TYPE_2 . assertEquals ( VAR_5 . METHOD_3 ( ) . METHOD_4 ( ) , 0 ) )  TYPE_2 . assertEquals ( VAR_5 . METHOD_3 ( ) . METHOD_4 ( ) , 0 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME returnValue ) NAME returnValue ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  returnValue . METHOD_2 ( true ) )  returnValue . METHOD_2 ( true ) (  returnValue . METHOD_3 ( VAR_1 ) )  returnValue . METHOD_3 ( VAR_1 ) (  org.mockito.Mockito.doReturn ( returnValue ) . when ( METHOD_4 ( ) ) . METHOD_5 ( TYPE_2 . METHOD_6 ( VAR_2 ) , TYPE_2 . any ( VAR_3 class ) ) )  org.mockito.Mockito.doReturn ( returnValue ) . when ( METHOD_4 ( ) ) . METHOD_5 ( TYPE_2 . METHOD_6 ( VAR_2 ) , TYPE_2 . any ( VAR_3 class ) ) (  org.mockito.Mockito.when ( VAR_4 . METHOD_7 ( VAR_5 ) ) . thenReturn ( METHOD_8 ( VAR_6 ) ) )  org.mockito.Mockito.when ( VAR_4 . METHOD_7 ( VAR_5 ) ) . thenReturn ( METHOD_8 ( VAR_6 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME type ) NAME type ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map ) TYPE java.util.Map ( NAME <java. ) NAME <java. ) VAR VAR (  java.lang.String > VAR_1 = VAR_2 < java.util.Map < java.lang.String , )  java.lang.String > VAR_1 = VAR_2 < java.util.Map < java.lang.String , (  java.lang.String > > METHOD_2 ( VAR_3 ) )  java.lang.String > > METHOD_2 ( VAR_3 ) ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_1 . get ( type ) ) INIT = VAR_1 . get ( type ) ) VAR VAR ( IF IF ( COND VAR_4 != null ) COND VAR_4 != null ( THEN THEN (  return java.lang.Boolean . METHOD_3 ( VAR_4 ) ; )  return java.lang.Boolean . METHOD_3 ( VAR_4 ) ; ) THEN THEN ) IF IF (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND METHOD_2 ( VAR_1 ) ) COND METHOD_2 ( VAR_1 ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  VAR_2 . log ( VAR_3 , ( STRING_1 + VAR_1 ) , VAR_1 ) )  VAR_2 . log ( VAR_3 , ( STRING_1 + VAR_1 ) , VAR_1 ) (  METHOD_3 ( ) . METHOD_4 ( null ) )  METHOD_3 ( ) . METHOD_4 ( null ) (  METHOD_5 ( VAR_1 ) )  METHOD_5 ( VAR_1 ) (  VAR_4 . METHOD_6 ( ) . onSuccess ( VAR_4 . getModel ( ) , null ) )  VAR_4 . METHOD_6 ( ) . onSuccess ( VAR_4 . getModel ( ) , null ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.Disk ) TYPE TYPE_1.Disk ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  assertEquals ( VAR_2 [ VAR_1 ] . toString ( ) , model . getId ( ) ) )  assertEquals ( VAR_2 [ VAR_1 ] . toString ( ) , model . getId ( ) ) (  METHOD_2 ( model . METHOD_3 ( ) ) )  METHOD_2 ( model . METHOD_3 ( ) ) (  METHOD_4 ( model . METHOD_5 ( ) ) )  METHOD_4 ( model . METHOD_5 ( ) ) (  METHOD_4 ( ( ! ( model . METHOD_6 ( ) ) ) ) )  METHOD_4 ( ( ! ( model . METHOD_6 ( ) ) ) ) (  METHOD_4 ( model . METHOD_7 ( ) ) )  METHOD_4 ( model . METHOD_7 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.Network ) TYPE TYPE_1.Network ( NAME model ) NAME model ( INIT = new TYPE_1 . Network ( ) ) INIT = new TYPE_1 . Network ( ) ) VAR VAR (  model . METHOD_2 ( VAR_1 [ 0 ] ) )  model . METHOD_2 ( VAR_1 [ 0 ] ) (  METHOD_3 ( METHOD_4 ( ) ) )  METHOD_3 ( METHOD_4 ( ) ) ( TRY TRY ( BLOCK BLOCK (  VAR_2 . add ( model ) )  VAR_2 . add ( model ) (  METHOD_5 ( STRING_1 ) )  METHOD_5 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( BLOCK BLOCK (  METHOD_6 ( VAR_3 , STRING_2 , STRING_3 , STRING_4 ) )  METHOD_6 ( VAR_3 , STRING_2 , STRING_3 , STRING_4 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1.VdcActionParametersBase ) RETURN TYPE_1.VdcActionParametersBase ( NAME getParameters ) NAME getParameters ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2.Network ) TYPE TYPE_2.Network ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2.Network ) TYPE TYPE_2.Network ( NAME entity ) NAME entity ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2.Network ) TYPE TYPE_2.Network ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_1 ( VAR_3 , VAR_4 . Network class ) . map ( VAR_1 , entity ) ) INIT = METHOD_1 ( VAR_3 , VAR_4 . Network class ) . map ( VAR_1 , entity ) ) VAR VAR (  return new TYPE_3 ( entity . METHOD_2 ( ) . getValue ( ) , VAR_2 ) ; )  return new TYPE_3 ( entity . METHOD_2 ( ) . getValue ( ) , VAR_2 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND VAR_1 . METHOD_2 ( ) ) COND VAR_1 . METHOD_2 ( ) ( THEN THEN ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 ( VAR_1 ) ) INIT = new TYPE_2 ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_3 . METHOD_3 ( ) ) INIT = TYPE_3 . METHOD_3 ( ) ) VAR VAR ( IF IF ( COND VAR_2 . METHOD_4 ( ) ) COND VAR_2 . METHOD_4 ( ) ( THEN THEN (  METHOD_5 ( ) . METHOD_6 ( VAR_2 . METHOD_7 ( ) , VAR_3 , VAR_1 , true ) )  METHOD_5 ( ) . METHOD_6 ( VAR_2 . METHOD_7 ( ) , VAR_3 , VAR_1 , true ) (  METHOD_8 ( VAR_2 . METHOD_9 ( ) . METHOD_10 ( ) , VAR_3 ) )  METHOD_8 ( VAR_2 . METHOD_9 ( ) . METHOD_10 ( ) , VAR_3 ) ) THEN THEN ( ELSE ELSE (  VAR_4 . METHOD_11 ( STRING_1 , VAR_1 . METHOD_12 ( ) ) )  VAR_4 . METHOD_11 ( STRING_1 , VAR_1 . METHOD_12 ( ) ) ) ELSE ELSE ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_1 ) ( target ) ) ) INIT = ( ( TYPE_1 ) ( target ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.ArrayList<TYPE_2> ) TYPE java.util.ArrayList<TYPE_2> ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( java.util.ArrayList < TYPE_2 > ) ( returnValue ) ) ) INIT = ( ( java.util.ArrayList < TYPE_2 > ) ( returnValue ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( ( VAR_2 . size ( ) ) > 0 ) ? VAR_2 . get ( 0 ) : null ) INIT = ( ( VAR_2 . size ( ) ) > 0 ) ? VAR_2 . get ( 0 ) : null ) VAR VAR (  VAR_1 . METHOD_1 ( VAR_3 ) )  VAR_1 . METHOD_1 ( VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND source == null ) COND source == null ( THEN THEN (  return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ; )  return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ; ) THEN THEN ) IF IF (  return source ; )  return source ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ; } return source ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ; } return source ; } } (  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new TYPE_1 ( VAR_1 ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new TYPE_1 ( VAR_1 ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME version ) NAME version ) VAR VAR ( VAR VAR ( TYPE TYPE_2[] ) TYPE TYPE_2[] ( NAME types ) NAME types ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND TYPE_3 . METHOD_2 ( version , VAR_1 ) ) COND TYPE_3 . METHOD_2 ( version , VAR_1 ) ( THEN THEN (  version . METHOD_3 ( new TYPE_4 ( ) ) )  version . METHOD_3 ( new TYPE_4 ( ) ) ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME type ) NAME type ( IN types ) IN types ( BLOCK BLOCK (  version . METHOD_4 ( ) . METHOD_4 ( ) . add ( type . value ( ) ) )  version . METHOD_4 ( ) . METHOD_4 ( ) . add ( type . value ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_2 . METHOD_2 ( result ) )  TYPE_2 . METHOD_2 ( result ) (  TYPE_2 . METHOD_3 ( result . isEmpty ( ) ) )  TYPE_2 . METHOD_3 ( result . isEmpty ( ) ) ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME domain ) NAME domain ( IN result ) IN result ( BLOCK BLOCK (  TYPE_2 . assertEquals ( VAR_1 , domain . METHOD_4 ( ) ) )  TYPE_2 . assertEquals ( VAR_1 , domain . METHOD_4 ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND VAR_1 . METHOD_2 ( VAR_2 ) ) COND VAR_1 . METHOD_2 ( VAR_2 ) ( THEN THEN ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME pool ) NAME pool ( INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . get ( VAR_2 ) ) INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . get ( VAR_2 ) ) VAR VAR ( IF IF ( COND ( pool != null ) && ( ( pool . METHOD_4 ( ) ) == ( VAR_3 ) ) ) COND ( pool != null ) && ( ( pool . METHOD_4 ( ) ) == ( VAR_3 ) ) ( THEN THEN (  TYPE_2 . METHOD_5 ( pool ) )  TYPE_2 . METHOD_5 ( pool ) ) THEN THEN ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.doReturn ( METHOD_2 ( VAR_1 ) ) . when ( VAR_2 ) . METHOD_3 ( VAR_3 [ 1 ] ) )  org.mockito.Mockito.doReturn ( METHOD_2 ( VAR_1 ) ) . when ( VAR_2 ) . METHOD_3 ( VAR_3 [ 1 ] ) (  METHOD_4 ( ) )  METHOD_4 ( ) (  VAR_4 . METHOD_5 ( ) )  VAR_4 . METHOD_5 ( ) (  org.mockito.Mockito . METHOD_6 ( VAR_5 , org.mockito.Mockito . METHOD_7 ( 2 ) ) . METHOD_8 ( TYPE_1 . any ( ) , TYPE_1 . any ( ) , TYPE_1 . METHOD_9 ( ) ) )  org.mockito.Mockito . METHOD_6 ( VAR_5 , org.mockito.Mockito . METHOD_7 ( 2 ) ) . METHOD_8 ( TYPE_1 . any ( ) , TYPE_1 . any ( ) , TYPE_1 . METHOD_9 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME context ) NAME context ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  context . METHOD_3 ( map , map . getStatus ( ) ) )  context . METHOD_3 ( map , map . getStatus ( ) ) (  map . METHOD_4 ( status ) )  map . METHOD_4 ( status ) (  METHOD_5 ( ) . METHOD_6 ( map . getId ( ) , map . getStatus ( ) ) )  METHOD_5 ( ) . METHOD_6 ( map . getId ( ) , map . getStatus ( ) ) (  METHOD_2 ( ) . METHOD_7 ( ) )  METHOD_2 ( ) . METHOD_7 ( ) (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 = new TYPE_1 < TYPE_2 > ( new TYPE_3 ( ) ) )  VAR_1 = new TYPE_1 < TYPE_2 > ( new TYPE_3 ( ) ) (  VAR_2 = new TYPE_4 ( STRING_1 ) )  VAR_2 = new TYPE_4 ( STRING_1 ) (  VAR_3 = new TYPE_4 ( STRING_1 ) )  VAR_3 = new TYPE_4 ( STRING_1 ) (  VAR_4 = new TYPE_4 ( STRING_2 ) )  VAR_4 = new TYPE_4 ( STRING_2 ) (  VAR_5 = new TYPE_4 ( STRING_2 ) )  VAR_5 = new TYPE_4 ( STRING_2 ) (  VAR_6 = new TYPE_5 ( VAR_7 ) )  VAR_6 = new TYPE_5 ( VAR_7 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1.ValidationResult ) RETURN TYPE_1.ValidationResult ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME value ) NAME value ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.ValidationResult ) TYPE TYPE_1.ValidationResult ( NAME result ) NAME result ( INIT = new TYPE_1 . ValidationResult ( ) ) INIT = new TYPE_1 . ValidationResult ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  new TYPE_2 ( value ) )  new TYPE_2 ( value ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK (  result . METHOD_2 ( false ) )  result . METHOD_2 ( false ) (  result . METHOD_3 ( ) . add ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_4 ( ) ) )  result . METHOD_3 ( ) . add ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_4 ( ) ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME get ) NAME get ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_1 ( VAR_2 , new TYPE_2 ( VAR_3 , true ) ) ) INIT = METHOD_1 ( VAR_2 , new TYPE_2 ( VAR_3 , true ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3.VdcQueryReturnValue ) TYPE TYPE_3.VdcQueryReturnValue ( NAME result ) NAME result ( INIT = runQuery ( VAR_4 , new TYPE_4 ( VAR_3 ) ) ) INIT = runQuery ( VAR_4 , new TYPE_4 ( VAR_3 ) ) ) VAR VAR ( IF IF ( COND ( ( result != null ) && ( result . getSucceeded ( ) ) ) && ( ( result . getReturnValue ( ) ) != null ) ) COND ( ( result != null ) && ( result . getSucceeded ( ) ) ) && ( ( result . getReturnValue ( ) ) != null ) ( THEN THEN (  VAR_1 . METHOD_2 ( ( ( java.lang.String ) ( result . getReturnValue ( ) ) ) ) )  VAR_1 . METHOD_2 ( ( ( java.lang.String ) ( result . getReturnValue ( ) ) ) ) ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME validator ) NAME validator ( INIT = new TYPE_1 ( TYPE_2 . METHOD_2 ( ) ) ) INIT = new TYPE_1 ( TYPE_2 . METHOD_2 ( ) ) ) VAR VAR (  return ( ( validate ( validator . METHOD_3 ( ) ) ) && ( validate ( validator . METHOD_4 ( ) ) ) ) && ( validate ( validator . METHOD_5 ( ) ) ) ; )  return ( ( validate ( validator . METHOD_3 ( ) ) ) && ( validate ( validator . METHOD_4 ( ) ) ) ) && ( validate ( validator . METHOD_5 ( ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN org.ovirt.engine.core.common.businessentities.DiskImage ) RETURN org.ovirt.engine.core.common.businessentities.DiskImage ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  return new org.ovirt.engine.core.common.businessentities.DiskImage ( true , new TYPE_1 ( ) , new TYPE_1 ( ) , INT_1 , STRING_1 , org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) , STRING_2 , org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) , INT_1 , VAR_1 , org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) , VAR_2 , new TYPE_1 ( ) , STRING_3 , VAR_3 . VM , null , null , VAR_4 , false ) ; )  return new org.ovirt.engine.core.common.businessentities.DiskImage ( true , new TYPE_1 ( ) , new TYPE_1 ( ) , INT_1 , STRING_1 , org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) , STRING_2 , org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) , INT_1 , VAR_1 , org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) , VAR_2 , new TYPE_1 ( ) , STRING_3 , VAR_3 . VM , null , null , VAR_4 , false ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME add ) NAME add ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2.Network ) TYPE TYPE_2.Network ( NAME network ) NAME network ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_1 ( network , STRING_1 ) )  METHOD_1 ( network , STRING_1 ) ( IF IF ( COND ! ( network . METHOD_2 ( ) ) ) COND ! ( network . METHOD_2 ( ) ) ( THEN THEN (  network . setId ( METHOD_3 ( network . getName ( ) , VAR_1 ) ) )  network . setId ( METHOD_3 ( network . getName ( ) , VAR_1 ) ) ) THEN THEN ) IF IF ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.network ) TYPE org.ovirt.engine.core.common.businessentities.network ( NAME entity ) NAME entity ( INIT = map ( network ) ) INIT = map ( network ) ) VAR VAR (  return METHOD_4 ( VAR_2 , METHOD_5 ( network , entity ) , new TYPE_3 ( network . getName ( ) ) ) ; )  return METHOD_4 ( VAR_2 , METHOD_5 ( network , entity ) , new TYPE_3 ( network . getName ( ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_2 . METHOD_3 ( VAR_2 ) ) INIT = TYPE_2 . METHOD_3 ( VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ( INIT = ( VAR_1 . METHOD_4 ( ) ) - VAR_3 ) INIT = ( VAR_1 . METHOD_4 ( ) ) - VAR_3 ) VAR VAR ( IF IF ( COND VAR_4 > 0 ) COND VAR_4 > 0 ( THEN THEN ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_5 ) NAME VAR_5 ( INIT = TYPE_3 . METHOD_5 ( VAR_4 , VAR_6 < java.lang.Integer > getValue ( VAR_7 ) ) ) INIT = TYPE_3 . METHOD_5 ( VAR_4 , VAR_6 < java.lang.Integer > getValue ( VAR_7 ) ) ) VAR VAR (  VAR_8 . METHOD_6 ( STRING_1 , VAR_2 , VAR_4 , VAR_5 ) )  VAR_8 . METHOD_6 ( STRING_1 , VAR_2 , VAR_4 , VAR_5 ) (  METHOD_7 ( VAR_2 , VAR_5 ) )  METHOD_7 ( VAR_2 , VAR_5 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 . METHOD_2 ( VAR_2 class ) ) COND VAR_1 . METHOD_2 ( VAR_2 class ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ( INIT = ! ( ( VAR_1 . METHOD_2 ( VAR_4 class ) ) && ( VAR_1 . METHOD_3 ( VAR_4 class ) . value ( ) . METHOD_4 ( STRING_1 ) ) ) ) INIT = ! ( ( VAR_1 . METHOD_2 ( VAR_4 class ) ) && ( VAR_1 . METHOD_3 ( VAR_4 class ) . value ( ) . METHOD_4 ( STRING_1 ) ) ) ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_5 ) NAME VAR_5 ( INIT = ! ( VAR_1 . METHOD_5 ( ) . equals ( VAR_6 class ) ) ) INIT = ! ( VAR_1 . METHOD_5 ( ) . equals ( VAR_6 class ) ) ) VAR VAR (  return VAR_3 && VAR_5 ; )  return VAR_3 && VAR_5 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME add ) NAME add ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME entity ) NAME entity ( INIT = TYPE_4 . map ( VAR_1 , null ) ) INIT = TYPE_4 . map ( VAR_1 , null ) ) VAR VAR ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_1 ( ) ) INIT = METHOD_1 ( ) ) VAR VAR (  VAR_2 . METHOD_2 ( ) . add ( entity . METHOD_3 ( ) ) )  VAR_2 . METHOD_2 ( ) . add ( entity . METHOD_3 ( ) ) (  return METHOD_4 ( VAR_3 , new TYPE_6 ( VAR_2 ) ) ; )  return METHOD_4 ( VAR_3 , new TYPE_6 ( VAR_2 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME vmId ) NAME vmId ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( IF IF ( COND org.ovirt.engine.core.compat.Guid . METHOD_3 ( vmId ) ) COND org.ovirt.engine.core.compat.Guid . METHOD_3 ( vmId ) ( THEN THEN (  METHOD_4 ( ) . setSelectedItem ( VAR_1 ) )  METHOD_4 ( ) . setSelectedItem ( VAR_1 ) ) THEN THEN ( ELSE ELSE (  METHOD_4 ( ) . setSelectedItem ( METHOD_5 ( ) . METHOD_6 ( vmId ) . METHOD_4 ( ) ) )  METHOD_4 ( ) . setSelectedItem ( METHOD_5 ( ) . METHOD_6 ( vmId ) . METHOD_4 ( ) ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR (  VAR_1 . add ( STRING_1 ) )  VAR_1 . add ( STRING_1 ) (  command = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , VAR_1 ) ) ) )  command = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , VAR_1 ) ) ) (  org.mockito.Mockito.doReturn ( vds ) . when ( command ) . METHOD_4 ( ) )  org.mockito.Mockito.doReturn ( vds ) . when ( command ) . METHOD_4 ( ) (  TYPE_3 . METHOD_5 ( command . validate ( ) ) )  TYPE_3 . METHOD_5 ( command . validate ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.Boolean ) TYPE java.lang.Boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( java.lang.Boolean ) ( TYPE_2 . METHOD_2 ( VAR_3 , VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) . toString ( ) ) ) ) ) INIT = ( ( java.lang.Boolean ) ( TYPE_2 . METHOD_2 ( VAR_3 , VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) . toString ( ) ) ) ) ) VAR VAR (  return ( VAR_2 && ( VAR_1 . METHOD_5 ( ) ) ) && ( ! ( VAR_1 . METHOD_6 ( ) ) ) ; )  return ( VAR_2 && ( VAR_1 . METHOD_5 ( ) ) ) && ( ! ( VAR_1 . METHOD_6 ( ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( getParameters ( ) . METHOD_2 ( ) ) != ( VAR_1 ) ) COND ( getParameters ( ) . METHOD_2 ( ) ) != ( VAR_1 ) ( THEN THEN ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_3 ( getParameters ( ) . METHOD_4 ( ) . METHOD_5 ( ) ) ) INIT = TYPE_2 . METHOD_3 ( getParameters ( ) . METHOD_4 ( ) . METHOD_5 ( ) ) ) VAR VAR (  return ( VAR_2 != null ) && ( VAR_2 . METHOD_6 ( ) ) ; )  return ( VAR_2 != null ) && ( VAR_2 . METHOD_6 ( ) ) ; ) THEN THEN ) IF IF (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_6 ) NAME VAR_6 ( INIT = METHOD_2 ( VAR_3 , VAR_2 [ ( i - INT_1 ) ] ) ) INIT = METHOD_2 ( VAR_3 , VAR_2 [ ( i - INT_1 ) ] ) ) VAR VAR ( IF IF ( COND ! ( VAR_4 . METHOD_3 ( VAR_3 ) ) ) COND ! ( VAR_4 . METHOD_3 ( VAR_3 ) ) ( THEN THEN ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_7 ) NAME VAR_7 ( INIT = TYPE_3 . METHOD_4 ( VAR_5 ) ) INIT = TYPE_3 . METHOD_4 ( VAR_5 ) ) VAR VAR (  VAR_4 . METHOD_5 ( VAR_3 , this . VAR_8 . METHOD_6 ( VAR_6 , VAR_1 , VAR_7 ) ) )  VAR_4 . METHOD_5 ( VAR_3 , this . VAR_8 . METHOD_6 ( VAR_6 , VAR_1 , VAR_7 ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( IN VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) IN VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ( BLOCK BLOCK ( IF IF ( COND ! ( TYPE_3 . METHOD_4 ( VAR_2 ) ) ) COND ! ( TYPE_3 . METHOD_4 ( VAR_2 ) ) ( THEN THEN (  VAR_2 . setId ( new TYPE_4 ( org.ovirt.engine.core.compat.Guid . METHOD_5 ( ) , VAR_1 . getId ( ) ) ) )  VAR_2 . setId ( new TYPE_4 ( org.ovirt.engine.core.compat.Guid . METHOD_5 ( ) , VAR_1 . getId ( ) ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_1 . METHOD_6 ( ) ) IN VAR_1 . METHOD_6 ( ) ( BLOCK BLOCK (  VAR_3 . setId ( new TYPE_4 ( org.ovirt.engine.core.compat.Guid . METHOD_5 ( ) , VAR_1 . getId ( ) ) ) )  VAR_3 . setId ( new TYPE_4 ( org.ovirt.engine.core.compat.Guid . METHOD_5 ( ) , VAR_1 . getId ( ) ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source ; )  return source ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new TYPE_1 ( VAR_1 ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new TYPE_1 ( VAR_1 ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VM> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VM> ( NAME vms ) NAME vms ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<java.lang.Boolean,java.util.List<org.ovirt.engine.core.common.businessentities.VM>> ) TYPE java.util.Map<java.lang.Boolean,java.util.List<org.ovirt.engine.core.common.businessentities.VM>> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.HashMap < java.lang.Boolean , java.util.List < org.ovirt.engine.core.common.businessentities.VM > > ( ) ) INIT = new java.util.HashMap < java.lang.Boolean , java.util.List < org.ovirt.engine.core.common.businessentities.VM > > ( ) ) VAR VAR (  VAR_1 . put ( java.lang.Boolean . TRUE , vms ) )  VAR_1 . put ( java.lang.Boolean . TRUE , vms ) (  org.mockito.Mockito.when ( VAR_2 . METHOD_2 ( VAR_3 ) ) . thenReturn ( VAR_1 ) )  org.mockito.Mockito.when ( VAR_2 . METHOD_2 ( VAR_3 ) ) . thenReturn ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3.AuditLogType ) TYPE TYPE_3.AuditLogType ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , VAR_2 . METHOD_3 ( ) ) ) INIT = METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , VAR_2 . METHOD_3 ( ) ) ) VAR VAR ( IF IF ( COND VAR_4 == null ) COND VAR_4 == null ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF (  VAR_1 . METHOD_4 ( VAR_4 ) )  VAR_1 . METHOD_4 ( VAR_4 ) (  VAR_4 . METHOD_5 ( TYPE_4 . METHOD_6 ( VAR_4 . METHOD_7 ( ) , VAR_5 ) ) )  VAR_4 . METHOD_5 ( TYPE_4 . METHOD_6 ( VAR_4 . METHOD_7 ( ) , VAR_5 ) ) (  METHOD_8 ( ) . METHOD_9 ( ) . METHOD_10 ( VAR_4 ) )  METHOD_8 ( ) . METHOD_9 ( ) . METHOD_10 ( VAR_4 ) (  return VAR_4 ; )  return VAR_4 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  vm . METHOD_3 ( METHOD_4 ( ) ) )  vm . METHOD_3 ( METHOD_4 ( ) ) ( IF IF ( COND getParameters ( ) . METHOD_5 ( ) ) COND getParameters ( ) . METHOD_5 ( ) ( THEN THEN (  vm . METHOD_6 ( VAR_1 ) )  vm . METHOD_6 ( VAR_1 ) ) THEN THEN ) IF IF (  org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_7 ( ) . METHOD_8 ( vm . METHOD_9 ( ) ) )  org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_7 ( ) . METHOD_8 ( vm . METHOD_9 ( ) ) (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND source == null ) COND source == null ( THEN THEN (  return new java.util.ArrayList < TYPE_1 > ( ) ; )  return new java.util.ArrayList < TYPE_1 > ( ) ; ) THEN THEN ) IF IF (  return source ; )  return source ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < TYPE_1 > ( ) ; } return source ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < TYPE_1 > ( ) ; } return source ; } } (  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_6 ) NAME VAR_6 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_7 ) NAME VAR_7 ( INIT = new TYPE_1 ( VAR_1 , VAR_3 , vm . getId ( ) , ( VAR_5 ? METHOD_2 ( vm ) : null ) , VAR_4 , VAR_2 , new TYPE_5 ( ) , vm . METHOD_3 ( ) ) ) INIT = new TYPE_1 ( VAR_1 , VAR_3 , vm . getId ( ) , ( VAR_5 ? METHOD_2 ( vm ) : null ) , VAR_4 , VAR_2 , new TYPE_5 ( ) , vm . METHOD_3 ( ) ) ) VAR VAR (  METHOD_4 ( ) . METHOD_5 ( VAR_7 ) )  METHOD_4 ( ) . METHOD_5 ( VAR_7 ) (  VAR_6 . METHOD_6 ( VAR_7 ) )  VAR_6 . METHOD_6 ( VAR_7 ) (  return VAR_7 ; )  return VAR_7 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) ) ) )  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) ) ) (  METHOD_3 ( false ) )  METHOD_3 ( false ) (  TYPE_3 . METHOD_4 ( cmd . validate ( ) ) )  TYPE_3 . METHOD_4 ( cmd . validate ( ) ) (  TYPE_3 . METHOD_5 ( cmd . getReturnValue ( ) . METHOD_6 ( ) . METHOD_7 ( TYPE_4 . toString ( ) ) ) )  TYPE_3 . METHOD_5 ( cmd . getReturnValue ( ) . METHOD_6 ( ) . METHOD_7 ( TYPE_4 . toString ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StoragePool ) TYPE org.ovirt.engine.core.common.businessentities.StoragePool ( NAME pool ) NAME pool ( INIT = new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ) VAR VAR (  pool . setId ( command . getParameters ( ) . getStoragePoolId ( ) ) )  pool . setId ( command . getParameters ( ) . getStoragePoolId ( ) ) (  org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( VAR_2 . Guid class ) ) ) . thenReturn ( pool ) )  org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( VAR_2 . Guid class ) ) ) . thenReturn ( pool ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_1 ) ( returnValue ) ) ) INIT = ( ( TYPE_1 ) ( returnValue ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.ArrayList<TYPE_2> ) TYPE java.util.ArrayList<TYPE_2> ( NAME VAR_3 ) NAME VAR_3 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME cluster ) NAME cluster ( IN VAR_4 ) IN VAR_4 ( BLOCK BLOCK ( IF IF ( COND ( ( VAR_2 == ( VAR_5 ) ) || ( ( cluster . METHOD_1 ( ) ) == ( VAR_5 ) ) ) || ( ( cluster . METHOD_1 ( ) ) == VAR_2 ) ) COND ( ( VAR_2 == ( VAR_5 ) ) || ( ( cluster . METHOD_1 ( ) ) == ( VAR_5 ) ) ) || ( ( cluster . METHOD_1 ( ) ) == VAR_2 ) ( THEN THEN (  VAR_3 . add ( cluster ) )  VAR_3 . add ( cluster ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  METHOD_2 ( this , VAR_3 ) )  METHOD_2 ( this , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( true ) )  TYPE_1 . METHOD_2 ( true ) ( IF IF ( COND ( TYPE_1 . getParameters ( ) . METHOD_3 ( ) ) == ( VAR_1 ) ) COND ( TYPE_1 . getParameters ( ) . METHOD_3 ( ) ) == ( VAR_1 ) ( THEN THEN (  TYPE_2 . METHOD_4 ( METHOD_5 ( ) , VAR_2 , VAR_2 , TYPE_1 . METHOD_6 ( ) ) )  TYPE_2 . METHOD_4 ( METHOD_5 ( ) , VAR_2 , VAR_2 , TYPE_1 . METHOD_6 ( ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_2 ( ) ) INIT = TYPE_2 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_2 . METHOD_3 ( ) ) INIT = VAR_2 . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_3 . METHOD_4 ( VAR_1 , VAR_5 , VAR_6 ) ) INIT = VAR_3 . METHOD_4 ( VAR_1 , VAR_5 , VAR_6 ) ) VAR VAR (  return new TYPE_1 ( ( ( TYPE_4 ) ( VAR_4 ) ) ) ; )  return new TYPE_1 ( ( ( TYPE_4 ) ( VAR_4 ) ) ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_6 ( ( STRING_1 + VAR_1 ) , e ) ; )  throw new TYPE_6 ( ( STRING_1 + VAR_1 ) , e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR ( IF IF ( COND TYPE_2 . getParameters ( ) . METHOD_2 ( ) ) COND TYPE_2 . getParameters ( ) . METHOD_2 ( ) ( THEN THEN (  VAR_1 . add ( VAR_2 , STRING_1 ) )  VAR_1 . add ( VAR_2 , STRING_1 ) ) THEN THEN ( ELSE ELSE (  VAR_1 . add ( VAR_2 , STRING_2 ) )  VAR_1 . add ( VAR_2 , STRING_2 ) ) ELSE ELSE ) IF IF ( IF IF ( COND ( TYPE_2 . getParameters ( ) . METHOD_3 ( ) ) >= 0 ) COND ( TYPE_2 . getParameters ( ) . METHOD_3 ( ) ) >= 0 ( THEN THEN (  VAR_1 . add ( VAR_3 , new java.lang.Integer ( TYPE_2 . getParameters ( ) . METHOD_3 ( ) ) . toString ( ) ) )  VAR_1 . add ( VAR_3 , new java.lang.Integer ( TYPE_2 . getParameters ( ) . METHOD_3 ( ) ) . toString ( ) ) ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( model ) )  VAR_1 . METHOD_2 ( model ) (  VAR_2 . METHOD_3 ( java.lang.Integer . toString ( getModel ( ) . METHOD_4 ( ) ) ) )  VAR_2 . METHOD_3 ( java.lang.Integer . toString ( getModel ( ) . METHOD_4 ( ) ) ) (  VAR_3 . METHOD_3 ( TYPE_2 . getInstance ( ) . METHOD_5 ( getModel ( ) . METHOD_6 ( ) ) ) )  VAR_3 . METHOD_3 ( TYPE_2 . getInstance ( ) . METHOD_5 ( getModel ( ) . METHOD_6 ( ) ) ) (  VAR_4 . setTitle ( getModel ( ) . METHOD_7 ( ) ) )  VAR_4 . setTitle ( getModel ( ) . METHOD_7 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_1 . METHOD_2 ( false ) )  VAR_1 . METHOD_2 ( false ) (  VAR_1 . METHOD_3 ( VAR_2 ) )  VAR_1 . METHOD_3 ( VAR_2 ) (  VAR_1 . METHOD_4 ( VAR_3 ) )  VAR_1 . METHOD_4 ( VAR_3 ) (  cmd = org.mockito.Mockito . METHOD_5 ( new TYPE_2 ( VAR_1 ) ) )  cmd = org.mockito.Mockito . METHOD_5 ( new TYPE_2 ( VAR_1 ) ) (  METHOD_6 ( cmd ) )  METHOD_6 ( cmd ) (  org.mockito.Mockito.doReturn ( METHOD_7 ( VAR_3 , VAR_4 , VAR_2 ) ) . when ( VAR_5 ) . METHOD_8 ( VAR_3 ) )  org.mockito.Mockito.doReturn ( METHOD_7 ( VAR_3 , VAR_4 , VAR_2 ) ) . when ( VAR_5 ) . METHOD_8 ( VAR_3 ) (  TYPE_3 . METHOD_9 ( cmd . METHOD_10 ( ) ) )  TYPE_3 . METHOD_9 ( cmd . METHOD_10 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return TYPE_1 . METHOD_2 ( vm , TYPE_2 . getReturnValue ( ) . METHOD_3 ( ) , vm . getStoragePoolId ( ) , METHOD_4 ( ) . getValue ( ) , false , true , false , false , false , true , VAR_1 . Collections < org.ovirt.engine.core.common.businessentities . Disk > METHOD_5 ( ) ) ; )  return TYPE_1 . METHOD_2 ( vm , TYPE_2 . getReturnValue ( ) . METHOD_3 ( ) , vm . getStoragePoolId ( ) , METHOD_4 ( ) . getValue ( ) , false , true , false , false , false , true , VAR_1 . Collections < org.ovirt.engine.core.common.businessentities . Disk > METHOD_5 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME VAR_1 ) NAME VAR_1 ( INIT = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ) INIT = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ) VAR VAR ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_3 = ( ( java.util.HashMap < java.lang.Integer , TYPE_1 > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) )  VAR_3 = ( ( java.util.HashMap < java.lang.Integer , TYPE_1 > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD (  VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { VAR_3 = ( ( java.util.HashMap < java.lang.Integer , TYPE_1 > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ; } } )  VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { VAR_3 = ( ( java.util.HashMap < java.lang.Integer , TYPE_1 > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ; } } (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_4 , new TYPE_3 ( VAR_5 ) , VAR_1 ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_4 , new TYPE_3 ( VAR_5 ) , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( ( VAR_2 != null ) && ( ! ( TYPE_2 . getParameters ( ) . METHOD_3 ( ) ) ) ) ? VAR_2 . METHOD_4 ( ) : VAR_4 ) INIT = ( ( VAR_2 != null ) && ( ! ( TYPE_2 . getParameters ( ) . METHOD_3 ( ) ) ) ) ? VAR_2 . METHOD_4 ( ) : VAR_4 ) VAR VAR (  return VAR_5 . METHOD_1 ( VAR_1 , getVm ( ) , VAR_3 , TYPE_2 . METHOD_5 ( ) ) ; )  return VAR_5 . METHOD_1 ( VAR_1 , getVm ( ) , VAR_3 , TYPE_2 . METHOD_5 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND source != null ) COND source != null ( THEN THEN ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS> ( NAME list ) NAME list ( INIT = VAR_2 . Linq < org.ovirt.engine.core.common.businessentities.VDS > METHOD_2 ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) ) INIT = VAR_2 . Linq < org.ovirt.engine.core.common.businessentities.VDS > METHOD_2 ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) ) VAR VAR (  return list ; )  return list ; ) THEN THEN ) IF IF (  return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ; )  return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > list = VAR_2 . Linq < org.ovirt.engine.core.common.businessentities.VDS > METHOD_2 ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) ; return list ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > list = VAR_2 . Linq < org.ovirt.engine.core.common.businessentities.VDS > METHOD_2 ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) ; return list ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ; } } (  TYPE_2 . METHOD_1 ( aQuery , VAR_1 , null ) )  TYPE_2 . METHOD_1 ( aQuery , VAR_1 , null ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( SWITCH SWITCH ( NAME TYPE_2 . getParameters ( ) . METHOD_2 ( ) ) NAME TYPE_2 . getParameters ( ) . METHOD_2 ( ) ( DEFAULT DEFAULT ( BLOCK BLOCK (  VAR_1 = VAR_3 )  VAR_1 = VAR_3 (  break ; )  break ; ) BLOCK BLOCK ) DEFAULT DEFAULT ( CASE VAR_2 ( BLOCK BLOCK (  VAR_1 = VAR_3 )  VAR_1 = VAR_3 (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_2 ( CASE VAR_4 ( BLOCK BLOCK (  VAR_1 = VAR_5 )  VAR_1 = VAR_5 (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_4 ) SWITCH SWITCH ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_6 ) NAME VAR_6 ( INIT = VAR_7 < java.lang.String > METHOD_3 ( VAR_1 ) ) INIT = VAR_7 < java.lang.String > METHOD_3 ( VAR_1 ) ) VAR VAR (  TYPE_2 . METHOD_4 ( ) . METHOD_5 ( VAR_6 ) )  TYPE_2 . METHOD_4 ( ) . METHOD_5 ( VAR_6 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME sender ) NAME sender ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME args ) NAME args ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . METHOD_1 ( ) )  VAR_1 . METHOD_1 ( ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_2 ) ( METHOD_2 ( ) . getSelectedItem ( ) ) ) ) INIT = ( ( TYPE_2 ) ( METHOD_2 ( ) . getSelectedItem ( ) ) ) ) VAR VAR ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN (  METHOD_3 ( ) . METHOD_4 ( VAR_2 . METHOD_5 ( ) ) )  METHOD_3 ( ) . METHOD_4 ( VAR_2 . METHOD_5 ( ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1.ValidationResult ) RETURN TYPE_1.ValidationResult ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . getId ( ) ) INIT = VAR_1 . getId ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . getName ( ) ) INIT = VAR_1 . getName ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3.EngineMessage ) TYPE TYPE_3.EngineMessage ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_5 ) INIT = VAR_5 ) VAR VAR (  return METHOD_2 ( VAR_1 . getId ( ) , VAR_2 , VAR_3 , VAR_4 , VAR_6 ) ; )  return METHOD_2 ( VAR_1 . getId ( ) , VAR_2 , VAR_3 , VAR_4 , VAR_6 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN TYPE_1.Network ) RETURN TYPE_1.Network ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.Network ) TYPE TYPE_1.Network ( NAME entity ) NAME entity ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_5 ) NAME VAR_5 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  VAR_5 . METHOD_2 ( VAR_1 ) )  VAR_5 . METHOD_2 ( VAR_1 ) (  VAR_5 . METHOD_3 ( VAR_2 ) )  VAR_5 . METHOD_3 ( VAR_2 ) (  VAR_5 . METHOD_4 ( VAR_3 ) )  VAR_5 . METHOD_4 ( VAR_3 ) (  TYPE_3 . METHOD_5 ( entity . METHOD_6 ( ) ) . METHOD_7 ( VAR_5 ) . METHOD_8 ( ) )  TYPE_3 . METHOD_5 ( entity . METHOD_6 ( ) ) . METHOD_7 ( VAR_5 ) . METHOD_8 ( ) (  return TYPE_4 . METHOD_1 ( entity , VAR_4 ) ; )  return TYPE_4 . METHOD_1 ( entity , VAR_4 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.Integer ) TYPE java.lang.Integer ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) . METHOD_3 ( ) ) INIT = METHOD_2 ( ) . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.Integer ) TYPE java.lang.Integer ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( ) . METHOD_4 ( ) ) INIT = METHOD_2 ( ) . METHOD_4 ( ) ) VAR VAR ( IF IF ( COND ( VAR_1 != null ) && ( VAR_2 != null ) ) COND ( VAR_1 != null ) && ( VAR_2 != null ) ( THEN THEN (  METHOD_5 ( ( VAR_1 + VAR_2 ) ) )  METHOD_5 ( ( VAR_1 + VAR_2 ) ) ) THEN THEN ( ELSE ELSE (  METHOD_5 ( 0 ) )  METHOD_5 ( 0 ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND source == null ) COND source == null ( THEN THEN (  return new java.util.ArrayList < TYPE_1 > ( ) ; )  return new java.util.ArrayList < TYPE_1 > ( ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE java.util.ArrayList<TYPE_1> ) TYPE java.util.ArrayList<TYPE_1> ( NAME list ) NAME list ( INIT = ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) INIT = ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) VAR VAR (  return METHOD_2 ( list , VAR_1 , VAR_2 ) ; )  return METHOD_2 ( list , VAR_1 , VAR_2 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return ( ( ( ( VAR_1 . METHOD_2 ( ) ) + ( METHOD_3 ( VAR_1 ) ) ) < VAR_2 ) && ( ( VAR_1 . METHOD_4 ( ) ) >= VAR_3 ) ) && ( ( ( VAR_1 . METHOD_5 ( ) ) == null ) || ( ( ( new TYPE_1 ( ) . METHOD_6 ( ) ) - ( VAR_1 . METHOD_5 ( ) . METHOD_6 ( ) ) ) < ( TYPE_2 . METHOD_7 ( VAR_4 ) ) ) ) ; )  return ( ( ( ( VAR_1 . METHOD_2 ( ) ) + ( METHOD_3 ( VAR_1 ) ) ) < VAR_2 ) && ( ( VAR_1 . METHOD_4 ( ) ) >= VAR_3 ) ) && ( ( ( VAR_1 . METHOD_5 ( ) ) == null ) || ( ( ( new TYPE_1 ( ) . METHOD_6 ( ) ) - ( VAR_1 . METHOD_5 ( ) . METHOD_6 ( ) ) ) < ( TYPE_2 . METHOD_7 ( VAR_4 ) ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME entity ) NAME entity ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 . METHOD_2 ( ) ) && ( VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) ) ) COND ( VAR_1 . METHOD_2 ( ) ) && ( VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) ) ( THEN THEN (  VAR_1 . setId ( VAR_1 . METHOD_3 ( ) . getId ( ) ) )  VAR_1 . setId ( VAR_1 . METHOD_3 ( ) . getId ( ) ) ) THEN THEN ( ELSE ELSE (  VAR_1 . setId ( entity . getId ( ) . toString ( ) ) )  VAR_1 . setId ( entity . getId ( ) . toString ( ) ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( VAR_3 , VAR_4 class , new java.lang.String [ ] { STRING_2 , STRING_3 } , new java.lang.Object [ ] { VAR_5 [ 0 ] , VAR_6 } , METHOD_3 ( ) , VAR_2 ) )  METHOD_2 ( VAR_3 , VAR_4 class , new java.lang.String [ ] { STRING_2 , STRING_3 } , new java.lang.Object [ ] { VAR_5 [ 0 ] , VAR_6 } , METHOD_3 ( ) , VAR_2 ) (  VAR_7 . METHOD_4 ( ) )  VAR_7 . METHOD_4 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME version ) NAME version ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME returnValue ) NAME returnValue ( INIT = TYPE_2 . instance ( ) . METHOD_2 ( INT_1 , true ) ) INIT = TYPE_2 . instance ( ) . METHOD_2 ( INT_1 , true ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_3 . valueOf ( VAR_1 . name ( ) ) ) INIT = TYPE_3 . valueOf ( VAR_1 . name ( ) ) ) VAR VAR (  VAR_3 . METHOD_3 ( VAR_2 , version , returnValue ) )  VAR_3 . METHOD_3 ( VAR_2 , version , returnValue ) (  return returnValue ; )  return returnValue ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<org.ovirt.engine.core.compat.Guid,org.ovirt.engine.core.common.businessentities.StorageDomain> ) TYPE java.util.Map<org.ovirt.engine.core.compat.Guid,org.ovirt.engine.core.common.businessentities.StorageDomain> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( ) ) ) INIT = TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3<TYPE_4> ) TYPE TYPE_3<TYPE_4> ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_3 . METHOD_4 ( VAR_3 ) ) INIT = TYPE_3 . METHOD_4 ( VAR_3 ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_5.DiskImage> ) TYPE java.util.List<TYPE_5.DiskImage> ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_6 . METHOD_5 ( METHOD_6 ( ) , VAR_5 ) ) INIT = TYPE_6 . METHOD_5 ( METHOD_6 ( ) , VAR_5 ) ) VAR VAR (  VAR_6 = TYPE_7 . METHOD_7 ( VAR_4 , VAR_1 , VAR_2 ) )  VAR_6 = TYPE_7 . METHOD_7 ( VAR_4 , VAR_1 , VAR_2 ) (  return validate ( new TYPE_8 ( VAR_4 ) . METHOD_8 ( VAR_6 , VAR_1 , VAR_7 , VAR_2 ) ) ; )  return validate ( new TYPE_8 ( VAR_4 ) . METHOD_8 ( VAR_6 , VAR_1 , VAR_7 , VAR_2 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ( INIT = getEntity ( ) ) INIT = getEntity ( ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Version ) TYPE org.ovirt.engine.core.compat.Version ( NAME VAR_1 ) NAME VAR_1 ( INIT = vm . METHOD_2 ( ) ) INIT = vm . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  METHOD_3 ( false ) )  METHOD_3 ( false ) ) THEN THEN ( ELSE ELSE (  METHOD_3 ( ( ( java.lang.Boolean ) ( ! ( TYPE_1 . getInstance ( ) . METHOD_4 ( getEntity ( ) . METHOD_5 ( ) , VAR_1 ) . isEmpty ( ) ) ) ) ) )  METHOD_3 ( ( ( java.lang.Boolean ) ( ! ( TYPE_1 . getInstance ( ) . METHOD_4 ( getEntity ( ) . METHOD_5 ( ) , VAR_1 ) . isEmpty ( ) ) ) ) ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME vmId ) NAME vmId ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND source != null ) COND source != null ( THEN THEN (  return source ; )  return source ; ) THEN THEN ) IF IF (  return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ; )  return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return source ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return source ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ; } } ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME params ) NAME params ( INIT = new TYPE_1 ( vmId ) ) INIT = new TYPE_1 ( vmId ) ) VAR VAR (  params . METHOD_2 ( VAR_1 ) )  params . METHOD_2 ( VAR_1 ) (  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , params , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , params , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( params ) )  METHOD_2 ( params ) ( TRY TRY ( BLOCK BLOCK (  VAR_1 . METHOD_3 ( VAR_2 , VAR_3 ) )  VAR_1 . METHOD_3 ( VAR_2 , VAR_3 ) ) BLOCK BLOCK ( FINALLY FINALLY ( IF IF ( COND ( user ) != null ) COND ( user ) != null ( THEN THEN (  VAR_1 . METHOD_4 ( VAR_4 . METHOD_5 ( new TYPE_1 ( user . METHOD_6 ( ) ) ) ) )  VAR_1 . METHOD_4 ( VAR_4 . METHOD_5 ( new TYPE_1 ( user . METHOD_6 ( ) ) ) ) ) THEN THEN ) IF IF (  VAR_4 . METHOD_7 ( ) )  VAR_4 . METHOD_7 ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME sender ) NAME sender ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME e ) NAME e ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  super . METHOD_1 ( sender , e ) )  super . METHOD_1 ( sender , e ) ( IF IF ( COND ( ( METHOD_2 ( ) ) != null ) && ( ( METHOD_2 ( ) . METHOD_3 ( ) ) == ( VAR_1 ) ) ) COND ( ( METHOD_2 ( ) ) != null ) && ( ( METHOD_2 ( ) . METHOD_3 ( ) ) == ( VAR_1 ) ) ( THEN THEN ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_2 ) ( METHOD_2 ( ) . getEntity ( ) ) ) ) INIT = ( ( TYPE_2 ) ( METHOD_2 ( ) . getEntity ( ) ) ) ) VAR VAR (  setSelectedItem ( TYPE_3 . METHOD_4 ( VAR_3 . Linq < TYPE_2 > METHOD_5 ( METHOD_6 ( ) ) , new TYPE_4 ( VAR_2 . getId ( ) ) ) ) )  setSelectedItem ( TYPE_3 . METHOD_4 ( VAR_3 . Linq < TYPE_2 > METHOD_5 ( METHOD_6 ( ) ) , new TYPE_4 ( VAR_2 . getId ( ) ) ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 . METHOD_2 ( ) ) != null ) COND ( VAR_1 . METHOD_2 ( ) ) != null ( THEN THEN ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . get ( VAR_1 . METHOD_2 ( ) ) ) INIT = VAR_3 . get ( VAR_1 . METHOD_2 ( ) ) ) VAR VAR ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_2 . METHOD_3 ( ) ) INIT = VAR_2 . METHOD_3 ( ) ) VAR VAR (  return VAR_4 == null ? null : VAR_5 . METHOD_4 ( VAR_4 ) ; )  return VAR_4 == null ? null : VAR_5 . METHOD_4 ( VAR_4 ) ; ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<java.lang.Boolean> ) TYPE TYPE_1<java.lang.Boolean> ( NAME event ) NAME event ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( ) . METHOD_3 ( event . getValue ( ) ) )  METHOD_2 ( ) . METHOD_3 ( event . getValue ( ) ) (  METHOD_2 ( ) . METHOD_4 ( ( ( VAR_1 ) && ( event . getValue ( ) ) ) ) )  METHOD_2 ( ) . METHOD_4 ( ( ( VAR_1 ) && ( event . getValue ( ) ) ) ) (  METHOD_2 ( ) . METHOD_5 ( ( ! ( event . getValue ( ) ) ) ) )  METHOD_2 ( ) . METHOD_5 ( ( ! ( event . getValue ( ) ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<TYPE_1.DiskImage> ) RETURN java.util.List<TYPE_1.DiskImage> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.Object[] ) TYPE java.lang.Object[] ( NAME args ) NAME args ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1.DiskImage ) TYPE TYPE_1.DiskImage ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_1 . DiskImage ) ( args [ 0 ] ) ) ) INIT = ( ( TYPE_1 . DiskImage ) ( args [ 0 ] ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_1.DiskImage> ) TYPE java.util.List<TYPE_1.DiskImage> ( NAME list ) NAME list ( INIT = METHOD_3 ( VAR_2 . getId ( ) , INT_1 ) ) INIT = METHOD_3 ( VAR_2 . getId ( ) , INT_1 ) ) VAR VAR (  return list ; )  return list ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME vds ) NAME vds ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  vds . METHOD_2 ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . get ( vds . getId ( ) ) ) )  vds . METHOD_2 ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . get ( vds . getId ( ) ) ) (  vds . METHOD_4 ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_5 ( ) . METHOD_6 ( vds . getId ( ) ) . METHOD_7 ( ) ) )  vds . METHOD_4 ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_5 ( ) . METHOD_6 ( vds . getId ( ) ) . METHOD_7 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_3 ( ) ) INIT = new TYPE_3 ( ) ) VAR VAR (  VAR_3 . METHOD_2 ( VAR_1 ) )  VAR_3 . METHOD_2 ( VAR_1 ) ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_5 . map ( VAR_3 , null ) ) INIT = TYPE_5 . map ( VAR_3 , null ) ) VAR VAR (  assertEquals ( VAR_4 . getStatus ( ) . METHOD_3 ( ) , VAR_2 . value ( ) ) )  assertEquals ( VAR_4 . getStatus ( ) . METHOD_3 ( ) , VAR_2 . value ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  VAR_1 . METHOD_2 ( null ) )  VAR_1 . METHOD_2 ( null ) (  VAR_1 . METHOD_3 ( null ) )  VAR_1 . METHOD_3 ( null ) ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ( INIT = new org.ovirt.engine.core.common.businessentities.VM ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.VM ( ) ) VAR VAR (  vm . METHOD_4 ( VAR_2 ) )  vm . METHOD_4 ( VAR_2 ) (  VAR_1 . METHOD_5 ( vm ) )  VAR_1 . METHOD_5 ( vm ) ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VmTemplate ) TYPE org.ovirt.engine.core.common.businessentities.VmTemplate ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . METHOD_6 ( ) ) INIT = VAR_1 . METHOD_6 ( ) ) VAR VAR (  TYPE_3 . METHOD_7 ( VAR_3 ) )  TYPE_3 . METHOD_7 ( VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME cluster ) NAME cluster ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_3 ) NAME VAR_3 ( INIT = cluster . METHOD_2 ( ) ) INIT = cluster . METHOD_2 ( ) ) VAR VAR (  METHOD_3 ( VAR_3 , VAR_1 , cluster . getId ( ) , VAR_2 ) )  METHOD_3 ( VAR_3 , VAR_1 , cluster . getId ( ) , VAR_2 ) ( IF IF ( COND METHOD_4 ( VAR_3 , VAR_1 ) ) COND METHOD_4 ( VAR_3 , VAR_1 ) ( THEN THEN (  cluster . METHOD_5 ( VAR_1 ) )  cluster . METHOD_5 ( VAR_1 ) (  VAR_4 . METHOD_6 ( cluster ) )  VAR_4 . METHOD_6 ( cluster ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( new TYPE_1 . DiskImage ( ) ) )  METHOD_2 ( new TYPE_1 . DiskImage ( ) ) (  METHOD_3 ( ) )  METHOD_3 ( ) (  METHOD_4 ( ) )  METHOD_4 ( ) (  METHOD_5 ( false ) )  METHOD_5 ( false ) (  METHOD_6 ( ) )  METHOD_6 ( ) (  METHOD_7 ( VAR_1 ) )  METHOD_7 ( VAR_1 ) (  VAR_2 . METHOD_8 ( org.ovirt.engine.core.compat.Guid . METHOD_9 ( ) ) )  VAR_2 . METHOD_8 ( org.ovirt.engine.core.compat.Guid . METHOD_9 ( ) ) (  TYPE_2 . METHOD_10 ( command ) )  TYPE_2 . METHOD_10 ( command ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain> ) RETURN java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.compat.Guid> ) TYPE java.util.ArrayList<org.ovirt.engine.core.compat.Guid> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain> ( NAME list ) NAME list ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ) TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME storageDomain ) NAME storageDomain ( INIT = TYPE_1 . METHOD_2 ( VAR_3 , VAR_2 ) ) INIT = TYPE_1 . METHOD_2 ( VAR_3 , VAR_2 ) ) VAR VAR ( IF IF ( COND storageDomain != null ) COND storageDomain != null ( THEN THEN (  list . add ( storageDomain ) )  list . add ( storageDomain ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return list ; )  return list ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Version ) TYPE org.ovirt.engine.core.compat.Version ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_2 . METHOD_2 ( VAR_1 , VAR_2 ) ) INIT = TYPE_2 . METHOD_2 ( VAR_1 , VAR_2 ) ) VAR VAR (  TYPE_3 . METHOD_3 ( new TYPE_4 ( org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) , VAR_1 . getId ( ) ) , VAR_4 , TYPE_5 . METHOD_5 ( VAR_3 ) , new java.util.HashMap < java.lang.String , java.lang.Object > ( ) , true , true ) )  TYPE_3 . METHOD_3 ( new TYPE_4 ( org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) , VAR_1 . getId ( ) ) , VAR_4 , TYPE_5 . METHOD_5 ( VAR_3 ) , new java.util.HashMap < java.lang.String , java.lang.Object > ( ) , true , true ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source != null ? source : java.lang.Boolean . TRUE ; )  return source != null ? source : java.lang.Boolean . TRUE ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : java.lang.Boolean . TRUE ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : java.lang.Boolean . TRUE ; } } (  TYPE_1 . METHOD_2 ( new TYPE_2 ( VAR_1 , TYPE_1 . METHOD_3 ( ) ) , aQuery ) )  TYPE_1 . METHOD_2 ( new TYPE_2 ( VAR_1 , TYPE_1 . METHOD_3 ( ) ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_2 . METHOD_2 ( METHOD_3 ( ) ) )  VAR_2 . METHOD_2 ( METHOD_3 ( ) ) (  VAR_3 . METHOD_4 ( java.lang.String.valueOf ( METHOD_3 ( ) . METHOD_5 ( ) ) ) )  VAR_3 . METHOD_4 ( java.lang.String.valueOf ( METHOD_3 ( ) . METHOD_5 ( ) ) ) (  VAR_4 . METHOD_4 ( java.lang.Boolean . toString ( METHOD_3 ( ) . METHOD_6 ( ) ) ) )  VAR_4 . METHOD_4 ( java.lang.Boolean . toString ( METHOD_3 ( ) . METHOD_6 ( ) ) ) (  VAR_5 . METHOD_4 ( TYPE_2 . getInstance ( ) . METHOD_7 ( METHOD_3 ( ) . METHOD_8 ( ) ) ) )  VAR_5 . METHOD_4 ( TYPE_2 . getInstance ( ) . METHOD_7 ( METHOD_3 ( ) . METHOD_8 ( ) ) ) (  VAR_6 . METHOD_9 ( METHOD_3 ( ) ) )  VAR_6 . METHOD_9 ( METHOD_3 ( ) ) (  VAR_7 . setTitle ( METHOD_3 ( ) . METHOD_10 ( ) ) )  VAR_7 . setTitle ( METHOD_3 ( ) . METHOD_10 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME view ) NAME view ( INIT = ( ( TYPE_2 ) ( target ) ) ) INIT = ( ( TYPE_2 ) ( target ) ) ) VAR VAR (  VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) )  VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) (  METHOD_3 ( ) )  METHOD_3 ( ) ) BLOCK BLOCK ) METHOD METHOD (  TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_2 view = ( ( TYPE_2 ) ( target ) ) ; VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) ; METHOD_3 ( ) ; } } ) ) )  TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_2 view = ( ( TYPE_2 ) ( target ) ) ; VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) ; METHOD_3 ( ) ; } } ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.doReturn ( false ) . when ( validator ) . METHOD_2 ( VAR_1 . getId ( ) ) )  org.mockito.Mockito.doReturn ( false ) . when ( validator ) . METHOD_2 ( VAR_1 . getId ( ) ) (  org.mockito.Mockito.doReturn ( false ) . when ( validator ) . METHOD_2 ( VAR_2 . getId ( ) ) )  org.mockito.Mockito.doReturn ( false ) . when ( validator ) . METHOD_2 ( VAR_2 . getId ( ) ) (  TYPE_1 . METHOD_3 ( validator . METHOD_4 ( ) , TYPE_2 . METHOD_5 ( TYPE_3 . METHOD_6 ( VAR_3 ) ) ) )  TYPE_1 . METHOD_3 ( validator . METHOD_4 ( ) , TYPE_2 . METHOD_5 ( TYPE_3 . METHOD_6 ( VAR_3 ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Boolean ) TYPE java.lang.Boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.Boolean ) TYPE java.lang.Boolean ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ) TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME storageDomain ) NAME storageDomain ( INIT = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) ) VAR VAR (  storageDomain . METHOD_2 ( VAR_4 ) )  storageDomain . METHOD_2 ( VAR_4 ) (  storageDomain . METHOD_3 ( VAR_1 ) )  storageDomain . METHOD_3 ( VAR_1 ) (  storageDomain . METHOD_4 ( VAR_2 ) )  storageDomain . METHOD_4 ( VAR_2 ) (  storageDomain . METHOD_5 ( VAR_3 ) )  storageDomain . METHOD_5 ( VAR_3 ) (  VAR_5 = org.ovirt.engine.core.compat.Guid . METHOD_6 ( ) )  VAR_5 = org.ovirt.engine.core.compat.Guid . METHOD_6 ( ) (  storageDomain . setId ( VAR_5 ) )  storageDomain . setId ( VAR_5 ) (  TYPE_2 . METHOD_7 ( this ) )  TYPE_2 . METHOD_7 ( this ) (  VAR_6 . METHOD_8 ( VAR_7 class , VAR_8 ) )  VAR_6 . METHOD_8 ( VAR_7 class , VAR_8 ) (  org.mockito.Mockito.when ( VAR_8 . get ( VAR_5 ) ) . thenReturn ( storageDomain ) )  org.mockito.Mockito.when ( VAR_8 . get ( VAR_5 ) ) . thenReturn ( storageDomain ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Integer ) TYPE java.lang.Integer ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.network ) TYPE org.ovirt.engine.core.common.businessentities.network ( NAME VAR_3 ) NAME VAR_3 ( INIT = new org.ovirt.engine.core.common.businessentities . network ( ) ) INIT = new org.ovirt.engine.core.common.businessentities . network ( ) ) VAR VAR (  VAR_3 . METHOD_2 ( VAR_1 ) )  VAR_3 . METHOD_2 ( VAR_1 ) (  VAR_3 . METHOD_3 ( VAR_2 ) )  VAR_3 . METHOD_3 ( VAR_2 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_1 ( VAR_3 , this ) ) INIT = new TYPE_1 ( VAR_3 , this ) ) VAR VAR (  VAR_4 . METHOD_4 ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_5 ( ) ) )  VAR_4 . METHOD_4 ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_5 ( ) ) (  VAR_5 . put ( VAR_1 , VAR_4 ) )  VAR_5 . put ( VAR_1 , VAR_4 ) (  return VAR_4 ; )  return VAR_4 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = getEntity ( ) ) INIT = getEntity ( ) ) VAR VAR (  VAR_2 . setId ( VAR_1 ) )  VAR_2 . setId ( VAR_1 ) ( VAR VAR ( TYPE TYPE_2<TYPE_1> ) TYPE TYPE_2<TYPE_1> ( NAME VAR_3 ) NAME VAR_3 ( INIT = new java.util.ArrayList < TYPE_1 > ( VAR_4 . METHOD_2 ( ) . METHOD_3 ( ) ) ) INIT = new java.util.ArrayList < TYPE_1 > ( VAR_4 . METHOD_2 ( ) . METHOD_3 ( ) ) ) VAR VAR (  VAR_3 . add ( VAR_2 ) )  VAR_3 . add ( VAR_2 ) (  VAR_4 . METHOD_2 ( ) . setItems ( VAR_3 ) )  VAR_4 . METHOD_2 ( ) . setItems ( VAR_3 ) (  VAR_4 . METHOD_2 ( ) . setSelectedItem ( VAR_2 ) )  VAR_4 . METHOD_2 ( ) . setSelectedItem ( VAR_2 ) (  this . METHOD_4 ( null ) )  this . METHOD_4 ( null ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME result ) NAME result ( INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( TYPE_2 . getParameters ( ) . METHOD_4 ( ) ) ) INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( TYPE_2 . getParameters ( ) . METHOD_4 ( ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.ArrayList<TYPE_1> ) TYPE java.util.ArrayList<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < TYPE_1 > ( result ) ) INIT = new java.util.ArrayList < TYPE_1 > ( result ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME domain ) NAME domain ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( IF IF ( COND ( domain . METHOD_5 ( ) ) == ( VAR_2 ) ) COND ( domain . METHOD_5 ( ) ) == ( VAR_2 ) ( THEN THEN (  result . METHOD_6 ( domain ) )  result . METHOD_6 ( domain ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  TYPE_2 . METHOD_7 ( ) . METHOD_8 ( result ) )  TYPE_2 . METHOD_7 ( ) . METHOD_8 ( result ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source != null ? ( ( org.ovirt.engine.core.common.businessentities.VM ) ( source ) ) : null ; )  return source != null ? ( ( org.ovirt.engine.core.common.businessentities.VM ) ( source ) ) : null ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( org.ovirt.engine.core.common.businessentities.VM ) ( source ) ) : null ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( org.ovirt.engine.core.common.businessentities.VM ) ( source ) ) : null ; } } (  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( 1 ) )  METHOD_2 ( 1 ) (  METHOD_3 ( 1 ) )  METHOD_3 ( 1 ) (  METHOD_4 ( METHOD_5 ( VAR_4 , VAR_5 class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_6 } , VAR_1 , VAR_2 ) ) )  METHOD_4 ( METHOD_5 ( VAR_4 , VAR_5 class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_6 } , VAR_1 , VAR_2 ) ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ( INIT = getModel ( 0 ) ) INIT = getModel ( 0 ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_7 . add ( model ) )  VAR_7 . add ( model ) (  METHOD_6 ( STRING_2 ) )  METHOD_6 ( STRING_2 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_8 ) NAME VAR_8 ( BLOCK BLOCK (  METHOD_7 ( VAR_8 , VAR_3 ) )  METHOD_7 ( VAR_8 , VAR_3 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_2 . METHOD_2 ( STRING_1 , VAR_1 ) )  VAR_2 . METHOD_2 ( STRING_1 , VAR_1 ) (  VAR_3 . METHOD_3 ( ) . METHOD_4 ( ) )  VAR_3 . METHOD_3 ( ) . METHOD_4 ( ) ( TRY TRY ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_4 ) ) COND ! ( VAR_4 ) ( THEN THEN (  METHOD_5 ( ( ( STRING_2 + VAR_1 ) + STRING_3 ) ) )  METHOD_5 ( ( ( STRING_2 + VAR_1 ) + STRING_3 ) ) ) THEN THEN ( ELSE ELSE (  METHOD_6 ( VAR_1 ) )  METHOD_6 ( VAR_1 ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ( FINALLY FINALLY (  VAR_3 . METHOD_3 ( ) . METHOD_7 ( ) )  VAR_3 . METHOD_3 ( ) . METHOD_7 ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1.ValidationResult ) RETURN TYPE_1.ValidationResult ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ) VAR VAR ( VAR VAR ( TYPE TYPE_2.VdcActionType ) TYPE TYPE_2.VdcActionType ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.ValidationResult ) TYPE TYPE_1.ValidationResult ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 ) INIT = VAR_3 ) VAR VAR ( IF IF ( COND ! ( TYPE_3 . METHOD_2 ( vm ) ) ) COND ! ( TYPE_3 . METHOD_2 ( vm ) ) ( THEN THEN ( IF IF ( COND ! ( TYPE_4 . METHOD_3 ( VAR_1 ) ) ) COND ! ( TYPE_4 . METHOD_3 ( VAR_1 ) ) ( THEN THEN (  VAR_2 = new TYPE_1 . ValidationResult ( VAR_4 ) )  VAR_2 = new TYPE_1 . ValidationResult ( VAR_4 ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME response ) NAME response ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_2 ( ( ( TYPE_7 ) ( VAR_1 ) ) ) ) INIT = METHOD_2 ( ( ( TYPE_7 ) ( VAR_1 ) ) ) ) VAR VAR (  VAR_1 . METHOD_3 ( VAR_4 , VAR_3 ) )  VAR_1 . METHOD_3 ( VAR_4 , VAR_3 ) (  VAR_2 . METHOD_1 ( VAR_1 , response ) )  VAR_2 . METHOD_1 ( VAR_1 , response ) (  METHOD_4 ( ( ( TYPE_8 ) ( response ) ) , VAR_1 . METHOD_5 ( ) , VAR_3 ) )  METHOD_4 ( ( ( TYPE_8 ) ( response ) ) , VAR_1 . METHOD_5 ( ) , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ( INIT = ( ( TYPE_1 ) ( getWindow ( ) ) ) ) INIT = ( ( TYPE_1 ) ( getWindow ( ) ) ) ) VAR VAR (  model . METHOD_2 ( null ) )  model . METHOD_2 ( null ) ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_5 ) NAME METHOD_5 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  model . METHOD_6 ( ) )  model . METHOD_6 ( ) (  METHOD_7 ( null ) )  METHOD_7 ( null ) ) BLOCK BLOCK ) METHOD METHOD (  METHOD_3 ( model . METHOD_4 ( ) . getSelectedItem ( ) . getId ( ) , new TYPE_2 ( ) { public void METHOD_5 ( TYPE_3 result ) { model . METHOD_6 ( ) ; METHOD_7 ( null ) ; } } ) )  METHOD_3 ( model . METHOD_4 ( ) . getSelectedItem ( ) . getId ( ) , new TYPE_2 ( ) { public void METHOD_5 ( TYPE_3 result ) { model . METHOD_6 ( ) ; METHOD_7 ( null ) ; } } ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . instance = this )  VAR_1 . instance = this ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  VAR_3 = VAR_2 . METHOD_2 ( ) )  VAR_3 = VAR_2 . METHOD_2 ( ) (  VAR_3 . METHOD_3 ( ) )  VAR_3 . METHOD_3 ( ) (  VAR_3 . METHOD_4 ( ) . METHOD_5 ( new TYPE_3 ( this ) , TYPE_4 . METHOD_6 ( VAR_4 ) ) )  VAR_3 . METHOD_4 ( ) . METHOD_5 ( new TYPE_3 ( this ) , TYPE_4 . METHOD_6 ( VAR_4 ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_5 ) NAME VAR_5 ( BLOCK BLOCK (  log . error ( STRING_1 , VAR_5 . METHOD_7 ( ) ) )  log . error ( STRING_1 , VAR_5 . METHOD_7 ( ) ) (  log . METHOD_8 ( STRING_2 , VAR_5 ) )  log . METHOD_8 ( STRING_2 , VAR_5 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME value ) NAME value ( INIT = VAR_3 ) INIT = VAR_3 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( INIT = STRING_2 ) INIT = STRING_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_5 ) NAME VAR_5 ( INIT = null ) INIT = null ) VAR VAR (  VAR_1 . METHOD_2 ( VAR_2 , value ) )  VAR_1 . METHOD_2 ( VAR_2 , value ) (  VAR_1 . METHOD_3 ( VAR_2 , VAR_4 , VAR_5 ) )  VAR_1 . METHOD_3 ( VAR_2 , VAR_4 , VAR_5 ) ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_6 ) NAME VAR_6 ( INIT = VAR_1 . METHOD_4 ( VAR_2 ) ) INIT = VAR_1 . METHOD_4 ( VAR_2 ) ) VAR VAR (  TYPE_3 . assertEquals ( ( ( value + VAR_5 ) + VAR_4 ) , VAR_6 ) )  TYPE_3 . assertEquals ( ( ( value + VAR_5 ) + VAR_4 ) , VAR_6 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME action ) NAME action ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  get ( ) )  get ( ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_3 ( ) ) INIT = new TYPE_3 ( ) ) VAR VAR (  VAR_1 . setId ( id ) )  VAR_1 . setId ( id ) ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 ) INIT = VAR_3 ) VAR VAR ( IF IF ( COND ( action != null ) && ( action . METHOD_2 ( ) ) ) COND ( action != null ) && ( action . METHOD_2 ( ) ) ( THEN THEN (  VAR_2 = METHOD_3 ( action . METHOD_4 ( ) ) )  VAR_2 = METHOD_3 ( action . METHOD_4 ( ) ) ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME parameters ) NAME parameters ( INIT = new TYPE_4 ( VAR_1 , VAR_2 ) ) INIT = new TYPE_4 ( VAR_1 , VAR_2 ) ) VAR VAR (  return METHOD_5 ( VAR_4 , parameters ) ; )  return METHOD_5 ( VAR_4 , parameters ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( TYPE_1 . getVm ( ) ) != null ) COND ( TYPE_1 . getVm ( ) ) != null ( THEN THEN ( IF IF ( COND ( TYPE_1 . getVm ( ) . METHOD_2 ( ) ) == ( VAR_1 ) ) COND ( TYPE_1 . getVm ( ) . METHOD_2 ( ) ) == ( VAR_1 ) ( THEN THEN (  TYPE_2 . METHOD_3 ( TYPE_1 . getVm ( ) , TYPE_1 . METHOD_4 ( ) ) )  TYPE_2 . METHOD_3 ( TYPE_1 . getVm ( ) , TYPE_1 . METHOD_4 ( ) ) ) THEN THEN ) IF IF (  throw new TYPE_3 ( STRING_1 ) ; )  throw new TYPE_3 ( STRING_1 ) ; ) THEN THEN ( ELSE ELSE (  TYPE_1 . METHOD_5 ( false ) )  TYPE_1 . METHOD_5 ( false ) (  log . METHOD_6 ( STRING_2 ) )  log . METHOD_6 ( STRING_2 ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<TYPE_2,TYPE_3<TYPE_4>,TYPE_5> ) RETURN TYPE_1<TYPE_2,TYPE_3<TYPE_4>,TYPE_5> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_7<TYPE_8> ) TYPE TYPE_7<TYPE_8> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_7<TYPE_3<TYPE_4>> ) TYPE TYPE_7<TYPE_3<TYPE_4>> ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE TYPE_7<TYPE_5> ) TYPE TYPE_7<TYPE_5> ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_9<TYPE_2,TYPE_3<TYPE_4>,TYPE_5> ) TYPE TYPE_9<TYPE_2,TYPE_3<TYPE_4>,TYPE_5> ( NAME result ) NAME result ( INIT = new TYPE_9 < TYPE_2 , TYPE_3 < TYPE_4 > , TYPE_5 > ( VAR_1 , VAR_2 ) ) INIT = new TYPE_9 < TYPE_2 , TYPE_3 < TYPE_4 > , TYPE_5 > ( VAR_1 , VAR_2 ) ) VAR VAR (  result . METHOD_2 ( VAR_3 ) )  result . METHOD_2 ( VAR_3 ) (  result . METHOD_3 ( VAR_4 ) )  result . METHOD_3 ( VAR_4 ) (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StoragePool ) TYPE org.ovirt.engine.core.common.businessentities.StoragePool ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . get ( VAR_3 ) ) INIT = VAR_2 . get ( VAR_3 ) ) VAR VAR (  TYPE_1 . METHOD_2 ( VAR_1 ) )  TYPE_1 . METHOD_2 ( VAR_1 ) ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ( INIT = VAR_1 . getName ( ) ) INIT = VAR_1 . getName ( ) ) VAR VAR (  TYPE_1 . METHOD_3 ( name . equals ( VAR_4 . METHOD_4 ( VAR_3 , VAR_5 . StoragePool ) ) ) )  TYPE_1 . METHOD_3 ( name . equals ( VAR_4 . METHOD_4 ( VAR_3 , VAR_5 . StoragePool ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source != null ? ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; )  return source != null ? ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; } } (  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_1 , new TYPE_2 ( ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_1 , new TYPE_2 ( ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_1 ) ( getSelectedItem ( ) ) ) ) INIT = ( ( TYPE_1 ) ( getSelectedItem ( ) ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME parameters ) NAME parameters ( INIT = new TYPE_2 ( VAR_1 . METHOD_2 ( ) ) ) INIT = new TYPE_2 ( VAR_1 . METHOD_2 ( ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_3 ( ) { public void METHOD_3 ( TYPE_4 result ) { METHOD_4 ( result . getReturnValue ( ) ) ; } } ) INIT = new TYPE_3 ( ) { public void METHOD_3 ( TYPE_4 result ) { METHOD_4 ( result . getReturnValue ( ) ) ; } } ) VAR VAR ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_3 ) NAME METHOD_3 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_4 ( result . getReturnValue ( ) ) )  METHOD_4 ( result . getReturnValue ( ) ) ) BLOCK BLOCK ) METHOD METHOD (  getWindow ( ) . METHOD_5 ( ) )  getWindow ( ) . METHOD_5 ( ) (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_6 ( VAR_3 , parameters , VAR_2 ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_6 ( VAR_3 , parameters , VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME object ) NAME object ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 = new TYPE_2 ( VAR_2 , VAR_3 , false , VAR_4 ) )  VAR_1 = new TYPE_2 ( VAR_2 , VAR_3 , false , VAR_4 ) (  VAR_5 = new TYPE_3 ( VAR_6 , VAR_4 ) )  VAR_5 = new TYPE_3 ( VAR_6 , VAR_4 ) (  VAR_7 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_8 , VAR_9 ) )  VAR_7 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_8 , VAR_9 ) (  METHOD_5 ( VAR_10 ) )  METHOD_5 ( VAR_10 ) (  METHOD_5 ( VAR_11 ) )  METHOD_5 ( VAR_11 ) (  VAR_12 . METHOD_6 ( VAR_5 ) )  VAR_12 . METHOD_6 ( VAR_5 ) (  VAR_13 . METHOD_6 ( VAR_1 ) )  VAR_13 . METHOD_6 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_3 == null ) COND VAR_3 == null ( THEN THEN (  VAR_3 = TYPE_2 . METHOD_2 ( ) )  VAR_3 = TYPE_2 . METHOD_2 ( ) ) THEN THEN ) IF IF ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME value ) NAME value ( INIT = java.lang.String . METHOD_3 ( STRING_1 , VAR_3 ) ) INIT = java.lang.String . METHOD_3 ( STRING_1 , VAR_3 ) ) VAR VAR (  put ( VAR_1 , VAR_2 , value ) )  put ( VAR_1 , VAR_2 , value ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  METHOD_3 ( ) )  METHOD_3 ( ) (  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_2 ) . METHOD_4 ( TYPE_1 . any ( VAR_3 . VM class ) ) )  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_2 ) . METHOD_4 ( TYPE_1 . any ( VAR_3 . VM class ) ) (  VAR_4 . METHOD_5 ( VAR_5 ) )  VAR_4 . METHOD_5 ( VAR_5 ) (  command . METHOD_6 ( ) )  command . METHOD_6 ( ) (  TYPE_2 . METHOD_7 ( command ) )  TYPE_2 . METHOD_7 ( command ) (  org.mockito.Mockito . METHOD_8 ( VAR_2 , org.mockito.Mockito . METHOD_9 ( 1 ) ) . METHOD_4 ( TYPE_1 . any ( VAR_3 . VM class ) ) )  org.mockito.Mockito . METHOD_8 ( VAR_2 , org.mockito.Mockito . METHOD_9 ( 1 ) ) . METHOD_4 ( TYPE_1 . any ( VAR_3 . VM class ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( VAR_1 , new TYPE_2 ( VAR_3 , STRING_1 , STRING_2 , INT_1 , INT_2 , STRING_3 , org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) , VAR_4 , VAR_3 , true , VAR_5 ) , VAR_6 , VAR_7 ) ) INIT = new TYPE_1 ( VAR_1 , new TYPE_2 ( VAR_3 , STRING_1 , STRING_2 , INT_1 , INT_2 , STRING_3 , org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) , VAR_4 , VAR_3 , true , VAR_5 ) , VAR_6 , VAR_7 ) ) VAR VAR (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Version ) TYPE org.ovirt.engine.core.compat.Version ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE java.lang.Boolean ) TYPE java.lang.Boolean ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_5 ) NAME VAR_5 ( INIT = ( VAR_1 . METHOD_2 ( ) ) != ( VAR_2 . METHOD_2 ( ) ) ) INIT = ( VAR_1 . METHOD_2 ( ) ) != ( VAR_2 . METHOD_2 ( ) ) ) VAR VAR (  TYPE_2 . METHOD_1 ( VAR_2 . getId ( ) , VAR_2 . METHOD_2 ( ) , VAR_3 , VAR_4 , VAR_5 ) )  TYPE_2 . METHOD_1 ( VAR_2 . getId ( ) , VAR_2 . METHOD_2 ( ) , VAR_3 , VAR_4 , VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN org.ovirt.engine.core.common.businessentities.VDSGroup ) RETURN org.ovirt.engine.core.common.businessentities.VDSGroup ( NAME getVdsGroup ) NAME getVdsGroup ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME id ) NAME id ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ) TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_1 ( VAR_3 . VDSGroup class ) ) INIT = VAR_2 . METHOD_1 ( VAR_3 . VDSGroup class ) ) VAR VAR (  TYPE_1 . METHOD_2 ( VAR_1 . getId ( ) ) . METHOD_3 ( id ) . METHOD_4 ( ) )  TYPE_1 . METHOD_2 ( VAR_1 . getId ( ) ) . METHOD_3 ( id ) . METHOD_4 ( ) (  TYPE_1 . METHOD_2 ( VAR_1 . METHOD_5 ( ) ) . METHOD_3 ( name ) . METHOD_4 ( ) )  TYPE_1 . METHOD_2 ( VAR_1 . METHOD_5 ( ) ) . METHOD_3 ( name ) . METHOD_4 ( ) (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME version ) NAME version ) VAR VAR ( VAR VAR ( TYPE TYPE_2[] ) TYPE TYPE_2[] ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND TYPE_3 . METHOD_2 ( version , VAR_2 ) ) COND TYPE_3 . METHOD_2 ( version , VAR_2 ) ( THEN THEN (  version . METHOD_3 ( new TYPE_2 ( ) ) )  version . METHOD_3 ( new TYPE_2 ( ) ) ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  version . METHOD_4 ( ) . METHOD_5 ( ) . add ( VAR_3 . value ( ) ) )  version . METHOD_4 ( ) . METHOD_5 ( ) . add ( VAR_3 . value ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  command . METHOD_2 ( new TYPE_1 ( ) ) )  command . METHOD_2 ( new TYPE_1 ( ) ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  VAR_1 . METHOD_3 ( VAR_2 ) )  VAR_1 . METHOD_3 ( VAR_2 ) (  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_3 ) . get ( TYPE_3 . any ( VAR_4 . Guid class ) ) )  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_3 ) . get ( TYPE_3 . any ( VAR_4 . Guid class ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  VAR_1 . setId ( METHOD_3 ( ) . getId ( ) ) )  VAR_1 . setId ( METHOD_3 ( ) . getId ( ) ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME params ) NAME params ( INIT = new TYPE_2 ( VAR_1 ) ) INIT = new TYPE_2 ( VAR_1 ) ) VAR VAR (  METHOD_4 ( null ) )  METHOD_4 ( null ) ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_6 ) NAME METHOD_6 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME model ) NAME model ( INIT = ( ( TYPE_5 ) ( result . METHOD_7 ( ) ) ) ) INIT = ( ( TYPE_5 ) ( result . METHOD_7 ( ) ) ) ) VAR VAR (  model . METHOD_8 ( ) )  model . METHOD_8 ( ) (  model . METHOD_9 ( ) )  model . METHOD_9 ( ) ) BLOCK BLOCK ) METHOD METHOD (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_5 ( VAR_2 , params , new TYPE_3 ( ) { public void METHOD_6 ( TYPE_4 result ) { TYPE_5 model = ( ( TYPE_5 ) ( result . METHOD_7 ( ) ) ) ; model . METHOD_8 ( ) ; model . METHOD_9 ( ) ; } } , this ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_5 ( VAR_2 , params , new TYPE_3 ( ) { public void METHOD_6 ( TYPE_4 result ) { TYPE_5 model = ( ( TYPE_5 ) ( result . METHOD_7 ( ) ) ) ; model . METHOD_8 ( ) ; model . METHOD_9 ( ) ; } } , this ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( METHOD_3 ( ) ) )  METHOD_2 ( METHOD_3 ( ) ) (  METHOD_4 ( 1 , true , getEntity ( 0 ) ) )  METHOD_4 ( 1 , true , getEntity ( 0 ) ) (  VAR_1 . METHOD_5 ( ) )  VAR_1 . METHOD_5 ( ) ( TRY TRY ( BLOCK BLOCK (  resource . get ( ) )  resource . get ( ) (  METHOD_6 ( STRING_1 ) )  METHOD_6 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( BLOCK BLOCK (  METHOD_7 ( VAR_2 ) )  METHOD_7 ( VAR_2 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source ; )  return source ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } (  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new TYPE_1 ( VAR_1 ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new TYPE_1 ( VAR_1 ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME value ) NAME value ( INIT = VAR_3 ) INIT = VAR_3 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( INIT = STRING_2 ) INIT = STRING_2 ) VAR VAR (  VAR_1 . METHOD_1 ( VAR_2 , value , VAR_4 ) )  VAR_1 . METHOD_1 ( VAR_2 , value , VAR_4 ) ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_1 . METHOD_2 ( VAR_2 ) ) INIT = VAR_1 . METHOD_2 ( VAR_2 ) ) VAR VAR (  TYPE_3 . assertEquals ( value , VAR_5 ) )  TYPE_3 . assertEquals ( value , VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME equals ) NAME equals ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME obj ) NAME obj ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return ( ( ( obj != null ) && ( obj instanceof TYPE_1 ) ) && ( TYPE_2 . METHOD_1 ( getId ( ) , ( ( TYPE_1 ) ( obj ) ) . getId ( ) ) ) ) && ( super . equals ( obj ) ) ; )  return ( ( ( obj != null ) && ( obj instanceof TYPE_1 ) ) && ( TYPE_2 . METHOD_1 ( getId ( ) , ( ( TYPE_1 ) ( obj ) ) . getId ( ) ) ) ) && ( super . equals ( obj ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN org.ovirt.engine.core.compat.Guid ) RETURN org.ovirt.engine.core.compat.Guid ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2.VdcActionType ) TYPE TYPE_2.VdcActionType ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_3 ( VAR_1 , new TYPE_4 ( VAR_2 , VAR_4 , VAR_5 , VAR_1 . METHOD_2 ( ) , METHOD_3 ( VAR_2 , TYPE_5 . getParameters ( ) ) , VAR_1 . METHOD_4 ( ) , TYPE_5 . METHOD_5 ( ) ) ) ) INIT = new TYPE_3 ( VAR_1 , new TYPE_4 ( VAR_2 , VAR_4 , VAR_5 , VAR_1 . METHOD_2 ( ) , METHOD_3 ( VAR_2 , TYPE_5 . getParameters ( ) ) , VAR_1 . METHOD_4 ( ) , TYPE_5 . METHOD_5 ( ) ) ) ) VAR VAR (  VAR_3 . METHOD_6 ( TYPE_5 . getParameters ( ) . METHOD_7 ( ) ) )  VAR_3 . METHOD_6 ( TYPE_5 . getParameters ( ) . METHOD_7 ( ) ) ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_6 ) NAME VAR_6 ( INIT = TYPE_6 . getInstance ( ) . METHOD_8 ( VAR_7 , VAR_3 , false ) ) INIT = TYPE_6 . getInstance ( ) . METHOD_8 ( VAR_7 , VAR_3 , false ) ) VAR VAR (  return VAR_6 ; )  return VAR_6 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.network.Network ) TYPE org.ovirt.engine.core.common.businessentities.network.Network ( NAME network ) NAME network ( INIT = METHOD_2 ( null ) ) INIT = METHOD_2 ( null ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ( NAME iface ) NAME iface ( INIT = METHOD_3 ( STRING_1 , null , null , network . getName ( ) ) ) INIT = METHOD_3 ( STRING_1 , null , null , network . getName ( ) ) ) VAR VAR (  org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( VAR_2 . Guid class ) ) ) . thenReturn ( METHOD_4 ( ) ) )  org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( VAR_2 . Guid class ) ) ) . thenReturn ( METHOD_4 ( ) ) (  METHOD_5 ( network , iface , null , false ) )  METHOD_5 ( network , iface , null , false ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( METHOD_2 ( ) ) != null ) && ( METHOD_2 ( ) . METHOD_3 ( STRING_1 ) ) ) COND ( ( METHOD_2 ( ) ) != null ) && ( METHOD_2 ( ) . METHOD_3 ( STRING_1 ) ) ( THEN THEN (  super . METHOD_1 ( VAR_2 . METHOD_4 ( VAR_1 ) ) )  super . METHOD_1 ( VAR_2 . METHOD_4 ( VAR_1 ) ) ) THEN THEN ( ELSE ELSE (  super . METHOD_1 ( VAR_1 ) )  super . METHOD_1 ( VAR_1 ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  VAR_1 . add ( STRING_1 ) )  VAR_1 . add ( STRING_1 ) (  METHOD_2 ( METHOD_3 ( ) ) )  METHOD_2 ( METHOD_3 ( ) ) (  METHOD_4 ( 1 ) )  METHOD_4 ( 1 ) (  METHOD_5 ( 1 ) )  METHOD_5 ( 1 ) (  METHOD_6 ( ) )  METHOD_6 ( ) (  VAR_2 . METHOD_7 ( ) )  VAR_2 . METHOD_7 ( ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME nic ) NAME nic ( INIT = resource . get ( ) ) INIT = resource . get ( ) ) VAR VAR (  METHOD_8 ( nic . METHOD_9 ( ) ) )  METHOD_8 ( nic . METHOD_9 ( ) ) (  VAR_3 . METHOD_10 ( nic , VAR_4 ) )  VAR_3 . METHOD_10 ( nic , VAR_4 ) ) BLOCK BLOCK ( FINALLY FINALLY (  VAR_1 . METHOD_11 ( ) )  VAR_1 . METHOD_11 ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.List<org.ovirt.engine.core.common.businessentities.VDS> ) RETURN java.util.List<org.ovirt.engine.core.common.businessentities.VDS> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS> ( NAME hosts ) NAME hosts ( INIT = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( VAR_1 . size ( ) ) ) INIT = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( VAR_1 . size ( ) ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME host ) NAME host ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME vds ) NAME vds ( INIT = new org.ovirt.engine.core.common.businessentities.VDS ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.VDS ( ) ) VAR VAR (  vds . METHOD_2 ( host . getName ( ) ) )  vds . METHOD_2 ( host . getName ( ) ) (  vds . METHOD_3 ( host . getName ( ) ) )  vds . METHOD_3 ( host . getName ( ) ) (  hosts . add ( vds ) )  hosts . add ( vds ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return hosts ; )  return hosts ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME quota ) NAME quota ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_2 ( quota . METHOD_3 ( ) , quota . getStoragePoolId ( ) ) ) INIT = VAR_2 . METHOD_2 ( quota . METHOD_3 ( ) , quota . getStoragePoolId ( ) ) ) VAR VAR ( IF IF ( COND ( VAR_1 != null ) && ( ! ( VAR_1 . getId ( ) . equals ( quota . getId ( ) ) ) ) ) COND ( VAR_1 != null ) && ( ! ( VAR_1 . getId ( ) . equals ( quota . getId ( ) ) ) ) ( THEN THEN (  METHOD_4 ( VAR_3 ) )  METHOD_4 ( VAR_3 ) (  return false ; )  return false ; ) THEN THEN ) IF IF (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 < java.lang.String > METHOD_2 ( VAR_3 ) ) INIT = VAR_2 < java.lang.String > METHOD_2 ( VAR_3 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME type ) NAME type ( INIT = null ) INIT = null ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  type = TYPE_1 . valueOf ( VAR_1 ) )  type = TYPE_1 . valueOf ( VAR_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_4 . error ( ( STRING_1 + VAR_1 ) ) )  VAR_4 . error ( ( STRING_1 + VAR_1 ) ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  return type ; )  return type ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME list ) NAME list ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR (  list . add ( new TYPE_2 ( TYPE_3 . getParameters ( ) . METHOD_2 ( ) . METHOD_3 ( ) , null , VAR_1 , TYPE_3 . METHOD_4 ( ) , TYPE_3 . getParameters ( ) . METHOD_2 ( ) . METHOD_5 ( ) ) ) )  list . add ( new TYPE_2 ( TYPE_3 . getParameters ( ) . METHOD_2 ( ) . METHOD_3 ( ) , null , VAR_1 , TYPE_3 . METHOD_4 ( ) , TYPE_3 . getParameters ( ) . METHOD_2 ( ) . METHOD_5 ( ) ) ) (  return list ; )  return list ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND result != null ) COND result != null ( THEN THEN ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ( INIT = ( ( org.ovirt.engine.core.common.businessentities.VM ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( result ) ) . getReturnValue ( ) ) ) ) INIT = ( ( org.ovirt.engine.core.common.businessentities.VM ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( result ) ) . getReturnValue ( ) ) ) ) VAR VAR ( IF IF ( COND vm != null ) COND vm != null ( THEN THEN (  METHOD_2 ( vm ) )  METHOD_2 ( vm ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 ) INIT = VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( ( TYPE_2 ) ( VAR_1 . METHOD_2 ( ) ) ) ) INIT = ( ( TYPE_2 ) ( VAR_1 . METHOD_2 ( ) ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME returnValue ) NAME returnValue ( INIT = VAR_4 ) INIT = VAR_4 ) VAR VAR ( IF IF ( COND ( VAR_3 . METHOD_3 ( ) ) != null ) COND ( VAR_3 . METHOD_3 ( ) ) != null ( THEN THEN (  org.ovirt.engine.ui.frontend.Frontend . METHOD_4 ( VAR_5 , new TYPE_4 ( VAR_3 . METHOD_3 ( ) ) ) )  org.ovirt.engine.ui.frontend.Frontend . METHOD_4 ( VAR_5 , new TYPE_4 ( VAR_3 . METHOD_3 ( ) ) ) ) THEN THEN ) IF IF (  VAR_2 = null )  VAR_2 = null (  VAR_1 . METHOD_5 ( ) )  VAR_1 . METHOD_5 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( VAR_2 , vmId ) ) INIT = METHOD_2 ( VAR_2 , vmId ) ) VAR VAR (  TYPE_2 . assertEquals ( true , VAR_1 . METHOD_3 ( ) ) )  TYPE_2 . assertEquals ( true , VAR_1 . METHOD_3 ( ) ) (  org.mockito.Mockito.when ( VAR_3 . get ( VAR_2 ) ) . thenReturn ( METHOD_4 ( ) ) )  org.mockito.Mockito.when ( VAR_3 . get ( VAR_2 ) ) . thenReturn ( METHOD_4 ( ) ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME parameters ) NAME parameters ( INIT = METHOD_5 ( ) ) INIT = METHOD_5 ( ) ) VAR VAR (  parameters . METHOD_6 ( ) . METHOD_7 ( true ) )  parameters . METHOD_6 ( ) . METHOD_7 ( true ) (  METHOD_8 ( parameters , TYPE_4 . METHOD_9 ( METHOD_10 ( VAR_4 ) ) ) )  METHOD_8 ( parameters , TYPE_4 . METHOD_9 ( METHOD_10 ( VAR_4 ) ) ) (  TYPE_5 . METHOD_11 ( command , VAR_5 ) )  TYPE_5 . METHOD_11 ( command , VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<?extendsTYPE_2> ) TYPE TYPE_1<?extendsTYPE_2> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME sender ) NAME sender ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME args ) NAME args ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3<TYPE_4<TYPE_5>> ) TYPE TYPE_3<TYPE_4<TYPE_5>> ( NAME entities ) NAME entities ( INIT = ( ( TYPE_3 < TYPE_4 < TYPE_5 > > ) ( sender ) ) ) INIT = ( ( TYPE_3 < TYPE_4 < TYPE_5 > > ) ( sender ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4<TYPE_5> ) TYPE TYPE_4<TYPE_5> ( NAME VAR_2 ) NAME VAR_2 ( INIT = entities . getSelectedItem ( ) ) INIT = entities . getSelectedItem ( ) ) VAR VAR (  VAR_3 . METHOD_2 ( VAR_2 ) )  VAR_3 . METHOD_2 ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_3 . METHOD_2 ( VAR_1 ) )  TYPE_3 . METHOD_2 ( VAR_1 ) (  TYPE_3 . METHOD_2 ( VAR_2 ) )  TYPE_3 . METHOD_2 ( VAR_2 ) ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_1 . METHOD_3 ( ) ) INIT = VAR_1 . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_1 . getId ( ) ) INIT = VAR_1 . getId ( ) ) VAR VAR (  TYPE_3 . METHOD_2 ( VAR_4 ) )  TYPE_3 . METHOD_2 ( VAR_4 ) (  TYPE_3 . METHOD_2 ( VAR_5 ) )  TYPE_3 . METHOD_2 ( VAR_5 ) ( IF IF ( COND METHOD_4 ( VAR_4 , VAR_2 ) ) COND METHOD_4 ( VAR_4 , VAR_2 ) ( THEN THEN ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_6 ) NAME VAR_6 ( INIT = VAR_7 . METHOD_5 ( VAR_5 ) ) INIT = VAR_7 . METHOD_5 ( VAR_5 ) ) VAR VAR (  METHOD_6 ( VAR_4 , VAR_2 , VAR_6 , VAR_3 ) )  METHOD_6 ( VAR_4 , VAR_2 , VAR_6 , VAR_3 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Boolean ) TYPE java.lang.Boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME url ) NAME url ( INIT = this . METHOD_2 ( ) ) INIT = this . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_5 ( ) ) INIT = new TYPE_5 ( ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_6> ) TYPE java.util.List<TYPE_6> ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_2 . METHOD_3 ( ) ) INIT = VAR_2 . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_7 ) TYPE TYPE_7 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_7 ( url ) ) INIT = new TYPE_7 ( url ) ) VAR VAR ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN (  VAR_4 . add ( STRING_1 , VAR_1 , VAR_5 ) )  VAR_4 . add ( STRING_1 , VAR_1 , VAR_5 ) ) THEN THEN ) IF IF (  url = VAR_4 . METHOD_3 ( ) )  url = VAR_4 . METHOD_3 ( ) (  return METHOD_4 ( ) . METHOD_1 ( url , VAR_6 class , VAR_3 ) ; )  return METHOD_4 ( ) . METHOD_1 ( url , VAR_6 class , VAR_3 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  assertEquals ( VAR_2 [ VAR_1 ] . toString ( ) , model . getId ( ) ) )  assertEquals ( VAR_2 [ VAR_1 ] . toString ( ) , model . getId ( ) ) (  assertEquals ( VAR_3 [ VAR_1 ] , model . getName ( ) ) )  assertEquals ( VAR_3 [ VAR_1 ] , model . getName ( ) ) (  METHOD_2 ( model . METHOD_3 ( ) ) )  METHOD_2 ( model . METHOD_3 ( ) ) (  assertEquals ( VAR_4 , model . METHOD_3 ( ) . getName ( ) ) )  assertEquals ( VAR_4 , model . METHOD_3 ( ) . getName ( ) ) (  METHOD_4 ( model ) )  METHOD_4 ( model ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  return TYPE_1 . METHOD_2 ( TYPE_1 . getParameters ( ) . METHOD_3 ( ) . METHOD_4 ( ) , TYPE_1 . getParameters ( ) . METHOD_3 ( ) . METHOD_5 ( ) , TYPE_1 . getVdsGroup ( ) . METHOD_6 ( ) . toString ( ) , TYPE_1 . getReturnValue ( ) . METHOD_7 ( ) ) ; )  return TYPE_1 . METHOD_2 ( TYPE_1 . getParameters ( ) . METHOD_3 ( ) . METHOD_4 ( ) , TYPE_1 . getParameters ( ) . METHOD_3 ( ) . METHOD_5 ( ) , TYPE_1 . getVdsGroup ( ) . METHOD_6 ( ) . toString ( ) , TYPE_1 . getReturnValue ( ) . METHOD_7 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) RETURN org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME iface ) NAME iface ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.network ) TYPE org.ovirt.engine.core.common.businessentities.network ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return METHOD_2 ( ( ( ( iface . getName ( ) ) + STRING_1 ) + ( VAR_1 . METHOD_3 ( ) ) ) , false , null , null , VAR_2 , VAR_1 . getName ( ) , VAR_1 . METHOD_3 ( ) ) ; )  return METHOD_2 ( ( ( ( iface . getName ( ) ) + STRING_1 ) + ( VAR_1 . METHOD_3 ( ) ) ) , false , null , null , VAR_2 , VAR_1 . getName ( ) , VAR_1 . METHOD_3 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  return ( ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) ) && ( ( TYPE_1 . getParameters ( ) . METHOD_3 ( ) ) != null ) ) && ( ! ( METHOD_4 ( TYPE_1 . getParameters ( ) . METHOD_3 ( ) , TYPE_1 . getParameters ( ) . METHOD_5 ( ) ) ) ) ; )  return ( ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) ) && ( ( TYPE_1 . getParameters ( ) . METHOD_3 ( ) ) != null ) ) && ( ! ( METHOD_4 ( TYPE_1 . getParameters ( ) . METHOD_3 ( ) , TYPE_1 . getParameters ( ) . METHOD_5 ( ) ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME vm ) NAME vm ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( vm . METHOD_2 ( ) ) == null ) || ( vm . METHOD_2 ( ) . isEmpty ( ) ) ) COND ( ( vm . METHOD_2 ( ) ) == null ) || ( vm . METHOD_2 ( ) . isEmpty ( ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_3 ( vm ) ) INIT = METHOD_3 ( vm ) ) VAR VAR ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( TRY TRY ( BLOCK BLOCK (  java.lang.Integer . METHOD_4 ( VAR_1 ) )  java.lang.Integer . METHOD_4 ( VAR_1 ) (  return true ; )  return true ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME e ) NAME e ( BLOCK BLOCK (  return false ; )  return false ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME status ) NAME status ) VAR VAR ( VAR VAR ( TYPE TYPE_2.VdcBllMessages ) TYPE TYPE_2.VdcBllMessages ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME returnValue ) NAME returnValue ( INIT = false ) INIT = false ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StoragePool ) TYPE org.ovirt.engine.core.common.businessentities.StoragePool ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_3 . METHOD_2 ( ) ) INIT = TYPE_3 . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN (  returnValue = ( VAR_2 . getStatus ( ) ) != status )  returnValue = ( VAR_2 . getStatus ( ) ) != status ( IF IF ( COND ( ! returnValue ) && ( ! ( TYPE_3 . getReturnValue ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_1 . name ( ) ) ) ) ) COND ( ! returnValue ) && ( ! ( TYPE_3 . getReturnValue ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_1 . name ( ) ) ) ) ( THEN THEN (  addCanDoActionMessage ( VAR_1 ) )  addCanDoActionMessage ( VAR_1 ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return returnValue ; )  return returnValue ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ) INIT = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ) VAR VAR (  METHOD_4 ( ) . METHOD_5 ( VAR_1 ) )  METHOD_4 ( ) . METHOD_5 ( VAR_1 ) (  log . METHOD_6 ( STRING_1 , VAR_1 ) )  log . METHOD_6 ( STRING_1 , VAR_1 ) ( IF IF ( COND org.ovirt.engine.core.compat.Guid . METHOD_7 ( TYPE_1 . getParameters ( ) . METHOD_8 ( ) ) ) COND org.ovirt.engine.core.compat.Guid . METHOD_7 ( TYPE_1 . getParameters ( ) . METHOD_8 ( ) ) ( THEN THEN (  log . METHOD_6 ( STRING_2 ) )  log . METHOD_6 ( STRING_2 ) ) THEN THEN ( ELSE ELSE (  TYPE_1 . METHOD_9 ( ) )  TYPE_1 . METHOD_9 ( ) ) ELSE ELSE ) IF IF (  TYPE_1 . METHOD_10 ( true ) )  TYPE_1 . METHOD_10 ( true ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME id ) NAME id ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source != null ? new java.util.ArrayList < TYPE_1 > ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; )  return source != null ? new java.util.ArrayList < TYPE_1 > ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? new java.util.ArrayList < TYPE_1 > ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? new java.util.ArrayList < TYPE_1 > ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; } } (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN java.util.List<org.ovirt.engine.core.common.businessentities.VM> ) RETURN java.util.List<org.ovirt.engine.core.common.businessentities.VM> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( getParameters ( ) . getStoragePoolId ( ) , getParameters ( ) . METHOD_2 ( ) ) ) INIT = new TYPE_1 ( getParameters ( ) . getStoragePoolId ( ) , getParameters ( ) . METHOD_2 ( ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2.VdcQueryReturnValue ) TYPE TYPE_2.VdcQueryReturnValue ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_3 ( ) . METHOD_4 ( VAR_3 , VAR_1 ) ) INIT = METHOD_3 ( ) . METHOD_4 ( VAR_3 , VAR_1 ) ) VAR VAR ( IF IF ( COND ! ( VAR_2 . getSucceeded ( ) ) ) COND ! ( VAR_2 . getSucceeded ( ) ) ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF (  return ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VM > ) ( VAR_2 . getReturnValue ( ) ) ) ; )  return ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VM > ) ( VAR_2 . getReturnValue ( ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.Object> ) TYPE java.util.Map<java.lang.String,java.lang.Object> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME returnValue ) NAME returnValue ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  returnValue . METHOD_2 ( new java.util.Map [ ] { METHOD_3 ( VAR_2 , VAR_1 ) } ) )  returnValue . METHOD_2 ( new java.util.Map [ ] { METHOD_3 ( VAR_2 , VAR_1 ) } ) (  returnValue . METHOD_4 ( true ) )  returnValue . METHOD_4 ( true ) (  org.mockito.Mockito.doReturn ( returnValue ) . when ( VAR_3 ) . METHOD_5 ( TYPE_2 . METHOD_6 ( VAR_4 ) , TYPE_2 . any ( VAR_5 class ) ) )  org.mockito.Mockito.doReturn ( returnValue ) . when ( VAR_3 ) . METHOD_5 ( TYPE_2 . METHOD_6 ( VAR_4 ) , TYPE_2 . any ( VAR_5 class ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND source != null ) COND source != null ( THEN THEN ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDSGroup> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDSGroup> ( NAME list ) NAME list ( INIT = TYPE_1 . METHOD_1 ( ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( source ) ) , VAR_1 , VAR_2 ) ) INIT = TYPE_1 . METHOD_1 ( ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( source ) ) , VAR_1 , VAR_2 ) ) VAR VAR (  TYPE_2 . METHOD_2 ( list , new TYPE_3 ( ) ) )  TYPE_2 . METHOD_2 ( list , new TYPE_3 ( ) ) (  return list ; )  return list ; ) THEN THEN ) IF IF (  return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ( ) ; )  return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME from ) NAME from ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  from . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_1 class ) . value ( ) ) )  from . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_1 class ) . value ( ) ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_3 ( ) ) INIT = new TYPE_3 ( ) ) VAR VAR (  VAR_2 . setId ( from . getId ( ) ) )  VAR_2 . setId ( from . getId ( ) ) (  from . METHOD_4 ( ) . METHOD_5 ( ) )  from . METHOD_4 ( ) . METHOD_5 ( ) (  from . METHOD_4 ( ) . METHOD_4 ( ) . add ( VAR_2 ) )  from . METHOD_4 ( ) . METHOD_4 ( ) . add ( VAR_2 ) (  return from ; )  return from ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( new TYPE_1 ( vmId , VAR_1 , METHOD_3 ( ) ) ) )  METHOD_2 ( new TYPE_1 ( vmId , VAR_1 , METHOD_3 ( ) ) ) (  org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_4 ( ) )  org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_4 ( ) (  org.mockito.Mockito.doReturn ( new TYPE_2 . ValidationResult ( VAR_2 ) ) . when ( VAR_3 ) . METHOD_5 ( ) )  org.mockito.Mockito.doReturn ( new TYPE_2 . ValidationResult ( VAR_2 ) ) . when ( VAR_3 ) . METHOD_5 ( ) (  TYPE_3 . METHOD_6 ( command . METHOD_7 ( VAR_3 ) ) )  TYPE_3 . METHOD_6 ( command . METHOD_7 ( VAR_3 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  VAR_4 . addValue ( STRING_1 , VAR_1 ) . addValue ( STRING_2 , VAR_2 ) . addValue ( STRING_3 , VAR_3 ) )  VAR_4 . addValue ( STRING_1 , VAR_1 ) . addValue ( STRING_2 , VAR_2 ) . addValue ( STRING_3 , VAR_3 ) ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_5 ) NAME VAR_5 ( INIT = METHOD_3 ( ) . METHOD_4 ( STRING_4 , METHOD_5 ( ) , VAR_4 ) ) INIT = METHOD_3 ( ) . METHOD_4 ( STRING_4 , METHOD_5 ( ) , VAR_4 ) ) VAR VAR (  return VAR_5 ; )  return VAR_5 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME entity ) NAME entity ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME id ) NAME id ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( entity . METHOD_2 ( ) ) == null ) || ( ! ( entity . METHOD_2 ( ) . equals ( id ) ) ) ) COND ( ( entity . METHOD_2 ( ) ) == null ) || ( ! ( entity . METHOD_2 ( ) . equals ( id ) ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  entity . METHOD_3 ( null ) )  entity . METHOD_3 ( null ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<TYPE_1> ) TYPE java.util.ArrayList<TYPE_1> ( NAME models ) NAME models ( INIT = new java.util.ArrayList < TYPE_1 > ( ) ) INIT = new java.util.ArrayList < TYPE_1 > ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  models . add ( VAR_1 ) )  models . add ( VAR_1 ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_3 ( ) ) INIT = new TYPE_3 ( ) ) VAR VAR (  models . add ( VAR_2 ) )  models . add ( VAR_2 ) ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_4 ( ) ) INIT = new TYPE_4 ( ) ) VAR VAR (  models . add ( VAR_3 ) )  models . add ( VAR_3 ) ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_5 ( ) ) INIT = new TYPE_5 ( ) ) VAR VAR (  models . add ( VAR_4 ) )  models . add ( VAR_4 ) (  TYPE_6 . METHOD_2 ( VAR_5 , models ) )  TYPE_6 . METHOD_2 ( VAR_5 , models ) (  return models ; )  return models ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( METHOD_3 ( ) ) )  METHOD_2 ( METHOD_3 ( ) ) (  METHOD_4 ( 0 , true ) )  METHOD_4 ( 0 , true ) (  VAR_1 . METHOD_5 ( ) )  VAR_1 . METHOD_5 ( ) ( TRY TRY ( BLOCK BLOCK (  resource . METHOD_6 ( TYPE_1 . getModel ( 0 , false ) ) )  resource . METHOD_6 ( TYPE_1 . getModel ( 0 , false ) ) (  METHOD_7 ( STRING_1 ) )  METHOD_7 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( BLOCK BLOCK (  METHOD_8 ( VAR_2 ) )  METHOD_8 ( VAR_2 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) . METHOD_3 ( TYPE_2 . METHOD_4 ( ) ) ) INIT = METHOD_2 ( ) . METHOD_3 ( TYPE_2 . METHOD_4 ( ) ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  METHOD_2 ( ) . METHOD_5 ( VAR_2 . METHOD_6 ( ) , TYPE_2 . METHOD_4 ( ) ) )  METHOD_2 ( ) . METHOD_5 ( VAR_2 . METHOD_6 ( ) , TYPE_2 . METHOD_4 ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1.ValidationResult ) RETURN TYPE_1.ValidationResult ( NAME validate ) NAME validate ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME value ) NAME value ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.ValidationResult ) TYPE TYPE_1.ValidationResult ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . validate ( value ) ) INIT = TYPE_2 . validate ( value ) ) VAR VAR ( IF IF ( COND ! ( VAR_1 . METHOD_1 ( ) ) ) COND ! ( VAR_1 . METHOD_1 ( ) ) ( THEN THEN (  return VAR_1 ; )  return VAR_1 ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1.ValidationResult ) TYPE TYPE_1.ValidationResult ( NAME result ) NAME result ( INIT = new TYPE_1 . ValidationResult ( ) ) INIT = new TYPE_1 . ValidationResult ( ) ) VAR VAR ( IF IF ( COND value instanceof java.lang.String ) COND value instanceof java.lang.String ( THEN THEN (  result . METHOD_2 ( METHOD_3 ( ( ( java.lang.String ) ( value ) ) ) ) )  result . METHOD_2 ( METHOD_3 ( ( ( java.lang.String ) ( value ) ) ) ) (  result . METHOD_4 ( VAR_2 ) )  result . METHOD_4 ( VAR_2 ) ) THEN THEN ) IF IF (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  super . setItems ( VAR_1 ) )  super . setItems ( VAR_1 ) ( IF IF ( COND ( getSelectedItem ( ) ) == null ) COND ( getSelectedItem ( ) ) == null ( THEN THEN (  setSelectedItem ( ( ( VAR_1 . size ( ) ) > 1 ? VAR_1 . get ( 1 ) : VAR_1 . get ( 0 ) ) ) )  setSelectedItem ( ( ( VAR_1 . size ( ) ) > 1 ? VAR_1 . get ( 1 ) : VAR_1 . get ( 0 ) ) ) ) THEN THEN ) IF IF (  METHOD_2 ( ) )  METHOD_2 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  cmd . getVm ( ) . METHOD_3 ( VAR_1 ) )  cmd . getVm ( ) . METHOD_3 ( VAR_1 ) (  org.mockito.Mockito.doReturn ( true ) . when ( cmd ) . METHOD_4 ( ) )  org.mockito.Mockito.doReturn ( true ) . when ( cmd ) . METHOD_4 ( ) (  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( VAR_3 ) . METHOD_5 ( ) )  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( VAR_3 ) . METHOD_5 ( ) (  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( VAR_3 ) . METHOD_6 ( ) )  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( VAR_3 ) . METHOD_6 ( ) (  org.mockito.Mockito.doReturn ( true ) . when ( cmd ) . METHOD_7 ( ) )  org.mockito.Mockito.doReturn ( true ) . when ( cmd ) . METHOD_7 ( ) (  TYPE_1 . METHOD_8 ( cmd ) )  TYPE_1 . METHOD_8 ( cmd ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( METHOD_3 ( ) ) )  METHOD_2 ( METHOD_3 ( ) ) (  METHOD_4 ( 1 , true ) )  METHOD_4 ( 1 , true ) (  VAR_1 . METHOD_5 ( ) )  VAR_1 . METHOD_5 ( ) ( TRY TRY ( BLOCK BLOCK (  resource . METHOD_6 ( TYPE_1 . getModel ( 0 ) ) )  resource . METHOD_6 ( TYPE_1 . getModel ( 0 ) ) (  METHOD_7 ( STRING_1 ) )  METHOD_7 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( BLOCK BLOCK (  METHOD_8 ( VAR_2 ) )  METHOD_8 ( VAR_2 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_5 ) NAME VAR_5 ( INIT = new TYPE_3 ( ) ) INIT = new TYPE_3 ( ) ) VAR VAR (  VAR_5 . METHOD_2 ( VAR_1 ) )  VAR_5 . METHOD_2 ( VAR_1 ) (  VAR_5 . METHOD_3 ( VAR_4 ) )  VAR_5 . METHOD_3 ( VAR_4 ) (  VAR_5 . METHOD_4 ( VAR_2 ) )  VAR_5 . METHOD_4 ( VAR_2 ) (  VAR_5 . METHOD_5 ( VAR_3 . getId ( ) ) )  VAR_5 . METHOD_5 ( VAR_3 . getId ( ) ) (  TYPE_4 . METHOD_1 ( VAR_5 ) )  TYPE_4 . METHOD_1 ( VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME network ) NAME network ( INIT = ( ( TYPE_1 ) ( item ) ) ) INIT = ( ( TYPE_1 ) ( item ) ) ) VAR VAR ( IF IF ( COND network . METHOD_2 ( ) ) COND network . METHOD_2 ( ) ( THEN THEN (  item . METHOD_3 ( ) )  item . METHOD_3 ( ) ) THEN THEN ( ELSE ELSE ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = item . METHOD_4 ( ) . METHOD_5 ( item ) ) INIT = item . METHOD_4 ( ) . METHOD_5 ( item ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . get ( VAR_3 ) . get ( 0 ) ) INIT = VAR_1 . get ( VAR_3 ) . get ( 0 ) ) VAR VAR (  item . METHOD_4 ( ) . METHOD_6 ( VAR_3 , VAR_2 ) )  item . METHOD_4 ( ) . METHOD_6 ( VAR_3 , VAR_2 ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  METHOD_3 ( ) )  METHOD_3 ( ) (  org.mockito.Mockito.doReturn ( TYPE_1 . METHOD_4 ( ) ) . when ( cmd ) . METHOD_5 ( ) )  org.mockito.Mockito.doReturn ( TYPE_1 . METHOD_4 ( ) ) . when ( cmd ) . METHOD_5 ( ) (  org.mockito.Mockito.doReturn ( org.ovirt.engine.core.compat.Guid . METHOD_6 ( ) ) . when ( cmd ) . METHOD_7 ( ) )  org.mockito.Mockito.doReturn ( org.ovirt.engine.core.compat.Guid . METHOD_6 ( ) ) . when ( cmd ) . METHOD_7 ( ) (  TYPE_2 . METHOD_8 ( cmd . validate ( ) ) )  TYPE_2 . METHOD_8 ( cmd . validate ( ) ) (  TYPE_2 . METHOD_8 ( cmd . getReturnValue ( ) . METHOD_9 ( ) . isEmpty ( ) ) )  TYPE_2 . METHOD_8 ( cmd . getReturnValue ( ) . METHOD_9 ( ) . isEmpty ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME entity ) NAME entity ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( entity . METHOD_2 ( ) ) != null ) COND ( entity . METHOD_2 ( ) ) != null ( THEN THEN ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_1 . METHOD_3 ( new TYPE_3 ( ) ) )  VAR_1 . METHOD_3 ( new TYPE_3 ( ) ) (  VAR_1 . METHOD_4 ( ) . setId ( entity . METHOD_2 ( ) . toString ( ) ) )  VAR_1 . METHOD_4 ( ) . setId ( entity . METHOD_2 ( ) . toString ( ) ) (  return VAR_1 ; )  return VAR_1 ; ) THEN THEN ( ELSE ELSE (  return null ; )  return null ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) . equals ( VAR_1 . METHOD_2 ( ) . getId ( ) ) ) ) COND ! ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) . equals ( VAR_1 . METHOD_2 ( ) . getId ( ) ) ) ( THEN THEN (  VAR_2 . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) )  VAR_2 . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ) THEN THEN ) IF IF (  VAR_2 . METHOD_4 ( VAR_1 . METHOD_2 ( ) ) )  VAR_2 . METHOD_4 ( VAR_1 . METHOD_2 ( ) ) (  org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_6 ( ) . METHOD_7 ( VAR_1 ) )  org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_6 ( ) . METHOD_7 ( VAR_1 ) (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2.VdcActionType ) TYPE TYPE_2.VdcActionType ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2.VdcActionParametersBase ) TYPE TYPE_2.VdcActionParametersBase ( NAME params ) NAME params ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_2 . METHOD_2 ( STRING_1 ) )  VAR_2 . METHOD_2 ( STRING_1 ) (  METHOD_3 ( VAR_1 , params ) )  METHOD_3 ( VAR_1 , params ) (  params . METHOD_4 ( METHOD_5 ( ) . getId ( ) ) )  params . METHOD_4 ( METHOD_5 ( ) . getId ( ) ) ( IF IF ( COND VAR_3 ) COND VAR_3 ( THEN THEN ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_4 . METHOD_6 ( true ) )  VAR_4 . METHOD_6 ( true ) (  return VAR_4 ; )  return VAR_4 ; ) THEN THEN ) IF IF (  return METHOD_7 ( ) . METHOD_8 ( VAR_1 , params ) ; )  return METHOD_7 ( ) . METHOD_8 ( VAR_1 , params ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<?> ) TYPE TYPE_1<?> ( NAME command ) NAME command ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( ( VAR_1 ) == null ) || ( ( VAR_1 . METHOD_2 ( ) ) == null ) ) || ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) ) COND ( ( ( VAR_1 ) == null ) || ( ( VAR_1 . METHOD_2 ( ) ) == null ) ) || ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) ( THEN THEN (  TYPE_2 . METHOD_4 ( command , command . METHOD_5 ( ) , command . METHOD_6 ( ) ) )  TYPE_2 . METHOD_4 ( command , command . METHOD_5 ( ) , command . METHOD_6 ( ) ) ) THEN THEN ) IF IF (  TYPE_3 . METHOD_7 ( command . METHOD_8 ( ) ) )  TYPE_3 . METHOD_7 ( command . METHOD_8 ( ) ) (  command . METHOD_9 ( ) )  command . METHOD_9 ( ) (  command . METHOD_10 ( ) )  command . METHOD_10 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME VAR_1 ) NAME VAR_1 ( INIT = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ) INIT = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ) VAR VAR ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_3 = ( ( java.util.HashMap < TYPE_1 , java.lang.Integer > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) )  VAR_3 = ( ( java.util.HashMap < TYPE_1 , java.lang.Integer > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD (  VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { VAR_3 = ( ( java.util.HashMap < TYPE_1 , java.lang.Integer > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ; } } )  VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { VAR_3 = ( ( java.util.HashMap < TYPE_1 , java.lang.Integer > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ; } } (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_4 , new TYPE_3 ( VAR_5 ) , VAR_1 ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_4 , new TYPE_3 ( VAR_5 ) , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( VAR_2 ) ) INIT = METHOD_2 ( VAR_2 ) ) VAR VAR (  VAR_3 . METHOD_3 ( ) )  VAR_3 . METHOD_3 ( ) (  TYPE_2 . METHOD_4 ( STRING_1 , VAR_3 . METHOD_5 ( VAR_4 , VAR_2 , false ) ) )  TYPE_2 . METHOD_4 ( STRING_1 , VAR_3 . METHOD_5 ( VAR_4 , VAR_2 , false ) ) (  TYPE_2 . METHOD_4 ( STRING_1 , VAR_3 . METHOD_6 ( VAR_4 , false ) ) )  TYPE_2 . METHOD_4 ( STRING_1 , VAR_3 . METHOD_6 ( VAR_4 , false ) ) (  org.mockito.Mockito . METHOD_7 ( VAR_1 ) )  org.mockito.Mockito . METHOD_7 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( null ) )  METHOD_2 ( null ) ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_4 ( ) )  METHOD_4 ( ) ( VAR VAR ( TYPE java.util.List<TYPE_2<?>> ) TYPE java.util.List<TYPE_2<?>> ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( java.util.List < TYPE_2 < ? > > ) ( returnValue ) ) ) INIT = ( ( java.util.List < TYPE_2 < ? > > ) ( returnValue ) ) ) VAR VAR (  VAR_1 . add ( 0 , null ) )  VAR_1 . add ( 0 , null ) (  METHOD_5 ( ) . setItems ( VAR_1 ) )  METHOD_5 ( ) . setItems ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD (  TYPE_1 . getInstance ( ) . METHOD_3 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { METHOD_4 ( ) ; java.util.List < TYPE_2 < ? > > VAR_1 = ( ( java.util.List < TYPE_2 < ? > > ) ( returnValue ) ) ; VAR_1 . add ( 0 , null ) ; METHOD_5 ( ) . setItems ( VAR_1 ) ; } } ) ) )  TYPE_1 . getInstance ( ) . METHOD_3 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { METHOD_4 ( ) ; java.util.List < TYPE_2 < ? > > VAR_1 = ( ( java.util.List < TYPE_2 < ? > > ) ( returnValue ) ) ; VAR_1 . add ( 0 , null ) ; METHOD_5 ( ) . setItems ( VAR_1 ) ; } } ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StoragePool> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StoragePool> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME vds ) NAME vds ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN (  METHOD_2 ( ) . setItems ( VAR_1 ) )  METHOD_2 ( ) . setItems ( VAR_1 ) (  METHOD_2 ( ) . setSelectedItem ( TYPE_1 . METHOD_3 ( VAR_1 , new TYPE_2 ( vds . getStoragePoolId ( ) ) ) ) )  METHOD_2 ( ) . setSelectedItem ( TYPE_1 . METHOD_3 ( VAR_1 , new TYPE_2 ( vds . getStoragePoolId ( ) ) ) ) ( IF IF ( COND ( METHOD_2 ( ) . getSelectedItem ( ) ) == null ) COND ( METHOD_2 ( ) . getSelectedItem ( ) ) == null ( THEN THEN (  METHOD_2 ( ) . setSelectedItem ( TYPE_1 . METHOD_3 ( VAR_1 ) ) )  METHOD_2 ( ) . setSelectedItem ( TYPE_1 . METHOD_3 ( VAR_1 ) ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_2 ( ) . get ( name ) ) INIT = VAR_2 . METHOD_2 ( ) . get ( name ) ) VAR VAR (  VAR_1 . METHOD_3 ( STRING_2 ) )  VAR_1 . METHOD_3 ( STRING_2 ) (  VAR_1 . METHOD_4 ( new TYPE_2 ( ) ) )  VAR_1 . METHOD_4 ( new TYPE_2 ( ) ) (  VAR_2 . METHOD_2 ( ) . METHOD_5 ( VAR_1 ) )  VAR_2 . METHOD_2 ( ) . METHOD_5 ( VAR_1 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_2 . METHOD_2 ( ) . get ( name ) ) INIT = VAR_2 . METHOD_2 ( ) . get ( name ) ) VAR VAR (  TYPE_3 . METHOD_6 ( VAR_3 ) )  TYPE_3 . METHOD_6 ( VAR_3 ) (  TYPE_3 . assertEquals ( VAR_1 , VAR_3 ) )  TYPE_3 . assertEquals ( VAR_1 , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_4 ( ) ) ) . thenReturn ( TYPE_2 . METHOD_5 ( ) ) )  org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_4 ( ) ) ) . thenReturn ( TYPE_2 . METHOD_5 ( ) ) (  org.mockito.Mockito.when ( VAR_2 . METHOD_6 ( ) ) . thenReturn ( VAR_1 ) )  org.mockito.Mockito.when ( VAR_2 . METHOD_6 ( ) ) . thenReturn ( VAR_1 ) (  validator = new TYPE_3 ( VAR_2 , cluster , VAR_3 ) )  validator = new TYPE_3 ( VAR_2 , cluster , VAR_3 ) (  TYPE_4 . METHOD_7 ( validator . METHOD_1 ( ) , TYPE_5 . METHOD_8 ( ) ) )  TYPE_4 . METHOD_7 ( validator . METHOD_1 ( ) , TYPE_5 . METHOD_8 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.StorageDomain ) TYPE TYPE_1.StorageDomain ( NAME model ) NAME model ( INIT = new TYPE_1 . StorageDomain ( ) ) INIT = new TYPE_1 . StorageDomain ( ) ) VAR VAR (  METHOD_2 ( METHOD_3 ( ) ) )  METHOD_2 ( METHOD_3 ( ) ) (  VAR_1 . METHOD_4 ( ) )  VAR_1 . METHOD_4 ( ) ( TRY TRY ( BLOCK BLOCK (  VAR_2 . add ( model ) )  VAR_2 . add ( model ) (  METHOD_5 ( STRING_1 ) )  METHOD_5 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( BLOCK BLOCK (  METHOD_6 ( VAR_3 , STRING_2 , STRING_3 , STRING_4 ) )  METHOD_6 ( VAR_3 , STRING_2 , STRING_3 , STRING_4 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  command . getParameters ( ) . METHOD_2 ( VAR_1 ) )  command . getParameters ( ) . METHOD_2 ( VAR_1 ) (  command . getParameters ( ) . METHOD_3 ( VAR_2 ) )  command . getParameters ( ) . METHOD_3 ( VAR_2 ) ( VAR VAR ( TYPE java.util.HashMap<java.lang.String,java.lang.Object> ) TYPE java.util.HashMap<java.lang.String,java.lang.Object> ( NAME VAR_3 ) NAME VAR_3 ( INIT = command . METHOD_1 ( ) ) INIT = command . METHOD_1 ( ) ) VAR VAR (  TYPE_1 . METHOD_4 ( VAR_3 ) )  TYPE_1 . METHOD_4 ( VAR_3 ) (  TYPE_1 . assertEquals ( STRING_1 , VAR_3 . get ( STRING_2 ) ) )  TYPE_1 . assertEquals ( STRING_1 , VAR_3 . get ( STRING_2 ) ) (  TYPE_1 . assertEquals ( STRING_3 , VAR_3 . get ( STRING_4 ) ) )  TYPE_1 . assertEquals ( STRING_3 , VAR_3 . get ( STRING_4 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME host ) NAME host ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.VdcQueryReturnValue ) TYPE TYPE_1.VdcQueryReturnValue ( NAME returnValue ) NAME returnValue ( INIT = TYPE_2 . getInstance ( ) . METHOD_2 ( VAR_1 , new TYPE_3 ( host . getId ( ) ) ) ) INIT = TYPE_2 . getInstance ( ) . METHOD_2 ( VAR_1 , new TYPE_3 ( host . getId ( ) ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_4> ) TYPE java.util.List<TYPE_4> ( NAME VAR_2 ) NAME VAR_2 ( INIT = returnValue . getReturnValue ( ) ) INIT = returnValue . getReturnValue ( ) ) VAR VAR (  return TYPE_5 . METHOD_1 ( VAR_2 , host . METHOD_3 ( ) ) ; )  return TYPE_5 . METHOD_1 ( VAR_2 , host . METHOD_3 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . METHOD_2 ( VAR_1 ) ) INIT = VAR_3 . METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN (  VAR_4 . METHOD_3 ( STRING_1 , VAR_1 ) )  VAR_4 . METHOD_3 ( STRING_1 , VAR_1 ) ( TRY TRY ( BLOCK BLOCK (  TYPE_1 . getInstance ( ) . METHOD_4 ( VAR_2 ) )  TYPE_1 . getInstance ( ) . METHOD_4 ( VAR_2 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_4 . METHOD_5 ( STRING_2 , VAR_2 , e . METHOD_6 ( ) ) )  VAR_4 . METHOD_5 ( STRING_2 , VAR_2 , e . METHOD_6 ( ) ) (  VAR_4 . METHOD_7 ( STRING_3 , e ) )  VAR_4 . METHOD_7 ( STRING_3 , e ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( TYPE_2 . getVm ( ) . METHOD_2 ( ) ) != null ) COND ( TYPE_2 . getVm ( ) . METHOD_2 ( ) ) != null ( THEN THEN (  TYPE_3 . getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_2 , new TYPE_4 ( TYPE_2 . getVm ( ) . METHOD_2 ( ) , VAR_1 ) ) )  TYPE_3 . getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_2 , new TYPE_4 ( TYPE_2 . getVm ( ) . METHOD_2 ( ) , VAR_1 ) ) ) THEN THEN ( ELSE ELSE (  org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_5 ( ) . METHOD_6 ( VAR_1 ) )  org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_5 ( ) . METHOD_6 ( VAR_1 ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1.AuditLogType ) RETURN TYPE_1.AuditLogType ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_2 ( TYPE_3 . METHOD_3 ( ) ) ) INIT = TYPE_2 . METHOD_2 ( TYPE_3 . METHOD_3 ( ) ) ) VAR VAR ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  return VAR_3 ; )  return VAR_3 ; ) THEN THEN ( ELSE ELSE (  return VAR_4 ; )  return VAR_4 ; ) ELSE ELSE ) IF IF ) THEN THEN ( ELSE ELSE ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  return VAR_5 ; )  return VAR_5 ; ) THEN THEN ( ELSE ELSE (  return VAR_6 ; )  return VAR_6 ; ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VmTemplate ) TYPE org.ovirt.engine.core.common.businessentities.VmTemplate ( NAME template ) NAME template ( INIT = getModel ( ) . METHOD_2 ( ) . getSelectedItem ( ) ) INIT = getModel ( ) . METHOD_2 ( ) . getSelectedItem ( ) ) VAR VAR ( IF IF ( COND template == null ) COND template == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  METHOD_3 ( template ) )  METHOD_3 ( template ) (  METHOD_4 ( template . METHOD_5 ( ) ) )  METHOD_4 ( template . METHOD_5 ( ) ) (  METHOD_6 ( template . METHOD_7 ( ) ) )  METHOD_6 ( template . METHOD_7 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  org.mockito.Mockito . METHOD_2 ( frontend , org.mockito.Mockito . METHOD_3 ( VAR_1 ) ) . METHOD_4 ( TYPE_2 . METHOD_5 ( VAR_3 ) , TYPE_2 . METHOD_6 ( VAR_4 . VdcActionParametersBase class ) , VAR_5 . METHOD_7 ( ) , TYPE_2 . METHOD_5 ( false ) , TYPE_2 . METHOD_5 ( VAR_2 ) ) )  org.mockito.Mockito . METHOD_2 ( frontend , org.mockito.Mockito . METHOD_3 ( VAR_1 ) ) . METHOD_4 ( TYPE_2 . METHOD_5 ( VAR_3 ) , TYPE_2 . METHOD_6 ( VAR_4 . VdcActionParametersBase class ) , VAR_5 . METHOD_7 ( ) , TYPE_2 . METHOD_5 ( false ) , TYPE_2 . METHOD_5 ( VAR_2 ) ) ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_6 ) NAME VAR_6 ( INIT = VAR_5 . METHOD_8 ( ) ) INIT = VAR_5 . METHOD_8 ( ) ) VAR VAR (  return VAR_6 ; )  return VAR_6 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_5 ) NAME VAR_5 ( INIT = new TYPE_3 ( STRING_1 ) . METHOD_2 ( STRING_2 , VAR_1 ) . METHOD_2 ( STRING_3 , VAR_2 ) . METHOD_2 ( STRING_4 , VAR_3 ) . METHOD_2 ( STRING_5 , VAR_4 ) . METHOD_3 ( ) ) INIT = new TYPE_3 ( STRING_1 ) . METHOD_2 ( STRING_2 , VAR_1 ) . METHOD_2 ( STRING_3 , VAR_2 ) . METHOD_2 ( STRING_4 , VAR_3 ) . METHOD_2 ( STRING_5 , VAR_4 ) . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.Object> ) TYPE java.util.Map<java.lang.String,java.lang.Object> ( NAME response ) NAME response ( INIT = new TYPE_4 ( this . client , VAR_5 ) . METHOD_4 ( STRING_6 ) . METHOD_5 ( java.lang.Object [ ] . class ) ) INIT = new TYPE_4 ( this . client , VAR_5 ) . METHOD_4 ( STRING_6 ) . METHOD_5 ( java.lang.Object [ ] . class ) ) VAR VAR (  return new TYPE_1 ( response ) ; )  return new TYPE_1 ( response ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_1 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) INIT = ( ( TYPE_1 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) VAR VAR (  TYPE_2 . METHOD_1 ( VAR_2 , new TYPE_3 ( ) ) )  TYPE_2 . METHOD_1 ( VAR_2 , new TYPE_3 ( ) ) ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.network.Network ) TYPE org.ovirt.engine.core.common.businessentities.network.Network ( NAME network ) NAME network ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK (  network . METHOD_2 ( ) . setId ( new TYPE_4 ( getEntity ( ) . getId ( ) , network . getId ( ) ) ) )  network . METHOD_2 ( ) . setId ( new TYPE_4 ( getEntity ( ) . getId ( ) , network . getId ( ) ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  setItems ( VAR_2 ) )  setItems ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_1 ) ( model ) ) ) INIT = ( ( TYPE_1 ) ( model ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.ArrayList<TYPE_2> ) TYPE java.util.ArrayList<TYPE_2> ( NAME list ) NAME list ( INIT = ( ( TYPE_3 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) INIT = ( ( TYPE_3 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) VAR VAR (  VAR_1 . METHOD_1 ( list ) )  VAR_1 . METHOD_1 ( list ) (  VAR_1 . METHOD_2 ( ) )  VAR_1 . METHOD_2 ( ) ( IF IF ( COND ( VAR_2 ) != null ) COND ( VAR_2 ) != null ( THEN THEN (  VAR_2 . METHOD_3 ( ) . setItems ( METHOD_4 ( VAR_3 ) ) )  VAR_2 . METHOD_3 ( ) . setItems ( METHOD_4 ( VAR_3 ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME sender ) NAME sender ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME args ) NAME args ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( object . METHOD_2 ( ) . getSelectedItem ( ) ) != null ) COND ( object . METHOD_2 ( ) . getSelectedItem ( ) ) != null ( THEN THEN ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = object . METHOD_2 ( ) . getSelectedItem ( ) . getValue ( ) ) INIT = object . METHOD_2 ( ) . getSelectedItem ( ) . getValue ( ) ) VAR VAR (  VAR_3 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_2 ) ) )  VAR_3 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_2 ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_1 . METHOD_2 ( ) ) ) COND ! ( VAR_1 . METHOD_2 ( ) ) ( THEN THEN ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_3 ( ) . METHOD_4 ( ) . get ( VAR_3 . getId ( ) ) ) INIT = METHOD_3 ( ) . METHOD_4 ( ) . get ( VAR_3 . getId ( ) ) ) VAR VAR ( IF IF ( COND ( VAR_2 . METHOD_5 ( ) ) == ( VAR_4 ) ) COND ( VAR_2 . METHOD_5 ( ) ) == ( VAR_4 ) ( THEN THEN (  VAR_1 . METHOD_6 ( true ) )  VAR_1 . METHOD_6 ( true ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.DiskImage ) TYPE TYPE_1.DiskImage ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_2 . METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) )  TYPE_2 . METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) (  METHOD_5 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) )  METHOD_5 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ( VAR VAR ( TYPE java.util.List<TYPE_1.DiskImage> ) TYPE java.util.List<TYPE_1.DiskImage> ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_6 ( ) . METHOD_7 ( VAR_1 . getId ( ) ) ) INIT = TYPE_2 . METHOD_6 ( ) . METHOD_7 ( VAR_1 . getId ( ) ) ) VAR VAR ( IF IF ( COND ( VAR_2 == null ) || ( VAR_2 . isEmpty ( ) ) ) COND ( VAR_2 == null ) || ( VAR_2 . isEmpty ( ) ) ( THEN THEN (  TYPE_2 . METHOD_8 ( ) . METHOD_3 ( VAR_1 . getId ( ) ) )  TYPE_2 . METHOD_8 ( ) . METHOD_3 ( VAR_1 . getId ( ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected static ) MODIFIER protected static ( RETURN org.ovirt.engine.core.common.businessentities.StorageDomain ) RETURN org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_1.DiskImage> ) TYPE java.util.List<TYPE_1.DiskImage> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ) TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  TYPE_2 . METHOD_2 ( VAR_3 , VAR_2 ) )  TYPE_2 . METHOD_2 ( VAR_3 , VAR_2 ) ( IF IF ( COND ( ( VAR_3 . METHOD_3 ( ) . METHOD_4 ( ) ) && ( ( VAR_3 . getStatus ( ) ) == ( VAR_4 ) ) ) && ( TYPE_2 . METHOD_5 ( VAR_3 , VAR_2 ) ) ) COND ( ( VAR_3 . METHOD_3 ( ) . METHOD_4 ( ) ) && ( ( VAR_3 . getStatus ( ) ) == ( VAR_4 ) ) ) && ( TYPE_2 . METHOD_5 ( VAR_3 , VAR_2 ) ) ( THEN THEN (  return VAR_3 ; )  return VAR_3 ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( java.lang.Boolean ) ( TYPE_2 . METHOD_2 ( VAR_3 , VAR_1 . METHOD_3 ( ) . getValue ( ) ) ) ) ) INIT = ( ( java.lang.Boolean ) ( TYPE_2 . METHOD_2 ( VAR_3 , VAR_1 . METHOD_3 ( ) . getValue ( ) ) ) ) ) VAR VAR (  METHOD_4 ( ) . METHOD_5 ( TYPE_3 . METHOD_6 ( ) ) )  METHOD_4 ( ) . METHOD_5 ( TYPE_3 . METHOD_6 ( ) ) (  METHOD_4 ( ) . setIsChangable ( VAR_2 ) )  METHOD_4 ( ) . setIsChangable ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME result ) NAME result ( INIT = dao . METHOD_2 ( VAR_1 . getId ( ) ) ) INIT = dao . METHOD_2 ( VAR_1 . getId ( ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = dao . get ( VAR_1 . getId ( ) ) ) INIT = dao . get ( VAR_1 . getId ( ) ) ) VAR VAR (  TYPE_2 . assertEquals ( result , ( ( VAR_1 . METHOD_3 ( ) ) + 1 ) ) )  TYPE_2 . assertEquals ( result , ( ( VAR_1 . METHOD_3 ( ) ) + 1 ) ) (  TYPE_2 . assertEquals ( result , VAR_2 . METHOD_3 ( ) ) )  TYPE_2 . assertEquals ( result , VAR_2 . METHOD_3 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  return TYPE_1 . METHOD_2 ( TYPE_2 . getVm ( ) , TYPE_2 . getReturnValue ( ) . METHOD_3 ( ) , TYPE_2 . getVm ( ) . getStoragePoolId ( ) , VAR_1 , METHOD_4 ( ) , METHOD_4 ( ) , METHOD_4 ( ) , METHOD_4 ( ) , true , false , true , true , null ) ; )  return TYPE_1 . METHOD_2 ( TYPE_2 . getVm ( ) , TYPE_2 . getReturnValue ( ) . METHOD_3 ( ) , TYPE_2 . getVm ( ) . getStoragePoolId ( ) , VAR_1 , METHOD_4 ( ) , METHOD_4 ( ) , METHOD_4 ( ) , METHOD_4 ( ) , true , false , true , true , null ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = dao . METHOD_2 ( VAR_2 , VAR_3 ) ) INIT = dao . METHOD_2 ( VAR_2 , VAR_3 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_1 . get ( 0 ) ) INIT = VAR_1 . get ( 0 ) ) VAR VAR (  TYPE_2 . METHOD_3 ( VAR_4 ) )  TYPE_2 . METHOD_3 ( VAR_4 ) (  TYPE_2 . assertEquals ( true , ( ( VAR_1 . size ( ) ) == 1 ) ) )  TYPE_2 . assertEquals ( true , ( ( VAR_1 . size ( ) ) == 1 ) ) (  TYPE_2 . assertEquals ( VAR_4 . METHOD_4 ( ) , java.lang.Integer . valueOf ( INT_1 ) ) )  TYPE_2 . assertEquals ( VAR_4 . METHOD_4 ( ) , java.lang.Integer . valueOf ( INT_1 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VmTemplate ) TYPE org.ovirt.engine.core.common.businessentities.VmTemplate ( NAME template ) NAME template ( INIT = getSelectedItem ( ) ) INIT = getSelectedItem ( ) ) VAR VAR ( IF IF ( COND ( getWindow ( ) ) != null ) COND ( getWindow ( ) ) != null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1.AsyncQuery ) TYPE TYPE_1.AsyncQuery ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 . AsyncQuery ( ) ) INIT = new TYPE_1 . AsyncQuery ( ) ) VAR VAR ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( ( ( org.ovirt.engine.core.common.businessentities.VmTemplate ) ( result ) ) ) )  METHOD_2 ( ( ( org.ovirt.engine.core.common.businessentities.VmTemplate ) ( result ) ) ) ) BLOCK BLOCK ) METHOD METHOD (  VAR_2 = new TYPE_2 ( ) { public void onSuccess ( java.lang.Object result ) { METHOD_2 ( ( ( org.ovirt.engine.core.common.businessentities.VmTemplate ) ( result ) ) ) ; } } )  VAR_2 = new TYPE_2 ( ) { public void onSuccess ( java.lang.Object result ) { METHOD_2 ( ( ( org.ovirt.engine.core.common.businessentities.VmTemplate ) ( result ) ) ) ; } } (  TYPE_3 . getInstance ( ) . METHOD_3 ( VAR_1 , template . getId ( ) ) )  TYPE_3 . getInstance ( ) . METHOD_3 ( VAR_1 , template . getId ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( VAR_2 ) ) . getReturnValue ( ) ) ) ) INIT = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( VAR_2 ) ) . getReturnValue ( ) ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.DiskImage> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.DiskImage> ( NAME VAR_4 ) NAME VAR_4 ( INIT = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ) INIT = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ) VAR VAR (  VAR_4 . METHOD_1 ( VAR_3 ) )  VAR_4 . METHOD_1 ( VAR_3 ) (  TYPE_2 . METHOD_2 ( VAR_4 , new TYPE_3 ( ) ) )  TYPE_2 . METHOD_2 ( VAR_4 , new TYPE_3 ( ) ) ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_5 ) NAME VAR_5 ( INIT = ( ( TYPE_4 ) ( VAR_1 ) ) ) INIT = ( ( TYPE_4 ) ( VAR_1 ) ) ) VAR VAR (  VAR_5 . setItems ( VAR_4 ) )  VAR_5 . setItems ( VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ( IN getReturnValue ( ) . METHOD_2 ( ) ) IN getReturnValue ( ) . METHOD_2 ( ) ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_3 ( ) . get ( VAR_1 ) ) INIT = TYPE_2 . METHOD_3 ( ) . get ( VAR_1 ) ) VAR VAR ( IF IF ( COND org.ovirt.engine.core.compat.Guid . METHOD_4 ( VAR_2 . METHOD_5 ( ) ) ) COND org.ovirt.engine.core.compat.Guid . METHOD_4 ( VAR_2 . METHOD_5 ( ) ) ( THEN THEN (  TYPE_3 . METHOD_6 ( VAR_2 . METHOD_7 ( ) ) )  TYPE_3 . METHOD_6 ( VAR_2 . METHOD_7 ( ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1.Disk ) RETURN TYPE_1.Disk ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.Disk ) TYPE TYPE_1.Disk ( NAME model ) NAME model ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  model . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_1 class ) . value ( ) ) )  model . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_1 class ) . value ( ) ) (  model . METHOD_4 ( TYPE_2 . METHOD_3 ( VAR_2 class ) . value ( ) ) )  model . METHOD_4 ( TYPE_2 . METHOD_3 ( VAR_2 class ) . value ( ) ) (  model . METHOD_5 ( TYPE_3 . METHOD_6 ( TYPE_2 . METHOD_3 ( VAR_3 class ) ) ) )  model . METHOD_5 ( TYPE_3 . METHOD_6 ( TYPE_2 . METHOD_3 ( VAR_3 class ) ) ) (  model . METHOD_7 ( new TYPE_4 ( ) ) )  model . METHOD_7 ( new TYPE_4 ( ) ) (  return model ; )  return model ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  get ( ) )  get ( ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  VAR_1 . METHOD_2 ( id ) )  VAR_1 . METHOD_2 ( id ) ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME host ) NAME host ( INIT = TYPE_3 . METHOD_3 ( VAR_2 , VAR_3 ) ) INIT = TYPE_3 . METHOD_3 ( VAR_2 , VAR_3 ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_5 ) INIT = VAR_5 ) VAR VAR ( IF IF ( COND host != null ) COND host != null ( THEN THEN (  VAR_4 = METHOD_4 ( host ) )  VAR_4 = METHOD_4 ( host ) ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME parameters ) NAME parameters ( INIT = new TYPE_4 ( VAR_1 , VAR_4 ) ) INIT = new TYPE_4 ( VAR_1 , VAR_4 ) ) VAR VAR (  return METHOD_5 ( VAR_6 , parameters ) ; )  return METHOD_5 ( VAR_6 , parameters ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.doReturn ( true ) . when ( VAR_1 ) . METHOD_2 ( ) )  org.mockito.Mockito.doReturn ( true ) . when ( VAR_1 ) . METHOD_2 ( ) (  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( VAR_1 ) . METHOD_3 ( ) )  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( VAR_1 ) . METHOD_3 ( ) (  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( VAR_1 ) . METHOD_4 ( TYPE_1 . any ( VAR_4 . VM class ) ) )  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( VAR_1 ) . METHOD_4 ( TYPE_1 . any ( VAR_4 . VM class ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME returnValue ) NAME returnValue ( INIT = true ) INIT = true ) VAR VAR ( IF IF ( COND ( TYPE_1 . METHOD_2 ( ) ) == null ) COND ( TYPE_1 . METHOD_2 ( ) ) == null ( THEN THEN (  addCanDoActionMessage ( VAR_1 ) )  addCanDoActionMessage ( VAR_1 ) (  returnValue = false )  returnValue = false ) THEN THEN ) IF IF ( IF IF ( COND ( TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ) == ( VAR_2 ) ) COND ( TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ) == ( VAR_2 ) ( THEN THEN (  addCanDoActionMessage ( VAR_3 ) )  addCanDoActionMessage ( VAR_3 ) (  returnValue = false )  returnValue = false ) THEN THEN ) IF IF (  return returnValue ; )  return returnValue ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( VAR_2 . Guid class ) ) ) . thenReturn ( TYPE_2 . METHOD_3 ( ) ) )  org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( VAR_2 . Guid class ) ) ) . thenReturn ( TYPE_2 . METHOD_3 ( ) ) (  org.mockito.Mockito.when ( VAR_1 . METHOD_4 ( TYPE_1 . METHOD_5 ( ) ) ) . thenReturn ( TYPE_2 . METHOD_3 ( ) ) )  org.mockito.Mockito.when ( VAR_1 . METHOD_4 ( TYPE_1 . METHOD_5 ( ) ) ) . thenReturn ( TYPE_2 . METHOD_3 ( ) ) (  METHOD_6 ( ) )  METHOD_6 ( ) (  METHOD_7 ( ) )  METHOD_7 ( ) (  METHOD_8 ( VAR_3 ) )  METHOD_8 ( VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( cmd . METHOD_3 ( ) ) )  TYPE_1 . METHOD_2 ( cmd . METHOD_3 ( ) ) (  org.mockito.Mockito . METHOD_4 ( VAR_1 , org.mockito.Mockito . METHOD_5 ( VAR_2 ) ) . METHOD_6 ( TYPE_2 . METHOD_7 ( ) ) )  org.mockito.Mockito . METHOD_4 ( VAR_1 , org.mockito.Mockito . METHOD_5 ( VAR_2 ) ) . METHOD_6 ( TYPE_2 . METHOD_7 ( ) ) (  org.mockito.Mockito . METHOD_4 ( VAR_1 , org.mockito.Mockito . METHOD_8 ( ) ) . METHOD_9 ( TYPE_2 . METHOD_7 ( ) ) )  org.mockito.Mockito . METHOD_4 ( VAR_1 , org.mockito.Mockito . METHOD_8 ( ) ) . METHOD_9 ( TYPE_2 . METHOD_7 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_1 ) ( model ) ) ) INIT = ( ( TYPE_1 ) ( model ) ) ) VAR VAR (  VAR_2 . setItems ( ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) ) ) )  VAR_2 . setItems ( ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( getVm ( ) . METHOD_2 ( ) ) == null ) COND ( getVm ( ) . METHOD_2 ( ) ) == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( IN getVm ( ) . METHOD_2 ( ) ) IN getVm ( ) . METHOD_2 ( ) ( BLOCK BLOCK ( IF IF ( COND TYPE_2 . METHOD_3 ( ) . METHOD_4 ( getVm ( ) . getId ( ) , VAR_1 . getId ( ) ) ) COND TYPE_2 . METHOD_3 ( ) . METHOD_4 ( getVm ( ) . getId ( ) , VAR_1 . getId ( ) ) ( THEN THEN (  TYPE_2 . METHOD_3 ( ) . METHOD_5 ( VAR_1 ) )  TYPE_2 . METHOD_3 ( ) . METHOD_5 ( VAR_1 ) ) THEN THEN ( ELSE ELSE (  TYPE_2 . METHOD_3 ( ) . METHOD_6 ( VAR_1 ) )  TYPE_2 . METHOD_3 ( ) . METHOD_6 ( VAR_1 ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<TYPE_1> ) TYPE java.util.ArrayList<TYPE_1> ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( ( TYPE_2 . VdcQueryReturnValue ) ( VAR_2 ) ) . getReturnValue ( ) ) INIT = ( ( TYPE_2 . VdcQueryReturnValue ) ( VAR_2 ) ) . getReturnValue ( ) ) VAR VAR (  METHOD_1 ( ) . setItems ( VAR_3 ) )  METHOD_1 ( ) . setItems ( VAR_3 ) (  METHOD_1 ( ) . setSelectedItem ( TYPE_3 . METHOD_2 ( VAR_3 ) ) )  METHOD_1 ( ) . setSelectedItem ( TYPE_3 . METHOD_2 ( VAR_3 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  VAR_3 . add ( VAR_4 , VAR_2 ) )  VAR_3 . add ( VAR_4 , VAR_2 ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_5 ) NAME VAR_5 ( INIT = TYPE_4 . METHOD_2 ( VAR_3 ) ) INIT = TYPE_4 . METHOD_2 ( VAR_3 ) ) VAR VAR (  TYPE_5 . assertEquals ( VAR_1 , VAR_5 . METHOD_3 ( ) ) )  TYPE_5 . assertEquals ( VAR_1 , VAR_5 . METHOD_3 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_1 ( ) )  METHOD_1 ( ) ( VAR VAR ( TYPE java.util.List<TYPE_1<TYPE_2>> ) TYPE java.util.List<TYPE_1<TYPE_2>> ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( java.util.List < TYPE_1 < TYPE_2 > > ) ( result ) ) ) INIT = ( ( java.util.List < TYPE_1 < TYPE_2 > > ) ( result ) ) ) VAR VAR (  VAR_1 . add ( 0 , null ) )  VAR_1 . add ( 0 , null ) (  METHOD_2 ( ) . setItems ( VAR_1 ) )  METHOD_2 ( ) . setItems ( VAR_1 ) (  METHOD_2 ( ) . setSelectedItem ( null ) )  METHOD_2 ( ) . setSelectedItem ( null ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , METHOD_3 ( VAR_1 ) ) ) ) )  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , METHOD_3 ( VAR_1 ) ) ) ) (  METHOD_4 ( cmd ) )  METHOD_4 ( cmd ) (  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( cluster ) . METHOD_5 ( ) )  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( cluster ) . METHOD_5 ( ) (  TYPE_3 . METHOD_6 ( cmd . validate ( ) ) )  TYPE_3 . METHOD_6 ( cmd . validate ( ) ) (  TYPE_3 . METHOD_7 ( cmd . getReturnValue ( ) . METHOD_8 ( ) . METHOD_9 ( TYPE_4 . toString ( ) ) ) )  TYPE_3 . METHOD_7 ( cmd . getReturnValue ( ) . METHOD_8 ( ) . METHOD_9 ( TYPE_4 . toString ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.doReturn ( TYPE_1 . METHOD_2 ( ) ) . when ( cmd ) . METHOD_3 ( ) )  org.mockito.Mockito.doReturn ( TYPE_1 . METHOD_2 ( ) ) . when ( cmd ) . METHOD_3 ( ) (  cmd . getParameters ( ) . METHOD_4 ( true ) )  cmd . getParameters ( ) . METHOD_4 ( true ) (  org.mockito.Mockito.doReturn ( org.ovirt.engine.core.compat.Guid . METHOD_5 ( ) ) . when ( cmd ) . METHOD_6 ( TYPE_2 . METHOD_7 ( TYPE_1 . METHOD_2 ( ) ) ) )  org.mockito.Mockito.doReturn ( org.ovirt.engine.core.compat.Guid . METHOD_5 ( ) ) . when ( cmd ) . METHOD_6 ( TYPE_2 . METHOD_7 ( TYPE_1 . METHOD_2 ( ) ) ) (  TYPE_3 . METHOD_8 ( cmd ) )  TYPE_3 . METHOD_8 ( cmd ) (  org.mockito.Mockito . METHOD_9 ( VAR_1 ) . METHOD_10 ( TYPE_2 . METHOD_7 ( TYPE_1 . METHOD_2 ( ) ) , TYPE_2 . METHOD_11 ( ) ) )  org.mockito.Mockito . METHOD_9 ( VAR_1 ) . METHOD_10 ( TYPE_2 . METHOD_7 ( TYPE_1 . METHOD_2 ( ) ) , TYPE_2 . METHOD_11 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( ( java.util.ArrayList < TYPE_1 > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) . size ( ) ) == 0 ) COND ( ( ( java.util.ArrayList < TYPE_1 > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) . size ( ) ) == 0 ( THEN THEN (  METHOD_2 ( ) )  METHOD_2 ( ) ) THEN THEN ( ELSE ELSE (  METHOD_3 ( ) )  METHOD_3 ( ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_1 ) ( target ) ) ) INIT = ( ( TYPE_1 ) ( target ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.ArrayList<TYPE_2> ) TYPE java.util.ArrayList<TYPE_2> ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( java.util.ArrayList < TYPE_2 > ) ( returnValue ) ) ) INIT = ( ( java.util.ArrayList < TYPE_2 > ) ( returnValue ) ) ) VAR VAR (  VAR_1 . METHOD_2 ( VAR_2 , true ) )  VAR_1 . METHOD_2 ( VAR_2 , true ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN java.util.List<TYPE_1.Disk> ) RETURN java.util.List<TYPE_1.Disk> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1.Disk> ) TYPE java.util.List<TYPE_1.Disk> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < TYPE_1 . Disk > ( vm . METHOD_2 ( ) . METHOD_3 ( ) ) ) INIT = new java.util.ArrayList < TYPE_1 . Disk > ( vm . METHOD_2 ( ) . METHOD_3 ( ) ) ) VAR VAR (  TYPE_2 . METHOD_4 ( VAR_1 , new TYPE_3 ( ) ) )  TYPE_2 . METHOD_4 ( VAR_1 , new TYPE_3 ( ) ) (  TYPE_2 . METHOD_4 ( VAR_1 , TYPE_2 . METHOD_5 ( new TYPE_4 ( ) ) ) )  TYPE_2 . METHOD_4 ( VAR_1 , TYPE_2 . METHOD_5 ( new TYPE_4 ( ) ) ) (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_2 . METHOD_2 ( VAR_1 . getVm ( ) ) )  VAR_2 . METHOD_2 ( VAR_1 . getVm ( ) ) (  VAR_3 . METHOD_3 ( ( ( java.util.List ) ( VAR_1 . METHOD_4 ( ) ) ) ) )  VAR_3 . METHOD_3 ( ( ( java.util.List ) ( VAR_1 . METHOD_4 ( ) ) ) ) (  VAR_4 . METHOD_3 ( ( ( java.util.List ) ( VAR_1 . METHOD_5 ( ) ) ) ) )  VAR_4 . METHOD_3 ( ( ( java.util.List ) ( VAR_1 . METHOD_5 ( ) ) ) ) (  VAR_5 . METHOD_3 ( ( ( java.util.List ) ( VAR_1 . METHOD_6 ( ) ) ) ) )  VAR_5 . METHOD_3 ( ( ( java.util.List ) ( VAR_1 . METHOD_6 ( ) ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.Map<java.lang.String,org.ovirt.engine.core.common.businessentities.VdsNetworkInterface> ) RETURN java.util.Map<java.lang.String,org.ovirt.engine.core.common.businessentities.VdsNetworkInterface> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) == null ) COND ( VAR_1 ) == null ( THEN THEN ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VdsNetworkInterface> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VdsNetworkInterface> ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( params . METHOD_5 ( ) ) ) INIT = METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( params . METHOD_5 ( ) ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME iface ) NAME iface ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK (  iface . METHOD_6 ( TYPE_1 . METHOD_7 ( METHOD_8 ( ) , iface ) ) )  iface . METHOD_6 ( TYPE_1 . METHOD_7 ( METHOD_8 ( ) , iface ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  VAR_1 = TYPE_2 . METHOD_9 ( VAR_2 ) )  VAR_1 = TYPE_2 . METHOD_9 ( VAR_2 ) ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME iface ) NAME iface ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_2 . METHOD_2 ( VAR_1 ) ) ) COND ! ( VAR_2 . METHOD_2 ( VAR_1 ) ) ( THEN THEN (  VAR_2 . put ( VAR_1 , new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . VdsNetworkInterface > ( ) ) )  VAR_2 . put ( VAR_1 , new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . VdsNetworkInterface > ( ) ) ) THEN THEN ) IF IF ( IF IF ( COND METHOD_3 ( iface ) ) COND METHOD_3 ( iface ) ( THEN THEN (  VAR_3 . put ( VAR_1 , iface ) )  VAR_3 . put ( VAR_1 , iface ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = dao . get ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( STRING_1 ) ) ) INIT = dao . get ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( STRING_1 ) ) ) VAR VAR (  VAR_1 . METHOD_3 ( TYPE_2 . METHOD_2 ( STRING_2 ) ) )  VAR_1 . METHOD_3 ( TYPE_2 . METHOD_2 ( STRING_2 ) ) ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME result ) NAME result ( INIT = dao . METHOD_4 ( VAR_1 ) ) INIT = dao . METHOD_4 ( VAR_1 ) ) VAR VAR (  TYPE_3 . METHOD_5 ( result ) )  TYPE_3 . METHOD_5 ( result ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_2 ( ) ) INIT = VAR_2 . METHOD_2 ( ) ) VAR VAR (  TYPE_2 . assertEquals ( VAR_1 . size ( ) , 1 ) )  TYPE_2 . assertEquals ( VAR_1 . size ( ) , 1 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . get ( 0 ) ) INIT = VAR_1 . get ( 0 ) ) VAR VAR (  TYPE_2 . assertEquals ( VAR_4 , VAR_3 . METHOD_3 ( ) ) )  TYPE_2 . assertEquals ( VAR_4 , VAR_3 . METHOD_3 ( ) ) (  TYPE_2 . assertEquals ( VAR_5 , VAR_3 . METHOD_4 ( ) ) )  TYPE_2 . assertEquals ( VAR_5 , VAR_3 . METHOD_4 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME list ) NAME list ( BLOCK BLOCK ( IF IF ( COND TYPE_2 . METHOD_1 ( getEntity ( VAR_1 . StorageDomain class , ) COND TYPE_2 . METHOD_1 ( getEntity ( VAR_1 . StorageDomain class , ( THEN THEN ) THEN THEN ) IF IF (  new TYPE_3 ( METHOD_2 ( VAR_3 ) ) , )  new TYPE_3 ( METHOD_2 ( VAR_3 ) ) , (  return METHOD_3 ( METHOD_4 ( ) ) ; )  return METHOD_3 ( METHOD_4 ( ) ) ; (  return METHOD_5 ( VAR_4 class ) ; )  return METHOD_5 ( VAR_4 class ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME parameters ) NAME parameters ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_3> ) TYPE java.util.List<TYPE_3> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND METHOD_2 ( parameters . getStoragePoolId ( ) ) ) COND METHOD_2 ( parameters . getStoragePoolId ( ) ) ( THEN THEN ( IF IF ( COND ! ( TYPE_4 . METHOD_3 ( parameters . METHOD_4 ( ) ) ) ) COND ! ( TYPE_4 . METHOD_3 ( parameters . METHOD_4 ( ) ) ) ( THEN THEN (  VAR_3 . error ( STRING_1 , parameters . METHOD_4 ( ) . getName ( ) ) )  VAR_3 . error ( STRING_1 , parameters . METHOD_4 ( ) . getName ( ) ) (  METHOD_5 ( VAR_1 , parameters . METHOD_4 ( ) . getId ( ) , VAR_4 ) )  METHOD_5 ( VAR_1 , parameters . METHOD_4 ( ) . getId ( ) , VAR_4 ) (  return false ; )  return false ; ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2<?> ) TYPE TYPE_2<?> ( NAME command ) NAME command ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME returnValue ) NAME returnValue ( INIT = METHOD_2 ( command ) ) INIT = METHOD_2 ( command ) ) VAR VAR ( IF IF ( COND returnValue != null ) COND returnValue != null ( THEN THEN (  return returnValue ; )  return returnValue ; ) THEN THEN ) IF IF (  command . METHOD_3 ( VAR_1 ) )  command . METHOD_3 ( VAR_1 ) (  TYPE_3 . METHOD_4 ( command , command . METHOD_5 ( ) , VAR_1 ) )  TYPE_3 . METHOD_4 ( command , command . METHOD_5 ( ) , VAR_1 ) (  command . METHOD_6 ( ) )  command . METHOD_6 ( ) (  returnValue = command . METHOD_7 ( ) )  returnValue = command . METHOD_7 ( ) (  returnValue . METHOD_8 ( command . getParameters ( ) . METHOD_9 ( ) ) )  returnValue . METHOD_8 ( command . getParameters ( ) . METHOD_9 ( ) ) (  returnValue . METHOD_10 ( command . METHOD_11 ( ) ) )  returnValue . METHOD_10 ( command . METHOD_11 ( ) ) (  return returnValue ; )  return returnValue ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN org.ovirt.engine.core.compat.Guid ) RETURN org.ovirt.engine.core.compat.Guid ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME args ) NAME args ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( IN args ) IN args ( BLOCK BLOCK (  VAR_1 . append ( VAR_2 ) )  VAR_1 . append ( VAR_2 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_3 = TYPE_2 . getInstance ( VAR_4 ) . METHOD_2 ( VAR_1 . toString ( ) . METHOD_3 ( ) ) )  VAR_3 = TYPE_2 . getInstance ( VAR_4 ) . METHOD_2 ( VAR_1 . toString ( ) . METHOD_3 ( ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_4 ( e ) ; )  throw new TYPE_4 ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  return new org.ovirt.engine.core.compat.Guid ( VAR_3 , true ) ; )  return new org.ovirt.engine.core.compat.Guid ( VAR_3 , true ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME parameters ) NAME parameters ( IN TYPE_3 . getParameters ( ) . METHOD_2 ( ) ) IN TYPE_3 . getParameters ( ) . METHOD_2 ( ) ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4.DiskImage ) TYPE TYPE_4.DiskImage ( NAME diskImage ) NAME diskImage ( INIT = METHOD_3 ( ) . get ( parameters . METHOD_4 ( ) ) ) INIT = METHOD_3 ( ) . get ( parameters . METHOD_4 ( ) ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( diskImage == null ) ? VAR_3 : diskImage . getId ( ) ) INIT = ( diskImage == null ) ? VAR_3 : diskImage . getId ( ) ) VAR VAR (  VAR_1 . add ( new TYPE_1 ( VAR_2 , VAR_4 . Disk , VAR_5 ) ) )  VAR_1 . add ( new TYPE_1 ( VAR_2 , VAR_4 . Disk , VAR_5 ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( METHOD_3 ( ) ) )  METHOD_2 ( METHOD_3 ( ) ) (  METHOD_4 ( 1 ) )  METHOD_4 ( 1 ) (  VAR_1 . METHOD_5 ( ) )  VAR_1 . METHOD_5 ( ) ( VAR VAR ( TYPE TYPE_1.Network ) TYPE TYPE_1.Network ( NAME model ) NAME model ( INIT = TYPE_2 . getModel ( 1 ) ) INIT = TYPE_2 . getModel ( 1 ) ) VAR VAR (  model . setId ( VAR_2 [ 1 ] . toString ( ) ) )  model . setId ( VAR_2 [ 1 ] . toString ( ) ) ( TRY TRY ( BLOCK BLOCK (  resource . METHOD_6 ( model ) )  resource . METHOD_6 ( model ) (  METHOD_7 ( STRING_1 ) )  METHOD_7 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( BLOCK BLOCK (  METHOD_8 ( VAR_3 ) )  METHOD_8 ( VAR_3 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME equals ) NAME equals ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME obj ) NAME obj ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( this ) == obj ) COND ( this ) == obj ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ( IF IF ( COND obj == null ) COND obj == null ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( IF IF ( COND ( METHOD_1 ( ) ) != ( obj . METHOD_1 ( ) ) ) COND ( METHOD_1 ( ) ) != ( obj . METHOD_1 ( ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME other ) NAME other ( INIT = ( ( TYPE_1 ) ( obj ) ) ) INIT = ( ( TYPE_1 ) ( obj ) ) ) VAR VAR (  return ( TYPE_2 . equals ( VAR_1 , VAR_2 ) ) && ( super . equals ( obj ) ) ; )  return ( TYPE_2 . equals ( VAR_1 , VAR_2 ) ) && ( super . equals ( obj ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StoragePool> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StoragePool> ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ) INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ) VAR VAR ( IF IF ( COND ( VAR_1 != null ) && ( ( VAR_1 . size ( ) ) > 0 ) ) COND ( VAR_1 != null ) && ( ( VAR_1 . size ( ) ) > 0 ) ( THEN THEN ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StoragePool ) TYPE org.ovirt.engine.core.common.businessentities.StoragePool ( NAME pool ) NAME pool ( INIT = VAR_1 . get ( 0 ) ) INIT = VAR_1 . get ( 0 ) ) VAR VAR (  TYPE_2 . METHOD_1 ( ( ( org.ovirt.engine.ui.frontend.AsyncQuery ) ( model ) ) , pool . getId ( ) ) )  TYPE_2 . METHOD_1 ( ( ( org.ovirt.engine.ui.frontend.AsyncQuery ) ( model ) ) , pool . getId ( ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  command = org.mockito.Mockito . METHOD_2 ( new TYPE_1 < TYPE_2 > ( new TYPE_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , false ) ) ) )  command = org.mockito.Mockito . METHOD_2 ( new TYPE_1 < TYPE_2 > ( new TYPE_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , false ) ) ) (  METHOD_4 ( command ) )  METHOD_4 ( command ) (  METHOD_5 ( VAR_1 ) )  METHOD_5 ( VAR_1 ) (  METHOD_6 ( ) )  METHOD_6 ( ) (  METHOD_7 ( VAR_2 . Collections < java.lang.String > METHOD_8 ( ) ) )  METHOD_7 ( VAR_2 . Collections < java.lang.String > METHOD_8 ( ) ) (  METHOD_9 ( false ) )  METHOD_9 ( false ) (  METHOD_10 ( false ) )  METHOD_10 ( false ) (  METHOD_11 ( ) )  METHOD_11 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<TYPE_2> ) RETURN TYPE_1<TYPE_2> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < TYPE_2 > ( ) ) INIT = new java.util.ArrayList < TYPE_2 > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( IN VAR_3 ) IN VAR_3 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_5<?> ) TYPE TYPE_5<?> ( NAME resource ) NAME resource ( INIT = METHOD_2 ( VAR_2 ) ) INIT = METHOD_2 ( VAR_2 ) ) VAR VAR (  VAR_1 . METHOD_3 ( METHOD_4 ( resource , VAR_2 , new java.util.HashMap < java.lang.String , TYPE_6 > ( ) ) ) )  VAR_1 . METHOD_3 ( METHOD_4 ( resource , VAR_2 , new java.util.HashMap < java.lang.String , TYPE_6 > ( ) ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_1 ) ( model ) ) ) INIT = ( ( TYPE_1 ) ( model ) ) ) VAR VAR (  VAR_2 . setItems ( ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) ) ) )  VAR_2 . setItems ( ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) ) ) (  VAR_2 . METHOD_1 ( ( ( ( ( java.util.List ) ( VAR_2 . METHOD_2 ( ) ) ) . size ( ) ) == 0 ) ) )  VAR_2 . METHOD_1 ( ( ( ( ( java.util.List ) ( VAR_2 . METHOD_2 ( ) ) ) . size ( ) ) == 0 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . getParameters ( ) . METHOD_4 ( ) ) )  org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . getParameters ( ) . METHOD_4 ( ) ) ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ) TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ( NAME cluster ) NAME cluster ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  TYPE_2 . METHOD_5 ( cluster . getId ( ) , TYPE_1 . getParameters ( ) . METHOD_4 ( ) ) )  TYPE_2 . METHOD_5 ( cluster . getId ( ) , TYPE_1 . getParameters ( ) . METHOD_4 ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  TYPE_1 . METHOD_6 ( true ) )  TYPE_1 . METHOD_6 ( true ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.network.Network ) TYPE org.ovirt.engine.core.common.businessentities.network.Network ( NAME network ) NAME network ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_3 ( VAR_2 , null , null ) ) INIT = METHOD_3 ( VAR_2 , null , null ) ) VAR VAR (  VAR_1 . METHOD_4 ( network . getId ( ) ) )  VAR_1 . METHOD_4 ( network . getId ( ) ) (  METHOD_5 ( false , true , true , TYPE_2 . METHOD_6 ( VAR_3 , TYPE_3 . METHOD_7 ( VAR_4 , network . getName ( ) ) ) , network , VAR_1 ) )  METHOD_5 ( false , true , true , TYPE_2 . METHOD_6 ( VAR_3 , TYPE_3 . METHOD_7 ( VAR_4 , network . getName ( ) ) ) , network , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN org.ovirt.engine.core.common.businessentities.DiskImage ) RETURN org.ovirt.engine.core.common.businessentities.DiskImage ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.DiskImage ) TYPE org.ovirt.engine.core.common.businessentities.DiskImage ( NAME disk ) NAME disk ( INIT = new org.ovirt.engine.core.common.businessentities.DiskImage ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.DiskImage ( ) ) VAR VAR (  disk . METHOD_2 ( VAR_1 ) )  disk . METHOD_2 ( VAR_1 ) (  disk . METHOD_3 ( VAR_2 ) )  disk . METHOD_3 ( VAR_2 ) (  disk . METHOD_4 ( false ) )  disk . METHOD_4 ( false ) (  disk . METHOD_5 ( true ) )  disk . METHOD_5 ( true ) (  disk . METHOD_6 ( vmId ) )  disk . METHOD_6 ( vmId ) (  disk . setId ( VAR_1 ) )  disk . setId ( VAR_1 ) (  org.mockito.Mockito.when ( VAR_3 . get ( VAR_1 ) ) . thenReturn ( disk ) )  org.mockito.Mockito.when ( VAR_3 . get ( VAR_1 ) ) . thenReturn ( disk ) (  return disk ; )  return disk ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ( INIT = getEntity ( ) ) INIT = getEntity ( ) ) VAR VAR (  return ( vm != null ) && ( ( ( ( vm . getStatus ( ) ) == ( VAR_1 ) ) || ( ( vm . getStatus ( ) ) == ( VAR_2 ) ) ) || ( ( vm . getStatus ( ) ) == ( VAR_3 ) ) ) ; )  return ( vm != null ) && ( ( ( ( vm . getStatus ( ) ) == ( VAR_1 ) ) || ( ( vm . getStatus ( ) ) == ( VAR_2 ) ) ) || ( ( vm . getStatus ( ) ) == ( VAR_3 ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( VAR_2 ) ) INIT = new TYPE_2 ( VAR_2 ) ) VAR VAR (  VAR_1 . METHOD_2 ( VAR_3 ) )  VAR_1 . METHOD_2 ( VAR_3 ) (  VAR_1 . METHOD_3 ( vm . getId ( ) ) )  VAR_1 . METHOD_3 ( vm . getId ( ) ) (  org.mockito.Mockito.when ( VAR_4 . METHOD_4 ( vm . getId ( ) , VAR_5 ) ) . thenReturn ( TYPE_3 . METHOD_5 ( VAR_1 ) ) )  org.mockito.Mockito.when ( VAR_4 . METHOD_4 ( vm . getId ( ) , VAR_5 ) ) . thenReturn ( TYPE_3 . METHOD_5 ( VAR_1 ) ) (  org.mockito.Mockito.doReturn ( VAR_4 ) . when ( VAR_6 ) . METHOD_6 ( ) )  org.mockito.Mockito.doReturn ( VAR_4 ) . when ( VAR_6 ) . METHOD_6 ( ) (  TYPE_4 . METHOD_7 ( VAR_6 ) )  TYPE_4 . METHOD_7 ( VAR_6 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.Map<java.lang.String,java.lang.String> ) RETURN java.util.Map<java.lang.String,java.lang.String> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.String> ) TYPE java.util.Map<java.lang.String,java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ( INIT = null ) INIT = null ) VAR VAR ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN (  VAR_2 = VAR_1 . METHOD_2 ( ) )  VAR_2 = VAR_1 . METHOD_2 ( ) ) THEN THEN ) IF IF (  return VAR_2 == null ? new java.util.HashMap < > ( ) : VAR_2 ; )  return VAR_2 == null ? new java.util.HashMap < > ( ) : VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND source != null ) COND source != null ( THEN THEN ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS> ( NAME list ) NAME list ( INIT = VAR_2 . Linq < org.ovirt.engine.core.common.businessentities.VDS > METHOD_2 ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) ) INIT = VAR_2 . Linq < org.ovirt.engine.core.common.businessentities.VDS > METHOD_2 ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) ) VAR VAR (  return list ; )  return list ; ) THEN THEN ) IF IF (  return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ; )  return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > list = VAR_2 . Linq < org.ovirt.engine.core.common.businessentities.VDS > METHOD_2 ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) ; return list ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > list = VAR_2 . Linq < org.ovirt.engine.core.common.businessentities.VDS > METHOD_2 ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) ; return list ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ; } } (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_3 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_3 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( METHOD_3 ( VAR_2 ) ) )  VAR_1 . METHOD_2 ( METHOD_3 ( VAR_2 ) ) (  VAR_1 . METHOD_4 ( METHOD_3 ( VAR_3 ) ) )  VAR_1 . METHOD_4 ( METHOD_3 ( VAR_3 ) ) (  VAR_1 . METHOD_5 ( METHOD_3 ( VAR_4 ) ) )  VAR_1 . METHOD_5 ( METHOD_3 ( VAR_4 ) ) (  VAR_1 . METHOD_6 ( METHOD_3 ( VAR_5 ) ) )  VAR_1 . METHOD_6 ( METHOD_3 ( VAR_5 ) ) (  VAR_1 . METHOD_7 ( METHOD_3 ( VAR_6 ) ) )  VAR_1 . METHOD_7 ( METHOD_3 ( VAR_6 ) ) (  VAR_1 . METHOD_8 ( METHOD_3 ( VAR_7 ) ) )  VAR_1 . METHOD_8 ( METHOD_3 ( VAR_7 ) ) (  VAR_1 . METHOD_9 ( METHOD_3 ( VAR_8 ) ) )  VAR_1 . METHOD_9 ( METHOD_3 ( VAR_8 ) ) (  VAR_1 . METHOD_10 ( METHOD_3 ( VAR_9 ) ) )  VAR_1 . METHOD_10 ( METHOD_3 ( VAR_9 ) ) (  VAR_1 . METHOD_11 ( METHOD_3 ( VAR_10 ) ) )  VAR_1 . METHOD_11 ( METHOD_3 ( VAR_10 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  parameters = new TYPE_1 ( ) )  parameters = new TYPE_1 ( ) (  parameters . METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) )  parameters . METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) (  command = org.mockito.Mockito . METHOD_4 ( new TYPE_2 ( parameters ) ) )  command = org.mockito.Mockito . METHOD_4 ( new TYPE_2 ( parameters ) ) (  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_5 ( ) )  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_5 ( ) (  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( command ) . METHOD_6 ( ) )  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( command ) . METHOD_6 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( null ) ) INIT = METHOD_2 ( null ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_3 ( VAR_3 ) ) INIT = new TYPE_3 ( VAR_3 ) ) VAR VAR (  METHOD_3 ( 1 , VAR_2 ) )  METHOD_3 ( 1 , VAR_2 ) (  METHOD_4 ( 1 ) )  METHOD_4 ( 1 ) (  VAR_4 . METHOD_5 ( ) )  VAR_4 . METHOD_5 ( ) (  VAR_5 . METHOD_6 ( VAR_1 ) )  VAR_5 . METHOD_6 ( VAR_1 ) ( TRY TRY ( BLOCK BLOCK (  METHOD_7 ( ) )  METHOD_7 ( ) (  METHOD_8 ( STRING_1 ) )  METHOD_8 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_6 ) NAME VAR_6 ( BLOCK BLOCK (  METHOD_9 ( VAR_6 , VAR_7 , VAR_2 ) )  METHOD_9 ( VAR_6 , VAR_7 , VAR_2 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.Integer ) TYPE java.lang.Integer ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 < java.lang.Integer > METHOD_2 ( VAR_5 ) ) INIT = VAR_4 < java.lang.Integer > METHOD_2 ( VAR_5 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_6 ) NAME VAR_6 ( INIT = METHOD_3 ( ) . addValue ( STRING_1 , id ) . addValue ( STRING_2 , VAR_1 ) . addValue ( STRING_3 , VAR_2 ) . addValue ( STRING_4 , VAR_3 . METHOD_4 ( ) ) ) INIT = METHOD_3 ( ) . addValue ( STRING_1 , id ) . addValue ( STRING_2 , VAR_1 ) . addValue ( STRING_3 , VAR_2 ) . addValue ( STRING_4 , VAR_3 . METHOD_4 ( ) ) ) VAR VAR (  return METHOD_5 ( ) . METHOD_6 ( STRING_5 , VAR_7 . instance , VAR_6 ) ; )  return METHOD_5 ( ) . METHOD_6 ( STRING_5 , VAR_7 . instance , VAR_6 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.VDS ) TYPE TYPE_1.VDS ( NAME vds ) NAME vds ( INIT = TYPE_2 . getInstance ( ) . METHOD_2 ( ) . get ( this . METHOD_3 ( ) . METHOD_4 ( ) ) ) INIT = TYPE_2 . getInstance ( ) . METHOD_2 ( ) . get ( this . METHOD_3 ( ) . METHOD_4 ( ) ) ) VAR VAR (  status = TYPE_3 . METHOD_5 ( ) . METHOD_6 ( TYPE_3 . getParameters ( ) . getStoragePoolId ( ) . toString ( ) , vds . METHOD_7 ( ) , TYPE_3 . getParameters ( ) . getStoragePoolId ( ) . toString ( ) ) )  status = TYPE_3 . METHOD_5 ( ) . METHOD_6 ( TYPE_3 . getParameters ( ) . getStoragePoolId ( ) . toString ( ) , vds . METHOD_7 ( ) , TYPE_3 . getParameters ( ) . getStoragePoolId ( ) . toString ( ) ) (  TYPE_3 . METHOD_8 ( ) )  TYPE_3 . METHOD_8 ( ) (  TYPE_3 . METHOD_9 ( ) )  TYPE_3 . METHOD_9 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME dao ) NAME dao ( INIT = org.mockito.Mockito . METHOD_2 ( VAR_1 class ) ) INIT = org.mockito.Mockito . METHOD_2 ( VAR_1 class ) ) VAR VAR (  org.mockito.Mockito.doReturn ( new java.util.ArrayList < TYPE_2 > ( ) ) . when ( dao ) . METHOD_3 ( TYPE_3 . any ( VAR_2 . Guid class ) ) )  org.mockito.Mockito.doReturn ( new java.util.ArrayList < TYPE_2 > ( ) ) . when ( dao ) . METHOD_3 ( TYPE_3 . any ( VAR_2 . Guid class ) ) (  org.mockito.Mockito.doReturn ( dao ) . when ( VAR_3 ) . METHOD_4 ( ) )  org.mockito.Mockito.doReturn ( dao ) . when ( VAR_3 ) . METHOD_4 ( ) (  TYPE_4 . METHOD_5 ( VAR_3 . METHOD_6 ( new org.ovirt.engine.core.common.businessentities.VM ( ) , VAR_4 , new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Disk > ( ) ) , false , VAR_5 ) )  TYPE_4 . METHOD_5 ( VAR_3 . METHOD_6 ( new org.ovirt.engine.core.common.businessentities.VM ( ) , VAR_4 , new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Disk > ( ) ) , false , VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<TYPE_2,TYPE_3> ) RETURN TYPE_1<TYPE_2,TYPE_3> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME returnValue ) NAME returnValue ) VAR VAR (  returnValue = METHOD_2 ( VAR_1 , new TYPE_4 ( VAR_2 . METHOD_3 ( ) , entity . METHOD_4 ( ) , entity . METHOD_5 ( ) , entity . getName ( ) , entity . METHOD_6 ( ) , entity . METHOD_7 ( ) , VAR_3 ) ) )  returnValue = METHOD_2 ( VAR_1 , new TYPE_4 ( VAR_2 . METHOD_3 ( ) , entity . METHOD_4 ( ) , entity . METHOD_5 ( ) , entity . getName ( ) , entity . METHOD_6 ( ) , entity . METHOD_7 ( ) , VAR_3 ) ) (  return new TYPE_1 < TYPE_2 , TYPE_3 > ( VAR_2 , returnValue ) ; )  return new TYPE_1 < TYPE_2 , TYPE_3 > ( VAR_2 , returnValue ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1.ValidationResult ) RETURN TYPE_1.ValidationResult ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( VAR_3 . METHOD_2 ( ) ) == null ) && ( ! VAR_1 ) ) INIT = ( ( VAR_3 . METHOD_2 ( ) ) == null ) && ( ! VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_4 ) NAME VAR_4 ( INIT = ( VAR_3 . METHOD_3 ( ) ) && ( ( ( VAR_3 . METHOD_4 ( ) ) || ( ( VAR_3 . METHOD_5 ( ) ) != null ) ) || ( ! VAR_2 ) ) ) INIT = ( VAR_3 . METHOD_3 ( ) ) && ( ( ( VAR_3 . METHOD_4 ( ) ) || ( ( VAR_3 . METHOD_5 ( ) ) != null ) ) || ( ! VAR_2 ) ) ) VAR VAR (  return TYPE_2 . METHOD_6 ( VAR_5 ) . when ( VAR_4 ) ; )  return TYPE_2 . METHOD_6 ( VAR_5 ) . when ( VAR_4 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . getParameters ( ) . METHOD_2 ( ) ) INIT = TYPE_2 . getParameters ( ) . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN (  TYPE_3 . METHOD_3 ( new TYPE_4 ( org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) , TYPE_2 . getParameters ( ) . METHOD_5 ( ) ) , VAR_2 , VAR_1 . METHOD_6 ( ) , VAR_1 . METHOD_7 ( ) , true , true , null , false ) )  TYPE_3 . METHOD_3 ( new TYPE_4 ( org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) , TYPE_2 . getParameters ( ) . METHOD_5 ( ) ) , VAR_2 , VAR_1 . METHOD_6 ( ) , VAR_1 . METHOD_7 ( ) , true , true , null , false ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = org.mockito.Mockito . METHOD_2 ( VAR_2 class ) ) INIT = org.mockito.Mockito . METHOD_2 ( VAR_2 class ) ) VAR VAR (  org.mockito.Mockito.when ( VAR_1 . METHOD_3 ( VAR_3 , VAR_4 ) ) . thenReturn ( new java.util.HashMap < java.lang.String , java.lang.String > ( ) ) )  org.mockito.Mockito.when ( VAR_1 . METHOD_3 ( VAR_3 , VAR_4 ) ) . thenReturn ( new java.util.HashMap < java.lang.String , java.lang.String > ( ) ) (  org.mockito.Mockito.when ( VAR_1 . METHOD_3 ( VAR_5 , VAR_4 ) ) . thenReturn ( STRING_1 ) )  org.mockito.Mockito.when ( VAR_1 . METHOD_3 ( VAR_5 , VAR_4 ) ) . thenReturn ( STRING_1 ) (  TYPE_2 . METHOD_4 ( VAR_1 ) )  TYPE_2 . METHOD_4 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<?> ) TYPE TYPE_1<?> ( NAME command ) NAME command ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( VAR_1 ) == null ) || ( VAR_1 . METHOD_2 ( ) ) ) COND ( ( VAR_1 ) == null ) || ( VAR_1 . METHOD_2 ( ) ) ( THEN THEN (  TYPE_2 . METHOD_3 ( command , command . METHOD_4 ( ) , command . METHOD_5 ( ) , new java.lang.Boolean ( VAR_2 . get ( command . METHOD_6 ( ) ) ) ) )  TYPE_2 . METHOD_3 ( command , command . METHOD_4 ( ) , command . METHOD_5 ( ) , new java.lang.Boolean ( VAR_2 . get ( command . METHOD_6 ( ) ) ) ) ) THEN THEN ) IF IF (  TYPE_3 . METHOD_7 ( command . METHOD_8 ( ) ) )  TYPE_3 . METHOD_7 ( command . METHOD_8 ( ) ) (  command . METHOD_9 ( ) )  command . METHOD_9 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_2 . setId ( new TYPE_2 ( ) ) )  VAR_2 . setId ( new TYPE_2 ( ) ) (  VAR_2 . METHOD_2 ( VAR_1 ) )  VAR_2 . METHOD_2 ( VAR_1 ) (  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( command ) . METHOD_3 ( ) )  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( command ) . METHOD_3 ( ) (  TYPE_3 . when ( VAR_3 . get ( org.mockito.Mockito . any ( VAR_4 class ) ) ) . thenReturn ( VAR_2 ) )  TYPE_3 . when ( VAR_3 . get ( org.mockito.Mockito . any ( VAR_4 class ) ) ) . thenReturn ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected static ) MODIFIER protected static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.ArrayList<java.lang.String> ) TYPE java.util.ArrayList<java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_2 . name ( ) ) INIT = TYPE_2 . name ( ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_3 . getInstance ( ) . METHOD_2 ( VAR_1 , VAR_3 , VAR_5 , VAR_6 ) ) INIT = TYPE_3 . getInstance ( ) . METHOD_2 ( VAR_1 , VAR_3 , VAR_5 , VAR_6 ) ) VAR VAR (  VAR_2 . METHOD_3 ( VAR_4 ) )  VAR_2 . METHOD_3 ( VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<TYPE_2,TYPE_3> ) RETURN TYPE_1<TYPE_2,TYPE_3> ( NAME append ) NAME append ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_4<TYPE_2,TYPE_3> ) TYPE TYPE_4<TYPE_2,TYPE_3> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_4<TYPE_2,TYPE_3>> ) TYPE java.util.List<TYPE_4<TYPE_2,TYPE_3>> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 < TYPE_2 , TYPE_3 > ( METHOD_1 ( 0 , size ( ) ) ) . METHOD_1 ( 0 , size ( ) ) ) INIT = new TYPE_1 < TYPE_2 , TYPE_3 > ( METHOD_1 ( 0 , size ( ) ) ) . METHOD_1 ( 0 , size ( ) ) ) VAR VAR (  TYPE_5 . METHOD_2 ( VAR_2 , VAR_1 ) )  TYPE_5 . METHOD_2 ( VAR_2 , VAR_1 ) (  return new TYPE_1 < TYPE_2 , TYPE_3 > ( VAR_2 ) ; )  return new TYPE_1 < TYPE_2 , TYPE_3 > ( VAR_2 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( ( java.util.ArrayList < TYPE_1 > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) . size ( ) ) == 0 ) COND ( ( ( java.util.ArrayList < TYPE_1 > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) . size ( ) ) == 0 ( THEN THEN (  METHOD_1 ( ) )  METHOD_1 ( ) ) THEN THEN ( ELSE ELSE (  METHOD_2 ( ) )  METHOD_2 ( ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_2.VdcActionParametersBase> ) TYPE java.util.List<TYPE_2.VdcActionParametersBase> ( NAME parameters ) NAME parameters ( INIT = getParameters ( ) ) INIT = getParameters ( ) ) VAR VAR ( IF IF ( COND ( parameters != null ) && ( ( parameters . size ( ) ) != 0 ) ) COND ( parameters != null ) && ( ( parameters . size ( ) ) != 0 ) ( THEN THEN ( VAR VAR ( TYPE TYPE_2.VdcActionParametersBase ) TYPE TYPE_2.VdcActionParametersBase ( NAME VAR_1 ) NAME VAR_1 ( INIT = parameters . get ( 0 ) ) INIT = parameters . get ( 0 ) ) VAR VAR ( IF IF ( COND ( VAR_1 != null ) && ( VAR_1 instanceof TYPE_1 ) ) COND ( VAR_1 != null ) && ( VAR_1 instanceof TYPE_1 ) ( THEN THEN (  return ( ( TYPE_1 ) ( VAR_1 ) ) ; )  return ( ( TYPE_1 ) ( VAR_1 ) ) ; ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( METHOD_3 ( ) ) )  METHOD_2 ( METHOD_3 ( ) ) ( VAR VAR ( TYPE TYPE_1.Network ) TYPE TYPE_1.Network ( NAME model ) NAME model ( INIT = new TYPE_1 . Network ( ) ) INIT = new TYPE_1 . Network ( ) ) VAR VAR (  model . setId ( STRING_1 ) )  model . setId ( STRING_1 ) (  METHOD_4 ( 1 , null ) )  METHOD_4 ( 1 , null ) (  METHOD_5 ( 1 ) )  METHOD_5 ( 1 ) (  METHOD_6 ( 1 , null ) )  METHOD_6 ( 1 , null ) (  METHOD_7 ( VAR_1 ) )  METHOD_7 ( VAR_1 ) (  METHOD_8 ( VAR_2 , VAR_3 class , new java.lang.String [ ] { STRING_2 } , new java.lang.Object [ ] { VAR_1 } , true , true ) )  METHOD_8 ( VAR_2 , VAR_3 class , new java.lang.String [ ] { STRING_2 } , new java.lang.Object [ ] { VAR_1 } , true , true ) (  VAR_4 . add ( model ) )  VAR_4 . add ( model ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.Network ) TYPE TYPE_1.Network ( NAME model ) NAME model ( INIT = new TYPE_1 . Network ( ) ) INIT = new TYPE_1 . Network ( ) ) VAR VAR (  model . METHOD_2 ( VAR_1 [ 0 ] ) )  model . METHOD_2 ( VAR_1 [ 0 ] ) (  METHOD_3 ( METHOD_4 ( ) ) )  METHOD_3 ( METHOD_4 ( ) ) (  VAR_2 . METHOD_5 ( ) )  VAR_2 . METHOD_5 ( ) ( TRY TRY ( BLOCK BLOCK (  ( ( TYPE_2 ) ( VAR_3 ) ) . add ( model ) )  ( ( TYPE_2 ) ( VAR_3 ) ) . add ( model ) (  METHOD_6 ( STRING_1 ) )  METHOD_6 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( BLOCK BLOCK (  METHOD_7 ( VAR_4 , STRING_2 , STRING_3 , STRING_4 ) )  METHOD_7 ( VAR_4 , STRING_2 , STRING_3 , STRING_4 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( IN ( ( TYPE_2 < TYPE_1 > ) ( source ) ) ) IN ( ( TYPE_2 < TYPE_1 > ) ( source ) ) ( BLOCK BLOCK ( IF IF ( COND ( ! VAR_3 ) || ( VAR_2 . METHOD_2 ( ) ) ) COND ( ! VAR_3 ) || ( VAR_2 . METHOD_2 ( ) ) ( THEN THEN (  VAR_1 . add ( VAR_2 . METHOD_3 ( ) ) )  VAR_1 . add ( VAR_2 . METHOD_3 ( ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( model . METHOD_2 ( ) ) ) COND ! ( model . METHOD_2 ( ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  VAR_1 . METHOD_3 ( model . METHOD_4 ( ) ) )  VAR_1 . METHOD_3 ( model . METHOD_4 ( ) ) (  model . METHOD_4 ( ) . METHOD_5 ( ) . setItems ( model . METHOD_5 ( ) . METHOD_6 ( ) ) )  model . METHOD_4 ( ) . METHOD_5 ( ) . setItems ( model . METHOD_5 ( ) . METHOD_6 ( ) ) (  model . METHOD_4 ( ) . METHOD_7 ( model . METHOD_8 ( ) ) )  model . METHOD_4 ( ) . METHOD_7 ( model . METHOD_8 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  command = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , new TYPE_3 ( TYPE_4 . METHOD_4 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ) , null , null ) , null ) ) )  command = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , new TYPE_3 ( TYPE_4 . METHOD_4 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ) , null , null ) , null ) ) (  org.mockito.Mockito.doReturn ( vds ) . when ( command ) . METHOD_5 ( ) )  org.mockito.Mockito.doReturn ( vds ) . when ( command ) . METHOD_5 ( ) (  org.mockito.Mockito.doReturn ( null ) . when ( command ) . METHOD_6 ( ) )  org.mockito.Mockito.doReturn ( null ) . when ( command ) . METHOD_6 ( ) (  TYPE_5 . METHOD_7 ( command . validate ( ) ) )  TYPE_5 . METHOD_7 ( command . validate ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ! ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) ) ) COND ! ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) ) ( THEN THEN ( IF IF ( COND TYPE_1 . getParameters ( ) . METHOD_3 ( ) ) COND TYPE_1 . getParameters ( ) . METHOD_3 ( ) ( THEN THEN (  METHOD_4 ( true ) )  METHOD_4 ( true ) ) THEN THEN ( ELSE ELSE (  TYPE_1 . METHOD_5 ( ) . METHOD_6 ( new TYPE_2 ( TYPE_1 . getParameters ( ) . METHOD_7 ( ) , TYPE_1 . getParameters ( ) . METHOD_8 ( ) ) ) )  TYPE_1 . METHOD_5 ( ) . METHOD_6 ( new TYPE_2 ( TYPE_1 . getParameters ( ) . METHOD_7 ( ) , TYPE_1 . getParameters ( ) . METHOD_8 ( ) ) ) (  TYPE_1 . METHOD_9 ( ) )  TYPE_1 . METHOD_9 ( ) ) ELSE ELSE ) IF IF ) THEN THEN ) IF IF (  TYPE_1 . METHOD_10 ( true ) )  TYPE_1 . METHOD_10 ( true ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_1 ( false ) ) INIT = new TYPE_1 ( false ) ) VAR VAR (  VAR_3 . METHOD_2 ( TYPE_2 . METHOD_3 ( ) . METHOD_4 ( ) ) )  VAR_3 . METHOD_2 ( TYPE_2 . METHOD_3 ( ) . METHOD_4 ( ) ) (  VAR_3 . METHOD_5 ( VAR_1 ) )  VAR_3 . METHOD_5 ( VAR_1 ) (  VAR_3 . METHOD_6 ( VAR_2 ) )  VAR_3 . METHOD_6 ( VAR_2 ) (  TYPE_3 . getInstance ( ) . METHOD_7 ( VAR_4 , VAR_3 ) )  TYPE_3 . getInstance ( ) . METHOD_7 ( VAR_4 , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ( INIT = ( ( TYPE_1 ) ( target ) ) ) INIT = ( ( TYPE_1 ) ( target ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_3 . getInstance ( ) . METHOD_1 ( ( ( java.util.List < TYPE_2 > ) ( returnValue ) ) ) ) INIT = TYPE_3 . getInstance ( ) . METHOD_1 ( ( ( java.util.List < TYPE_2 > ) ( returnValue ) ) ) ) VAR VAR (  model . METHOD_2 ( ) . setItems ( VAR_1 ) )  model . METHOD_2 ( ) . setItems ( VAR_1 ) (  model . METHOD_2 ( ) . METHOD_3 ( VAR_1 . isEmpty ( ) ) )  model . METHOD_2 ( ) . METHOD_3 ( VAR_1 . isEmpty ( ) ) (  model . METHOD_4 ( ) )  model . METHOD_4 ( ) (  METHOD_5 ( ) )  METHOD_5 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) ) ) )  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) ) ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_3 ( ) ) INIT = METHOD_3 ( ) ) VAR VAR (  METHOD_4 ( true , VAR_2 ) )  METHOD_4 ( true , VAR_2 ) (  TYPE_4 . METHOD_5 ( cmd . validate ( ) ) )  TYPE_4 . METHOD_5 ( cmd . validate ( ) ) (  TYPE_4 . METHOD_6 ( cmd . getReturnValue ( ) . METHOD_7 ( ) . METHOD_8 ( TYPE_5 . toString ( ) ) ) )  TYPE_4 . METHOD_6 ( cmd . getReturnValue ( ) . METHOD_7 ( ) . METHOD_8 ( TYPE_5 . toString ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_1 ) ( METHOD_2 ( ) ) ) ) INIT = ( ( TYPE_1 ) ( METHOD_2 ( ) ) ) ) VAR VAR ( IF IF ( COND ( VAR_1 != null ) && ( ! ( VAR_1 . validate ( ) ) ) ) COND ( VAR_1 != null ) && ( ! ( VAR_1 . validate ( ) ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  METHOD_3 ( ) )  METHOD_3 ( ) (  getWindow ( ) . METHOD_4 ( null ) )  getWindow ( ) . METHOD_4 ( null ) (  TYPE_2 . METHOD_5 ( this , new java.util.ArrayList < java.lang.Object > ( TYPE_3 . METHOD_6 ( new java.lang.Object [ ] { STRING_1 } ) ) ) . METHOD_7 ( ) )  TYPE_2 . METHOD_5 ( this , new java.util.ArrayList < java.lang.Object > ( TYPE_3 . METHOD_6 ( new java.lang.Object [ ] { STRING_1 } ) ) ) . METHOD_7 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  < org.ovirt.engine.core.compat.Guid > VAR_1 = new TYPE_3 < org.ovirt.engine.core.compat.Guid > ( VAR_2 , VAR_3 . IdQueryParameters class ) )  < org.ovirt.engine.core.compat.Guid > VAR_1 = new TYPE_3 < org.ovirt.engine.core.compat.Guid > ( VAR_2 , VAR_3 . IdQueryParameters class ) ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_4 ( VAR_1 , METHOD_2 ( id ) ) ) INIT = new TYPE_4 ( VAR_1 , METHOD_2 ( id ) ) ) VAR VAR (  return inject ( new TYPE_5 < TYPE_6 , TYPE_7 . VM > ( VAR_5 , VAR_6 , VAR_4 ) ) ; )  return inject ( new TYPE_5 < TYPE_6 , TYPE_7 . VM > ( VAR_5 , VAR_6 , VAR_4 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME iface ) NAME iface ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  iface . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) )  iface . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) (  iface . METHOD_3 ( TYPE_2 . instance ( ) . METHOD_4 ( INT_1 ) ) )  iface . METHOD_3 ( TYPE_2 . instance ( ) . METHOD_4 ( INT_1 ) ) (  iface . METHOD_5 ( VAR_1 ) )  iface . METHOD_5 ( VAR_1 ) (  return iface ; )  return iface ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) ( VAR VAR ( TYPE TYPE_1.AddVmCommand<TYPE_2> ) TYPE TYPE_1.AddVmCommand<TYPE_2> ( NAME cmd ) NAME cmd ( INIT = METHOD_3 ( 0 , 0 ) ) INIT = METHOD_3 ( 0 , 0 ) ) VAR VAR (  org.mockito.Mockito.doReturn ( METHOD_4 ( ) ) . when ( cmd ) . getVdsGroup ( ) )  org.mockito.Mockito.doReturn ( METHOD_4 ( ) ) . when ( cmd ) . getVdsGroup ( ) (  org.mockito.Mockito.when ( VAR_1 . METHOD_5 ( TYPE_3 . any ( VAR_2 . Integer class ) , TYPE_3 . any ( VAR_3 . Version class ) ) ) . thenReturn ( new java.util.ArrayList < > ( TYPE_4 . METHOD_6 ( STRING_1 ) ) ) )  org.mockito.Mockito.when ( VAR_1 . METHOD_5 ( TYPE_3 . any ( VAR_2 . Integer class ) , TYPE_3 . any ( VAR_3 . Version class ) ) ) . thenReturn ( new java.util.ArrayList < > ( TYPE_4 . METHOD_6 ( STRING_1 ) ) ) (  TYPE_5 . METHOD_7 ( STRING_2 , cmd . METHOD_8 ( ) ) )  TYPE_5 . METHOD_7 ( STRING_2 , cmd . METHOD_8 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( ) ) . when ( VAR_1 ) . METHOD_3 ( TYPE_2 . any ( VAR_2 . VDS class ) ) )  org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( ) ) . when ( VAR_1 ) . METHOD_3 ( TYPE_2 . any ( VAR_2 . VDS class ) ) (  VAR_3 . METHOD_4 ( VAR_4 class ) )  VAR_3 . METHOD_4 ( VAR_4 class ) ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME vds ) NAME vds ( INIT = new org.ovirt.engine.core.common.businessentities.VDS ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.VDS ( ) ) VAR VAR (  VAR_5 . METHOD_3 ( vds ) )  VAR_5 . METHOD_3 ( vds ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME VAR_1 ) NAME VAR_1 ( INIT = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ) INIT = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ) VAR VAR ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_3 = ( ( java.util.Map < java.lang.Integer , java.util.Map < org.ovirt.engine.core.compat . Version , java.lang.Boolean > > ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) )  VAR_3 = ( ( java.util.Map < java.lang.Integer , java.util.Map < org.ovirt.engine.core.compat . Version , java.lang.Boolean > > ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD (  VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { VAR_3 = ( ( java.util.Map < java.lang.Integer , java.util.Map < org.ovirt.engine.core.compat . Version , java.lang.Boolean > > ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ; } } )  VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { VAR_3 = ( ( java.util.Map < java.lang.Integer , java.util.Map < org.ovirt.engine.core.compat . Version , java.lang.Boolean > > ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ; } } (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_4 , new TYPE_2 ( VAR_5 ) , VAR_1 ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_4 , new TYPE_2 ( VAR_5 ) , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1.Disk ) RETURN TYPE_1.Disk ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME rs ) NAME rs ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.DiskImage ) TYPE org.ovirt.engine.core.common.businessentities.DiskImage ( NAME disk ) NAME disk ( INIT = new org.ovirt.engine.core.common.businessentities.DiskImage ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.DiskImage ( ) ) VAR VAR (  disk . METHOD_2 ( rs.getString ( STRING_1 ) ) )  disk . METHOD_2 ( rs.getString ( STRING_1 ) ) (  disk . METHOD_3 ( rs . METHOD_4 ( STRING_2 ) ) )  disk . METHOD_3 ( rs . METHOD_4 ( STRING_2 ) ) (  disk . setId ( METHOD_5 ( rs , STRING_3 ) ) )  disk . setId ( METHOD_5 ( rs , STRING_3 ) ) (  return disk ; )  return disk ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME item ) NAME item ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( item . METHOD_2 ( ) ) || ( ! ( METHOD_3 ( ) ) ) ) COND ( item . METHOD_2 ( ) ) || ( ! ( METHOD_3 ( ) ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( IF IF ( COND ( ( ( ( item . METHOD_4 ( ) ) != null ) && ( VAR_1 . METHOD_5 ( ) ) ) && ( item . METHOD_4 ( ) . METHOD_6 ( ) . METHOD_7 ( ) ) ) && ( item . METHOD_4 ( ) . METHOD_6 ( ) . METHOD_8 ( ) ) ) COND ( ( ( ( item . METHOD_4 ( ) ) != null ) && ( VAR_1 . METHOD_5 ( ) ) ) && ( item . METHOD_4 ( ) . METHOD_6 ( ) . METHOD_7 ( ) ) ) && ( item . METHOD_4 ( ) . METHOD_6 ( ) . METHOD_8 ( ) ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.compat.Guid> ) TYPE java.util.ArrayList<org.ovirt.engine.core.compat.Guid> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( 1 ) ) INIT = new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( 1 ) ) VAR VAR (  VAR_1 . add ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) )  VAR_1 . add ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME returnValue ) NAME returnValue ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  returnValue . METHOD_3 ( VAR_1 ) )  returnValue . METHOD_3 ( VAR_1 ) (  TYPE_2 . when ( VAR_2 . METHOD_4 ( TYPE_3 . METHOD_5 ( VAR_3 ) , VAR_4 . Matchers < TYPE_4 > any ( VAR_5 class ) ) ) . thenReturn ( returnValue ) )  TYPE_2 . when ( VAR_2 . METHOD_4 ( TYPE_3 . METHOD_5 ( VAR_3 ) , VAR_4 . Matchers < TYPE_4 > any ( VAR_5 class ) ) ) . thenReturn ( returnValue ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StoragePool> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StoragePool> ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ) ( returnValue ) ) ) INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ) ( returnValue ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_1 ) ( model ) ) ) INIT = ( ( TYPE_1 ) ( model ) ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StoragePool ) TYPE org.ovirt.engine.core.common.businessentities.StoragePool ( NAME VAR_3 ) NAME VAR_3 ( INIT = new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ) VAR VAR (  VAR_3 . setId ( VAR_4 ) )  VAR_3 . setId ( VAR_4 ) (  VAR_3 . METHOD_1 ( STRING_1 ) )  VAR_3 . METHOD_1 ( STRING_1 ) (  VAR_1 . add ( VAR_3 ) )  VAR_1 . add ( VAR_3 ) (  VAR_2 . METHOD_2 ( ) . setItems ( VAR_1 ) )  VAR_2 . METHOD_2 ( ) . setItems ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1.DiskImage> ) TYPE java.util.List<TYPE_1.DiskImage> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( METHOD_3 ( ) . METHOD_4 ( TYPE_3 . METHOD_5 ( ) ) , true , false , true ) ) INIT = TYPE_2 . METHOD_2 ( METHOD_3 ( ) . METHOD_4 ( TYPE_3 . METHOD_5 ( ) ) , true , false , true ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_4 ( VAR_1 ) ) INIT = new TYPE_4 ( VAR_1 ) ) VAR VAR (  return validate ( VAR_2 . METHOD_6 ( ) ) ; )  return validate ( VAR_2 . METHOD_6 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.Map<java.lang.String,java.lang.String> ) RETURN java.util.Map<java.lang.String,java.lang.String> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.network.Network ) TYPE org.ovirt.engine.core.common.businessentities.network.Network ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . getValue ( ) ) INIT = VAR_3 . getValue ( ) ) VAR VAR ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.String> ) TYPE java.util.Map<java.lang.String,java.lang.String> ( NAME VAR_4 ) NAME VAR_4 ( INIT = ( ( java.util.Map < java.lang.String , java.lang.String > ) ( VAR_2 . METHOD_2 ( VAR_1 . getName ( ) ) ) ) ) INIT = ( ( java.util.Map < java.lang.String , java.lang.String > ) ( VAR_2 . METHOD_2 ( VAR_1 . getName ( ) ) ) ) ) VAR VAR (  TYPE_2 . METHOD_3 ( ( ( STRING_1 + ( VAR_1 . getName ( ) ) ) + STRING_2 ) , VAR_4 ) )  TYPE_2 . METHOD_3 ( ( ( STRING_1 + ( VAR_1 . getName ( ) ) ) + STRING_2 ) , VAR_4 ) (  return VAR_4 ; )  return VAR_4 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME getValue ) NAME getValue ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.Disk ) TYPE TYPE_1.Disk ( NAME object ) NAME object ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME value ) NAME value ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR ( IF IF ( COND ( object . METHOD_1 ( ) ) == ( VAR_1 ) ) COND ( object . METHOD_1 ( ) ) == ( VAR_1 ) ( THEN THEN ( VAR VAR ( TYPE TYPE_1.DiskImage ) TYPE TYPE_1.DiskImage ( NAME diskImage ) NAME diskImage ( INIT = ( ( TYPE_1 . DiskImage ) ( object ) ) ) INIT = ( ( TYPE_1 . DiskImage ) ( object ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.ArrayList<java.lang.String> ) TYPE java.util.ArrayList<java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ( INIT = diskImage . METHOD_2 ( ) ) INIT = diskImage . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN (  value = TYPE_2 . METHOD_3 ( STRING_2 , VAR_2 . METHOD_4 ( ) ) )  value = TYPE_2 . METHOD_3 ( STRING_2 , VAR_2 . METHOD_4 ( ) ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return value ; )  return value ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME id ) NAME id ( INIT = VAR_1 . getId ( ) ) INIT = VAR_1 . getId ( ) ) VAR VAR ( IF IF ( COND org.ovirt.engine.core.compat.Guid . METHOD_2 ( id ) ) COND org.ovirt.engine.core.compat.Guid . METHOD_2 ( id ) ( THEN THEN (  id = org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) )  id = org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) (  VAR_1 . setId ( id ) )  VAR_1 . setId ( id ) ) THEN THEN ) IF IF (  METHOD_4 ( ) . METHOD_5 ( STRING_1 , METHOD_6 ( VAR_1 ) ) )  METHOD_4 ( ) . METHOD_5 ( STRING_1 , METHOD_6 ( VAR_1 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1<TYPE_2> ) RETURN TYPE_1<TYPE_2> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  return new TYPE_3 < TYPE_2 > ( VAR_1 , METHOD_2 ( ) , TYPE_4 . METHOD_3 ( ) , TYPE_4 . METHOD_4 ( ) , new TYPE_5 ( VAR_1 , TYPE_4 . METHOD_3 ( ) , TYPE_4 . METHOD_4 ( ) ) ) ; )  return new TYPE_3 < TYPE_2 > ( VAR_1 , METHOD_2 ( ) , TYPE_4 . METHOD_3 ( ) , TYPE_4 . METHOD_4 ( ) , new TYPE_5 ( VAR_1 , TYPE_4 . METHOD_3 ( ) , TYPE_4 . METHOD_4 ( ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ) TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ( NAME cluster ) NAME cluster ( INIT = getModel ( ) . METHOD_2 ( ) ) INIT = getModel ( ) . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( java.lang.Boolean ) ( TYPE_1 . getInstance ( ) . METHOD_3 ( VAR_2 , cluster . METHOD_4 ( ) . getValue ( ) ) ) ) ) INIT = ( ( java.lang.Boolean ) ( TYPE_1 . getInstance ( ) . METHOD_3 ( VAR_2 , cluster . METHOD_4 ( ) . getValue ( ) ) ) ) ) VAR VAR (  getModel ( ) . METHOD_5 ( ) . METHOD_6 ( VAR_1 ) )  getModel ( ) . METHOD_5 ( ) . METHOD_6 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = dao . get ( VAR_2 ) ) INIT = dao . get ( VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_3 . setId ( VAR_2 ) )  VAR_3 . setId ( VAR_2 ) (  VAR_3 . METHOD_2 ( STRING_1 ) )  VAR_3 . METHOD_2 ( STRING_1 ) (  VAR_3 . METHOD_3 ( VAR_4 ) )  VAR_3 . METHOD_3 ( VAR_4 ) (  VAR_3 . METHOD_4 ( INT_1 ) )  VAR_3 . METHOD_4 ( INT_1 ) (  VAR_3 . METHOD_5 ( INT_2 ) )  VAR_3 . METHOD_5 ( INT_2 ) (  VAR_3 . METHOD_6 ( INT_3 ) )  VAR_3 . METHOD_6 ( INT_3 ) (  TYPE_2 . METHOD_7 ( VAR_1 ) )  TYPE_2 . METHOD_7 ( VAR_1 ) (  TYPE_2 . assertEquals ( VAR_1 , VAR_3 ) )  TYPE_2 . assertEquals ( VAR_1 , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( METHOD_2 ( ) . METHOD_3 ( ) ) != ( VAR_1 ) ) COND ( METHOD_2 ( ) . METHOD_3 ( ) ) != ( VAR_1 ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( org.ovirt.engine.core.common.businessentities.DiskImage ) ( METHOD_2 ( ) ) ) . METHOD_4 ( ) ) INIT = ( ( org.ovirt.engine.core.common.businessentities.DiskImage ) ( METHOD_2 ( ) ) ) . METHOD_4 ( ) ) VAR VAR (  return ! ( TYPE_1 . equals ( VAR_2 , METHOD_4 ( ) ) ) ; )  return ! ( TYPE_1 . equals ( VAR_2 , METHOD_4 ( ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.ArrayList<TYPE_1.Disk> ) TYPE java.util.ArrayList<TYPE_1.Disk> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<TYPE_1.DiskImage> ) TYPE java.util.ArrayList<TYPE_1.DiskImage> ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_2 ( VAR_3 . Linq < TYPE_1 . DiskImage > METHOD_3 ( VAR_1 ) ) ) INIT = TYPE_2 . METHOD_2 ( VAR_3 . Linq < TYPE_1 . DiskImage > METHOD_3 ( VAR_1 ) ) ) VAR VAR (  TYPE_3 . METHOD_4 ( VAR_2 , new TYPE_4 ( ) ) )  TYPE_3 . METHOD_4 ( VAR_2 , new TYPE_4 ( ) ) (  METHOD_5 ( ) . setItems ( VAR_2 ) )  METHOD_5 ( ) . setItems ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ( NAME iface ) NAME iface ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  iface . METHOD_3 ( null ) )  iface . METHOD_3 ( null ) (  METHOD_4 ( iface , true , iface . METHOD_5 ( ) , iface . METHOD_6 ( ) , iface . METHOD_7 ( ) , iface . METHOD_8 ( ) , null ) )  METHOD_4 ( iface , true , iface . METHOD_5 ( ) , iface . METHOD_6 ( ) , iface . METHOD_7 ( ) , iface . METHOD_8 ( ) , null ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < TYPE_1 > ( ) ) INIT = new java.util.ArrayList < TYPE_1 > ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_2 . METHOD_2 ( VAR_3 ) )  VAR_2 . METHOD_2 ( VAR_3 ) (  VAR_1 . add ( VAR_2 ) )  VAR_1 . add ( VAR_2 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_4 . METHOD_2 ( null ) )  VAR_4 . METHOD_2 ( null ) (  VAR_1 . add ( VAR_4 ) )  VAR_1 . add ( VAR_4 ) (  TYPE_2 . METHOD_2 ( VAR_5 ) )  TYPE_2 . METHOD_2 ( VAR_5 ) (  VAR_1 . add ( TYPE_2 ) )  VAR_1 . add ( TYPE_2 ) (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME equals ) NAME equals ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME obj ) NAME obj ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( this ) == obj ) COND ( this ) == obj ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ( IF IF ( COND obj == null ) COND obj == null ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( IF IF ( COND ! ( obj instanceof TYPE_1 ) ) COND ! ( obj instanceof TYPE_1 ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME other ) NAME other ( INIT = ( ( TYPE_1 ) ( obj ) ) ) INIT = ( ( TYPE_1 ) ( obj ) ) ) VAR VAR (  return ( TYPE_2 . equals ( VAR_1 , VAR_2 ) ) && ( TYPE_2 . equals ( VAR_3 , VAR_4 ) ) ; )  return ( TYPE_2 . equals ( VAR_1 , VAR_2 ) ) && ( TYPE_2 . equals ( VAR_3 , VAR_4 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_3 . METHOD_2 ( STRING_1 , VAR_4 , VAR_2 ) )  VAR_3 . METHOD_2 ( STRING_1 , VAR_4 , VAR_2 ) ( SYNCHRONIZED SYNCHRONIZED (  VAR_5 )  VAR_5 ( BLOCK BLOCK ( IF IF ( COND VAR_6 . METHOD_3 ( VAR_1 ) ) COND VAR_6 . METHOD_3 ( VAR_1 ) ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_7 ) NAME VAR_7 ( IN new TYPE_1 < org.ovirt.engine.core.compat.Guid > ( VAR_6 . get ( VAR_1 ) ) ) IN new TYPE_1 < org.ovirt.engine.core.compat.Guid > ( VAR_6 . get ( VAR_1 ) ) ( BLOCK BLOCK (  METHOD_4 ( VAR_7 , VAR_1 , VAR_2 ) )  METHOD_4 ( VAR_7 , VAR_1 , VAR_2 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN org.ovirt.engine.core.common.businessentities.DiskImage ) RETURN org.ovirt.engine.core.common.businessentities.DiskImage ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.DiskImage ) TYPE org.ovirt.engine.core.common.businessentities.DiskImage ( NAME disk ) NAME disk ( INIT = new org.ovirt.engine.core.common.businessentities.DiskImage ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.DiskImage ( ) ) VAR VAR (  disk . METHOD_2 ( VAR_1 ) )  disk . METHOD_2 ( VAR_1 ) (  disk . METHOD_3 ( VAR_2 ) )  disk . METHOD_3 ( VAR_2 ) (  disk . METHOD_4 ( true ) )  disk . METHOD_4 ( true ) (  disk . METHOD_5 ( vmId ) )  disk . METHOD_5 ( vmId ) (  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( command ) . METHOD_6 ( ) )  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( command ) . METHOD_6 ( ) (  TYPE_1 . when ( VAR_3 . get ( VAR_1 ) ) . thenReturn ( disk ) )  TYPE_1 . when ( VAR_3 . get ( VAR_1 ) ) . thenReturn ( disk ) (  return disk ; )  return disk ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_2 ) . METHOD_2 ( ) )  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_2 ) . METHOD_2 ( ) (  org.mockito.Mockito.doReturn ( METHOD_3 ( ) ) . when ( VAR_1 ) . METHOD_4 ( ) )  org.mockito.Mockito.doReturn ( METHOD_3 ( ) ) . when ( VAR_1 ) . METHOD_4 ( ) (  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( VAR_2 ) . METHOD_5 ( ) )  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( VAR_2 ) . METHOD_5 ( ) (  org.mockito.Mockito.doReturn ( VAR_4 ) . when ( VAR_2 ) . METHOD_6 ( ) )  org.mockito.Mockito.doReturn ( VAR_4 ) . when ( VAR_2 ) . METHOD_6 ( ) (  org.mockito.Mockito.doReturn ( VAR_5 ) . when ( VAR_2 ) . METHOD_7 ( ) )  org.mockito.Mockito.doReturn ( VAR_5 ) . when ( VAR_2 ) . METHOD_7 ( ) (  org.mockito.Mockito.doReturn ( VAR_6 ) . when ( VAR_2 ) . METHOD_8 ( ) )  org.mockito.Mockito.doReturn ( VAR_6 ) . when ( VAR_2 ) . METHOD_8 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 = new TYPE_1 ( STRING_1 , org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) , STRING_1 , TYPE_2 . getValue ( ) , TYPE_3 . getValue ( ) ) )  VAR_1 = new TYPE_1 ( STRING_1 , org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) , STRING_1 , TYPE_2 . getValue ( ) , TYPE_3 . getValue ( ) ) (  validator = org.mockito.Mockito . METHOD_3 ( new TYPE_4 ( VAR_1 , new java.util.ArrayList < java.lang.String > ( ) ) ) )  validator = org.mockito.Mockito . METHOD_3 ( new TYPE_4 ( VAR_1 , new java.util.ArrayList < java.lang.String > ( ) ) ) (  METHOD_4 ( ) )  METHOD_4 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( new TYPE_1 . DiskImage ( ) ) )  METHOD_2 ( new TYPE_1 . DiskImage ( ) ) (  METHOD_3 ( false ) )  METHOD_3 ( false ) (  METHOD_4 ( ) )  METHOD_4 ( ) (  command . METHOD_5 ( ) . METHOD_6 ( VAR_1 ) )  command . METHOD_5 ( ) . METHOD_6 ( VAR_1 ) (  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( command ) . METHOD_7 ( ) )  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( command ) . METHOD_7 ( ) (  TYPE_2 . METHOD_8 ( command . validate ( ) ) )  TYPE_2 . METHOD_8 ( command . validate ( ) ) (  TYPE_2 . METHOD_9 ( command . getReturnValue ( ) . METHOD_10 ( ) . METHOD_11 ( TYPE_3 . toString ( ) ) ) )  TYPE_2 . METHOD_9 ( command . getReturnValue ( ) . METHOD_10 ( ) . METHOD_11 ( TYPE_3 . toString ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.DbFacade ) TYPE TYPE_1.DbFacade ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  VAR_2 = org.mockito.Mockito . METHOD_3 ( VAR_3 class ) )  VAR_2 = org.mockito.Mockito . METHOD_3 ( VAR_3 class ) (  org.mockito.Mockito.when ( VAR_1 . METHOD_4 ( ) ) . thenReturn ( VAR_2 ) )  org.mockito.Mockito.when ( VAR_1 . METHOD_4 ( ) ) . thenReturn ( VAR_2 ) (  org.mockito.Mockito.when ( VAR_2 . METHOD_5 ( vmId , METHOD_6 ( ) . METHOD_7 ( ) , METHOD_8 ( ) . METHOD_9 ( ) ) ) . thenReturn ( TYPE_2 . METHOD_10 ( VAR_4 ) ) )  org.mockito.Mockito.when ( VAR_2 . METHOD_5 ( vmId , METHOD_6 ( ) . METHOD_7 ( ) , METHOD_8 ( ) . METHOD_9 ( ) ) ) . thenReturn ( TYPE_2 . METHOD_10 ( VAR_4 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.util.List<java.lang.String> ) RETURN java.util.List<java.lang.String> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1<?> ) TYPE TYPE_1<?> ( NAME command ) NAME command ) VAR VAR ( VAR VAR ( TYPE TYPE_2.VdcBllMessages ) TYPE TYPE_2.VdcBllMessages ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  command . METHOD_2 ( ) )  command . METHOD_2 ( ) ( FOR-EACH FOR-EACH ( TYPE TYPE_2.VdcBllMessages ) TYPE TYPE_2.VdcBllMessages ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK (  TYPE_3 . METHOD_3 ( VAR_1 , command , VAR_3 ) )  TYPE_3 . METHOD_3 ( VAR_1 , command , VAR_3 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return command . getReturnValue ( ) . METHOD_4 ( ) ; )  return command . getReturnValue ( ) . METHOD_4 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 = org.mockito.Mockito . METHOD_2 ( new TYPE_1 < TYPE_2 . VdcActionParametersBase > ( parameters ) ) )  VAR_1 = org.mockito.Mockito . METHOD_2 ( new TYPE_1 < TYPE_2 . VdcActionParametersBase > ( parameters ) ) (  org.mockito.Mockito.when ( VAR_1 . getParameters ( ) ) . thenReturn ( parameters ) )  org.mockito.Mockito.when ( VAR_1 . getParameters ( ) ) . thenReturn ( parameters ) (  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( VAR_1 ) . METHOD_3 ( ) )  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( VAR_1 ) . METHOD_3 ( ) (  org.mockito.Mockito.when ( VAR_2 . get ( VAR_3 ) ) . thenReturn ( METHOD_4 ( VAR_3 ) ) )  org.mockito.Mockito.when ( VAR_2 . get ( VAR_3 ) ) . thenReturn ( METHOD_4 ( VAR_3 ) ) (  org.mockito.Mockito.when ( VAR_2 . get ( VAR_4 ) ) . thenReturn ( null ) )  org.mockito.Mockito.when ( VAR_2 . get ( VAR_4 ) ) . thenReturn ( null ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME returnValue ) NAME returnValue ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  returnValue . METHOD_2 ( true ) )  returnValue . METHOD_2 ( true ) ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ) TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME storageDomain ) NAME storageDomain ( INIT = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) ) VAR VAR (  storageDomain . setId ( VAR_1 ) )  storageDomain . setId ( VAR_1 ) ( VAR VAR ( TYPE TYPE_2<TYPE_3,java.lang.Object> ) TYPE TYPE_2<TYPE_3,java.lang.Object> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 ( storageDomain . METHOD_3 ( ) , null ) ) INIT = new TYPE_2 ( storageDomain . METHOD_3 ( ) , null ) ) VAR VAR (  returnValue . METHOD_4 ( VAR_2 ) )  returnValue . METHOD_4 ( VAR_2 ) (  return returnValue ; )  return returnValue ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( METHOD_3 ( ) ) )  METHOD_2 ( METHOD_3 ( ) ) (  METHOD_4 ( 1 , true ) )  METHOD_4 ( 1 , true ) (  VAR_1 . METHOD_5 ( ) )  VAR_1 . METHOD_5 ( ) ( TRY TRY ( BLOCK BLOCK (  resource . METHOD_6 ( METHOD_7 ( 0 ) ) )  resource . METHOD_6 ( METHOD_7 ( 0 ) ) (  METHOD_8 ( STRING_1 ) )  METHOD_8 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( BLOCK BLOCK (  METHOD_9 ( VAR_2 ) )  METHOD_9 ( VAR_2 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 < TYPE_2 > ( new TYPE_2 ( VAR_1 ) ) ) )  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 < TYPE_2 > ( new TYPE_2 ( VAR_1 ) ) ) (  METHOD_3 ( ) )  METHOD_3 ( ) (  org.mockito.Mockito.doReturn ( METHOD_4 ( ) ) . when ( cmd ) . METHOD_5 ( ) )  org.mockito.Mockito.doReturn ( METHOD_4 ( ) ) . when ( cmd ) . METHOD_5 ( ) (  TYPE_3 . METHOD_6 ( cmd . METHOD_7 ( ) ) )  TYPE_3 . METHOD_6 ( cmd . METHOD_7 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = dao . METHOD_2 ( VAR_2 , VAR_3 ) ) INIT = dao . METHOD_2 ( VAR_2 , VAR_3 ) ) VAR VAR (  TYPE_2 . METHOD_3 ( STRING_1 , ( ! ( VAR_1 . isEmpty ( ) ) ) ) )  TYPE_2 . METHOD_3 ( STRING_1 , ( ! ( VAR_1 . isEmpty ( ) ) ) ) (  TYPE_2 . METHOD_3 ( STRING_2 , ( ( VAR_1 . get ( 0 ) . METHOD_4 ( ) . size ( ) ) == 1 ) ) )  TYPE_2 . METHOD_3 ( STRING_2 , ( ( VAR_1 . get ( 0 ) . METHOD_4 ( ) . size ( ) ) == 1 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) . METHOD_3 ( true ) )  METHOD_2 ( ) . METHOD_3 ( true ) ( IF IF ( COND ( METHOD_2 ( ) . METHOD_4 ( ) ) && ( ! ( ( java.lang.Boolean ) ( METHOD_2 ( ) . getEntity ( ) ) ) ) ) COND ( METHOD_2 ( ) . METHOD_4 ( ) ) && ( ! ( ( java.lang.Boolean ) ( METHOD_2 ( ) . getEntity ( ) ) ) ) ( THEN THEN (  METHOD_2 ( ) . METHOD_5 ( ) . add ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_6 ( ) ) )  METHOD_2 ( ) . METHOD_5 ( ) . add ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_6 ( ) ) (  METHOD_2 ( ) . METHOD_3 ( false ) )  METHOD_2 ( ) . METHOD_3 ( false ) ) THEN THEN ) IF IF (  return METHOD_2 ( ) . METHOD_7 ( ) ; )  return METHOD_2 ( ) . METHOD_7 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 = org.mockito.Mockito . METHOD_2 ( VAR_2 class ) )  VAR_1 = org.mockito.Mockito . METHOD_2 ( VAR_2 class ) (  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( METHOD_3 ( ) ) . METHOD_4 ( ) )  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( METHOD_3 ( ) ) . METHOD_4 ( ) (  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( METHOD_5 ( ) ) . getId ( ) )  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( METHOD_5 ( ) ) . getId ( ) (  org.mockito.Mockito.doReturn ( METHOD_6 ( ) ) . when ( VAR_1 ) . METHOD_7 ( VAR_3 ) )  org.mockito.Mockito.doReturn ( METHOD_6 ( ) ) . when ( VAR_1 ) . METHOD_7 ( VAR_3 ) (  org.mockito.Mockito.doReturn ( new java.util.ArrayList < TYPE_1 > ( ) ) . when ( VAR_1 ) . METHOD_8 ( VAR_4 ) )  org.mockito.Mockito.doReturn ( new java.util.ArrayList < TYPE_1 > ( ) ) . when ( VAR_1 ) . METHOD_8 ( VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  quota = METHOD_2 ( VAR_1 ) )  quota = METHOD_2 ( VAR_1 ) (  org.mockito.Mockito.when ( VAR_2 . METHOD_3 ( VAR_1 ) ) . thenReturn ( quota ) )  org.mockito.Mockito.when ( VAR_2 . METHOD_3 ( VAR_1 ) ) . thenReturn ( quota ) (  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( command ) . METHOD_4 ( ) )  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( command ) . METHOD_4 ( ) (  org.mockito.Mockito . METHOD_5 ( ) . when ( command ) . METHOD_6 ( ) )  org.mockito.Mockito . METHOD_5 ( ) . when ( command ) . METHOD_6 ( ) (  org.mockito.Mockito . METHOD_5 ( ) . when ( command ) . METHOD_7 ( ) )  org.mockito.Mockito . METHOD_5 ( ) . when ( command ) . METHOD_7 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( null , VAR_2 ) ) INIT = new TYPE_1 ( null , VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR (  TYPE_2 . assertEquals ( VAR_4 , VAR_3 ) )  TYPE_2 . assertEquals ( VAR_4 , VAR_3 ) ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_1 . METHOD_3 ( ) ) INIT = VAR_1 . METHOD_3 ( ) ) VAR VAR (  TYPE_2 . assertEquals ( VAR_2 , VAR_5 ) )  TYPE_2 . assertEquals ( VAR_2 , VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( STRING_1 ) )  VAR_1 . METHOD_2 ( STRING_1 ) (  VAR_2 . METHOD_3 ( ) )  VAR_2 . METHOD_3 ( ) ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.compat.Version ) TYPE org.ovirt.engine.core.compat.Version ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_4 < TYPE_1 < org.ovirt.engine.core.compat . Version > > METHOD_4 ( VAR_5 ) ) IN VAR_4 < TYPE_1 < org.ovirt.engine.core.compat . Version > > METHOD_4 ( VAR_5 ) ( BLOCK BLOCK (  VAR_2 . put ( VAR_3 , new TYPE_2 ( VAR_3 ) ) )  VAR_2 . put ( VAR_3 , new TYPE_2 ( VAR_3 ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  VAR_1 . METHOD_2 ( STRING_2 ) )  VAR_1 . METHOD_2 ( STRING_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return TYPE_1 . METHOD_2 ( vm , TYPE_2 . getReturnValue ( ) . METHOD_3 ( ) , vm . METHOD_4 ( ) , METHOD_5 ( ) . getValue ( ) , false , true , false , false , true , false , false , true , TYPE_3 . METHOD_6 ( ) ) ; )  return TYPE_1 . METHOD_2 ( vm , TYPE_2 . getReturnValue ( ) . METHOD_3 ( ) , vm . METHOD_4 ( ) , METHOD_5 ( ) . getValue ( ) , false , true , false , false , true , false , false , true , TYPE_3 . METHOD_6 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME validate ) NAME validate ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_1 ( ) ) INIT = METHOD_1 ( ) ) VAR VAR ( IF IF ( COND ! ( super . validate ( ) ) ) COND ! ( super . validate ( ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) INIT = VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) VAR VAR ( IF IF ( COND ! VAR_2 ) COND ! VAR_2 ( THEN THEN (  return METHOD_4 ( VAR_3 ) ; )  return METHOD_4 ( VAR_3 ) ; ) THEN THEN ( ELSE ELSE ( IF IF ( COND ( VAR_1 . METHOD_5 ( ) . size ( ) ) == 1 ) COND ( VAR_1 . METHOD_5 ( ) . size ( ) ) == 1 ( THEN THEN (  return METHOD_4 ( VAR_4 ) ; )  return METHOD_4 ( VAR_4 ) ; ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_5 ) NAME VAR_5 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  return validate ( VAR_5 . METHOD_6 ( VAR_1 ) ) ; )  return validate ( VAR_5 . METHOD_6 ( VAR_1 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( METHOD_2 ( ) ) == ( VAR_1 ) ) COND ( METHOD_2 ( ) ) == ( VAR_1 ) ( THEN THEN (  TYPE_1 . METHOD_3 ( ) )  TYPE_1 . METHOD_3 ( ) ( IF IF ( COND TYPE_1 . getParameters ( ) . METHOD_4 ( ) ) COND TYPE_1 . getParameters ( ) . METHOD_4 ( ) ( THEN THEN (  org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_5 ( ) . METHOD_6 ( new TYPE_2 ( TYPE_1 . getParameters ( ) . METHOD_7 ( ) , TYPE_1 . getParameters ( ) . METHOD_8 ( ) ) ) )  org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_5 ( ) . METHOD_6 ( new TYPE_2 ( TYPE_1 . getParameters ( ) . METHOD_7 ( ) , TYPE_1 . getParameters ( ) . METHOD_8 ( ) ) ) ) THEN THEN ) IF IF (  METHOD_9 ( ) )  METHOD_9 ( ) ) THEN THEN ( ELSE ELSE (  TYPE_1 . METHOD_10 ( ) )  TYPE_1 . METHOD_10 ( ) ) ELSE ELSE ) IF IF (  TYPE_1 . METHOD_11 ( true ) )  TYPE_1 . METHOD_11 ( true ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME validate ) NAME validate ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 . METHOD_1 ( ) ) != null ) COND ( VAR_1 . METHOD_1 ( ) ) != null ( THEN THEN (  return METHOD_2 ( VAR_2 ) ; )  return METHOD_2 ( VAR_2 ) ; ) THEN THEN ) IF IF ( IF IF ( COND ! ( METHOD_3 ( ) ) ) COND ! ( METHOD_3 ( ) ) ( THEN THEN (  return METHOD_2 ( VAR_3 ) ; )  return METHOD_2 ( VAR_3 ) ; ) THEN THEN ) IF IF ( IF IF ( COND ! ( TYPE_1 . METHOD_4 ( VAR_4 ) . METHOD_5 ( VAR_5 . METHOD_6 ( ) ) ) ) COND ! ( TYPE_1 . METHOD_4 ( VAR_4 ) . METHOD_5 ( VAR_5 . METHOD_6 ( ) ) ) ( THEN THEN (  return METHOD_2 ( VAR_6 ) ; )  return METHOD_2 ( VAR_6 ) ; ) THEN THEN ) IF IF (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<org.ovirt.engine.core.common.businessentities.network.Network> ) RETURN TYPE_1<org.ovirt.engine.core.common.businessentities.network.Network> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<java.lang.String,org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> ) TYPE java.util.Map<java.lang.String,org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_2 . METHOD_2 ( VAR_1 ) ) INIT = TYPE_2 . METHOD_2 ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1<org.ovirt.engine.core.common.businessentities.network.Network> ) TYPE TYPE_1<org.ovirt.engine.core.common.businessentities.network.Network> ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_3 < > ( ) ) INIT = new TYPE_3 < > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.network.Network ) TYPE org.ovirt.engine.core.common.businessentities.network.Network ( NAME network ) NAME network ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_3 . METHOD_3 ( network . getName ( ) ) ) ) COND ! ( VAR_3 . METHOD_3 ( network . getName ( ) ) ) ( THEN THEN (  VAR_4 . add ( network ) )  VAR_4 . add ( network ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_4 ; )  return VAR_4 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME VAR_1 ) NAME VAR_1 ( INIT = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ) INIT = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ) VAR VAR ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_3 = ( ( java.util.Map < TYPE_1 < java.lang.Integer , org.ovirt.engine.core.compat . Version > , TYPE_2 < java.lang.String > > ) ( ( ( TYPE_3 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) )  VAR_3 = ( ( java.util.Map < TYPE_1 < java.lang.Integer , org.ovirt.engine.core.compat . Version > , TYPE_2 < java.lang.String > > ) ( ( ( TYPE_3 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD (  VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { VAR_3 = ( ( java.util.Map < TYPE_1 < java.lang.Integer , org.ovirt.engine.core.compat . Version > , TYPE_2 < java.lang.String > > ) ( ( ( TYPE_3 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ; } } )  VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { VAR_3 = ( ( java.util.Map < TYPE_1 < java.lang.Integer , org.ovirt.engine.core.compat . Version > , TYPE_2 < java.lang.String > > ) ( ( ( TYPE_3 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ; } } (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_4 , new TYPE_4 ( VAR_5 ) , VAR_1 ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_4 , new TYPE_4 ( VAR_5 ) , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = null ) INIT = null ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = null ) INIT = null ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_2 = VAR_4 . METHOD_2 ( ) )  VAR_2 = VAR_4 . METHOD_2 ( ) (  VAR_3 = VAR_2 . METHOD_3 ( ( STRING_1 + ( STRING_2 + STRING_3 ) ) ) )  VAR_3 = VAR_2 . METHOD_3 ( ( STRING_1 + ( STRING_2 + STRING_3 ) ) ) (  VAR_3 . METHOD_4 ( 1 , VAR_1 ) )  VAR_3 . METHOD_4 ( 1 , VAR_1 ) ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_3 . METHOD_5 ( ) ) INIT = VAR_3 . METHOD_5 ( ) ) VAR VAR ( IF IF ( COND VAR_5 != 1 ) COND VAR_5 != 1 ( THEN THEN (  VAR_6 . error ( STRING_4 , VAR_1 ) )  VAR_6 . error ( STRING_4 , VAR_1 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ( FINALLY FINALLY (  TYPE_4 . METHOD_6 ( VAR_3 , VAR_2 ) )  TYPE_4 . METHOD_6 ( VAR_3 , VAR_2 ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND source == null ) COND source == null ( THEN THEN (  return INT_1 ; )  return INT_1 ; ) THEN THEN ) IF IF (  return source ; )  return source ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return INT_1 ; } return source ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return INT_1 ; } return source ; } } (  TYPE_1 . METHOD_2 ( new TYPE_2 ( VAR_1 , TYPE_1 . METHOD_3 ( ) ) , aQuery ) )  TYPE_1 . METHOD_2 ( new TYPE_2 ( VAR_1 , TYPE_1 . METHOD_3 ( ) ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( new TYPE_1 . DiskImage ( ) ) )  METHOD_2 ( new TYPE_1 . DiskImage ( ) ) (  METHOD_3 ( ) )  METHOD_3 ( ) (  METHOD_4 ( false ) )  METHOD_4 ( false ) (  METHOD_5 ( ) )  METHOD_5 ( ) (  METHOD_6 ( ) )  METHOD_6 ( ) (  METHOD_7 ( VAR_1 ) )  METHOD_7 ( VAR_1 ) (  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( command ) . METHOD_8 ( ) )  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( command ) . METHOD_8 ( ) (  TYPE_2 . METHOD_9 ( command . validate ( ) ) )  TYPE_2 . METHOD_9 ( command . validate ( ) ) (  TYPE_2 . METHOD_10 ( command . getReturnValue ( ) . METHOD_11 ( ) . METHOD_12 ( TYPE_3 . toString ( ) ) ) )  TYPE_2 . METHOD_10 ( command . getReturnValue ( ) . METHOD_11 ( ) . METHOD_12 ( TYPE_3 . toString ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_1 ) ( target ) ) ) INIT = ( ( TYPE_1 ) ( target ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2<org.ovirt.engine.core.common.businessentities.VDS> ) TYPE TYPE_2<org.ovirt.engine.core.common.businessentities.VDS> ( NAME hosts ) NAME hosts ( INIT = ( ( TYPE_2 < org.ovirt.engine.core.common.businessentities.VDS > ) ( returnValue ) ) ) INIT = ( ( TYPE_2 < org.ovirt.engine.core.common.businessentities.VDS > ) ( returnValue ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ) INIT = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME host ) NAME host ( IN hosts ) IN hosts ( BLOCK BLOCK ( IF IF ( COND METHOD_2 ( host ) ) COND METHOD_2 ( host ) ( THEN THEN (  VAR_2 . add ( host ) )  VAR_2 . add ( host ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  VAR_1 . METHOD_3 ( ) . setItems ( VAR_2 ) )  VAR_1 . METHOD_3 ( ) . setItems ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain> ) RETURN java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain> ( NAME VAR_3 ) NAME VAR_3 ( INIT = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ) INIT = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ) TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME storage ) NAME storage ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( IF IF ( COND storage . getStoragePoolId ( ) . equals ( VAR_2 ) ) COND storage . getStoragePoolId ( ) . equals ( VAR_2 ) ( THEN THEN (  VAR_3 . add ( storage ) )  VAR_3 . add ( storage ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME result ) NAME result ) VAR VAR ( SWITCH SWITCH ( NAME TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ) NAME TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ( CASE VAR_1 ( BLOCK BLOCK (  result = true )  result = true (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_1 ( CASE VAR_2 ( BLOCK BLOCK (  result = true )  result = true (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_2 ( CASE VAR_3 ( BLOCK BLOCK (  result = true )  result = true (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_3 ( CASE VAR_4 ( BLOCK BLOCK (  result = true )  result = true (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_4 ( CASE VAR_5 ( BLOCK BLOCK (  result = true )  result = true (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_5 ( DEFAULT DEFAULT ( BLOCK BLOCK (  result = false )  result = false (  break ; )  break ; ) BLOCK BLOCK ) DEFAULT DEFAULT ) SWITCH SWITCH (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME version ) NAME version ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND TYPE_2 . METHOD_2 ( version , VAR_1 ) ) COND TYPE_2 . METHOD_2 ( version , VAR_1 ) ( THEN THEN (  METHOD_3 ( version , TYPE_3 . METHOD_4 ( ) ) )  METHOD_3 ( version , TYPE_3 . METHOD_4 ( ) ) (  METHOD_5 ( version , TYPE_4 . METHOD_4 ( ) ) )  METHOD_5 ( version , TYPE_4 . METHOD_4 ( ) ) (  METHOD_6 ( version , TYPE_5 . METHOD_4 ( ) ) )  METHOD_6 ( version , TYPE_5 . METHOD_4 ( ) ) (  METHOD_7 ( version , TYPE_6 . METHOD_4 ( ) ) )  METHOD_7 ( version , TYPE_6 . METHOD_4 ( ) ) (  METHOD_8 ( version , TYPE_6 . METHOD_4 ( ) ) )  METHOD_8 ( version , TYPE_6 . METHOD_4 ( ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.VdcQueryReturnValue ) TYPE TYPE_1.VdcQueryReturnValue ( NAME returnValue ) NAME returnValue ( INIT = ( ( TYPE_1 . VdcQueryReturnValue ) ( VAR_1 ) ) ) INIT = ( ( TYPE_1 . VdcQueryReturnValue ) ( VAR_1 ) ) ) VAR VAR (  VAR_2 = returnValue . getReturnValue ( ) )  VAR_2 = returnValue . getReturnValue ( ) ( IF IF ( COND ( VAR_2 ) == null ) COND ( VAR_2 ) == null ( THEN THEN (  VAR_2 = TYPE_2 . METHOD_1 ( ) )  VAR_2 = TYPE_2 . METHOD_1 ( ) ) THEN THEN ) IF IF (  METHOD_2 ( ) )  METHOD_2 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( TYPE_2 . METHOD_3 ( ) ) ) INIT = METHOD_2 ( TYPE_2 . METHOD_3 ( ) ) ) VAR VAR ( SWITCH SWITCH ( NAME VAR_1 ) NAME VAR_1 ( CASE VAR_2 ( BLOCK BLOCK (  VAR_3 . error ( java.lang.String . METHOD_4 ( STRING_1 , TYPE_2 . getParameters ( ) . METHOD_5 ( ) ) ) )  VAR_3 . error ( java.lang.String . METHOD_4 ( STRING_1 , TYPE_2 . getParameters ( ) . METHOD_5 ( ) ) ) (  return ; )  return ; ) BLOCK BLOCK ) CASE VAR_2 ) SWITCH SWITCH (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME VAR_1 ) NAME VAR_1 ( INIT = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ) INIT = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ) VAR VAR ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_3 = ( ( java.util.HashMap < java.lang.Integer , java.lang.String > ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) )  VAR_3 = ( ( java.util.HashMap < java.lang.Integer , java.lang.String > ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) (  TYPE_2 . getInstance ( ) . METHOD_2 ( new TYPE_3 ( VAR_3 ) ) )  TYPE_2 . getInstance ( ) . METHOD_2 ( new TYPE_3 ( VAR_3 ) ) ) BLOCK BLOCK ) METHOD METHOD (  VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { VAR_3 = ( ( java.util.HashMap < java.lang.Integer , java.lang.String > ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ; TYPE_2 . getInstance ( ) . METHOD_2 ( new TYPE_3 ( VAR_3 ) ) ; } } )  VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { VAR_3 = ( ( java.util.HashMap < java.lang.Integer , java.lang.String > ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ; TYPE_2 . getInstance ( ) . METHOD_2 ( new TYPE_3 ( VAR_3 ) ) ; } } (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_4 , new TYPE_4 ( VAR_5 ) , VAR_1 ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_4 , new TYPE_4 ( VAR_5 ) , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME command ) NAME command ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_2 ( ) )  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_2 ( ) (  org.mockito.Mockito.doReturn ( METHOD_3 ( VAR_2 ) ) . when ( command ) . METHOD_4 ( ) )  org.mockito.Mockito.doReturn ( METHOD_3 ( VAR_2 ) ) . when ( command ) . METHOD_4 ( ) (  org.mockito.Mockito.doReturn ( METHOD_5 ( VAR_3 ) ) . when ( VAR_1 ) . METHOD_6 ( VAR_3 ) )  org.mockito.Mockito.doReturn ( METHOD_5 ( VAR_3 ) ) . when ( VAR_1 ) . METHOD_6 ( VAR_3 ) (  org.mockito.Mockito.doReturn ( METHOD_5 ( VAR_4 ) ) . when ( VAR_1 ) . METHOD_6 ( VAR_4 ) )  org.mockito.Mockito.doReturn ( METHOD_5 ( VAR_4 ) ) . when ( VAR_1 ) . METHOD_6 ( VAR_4 ) (  org.mockito.Mockito.doReturn ( null ) . when ( VAR_1 ) . METHOD_6 ( null ) )  org.mockito.Mockito.doReturn ( null ) . when ( VAR_1 ) . METHOD_6 ( null ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME nic ) NAME nic ) VAR VAR ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME VAR_2 ) NAME VAR_2 ( INIT = nic . METHOD_2 ( ) ) INIT = nic . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND ( VAR_2 . size ( ) ) > 0 ) COND ( VAR_2 . size ( ) ) > 0 ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( IN new java.util.ArrayList < TYPE_2 > ( VAR_2 ) ) IN new java.util.ArrayList < TYPE_2 > ( VAR_2 ) ( BLOCK BLOCK (  TYPE_3 . METHOD_3 ( VAR_3 , null , VAR_1 ) . METHOD_4 ( ) )  TYPE_3 . METHOD_3 ( VAR_3 , null , VAR_1 ) . METHOD_4 ( ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND source == null ) COND source == null ( THEN THEN (  return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ( ) ; )  return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ( ) ; ) THEN THEN ) IF IF (  return source ; )  return source ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ( ) ; } return source ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ( ) ; } return source ; } } (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new TYPE_1 ( ( ( STRING_1 + name ) + STRING_2 ) , VAR_2 ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new TYPE_1 ( ( ( STRING_1 + name ) + STRING_2 ) , VAR_2 ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_2 ( ) ) INIT = VAR_2 . METHOD_2 ( ) ) VAR VAR (  TYPE_2 . assertEquals ( VAR_1 . size ( ) , 1 ) )  TYPE_2 . assertEquals ( VAR_1 . size ( ) , 1 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . get ( 0 ) ) INIT = VAR_1 . get ( 0 ) ) VAR VAR (  TYPE_2 . assertEquals ( cluster . getStoragePoolId ( ) , VAR_3 . METHOD_3 ( ) ) )  TYPE_2 . assertEquals ( cluster . getStoragePoolId ( ) , VAR_3 . METHOD_3 ( ) ) (  TYPE_2 . assertEquals ( VAR_4 . StoragePool , VAR_3 . METHOD_4 ( ) ) )  TYPE_2 . assertEquals ( VAR_4 . StoragePool , VAR_3 . METHOD_4 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME vds ) NAME vds ( INIT = new org.ovirt.engine.core.common.businessentities.VDS ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.VDS ( ) ) VAR VAR (  vds . METHOD_2 ( VAR_1 ) )  vds . METHOD_2 ( VAR_1 ) (  vds . METHOD_3 ( 1 ) )  vds . METHOD_3 ( 1 ) (  TYPE_1 . METHOD_4 ( VAR_2 . METHOD_5 ( vds ) ) )  TYPE_1 . METHOD_4 ( VAR_2 . METHOD_5 ( vds ) ) (  vds . METHOD_3 ( 0 ) )  vds . METHOD_3 ( 0 ) (  TYPE_1 . METHOD_6 ( VAR_2 . METHOD_5 ( vds ) ) )  TYPE_1 . METHOD_6 ( VAR_2 . METHOD_5 ( vds ) ) (  vds . METHOD_2 ( VAR_3 ) )  vds . METHOD_2 ( VAR_3 ) (  TYPE_1 . METHOD_4 ( VAR_2 . METHOD_5 ( vds ) ) )  TYPE_1 . METHOD_4 ( VAR_2 . METHOD_5 ( vds ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME list ) NAME list ( INIT = new java.util.ArrayList < TYPE_1 > ( ) ) INIT = new java.util.ArrayList < TYPE_1 > ( ) ) VAR VAR ( IF IF ( COND ( TYPE_2 . getParameters ( ) . METHOD_2 ( ) . METHOD_3 ( ) ) == ( VAR_1 ) ) COND ( TYPE_2 . getParameters ( ) . METHOD_2 ( ) . METHOD_3 ( ) ) == ( VAR_1 ) ( THEN THEN (  list . add ( new TYPE_3 ( METHOD_4 ( ) , null , VAR_2 , METHOD_5 ( ) . getValue ( ) , METHOD_6 ( ) ) ) )  list . add ( new TYPE_3 ( METHOD_4 ( ) , null , VAR_2 , METHOD_5 ( ) . getValue ( ) , METHOD_6 ( ) ) ) ) THEN THEN ) IF IF (  return list ; )  return list ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<?extendsTYPE_2> ) TYPE TYPE_1<?extendsTYPE_2> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME sender ) NAME sender ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME args ) NAME args ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME model ) NAME model ( INIT = ( ( TYPE_3 ) ( sender ) ) ) INIT = ( ( TYPE_3 ) ( sender ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_4> ) TYPE java.util.List<TYPE_4> ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( java.util.List < TYPE_4 > ) ( model . METHOD_2 ( ) ) ) ) INIT = ( ( java.util.List < TYPE_4 > ) ( model . METHOD_2 ( ) ) ) ) VAR VAR (  METHOD_3 ( VAR_2 ) )  METHOD_3 ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.ArrayList<TYPE_1.Disk> ) TYPE java.util.ArrayList<TYPE_1.Disk> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 . isEmpty ( ) ) COND VAR_1 . isEmpty ( ) ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1.Disk ) TYPE TYPE_1.Disk ( NAME disk ) NAME disk ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  VAR_2 . add ( disk . METHOD_2 ( ) ) )  VAR_2 . add ( disk . METHOD_2 ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return TYPE_2 . METHOD_3 ( VAR_2 , STRING_1 ) ; )  return TYPE_2 . METHOD_3 ( VAR_2 , STRING_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME iface ) NAME iface ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) . get ( iface . getName ( ) ) ) INIT = METHOD_2 ( ) . get ( iface . getName ( ) ) ) VAR VAR ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF (  return ! ( TYPE_1 . equals ( iface . METHOD_3 ( ) , VAR_1 . METHOD_3 ( ) ) ) ; )  return ! ( TYPE_1 . equals ( iface . METHOD_3 ( ) , VAR_1 . METHOD_3 ( ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.network.Network ) TYPE org.ovirt.engine.core.common.businessentities.network.Network ( NAME network ) NAME network ( INIT = METHOD_2 ( VAR_1 ) ) INIT = METHOD_2 ( VAR_1 ) ) VAR VAR (  METHOD_3 ( network ) )  METHOD_3 ( network ) ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ( NAME iface ) NAME iface ( INIT = METHOD_4 ( STRING_1 , network ) ) INIT = METHOD_4 ( STRING_1 , network ) ) VAR VAR (  METHOD_5 ( iface ) )  METHOD_5 ( iface ) (  iface . METHOD_6 ( true ) )  iface . METHOD_6 ( true ) ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME host ) NAME host ( INIT = org.mockito.Mockito . METHOD_7 ( VAR_2 . VDS class ) ) INIT = org.mockito.Mockito . METHOD_7 ( VAR_2 . VDS class ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_8 ( METHOD_9 ( iface ) , host ) ) INIT = METHOD_8 ( METHOD_9 ( iface ) , host ) ) VAR VAR (  METHOD_10 ( VAR_3 , VAR_4 , VAR_1 ) )  METHOD_10 ( VAR_3 , VAR_4 , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( true ) ) INIT = new TYPE_1 ( true ) ) VAR VAR (  TYPE_2 . METHOD_2 ( STRING_1 , VAR_1 . METHOD_3 ( STRING_1 ) . METHOD_4 ( STRING_2 ) ) )  TYPE_2 . METHOD_2 ( STRING_1 , VAR_1 . METHOD_3 ( STRING_1 ) . METHOD_4 ( STRING_2 ) ) (  TYPE_2 . assertEquals ( STRING_3 , STRING_4 , VAR_1 . METHOD_3 ( STRING_5 ) ) )  TYPE_2 . assertEquals ( STRING_3 , STRING_4 , VAR_1 . METHOD_3 ( STRING_5 ) ) (  TYPE_2 . assertEquals ( STRING_6 , STRING_4 , VAR_1 . METHOD_3 ( null ) ) )  TYPE_2 . assertEquals ( STRING_6 , STRING_4 , VAR_1 . METHOD_3 ( null ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ( INIT = ( ( TYPE_1 ) ( getWindow ( ) ) ) ) INIT = ( ( TYPE_1 ) ( getWindow ( ) ) ) ) VAR VAR ( IF IF ( COND ( model . METHOD_2 ( ) ) != null ) COND ( model . METHOD_2 ( ) ) != null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  model . METHOD_3 ( ) )  model . METHOD_3 ( ) (  METHOD_4 ( model ) )  METHOD_4 ( model ) (  new TYPE_2 ( this , model , getEntity ( ) ) . METHOD_5 ( ) )  new TYPE_2 ( this , model , getEntity ( ) ) . METHOD_5 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( ) , null ) ) )  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( ) , null ) ) (  METHOD_3 ( VAR_1 ) )  METHOD_3 ( VAR_1 ) (  TYPE_3 . METHOD_4 ( cmd . validate ( ) ) )  TYPE_3 . METHOD_4 ( cmd . validate ( ) ) (  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( vds ) . getStatus ( ) )  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( vds ) . getStatus ( ) (  TYPE_3 . METHOD_4 ( cmd . validate ( ) ) )  TYPE_3 . METHOD_4 ( cmd . validate ( ) ) (  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( vds ) . getStatus ( ) )  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( vds ) . getStatus ( ) (  TYPE_3 . METHOD_4 ( cmd . validate ( ) ) )  TYPE_3 . METHOD_4 ( cmd . validate ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.Disk ) TYPE TYPE_1.Disk ( NAME model ) NAME model ( INIT = TYPE_2 . getModel ( ) ) INIT = TYPE_2 . getModel ( ) ) VAR VAR (  model . METHOD_2 ( null ) )  model . METHOD_2 ( null ) (  METHOD_3 ( METHOD_4 ( ) ) )  METHOD_3 ( METHOD_4 ( ) ) (  VAR_1 . METHOD_5 ( ) )  VAR_1 . METHOD_5 ( ) ( TRY TRY ( BLOCK BLOCK (  VAR_2 . add ( model ) )  VAR_2 . add ( model ) (  METHOD_6 ( STRING_1 ) )  METHOD_6 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( BLOCK BLOCK (  METHOD_7 ( VAR_3 , STRING_2 , STRING_3 , STRING_4 ) )  METHOD_7 ( VAR_3 , STRING_2 , STRING_3 , STRING_4 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2.VdcActionType ) TYPE TYPE_2.VdcActionType ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3<?extendsTYPE_2.VdcActionParametersBase> ) TYPE TYPE_3<?extendsTYPE_2.VdcActionParametersBase> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object[] ) TYPE java.lang.Object[] ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.compat.Guid> ) TYPE java.util.ArrayList<org.ovirt.engine.core.compat.Guid> ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ( VAR VAR ( TYPE java.util.ArrayList<TYPE_4> ) TYPE java.util.ArrayList<TYPE_4> ( NAME VAR_6 ) NAME VAR_6 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_7 ) NAME VAR_7 ( INIT = ( STRING_1 + ( VAR_8 [ 0 ] ) ) + STRING_2 ) INIT = ( STRING_1 + ( VAR_8 [ 0 ] ) ) + STRING_2 ) VAR VAR (  return METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , true , true , null , VAR_5 , VAR_6 , VAR_7 , true ) ; )  return METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , true , true , null , VAR_5 , VAR_6 , VAR_7 , true ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ( INIT = ( ( org.ovirt.engine.core.common.businessentities.VM ) ( getEntity ( ) ) ) ) INIT = ( ( org.ovirt.engine.core.common.businessentities.VM ) ( getEntity ( ) ) ) ) VAR VAR ( IF IF ( COND vm != null ) COND vm != null ( THEN THEN ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_3 ( VAR_2 , new TYPE_2 ( vm . getId ( ) , VAR_3 ) , null , null ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_3 ( VAR_2 , new TYPE_2 ( vm . getId ( ) , VAR_3 ) , null , null ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME vmId ) NAME vmId ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND source != null ) COND source != null ( THEN THEN (  return ( ( ( java.util.List < TYPE_1 > ) ( source ) ) . size ( ) ) > 0 ; )  return ( ( ( java.util.List < TYPE_1 > ) ( source ) ) . size ( ) ) > 0 ; ) THEN THEN ) IF IF (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return ( ( ( java.util.List < TYPE_1 > ) ( source ) ) . size ( ) ) > 0 ; } return false ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return ( ( ( java.util.List < TYPE_1 > ) ( source ) ) . size ( ) ) > 0 ; } return false ; } } (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.uicommonweb.UICommand ) TYPE org.ovirt.engine.ui.uicommonweb.UICommand ( NAME command ) NAME command ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND TYPE_1 . equals ( command . getName ( ) ) ) COND TYPE_1 . equals ( command . getName ( ) ) ( THEN THEN (  METHOD_2 ( ) )  METHOD_2 ( ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND ( ( TYPE_2 . equals ( command . getName ( ) ) ) || ( TYPE_3 . equals ( command . getName ( ) ) ) ) || ( TYPE_4 . equals ( command . getName ( ) ) ) ) COND ( ( TYPE_2 . equals ( command . getName ( ) ) ) || ( TYPE_3 . equals ( command . getName ( ) ) ) ) || ( TYPE_4 . equals ( command . getName ( ) ) ) ( THEN THEN (  METHOD_3 ( ) )  METHOD_3 ( ) ) THEN THEN ( ELSE ELSE (  super . METHOD_1 ( command ) )  super . METHOD_1 ( command ) ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME type ) NAME type ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 . METHOD_2 ( ) ) != type ) COND ( VAR_1 . METHOD_2 ( ) ) != type ( THEN THEN ( IF IF ( COND ( VAR_1 . METHOD_3 ( ) ) != null ) COND ( VAR_1 . METHOD_3 ( ) ) != null ( THEN THEN (  return TYPE_1 . METHOD_1 ( type , VAR_1 . METHOD_3 ( ) ) ; )  return TYPE_1 . METHOD_1 ( type , VAR_1 . METHOD_3 ( ) ) ; ) THEN THEN ) IF IF (  return null ; )  return null ; ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) COND METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_1 . DiskImage ) ( METHOD_2 ( ) ) ) . METHOD_5 ( ) ) INIT = ( ( TYPE_1 . DiskImage ) ( METHOD_2 ( ) ) ) . METHOD_5 ( ) ) VAR VAR (  return ! ( TYPE_2 . equals ( VAR_1 , METHOD_5 ( ) ) ) ; )  return ! ( TYPE_2 . equals ( VAR_1 , METHOD_5 ( ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN org.ovirt.engine.core.common.businessentities.DiskImage ) RETURN org.ovirt.engine.core.common.businessentities.DiskImage ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return new org.ovirt.engine.core.common.businessentities.DiskImage ( TYPE_1 . instance ( ) . METHOD_2 ( ) , new TYPE_2 ( ) , new TYPE_2 ( ) , INT_1 , STRING_1 , org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , STRING_2 , org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , INT_1 , VAR_2 , VAR_1 , VAR_3 , new TYPE_2 ( ) , STRING_3 , VAR_4 . VM , null , null , VAR_5 , false ) ; )  return new org.ovirt.engine.core.common.businessentities.DiskImage ( TYPE_1 . instance ( ) . METHOD_2 ( ) , new TYPE_2 ( ) , new TYPE_2 ( ) , INT_1 , STRING_1 , org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , STRING_2 , org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , INT_1 , VAR_2 , VAR_1 , VAR_3 , new TYPE_2 ( ) , STRING_3 , VAR_4 . VM , null , null , VAR_5 , false ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( STRING_1 , TYPE_1 . METHOD_3 ( TYPE_2 . getParameters ( ) . METHOD_4 ( ) . METHOD_5 ( ) ) . METHOD_6 ( ) . toString ( ) ) )  METHOD_2 ( STRING_1 , TYPE_1 . METHOD_3 ( TYPE_2 . getParameters ( ) . METHOD_4 ( ) . METHOD_5 ( ) ) . METHOD_6 ( ) . toString ( ) ) (  org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_7 ( ) . METHOD_8 ( TYPE_2 . getParameters ( ) . METHOD_4 ( ) ) )  org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_7 ( ) . METHOD_8 ( TYPE_2 . getParameters ( ) . METHOD_4 ( ) ) (  TYPE_2 . METHOD_9 ( true ) )  TYPE_2 . METHOD_9 ( true ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( true ) ) INIT = METHOD_2 ( true ) ) VAR VAR (  METHOD_3 ( VAR_2 , VAR_3 class , new java.lang.String [ ] { } , new java.lang.Object [ ] { } , TYPE_2 . METHOD_4 ( ) , null ) )  METHOD_3 ( VAR_2 , VAR_3 class , new java.lang.String [ ] { } , new java.lang.Object [ ] { } , TYPE_2 . METHOD_4 ( ) , null ) (  VAR_4 . METHOD_5 ( ) )  VAR_4 . METHOD_5 ( ) (  VAR_5 . METHOD_6 ( VAR_1 ) )  VAR_5 . METHOD_6 ( VAR_1 ) (  METHOD_7 ( ) )  METHOD_7 ( ) (  METHOD_8 ( STRING_1 ) )  METHOD_8 ( STRING_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME sender ) NAME sender ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME args ) NAME args ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 ) INIT = VAR_3 ) VAR VAR ( IF IF ( COND VAR_2 . equals ( STRING_1 ) ) COND VAR_2 . equals ( STRING_1 ) ( THEN THEN (  METHOD_2 ( object ) )  METHOD_2 ( object ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND VAR_2 . equals ( STRING_2 ) ) COND VAR_2 . equals ( STRING_2 ) ( THEN THEN (  VAR_4 . METHOD_3 ( object . METHOD_4 ( ) ) )  VAR_4 . METHOD_3 ( object . METHOD_4 ( ) ) ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ( INIT = new org.ovirt.engine.core.common.businessentities.VM ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.VM ( ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.Disk> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.Disk> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Disk > ( ) ) INIT = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Disk > ( ) ) VAR VAR (  VAR_1 . add ( new org.ovirt.engine.core.common.businessentities.DiskImage ( ) ) )  VAR_1 . add ( new org.ovirt.engine.core.common.businessentities.DiskImage ( ) ) (  TYPE_1 . METHOD_2 ( VAR_2 . METHOD_3 ( vm , null , VAR_1 ) , true , null ) )  TYPE_1 . METHOD_2 ( VAR_2 . METHOD_3 ( vm , null , VAR_1 ) , true , null ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Version ) TYPE org.ovirt.engine.core.compat.Version ( NAME version ) NAME version ( INIT = ( ( org.ovirt.engine.core.compat . Version ) ( returnValue ) ) ) INIT = ( ( org.ovirt.engine.core.compat . Version ) ( returnValue ) ) ) VAR VAR (  TYPE_1 . assertEquals ( version . METHOD_2 ( ) , VAR_1 ) )  TYPE_1 . assertEquals ( version . METHOD_2 ( ) , VAR_1 ) (  TYPE_1 . assertEquals ( version . METHOD_3 ( ) , VAR_2 ) )  TYPE_1 . assertEquals ( version . METHOD_3 ( ) , VAR_2 ) (  TYPE_1 . assertEquals ( version . METHOD_4 ( ) , VAR_3 ) )  TYPE_1 . assertEquals ( version . METHOD_4 ( ) , VAR_3 ) (  TYPE_1 . assertEquals ( version . METHOD_5 ( ) , 0 ) )  TYPE_1 . assertEquals ( version . METHOD_5 ( ) , 0 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( VAR_2 class ) ) INIT = new TYPE_2 ( VAR_2 class ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_3 . METHOD_2 ( VAR_1 . METHOD_3 ( STRING_1 ) ) ) INIT = TYPE_3 . METHOD_2 ( VAR_1 . METHOD_3 ( STRING_1 ) ) ) VAR VAR (  TYPE_4 . METHOD_4 ( STRING_2 , VAR_3 . METHOD_5 ( STRING_2 ) ) )  TYPE_4 . METHOD_4 ( STRING_2 , VAR_3 . METHOD_5 ( STRING_2 ) ) (  TYPE_4 . METHOD_4 ( STRING_3 , VAR_3 . METHOD_5 ( STRING_3 ) ) )  TYPE_4 . METHOD_4 ( STRING_3 , VAR_3 . METHOD_5 ( STRING_3 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME parameters ) NAME parameters ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  super . METHOD_2 ( parameters . METHOD_3 ( ) ) )  super . METHOD_2 ( parameters . METHOD_3 ( ) ) ( IF IF ( COND ( ( METHOD_4 ( ) ) != null ) && ( ( METHOD_4 ( ) . METHOD_5 ( ) ) != null ) ) COND ( ( METHOD_4 ( ) ) != null ) && ( ( METHOD_4 ( ) . METHOD_5 ( ) ) != null ) ( THEN THEN (  METHOD_6 ( METHOD_4 ( ) . METHOD_5 ( ) . getValue ( ) ) )  METHOD_6 ( METHOD_4 ( ) . METHOD_5 ( ) . getValue ( ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return TYPE_1 . METHOD_2 ( vm , TYPE_2 . getReturnValue ( ) . METHOD_3 ( ) , vm . getStoragePoolId ( ) , METHOD_4 ( ) . getValue ( ) , false , true , false , false , true , false , true , VAR_1 . Collections < org.ovirt.engine.core.common.businessentities . Disk > METHOD_5 ( ) ) ; )  return TYPE_1 . METHOD_2 ( vm , TYPE_2 . getReturnValue ( ) . METHOD_3 ( ) , vm . getStoragePoolId ( ) , METHOD_4 ( ) . getValue ( ) , false , true , false , false , true , false , true , VAR_1 . Collections < org.ovirt.engine.core.common.businessentities . Disk > METHOD_5 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ) RETURN org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ( NAME iface ) NAME iface ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.network.Network ) TYPE org.ovirt.engine.core.common.businessentities.network.Network ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return METHOD_2 ( ( ( ( iface . getName ( ) ) + STRING_1 ) + ( VAR_1 . METHOD_3 ( ) ) ) , false , null , null , VAR_2 , VAR_1 . getName ( ) , VAR_1 . METHOD_3 ( ) ) ; )  return METHOD_2 ( ( ( ( iface . getName ( ) ) + STRING_1 ) + ( VAR_1 . METHOD_3 ( ) ) ) , false , null , null , VAR_2 , VAR_1 . getName ( ) , VAR_1 . METHOD_3 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( cmd ) . METHOD_2 ( ) )  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( cmd ) . METHOD_2 ( ) (  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( cmd ) . METHOD_3 ( ) )  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( cmd ) . METHOD_3 ( ) (  org.mockito.Mockito.doReturn ( METHOD_4 ( VAR_3 ) ) . when ( cmd ) . METHOD_5 ( ) )  org.mockito.Mockito.doReturn ( METHOD_4 ( VAR_3 ) ) . when ( cmd ) . METHOD_5 ( ) (  org.mockito.Mockito.doReturn ( METHOD_6 ( ) ) . when ( VAR_4 ) . get ( VAR_5 ) )  org.mockito.Mockito.doReturn ( METHOD_6 ( ) ) . when ( VAR_4 ) . get ( VAR_5 ) (  org.mockito.Mockito.doReturn ( METHOD_7 ( true ) ) . when ( VAR_6 ) . get ( TYPE_1 . any ( VAR_7 . Guid class ) ) )  org.mockito.Mockito.doReturn ( METHOD_7 ( true ) ) . when ( VAR_6 ) . get ( TYPE_1 . any ( VAR_7 . Guid class ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ) TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( VAR_2 ) ) INIT = METHOD_2 ( VAR_2 ) ) VAR VAR (  VAR_1 . METHOD_3 ( VAR_3 ) )  VAR_1 . METHOD_3 ( VAR_3 ) ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ) TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_2 ( VAR_5 ) ) INIT = METHOD_2 ( VAR_5 ) ) VAR VAR (  VAR_4 . METHOD_3 ( VAR_3 ) )  VAR_4 . METHOD_3 ( VAR_3 ) (  METHOD_4 ( VAR_6 , VAR_7 ) )  METHOD_4 ( VAR_6 , VAR_7 ) (  METHOD_5 ( VAR_8 , org.ovirt.engine.core.compat.Guid . METHOD_6 ( ) , VAR_6 ) )  METHOD_5 ( VAR_8 , org.ovirt.engine.core.compat.Guid . METHOD_6 ( ) , VAR_6 ) (  org.mockito.Mockito.doReturn ( false ) . when ( command ) . METHOD_7 ( ) )  org.mockito.Mockito.doReturn ( false ) . when ( command ) . METHOD_7 ( ) (  TYPE_1 . METHOD_8 ( command . validate ( ) ) )  TYPE_1 . METHOD_8 ( command . validate ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.doReturn ( METHOD_2 ( true ) ) . when ( VAR_1 ) . METHOD_3 ( TYPE_1 . METHOD_4 ( VAR_2 ) , TYPE_1 . any ( ) ) )  org.mockito.Mockito.doReturn ( METHOD_2 ( true ) ) . when ( VAR_1 ) . METHOD_3 ( TYPE_1 . METHOD_4 ( VAR_2 ) , TYPE_1 . any ( ) ) (  VAR_1 . METHOD_5 ( ) )  VAR_1 . METHOD_5 ( ) (  org.mockito.Mockito . METHOD_6 ( VAR_3 , org.mockito.Mockito . METHOD_7 ( 2 ) ) . METHOD_8 ( TYPE_1 . METHOD_9 ( ) ) )  org.mockito.Mockito . METHOD_6 ( VAR_3 , org.mockito.Mockito . METHOD_7 ( 2 ) ) . METHOD_8 ( TYPE_1 . METHOD_9 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.Map<java.lang.String,java.lang.String> ) RETURN java.util.Map<java.lang.String,java.lang.String> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.String> ) TYPE java.util.Map<java.lang.String,java.lang.String> ( NAME returnValue ) NAME returnValue ( INIT = new java.util.HashMap < java.lang.String , java.lang.String > ( VAR_2 . METHOD_2 ( ) ) ) INIT = new java.util.HashMap < java.lang.String , java.lang.String > ( VAR_2 . METHOD_2 ( ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2<java.lang.String> ) TYPE TYPE_2<java.lang.String> ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_3 ( VAR_1 ) ) INIT = METHOD_3 ( VAR_1 ) ) VAR VAR ( IF IF ( COND ( VAR_3 != null ) && ( ( VAR_3 . size ( ) ) > 0 ) ) COND ( VAR_3 != null ) && ( ( VAR_3 . size ( ) ) > 0 ) ( THEN THEN (  TYPE_3 . METHOD_4 ( VAR_2 , VAR_3 , returnValue ) )  TYPE_3 . METHOD_4 ( VAR_2 , VAR_3 , returnValue ) ) THEN THEN ) IF IF (  return returnValue ; )  return returnValue ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND source != null ) COND source != null ( THEN THEN (  return source ; )  return source ; ) THEN THEN ) IF IF (  return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ; )  return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return source ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return source ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ; } } (  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_3 , new TYPE_1 ( VAR_1 , VAR_2 ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_3 , new TYPE_1 ( VAR_1 , VAR_2 ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.DiskImage> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.DiskImage> ( NAME list ) NAME list ( INIT = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ) INIT = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ) VAR VAR ( IF IF ( COND source != null ) COND source != null ( THEN THEN ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_1 ) ( source ) ) ) INIT = ( ( TYPE_1 ) ( source ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_1 ( ) ) INIT = VAR_1 . METHOD_1 ( ) ) VAR VAR ( WHILE WHILE ( COND VAR_2 . METHOD_2 ( ) ) COND VAR_2 . METHOD_2 ( ) ( BLOCK BLOCK (  list . add ( ( ( org.ovirt.engine.core.common.businessentities.DiskImage ) ( VAR_2 . METHOD_3 ( ) ) ) ) )  list . add ( ( ( org.ovirt.engine.core.common.businessentities.DiskImage ) ( VAR_2 . METHOD_3 ( ) ) ) ) ) BLOCK BLOCK ) WHILE WHILE ) THEN THEN ) IF IF (  return list ; )  return list ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_2 . METHOD_2 ( ) . METHOD_3 ( VAR_3 ) )  VAR_2 . METHOD_2 ( ) . METHOD_3 ( VAR_3 ) (  model . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) )  model . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) (  VAR_2 . METHOD_6 ( model ) )  VAR_2 . METHOD_6 ( model ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME entity ) NAME entity ( INIT = VAR_1 . getEntity ( ) ) INIT = VAR_1 . getEntity ( ) ) VAR VAR (  model . setEntity ( entity ) )  model . setEntity ( entity ) (  model . METHOD_7 ( ) )  model . METHOD_7 ( ) (  METHOD_8 ( ) )  METHOD_8 ( ) (  METHOD_9 ( false ) )  METHOD_9 ( false ) (  VAR_2 . METHOD_1 ( ) )  VAR_2 . METHOD_1 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME nic ) NAME nic ( INIT = METHOD_2 ( STRING_1 , STRING_2 ) ) INIT = METHOD_2 ( STRING_1 , STRING_2 ) ) VAR VAR (  METHOD_3 ( nic ) )  METHOD_3 ( nic ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_4 ( METHOD_5 ( nic ) ) ) INIT = METHOD_4 ( METHOD_5 ( nic ) ) ) VAR VAR (  METHOD_6 ( VAR_1 ) )  METHOD_6 ( VAR_1 ) (  TYPE_2 . METHOD_7 ( VAR_1 . METHOD_8 ( ) . isEmpty ( ) ) )  TYPE_2 . METHOD_7 ( VAR_1 . METHOD_8 ( ) . isEmpty ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( 1 , null ) . equals ( VAR_1 ) ) )  TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( 1 , null ) . equals ( VAR_1 ) ) (  TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( INT_1 , null ) . equals ( VAR_2 ) ) )  TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( INT_1 , null ) . equals ( VAR_2 ) ) (  TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( INT_2 , null ) . equals ( VAR_2 ) ) )  TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( INT_2 , null ) . equals ( VAR_2 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.List<java.lang.String> ) RETURN java.util.List<java.lang.String> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDS> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDS> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.ArrayList < java.lang.String > ( VAR_1 . size ( ) ) ) INIT = new java.util.ArrayList < java.lang.String > ( VAR_1 . size ( ) ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME vds ) NAME vds ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  VAR_2 . add ( vds . METHOD_2 ( ) ) )  VAR_2 . add ( vds . METHOD_2 ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  METHOD_3 ( METHOD_4 ( ) ) )  METHOD_3 ( METHOD_4 ( ) ) (  VAR_1 . METHOD_5 ( ) )  VAR_1 . METHOD_5 ( ) ( TRY TRY ( BLOCK BLOCK (  VAR_2 . add ( model ) )  VAR_2 . add ( model ) (  METHOD_6 ( STRING_1 ) )  METHOD_6 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( BLOCK BLOCK (  METHOD_7 ( VAR_3 , STRING_2 , STRING_3 , METHOD_8 ( ) ) )  METHOD_7 ( VAR_3 , STRING_2 , STRING_3 , METHOD_8 ( ) ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME storageDomain ) NAME storageDomain ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME list ) NAME list ( INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( storageDomain . METHOD_4 ( ) ) ) INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( storageDomain . METHOD_4 ( ) ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( IN METHOD_5 ( list , storageDomain . METHOD_4 ( ) , STRING_1 ) ) IN METHOD_5 ( list , storageDomain . METHOD_4 ( ) , STRING_1 ) ( BLOCK BLOCK (  org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_6 ( VAR_1 . METHOD_7 ( ) ) )  org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_6 ( VAR_1 . METHOD_7 ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  METHOD_8 ( storageDomain ) )  METHOD_8 ( storageDomain ) (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<java.lang.Boolean,java.util.List<org.ovirt.engine.core.common.businessentities.VM>> ) TYPE java.util.Map<java.lang.Boolean,java.util.List<org.ovirt.engine.core.common.businessentities.VM>> ( NAME result ) NAME result ( INIT = dao . METHOD_2 ( VAR_1 , true ) ) INIT = dao . METHOD_2 ( VAR_1 , true ) ) VAR VAR (  TYPE_1 . METHOD_3 ( result ) )  TYPE_1 . METHOD_3 ( result ) (  TYPE_1 . assertEquals ( STRING_1 , 1 , result . get ( false ) . size ( ) ) )  TYPE_1 . assertEquals ( STRING_1 , 1 , result . get ( false ) . size ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( new TYPE_1 . DiskImage ( ) ) )  METHOD_2 ( new TYPE_1 . DiskImage ( ) ) (  METHOD_3 ( ) )  METHOD_3 ( ) (  METHOD_4 ( ) )  METHOD_4 ( ) (  METHOD_5 ( false ) )  METHOD_5 ( false ) (  METHOD_6 ( ) )  METHOD_6 ( ) (  METHOD_7 ( VAR_1 ) )  METHOD_7 ( VAR_1 ) (  org.mockito.Mockito.when ( VAR_2 . METHOD_8 ( TYPE_2 . any ( ) ) ) . thenReturn ( new TYPE_3 . ValidationResult ( VAR_3 ) ) )  org.mockito.Mockito.when ( VAR_2 . METHOD_8 ( TYPE_2 . any ( ) ) ) . thenReturn ( new TYPE_3 . ValidationResult ( VAR_3 ) ) (  TYPE_4 . METHOD_9 ( command , VAR_4 ) )  TYPE_4 . METHOD_9 ( command , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ( INIT = ( ( TYPE_1 ) ( getWindow ( ) ) ) ) INIT = ( ( TYPE_1 ) ( getWindow ( ) ) ) ) VAR VAR (  model . METHOD_2 ( null ) )  model . METHOD_2 ( null ) ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_5 ) NAME METHOD_5 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  model . METHOD_6 ( ) )  model . METHOD_6 ( ) (  METHOD_7 ( null ) )  METHOD_7 ( null ) ) BLOCK BLOCK ) METHOD METHOD (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_3 ( VAR_1 , METHOD_4 ( false ) , new TYPE_2 ( ) { public void METHOD_5 ( TYPE_3 result ) { model . METHOD_6 ( ) ; METHOD_7 ( null ) ; } } , this ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_3 ( VAR_1 , METHOD_4 ( false ) , new TYPE_2 ( ) { public void METHOD_5 ( TYPE_3 result ) { model . METHOD_6 ( ) ; METHOD_7 ( null ) ; } } , this ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_3 . METHOD_1 ( VAR_1 ) )  VAR_3 . METHOD_1 ( VAR_1 ) (  this . VAR_1 = VAR_1 )  this . VAR_1 = VAR_1 ( IF IF ( COND VAR_1 . METHOD_2 ( ) ) COND VAR_1 . METHOD_2 ( ) ( THEN THEN (  METHOD_3 ( false ) )  METHOD_3 ( false ) ) THEN THEN ( ELSE ELSE (  METHOD_4 ( VAR_2 , VAR_1 . METHOD_5 ( ) . METHOD_6 ( ) ) )  METHOD_4 ( VAR_2 , VAR_1 . METHOD_5 ( ) . METHOD_6 ( ) ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME parameters ) NAME parameters ( INIT = new TYPE_2 ( TYPE_3 . getParameters ( ) . METHOD_2 ( ) , VAR_1 . getId ( ) ) ) INIT = new TYPE_2 ( TYPE_3 . getParameters ( ) . METHOD_2 ( ) , VAR_1 . getId ( ) ) ) VAR VAR (  parameters . METHOD_3 ( false ) )  parameters . METHOD_3 ( false ) (  METHOD_4 ( TYPE_4 . getInstance ( ) . METHOD_5 ( VAR_2 , parameters ) . getSucceeded ( ) ) )  METHOD_4 ( TYPE_4 . getInstance ( ) . METHOD_5 ( VAR_2 , parameters ) . getSucceeded ( ) ) (  TYPE_3 . METHOD_6 ( ) )  TYPE_3 . METHOD_6 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME quota ) NAME quota ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  quota . METHOD_3 ( METHOD_4 ( ) ) )  quota . METHOD_3 ( METHOD_4 ( ) ) (  METHOD_5 ( quota ) )  METHOD_5 ( quota ) (  VAR_1 . METHOD_6 ( ) )  VAR_1 . METHOD_6 ( ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . list ( ) ) INIT = VAR_3 . list ( ) ) VAR VAR (  METHOD_7 ( VAR_2 , 1 ) )  METHOD_7 ( VAR_2 , 1 ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_2 . METHOD_8 ( ) . get ( 0 ) ) INIT = VAR_2 . METHOD_8 ( ) . get ( 0 ) ) VAR VAR (  assertEquals ( INT_1 , VAR_4 . METHOD_9 ( ) . METHOD_10 ( ) ) )  assertEquals ( INT_1 , VAR_4 . METHOD_9 ( ) . METHOD_10 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) RETURN org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VdsNetworkInterface> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VdsNetworkInterface> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME i ) NAME i ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( IF IF ( COND ( ( i . METHOD_2 ( ) ) != null ) && ( i . METHOD_2 ( ) ) ) COND ( ( i . METHOD_2 ( ) ) != null ) && ( i . METHOD_2 ( ) ) ( THEN THEN (  return i ; )  return i ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ! ( getParameters ( ) . METHOD_2 ( ) ) ) COND ! ( getParameters ( ) . METHOD_2 ( ) ) ( THEN THEN (  METHOD_3 ( VAR_1 , METHOD_4 ( ) ) )  METHOD_3 ( VAR_1 , METHOD_4 ( ) ) ) THEN THEN ( ELSE ELSE (  METHOD_3 ( VAR_1 , null ) )  METHOD_3 ( VAR_1 , null ) (  METHOD_4 ( ) . METHOD_5 ( VAR_1 . METHOD_6 ( ) , VAR_2 ) )  METHOD_4 ( ) . METHOD_5 ( VAR_1 . METHOD_6 ( ) , VAR_2 ) ) ELSE ELSE ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  org.mockito.Mockito.when ( METHOD_2 ( ) . METHOD_3 ( ) ) . thenReturn ( VAR_2 ) )  org.mockito.Mockito.when ( METHOD_2 ( ) . METHOD_3 ( ) ) . thenReturn ( VAR_2 ) (  org.mockito.Mockito.when ( METHOD_2 ( ) . getId ( ) ) . thenReturn ( VAR_3 ) )  org.mockito.Mockito.when ( METHOD_2 ( ) . getId ( ) ) . thenReturn ( VAR_3 ) (  METHOD_4 ( VAR_2 , VAR_1 ) )  METHOD_4 ( VAR_2 , VAR_1 ) (  METHOD_5 ( ) )  METHOD_5 ( ) (  METHOD_6 ( ) )  METHOD_6 ( ) (  METHOD_7 ( ) )  METHOD_7 ( ) (  METHOD_8 ( ) . METHOD_9 ( true ) )  METHOD_8 ( ) . METHOD_9 ( true ) (  METHOD_8 ( ) . METHOD_10 ( ) )  METHOD_8 ( ) . METHOD_10 ( ) (  TYPE_1 . METHOD_11 ( METHOD_8 ( ) , true ) )  TYPE_1 . METHOD_11 ( METHOD_8 ( ) , true ) (  TYPE_2 . METHOD_12 ( METHOD_8 ( ) ) )  TYPE_2 . METHOD_12 ( METHOD_8 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME storage ) NAME storage ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( storage . METHOD_2 ( ) ) == null ) || ( ( storage . METHOD_2 ( ) ) < 1 ) ) COND ( ( storage . METHOD_2 ( ) ) == null ) || ( ( storage . METHOD_2 ( ) ) < 1 ) ( THEN THEN (  return STRING_1 ; )  return STRING_1 ; ) THEN THEN ) IF IF (  return ( storage . METHOD_2 ( ) ) + STRING_2 ; )  return ( storage . METHOD_2 ( ) ) + STRING_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_2 ) NAME METHOD_2 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME sender ) NAME sender ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME args ) NAME args ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( METHOD_3 ( VAR_3 . getSelectedItem ( ) , model ) ) ) COND ! ( METHOD_3 ( VAR_3 . getSelectedItem ( ) , model ) ) ( THEN THEN (  METHOD_4 ( ) . METHOD_5 ( model . METHOD_6 ( ) ) )  METHOD_4 ( ) . METHOD_5 ( model . METHOD_6 ( ) ) ) THEN THEN ( ELSE ELSE (  METHOD_4 ( ) . METHOD_7 ( ) )  METHOD_4 ( ) . METHOD_7 ( ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD (  VAR_1 = new TYPE_1 ( ) { public void METHOD_2 ( TYPE_2 VAR_2 , java.lang.Object sender , TYPE_3 args ) { if ( ! ( METHOD_3 ( VAR_3 . getSelectedItem ( ) , model ) ) ) { METHOD_4 ( ) . METHOD_5 ( model . METHOD_6 ( ) ) ; } else { METHOD_4 ( ) . METHOD_7 ( ) ; } } } )  VAR_1 = new TYPE_1 ( ) { public void METHOD_2 ( TYPE_2 VAR_2 , java.lang.Object sender , TYPE_3 args ) { if ( ! ( METHOD_3 ( VAR_3 . getSelectedItem ( ) , model ) ) ) { METHOD_4 ( ) . METHOD_5 ( model . METHOD_6 ( ) ) ; } else { METHOD_4 ( ) . METHOD_7 ( ) ; } } } (  VAR_3 . METHOD_8 ( ) . METHOD_9 ( VAR_1 ) )  VAR_3 . METHOD_8 ( ) . METHOD_9 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return METHOD_2 ( ) . METHOD_3 ( STRING_1 , VAR_2 , METHOD_4 ( ) . addValue ( STRING_2 , VAR_1 . METHOD_5 ( ) ) . addValue ( STRING_3 , VAR_1 . METHOD_6 ( ) ) . addValue ( STRING_4 , VAR_1 . METHOD_7 ( ) ) . addValue ( STRING_5 , VAR_1 . METHOD_8 ( ) ) . addValue ( STRING_6 , VAR_1 . METHOD_9 ( ) ) . addValue ( STRING_7 , TYPE_2 . METHOD_10 ( VAR_1 . METHOD_11 ( ) ) ) ) ; )  return METHOD_2 ( ) . METHOD_3 ( STRING_1 , VAR_2 , METHOD_4 ( ) . addValue ( STRING_2 , VAR_1 . METHOD_5 ( ) ) . addValue ( STRING_3 , VAR_1 . METHOD_6 ( ) ) . addValue ( STRING_4 , VAR_1 . METHOD_7 ( ) ) . addValue ( STRING_5 , VAR_1 . METHOD_8 ( ) ) . addValue ( STRING_6 , VAR_1 . METHOD_9 ( ) ) . addValue ( STRING_7 , TYPE_2 . METHOD_10 ( VAR_1 . METHOD_11 ( ) ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VM> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VM> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 != null ) && ( ! ( VAR_1 . isEmpty ( ) ) ) ) COND ( VAR_1 != null ) && ( ! ( VAR_1 . isEmpty ( ) ) ) ( THEN THEN (  VAR_2 = new java.util.HashMap < org.ovirt.engine.core.compat.Guid , java.lang.String > ( ) )  VAR_2 = new java.util.HashMap < org.ovirt.engine.core.compat.Guid , java.lang.String > ( ) ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  VAR_2 . put ( vm . getId ( ) , TYPE_1 . name ( ) ) )  VAR_2 . put ( vm . getId ( ) , TYPE_1 . name ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_6 ) NAME VAR_6 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND METHOD_2 ( VAR_2 , VAR_5 ) ) COND METHOD_2 ( VAR_2 , VAR_5 ) ( THEN THEN ( VAR VAR ( TYPE TYPE_4.DiskImage ) TYPE TYPE_4.DiskImage ( NAME VAR_7 ) NAME VAR_7 ( INIT = METHOD_3 ( VAR_3 , VAR_4 , VAR_6 , VAR_1 . getId ( ) ) ) INIT = METHOD_3 ( VAR_3 , VAR_4 , VAR_6 , VAR_1 . getId ( ) ) ) VAR VAR (  return TYPE_5 . METHOD_4 ( VAR_1 . METHOD_5 ( ) , VAR_7 . METHOD_6 ( ) ) ; )  return TYPE_5 . METHOD_4 ( VAR_1 . METHOD_5 ( ) , VAR_7 . METHOD_6 ( ) ) ; ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( source ) ) : null ; )  return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( source ) ) : null ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( source ) ) : null ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( source ) ) : null ; } } ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_3 . METHOD_2 ( VAR_2 ) )  VAR_3 . METHOD_2 ( VAR_2 ) ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN (  VAR_3 . METHOD_3 ( VAR_1 ) )  VAR_3 . METHOD_3 ( VAR_1 ) ) THEN THEN ) IF IF (  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_4 , VAR_3 , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_4 , VAR_3 , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME result ) NAME result ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_3 . METHOD_2 ( VAR_1 ) ) INIT = TYPE_3 . METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK (  result . add ( TYPE_1 . METHOD_3 ( VAR_3 . METHOD_4 ( ) ) ) )  result . add ( TYPE_1 . METHOD_3 ( VAR_3 . METHOD_4 ( ) ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Integer ) TYPE java.lang.Integer ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_1 ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) , VAR_4 . VDS ) ) INIT = new TYPE_1 ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) , VAR_4 . VDS ) ) VAR VAR ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN (  VAR_3 . METHOD_2 ( VAR_2 ) )  VAR_3 . METHOD_2 ( VAR_2 ) ) THEN THEN ) IF IF (  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_5 , VAR_3 , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_5 , VAR_3 , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.ui.uicommonweb.models.EntityModel<TYPE_1>> ) TYPE java.util.List<org.ovirt.engine.ui.uicommonweb.models.EntityModel<TYPE_1>> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.ui.uicommonweb.models.EntityModel<TYPE_1> ) TYPE org.ovirt.engine.ui.uicommonweb.models.EntityModel<TYPE_1> ( NAME VAR_2 ) NAME VAR_2 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_2 . getEntity ( ) . METHOD_2 ( ) . METHOD_3 ( ) ) == ( VAR_3 ) ) COND ( VAR_2 . getEntity ( ) . METHOD_2 ( ) . METHOD_3 ( ) ) == ( VAR_3 ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME version ) NAME version ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME METHOD_2 ) NAME METHOD_2 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source != null ? ( ( java.lang.Integer ) ( source ) ) . METHOD_3 ( ) : 1 ; )  return source != null ? ( ( java.lang.Integer ) ( source ) ) . METHOD_3 ( ) : 1 ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object METHOD_2 ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . METHOD_3 ( ) : 1 ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object METHOD_2 ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . METHOD_3 ( ) : 1 ; } } ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME tempVar ) NAME tempVar ( INIT = new TYPE_1 ( VAR_1 ) ) INIT = new TYPE_1 ( VAR_1 ) ) VAR VAR (  tempVar . METHOD_4 ( version ) )  tempVar . METHOD_4 ( version ) (  METHOD_5 ( tempVar , aQuery ) )  METHOD_5 ( tempVar , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME event ) NAME event ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  super . METHOD_1 ( event ) )  super . METHOD_1 ( event ) ( IF IF ( COND ( ( VAR_1 ) != null ) && ( ( ( event . METHOD_2 ( ) ) == ( VAR_2 ) ) || ( ( event . METHOD_2 ( ) ) == ( VAR_3 ) ) ) ) COND ( ( VAR_1 ) != null ) && ( ( ( event . METHOD_2 ( ) ) == ( VAR_2 ) ) || ( ( event . METHOD_2 ( ) ) == ( VAR_3 ) ) ) ( THEN THEN (  VAR_1 . METHOD_3 ( event . METHOD_4 ( ) ) )  VAR_1 . METHOD_3 ( event . METHOD_4 ( ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . METHOD_3 ( ( ( TYPE_3 ) ( returnValue ) ) ) )  VAR_1 . METHOD_3 ( ( ( TYPE_3 ) ( returnValue ) ) ) ) BLOCK BLOCK ) METHOD METHOD (  TYPE_2 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 . METHOD_3 ( ( ( TYPE_3 ) ( returnValue ) ) ) ; } } ) ) )  TYPE_2 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 . METHOD_3 ( ( ( TYPE_3 ) ( returnValue ) ) ) ; } } ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) (  org.mockito.Mockito . METHOD_2 ( ) . when ( cmd ) . METHOD_3 ( ) )  org.mockito.Mockito . METHOD_2 ( ) . when ( cmd ) . METHOD_3 ( ) (  org.mockito.Mockito.doReturn ( true ) . when ( cmd ) . METHOD_4 ( ) )  org.mockito.Mockito.doReturn ( true ) . when ( cmd ) . METHOD_4 ( ) (  org.mockito.Mockito.doReturn ( true ) . when ( cmd ) . METHOD_5 ( TYPE_1 . any ( VAR_1 class ) , TYPE_1 . METHOD_6 ( ) ) )  org.mockito.Mockito.doReturn ( true ) . when ( cmd ) . METHOD_5 ( TYPE_1 . any ( VAR_1 class ) , TYPE_1 . METHOD_6 ( ) ) (  METHOD_7 ( ) )  METHOD_7 ( ) (  METHOD_8 ( ) )  METHOD_8 ( ) (  METHOD_9 ( ) )  METHOD_9 ( ) (  cmd . METHOD_10 ( ) )  cmd . METHOD_10 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  command = METHOD_2 ( ) )  command = METHOD_2 ( ) (  org.mockito.Mockito . METHOD_3 ( ) . when ( command ) . METHOD_4 ( ) )  org.mockito.Mockito . METHOD_3 ( ) . when ( command ) . METHOD_4 ( ) (  org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_5 ( TYPE_1 . any ( VAR_1 . Guid class ) ) )  org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_5 ( TYPE_1 . any ( VAR_1 . Guid class ) ) (  org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_6 ( ) )  org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_6 ( ) (  org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_7 ( ) )  org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_7 ( ) (  org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_8 ( ) )  org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_8 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1.ValidationResult ) RETURN TYPE_1.ValidationResult ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  return TYPE_2 . METHOD_2 ( VAR_1 ) . when ( ( ( ( ( METHOD_3 ( ) . METHOD_4 ( ) ) != ( VAR_2 . METHOD_4 ( ) ) ) && ( ( VAR_2 . getStatus ( ) ) != ( VAR_3 ) ) ) && ( ( VAR_2 . getStatus ( ) ) != ( VAR_4 ) ) ) ) ; )  return TYPE_2 . METHOD_2 ( VAR_1 ) . when ( ( ( ( ( METHOD_3 ( ) . METHOD_4 ( ) ) != ( VAR_2 . METHOD_4 ( ) ) ) && ( ( VAR_2 . getStatus ( ) ) != ( VAR_3 ) ) ) && ( ( VAR_2 . getStatus ( ) ) != ( VAR_4 ) ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_1<TYPE_2.ValidationResult> ) TYPE TYPE_1<TYPE_2.ValidationResult> ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ( NAME VAR_5 ) NAME VAR_5 ( INIT = METHOD_2 ( VAR_4 , true ) ) INIT = METHOD_2 ( VAR_4 , true ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> ( NAME VAR_6 ) NAME VAR_6 ( INIT = METHOD_3 ( VAR_4 , VAR_1 ) ) INIT = METHOD_3 ( VAR_4 , VAR_1 ) ) VAR VAR (  TYPE_3 . METHOD_4 ( VAR_2 , new TYPE_4 ( VAR_5 ) . METHOD_5 ( VAR_6 ) , VAR_3 ) )  TYPE_3 . METHOD_4 ( VAR_2 , new TYPE_4 ( VAR_5 ) . METHOD_5 ( VAR_6 ) , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<?extendsTYPE_2> ) TYPE TYPE_1<?extendsTYPE_2> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME sender ) NAME sender ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME args ) NAME args ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( java.lang.Boolean ) ( ( ( org.ovirt.engine.ui.uicommonweb.models.EntityModel ) ( sender ) ) . getEntity ( ) ) ) ) INIT = ( ( java.lang.Boolean ) ( ( ( org.ovirt.engine.ui.uicommonweb.models.EntityModel ) ( sender ) ) . getEntity ( ) ) ) ) VAR VAR (  VAR_3 . METHOD_2 ( ) . METHOD_3 ( ( ! VAR_2 ) ) )  VAR_3 . METHOD_2 ( ) . METHOD_3 ( ( ! VAR_2 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( TYPE_1 . METHOD_2 ( ) ) != null ) COND ( TYPE_1 . METHOD_2 ( ) ) != null ( THEN THEN (  TYPE_2 . METHOD_3 ( TYPE_1 . METHOD_2 ( ) ) )  TYPE_2 . METHOD_3 ( TYPE_1 . METHOD_2 ( ) ) (  METHOD_4 ( ) )  METHOD_4 ( ) (  TYPE_3 . METHOD_5 ( TYPE_1 . METHOD_6 ( ) ) )  TYPE_3 . METHOD_5 ( TYPE_1 . METHOD_6 ( ) ) ) THEN THEN ( ELSE ELSE (  TYPE_1 . METHOD_7 ( false ) )  TYPE_1 . METHOD_7 ( false ) (  log . METHOD_8 ( STRING_1 ) )  log . METHOD_8 ( STRING_1 ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ; )  return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ; } } ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( STRING_1 , VAR_2 . StorageDomain ) ) INIT = new TYPE_1 ( STRING_1 , VAR_2 . StorageDomain ) ) VAR VAR (  VAR_1 . METHOD_2 ( INT_1 ) )  VAR_1 . METHOD_2 ( INT_1 ) (  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_3 , VAR_1 , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_3 , VAR_1 , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.util.Map<java.lang.String,org.ovirt.engine.core.common.businessentities.network.Network> ) RETURN java.util.Map<java.lang.String,org.ovirt.engine.core.common.businessentities.network.Network> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_1 . isEmpty ( ) ) ) COND ! ( VAR_1 . isEmpty ( ) ) ( THEN THEN ( VAR VAR ( TYPE java.util.Map<java.lang.String,org.ovirt.engine.core.common.businessentities.network.Network> ) TYPE java.util.Map<java.lang.String,org.ovirt.engine.core.common.businessentities.network.Network> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.HashMap < java.lang.String , org.ovirt.engine.core.common.businessentities.network.Network > ( ) ) INIT = new java.util.HashMap < java.lang.String , org.ovirt.engine.core.common.businessentities.network.Network > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.network.Network ) TYPE org.ovirt.engine.core.common.businessentities.network.Network ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  VAR_2 . put ( VAR_3 . METHOD_2 ( ) , VAR_3 ) )  VAR_2 . put ( VAR_3 . METHOD_2 ( ) , VAR_3 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_2 ; )  return VAR_2 ; ) THEN THEN ( ELSE ELSE (  return TYPE_1 . METHOD_3 ( ) ; )  return TYPE_1 . METHOD_3 ( ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  org.mockito.Mockito . METHOD_2 ( frontend , org.mockito.Mockito . METHOD_3 ( VAR_1 ) ) . METHOD_4 ( TYPE_2 . METHOD_5 ( VAR_3 ) , TYPE_2 . any ( VAR_4 class ) , VAR_5 . METHOD_6 ( ) , TYPE_2 . METHOD_5 ( VAR_2 ) ) )  org.mockito.Mockito . METHOD_2 ( frontend , org.mockito.Mockito . METHOD_3 ( VAR_1 ) ) . METHOD_4 ( TYPE_2 . METHOD_5 ( VAR_3 ) , TYPE_2 . any ( VAR_4 class ) , VAR_5 . METHOD_6 ( ) , TYPE_2 . METHOD_5 ( VAR_2 ) ) ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_6 ) NAME VAR_6 ( INIT = VAR_5 . METHOD_7 ( ) ) INIT = VAR_5 . METHOD_7 ( ) ) VAR VAR (  return VAR_6 ; )  return VAR_6 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( VAR_2 . Guid class ) ) ) . thenReturn ( TYPE_2 . METHOD_2 ( ) ) )  org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( VAR_2 . Guid class ) ) ) . thenReturn ( TYPE_2 . METHOD_2 ( ) ) (  TYPE_3 . METHOD_3 ( STRING_1 , command . METHOD_4 ( ) ) )  TYPE_3 . METHOD_3 ( STRING_1 , command . METHOD_4 ( ) ) (  TYPE_3 . METHOD_5 ( STRING_2 , command . getReturnValue ( ) . METHOD_6 ( ) . METHOD_7 ( TYPE_4 . toString ( ) ) ) )  TYPE_3 . METHOD_5 ( STRING_2 , command . getReturnValue ( ) . METHOD_6 ( ) . METHOD_7 ( TYPE_4 . toString ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME vm ) NAME vm ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_2 . METHOD_2 ( new TYPE_3 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , vm . getId ( ) ) , VAR_1 , vm . METHOD_4 ( ) . METHOD_5 ( ) , TYPE_2 . METHOD_6 ( vm . METHOD_7 ( ) , vm . METHOD_8 ( ) ) , true , true , null ) )  TYPE_2 . METHOD_2 ( new TYPE_3 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , vm . getId ( ) ) , VAR_1 , vm . METHOD_4 ( ) . METHOD_5 ( ) , TYPE_2 . METHOD_6 ( vm . METHOD_7 ( ) , vm . METHOD_8 ( ) ) , true , true , null ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StoragePool ) TYPE org.ovirt.engine.core.common.businessentities.StoragePool ( NAME pool ) NAME pool ( INIT = new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ) VAR VAR (  pool . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) )  pool . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) (  pool . METHOD_3 ( VAR_1 ) )  pool . METHOD_3 ( VAR_1 ) (  org.mockito.Mockito.when ( VAR_2 . get ( TYPE_1 . any ( VAR_3 . Guid class ) ) ) . thenReturn ( pool ) )  org.mockito.Mockito.when ( VAR_2 . get ( TYPE_1 . any ( VAR_3 . Guid class ) ) ) . thenReturn ( pool ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME returnValue ) NAME returnValue ( INIT = ( ( TYPE_1 . VdcQueryReturnValue ) ( result ) ) . getReturnValue ( ) ) INIT = ( ( TYPE_1 . VdcQueryReturnValue ) ( result ) ) . getReturnValue ( ) ) VAR VAR ( IF IF ( COND returnValue ) COND returnValue ( THEN THEN (  command . METHOD_1 ( ) )  command . METHOD_1 ( ) ) THEN THEN ( ELSE ELSE (  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_1 , VAR_2 , VAR_3 ) )  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_1 , VAR_2 , VAR_3 ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME object ) NAME object ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  super . METHOD_1 ( object ) )  super . METHOD_1 ( object ) (  VAR_1 . METHOD_1 ( object . METHOD_2 ( ) ) )  VAR_1 . METHOD_1 ( object . METHOD_2 ( ) ) (  VAR_2 . METHOD_3 ( true ) )  VAR_2 . METHOD_3 ( true ) (  VAR_3 . METHOD_3 ( false ) )  VAR_3 . METHOD_3 ( false ) (  VAR_1 . METHOD_3 ( true ) )  VAR_1 . METHOD_3 ( true ) (  VAR_4 . METHOD_3 ( false ) )  VAR_4 . METHOD_3 ( false ) (  VAR_5 . METHOD_3 ( false ) )  VAR_5 . METHOD_3 ( false ) (  VAR_6 . METHOD_4 ( VAR_7 ) )  VAR_6 . METHOD_4 ( VAR_7 ) (  VAR_6 . METHOD_5 ( VAR_8 , INT_1 ) )  VAR_6 . METHOD_5 ( VAR_8 , INT_1 ) (  METHOD_6 ( ) . METHOD_7 ( INT_2 , INT_2 ) )  METHOD_6 ( ) . METHOD_7 ( INT_2 , INT_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ! ( super . METHOD_1 ( ) ) ) COND ! ( super . METHOD_1 ( ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( IF IF ( COND ! ( TYPE_1 . METHOD_2 ( TYPE_2 . getVdsGroup ( ) . METHOD_3 ( ) ) ) ) COND ! ( TYPE_1 . METHOD_2 ( TYPE_2 . getVdsGroup ( ) . METHOD_3 ( ) ) ) ( THEN THEN (  METHOD_4 ( VAR_1 ) )  METHOD_4 ( VAR_1 ) ) THEN THEN ) IF IF (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ( INIT = ( ( TYPE_1 ) ( target ) ) ) INIT = ( ( TYPE_1 ) ( target ) ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VmTemplate ) TYPE org.ovirt.engine.core.common.businessentities.VmTemplate ( NAME template ) NAME template ( INIT = ( ( org.ovirt.engine.core.common.businessentities.VmTemplate ) ( returnValue ) ) ) INIT = ( ( org.ovirt.engine.core.common.businessentities.VmTemplate ) ( returnValue ) ) ) VAR VAR (  model . METHOD_2 ( ) . setItems ( new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmTemplate > ( TYPE_2 . METHOD_3 ( new org.ovirt.engine.core.common.businessentities.VmTemplate [ ] { template } ) ) ) )  model . METHOD_2 ( ) . setItems ( new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmTemplate > ( TYPE_2 . METHOD_3 ( new org.ovirt.engine.core.common.businessentities.VmTemplate [ ] { template } ) ) ) (  model . METHOD_2 ( ) . setSelectedItem ( template ) )  model . METHOD_2 ( ) . setSelectedItem ( template ) (  model . METHOD_2 ( ) . setIsChangable ( false ) )  model . METHOD_2 ( ) . setIsChangable ( false ) (  METHOD_4 ( ) )  METHOD_4 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ! ( validate ( TYPE_1 . METHOD_2 ( TYPE_2 . getParameters ( ) . METHOD_3 ( ) , TYPE_2 . getParameters ( ) . METHOD_4 ( ) , TYPE_2 . getParameters ( ) . METHOD_5 ( ) , TYPE_2 . METHOD_6 ( ) , TYPE_2 . METHOD_7 ( ) . METHOD_8 ( ) ) ) ) ) COND ! ( validate ( TYPE_1 . METHOD_2 ( TYPE_2 . getParameters ( ) . METHOD_3 ( ) , TYPE_2 . getParameters ( ) . METHOD_4 ( ) , TYPE_2 . getParameters ( ) . METHOD_5 ( ) , TYPE_2 . METHOD_6 ( ) , TYPE_2 . METHOD_7 ( ) . METHOD_8 ( ) ) ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  VAR_4 . error ( STRING_1 ) )  VAR_4 . error ( STRING_1 ) (  return false ; )  return false ; ) THEN THEN ) IF IF ( IF IF ( COND ! ( METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ) ) COND ! ( METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( TYPE_2 . getParameters ( ) . METHOD_3 ( ) ) ) INIT = TYPE_1 . METHOD_2 ( TYPE_2 . getParameters ( ) . METHOD_3 ( ) ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 < java.lang.String > METHOD_4 ( VAR_4 ) ) INIT = VAR_3 < java.lang.String > METHOD_4 ( VAR_4 ) ) VAR VAR (  TYPE_3 . METHOD_5 ( VAR_1 , new TYPE_4 ( VAR_2 ) ) )  TYPE_3 . METHOD_5 ( VAR_1 , new TYPE_4 ( VAR_2 ) ) (  TYPE_2 . METHOD_6 ( ) . METHOD_7 ( VAR_1 ) )  TYPE_2 . METHOD_6 ( ) . METHOD_7 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 = cmd . getParameters ( ) . METHOD_2 ( ) )  VAR_1 = cmd . getParameters ( ) . METHOD_2 ( ) (  cmd . METHOD_3 ( ) )  cmd . METHOD_3 ( ) (  org.mockito.Mockito.when ( VAR_2 . get ( VAR_1 . getId ( ) ) ) . thenReturn ( VAR_1 ) )  org.mockito.Mockito.when ( VAR_2 . get ( VAR_1 . getId ( ) ) ) . thenReturn ( VAR_1 ) (  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( cmd ) . METHOD_4 ( ) )  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( cmd ) . METHOD_4 ( ) (  org.mockito.Mockito.when ( VAR_3 . METHOD_5 ( TYPE_1 . any ( VAR_4 . Guid class ) ) ) . thenReturn ( TYPE_2 . METHOD_6 ( ) ) )  org.mockito.Mockito.when ( VAR_3 . METHOD_5 ( TYPE_1 . any ( VAR_4 . Guid class ) ) ) . thenReturn ( TYPE_2 . METHOD_6 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME equals ) NAME equals ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( this ) == VAR_1 ) COND ( this ) == VAR_1 ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ( IF IF ( COND ! ( VAR_1 instanceof TYPE_1 ) ) COND ! ( VAR_1 instanceof TYPE_1 ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_1 ) ( VAR_1 ) ) ) INIT = ( ( TYPE_1 ) ( VAR_1 ) ) ) VAR VAR (  return ( TYPE_2 . equals ( METHOD_1 ( ) , VAR_2 . METHOD_1 ( ) ) ) && ( TYPE_2 . equals ( METHOD_2 ( ) , VAR_2 . METHOD_2 ( ) ) ) ; )  return ( TYPE_2 . equals ( METHOD_1 ( ) , VAR_2 . METHOD_1 ( ) ) ) && ( TYPE_2 . equals ( METHOD_2 ( ) , VAR_2 . METHOD_2 ( ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1.DiskImage ) RETURN TYPE_1.DiskImage ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.DiskImage ) TYPE TYPE_1.DiskImage ( NAME image ) NAME image ( INIT = TYPE_4 . METHOD_2 ( vm , VAR_1 , VAR_2 ) ) INIT = TYPE_4 . METHOD_2 ( vm , VAR_1 , VAR_2 ) ) VAR VAR (  image . METHOD_3 ( TYPE_4 . METHOD_4 ( vm . getName ( ) ) ) )  image . METHOD_3 ( TYPE_4 . METHOD_4 ( vm . getName ( ) ) ) (  image . METHOD_5 ( VAR_3 ) )  image . METHOD_5 ( VAR_3 ) (  return image ; )  return image ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( java.util.List < TYPE_1 > ) ( returnValue ) ) ) INIT = ( ( java.util.List < TYPE_1 > ) ( returnValue ) ) ) VAR VAR (  VAR_1 = ( VAR_1 != null ) ? VAR_1 : new java.util.ArrayList < TYPE_1 > ( ) )  VAR_1 = ( VAR_1 != null ) ? VAR_1 : new java.util.ArrayList < TYPE_1 > ( ) (  METHOD_1 ( ) . setItems ( VAR_1 ) )  METHOD_1 ( ) . setItems ( VAR_1 ) (  METHOD_1 ( ) . METHOD_2 ( VAR_1 . isEmpty ( ) ) )  METHOD_1 ( ) . METHOD_2 ( VAR_1 . isEmpty ( ) ) (  METHOD_3 ( ) )  METHOD_3 ( ) (  METHOD_4 ( ) )  METHOD_4 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2.DiskImage ) TYPE TYPE_2.DiskImage ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( VAR_1 . getId ( ) ) ) INIT = new TYPE_1 ( VAR_1 . getId ( ) ) ) VAR VAR (  VAR_2 . METHOD_2 ( VAR_3 ) )  VAR_2 . METHOD_2 ( VAR_3 ) (  VAR_2 . METHOD_3 ( ( ( ! ( VAR_4 . isEmpty ( ) ) ) || ( METHOD_4 ( ) . METHOD_5 ( ) ) ) ) )  VAR_2 . METHOD_3 ( ( ( ! ( VAR_4 . isEmpty ( ) ) ) || ( METHOD_4 ( ) . METHOD_5 ( ) ) ) ) (  VAR_2 . METHOD_6 ( getParameters ( ) . METHOD_7 ( ) ) )  VAR_2 . METHOD_6 ( getParameters ( ) . METHOD_7 ( ) ) (  return METHOD_8 ( VAR_2 , METHOD_9 ( ) ) ; )  return METHOD_8 ( VAR_2 , METHOD_9 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  return new TYPE_1 ( new TYPE_2 ( VAR_1 , vm . getId ( ) ) , VAR_2 , STRING_1 , STRING_2 , 1 , new java.util.HashMap < > ( ) , true , true , true , STRING_3 , new java.util.HashMap < > ( ) , org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) , STRING_4 , true ) ; )  return new TYPE_1 ( new TYPE_2 ( VAR_1 , vm . getId ( ) ) , VAR_2 , STRING_1 , STRING_2 , 1 , new java.util.HashMap < > ( ) , true , true , true , STRING_3 , new java.util.HashMap < > ( ) , org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) , STRING_4 , true ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN org.ovirt.engine.core.common.businessentities.VM ) RETURN org.ovirt.engine.core.common.businessentities.VM ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME result ) NAME result ( INIT = null ) INIT = null ) VAR VAR ( VAR VAR ( TYPE TYPE_1.VdcQueryReturnValue ) TYPE TYPE_1.VdcQueryReturnValue ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . getInstance ( ) . RunQuery ( VAR_2 , new TYPE_3 ( VAR_3 . getId ( ) ) ) ) INIT = TYPE_2 . getInstance ( ) . RunQuery ( VAR_2 , new TYPE_3 ( VAR_3 . getId ( ) ) ) ) VAR VAR ( IF IF ( COND VAR_1 . getSucceeded ( ) ) COND VAR_1 . getSucceeded ( ) ( THEN THEN (  result = ( ( org.ovirt.engine.core.common.businessentities.VM ) ( VAR_1 . getReturnValue ( ) ) ) )  result = ( ( org.ovirt.engine.core.common.businessentities.VM ) ( VAR_1 . getReturnValue ( ) ) ) ) THEN THEN ) IF IF (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return TYPE_4 . METHOD_2 ( VAR_1 , VAR_4 , new TYPE_3 ( ) . METHOD_3 ( VAR_5 , VAR_6 ) . METHOD_3 ( VAR_7 , VAR_3 ) . METHOD_3 ( VAR_8 , VAR_2 ) ) ; )  return TYPE_4 . METHOD_2 ( VAR_1 , VAR_4 , new TYPE_3 ( ) . METHOD_3 ( VAR_5 , VAR_6 ) . METHOD_3 ( VAR_7 , VAR_3 ) . METHOD_3 ( VAR_8 , VAR_2 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = model . METHOD_2 ( ) . name ) INIT = model . METHOD_2 ( ) . name ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_3 ( VAR_1 ) ) INIT = TYPE_2 . METHOD_3 ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = model . METHOD_4 ( ) . METHOD_5 ( ) ) INIT = model . METHOD_4 ( ) . METHOD_5 ( ) ) VAR VAR (  TYPE_3 . METHOD_6 ( STRING_1 , ( VAR_3 + VAR_2 ) , VAR_4 ) )  TYPE_3 . METHOD_6 ( STRING_1 , ( VAR_3 + VAR_2 ) , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.Map<java.lang.String,java.lang.String> ) RETURN java.util.Map<java.lang.String,java.lang.String> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) == null ) COND ( VAR_1 ) == null ( THEN THEN (  VAR_1 = super . METHOD_1 ( ) )  VAR_1 = super . METHOD_1 ( ) ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME vds ) NAME vds ( INIT = TYPE_1 . getParameters ( ) . METHOD_2 ( ) ) INIT = TYPE_1 . getParameters ( ) . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( vds != null ) && ( ( vds . METHOD_3 ( ) ) != null ) ) ? vds . METHOD_3 ( ) : STRING_1 ) INIT = ( ( vds != null ) && ( ( vds . METHOD_3 ( ) ) != null ) ) ? vds . METHOD_3 ( ) : STRING_1 ) VAR VAR (  VAR_1 . put ( TYPE_2 . name ( ) . METHOD_4 ( ) , VAR_2 ) )  VAR_1 . put ( TYPE_2 . name ( ) . METHOD_4 ( ) , VAR_2 ) ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . getId ( ) ) INIT = VAR_1 . getId ( ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . METHOD_2 ( ) . getValue ( ) ) INIT = VAR_1 . METHOD_2 ( ) . getValue ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME params ) NAME params ( INIT = new TYPE_2 ( VAR_2 , VAR_3 ) ) INIT = new TYPE_2 ( VAR_2 , VAR_3 ) ) VAR VAR (  params . METHOD_3 ( TYPE_3 . getParameters ( ) . METHOD_4 ( ) ) )  params . METHOD_3 ( TYPE_3 . getParameters ( ) . METHOD_4 ( ) ) (  return TYPE_3 . METHOD_5 ( ) . METHOD_6 ( VAR_4 , params ) . getSucceeded ( ) ; )  return TYPE_3 . METHOD_5 ( ) . METHOD_6 ( VAR_4 , params ) . getSucceeded ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 class . METHOD_2 ( STRING_1 ) ) INIT = VAR_2 class . METHOD_2 ( STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_3 . METHOD_3 ( ) . METHOD_4 ( ) ) INIT = TYPE_3 . METHOD_3 ( ) . METHOD_4 ( ) ) VAR VAR (  VAR_4 = VAR_3 . METHOD_5 ( VAR_1 ) )  VAR_4 = VAR_3 . METHOD_5 ( VAR_1 ) ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_5 ) NAME VAR_5 ( INIT = TYPE_5 . METHOD_3 ( ) . METHOD_6 ( ) ) INIT = TYPE_5 . METHOD_3 ( ) . METHOD_6 ( ) ) VAR VAR (  VAR_6 = VAR_5 . METHOD_7 ( STRING_2 ) )  VAR_6 = VAR_5 . METHOD_7 ( STRING_2 ) (  VAR_7 = VAR_5 . METHOD_7 ( STRING_3 ) )  VAR_7 = VAR_5 . METHOD_7 ( STRING_3 ) (  VAR_8 = VAR_5 . METHOD_7 ( STRING_4 ) )  VAR_8 = VAR_5 . METHOD_7 ( STRING_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.String> ) TYPE java.util.Map<java.lang.String,java.lang.String> ( NAME map ) NAME map ( INIT = TYPE_1 . METHOD_2 ( list , new TYPE_2 < java.lang.String , java.lang.String > ( ) { public java.lang.String METHOD_3 ( java.lang.String VAR_1 ) { return VAR_1 . METHOD_4 ( 0 , 1 ) ; } } ) ) INIT = TYPE_1 . METHOD_2 ( list , new TYPE_2 < java.lang.String , java.lang.String > ( ) { public java.lang.String METHOD_3 ( java.lang.String VAR_1 ) { return VAR_1 . METHOD_4 ( 0 , 1 ) ; } } ) ) VAR VAR ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_3 ) NAME METHOD_3 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return VAR_1 . METHOD_4 ( 0 , 1 ) ; )  return VAR_1 . METHOD_4 ( 0 , 1 ) ; ) BLOCK BLOCK ) METHOD METHOD ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.String> ) TYPE java.util.Map<java.lang.String,java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.HashMap < java.lang.String , java.lang.String > ( ) { { put ( STRING_1 , STRING_2 ) ; put ( STRING_3 , STRING_4 ) ; } } ) INIT = new java.util.HashMap < java.lang.String , java.lang.String > ( ) { { put ( STRING_1 , STRING_2 ) ; put ( STRING_3 , STRING_4 ) ; } } ) VAR VAR ( STATIC-BLOCK STATIC-BLOCK (  put ( STRING_1 , STRING_2 ) )  put ( STRING_1 , STRING_2 ) (  put ( STRING_3 , STRING_4 ) )  put ( STRING_3 , STRING_4 ) ) STATIC-BLOCK STATIC-BLOCK (  TYPE_3 . assertEquals ( map , VAR_2 ) )  TYPE_3 . assertEquals ( map , VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.String> ) TYPE java.util.Map<java.lang.String,java.lang.String> ( NAME VAR_4 ) NAME VAR_4 ( INIT = new java.util.HashMap < > ( ) ) INIT = new java.util.HashMap < > ( ) ) VAR VAR (  VAR_4 . put ( STRING_1 , VAR_2 ) )  VAR_4 . put ( STRING_1 , VAR_2 ) (  VAR_4 . put ( STRING_2 , VAR_3 ) )  VAR_4 . put ( STRING_2 , VAR_3 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME tempVar ) NAME tempVar ( INIT = new TYPE_2 ( TYPE_3 . METHOD_2 ( ) , VAR_1 , VAR_4 ) ) INIT = new TYPE_2 ( TYPE_3 . METHOD_2 ( ) , VAR_1 , VAR_4 ) ) VAR VAR (  TYPE_4 . getInstance ( ) . METHOD_3 ( VAR_5 , tempVar , TYPE_5 . METHOD_4 ( ) ) )  TYPE_4 . getInstance ( ) . METHOD_3 ( VAR_5 , tempVar , TYPE_5 . METHOD_4 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( cmd ) . METHOD_2 ( ) )  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( cmd ) . METHOD_2 ( ) (  org.mockito.Mockito.doReturn ( METHOD_3 ( VAR_2 ) ) . when ( cmd ) . METHOD_4 ( ) )  org.mockito.Mockito.doReturn ( METHOD_3 ( VAR_2 ) ) . when ( cmd ) . METHOD_4 ( ) (  org.mockito.Mockito.doReturn ( METHOD_5 ( VAR_3 ) ) . when ( VAR_1 ) . METHOD_6 ( VAR_3 ) )  org.mockito.Mockito.doReturn ( METHOD_5 ( VAR_3 ) ) . when ( VAR_1 ) . METHOD_6 ( VAR_3 ) (  org.mockito.Mockito.doReturn ( METHOD_7 ( VAR_4 ) ) . when ( VAR_1 ) . METHOD_6 ( VAR_4 ) )  org.mockito.Mockito.doReturn ( METHOD_7 ( VAR_4 ) ) . when ( VAR_1 ) . METHOD_6 ( VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_2 . getId ( ) ) ) INIT = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_2 . getId ( ) ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ) TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( ) . METHOD_5 ( ) . METHOD_6 ( VAR_3 . getId ( ) ) )  TYPE_1 . METHOD_2 ( ) . METHOD_5 ( ) . METHOD_6 ( VAR_3 . getId ( ) ) (  TYPE_1 . METHOD_2 ( ) . METHOD_7 ( ) . METHOD_6 ( VAR_3 . getId ( ) ) )  TYPE_1 . METHOD_2 ( ) . METHOD_7 ( ) . METHOD_6 ( VAR_3 . getId ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_2 . getStatus ( ) ) INIT = VAR_2 . getStatus ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND ( ( VAR_3 == ( VAR_5 ) ) && ( VAR_4 != ( VAR_5 ) ) ) && ( VAR_4 . METHOD_3 ( ) ) ) COND ( ( VAR_3 == ( VAR_5 ) ) && ( VAR_4 != ( VAR_5 ) ) ) && ( VAR_4 . METHOD_3 ( ) ) ( THEN THEN (  VAR_6 . add ( VAR_1 . getId ( ) ) )  VAR_6 . add ( VAR_1 . getId ( ) ) (  VAR_7 . METHOD_4 ( STRING_1 , VAR_1 . getId ( ) ) )  VAR_7 . METHOD_4 ( STRING_1 , VAR_1 . getId ( ) ) (  VAR_2 . METHOD_5 ( null ) )  VAR_2 . METHOD_5 ( null ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source != null ? ( ( java.lang.Integer ) ( source ) ) . METHOD_2 ( ) : 0 ; )  return source != null ? ( ( java.lang.Integer ) ( source ) ) . METHOD_2 ( ) : 0 ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . METHOD_2 ( ) : 0 ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . METHOD_2 ( ) : 0 ; } } (  VAR_1 . onSuccess ( aQuery . getModel ( ) , INT_1 ) )  VAR_1 . onSuccess ( aQuery . getModel ( ) , INT_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return super . METHOD_1 ( VAR_1 ) . append ( STRING_1 , METHOD_2 ( ) ) . append ( STRING_2 , METHOD_3 ( ) ) . append ( STRING_3 , METHOD_4 ( ) ) . append ( STRING_4 , TYPE_2 . METHOD_5 ( METHOD_6 ( ) , STRING_5 ) ) . append ( STRING_6 , METHOD_7 ( ) ) . append ( STRING_7 , TYPE_2 . METHOD_5 ( METHOD_8 ( ) , STRING_5 ) ) . append ( STRING_8 , METHOD_9 ( ) ) ; )  return super . METHOD_1 ( VAR_1 ) . append ( STRING_1 , METHOD_2 ( ) ) . append ( STRING_2 , METHOD_3 ( ) ) . append ( STRING_3 , METHOD_4 ( ) ) . append ( STRING_4 , TYPE_2 . METHOD_5 ( METHOD_6 ( ) , STRING_5 ) ) . append ( STRING_6 , METHOD_7 ( ) ) . append ( STRING_7 , TYPE_2 . METHOD_5 ( METHOD_8 ( ) , STRING_5 ) ) . append ( STRING_8 , METHOD_9 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<TYPE_1.VdcQueryType> ) TYPE java.util.ArrayList<TYPE_1.VdcQueryType> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < TYPE_1 . VdcQueryType > ( ) ) INIT = new java.util.ArrayList < TYPE_1 . VdcQueryType > ( ) ) VAR VAR (  VAR_1 . add ( VAR_2 ) )  VAR_1 . add ( VAR_2 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  VAR_3 . METHOD_2 ( VAR_4 ) )  VAR_3 . METHOD_2 ( VAR_4 ) ( VAR VAR ( TYPE java.util.ArrayList<TYPE_3> ) TYPE java.util.ArrayList<TYPE_3> ( NAME VAR_5 ) NAME VAR_5 ( INIT = new java.util.ArrayList < TYPE_3 > ( TYPE_4 . METHOD_3 ( new TYPE_3 [ ] { VAR_3 } ) ) ) INIT = new java.util.ArrayList < TYPE_3 > ( TYPE_4 . METHOD_3 ( new TYPE_3 [ ] { VAR_3 } ) ) ) VAR VAR (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_4 ( VAR_1 , VAR_5 , this , getModel ( ) . METHOD_5 ( ) ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_4 ( VAR_1 , VAR_5 , this , getModel ( ) . METHOD_5 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) ( IF IF ( COND ( getEntity ( ) ) != null ) COND ( getEntity ( ) ) != null ( THEN THEN ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VmTemplate ) TYPE org.ovirt.engine.core.common.businessentities.VmTemplate ( NAME template ) NAME template ( INIT = ( ( TYPE_1 ) ( getEntity ( ) ) ) . METHOD_2 ( ) ) INIT = ( ( TYPE_1 ) ( getEntity ( ) ) ) . METHOD_2 ( ) ) VAR VAR (  setItems ( template . METHOD_3 ( ) ) )  setItems ( template . METHOD_3 ( ) ) ) THEN THEN ( ELSE ELSE (  setItems ( null ) )  setItems ( null ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<TYPE_2,org.ovirt.engine.core.common.businessentities.VM> ) TYPE TYPE_1<TYPE_2,org.ovirt.engine.core.common.businessentities.VM> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1<TYPE_2,org.ovirt.engine.core.common.businessentities.VM> ) TYPE TYPE_1<TYPE_2,org.ovirt.engine.core.common.businessentities.VM> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) ) ) INIT = VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) ) ) VAR VAR ( IF IF ( COND VAR_3 != 0 ) COND VAR_3 != 0 ( THEN THEN (  return VAR_3 ; )  return VAR_3 ; ) THEN THEN ) IF IF (  return VAR_1 . METHOD_2 ( ) . METHOD_5 ( ) . METHOD_4 ( VAR_2 . METHOD_2 ( ) . METHOD_5 ( ) ) ; )  return VAR_1 . METHOD_2 ( ) . METHOD_5 ( ) . METHOD_4 ( VAR_2 . METHOD_2 ( ) . METHOD_5 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS> ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ) ( result ) ) ) INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ) ( result ) ) ) VAR VAR ( IF IF ( COND ( VAR_2 . size ( ) ) > 0 ) COND ( VAR_2 . size ( ) ) > 0 ( THEN THEN (  VAR_3 . METHOD_1 ( ) . METHOD_2 ( ) . setIsChangable ( false ) )  VAR_3 . METHOD_1 ( ) . METHOD_2 ( ) . setIsChangable ( false ) (  VAR_3 . METHOD_1 ( ) . METHOD_2 ( ) . METHOD_3 ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_4 ( ) ) )  VAR_3 . METHOD_1 ( ) . METHOD_2 ( ) . METHOD_3 ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_4 ( ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1<org.ovirt.engine.core.common.businessentities.DiskImage> ) RETURN TYPE_1<org.ovirt.engine.core.common.businessentities.DiskImage> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<org.ovirt.engine.core.common.businessentities.DiskImage> ) TYPE TYPE_1<org.ovirt.engine.core.common.businessentities.DiskImage> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<org.ovirt.engine.core.common.businessentities.DiskImage> ) TYPE TYPE_1<org.ovirt.engine.core.common.businessentities.DiskImage> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 < > ( ) ) INIT = new TYPE_2 < > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.DiskImage ) TYPE org.ovirt.engine.core.common.businessentities.DiskImage ( NAME diskImage ) NAME diskImage ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.DiskImage ) TYPE org.ovirt.engine.core.common.businessentities.DiskImage ( NAME VAR_3 ) NAME VAR_3 ( INIT = org.ovirt.engine.core.common.businessentities.DiskImage . METHOD_2 ( diskImage ) ) INIT = org.ovirt.engine.core.common.businessentities.DiskImage . METHOD_2 ( diskImage ) ) VAR VAR (  VAR_3 . METHOD_3 ( VAR_4 ) )  VAR_3 . METHOD_3 ( VAR_4 ) (  VAR_3 . METHOD_4 ( VAR_5 ) )  VAR_3 . METHOD_4 ( VAR_5 ) (  VAR_2 . add ( VAR_3 ) )  VAR_2 . add ( VAR_3 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( TYPE_1 . any ( VAR_2 . Guid class ) ) ) . thenReturn ( null ) )  org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( TYPE_1 . any ( VAR_2 . Guid class ) ) ) . thenReturn ( null ) (  org.mockito.Mockito.when ( VAR_3 . METHOD_3 ( ) ) . thenReturn ( VAR_1 ) )  org.mockito.Mockito.when ( VAR_3 . METHOD_3 ( ) ) . thenReturn ( VAR_1 ) (  validator = new TYPE_2 ( VAR_3 , host , VAR_4 ) )  validator = new TYPE_2 ( VAR_3 , host , VAR_4 ) (  TYPE_3 . METHOD_4 ( validator . METHOD_5 ( ) , TYPE_4 . METHOD_6 ( ) ) )  TYPE_3 . METHOD_4 ( validator . METHOD_5 ( ) , TYPE_4 . METHOD_6 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < TYPE_1 > ( ) ) INIT = new java.util.ArrayList < TYPE_1 > ( ) ) VAR VAR (  VAR_1 . add ( new TYPE_1 ( ) ) )  VAR_1 . add ( new TYPE_1 ( ) ) (  TYPE_2 . when ( VAR_2 . METHOD_2 ( TYPE_3 . any ( VAR_3 . Guid class ) ) ) . thenReturn ( VAR_1 ) )  TYPE_2 . when ( VAR_2 . METHOD_2 ( TYPE_3 . any ( VAR_3 . Guid class ) ) ) . thenReturn ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1.AuditLogType ) RETURN TYPE_1.AuditLogType ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  return TYPE_2 . getSucceeded ( ) ? ( TYPE_2 . METHOD_2 ( ) ) == ( VAR_1 ) ? VAR_2 : TYPE_2 . METHOD_3 ( ) ? VAR_3 : VAR_4 : VAR_5 ? VAR_6 : ( TYPE_2 . METHOD_4 ( ) . METHOD_5 ( ) ) == ( VAR_7 ) ? VAR_8 : VAR_9 ; )  return TYPE_2 . getSucceeded ( ) ? ( TYPE_2 . METHOD_2 ( ) ) == ( VAR_1 ) ? VAR_2 : TYPE_2 . METHOD_3 ( ) ? VAR_3 : VAR_4 : VAR_5 ? VAR_6 : ( TYPE_2 . METHOD_4 ( ) . METHOD_5 ( ) ) == ( VAR_7 ) ? VAR_8 : VAR_9 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = null ) INIT = null ) VAR VAR ( IF IF ( COND ( getModel ( ) . METHOD_2 ( ) ) && ( ! ( getModel ( ) . METHOD_3 ( ) ) ) ) COND ( getModel ( ) . METHOD_2 ( ) ) && ( ! ( getModel ( ) . METHOD_3 ( ) ) ) ( THEN THEN (  VAR_1 = TYPE_2 . METHOD_4 ( VAR_2 . METHOD_5 ( ) ) )  VAR_1 = TYPE_2 . METHOD_4 ( VAR_2 . METHOD_5 ( ) ) ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND source != null ) COND source != null ( THEN THEN ( VAR VAR ( TYPE java.util.ArrayList<TYPE_1> ) TYPE java.util.ArrayList<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) INIT = ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME domain ) NAME domain ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( IF IF ( COND ( domain . METHOD_1 ( ) ) == ( VAR_2 ) ) COND ( domain . METHOD_1 ( ) ) == ( VAR_2 ) ( THEN THEN (  return domain ; )  return domain ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME equals ) NAME equals ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME obj ) NAME obj ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( this ) == obj ) COND ( this ) == obj ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ( IF IF ( COND obj == null ) COND obj == null ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( IF IF ( COND ! ( obj instanceof TYPE_1 ) ) COND ! ( obj instanceof TYPE_1 ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME other ) NAME other ( INIT = ( ( TYPE_1 ) ( obj ) ) ) INIT = ( ( TYPE_1 ) ( obj ) ) ) VAR VAR (  return ( ( TYPE_2 . equals ( id , other . id ) ) && ( TYPE_2 . equals ( VAR_1 , VAR_2 ) ) ) && ( TYPE_2 . equals ( VAR_3 , VAR_4 ) ) ; )  return ( ( TYPE_2 . equals ( id , other . id ) ) && ( TYPE_2 . equals ( VAR_1 , VAR_2 ) ) ) && ( TYPE_2 . equals ( VAR_3 , VAR_4 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = dao . get ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( STRING_1 ) ) ) INIT = dao . get ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( STRING_1 ) ) ) VAR VAR (  VAR_2 . METHOD_3 ( VAR_3 ) )  VAR_2 . METHOD_3 ( VAR_3 ) (  VAR_1 . METHOD_4 ( STRING_2 ) )  VAR_1 . METHOD_4 ( STRING_2 ) (  dao . METHOD_5 ( TYPE_2 . METHOD_6 ( new TYPE_1 [ ] { VAR_2 , VAR_1 } ) ) )  dao . METHOD_5 ( TYPE_2 . METHOD_6 ( new TYPE_1 [ ] { VAR_2 , VAR_1 } ) ) (  TYPE_3 . assertEquals ( VAR_2 , dao . get ( VAR_2 . getId ( ) ) ) )  TYPE_3 . assertEquals ( VAR_2 , dao . get ( VAR_2 . getId ( ) ) ) (  TYPE_3 . assertEquals ( VAR_1 , dao . get ( VAR_1 . getId ( ) ) ) )  TYPE_3 . assertEquals ( VAR_1 , dao . get ( VAR_1 . getId ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.Map<org.ovirt.engine.core.compat.Guid,java.lang.String> ) TYPE java.util.Map<org.ovirt.engine.core.compat.Guid,java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE TYPE_2<org.ovirt.engine.core.compat.Guid,java.lang.String> ) TYPE TYPE_2<org.ovirt.engine.core.compat.Guid,java.lang.String> ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_1 . METHOD_2 ( ) ) IN VAR_1 . METHOD_2 ( ) ( BLOCK BLOCK (  VAR_2 . append ( STRING_1 ) . append ( VAR_3 . METHOD_3 ( ) ) . append ( STRING_2 ) . append ( VAR_3 . getValue ( ) ) . append ( CHAR_1 ) )  VAR_2 . append ( STRING_1 ) . append ( VAR_3 . METHOD_3 ( ) ) . append ( STRING_2 ) . append ( VAR_3 . getValue ( ) ) . append ( CHAR_1 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) (  VAR_1 = TYPE_1 . instance ( ) . METHOD_2 ( TYPE_2 . METHOD_3 ( ) ) )  VAR_1 = TYPE_1 . instance ( ) . METHOD_2 ( TYPE_2 . METHOD_3 ( ) ) (  org.mockito.Mockito.when ( TYPE_3 . METHOD_4 ( ) . METHOD_5 ( ) ) . thenReturn ( VAR_1 ) )  org.mockito.Mockito.when ( TYPE_3 . METHOD_4 ( ) . METHOD_5 ( ) ) . thenReturn ( VAR_1 ) ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_1 . instance ( ) . METHOD_6 ( INT_1 ) ) INIT = TYPE_1 . instance ( ) . METHOD_6 ( INT_1 ) ) VAR VAR (  org.mockito.Mockito.when ( TYPE_3 . METHOD_4 ( ) . METHOD_7 ( ) ) . thenReturn ( VAR_2 ) )  org.mockito.Mockito.when ( TYPE_3 . METHOD_4 ( ) . METHOD_7 ( ) ) . thenReturn ( VAR_2 ) (  TYPE_4 . getInstance ( ) . METHOD_8 ( VAR_2 , TYPE_3 . METHOD_9 ( ) ) )  TYPE_4 . getInstance ( ) . METHOD_8 ( VAR_2 , TYPE_3 . METHOD_9 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  VAR_1 . METHOD_3 ( VAR_2 ) )  VAR_1 . METHOD_3 ( VAR_2 ) (  org.mockito.Mockito.when ( command . METHOD_4 ( TYPE_1 . any ( VAR_3 . Guid class ) ) ) . thenReturn ( true ) )  org.mockito.Mockito.when ( command . METHOD_4 ( TYPE_1 . any ( VAR_3 . Guid class ) ) ) . thenReturn ( true ) (  org.mockito.Mockito.when ( VAR_4 . METHOD_5 ( TYPE_1 . any ( VAR_5 . Integer class ) , TYPE_1 . any ( VAR_3 . Version class ) ) ) . thenReturn ( TYPE_2 . METHOD_6 ( STRING_1 ) ) )  org.mockito.Mockito.when ( VAR_4 . METHOD_5 ( TYPE_1 . any ( VAR_5 . Integer class ) , TYPE_1 . any ( VAR_3 . Version class ) ) ) . thenReturn ( TYPE_2 . METHOD_6 ( STRING_1 ) ) (  command . METHOD_7 ( ) )  command . METHOD_7 ( ) (  TYPE_3 . METHOD_8 ( command , VAR_6 ) )  TYPE_3 . METHOD_8 ( command , VAR_6 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_1 . METHOD_2 ( 2 ) )  VAR_1 . METHOD_2 ( 2 ) (  VAR_1 . METHOD_3 ( new TYPE_2 ( new java.lang.Integer ( 2 ) , TYPE_3 . toString ( ) ) ) )  VAR_1 . METHOD_3 ( new TYPE_2 ( new java.lang.Integer ( 2 ) , TYPE_3 . toString ( ) ) ) (  VAR_1 . METHOD_4 ( 0 ) )  VAR_1 . METHOD_4 ( 0 ) (  VAR_1 . METHOD_5 ( 0 ) )  VAR_1 . METHOD_5 ( 0 ) (  VAR_1 . METHOD_6 ( METHOD_7 ( ) ) )  VAR_1 . METHOD_6 ( METHOD_7 ( ) ) (  VAR_1 . METHOD_8 ( METHOD_9 ( ) ) )  VAR_1 . METHOD_8 ( METHOD_9 ( ) ) (  return TYPE_4 . METHOD_10 ( VAR_1 ) ; )  return TYPE_4 . METHOD_10 ( VAR_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME model ) NAME model ( INIT = ( ( TYPE_2 ) ( getWindow ( ) ) ) ) INIT = ( ( TYPE_2 ) ( getWindow ( ) ) ) ) VAR VAR (  model . METHOD_2 ( ) )  model . METHOD_2 ( ) ( IF IF ( COND ( returnValue != null ) && ( returnValue . getSucceeded ( ) ) ) COND ( returnValue != null ) && ( returnValue . getSucceeded ( ) ) ( THEN THEN (  METHOD_3 ( ) )  METHOD_3 ( ) ( IF IF ( COND model . METHOD_4 ( ) ) COND model . METHOD_4 ( ) ( THEN THEN (  METHOD_5 ( returnValue . METHOD_6 ( ) ) )  METHOD_5 ( returnValue . METHOD_6 ( ) ) (  METHOD_7 ( ) )  METHOD_7 ( ) (  METHOD_8 ( ) . METHOD_9 ( ) )  METHOD_8 ( ) . METHOD_9 ( ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  METHOD_3 ( ) )  METHOD_3 ( ) (  METHOD_4 ( ) )  METHOD_4 ( ) (  org.mockito.Mockito.when ( VAR_1 . METHOD_5 ( TYPE_1 . any ( VAR_2 . VM class ) ) ) . thenReturn ( new TYPE_2 . ValidationResult ( VAR_3 ) ) )  org.mockito.Mockito.when ( VAR_1 . METHOD_5 ( TYPE_1 . any ( VAR_2 . VM class ) ) ) . thenReturn ( new TYPE_2 . ValidationResult ( VAR_3 ) ) (  TYPE_3 . METHOD_6 ( command , VAR_4 ) )  TYPE_3 . METHOD_6 ( command , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2.AuditLogType ) TYPE TYPE_2.AuditLogType ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( ( VAR_1 . METHOD_2 ( ) ) && ( ( VAR_1 . METHOD_3 ( ) ) == 0 ) ) ? INT_1 : VAR_2 . METHOD_4 ( ) ) INIT = ( ( VAR_1 . METHOD_2 ( ) ) && ( ( VAR_1 . METHOD_3 ( ) ) == 0 ) ) ? INT_1 : VAR_2 . METHOD_4 ( ) ) VAR VAR ( IF IF ( COND VAR_3 > 0 ) COND VAR_3 > 0 ( THEN THEN (  VAR_1 . METHOD_5 ( TYPE_3 . METHOD_6 ( VAR_3 ) ) )  VAR_1 . METHOD_5 ( TYPE_3 . METHOD_6 ( VAR_3 ) ) (  VAR_1 . METHOD_7 ( TYPE_4 . METHOD_8 ( VAR_1 , VAR_2 ) ) )  VAR_1 . METHOD_7 ( TYPE_4 . METHOD_8 ( VAR_1 , VAR_2 ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.List<java.lang.Integer> ) RETURN java.util.List<java.lang.Integer> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<java.lang.Integer> ) TYPE java.util.List<java.lang.Integer> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.List<java.lang.Integer> ) TYPE java.util.List<java.lang.Integer> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.lang.Integer> ) TYPE java.util.List<java.lang.Integer> ( NAME VAR_3 ) NAME VAR_3 ( INIT = new java.util.ArrayList < java.lang.Integer > ( ) ) INIT = new java.util.ArrayList < java.lang.Integer > ( ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE java.lang.Integer ) TYPE java.lang.Integer ( NAME VAR_5 ) NAME VAR_5 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE java.lang.Integer ) TYPE java.lang.Integer ( NAME other ) NAME other ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK ( IF IF ( COND ( VAR_5 * other ) == VAR_4 ) COND ( VAR_5 * other ) == VAR_4 ( THEN THEN (  VAR_3 . add ( VAR_5 ) )  VAR_3 . add ( VAR_5 ) (  break ; )  break ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  return ( ( ! ( VAR_1 . METHOD_2 ( ) . equals ( TYPE_1 . METHOD_3 ( ) . METHOD_2 ( ) ) ) ) || ( ! ( VAR_1 . METHOD_4 ( ) . equals ( TYPE_1 . METHOD_4 ( ) ) ) ) ) || ( ( VAR_1 . METHOD_5 ( ) ) != ( TYPE_1 . METHOD_3 ( ) . METHOD_5 ( ) ) ) ; )  return ( ( ! ( VAR_1 . METHOD_2 ( ) . equals ( TYPE_1 . METHOD_3 ( ) . METHOD_2 ( ) ) ) ) || ( ! ( VAR_1 . METHOD_4 ( ) . equals ( TYPE_1 . METHOD_4 ( ) ) ) ) ) || ( ( VAR_1 . METHOD_5 ( ) ) != ( TYPE_1 . METHOD_3 ( ) . METHOD_5 ( ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME action ) NAME action ( INIT = args . get ( VAR_1 ) ) INIT = args . get ( VAR_1 ) ) VAR VAR ( IF IF ( COND TYPE_2 . equals ( action ) ) COND TYPE_2 . equals ( action ) ( THEN THEN (  METHOD_2 ( ) )  METHOD_2 ( ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND TYPE_3 . equals ( action ) ) COND TYPE_3 . equals ( action ) ( THEN THEN (  METHOD_3 ( ) )  METHOD_3 ( ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND TYPE_4 . equals ( action ) ) COND TYPE_4 . equals ( action ) ( THEN THEN (  METHOD_4 ( ) )  METHOD_4 ( ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND TYPE_5 . equals ( action ) ) COND TYPE_5 . equals ( action ) ( THEN THEN (  validate ( ) )  validate ( ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND TYPE_6 . equals ( action ) ) COND TYPE_6 . equals ( action ) ( THEN THEN (  METHOD_5 ( ) )  METHOD_5 ( ) ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<TYPE_2,TYPE_3> ) TYPE TYPE_1<TYPE_2,TYPE_3> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( VAR_2 , new TYPE_3 ( ) , null ) ) INIT = new TYPE_1 ( VAR_2 , new TYPE_3 ( ) , null ) ) VAR VAR (  VAR_3 . METHOD_2 ( VAR_1 ) )  VAR_3 . METHOD_2 ( VAR_1 ) (  org.mockito.Mockito . METHOD_3 ( VAR_4 ) . METHOD_4 ( VAR_3 ) )  org.mockito.Mockito . METHOD_3 ( VAR_4 ) . METHOD_4 ( VAR_3 ) (  org.mockito.Mockito . METHOD_3 ( VAR_5 ) . METHOD_5 ( TYPE_4 . any ( VAR_6 class ) ) )  org.mockito.Mockito . METHOD_3 ( VAR_5 ) . METHOD_5 ( TYPE_4 . any ( VAR_6 class ) ) (  TYPE_5 . assertEquals ( STRING_1 , VAR_1 , VAR_3 . METHOD_6 ( ) ) )  TYPE_5 . assertEquals ( STRING_1 , VAR_1 , VAR_3 . METHOD_6 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  VAR_1 . METHOD_3 ( VAR_2 ) )  VAR_1 . METHOD_3 ( VAR_2 ) (  org.mockito.Mockito.when ( command . METHOD_4 ( TYPE_1 . any ( VAR_3 . Guid class ) ) ) . thenReturn ( true ) )  org.mockito.Mockito.when ( command . METHOD_4 ( TYPE_1 . any ( VAR_3 . Guid class ) ) ) . thenReturn ( true ) (  org.mockito.Mockito.when ( VAR_4 . METHOD_5 ( TYPE_1 . any ( VAR_5 . Integer class ) , TYPE_1 . any ( VAR_3 . Version class ) ) ) . thenReturn ( new java.util.ArrayList < > ( TYPE_2 . METHOD_6 ( STRING_1 ) ) ) )  org.mockito.Mockito.when ( VAR_4 . METHOD_5 ( TYPE_1 . any ( VAR_5 . Integer class ) , TYPE_1 . any ( VAR_3 . Version class ) ) ) . thenReturn ( new java.util.ArrayList < > ( TYPE_2 . METHOD_6 ( STRING_1 ) ) ) (  TYPE_3 . METHOD_7 ( command , VAR_6 ) )  TYPE_3 . METHOD_7 ( command , VAR_6 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StoragePool ) TYPE org.ovirt.engine.core.common.businessentities.StoragePool ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( java.lang.Boolean ) ( TYPE_1 . METHOD_2 ( VAR_3 , VAR_1 . METHOD_3 ( ) . getValue ( ) ) ) ) ) INIT = ( ( java.lang.Boolean ) ( TYPE_1 . METHOD_2 ( VAR_3 , VAR_1 . METHOD_3 ( ) . getValue ( ) ) ) ) ) VAR VAR (  METHOD_4 ( ) . METHOD_5 ( TYPE_2 . METHOD_6 ( ) ) )  METHOD_4 ( ) . METHOD_5 ( TYPE_2 . METHOD_6 ( ) ) (  METHOD_4 ( ) . setIsChangable ( ( VAR_2 && ( METHOD_7 ( ) ) ) ) )  METHOD_4 ( ) . setIsChangable ( ( VAR_2 && ( METHOD_7 ( ) ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME user ) NAME user ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND user . METHOD_2 ( ) ) COND user . METHOD_2 ( ) ( THEN THEN (  return TYPE_3 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; )  return TYPE_3 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; ) THEN THEN ) IF IF ( IF IF ( COND user . METHOD_5 ( ) ) COND user . METHOD_5 ( ) ( THEN THEN (  return TYPE_3 . METHOD_3 ( VAR_1 . METHOD_6 ( ) ) ; )  return TYPE_3 . METHOD_3 ( VAR_1 . METHOD_6 ( ) ) ; ) THEN THEN ) IF IF (  return TYPE_3 . METHOD_3 ( VAR_1 . user ( ) ) ; )  return TYPE_3 . METHOD_3 ( VAR_1 . user ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source != null ? ( ( java.util.ArrayList < TYPE_2 > ) ( source ) ) : null ; )  return source != null ? ( ( java.util.ArrayList < TYPE_2 > ) ( source ) ) : null ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < TYPE_2 > ) ( source ) ) : null ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < TYPE_2 > ) ( source ) ) : null ; } } (  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_4 , new TYPE_3 ( VAR_1 , VAR_5 , VAR_2 , VAR_3 ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_4 , new TYPE_3 ( VAR_1 , VAR_5 , VAR_2 , VAR_3 ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( INT_1 , INT_1 , INT_1 ) ) INIT = new TYPE_1 ( INT_1 , INT_1 , INT_1 ) ) VAR VAR (  TYPE_2 . assertEquals ( STRING_1 , INT_1 , VAR_2 ) )  TYPE_2 . assertEquals ( STRING_1 , INT_1 , VAR_2 ) (  TYPE_2 . assertEquals ( STRING_2 , INT_1 , VAR_3 ) )  TYPE_2 . assertEquals ( STRING_2 , INT_1 , VAR_3 ) (  TYPE_2 . assertEquals ( STRING_3 , INT_1 , VAR_4 ) )  TYPE_2 . assertEquals ( STRING_3 , INT_1 , VAR_4 ) (  TYPE_2 . assertEquals ( STRING_4 , 0 , VAR_5 ) )  TYPE_2 . assertEquals ( STRING_4 , 0 , VAR_5 ) (  TYPE_2 . assertEquals ( STRING_5 , 0 , VAR_6 ) )  TYPE_2 . assertEquals ( STRING_5 , 0 , VAR_6 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_3 . METHOD_2 ( VAR_4 , METHOD_3 ( VAR_1 ) , null , new TYPE_4 ( VAR_5 , VAR_2 ) ) ) INIT = TYPE_3 . METHOD_2 ( VAR_4 , METHOD_3 ( VAR_1 ) , null , new TYPE_4 ( VAR_5 , VAR_2 ) ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_3 . get ( ) )  VAR_3 . get ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_5|TYPE_6 ) TYPE TYPE_5|TYPE_6 ( NAME e ) NAME e ( BLOCK BLOCK (  log . error ( STRING_1 , VAR_1 ) )  log . error ( STRING_1 , VAR_1 ) (  log . error ( STRING_2 , e ) )  log . error ( STRING_2 , e ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source != null ? ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; )  return source != null ? ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; } } ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME params ) NAME params ( INIT = new TYPE_2 ( VAR_1 , VAR_2 ) ) INIT = new TYPE_2 ( VAR_1 , VAR_2 ) ) VAR VAR (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_3 , params , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_3 , params , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME context ) NAME context ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME object ) NAME object ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME event ) NAME event ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  super . METHOD_1 ( context , VAR_1 , object , event ) )  super . METHOD_1 ( context , VAR_1 , object , event ) ( IF IF ( COND TYPE_5 . equals ( event . METHOD_2 ( ) ) ) COND TYPE_5 . equals ( event . METHOD_2 ( ) ) ( THEN THEN ( VAR VAR ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_3 ( object ) ) INIT = METHOD_3 ( object ) ) VAR VAR ( IF IF ( COND ! ( STRING_1 . equals ( VAR_2 . METHOD_4 ( ) ) ) ) COND ! ( STRING_1 . equals ( VAR_2 . METHOD_4 ( ) ) ) ( THEN THEN (  VAR_3 . METHOD_5 ( METHOD_3 ( object ) ) )  VAR_3 . METHOD_5 ( METHOD_3 ( object ) ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  VAR_3 . METHOD_6 ( VAR_1 , event ) )  VAR_3 . METHOD_6 ( VAR_1 , event ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.List<java.lang.String> ) RETURN java.util.List<java.lang.String> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < java.lang.String > ( ) ) INIT = new java.util.ArrayList < java.lang.String > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( IN METHOD_2 ( ) . METHOD_3 ( ) ) IN METHOD_2 ( ) . METHOD_3 ( ) ( BLOCK BLOCK (  VAR_1 . add ( VAR_2 . METHOD_4 ( ) ) )  VAR_1 . add ( VAR_2 . METHOD_4 ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME map ) NAME map ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME template ) NAME template ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return template != null ? template : ( model . getId ( ) ) != null ? TYPE_1 . METHOD_3 ( java.lang.Integer . METHOD_4 ( model . getId ( ) ) ) : TYPE_1 . valueOf ( model . getName ( ) . METHOD_5 ( ) ) ; )  return template != null ? template : ( model . getId ( ) ) != null ? TYPE_1 . METHOD_3 ( java.lang.Integer . METHOD_4 ( model . getId ( ) ) ) : TYPE_1 . valueOf ( model . getName ( ) . METHOD_5 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ( INIT = dao . get ( VAR_1 . getId ( ) ) ) INIT = dao . get ( VAR_1 . getId ( ) ) ) VAR VAR (  TYPE_2 . METHOD_2 ( result ) )  TYPE_2 . METHOD_2 ( result ) (  TYPE_2 . assertEquals ( dao . METHOD_3 ( VAR_1 . getId ( ) ) , 1 ) )  TYPE_2 . assertEquals ( dao . METHOD_3 ( VAR_1 . getId ( ) ) , 1 ) (  result = dao . get ( VAR_1 . getId ( ) ) )  result = dao . get ( VAR_1 . getId ( ) ) (  TYPE_2 . METHOD_4 ( result ) )  TYPE_2 . METHOD_4 ( result ) (  TYPE_2 . assertEquals ( dao . METHOD_3 ( VAR_1 . getId ( ) ) , 0 ) )  TYPE_2 . assertEquals ( dao . METHOD_3 ( VAR_1 . getId ( ) ) , 0 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = vm . getName ( ) ) INIT = vm . getName ( ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 < java.lang.Integer > METHOD_2 ( VAR_4 ) ) INIT = VAR_3 < java.lang.Integer > METHOD_2 ( VAR_4 ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_3 < java.lang.Integer > METHOD_2 ( VAR_6 ) ) INIT = VAR_3 < java.lang.Integer > METHOD_2 ( VAR_6 ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_7 ) NAME VAR_7 ( INIT = ( VAR_8 . METHOD_3 ( vm . METHOD_4 ( ) ) ) ? VAR_2 : VAR_5 ) INIT = ( VAR_8 . METHOD_3 ( vm . METHOD_4 ( ) ) ) ? VAR_2 : VAR_5 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_9 ) NAME VAR_9 ( INIT = ( VAR_1 . length ( ) ) <= VAR_7 ) INIT = ( VAR_1 . length ( ) ) <= VAR_7 ) VAR VAR (  return VAR_9 ; )  return VAR_9 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( VAR_2 , null ) ) INIT = METHOD_2 ( VAR_2 , null ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VdsNetworkInterface> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VdsNetworkInterface> ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_1 . METHOD_3 ( METHOD_4 ( STRING_1 , null ) ) ) INIT = TYPE_1 . METHOD_3 ( METHOD_4 ( STRING_1 , null ) ) ) VAR VAR (  METHOD_5 ( VAR_1 , VAR_3 ) )  METHOD_5 ( VAR_1 , VAR_3 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_6 ( METHOD_7 ( VAR_1 , VAR_3 ) ) ) INIT = METHOD_6 ( METHOD_7 ( VAR_1 , VAR_3 ) ) ) VAR VAR (  METHOD_8 ( VAR_4 , VAR_5 ) )  METHOD_8 ( VAR_4 , VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR (  VAR_1 = TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( ) , VAR_1 ) )  VAR_1 = TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( ) , VAR_1 ) ( IF IF ( COND TYPE_3 . METHOD_4 ( VAR_1 ) ) COND TYPE_3 . METHOD_4 ( VAR_1 ) ( THEN THEN ( TRY TRY ( BLOCK BLOCK (  VAR_2 = TYPE_3 . METHOD_5 ( VAR_1 ) )  VAR_2 = TYPE_3 . METHOD_5 ( VAR_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_3 . error ( ( STRING_2 + VAR_1 ) , e ) )  VAR_3 . error ( ( STRING_2 + VAR_1 ) , e ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) THEN THEN ( ELSE ELSE (  VAR_3 . error ( ( ( STRING_3 + VAR_1 ) + STRING_4 ) ) )  VAR_3 . error ( ( ( STRING_3 + VAR_1 ) + STRING_4 ) ) ) ELSE ELSE ) IF IF (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND VAR_1 . METHOD_2 ( ) ) COND VAR_1 . METHOD_2 ( ) ( THEN THEN ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_3 ( ) ) INIT = METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_2 . METHOD_4 ( ) ) INIT = TYPE_2 . METHOD_4 ( ) ) VAR VAR ( IF IF ( COND VAR_2 . METHOD_5 ( ) ) COND VAR_2 . METHOD_5 ( ) ( THEN THEN (  METHOD_6 ( ) . METHOD_7 ( VAR_2 . METHOD_8 ( ) , VAR_3 ) )  METHOD_6 ( ) . METHOD_7 ( VAR_2 . METHOD_8 ( ) , VAR_3 ) (  METHOD_9 ( VAR_2 . METHOD_10 ( ) . METHOD_11 ( ) . map ( TYPE_3 : : METHOD_12 ) , VAR_3 ) )  METHOD_9 ( VAR_2 . METHOD_10 ( ) . METHOD_11 ( ) . map ( TYPE_3 : : METHOD_12 ) , VAR_3 ) ) THEN THEN ( ELSE ELSE (  VAR_4 . METHOD_13 ( STRING_1 , VAR_1 . METHOD_14 ( ) ) )  VAR_4 . METHOD_13 ( STRING_1 , VAR_1 . METHOD_14 ( ) ) ) ELSE ELSE ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) . METHOD_3 ( ) ) INIT = METHOD_2 ( ) . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = 0 ) INIT = 0 ) VAR VAR (  VAR_3 . METHOD_4 ( ) . METHOD_5 ( ) )  VAR_3 . METHOD_4 ( ) . METHOD_5 ( ) ( TRY TRY ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE java.util.Map<org.ovirt.engine.core.compat.Guid,TYPE_1> ) TYPE java.util.Map<org.ovirt.engine.core.compat.Guid,TYPE_1> ( NAME VAR_4 ) NAME VAR_4 ( IN VAR_5 . METHOD_6 ( ) ) IN VAR_5 . METHOD_6 ( ) ( BLOCK BLOCK (  VAR_2 += VAR_4 . size ( ) )  VAR_2 += VAR_4 . size ( ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ( FINALLY FINALLY (  VAR_3 . METHOD_4 ( ) . METHOD_7 ( ) )  VAR_3 . METHOD_4 ( ) . METHOD_7 ( ) ) FINALLY FINALLY ) TRY TRY (  return VAR_2 < ( ( VAR_1 * ( VAR_6 < java.lang.Integer > METHOD_8 ( VAR_7 ) ) ) / INT_1 ) ; )  return VAR_2 < ( ( VAR_1 * ( VAR_6 < java.lang.Integer > METHOD_8 ( VAR_7 ) ) ) / INT_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( METHOD_3 ( ) ) )  METHOD_2 ( METHOD_3 ( ) ) (  VAR_1 . METHOD_4 ( ) )  VAR_1 . METHOD_4 ( ) ( TRY TRY ( BLOCK BLOCK (  VAR_2 . add ( new TYPE_1 ( ) ) )  VAR_2 . add ( new TYPE_1 ( ) ) (  METHOD_5 ( STRING_1 ) )  METHOD_5 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( BLOCK BLOCK (  METHOD_6 ( VAR_3 , STRING_2 , STRING_3 , STRING_4 ) )  METHOD_6 ( VAR_3 , STRING_2 , STRING_3 , STRING_4 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( STRING_1 , null , VAR_1 , false ) )  METHOD_2 ( STRING_1 , null , VAR_1 , false ) (  METHOD_3 ( VAR_2 [ INT_1 ] , 2 ) )  METHOD_3 ( VAR_2 [ INT_1 ] , 2 ) (  METHOD_4 ( METHOD_5 ( VAR_3 , VAR_4 class , new java.lang.String [ ] { STRING_2 , STRING_3 , STRING_4 } , new java.lang.Object [ ] { VAR_2 [ 1 ] , VAR_2 [ INT_1 ] , VAR_2 [ 0 ] } , true , true ) ) )  METHOD_4 ( METHOD_5 ( VAR_3 , VAR_4 class , new java.lang.String [ ] { STRING_2 , STRING_3 , STRING_4 } , new java.lang.Object [ ] { VAR_2 [ 1 ] , VAR_2 [ INT_1 ] , VAR_2 [ 0 ] } , true , true ) ) (  METHOD_6 ( resource . METHOD_7 ( ) ) )  METHOD_6 ( resource . METHOD_7 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  get ( ) )  get ( ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  VAR_1 . setId ( id ) )  VAR_1 . setId ( id ) ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 ) INIT = VAR_3 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME parameters ) NAME parameters ( INIT = new TYPE_3 ( VAR_1 , VAR_2 ) ) INIT = new TYPE_3 ( VAR_1 , VAR_2 ) ) VAR VAR (  return METHOD_2 ( VAR_4 , parameters ) ; )  return METHOD_2 ( VAR_4 , parameters ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.List<TYPE_1.DiskImage> ) RETURN java.util.List<TYPE_1.DiskImage> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.DiskImage ) TYPE TYPE_1.DiskImage ( NAME disk ) NAME disk ( INIT = new TYPE_1 . DiskImage ( ) ) INIT = new TYPE_1 . DiskImage ( ) ) VAR VAR (  disk . METHOD_2 ( VAR_1 ) )  disk . METHOD_2 ( VAR_1 ) (  disk . METHOD_3 ( new java.util.ArrayList ( TYPE_2 . METHOD_4 ( VAR_2 ) ) ) )  disk . METHOD_3 ( new java.util.ArrayList ( TYPE_2 . METHOD_4 ( VAR_2 ) ) ) ( VAR VAR ( TYPE java.util.List<TYPE_1.DiskImage> ) TYPE java.util.List<TYPE_1.DiskImage> ( NAME VAR_3 ) NAME VAR_3 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR (  VAR_3 . add ( disk ) )  VAR_3 . add ( disk ) (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . assertEquals ( STRING_1 , dao . METHOD_2 ( VAR_1 ) , VAR_2 ) )  TYPE_1 . assertEquals ( STRING_1 , dao . METHOD_2 ( VAR_1 ) , VAR_2 ) (  TYPE_1 . assertEquals ( STRING_1 , dao . METHOD_2 ( VAR_3 ) , VAR_4 ) )  TYPE_1 . assertEquals ( STRING_1 , dao . METHOD_2 ( VAR_3 ) , VAR_4 ) (  TYPE_1 . assertEquals ( STRING_1 , dao . METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) , 0 ) )  TYPE_1 . assertEquals ( STRING_1 , dao . METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) , 0 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_1.DiskImage ) TYPE TYPE_1.DiskImage ( NAME image ) NAME image ( IN METHOD_2 ( ) ) IN METHOD_2 ( ) ( BLOCK BLOCK ( IF IF ( COND ! ( image . METHOD_3 ( ) . METHOD_4 ( VAR_1 . get ( image . getId ( ) ) . METHOD_3 ( ) ) ) ) COND ! ( image . METHOD_3 ( ) . METHOD_4 ( VAR_1 . get ( image . getId ( ) ) . METHOD_3 ( ) ) ) ( THEN THEN (  METHOD_5 ( VAR_2 ) )  METHOD_5 ( VAR_2 ) (  return false ; )  return false ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Boolean ) RETURN java.lang.Boolean ( NAME getValue ) NAME getValue ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ( INIT = ! ( METHOD_1 ( ) ) ) INIT = ! ( METHOD_1 ( ) ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( IN METHOD_2 ( ) ) IN METHOD_2 ( ) ( BLOCK BLOCK ( IF IF ( COND VAR_1 || ( METHOD_3 ( VAR_2 ) ) ) COND VAR_1 || ( METHOD_3 ( VAR_2 ) ) ( THEN THEN ( IF IF ( COND ! ( VAR_2 . METHOD_4 ( ) ) ) COND ! ( VAR_2 . METHOD_4 ( ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( VAR_2 ) == null ) && ( ! ( TYPE_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( VAR_1 ) ) . isEmpty ( ) ) ) ) COND ( ( VAR_2 ) == null ) && ( ! ( TYPE_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( VAR_1 ) ) . isEmpty ( ) ) ) ( THEN THEN (  this . VAR_1 = VAR_1 )  this . VAR_1 = VAR_1 (  this . VAR_2 = ( TYPE_2 . isEmpty ( VAR_1 ) ) ? VAR_3 . Collections < java.lang.String > METHOD_4 ( ) : TYPE_1 . METHOD_3 ( VAR_1 ) )  this . VAR_2 = ( TYPE_2 . isEmpty ( VAR_1 ) ) ? VAR_3 . Collections < java.lang.String > METHOD_4 ( ) : TYPE_1 . METHOD_3 ( VAR_1 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME status ) NAME status ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VmTemplate ) TYPE org.ovirt.engine.core.common.businessentities.VmTemplate ( NAME VAR_3 ) NAME VAR_3 ( INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . get ( VAR_1 ) ) INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . get ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_3 != null ) COND VAR_3 != null ( THEN THEN ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN (  VAR_2 . METHOD_3 ( VAR_3 , VAR_3 . getStatus ( ) ) )  VAR_2 . METHOD_3 ( VAR_3 , VAR_3 . getStatus ( ) ) ) THEN THEN ) IF IF (  VAR_3 . METHOD_4 ( status ) )  VAR_3 . METHOD_4 ( status ) (  org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_5 ( VAR_3 ) )  org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_5 ( VAR_3 ) ) THEN THEN ( ELSE ELSE (  VAR_4 . METHOD_6 ( STRING_1 , status ) )  VAR_4 . METHOD_6 ( STRING_1 , status ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1.ValidationResult ) RETURN TYPE_1.ValidationResult ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME value ) NAME value ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_2 ( java.lang.Integer . METHOD_3 ( METHOD_4 ( ) . getEntity ( ) . toString ( ) ) ) ) INIT = VAR_2 . METHOD_2 ( java.lang.Integer . METHOD_3 ( METHOD_4 ( ) . getEntity ( ) . toString ( ) ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1.ValidationResult ) TYPE TYPE_1.ValidationResult ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_1 . ValidationResult ( ) ) INIT = new TYPE_1 . ValidationResult ( ) ) VAR VAR (  VAR_3 . METHOD_5 ( VAR_1 ) )  VAR_3 . METHOD_5 ( VAR_1 ) (  VAR_3 . METHOD_6 ( TYPE_2 . METHOD_7 ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . METHOD_8 ( ) . METHOD_9 ( ) ) ) )  VAR_3 . METHOD_6 ( TYPE_2 . METHOD_7 ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . METHOD_8 ( ) . METHOD_9 ( ) ) ) (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN org.ovirt.engine.core.common.businessentities.VM ) RETURN org.ovirt.engine.core.common.businessentities.VM ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( command ) )  METHOD_2 ( command ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = command . getParameters ( ) ) INIT = command . getParameters ( ) ) VAR VAR (  VAR_3 . METHOD_3 ( VAR_1 ) )  VAR_3 . METHOD_3 ( VAR_1 ) (  VAR_3 . METHOD_4 ( VAR_2 ) )  VAR_3 . METHOD_4 ( VAR_2 ) (  command . METHOD_5 ( ) )  command . METHOD_5 ( ) ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ( INIT = VAR_4 . get ( command . getParameters ( ) . METHOD_6 ( ) ) ) INIT = VAR_4 . get ( command . getParameters ( ) . METHOD_6 ( ) ) ) VAR VAR (  return vm ; )  return vm ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.uicommonweb.UICommand ) TYPE org.ovirt.engine.ui.uicommonweb.UICommand ( NAME command ) NAME command ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  super . METHOD_1 ( command ) )  super . METHOD_1 ( command ) ( IF IF ( COND TYPE_1 . METHOD_2 ( command . getName ( ) , STRING_1 ) ) COND TYPE_1 . METHOD_2 ( command . getName ( ) , STRING_1 ) ( THEN THEN (  METHOD_3 ( ) )  METHOD_3 ( ) ) THEN THEN ) IF IF ( IF IF ( COND TYPE_1 . METHOD_2 ( command . getName ( ) , STRING_2 ) ) COND TYPE_1 . METHOD_2 ( command . getName ( ) , STRING_2 ) ( THEN THEN (  METHOD_4 ( ) )  METHOD_4 ( ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE float ) TYPE float ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME vds ) NAME vds ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_1 . METHOD_2 ( ( ( ( ( vds . METHOD_3 ( ) ) - 1 ) * ( ( VAR_3 ) - 1 ) ) / ( VAR_1 - 1 ) ) ) ) INIT = TYPE_1 . METHOD_2 ( ( ( ( ( vds . METHOD_3 ( ) ) - 1 ) * ( ( VAR_3 ) - 1 ) ) / ( VAR_1 - 1 ) ) ) ) VAR VAR (  return ( VAR_3 ) - VAR_2 ; )  return ( VAR_3 ) - VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME sender ) NAME sender ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME args ) NAME args ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 . METHOD_2 ( VAR_2 ) ) COND VAR_1 . METHOD_2 ( VAR_2 ) ( THEN THEN ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Version ) TYPE org.ovirt.engine.core.compat.Version ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_3 ( ( ( TYPE_3 ) ( args ) ) . METHOD_4 ( ) ) ) INIT = METHOD_3 ( ( ( TYPE_3 ) ( args ) ) . METHOD_4 ( ) ) ) VAR VAR (  METHOD_5 ( VAR_3 ) )  METHOD_5 ( VAR_3 ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND VAR_1 . METHOD_2 ( VAR_4 ) ) COND VAR_1 . METHOD_2 ( VAR_4 ) ( THEN THEN ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_5 ) NAME VAR_5 ( INIT = ( ( TYPE_3 ) ( args ) ) . METHOD_4 ( ) ) INIT = ( ( TYPE_3 ) ( args ) ) . METHOD_4 ( ) ) VAR VAR (  TYPE_4 . METHOD_6 ( VAR_5 ) )  TYPE_4 . METHOD_6 ( VAR_5 ) ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME client ) NAME client ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.Integer ) TYPE java.lang.Integer ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( VAR_3 < java.lang.Integer > METHOD_2 ( VAR_4 ) ) * INT_1 ) INIT = ( VAR_3 < java.lang.Integer > METHOD_2 ( VAR_4 ) ) * INT_1 ) VAR VAR (  client . METHOD_3 ( VAR_2 ) )  client . METHOD_3 ( VAR_2 ) (  client . METHOD_4 ( VAR_2 ) )  client . METHOD_4 ( VAR_2 ) (  client . METHOD_5 ( VAR_1 , VAR_5 ) )  client . METHOD_5 ( VAR_1 , VAR_5 ) ( TRY TRY ( BLOCK BLOCK (  client . METHOD_1 ( ) )  client . METHOD_1 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ( BLOCK BLOCK (  log . METHOD_6 ( java.lang.String . METHOD_7 ( STRING_1 , VAR_1 , e . METHOD_8 ( ) ) ) )  log . METHOD_6 ( java.lang.String . METHOD_7 ( STRING_1 , VAR_1 , e . METHOD_8 ( ) ) ) (  throw new TYPE_2 ( e ) ; )  throw new TYPE_2 ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.Map<java.lang.String,java.lang.String> ) RETURN java.util.Map<java.lang.String,java.lang.String> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) == null ) COND ( VAR_1 ) == null ( THEN THEN (  VAR_1 = super . METHOD_1 ( ) )  VAR_1 = super . METHOD_1 ( ) (  VAR_1 . put ( TYPE_1 . name ( ) . METHOD_2 ( ) , TYPE_2 . getParameters ( ) . METHOD_3 ( ) ) )  VAR_1 . put ( TYPE_1 . name ( ) . METHOD_2 ( ) , TYPE_2 . getParameters ( ) . METHOD_3 ( ) ) ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME validator ) NAME validator ( INIT = new TYPE_1 ( VAR_1 , METHOD_2 ( ) ) ) INIT = new TYPE_1 ( VAR_1 , METHOD_2 ( ) ) ) VAR VAR (  return ( ( validate ( validator . METHOD_3 ( ) ) ) && ( validate ( validator . METHOD_4 ( ) ) ) ) && ( validate ( validator . METHOD_5 ( ) ) ) ; )  return ( ( validate ( validator . METHOD_3 ( ) ) ) && ( validate ( validator . METHOD_4 ( ) ) ) ) && ( validate ( validator . METHOD_5 ( ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_1 ) ( METHOD_2 ( ) ) ) ) INIT = ( ( TYPE_1 ) ( METHOD_2 ( ) ) ) ) VAR VAR ( IF IF ( COND ( VAR_1 != null ) && ( ! ( VAR_1 . METHOD_3 ( ) ) ) ) COND ( VAR_1 != null ) && ( ! ( VAR_1 . METHOD_3 ( ) ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  METHOD_4 ( ) )  METHOD_4 ( ) (  METHOD_5 ( ) . METHOD_6 ( true ) )  METHOD_5 ( ) . METHOD_6 ( true ) (  METHOD_7 ( ) )  METHOD_7 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1.DiskImage ) RETURN TYPE_1.DiskImage ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.DiskImage ) TYPE TYPE_1.DiskImage ( NAME disk ) NAME disk ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  disk . METHOD_3 ( true ) )  disk . METHOD_3 ( true ) (  disk . METHOD_4 ( VAR_1 ) )  disk . METHOD_4 ( VAR_1 ) (  org.mockito.Mockito.when ( VAR_2 . get ( VAR_3 ) ) . thenReturn ( disk ) )  org.mockito.Mockito.when ( VAR_2 . get ( VAR_3 ) ) . thenReturn ( disk ) (  org.mockito.Mockito.when ( VAR_4 . METHOD_5 ( TYPE_2 . any ( VAR_5 . Integer class ) , TYPE_2 . any ( VAR_6 . Version class ) ) ) . thenReturn ( new TYPE_3 < > ( VAR_7 ) ) )  org.mockito.Mockito.when ( VAR_4 . METHOD_5 ( TYPE_2 . any ( VAR_5 . Integer class ) , TYPE_2 . any ( VAR_6 . Version class ) ) ) . thenReturn ( new TYPE_3 < > ( VAR_7 ) ) (  return disk ; )  return disk ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDS> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDS> ( NAME hosts ) NAME hosts ( INIT = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VDS > ) ( returnValue ) ) ) INIT = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VDS > ) ( returnValue ) ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_1 ( hosts ) ) INIT = METHOD_1 ( hosts ) ) VAR VAR (  hosts . add ( 0 , null ) )  hosts . add ( 0 , null ) (  VAR_2 . METHOD_2 ( ) . setItems ( hosts ) )  VAR_2 . METHOD_2 ( ) . setItems ( hosts ) (  VAR_2 . METHOD_2 ( ) . setSelectedItem ( VAR_1 ) )  VAR_2 . METHOD_2 ( ) . setSelectedItem ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2.VdcActionType ) TYPE TYPE_2.VdcActionType ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2.VdcActionParametersBase ) TYPE TYPE_2.VdcActionParametersBase ( NAME params ) NAME params ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME action ) NAME action ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  METHOD_2 ( VAR_1 , params ) )  METHOD_2 ( VAR_1 , params ) ( IF IF ( COND action != null ) COND action != null ( THEN THEN (  action . METHOD_3 ( TYPE_4 . METHOD_4 ( TYPE_5 ) ) )  action . METHOD_3 ( TYPE_4 . METHOD_4 ( TYPE_5 ) ) (  return TYPE_1 . status ( VAR_2 ) . entity ( action ) . METHOD_5 ( ) ; )  return TYPE_1 . status ( VAR_2 ) . entity ( action ) . METHOD_5 ( ) ; ) THEN THEN ( ELSE ELSE (  return TYPE_1 . status ( VAR_2 ) . METHOD_5 ( ) ; )  return TYPE_1 . status ( VAR_2 ) . METHOD_5 ( ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ( BLOCK BLOCK (  return METHOD_6 ( VAR_3 class , e , false ) ; )  return METHOD_6 ( VAR_3 class , e , false ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( java.lang.String ) ( result ) ) ) INIT = ( ( java.lang.String ) ( result ) ) ) VAR VAR ( IF IF ( COND ( VAR_1 != null ) && ( ( VAR_1 . length ( ) ) > 0 ) ) COND ( VAR_1 != null ) && ( ( VAR_1 . length ( ) ) > 0 ) ( THEN THEN (  METHOD_1 ( ) . setEntity ( VAR_1 ) )  METHOD_1 ( ) . setEntity ( VAR_1 ) (  METHOD_2 ( ) . setEntity ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_3 ( ) ) )  METHOD_2 ( ) . setEntity ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_3 ( ) ) ) THEN THEN ( ELSE ELSE (  METHOD_2 ( ) . setEntity ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_4 ( ) ) )  METHOD_2 ( ) . setEntity ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_4 ( ) ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME add ) NAME add ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME cluster ) NAME cluster ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_1 ( cluster , METHOD_2 ( ) ) )  METHOD_1 ( cluster , METHOD_2 ( ) ) (  METHOD_3 ( VAR_1 class , cluster ) )  METHOD_3 ( VAR_1 class , cluster ) ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StoragePool ) TYPE org.ovirt.engine.core.common.businessentities.StoragePool ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_4 ( cluster ) ) INIT = METHOD_4 ( cluster ) ) VAR VAR (  return METHOD_5 ( VAR_3 , METHOD_6 ( cluster , VAR_2 ) , new TYPE_3 < org.ovirt.engine.core.compat.Guid > ( VAR_4 , VAR_5 . IdQueryParameters class ) ) ; )  return METHOD_5 ( VAR_3 , METHOD_6 ( cluster , VAR_2 ) , new TYPE_3 < org.ovirt.engine.core.compat.Guid > ( VAR_4 , VAR_5 . IdQueryParameters class ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_2 . METHOD_2 ( model ) ) INIT = TYPE_2 . METHOD_2 ( model ) ) VAR VAR ( IF IF ( COND VAR_3 != null ) COND VAR_3 != null ( THEN THEN ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( INIT = java.lang.String . METHOD_3 ( STRING_1 , VAR_3 , VAR_2 , VAR_1 ) ) INIT = java.lang.String . METHOD_3 ( STRING_1 , VAR_3 , VAR_2 , VAR_1 ) ) VAR VAR (  METHOD_4 ( model , VAR_1 , VAR_4 ) )  METHOD_4 ( model , VAR_1 , VAR_4 ) ) THEN THEN ) IF IF (  return model ; )  return model ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND TYPE_1 . METHOD_2 ( name ) ) COND TYPE_1 . METHOD_2 ( name ) ( THEN THEN (  VAR_1 . add ( TYPE_2 . name ( ) ) )  VAR_1 . add ( TYPE_2 . name ( ) ) (  return false ; )  return false ; ) THEN THEN ) IF IF ( IF IF ( COND ! ( METHOD_3 ( VAR_1 , VAR_3 ) ) ) COND ! ( METHOD_3 ( VAR_1 , VAR_3 ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( IF IF ( COND ! ( METHOD_4 ( VAR_1 ) ) ) COND ! ( METHOD_4 ( VAR_1 ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . getParameters ( ) . METHOD_2 ( new TYPE_2 ( VAR_1 . Disk , TYPE_1 . getParameters ( ) . METHOD_3 ( ) ) ) )  TYPE_1 . getParameters ( ) . METHOD_2 ( new TYPE_2 ( VAR_1 . Disk , TYPE_1 . getParameters ( ) . METHOD_3 ( ) ) ) ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.compat.Guid> ) TYPE java.util.List<org.ovirt.engine.core.compat.Guid> ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_4 ( ) ) INIT = METHOD_4 ( ) ) VAR VAR ( IF IF ( COND VAR_2 . isEmpty ( ) ) COND VAR_2 . isEmpty ( ) ( THEN THEN (  log . METHOD_5 ( STRING_1 ) )  log . METHOD_5 ( STRING_1 ) (  TYPE_1 . METHOD_6 ( true ) )  TYPE_1 . METHOD_6 ( true ) (  METHOD_7 ( VAR_3 ) )  METHOD_7 ( VAR_3 ) (  METHOD_8 ( TYPE_1 . getParameters ( ) . METHOD_9 ( ) ) )  METHOD_8 ( TYPE_1 . getParameters ( ) . METHOD_9 ( ) ) ) THEN THEN ( ELSE ELSE (  log . error ( STRING_2 , VAR_2 ) )  log . error ( STRING_2 , VAR_2 ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source != null ? source : new java.util.ArrayList < TYPE_1 > ( ) ; )  return source != null ? source : new java.util.ArrayList < TYPE_1 > ( ) ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : new java.util.ArrayList < TYPE_1 > ( ) ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : new java.util.ArrayList < TYPE_1 > ( ) ; } } (  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( ) , null ) ) )  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( ) , null ) ) (  METHOD_3 ( cmd , VAR_1 ) )  METHOD_3 ( cmd , VAR_1 ) (  METHOD_4 ( false ) )  METHOD_4 ( false ) (  TYPE_3 . METHOD_5 ( cmd . validate ( ) ) )  TYPE_3 . METHOD_5 ( cmd . validate ( ) ) (  METHOD_4 ( true ) )  METHOD_4 ( true ) (  TYPE_3 . METHOD_5 ( cmd . validate ( ) ) )  TYPE_3 . METHOD_5 ( cmd . validate ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  METHOD_3 ( false , VAR_1 ) )  METHOD_3 ( false , VAR_1 ) (  cmd . METHOD_4 ( ) )  cmd . METHOD_4 ( ) (  org.mockito.Mockito . METHOD_5 ( VAR_2 , org.mockito.Mockito . METHOD_6 ( ) ) . METHOD_7 ( TYPE_1 . any ( VAR_3 . Guid class ) ) )  org.mockito.Mockito . METHOD_5 ( VAR_2 , org.mockito.Mockito . METHOD_6 ( ) ) . METHOD_7 ( TYPE_1 . any ( VAR_3 . Guid class ) ) (  TYPE_2 . assertEquals ( VAR_4 , cmd . METHOD_8 ( ) ) )  TYPE_2 . assertEquals ( VAR_4 , cmd . METHOD_8 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  super . METHOD_1 ( VAR_1 ) )  super . METHOD_1 ( VAR_1 ) (  VAR_2 . METHOD_2 ( ( ( VAR_1 != null ) && ( ! ( VAR_1 . isEmpty ( ) ) ) ) ) )  VAR_2 . METHOD_2 ( ( ( VAR_1 != null ) && ( ! ( VAR_1 . isEmpty ( ) ) ) ) ) (  VAR_2 . METHOD_3 ( ) )  VAR_2 . METHOD_3 ( ) (  VAR_2 . add ( new TYPE_1 ( VAR_1 ) ) )  VAR_2 . add ( new TYPE_1 ( VAR_1 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE TYPE_2<?extendsTYPE_1> ) TYPE TYPE_2<?extendsTYPE_1> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_4 . METHOD_2 ( model ) ) INIT = TYPE_4 . METHOD_2 ( model ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_4 . METHOD_3 ( model , VAR_1 ) ) INIT = TYPE_4 . METHOD_3 ( model , VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_3 != null ) COND VAR_3 != null ( THEN THEN ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_5 ( VAR_3 , VAR_2 . METHOD_4 ( ) ) ) INIT = new TYPE_5 ( VAR_3 , VAR_2 . METHOD_4 ( ) ) ) VAR VAR (  model . METHOD_1 ( VAR_4 . METHOD_5 ( ) ) )  model . METHOD_1 ( VAR_4 . METHOD_5 ( ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME entity ) NAME entity ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_3> ) TYPE java.util.List<TYPE_3> ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( entity . METHOD_3 ( ) . getValue ( ) , entity . METHOD_4 ( ) ) ) INIT = METHOD_2 ( entity . METHOD_3 ( ) . getValue ( ) , entity . METHOD_4 ( ) ) ) VAR VAR ( IF IF ( COND ! ( VAR_1 . isEmpty ( ) ) ) COND ! ( VAR_1 . isEmpty ( ) ) ( THEN THEN ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_4 ( ) ) INIT = new TYPE_4 ( ) ) VAR VAR (  VAR_2 . METHOD_5 ( ) . METHOD_6 ( VAR_1 ) )  VAR_2 . METHOD_5 ( ) . METHOD_6 ( VAR_1 ) (  model . METHOD_7 ( VAR_2 ) )  model . METHOD_7 ( VAR_2 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME vds ) NAME vds ( INIT = null ) INIT = null ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ( INIT = new org.ovirt.engine.core.common.businessentities.VM ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.VM ( ) ) VAR VAR (  vm . METHOD_2 ( VAR_2 ) )  vm . METHOD_2 ( VAR_2 ) ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 ) INIT = VAR_4 ) VAR VAR (  VAR_1 . METHOD_3 ( vds ) )  VAR_1 . METHOD_3 ( vds ) (  VAR_1 . METHOD_4 ( VAR_3 ) )  VAR_1 . METHOD_4 ( VAR_3 ) (  VAR_1 . METHOD_5 ( vm ) )  VAR_1 . METHOD_5 ( vm ) ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_1 . METHOD_6 ( ) ) INIT = VAR_1 . METHOD_6 ( ) ) VAR VAR (  TYPE_3 . METHOD_7 ( VAR_5 ) )  TYPE_3 . METHOD_7 ( VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN java.util.List<java.lang.String> ) RETURN java.util.List<java.lang.String> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1<?> ) TYPE TYPE_1<?> ( NAME command ) NAME command ) VAR VAR ( VAR VAR ( TYPE TYPE_2.VdcBllMessages ) TYPE TYPE_2.VdcBllMessages ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_3 ) NAME VAR_3 ( INIT = command . getReturnValue ( ) . METHOD_2 ( ) ) INIT = command . getReturnValue ( ) . METHOD_2 ( ) ) VAR VAR (  TYPE_3 . METHOD_3 ( TYPE_4 . METHOD_4 ( STRING_1 , TYPE_5 . METHOD_5 ( VAR_1 ) , VAR_2 . name ( ) , VAR_3 ) , VAR_3 . METHOD_6 ( VAR_2 . name ( ) ) ) )  TYPE_3 . METHOD_3 ( TYPE_4 . METHOD_4 ( STRING_1 , TYPE_5 . METHOD_5 ( VAR_1 ) , VAR_2 . name ( ) , VAR_3 ) , VAR_3 . METHOD_6 ( VAR_2 . name ( ) ) ) (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.HashMap<java.lang.String,java.lang.Object> ) TYPE java.util.HashMap<java.lang.String,java.lang.Object> ( NAME VAR_3 ) NAME VAR_3 ( INIT = new java.util.HashMap < > ( ) ) INIT = new java.util.HashMap < > ( ) ) VAR VAR (  VAR_3 . put ( STRING_1 , VAR_1 ) )  VAR_3 . put ( STRING_1 , VAR_1 ) (  VAR_3 . put ( STRING_2 , VAR_2 ) )  VAR_3 . put ( STRING_2 , VAR_2 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_3 ( STRING_3 ) . METHOD_2 ( STRING_4 , VAR_3 ) . METHOD_3 ( ) ) INIT = new TYPE_3 ( STRING_3 ) . METHOD_2 ( STRING_4 , VAR_3 ) . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.Object> ) TYPE java.util.Map<java.lang.String,java.lang.Object> ( NAME response ) NAME response ( INIT = new TYPE_4 ( this . client , VAR_4 ) ) INIT = new TYPE_4 ( this . client , VAR_4 ) ) VAR VAR (  return new TYPE_1 ( response ) ; )  return new TYPE_1 ( response ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( TYPE_2 . getInstance ( ) . METHOD_4 ( TYPE_1 . getParameters ( ) . METHOD_5 ( ) , null , TYPE_1 . getParameters ( ) . METHOD_6 ( ) ) ) )  VAR_1 = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( TYPE_2 . getInstance ( ) . METHOD_4 ( TYPE_1 . getParameters ( ) . METHOD_5 ( ) , null , TYPE_1 . getParameters ( ) . METHOD_6 ( ) ) ) (  TYPE_1 . METHOD_7 ( ) )  TYPE_1 . METHOD_7 ( ) (  METHOD_8 ( ( VAR_1 . METHOD_9 ( ) ? METHOD_10 ( VAR_1 . METHOD_11 ( ) ) : METHOD_12 ( VAR_1 . METHOD_11 ( ) ) ) ) )  METHOD_8 ( ( VAR_1 . METHOD_9 ( ) ? METHOD_10 ( VAR_1 . METHOD_11 ( ) ) : METHOD_12 ( VAR_1 . METHOD_11 ( ) ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ( INIT = ( ( TYPE_1 ) ( target ) ) ) INIT = ( ( TYPE_1 ) ( target ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDSGroup> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDSGroup> ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( returnValue ) ) ) INIT = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( returnValue ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDSGroup> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDSGroup> ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_1 ( VAR_1 , vm . METHOD_2 ( ) ) ) INIT = TYPE_2 . METHOD_1 ( VAR_1 , vm . METHOD_2 ( ) ) ) VAR VAR (  model . METHOD_3 ( model , TYPE_3 . METHOD_4 ( VAR_3 ) , VAR_2 , vm . METHOD_5 ( ) ) )  model . METHOD_3 ( model , TYPE_3 . METHOD_4 ( VAR_3 ) , VAR_2 , vm . METHOD_5 ( ) ) (  METHOD_6 ( ) )  METHOD_6 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME event ) NAME event ) VAR VAR ( VAR VAR ( TYPE TYPE_3<TYPE_1> ) TYPE TYPE_3<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4<TYPE_1> ) TYPE TYPE_4<TYPE_1> ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( event , VAR_1 ) ) INIT = METHOD_2 ( event , VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN ( TRY TRY ( BLOCK BLOCK (  return VAR_2 . get ( ) ; )  return VAR_2 . get ( ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_3 . METHOD_3 ( STRING_1 , event . getStoragePoolId ( ) , e . METHOD_4 ( ) ) )  VAR_3 . METHOD_3 ( STRING_1 , event . getStoragePoolId ( ) , e . METHOD_4 ( ) ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN org.ovirt.engine.core.common.businessentities.StorageDomain ) RETURN org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ) TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME storageDomain ) NAME storageDomain ( INIT = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) ) VAR VAR (  storageDomain . setId ( VAR_1 ) )  storageDomain . setId ( VAR_1 ) (  storageDomain . METHOD_2 ( VAR_2 ) )  storageDomain . METHOD_2 ( VAR_2 ) (  org.mockito.Mockito.when ( VAR_3 . get ( TYPE_1 . any ( VAR_4 . Guid class ) ) ) . thenReturn ( storageDomain ) )  org.mockito.Mockito.when ( VAR_3 . get ( TYPE_1 . any ( VAR_4 . Guid class ) ) ) . thenReturn ( storageDomain ) (  org.mockito.Mockito.when ( VAR_3 . METHOD_3 ( VAR_1 , VAR_2 ) ) . thenReturn ( storageDomain ) )  org.mockito.Mockito.when ( VAR_3 . METHOD_3 ( VAR_1 , VAR_2 ) ) . thenReturn ( storageDomain ) (  return storageDomain ; )  return storageDomain ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDSGroup> ) RETURN java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDSGroup> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDSGroup> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDSGroup> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ( ) ) INIT = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME item ) NAME item ( IN METHOD_2 ( ) . METHOD_3 ( ) ) IN METHOD_2 ( ) . METHOD_3 ( ) ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_1 ) ( item ) ) ) INIT = ( ( TYPE_1 ) ( item ) ) ) VAR VAR ( IF IF ( COND VAR_2 . METHOD_4 ( ) ) COND VAR_2 . METHOD_4 ( ) ( THEN THEN (  VAR_1 . add ( VAR_2 . getEntity ( ) ) )  VAR_1 . add ( VAR_2 . getEntity ( ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( METHOD_2 ( ) , VAR_2 ) ) INIT = new TYPE_1 ( METHOD_2 ( ) , VAR_2 ) ) VAR VAR (  VAR_1 . METHOD_3 ( new java.util.ArrayList < TYPE_3 > ( ) ) )  VAR_1 . METHOD_3 ( new java.util.ArrayList < TYPE_3 > ( ) ) ( IF IF ( COND ( getParameters ( ) ) != null ) COND ( getParameters ( ) ) != null ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( IN getParameters ( ) ) IN getParameters ( ) ( BLOCK BLOCK (  VAR_1 . getParameters ( ) . add ( VAR_3 . METHOD_1 ( ) ) )  VAR_1 . getParameters ( ) . add ( VAR_3 . METHOD_1 ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME equals ) NAME equals ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME obj ) NAME obj ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( this ) == obj ) COND ( this ) == obj ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ( IF IF ( COND ! ( obj instanceof TYPE_1 ) ) COND ! ( obj instanceof TYPE_1 ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME other ) NAME other ( INIT = ( ( TYPE_1 ) ( obj ) ) ) INIT = ( ( TYPE_1 ) ( obj ) ) ) VAR VAR (  return ( TYPE_2 . equals ( VAR_1 , VAR_2 ) ) && ( TYPE_2 . equals ( VAR_3 , VAR_4 ) ) ; )  return ( TYPE_2 . equals ( VAR_1 , VAR_2 ) ) && ( TYPE_2 . equals ( VAR_3 , VAR_4 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) . METHOD_3 ( new TYPE_1 [ ] { new TYPE_2 ( ) } ) )  METHOD_2 ( ) . METHOD_3 ( new TYPE_1 [ ] { new TYPE_2 ( ) } ) (  METHOD_4 ( ) . METHOD_3 ( new TYPE_1 [ ] { new TYPE_2 ( ) } ) )  METHOD_4 ( ) . METHOD_3 ( new TYPE_1 [ ] { new TYPE_2 ( ) } ) (  return ( METHOD_2 ( ) . METHOD_5 ( ) ) && ( METHOD_4 ( ) . METHOD_5 ( ) ) ; )  return ( METHOD_2 ( ) . METHOD_5 ( ) ) && ( METHOD_4 ( ) . METHOD_5 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  command . getParameters ( ) . METHOD_2 ( METHOD_3 ( ) ) )  command . getParameters ( ) . METHOD_2 ( METHOD_3 ( ) ) (  METHOD_4 ( VAR_1 ) )  METHOD_4 ( VAR_1 ) (  METHOD_5 ( VAR_2 , org.ovirt.engine.core.compat.Guid . METHOD_6 ( ) , VAR_1 , false ) )  METHOD_5 ( VAR_2 , org.ovirt.engine.core.compat.Guid . METHOD_6 ( ) , VAR_1 , false ) (  command . METHOD_7 ( ) )  command . METHOD_7 ( ) (  TYPE_1 . assertEquals ( command . METHOD_8 ( ) . size ( ) , 1 ) )  TYPE_1 . assertEquals ( command . METHOD_8 ( ) . size ( ) , 1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.ArrayList<TYPE_1> ) RETURN java.util.ArrayList<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<TYPE_1> ) TYPE java.util.ArrayList<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < TYPE_1 > ( ) ) INIT = new java.util.ArrayList < TYPE_1 > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_2.DiskImage ) TYPE TYPE_2.DiskImage ( NAME diskImage ) NAME diskImage ( IN METHOD_2 ( ) ) IN METHOD_2 ( ) ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_2 . METHOD_3 ( diskImage ) )  VAR_2 . METHOD_3 ( diskImage ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME storageDomain ) NAME storageDomain ( INIT = new TYPE_3 ( ) ) INIT = new TYPE_3 ( ) ) VAR VAR (  storageDomain . setSelectedItem ( METHOD_4 ( ) ) )  storageDomain . setSelectedItem ( METHOD_4 ( ) ) (  VAR_2 . METHOD_5 ( storageDomain ) )  VAR_2 . METHOD_5 ( storageDomain ) (  VAR_1 . add ( VAR_2 ) )  VAR_1 . add ( VAR_2 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) (  dao = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) )  dao = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) (  VAR_2 = new TYPE_1 ( ) )  VAR_2 = new TYPE_1 ( ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_2 ( TYPE_3 . METHOD_4 ( ) ) ) INIT = new TYPE_2 ( TYPE_3 . METHOD_4 ( ) ) ) VAR VAR (  VAR_2 . METHOD_5 ( ( STRING_1 + ( ( VAR_3 . METHOD_6 ( ) ) % ( VAR_4 ) ) ) ) )  VAR_2 . METHOD_5 ( ( STRING_1 + ( ( VAR_3 . METHOD_6 ( ) ) % ( VAR_4 ) ) ) ) (  VAR_2 . METHOD_7 ( STRING_2 ) )  VAR_2 . METHOD_7 ( STRING_2 ) (  VAR_5 = dao . get ( new org.ovirt.engine.core.compat.Guid ( STRING_3 ) ) )  VAR_5 = dao . get ( new org.ovirt.engine.core.compat.Guid ( STRING_3 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.Network> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.Network> ( NAME VAR_1 ) NAME VAR_1 ( INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( getStoragePoolId ( ) . getValue ( ) ) ) INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( getStoragePoolId ( ) . getValue ( ) ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.Network ) TYPE org.ovirt.engine.core.common.businessentities.Network ( NAME VAR_2 ) NAME VAR_2 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  METHOD_4 ( ) . METHOD_5 ( VAR_2 ) )  METHOD_4 ( ) . METHOD_5 ( VAR_2 ) (  org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_6 ( VAR_2 . getId ( ) ) )  org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_6 ( VAR_2 . getId ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  METHOD_4 ( ) . METHOD_7 ( ) )  METHOD_4 ( ) . METHOD_7 ( ) (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StoragePool> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StoragePool> ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ) ( returnValue ) ) ) INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ) ( returnValue ) ) ) VAR VAR ( IF IF ( COND ( VAR_1 != null ) && ( ! ( VAR_1 . isEmpty ( ) ) ) ) COND ( VAR_1 != null ) && ( ! ( VAR_1 . isEmpty ( ) ) ) ( THEN THEN (  METHOD_1 ( ) . setSelectedItem ( VAR_1 . get ( 0 ) ) )  METHOD_1 ( ) . setSelectedItem ( VAR_1 . get ( 0 ) ) ) THEN THEN ( ELSE ELSE ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StoragePool ) TYPE org.ovirt.engine.core.common.businessentities.StoragePool ( NAME VAR_2 ) NAME VAR_2 ( INIT = new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ) VAR VAR (  VAR_2 . setId ( VAR_3 ) )  VAR_2 . setId ( VAR_3 ) (  VAR_2 . METHOD_2 ( STRING_1 ) )  VAR_2 . METHOD_2 ( STRING_1 ) (  METHOD_1 ( ) . setSelectedItem ( VAR_2 ) )  METHOD_1 ( ) . setSelectedItem ( VAR_2 ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.uicommonweb.models.EntityModel ) TYPE org.ovirt.engine.ui.uicommonweb.models.EntityModel ( NAME object ) NAME object ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( object . getEntity ( ) ) instanceof TYPE_2 ) COND ( object . getEntity ( ) ) instanceof TYPE_2 ( THEN THEN (  return ( ( TYPE_2 ) ( object . getEntity ( ) ) ) . METHOD_2 ( ) ; )  return ( ( TYPE_2 ) ( object . getEntity ( ) ) ) . METHOD_2 ( ) ; ) THEN THEN ( ELSE ELSE ( IF IF ( COND ( object . getEntity ( ) ) instanceof TYPE_3 . DiskImage ) COND ( object . getEntity ( ) ) instanceof TYPE_3 . DiskImage ( THEN THEN (  return ( ( TYPE_3 . DiskImage ) ( object . getEntity ( ) ) ) . METHOD_3 ( ) ; )  return ( ( TYPE_3 . DiskImage ) ( object . getEntity ( ) ) ) . METHOD_3 ( ) ; ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.ui.uicommonweb.models.EntityModel ) TYPE org.ovirt.engine.ui.uicommonweb.models.EntityModel ( NAME a ) NAME a ( IN METHOD_2 ( ) ) IN METHOD_2 ( ) ( BLOCK BLOCK ( IF IF ( COND a . METHOD_3 ( ) ) COND a . METHOD_3 ( ) ( THEN THEN ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_1 ) ( a . getEntity ( ) ) ) ) INIT = ( ( TYPE_1 ) ( a . getEntity ( ) ) ) ) VAR VAR (  VAR_1 . append ( VAR_2 . toString ( ) ) )  VAR_1 . append ( VAR_2 . toString ( ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return ! ( VAR_1 . equals ( STRING_1 ) ) ? TYPE_1 . valueOf ( VAR_1 . toString ( ) ) : null ; )  return ! ( VAR_1 . equals ( STRING_1 ) ) ? TYPE_1 . valueOf ( VAR_1 . toString ( ) ) : null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME a ) NAME a ( IN VAR_2 . Linq < TYPE_1 > METHOD_2 ( METHOD_3 ( ) ) ) IN VAR_2 . Linq < TYPE_1 > METHOD_2 ( METHOD_3 ( ) ) ( BLOCK BLOCK ( IF IF ( COND ( a . METHOD_4 ( ) ) == ( VAR_3 ) ) COND ( a . METHOD_4 ( ) ) == ( VAR_3 ) ( THEN THEN (  VAR_1 += ( a . METHOD_5 ( ) ) + STRING_2 )  VAR_1 += ( a . METHOD_5 ( ) ) + STRING_2 ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_1 . METHOD_6 ( 0 , ( ( VAR_1 . length ( ) ) - 2 ) ) ; )  return VAR_1 . METHOD_6 ( 0 , ( ( VAR_1 . length ( ) ) - 2 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( RESOURCES RESOURCES ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( VAR_3 . METHOD_2 ( ) ) ) INIT = new TYPE_1 ( VAR_3 . METHOD_2 ( ) ) ) VAR VAR ) RESOURCES RESOURCES ( BLOCK BLOCK (  METHOD_3 ( ) )  METHOD_3 ( ) ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  VAR_5 . METHOD_4 ( TYPE_2 . METHOD_5 ( VAR_4 ) ) )  VAR_5 . METHOD_4 ( TYPE_2 . METHOD_5 ( VAR_4 ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source != null ? ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; )  return source != null ? ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; } } ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME params ) NAME params ( INIT = new TYPE_2 ( VAR_1 , VAR_2 ) ) INIT = new TYPE_2 ( VAR_1 , VAR_2 ) ) VAR VAR (  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_3 , params , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_3 , params , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_3 ( ) ) INIT = METHOD_3 ( ) ) VAR VAR (  VAR_1 = METHOD_4 ( VAR_1 , VAR_2 , VAR_3 [ 1 ] . toString ( ) ) )  VAR_1 = METHOD_4 ( VAR_1 , VAR_2 , VAR_3 [ 1 ] . toString ( ) ) (  METHOD_5 ( VAR_1 ) )  METHOD_5 ( VAR_1 ) (  VAR_4 . METHOD_6 ( ) )  VAR_4 . METHOD_6 ( ) ( TRY TRY ( BLOCK BLOCK (  resource . METHOD_7 ( ) )  resource . METHOD_7 ( ) (  METHOD_8 ( STRING_1 ) )  METHOD_8 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_5 ) NAME VAR_5 ( BLOCK BLOCK (  METHOD_9 ( VAR_5 . METHOD_10 ( ) ) )  METHOD_9 ( VAR_5 . METHOD_10 ( ) ) (  assertEquals ( INT_1 , VAR_5 . METHOD_10 ( ) . getStatus ( ) ) )  assertEquals ( INT_1 , VAR_5 . METHOD_10 ( ) . getStatus ( ) ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME instance ) NAME instance ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME obj ) NAME obj ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  obj . METHOD_2 ( instance . getStatus ( ) ) )  obj . METHOD_2 ( instance . getStatus ( ) ) (  obj . METHOD_3 ( instance . METHOD_4 ( ) ) )  obj . METHOD_3 ( instance . METHOD_4 ( ) ) (  obj . METHOD_5 ( instance . METHOD_6 ( ) ) )  obj . METHOD_5 ( instance . METHOD_6 ( ) ) (  obj . METHOD_7 ( instance . METHOD_8 ( ) ) )  obj . METHOD_7 ( instance . METHOD_8 ( ) ) (  return obj ; )  return obj ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) (  vm = new org.ovirt.engine.core.common.businessentities.VM ( ) )  vm = new org.ovirt.engine.core.common.businessentities.VM ( ) (  vm . METHOD_2 ( VAR_1 ) )  vm . METHOD_2 ( VAR_1 ) (  org.mockito.Mockito.when ( VAR_2 . METHOD_3 ( METHOD_4 ( ) , java.lang.Boolean . FALSE ) ) . thenReturn ( TYPE_1 . METHOD_5 ( vm ) ) )  org.mockito.Mockito.when ( VAR_2 . METHOD_3 ( METHOD_4 ( ) , java.lang.Boolean . FALSE ) ) . thenReturn ( TYPE_1 . METHOD_5 ( vm ) ) (  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( cmd ) . METHOD_6 ( ) )  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( cmd ) . METHOD_6 ( ) (  org.mockito.Mockito.doReturn ( METHOD_7 ( ) ) . when ( cmd ) . METHOD_7 ( ) )  org.mockito.Mockito.doReturn ( METHOD_7 ( ) ) . when ( cmd ) . METHOD_7 ( ) (  org.mockito.Mockito.doReturn ( METHOD_8 ( ) ) . when ( cmd ) . METHOD_8 ( ) )  org.mockito.Mockito.doReturn ( METHOD_8 ( ) ) . when ( cmd ) . METHOD_8 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( java.lang.Integer ) ( returnValue ) ) ) INIT = ( ( java.lang.Integer ) ( returnValue ) ) ) VAR VAR ( IF IF ( COND VAR_1 <= 1 ) COND VAR_1 <= 1 ( THEN THEN (  getModel ( ) . METHOD_3 ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_4 ( ) ) )  getModel ( ) . METHOD_3 ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_4 ( ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD (  TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( getModel ( ) , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { int VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) ; if ( VAR_1 <= 1 ) { getModel ( ) . METHOD_3 ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_4 ( ) ) ; } } } ) ) )  TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( getModel ( ) , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { int VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) ; if ( VAR_1 <= 1 ) { getModel ( ) . METHOD_3 ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_4 ( ) ) ; } } } ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.uicommonweb.UICommand ) TYPE org.ovirt.engine.ui.uicommonweb.UICommand ( NAME command ) NAME command ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  super . METHOD_1 ( command ) )  super . METHOD_1 ( command ) ( IF IF ( COND command == ( METHOD_2 ( ) ) ) COND command == ( METHOD_2 ( ) ) ( THEN THEN (  METHOD_3 ( ) )  METHOD_3 ( ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND command == ( METHOD_4 ( ) ) ) COND command == ( METHOD_4 ( ) ) ( THEN THEN (  METHOD_5 ( ) )  METHOD_5 ( ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND command == ( METHOD_6 ( ) ) ) COND command == ( METHOD_6 ( ) ) ( THEN THEN (  METHOD_7 ( ) )  METHOD_7 ( ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND TYPE_1 . METHOD_8 ( command . getName ( ) , VAR_1 ) ) COND TYPE_1 . METHOD_8 ( command . getName ( ) , VAR_1 ) ( THEN THEN (  METHOD_9 ( ) )  METHOD_9 ( ) ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_1 . METHOD_2 ( null ) )  VAR_1 . METHOD_2 ( null ) ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME VAR_2 ) NAME VAR_2 ( INIT = new org.ovirt.engine.core.common.businessentities.VDS ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.VDS ( ) ) VAR VAR (  VAR_2 . setId ( VAR_3 ) )  VAR_2 . setId ( VAR_3 ) (  VAR_1 . METHOD_3 ( VAR_2 ) )  VAR_1 . METHOD_3 ( VAR_2 ) ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_1 . METHOD_4 ( ) ) INIT = VAR_1 . METHOD_4 ( ) ) VAR VAR (  TYPE_2 . assertEquals ( VAR_3 , VAR_4 ) )  TYPE_2 . assertEquals ( VAR_3 , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  METHOD_3 ( ) )  METHOD_3 ( ) (  METHOD_4 ( ) )  METHOD_4 ( ) (  TYPE_2 . METHOD_5 ( getVm ( ) . METHOD_6 ( ) ) )  TYPE_2 . METHOD_5 ( getVm ( ) . METHOD_6 ( ) ) (  TYPE_3 . METHOD_7 ( getVm ( ) . getId ( ) ) )  TYPE_3 . METHOD_7 ( getVm ( ) . getId ( ) ) ( IF IF ( COND getParameters ( ) . METHOD_8 ( ) ) COND getParameters ( ) . METHOD_8 ( ) ( THEN THEN (  getParameters ( ) . METHOD_9 ( getVm ( ) ) )  getParameters ( ) . METHOD_9 ( getVm ( ) ) (  METHOD_10 ( getVm ( ) . getId ( ) ) )  METHOD_10 ( getVm ( ) . getId ( ) ) ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Version ) TYPE org.ovirt.engine.core.compat.Version ( NAME version ) NAME version ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.String> ) TYPE java.util.Map<java.lang.String,java.lang.String> ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 < java.util.Map > getValue ( VAR_1 , version . getValue ( ) ) ) INIT = VAR_4 < java.util.Map > getValue ( VAR_1 , version . getValue ( ) ) ) VAR VAR (  return java.lang.Boolean . METHOD_2 ( VAR_3 . METHOD_3 ( VAR_2 . name ( ) , VAR_3 . get ( VAR_2 . METHOD_4 ( ) . name ( ) ) ) ) ; )  return java.lang.Boolean . METHOD_2 ( VAR_3 . METHOD_3 ( VAR_2 . name ( ) , VAR_3 . get ( VAR_2 . METHOD_4 ( ) . name ( ) ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( java.util.List < java.lang.String > ) ( TYPE_1 . METHOD_2 ( VAR_2 ) ) ) ) INIT = ( ( java.util.List < java.lang.String > ) ( TYPE_1 . METHOD_2 ( VAR_2 ) ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_3 ) NAME VAR_3 ( INIT = new java.util.ArrayList < java.lang.String > ( ) ) INIT = new java.util.ArrayList < java.lang.String > ( ) ) VAR VAR (  VAR_3 . add ( null ) )  VAR_3 . add ( null ) (  VAR_3 . METHOD_3 ( VAR_1 ) )  VAR_3 . METHOD_3 ( VAR_1 ) (  METHOD_4 ( ) . setItems ( VAR_3 ) )  METHOD_4 ( ) . setItems ( VAR_3 ) (  METHOD_4 ( ) . setIsChangable ( false ) )  METHOD_4 ( ) . setIsChangable ( false ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_2 . add ( VAR_1 ) )  VAR_2 . add ( VAR_1 ) ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < ( VAR_3 . size ( ) ) ) COND i < ( VAR_3 . size ( ) ) ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK ( IF IF ( COND VAR_3 . get ( i ) . METHOD_2 ( ) . getId ( ) . equals ( VAR_1 . getId ( ) ) ) COND VAR_3 . get ( i ) . METHOD_2 ( ) . getId ( ) . equals ( VAR_1 . getId ( ) ) ( THEN THEN (  VAR_3 . METHOD_3 ( i ) )  VAR_3 . METHOD_3 ( i ) (  break ; )  break ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR FOR (  METHOD_4 ( VAR_1 ) )  METHOD_4 ( VAR_1 ) (  METHOD_5 ( ) . METHOD_6 ( this , VAR_4 ) )  METHOD_5 ( ) . METHOD_6 ( this , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( STRING_1 ) ) INIT = TYPE_2 . METHOD_2 ( STRING_1 ) ) VAR VAR (  dao . METHOD_3 ( VAR_1 ) )  dao . METHOD_3 ( VAR_1 ) ( VAR VAR ( TYPE java.util.List<TYPE_3> ) TYPE java.util.List<TYPE_3> ( NAME result ) NAME result ( INIT = dao . METHOD_4 ( VAR_2 , true ) ) INIT = dao . METHOD_4 ( VAR_2 , true ) ) VAR VAR (  TYPE_4 . assertEquals ( INT_1 , result . size ( ) ) )  TYPE_4 . assertEquals ( INT_1 , result . size ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( ) ) ) . thenReturn ( TYPE_2 . METHOD_2 ( ) ) )  org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( ) ) ) . thenReturn ( TYPE_2 . METHOD_2 ( ) ) (  org.mockito.Mockito.when ( VAR_2 . METHOD_3 ( TYPE_1 . any ( ) ) ) . thenReturn ( TYPE_2 . METHOD_4 ( ) ) )  org.mockito.Mockito.when ( VAR_2 . METHOD_3 ( TYPE_1 . any ( ) ) ) . thenReturn ( TYPE_2 . METHOD_4 ( ) ) (  VAR_3 = org.mockito.Mockito . METHOD_5 ( new TYPE_3 ( cmd . METHOD_6 ( ) ) ) )  VAR_3 = org.mockito.Mockito . METHOD_5 ( new TYPE_3 ( cmd . METHOD_6 ( ) ) ) (  org.mockito.Mockito.doReturn ( VAR_4 ) . when ( VAR_3 ) . METHOD_7 ( ) )  org.mockito.Mockito.doReturn ( VAR_4 ) . when ( VAR_3 ) . METHOD_7 ( ) (  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( cmd ) . METHOD_8 ( ) )  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( cmd ) . METHOD_8 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.VdcBllMessages ) TYPE TYPE_1.VdcBllMessages ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 . get ( VAR_1 ) ) INIT = VAR_4 . get ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_3 == null ) COND VAR_3 == null ( THEN THEN (  VAR_3 = new java.util.ArrayList < > ( ) )  VAR_3 = new java.util.ArrayList < > ( ) (  VAR_4 . put ( VAR_1 , VAR_3 ) )  VAR_4 . put ( VAR_1 , VAR_3 ) ) THEN THEN ) IF IF (  VAR_3 . add ( VAR_2 ) )  VAR_3 . add ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 ) INIT = VAR_3 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME model ) NAME model ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  TYPE_3 . map ( VAR_1 , VAR_4 , model ) )  TYPE_3 . map ( VAR_1 , VAR_4 , model ) (  METHOD_2 ( model . METHOD_3 ( ) ) )  METHOD_2 ( model . METHOD_3 ( ) ) (  METHOD_2 ( model . METHOD_3 ( ) . METHOD_4 ( ) ) )  METHOD_2 ( model . METHOD_3 ( ) . METHOD_4 ( ) ) (  assertEquals ( model . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( ) , VAR_1 ) )  assertEquals ( model . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( ) , VAR_1 ) (  assertEquals ( model . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_6 ( ) , VAR_2 ) )  assertEquals ( model . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_6 ( ) , VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.Object> ) TYPE java.util.Map<java.lang.String,java.lang.Object> ( NAME args ) NAME args ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME log ) NAME log ( INIT = TYPE_2 . METHOD_2 ( STRING_1 ) ) INIT = TYPE_2 . METHOD_2 ( STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( java.lang.String ) ( args . get ( STRING_2 ) ) ) ) INIT = ( ( java.lang.String ) ( args . get ( STRING_2 ) ) ) ) VAR VAR ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_3 ( VAR_1 ) ) INIT = new TYPE_3 ( VAR_1 ) ) VAR VAR (  VAR_2 . METHOD_3 ( new TYPE_4 ( ) ) )  VAR_2 . METHOD_3 ( new TYPE_4 ( ) ) (  log . METHOD_4 ( VAR_2 ) )  log . METHOD_4 ( VAR_2 ) ) THEN THEN ) IF IF (  TYPE_5 . METHOD_5 ( ( ( TYPE_6 ) ( args . get ( STRING_3 ) ) ) ) )  TYPE_5 . METHOD_5 ( ( ( TYPE_6 ) ( args . get ( STRING_3 ) ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . add ( id ) )  VAR_1 . add ( id ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( ) . METHOD_3 ( STRING_1 ) ) INIT = METHOD_2 ( ) . METHOD_3 ( STRING_1 ) ) VAR VAR (  VAR_2 . METHOD_4 ( STRING_2 , id ) )  VAR_2 . METHOD_4 ( STRING_2 , id ) ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ) TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( ( org.ovirt.engine.core.common.businessentities.VDSGroup ) ( VAR_2 . METHOD_5 ( ) ) ) ) INIT = ( ( org.ovirt.engine.core.common.businessentities.VDSGroup ) ( VAR_2 . METHOD_5 ( ) ) ) ) VAR VAR ( IF IF ( COND VAR_3 != null ) COND VAR_3 != null ( THEN THEN (  VAR_1 . add ( VAR_3 . METHOD_6 ( ) ) )  VAR_1 . add ( VAR_3 . METHOD_6 ( ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( ) ) INIT = TYPE_1 . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  VAR_1 = TYPE_1 . METHOD_3 ( ) . METHOD_4 ( ) )  VAR_1 = TYPE_1 . METHOD_3 ( ) . METHOD_4 ( ) ( IF IF ( COND ! VAR_1 ) COND ! VAR_1 ( THEN THEN (  addCanDoActionMessage ( VAR_2 ) )  addCanDoActionMessage ( VAR_2 ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF ( IF IF ( COND ! VAR_1 ) COND ! VAR_1 ( THEN THEN (  TYPE_1 . METHOD_5 ( ) )  TYPE_1 . METHOD_5 ( ) ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  this . METHOD_1 ( ) )  this . METHOD_1 ( ) ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_1 < TYPE_2 > ) ( returnValue ) ) ) INIT = ( ( TYPE_1 < TYPE_2 > ) ( returnValue ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1<TYPE_3> ) TYPE TYPE_1<TYPE_3> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_4 < > ( ) ) INIT = new TYPE_4 < > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( IF IF ( COND VAR_3 . METHOD_2 ( ) ) COND VAR_3 . METHOD_2 ( ) ( THEN THEN (  VAR_2 . add ( VAR_3 . METHOD_3 ( ) ) )  VAR_2 . add ( VAR_3 . METHOD_3 ( ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  METHOD_4 ( VAR_4 , VAR_2 ) )  METHOD_4 ( VAR_4 , VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) INIT = ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3<TYPE_4> ) TYPE TYPE_3<TYPE_4> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_5 < > ( ) ) INIT = new TYPE_5 < > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  VAR_2 . add ( VAR_3 . METHOD_1 ( ) ) )  VAR_2 . add ( VAR_3 . METHOD_1 ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ( VAR VAR ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_7 . METHOD_2 ( VAR_2 ) ) INIT = TYPE_7 . METHOD_2 ( VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_8 ) TYPE TYPE_8 ( NAME VAR_5 ) NAME VAR_5 ( INIT = TYPE_9 . getInstance ( ) ) INIT = TYPE_9 . getInstance ( ) ) VAR VAR (  METHOD_3 ( VAR_5 . METHOD_4 ( VAR_4 ) ) )  METHOD_3 ( VAR_5 . METHOD_4 ( VAR_4 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1<java.lang.String> ) RETURN TYPE_1<java.lang.String> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2<TYPE_3> ) TYPE TYPE_2<TYPE_3> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4<TYPE_5> ) TYPE TYPE_4<TYPE_5> ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( VAR_1 ) ) INIT = METHOD_2 ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1<java.lang.String> ) TYPE TYPE_1<java.lang.String> ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_6 < > ( ) ) INIT = new TYPE_6 < > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_4 ) NAME VAR_4 ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK (  VAR_3 . add ( VAR_4 . METHOD_3 ( ) ) )  VAR_3 . add ( VAR_4 . METHOD_3 ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( ( java.util.ArrayList < TYPE_1 > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) . size ( ) ) > 0 ) INIT = ( ( ( java.util.ArrayList < TYPE_1 > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) . size ( ) ) > 0 ) VAR VAR ( IF IF ( COND ! VAR_1 ) COND ! VAR_1 ( THEN THEN ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  VAR_2 . METHOD_3 ( ) . setIsChangable ( false ) )  VAR_2 . METHOD_3 ( ) . setIsChangable ( false ) (  VAR_2 . METHOD_3 ( ) . METHOD_4 ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . METHOD_5 ( ) . METHOD_6 ( ) ) )  VAR_2 . METHOD_3 ( ) . METHOD_4 ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . METHOD_5 ( ) . METHOD_6 ( ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN org.ovirt.engine.core.common.businessentities.DiskImage ) RETURN org.ovirt.engine.core.common.businessentities.DiskImage ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( SWITCH SWITCH ( NAME TYPE_1 . METHOD_2 ( ) ) NAME TYPE_1 . METHOD_2 ( ) ( CASE VAR_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_3 ) == null ) COND ( VAR_3 ) == null ( THEN THEN ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> ( NAME VAR_4 ) NAME VAR_4 ( INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( TYPE_1 . getParameters ( ) . METHOD_5 ( ) ) ) INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( TYPE_1 . getParameters ( ) . METHOD_5 ( ) ) ) VAR VAR (  VAR_3 = ( VAR_4 . isEmpty ( ) ) ? null : VAR_4 . get ( 0 ) )  VAR_3 = ( VAR_4 . isEmpty ( ) ) ? null : VAR_4 . get ( 0 ) ) THEN THEN ) IF IF (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) CASE VAR_1 ( CASE VAR_2 ( BLOCK BLOCK ( IF IF ( COND ( VAR_3 ) == null ) COND ( VAR_3 ) == null ( THEN THEN ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> ( NAME VAR_4 ) NAME VAR_4 ( INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( TYPE_1 . getParameters ( ) . METHOD_5 ( ) ) ) INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( TYPE_1 . getParameters ( ) . METHOD_5 ( ) ) ) VAR VAR (  VAR_3 = ( VAR_4 . isEmpty ( ) ) ? null : VAR_4 . get ( 0 ) )  VAR_3 = ( VAR_4 . isEmpty ( ) ) ? null : VAR_4 . get ( 0 ) ) THEN THEN ) IF IF (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) CASE VAR_2 ( DEFAULT DEFAULT ( BLOCK BLOCK (  return super . METHOD_1 ( ) ; )  return super . METHOD_1 ( ) ; ) BLOCK BLOCK ) DEFAULT DEFAULT ) SWITCH SWITCH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ! ( super . METHOD_1 ( ) ) ) COND ! ( super . METHOD_1 ( ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( IF IF ( COND ( METHOD_2 ( ) . getStatus ( ) ) != ( VAR_1 ) ) COND ( METHOD_2 ( ) . getStatus ( ) ) != ( VAR_1 ) ( THEN THEN (  METHOD_3 ( VAR_2 , METHOD_4 ( ) ) )  METHOD_3 ( VAR_2 , METHOD_4 ( ) ) ) THEN THEN ) IF IF ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_4 ) IN VAR_4 ( BLOCK BLOCK ( IF IF ( COND ( ( VAR_3 . METHOD_5 ( ) ) == null ) || ( ( VAR_3 . METHOD_6 ( ) ) == null ) ) COND ( ( VAR_3 . METHOD_5 ( ) ) == null ) || ( ( VAR_3 . METHOD_6 ( ) ) == null ) ( THEN THEN (  METHOD_3 ( VAR_5 ) )  METHOD_3 ( VAR_5 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( VAR_1 , new TYPE_1 . DiskImage ( ) ) )  METHOD_2 ( VAR_1 , new TYPE_1 . DiskImage ( ) ) (  METHOD_3 ( ) )  METHOD_3 ( ) (  METHOD_4 ( false ) )  METHOD_4 ( false ) (  METHOD_5 ( ) )  METHOD_5 ( ) (  METHOD_6 ( ) )  METHOD_6 ( ) (  METHOD_7 ( VAR_2 ) )  METHOD_7 ( VAR_2 ) (  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( command ) . METHOD_8 ( ) )  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( command ) . METHOD_8 ( ) (  TYPE_2 . METHOD_9 ( command . validate ( ) ) )  TYPE_2 . METHOD_9 ( command . validate ( ) ) (  TYPE_2 . METHOD_10 ( command . getReturnValue ( ) . METHOD_11 ( ) . METHOD_12 ( TYPE_3 . toString ( ) ) ) )  TYPE_2 . METHOD_10 ( command . getReturnValue ( ) . METHOD_11 ( ) . METHOD_12 ( TYPE_3 . toString ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_2 ) ( target ) ) ) INIT = ( ( TYPE_2 ) ( target ) ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( returnValue ) ) ) INIT = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( returnValue ) ) ) VAR VAR (  VAR_3 = VAR_2 )  VAR_3 = VAR_2 (  VAR_1 . METHOD_3 ( ) )  VAR_1 . METHOD_3 ( ) ) BLOCK BLOCK ) METHOD METHOD (  TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_2 VAR_1 = ( ( TYPE_2 ) ( target ) ) ; org.ovirt.engine.core.common.businessentities.VDS VAR_2 = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( returnValue ) ) ; VAR_3 = VAR_2 ; VAR_1 . METHOD_3 ( ) ; } } ) , VAR_4 . METHOD_4 ( ) ) )  TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_2 VAR_1 = ( ( TYPE_2 ) ( target ) ) ; org.ovirt.engine.core.common.businessentities.VDS VAR_2 = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( returnValue ) ) ; VAR_3 = VAR_2 ; VAR_1 . METHOD_3 ( ) ; } } ) , VAR_4 . METHOD_4 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  validator = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( VAR_1 , cluster , VAR_2 ) ) )  validator = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( VAR_1 , cluster , VAR_2 ) ) (  org.mockito.Mockito.doReturn ( false ) . when ( validator ) . METHOD_3 ( TYPE_2 . any ( VAR_3 class ) ) )  org.mockito.Mockito.doReturn ( false ) . when ( validator ) . METHOD_3 ( TYPE_2 . any ( VAR_3 class ) ) (  TYPE_3 . METHOD_4 ( validator . METHOD_5 ( TYPE_4 . instance ( ) . METHOD_6 ( VAR_3 class ) ) , TYPE_5 . METHOD_7 ( VAR_4 ) ) )  TYPE_3 . METHOD_4 ( validator . METHOD_5 ( TYPE_4 . instance ( ) . METHOD_6 ( VAR_3 class ) ) , TYPE_5 . METHOD_7 ( VAR_4 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( VAR_1 ) )  METHOD_2 ( VAR_1 ) (  METHOD_3 ( VAR_1 , VAR_2 ) )  METHOD_3 ( VAR_1 , VAR_2 ) (  METHOD_4 ( METHOD_5 ( ) ) )  METHOD_4 ( METHOD_5 ( ) ) (  VAR_3 . METHOD_6 ( ) )  VAR_3 . METHOD_6 ( ) ( VAR VAR ( TYPE TYPE_1.Disk ) TYPE TYPE_1.Disk ( NAME disk ) NAME disk ( INIT = resource . get ( ) ) INIT = resource . get ( ) ) VAR VAR (  METHOD_7 ( disk ) )  METHOD_7 ( disk ) (  assertEquals ( disk . getId ( ) , TYPE_2 . toString ( ) ) )  assertEquals ( disk . getId ( ) , TYPE_2 . toString ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1.Disk> ) TYPE java.util.List<TYPE_1.Disk> ( NAME VAR_1 ) NAME VAR_1 ( INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( TYPE_2 . getParameters ( ) . getStoragePoolId ( ) , TYPE_2 . getParameters ( ) . METHOD_4 ( ) , TYPE_2 . METHOD_5 ( ) , TYPE_2 . getParameters ( ) . METHOD_6 ( ) ) ) INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( TYPE_2 . getParameters ( ) . getStoragePoolId ( ) , TYPE_2 . getParameters ( ) . METHOD_4 ( ) , TYPE_2 . METHOD_5 ( ) , TYPE_2 . getParameters ( ) . METHOD_6 ( ) ) ) VAR VAR ( IF IF ( COND TYPE_3 . isEmpty ( VAR_1 ) ) COND TYPE_3 . isEmpty ( VAR_1 ) ( THEN THEN (  METHOD_7 ( VAR_1 ) )  METHOD_7 ( VAR_1 ) (  return ; )  return ; ) THEN THEN ) IF IF (  METHOD_7 ( VAR_1 ) )  METHOD_7 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME quota ) NAME quota ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  quota . METHOD_3 ( METHOD_4 ( ) ) )  quota . METHOD_3 ( METHOD_4 ( ) ) (  METHOD_5 ( quota ) )  METHOD_5 ( quota ) (  VAR_1 . METHOD_6 ( ) )  VAR_1 . METHOD_6 ( ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . list ( ) ) INIT = VAR_3 . list ( ) ) VAR VAR (  METHOD_7 ( VAR_2 , 1 ) )  METHOD_7 ( VAR_2 , 1 ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_2 . METHOD_8 ( ) . get ( 0 ) ) INIT = VAR_2 . METHOD_8 ( ) . get ( 0 ) ) VAR VAR (  assertEquals ( VAR_4 . METHOD_9 ( ) . METHOD_10 ( ) , INT_1 ) )  assertEquals ( VAR_4 . METHOD_9 ( ) . METHOD_10 ( ) , INT_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1.ValidationResult ) RETURN TYPE_1.ValidationResult ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  return ( ( METHOD_2 ( ) ) == null ) || ( ! ( VAR_1 . getStoragePoolId ( ) . equals ( METHOD_2 ( ) . getStoragePoolId ( ) ) ) ) ? new TYPE_1 . ValidationResult ( VAR_2 ) : VAR_3 ; )  return ( ( METHOD_2 ( ) ) == null ) || ( ! ( VAR_1 . getStoragePoolId ( ) . equals ( METHOD_2 ( ) . getStoragePoolId ( ) ) ) ) ? new TYPE_1 . ValidationResult ( VAR_2 ) : VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.Network ) TYPE org.ovirt.engine.core.common.businessentities.Network ( NAME network ) NAME network ( INIT = TYPE_2 . getParameters ( ) . METHOD_2 ( ) ) INIT = TYPE_2 . getParameters ( ) . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( network == null ) ? null : network . getId ( ) ) INIT = ( network == null ) ? null : network . getId ( ) ) VAR VAR (  return TYPE_3 . METHOD_3 ( new TYPE_1 ( VAR_1 , VAR_2 . Network , TYPE_2 . METHOD_4 ( ) . METHOD_5 ( ) ) ) ; )  return TYPE_3 . METHOD_3 ( new TYPE_1 ( VAR_1 , VAR_2 . Network , TYPE_2 . METHOD_4 ( ) . METHOD_5 ( ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 = METHOD_2 ( VAR_2 , VAR_3 ) )  VAR_1 = METHOD_2 ( VAR_2 , VAR_3 ) (  VAR_4 = METHOD_2 ( VAR_5 , VAR_6 ) )  VAR_4 = METHOD_2 ( VAR_5 , VAR_6 ) (  VAR_7 . add ( VAR_1 ) )  VAR_7 . add ( VAR_1 ) (  VAR_7 . add ( VAR_4 ) )  VAR_7 . add ( VAR_4 ) (  VAR_7 . add ( METHOD_2 ( VAR_8 , VAR_9 ) ) )  VAR_7 . add ( METHOD_2 ( VAR_8 , VAR_9 ) ) (  VAR_10 = METHOD_3 ( VAR_11 , VAR_12 ) )  VAR_10 = METHOD_3 ( VAR_11 , VAR_12 ) (  VAR_13 = METHOD_4 ( ) )  VAR_13 = METHOD_4 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.List<org.ovirt.engine.core.common.businessentities.VDS> ) RETURN java.util.List<org.ovirt.engine.core.common.businessentities.VDS> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS> ( NAME hosts ) NAME hosts ( INIT = new java.util.ArrayList ( VAR_1 . size ( ) ) ) INIT = new java.util.ArrayList ( VAR_1 . size ( ) ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME host ) NAME host ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME vds ) NAME vds ( INIT = new org.ovirt.engine.core.common.businessentities.VDS ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.VDS ( ) ) VAR VAR (  vds . METHOD_2 ( host . getName ( ) ) )  vds . METHOD_2 ( host . getName ( ) ) (  vds . METHOD_3 ( host . getName ( ) ) )  vds . METHOD_3 ( host . getName ( ) ) (  hosts . add ( vds ) )  hosts . add ( vds ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return hosts ; )  return hosts ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2.DiskImage ) TYPE TYPE_2.DiskImage ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND TYPE_4 . METHOD_2 ( VAR_2 , VAR_4 ) ) COND TYPE_4 . METHOD_2 ( VAR_2 , VAR_4 ) ( THEN THEN ( VAR VAR ( TYPE double ) TYPE double ( NAME VAR_5 ) NAME VAR_5 ( INIT = TYPE_4 . METHOD_3 ( VAR_1 , org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_4 ( ) . get ( VAR_4 ) . METHOD_5 ( ) ) ) INIT = TYPE_4 . METHOD_3 ( VAR_1 , org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_4 ( ) . get ( VAR_4 ) . METHOD_5 ( ) ) ) VAR VAR (  return TYPE_4 . METHOD_6 ( VAR_1 . METHOD_7 ( ) , TYPE_5 . valueOf ( VAR_5 ) . METHOD_8 ( ) ) ; )  return TYPE_4 . METHOD_6 ( VAR_1 . METHOD_7 ( ) , TYPE_5 . valueOf ( VAR_5 ) . METHOD_8 ( ) ) ; ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( ) )  TYPE_1 . METHOD_2 ( ) ( IF IF ( COND ( TYPE_1 . getVm ( ) ) != null ) COND ( TYPE_1 . getVm ( ) ) != null ( THEN THEN (  TYPE_2 . METHOD_3 ( TYPE_1 . getVm ( ) . getId ( ) ) )  TYPE_2 . METHOD_3 ( TYPE_1 . getVm ( ) . getId ( ) ) (  TYPE_2 . METHOD_4 ( TYPE_1 . getVm ( ) ) )  TYPE_2 . METHOD_4 ( TYPE_1 . getVm ( ) ) (  METHOD_5 ( ) )  METHOD_5 ( ) ) THEN THEN ( ELSE ELSE (  TYPE_1 . METHOD_6 ( false ) )  TYPE_1 . METHOD_6 ( false ) (  log . METHOD_7 ( STRING_1 ) )  log . METHOD_7 ( STRING_1 ) ) ELSE ELSE ) IF IF (  TYPE_1 . METHOD_8 ( true ) )  TYPE_1 . METHOD_8 ( true ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( VAR_3 , VAR_4 class , new java.lang.String [ ] { STRING_1 , STRING_2 } , new java.lang.Object [ ] { VAR_5 [ 0 ] , TYPE_1 . METHOD_3 ( VAR_6 [ 1 ] ) } , METHOD_4 ( ) , VAR_2 ) )  METHOD_2 ( VAR_3 , VAR_4 class , new java.lang.String [ ] { STRING_1 , STRING_2 } , new java.lang.Object [ ] { VAR_5 [ 0 ] , TYPE_1 . METHOD_3 ( VAR_6 [ 1 ] ) } , METHOD_4 ( ) , VAR_2 ) (  VAR_7 . METHOD_5 ( ) )  VAR_7 . METHOD_5 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME sender ) NAME sender ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME args ) NAME args ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_2 ) ( sender ) ) ) INIT = ( ( TYPE_2 ) ( sender ) ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME item ) NAME item ( IN METHOD_2 ( ) ) IN METHOD_2 ( ) ( BLOCK BLOCK ( IF IF ( COND ( item instanceof TYPE_2 ) && ( item != sender ) ) COND ( item instanceof TYPE_2 ) && ( item != sender ) ( THEN THEN ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME model ) NAME model ( INIT = ( ( TYPE_2 ) ( item ) ) ) INIT = ( ( TYPE_2 ) ( item ) ) ) VAR VAR (  model . METHOD_3 ( ) . setEntity ( VAR_1 . METHOD_3 ( ) . getEntity ( ) ) )  model . METHOD_3 ( ) . setEntity ( VAR_1 . METHOD_3 ( ) . getEntity ( ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<org.ovirt.engine.core.compat.Guid> ) RETURN java.util.List<org.ovirt.engine.core.compat.Guid> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.compat.Guid> ) TYPE java.util.List<org.ovirt.engine.core.compat.Guid> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_2 . append ( STRING_1 ) . append ( TYPE_2 . METHOD_2 ( VAR_1 , STRING_2 ) ) . append ( STRING_1 ) )  VAR_2 . append ( STRING_1 ) . append ( TYPE_2 . METHOD_2 ( VAR_1 , STRING_2 ) ) . append ( STRING_1 ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_3 ( ) . addValue ( STRING_3 , VAR_2 . toString ( ) ) ) INIT = METHOD_3 ( ) . addValue ( STRING_3 , VAR_2 . toString ( ) ) ) VAR VAR (  return METHOD_4 ( ) . METHOD_5 ( STRING_4 , METHOD_6 ( ) , METHOD_3 ( ) . addValue ( STRING_3 , VAR_2 . toString ( ) ) ) ; )  return METHOD_4 ( ) . METHOD_5 ( STRING_4 , METHOD_6 ( ) , METHOD_3 ( ) . addValue ( STRING_3 , VAR_2 . toString ( ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME version ) NAME version ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.IAsyncConverter ) TYPE org.ovirt.engine.ui.frontend.IAsyncConverter ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_2 == null ) COND VAR_2 == null ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2<TYPE_1,java.lang.String> ) TYPE TYPE_2<TYPE_1,java.lang.String> ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_2 < TYPE_1 , java.lang.String > ( VAR_1 , version ) ) INIT = new TYPE_2 < TYPE_1 , java.lang.String > ( VAR_1 , version ) ) VAR VAR (  return VAR_2 . Convert ( VAR_4 . get ( VAR_3 ) , null ) ; )  return VAR_2 . Convert ( VAR_4 . get ( VAR_3 ) , null ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  return TYPE_1 . METHOD_2 ( TYPE_2 . getVm ( ) , TYPE_2 . getReturnValue ( ) . METHOD_3 ( ) , TYPE_2 . getVm ( ) . METHOD_4 ( ) , VAR_1 , METHOD_5 ( ) , METHOD_5 ( ) , METHOD_5 ( ) , METHOD_5 ( ) , true , true , true , true , null ) ; )  return TYPE_1 . METHOD_2 ( TYPE_2 . getVm ( ) , TYPE_2 . getReturnValue ( ) . METHOD_3 ( ) , TYPE_2 . getVm ( ) . METHOD_4 ( ) , VAR_1 , METHOD_5 ( ) , METHOD_5 ( ) , METHOD_5 ( ) , METHOD_5 ( ) , true , true , true , true , null ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = this . METHOD_2 ( ) ) INIT = this . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_2 . METHOD_3 ( ) ) INIT = VAR_2 . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME value ) NAME value ( INIT = VAR_3 . METHOD_4 ( ( ( VAR_4 ) + VAR_1 ) ) ) INIT = VAR_3 . METHOD_4 ( ( ( VAR_4 ) + VAR_1 ) ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME result ) NAME result ( INIT = null ) INIT = null ) VAR VAR ( IF IF ( COND value instanceof java.lang.String ) COND value instanceof java.lang.String ( THEN THEN (  result = ( ( java.lang.String ) ( value ) ) )  result = ( ( java.lang.String ) ( value ) ) ) THEN THEN ( ELSE ELSE (  VAR_5 . error ( STRING_1 ) )  VAR_5 . error ( STRING_1 ) ) ELSE ELSE ) IF IF (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( null ) )  org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( null ) (  VAR_2 . METHOD_3 ( VAR_1 , VAR_3 , VAR_4 ) )  VAR_2 . METHOD_3 ( VAR_1 , VAR_3 , VAR_4 ) (  org.mockito.Mockito . METHOD_4 ( VAR_4 ) . METHOD_3 ( VAR_1 , VAR_3 ) )  org.mockito.Mockito . METHOD_4 ( VAR_4 ) . METHOD_3 ( VAR_1 , VAR_3 ) (  org.mockito.Mockito . METHOD_4 ( VAR_1 ) . METHOD_5 ( VAR_5 , VAR_6 ) )  org.mockito.Mockito . METHOD_4 ( VAR_1 ) . METHOD_5 ( VAR_5 , VAR_6 ) (  org.mockito.Mockito . METHOD_4 ( VAR_3 , org.mockito.Mockito . METHOD_6 ( 1 ) ) . METHOD_7 ( org.mockito.Mockito . any ( ) ) )  org.mockito.Mockito . METHOD_4 ( VAR_3 , org.mockito.Mockito . METHOD_6 ( 1 ) ) . METHOD_7 ( org.mockito.Mockito . any ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN org.ovirt.engine.core.common.businessentities.network.Network ) RETURN org.ovirt.engine.core.common.businessentities.network.Network ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) == null ) COND ( VAR_1 ) == null ( THEN THEN ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) ) ) INIT = METHOD_2 ( ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.network.Network ) TYPE org.ovirt.engine.core.common.businessentities.network.Network ( NAME network ) NAME network ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK ( IF IF ( COND network . METHOD_5 ( ) . METHOD_6 ( ) ) COND network . METHOD_5 ( ) . METHOD_6 ( ) ( THEN THEN (  VAR_1 = network )  VAR_1 = network (  return VAR_1 ; )  return VAR_1 ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) (  addCanDoActionMessage ( VAR_1 ) )  addCanDoActionMessage ( VAR_1 ) ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME returnValue ) NAME returnValue ( INIT = ( ( ( ( TYPE_1 . METHOD_2 ( ) ) && ( METHOD_3 ( VAR_2 , VAR_3 ) ) ) && ( TYPE_1 . METHOD_4 ( ) ) ) && ( METHOD_5 ( ) ) ) && ( ( ( TYPE_1 . METHOD_6 ( ) . METHOD_7 ( ) ) == ( VAR_4 ) ) || ( TYPE_1 . METHOD_8 ( ) ) ) ) INIT = ( ( ( ( TYPE_1 . METHOD_2 ( ) ) && ( METHOD_3 ( VAR_2 , VAR_3 ) ) ) && ( TYPE_1 . METHOD_4 ( ) ) ) && ( METHOD_5 ( ) ) ) && ( ( ( TYPE_1 . METHOD_6 ( ) . METHOD_7 ( ) ) == ( VAR_4 ) ) || ( TYPE_1 . METHOD_8 ( ) ) ) ) VAR VAR (  return returnValue ; )  return returnValue ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( TYPE_2 . METHOD_4 ( ) . getStoragePoolId ( ) ) ) INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( TYPE_2 . METHOD_4 ( ) . getStoragePoolId ( ) ) ) VAR VAR ( IF IF ( COND ( VAR_1 . size ( ) ) >= ( VAR_2 < java.lang.Integer > METHOD_5 ( VAR_3 ) ) ) COND ( VAR_1 . size ( ) ) >= ( VAR_2 < java.lang.Integer > METHOD_5 ( VAR_3 ) ) ( THEN THEN (  METHOD_6 ( ) )  METHOD_6 ( ) (  return ; )  return ; ) THEN THEN ) IF IF (  METHOD_7 ( VAR_1 ) )  METHOD_7 ( VAR_1 ) (  TYPE_2 . METHOD_8 ( true ) )  TYPE_2 . METHOD_8 ( true ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME parameters ) NAME parameters ( INIT = getParameters ( ) ) INIT = getParameters ( ) ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_1 ) NAME VAR_1 ( INIT = parameters . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) INIT = parameters . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.Integer ) TYPE java.lang.Integer ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 < java.lang.Integer > METHOD_5 ( VAR_4 ) ) INIT = VAR_3 < java.lang.Integer > METHOD_5 ( VAR_4 ) ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_5 ) NAME VAR_5 ( INIT = ( ( TYPE_2 . METHOD_6 ( ) ) - VAR_1 ) > VAR_2 ) INIT = ( ( TYPE_2 . METHOD_6 ( ) ) - VAR_1 ) > VAR_2 ) VAR VAR (  VAR_6 . METHOD_7 ( STRING_1 , parameters . METHOD_8 ( ) , ( VAR_5 ? STRING_2 : STRING_3 ) , VAR_2 ) )  VAR_6 . METHOD_7 ( STRING_1 , parameters . METHOD_8 ( ) , ( VAR_5 ? STRING_2 : STRING_3 ) , VAR_2 ) (  return VAR_5 ; )  return VAR_5 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME event ) NAME event ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( event . METHOD_2 ( ) ) != ( getModel ( ) ) ) || ( ( ( getModel ( ) . METHOD_3 ( ) ) != null ) && ( ( VAR_1 ) == 0 ) ) ) COND ( ( event . METHOD_2 ( ) ) != ( getModel ( ) ) ) || ( ( ( getModel ( ) . METHOD_3 ( ) ) != null ) && ( ( VAR_1 ) == 0 ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_1 ) == 0 ) COND ( VAR_1 ) == 0 ( THEN THEN (  getModel ( ) . METHOD_4 ( null ) )  getModel ( ) . METHOD_4 ( null ) ) THEN THEN ) IF IF (  ( VAR_1 ) ++ )  ( VAR_1 ) ++ ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) ( VAR VAR ( TYPE TYPE_1.EngineMessage ) TYPE TYPE_1.EngineMessage ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 ) INIT = VAR_2 ) VAR VAR (  org.mockito.Mockito.doReturn ( new TYPE_2 . ValidationResult ( VAR_1 ) ) . when ( VAR_3 ) . METHOD_3 ( TYPE_3 . METHOD_4 ( ) , TYPE_3 . any ( VAR_4 . StorageDomain class ) ) )  org.mockito.Mockito.doReturn ( new TYPE_2 . ValidationResult ( VAR_1 ) ) . when ( VAR_3 ) . METHOD_3 ( TYPE_3 . METHOD_4 ( ) , TYPE_3 . any ( VAR_4 . StorageDomain class ) ) (  TYPE_4 . METHOD_5 ( command , VAR_1 ) )  TYPE_4 . METHOD_5 ( command , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_3 . METHOD_2 ( VAR_3 ) )  TYPE_3 . METHOD_2 ( VAR_3 ) ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_5 ) NAME VAR_5 ( IN VAR_3 ) IN VAR_3 ( BLOCK BLOCK (  METHOD_3 ( VAR_2 ) )  METHOD_3 ( VAR_2 ) ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME result ) NAME result ( INIT = new TYPE_4 ( ) ) INIT = new TYPE_4 ( ) ) VAR VAR (  result . METHOD_4 ( ( VAR_4 ? true : VAR_1 ) ) )  result . METHOD_4 ( ( VAR_4 ? true : VAR_1 ) ) (  result . METHOD_5 ( ( VAR_4 ? VAR_1 : false ) ) )  result . METHOD_5 ( ( VAR_4 ? VAR_1 : false ) ) (  VAR_5 . METHOD_6 ( new TYPE_5 ( VAR_6 , null , TYPE_3 . METHOD_7 ( result ) ) ) )  VAR_5 . METHOD_6 ( new TYPE_5 ( VAR_6 , null , TYPE_3 . METHOD_7 ( result ) ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( VAR_2 ) ) INIT = new TYPE_2 ( VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME error ) NAME error ( INIT = VAR_1 . METHOD_2 ( TYPE_3 . METHOD_3 ( VAR_3 , STRING_1 , STRING_2 ) ) ) INIT = VAR_1 . METHOD_2 ( TYPE_3 . METHOD_3 ( VAR_3 , STRING_1 , STRING_2 ) ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME result ) NAME result ( INIT = STRING_3 ) INIT = STRING_3 ) VAR VAR (  TYPE_4 . METHOD_4 ( STRING_4 , ( ( error . size ( ) ) == 1 ) ) )  TYPE_4 . METHOD_4 ( STRING_4 , ( ( error . size ( ) ) == 1 ) ) (  TYPE_4 . assertEquals ( STRING_5 , result , error . get ( 0 ) ) )  TYPE_4 . assertEquals ( STRING_5 , result , error . get ( 0 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ) TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( ) . get ( TYPE_1 . METHOD_3 ( ) ) ) INIT = TYPE_1 . METHOD_2 ( ) . get ( TYPE_1 . METHOD_3 ( ) ) ) VAR VAR (  return VAR_1 == null ? METHOD_4 ( VAR_2 ) : ( VAR_1 . METHOD_5 ( ) ) != ( TYPE_1 . getVm ( ) . METHOD_6 ( ) ) ? METHOD_4 ( VAR_3 ) : true ; )  return VAR_1 == null ? METHOD_4 ( VAR_2 ) : ( VAR_1 . METHOD_5 ( ) ) != ( TYPE_1 . getVm ( ) . METHOD_6 ( ) ) ? METHOD_4 ( VAR_3 ) : true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) . get ( getVm ( ) . getId ( ) ) ) INIT = METHOD_2 ( ) . get ( getVm ( ) . getId ( ) ) ) VAR VAR ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN (  addCanDoActionMessage ( VAR_2 ) )  addCanDoActionMessage ( VAR_2 ) (  addCanDoActionMessage ( java.lang.String . METHOD_3 ( STRING_1 , VAR_1 . METHOD_4 ( ) ) ) )  addCanDoActionMessage ( java.lang.String . METHOD_3 ( STRING_1 , VAR_1 . METHOD_4 ( ) ) ) (  return false ; )  return false ; ) THEN THEN ) IF IF (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_1 . METHOD_2 ( ) . equals ( TYPE_2 . getName ( ) ) ) ) COND ! ( VAR_1 . METHOD_2 ( ) . equals ( TYPE_2 . getName ( ) ) ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF (  return ( ( VAR_1 . METHOD_3 ( ) ) == null ) && ( METHOD_4 ( ) . get ( VAR_1 . METHOD_5 ( ) ) . METHOD_6 ( ) ) ; )  return ( ( VAR_1 . METHOD_3 ( ) ) == null ) && ( METHOD_4 ( ) . get ( VAR_1 . METHOD_5 ( ) ) . METHOD_6 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( METHOD_3 ( ) ) )  METHOD_2 ( METHOD_3 ( ) ) (  METHOD_4 ( VAR_1 , VAR_2 class , new java.lang.String [ ] { STRING_1 , STRING_2 } , new java.lang.Object [ ] { STRING_3 , STRING_4 } , getEntity ( 0 ) ) )  METHOD_4 ( VAR_1 , VAR_2 class , new java.lang.String [ ] { STRING_1 , STRING_2 } , new java.lang.Object [ ] { STRING_3 , STRING_4 } , getEntity ( 0 ) ) (  VAR_3 . METHOD_5 ( ) )  VAR_3 . METHOD_5 ( ) (  METHOD_6 ( resource . METHOD_7 ( STRING_3 , STRING_4 ) , 0 ) )  METHOD_6 ( resource . METHOD_7 ( STRING_3 , STRING_4 ) , 0 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME map ) NAME map ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) . addValue ( STRING_1 , map . METHOD_3 ( ) ) . addValue ( STRING_2 , map . METHOD_4 ( ) ) . addValue ( STRING_3 , map . METHOD_5 ( ) ) ) INIT = METHOD_2 ( ) . addValue ( STRING_1 , map . METHOD_3 ( ) ) . addValue ( STRING_2 , map . METHOD_4 ( ) ) . addValue ( STRING_3 , map . METHOD_5 ( ) ) ) VAR VAR (  METHOD_6 ( ) . METHOD_7 ( STRING_4 , VAR_1 ) )  METHOD_6 ( ) . METHOD_7 ( STRING_4 , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.compat.Guid> ) TYPE java.util.List<org.ovirt.engine.core.compat.Guid> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( ) ) INIT = new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( ) ) VAR VAR (  METHOD_2 ( VAR_1 , VAR_2 ) )  METHOD_2 ( VAR_1 , VAR_2 ) (  TYPE_1 . METHOD_3 ( VAR_2 ) )  TYPE_1 . METHOD_3 ( VAR_2 ) ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK (  METHOD_4 ( TYPE_2 . METHOD_5 ( ) . METHOD_6 ( VAR_3 ) ) )  METHOD_4 ( TYPE_2 . METHOD_5 ( ) . METHOD_6 ( VAR_3 ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) ) ) )  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) ) ) (  METHOD_3 ( ) )  METHOD_3 ( ) (  org.mockito.Mockito.doReturn ( METHOD_4 ( ) ) . when ( cmd ) . METHOD_5 ( ) )  org.mockito.Mockito.doReturn ( METHOD_4 ( ) ) . when ( cmd ) . METHOD_5 ( ) (  TYPE_3 . METHOD_6 ( cmd . validate ( ) ) )  TYPE_3 . METHOD_6 ( cmd . validate ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_2 ( ) ) INIT = VAR_2 . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  METHOD_3 ( VAR_1 ) )  METHOD_3 ( VAR_1 ) ( IF IF ( COND ! ( VAR_1 . METHOD_4 ( ) ) ) COND ! ( VAR_1 . METHOD_4 ( ) ) ( THEN THEN (  VAR_2 . METHOD_5 ( ) )  VAR_2 . METHOD_5 ( ) ) THEN THEN ) IF IF (  METHOD_6 ( ) )  METHOD_6 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.ArrayList<TYPE_1.VdcActionParametersBase> ) TYPE java.util.ArrayList<TYPE_1.VdcActionParametersBase> ( NAME parameters ) NAME parameters ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_3 ) ( VAR_1 . METHOD_2 ( ) . getSelectedItem ( ) ) ) ) INIT = ( ( TYPE_3 ) ( VAR_1 . METHOD_2 ( ) . getSelectedItem ( ) ) ) ) VAR VAR (  METHOD_3 ( parameters , VAR_3 , VAR_2 . getId ( ) , ( ( org.ovirt.engine.core.common.businessentities.DiskImage ) ( VAR_1 . METHOD_4 ( ) ) ) , VAR_4 ) )  METHOD_3 ( parameters , VAR_3 , VAR_2 . getId ( ) , ( ( org.ovirt.engine.core.common.businessentities.DiskImage ) ( VAR_1 . METHOD_4 ( ) ) ) , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME sender ) NAME sender ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME args ) NAME args ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( object . METHOD_3 ( ) ) )  METHOD_2 ( object . METHOD_3 ( ) ) ( IF IF ( COND METHOD_3 ( ) . METHOD_4 ( ) . equals ( VAR_2 ) ) COND METHOD_3 ( ) . METHOD_4 ( ) . equals ( VAR_2 ) ( THEN THEN (  VAR_3 . METHOD_5 ( true ) )  VAR_3 . METHOD_5 ( true ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND METHOD_3 ( ) . METHOD_4 ( ) . equals ( VAR_4 ) ) COND METHOD_3 ( ) . METHOD_4 ( ) . equals ( VAR_4 ) ( THEN THEN (  VAR_5 . METHOD_5 ( true ) )  VAR_5 . METHOD_5 ( true ) ) THEN THEN ( ELSE ELSE (  VAR_6 . METHOD_5 ( true ) )  VAR_6 . METHOD_5 ( true ) ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF (  METHOD_6 ( ) )  METHOD_6 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<TYPE_2,org.ovirt.engine.core.common.businessentities.VmTemplate> ) TYPE TYPE_1<TYPE_2,org.ovirt.engine.core.common.businessentities.VmTemplate> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1<TYPE_2,org.ovirt.engine.core.common.businessentities.VmTemplate> ) TYPE TYPE_1<TYPE_2,org.ovirt.engine.core.common.businessentities.VmTemplate> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) ) ) INIT = VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) ) ) VAR VAR ( IF IF ( COND VAR_3 != 0 ) COND VAR_3 != 0 ( THEN THEN (  return VAR_3 ; )  return VAR_3 ; ) THEN THEN ) IF IF (  return VAR_1 . METHOD_2 ( ) . METHOD_5 ( ) . METHOD_4 ( VAR_2 . METHOD_2 ( ) . METHOD_5 ( ) ) ; )  return VAR_1 . METHOD_2 ( ) . METHOD_5 ( ) . METHOD_4 ( VAR_2 . METHOD_2 ( ) . METHOD_5 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.util.ArrayList<TYPE_1> ) RETURN java.util.ArrayList<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<TYPE_1> ) TYPE java.util.ArrayList<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < TYPE_1 > ( ) ) INIT = new java.util.ArrayList < TYPE_1 > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME entity ) NAME entity ( IN TYPE_2 . METHOD_2 ( ) ) IN TYPE_2 . METHOD_2 ( ) ( BLOCK BLOCK ( IF IF ( COND ( ( entity . METHOD_3 ( ) ) & ( TYPE_3 . getValue ( ) ) ) > 0 ) COND ( ( entity . METHOD_3 ( ) ) & ( TYPE_3 . getValue ( ) ) ) > 0 ( THEN THEN (  VAR_1 . add ( entity ) )  VAR_1 . add ( entity ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.DiskImage ) TYPE org.ovirt.engine.core.common.businessentities.DiskImage ( NAME diskImage ) NAME diskImage ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return TYPE_1 . METHOD_2 ( VAR_1 . get ( VAR_2 . get ( diskImage . getId ( ) ) . METHOD_3 ( ) . get ( 0 ) ) . METHOD_4 ( ) , diskImage , TYPE_2 . getReturnValue ( ) . METHOD_5 ( ) ) ; )  return TYPE_1 . METHOD_2 ( VAR_1 . get ( VAR_2 . get ( diskImage . getId ( ) ) . METHOD_3 ( ) . get ( 0 ) ) . METHOD_4 ( ) , diskImage , TYPE_2 . getReturnValue ( ) . METHOD_5 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) . METHOD_3 ( map , map . METHOD_4 ( ) ) )  METHOD_2 ( ) . METHOD_3 ( map , map . METHOD_4 ( ) ) (  map . METHOD_5 ( VAR_1 ) )  map . METHOD_5 ( VAR_1 ) (  org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_6 ( ) . METHOD_7 ( map . getId ( ) , map . METHOD_4 ( ) ) )  org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_6 ( ) . METHOD_7 ( map . getId ( ) , map . METHOD_4 ( ) ) ( IF IF ( COND ( METHOD_8 ( ) . METHOD_9 ( ) ) == ( VAR_2 ) ) COND ( METHOD_8 ( ) . METHOD_9 ( ) ) == ( VAR_2 ) ( THEN THEN (  METHOD_10 ( ) )  METHOD_10 ( ) ) THEN THEN ) IF IF (  METHOD_2 ( ) . METHOD_11 ( ) )  METHOD_2 ( ) . METHOD_11 ( ) (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME context ) NAME context ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME value ) NAME value ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND value != null ) COND value != null ( THEN THEN (  VAR_1 . append ( VAR_2 . METHOD_2 ( VAR_3 , VAR_4 , TYPE_4 . METHOD_3 ( TYPE_5 . METHOD_4 ( value ) . METHOD_5 ( ) ) ) ) )  VAR_1 . append ( VAR_2 . METHOD_2 ( VAR_3 , VAR_4 , TYPE_4 . METHOD_3 ( TYPE_5 . METHOD_4 ( value ) . METHOD_5 ( ) ) ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . getParameters ( ) . METHOD_2 ( ) . getId ( ) ) INIT = TYPE_1 . getParameters ( ) . METHOD_2 ( ) . getId ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_3 . getInstance ( ) . METHOD_3 ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) ) ) INIT = TYPE_3 . getInstance ( ) . METHOD_3 ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) ) ) VAR VAR ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN (  VAR_2 . METHOD_4 ( ) )  VAR_2 . METHOD_4 ( ) ) THEN THEN ) IF IF (  METHOD_5 ( ) . METHOD_6 ( VAR_1 ) )  METHOD_5 ( ) . METHOD_6 ( VAR_1 ) (  TYPE_1 . METHOD_7 ( true ) )  TYPE_1 . METHOD_7 ( true ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1.Disk ) RETURN TYPE_1.Disk ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.Disk ) TYPE TYPE_1.Disk ( NAME disk ) NAME disk ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  disk . setId ( id ) )  disk . setId ( id ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_3 ( new TYPE_4 ( id , null ) ) ) INIT = new TYPE_3 ( new TYPE_4 ( id , null ) ) ) VAR VAR (  VAR_2 . METHOD_2 ( VAR_1 ) )  VAR_2 . METHOD_2 ( VAR_1 ) (  disk . METHOD_3 ( TYPE_5 . METHOD_4 ( VAR_2 ) ) )  disk . METHOD_3 ( TYPE_5 . METHOD_4 ( VAR_2 ) ) (  return disk ; )  return disk ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.DiskImage ) TYPE TYPE_1.DiskImage ( NAME diskImage ) NAME diskImage ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3<org.ovirt.engine.core.compat.Guid> ) TYPE TYPE_3<org.ovirt.engine.core.compat.Guid> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME user ) NAME user ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( IF IF ( COND TYPE_5 . METHOD_2 ( VAR_3 , VAR_2 , user ) ) COND TYPE_5 . METHOD_2 ( VAR_3 , VAR_2 , user ) ( THEN THEN (  VAR_2 . add ( VAR_3 . getId ( ) ) )  VAR_2 . add ( VAR_3 . getId ( ) ) (  diskImage . METHOD_3 ( VAR_3 . getId ( ) ) )  diskImage . METHOD_3 ( VAR_3 . getId ( ) ) (  return true ; )  return true ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_1 ) ( returnValue ) ) ) INIT = ( ( TYPE_1 ) ( returnValue ) ) ) VAR VAR (  model . METHOD_2 ( ) . setEntity ( VAR_1 . METHOD_3 ( ) ) )  model . METHOD_2 ( ) . setEntity ( VAR_1 . METHOD_3 ( ) ) (  model . METHOD_4 ( ) . setEntity ( VAR_1 . METHOD_4 ( ) ) )  model . METHOD_4 ( ) . setEntity ( VAR_1 . METHOD_4 ( ) ) (  model . METHOD_5 ( ) . setEntity ( VAR_1 . METHOD_5 ( ) ) )  model . METHOD_5 ( ) . setEntity ( VAR_1 . METHOD_5 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN java.util.Map<java.lang.String,java.lang.Object> ) RETURN java.util.Map<java.lang.String,java.lang.Object> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ) TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ( NAME cluster ) NAME cluster ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.Object> ) TYPE java.util.Map<java.lang.String,java.lang.Object> ( NAME parameters ) NAME parameters ( INIT = new java.util.HashMap < java.lang.String , java.lang.Object > ( ) ) INIT = new java.util.HashMap < java.lang.String , java.lang.Object > ( ) ) VAR VAR (  parameters . put ( VAR_1 . VM , vm ) )  parameters . put ( VAR_1 . VM , vm ) ( IF IF ( COND ( cluster . METHOD_2 ( ) ) != null ) COND ( cluster . METHOD_2 ( ) ) != null ( THEN THEN (  parameters . METHOD_3 ( cluster . METHOD_2 ( ) ) )  parameters . METHOD_3 ( cluster . METHOD_2 ( ) ) ) THEN THEN ) IF IF (  return parameters ; )  return parameters ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN double ) RETURN double ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) == 0 ) COND ( VAR_1 ) == 0 ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE TYPE_1.Disk ) TYPE TYPE_1.Disk ( NAME disk ) NAME disk ( IN METHOD_2 ( ) . METHOD_3 ( ) ) IN METHOD_2 ( ) . METHOD_3 ( ) ( BLOCK BLOCK ( IF IF ( COND ( VAR_2 ) == ( disk . METHOD_4 ( ) ) ) COND ( VAR_2 ) == ( disk . METHOD_4 ( ) ) ( THEN THEN (  VAR_1 += ( ( ( TYPE_1 . DiskImage ) ( disk ) ) . METHOD_5 ( ) ) / ( TYPE_2 . valueOf ( ( ( INT_1 * INT_1 ) * INT_1 ) ) ) )  VAR_1 += ( ( ( TYPE_1 . DiskImage ) ( disk ) ) . METHOD_5 ( ) ) / ( TYPE_2 . valueOf ( ( ( INT_1 * INT_1 ) * INT_1 ) ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME id ) NAME id ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source != null ? new java.util.ArrayList < TYPE_1 > ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; )  return source != null ? new java.util.ArrayList < TYPE_1 > ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? new java.util.ArrayList < TYPE_1 > ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? new java.util.ArrayList < TYPE_1 > ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; } } (  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ( INIT = new TYPE_1 ( this , VAR_1 ) ) INIT = new TYPE_1 ( this , VAR_1 ) ) VAR VAR (  model . setTitle ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_2 ( ) ) )  model . setTitle ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_2 ( ) ) (  model . METHOD_3 ( STRING_1 ) )  model . METHOD_3 ( STRING_1 ) (  model . METHOD_4 ( VAR_2 ) )  model . METHOD_4 ( VAR_2 ) (  model . setEntity ( ( ( TYPE_2 ) ( getSelectedItem ( ) ) ) ) )  model . setEntity ( ( ( TYPE_2 ) ( getSelectedItem ( ) ) ) ) (  METHOD_5 ( model ) )  METHOD_5 ( model ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.VM ) TYPE TYPE_1.VM ( NAME entity ) NAME entity ( INIT = new TYPE_1 . VM ( ) ) INIT = new TYPE_1 . VM ( ) ) VAR VAR (  entity . METHOD_2 ( VAR_1 ) )  entity . METHOD_2 ( VAR_1 ) ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ( INIT = org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) INIT = org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) VAR VAR (  entity . METHOD_4 ( VAR_2 ) )  entity . METHOD_4 ( VAR_2 ) ( VAR VAR ( TYPE TYPE_1.VM ) TYPE TYPE_1.VM ( NAME model ) NAME model ( INIT = TYPE_2 . map ( entity , null ) ) INIT = TYPE_2 . map ( entity , null ) ) VAR VAR (  assertEquals ( VAR_2 . toString ( ) , model . METHOD_5 ( ) . getId ( ) ) )  assertEquals ( VAR_2 . toString ( ) , model . METHOD_5 ( ) . getId ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( VAR_2 ) , TYPE_1 . METHOD_3 ( new TYPE_2 ( 0 ) ) ) )  VAR_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( VAR_2 ) , TYPE_1 . METHOD_3 ( new TYPE_2 ( 0 ) ) ) ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.compat.Guid> ) TYPE java.util.List<org.ovirt.engine.core.compat.Guid> ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . METHOD_4 ( VAR_4 ) ) INIT = VAR_1 . METHOD_4 ( VAR_4 ) ) VAR VAR (  TYPE_3 . assertEquals ( STRING_1 , 1 , VAR_3 . size ( ) ) )  TYPE_3 . assertEquals ( STRING_1 , 1 , VAR_3 . size ( ) ) (  TYPE_3 . assertEquals ( STRING_2 , VAR_3 . get ( 0 ) , VAR_2 ) )  TYPE_3 . assertEquals ( STRING_2 , VAR_3 . get ( 0 ) , VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_1 . METHOD_2 ( ) ) INIT = TYPE_1 . METHOD_2 ( ) ) VAR VAR (  VAR_2 . METHOD_3 ( false ) )  VAR_2 . METHOD_3 ( false ) ( TRY TRY ( BLOCK BLOCK (  VAR_2 . METHOD_4 ( this . VAR_3 , VAR_4 , this ) )  VAR_2 . METHOD_4 ( this . VAR_3 , VAR_4 , this ) (  VAR_2 . METHOD_5 ( VAR_1 ) )  VAR_2 . METHOD_5 ( VAR_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_5 ( STRING_1 ) ; )  throw new TYPE_5 ( STRING_1 ) ; ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  VAR_2 . METHOD_6 ( ) )  VAR_2 . METHOD_6 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_5 ) NAME VAR_5 ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_1 . METHOD_2 ( null ) )  VAR_1 . METHOD_2 ( null ) (  VAR_1 . METHOD_3 ( null ) )  VAR_1 . METHOD_3 ( null ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  VAR_2 . METHOD_4 ( VAR_3 ) )  VAR_2 . METHOD_4 ( VAR_3 ) (  VAR_1 . METHOD_5 ( VAR_2 ) )  VAR_1 . METHOD_5 ( VAR_2 ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_1 . getStoragePoolId ( ) ) INIT = VAR_1 . getStoragePoolId ( ) ) VAR VAR (  TYPE_4 . assertEquals ( VAR_3 , VAR_4 ) )  TYPE_4 . assertEquals ( VAR_3 , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME result ) NAME result ( INIT = ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) INIT = ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) VAR VAR (  model . METHOD_1 ( ( result != null ? ( ( java.util.ArrayList < TYPE_2 > ) ( result ) ) : new java.util.ArrayList < TYPE_2 > ( ) ) ) )  model . METHOD_1 ( ( result != null ? ( ( java.util.ArrayList < TYPE_2 > ) ( result ) ) : new java.util.ArrayList < TYPE_2 > ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( METHOD_3 ( ) ) )  METHOD_2 ( METHOD_3 ( ) ) (  METHOD_4 ( 1 ) )  METHOD_4 ( 1 ) (  VAR_1 . METHOD_5 ( ) )  VAR_1 . METHOD_5 ( ) ( VAR VAR ( TYPE TYPE_1.Disk ) TYPE TYPE_1.Disk ( NAME disk ) NAME disk ( INIT = resource . get ( ) ) INIT = resource . get ( ) ) VAR VAR (  TYPE_2 . METHOD_6 ( disk , 1 ) )  TYPE_2 . METHOD_6 ( disk , 1 ) (  METHOD_7 ( disk ) )  METHOD_7 ( disk ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  command = org.mockito.Mockito . METHOD_2 ( new TYPE_1 < TYPE_2 > ( new TYPE_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , true ) ) ) )  command = org.mockito.Mockito . METHOD_2 ( new TYPE_1 < TYPE_2 > ( new TYPE_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , true ) ) ) (  METHOD_4 ( ) )  METHOD_4 ( ) (  METHOD_5 ( VAR_1 ) )  METHOD_5 ( VAR_1 ) (  METHOD_6 ( ) )  METHOD_6 ( ) (  METHOD_7 ( VAR_2 . Collections < java.lang.String > METHOD_8 ( ) ) )  METHOD_7 ( VAR_2 . Collections < java.lang.String > METHOD_8 ( ) ) (  METHOD_9 ( true ) )  METHOD_9 ( true ) (  METHOD_10 ( true ) )  METHOD_10 ( true ) (  TYPE_3 . METHOD_11 ( command ) )  TYPE_3 . METHOD_11 ( command ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME resource ) NAME resource ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_5.Disk ) TYPE TYPE_5.Disk ( NAME disk ) NAME disk ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR (  METHOD_3 ( disk ) )  METHOD_3 ( disk ) (  METHOD_4 ( disk ) )  METHOD_4 ( disk ) (  return resource . METHOD_5 ( VAR_3 , METHOD_6 ( VAR_1 , new TYPE_6 ( ) . map ( disk , null ) , disk ) , VAR_2 ) ; )  return resource . METHOD_5 ( VAR_3 , METHOD_6 ( VAR_1 , new TYPE_6 ( ) . map ( disk , null ) , disk ) , VAR_2 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( null ) ) INIT = METHOD_2 ( null ) ) VAR VAR (  METHOD_3 ( 1 ) )  METHOD_3 ( 1 ) (  METHOD_4 ( VAR_2 [ 0 ] ) )  METHOD_4 ( VAR_2 [ 0 ] ) (  METHOD_4 ( VAR_2 [ 1 ] ) )  METHOD_4 ( VAR_2 [ 1 ] ) (  VAR_3 . METHOD_5 ( VAR_1 ) )  VAR_3 . METHOD_5 ( VAR_1 ) (  VAR_4 . METHOD_6 ( ) )  VAR_4 . METHOD_6 ( ) (  METHOD_7 ( METHOD_8 ( ) ) )  METHOD_7 ( METHOD_8 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND source != null ) COND source != null ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME item ) NAME item ( IN ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) IN ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ( BLOCK BLOCK (  return item ; )  return item ; ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { for ( TYPE_1 item : ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) { return item ; } } return null ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { for ( TYPE_1 item : ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) { return item ; } } return null ; } } ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 ( ( STRING_1 + VAR_1 ) , VAR_3 . VDS ) ) INIT = new TYPE_2 ( ( STRING_1 + VAR_1 ) , VAR_3 . VDS ) ) VAR VAR (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_4 , VAR_2 , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_4 , VAR_2 , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  model . METHOD_2 ( VAR_1 [ 0 ] ) )  model . METHOD_2 ( VAR_1 [ 0 ] ) (  model . METHOD_3 ( new TYPE_2 ( ) ) )  model . METHOD_3 ( new TYPE_2 ( ) ) (  METHOD_4 ( METHOD_5 ( ) ) )  METHOD_4 ( METHOD_5 ( ) ) (  VAR_2 . METHOD_6 ( ) )  VAR_2 . METHOD_6 ( ) ( TRY TRY ( BLOCK BLOCK (  VAR_3 . add ( model ) )  VAR_3 . add ( model ) (  METHOD_7 ( STRING_1 ) )  METHOD_7 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( BLOCK BLOCK (  METHOD_8 ( VAR_4 , STRING_2 , STRING_3 , STRING_4 ) )  METHOD_8 ( VAR_4 , STRING_2 , STRING_3 , STRING_4 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND TYPE_2 . METHOD_2 ( result . METHOD_3 ( ) ) ) COND TYPE_2 . METHOD_2 ( result . METHOD_3 ( ) ) ( THEN THEN ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( IF IF ( COND ( result . METHOD_4 ( ) ) != null ) COND ( result . METHOD_4 ( ) ) != null ( THEN THEN (  VAR_1 = new TYPE_3 ( result . METHOD_4 ( ) . METHOD_5 ( ) , result . METHOD_3 ( ) ) )  VAR_1 = new TYPE_3 ( result . METHOD_4 ( ) . METHOD_5 ( ) , result . METHOD_3 ( ) ) ) THEN THEN ( ELSE ELSE (  VAR_1 = new TYPE_3 ( VAR_2 , result . METHOD_3 ( ) ) )  VAR_1 = new TYPE_3 ( VAR_2 , result . METHOD_3 ( ) ) ) ELSE ELSE ) IF IF (  throw VAR_1 ; )  throw VAR_1 ; ) THEN THEN ) IF IF (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.ui.uicommonweb.models.EntityModel<TYPE_2>> ) TYPE java.util.List<org.ovirt.engine.ui.uicommonweb.models.EntityModel<TYPE_2>> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( ) . setEntity ( false ) )  METHOD_2 ( ) . setEntity ( false ) ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.ui.uicommonweb.models.EntityModel<TYPE_2>> ) TYPE java.util.List<org.ovirt.engine.ui.uicommonweb.models.EntityModel<TYPE_2>> ( NAME VAR_3 ) NAME VAR_3 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR (  VAR_3 . METHOD_3 ( VAR_2 ) )  VAR_3 . METHOD_3 ( VAR_2 ) (  VAR_1 . METHOD_4 ( ) . setEntity ( false ) )  VAR_1 . METHOD_4 ( ) . setEntity ( false ) (  VAR_1 . setItems ( VAR_3 ) )  VAR_1 . setItems ( VAR_3 ) (  METHOD_5 ( VAR_3 . isEmpty ( ) ) )  METHOD_5 ( VAR_3 . isEmpty ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME vmId ) NAME vmId ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.Object> ) TYPE java.util.Map<java.lang.String,java.lang.Object> ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . METHOD_1 ( vmId , VAR_1 . METHOD_2 ( ) ) ) INIT = VAR_3 . METHOD_1 ( vmId , VAR_1 . METHOD_2 ( ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_1 ( VAR_2 ) ) INIT = new TYPE_1 ( VAR_2 ) ) VAR VAR (  return VAR_4 ; )  return VAR_4 ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_5 ) NAME VAR_5 ( BLOCK BLOCK (  throw new TYPE_4 ( VAR_5 ) ; )  throw new TYPE_4 ( VAR_5 ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME entity ) NAME entity ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ( INIT = getEntity ( VAR_2 class , VAR_3 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( entity . METHOD_2 ( ) ) , null , true ) ) INIT = getEntity ( VAR_2 class , VAR_3 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( entity . METHOD_2 ( ) ) , null , true ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_4 ) NAME VAR_4 ( INIT = getEntity ( VAR_5 class , VAR_6 , new TYPE_5 ( VAR_1 . METHOD_3 ( ) , VAR_1 . getName ( ) , entity . METHOD_4 ( ) , true ) , null , true ) ) INIT = getEntity ( VAR_5 class , VAR_6 , new TYPE_5 ( VAR_1 . METHOD_3 ( ) , VAR_1 . getName ( ) , entity . METHOD_4 ( ) , true ) , null , true ) ) VAR VAR (  model = METHOD_5 ( VAR_5 class , VAR_7 class ) . map ( VAR_4 , model ) )  model = METHOD_5 ( VAR_5 class , VAR_7 class ) . map ( VAR_4 , model ) (  return model ; )  return model ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME returnValue ) NAME returnValue ( INIT = true ) INIT = true ) VAR VAR ( IF IF ( COND ( TYPE_1 . METHOD_2 ( ) ) == null ) COND ( TYPE_1 . METHOD_2 ( ) ) == null ( THEN THEN (  METHOD_3 ( VAR_1 , VAR_2 ) )  METHOD_3 ( VAR_1 , VAR_2 ) (  returnValue = false )  returnValue = false ) THEN THEN ) IF IF ( IF IF ( COND returnValue && ( ( TYPE_1 . METHOD_2 ( ) . METHOD_4 ( ) ) == ( VAR_3 ) ) ) COND returnValue && ( ( TYPE_1 . METHOD_2 ( ) . METHOD_4 ( ) ) == ( VAR_3 ) ) ( THEN THEN (  METHOD_3 ( VAR_1 , VAR_4 ) )  METHOD_3 ( VAR_1 , VAR_4 ) (  returnValue = false )  returnValue = false ) THEN THEN ) IF IF (  return returnValue ; )  return returnValue ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return ( ( TYPE_2 . getName ( ) . equals ( VAR_1 . METHOD_2 ( ) ) ) && ( TYPE_2 . getName ( ) . equals ( VAR_1 ) ) ) || ( ( TYPE_3 . getName ( ) . equals ( VAR_1 . METHOD_2 ( ) ) ) && ( TYPE_4 . getName ( ) . equals ( VAR_1 . METHOD_3 ( ) ) ) ) ; )  return ( ( TYPE_2 . getName ( ) . equals ( VAR_1 . METHOD_2 ( ) ) ) && ( TYPE_2 . getName ( ) . equals ( VAR_1 ) ) ) || ( ( TYPE_3 . getName ( ) . equals ( VAR_1 . METHOD_2 ( ) ) ) && ( TYPE_4 . getName ( ) . equals ( VAR_1 . METHOD_3 ( ) ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME context ) NAME context ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME event ) NAME event ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( ) . METHOD_1 ( context , VAR_1 , TYPE_4 . getValue ( ) , TYPE_4 . METHOD_3 ( ) , event , VAR_2 ) )  METHOD_2 ( ) . METHOD_1 ( context , VAR_1 , TYPE_4 . getValue ( ) , TYPE_4 . METHOD_3 ( ) , event , VAR_2 ) ( IF IF ( COND ( TYPE_5 . equals ( event . METHOD_4 ( ) ) ) && ( ( VAR_3 ) != null ) ) COND ( TYPE_5 . equals ( event . METHOD_4 ( ) ) ) && ( ( VAR_3 ) != null ) ( THEN THEN (  VAR_3 . METHOD_5 ( event ) )  VAR_3 . METHOD_5 ( event ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( getParameters ( ) . METHOD_2 ( ) , getParameters ( ) . getStoragePoolId ( ) , VAR_2 ) ) INIT = new TYPE_2 ( getParameters ( ) . METHOD_2 ( ) , getParameters ( ) . getStoragePoolId ( ) , VAR_2 ) ) VAR VAR (  org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) )  org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) (  METHOD_5 ( ) . METHOD_6 ( VAR_3 ) )  METHOD_5 ( ) . METHOD_6 ( VAR_3 ) (  METHOD_7 ( ) )  METHOD_7 ( ) (  return new TYPE_1 ( VAR_4 , VAR_5 ) ; )  return new TYPE_1 ( VAR_4 , VAR_5 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = INT_1 ) INIT = INT_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = INT_2 ) INIT = INT_2 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_3 ) NAME VAR_3 ( INIT = org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) INIT = org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME cmd ) NAME cmd ( INIT = METHOD_3 ( VAR_1 , VAR_2 , VAR_3 ) ) INIT = METHOD_3 ( VAR_1 , VAR_2 , VAR_3 ) ) VAR VAR (  cmd . getVm ( ) . METHOD_4 ( STRING_1 ) )  cmd . getVm ( ) . METHOD_4 ( STRING_1 ) (  METHOD_5 ( cmd ) )  METHOD_5 ( cmd ) (  TYPE_3 . METHOD_6 ( cmd , VAR_4 ) )  TYPE_3 . METHOD_6 ( cmd , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND source != null ) COND source != null ( THEN THEN ( VAR VAR ( TYPE java.util.ArrayList<TYPE_1> ) TYPE java.util.ArrayList<TYPE_1> ( NAME list ) NAME list ( INIT = METHOD_2 ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) , VAR_1 , VAR_2 ) ) INIT = METHOD_2 ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) , VAR_1 , VAR_2 ) ) VAR VAR (  TYPE_2 . METHOD_3 ( list , new TYPE_3 ( ) ) )  TYPE_2 . METHOD_3 ( list , new TYPE_3 ( ) ) (  return list ; )  return list ; ) THEN THEN ) IF IF (  return new java.util.ArrayList < > ( ) ; )  return new java.util.ArrayList < > ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . getVm ( ) . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) ) )  TYPE_1 . getVm ( ) . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) ) (  TYPE_1 . getVm ( ) . METHOD_2 ( ) . METHOD_5 ( TYPE_1 . getParameters ( ) . METHOD_6 ( ) ) )  TYPE_1 . getVm ( ) . METHOD_2 ( ) . METHOD_5 ( TYPE_1 . getParameters ( ) . METHOD_6 ( ) ) (  return validate ( TYPE_2 . METHOD_1 ( TYPE_1 . getVm ( ) . METHOD_2 ( ) , METHOD_7 ( ) ) ) ; )  return validate ( TYPE_2 . METHOD_1 ( TYPE_1 . getVm ( ) . METHOD_2 ( ) , METHOD_7 ( ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( 1 , false ) )  METHOD_2 ( 1 , false ) (  METHOD_3 ( METHOD_4 ( VAR_1 , VAR_2 class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 [ 0 ] } ) ) )  METHOD_3 ( METHOD_4 ( VAR_1 , VAR_2 class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 [ 0 ] } ) ) (  METHOD_5 ( resource . METHOD_6 ( new TYPE_1 ( ) ) ) )  METHOD_5 ( resource . METHOD_6 ( new TYPE_1 ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Network > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Network > ( ) ; )  return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Network > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Network > ( ) ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Network > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Network > ( ) ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Network > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Network > ( ) ; } } (  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new TYPE_1 ( VAR_1 ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new TYPE_1 ( VAR_1 ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( VAR_1 ) )  METHOD_2 ( VAR_1 ) (  METHOD_3 ( 2 , false , false , false ) )  METHOD_3 ( 2 , false , false , false ) (  METHOD_4 ( METHOD_5 ( VAR_2 , VAR_3 class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_1 } , true , true ) ) )  METHOD_4 ( METHOD_5 ( VAR_2 , VAR_3 class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_1 } , true , true ) ) (  METHOD_6 ( resource . METHOD_7 ( ) ) )  METHOD_6 ( resource . METHOD_7 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . getParameters ( ) . METHOD_2 ( ) ) INIT = TYPE_2 . getParameters ( ) . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN (  TYPE_3 . METHOD_3 ( new TYPE_4 ( org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) , TYPE_2 . getParameters ( ) . METHOD_5 ( ) ) , VAR_2 , VAR_1 . METHOD_6 ( ) , VAR_1 . METHOD_7 ( ) , true , true ) )  TYPE_3 . METHOD_3 ( new TYPE_4 ( org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) , TYPE_2 . getParameters ( ) . METHOD_5 ( ) ) , VAR_2 , VAR_1 . METHOD_6 ( ) , VAR_1 . METHOD_7 ( ) , true , true ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<java.lang.String,TYPE_1> ) TYPE java.util.Map<java.lang.String,TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.HashMap < java.lang.String , TYPE_1 > ( ) ) INIT = new java.util.HashMap < java.lang.String , TYPE_1 > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.Network ) TYPE org.ovirt.engine.core.common.businessentities.Network ( NAME network ) NAME network ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK (  VAR_1 . put ( network . METHOD_2 ( ) , new TYPE_1 ( network , this ) ) )  VAR_1 . put ( network . METHOD_2 ( ) , new TYPE_1 ( network , this ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  METHOD_3 ( VAR_1 ) )  METHOD_3 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  METHOD_3 ( ) )  METHOD_3 ( ) (  METHOD_4 ( ) )  METHOD_4 ( ) (  METHOD_5 ( ) )  METHOD_5 ( ) (  org.mockito.Mockito.doReturn ( new TYPE_1 . ValidationResult ( VAR_1 ) ) . when ( VAR_2 ) . METHOD_6 ( TYPE_2 . any ( VAR_3 . Guid class ) ) )  org.mockito.Mockito.doReturn ( new TYPE_1 . ValidationResult ( VAR_1 ) ) . when ( VAR_2 ) . METHOD_6 ( TYPE_2 . any ( VAR_3 . Guid class ) ) (  TYPE_3 . METHOD_7 ( command , VAR_4 ) )  TYPE_3 . METHOD_7 ( command , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_1 ) ( model ) ) ) INIT = ( ( TYPE_1 ) ( model ) ) ) VAR VAR (  VAR_1 . setItems ( ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ) )  VAR_1 . setItems ( ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Version ) TYPE org.ovirt.engine.core.compat.Version ( NAME version ) NAME version ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND version == null ) COND version == null ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE java.lang.Boolean ) TYPE java.lang.Boolean ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( java.lang.Boolean ) ( TYPE_1 . METHOD_2 ( VAR_2 , version . toString ( ) ) ) ) ) INIT = ( ( java.lang.Boolean ) ( TYPE_1 . METHOD_2 ( VAR_2 , version . toString ( ) ) ) ) ) VAR VAR (  return VAR_1 == null ? false : VAR_1 ; )  return VAR_1 == null ? false : VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.VdcQueryReturnValue ) TYPE TYPE_1.VdcQueryReturnValue ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) ) INIT = ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) ) VAR VAR ( IF IF ( COND VAR_1 . getSucceeded ( ) ) COND VAR_1 . getSucceeded ( ) ( THEN THEN ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ( INIT = VAR_1 . getReturnValue ( ) ) INIT = VAR_1 . getReturnValue ( ) ) VAR VAR (  METHOD_1 ( TYPE_2 . METHOD_2 ( vm ) ) )  METHOD_1 ( TYPE_2 . METHOD_2 ( vm ) ) (  METHOD_3 ( ) )  METHOD_3 ( ) ) THEN THEN ( ELSE ELSE (  METHOD_4 ( VAR_2 . METHOD_5 ( METHOD_6 ( ) . getEntity ( ) ) ) )  METHOD_4 ( VAR_2 . METHOD_5 ( METHOD_6 ( ) . getEntity ( ) ) ) ) ELSE ELSE ) IF IF (  METHOD_7 ( ) )  METHOD_7 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.ArrayList<java.lang.String> ) TYPE java.util.ArrayList<java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME returnValue ) NAME returnValue ( INIT = true ) INIT = true ) VAR VAR ( IF IF ( COND ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( VAR_1 ) . size ( ) ) != 0 ) COND ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( VAR_1 ) . size ( ) ) != 0 ( THEN THEN (  returnValue = false )  returnValue = false (  VAR_2 . add ( TYPE_2 . toString ( ) ) )  VAR_2 . add ( TYPE_2 . toString ( ) ) ) THEN THEN ) IF IF (  return returnValue ; )  return returnValue ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<java.lang.String> ) RETURN TYPE_1<java.lang.String> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( RESOURCES RESOURCES ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME client ) NAME client ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ) RESOURCES RESOURCES ( BLOCK BLOCK (  METHOD_3 ( client , VAR_1 ) )  METHOD_3 ( client , VAR_1 ) (  METHOD_4 ( client , VAR_2 , VAR_3 ) )  METHOD_4 ( client , VAR_2 , VAR_3 ) ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_5 ( client ) ) INIT = METHOD_5 ( client ) ) VAR VAR (  return METHOD_6 ( VAR_4 ) ; )  return METHOD_6 ( VAR_4 ) ; ) BLOCK BLOCK ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.ArrayList<java.lang.Integer> ) RETURN java.util.ArrayList<java.lang.Integer> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<java.lang.Integer> ) TYPE java.util.ArrayList<java.lang.Integer> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( IN METHOD_2 ( ) ) IN METHOD_2 ( ) ( BLOCK BLOCK ( IF IF ( COND METHOD_3 ( VAR_2 ) ) COND METHOD_3 ( VAR_2 ) ( THEN THEN (  VAR_1 . add ( VAR_2 ) )  VAR_1 . add ( VAR_2 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  return ( ( ( ( ( ( ( ( TYPE_1 . METHOD_3 ( ) ) && ( TYPE_1 . METHOD_4 ( ) ) ) && ( TYPE_1 . METHOD_5 ( ) ) ) && ( METHOD_6 ( METHOD_7 ( ) ) ) ) && ( METHOD_8 ( ) ) ) && ( METHOD_9 ( ) ) ) && ( TYPE_1 . METHOD_10 ( ) ) ) && ( METHOD_11 ( ) ) ) && ( METHOD_12 ( ) ) ; )  return ( ( ( ( ( ( ( ( TYPE_1 . METHOD_3 ( ) ) && ( TYPE_1 . METHOD_4 ( ) ) ) && ( TYPE_1 . METHOD_5 ( ) ) ) && ( METHOD_6 ( METHOD_7 ( ) ) ) ) && ( METHOD_8 ( ) ) ) && ( METHOD_9 ( ) ) ) && ( TYPE_1 . METHOD_10 ( ) ) ) && ( METHOD_11 ( ) ) ) && ( METHOD_12 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.Version ) TYPE TYPE_1.Version ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 ( ( ( ( VAR_1 . METHOD_2 ( ) ) + STRING_1 ) + ( VAR_1 . METHOD_3 ( ) ) ) . METHOD_4 ( ) , true ) ) INIT = new TYPE_2 ( ( ( ( VAR_1 . METHOD_2 ( ) ) + STRING_1 ) + ( VAR_1 . METHOD_3 ( ) ) ) . METHOD_4 ( ) , true ) ) VAR VAR (  return VAR_2 . toString ( ) ; )  return VAR_2 . toString ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , VAR_2 ) ) ) )  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , VAR_2 ) ) ) (  METHOD_3 ( ) )  METHOD_3 ( ) (  METHOD_4 ( false , VAR_3 ) )  METHOD_4 ( false , VAR_3 ) ( TRY TRY ( BLOCK BLOCK (  cmd . METHOD_5 ( ) )  cmd . METHOD_5 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK (  TYPE_4 . assertEquals ( e . METHOD_6 ( ) , VAR_3 ) )  TYPE_4 . assertEquals ( e . METHOD_6 ( ) , VAR_3 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  org.mockito.Mockito . METHOD_7 ( VAR_4 , org.mockito.Mockito . METHOD_8 ( ) ) . METHOD_9 ( TYPE_5 . any ( VAR_5 class ) ) )  org.mockito.Mockito . METHOD_7 ( VAR_4 , org.mockito.Mockito . METHOD_8 ( ) ) . METHOD_9 ( TYPE_5 . any ( VAR_5 class ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( java.lang.String ) ( TYPE_1 . METHOD_2 ( VAR_2 ) ) ) ) INIT = ( ( java.lang.String ) ( TYPE_1 . METHOD_2 ( VAR_2 ) ) ) ) VAR VAR (  return ( ( VAR_1 != null ) && ( ! ( STRING_1 . equals ( VAR_1 ) ) ) ) && ( ! ( STRING_2 . METHOD_3 ( VAR_1 ) ) ) ; )  return ( ( VAR_1 != null ) && ( ! ( STRING_1 . equals ( VAR_1 ) ) ) ) && ( ! ( STRING_2 . METHOD_3 ( VAR_1 ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , METHOD_3 ( VAR_1 ) ) ) ) )  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , METHOD_3 ( VAR_1 ) ) ) ) (  METHOD_4 ( cmd ) )  METHOD_4 ( cmd ) (  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( VAR_3 ) . METHOD_5 ( ) )  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( VAR_3 ) . METHOD_5 ( ) (  TYPE_3 . METHOD_6 ( cmd . validate ( ) ) )  TYPE_3 . METHOD_6 ( cmd . validate ( ) ) (  TYPE_3 . METHOD_7 ( cmd . getReturnValue ( ) . METHOD_8 ( ) . METHOD_9 ( TYPE_4 . toString ( ) ) ) )  TYPE_3 . METHOD_7 ( cmd . getReturnValue ( ) . METHOD_8 ( ) . METHOD_9 ( TYPE_4 . toString ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  disk . METHOD_2 ( STRING_1 ) )  disk . METHOD_2 ( STRING_1 ) ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_3 ( INT_1 ) ) INIT = TYPE_2 . METHOD_3 ( INT_1 ) ) VAR VAR (  disk . METHOD_4 ( VAR_1 ) )  disk . METHOD_4 ( VAR_1 ) (  METHOD_5 ( disk , TYPE_2 . METHOD_6 ( STRING_1 ) , TYPE_2 . METHOD_7 ( VAR_1 . METHOD_8 ( 0 , INT_2 ) ) ) )  METHOD_5 ( disk , TYPE_2 . METHOD_6 ( STRING_1 ) , TYPE_2 . METHOD_7 ( VAR_1 . METHOD_8 ( 0 , INT_2 ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME status ) NAME status ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ) TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME domain ) NAME domain ( INIT = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) ) VAR VAR (  domain . METHOD_2 ( status ) )  domain . METHOD_2 ( status ) (  domain . setId ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) )  domain . setId ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) (  org.mockito.Mockito.when ( VAR_1 . get ( TYPE_2 . any ( VAR_2 . Guid class ) ) ) . thenReturn ( domain ) )  org.mockito.Mockito.when ( VAR_1 . get ( TYPE_2 . any ( VAR_2 . Guid class ) ) ) . thenReturn ( domain ) (  org.mockito.Mockito.when ( VAR_1 . METHOD_4 ( TYPE_2 . any ( VAR_2 . Guid class ) , TYPE_2 . any ( VAR_2 . Guid class ) ) ) . thenReturn ( domain ) )  org.mockito.Mockito.when ( VAR_1 . METHOD_4 ( TYPE_2 . any ( VAR_2 . Guid class ) , TYPE_2 . any ( VAR_2 . Guid class ) ) ) . thenReturn ( domain ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  command . METHOD_3 ( ) )  command . METHOD_3 ( ) (  org.mockito.Mockito . METHOD_4 ( VAR_1 ) . METHOD_5 ( TYPE_1 . METHOD_6 ( VAR_2 ) ) )  org.mockito.Mockito . METHOD_4 ( VAR_1 ) . METHOD_5 ( TYPE_1 . METHOD_6 ( VAR_2 ) ) (  org.mockito.Mockito . METHOD_4 ( VAR_1 ) . METHOD_7 ( TYPE_1 . METHOD_6 ( VAR_3 ) , TYPE_1 . any ( VAR_4 . Guid class ) ) )  org.mockito.Mockito . METHOD_4 ( VAR_1 ) . METHOD_7 ( TYPE_1 . METHOD_6 ( VAR_3 ) , TYPE_1 . any ( VAR_4 . Guid class ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( 1 ) )  METHOD_2 ( 1 ) (  METHOD_3 ( ) )  METHOD_3 ( ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_4 ( VAR_2 , VAR_3 class , new java.lang.String [ ] { STRING_1 , STRING_2 } , new java.lang.Object [ ] { VAR_4 [ 0 ] , java.lang.Boolean . FALSE } , true , true , false ) ) INIT = METHOD_4 ( VAR_2 , VAR_3 class , new java.lang.String [ ] { STRING_1 , STRING_2 } , new java.lang.Object [ ] { VAR_4 [ 0 ] , java.lang.Boolean . FALSE } , true , true , false ) ) VAR VAR (  VAR_1 = METHOD_5 ( VAR_1 , VAR_5 , TYPE_2 . toString ( ) ) )  VAR_1 = METHOD_5 ( VAR_1 , VAR_5 , TYPE_2 . toString ( ) ) (  METHOD_6 ( VAR_1 ) )  METHOD_6 ( VAR_1 ) (  VAR_6 . METHOD_7 ( ) )  VAR_6 . METHOD_7 ( ) (  resource . METHOD_8 ( ) )  resource . METHOD_8 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Version ) TYPE org.ovirt.engine.core.compat.Version ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_3 . getInstance ( ) . get ( VAR_4 class ) ) INIT = TYPE_3 . getInstance ( ) . get ( VAR_4 class ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_4<TYPE_5,TYPE_1>> ) TYPE java.util.List<TYPE_4<TYPE_5,TYPE_1>> ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_3 . METHOD_2 ( VAR_1 , VAR_2 ) ) INIT = VAR_3 . METHOD_2 ( VAR_1 , VAR_2 ) ) VAR VAR ( IF IF ( COND ! ( VAR_5 . isEmpty ( ) ) ) COND ! ( VAR_5 . isEmpty ( ) ) ( THEN THEN ( VAR VAR ( TYPE TYPE_4<TYPE_5,TYPE_1> ) TYPE TYPE_4<TYPE_5,TYPE_1> ( NAME VAR_6 ) NAME VAR_6 ( INIT = VAR_5 . get ( 0 ) ) INIT = VAR_5 . get ( 0 ) ) VAR VAR (  return VAR_6 . METHOD_3 ( ) ; )  return VAR_6 . METHOD_3 ( ) ; ) THEN THEN ) IF IF (  return VAR_7 ; )  return VAR_7 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN long ) RETURN long ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 <= 0 ) COND VAR_1 <= 0 ( THEN THEN (  throw new TYPE_1 ( STRING_1 ) ; )  throw new TYPE_1 ( STRING_1 ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_2 ) NAME VAR_2 ( INIT = super . METHOD_1 ( ) ) INIT = super . METHOD_1 ( ) ) VAR VAR ( IF IF ( COND VAR_2 == ( VAR_3 ) ) COND VAR_2 == ( VAR_3 ) ( THEN THEN (  VAR_2 ++ )  VAR_2 ++ ) THEN THEN ) IF IF (  return ( TYPE_2 . METHOD_2 ( VAR_2 ) ) % VAR_1 ; )  return ( TYPE_2 . METHOD_2 ( VAR_2 ) ) % VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME status ) NAME status ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = get ( VAR_1 ) ) INIT = get ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_3 != null ) COND VAR_3 != null ( THEN THEN (  VAR_3 . METHOD_2 ( status ) )  VAR_3 . METHOD_2 ( status ) ( IF IF ( COND ( VAR_2 . equals ( VAR_4 ) ) || ( VAR_3 . METHOD_3 ( ) ) ) COND ( VAR_2 . equals ( VAR_4 ) ) || ( VAR_3 . METHOD_3 ( ) ) ( THEN THEN ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_6 ) RETURN TYPE_6 ( NAME METHOD_5 ) NAME METHOD_5 ( BLOCK BLOCK (  org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_6 ( ) . METHOD_7 ( VAR_3 ) )  org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_6 ( ) . METHOD_7 ( VAR_3 ) (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD (  TYPE_4 . METHOD_4 ( VAR_5 , new TYPE_5 < java.lang.Object > ( ) { public TYPE_6 METHOD_5 ( ) { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_6 ( ) . METHOD_7 ( VAR_3 ) ; return null ; } } ) )  TYPE_4 . METHOD_4 ( VAR_5 , new TYPE_5 < java.lang.Object > ( ) { public TYPE_6 METHOD_5 ( ) { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_6 ( ) . METHOD_7 ( VAR_3 ) ; return null ; } } ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.List<java.lang.String> ) RETURN java.util.List<java.lang.String> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( IN METHOD_2 ( ) . METHOD_3 ( ) ) IN METHOD_2 ( ) . METHOD_3 ( ) ( BLOCK BLOCK (  VAR_1 . add ( VAR_2 . METHOD_4 ( ) ) )  VAR_1 . add ( VAR_2 . METHOD_4 ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  return METHOD_2 ( ) . METHOD_1 ( TYPE_1 . getVm ( ) , TYPE_1 . getReturnValue ( ) . METHOD_3 ( ) , TYPE_1 . getParameters ( ) , TYPE_1 . METHOD_4 ( ) , TYPE_1 . METHOD_5 ( ) , METHOD_6 ( ) ) ; )  return METHOD_2 ( ) . METHOD_1 ( TYPE_1 . getVm ( ) , TYPE_1 . getReturnValue ( ) . METHOD_3 ( ) , TYPE_1 . getParameters ( ) , TYPE_1 . METHOD_4 ( ) , TYPE_1 . METHOD_5 ( ) , METHOD_6 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<TYPE_1> ) TYPE java.util.ArrayList<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( java.util.ArrayList < TYPE_1 > ) ( result ) ) ) INIT = ( ( java.util.ArrayList < TYPE_1 > ) ( result ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_1 ( ) ) INIT = METHOD_1 ( ) ) VAR VAR (  VAR_1 . add ( 0 , null ) )  VAR_1 . add ( 0 , null ) (  VAR_2 . setItems ( VAR_1 ) )  VAR_2 . setItems ( VAR_1 ) (  VAR_2 . setIsChangable ( true ) )  VAR_2 . setIsChangable ( true ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_3 ) NAME METHOD_3 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.ArrayList<java.lang.String> ) TYPE java.util.ArrayList<java.lang.String> ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return ( VAR_6 ) + ( super . METHOD_3 ( VAR_4 , VAR_5 ) ) ; )  return ( VAR_6 ) + ( super . METHOD_3 ( VAR_4 , VAR_5 ) ) ; ) BLOCK BLOCK ) METHOD METHOD ( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_4 ) NAME METHOD_4 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return ( VAR_7 ) == ( VAR_5 . METHOD_5 ( ) ) ; )  return ( VAR_7 ) == ( VAR_5 . METHOD_5 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD (  METHOD_2 ( aQuery , VAR_1 , VAR_2 , VAR_3 , new TYPE_1 ( ) { protected java.lang.String METHOD_3 ( java.util.ArrayList < java.lang.String > VAR_4 , TYPE_2 VAR_5 ) { return ( VAR_6 ) + ( super . METHOD_3 ( VAR_4 , VAR_5 ) ) ; } protected boolean METHOD_4 ( TYPE_2 VAR_5 ) { return ( VAR_7 ) == ( VAR_5 . METHOD_5 ( ) ) ; } } ) )  METHOD_2 ( aQuery , VAR_1 , VAR_2 , VAR_3 , new TYPE_1 ( ) { protected java.lang.String METHOD_3 ( java.util.ArrayList < java.lang.String > VAR_4 , TYPE_2 VAR_5 ) { return ( VAR_6 ) + ( super . METHOD_3 ( VAR_4 , VAR_5 ) ) ; } protected boolean METHOD_4 ( TYPE_2 VAR_5 ) { return ( VAR_7 ) == ( VAR_5 . METHOD_5 ( ) ) ; } } ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME vmId ) NAME vmId ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return new TYPE_1 ( new TYPE_2 ( VAR_1 , vmId ) , VAR_2 , TYPE_3 . getName ( ) , STRING_1 , 0 , null , true , true , false , STRING_1 , null , null ) ; )  return new TYPE_1 ( new TYPE_2 ( VAR_1 , vmId ) , VAR_2 , TYPE_3 . getName ( ) , STRING_1 , 0 , null , true , true , false , STRING_1 , null , null ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.DiskImage ) TYPE TYPE_1.DiskImage ( NAME disk ) NAME disk ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.DiskImage ) TYPE TYPE_1.DiskImage ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( ) . METHOD_3 ( TYPE_2 . METHOD_4 ( ) . METHOD_5 ( ) ) ) INIT = TYPE_2 . METHOD_2 ( ) . METHOD_3 ( TYPE_2 . METHOD_4 ( ) . METHOD_5 ( ) ) ) VAR VAR ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  log . METHOD_6 ( STRING_1 , TYPE_2 . METHOD_4 ( ) . METHOD_5 ( ) ) )  log . METHOD_6 ( STRING_1 , TYPE_2 . METHOD_4 ( ) . METHOD_5 ( ) ) (  VAR_1 = TYPE_2 . METHOD_4 ( ) )  VAR_1 = TYPE_2 . METHOD_4 ( ) ) THEN THEN ) IF IF (  disk . METHOD_7 ( VAR_1 . METHOD_8 ( ) ) )  disk . METHOD_7 ( VAR_1 . METHOD_8 ( ) ) (  disk . METHOD_9 ( VAR_1 . METHOD_10 ( ) ) )  disk . METHOD_9 ( VAR_1 . METHOD_10 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( ) )  VAR_1 . METHOD_2 ( ) ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = true ) INIT = true ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( IN result . getReturnValue ( ) ) IN result . getReturnValue ( ) ( BLOCK BLOCK (  VAR_2 = VAR_2 && ( VAR_3 . METHOD_3 ( ) ) )  VAR_2 = VAR_2 && ( VAR_3 . METHOD_3 ( ) ) ( IF IF ( COND ! VAR_2 ) COND ! VAR_2 ( THEN THEN (  break ; )  break ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  METHOD_4 ( ) )  METHOD_4 ( ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME vmId ) NAME vmId ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND source != null ) COND source != null ( THEN THEN (  return source ; )  return source ; ) THEN THEN ) IF IF (  return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ; )  return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return source ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return source ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ; } } ( VAR VAR ( TYPE org.ovirt.engine.core.common.queries.IdQueryParameters ) TYPE org.ovirt.engine.core.common.queries.IdQueryParameters ( NAME params ) NAME params ( INIT = new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) ) INIT = new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) ) VAR VAR (  params . METHOD_2 ( VAR_1 ) )  params . METHOD_2 ( VAR_1 ) (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , params , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , params , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.Map<java.lang.String,java.lang.String> ) RETURN java.util.Map<java.lang.String,java.lang.String> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.Network ) TYPE org.ovirt.engine.core.common.businessentities.Network ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . getValue ( ) ) INIT = VAR_3 . getValue ( ) ) VAR VAR ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.String> ) TYPE java.util.Map<java.lang.String,java.lang.String> ( NAME VAR_4 ) NAME VAR_4 ( INIT = ( ( java.util.Map < java.lang.String , java.lang.String > ) ( VAR_2 . METHOD_2 ( VAR_1 . getName ( ) ) ) ) ) INIT = ( ( java.util.Map < java.lang.String , java.lang.String > ) ( VAR_2 . METHOD_2 ( VAR_1 . getName ( ) ) ) ) ) VAR VAR (  TYPE_2 . METHOD_3 ( ( ( STRING_1 + ( VAR_1 . getName ( ) ) ) + STRING_2 ) , VAR_4 ) )  TYPE_2 . METHOD_3 ( ( ( STRING_1 + ( VAR_1 . getName ( ) ) ) + STRING_2 ) , VAR_4 ) (  return VAR_4 ; )  return VAR_4 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Boolean ) RETURN java.lang.Boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( VAR_1 , new TYPE_2 ( VAR_2 . METHOD_4 ( ) ) ) )  TYPE_1 . getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( VAR_1 , new TYPE_2 ( VAR_2 . METHOD_4 ( ) ) ) ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.Network ) TYPE org.ovirt.engine.core.common.businessentities.Network ( NAME VAR_3 ) NAME VAR_3 ( IN METHOD_5 ( ) ) IN METHOD_5 ( ) ( BLOCK BLOCK (  TYPE_3 . METHOD_6 ( METHOD_7 ( ) , VAR_3 ) )  TYPE_3 . METHOD_6 ( METHOD_7 ( ) , VAR_3 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return java.lang.Boolean . TRUE ; )  return java.lang.Boolean . TRUE ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR (  command = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , VAR_1 ) ) ) )  command = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , VAR_1 ) ) ) (  org.mockito.Mockito.doReturn ( vds ) . when ( command ) . METHOD_4 ( ) )  org.mockito.Mockito.doReturn ( vds ) . when ( command ) . METHOD_4 ( ) (  TYPE_3 . METHOD_5 ( command . METHOD_6 ( ) ) )  TYPE_3 . METHOD_5 ( command . METHOD_6 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public synchronized ) MODIFIER public synchronized ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME host ) NAME host ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_1 . METHOD_2 ( host . getId ( ) ) ) ) COND ! ( VAR_1 . METHOD_2 ( host . getId ( ) ) ) ( THEN THEN (  VAR_1 . put ( host . getId ( ) , host ) )  VAR_1 . put ( host . getId ( ) , host ) ) THEN THEN ) IF IF (  VAR_2 . METHOD_3 ( STRING_1 , host . getName ( ) ) )  VAR_2 . METHOD_3 ( STRING_1 , host . getName ( ) ) (  METHOD_4 ( host ) )  METHOD_4 ( host ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1<java.lang.Boolean,TYPE_2> ) RETURN TYPE_1<java.lang.Boolean,TYPE_2> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ) TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME storageDomain ) NAME storageDomain ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME type ) NAME type ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME vds ) NAME vds ( INIT = TYPE_3 . METHOD_2 ( ) . get ( VAR_1 ) ) INIT = TYPE_3 . METHOD_2 ( ) . get ( VAR_1 ) ) VAR VAR ( IF IF ( COND ! ( TYPE_3 . METHOD_3 ( vds ) ) ) COND ! ( TYPE_3 . METHOD_3 ( vds ) ) ( THEN THEN (  VAR_2 . error ( STRING_1 , vds . getName ( ) , storageDomain . getName ( ) ) )  VAR_2 . error ( STRING_1 , vds . getName ( ) , storageDomain . getName ( ) ) (  TYPE_4 . METHOD_4 ( VAR_3 , null , vds ) )  TYPE_4 . METHOD_4 ( VAR_3 , null , vds ) (  return new TYPE_1 ( false , null ) ; )  return new TYPE_1 ( false , null ) ; ) THEN THEN ) IF IF (  return super . METHOD_1 ( storageDomain , VAR_1 , type ) ; )  return super . METHOD_1 ( storageDomain , VAR_1 , type ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ( INIT = METHOD_3 ( ) ) INIT = METHOD_3 ( ) ) VAR VAR (  vm . METHOD_4 ( INT_1 ) )  vm . METHOD_4 ( INT_1 ) (  METHOD_5 ( ) )  METHOD_5 ( ) (  org.mockito.Mockito.when ( VAR_1 . METHOD_6 ( INT_1 ) ) . thenReturn ( STRING_1 ) )  org.mockito.Mockito.when ( VAR_1 . METHOD_6 ( INT_1 ) ) . thenReturn ( STRING_1 ) (  org.mockito.Mockito.when ( VAR_1 . METHOD_7 ( TYPE_1 . any ( VAR_2 . Integer class ) , TYPE_1 . any ( VAR_3 . Version class ) ) ) . thenReturn ( TYPE_2 . METHOD_8 ( ) ) )  org.mockito.Mockito.when ( VAR_1 . METHOD_7 ( TYPE_1 . any ( VAR_2 . Integer class ) , TYPE_1 . any ( VAR_3 . Version class ) ) ) . thenReturn ( TYPE_2 . METHOD_8 ( ) ) (  TYPE_3 . METHOD_9 ( command , VAR_4 ) )  TYPE_3 . METHOD_9 ( command , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<java.lang.String> ) TYPE java.util.ArrayList<java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR (  VAR_2 . add ( VAR_1 . name ( ) ) )  VAR_2 . add ( VAR_1 . name ( ) ) (  org.mockito.Mockito.when ( VAR_3 . METHOD_2 ( VAR_4 , null ) ) . thenReturn ( VAR_2 ) )  org.mockito.Mockito.when ( VAR_3 . METHOD_2 ( VAR_4 , null ) ) . thenReturn ( VAR_2 ) (  org.mockito.Mockito.when ( VAR_3 . METHOD_2 ( VAR_5 , null ) ) . thenReturn ( new java.util.ArrayList < > ( ) ) )  org.mockito.Mockito.when ( VAR_3 . METHOD_2 ( VAR_5 , null ) ) . thenReturn ( new java.util.ArrayList < > ( ) ) (  TYPE_2 . getInstance ( ) . METHOD_3 ( VAR_6 class , VAR_3 ) )  TYPE_2 . getInstance ( ) . METHOD_3 ( VAR_6 class , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME validate ) NAME validate ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME returnValue ) NAME returnValue ( INIT = TYPE_2 . METHOD_1 ( VAR_1 , METHOD_2 ( ) , TYPE_3 . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( ) , true ) ) INIT = TYPE_2 . METHOD_1 ( VAR_1 , METHOD_2 ( ) , TYPE_3 . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( ) , true ) ) VAR VAR (  TYPE_3 . getReturnValue ( ) . METHOD_6 ( returnValue . METHOD_7 ( ) ) )  TYPE_3 . getReturnValue ( ) . METHOD_6 ( returnValue . METHOD_7 ( ) ) (  return returnValue . METHOD_8 ( ) ; )  return returnValue . METHOD_8 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1.DiskImage ) TYPE TYPE_1.DiskImage ( NAME diskImage ) NAME diskImage ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ) TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_2 ( diskImage ) ) INIT = METHOD_2 ( diskImage ) ) VAR VAR ( IF IF ( COND VAR_4 && ( VAR_1 . METHOD_3 ( VAR_3 ) ) ) COND VAR_4 && ( VAR_1 . METHOD_3 ( VAR_3 ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  return super . METHOD_1 ( VAR_1 , diskImage , VAR_2 , VAR_3 ) ; )  return super . METHOD_1 ( VAR_1 , diskImage , VAR_2 , VAR_3 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( getWindow ( ) ) != null ) COND ( getWindow ( ) ) != null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = getSelectedItem ( ) ) INIT = getSelectedItem ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 ( VAR_1 ) ) INIT = new TYPE_2 ( VAR_1 ) ) VAR VAR (  VAR_2 . setTitle ( VAR_3 . METHOD_2 ( ) ) )  VAR_2 . setTitle ( VAR_3 . METHOD_2 ( ) ) (  VAR_2 . METHOD_3 ( STRING_1 ) )  VAR_2 . METHOD_3 ( STRING_1 ) (  VAR_2 . METHOD_4 ( VAR_4 ) )  VAR_2 . METHOD_4 ( VAR_4 ) (  VAR_2 . METHOD_5 ( null ) )  VAR_2 . METHOD_5 ( null ) (  METHOD_6 ( VAR_1 ) )  METHOD_6 ( VAR_1 ) (  METHOD_7 ( VAR_2 ) )  METHOD_7 ( VAR_2 ) (  METHOD_8 ( VAR_2 ) )  METHOD_8 ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( STRING_1 , VAR_2 , STRING_2 , STRING_3 , STRING_4 ) ) INIT = METHOD_2 ( STRING_1 , VAR_2 , STRING_2 , STRING_3 , STRING_4 ) ) VAR VAR (  parameters . METHOD_3 ( VAR_1 ) )  parameters . METHOD_3 ( VAR_1 ) (  parameters . METHOD_4 ( VAR_3 ) )  parameters . METHOD_4 ( VAR_3 ) (  parameters . METHOD_5 ( VAR_3 ) )  parameters . METHOD_5 ( VAR_3 ) (  org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_6 ( ) )  org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_6 ( ) (  org.mockito.Mockito.doReturn ( false ) . when ( command ) . METHOD_7 ( ) )  org.mockito.Mockito.doReturn ( false ) . when ( command ) . METHOD_7 ( ) (  TYPE_2 . METHOD_8 ( command ) )  TYPE_2 . METHOD_8 ( command ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND source != null ) COND source != null ( THEN THEN ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS> ( NAME list ) NAME list ( INIT = VAR_2 . Linq < org.ovirt.engine.core.common.businessentities.VDS > METHOD_2 ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) ) INIT = VAR_2 . Linq < org.ovirt.engine.core.common.businessentities.VDS > METHOD_2 ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) ) VAR VAR (  return list ; )  return list ; ) THEN THEN ) IF IF (  return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ; )  return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > list = VAR_2 . Linq < org.ovirt.engine.core.common.businessentities.VDS > METHOD_2 ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) ; return list ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > list = VAR_2 . Linq < org.ovirt.engine.core.common.businessentities.VDS > METHOD_2 ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) ; return list ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ; } } (  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_3 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_3 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2<?> ) TYPE TYPE_2<?> ( NAME command ) NAME command ) VAR VAR ( VAR VAR ( TYPE TYPE_3.VdcActionType ) TYPE TYPE_3.VdcActionType ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3.VdcActionParametersBase ) TYPE TYPE_3.VdcActionParametersBase ( NAME params ) NAME params ( INIT = command . getParameters ( ) ) INIT = command . getParameters ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( IF IF ( COND ( params . METHOD_2 ( ) ) != null ) COND ( params . METHOD_2 ( ) ) != null ( THEN THEN (  VAR_2 = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . get ( ( ( org.ovirt.engine.core.compat.Guid ) ( params . METHOD_2 ( ) ) ) ) )  VAR_2 = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . get ( ( ( org.ovirt.engine.core.compat.Guid ) ( params . METHOD_2 ( ) ) ) ) ) THEN THEN ( ELSE ELSE (  VAR_2 = TYPE_4 . METHOD_4 ( VAR_1 , command ) )  VAR_2 = TYPE_4 . METHOD_4 ( VAR_1 , command ) (  TYPE_5 . METHOD_5 ( ) . METHOD_6 ( VAR_2 ) )  TYPE_5 . METHOD_5 ( ) . METHOD_6 ( VAR_2 ) ) ELSE ELSE ) IF IF (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( ) . METHOD_3 ( true ) )  METHOD_2 ( ) . METHOD_3 ( true ) (  METHOD_4 ( ) . METHOD_3 ( true ) )  METHOD_4 ( ) . METHOD_3 ( true ) ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  METHOD_2 ( ) . METHOD_5 ( new TYPE_1 [ ] { new TYPE_2 ( ) } ) )  METHOD_2 ( ) . METHOD_5 ( new TYPE_1 [ ] { new TYPE_2 ( ) } ) ) THEN THEN ( ELSE ELSE (  METHOD_4 ( ) . METHOD_6 ( new TYPE_1 [ ] { new TYPE_2 ( ) } ) )  METHOD_4 ( ) . METHOD_6 ( new TYPE_1 [ ] { new TYPE_2 ( ) } ) ) ELSE ELSE ) IF IF (  return ( METHOD_4 ( ) . METHOD_7 ( ) ) && ( METHOD_2 ( ) . METHOD_7 ( ) ) ; )  return ( METHOD_4 ( ) . METHOD_7 ( ) ) && ( METHOD_2 ( ) . METHOD_7 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.Network ) TYPE org.ovirt.engine.core.common.businessentities.Network ( NAME network ) NAME network ( INIT = ( ( org.ovirt.engine.core.common.businessentities . Network ) ( METHOD_2 ( ) . getSelectedItem ( ) ) ) ) INIT = ( ( org.ovirt.engine.core.common.businessentities . Network ) ( METHOD_2 ( ) . getSelectedItem ( ) ) ) ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( METHOD_3 ( ) ) && ( network != null ) ) && ( ! ( network . getId ( ) . equals ( VAR_2 ) ) ) ) INIT = ( ( METHOD_3 ( ) ) && ( network != null ) ) && ( ! ( network . getId ( ) . equals ( VAR_2 ) ) ) ) VAR VAR (  METHOD_4 ( ) . setIsChangable ( VAR_1 ) )  METHOD_4 ( ) . setIsChangable ( VAR_1 ) (  METHOD_5 ( ) . setIsChangable ( VAR_1 ) )  METHOD_5 ( ) . setIsChangable ( VAR_1 ) (  METHOD_6 ( ) . setIsChangable ( VAR_1 ) )  METHOD_6 ( ) . setIsChangable ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( TYPE_1 . any ( VAR_2 . String class ) ) ) . thenReturn ( TYPE_2 . METHOD_3 ( org.mockito.Mockito . METHOD_4 ( VAR_3 . VDS class ) ) ) )  org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( TYPE_1 . any ( VAR_2 . String class ) ) ) . thenReturn ( TYPE_2 . METHOD_3 ( org.mockito.Mockito . METHOD_4 ( VAR_3 . VDS class ) ) ) (  TYPE_3 . METHOD_5 ( validator . METHOD_6 ( ) , TYPE_4 . METHOD_7 ( VAR_4 ) ) )  TYPE_3 . METHOD_5 ( validator . METHOD_6 ( ) , TYPE_4 . METHOD_7 ( VAR_4 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME entity ) NAME entity ( INIT = TYPE_2 . METHOD_2 ( new TYPE_3 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , vm . getId ( ) ) , VAR_1 , vm . METHOD_4 ( ) . METHOD_5 ( ) , TYPE_2 . METHOD_6 ( vm . METHOD_7 ( ) ) , true , true ) ) INIT = TYPE_2 . METHOD_2 ( new TYPE_3 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , vm . getId ( ) ) , VAR_1 , vm . METHOD_4 ( ) . METHOD_5 ( ) , TYPE_2 . METHOD_6 ( vm . METHOD_7 ( ) ) , true , true ) ) VAR VAR ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND source == null ) COND source == null ( THEN THEN (  return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . network > ( ) ; )  return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . network > ( ) ; ) THEN THEN ) IF IF (  return source ; )  return source ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . network > ( ) ; } return source ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . network > ( ) ; } return source ; } } (  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new TYPE_1 ( VAR_1 ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new TYPE_1 ( VAR_1 ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_3 ) NAME VAR_3 ( INIT = org.ovirt.engine.core.compat.Guid . METHOD_2 ( VAR_2 ) ) INIT = org.ovirt.engine.core.compat.Guid . METHOD_2 ( VAR_2 ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_5 ) NAME VAR_5 ( INIT = org.ovirt.engine.core.compat.Guid . METHOD_2 ( VAR_4 . METHOD_3 ( ) ) ) INIT = org.ovirt.engine.core.compat.Guid . METHOD_2 ( VAR_4 . METHOD_3 ( ) ) ) VAR VAR ( IF IF ( COND VAR_5 . equals ( VAR_3 ) ) COND VAR_5 . equals ( VAR_3 ) ( THEN THEN ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_6 ) NAME VAR_6 ( INIT = VAR_4 . METHOD_4 ( ) ) INIT = VAR_4 . METHOD_4 ( ) ) VAR VAR ( IF IF ( COND ( VAR_4 . METHOD_5 ( ) ) != null ) COND ( VAR_4 . METHOD_5 ( ) ) != null ( THEN THEN (  VAR_6 += STRING_1 + ( VAR_4 . METHOD_5 ( ) ) )  VAR_6 += STRING_1 + ( VAR_4 . METHOD_5 ( ) ) ) THEN THEN ) IF IF (  return VAR_6 ; )  return VAR_6 ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return STRING_2 ; )  return STRING_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  return TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( ) , TYPE_2 . getReturnValue ( ) . METHOD_4 ( ) , TYPE_2 . getVm ( ) . getStoragePoolId ( ) , VAR_1 , true , true , false , false , true , true , METHOD_5 ( ) ) ; )  return TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( ) , TYPE_2 . getReturnValue ( ) . METHOD_4 ( ) , TYPE_2 . getVm ( ) . getStoragePoolId ( ) , VAR_1 , true , true , false , false , true , true , METHOD_5 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME context ) NAME context ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME event ) NAME event ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( ) . METHOD_1 ( context , VAR_1 , TYPE_4 . getValue ( ) , event , VAR_2 ) )  METHOD_2 ( ) . METHOD_1 ( context , VAR_1 , TYPE_4 . getValue ( ) , event , VAR_2 ) ( IF IF ( COND ( TYPE_5 . equals ( event . METHOD_3 ( ) ) ) && ( ( VAR_3 ) != null ) ) COND ( TYPE_5 . equals ( event . METHOD_3 ( ) ) ) && ( ( VAR_3 ) != null ) ( THEN THEN (  VAR_3 . METHOD_4 ( event ) )  VAR_3 . METHOD_4 ( event ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  return METHOD_2 ( VAR_1 , new TYPE_2 ( TYPE_3 . METHOD_3 ( ) . getId ( ) , TYPE_3 . METHOD_4 ( ) . METHOD_5 ( ) , TYPE_3 . METHOD_4 ( ) . getId ( ) , TYPE_3 . METHOD_4 ( ) . getName ( ) , VAR_2 . getId ( ) , TYPE_3 . getParameters ( ) . METHOD_6 ( ) , TYPE_3 . METHOD_4 ( ) . METHOD_7 ( ) ) ) ; )  return METHOD_2 ( VAR_1 , new TYPE_2 ( TYPE_3 . METHOD_3 ( ) . getId ( ) , TYPE_3 . METHOD_4 ( ) . METHOD_5 ( ) , TYPE_3 . METHOD_4 ( ) . getId ( ) , TYPE_3 . METHOD_4 ( ) . getName ( ) , VAR_2 . getId ( ) , TYPE_3 . getParameters ( ) . METHOD_6 ( ) , TYPE_3 . METHOD_4 ( ) . METHOD_7 ( ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( STRING_1 , VAR_2 , STRING_2 , STRING_3 , STRING_4 , STRING_5 ) ) INIT = METHOD_2 ( STRING_1 , VAR_2 , STRING_2 , STRING_3 , STRING_4 , STRING_5 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_2 ( STRING_1 , VAR_2 , STRING_2 , STRING_3 , STRING_4 , STRING_5 ) ) INIT = METHOD_2 ( STRING_1 , VAR_2 , STRING_2 , STRING_3 , STRING_4 , STRING_5 ) ) VAR VAR (  VAR_3 . METHOD_3 ( org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) . toString ( ) ) )  VAR_3 . METHOD_3 ( org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) . toString ( ) ) (  org.mockito.Mockito.when ( command . METHOD_5 ( VAR_1 ) ) . thenReturn ( VAR_3 ) )  org.mockito.Mockito.when ( command . METHOD_5 ( VAR_1 ) ) . thenReturn ( VAR_3 ) ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_4 ) NAME VAR_4 ( INIT = command . METHOD_6 ( VAR_1 , null ) ) INIT = command . METHOD_6 ( VAR_1 , null ) ) VAR VAR (  TYPE_2 . METHOD_7 ( VAR_4 ) )  TYPE_2 . METHOD_7 ( VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VdsNetworkInterface> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VdsNetworkInterface> ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ) INIT = METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME VAR_4 ) NAME VAR_4 ( IN VAR_3 ) IN VAR_3 ( BLOCK BLOCK ( IF IF ( COND VAR_1 . equals ( VAR_4 . METHOD_4 ( ) ) ) COND VAR_1 . equals ( VAR_4 . METHOD_4 ( ) ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return TYPE_1 . METHOD_2 ( vm , TYPE_2 . getReturnValue ( ) . METHOD_3 ( ) , vm . getStoragePoolId ( ) , METHOD_4 ( ) . getValue ( ) , false , true , false , false , true , false , false , true , VAR_1 . Collections < org.ovirt.engine.core.common.businessentities . Disk > METHOD_5 ( ) ) ; )  return TYPE_1 . METHOD_2 ( vm , TYPE_2 . getReturnValue ( ) . METHOD_3 ( ) , vm . getStoragePoolId ( ) , METHOD_4 ( ) . getValue ( ) , false , true , false , false , true , false , false , true , VAR_1 . Collections < org.ovirt.engine.core.common.businessentities . Disk > METHOD_5 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME host ) NAME host ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  host . METHOD_3 ( STRING_1 ) )  host . METHOD_3 ( STRING_1 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_4 ( ) ) INIT = METHOD_4 ( ) ) VAR VAR (  TYPE_2 . METHOD_5 ( VAR_1 . METHOD_6 ( host , VAR_2 ) ) )  TYPE_2 . METHOD_5 ( VAR_1 . METHOD_6 ( host , VAR_2 ) ) (  TYPE_2 . METHOD_5 ( VAR_1 . METHOD_6 ( host , VAR_3 ) ) )  TYPE_2 . METHOD_5 ( VAR_1 . METHOD_6 ( host , VAR_3 ) ) (  TYPE_2 . METHOD_7 ( VAR_1 . METHOD_6 ( host , VAR_4 ) ) )  TYPE_2 . METHOD_7 ( VAR_1 . METHOD_6 ( host , VAR_4 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  cmd . getVm ( ) . METHOD_3 ( VAR_1 ) )  cmd . getVm ( ) . METHOD_3 ( VAR_1 ) (  org.mockito.Mockito.doReturn ( true ) . when ( cmd ) . METHOD_4 ( ) )  org.mockito.Mockito.doReturn ( true ) . when ( cmd ) . METHOD_4 ( ) (  org.mockito.Mockito.doReturn ( true ) . when ( cmd ) . METHOD_5 ( ) )  org.mockito.Mockito.doReturn ( true ) . when ( cmd ) . METHOD_5 ( ) (  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( VAR_3 ) . METHOD_6 ( ) )  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( VAR_3 ) . METHOD_6 ( ) (  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( VAR_3 ) . METHOD_7 ( ) )  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( VAR_3 ) . METHOD_7 ( ) (  org.mockito.Mockito.doReturn ( true ) . when ( cmd ) . METHOD_8 ( ) )  org.mockito.Mockito.doReturn ( true ) . when ( cmd ) . METHOD_8 ( ) (  TYPE_1 . METHOD_9 ( cmd ) )  TYPE_1 . METHOD_9 ( cmd ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND source == null ) COND source == null ( THEN THEN (  return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ; )  return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ; ) THEN THEN ) IF IF (  return source ; )  return source ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ; } return source ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ; } return source ; } } (  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = 0 ) INIT = 0 ) VAR VAR ( IF IF ( COND ( VAR_4 . METHOD_2 ( ) ) != null ) COND ( VAR_4 . METHOD_2 ( ) ) != null ( THEN THEN (  VAR_3 = ( ( java.util.List < ? > ) ( METHOD_3 ( ) . METHOD_2 ( ) ) ) . size ( ) )  VAR_3 = ( ( java.util.List < ? > ) ( METHOD_3 ( ) . METHOD_2 ( ) ) ) . size ( ) ) THEN THEN ) IF IF ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_5 ) NAME VAR_5 ( INIT = METHOD_4 ( ) ) INIT = METHOD_4 ( ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_6 ) NAME VAR_6 ( INIT = METHOD_5 ( ) ) INIT = METHOD_5 ( ) ) VAR VAR (  return TYPE_2 . METHOD_1 ( VAR_1 , VAR_3 , VAR_5 , VAR_6 , VAR_2 ) ; )  return TYPE_2 . METHOD_1 ( VAR_1 , VAR_3 , VAR_5 , VAR_6 , VAR_2 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME validator ) NAME validator ( INIT = new TYPE_1 ( TYPE_2 . METHOD_2 ( ) ) ) INIT = new TYPE_1 ( TYPE_2 . METHOD_2 ( ) ) ) VAR VAR (  return ( ( ( validate ( validator . METHOD_3 ( ) ) ) && ( validate ( validator . METHOD_4 ( ) ) ) ) && ( validate ( validator . METHOD_5 ( ) ) ) ) && ( validate ( validator . METHOD_6 ( TYPE_2 . getParameters ( ) . METHOD_7 ( ) ) ) ) ; )  return ( ( ( validate ( validator . METHOD_3 ( ) ) ) && ( validate ( validator . METHOD_4 ( ) ) ) ) && ( validate ( validator . METHOD_5 ( ) ) ) ) && ( validate ( validator . METHOD_6 ( TYPE_2 . getParameters ( ) . METHOD_7 ( ) ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME result ) NAME result ( INIT = 0 ) INIT = 0 ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.DiskImage ) TYPE org.ovirt.engine.core.common.businessentities.DiskImage ( NAME VAR_2 ) NAME VAR_2 ( IN METHOD_2 ( ) ) IN METHOD_2 ( ) ( BLOCK BLOCK ( IF IF ( COND ( VAR_2 . METHOD_3 ( ) ) != ( VAR_3 ) ) COND ( VAR_2 . METHOD_3 ( ) ) != ( VAR_3 ) ( THEN THEN ( IF IF ( COND VAR_2 . METHOD_4 ( ) . get ( 0 ) . getValue ( ) . equals ( VAR_1 ) ) COND VAR_2 . METHOD_4 ( ) . get ( 0 ) . getValue ( ) . equals ( VAR_1 ) ( THEN THEN (  result = result + ( ( int ) ( TYPE_1 . METHOD_5 ( VAR_2 . METHOD_6 ( ) ) ) ) )  result = result + ( ( int ) ( TYPE_1 . METHOD_5 ( VAR_2 . METHOD_6 ( ) ) ) ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = INT_1 ) INIT = INT_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME result ) NAME result ( INIT = 1 ) INIT = 1 ) VAR VAR (  result = ( VAR_1 * result ) + ( ( VAR_2 ) == null ? 0 : VAR_2 . METHOD_1 ( ) ) )  result = ( VAR_1 * result ) + ( ( VAR_2 ) == null ? 0 : VAR_2 . METHOD_1 ( ) ) (  result = ( VAR_1 * result ) + ( ( VAR_3 ) == null ? 0 : VAR_3 . METHOD_1 ( ) ) )  result = ( VAR_1 * result ) + ( ( VAR_3 ) == null ? 0 : VAR_3 . METHOD_1 ( ) ) (  result = ( VAR_1 * result ) + ( ( VAR_4 ) == null ? 0 : VAR_4 . METHOD_1 ( ) ) )  result = ( VAR_1 * result ) + ( ( VAR_4 ) == null ? 0 : VAR_4 . METHOD_1 ( ) ) (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME params ) NAME params ( INIT = new TYPE_1 ( METHOD_2 ( ) ) ) INIT = new TYPE_1 ( METHOD_2 ( ) ) ) VAR VAR (  METHOD_3 ( null ) )  METHOD_3 ( null ) ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_5 ) NAME METHOD_5 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME model ) NAME model ( INIT = ( ( TYPE_4 ) ( result . METHOD_6 ( ) ) ) ) INIT = ( ( TYPE_4 ) ( result . METHOD_6 ( ) ) ) ) VAR VAR (  model . METHOD_7 ( ) )  model . METHOD_7 ( ) (  model . METHOD_8 ( ) )  model . METHOD_8 ( ) ) BLOCK BLOCK ) METHOD METHOD (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_4 ( VAR_1 , params , new TYPE_2 ( ) { public void METHOD_5 ( TYPE_3 result ) { TYPE_4 model = ( ( TYPE_4 ) ( result . METHOD_6 ( ) ) ) ; model . METHOD_7 ( ) ; model . METHOD_8 ( ) ; } } , this ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_4 ( VAR_1 , params , new TYPE_2 ( ) { public void METHOD_5 ( TYPE_3 result ) { TYPE_4 model = ( ( TYPE_4 ) ( result . METHOD_6 ( ) ) ) ; model . METHOD_7 ( ) ; model . METHOD_8 ( ) ; } } , this ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME parameters ) NAME parameters ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ) TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( parameters . METHOD_3 ( ) ) ) INIT = METHOD_2 ( parameters . METHOD_3 ( ) ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ) TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_4 ( parameters . METHOD_5 ( ) , TYPE_2 . getStoragePoolId ( ) ) ) INIT = METHOD_4 ( parameters . METHOD_5 ( ) , TYPE_2 . getStoragePoolId ( ) ) ) VAR VAR (  return ( ( METHOD_6 ( VAR_1 ) ) && ( METHOD_7 ( VAR_2 ) ) ) && ( ( METHOD_8 ( ) ) || ( METHOD_9 ( VAR_2 , VAR_1 ) ) ) ; )  return ( ( METHOD_6 ( VAR_1 ) ) && ( METHOD_7 ( VAR_2 ) ) ) && ( ( METHOD_8 ( ) ) || ( METHOD_9 ( VAR_2 , VAR_1 ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) (  dao = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) )  dao = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) (  VAR_2 = METHOD_2 ( VAR_1 . METHOD_4 ( ) ) )  VAR_2 = METHOD_2 ( VAR_1 . METHOD_4 ( ) ) (  VAR_3 = METHOD_2 ( VAR_1 . METHOD_5 ( ) ) )  VAR_3 = METHOD_2 ( VAR_1 . METHOD_5 ( ) ) (  VAR_4 = VAR_2 . get ( VAR_5 ) )  VAR_4 = VAR_2 . get ( VAR_5 ) (  VAR_6 = new TYPE_1 ( ) )  VAR_6 = new TYPE_1 ( ) (  VAR_6 . METHOD_6 ( STRING_1 ) )  VAR_6 . METHOD_6 ( STRING_1 ) (  VAR_6 . METHOD_7 ( VAR_4 . METHOD_8 ( ) ) )  VAR_6 . METHOD_7 ( VAR_4 . METHOD_8 ( ) ) (  VAR_7 = new TYPE_2 ( ) )  VAR_7 = new TYPE_2 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.Disk ) TYPE TYPE_1.Disk ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  assertEquals ( VAR_2 [ VAR_1 ] . toString ( ) , model . getId ( ) ) )  assertEquals ( VAR_2 [ VAR_1 ] . toString ( ) , model . getId ( ) ) (  METHOD_2 ( model . METHOD_3 ( ) ) )  METHOD_2 ( model . METHOD_3 ( ) ) (  METHOD_2 ( ( ! ( model . METHOD_4 ( ) ) ) ) )  METHOD_2 ( ( ! ( model . METHOD_4 ( ) ) ) ) (  METHOD_2 ( model . METHOD_5 ( ) ) )  METHOD_2 ( model . METHOD_5 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME sender ) NAME sender ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME storageDomain ) NAME storageDomain ( INIT = ( ( TYPE_1 ) ( ( ( TYPE_2 ) ( sender ) ) . getSelectedItem ( ) ) ) ) INIT = ( ( TYPE_1 ) ( ( ( TYPE_2 ) ( sender ) ) . getSelectedItem ( ) ) ) ) VAR VAR ( IF IF ( COND storageDomain != null ) COND storageDomain != null ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK ( IF IF ( COND VAR_1 . METHOD_2 ( ) . equals ( sender ) ) COND VAR_1 . METHOD_2 ( ) . equals ( sender ) ( THEN THEN (  METHOD_3 ( storageDomain . getId ( ) , VAR_1 . METHOD_4 ( ) ) )  METHOD_3 ( storageDomain . getId ( ) , VAR_1 . METHOD_4 ( ) ) (  break ; )  break ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_3 ( TYPE_4 . METHOD_2 ( this . host ) , this . VAR_2 ) ) INIT = new TYPE_3 ( TYPE_4 . METHOD_2 ( this . host ) , this . VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_5 . METHOD_3 ( ) ) INIT = TYPE_5 . METHOD_3 ( ) ) VAR VAR (  VAR_3 . METHOD_1 ( VAR_1 ) )  VAR_3 . METHOD_1 ( VAR_1 ) (  VAR_3 . METHOD_4 ( false ) )  VAR_3 . METHOD_4 ( false ) ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_5 ) INIT = VAR_5 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_6 ) NAME VAR_6 ( INIT = VAR_3 . METHOD_5 ( this . VAR_7 , VAR_4 , new TYPE_6 < > ( ) ) ) INIT = VAR_3 . METHOD_5 ( this . VAR_7 , VAR_4 , new TYPE_6 < > ( ) ) ) VAR VAR (  METHOD_6 ( true ) )  METHOD_6 ( true ) (  METHOD_7 ( ) )  METHOD_7 ( ) (  return VAR_6 ; )  return VAR_6 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( false ) )  METHOD_2 ( false ) ( TRY TRY ( BLOCK BLOCK (  command . METHOD_3 ( ) )  command . METHOD_3 ( ) (  TYPE_1 . METHOD_4 ( ) )  TYPE_1 . METHOD_4 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( BLOCK BLOCK (  org.mockito.Mockito . METHOD_5 ( VAR_2 , org.mockito.Mockito . METHOD_6 ( INT_1 ) ) . log ( TYPE_3 . any ( VAR_3 class ) , TYPE_3 . any ( VAR_4 . AuditLogType class ) ) )  org.mockito.Mockito . METHOD_5 ( VAR_2 , org.mockito.Mockito . METHOD_6 ( INT_1 ) ) . log ( TYPE_3 . any ( VAR_3 class ) , TYPE_3 . any ( VAR_4 . AuditLogType class ) ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  this . VAR_1 = VAR_1 )  this . VAR_1 = VAR_1 (  this . VAR_2 = VAR_2 )  this . VAR_2 = VAR_2 (  this . VAR_4 . METHOD_2 ( VAR_2 ) )  this . VAR_4 . METHOD_2 ( VAR_2 ) (  this . VAR_4 . METHOD_3 ( ) )  this . VAR_4 . METHOD_3 ( ) (  this . VAR_3 = VAR_3 )  this . VAR_3 = VAR_3 (  METHOD_4 ( true ) )  METHOD_4 ( true ) (  METHOD_5 ( false ) )  METHOD_5 ( false ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  return METHOD_2 ( VAR_1 , new TYPE_2 ( TYPE_3 . METHOD_3 ( ) . getId ( ) , TYPE_3 . METHOD_4 ( ) . METHOD_5 ( ) , TYPE_3 . METHOD_4 ( ) . getId ( ) , TYPE_3 . METHOD_4 ( ) . METHOD_6 ( ) , VAR_2 . getId ( ) , TYPE_3 . getParameters ( ) . METHOD_7 ( ) , TYPE_3 . METHOD_4 ( ) . METHOD_8 ( ) ) ) ; )  return METHOD_2 ( VAR_1 , new TYPE_2 ( TYPE_3 . METHOD_3 ( ) . getId ( ) , TYPE_3 . METHOD_4 ( ) . METHOD_5 ( ) , TYPE_3 . METHOD_4 ( ) . getId ( ) , TYPE_3 . METHOD_4 ( ) . METHOD_6 ( ) , VAR_2 . getId ( ) , TYPE_3 . getParameters ( ) . METHOD_7 ( ) , TYPE_3 . METHOD_4 ( ) . METHOD_8 ( ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  model . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_1 class ) ) )  model . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_1 class ) ) (  model . METHOD_4 ( TYPE_2 . METHOD_3 ( VAR_2 class ) ) )  model . METHOD_4 ( TYPE_2 . METHOD_3 ( VAR_2 class ) ) (  model . METHOD_5 ( TYPE_2 . METHOD_3 ( VAR_3 class ) ) )  model . METHOD_5 ( TYPE_2 . METHOD_3 ( VAR_3 class ) ) (  model . METHOD_6 ( TYPE_3 . METHOD_7 ( TYPE_2 . METHOD_3 ( VAR_4 class ) ) ) )  model . METHOD_6 ( TYPE_3 . METHOD_7 ( TYPE_2 . METHOD_3 ( VAR_4 class ) ) ) (  model . METHOD_8 ( null ) )  model . METHOD_8 ( null ) (  return model ; )  return model ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  super . METHOD_1 ( VAR_1 ) )  super . METHOD_1 ( VAR_1 ) ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( INT_1 , VAR_2 ) )  METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( INT_1 , VAR_2 ) (  METHOD_2 ( ) . METHOD_3 ( ) . METHOD_5 ( INT_1 , VAR_2 ) )  METHOD_2 ( ) . METHOD_3 ( ) . METHOD_5 ( INT_1 , VAR_2 ) (  METHOD_2 ( ) . METHOD_3 ( ) . METHOD_6 ( VAR_3 ) )  METHOD_2 ( ) . METHOD_3 ( ) . METHOD_6 ( VAR_3 ) (  METHOD_2 ( ) . METHOD_3 ( ) . METHOD_7 ( VAR_4 , STRING_1 ) )  METHOD_2 ( ) . METHOD_3 ( ) . METHOD_7 ( VAR_4 , STRING_1 ) (  METHOD_8 ( ) )  METHOD_8 ( ) (  TYPE_1 . METHOD_9 ( VAR_5 ) )  TYPE_1 . METHOD_9 ( VAR_5 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ( NAME iface ) NAME iface ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > ) ( source ) ) ) INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > ) ( source ) ) ) VAR VAR ( IF IF ( COND ( VAR_2 . size ( ) ) > 0 ) COND ( VAR_2 . size ( ) ) > 0 ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > VAR_2 = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > ) ( source ) ) ; if ( ( VAR_2 . size ( ) ) > 0 ) { return true ; } return false ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > VAR_2 = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > ) ( source ) ) ; if ( ( VAR_2 . size ( ) ) > 0 ) { return true ; } return false ; } } (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_3 , new TYPE_1 ( VAR_1 , iface ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_3 , new TYPE_1 ( VAR_1 , iface ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME nic ) NAME nic ( IN TYPE_2 . getVm ( ) . METHOD_2 ( ) ) IN TYPE_2 . getVm ( ) . METHOD_2 ( ) ( BLOCK BLOCK ( IF IF ( COND ( nic . METHOD_3 ( ) ) == null ) COND ( nic . METHOD_3 ( ) ) == null ( THEN THEN ( IF IF ( COND ! ( TYPE_3 . METHOD_4 ( TYPE_2 . getVm ( ) . METHOD_5 ( ) . getValue ( ) ) ) ) COND ! ( TYPE_3 . METHOD_4 ( TYPE_2 . getVm ( ) . METHOD_5 ( ) . getValue ( ) ) ) ( THEN THEN (  addCanDoActionMessage ( VAR_1 ) )  addCanDoActionMessage ( VAR_1 ) (  return false ; )  return false ; ) THEN THEN ( ELSE ELSE (  return true ; )  return true ; ) ELSE ELSE ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ( INIT = getEntity ( ) ) INIT = getEntity ( ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME VAR_1 ) NAME VAR_1 ( INIT = new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; model . METHOD_2 ( ( ( java.lang.Boolean ) ( returnValue ) ) ) ; } } ) ) INIT = new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; model . METHOD_2 ( ( ( java.lang.Boolean ) ( returnValue ) ) ) ; } } ) ) VAR VAR ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ( INIT = ( ( TYPE_1 ) ( target ) ) ) INIT = ( ( TYPE_1 ) ( target ) ) ) VAR VAR (  model . METHOD_2 ( ( ( java.lang.Boolean ) ( returnValue ) ) ) )  model . METHOD_2 ( ( ( java.lang.Boolean ) ( returnValue ) ) ) ) BLOCK BLOCK ) METHOD METHOD (  TYPE_2 . METHOD_3 ( VAR_1 , VAR_2 , vm . METHOD_4 ( ) , VAR_3 ) )  TYPE_2 . METHOD_3 ( VAR_1 , VAR_2 , vm . METHOD_4 ( ) , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.Disk ) TYPE TYPE_1.Disk ( NAME disk ) NAME disk ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( disk ) ) INIT = METHOD_2 ( disk ) ) VAR VAR ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN ( VAR VAR ( TYPE TYPE_1.StorageDomain ) TYPE TYPE_1.StorageDomain ( NAME storageDomain ) NAME storageDomain ( INIT = METHOD_3 ( VAR_1 ) ) INIT = METHOD_3 ( VAR_1 ) ) VAR VAR ( IF IF ( COND storageDomain != null ) COND storageDomain != null ( THEN THEN (  disk . METHOD_4 ( TYPE_2 . map ( storageDomain . METHOD_5 ( ) ) . value ( ) ) )  disk . METHOD_4 ( TYPE_2 . map ( storageDomain . METHOD_5 ( ) ) . value ( ) ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND METHOD_2 ( ) . getParameters ( ) . METHOD_3 ( ) ) COND METHOD_2 ( ) . getParameters ( ) . METHOD_3 ( ) ( THEN THEN (  getReturnValue ( ) . METHOD_4 ( false ) )  getReturnValue ( ) . METHOD_4 ( false ) (  METHOD_5 ( ) )  METHOD_5 ( ) (  METHOD_6 ( TYPE_1 . getInstance ( ) . METHOD_7 ( ) . METHOD_8 ( METHOD_9 ( ) , METHOD_10 ( ) ) ) )  METHOD_6 ( TYPE_1 . getInstance ( ) . METHOD_7 ( ) . METHOD_8 ( METHOD_9 ( ) , METHOD_10 ( ) ) ) ) THEN THEN ) IF IF (  TYPE_2 . METHOD_11 ( METHOD_2 ( ) . METHOD_12 ( ) , true ) )  TYPE_2 . METHOD_11 ( METHOD_2 ( ) . METHOD_12 ( ) , true ) (  getReturnValue ( ) . METHOD_4 ( true ) )  getReturnValue ( ) . METHOD_4 ( true ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_1 . METHOD_2 ( VAR_2 ) )  VAR_1 . METHOD_2 ( VAR_2 ) (  VAR_1 . METHOD_3 ( VAR_3 ) )  VAR_1 . METHOD_3 ( VAR_3 ) (  VAR_1 . METHOD_4 ( STRING_1 ) )  VAR_1 . METHOD_4 ( STRING_1 ) (  VAR_4 . METHOD_5 ( ) . METHOD_6 ( VAR_1 ) )  VAR_4 . METHOD_5 ( ) . METHOD_6 ( VAR_1 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_4 . METHOD_5 ( ) . get ( VAR_1 . METHOD_7 ( ) ) ) INIT = VAR_4 . METHOD_5 ( ) . get ( VAR_1 . METHOD_7 ( ) ) ) VAR VAR (  TYPE_2 . METHOD_8 ( VAR_5 ) )  TYPE_2 . METHOD_8 ( VAR_5 ) (  TYPE_2 . assertEquals ( VAR_1 , VAR_5 ) )  TYPE_2 . assertEquals ( VAR_1 , VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME result ) NAME result ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR ( IF IF ( COND ( TYPE_1 . METHOD_2 ( VAR_1 ) ) && ( TYPE_1 . METHOD_2 ( VAR_2 ) ) ) COND ( TYPE_1 . METHOD_2 ( VAR_1 ) ) && ( TYPE_1 . METHOD_2 ( VAR_2 ) ) ( THEN THEN ( IF IF ( COND VAR_3 . METHOD_3 ( VAR_1 ) ) COND VAR_3 . METHOD_3 ( VAR_1 ) ( THEN THEN ( VAR VAR ( TYPE java.util.HashMap<java.lang.String,java.lang.String> ) TYPE java.util.HashMap<java.lang.String,java.lang.String> ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_3 . get ( VAR_1 ) ) INIT = VAR_3 . get ( VAR_1 ) ) VAR VAR (  result = VAR_4 . METHOD_4 ( VAR_2 , VAR_2 ) )  result = VAR_4 . METHOD_4 ( VAR_2 , VAR_2 ) ) THEN THEN ( ELSE ELSE (  VAR_5 . error ( VAR_6 , VAR_1 ) )  VAR_5 . error ( VAR_6 , VAR_1 ) ) ELSE ELSE ) IF IF ) THEN THEN ) IF IF (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.doReturn ( METHOD_2 ( true ) ) . when ( VAR_1 ) . METHOD_3 ( TYPE_1 . METHOD_4 ( VAR_2 ) , TYPE_1 . any ( VAR_3 class ) ) )  org.mockito.Mockito.doReturn ( METHOD_2 ( true ) ) . when ( VAR_1 ) . METHOD_3 ( TYPE_1 . METHOD_4 ( VAR_2 ) , TYPE_1 . any ( VAR_3 class ) ) (  VAR_1 . METHOD_5 ( ) )  VAR_1 . METHOD_5 ( ) (  org.mockito.Mockito . METHOD_6 ( VAR_4 , org.mockito.Mockito . METHOD_7 ( 2 ) ) . METHOD_8 ( TYPE_1 . METHOD_9 ( ) ) )  org.mockito.Mockito . METHOD_6 ( VAR_4 , org.mockito.Mockito . METHOD_7 ( 2 ) ) . METHOD_8 ( TYPE_1 . METHOD_9 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( 1 , false , false ) )  METHOD_2 ( 1 , false , false ) (  METHOD_2 ( 1 , true , true ) )  METHOD_2 ( 1 , true , true ) (  METHOD_3 ( VAR_1 [ 1 ] ) )  METHOD_3 ( VAR_1 [ 1 ] ) (  METHOD_4 ( METHOD_5 ( VAR_2 , VAR_3 class , new java.lang.String [ ] { } , new java.lang.Object [ ] { } , true , true ) ) )  METHOD_4 ( METHOD_5 ( VAR_2 , VAR_3 class , new java.lang.String [ ] { } , new java.lang.Object [ ] { } , true , true ) ) (  METHOD_6 ( resource . METHOD_7 ( getModel ( 0 ) ) , 0 ) )  METHOD_6 ( resource . METHOD_7 ( getModel ( 0 ) ) , 0 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( true , new org.ovirt.engine.core.common.businessentities.VDS ( ) , true ) )  METHOD_2 ( true , new org.ovirt.engine.core.common.businessentities.VDS ( ) , true ) (  org.mockito.Mockito.when ( VAR_1 . METHOD_3 ( TYPE_1 . any ( VAR_2 class ) ) ) . METHOD_4 ( new TYPE_2 ( ) ) )  org.mockito.Mockito.when ( VAR_1 . METHOD_3 ( TYPE_1 . any ( VAR_2 class ) ) ) . METHOD_4 ( new TYPE_2 ( ) ) (  TYPE_3 . METHOD_5 ( command . validate ( ) ) )  TYPE_3 . METHOD_5 ( command . validate ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME returnValue ) NAME returnValue ( INIT = false ) INIT = false ) VAR VAR ( IF IF ( COND ( METHOD_2 ( ) ) != null ) COND ( METHOD_2 ( ) ) != null ( THEN THEN ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME VAR_3 ) NAME VAR_3 ( INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . get ( METHOD_2 ( ) ) ) INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . get ( METHOD_2 ( ) ) ) VAR VAR (  VAR_4 . METHOD_4 ( STRING_1 , METHOD_2 ( ) , VAR_3 . METHOD_5 ( ) , VAR_3 . METHOD_6 ( ) ) )  VAR_4 . METHOD_4 ( STRING_1 , METHOD_2 ( ) , VAR_3 . METHOD_5 ( ) , VAR_3 . METHOD_6 ( ) ) (  returnValue = METHOD_7 ( VAR_1 , VAR_2 , new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( TYPE_1 . METHOD_8 ( VAR_3 ) ) ) )  returnValue = METHOD_7 ( VAR_1 , VAR_2 , new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( TYPE_1 . METHOD_8 ( VAR_3 ) ) ) ) THEN THEN ) IF IF (  return returnValue ; )  return returnValue ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1.DiskImage ) RETURN TYPE_1.DiskImage ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.DiskImage ) TYPE TYPE_1.DiskImage ( NAME disk ) NAME disk ( INIT = new TYPE_1 . DiskImage ( ) ) INIT = new TYPE_1 . DiskImage ( ) ) VAR VAR (  disk . setId ( VAR_1 ) )  disk . setId ( VAR_1 ) (  TYPE_2 . METHOD_2 ( VAR_2 ) )  TYPE_2 . METHOD_2 ( VAR_2 ) (  disk . METHOD_3 ( new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( TYPE_2 . METHOD_2 ( VAR_2 ) ) ) )  disk . METHOD_3 ( new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( TYPE_2 . METHOD_2 ( VAR_2 ) ) ) (  return disk ; )  return disk ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_4 ) NAME METHOD_4 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_2 . METHOD_5 ( ) . METHOD_6 ( ) )  VAR_2 . METHOD_5 ( ) . METHOD_6 ( ) ) BLOCK BLOCK ) METHOD METHOD (  org.ovirt.engine.ui.frontend.Frontend . METHOD_3 ( action , new TYPE_1 ( VAR_1 ) , new TYPE_2 ( ) { public void METHOD_4 ( TYPE_3 result ) { VAR_2 . METHOD_5 ( ) . METHOD_6 ( ) ; } } ) )  org.ovirt.engine.ui.frontend.Frontend . METHOD_3 ( action , new TYPE_1 ( VAR_1 ) , new TYPE_2 ( ) { public void METHOD_4 ( TYPE_3 result ) { VAR_2 . METHOD_5 ( ) . METHOD_6 ( ) ; } } ) (  METHOD_7 ( ) )  METHOD_7 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<java.lang.String> ) TYPE java.util.ArrayList<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < > ( TYPE_1 . METHOD_2 ( new java.lang.String [ ] { STRING_1 , STRING_2 , STRING_3 } ) ) ) INIT = new java.util.ArrayList < > ( TYPE_1 . METHOD_2 ( new java.lang.String [ ] { STRING_1 , STRING_2 , STRING_3 } ) ) ) VAR VAR (  org.mockito.Mockito.when ( VAR_2 . METHOD_3 ( TYPE_2 . METHOD_4 ( ) , TYPE_2 . any ( VAR_3 . Version class ) ) ) . thenReturn ( VAR_1 ) )  org.mockito.Mockito.when ( VAR_2 . METHOD_3 ( TYPE_2 . METHOD_4 ( ) , TYPE_2 . any ( VAR_3 . Version class ) ) ) . thenReturn ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = super . METHOD_1 ( VAR_1 ) ) INIT = super . METHOD_1 ( VAR_1 ) ) VAR VAR (  VAR_2 . METHOD_2 ( VAR_1 . METHOD_3 ( VAR_3 ) . toString ( ) . METHOD_4 ( VAR_4 ) ) )  VAR_2 . METHOD_2 ( VAR_1 . METHOD_3 ( VAR_3 ) . toString ( ) . METHOD_4 ( VAR_4 ) ) (  VAR_2 . METHOD_2 ( VAR_1 . METHOD_3 ( VAR_5 ) . toString ( ) . METHOD_4 ( VAR_4 ) ) )  VAR_2 . METHOD_2 ( VAR_1 . METHOD_3 ( VAR_5 ) . toString ( ) . METHOD_4 ( VAR_4 ) ) (  VAR_2 . METHOD_2 ( VAR_1 . METHOD_3 ( VAR_6 ) . toString ( ) . METHOD_4 ( ) ) )  VAR_2 . METHOD_2 ( VAR_1 . METHOD_3 ( VAR_6 ) . toString ( ) . METHOD_4 ( ) ) (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1.AuditLogType ) RETURN TYPE_1.AuditLogType ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( SWITCH SWITCH ( NAME TYPE_2 . METHOD_2 ( ) ) NAME TYPE_2 . METHOD_2 ( ) ( CASE VAR_1 ( BLOCK BLOCK (  return TYPE_2 . getSucceeded ( ) ? ( TYPE_2 . getReturnValue ( ) . METHOD_3 ( ) . size ( ) ) > 0 ? VAR_2 : VAR_3 : VAR_4 ; )  return TYPE_2 . getSucceeded ( ) ? ( TYPE_2 . getReturnValue ( ) . METHOD_3 ( ) . size ( ) ) > 0 ? VAR_2 : VAR_3 : VAR_4 ; ) BLOCK BLOCK ) CASE VAR_1 ( CASE VAR_5 ( BLOCK BLOCK (  return TYPE_2 . getSucceeded ( ) ? VAR_6 : VAR_7 ; )  return TYPE_2 . getSucceeded ( ) ? VAR_6 : VAR_7 ; ) BLOCK BLOCK ) CASE VAR_5 ( DEFAULT DEFAULT ( BLOCK BLOCK (  return VAR_7 ; )  return VAR_7 ; ) BLOCK BLOCK ) DEFAULT DEFAULT ) SWITCH SWITCH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( VAR_1 , new TYPE_1 . DiskImage ( ) ) )  METHOD_2 ( VAR_1 , new TYPE_1 . DiskImage ( ) ) (  METHOD_3 ( ) )  METHOD_3 ( ) (  METHOD_4 ( false ) )  METHOD_4 ( false ) (  METHOD_5 ( ) )  METHOD_5 ( ) (  METHOD_6 ( VAR_2 ) )  METHOD_6 ( VAR_2 ) (  org.mockito.Mockito.doReturn ( TYPE_2 . METHOD_7 ( ) ) . when ( command ) . METHOD_8 ( ) )  org.mockito.Mockito.doReturn ( TYPE_2 . METHOD_7 ( ) ) . when ( command ) . METHOD_8 ( ) (  TYPE_3 . METHOD_9 ( command , VAR_3 ) )  TYPE_3 . METHOD_9 ( command , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.Disk ) TYPE TYPE_1.Disk ( NAME model ) NAME model ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  model . METHOD_3 ( ) . METHOD_4 ( ) . get ( 0 ) . METHOD_5 ( null ) )  model . METHOD_3 ( ) . METHOD_4 ( ) . get ( 0 ) . METHOD_5 ( null ) (  METHOD_6 ( METHOD_7 ( ) ) )  METHOD_6 ( METHOD_7 ( ) ) (  VAR_1 . METHOD_8 ( ) )  VAR_1 . METHOD_8 ( ) ( TRY TRY ( BLOCK BLOCK (  VAR_2 . add ( model ) )  VAR_2 . add ( model ) (  METHOD_9 ( STRING_1 ) )  METHOD_9 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( BLOCK BLOCK (  METHOD_10 ( VAR_3 , STRING_2 , STRING_3 , STRING_4 ) )  METHOD_10 ( VAR_3 , STRING_2 , STRING_3 , STRING_4 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  METHOD_3 ( false , VAR_1 ) )  METHOD_3 ( false , VAR_1 ) (  cmd . METHOD_4 ( ) )  cmd . METHOD_4 ( ) (  org.mockito.Mockito . METHOD_5 ( VAR_2 , org.mockito.Mockito . METHOD_6 ( ) ) . METHOD_7 ( TYPE_1 . any ( VAR_3 class ) ) )  org.mockito.Mockito . METHOD_5 ( VAR_2 , org.mockito.Mockito . METHOD_6 ( ) ) . METHOD_7 ( TYPE_1 . any ( VAR_3 class ) ) (  org.mockito.Mockito . METHOD_5 ( VAR_2 , org.mockito.Mockito . METHOD_6 ( ) ) . METHOD_8 ( TYPE_1 . any ( VAR_4 . Guid class ) , TYPE_1 . any ( VAR_4 . Guid class ) ) )  org.mockito.Mockito . METHOD_5 ( VAR_2 , org.mockito.Mockito . METHOD_6 ( ) ) . METHOD_8 ( TYPE_1 . any ( VAR_4 . Guid class ) , TYPE_1 . any ( VAR_4 . Guid class ) ) (  TYPE_2 . assertEquals ( VAR_5 , cmd . METHOD_9 ( ) ) )  TYPE_2 . assertEquals ( VAR_5 , cmd . METHOD_9 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) . METHOD_3 ( VAR_1 class ) . to ( VAR_2 ) )  METHOD_2 ( ) . METHOD_3 ( VAR_1 class ) . to ( VAR_2 ) (  METHOD_2 ( ) . METHOD_3 ( VAR_3 class ) . to ( VAR_4 ) )  METHOD_2 ( ) . METHOD_3 ( VAR_3 class ) . to ( VAR_4 ) (  METHOD_2 ( ) . METHOD_3 ( VAR_5 class ) . to ( VAR_6 ) )  METHOD_2 ( ) . METHOD_3 ( VAR_5 class ) . to ( VAR_6 ) (  METHOD_4 ( VAR_7 class , VAR_8 class , VAR_9 class , VAR_10 class , VAR_11 class ) )  METHOD_4 ( VAR_7 class , VAR_8 class , VAR_9 class , VAR_10 class , VAR_11 class ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN org.ovirt.engine.core.common.businessentities.DiskImage ) RETURN org.ovirt.engine.core.common.businessentities.DiskImage ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ( INIT = org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) INIT = org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ( INIT = org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) INIT = org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.DiskImage ) TYPE org.ovirt.engine.core.common.businessentities.DiskImage ( NAME VAR_3 ) NAME VAR_3 ( INIT = new org.ovirt.engine.core.common.businessentities.DiskImage ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.DiskImage ( ) ) VAR VAR (  VAR_3 . METHOD_3 ( VAR_1 ) )  VAR_3 . METHOD_3 ( VAR_1 ) (  VAR_3 . METHOD_4 ( VAR_2 ) )  VAR_3 . METHOD_4 ( VAR_2 ) (  VAR_3 . METHOD_5 ( TYPE_1 . instance ( ) . METHOD_6 ( ) ) )  VAR_3 . METHOD_5 ( TYPE_1 . instance ( ) . METHOD_6 ( ) ) (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ( INIT = METHOD_2 ( null ) ) INIT = METHOD_2 ( null ) ) VAR VAR (  model . METHOD_3 ( null ) )  model . METHOD_3 ( null ) (  METHOD_4 ( METHOD_5 ( ) ) )  METHOD_4 ( METHOD_5 ( ) ) (  VAR_1 . METHOD_6 ( ) )  VAR_1 . METHOD_6 ( ) ( TRY TRY ( BLOCK BLOCK (  VAR_2 . add ( model ) )  VAR_2 . add ( model ) (  METHOD_7 ( STRING_1 ) )  METHOD_7 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( BLOCK BLOCK (  METHOD_8 ( VAR_3 , STRING_2 , STRING_3 , STRING_4 ) )  METHOD_8 ( VAR_3 , STRING_2 , STRING_3 , STRING_4 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( TYPE_1 . any ( ) ) ) . thenReturn ( VAR_2 ) )  org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( TYPE_1 . any ( ) ) ) . thenReturn ( VAR_2 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  VAR_3 . METHOD_3 ( new java.util.ArrayList < TYPE_3 > ( ) ) )  VAR_3 . METHOD_3 ( new java.util.ArrayList < TYPE_3 > ( ) ) (  VAR_3 . METHOD_4 ( true ) )  VAR_3 . METHOD_4 ( true ) (  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( validator ) . METHOD_5 ( TYPE_1 . any ( ) ) )  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( validator ) . METHOD_5 ( TYPE_1 . any ( ) ) (  TYPE_4 . METHOD_6 ( validator . METHOD_7 ( VAR_4 ) , TYPE_5 . METHOD_8 ( ) ) )  TYPE_4 . METHOD_6 ( validator . METHOD_7 ( VAR_4 ) , TYPE_5 . METHOD_8 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<?,?> ) TYPE TYPE_1<?,?> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ! ( VAR_3 . METHOD_2 ( VAR_1 ) ) ) || ( VAR_1 . METHOD_3 ( ) ) ) INIT = ( ! ( VAR_3 . METHOD_2 ( VAR_1 ) ) ) || ( VAR_1 . METHOD_3 ( ) ) ) VAR VAR ( IF IF ( COND VAR_2 && ( VAR_3 . add ( VAR_1 ) ) ) COND VAR_2 && ( VAR_3 . add ( VAR_1 ) ) ( THEN THEN (  VAR_4 . METHOD_4 ( this ) )  VAR_4 . METHOD_4 ( this ) ( IF IF ( COND METHOD_5 ( VAR_1 ) ) COND METHOD_5 ( VAR_1 ) ( THEN THEN (  TYPE_2 . METHOD_6 ( VAR_5 ) )  TYPE_2 . METHOD_6 ( VAR_5 ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . get ( VAR_2 class ) ) INIT = TYPE_2 . get ( VAR_2 class ) ) VAR VAR (  VAR_3 = VAR_1 . METHOD_2 ( this , STRING_1 , new TYPE_3 [ ] { } , new java.lang.Object [ ] { } , VAR_4 < java.lang.Integer > getValue ( VAR_5 ) , VAR_4 < java.lang.Integer > getValue ( VAR_5 ) , VAR_6 ) )  VAR_3 = VAR_1 . METHOD_2 ( this , STRING_1 , new TYPE_3 [ ] { } , new java.lang.Object [ ] { } , VAR_4 < java.lang.Integer > getValue ( VAR_5 ) , VAR_4 < java.lang.Integer > getValue ( VAR_5 ) , VAR_6 ) (  VAR_7 . METHOD_3 ( STRING_2 ) )  VAR_7 . METHOD_3 ( STRING_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.Object> ) TYPE java.util.Map<java.lang.String,java.lang.Object> ( NAME globalMap ) NAME globalMap ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_3 . put ( STRING_1 , TYPE_2 . METHOD_2 ( ) ) )  VAR_3 . put ( STRING_1 , TYPE_2 . METHOD_2 ( ) ) (  ( ( java.util.Map ) ( VAR_4 . get ( ) ) ) . put ( STRING_2 , STRING_3 ) )  ( ( java.util.Map ) ( VAR_4 . get ( ) ) ) . put ( STRING_2 , STRING_3 ) (  METHOD_3 ( VAR_1 , VAR_2 , globalMap ) )  METHOD_3 ( VAR_1 , VAR_2 , globalMap ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.uicommonweb.models.EntityModel ) TYPE org.ovirt.engine.ui.uicommonweb.models.EntityModel ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME object ) NAME object ( IN VAR_3 ) IN VAR_3 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VmTemplate ) TYPE org.ovirt.engine.core.common.businessentities.VmTemplate ( NAME template ) NAME template ( INIT = ( ( TYPE_1 ) ( object ) ) . METHOD_2 ( ) ) INIT = ( ( TYPE_1 ) ( object ) ) . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND ! ( METHOD_3 ( ( ( template . getName ( ) ) + VAR_1 ) , VAR_2 , METHOD_4 ( null ) ) ) ) COND ! ( METHOD_3 ( ( ( template . getName ( ) ) + VAR_1 ) , VAR_2 , METHOD_4 ( null ) ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( VAR_2 , STRING_1 ) )  VAR_1 . METHOD_2 ( VAR_2 , STRING_1 ) (  VAR_1 . METHOD_2 ( VAR_3 , STRING_2 ) )  VAR_1 . METHOD_2 ( VAR_3 , STRING_2 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_5 ) NAME VAR_5 ( INIT = new TYPE_2 ( STRING_3 ) ) INIT = new TYPE_2 ( STRING_3 ) ) VAR VAR (  VAR_5 . METHOD_3 ( 0 ) )  VAR_5 . METHOD_3 ( 0 ) (  TYPE_3 . assertEquals ( STRING_3 , VAR_4 . METHOD_4 ( VAR_5 , STRING_4 ) ) )  TYPE_3 . assertEquals ( STRING_3 , VAR_4 . METHOD_4 ( VAR_5 , STRING_4 ) ) (  VAR_1 . METHOD_2 ( VAR_2 , STRING_5 ) )  VAR_1 . METHOD_2 ( VAR_2 , STRING_5 ) (  VAR_1 . METHOD_2 ( VAR_3 , STRING_6 ) )  VAR_1 . METHOD_2 ( VAR_3 , STRING_6 ) (  TYPE_3 . METHOD_5 ( STRING_3 , VAR_4 . METHOD_4 ( VAR_5 , STRING_4 ) ) )  TYPE_3 . METHOD_5 ( STRING_3 , VAR_4 . METHOD_4 ( VAR_5 , STRING_4 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , STRING_1 , STRING_2 , VAR_2 , null , null , TYPE_3 . METHOD_3 ( METHOD_4 ( STRING_3 ) ) ) , null ) ) )  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , STRING_1 , STRING_2 , VAR_2 , null , null , TYPE_3 . METHOD_3 ( METHOD_4 ( STRING_3 ) ) ) , null ) ) (  METHOD_5 ( VAR_3 ) )  METHOD_5 ( VAR_3 ) (  TYPE_4 . METHOD_6 ( cmd . validate ( ) ) )  TYPE_4 . METHOD_6 ( cmd . validate ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( VAR_2 , false ) ) INIT = new TYPE_2 ( VAR_2 , false ) ) VAR VAR (  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_3 ) . METHOD_2 ( TYPE_3 . METHOD_3 ( ) ) )  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_3 ) . METHOD_2 ( TYPE_3 . METHOD_3 ( ) ) (  VAR_3 . METHOD_4 ( new TYPE_4 ( true , VAR_2 ) ) )  VAR_3 . METHOD_4 ( new TYPE_4 ( true , VAR_2 ) ) ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME resource ) NAME resource ( INIT = VAR_4 . METHOD_5 ( VAR_5 class ) ) INIT = VAR_4 . METHOD_5 ( VAR_5 class ) ) VAR VAR ( VAR VAR ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME response ) NAME response ( INIT = VAR_3 . METHOD_6 ( METHOD_7 ( null , true , false ) , resource ) ) INIT = VAR_3 . METHOD_6 ( METHOD_7 ( null , true , false ) , resource ) ) VAR VAR (  METHOD_8 ( response ) )  METHOD_8 ( response ) (  VAR_4 . METHOD_9 ( ) )  VAR_4 . METHOD_9 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( VAR_2 , VAR_3 ) ) INIT = TYPE_2 . METHOD_2 ( VAR_2 , VAR_3 ) ) VAR VAR (  VAR_4 . parameters = new TYPE_3 ( VAR_1 ) )  VAR_4 . parameters = new TYPE_3 ( VAR_1 ) (  VAR_5 . METHOD_3 ( VAR_6 ) )  VAR_5 . METHOD_3 ( VAR_6 ) (  VAR_5 . METHOD_4 ( true ) )  VAR_5 . METHOD_4 ( true ) (  VAR_5 . METHOD_5 ( VAR_7 ) )  VAR_5 . METHOD_5 ( VAR_7 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( STRING_1 , VAR_2 , STRING_2 , STRING_3 , STRING_4 ) ) INIT = METHOD_2 ( STRING_1 , VAR_2 , STRING_2 , STRING_3 , STRING_4 ) ) VAR VAR (  parameters . METHOD_3 ( VAR_1 ) )  parameters . METHOD_3 ( VAR_1 ) (  parameters . METHOD_4 ( VAR_3 ) )  parameters . METHOD_4 ( VAR_3 ) (  parameters . METHOD_5 ( VAR_3 ) )  parameters . METHOD_5 ( VAR_3 ) (  org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_6 ( ) )  org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_6 ( ) (  org.mockito.Mockito.doReturn ( false ) . when ( command ) . METHOD_7 ( VAR_1 ) )  org.mockito.Mockito.doReturn ( false ) . when ( command ) . METHOD_7 ( VAR_1 ) (  TYPE_2 . METHOD_8 ( command ) )  TYPE_2 . METHOD_8 ( command ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  METHOD_3 ( true , null ) )  METHOD_3 ( true , null ) (  cmd . METHOD_1 ( ) )  cmd . METHOD_1 ( ) (  org.mockito.Mockito . METHOD_4 ( VAR_1 , org.mockito.Mockito . METHOD_5 ( 1 ) ) . METHOD_6 ( TYPE_1 . any ( VAR_2 class ) ) )  org.mockito.Mockito . METHOD_4 ( VAR_1 , org.mockito.Mockito . METHOD_5 ( 1 ) ) . METHOD_6 ( TYPE_1 . any ( VAR_2 class ) ) (  org.mockito.Mockito . METHOD_4 ( VAR_1 , org.mockito.Mockito . METHOD_5 ( INT_1 ) ) . METHOD_7 ( TYPE_1 . any ( VAR_3 . Guid class ) , TYPE_1 . any ( VAR_3 . Guid class ) ) )  org.mockito.Mockito . METHOD_4 ( VAR_1 , org.mockito.Mockito . METHOD_5 ( INT_1 ) ) . METHOD_7 ( TYPE_1 . any ( VAR_3 . Guid class ) , TYPE_1 . any ( VAR_3 . Guid class ) ) (  TYPE_2 . assertEquals ( VAR_4 , cmd . METHOD_8 ( ) ) )  TYPE_2 . assertEquals ( VAR_4 , cmd . METHOD_8 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.doReturn ( METHOD_2 ( VAR_1 ) ) . when ( cmd ) . METHOD_3 ( ) )  org.mockito.Mockito.doReturn ( METHOD_2 ( VAR_1 ) ) . when ( cmd ) . METHOD_3 ( ) (  org.mockito.Mockito.doReturn ( METHOD_4 ( ) ) . when ( VAR_2 ) . get ( VAR_3 ) )  org.mockito.Mockito.doReturn ( METHOD_4 ( ) ) . when ( VAR_2 ) . get ( VAR_3 ) (  org.mockito.Mockito.doReturn ( METHOD_5 ( true , VAR_4 ) ) . when ( VAR_5 ) . get ( TYPE_1 . any ( VAR_6 . Guid class ) ) )  org.mockito.Mockito.doReturn ( METHOD_5 ( true , VAR_4 ) ) . when ( VAR_5 ) . get ( TYPE_1 . any ( VAR_6 . Guid class ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( RESOURCES RESOURCES ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 ( VAR_1 ) ) INIT = new TYPE_2 ( VAR_1 ) ) VAR VAR ) RESOURCES RESOURCES ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_3 ( ) ) INIT = new TYPE_3 ( ) ) VAR VAR (  VAR_3 . METHOD_1 ( VAR_2 ) )  VAR_3 . METHOD_1 ( VAR_2 ) (  return METHOD_2 ( VAR_3 , VAR_1 ) ; )  return METHOD_2 ( VAR_3 , VAR_1 ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_4 ) NAME VAR_4 ( BLOCK BLOCK (  throw new TYPE_5 ( java.lang.String . METHOD_3 ( STRING_1 , VAR_1 . METHOD_4 ( ) ) ) ; )  throw new TYPE_5 ( java.lang.String . METHOD_3 ( STRING_1 , VAR_1 . METHOD_4 ( ) ) ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( 1 ) )  METHOD_2 ( 1 ) (  METHOD_3 ( ) )  METHOD_3 ( ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_4 ( VAR_2 , VAR_3 class , new java.lang.String [ ] { STRING_1 , STRING_2 } , new java.lang.Object [ ] { VAR_4 [ 0 ] , java.lang.Boolean . TRUE } , true , true , false ) ) INIT = METHOD_4 ( VAR_2 , VAR_3 class , new java.lang.String [ ] { STRING_1 , STRING_2 } , new java.lang.Object [ ] { VAR_4 [ 0 ] , java.lang.Boolean . TRUE } , true , true , false ) ) VAR VAR (  VAR_1 = METHOD_5 ( VAR_1 , VAR_5 , TYPE_2 . toString ( ) ) )  VAR_1 = METHOD_5 ( VAR_1 , VAR_5 , TYPE_2 . toString ( ) ) (  METHOD_6 ( VAR_1 ) )  METHOD_6 ( VAR_1 ) (  VAR_6 . METHOD_7 ( ) )  VAR_6 . METHOD_7 ( ) (  METHOD_8 ( resource . METHOD_9 ( ) ) )  METHOD_8 ( resource . METHOD_9 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.Object> ) TYPE java.util.Map<java.lang.String,java.lang.Object> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME returnValue ) NAME returnValue ( INIT = null ) INIT = null ) VAR VAR ( IF IF ( COND VAR_1 . METHOD_2 ( name ) ) COND VAR_1 . METHOD_2 ( name ) ( THEN THEN ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( java.lang.String ) ( ( ( VAR_1 . get ( name ) ) instanceof java.lang.String ) ? VAR_1 . get ( name ) : null ) ) ) INIT = ( ( java.lang.String ) ( ( ( VAR_1 . get ( name ) ) instanceof java.lang.String ) ? VAR_1 . get ( name ) : null ) ) ) VAR VAR (  returnValue = ( VAR_2 == null ) ? null : TYPE_1 . METHOD_3 ( VAR_2 ) )  returnValue = ( VAR_2 == null ) ? null : TYPE_1 . METHOD_3 ( VAR_2 ) ) THEN THEN ) IF IF (  return returnValue ; )  return returnValue ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( cmd ) . METHOD_2 ( ) )  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( cmd ) . METHOD_2 ( ) ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ( INIT = org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) INIT = org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) VAR VAR (  cmd . getParameters ( ) . getVm ( ) . METHOD_4 ( VAR_2 ) )  cmd . getParameters ( ) . getVm ( ) . METHOD_4 ( VAR_2 ) (  TYPE_1 . METHOD_5 ( cmd . METHOD_6 ( VAR_2 ) ) )  TYPE_1 . METHOD_5 ( cmd . METHOD_6 ( VAR_2 ) ) (  TYPE_2 . METHOD_7 ( STRING_1 , cmd , VAR_3 ) )  TYPE_2 . METHOD_7 ( STRING_1 , cmd , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  command = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , true ) ) ) )  command = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , true ) ) ) (  METHOD_4 ( ) )  METHOD_4 ( ) (  METHOD_5 ( VAR_1 ) )  METHOD_5 ( VAR_1 ) (  METHOD_6 ( true ) )  METHOD_6 ( true ) (  METHOD_7 ( true ) )  METHOD_7 ( true ) (  METHOD_8 ( true ) )  METHOD_8 ( true ) (  TYPE_3 . METHOD_9 ( command , VAR_2 ) )  TYPE_3 . METHOD_9 ( command , VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( getEntity ( ) ) == null ) COND ( getEntity ( ) ) == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( java.util.List < TYPE_2 > ) ( returnValue ) ) ) INIT = ( ( java.util.List < TYPE_2 > ) ( returnValue ) ) ) VAR VAR (  TYPE_3 . METHOD_3 ( VAR_1 , new TYPE_4 ( ) ) )  TYPE_3 . METHOD_3 ( VAR_1 , new TYPE_4 ( ) ) (  setItems ( VAR_1 ) )  setItems ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD (  TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.util.List < TYPE_2 > VAR_1 = ( ( java.util.List < TYPE_2 > ) ( returnValue ) ) ; TYPE_3 . METHOD_3 ( VAR_1 , new TYPE_4 ( ) ) ; setItems ( VAR_1 ) ; } } ) , getEntity ( ) . getId ( ) ) )  TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.util.List < TYPE_2 > VAR_1 = ( ( java.util.List < TYPE_2 > ) ( returnValue ) ) ; TYPE_3 . METHOD_3 ( VAR_1 , new TYPE_4 ( ) ) ; setItems ( VAR_1 ) ; } } ) , getEntity ( ) . getId ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1<org.ovirt.engine.core.common.businessentities.VDSGroup,TYPE_2> ) RETURN TYPE_1<org.ovirt.engine.core.common.businessentities.VDSGroup,TYPE_2> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1<org.ovirt.engine.core.common.businessentities.VDSGroup,TYPE_2>> ) TYPE java.util.List<TYPE_1<org.ovirt.engine.core.common.businessentities.VDSGroup,TYPE_2>> ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( java.util.List < TYPE_1 < org.ovirt.engine.core.common.businessentities.VDSGroup , TYPE_2 > > ) ( METHOD_2 ( ) ) ) ) INIT = ( ( java.util.List < TYPE_1 < org.ovirt.engine.core.common.businessentities.VDSGroup , TYPE_2 > > ) ( METHOD_2 ( ) ) ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1<org.ovirt.engine.core.common.businessentities.VDSGroup,TYPE_2> ) TYPE TYPE_1<org.ovirt.engine.core.common.businessentities.VDSGroup,TYPE_2> ( NAME item ) NAME item ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK ( IF IF ( COND item . METHOD_3 ( ) . METHOD_4 ( ) . equals ( VAR_1 ) ) COND item . METHOD_3 ( ) . METHOD_4 ( ) . equals ( VAR_1 ) ( THEN THEN (  return item ; )  return item ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME validator ) NAME validator ( INIT = new TYPE_1 ( VAR_1 , METHOD_2 ( ) ) ) INIT = new TYPE_1 ( VAR_1 , METHOD_2 ( ) ) ) VAR VAR (  return ( ( validate ( validator . METHOD_3 ( ) ) ) && ( validate ( validator . METHOD_4 ( ) ) ) ) && ( METHOD_5 ( ) ) ; )  return ( ( validate ( validator . METHOD_3 ( ) ) ) && ( validate ( validator . METHOD_4 ( ) ) ) ) && ( METHOD_5 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  dao . METHOD_2 ( VAR_1 ) )  dao . METHOD_2 ( VAR_1 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ( INIT = dao . get ( VAR_1 . getId ( ) ) ) INIT = dao . get ( VAR_1 . getId ( ) ) ) VAR VAR (  TYPE_2 . METHOD_3 ( result ) )  TYPE_2 . METHOD_3 ( result ) (  TYPE_2 . assertEquals ( VAR_1 . getId ( ) , result . getId ( ) ) )  TYPE_2 . assertEquals ( VAR_1 . getId ( ) , result . getId ( ) ) (  TYPE_2 . assertEquals ( false , result . METHOD_4 ( ) ) )  TYPE_2 . assertEquals ( false , result . METHOD_4 ( ) ) (  TYPE_2 . METHOD_5 ( result . METHOD_6 ( ) ) )  TYPE_2 . METHOD_5 ( result . METHOD_6 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) ) INIT = TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StoragePool ) TYPE org.ovirt.engine.core.common.businessentities.StoragePool ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_4 ( ) ) INIT = METHOD_4 ( ) ) VAR VAR ( IF IF ( COND VAR_2 == null ) COND VAR_2 == null ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_3<TYPE_1> ) TYPE TYPE_3<TYPE_1> ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_5 ( VAR_2 . METHOD_6 ( ) ) ) INIT = METHOD_5 ( VAR_2 . METHOD_6 ( ) ) ) VAR VAR (  return VAR_3 . METHOD_7 ( VAR_1 ) ; )  return VAR_3 . METHOD_7 ( VAR_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME value ) NAME value ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  value . METHOD_2 ( false ) )  value . METHOD_2 ( false ) (  value . METHOD_3 ( new TYPE_2 ( STRING_1 ) ) )  value . METHOD_3 ( new TYPE_2 ( STRING_1 ) ) (  org.mockito.Mockito.when ( VAR_1 . METHOD_4 ( ) ) . thenReturn ( VAR_2 ) )  org.mockito.Mockito.when ( VAR_1 . METHOD_4 ( ) ) . thenReturn ( VAR_2 ) (  org.mockito.Mockito.when ( VAR_1 . METHOD_5 ( ) ) . thenReturn ( VAR_3 ) )  org.mockito.Mockito.when ( VAR_1 . METHOD_5 ( ) ) . thenReturn ( VAR_3 ) (  org.mockito.Mockito.when ( VAR_2 . METHOD_6 ( TYPE_3 . any ( VAR_4 class ) , TYPE_3 . any ( VAR_5 class ) ) ) . thenReturn ( value ) )  org.mockito.Mockito.when ( VAR_2 . METHOD_6 ( TYPE_3 . any ( VAR_4 class ) , TYPE_3 . any ( VAR_5 class ) ) ) . thenReturn ( value ) (  VAR_1 . METHOD_7 ( ) )  VAR_1 . METHOD_7 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_1 ) ( model ) ) ) INIT = ( ( TYPE_1 ) ( model ) ) ) VAR VAR (  VAR_2 . setItems ( ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) ) ) )  VAR_2 . setItems ( ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) ) ) (  VAR_2 . METHOD_2 ( ( ( ( ( java.util.List ) ( VAR_2 . METHOD_3 ( ) ) ) . size ( ) ) == 0 ) ) )  VAR_2 . METHOD_2 ( ( ( ( ( java.util.List ) ( VAR_2 . METHOD_3 ( ) ) ) . size ( ) ) == 0 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( java.util.List < java.lang.String > ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ) INIT = ( ( java.util.List < java.lang.String > ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ) VAR VAR (  getModel ( ) . METHOD_1 ( ) . setEntity ( ( ! ( VAR_1 . isEmpty ( ) ) ) ) )  getModel ( ) . METHOD_1 ( ) . setEntity ( ( ! ( VAR_1 . isEmpty ( ) ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( ( TYPE_1 ) ( VAR_1 ) ) ) INIT = ( ( TYPE_1 ) ( VAR_1 ) ) ) VAR VAR (  VAR_3 . setItems ( ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( VAR_2 ) ) . getReturnValue ( ) ) ) ) )  VAR_3 . setItems ( ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( VAR_2 ) ) . getReturnValue ( ) ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  return ( ( VAR_1 . METHOD_2 ( STRING_1 ) ) || ( ( ( METHOD_3 ( ) ) != null ) && ( METHOD_3 ( ) . equals ( VAR_2 ) ) ) ) || ( ( METHOD_4 ( ) . METHOD_2 ( VAR_3 ) ) && ( ( ( METHOD_3 ( ) ) == null ) || ( ! ( METHOD_3 ( ) . equals ( VAR_4 ) ) ) ) ) ; )  return ( ( VAR_1 . METHOD_2 ( STRING_1 ) ) || ( ( ( METHOD_3 ( ) ) != null ) && ( METHOD_3 ( ) . equals ( VAR_2 ) ) ) ) || ( ( METHOD_4 ( ) . METHOD_2 ( VAR_3 ) ) && ( ( ( METHOD_3 ( ) ) == null ) || ( ! ( METHOD_3 ( ) . equals ( VAR_4 ) ) ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( TYPE_1 . getVm ( ) ) == null ) COND ( TYPE_1 . getVm ( ) ) == null ( THEN THEN (  addCanDoActionMessage ( VAR_1 ) )  addCanDoActionMessage ( VAR_1 ) (  return false ; )  return false ; ) THEN THEN ) IF IF ( IF IF ( COND ( TYPE_1 . getVm ( ) . METHOD_2 ( ) ) != ( VAR_2 ) ) COND ( TYPE_1 . getVm ( ) . METHOD_2 ( ) ) != ( VAR_2 ) ( THEN THEN (  addCanDoActionMessage ( VAR_3 ) )  addCanDoActionMessage ( VAR_3 ) (  return false ; )  return false ; ) THEN THEN ) IF IF (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  client . METHOD_2 ( VAR_1 ) )  client . METHOD_2 ( VAR_1 ) (  client . METHOD_3 ( ) )  client . METHOD_3 ( ) (  client . METHOD_4 ( ) )  client . METHOD_4 ( ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 ( INT_1 ) ) INIT = new TYPE_2 ( INT_1 ) ) VAR VAR (  client . METHOD_5 ( VAR_3 , null , VAR_2 , null ) )  client . METHOD_5 ( VAR_3 , null , VAR_2 , null ) (  TYPE_3 . assertEquals ( VAR_4 , new java.lang.String ( VAR_2 . METHOD_6 ( ) , STRING_1 ) ) )  TYPE_3 . assertEquals ( VAR_4 , new java.lang.String ( VAR_2 . METHOD_6 ( ) , STRING_1 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( STRING_1 ) ) INIT = METHOD_2 ( STRING_1 ) ) VAR VAR ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  return TYPE_2 . METHOD_3 ( ) ; )  return TYPE_2 . METHOD_3 ( ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.ArrayList < TYPE_1 > ( ) ) INIT = new java.util.ArrayList < TYPE_1 > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_1 . METHOD_4 ( STRING_2 ) ) IN VAR_1 . METHOD_4 ( STRING_2 ) ( BLOCK BLOCK ( IF IF ( COND TYPE_3 . METHOD_5 ( VAR_3 ) ) COND TYPE_3 . METHOD_5 ( VAR_3 ) ( THEN THEN (  VAR_2 . add ( new TYPE_1 ( VAR_3 ) ) )  VAR_2 . add ( new TYPE_1 ( VAR_3 ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 < java.lang.String > METHOD_2 ( VAR_3 ) ) INIT = VAR_2 < java.lang.String > METHOD_2 ( VAR_3 ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME types ) NAME types ( INIT = VAR_1 . METHOD_3 ( TYPE_1 . METHOD_4 ( VAR_4 ) , ( - 1 ) ) ) INIT = VAR_1 . METHOD_3 ( TYPE_1 . METHOD_4 ( VAR_4 ) , ( - 1 ) ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_5 ) NAME VAR_5 ( IN types ) IN types ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME VAR_6 ) NAME VAR_6 ( INIT = VAR_5 . METHOD_3 ( TYPE_1 . METHOD_4 ( VAR_7 ) , ( - 1 ) ) ) INIT = VAR_5 . METHOD_3 ( TYPE_1 . METHOD_4 ( VAR_7 ) , ( - 1 ) ) ) VAR VAR (  VAR_8 . put ( VAR_6 [ 0 ] , VAR_6 [ 1 ] ) )  VAR_8 . put ( VAR_6 [ 0 ] , VAR_6 [ 1 ] ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( java.util.List < TYPE_1 > ) ( result ) ) ) INIT = ( ( java.util.List < TYPE_1 > ) ( result ) ) ) VAR VAR ( IF IF ( COND ( VAR_2 . size ( ) ) > 0 ) COND ( VAR_2 . size ( ) ) > 0 ( THEN THEN (  VAR_3 . METHOD_1 ( ) . METHOD_2 ( false ) )  VAR_3 . METHOD_1 ( ) . METHOD_2 ( false ) ( IF IF ( COND ! VAR_4 ) COND ! VAR_4 ( THEN THEN (  VAR_3 . METHOD_3 ( ) . METHOD_2 ( false ) )  VAR_3 . METHOD_3 ( ) . METHOD_2 ( false ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.when ( METHOD_2 ( ) . METHOD_3 ( ) ) . thenReturn ( org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) ) )  org.mockito.Mockito.when ( METHOD_2 ( ) . METHOD_3 ( ) ) . thenReturn ( org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) ) (  METHOD_5 ( ) . METHOD_6 ( true ) )  METHOD_5 ( ) . METHOD_6 ( true ) (  METHOD_5 ( ) . METHOD_7 ( ) )  METHOD_5 ( ) . METHOD_7 ( ) (  TYPE_1 . METHOD_8 ( METHOD_5 ( ) , true ) )  TYPE_1 . METHOD_8 ( METHOD_5 ( ) , true ) (  TYPE_2 . METHOD_9 ( METHOD_5 ( ) ) )  TYPE_2 . METHOD_9 ( METHOD_5 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  command = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , new TYPE_3 ( TYPE_4 . METHOD_4 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ) , null , null ) ) ) )  command = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , new TYPE_3 ( TYPE_4 . METHOD_4 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ) , null , null ) ) ) (  org.mockito.Mockito.doReturn ( vds ) . when ( command ) . METHOD_5 ( ) )  org.mockito.Mockito.doReturn ( vds ) . when ( command ) . METHOD_5 ( ) (  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_6 ( ) )  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_6 ( ) (  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( VAR_1 ) . getStatus ( ) )  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( VAR_1 ) . getStatus ( ) (  TYPE_5 . METHOD_7 ( command . METHOD_8 ( ) ) )  TYPE_5 . METHOD_7 ( command . METHOD_8 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = dao . get ( VAR_2 . METHOD_2 ( ) ) ) INIT = dao . get ( VAR_2 . METHOD_2 ( ) ) ) VAR VAR (  TYPE_2 . METHOD_3 ( VAR_1 ) )  TYPE_2 . METHOD_3 ( VAR_1 ) (  dao . METHOD_4 ( VAR_2 ) )  dao . METHOD_4 ( VAR_2 ) (  VAR_1 = dao . get ( VAR_2 . METHOD_2 ( ) ) )  VAR_1 = dao . get ( VAR_2 . METHOD_2 ( ) ) (  TYPE_2 . assertEquals ( VAR_2 , VAR_1 ) )  TYPE_2 . assertEquals ( VAR_2 , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( METHOD_3 ( ) ) )  METHOD_2 ( METHOD_3 ( ) ) (  METHOD_4 ( new java.util.ArrayList < > ( ) ) )  METHOD_4 ( new java.util.ArrayList < > ( ) ) (  VAR_1 . METHOD_5 ( ) )  VAR_1 . METHOD_5 ( ) ( TRY TRY ( BLOCK BLOCK (  resource . get ( ) )  resource . get ( ) (  METHOD_6 ( STRING_1 ) )  METHOD_6 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( BLOCK BLOCK (  METHOD_7 ( VAR_2 ) )  METHOD_7 ( VAR_2 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME vmId ) NAME vmId ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return new TYPE_1 ( new TYPE_2 ( VAR_1 , vmId ) , VAR_2 , TYPE_3 . getName ( ) , STRING_1 , 0 , null , true , true , false , STRING_1 , null , null , null ) ; )  return new TYPE_1 ( new TYPE_2 ( VAR_1 , vmId ) , VAR_2 , TYPE_3 . getName ( ) , STRING_1 , 0 , null , true , true , false , STRING_1 , null , null , null ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<TYPE_2> ) TYPE java.util.ArrayList<TYPE_2> ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( java.util.ArrayList < TYPE_2 > ) ( model . METHOD_2 ( ) . METHOD_3 ( ) ) ) ) INIT = ( ( java.util.ArrayList < TYPE_2 > ) ( model . METHOD_2 ( ) . METHOD_3 ( ) ) ) ) VAR VAR ( IF IF ( COND ! ( model . METHOD_4 ( ) ) ) COND ! ( model . METHOD_4 ( ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  VAR_2 . METHOD_5 ( model . METHOD_6 ( ) ) )  VAR_2 . METHOD_5 ( model . METHOD_6 ( ) ) (  model . METHOD_6 ( ) . METHOD_2 ( ) . setItems ( model . METHOD_2 ( ) . METHOD_3 ( ) ) )  model . METHOD_6 ( ) . METHOD_2 ( ) . setItems ( model . METHOD_2 ( ) . METHOD_3 ( ) ) (  model . METHOD_6 ( ) . METHOD_7 ( model . METHOD_8 ( ) ) )  model . METHOD_6 ( ) . METHOD_7 ( model . METHOD_8 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  get ( ) )  get ( ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  VAR_1 . METHOD_2 ( id ) )  VAR_1 . METHOD_2 ( id ) ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 ) INIT = VAR_3 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME parameters ) NAME parameters ( INIT = new TYPE_3 ( VAR_1 , VAR_2 ) ) INIT = new TYPE_3 ( VAR_1 , VAR_2 ) ) VAR VAR (  return METHOD_3 ( VAR_4 , parameters ) ; )  return METHOD_3 ( VAR_4 , parameters ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source != null ? source : new java.util.ArrayList < TYPE_1 > ( ) ; )  return source != null ? source : new java.util.ArrayList < TYPE_1 > ( ) ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : new java.util.ArrayList < TYPE_1 > ( ) ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : new java.util.ArrayList < TYPE_1 > ( ) ; } } (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME vds ) NAME vds ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  return TYPE_2 . getInstance ( ) . METHOD_2 ( TYPE_3 . METHOD_3 ( ) . METHOD_4 ( ) ) . METHOD_5 ( TYPE_3 . METHOD_3 ( ) , vds . getId ( ) , VAR_1 , VAR_2 ) ; )  return TYPE_2 . getInstance ( ) . METHOD_2 ( TYPE_3 . METHOD_3 ( ) . METHOD_4 ( ) ) . METHOD_5 ( TYPE_3 . METHOD_3 ( ) , vds . getId ( ) , VAR_1 , VAR_2 ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME e ) NAME e ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME result ) NAME result ( INIT = METHOD_6 ( ) ) INIT = METHOD_6 ( ) ) VAR VAR (  result . METHOD_7 ( vds ) )  result . METHOD_7 ( vds ) (  result . METHOD_8 ( VAR_1 ) )  result . METHOD_8 ( VAR_1 ) (  throw e ; )  throw e ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Version ) TYPE org.ovirt.engine.core.compat.Version ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ( INIT = org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) INIT = org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_3 . setId ( VAR_2 ) )  VAR_3 . setId ( VAR_2 ) (  VAR_3 . METHOD_3 ( VAR_1 ) )  VAR_3 . METHOD_3 ( VAR_1 ) (  org.mockito.Mockito.when ( VAR_4 . get ( VAR_2 ) ) . thenReturn ( VAR_3 ) )  org.mockito.Mockito.when ( VAR_4 . get ( VAR_2 ) ) . thenReturn ( VAR_3 ) (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ( INIT = ( ( TYPE_1 ) ( target ) ) ) INIT = ( ( TYPE_1 ) ( target ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_2 ) ( returnValue ) ) ) INIT = ( ( TYPE_2 ) ( returnValue ) ) ) VAR VAR (  model . METHOD_2 ( model , new java.util.ArrayList < TYPE_2 > ( TYPE_3 . METHOD_3 ( new TYPE_2 [ ] { VAR_1 } ) ) ) )  model . METHOD_2 ( model , new java.util.ArrayList < TYPE_2 > ( TYPE_3 . METHOD_3 ( new TYPE_2 [ ] { VAR_1 } ) ) ) (  model . METHOD_4 ( ) . setIsChangable ( false ) )  model . METHOD_4 ( ) . setIsChangable ( false ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito . METHOD_2 ( ) . when ( command ) . METHOD_3 ( ) )  org.mockito.Mockito . METHOD_2 ( ) . when ( command ) . METHOD_3 ( ) (  org.mockito.Mockito . METHOD_2 ( ) . when ( command ) . METHOD_4 ( ) )  org.mockito.Mockito . METHOD_2 ( ) . when ( command ) . METHOD_4 ( ) (  org.mockito.Mockito . METHOD_2 ( ) . when ( command ) . METHOD_5 ( TYPE_1 . METHOD_6 ( ) ) )  org.mockito.Mockito . METHOD_2 ( ) . when ( command ) . METHOD_5 ( TYPE_1 . METHOD_6 ( ) ) (  org.mockito.Mockito . METHOD_2 ( ) . when ( command ) . METHOD_7 ( ) )  org.mockito.Mockito . METHOD_2 ( ) . when ( command ) . METHOD_7 ( ) (  command . METHOD_8 ( TYPE_2 . METHOD_9 ( ) ) )  command . METHOD_8 ( TYPE_2 . METHOD_9 ( ) ) (  command . METHOD_10 ( ) )  command . METHOD_10 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  TYPE_1 . when ( VAR_1 . get ( TYPE_2 . any ( VAR_2 . Guid class ) ) ) . thenReturn ( TYPE_3 . METHOD_3 ( ) ) )  TYPE_1 . when ( VAR_1 . get ( TYPE_2 . any ( VAR_2 . Guid class ) ) ) . thenReturn ( TYPE_3 . METHOD_3 ( ) ) (  TYPE_1 . when ( VAR_1 . METHOD_4 ( TYPE_2 . METHOD_5 ( ) ) ) . thenReturn ( TYPE_3 . METHOD_3 ( ) ) )  TYPE_1 . when ( VAR_1 . METHOD_4 ( TYPE_2 . METHOD_5 ( ) ) ) . thenReturn ( TYPE_3 . METHOD_3 ( ) ) (  TYPE_3 . METHOD_6 ( ) )  TYPE_3 . METHOD_6 ( ) (  METHOD_7 ( ) )  METHOD_7 ( ) (  METHOD_8 ( VAR_3 ) )  METHOD_8 ( VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME VAR_1 ) NAME VAR_1 ( INIT = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ) INIT = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ) VAR VAR ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( ) . setItems ( ( ( java.util.List < TYPE_1 > ) ( returnValue ) ) ) )  METHOD_2 ( ) . setItems ( ( ( java.util.List < TYPE_1 > ) ( returnValue ) ) ) (  METHOD_3 ( ) )  METHOD_3 ( ) ) BLOCK BLOCK ) METHOD METHOD (  VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { METHOD_2 ( ) . setItems ( ( ( java.util.List < TYPE_1 > ) ( returnValue ) ) ) ; METHOD_3 ( ) ; } } )  VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { METHOD_2 ( ) . setItems ( ( ( java.util.List < TYPE_1 > ) ( returnValue ) ) ) ; METHOD_3 ( ) ; } } (  TYPE_2 . METHOD_4 ( getVm ( ) . METHOD_5 ( ) , METHOD_6 ( ) , VAR_1 ) )  TYPE_2 . METHOD_4 ( getVm ( ) . METHOD_5 ( ) , METHOD_6 ( ) , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  < org.ovirt.engine.core.compat.Guid > VAR_1 = new TYPE_3 < org.ovirt.engine.core.compat.Guid > ( VAR_2 , VAR_3 . IdQueryParameters class ) )  < org.ovirt.engine.core.compat.Guid > VAR_1 = new TYPE_3 < org.ovirt.engine.core.compat.Guid > ( VAR_2 , VAR_3 . IdQueryParameters class ) ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_4 ( VAR_1 , METHOD_2 ( id ) ) ) INIT = new TYPE_4 ( VAR_1 , METHOD_2 ( id ) ) ) VAR VAR (  return inject ( new TYPE_5 < TYPE_6 , TYPE_7 > ( VAR_5 , VAR_6 , VAR_4 ) ) ; )  return inject ( new TYPE_5 < TYPE_6 , TYPE_7 > ( VAR_5 , VAR_6 , VAR_4 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME type ) NAME type ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_3 . setId ( id ) )  VAR_3 . setId ( id ) (  VAR_3 . METHOD_2 ( VAR_1 ) )  VAR_3 . METHOD_2 ( VAR_1 ) (  VAR_3 . METHOD_3 ( type ) )  VAR_3 . METHOD_3 ( type ) (  VAR_3 . METHOD_4 ( VAR_2 ) )  VAR_3 . METHOD_4 ( VAR_2 ) (  VAR_3 . METHOD_5 ( VAR_4 ) )  VAR_3 . METHOD_5 ( VAR_4 ) (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME context ) NAME context ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 . METHOD_2 ( ) ) COND VAR_1 . METHOD_2 ( ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_3 ) NAME VAR_3 ( INIT = null ) INIT = null ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR (  VAR_3 = VAR_5 . METHOD_3 ( ) )  VAR_3 = VAR_5 . METHOD_3 ( ) (  VAR_4 = constants . METHOD_4 ( ) )  VAR_4 = constants . METHOD_4 ( ) ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_6 ) NAME VAR_6 ( INIT = TYPE_6 . METHOD_5 ( TYPE_7 . METHOD_6 ( VAR_3 ) . METHOD_7 ( ) ) ) INIT = TYPE_6 . METHOD_5 ( TYPE_7 . METHOD_6 ( VAR_3 ) . METHOD_7 ( ) ) ) VAR VAR (  VAR_2 . append ( VAR_7 . METHOD_8 ( VAR_6 , VAR_4 ) ) )  VAR_2 . append ( VAR_7 . METHOD_8 ( VAR_6 , VAR_4 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1.StorageDomain ) RETURN TYPE_1.StorageDomain ( NAME map ) NAME map ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME entity ) NAME entity ) VAR VAR ( VAR VAR ( TYPE TYPE_1.StorageDomain ) TYPE TYPE_1.StorageDomain ( NAME template ) NAME template ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.StorageDomain ) TYPE TYPE_1.StorageDomain ( NAME model ) NAME model ( INIT = super . map ( entity , template ) ) INIT = super . map ( entity , template ) ) VAR VAR ( IF IF ( COND ! ( METHOD_1 ( ) ) ) COND ! ( METHOD_1 ( ) ) ( THEN THEN ( SWITCH SWITCH ( NAME entity . METHOD_2 ( ) ) NAME entity . METHOD_2 ( ) ( CASE VAR_1 ( BLOCK BLOCK (  METHOD_3 ( model , entity ) )  METHOD_3 ( model , entity ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_1 ( CASE VAR_2 ( BLOCK BLOCK (  METHOD_4 ( model , entity ) )  METHOD_4 ( model , entity ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_2 ( CASE VAR_3 ( BLOCK BLOCK (  METHOD_5 ( model , entity ) )  METHOD_5 ( model , entity ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_3 ( CASE VAR_4 ( BLOCK BLOCK (  METHOD_5 ( model , entity ) )  METHOD_5 ( model , entity ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_4 ( CASE VAR_5 ( BLOCK BLOCK (  METHOD_5 ( model , entity ) )  METHOD_5 ( model , entity ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_5 ) SWITCH SWITCH ) THEN THEN ) IF IF (  return model ; )  return model ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  METHOD_2 ( METHOD_3 ( ) ) )  METHOD_2 ( METHOD_3 ( ) ) (  VAR_1 . METHOD_4 ( ) )  VAR_1 . METHOD_4 ( ) ( TRY TRY ( BLOCK BLOCK (  VAR_2 . add ( model ) )  VAR_2 . add ( model ) (  METHOD_5 ( STRING_1 ) )  METHOD_5 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( BLOCK BLOCK (  METHOD_6 ( VAR_3 , STRING_2 , STRING_3 , STRING_4 ) )  METHOD_6 ( VAR_3 , STRING_2 , STRING_3 , STRING_4 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME storageDomain ) NAME storageDomain ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return ( ( ( ( METHOD_2 ( storageDomain ) ) && ( METHOD_3 ( storageDomain , TYPE_2 . METHOD_4 ( ) ) ) ) && ( METHOD_5 ( storageDomain ) ) ) && ( ( ( ( storageDomain . METHOD_6 ( ) ) == ( VAR_1 ) ) || ( ( storageDomain . METHOD_6 ( ) ) == ( VAR_2 ) ) ) || ( METHOD_7 ( storageDomain ) ) ) ) && ( METHOD_8 ( storageDomain ) ) ; )  return ( ( ( ( METHOD_2 ( storageDomain ) ) && ( METHOD_3 ( storageDomain , TYPE_2 . METHOD_4 ( ) ) ) ) && ( METHOD_5 ( storageDomain ) ) ) && ( ( ( ( storageDomain . METHOD_6 ( ) ) == ( VAR_1 ) ) || ( ( storageDomain . METHOD_6 ( ) ) == ( VAR_2 ) ) ) || ( METHOD_7 ( storageDomain ) ) ) ) && ( METHOD_8 ( storageDomain ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( VAR_1 ) )  METHOD_2 ( VAR_1 ) (  log . METHOD_3 ( STRING_1 , TYPE_1 . METHOD_4 ( ) ) )  log . METHOD_3 ( STRING_1 , TYPE_1 . METHOD_4 ( ) ) (  VAR_2 . METHOD_5 ( TYPE_1 . METHOD_4 ( ) ) )  VAR_2 . METHOD_5 ( TYPE_1 . METHOD_4 ( ) ) (  TYPE_1 . METHOD_6 ( ) )  TYPE_1 . METHOD_6 ( ) (  log . METHOD_7 ( STRING_2 , TYPE_1 . getParameters ( ) . METHOD_8 ( ) , TYPE_1 . METHOD_4 ( ) ) )  log . METHOD_7 ( STRING_2 , TYPE_1 . getParameters ( ) . METHOD_8 ( ) , TYPE_1 . METHOD_4 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( METHOD_3 ( ) ) )  METHOD_2 ( METHOD_3 ( ) ) (  METHOD_4 ( ) )  METHOD_4 ( ) (  METHOD_5 ( 1 ) )  METHOD_5 ( 1 ) (  METHOD_6 ( 1 ) )  METHOD_6 ( 1 ) (  VAR_1 . METHOD_7 ( ) )  VAR_1 . METHOD_7 ( ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME nic ) NAME nic ( INIT = resource . get ( ) ) INIT = resource . get ( ) ) VAR VAR (  TYPE_2 . METHOD_8 ( nic , 1 ) )  TYPE_2 . METHOD_8 ( nic , 1 ) (  METHOD_9 ( nic ) )  METHOD_9 ( nic ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  return VAR_2 ; )  return VAR_2 ; ) THEN THEN ) IF IF ( IF IF ( COND ( METHOD_2 ( ) ) == ( VAR_3 ) ) COND ( METHOD_2 ( ) ) == ( VAR_3 ) ( THEN THEN (  return TYPE_1 . METHOD_3 ( ) . METHOD_4 ( ) ; )  return TYPE_1 . METHOD_3 ( ) . METHOD_4 ( ) ; ) THEN THEN ) IF IF ( IF IF ( COND ! ( TYPE_2 . METHOD_5 ( TYPE_1 . getVm ( ) . METHOD_6 ( ) , TYPE_1 . getVm ( ) . METHOD_7 ( ) ) ) ) COND ! ( TYPE_2 . METHOD_5 ( TYPE_1 . getVm ( ) . METHOD_6 ( ) , TYPE_1 . getVm ( ) . METHOD_7 ( ) ) ) ( THEN THEN (  return VAR_2 ; )  return VAR_2 ; ) THEN THEN ) IF IF (  return TYPE_1 . METHOD_3 ( ) . METHOD_4 ( ) ; )  return TYPE_1 . METHOD_3 ( ) . METHOD_4 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.Version ) TYPE TYPE_1.Version ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 ( ( ( ( VAR_1 . METHOD_2 ( ) ) + STRING_1 ) + ( VAR_1 . METHOD_3 ( ) ) ) . METHOD_4 ( ) , true ) ) INIT = new TYPE_2 ( ( ( ( VAR_1 . METHOD_2 ( ) ) + STRING_1 ) + ( VAR_1 . METHOD_3 ( ) ) ) . METHOD_4 ( ) , true ) ) VAR VAR (  return VAR_2 != null ? VAR_2 . toString ( ) : null ; )  return VAR_2 != null ? VAR_2 . toString ( ) : null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( VAR_2 , VAR_3 ) ) INIT = TYPE_2 . METHOD_2 ( VAR_2 , VAR_3 ) ) VAR VAR (  VAR_4 . parameters = new TYPE_3 ( VAR_1 , VAR_1 . getId ( ) ) )  VAR_4 . parameters = new TYPE_3 ( VAR_1 , VAR_1 . getId ( ) ) (  VAR_5 . METHOD_3 ( VAR_6 ) )  VAR_5 . METHOD_3 ( VAR_6 ) (  VAR_5 . METHOD_4 ( true ) )  VAR_5 . METHOD_4 ( true ) (  VAR_5 . METHOD_5 ( VAR_7 ) )  VAR_5 . METHOD_5 ( VAR_7 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , VAR_2 ) , null ) ) )  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , VAR_2 ) , null ) ) (  METHOD_3 ( ) )  METHOD_3 ( ) (  METHOD_4 ( true , null ) )  METHOD_4 ( true , null ) (  cmd . METHOD_5 ( ) )  cmd . METHOD_5 ( ) (  org.mockito.Mockito . METHOD_6 ( VAR_3 , org.mockito.Mockito . METHOD_7 ( 1 ) ) . METHOD_8 ( TYPE_3 . any ( VAR_4 class ) ) )  org.mockito.Mockito . METHOD_6 ( VAR_3 , org.mockito.Mockito . METHOD_7 ( 1 ) ) . METHOD_8 ( TYPE_3 . any ( VAR_4 class ) ) (  TYPE_4 . assertEquals ( cmd . METHOD_9 ( ) , VAR_5 ) )  TYPE_4 . assertEquals ( cmd . METHOD_9 ( ) , VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ) TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( VAR_2 ) ) INIT = METHOD_2 ( VAR_2 ) ) VAR VAR (  VAR_1 . METHOD_3 ( VAR_3 ) )  VAR_1 . METHOD_3 ( VAR_3 ) (  METHOD_4 ( VAR_4 , VAR_5 ) )  METHOD_4 ( VAR_4 , VAR_5 ) (  METHOD_5 ( VAR_6 , org.ovirt.engine.core.compat.Guid . METHOD_6 ( ) , VAR_4 ) )  METHOD_5 ( VAR_6 , org.ovirt.engine.core.compat.Guid . METHOD_6 ( ) , VAR_4 ) (  org.mockito.Mockito.doReturn ( new TYPE_1 . ValidationResult ( VAR_7 ) ) . when ( VAR_8 ) . METHOD_7 ( TYPE_2 . METHOD_8 ( ) ) )  org.mockito.Mockito.doReturn ( new TYPE_1 . ValidationResult ( VAR_7 ) ) . when ( VAR_8 ) . METHOD_7 ( TYPE_2 . METHOD_8 ( ) ) (  TYPE_3 . METHOD_9 ( command , VAR_9 ) )  TYPE_3 . METHOD_9 ( command , VAR_9 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.DiskImage ) TYPE TYPE_1.DiskImage ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_2 . METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) )  TYPE_2 . METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) (  METHOD_5 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) )  METHOD_5 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ( VAR VAR ( TYPE java.util.List<TYPE_1.DiskImage> ) TYPE java.util.List<TYPE_1.DiskImage> ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_6 ( ) . METHOD_7 ( VAR_1 . getId ( ) ) ) INIT = TYPE_2 . METHOD_6 ( ) . METHOD_7 ( VAR_1 . getId ( ) ) ) VAR VAR ( IF IF ( COND ( VAR_2 == null ) || ( VAR_2 . isEmpty ( ) ) ) COND ( VAR_2 == null ) || ( VAR_2 . isEmpty ( ) ) ( THEN THEN (  METHOD_8 ( ) . METHOD_3 ( VAR_1 . getId ( ) ) )  METHOD_8 ( ) . METHOD_3 ( VAR_1 . getId ( ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.Map<org.ovirt.engine.core.compat.Guid,TYPE_1> ) RETURN java.util.Map<org.ovirt.engine.core.compat.Guid,TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.HashMap<org.ovirt.engine.core.compat.Guid,TYPE_1> ) TYPE java.util.HashMap<org.ovirt.engine.core.compat.Guid,TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.HashMap < org.ovirt.engine.core.compat.Guid , TYPE_1 > ( ) ) INIT = new java.util.HashMap < org.ovirt.engine.core.compat.Guid , TYPE_1 > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME user ) NAME user ( IN METHOD_2 ( ) ) IN METHOD_2 ( ) ( BLOCK BLOCK (  VAR_1 . put ( user . METHOD_3 ( ) , user ) )  VAR_1 . put ( user . METHOD_3 ( ) , user ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.Network ) TYPE org.ovirt.engine.core.common.businessentities.Network ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( STRING_1 ) ) INIT = METHOD_2 ( STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME nic ) NAME nic ( INIT = METHOD_3 ( STRING_2 , VAR_1 ) ) INIT = METHOD_3 ( STRING_2 , VAR_1 ) ) VAR VAR (  nic . METHOD_4 ( ( ! ( VAR_1 . METHOD_5 ( ) ) ) ) )  nic . METHOD_4 ( ( ! ( VAR_1 . METHOD_5 ( ) ) ) ) (  nic . METHOD_6 ( VAR_2 ) )  nic . METHOD_6 ( VAR_2 ) (  METHOD_7 ( VAR_1 ) )  METHOD_7 ( VAR_1 ) (  METHOD_8 ( nic ) )  METHOD_8 ( nic ) (  nic . METHOD_6 ( VAR_3 ) )  nic . METHOD_6 ( VAR_3 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_9 ( METHOD_10 ( nic ) ) ) INIT = METHOD_9 ( METHOD_10 ( nic ) ) ) VAR VAR (  METHOD_11 ( VAR_4 , VAR_5 ) )  METHOD_11 ( VAR_4 , VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( STRING_1 , VAR_2 , STRING_2 , STRING_3 ) ) INIT = METHOD_2 ( STRING_1 , VAR_2 , STRING_2 , STRING_3 ) ) VAR VAR (  parameters . METHOD_3 ( VAR_1 ) )  parameters . METHOD_3 ( VAR_1 ) (  parameters . METHOD_4 ( VAR_3 ) )  parameters . METHOD_4 ( VAR_3 ) (  parameters . METHOD_5 ( VAR_3 ) )  parameters . METHOD_5 ( VAR_3 ) (  org.mockito.Mockito.doReturn ( false ) . when ( command ) . METHOD_6 ( ) )  org.mockito.Mockito.doReturn ( false ) . when ( command ) . METHOD_6 ( ) (  org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_7 ( ) )  org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_7 ( ) (  TYPE_2 . METHOD_8 ( command ) )  TYPE_2 . METHOD_8 ( command ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . METHOD_2 ( STRING_1 ) ) INIT = VAR_3 . METHOD_2 ( STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( INIT = null ) INIT = null ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_4 = new TYPE_3 ( VAR_2 , STRING_2 ) )  VAR_4 = new TYPE_3 ( VAR_2 , STRING_2 ) ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_5 ) NAME VAR_5 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  VAR_4 . METHOD_3 ( VAR_5 ) )  VAR_4 . METHOD_3 ( VAR_5 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ( FINALLY FINALLY ( IF IF ( COND VAR_4 != null ) COND VAR_4 != null ( THEN THEN (  VAR_4 . METHOD_4 ( ) )  VAR_4 . METHOD_4 ( ) ) THEN THEN ) IF IF ) FINALLY FINALLY ) TRY TRY (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( cmd ) . METHOD_2 ( ) )  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( cmd ) . METHOD_2 ( ) (  org.mockito.Mockito.doReturn ( METHOD_3 ( VAR_2 ) ) . when ( cmd ) . METHOD_4 ( ) )  org.mockito.Mockito.doReturn ( METHOD_3 ( VAR_2 ) ) . when ( cmd ) . METHOD_4 ( ) (  org.mockito.Mockito.doReturn ( METHOD_5 ( VAR_3 ) ) . when ( VAR_1 ) . METHOD_6 ( VAR_3 ) )  org.mockito.Mockito.doReturn ( METHOD_5 ( VAR_3 ) ) . when ( VAR_1 ) . METHOD_6 ( VAR_3 ) (  org.mockito.Mockito.doReturn ( METHOD_5 ( VAR_4 ) ) . when ( VAR_1 ) . METHOD_6 ( VAR_4 ) )  org.mockito.Mockito.doReturn ( METHOD_5 ( VAR_4 ) ) . when ( VAR_1 ) . METHOD_6 ( VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND METHOD_2 ( ) ) COND METHOD_2 ( ) ( THEN THEN ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( java.lang.String ) ( TYPE_1 . METHOD_3 ( VAR_2 . METHOD_4 ( ) ) ) ) ) INIT = ( ( java.lang.String ) ( TYPE_1 . METHOD_3 ( VAR_2 . METHOD_4 ( ) ) ) ) ) VAR VAR ( IF IF ( COND ! ( VAR_2 . METHOD_5 ( ) . METHOD_6 ( VAR_1 ) ) ) COND ! ( VAR_2 . METHOD_5 ( ) . METHOD_6 ( VAR_1 ) ) ( THEN THEN (  VAR_1 = VAR_2 . METHOD_7 ( ) )  VAR_1 = VAR_2 . METHOD_7 ( ) ) THEN THEN ) IF IF (  return VAR_2 . METHOD_5 ( ) . get ( VAR_1 ) ; )  return VAR_2 . METHOD_5 ( ) . get ( VAR_1 ) ; ) THEN THEN ( ELSE ELSE (  return VAR_2 . METHOD_5 ( ) . get ( VAR_3 ) ; )  return VAR_2 . METHOD_5 ( ) . get ( VAR_3 ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( ( VAR_1 ) == null ) && ( ( VAR_2 ) == null ) ) COND ( ( VAR_1 ) == null ) && ( ( VAR_2 ) == null ) ( THEN THEN (  VAR_2 = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . get ( METHOD_3 ( ) ) )  VAR_2 = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . get ( METHOD_3 ( ) ) ( IF IF ( COND ( VAR_2 ) != null ) COND ( VAR_2 ) != null ( THEN THEN (  VAR_1 = VAR_2 . METHOD_1 ( ) )  VAR_1 = VAR_2 . METHOD_1 ( ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  dao . METHOD_2 ( VAR_1 ) )  dao . METHOD_2 ( VAR_1 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ( INIT = dao . get ( new TYPE_2 ( VAR_1 . METHOD_3 ( ) , new org.ovirt.engine.core.compat.Guid ( VAR_1 . METHOD_4 ( ) . toString ( ) ) ) ) ) INIT = dao . get ( new TYPE_2 ( VAR_1 . METHOD_3 ( ) , new org.ovirt.engine.core.compat.Guid ( VAR_1 . METHOD_4 ( ) . toString ( ) ) ) ) ) VAR VAR (  TYPE_3 . METHOD_5 ( result ) )  TYPE_3 . METHOD_5 ( result ) (  TYPE_3 . assertEquals ( VAR_1 , result ) )  TYPE_3 . assertEquals ( VAR_1 , result ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( VAR_1 ) )  METHOD_2 ( VAR_1 ) (  METHOD_3 ( ) )  METHOD_3 ( ) (  METHOD_4 ( ) )  METHOD_4 ( ) (  METHOD_5 ( ) )  METHOD_5 ( ) (  METHOD_6 ( ) )  METHOD_6 ( ) (  METHOD_7 ( ) )  METHOD_7 ( ) (  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( command ) . METHOD_8 ( ) )  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( command ) . METHOD_8 ( ) (  TYPE_1 . METHOD_9 ( command . METHOD_10 ( ) ) )  TYPE_1 . METHOD_9 ( command . METHOD_10 ( ) ) (  TYPE_1 . METHOD_11 ( command . getReturnValue ( ) . METHOD_12 ( ) . METHOD_13 ( TYPE_2 . toString ( ) ) ) )  TYPE_1 . METHOD_11 ( command . getReturnValue ( ) . METHOD_12 ( ) . METHOD_13 ( TYPE_2 . toString ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2.VdcActionType ) TYPE TYPE_2.VdcActionType ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3<?extendsTYPE_2.VdcActionParametersBase> ) TYPE TYPE_3<?extendsTYPE_2.VdcActionParametersBase> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object[] ) TYPE java.lang.Object[] ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_6 ) NAME VAR_6 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_7 ) NAME VAR_7 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_8 ) NAME VAR_8 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_9 ) NAME VAR_9 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 , null , null , VAR_8 , VAR_9 ) ; )  return METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 , null , null , VAR_8 , VAR_9 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME equals ) NAME equals ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME obj ) NAME obj ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( this ) == obj ) COND ( this ) == obj ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ( IF IF ( COND obj == null ) COND obj == null ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( IF IF ( COND ( METHOD_1 ( ) ) != ( obj . METHOD_1 ( ) ) ) COND ( METHOD_1 ( ) ) != ( obj . METHOD_1 ( ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME other ) NAME other ( INIT = ( ( TYPE_1 ) ( obj ) ) ) INIT = ( ( TYPE_1 ) ( obj ) ) ) VAR VAR (  return ( TYPE_2 . equals ( id , other . id ) ) && ( TYPE_2 . equals ( VAR_1 , VAR_2 ) ) ; )  return ( TYPE_2 . equals ( id , other . id ) ) && ( TYPE_2 . equals ( VAR_1 , VAR_2 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME vds ) NAME vds ) VAR VAR ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.String> ) TYPE java.util.Map<java.lang.String,java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME tempVar ) NAME tempVar ( INIT = new TYPE_2 ( vds . getId ( ) , VAR_1 , VAR_2 ) ) INIT = new TYPE_2 ( vds . getId ( ) , VAR_1 , VAR_2 ) ) VAR VAR (  tempVar . METHOD_2 ( true ) )  tempVar . METHOD_2 ( true ) (  TYPE_3 . getInstance ( ) . METHOD_3 ( VAR_3 , tempVar , TYPE_4 . METHOD_4 ( ) ) )  TYPE_3 . getInstance ( ) . METHOD_3 ( VAR_3 , tempVar , TYPE_4 . METHOD_4 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ( ( java.lang.Integer ) ( TYPE_2 . getValue ( VAR_2 ) ) ) ) ) INIT = METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ( ( java.lang.Integer ) ( TYPE_2 . getValue ( VAR_2 ) ) ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  return ( VAR_1 . METHOD_5 ( VAR_3 ) ) || ( VAR_1 . equals ( VAR_3 ) ) ; )  return ( VAR_1 . METHOD_5 ( VAR_3 ) ) || ( VAR_1 . equals ( VAR_3 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( ) )  VAR_1 . METHOD_2 ( ) (  VAR_1 . METHOD_3 ( new TYPE_1 ( STRING_1 ) ) )  VAR_1 . METHOD_3 ( new TYPE_1 ( STRING_1 ) ) (  VAR_1 . METHOD_3 ( new TYPE_1 ( STRING_2 ) ) )  VAR_1 . METHOD_3 ( new TYPE_1 ( STRING_2 ) ) (  TYPE_2 . METHOD_4 ( VAR_2 . METHOD_5 ( ) . isEmpty ( ) ) )  TYPE_2 . METHOD_4 ( VAR_2 . METHOD_5 ( ) . isEmpty ( ) ) (  TYPE_2 . METHOD_4 ( VAR_2 . METHOD_6 ( ) . isEmpty ( ) ) )  TYPE_2 . METHOD_4 ( VAR_2 . METHOD_6 ( ) . isEmpty ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( VAR_2 , STRING_1 ) )  VAR_1 . METHOD_2 ( VAR_2 , STRING_1 ) (  VAR_1 . METHOD_2 ( VAR_3 , STRING_2 ) )  VAR_1 . METHOD_2 ( VAR_3 , STRING_2 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_1 ( INT_1 ) ) INIT = new TYPE_1 ( INT_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_5 ) NAME VAR_5 ( INIT = new TYPE_2 ( STRING_3 ) ) INIT = new TYPE_2 ( STRING_3 ) ) VAR VAR (  VAR_5 . METHOD_3 ( 0 ) )  VAR_5 . METHOD_3 ( 0 ) (  TYPE_3 . assertEquals ( STRING_3 , VAR_4 . METHOD_4 ( VAR_5 , STRING_4 ) ) )  TYPE_3 . assertEquals ( STRING_3 , VAR_4 . METHOD_4 ( VAR_5 , STRING_4 ) ) (  VAR_1 . METHOD_2 ( VAR_2 , STRING_5 ) )  VAR_1 . METHOD_2 ( VAR_2 , STRING_5 ) (  VAR_1 . METHOD_2 ( VAR_3 , STRING_6 ) )  VAR_1 . METHOD_2 ( VAR_3 , STRING_6 ) (  TYPE_3 . METHOD_5 ( STRING_3 , VAR_4 . METHOD_4 ( VAR_5 , STRING_4 ) ) )  TYPE_3 . METHOD_5 ( STRING_3 , VAR_4 . METHOD_4 ( VAR_5 , STRING_4 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( VAR_2 class , VAR_1 ) )  METHOD_2 ( VAR_2 class , VAR_1 ) (  METHOD_3 ( VAR_1 ) )  METHOD_3 ( VAR_1 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ( INIT = METHOD_4 ( VAR_1 , new TYPE_2 < org.ovirt.engine.core.compat.Guid > ( VAR_3 , VAR_4 class ) , VAR_5 , new TYPE_3 ( ) ) ) INIT = METHOD_4 ( VAR_1 , new TYPE_2 < org.ovirt.engine.core.compat.Guid > ( VAR_3 , VAR_4 class ) , VAR_5 , new TYPE_3 ( ) ) ) VAR VAR ( IF IF ( COND result != null ) COND result != null ( THEN THEN (  TYPE_4 . METHOD_5 ( this , result ) )  TYPE_4 . METHOD_5 ( this , result ) ) THEN THEN ) IF IF (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME object ) NAME object ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  super . METHOD_1 ( object ) )  super . METHOD_1 ( object ) (  METHOD_2 ( object ) )  METHOD_2 ( object ) ( IF IF ( COND object . METHOD_3 ( ) ) COND object . METHOD_3 ( ) ( THEN THEN (  object . METHOD_4 ( ) . setEntity ( STRING_1 ) )  object . METHOD_4 ( ) . setEntity ( STRING_1 ) (  VAR_1 . METHOD_5 ( false ) )  VAR_1 . METHOD_5 ( false ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( VAR_1 , VAR_2 ) )  METHOD_2 ( VAR_1 , VAR_2 ) ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_3 ( VAR_4 ) ) INIT = METHOD_3 ( VAR_4 ) ) VAR VAR (  org.mockito.Mockito.doReturn ( METHOD_4 ( VAR_4 , VAR_3 ) ) . when ( VAR_5 ) . METHOD_5 ( TYPE_2 . METHOD_6 ( VAR_6 ) , TYPE_2 . METHOD_7 ( METHOD_8 ( VAR_4 ) ) ) )  org.mockito.Mockito.doReturn ( METHOD_4 ( VAR_4 , VAR_3 ) ) . when ( VAR_5 ) . METHOD_5 ( TYPE_2 . METHOD_6 ( VAR_6 ) , TYPE_2 . METHOD_7 ( METHOD_8 ( VAR_4 ) ) ) (  METHOD_2 ( VAR_7 , VAR_8 ) )  METHOD_2 ( VAR_7 , VAR_8 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , null , VAR_1 , VAR_2 ) ) ) )  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , null , VAR_1 , VAR_2 ) ) ) (  METHOD_4 ( ) )  METHOD_4 ( ) (  METHOD_5 ( false , VAR_3 , VAR_4 ) )  METHOD_5 ( false , VAR_3 , VAR_4 ) (  cmd . METHOD_6 ( ) )  cmd . METHOD_6 ( ) (  org.mockito.Mockito . METHOD_7 ( VAR_5 , org.mockito.Mockito . METHOD_8 ( ) ) . METHOD_9 ( TYPE_3 . any ( VAR_6 class ) ) )  org.mockito.Mockito . METHOD_7 ( VAR_5 , org.mockito.Mockito . METHOD_8 ( ) ) . METHOD_9 ( TYPE_3 . any ( VAR_6 class ) ) (  TYPE_4 . assertEquals ( cmd . METHOD_10 ( ) , VAR_7 ) )  TYPE_4 . assertEquals ( cmd . METHOD_10 ( ) , VAR_7 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ( INIT = ( ( TYPE_1 ) ( target ) ) ) INIT = ( ( TYPE_1 ) ( target ) ) ) VAR VAR (  VAR_1 = ( ( TYPE_2 ) ( returnValue ) ) )  VAR_1 = ( ( TYPE_2 ) ( returnValue ) ) ( IF IF ( COND ( ( VAR_1 ) == null ) || ( ( VAR_1 . METHOD_1 ( ) ) != ( VAR_2 ) ) ) COND ( ( VAR_1 ) == null ) || ( ( VAR_1 . METHOD_1 ( ) ) != ( VAR_2 ) ) ( THEN THEN (  model . METHOD_2 ( ) )  model . METHOD_2 ( ) ) THEN THEN ( ELSE ELSE (  model . METHOD_3 ( ) )  model . METHOD_3 ( ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME map ) NAME map ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  METHOD_3 ( map , VAR_1 , VAR_2 , TYPE_2 . METHOD_4 ( ) ) )  METHOD_3 ( map , VAR_1 , VAR_2 , TYPE_2 . METHOD_4 ( ) ) ( IF IF ( COND METHOD_5 ( ) ) COND METHOD_5 ( ) ( THEN THEN ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME parameters ) NAME parameters ( INIT = new TYPE_3 ( TYPE_2 . getStoragePoolId ( ) ) ) INIT = new TYPE_3 ( TYPE_2 . getStoragePoolId ( ) ) ) VAR VAR (  METHOD_6 ( VAR_3 , parameters , null ) )  METHOD_6 ( VAR_3 , parameters , null ) (  METHOD_6 ( VAR_4 , METHOD_7 ( ) , TYPE_2 . METHOD_8 ( ) ) )  METHOD_6 ( VAR_4 , METHOD_7 ( ) , TYPE_2 . METHOD_8 ( ) ) ) THEN THEN ) IF IF ( IF IF ( COND TYPE_2 . METHOD_9 ( ) ) COND TYPE_2 . METHOD_9 ( ) ( THEN THEN (  METHOD_10 ( ) )  METHOD_10 ( ) ) THEN THEN ) IF IF (  TYPE_2 . METHOD_11 ( true ) )  TYPE_2 . METHOD_11 ( true ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_2 ( ) ) INIT = TYPE_2 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.Object> ) TYPE java.util.Map<java.lang.String,java.lang.Object> ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_2 . METHOD_3 ( ) ) INIT = TYPE_2 . METHOD_3 ( ) ) VAR VAR (  VAR_3 . put ( VAR_4 , VAR_1 ) )  VAR_3 . put ( VAR_4 , VAR_1 ) ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.Object> ) TYPE java.util.Map<java.lang.String,java.lang.Object> ( NAME VAR_5 ) NAME VAR_5 ( INIT = TYPE_2 . METHOD_4 ( VAR_3 ) ) INIT = TYPE_2 . METHOD_4 ( VAR_3 ) ) VAR VAR (  TYPE_3 . METHOD_5 ( VAR_2 , VAR_5 , TYPE_2 . METHOD_6 ( ) ) )  TYPE_3 . METHOD_5 ( VAR_2 , VAR_5 , TYPE_2 . METHOD_6 ( ) ) (  TYPE_4 . assertEquals ( VAR_2 . METHOD_7 ( ) . get ( 0 ) . METHOD_8 ( ) , new TYPE_5 ( STRING_2 ) ) )  TYPE_4 . assertEquals ( VAR_2 . METHOD_7 ( ) . get ( 0 ) . METHOD_8 ( ) , new TYPE_5 ( STRING_2 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME storage ) NAME storage ( INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . get ( TYPE_2 . getParameters ( ) . METHOD_3 ( ) ) ) INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . get ( TYPE_2 . getParameters ( ) . METHOD_3 ( ) ) ) VAR VAR ( IF IF ( COND ( storage . METHOD_4 ( ) ) == ( VAR_1 ) ) COND ( storage . METHOD_4 ( ) ) == ( VAR_1 ) ( THEN THEN ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_5 ( ) ) INIT = METHOD_5 ( ) ) VAR VAR (  METHOD_6 ( VAR_2 . getReturnValue ( ) ) )  METHOD_6 ( VAR_2 . getReturnValue ( ) ) ) THEN THEN ( ELSE ELSE (  TYPE_2 . METHOD_7 ( ) . METHOD_8 ( new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ( ) ) )  TYPE_2 . METHOD_7 ( ) . METHOD_8 ( new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ( ) ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ( INIT = true ) INIT = true ) VAR VAR ( IF IF ( COND ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) ) == ( VAR_2 ) ) COND ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) ) == ( VAR_2 ) ( THEN THEN (  VAR_1 = super . METHOD_1 ( ) )  VAR_1 = super . METHOD_1 ( ) ( IF IF ( COND ( ( TYPE_1 . METHOD_3 ( ) ) != null ) && ( ( TYPE_1 . METHOD_3 ( ) . METHOD_4 ( ) ) != ( VAR_3 ) ) ) COND ( ( TYPE_1 . METHOD_3 ( ) ) != null ) && ( ( TYPE_1 . METHOD_3 ( ) . METHOD_4 ( ) ) != ( VAR_3 ) ) ( THEN THEN (  addCanDoActionMessage ( VAR_4 ) )  addCanDoActionMessage ( VAR_4 ) (  VAR_1 = false )  VAR_1 = false ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_1 ) ( getSelectedItem ( ) ) ) ) INIT = ( ( TYPE_1 ) ( getSelectedItem ( ) ) ) ) VAR VAR ( IF IF ( COND ( getWindow ( ) ) != null ) COND ( getWindow ( ) ) != null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_3 ( VAR_1 , this , getEntity ( ) ) ) INIT = new TYPE_3 ( VAR_1 , this , getEntity ( ) ) ) VAR VAR (  METHOD_2 ( VAR_2 ) )  METHOD_2 ( VAR_2 ) (  VAR_2 . METHOD_3 ( ) . setItems ( TYPE_4 . METHOD_4 ( getEntity ( ) ) ) )  VAR_2 . METHOD_3 ( ) . setItems ( TYPE_4 . METHOD_4 ( getEntity ( ) ) ) (  VAR_2 . METHOD_3 ( ) . setSelectedItem ( getEntity ( ) ) )  VAR_2 . METHOD_3 ( ) . setSelectedItem ( getEntity ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 . METHOD_2 ( ) ) == ( VAR_2 ) ) COND ( VAR_1 . METHOD_2 ( ) ) == ( VAR_2 ) ( THEN THEN ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( ( TYPE_2 ) ( VAR_1 . METHOD_3 ( ) ) ) ) INIT = ( ( TYPE_2 ) ( VAR_1 . METHOD_3 ( ) ) ) ) VAR VAR ( IF IF ( COND ( VAR_3 != null ) && ( VAR_3 . METHOD_4 ( ) ) ) COND ( VAR_3 != null ) && ( VAR_3 . METHOD_4 ( ) ) ( THEN THEN (  METHOD_5 ( false ) )  METHOD_5 ( false ) (  return ; )  return ; ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  METHOD_5 ( true ) )  METHOD_5 ( true ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.VdcActionType ) TYPE TYPE_1.VdcActionType ( NAME action ) NAME action ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1.VdcActionType> ) TYPE java.util.List<TYPE_1.VdcActionType> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.ArrayList < TYPE_1 . VdcActionType > ( VAR_1 . size ( ) ) ) INIT = new java.util.ArrayList < TYPE_1 . VdcActionType > ( VAR_1 . size ( ) ) ) VAR VAR (  TYPE_3 . METHOD_2 ( VAR_2 , action ) )  TYPE_3 . METHOD_2 ( VAR_2 , action ) (  METHOD_3 ( VAR_2 , VAR_1 ) )  METHOD_3 ( VAR_2 , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( METHOD_3 ( ) ) )  METHOD_2 ( METHOD_3 ( ) ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_1 . METHOD_4 ( null ) )  VAR_1 . METHOD_4 ( null ) (  VAR_2 . METHOD_5 ( ) )  VAR_2 . METHOD_5 ( ) ( TRY TRY ( BLOCK BLOCK (  resource . METHOD_6 ( VAR_1 ) )  resource . METHOD_6 ( VAR_1 ) (  METHOD_7 ( STRING_1 ) )  METHOD_7 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( BLOCK BLOCK (  METHOD_8 ( VAR_3 , STRING_2 , STRING_3 , STRING_4 ) )  METHOD_8 ( VAR_3 , STRING_2 , STRING_3 , STRING_4 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.Network ) TYPE org.ovirt.engine.core.common.businessentities.Network ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( STRING_1 ) ) INIT = METHOD_2 ( STRING_1 ) ) VAR VAR (  VAR_1 . METHOD_3 ( TYPE_1 . instance ( ) . METHOD_4 ( ) ) )  VAR_1 . METHOD_3 ( TYPE_1 . instance ( ) . METHOD_4 ( ) ) ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME nic ) NAME nic ( INIT = METHOD_5 ( STRING_2 , VAR_1 ) ) INIT = METHOD_5 ( STRING_2 , VAR_1 ) ) VAR VAR (  nic . METHOD_3 ( TYPE_1 . instance ( ) . METHOD_4 ( ) ) )  nic . METHOD_3 ( TYPE_1 . instance ( ) . METHOD_4 ( ) ) (  METHOD_6 ( VAR_1 ) )  METHOD_6 ( VAR_1 ) (  METHOD_7 ( nic ) )  METHOD_7 ( nic ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_8 ( METHOD_9 ( nic ) ) ) INIT = METHOD_8 ( METHOD_9 ( nic ) ) ) VAR VAR (  METHOD_10 ( VAR_2 , VAR_1 ) )  METHOD_10 ( VAR_2 , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = INT_1 ) INIT = INT_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = INT_2 ) INIT = INT_2 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_3 ) NAME VAR_3 ( INIT = org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) INIT = org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) VAR VAR (  METHOD_3 ( VAR_3 , VAR_4 ) )  METHOD_3 ( VAR_3 , VAR_4 ) (  METHOD_4 ( ) )  METHOD_4 ( ) (  METHOD_5 ( ) )  METHOD_5 ( ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_5 ) NAME VAR_5 ( INIT = METHOD_6 ( VAR_3 , VAR_1 , VAR_2 ) ) INIT = METHOD_6 ( VAR_3 , VAR_1 , VAR_2 ) ) VAR VAR (  METHOD_7 ( ) )  METHOD_7 ( ) (  METHOD_8 ( VAR_5 , true ) )  METHOD_8 ( VAR_5 , true ) (  TYPE_2 . METHOD_9 ( command . METHOD_10 ( ) ) )  TYPE_2 . METHOD_9 ( command . METHOD_10 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( 2 ) )  METHOD_2 ( 2 ) (  METHOD_3 ( 0 ) )  METHOD_3 ( 0 ) (  METHOD_4 ( ) )  METHOD_4 ( ) (  METHOD_5 ( METHOD_6 ( ) ) )  METHOD_5 ( METHOD_6 ( ) ) (  VAR_1 . METHOD_7 ( ) )  VAR_1 . METHOD_7 ( ) ( VAR VAR ( TYPE TYPE_1.VM ) TYPE TYPE_1.VM ( NAME model ) NAME model ( INIT = TYPE_2 . getModel ( 1 ) ) INIT = TYPE_2 . getModel ( 1 ) ) VAR VAR (  model . setId ( VAR_2 [ 1 ] . toString ( ) ) )  model . setId ( VAR_2 [ 1 ] . toString ( ) ) ( TRY TRY ( BLOCK BLOCK (  resource . METHOD_8 ( model ) )  resource . METHOD_8 ( model ) (  METHOD_9 ( STRING_1 ) )  METHOD_9 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( BLOCK BLOCK (  METHOD_10 ( VAR_3 ) )  METHOD_10 ( VAR_3 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  METHOD_3 ( ) )  METHOD_3 ( ) (  METHOD_4 ( ) )  METHOD_4 ( ) (  cmd . METHOD_5 ( ) . METHOD_6 ( VAR_1 ) )  cmd . METHOD_5 ( ) . METHOD_6 ( VAR_1 ) (  METHOD_7 ( true ) )  METHOD_7 ( true ) (  org.mockito.Mockito . METHOD_8 ( VAR_2 , org.mockito.Mockito . METHOD_9 ( 1 ) ) . METHOD_10 ( TYPE_1 . METHOD_11 ( ) , TYPE_1 . METHOD_11 ( ) ) )  org.mockito.Mockito . METHOD_8 ( VAR_2 , org.mockito.Mockito . METHOD_9 ( 1 ) ) . METHOD_10 ( TYPE_1 . METHOD_11 ( ) , TYPE_1 . METHOD_11 ( ) ) (  org.mockito.Mockito . METHOD_8 ( VAR_2 , org.mockito.Mockito . METHOD_9 ( 0 ) ) . METHOD_12 ( TYPE_1 . METHOD_11 ( ) ) )  org.mockito.Mockito . METHOD_8 ( VAR_2 , org.mockito.Mockito . METHOD_9 ( 0 ) ) . METHOD_12 ( TYPE_1 . METHOD_11 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 = org.mockito.Mockito . METHOD_2 ( VAR_2 class ) )  VAR_1 = org.mockito.Mockito . METHOD_2 ( VAR_2 class ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_3 . METHOD_3 ( VAR_4 ) )  VAR_3 . METHOD_3 ( VAR_4 ) (  org.mockito.Mockito.when ( VAR_1 . METHOD_4 ( TYPE_2 . METHOD_5 ( ) ) ) . thenReturn ( VAR_3 ) )  org.mockito.Mockito.when ( VAR_1 . METHOD_4 ( TYPE_2 . METHOD_5 ( ) ) ) . thenReturn ( VAR_3 ) (  org.mockito.Mockito.when ( VAR_1 . METHOD_6 ( TYPE_2 . METHOD_5 ( ) ) ) . thenReturn ( VAR_5 ) )  org.mockito.Mockito.when ( VAR_1 . METHOD_6 ( TYPE_2 . METHOD_5 ( ) ) ) . thenReturn ( VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ( INIT = ( ( TYPE_1 ) ( target ) ) ) INIT = ( ( TYPE_1 ) ( target ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.ArrayList<TYPE_2> ) TYPE java.util.ArrayList<TYPE_2> ( NAME list ) NAME list ( INIT = new java.util.ArrayList < TYPE_2 > ( ) ) INIT = new java.util.ArrayList < TYPE_2 > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME a ) NAME a ( IN ( ( java.util.ArrayList < TYPE_2 > ) ( returnValue ) ) ) IN ( ( java.util.ArrayList < TYPE_2 > ) ( returnValue ) ) ( BLOCK BLOCK ( IF IF ( COND ( a . METHOD_1 ( ) ) == ( VAR_1 ) ) COND ( a . METHOD_1 ( ) ) == ( VAR_1 ) ( THEN THEN (  list . add ( a ) )  list . add ( a ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  model . METHOD_2 ( model , list ) )  model . METHOD_2 ( model , list ) (  METHOD_3 ( ) . METHOD_4 ( this , VAR_2 ) )  METHOD_3 ( ) . METHOD_4 ( this , VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , STRING_1 , STRING_2 , VAR_2 , null , null , TYPE_3 . METHOD_3 ( ) ) , null ) ) )  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , STRING_1 , STRING_2 , VAR_2 , null , null , TYPE_3 . METHOD_3 ( ) ) , null ) ) (  METHOD_4 ( VAR_3 ) )  METHOD_4 ( VAR_3 ) (  TYPE_4 . METHOD_5 ( cmd . validate ( ) ) )  TYPE_4 . METHOD_5 ( cmd . validate ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME params ) NAME params ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  params . METHOD_2 ( VAR_1 ) )  params . METHOD_2 ( VAR_1 ) (  params . METHOD_3 ( VAR_2 ) )  params . METHOD_3 ( VAR_2 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME command ) NAME command ( INIT = new TYPE_2 ( params , null ) ) INIT = new TYPE_2 ( params , null ) ) VAR VAR ( VAR VAR ( TYPE java.util.HashMap<java.lang.String,java.lang.Object> ) TYPE java.util.HashMap<java.lang.String,java.lang.Object> ( NAME VAR_3 ) NAME VAR_3 ( INIT = command . METHOD_1 ( ) ) INIT = command . METHOD_1 ( ) ) VAR VAR (  TYPE_3 . METHOD_4 ( VAR_3 ) )  TYPE_3 . METHOD_4 ( VAR_3 ) (  TYPE_3 . assertEquals ( STRING_1 , VAR_3 . get ( STRING_2 ) ) )  TYPE_3 . assertEquals ( STRING_1 , VAR_3 . get ( STRING_2 ) ) (  TYPE_3 . assertEquals ( STRING_3 , VAR_3 . get ( STRING_4 ) ) )  TYPE_3 . assertEquals ( STRING_3 , VAR_3 . get ( STRING_4 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME add ) NAME add ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_1 ( VAR_1 , STRING_1 , STRING_2 , STRING_3 ) )  METHOD_1 ( VAR_1 , STRING_1 , STRING_2 , STRING_3 ) (  METHOD_2 ( VAR_2 class , VAR_1 ) )  METHOD_2 ( VAR_2 class , VAR_1 ) (  return METHOD_3 ( VAR_3 , new TYPE_3 ( map ( METHOD_4 ( VAR_1 ) ) ) , new TYPE_4 < org.ovirt.engine.core.compat.Guid > ( VAR_4 , VAR_5 . IdQueryParameters class ) ) ; )  return METHOD_3 ( VAR_3 , new TYPE_3 ( map ( METHOD_4 ( VAR_1 ) ) ) , new TYPE_4 < org.ovirt.engine.core.compat.Guid > ( VAR_4 , VAR_5 . IdQueryParameters class ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  get ( ) )  get ( ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  VAR_1 . setId ( id ) )  VAR_1 . setId ( id ) ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME host ) NAME host ( INIT = TYPE_3 . METHOD_2 ( VAR_2 , VAR_3 , VAR_4 ) ) INIT = TYPE_3 . METHOD_2 ( VAR_2 , VAR_3 , VAR_4 ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_6 ) INIT = VAR_6 ) VAR VAR ( IF IF ( COND host != null ) COND host != null ( THEN THEN (  VAR_5 = METHOD_3 ( host ) )  VAR_5 = METHOD_3 ( host ) ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME parameters ) NAME parameters ( INIT = new TYPE_4 ( VAR_1 , VAR_5 ) ) INIT = new TYPE_4 ( VAR_1 , VAR_5 ) ) VAR VAR (  return METHOD_4 ( VAR_7 , parameters ) ; )  return METHOD_4 ( VAR_7 , parameters ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME id ) NAME id ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source ; )  return source ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } (  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_1 , new TYPE_1 ( id ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_1 , new TYPE_1 ( id ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME vm ) NAME vm ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  vm . setId ( VAR_1 ) )  vm . setId ( VAR_1 ) (  vm . METHOD_2 ( new TYPE_2 . StorageDomain ( ) ) )  vm . METHOD_2 ( new TYPE_2 . StorageDomain ( ) ) (  vm . METHOD_3 ( ) . setId ( VAR_2 ) )  vm . METHOD_3 ( ) . setId ( VAR_2 ) (  vm = TYPE_3 . METHOD_4 ( METHOD_5 ( ) , vm ) )  vm = TYPE_3 . METHOD_4 ( METHOD_5 ( ) , vm ) (  assertEquals ( VAR_3 , vm . METHOD_6 ( ) ) )  assertEquals ( VAR_3 , vm . METHOD_6 ( ) ) (  assertEquals ( VAR_4 , vm . METHOD_3 ( ) . METHOD_6 ( ) ) )  assertEquals ( VAR_4 , vm . METHOD_3 ( ) . METHOD_6 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) ( VAR VAR ( TYPE TYPE_1<org.ovirt.engine.ui.uicommonweb.models.EntityModel> ) TYPE TYPE_1<org.ovirt.engine.ui.uicommonweb.models.EntityModel> ( NAME list ) NAME list ( INIT = new TYPE_1 < org.ovirt.engine.ui.uicommonweb.models.EntityModel > ( ) ) INIT = new TYPE_1 < org.ovirt.engine.ui.uicommonweb.models.EntityModel > ( ) ) VAR VAR (  list . add ( new TYPE_2 ( ) ) )  list . add ( new TYPE_2 ( ) ) (  list . add ( new TYPE_3 ( ) ) )  list . add ( new TYPE_3 ( ) ) (  list . add ( new TYPE_4 ( ) ) )  list . add ( new TYPE_4 ( ) ) (  list . add ( new TYPE_5 ( ) ) )  list . add ( new TYPE_5 ( ) ) (  list . add ( new TYPE_6 ( ) ) )  list . add ( new TYPE_6 ( ) ) (  METHOD_2 ( list ) )  METHOD_2 ( list ) (  METHOD_3 ( list ) )  METHOD_3 ( list ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.when ( host . METHOD_2 ( ) ) . thenReturn ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) )  org.mockito.Mockito.when ( host . METHOD_2 ( ) ) . thenReturn ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) (  org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( VAR_2 . Guid class ) ) ) . thenReturn ( org.mockito.Mockito . METHOD_4 ( VAR_3 class ) ) )  org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( VAR_2 . Guid class ) ) ) . thenReturn ( org.mockito.Mockito . METHOD_4 ( VAR_3 class ) ) (  TYPE_2 . METHOD_5 ( validator . METHOD_1 ( ) , TYPE_3 . METHOD_6 ( ) ) )  TYPE_2 . METHOD_5 ( validator . METHOD_1 ( ) , TYPE_3 . METHOD_6 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 . METHOD_2 ( VAR_2 ) ) COND VAR_1 . METHOD_2 ( VAR_2 ) ( THEN THEN (  VAR_3 . METHOD_3 ( ( ( STRING_1 + ( VAR_1 . METHOD_4 ( ) . getName ( ) ) ) + STRING_2 ) ) )  VAR_3 . METHOD_3 ( ( ( STRING_1 + ( VAR_1 . METHOD_4 ( ) . getName ( ) ) ) + STRING_2 ) ) (  TYPE_2 . get ( ) . METHOD_5 ( ) . METHOD_6 ( VAR_1 . METHOD_7 ( ) ) )  TYPE_2 . get ( ) . METHOD_5 ( ) . METHOD_6 ( VAR_1 . METHOD_7 ( ) ) (  VAR_1 . METHOD_8 ( ) )  VAR_1 . METHOD_8 ( ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( VAR_3 , VAR_4 class , new java.lang.String [ ] { STRING_2 } , new java.lang.Object [ ] { VAR_5 [ 1 ] } , METHOD_3 ( ) , VAR_2 ) )  METHOD_2 ( VAR_3 , VAR_4 class , new java.lang.String [ ] { STRING_2 } , new java.lang.Object [ ] { VAR_5 [ 1 ] } , METHOD_3 ( ) , VAR_2 ) (  VAR_6 . METHOD_4 ( ) )  VAR_6 . METHOD_4 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.Network ) TYPE org.ovirt.engine.core.common.businessentities.Network ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return ( ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) . equals ( METHOD_5 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) ) && ( ! ( VAR_1 . getId ( ) . equals ( METHOD_6 ( ) . getId ( ) ) ) ) ) && ( METHOD_6 ( ) . METHOD_7 ( ) . equals ( VAR_1 . METHOD_7 ( ) ) ) ; )  return ( ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) . equals ( METHOD_5 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) ) && ( ! ( VAR_1 . getId ( ) . equals ( METHOD_6 ( ) . getId ( ) ) ) ) ) && ( METHOD_6 ( ) . METHOD_7 ( ) . equals ( VAR_1 . METHOD_7 ( ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( this . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( STRING_1 ) . METHOD_5 ( ) . METHOD_6 ( ) ) ) INIT = new TYPE_1 ( this . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( STRING_1 ) . METHOD_5 ( ) . METHOD_6 ( ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( VAR_1 . METHOD_7 ( ) , STRING_2 ) ) INIT = new TYPE_1 ( VAR_1 . METHOD_7 ( ) , STRING_2 ) ) VAR VAR (  VAR_3 = new TYPE_2 ( VAR_2 . METHOD_8 ( ) , VAR_1 , 1 ) )  VAR_3 = new TYPE_2 ( VAR_2 . METHOD_8 ( ) , VAR_1 , 1 ) (  TYPE_3 . METHOD_9 ( STRING_3 , VAR_3 . METHOD_10 ( ) ) )  TYPE_3 . METHOD_9 ( STRING_3 , VAR_3 . METHOD_10 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_1 ) ( resource ) ) ) INIT = ( ( TYPE_1 ) ( resource ) ) ) VAR VAR (  METHOD_2 ( ) )  METHOD_2 ( ) (  METHOD_3 ( INT_1 ) )  METHOD_3 ( INT_1 ) (  METHOD_4 ( INT_1 ) )  METHOD_4 ( INT_1 ) (  METHOD_5 ( INT_1 ) )  METHOD_5 ( INT_1 ) (  METHOD_6 ( INT_2 ) )  METHOD_6 ( INT_2 ) (  METHOD_7 ( METHOD_8 ( VAR_2 , VAR_3 class , new java.lang.String [ ] { STRING_1 , STRING_2 } , new java.lang.Object [ ] { VAR_4 , VAR_5 [ 1 ] } ) ) )  METHOD_7 ( METHOD_8 ( VAR_2 , VAR_3 class , new java.lang.String [ ] { STRING_1 , STRING_2 } , new java.lang.Object [ ] { VAR_4 , VAR_5 [ 1 ] } ) ) (  METHOD_9 ( VAR_1 . METHOD_10 ( new TYPE_2 ( ) ) ) )  METHOD_9 ( VAR_1 . METHOD_10 ( new TYPE_2 ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ) RETURN org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ( NAME VAR_3 ) NAME VAR_3 ( INIT = new org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ( ) ) VAR VAR (  VAR_3 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) )  VAR_3 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) (  VAR_3 . METHOD_3 ( VAR_2 ) )  VAR_3 . METHOD_3 ( VAR_2 ) (  VAR_3 . METHOD_4 ( VAR_1 . getName ( ) ) )  VAR_3 . METHOD_4 ( VAR_1 . getName ( ) ) (  VAR_3 . METHOD_5 ( true ) )  VAR_3 . METHOD_5 ( true ) (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME vds ) NAME vds ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  VAR_1 . METHOD_3 ( STRING_1 ) )  VAR_1 . METHOD_3 ( STRING_1 ) (  vds . METHOD_3 ( STRING_2 ) )  vds . METHOD_3 ( STRING_2 ) (  cluster . METHOD_4 ( VAR_2 ) )  cluster . METHOD_4 ( VAR_2 ) (  VAR_3 . METHOD_5 ( vds ) )  VAR_3 . METHOD_5 ( vds ) (  TYPE_1 . METHOD_6 ( vds . getStatus ( ) , VAR_4 ) )  TYPE_1 . METHOD_6 ( vds . getStatus ( ) , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1.ValidationResult ) RETURN TYPE_1.ValidationResult ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( vm . METHOD_2 ( ) ) || ( ( vm . getStatus ( ) ) == ( VAR_1 ) ) ) || ( METHOD_3 ( vm ) ) ) COND ( ( vm . METHOD_2 ( ) ) || ( ( vm . getStatus ( ) ) == ( VAR_1 ) ) ) || ( METHOD_3 ( vm ) ) ( THEN THEN (  return new TYPE_1 . ValidationResult ( VAR_2 ) ; )  return new TYPE_1 . ValidationResult ( VAR_2 ) ; ) THEN THEN ) IF IF (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) ) ) )  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) ) ) (  METHOD_3 ( cmd , false ) )  METHOD_3 ( cmd , false ) (  TYPE_3 . METHOD_4 ( cmd . validate ( ) ) )  TYPE_3 . METHOD_4 ( cmd . validate ( ) ) (  TYPE_3 . METHOD_5 ( cmd . getReturnValue ( ) . METHOD_6 ( ) . METHOD_7 ( TYPE_4 . toString ( ) ) ) )  TYPE_3 . METHOD_5 ( cmd . getReturnValue ( ) . METHOD_6 ( ) . METHOD_7 ( TYPE_4 . toString ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_2 ( ) )  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_2 ( ) (  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( command ) . METHOD_3 ( ) )  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( command ) . METHOD_3 ( ) (  org.mockito.Mockito.when ( VAR_1 . get ( VAR_3 ) ) . thenReturn ( METHOD_4 ( VAR_3 ) ) )  org.mockito.Mockito.when ( VAR_1 . get ( VAR_3 ) ) . thenReturn ( METHOD_4 ( VAR_3 ) ) (  org.mockito.Mockito.when ( VAR_1 . get ( VAR_4 ) ) . thenReturn ( METHOD_5 ( VAR_4 ) ) )  org.mockito.Mockito.when ( VAR_1 . get ( VAR_4 ) ) . thenReturn ( METHOD_5 ( VAR_4 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME parameters ) NAME parameters ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_3 . METHOD_2 ( VAR_1 , parameters . METHOD_3 ( ) . getId ( ) ) ) INIT = TYPE_3 . METHOD_2 ( VAR_1 , parameters . METHOD_3 ( ) . getId ( ) ) ) VAR VAR (  VAR_1 . METHOD_4 ( ) )  VAR_1 . METHOD_4 ( ) (  VAR_1 . METHOD_5 ( VAR_2 ) )  VAR_1 . METHOD_5 ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( INT_1 , 2 , 2 , 2 , 2 ) ) INIT = METHOD_2 ( INT_1 , 2 , 2 , 2 , 2 ) ) VAR VAR (  TYPE_2 . assertEquals ( INT_1 , VAR_1 . size ( ) ) )  TYPE_2 . assertEquals ( INT_1 , VAR_1 . size ( ) ) (  TYPE_2 . METHOD_3 ( VAR_1 . METHOD_4 ( VAR_2 . METHOD_5 ( nic , null ) ) ) )  TYPE_2 . METHOD_3 ( VAR_1 . METHOD_4 ( VAR_2 . METHOD_5 ( nic , null ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME TYPE_2 ) NAME TYPE_2 ( INIT = METHOD_2 ( STRING_1 , VAR_1 , VAR_2 , INT_1 , 0 ) ) INIT = METHOD_2 ( STRING_1 , VAR_1 , VAR_2 , INT_1 , 0 ) ) VAR VAR (  org.mockito.Mockito.when ( command . METHOD_3 ( ) ) . thenReturn ( TYPE_2 ) )  org.mockito.Mockito.when ( command . METHOD_3 ( ) ) . thenReturn ( TYPE_2 ) (  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( VAR_4 ) . get ( TYPE_3 . METHOD_4 ( ) ) )  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( VAR_4 ) . get ( TYPE_3 . METHOD_4 ( ) ) ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ) TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME domain ) NAME domain ( INIT = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) ) VAR VAR (  domain . METHOD_5 ( VAR_5 ) )  domain . METHOD_5 ( VAR_5 ) (  domain . METHOD_6 ( VAR_6 ) )  domain . METHOD_6 ( VAR_6 ) (  METHOD_7 ( TYPE_2 . getId ( ) , domain ) )  METHOD_7 ( TYPE_2 . getId ( ) , domain ) (  TYPE_4 . METHOD_8 ( command , VAR_7 ) )  TYPE_4 . METHOD_8 ( command , VAR_7 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<?extendsTYPE_2> ) TYPE TYPE_1<?extendsTYPE_2> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME sender ) NAME sender ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME args ) NAME args ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 ) INIT = VAR_3 ) VAR VAR ( IF IF ( COND STRING_1 . equals ( VAR_2 ) ) COND STRING_1 . equals ( VAR_2 ) ( THEN THEN ( IF IF ( COND ( VAR_4 . METHOD_2 ( ) ) != null ) COND ( VAR_4 . METHOD_2 ( ) ) != null ( THEN THEN (  METHOD_3 ( ( ( java.util.List < TYPE_3 > ) ( VAR_4 . METHOD_2 ( ) ) ) ) )  METHOD_3 ( ( ( java.util.List < TYPE_3 > ) ( VAR_4 . METHOD_2 ( ) ) ) ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME command ) NAME command ( INIT = METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ) INIT = METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ) VAR VAR (  org.mockito.Mockito.doReturn ( false ) . when ( command ) . METHOD_3 ( TYPE_2 . METHOD_4 ( ) ) )  org.mockito.Mockito.doReturn ( false ) . when ( command ) . METHOD_3 ( TYPE_2 . METHOD_4 ( ) ) (  TYPE_3 . METHOD_5 ( command . METHOD_6 ( ) ) )  TYPE_3 . METHOD_5 ( command . METHOD_6 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME vds ) NAME vds ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( new TYPE_2 ( ) , vds ) ) INIT = METHOD_2 ( new TYPE_2 ( ) , vds ) ) VAR VAR ( IF IF ( COND VAR_2 . METHOD_3 ( ) ) COND VAR_2 . METHOD_3 ( ) ( THEN THEN (  VAR_2 . METHOD_4 ( STRING_1 , METHOD_5 ( ) , VAR_1 ) )  VAR_2 . METHOD_4 ( STRING_1 , METHOD_5 ( ) , VAR_1 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ( FINALLY FINALLY ( IF IF ( COND vds != null ) COND vds != null ( THEN THEN (  METHOD_6 ( vds . METHOD_7 ( ) ) )  METHOD_6 ( vds . METHOD_7 ( ) ) (  VAR_3 . METHOD_8 ( vds ) )  VAR_3 . METHOD_8 ( vds ) (  TYPE_3 . getInstance ( ) . METHOD_9 ( ) . METHOD_10 ( vds . getId ( ) ) )  TYPE_3 . getInstance ( ) . METHOD_9 ( ) . METHOD_10 ( vds . getId ( ) ) ) THEN THEN ) IF IF ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.ArrayList < TYPE_1 > ( this . METHOD_2 ( ) . METHOD_3 ( ) ) ) INIT = new java.util.ArrayList < TYPE_1 > ( this . METHOD_2 ( ) . METHOD_3 ( ) ) ) VAR VAR (  VAR_2 . add ( 1 , METHOD_2 ( ) ) )  VAR_2 . add ( 1 , METHOD_2 ( ) ) (  this . METHOD_2 ( ) . setItems ( VAR_2 ) )  this . METHOD_2 ( ) . setItems ( VAR_2 ) (  this . METHOD_2 ( ) . setSelectedItem ( METHOD_2 ( ) ) )  this . METHOD_2 ( ) . setSelectedItem ( METHOD_2 ( ) ) ) THEN THEN ) IF IF (  super . METHOD_1 ( VAR_1 ) )  super . METHOD_1 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.Object> ) TYPE java.util.Map<java.lang.String,java.lang.Object> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.network.Network ) TYPE org.ovirt.engine.core.common.businessentities.network.Network ( NAME network ) NAME network ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_2 != null ) && ( VAR_2 . METHOD_2 ( ) ) ) COND ( VAR_2 != null ) && ( VAR_2 . METHOD_2 ( ) ) ( THEN THEN (  VAR_1 . put ( VAR_3 , ( network == null ? VAR_4 . Collections < java.lang.String > METHOD_3 ( ) : TYPE_2 . METHOD_4 ( network . getName ( ) ) ) ) )  VAR_1 . put ( VAR_3 , ( network == null ? VAR_4 . Collections < java.lang.String > METHOD_3 ( ) : TYPE_2 . METHOD_4 ( network . getName ( ) ) ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_1 ) ( target ) ) ) INIT = ( ( TYPE_1 ) ( target ) ) ) VAR VAR ( IF IF ( COND returnValue != null ) COND returnValue != null ( THEN THEN ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( returnValue ) ) ) INIT = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( returnValue ) ) ) VAR VAR (  VAR_3 = VAR_2 )  VAR_3 = VAR_2 ) THEN THEN ( ELSE ELSE (  VAR_4 = true )  VAR_4 = true ) ELSE ELSE ) IF IF (  VAR_1 . METHOD_1 ( ) )  VAR_1 . METHOD_1 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  model . METHOD_2 ( null ) )  model . METHOD_2 ( null ) (  model . METHOD_3 ( new TYPE_2 . Network ( ) ) )  model . METHOD_3 ( new TYPE_2 . Network ( ) ) (  METHOD_4 ( METHOD_5 ( ) ) )  METHOD_4 ( METHOD_5 ( ) ) (  VAR_1 . METHOD_6 ( ) )  VAR_1 . METHOD_6 ( ) ( TRY TRY ( BLOCK BLOCK (  VAR_2 . add ( model ) )  VAR_2 . add ( model ) (  METHOD_7 ( STRING_1 ) )  METHOD_7 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( BLOCK BLOCK (  METHOD_8 ( VAR_3 , STRING_2 , STRING_3 , STRING_4 ) )  METHOD_8 ( VAR_3 , STRING_2 , STRING_3 , STRING_4 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME entity ) NAME entity ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.Map<java.lang.String,TYPE_1> ) TYPE java.util.Map<java.lang.String,TYPE_1> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_4 < TYPE_3 < TYPE_1 > > get ( VAR_1 , VAR_5 . Collections < TYPE_1 > METHOD_2 ( ) ) ) IN VAR_4 < TYPE_3 < TYPE_1 > > get ( VAR_1 , VAR_5 . Collections < TYPE_1 > METHOD_2 ( ) ) ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_2 . METHOD_3 ( VAR_6 < java.lang.String > get ( VAR_7 ) ) ) ) COND ! ( VAR_2 . METHOD_3 ( VAR_6 < java.lang.String > get ( VAR_7 ) ) ) ( THEN THEN (  VAR_2 . put ( VAR_3 . get ( VAR_7 ) , VAR_3 ) )  VAR_2 . put ( VAR_3 . get ( VAR_7 ) , VAR_3 ) (  TYPE_4 . METHOD_1 ( VAR_3 , VAR_8 , VAR_2 ) )  TYPE_4 . METHOD_1 ( VAR_3 , VAR_8 , VAR_2 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( STRING_1 , VAR_2 , STRING_2 , STRING_3 ) ) INIT = METHOD_2 ( STRING_1 , VAR_2 , STRING_2 , STRING_3 ) ) VAR VAR (  parameters . METHOD_3 ( VAR_1 ) )  parameters . METHOD_3 ( VAR_1 ) (  parameters . METHOD_4 ( VAR_3 ) )  parameters . METHOD_4 ( VAR_3 ) (  org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_5 ( ) )  org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_5 ( ) (  org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_6 ( VAR_1 ) )  org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_6 ( VAR_1 ) (  TYPE_2 . METHOD_7 ( command , VAR_4 ) )  TYPE_2 . METHOD_7 ( command , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( IF IF ( COND TYPE_1 . METHOD_2 ( ) ) COND TYPE_1 . METHOD_2 ( ) ( THEN THEN (  METHOD_3 ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_4 ( ) . get ( TYPE_1 . METHOD_5 ( ) ) ) )  METHOD_3 ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_4 ( ) . get ( TYPE_1 . METHOD_5 ( ) ) ) ( IF IF ( COND ( TYPE_1 . getVm ( ) ) != null ) COND ( TYPE_1 . getVm ( ) ) != null ( THEN THEN (  TYPE_2 . METHOD_6 ( TYPE_1 . METHOD_5 ( ) ) )  TYPE_2 . METHOD_6 ( TYPE_1 . METHOD_5 ( ) ) (  METHOD_7 ( ) )  METHOD_7 ( ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  TYPE_1 . METHOD_8 ( true ) )  TYPE_1 . METHOD_8 ( true ) ) BLOCK BLOCK ( FINALLY FINALLY (  TYPE_1 . METHOD_9 ( ) )  TYPE_1 . METHOD_9 ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( IF IF ( COND VAR_3 . METHOD_2 ( ) . equals ( VAR_2 . METHOD_3 ( ) ) ) COND VAR_3 . METHOD_2 ( ) . equals ( VAR_2 . METHOD_3 ( ) ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME VAR_4 ) NAME VAR_4 ( IN METHOD_4 ( VAR_2 . getId ( ) ) ) IN METHOD_4 ( VAR_2 . getId ( ) ) ( BLOCK BLOCK ( IF IF ( COND VAR_3 . METHOD_2 ( ) . equals ( VAR_4 . METHOD_5 ( ) ) ) COND VAR_3 . METHOD_2 ( ) . equals ( VAR_4 . METHOD_5 ( ) ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 . METHOD_2 ( ) ) == null ) COND ( VAR_1 . METHOD_2 ( ) ) == null ( THEN THEN ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_3 ( VAR_1 ) ) INIT = TYPE_2 . METHOD_3 ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN (  VAR_1 . METHOD_4 ( VAR_2 . METHOD_2 ( ) ) )  VAR_1 . METHOD_4 ( VAR_2 . METHOD_2 ( ) ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME VAR_1 ) NAME VAR_1 ( INIT = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ) INIT = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ) VAR VAR ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_3 = ( ( java.util.ArrayList < java.lang.Integer > ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) )  VAR_3 = ( ( java.util.ArrayList < java.lang.Integer > ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD (  VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { VAR_3 = ( ( java.util.ArrayList < java.lang.Integer > ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ; } } )  VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { VAR_3 = ( ( java.util.ArrayList < java.lang.Integer > ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ; } } (  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_4 , new TYPE_2 ( VAR_5 ) , VAR_1 ) )  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_4 , new TYPE_2 ( VAR_5 ) , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Version ) TYPE org.ovirt.engine.core.compat.Version ( NAME version ) NAME version ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.HashMap<java.lang.String,java.lang.String> ) TYPE java.util.HashMap<java.lang.String,java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.HashMap < > ( ) ) INIT = new java.util.HashMap < > ( ) ) VAR VAR ( VAR VAR ( TYPE java.util.HashMap<java.lang.String,java.lang.String> ) TYPE java.util.HashMap<java.lang.String,java.lang.String> ( NAME VAR_3 ) NAME VAR_3 ( INIT = new java.util.HashMap < > ( ) ) INIT = new java.util.HashMap < > ( ) ) VAR VAR (  METHOD_2 ( version , VAR_1 , VAR_3 , VAR_2 ) )  METHOD_2 ( version , VAR_1 , VAR_3 , VAR_2 ) (  return new TYPE_1 ( METHOD_3 ( VAR_3 ) , METHOD_3 ( VAR_2 ) ) ; )  return new TYPE_1 ( METHOD_3 ( VAR_3 ) , METHOD_3 ( VAR_2 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  validator = new TYPE_1 ( ) )  validator = new TYPE_1 ( ) (  validator = org.mockito.Mockito . METHOD_2 ( validator ) )  validator = org.mockito.Mockito . METHOD_2 ( validator ) (  org.mockito.Mockito . METHOD_3 ( validator . METHOD_4 ( org.mockito.Mockito . any ( VAR_1 . VDS class ) ) ) . METHOD_5 ( VAR_2 ) )  org.mockito.Mockito . METHOD_3 ( validator . METHOD_4 ( org.mockito.Mockito . any ( VAR_1 . VDS class ) ) ) . METHOD_5 ( VAR_2 ) (  org.mockito.Mockito . METHOD_3 ( validator . METHOD_6 ( ) ) . METHOD_5 ( VAR_3 ) )  org.mockito.Mockito . METHOD_3 ( validator . METHOD_6 ( ) ) . METHOD_5 ( VAR_3 ) (  TYPE_2 . METHOD_7 ( VAR_4 ) )  TYPE_2 . METHOD_7 ( VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<java.lang.String> ) TYPE java.util.ArrayList<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( INT_1 , null ) ) INIT = TYPE_1 . METHOD_2 ( INT_1 , null ) ) VAR VAR (  TYPE_2 . METHOD_3 ( ( ( VAR_1 . size ( ) ) == 2 ) ) )  TYPE_2 . METHOD_3 ( ( ( VAR_1 . size ( ) ) == 2 ) ) ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( IN TYPE_3 . METHOD_4 ( STRING_1 ) ) IN TYPE_3 . METHOD_4 ( STRING_1 ) ( BLOCK BLOCK (  TYPE_2 . METHOD_3 ( VAR_1 . METHOD_5 ( VAR_2 ) ) )  TYPE_2 . METHOD_3 ( VAR_1 . METHOD_5 ( VAR_2 ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<?extendsTYPE_2> ) TYPE TYPE_1<?extendsTYPE_2> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME sender ) NAME sender ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME args ) NAME args ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( disk . getVm ( ) ) == null ) COND ( disk . getVm ( ) ) == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_3 . equals ( ( ( org.ovirt.engine.ui.uicommonweb.models.EntityModel ) ( sender ) ) . getEntity ( ) ) ) INIT = TYPE_3 . equals ( ( ( org.ovirt.engine.ui.uicommonweb.models.EntityModel ) ( sender ) ) . getEntity ( ) ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Version ) TYPE org.ovirt.engine.core.compat.Version ( NAME VAR_3 ) NAME VAR_3 ( INIT = disk . getVm ( ) . METHOD_2 ( ) ) INIT = disk . getVm ( ) . METHOD_2 ( ) ) VAR VAR (  VAR_4 . METHOD_3 ( ( ( ( VAR_3 . METHOD_4 ( VAR_5 ) ) >= 0 ) && ( ! VAR_2 ) ) ) )  VAR_4 . METHOD_3 ( ( ( ( VAR_3 . METHOD_4 ( VAR_5 ) ) >= 0 ) && ( ! VAR_2 ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.Network ) TYPE org.ovirt.engine.core.common.businessentities.Network ( NAME VAR_1 ) NAME VAR_1 ( INIT = new org.ovirt.engine.core.common.businessentities . Network ( ) ) INIT = new org.ovirt.engine.core.common.businessentities . Network ( ) ) VAR VAR (  VAR_1 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) )  VAR_1 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) (  VAR_1 . METHOD_3 ( VAR_2 < java.lang.String > METHOD_4 ( VAR_3 ) ) )  VAR_1 . METHOD_3 ( VAR_2 < java.lang.String > METHOD_4 ( VAR_3 ) ) (  VAR_1 . METHOD_5 ( VAR_4 ) )  VAR_1 . METHOD_5 ( VAR_4 ) (  VAR_1 . METHOD_6 ( TYPE_1 . METHOD_7 ( ) . getId ( ) ) )  VAR_1 . METHOD_6 ( TYPE_1 . METHOD_7 ( ) . getId ( ) ) (  VAR_1 . METHOD_8 ( true ) )  VAR_1 . METHOD_8 ( true ) (  TYPE_1 . METHOD_9 ( ) . METHOD_10 ( VAR_1 ) )  TYPE_1 . METHOD_9 ( ) . METHOD_10 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.util.Map<java.lang.String,java.lang.Object> ) RETURN java.util.Map<java.lang.String,java.lang.Object> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return TYPE_2 . METHOD_2 ( VAR_1 ) . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( TYPE_3 . METHOD_6 ( TYPE_4 : : METHOD_7 , )  return TYPE_2 . METHOD_2 ( VAR_1 ) . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( TYPE_3 . METHOD_6 ( TYPE_4 : : METHOD_7 , (  ( e ) - > java.lang.String.valueOf ( e . getValue ( ) ) ) ) )  ( e ) - > java.lang.String.valueOf ( e . getValue ( ) ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.uicommonweb.UICommand ) TYPE org.ovirt.engine.ui.uicommonweb.UICommand ( NAME command ) NAME command ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND TYPE_1 . METHOD_2 ( command . getName ( ) , STRING_1 ) ) COND TYPE_1 . METHOD_2 ( command . getName ( ) , STRING_1 ) ( THEN THEN (  METHOD_3 ( ) )  METHOD_3 ( ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND TYPE_1 . METHOD_2 ( command . getName ( ) , STRING_2 ) ) COND TYPE_1 . METHOD_2 ( command . getName ( ) , STRING_2 ) ( THEN THEN (  METHOD_4 ( ) )  METHOD_4 ( ) ) THEN THEN ( ELSE ELSE (  super . METHOD_1 ( command ) )  super . METHOD_1 ( command ) ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND TYPE_1 . getParameters ( ) . METHOD_2 ( ) ) COND TYPE_1 . getParameters ( ) . METHOD_2 ( ) ( THEN THEN (  METHOD_3 ( ) )  METHOD_3 ( ) ) THEN THEN ( ELSE ELSE (  org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_4 ( ) . METHOD_5 ( new TYPE_2 ( TYPE_1 . getParameters ( ) . METHOD_6 ( ) , TYPE_1 . getParameters ( ) . METHOD_7 ( ) ) ) )  org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_4 ( ) . METHOD_5 ( new TYPE_2 ( TYPE_1 . getParameters ( ) . METHOD_6 ( ) , TYPE_1 . getParameters ( ) . METHOD_7 ( ) ) ) (  TYPE_1 . METHOD_8 ( ) )  TYPE_1 . METHOD_8 ( ) ) ELSE ELSE ) IF IF (  TYPE_1 . METHOD_9 ( true ) )  TYPE_1 . METHOD_9 ( true ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . assertEquals ( VAR_1 . METHOD_2 ( STRING_1 , STRING_2 , false ) , STRING_3 ) )  TYPE_1 . assertEquals ( VAR_1 . METHOD_2 ( STRING_1 , STRING_2 , false ) , STRING_3 ) (  TYPE_1 . assertEquals ( VAR_1 . METHOD_2 ( STRING_4 , STRING_5 , false ) , STRING_6 ) )  TYPE_1 . assertEquals ( VAR_1 . METHOD_2 ( STRING_4 , STRING_5 , false ) , STRING_6 ) (  TYPE_1 . assertEquals ( VAR_1 . METHOD_2 ( STRING_2 , STRING_2 , false ) , STRING_7 ) )  TYPE_1 . assertEquals ( VAR_1 . METHOD_2 ( STRING_2 , STRING_2 , false ) , STRING_7 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( null ) ) INIT = METHOD_2 ( null ) ) VAR VAR (  VAR_2 . add ( VAR_3 ) )  VAR_2 . add ( VAR_3 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_3 ( VAR_5 ) ) INIT = new TYPE_3 ( VAR_5 ) ) VAR VAR (  METHOD_3 ( 1 , VAR_4 ) )  METHOD_3 ( 1 , VAR_4 ) (  METHOD_4 ( 1 ) )  METHOD_4 ( 1 ) (  VAR_6 . METHOD_5 ( ) )  VAR_6 . METHOD_5 ( ) (  VAR_7 . METHOD_6 ( VAR_1 ) )  VAR_7 . METHOD_6 ( VAR_1 ) ( TRY TRY ( BLOCK BLOCK (  METHOD_7 ( ) )  METHOD_7 ( ) (  METHOD_8 ( STRING_1 ) )  METHOD_8 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_8 ) NAME VAR_8 ( BLOCK BLOCK (  METHOD_9 ( VAR_8 , VAR_9 , VAR_4 ) )  METHOD_9 ( VAR_8 , VAR_9 , VAR_4 ) ) BLOCK BLOCK ) CATCH CATCH ( FINALLY FINALLY (  VAR_2 . METHOD_10 ( ) )  VAR_2 . METHOD_10 ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<TYPE_2,?> ) TYPE TYPE_1<TYPE_2,?> ( NAME column ) NAME column ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND METHOD_2 ( column ) ) COND METHOD_2 ( column ) ( THEN THEN (  VAR_2 . put ( column , VAR_1 ) )  VAR_2 . put ( column , VAR_1 ) ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_3 ( column ) ) INIT = METHOD_3 ( column ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( INIT = ( VAR_3 != null ) ? VAR_3 : VAR_5 . get ( column ) ) INIT = ( VAR_3 != null ) ? VAR_3 : VAR_5 . get ( column ) ) VAR VAR (  METHOD_4 ( column , VAR_1 ) )  METHOD_4 ( column , VAR_1 ) (  METHOD_5 ( column , null , VAR_1 , VAR_4 , false ) )  METHOD_5 ( column , null , VAR_1 , VAR_4 , false ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME map ) NAME map ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME entity ) NAME entity ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME template ) NAME template ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<org.ovirt.engine.core.compat.Guid,TYPE_4> ) TYPE java.util.Map<org.ovirt.engine.core.compat.Guid,TYPE_4> ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_1 ( ) ) INIT = VAR_2 . METHOD_1 ( ) ) VAR VAR (  return VAR_2 . map ( entity , ( VAR_1 . METHOD_2 ( entity . METHOD_3 ( ) ) ? VAR_1 . get ( entity . METHOD_3 ( ) ) : null ) ) ; )  return VAR_2 . map ( entity , ( VAR_1 . METHOD_2 ( entity . METHOD_3 ( ) ) ? VAR_1 . get ( entity . METHOD_3 ( ) ) : null ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( returnValue ) ) )  VAR_1 = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( returnValue ) ) (  METHOD_3 ( ) )  METHOD_3 ( ) ) BLOCK BLOCK ) METHOD METHOD (  TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( returnValue ) ) ; METHOD_3 ( ) ; } } , VAR_2 ) ) )  TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( returnValue ) ) ; METHOD_3 ( ) ; } } , VAR_2 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_1 ) ( model ) ) ) INIT = ( ( TYPE_1 ) ( model ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.network.Network > ) ( result ) ) ) INIT = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.network.Network > ) ( result ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_1 ( VAR_2 ) ) INIT = METHOD_1 ( VAR_2 ) ) VAR VAR (  VAR_1 . METHOD_2 ( VAR_3 ) )  VAR_1 . METHOD_2 ( VAR_3 ) (  VAR_3 . setTitle ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_3 ( ) ) )  VAR_3 . setTitle ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_3 ( ) ) (  VAR_3 . METHOD_4 ( VAR_4 ) )  VAR_3 . METHOD_4 ( VAR_4 ) (  VAR_3 . METHOD_5 ( STRING_1 ) )  VAR_3 . METHOD_5 ( STRING_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.uicommonweb.UICommand ) TYPE org.ovirt.engine.ui.uicommonweb.UICommand ( NAME command ) NAME command ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  super . METHOD_1 ( command ) )  super . METHOD_1 ( command ) ( IF IF ( COND command == ( METHOD_2 ( ) ) ) COND command == ( METHOD_2 ( ) ) ( THEN THEN (  METHOD_3 ( ) )  METHOD_3 ( ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND TYPE_1 . METHOD_4 ( command . getName ( ) , STRING_1 ) ) COND TYPE_1 . METHOD_4 ( command . getName ( ) , STRING_1 ) ( THEN THEN (  METHOD_5 ( ) )  METHOD_5 ( ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND command == ( METHOD_6 ( ) ) ) COND command == ( METHOD_6 ( ) ) ( THEN THEN (  METHOD_7 ( ) )  METHOD_7 ( ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND command . getName ( ) . equals ( STRING_2 ) ) COND command . getName ( ) . equals ( STRING_2 ) ( THEN THEN (  METHOD_8 ( ) )  METHOD_8 ( ) ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_1 . setId ( TYPE_2 . METHOD_2 ( ) ) )  VAR_1 . setId ( TYPE_2 . METHOD_2 ( ) ) (  VAR_1 . METHOD_3 ( VAR_2 ) )  VAR_1 . METHOD_3 ( VAR_2 ) (  VAR_1 . METHOD_4 ( STRING_1 ) )  VAR_1 . METHOD_4 ( STRING_1 ) (  VAR_1 . METHOD_5 ( STRING_1 ) )  VAR_1 . METHOD_5 ( STRING_1 ) (  VAR_1 . METHOD_6 ( STRING_1 ) )  VAR_1 . METHOD_6 ( STRING_1 ) (  VAR_1 . METHOD_7 ( new TYPE_3 ( ) ) )  VAR_1 . METHOD_7 ( new TYPE_3 ( ) ) (  VAR_1 . METHOD_8 ( TYPE_2 . getParameters ( ) . getVm ( ) . METHOD_9 ( ) ) )  VAR_1 . METHOD_8 ( TYPE_2 . getParameters ( ) . getVm ( ) . METHOD_9 ( ) ) (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( METHOD_3 ( ) ) )  METHOD_2 ( METHOD_3 ( ) ) ( VAR VAR ( TYPE TYPE_1.Network ) TYPE TYPE_1.Network ( NAME model ) NAME model ( INIT = new TYPE_1 . Network ( ) ) INIT = new TYPE_1 . Network ( ) ) VAR VAR (  model . METHOD_4 ( VAR_1 [ 0 ] ) )  model . METHOD_4 ( VAR_1 [ 0 ] ) ( TRY TRY ( BLOCK BLOCK (  VAR_2 . add ( model ) )  VAR_2 . add ( model ) (  METHOD_5 ( STRING_1 ) )  METHOD_5 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( BLOCK BLOCK (  METHOD_6 ( VAR_3 , STRING_2 , STRING_3 , STRING_4 ) )  METHOD_6 ( VAR_3 , STRING_2 , STRING_3 , STRING_4 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME constants ) NAME constants ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_4 . METHOD_2 ( new TYPE_6 ( VAR_1 , constants ) , VAR_5 , VAR_6 , VAR_4 . METHOD_3 ( ) ) )  VAR_4 . METHOD_2 ( new TYPE_6 ( VAR_1 , constants ) , VAR_5 , VAR_6 , VAR_4 . METHOD_3 ( ) ) (  VAR_4 . METHOD_2 ( new TYPE_7 ( VAR_2 , constants ) , VAR_7 , VAR_6 , VAR_4 . METHOD_3 ( ) ) )  VAR_4 . METHOD_2 ( new TYPE_7 ( VAR_2 , constants ) , VAR_7 , VAR_6 , VAR_4 . METHOD_3 ( ) ) (  VAR_4 . METHOD_2 ( new TYPE_8 ( VAR_3 , constants ) , VAR_8 , VAR_6 , VAR_4 . METHOD_3 ( ) ) )  VAR_4 . METHOD_2 ( new TYPE_8 ( VAR_3 , constants ) , VAR_8 , VAR_6 , VAR_4 . METHOD_3 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 < java.lang.Integer > METHOD_2 ( VAR_5 ) ) INIT = VAR_4 < java.lang.Integer > METHOD_2 ( VAR_5 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_6 ) NAME VAR_6 ( INIT = METHOD_3 ( ) . addValue ( STRING_1 , id ) . addValue ( STRING_2 , VAR_1 ) . addValue ( STRING_3 , VAR_2 ) . addValue ( STRING_4 , VAR_3 ) ) INIT = METHOD_3 ( ) . addValue ( STRING_1 , id ) . addValue ( STRING_2 , VAR_1 ) . addValue ( STRING_3 , VAR_2 ) . addValue ( STRING_4 , VAR_3 ) ) VAR VAR (  return METHOD_4 ( ) . METHOD_5 ( STRING_5 , VAR_7 . instance , VAR_6 ) ; )  return METHOD_4 ( ) . METHOD_5 ( STRING_5 , VAR_7 . instance , VAR_6 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<TYPE_2> ) RETURN TYPE_1<TYPE_2> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Version ) TYPE org.ovirt.engine.core.compat.Version ( NAME version ) NAME version ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( TYPE_3 . METHOD_2 ( version ) ) ) COND ! ( TYPE_3 . METHOD_2 ( version ) ) ( THEN THEN (  return TYPE_4 . METHOD_3 ( ) ; )  return TYPE_4 . METHOD_3 ( ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_5<TYPE_2,java.util.Map<java.lang.String,java.lang.String>> ) TYPE TYPE_5<TYPE_2,java.util.Map<java.lang.String,java.lang.String>> ( NAME map ) NAME map ( INIT = VAR_1 . get ( version ) ) INIT = VAR_1 . get ( version ) ) VAR VAR ( IF IF ( COND map . isEmpty ( ) ) COND map . isEmpty ( ) ( THEN THEN (  return TYPE_4 . METHOD_3 ( ) ; )  return TYPE_4 . METHOD_3 ( ) ; ) THEN THEN ( ELSE ELSE (  return TYPE_4 . METHOD_4 ( map . METHOD_5 ( ) ) ; )  return TYPE_4 . METHOD_4 ( map . METHOD_5 ( ) ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( METHOD_3 ( ) . getSelectedItem ( ) ) == ( VAR_3 ) ) INIT = ( METHOD_3 ( ) . getSelectedItem ( ) ) == ( VAR_3 ) ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_4 ) NAME VAR_4 ( INIT = ( METHOD_4 ( ) . getSelectedItem ( ) ) == ( VAR_5 ) ) INIT = ( METHOD_4 ( ) . getSelectedItem ( ) ) == ( VAR_5 ) ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_6 ) NAME VAR_6 ( INIT = ( VAR_7 . METHOD_5 ( METHOD_6 ( ) ) ) <= 0 ) INIT = ( VAR_7 . METHOD_5 ( METHOD_6 ( ) ) ) <= 0 ) VAR VAR (  return ( ( VAR_1 && VAR_2 ) && VAR_4 ) && VAR_6 ; )  return ( ( VAR_1 && VAR_2 ) && VAR_4 ) && VAR_6 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.AddVmCommand<TYPE_2> ) TYPE TYPE_1.AddVmCommand<TYPE_2> ( NAME cmd ) NAME cmd ( INIT = METHOD_2 ( METHOD_3 ( 1 , 1 ) ) ) INIT = METHOD_2 ( METHOD_3 ( 1 , 1 ) ) ) VAR VAR (  cmd . getParameters ( ) . getVm ( ) . METHOD_4 ( STRING_1 ) )  cmd . getParameters ( ) . getVm ( ) . METHOD_4 ( STRING_1 ) (  TYPE_3 . METHOD_5 ( STRING_2 , cmd . METHOD_6 ( ) ) )  TYPE_3 . METHOD_5 ( STRING_2 , cmd . METHOD_6 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( TYPE_1 . getVdsGroup ( ) ) != null ) COND ( TYPE_1 . getVdsGroup ( ) ) != null ( THEN THEN (  METHOD_2 ( ( ( TYPE_1 . getVdsGroup ( ) . METHOD_3 ( ) ) != null ? TYPE_1 . getVdsGroup ( ) . METHOD_3 ( ) . getValue ( ) : VAR_1 ) ) )  METHOD_2 ( ( ( TYPE_1 . getVdsGroup ( ) . METHOD_3 ( ) ) != null ? TYPE_1 . getVdsGroup ( ) . METHOD_3 ( ) . getValue ( ) : VAR_1 ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( VAR_2 , false ) )  VAR_1 . METHOD_2 ( VAR_2 , false ) (  org.mockito.Mockito.when ( cluster . METHOD_3 ( ) ) . thenReturn ( true ) )  org.mockito.Mockito.when ( cluster . METHOD_3 ( ) ) . thenReturn ( true ) (  org.mockito.Mockito.when ( cluster . METHOD_4 ( ) ) . thenReturn ( false ) )  org.mockito.Mockito.when ( cluster . METHOD_4 ( ) ) . thenReturn ( false ) (  validator = new TYPE_1 ( VAR_3 , VAR_4 , cluster , VAR_5 ) )  validator = new TYPE_1 ( VAR_3 , VAR_4 , cluster , VAR_5 ) (  TYPE_2 . METHOD_5 ( validator . METHOD_6 ( ) , TYPE_3 . METHOD_7 ( ) ) )  TYPE_2 . METHOD_5 ( validator . METHOD_6 ( ) , TYPE_3 . METHOD_7 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ( NAME iface ) NAME iface ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  iface . METHOD_3 ( null ) )  iface . METHOD_3 ( null ) (  METHOD_4 ( iface , false , iface . METHOD_5 ( ) , iface . METHOD_6 ( ) , iface . METHOD_7 ( ) , iface . METHOD_8 ( ) , METHOD_9 ( ) ) )  METHOD_4 ( iface , false , iface . METHOD_5 ( ) , iface . METHOD_6 ( ) , iface . METHOD_7 ( ) , iface . METHOD_8 ( ) , METHOD_9 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  org.mockito.Mockito.when ( VAR_5 . METHOD_2 ( VAR_1 ) ) . thenReturn ( VAR_2 ) )  org.mockito.Mockito.when ( VAR_5 . METHOD_2 ( VAR_1 ) ) . thenReturn ( VAR_2 ) (  org.mockito.Mockito.when ( VAR_5 . METHOD_3 ( VAR_1 ) ) . thenReturn ( VAR_3 ) )  org.mockito.Mockito.when ( VAR_5 . METHOD_3 ( VAR_1 ) ) . thenReturn ( VAR_3 ) (  org.mockito.Mockito.when ( VAR_6 . METHOD_4 ( VAR_4 ) ) . thenReturn ( VAR_7 ) )  org.mockito.Mockito.when ( VAR_6 . METHOD_4 ( VAR_4 ) ) . thenReturn ( VAR_7 ) (  org.mockito.Mockito.when ( VAR_7 . METHOD_5 ( TYPE_1 . METHOD_6 ( ) ) ) . thenReturn ( VAR_8 ) )  org.mockito.Mockito.when ( VAR_7 . METHOD_5 ( TYPE_1 . METHOD_6 ( ) ) ) . thenReturn ( VAR_8 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) (  resource . METHOD_2 ( ) . VAR_1 = VAR_1 )  resource . METHOD_2 ( ) . VAR_1 = VAR_1 (  resource . METHOD_2 ( ) . VAR_2 = VAR_2 )  resource . METHOD_2 ( ) . VAR_2 = VAR_2 (  resource . METHOD_2 ( ) . VAR_3 = VAR_4 )  resource . METHOD_2 ( ) . VAR_3 = VAR_4 (  resource . METHOD_2 ( ) . VAR_5 = VAR_5 )  resource . METHOD_2 ( ) . VAR_5 = VAR_5 (  resource . METHOD_2 ( ) . VAR_6 = VAR_6 )  resource . METHOD_2 ( ) . VAR_6 = VAR_6 (  TYPE_1 . METHOD_3 ( ) )  TYPE_1 . METHOD_3 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_4 ) NAME METHOD_4 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ) BLOCK BLOCK ) METHOD METHOD (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_2 ( VAR_1 , new java.util.ArrayList < TYPE_1 . VdcActionParametersBase > ( TYPE_2 . METHOD_3 ( new TYPE_1 . VdcActionParametersBase [ ] { new TYPE_3 ( getEntity ( ) . getId ( ) ) } ) ) , new TYPE_4 ( ) { public void METHOD_4 ( TYPE_5 result ) { } } , null ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_2 ( VAR_1 , new java.util.ArrayList < TYPE_1 . VdcActionParametersBase > ( TYPE_2 . METHOD_3 ( new TYPE_1 . VdcActionParametersBase [ ] { new TYPE_3 ( getEntity ( ) . getId ( ) ) } ) ) , new TYPE_4 ( ) { public void METHOD_4 ( TYPE_5 result ) { } } , null ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . getInstance ( ) ) INIT = TYPE_2 . getInstance ( ) ) VAR VAR (  VAR_2 = VAR_1 . METHOD_2 ( this , STRING_1 , new TYPE_3 [ 0 ] , new java.lang.Object [ 0 ] , VAR_3 , VAR_3 , VAR_4 ) )  VAR_2 = VAR_1 . METHOD_2 ( this , STRING_1 , new TYPE_3 [ 0 ] , new java.lang.Object [ 0 ] , VAR_3 , VAR_3 , VAR_4 ) (  VAR_1 . METHOD_3 ( VAR_2 ) )  VAR_1 . METHOD_3 ( VAR_2 ) (  VAR_5 = ( VAR_6 ) - 1 )  VAR_5 = ( VAR_6 ) - 1 (  VAR_7 = VAR_1 . METHOD_2 ( this , STRING_2 , new TYPE_3 [ 0 ] , new java.lang.Object [ 0 ] , VAR_8 , VAR_8 , VAR_9 ) )  VAR_7 = VAR_1 . METHOD_2 ( this , STRING_2 , new TYPE_3 [ 0 ] , new java.lang.Object [ 0 ] , VAR_8 , VAR_8 , VAR_9 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ( NAME iface ) NAME iface ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  METHOD_3 ( iface , false , iface . METHOD_4 ( ) , iface . METHOD_5 ( ) , iface . METHOD_6 ( ) , ( ( iface . METHOD_7 ( ) ) + 1 ) , METHOD_8 ( ) ) )  METHOD_3 ( iface , false , iface . METHOD_4 ( ) , iface . METHOD_5 ( ) , iface . METHOD_6 ( ) , ( ( iface . METHOD_7 ( ) ) + 1 ) , METHOD_8 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.Map<java.lang.String,org.ovirt.engine.core.common.businessentities.network.Network> ) RETURN java.util.Map<java.lang.String,org.ovirt.engine.core.common.businessentities.network.Network> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) == null ) COND ( VAR_1 ) == null ( THEN THEN ( IF IF ( COND ( VAR_2 ) != null ) COND ( VAR_2 ) != null ( THEN THEN (  VAR_1 = TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( ) . METHOD_4 ( VAR_2 ) ) )  VAR_1 = TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( ) . METHOD_4 ( VAR_2 ) ) ) THEN THEN ( ELSE ELSE (  VAR_1 = new java.util.HashMap < > ( ) )  VAR_1 = new java.util.HashMap < > ( ) ) ELSE ELSE ) IF IF ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1<java.lang.String,org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.String>> ) RETURN TYPE_1<java.lang.String,org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.String>> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.String> ) TYPE org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new org.ovirt.engine.ui.uicommonweb.models.EntityModel < java.lang.String > ( ) ) INIT = new org.ovirt.engine.ui.uicommonweb.models.EntityModel < java.lang.String > ( ) ) VAR VAR (  VAR_2 . setEntity ( VAR_1 . METHOD_2 ( ) ) )  VAR_2 . setEntity ( VAR_1 . METHOD_2 ( ) ) (  return new TYPE_1 < java.lang.String , org.ovirt.engine.ui.uicommonweb.models.EntityModel < java.lang.String > > ( VAR_1 . METHOD_3 ( ) , VAR_2 ) ; )  return new TYPE_1 < java.lang.String , org.ovirt.engine.ui.uicommonweb.models.EntityModel < java.lang.String > > ( VAR_1 . METHOD_3 ( ) , VAR_2 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.StorageDomain ) TYPE TYPE_1.StorageDomain ( NAME storageDomain ) NAME storageDomain ( INIT = new TYPE_1 . StorageDomain ( ) ) INIT = new TYPE_1 . StorageDomain ( ) ) VAR VAR (  storageDomain . setId ( VAR_1 ) )  storageDomain . setId ( VAR_1 ) (  storageDomain . METHOD_2 ( new TYPE_2 ( ) ) )  storageDomain . METHOD_2 ( new TYPE_2 ( ) ) (  storageDomain . METHOD_3 ( ) . setId ( VAR_2 ) )  storageDomain . METHOD_3 ( ) . setId ( VAR_2 ) (  TYPE_3 . METHOD_4 ( METHOD_5 ( ) , storageDomain ) )  TYPE_3 . METHOD_4 ( METHOD_5 ( ) , storageDomain ) (  assertEquals ( VAR_3 , storageDomain . METHOD_6 ( ) ) )  assertEquals ( VAR_3 , storageDomain . METHOD_6 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.VM ) TYPE TYPE_1.VM ( NAME model ) NAME model ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( model . METHOD_2 ( ) ) ) COND ! ( model . METHOD_2 ( ) ) ( THEN THEN (  model . METHOD_3 ( new TYPE_2 ( ) ) )  model . METHOD_3 ( new TYPE_2 ( ) ) ) THEN THEN ) IF IF (  model . METHOD_4 ( ) . METHOD_5 ( ( ! ( TYPE_3 . getInstance ( ) . METHOD_6 ( new org.ovirt.engine.core.compat.Guid ( model . getId ( ) ) ) . isEmpty ( ) ) ) ) )  model . METHOD_4 ( ) . METHOD_5 ( ( ! ( TYPE_3 . getInstance ( ) . METHOD_6 ( new org.ovirt.engine.core.compat.Guid ( model . getId ( ) ) ) . isEmpty ( ) ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 = TYPE_1 . METHOD_1 ( ( ( TYPE_2 < TYPE_3 > ) ( returnValue ) ) ) )  VAR_1 = TYPE_1 . METHOD_1 ( ( ( TYPE_2 < TYPE_3 > ) ( returnValue ) ) ) (  VAR_2 = ( ( TYPE_2 < TYPE_3 > ) ( returnValue ) ) )  VAR_2 = ( ( TYPE_2 < TYPE_3 > ) ( returnValue ) ) (  TYPE_1 . METHOD_2 ( VAR_3 , vmId ) )  TYPE_1 . METHOD_2 ( VAR_3 , vmId ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ( NAME iface ) NAME iface ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.network.Network ) TYPE org.ovirt.engine.core.common.businessentities.network.Network ( NAME network ) NAME network ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND iface . METHOD_2 ( ) ) COND iface . METHOD_2 ( ) ( THEN THEN (  return ( iface . METHOD_3 ( ) ) != null ; )  return ( iface . METHOD_3 ( ) ) != null ; ) THEN THEN ( ELSE ELSE (  return ( network != null ) && ( ( network . METHOD_4 ( ) ) != null ) ; )  return ( network != null ) && ( ( network . METHOD_4 ( ) ) != null ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( ( VAR_2 ) == ( VAR_1 . getStatus ( ) ) ) || ( ( ( VAR_3 ) == ( VAR_1 . getStatus ( ) ) ) && ( ( VAR_1 . METHOD_2 ( ) ) != ( VAR_4 ) ) ) ) || ( ( VAR_5 ) == ( VAR_1 . getStatus ( ) ) ) ) COND ( ( ( VAR_2 ) == ( VAR_1 . getStatus ( ) ) ) || ( ( ( VAR_3 ) == ( VAR_1 . getStatus ( ) ) ) && ( ( VAR_1 . METHOD_2 ( ) ) != ( VAR_4 ) ) ) ) || ( ( VAR_5 ) == ( VAR_1 . getStatus ( ) ) ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , VAR_2 ) ) ) )  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , VAR_2 ) ) ) (  METHOD_3 ( ) )  METHOD_3 ( ) (  METHOD_4 ( true , null ) )  METHOD_4 ( true , null ) (  cmd . METHOD_5 ( ) )  cmd . METHOD_5 ( ) (  org.mockito.Mockito . METHOD_6 ( VAR_3 , org.mockito.Mockito . METHOD_7 ( 1 ) ) . METHOD_8 ( TYPE_3 . any ( VAR_4 class ) ) )  org.mockito.Mockito . METHOD_6 ( VAR_3 , org.mockito.Mockito . METHOD_7 ( 1 ) ) . METHOD_8 ( TYPE_3 . any ( VAR_4 class ) ) (  TYPE_4 . assertEquals ( cmd . METHOD_9 ( ) , VAR_5 ) )  TYPE_4 . assertEquals ( cmd . METHOD_9 ( ) , VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VM> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VM> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) . METHOD_3 ( ) ) && ( VAR_1 != null ) ) && ( ! ( VAR_1 . isEmpty ( ) ) ) ) COND ( ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) . METHOD_3 ( ) ) && ( VAR_1 != null ) ) && ( ! ( VAR_1 . isEmpty ( ) ) ) ( THEN THEN (  VAR_2 = new java.util.HashMap < org.ovirt.engine.core.compat.Guid , java.lang.String > ( ) )  VAR_2 = new java.util.HashMap < org.ovirt.engine.core.compat.Guid , java.lang.String > ( ) ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  VAR_2 . put ( vm . getId ( ) , TYPE_2 . name ( ) ) )  VAR_2 . put ( vm . getId ( ) , TYPE_2 . name ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VM> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VM> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND org.ovirt.engine.core.compat.Guid . METHOD_2 ( vm . getId ( ) ) ) COND org.ovirt.engine.core.compat.Guid . METHOD_2 ( vm . getId ( ) ) ( THEN THEN (  VAR_1 . add ( vm ) )  VAR_1 . add ( vm ) ) THEN THEN ( ELSE ELSE ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME VAR_2 ) NAME VAR_2 ( INIT = null ) INIT = null ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( IF IF ( COND VAR_3 . getId ( ) . equals ( vm . getId ( ) ) ) COND VAR_3 . getId ( ) . equals ( vm . getId ( ) ) ( THEN THEN (  VAR_2 = VAR_3 )  VAR_2 = VAR_3 (  break ; )  break ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  VAR_1 . METHOD_3 ( VAR_2 ) )  VAR_1 . METHOD_3 ( VAR_2 ) (  VAR_1 . add ( vm ) )  VAR_1 . add ( vm ) ) ELSE ELSE ) IF IF (  super . METHOD_1 ( VAR_1 ) )  super . METHOD_1 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_3 ( ) ) INIT = METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_4 ( VAR_4 , VAR_2 , this , true ) ) INIT = new TYPE_4 ( VAR_4 , VAR_2 , this , true ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_3 . METHOD_4 ( METHOD_5 ( ) ) . METHOD_4 ( METHOD_6 ( ) ) . METHOD_4 ( METHOD_7 ( ) ) ) INIT = VAR_3 . METHOD_4 ( METHOD_5 ( ) ) . METHOD_4 ( METHOD_6 ( ) ) . METHOD_4 ( METHOD_7 ( ) ) ) VAR VAR (  VAR_3 . METHOD_8 ( VAR_1 ) )  VAR_3 . METHOD_8 ( VAR_1 ) (  VAR_3 . METHOD_9 ( ) )  VAR_3 . METHOD_9 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  vm . METHOD_2 ( model . METHOD_3 ( ) . getSelectedItem ( ) . getId ( ) ) )  vm . METHOD_2 ( model . METHOD_3 ( ) . getSelectedItem ( ) . getId ( ) ) (  vm . METHOD_4 ( model . METHOD_5 ( ) . METHOD_6 ( ) ) )  vm . METHOD_4 ( model . METHOD_5 ( ) . METHOD_6 ( ) ) (  vm . METHOD_7 ( model . METHOD_8 ( ) . getSelectedItem ( ) . getId ( ) ) )  vm . METHOD_7 ( model . METHOD_8 ( ) . getSelectedItem ( ) . getId ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( VAR_1 == null ) ? STRING_1 : TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) . get ( VAR_1 ) . getName ( ) ) INIT = ( VAR_1 == null ) ? STRING_1 : TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) . get ( VAR_1 ) . getName ( ) ) VAR VAR (  VAR_2 . METHOD_4 ( STRING_2 , VAR_3 ) )  VAR_2 . METHOD_4 ( STRING_2 , VAR_3 ) (  VAR_4 . log ( VAR_2 , VAR_5 ) )  VAR_4 . log ( VAR_2 , VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new java.lang.String [ ] { VAR_2 } ) ) )  VAR_1 = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new java.lang.String [ ] { VAR_2 } ) ) (  VAR_3 = new TYPE_2 ( null ) )  VAR_3 = new TYPE_2 ( null ) (  org.mockito.Mockito.doReturn ( null ) . when ( VAR_1 ) . METHOD_3 ( ) )  org.mockito.Mockito.doReturn ( null ) . when ( VAR_1 ) . METHOD_3 ( ) (  org.mockito.Mockito.doReturn ( null ) . when ( VAR_1 ) . METHOD_4 ( TYPE_3 . METHOD_5 ( ) ) )  org.mockito.Mockito.doReturn ( null ) . when ( VAR_1 ) . METHOD_4 ( TYPE_3 . METHOD_5 ( ) ) (  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( VAR_1 ) . METHOD_6 ( ) )  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( VAR_1 ) . METHOD_6 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) (  METHOD_2 ( ) . METHOD_3 ( ( ( ( ( ( getEntity ( ) ) != null ) && ( ( ( getEntity ( ) . getStatus ( ) ) == ( VAR_1 ) ) || ( ( getEntity ( ) . getStatus ( ) ) == ( VAR_2 ) ) ) ) && ( TYPE_1 . METHOD_4 ( getEntity ( ) . METHOD_5 ( ) ) ) ) && ( METHOD_6 ( ) . METHOD_7 ( ) ) ) ) )  METHOD_2 ( ) . METHOD_3 ( ( ( ( ( ( getEntity ( ) ) != null ) && ( ( ( getEntity ( ) . getStatus ( ) ) == ( VAR_1 ) ) || ( ( getEntity ( ) . getStatus ( ) ) == ( VAR_2 ) ) ) ) && ( TYPE_1 . METHOD_4 ( getEntity ( ) . METHOD_5 ( ) ) ) ) && ( METHOD_6 ( ) . METHOD_7 ( ) ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_1 . METHOD_2 ( STRING_1 ) )  VAR_1 . METHOD_2 ( STRING_1 ) (  VAR_1 . METHOD_3 ( new TYPE_2 ( ) ) )  VAR_1 . METHOD_3 ( new TYPE_2 ( ) ) (  VAR_1 . METHOD_4 ( ) . setId ( VAR_2 . toString ( ) ) )  VAR_1 . METHOD_4 ( ) . setId ( VAR_2 . toString ( ) ) (  VAR_1 . METHOD_5 ( TYPE_3 . toString ( ) ) )  VAR_1 . METHOD_5 ( TYPE_3 . toString ( ) ) (  VAR_1 . METHOD_6 ( new TYPE_4 ( ) ) )  VAR_1 . METHOD_6 ( new TYPE_4 ( ) ) (  VAR_1 . METHOD_7 ( ) . METHOD_8 ( ) . add ( METHOD_9 ( STRING_2 ) ) )  VAR_1 . METHOD_7 ( ) . METHOD_8 ( ) . add ( METHOD_9 ( STRING_2 ) ) (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME VAR_2 ) NAME VAR_2 ( INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ) INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ) VAR VAR ( IF IF ( COND ! ( VAR_2 . isEmpty ( ) ) ) COND ! ( VAR_2 . isEmpty ( ) ) ( THEN THEN (  VAR_1 . METHOD_5 ( VAR_2 . get ( 0 ) . METHOD_6 ( ) ) )  VAR_1 . METHOD_5 ( VAR_2 . get ( 0 ) . METHOD_6 ( ) ) ) THEN THEN ( ELSE ELSE (  VAR_1 . METHOD_5 ( TYPE_3 . METHOD_7 ( VAR_1 . METHOD_4 ( ) ) ) )  VAR_1 . METHOD_5 ( TYPE_3 . METHOD_7 ( VAR_1 . METHOD_4 ( ) ) ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_2 . getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( VAR_1 . getId ( ) , VAR_2 , VAR_3 , VAR_4 ) )  TYPE_2 . getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( VAR_1 . getId ( ) , VAR_2 , VAR_3 , VAR_4 ) (  VAR_1 . METHOD_4 ( null ) )  VAR_1 . METHOD_4 ( null ) (  org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_5 ( ) . METHOD_6 ( VAR_1 ) )  org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_5 ( ) . METHOD_6 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_1 . METHOD_2 ( null ) )  VAR_1 . METHOD_2 ( null ) ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME VAR_2 ) NAME VAR_2 ( INIT = new org.ovirt.engine.core.common.businessentities.VM ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.VM ( ) ) VAR VAR (  VAR_2 . setId ( VAR_3 ) )  VAR_2 . setId ( VAR_3 ) (  VAR_1 . METHOD_3 ( VAR_2 ) )  VAR_1 . METHOD_3 ( VAR_2 ) ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_1 . METHOD_4 ( ) ) INIT = VAR_1 . METHOD_4 ( ) ) VAR VAR (  TYPE_2 . assertEquals ( VAR_3 , VAR_4 ) )  TYPE_2 . assertEquals ( VAR_3 , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.VdcBllMessages ) TYPE TYPE_1.VdcBllMessages ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 . get ( VAR_1 ) ) INIT = VAR_4 . get ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_3 == null ) COND VAR_3 == null ( THEN THEN (  VAR_3 = new TYPE_2 < java.lang.String > ( ) )  VAR_3 = new TYPE_2 < java.lang.String > ( ) (  VAR_4 . put ( VAR_1 , VAR_3 ) )  VAR_4 . put ( VAR_1 , VAR_3 ) ) THEN THEN ) IF IF (  VAR_3 . add ( VAR_2 ) )  VAR_3 . add ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_1 ) ( getWindow ( ) ) ) ) INIT = ( ( TYPE_1 ) ( getWindow ( ) ) ) ) VAR VAR ( IF IF ( COND ! ( VAR_1 . validate ( ) ) ) COND ! ( VAR_1 . validate ( ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( IF IF ( COND ( ! ( VAR_1 . METHOD_2 ( ) ) ) || ( ( VAR_1 . METHOD_3 ( ) . getSelectedItem ( ) ) == ( VAR_2 ) ) ) COND ( ! ( VAR_1 . METHOD_2 ( ) ) ) || ( ( VAR_1 . METHOD_3 ( ) . getSelectedItem ( ) ) == ( VAR_2 ) ) ( THEN THEN (  METHOD_4 ( VAR_1 ) )  METHOD_4 ( VAR_1 ) ) THEN THEN ( ELSE ELSE (  METHOD_5 ( VAR_1 , false ) )  METHOD_5 ( VAR_1 , false ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ( NAME iface ) NAME iface ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.Map<java.lang.String,org.ovirt.engine.core.common.businessentities.network.Network> ) TYPE java.util.Map<java.lang.String,org.ovirt.engine.core.common.businessentities.network.Network> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_2 . METHOD_2 ( VAR_2 , iface ) ) INIT = TYPE_2 . METHOD_2 ( VAR_2 , iface ) ) VAR VAR (  TYPE_3 . METHOD_3 ( STRING_1 , VAR_3 ) )  TYPE_3 . METHOD_3 ( STRING_1 , VAR_3 ) (  TYPE_3 . assertEquals ( ( ( STRING_2 + ( VAR_1 ? STRING_3 : STRING_4 ) ) + STRING_5 ) , VAR_1 , VAR_3 . METHOD_4 ( ) ) )  TYPE_3 . assertEquals ( ( ( STRING_2 + ( VAR_1 ? STRING_3 : STRING_4 ) ) + STRING_5 ) , VAR_1 , VAR_3 . METHOD_4 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ( INIT = org.ovirt.engine.core.compat.Guid . METHOD_2 ( STRING_1 ) ) INIT = org.ovirt.engine.core.compat.Guid . METHOD_2 ( STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ( INIT = org.ovirt.engine.core.compat.Guid . METHOD_2 ( STRING_2 ) ) INIT = org.ovirt.engine.core.compat.Guid . METHOD_2 ( STRING_2 ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_3 ) NAME VAR_3 ( INIT = org.ovirt.engine.core.compat.Guid . METHOD_2 ( STRING_3 ) ) INIT = org.ovirt.engine.core.compat.Guid . METHOD_2 ( STRING_3 ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_4 ) NAME VAR_4 ( INIT = org.ovirt.engine.core.compat.Guid . METHOD_2 ( STRING_4 ) ) INIT = org.ovirt.engine.core.compat.Guid . METHOD_2 ( STRING_4 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_5 ) NAME VAR_5 ( INIT = METHOD_3 ( VAR_3 , VAR_1 ) ) INIT = METHOD_3 ( VAR_3 , VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_6 ) NAME VAR_6 ( INIT = METHOD_3 ( VAR_4 , VAR_2 ) ) INIT = METHOD_3 ( VAR_4 , VAR_2 ) ) VAR VAR (  METHOD_4 ( VAR_5 , VAR_6 ) )  METHOD_4 ( VAR_5 , VAR_6 ) (  VAR_5 = METHOD_3 ( VAR_3 , VAR_1 ) )  VAR_5 = METHOD_3 ( VAR_3 , VAR_1 ) (  VAR_6 = METHOD_3 ( VAR_3 , VAR_2 ) )  VAR_6 = METHOD_3 ( VAR_3 , VAR_2 ) (  METHOD_4 ( VAR_5 , VAR_6 ) )  METHOD_4 ( VAR_5 , VAR_6 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.when ( METHOD_2 ( ) . METHOD_3 ( ) ) . thenReturn ( VAR_1 ) )  org.mockito.Mockito.when ( METHOD_2 ( ) . METHOD_3 ( ) ) . thenReturn ( VAR_1 ) (  VAR_2 = new java.util.ArrayList < > ( ) )  VAR_2 = new java.util.ArrayList < > ( ) (  org.mockito.Mockito.when ( METHOD_4 ( ) . METHOD_5 ( ) ) . thenReturn ( VAR_3 ) )  org.mockito.Mockito.when ( METHOD_4 ( ) . METHOD_5 ( ) ) . thenReturn ( VAR_3 ) (  org.mockito.Mockito.when ( METHOD_4 ( ) . getStoragePoolId ( ) ) . thenReturn ( VAR_4 ) )  org.mockito.Mockito.when ( METHOD_4 ( ) . getStoragePoolId ( ) ) . thenReturn ( VAR_4 ) (  org.mockito.Mockito.when ( VAR_1 . METHOD_6 ( VAR_3 , VAR_4 , false ) ) . thenReturn ( VAR_2 ) )  org.mockito.Mockito.when ( VAR_1 . METHOD_6 ( VAR_3 , VAR_4 , false ) ) . thenReturn ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1.ValidationResult ) RETURN TYPE_1.ValidationResult ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME value ) NAME value ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.ValidationResult ) TYPE TYPE_1.ValidationResult ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_1 ( value ) ) INIT = TYPE_2 . METHOD_1 ( value ) ) VAR VAR ( IF IF ( COND ! ( VAR_1 . METHOD_2 ( ) ) ) COND ! ( VAR_1 . METHOD_2 ( ) ) ( THEN THEN (  return VAR_1 ; )  return VAR_1 ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1.ValidationResult ) TYPE TYPE_1.ValidationResult ( NAME result ) NAME result ( INIT = new TYPE_1 . ValidationResult ( ) ) INIT = new TYPE_1 . ValidationResult ( ) ) VAR VAR ( IF IF ( COND value != null ) COND value != null ( THEN THEN (  result . METHOD_3 ( METHOD_4 ( value ) ) )  result . METHOD_3 ( METHOD_4 ( value ) ) (  result . METHOD_5 ( VAR_2 ) )  result . METHOD_5 ( VAR_2 ) ) THEN THEN ) IF IF (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN java.lang.Object[] ) RETURN java.lang.Object[] ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( METHOD_2 ( ) ) == null ) COND ( METHOD_2 ( ) ) == null ( THEN THEN (  return new java.lang.Object [ 0 ] ; )  return new java.lang.Object [ 0 ] ; ) THEN THEN ( ELSE ELSE ( VAR VAR ( TYPE java.util.ArrayList<java.lang.Object> ) TYPE java.util.ArrayList<java.lang.Object> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.StoragePool ) TYPE org.ovirt.engine.core.common.businessentities.StoragePool ( NAME a ) NAME a ( IN VAR_2 . Linq < org.ovirt.engine.core.common.businessentities.StoragePool > METHOD_3 ( METHOD_2 ( ) ) ) IN VAR_2 . Linq < org.ovirt.engine.core.common.businessentities.StoragePool > METHOD_3 ( METHOD_2 ( ) ) ( BLOCK BLOCK (  VAR_1 . add ( a . getId ( ) ) )  VAR_1 . add ( a . getId ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_1 . METHOD_4 ( new java.lang.Object [ ] { } ) ; )  return VAR_1 . METHOD_4 ( new java.lang.Object [ ] { } ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME returnValue ) NAME returnValue ( INIT = true ) INIT = true ) VAR VAR (  log . METHOD_2 ( STRING_1 ) )  log . METHOD_2 ( STRING_1 ) ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  returnValue = METHOD_3 ( VAR_2 , VAR_3 ) )  returnValue = METHOD_3 ( VAR_2 , VAR_3 ) ) THEN THEN ( ELSE ELSE (  returnValue = METHOD_4 ( VAR_1 , VAR_3 ) )  returnValue = METHOD_4 ( VAR_1 , VAR_3 ) ) ELSE ELSE ) IF IF (  log . METHOD_2 ( STRING_2 , returnValue ) )  log . METHOD_2 ( STRING_2 , returnValue ) (  return returnValue ; )  return returnValue ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito . METHOD_2 ( ) . when ( command ) . METHOD_3 ( ) )  org.mockito.Mockito . METHOD_2 ( ) . when ( command ) . METHOD_3 ( ) (  org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_4 ( TYPE_1 . any ( ) ) )  org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_4 ( TYPE_1 . any ( ) ) (  org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_5 ( ) )  org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_5 ( ) (  org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_6 ( ) )  org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_6 ( ) (  org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_7 ( ) )  org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_7 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> ) RETURN java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( ( TYPE_1 . getParameters ( ) . METHOD_1 ( ) ) == null ) && ( ! ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) . equals ( VAR_1 ) ) ) ) COND ( ( TYPE_1 . getParameters ( ) . METHOD_1 ( ) ) == null ) && ( ! ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) . equals ( VAR_1 ) ) ) ( THEN THEN (  TYPE_1 . getParameters ( ) . METHOD_3 ( METHOD_4 ( ) . METHOD_5 ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) ) ) )  TYPE_1 . getParameters ( ) . METHOD_3 ( METHOD_4 ( ) . METHOD_5 ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) ) ) ) THEN THEN ) IF IF (  return TYPE_1 . getParameters ( ) . METHOD_1 ( ) ; )  return TYPE_1 . getParameters ( ) . METHOD_1 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( false ) )  TYPE_1 . METHOD_2 ( false ) ( IF IF ( COND ( TYPE_1 . getVm ( ) ) != null ) COND ( TYPE_1 . getVm ( ) ) != null ( THEN THEN (  TYPE_1 . getVm ( ) . METHOD_3 ( VAR_1 ) )  TYPE_1 . getVm ( ) . METHOD_3 ( VAR_1 ) (  TYPE_1 . getVm ( ) . METHOD_4 ( null ) )  TYPE_1 . getVm ( ) . METHOD_4 ( null ) (  org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_5 ( ) . METHOD_6 ( TYPE_1 . getVm ( ) . METHOD_7 ( ) ) )  org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_5 ( ) . METHOD_6 ( TYPE_1 . getVm ( ) . METHOD_7 ( ) ) ) THEN THEN ( ELSE ELSE (  VAR_2 . METHOD_8 ( STRING_1 ) )  VAR_2 . METHOD_8 ( STRING_1 ) ) ELSE ELSE ) IF IF (  TYPE_1 . METHOD_9 ( true ) )  TYPE_1 . METHOD_9 ( true ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1.DiskImage ) RETURN TYPE_1.DiskImage ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND METHOD_2 ( METHOD_3 ( VAR_2 ) ) ) COND METHOD_2 ( METHOD_3 ( VAR_2 ) ) ( THEN THEN (  return ( ( TYPE_1 . DiskImage ) ( METHOD_4 ( VAR_5 , new TYPE_2 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ) . getReturnValue ( ) ) ) ; )  return ( ( TYPE_1 . DiskImage ) ( METHOD_4 ( VAR_5 , new TYPE_2 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ) . getReturnValue ( ) ) ) ; ) THEN THEN ( ELSE ELSE (  return TYPE_3 . METHOD_5 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; )  return TYPE_3 . METHOD_5 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ( NAME iface ) NAME iface ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME host ) NAME host ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_2 ( ) ) INIT = TYPE_2 . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND ( ( TYPE_3 . METHOD_3 ( host . METHOD_4 ( ) ) ) || ( VAR_2 . METHOD_5 ( iface . METHOD_6 ( ) , host . METHOD_7 ( ) ) ) ) || ( iface . getName ( ) . equals ( host . METHOD_8 ( ) ) ) ) COND ( ( TYPE_3 . METHOD_3 ( host . METHOD_4 ( ) ) ) || ( VAR_2 . METHOD_5 ( iface . METHOD_6 ( ) , host . METHOD_7 ( ) ) ) ) || ( iface . getName ( ) . equals ( host . METHOD_8 ( ) ) ) ( THEN THEN (  iface . METHOD_9 ( VAR_1 ) )  iface . METHOD_9 ( VAR_1 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_2 ( ) . get ( VAR_3 . METHOD_3 ( ) ) . getStoragePoolId ( ) ) INIT = VAR_2 . METHOD_2 ( ) . get ( VAR_3 . METHOD_3 ( ) ) . getStoragePoolId ( ) ) VAR VAR (  TYPE_1 . METHOD_4 ( VAR_1 . getValue ( ) ) )  TYPE_1 . METHOD_4 ( VAR_1 . getValue ( ) ) ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME result ) NAME result ( INIT = dao . METHOD_5 ( VAR_1 . getValue ( ) ) ) INIT = dao . METHOD_5 ( VAR_1 . getValue ( ) ) ) VAR VAR (  TYPE_1 . METHOD_4 ( result ) )  TYPE_1 . METHOD_4 ( result ) (  TYPE_1 . METHOD_6 ( result . isEmpty ( ) ) )  TYPE_1 . METHOD_6 ( result . isEmpty ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( java.util.ArrayList < java.lang.String > ) ( returnValue ) ) ) INIT = ( ( java.util.ArrayList < java.lang.String > ) ( returnValue ) ) ) VAR VAR (  METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( VAR_2 ) ) )  METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( VAR_2 ) ) (  METHOD_5 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( VAR_3 ) ) )  METHOD_5 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( VAR_3 ) ) (  METHOD_6 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( VAR_4 ) ) )  METHOD_6 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( VAR_4 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME validator ) NAME validator ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  return ( ( ( validate ( validator . METHOD_3 ( ) ) ) && ( validate ( validator . METHOD_4 ( ) ) ) ) && ( validate ( validator . METHOD_5 ( ) ) ) ) && ( validate ( validator . METHOD_6 ( ) ) ) ; )  return ( ( ( validate ( validator . METHOD_3 ( ) ) ) && ( validate ( validator . METHOD_4 ( ) ) ) ) && ( validate ( validator . METHOD_5 ( ) ) ) ) && ( validate ( validator . METHOD_6 ( ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1.ValidationResult ) RETURN TYPE_1.ValidationResult ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME host ) NAME host ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME validator ) NAME validator ( INIT = new TYPE_2 ( host , TYPE_3 . getParameters ( ) , METHOD_2 ( ) , METHOD_3 ( ) , METHOD_4 ( ) , VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 ) ) INIT = new TYPE_2 ( host , TYPE_3 . getParameters ( ) , METHOD_2 ( ) , METHOD_3 ( ) , METHOD_4 ( ) , VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 ) ) VAR VAR (  return validator . validate ( ) ; )  return validator . validate ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( aQuery.converterCallback ) == null ) COND ( aQuery.converterCallback ) == null ( THEN THEN ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND source == null ) COND source == null ( THEN THEN (  return new java.util.ArrayList < TYPE_1 > ( ) ; )  return new java.util.ArrayList < TYPE_1 > ( ) ; ) THEN THEN ) IF IF (  return source ; )  return source ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < TYPE_1 > ( ) ; } return source ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < TYPE_1 > ( ) ; } return source ; } } ) THEN THEN ) IF IF (  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  METHOD_3 ( ) )  METHOD_3 ( ) (  VAR_1 . METHOD_4 ( VAR_2 ) )  VAR_1 . METHOD_4 ( VAR_2 ) (  command . METHOD_5 ( ) )  command . METHOD_5 ( ) (  TYPE_1 . METHOD_6 ( command ) )  TYPE_1 . METHOD_6 ( command ) (  org.mockito.Mockito . METHOD_7 ( VAR_3 , org.mockito.Mockito . METHOD_8 ( 1 ) ) . METHOD_9 ( TYPE_2 . any ( VAR_4 . VM class ) ) )  org.mockito.Mockito . METHOD_7 ( VAR_3 , org.mockito.Mockito . METHOD_8 ( 1 ) ) . METHOD_9 ( TYPE_2 . any ( VAR_4 . VM class ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_3 . METHOD_2 ( model . METHOD_3 ( ) . getSelectedItem ( ) ) ) INIT = TYPE_3 . METHOD_2 ( model . METHOD_3 ( ) . getSelectedItem ( ) ) ) VAR VAR (  VAR_1 . METHOD_4 ( true ) )  VAR_1 . METHOD_4 ( true ) ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_4 ( ) ) INIT = new TYPE_4 ( ) ) VAR VAR (  VAR_3 . METHOD_5 ( TYPE_5 . METHOD_2 ( model . METHOD_6 ( ) . getSelectedItem ( ) ) ) )  VAR_3 . METHOD_5 ( TYPE_5 . METHOD_2 ( model . METHOD_6 ( ) . getSelectedItem ( ) ) ) (  VAR_3 . METHOD_7 ( VAR_2 ) )  VAR_3 . METHOD_7 ( VAR_2 ) (  VAR_1 . METHOD_8 ( VAR_3 ) )  VAR_1 . METHOD_8 ( VAR_3 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_2 ( TYPE_2 . getParameters ( ) . METHOD_3 ( ) , VAR_3 ) ) INIT = VAR_2 . METHOD_2 ( TYPE_2 . getParameters ( ) . METHOD_3 ( ) , VAR_3 ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME disk ) NAME disk ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( IF IF ( COND TYPE_3 . METHOD_4 ( disk . METHOD_5 ( ) ) ) COND TYPE_3 . METHOD_4 ( disk . METHOD_5 ( ) ) ( THEN THEN ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_3 ( disk ) ) INIT = new TYPE_3 ( disk ) ) VAR VAR (  TYPE_2 . getVm ( ) . METHOD_6 ( VAR_4 ) )  TYPE_2 . getVm ( ) . METHOD_6 ( VAR_4 ) (  break ; )  break ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND TYPE_2 . METHOD_2 ( VAR_1 , STRING_1 ) ) COND TYPE_2 . METHOD_2 ( VAR_1 , STRING_1 ) ( THEN THEN (  return VAR_2 ; )  return VAR_2 ; ) THEN THEN ( ELSE ELSE ( IF IF ( COND ( TYPE_2 . METHOD_2 ( VAR_1 , STRING_2 ) ) || ( TYPE_2 . METHOD_2 ( VAR_1 , STRING_3 ) ) ) COND ( TYPE_2 . METHOD_2 ( VAR_1 , STRING_2 ) ) || ( TYPE_2 . METHOD_2 ( VAR_1 , STRING_3 ) ) ( THEN THEN (  return VAR_3 ; )  return VAR_3 ; ) THEN THEN ( ELSE ELSE (  return VAR_4 ; )  return VAR_4 ; ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( aQuery.converterCallback ) == null ) COND ( aQuery.converterCallback ) == null ( THEN THEN ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND source == null ) COND source == null ( THEN THEN (  return java.lang.Integer . valueOf ( 0 ) ; )  return java.lang.Integer . valueOf ( 0 ) ; ) THEN THEN ) IF IF (  return source ; )  return source ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return java.lang.Integer . valueOf ( 0 ) ; } return source ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return java.lang.Integer . valueOf ( 0 ) ; } return source ; } } ) THEN THEN ) IF IF (  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( VAR_2 . METHOD_3 ( STRING_1 ) ) ) INIT = TYPE_1 . METHOD_2 ( VAR_2 . METHOD_3 ( STRING_1 ) ) ) VAR VAR (  TYPE_2 . METHOD_4 ( STRING_2 , VAR_1 . METHOD_5 ( STRING_3 ) ) )  TYPE_2 . METHOD_4 ( STRING_2 , VAR_1 . METHOD_5 ( STRING_3 ) ) (  TYPE_2 . METHOD_4 ( ( ( VAR_2 . METHOD_3 ( STRING_4 ) . length ) == 0 ) ) )  TYPE_2 . METHOD_4 ( ( ( VAR_2 . METHOD_3 ( STRING_4 ) . length ) == 0 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_1<java.lang.String,java.lang.Integer> ) TYPE TYPE_1<java.lang.String,java.lang.Integer> ( NAME VAR_2 ) NAME VAR_2 ( IN VAR_3 . METHOD_2 ( ) ) IN VAR_3 . METHOD_2 ( ) ( BLOCK BLOCK ( IF IF ( COND TYPE_2 . METHOD_3 ( VAR_2 . METHOD_4 ( ) ) . equals ( VAR_1 ) ) COND TYPE_2 . METHOD_3 ( VAR_2 . METHOD_4 ( ) ) . equals ( VAR_1 ) ( THEN THEN (  return VAR_2 . getValue ( ) . toString ( ) ; )  return VAR_2 . getValue ( ) . toString ( ) ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  VAR_4 . error ( STRING_1 , VAR_1 ) )  VAR_4 . error ( STRING_1 , VAR_1 ) (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( STRING_1 , VAR_2 , STRING_2 , STRING_3 ) ) INIT = METHOD_2 ( STRING_1 , VAR_2 , STRING_2 , STRING_3 ) ) VAR VAR (  parameters . METHOD_3 ( VAR_1 ) )  parameters . METHOD_3 ( VAR_1 ) (  parameters . METHOD_4 ( VAR_3 ) )  parameters . METHOD_4 ( VAR_3 ) (  org.mockito.Mockito.doReturn ( false ) . when ( command ) . METHOD_5 ( VAR_1 ) )  org.mockito.Mockito.doReturn ( false ) . when ( command ) . METHOD_5 ( VAR_1 ) (  TYPE_2 . METHOD_6 ( command ) )  TYPE_2 . METHOD_6 ( command ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( VAR_1 . getId ( ) ) ) INIT = new TYPE_1 ( VAR_1 . getId ( ) ) ) VAR VAR (  VAR_2 . METHOD_2 ( true ) )  VAR_2 . METHOD_2 ( true ) (  VAR_2 . METHOD_3 ( false ) )  VAR_2 . METHOD_3 ( false ) (  VAR_2 . METHOD_4 ( TYPE_3 . METHOD_5 ( ) ) )  VAR_2 . METHOD_4 ( TYPE_3 . METHOD_5 ( ) ) (  VAR_2 . METHOD_6 ( TYPE_3 . getParameters ( ) ) )  VAR_2 . METHOD_6 ( TYPE_3 . getParameters ( ) ) (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_1 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) )  VAR_1 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) (  VAR_1 . METHOD_3 ( VAR_2 ) )  VAR_1 . METHOD_3 ( VAR_2 ) (  VAR_1 . METHOD_4 ( true ) )  VAR_1 . METHOD_4 ( true ) (  VAR_1 . METHOD_5 ( VAR_3 ) )  VAR_1 . METHOD_5 ( VAR_3 ) (  VAR_1 . METHOD_6 ( STRING_1 ) )  VAR_1 . METHOD_6 ( STRING_1 ) (  VAR_1 . METHOD_7 ( VAR_4 ) )  VAR_1 . METHOD_7 ( VAR_4 ) (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME equals ) NAME equals ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( this ) == VAR_1 ) COND ( this ) == VAR_1 ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_1 == null ) || ( ( METHOD_1 ( ) ) != ( VAR_1 . METHOD_1 ( ) ) ) ) COND ( VAR_1 == null ) || ( ( METHOD_1 ( ) ) != ( VAR_1 . METHOD_1 ( ) ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_1 ) ( VAR_1 ) ) ) INIT = ( ( TYPE_1 ) ( VAR_1 ) ) ) VAR VAR (  return ( TYPE_2 . equals ( id , VAR_2 . id ) ) && ( TYPE_2 . equals ( VAR_3 , VAR_4 ) ) ; )  return ( TYPE_2 . equals ( id , VAR_2 . id ) ) && ( TYPE_2 . equals ( VAR_3 , VAR_4 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ( NAME nic ) NAME nic ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND nic == null ) COND nic == null ( THEN THEN (  nic = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) )  nic = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_4 ( nic , VAR_2 ) ) INIT = METHOD_4 ( nic , VAR_2 ) ) VAR VAR (  VAR_1 . METHOD_5 ( METHOD_6 ( VAR_3 ) ) )  VAR_1 . METHOD_5 ( METHOD_6 ( VAR_3 ) ) (  VAR_1 . METHOD_7 ( METHOD_8 ( nic . getName ( ) , VAR_3 , VAR_2 ) ) )  VAR_1 . METHOD_7 ( METHOD_8 ( nic . getName ( ) , VAR_3 , VAR_2 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = org.mockito.Mockito . METHOD_2 ( VAR_2 class ) ) INIT = org.mockito.Mockito . METHOD_2 ( VAR_2 class ) ) VAR VAR (  VAR_3 . METHOD_3 ( VAR_1 ) )  VAR_3 . METHOD_3 ( VAR_1 ) (  org.mockito.Mockito . METHOD_4 ( VAR_1 , org.mockito.Mockito . METHOD_5 ( ) ) . METHOD_6 ( TYPE_2 . METHOD_7 ( ) ) )  org.mockito.Mockito . METHOD_4 ( VAR_1 , org.mockito.Mockito . METHOD_5 ( ) ) . METHOD_6 ( TYPE_2 . METHOD_7 ( ) ) (  org.mockito.Mockito . METHOD_4 ( VAR_1 , org.mockito.Mockito . METHOD_5 ( ) ) . setId ( TYPE_2 . any ( VAR_4 . Guid class ) ) )  org.mockito.Mockito . METHOD_4 ( VAR_1 , org.mockito.Mockito . METHOD_5 ( ) ) . setId ( TYPE_2 . any ( VAR_4 . Guid class ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.Map<java.lang.String,java.lang.Object> ) RETURN java.util.Map<java.lang.String,java.lang.Object> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.Object> ) TYPE java.util.Map<java.lang.String,java.lang.Object> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.HashMap < > ( ) ) INIT = new java.util.HashMap < > ( ) ) VAR VAR (  VAR_2 . put ( VAR_3 , VAR_1 . METHOD_2 ( ) ) )  VAR_2 . put ( VAR_3 , VAR_1 . METHOD_2 ( ) ) (  VAR_2 . put ( VAR_4 , ( TYPE_2 . isEmpty ( VAR_1 . METHOD_3 ( ) ) ? STRING_1 : VAR_1 . METHOD_3 ( ) ) ) )  VAR_2 . put ( VAR_4 , ( TYPE_2 . isEmpty ( VAR_1 . METHOD_3 ( ) ) ? STRING_1 : VAR_1 . METHOD_3 ( ) ) ) (  VAR_2 . put ( VAR_5 , VAR_1 . METHOD_4 ( ) . toString ( ) ) )  VAR_2 . put ( VAR_5 , VAR_1 . METHOD_4 ( ) . toString ( ) ) (  VAR_2 . put ( VAR_6 , STRING_2 ) )  VAR_2 . put ( VAR_6 , STRING_2 ) (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . getInstance ( ) . METHOD_2 ( VAR_1 , new TYPE_2 ( TYPE_3 . getVm ( ) . getId ( ) ) , TYPE_4 . METHOD_3 ( TYPE_3 . METHOD_4 ( ) , TYPE_3 . METHOD_5 ( ) ) ) )  TYPE_1 . getInstance ( ) . METHOD_2 ( VAR_1 , new TYPE_2 ( TYPE_3 . getVm ( ) . getId ( ) ) , TYPE_4 . METHOD_3 ( TYPE_3 . METHOD_4 ( ) , TYPE_3 . METHOD_5 ( ) ) ) (  TYPE_3 . METHOD_6 ( null ) )  TYPE_3 . METHOD_6 ( null ) (  TYPE_3 . METHOD_7 ( true ) )  TYPE_3 . METHOD_7 ( true ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  context . host = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( returnValue ) ) )  context . host = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( returnValue ) ) ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_2 ) NAME METHOD_2 ( BLOCK BLOCK (  METHOD_3 ( ) )  METHOD_3 ( ) ) BLOCK BLOCK ) METHOD METHOD (  VAR_1 = new TYPE_1 ( ) { public void METHOD_2 ( ) { METHOD_3 ( ) ; } } )  VAR_1 = new TYPE_1 ( ) { public void METHOD_2 ( ) { METHOD_3 ( ) ; } } (  VAR_1 . METHOD_4 ( VAR_2 ) )  VAR_1 . METHOD_4 ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_2 . getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( VAR_1 . getId ( ) , VAR_3 , VAR_4 , VAR_5 ) )  TYPE_2 . getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( VAR_1 . getId ( ) , VAR_3 , VAR_4 , VAR_5 ) ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  VAR_1 . METHOD_4 ( null ) )  VAR_1 . METHOD_4 ( null ) (  org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_5 ( ) . METHOD_6 ( VAR_1 ) )  org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_5 ( ) . METHOD_6 ( VAR_1 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Version ) TYPE org.ovirt.engine.core.compat.Version ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Version ) TYPE org.ovirt.engine.core.compat.Version ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND TYPE_1 . equals ( VAR_1 , VAR_2 ) ) COND TYPE_1 . equals ( VAR_1 , VAR_2 ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_1 == null ) || ( VAR_2 == null ) ) COND ( VAR_1 == null ) || ( VAR_2 == null ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  return ( VAR_2 . METHOD_2 ( VAR_3 ) ) && ( VAR_1 . METHOD_3 ( VAR_3 ) ) ; )  return ( VAR_2 . METHOD_2 ( VAR_3 ) ) && ( VAR_1 . METHOD_3 ( VAR_3 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ( INIT = ( ( TYPE_1 ) ( target ) ) ) INIT = ( ( TYPE_1 ) ( target ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( java.util.List < TYPE_2 > ) ( returnValue ) ) ) INIT = ( ( java.util.List < TYPE_2 > ) ( returnValue ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_3 . getInstance ( ) . METHOD_1 ( VAR_1 , VAR_3 . METHOD_2 ( ) ) ) INIT = TYPE_3 . getInstance ( ) . METHOD_1 ( VAR_1 , VAR_3 . METHOD_2 ( ) ) ) VAR VAR (  model . METHOD_3 ( model , VAR_4 , VAR_2 , VAR_3 . METHOD_4 ( ) ) )  model . METHOD_3 ( model , VAR_4 , VAR_2 , VAR_3 . METHOD_4 ( ) ) (  METHOD_5 ( ) )  METHOD_5 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.doReturn ( TYPE_1 . METHOD_2 ( VAR_1 [ 2 ] ) ) . when ( VAR_2 ) . METHOD_3 ( ) )  org.mockito.Mockito.doReturn ( TYPE_1 . METHOD_2 ( VAR_1 [ 2 ] ) ) . when ( VAR_2 ) . METHOD_3 ( ) (  org.mockito.Mockito.doReturn ( METHOD_4 ( VAR_1 [ 2 ] ) ) . when ( VAR_3 ) . METHOD_5 ( VAR_1 [ 2 ] ) )  org.mockito.Mockito.doReturn ( METHOD_4 ( VAR_1 [ 2 ] ) ) . when ( VAR_3 ) . METHOD_5 ( VAR_1 [ 2 ] ) (  VAR_4 . METHOD_6 ( ) )  VAR_4 . METHOD_6 ( ) (  org.mockito.Mockito . METHOD_7 ( VAR_5 , org.mockito.Mockito . METHOD_8 ( 1 ) ) . METHOD_9 ( TYPE_2 . any ( VAR_6 class ) ) )  org.mockito.Mockito . METHOD_7 ( VAR_5 , org.mockito.Mockito . METHOD_8 ( 1 ) ) . METHOD_9 ( TYPE_2 . any ( VAR_6 class ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<TYPE_1.DiskImage,org.ovirt.engine.core.compat.Guid> ) TYPE java.util.Map<TYPE_1.DiskImage,org.ovirt.engine.core.compat.Guid> ( NAME map ) NAME map ( INIT = new java.util.HashMap < > ( ) ) INIT = new java.util.HashMap < > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME parameters ) NAME parameters ( IN getParameters ( ) . METHOD_2 ( ) ) IN getParameters ( ) . METHOD_2 ( ) ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.DiskImage ) TYPE TYPE_1.DiskImage ( NAME diskImage ) NAME diskImage ( INIT = METHOD_3 ( parameters . METHOD_4 ( ) ) ) INIT = METHOD_3 ( parameters . METHOD_4 ( ) ) ) VAR VAR (  map . put ( diskImage , diskImage . METHOD_5 ( ) . get ( 0 ) ) )  map . put ( diskImage , diskImage . METHOD_5 ( ) . get ( 0 ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return validate ( TYPE_3 . METHOD_1 ( map , TYPE_4 . METHOD_6 ( ) . METHOD_7 ( ) , TYPE_4 . METHOD_8 ( ) ) ) ; )  return validate ( TYPE_3 . METHOD_1 ( map , TYPE_4 . METHOD_6 ( ) . METHOD_7 ( ) , TYPE_4 . METHOD_8 ( ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected static ) MODIFIER protected static ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.ArrayList<java.lang.String> ) TYPE java.util.ArrayList<java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VM> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VM> ( NAME VAR_3 ) NAME VAR_3 ( INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( VAR_1 ) ) INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ( INIT = 0 ) INIT = 0 ) VAR VAR ( IF IF ( COND VAR_3 != null ) COND VAR_3 != null ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ( IN VAR_3 ) IN VAR_3 ( BLOCK BLOCK ( IF IF ( COND ( vm . METHOD_4 ( ) ) && ( TYPE_1 . METHOD_5 ( vm . getId ( ) , VAR_2 ) ) ) COND ( vm . METHOD_4 ( ) ) && ( TYPE_1 . METHOD_5 ( vm . getId ( ) , VAR_2 ) ) ( THEN THEN (  ++ VAR_4 )  ++ VAR_4 ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF (  return VAR_4 ; )  return VAR_4 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( VAR_3 , VAR_4 class , new java.lang.String [ ] { } , new java.lang.Object [ ] { } , METHOD_3 ( ) ) )  METHOD_2 ( VAR_3 , VAR_4 class , new java.lang.String [ ] { } , new java.lang.Object [ ] { } , METHOD_3 ( ) ) (  METHOD_2 ( VAR_5 , VAR_6 class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_7 [ 0 ] } , METHOD_4 ( ) , VAR_2 ) )  METHOD_2 ( VAR_5 , VAR_6 class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_7 [ 0 ] } , METHOD_4 ( ) , VAR_2 ) (  VAR_8 . METHOD_5 ( ) )  VAR_8 . METHOD_5 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME status ) NAME status ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( VAR_1 , VAR_2 ) )  METHOD_2 ( VAR_1 , VAR_2 ) (  org.mockito.Mockito.when ( VAR_3 . get ( TYPE_3 . any ( VAR_4 . Guid class ) ) ) . thenReturn ( METHOD_3 ( VAR_5 , STRING_1 , VAR_6 , status ) ) )  org.mockito.Mockito.when ( VAR_3 . get ( TYPE_3 . any ( VAR_4 . Guid class ) ) ) . thenReturn ( METHOD_3 ( VAR_5 , STRING_1 , VAR_6 , status ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( VAR_3 , VAR_4 class , new java.lang.String [ ] { } , new java.lang.Object [ ] { } , METHOD_3 ( ) , VAR_2 ) )  METHOD_2 ( VAR_3 , VAR_4 class , new java.lang.String [ ] { } , new java.lang.Object [ ] { } , METHOD_3 ( ) , VAR_2 ) (  VAR_5 . METHOD_4 ( ) )  VAR_5 . METHOD_4 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1.DiskImage ) RETURN TYPE_1.DiskImage ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.DiskImage ) TYPE TYPE_1.DiskImage ( NAME image ) NAME image ( INIT = new TYPE_1 . DiskImage ( ) ) INIT = new TYPE_1 . DiskImage ( ) ) VAR VAR (  image . METHOD_2 ( VAR_2 . METHOD_3 ( vm ) ) )  image . METHOD_2 ( VAR_2 . METHOD_3 ( vm ) ) (  image . METHOD_4 ( TYPE_4 . METHOD_5 ( VAR_1 ) ) )  image . METHOD_4 ( TYPE_4 . METHOD_5 ( VAR_1 ) ) (  image . METHOD_6 ( VAR_4 ) )  image . METHOD_6 ( VAR_4 ) (  image . METHOD_7 ( VAR_5 ) )  image . METHOD_7 ( VAR_5 ) (  image . METHOD_8 ( VAR_3 ) )  image . METHOD_8 ( VAR_3 ) (  return image ; )  return image ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = dao . METHOD_2 ( null , VAR_2 ) ) INIT = dao . METHOD_2 ( null , VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . get ( 0 ) ) INIT = VAR_1 . get ( 0 ) ) VAR VAR (  TYPE_2 . assertEquals ( true , ( ( VAR_1 . size ( ) ) == 1 ) ) )  TYPE_2 . assertEquals ( true , ( ( VAR_1 . size ( ) ) == 1 ) ) (  TYPE_2 . METHOD_3 ( VAR_3 ) )  TYPE_2 . METHOD_3 ( VAR_3 ) (  TYPE_2 . assertEquals ( true , ( ( VAR_3 . METHOD_4 ( ) ) > 0 ) ) )  TYPE_2 . assertEquals ( true , ( ( VAR_3 . METHOD_4 ( ) ) > 0 ) ) (  TYPE_2 . assertEquals ( new java.lang.Integer ( INT_1 ) , VAR_3 . METHOD_5 ( ) ) )  TYPE_2 . assertEquals ( new java.lang.Integer ( INT_1 ) , VAR_3 . METHOD_5 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  VAR_1 . setId ( VAR_2 ) )  VAR_1 . setId ( VAR_2 ) (  dao . METHOD_3 ( VAR_1 ) )  dao . METHOD_3 ( VAR_1 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = dao . METHOD_4 ( VAR_1 . getId ( ) ) ) INIT = dao . METHOD_4 ( VAR_1 . getId ( ) ) ) VAR VAR (  TYPE_2 . METHOD_5 ( VAR_1 . equals ( VAR_3 ) ) )  TYPE_2 . METHOD_5 ( VAR_1 . equals ( VAR_3 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.List<org.ovirt.engine.core.common.businessentities.VM> ) RETURN java.util.List<org.ovirt.engine.core.common.businessentities.VM> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VM> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VM> ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . METHOD_2 ( VAR_2 ) ) INIT = VAR_1 . METHOD_2 ( VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VM> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VM> ( NAME vms ) NAME vms ( INIT = TYPE_2 . METHOD_3 ( VAR_3 , new TYPE_3 < org.ovirt.engine.core.common.businessentities.VM > ( ) { public boolean METHOD_4 ( org.ovirt.engine.core.common.businessentities.VM VAR_4 ) { return ( ( VAR_4 . METHOD_5 ( ) ) == ( VAR_5 ) ) && ( ( VAR_4 . METHOD_6 ( ) . METHOD_7 ( VAR_2 ) ) == false ) ; } } ) ) INIT = TYPE_2 . METHOD_3 ( VAR_3 , new TYPE_3 < org.ovirt.engine.core.common.businessentities.VM > ( ) { public boolean METHOD_4 ( org.ovirt.engine.core.common.businessentities.VM VAR_4 ) { return ( ( VAR_4 . METHOD_5 ( ) ) == ( VAR_5 ) ) && ( ( VAR_4 . METHOD_6 ( ) . METHOD_7 ( VAR_2 ) ) == false ) ; } } ) ) VAR VAR ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_4 ) NAME METHOD_4 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return ( ( VAR_4 . METHOD_5 ( ) ) == ( VAR_5 ) ) && ( ( VAR_4 . METHOD_6 ( ) . METHOD_7 ( VAR_2 ) ) == false ) ; )  return ( ( VAR_4 . METHOD_5 ( ) ) == ( VAR_5 ) ) && ( ( VAR_4 . METHOD_6 ( ) . METHOD_7 ( VAR_2 ) ) == false ) ; ) BLOCK BLOCK ) METHOD METHOD (  return vms ; )  return vms ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.doReturn ( METHOD_2 ( false ) ) . when ( VAR_1 ) . METHOD_3 ( TYPE_1 . METHOD_4 ( VAR_2 ) , TYPE_1 . any ( ) ) )  org.mockito.Mockito.doReturn ( METHOD_2 ( false ) ) . when ( VAR_1 ) . METHOD_3 ( TYPE_1 . METHOD_4 ( VAR_2 ) , TYPE_1 . any ( ) ) (  VAR_1 . METHOD_5 ( ) )  VAR_1 . METHOD_5 ( ) (  org.mockito.Mockito . METHOD_6 ( VAR_3 , org.mockito.Mockito . METHOD_7 ( 0 ) ) . METHOD_8 ( TYPE_1 . METHOD_9 ( ) ) )  org.mockito.Mockito . METHOD_6 ( VAR_3 , org.mockito.Mockito . METHOD_7 ( 0 ) ) . METHOD_8 ( TYPE_1 . METHOD_9 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1.ValidationResult ) RETURN TYPE_1.ValidationResult ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( METHOD_2 ( ) ) ) INIT = new TYPE_2 ( METHOD_2 ( ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1.ValidationResult ) TYPE TYPE_1.ValidationResult ( NAME result ) NAME result ) VAR VAR (  result = VAR_1 . METHOD_3 ( ) )  result = VAR_1 . METHOD_3 ( ) ( IF IF ( COND ! ( result . METHOD_4 ( ) ) ) COND ! ( result . METHOD_4 ( ) ) ( THEN THEN (  return result ; )  return result ; ) THEN THEN ) IF IF (  result = METHOD_5 ( ) )  result = METHOD_5 ( ) ( IF IF ( COND ! ( result . METHOD_4 ( ) ) ) COND ! ( result . METHOD_4 ( ) ) ( THEN THEN (  return result ; )  return result ; ) THEN THEN ) IF IF (  result = VAR_1 . METHOD_6 ( VAR_2 ) )  result = VAR_1 . METHOD_6 ( VAR_2 ) ( IF IF ( COND ! ( result . METHOD_4 ( ) ) ) COND ! ( result . METHOD_4 ( ) ) ( THEN THEN (  return result ; )  return result ; ) THEN THEN ) IF IF (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_3 ( org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) , TYPE_1 . METHOD_5 ( ( ( VAR_3 ) + STRING_1 ) ) ) ) INIT = VAR_2 . METHOD_3 ( org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) , TYPE_1 . METHOD_5 ( ( ( VAR_3 ) + STRING_1 ) ) ) ) VAR VAR (  TYPE_2 . METHOD_6 ( VAR_1 . isEmpty ( ) ) )  TYPE_2 . METHOD_6 ( VAR_1 . isEmpty ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( VAR_2 , true ) )  VAR_1 . METHOD_2 ( VAR_2 , true ) (  org.mockito.Mockito.when ( cluster . METHOD_3 ( ) ) . thenReturn ( true ) )  org.mockito.Mockito.when ( cluster . METHOD_3 ( ) ) . thenReturn ( true ) (  org.mockito.Mockito.when ( cluster . METHOD_4 ( ) ) . thenReturn ( true ) )  org.mockito.Mockito.when ( cluster . METHOD_4 ( ) ) . thenReturn ( true ) (  validator = new TYPE_1 ( VAR_3 , VAR_4 , cluster , VAR_5 ) )  validator = new TYPE_1 ( VAR_3 , VAR_4 , cluster , VAR_5 ) (  TYPE_2 . METHOD_5 ( validator . METHOD_1 ( ) , TYPE_3 . METHOD_6 ( ) ) )  TYPE_2 . METHOD_5 ( validator . METHOD_1 ( ) , TYPE_3 . METHOD_6 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) ( IF IF ( COND TYPE_1 . getSucceeded ( ) ) COND TYPE_1 . getSucceeded ( ) ( THEN THEN ( IF IF ( COND TYPE_1 . METHOD_2 ( ) ) COND TYPE_1 . METHOD_2 ( ) ( THEN THEN (  TYPE_1 . METHOD_3 ( ) . METHOD_4 ( VAR_1 . METHOD_5 ( ) , VAR_1 . METHOD_6 ( ) ) )  TYPE_1 . METHOD_3 ( ) . METHOD_4 ( VAR_1 . METHOD_5 ( ) , VAR_1 . METHOD_6 ( ) ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND ! ( VAR_2 . isEmpty ( ) ) ) COND ! ( VAR_2 . isEmpty ( ) ) ( THEN THEN (  TYPE_2 . log ( this , METHOD_7 ( VAR_2 ) ) )  TYPE_2 . log ( this , METHOD_7 ( VAR_2 ) ) ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ) THEN THEN ) IF IF (  METHOD_8 ( TYPE_1 . getVm ( ) . getId ( ) ) )  METHOD_8 ( TYPE_1 . getVm ( ) . getId ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME validator ) NAME validator ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  return ( ( validate ( validator . METHOD_3 ( ) ) ) && ( validate ( validator . METHOD_4 ( ) ) ) ) && ( validate ( validator . METHOD_5 ( ) ) ) ; )  return ( ( validate ( validator . METHOD_3 ( ) ) ) && ( validate ( validator . METHOD_4 ( ) ) ) ) && ( validate ( validator . METHOD_5 ( ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( ( java.lang.Boolean ) ( METHOD_2 ( ) . getEntity ( ) ) ) ) COND ( ( java.lang.Boolean ) ( METHOD_2 ( ) . getEntity ( ) ) ) ( THEN THEN (  METHOD_3 ( ) . setIsChangable ( false ) )  METHOD_3 ( ) . setIsChangable ( false ) (  METHOD_4 ( ) . setIsChangable ( false ) )  METHOD_4 ( ) . setIsChangable ( false ) (  METHOD_5 ( ) . setIsChangable ( false ) )  METHOD_5 ( ) . setIsChangable ( false ) (  METHOD_6 ( ) . setIsChangable ( false ) )  METHOD_6 ( ) . setIsChangable ( false ) (  METHOD_7 ( ) . setIsChangable ( false ) )  METHOD_7 ( ) . setIsChangable ( false ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_2 . assertEquals ( VAR_2 , VAR_1 . METHOD_2 ( ) . toString ( ) ) )  TYPE_2 . assertEquals ( VAR_2 , VAR_1 . METHOD_2 ( ) . toString ( ) ) (  TYPE_2 . assertEquals ( VAR_3 , VAR_1 . METHOD_3 ( ) ) )  TYPE_2 . assertEquals ( VAR_3 , VAR_1 . METHOD_3 ( ) ) (  TYPE_2 . assertEquals ( VAR_4 , VAR_1 . METHOD_4 ( ) ) )  TYPE_2 . assertEquals ( VAR_4 , VAR_1 . METHOD_4 ( ) ) (  TYPE_2 . assertEquals ( VAR_5 , VAR_1 . METHOD_5 ( ) ) )  TYPE_2 . assertEquals ( VAR_5 , VAR_1 . METHOD_5 ( ) ) (  TYPE_2 . assertEquals ( VAR_6 , VAR_1 . getStatus ( ) ) )  TYPE_2 . assertEquals ( VAR_6 , VAR_1 . getStatus ( ) ) (  TYPE_2 . assertEquals ( VAR_7 , VAR_1 . METHOD_6 ( ) ) )  TYPE_2 . assertEquals ( VAR_7 , VAR_1 . METHOD_6 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ) TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME storageDomain ) NAME storageDomain ( INIT = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) ) VAR VAR (  storageDomain . setId ( VAR_1 ) )  storageDomain . setId ( VAR_1 ) (  storageDomain . METHOD_2 ( VAR_2 ) )  storageDomain . METHOD_2 ( VAR_2 ) (  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( command ) . METHOD_3 ( ) )  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( command ) . METHOD_3 ( ) (  org.mockito.Mockito.when ( VAR_3 . get ( TYPE_1 . any ( VAR_4 . Guid class ) ) ) . thenReturn ( storageDomain ) )  org.mockito.Mockito.when ( VAR_3 . get ( TYPE_1 . any ( VAR_4 . Guid class ) ) ) . thenReturn ( storageDomain ) (  org.mockito.Mockito.when ( VAR_3 . METHOD_4 ( VAR_1 , VAR_2 ) ) . thenReturn ( storageDomain ) )  org.mockito.Mockito.when ( VAR_3 . METHOD_4 ( VAR_1 , VAR_2 ) ) . thenReturn ( storageDomain ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<java.lang.Boolean> ) TYPE TYPE_1<java.lang.Boolean> ( NAME event ) NAME event ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( ) . METHOD_3 ( event . getValue ( ) ) )  METHOD_2 ( ) . METHOD_3 ( event . getValue ( ) ) (  METHOD_2 ( ) . METHOD_4 ( ( ! ( event . getValue ( ) ) ) ) )  METHOD_2 ( ) . METHOD_4 ( ( ! ( event . getValue ( ) ) ) ) (  METHOD_2 ( ) . METHOD_5 ( ( ( VAR_1 ) && ( ! ( event . getValue ( ) ) ) ) ) )  METHOD_2 ( ) . METHOD_5 ( ( ( VAR_1 ) && ( ! ( event . getValue ( ) ) ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<java.lang.String> ) RETURN TYPE_1<java.lang.String> ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<java.lang.String> ) TYPE TYPE_1<java.lang.String> ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_2 < java.lang.String > ( new TYPE_3 ( ) ) ) INIT = new TYPE_2 < java.lang.String > ( new TYPE_3 ( ) ) ) VAR VAR (  VAR_4 . METHOD_2 ( ( ( TYPE_4 < java.lang.String > ) ( returnValue ) ) ) )  VAR_4 . METHOD_2 ( ( ( TYPE_4 < java.lang.String > ) ( returnValue ) ) ) (  return VAR_4 ; )  return VAR_4 ; ) BLOCK BLOCK ) METHOD METHOD (  VAR_2 . converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter < TYPE_1 < java.lang.String > > ( ) { public TYPE_1 < java.lang.String > Convert ( java.lang.Object returnValue , org.ovirt.engine.ui.frontend.AsyncQuery VAR_3 ) { TYPE_1 < java.lang.String > VAR_4 = new TYPE_2 < java.lang.String > ( new TYPE_3 ( ) ) ; VAR_4 . METHOD_2 ( ( ( TYPE_4 < java.lang.String > ) ( returnValue ) ) ) ; return VAR_4 ; } } )  VAR_2 . converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter < TYPE_1 < java.lang.String > > ( ) { public TYPE_1 < java.lang.String > Convert ( java.lang.Object returnValue , org.ovirt.engine.ui.frontend.AsyncQuery VAR_3 ) { TYPE_1 < java.lang.String > VAR_4 = new TYPE_2 < java.lang.String > ( new TYPE_3 ( ) ) ; VAR_4 . METHOD_2 ( ( ( TYPE_4 < java.lang.String > ) ( returnValue ) ) ) ; return VAR_4 ; } } (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_5 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , VAR_2 ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_5 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VmTemplate> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VmTemplate> ( NAME list ) NAME list ( INIT = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmTemplate > ( ) ) INIT = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmTemplate > ( ) ) VAR VAR ( IF IF ( COND source != null ) COND source != null ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.VmTemplate ) TYPE org.ovirt.engine.core.common.businessentities.VmTemplate ( NAME template ) NAME template ( IN ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmTemplate > ) ( source ) ) ) IN ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmTemplate > ) ( source ) ) ( BLOCK BLOCK ( IF IF ( COND ( template . METHOD_1 ( ) ) == ( VAR_1 ) ) COND ( template . METHOD_1 ( ) ) == ( VAR_1 ) ( THEN THEN (  list . add ( template ) )  list . add ( template ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  TYPE_1 . METHOD_2 ( list , new TYPE_2 ( ) ) )  TYPE_1 . METHOD_2 ( list , new TYPE_2 ( ) ) ) THEN THEN ) IF IF (  return list ; )  return list ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return new TYPE_1 ( METHOD_2 ( ) . getEntity ( ) , METHOD_3 ( ) . getEntity ( ) , METHOD_4 ( ) . getEntity ( ) , METHOD_5 ( ) . getEntity ( ) , VAR_1 , ( ( METHOD_6 ( ) ) != null ? METHOD_6 ( ) . getSelectedItem ( ) . getId ( ) : null ) ) ; )  return new TYPE_1 ( METHOD_2 ( ) . getEntity ( ) , METHOD_3 ( ) . getEntity ( ) , METHOD_4 ( ) . getEntity ( ) , METHOD_5 ( ) . getEntity ( ) , VAR_1 , ( ( METHOD_6 ( ) ) != null ? METHOD_6 ( ) . getSelectedItem ( ) . getId ( ) : null ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = null ) INIT = null ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_1 = TYPE_1 . METHOD_2 ( VAR_2 . METHOD_3 ( TYPE_2 . getParameters ( ) . METHOD_4 ( ) ) ) )  VAR_1 = TYPE_1 . METHOD_2 ( VAR_2 . METHOD_3 ( TYPE_2 . getParameters ( ) . METHOD_4 ( ) ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME VAR_3 ) NAME VAR_3 ( BLOCK BLOCK (  log . error ( STRING_1 , VAR_3 . METHOD_5 ( ) ) )  log . error ( STRING_1 , VAR_3 . METHOD_5 ( ) ) (  log . METHOD_6 ( STRING_2 , VAR_3 ) )  log . METHOD_6 ( STRING_2 , VAR_3 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  TYPE_2 . METHOD_7 ( ) . METHOD_8 ( ( VAR_1 != null ) ) )  TYPE_2 . METHOD_7 ( ) . METHOD_8 ( ( VAR_1 != null ) ) (  TYPE_2 . METHOD_7 ( ) . METHOD_9 ( true ) )  TYPE_2 . METHOD_7 ( ) . METHOD_9 ( true ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.String> ) TYPE java.util.Map<java.lang.String,java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) . METHOD_3 ( METHOD_4 ( ) , VAR_2 , TYPE_1 . getParameters ( ) . METHOD_5 ( ) , TYPE_1 . METHOD_6 ( ) ) ) INIT = METHOD_2 ( ) . METHOD_3 ( METHOD_4 ( ) , VAR_2 , TYPE_1 . getParameters ( ) . METHOD_5 ( ) , TYPE_1 . METHOD_6 ( ) ) ) VAR VAR ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN (  TYPE_1 . getVm ( ) . METHOD_7 ( ) . put ( VAR_3 . getId ( ) , VAR_1 ) )  TYPE_1 . getVm ( ) . METHOD_7 ( ) . put ( VAR_3 . getId ( ) , VAR_1 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME response ) NAME response ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_3 . METHOD_2 ( VAR_3 , VAR_4 ) ) INIT = TYPE_3 . METHOD_2 ( VAR_3 , VAR_4 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME returnValue ) NAME returnValue ( INIT = VAR_2 . METHOD_3 ( VAR_5 , new TYPE_5 ( VAR_1 ) ) ) INIT = VAR_2 . METHOD_3 ( VAR_5 , new TYPE_5 ( VAR_1 ) ) ) VAR VAR ( IF IF ( COND returnValue . getSucceeded ( ) ) COND returnValue . getSucceeded ( ) ( THEN THEN (  response . METHOD_4 ( VAR_6 ) )  response . METHOD_4 ( VAR_6 ) (  VAR_7 . METHOD_5 ( STRING_1 , VAR_1 ) )  VAR_7 . METHOD_5 ( STRING_1 , VAR_1 ) ) THEN THEN ( ELSE ELSE (  response . METHOD_4 ( VAR_8 ) )  response . METHOD_4 ( VAR_8 ) (  VAR_7 . METHOD_5 ( STRING_2 , VAR_1 ) )  VAR_7 . METHOD_5 ( STRING_2 , VAR_1 ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME storageDomain ) NAME storageDomain ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . get ( storageDomain . METHOD_3 ( ) ) ) INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . get ( storageDomain . METHOD_3 ( ) ) ) VAR VAR ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN (  org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) )  org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ) THEN THEN ) IF IF (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.AddVmCommand<TYPE_2> ) TYPE TYPE_1.AddVmCommand<TYPE_2> ( NAME cmd ) NAME cmd ( INIT = METHOD_2 ( 0 , 0 ) ) INIT = METHOD_2 ( 0 , 0 ) ) VAR VAR (  org.mockito.Mockito.doReturn ( METHOD_3 ( ) ) . when ( cmd ) . getVdsGroup ( ) )  org.mockito.Mockito.doReturn ( METHOD_3 ( ) ) . when ( cmd ) . getVdsGroup ( ) (  org.mockito.Mockito.when ( VAR_1 . METHOD_4 ( TYPE_3 . any ( VAR_2 . Integer class ) , TYPE_3 . any ( VAR_3 . Version class ) ) ) . thenReturn ( new java.util.ArrayList < > ( TYPE_4 . METHOD_5 ( STRING_1 ) ) ) )  org.mockito.Mockito.when ( VAR_1 . METHOD_4 ( TYPE_3 . any ( VAR_2 . Integer class ) , TYPE_3 . any ( VAR_3 . Version class ) ) ) . thenReturn ( new java.util.ArrayList < > ( TYPE_4 . METHOD_5 ( STRING_1 ) ) ) (  TYPE_5 . METHOD_6 ( STRING_2 , cmd . METHOD_7 ( ) ) )  TYPE_5 . METHOD_6 ( STRING_2 , cmd . METHOD_7 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ( INIT = ( ( TYPE_1 ) ( target ) ) ) INIT = ( ( TYPE_1 ) ( target ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_2 ) ( returnValue ) ) ) INIT = ( ( TYPE_2 ) ( returnValue ) ) ) VAR VAR (  model . METHOD_1 ( VAR_1 . METHOD_2 ( ) ) )  model . METHOD_1 ( VAR_1 . METHOD_2 ( ) ) (  model . METHOD_3 ( ) )  model . METHOD_3 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME context ) NAME context ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VmTemplate ) TYPE org.ovirt.engine.core.common.businessentities.VmTemplate ( NAME template ) NAME template ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . append ( VAR_2 . METHOD_2 ( TYPE_3 . METHOD_3 ( VAR_3 , STRING_1 , context ) , template . METHOD_4 ( ) ) ) )  VAR_1 . append ( VAR_2 . METHOD_2 ( TYPE_3 . METHOD_3 ( VAR_3 , STRING_1 , context ) , template . METHOD_4 ( ) ) ) ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( INIT = template . METHOD_5 ( ) ) INIT = template . METHOD_5 ( ) ) VAR VAR ( IF IF ( COND ( VAR_4 != null ) && ( ! ( VAR_4 . isEmpty ( ) ) ) ) COND ( VAR_4 != null ) && ( ! ( VAR_4 . isEmpty ( ) ) ) ( THEN THEN (  VAR_1 . append ( VAR_2 . METHOD_6 ( VAR_4 ) ) )  VAR_1 . append ( VAR_2 . METHOD_6 ( VAR_4 ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1<java.lang.Object[]> ) RETURN TYPE_1<java.lang.Object[]> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  return TYPE_2 . METHOD_2 ( new java.lang.Object [ ] [ ] { new java.lang.Object [ ] { org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , false } , new java.lang.Object [ ] { org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , true } } ) ; )  return TYPE_2 . METHOD_2 ( new java.lang.Object [ ] [ ] { new java.lang.Object [ ] { org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , false } , new java.lang.Object [ ] { org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , true } } ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ( INIT = VAR_1 . METHOD_2 ( VAR_2 , STRING_1 ) ) INIT = VAR_1 . METHOD_2 ( VAR_2 , STRING_1 ) ) VAR VAR (  TYPE_2 . METHOD_3 ( result . get ( STRING_2 ) ) )  TYPE_2 . METHOD_3 ( result . get ( STRING_2 ) ) (  TYPE_2 . assertEquals ( result . get ( STRING_3 ) . METHOD_4 ( ) , STRING_4 ) )  TYPE_2 . assertEquals ( result . get ( STRING_3 ) . METHOD_4 ( ) , STRING_4 ) (  TYPE_2 . assertEquals ( result . get ( STRING_5 ) . METHOD_4 ( ) , STRING_6 ) )  TYPE_2 . assertEquals ( result . get ( STRING_5 ) . METHOD_4 ( ) , STRING_6 ) (  TYPE_2 . assertEquals ( result . get ( STRING_7 ) . METHOD_4 ( ) , STRING_1 ) )  TYPE_2 . assertEquals ( result . get ( STRING_7 ) . METHOD_4 ( ) , STRING_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public final ) MODIFIER public final ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( RESOURCES RESOURCES ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ) RESOURCES RESOURCES ( BLOCK BLOCK (  METHOD_3 ( ) )  METHOD_3 ( ) ( IF IF ( COND ! ( VAR_3 . METHOD_4 ( VAR_1 . getId ( ) ) ) ) COND ! ( VAR_3 . METHOD_4 ( VAR_1 . getId ( ) ) ) ( THEN THEN (  throw new TYPE_3 ( VAR_4 ) ; )  throw new TYPE_3 ( VAR_4 ) ; ) THEN THEN ) IF IF (  METHOD_5 ( VAR_1 . getId ( ) ) )  METHOD_5 ( VAR_1 . getId ( ) ) (  METHOD_6 ( VAR_1 ) )  METHOD_6 ( VAR_1 ) ) BLOCK BLOCK ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) ) INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( IN VAR_1 . METHOD_3 ( ) ) IN VAR_1 . METHOD_3 ( ) ( BLOCK BLOCK (  METHOD_4 ( VAR_2 ) )  METHOD_4 ( VAR_2 ) (  VAR_1 . METHOD_5 ( VAR_2 ) )  VAR_1 . METHOD_5 ( VAR_2 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_6 ( ) ) INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_6 ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.VmTemplate ) TYPE org.ovirt.engine.core.common.businessentities.VmTemplate ( NAME VAR_4 ) NAME VAR_4 ( IN VAR_3 . METHOD_3 ( ) ) IN VAR_3 . METHOD_3 ( ) ( BLOCK BLOCK (  METHOD_4 ( VAR_4 ) )  METHOD_4 ( VAR_4 ) (  VAR_3 . METHOD_5 ( VAR_4 ) )  VAR_3 . METHOD_5 ( VAR_4 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 . METHOD_2 ( VAR_1 ) ) INIT = VAR_4 . METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_3 != null ) COND VAR_3 != null ( THEN THEN (  VAR_3 . METHOD_3 ( VAR_2 ) )  VAR_3 . METHOD_3 ( VAR_2 ) (  VAR_4 . METHOD_4 ( VAR_3 ) )  VAR_4 . METHOD_4 ( VAR_3 ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ( BLOCK BLOCK (  log . error ( STRING_1 , VAR_1 , VAR_2 , e . METHOD_5 ( ) ) )  log . error ( STRING_1 , VAR_1 , VAR_2 , e . METHOD_5 ( ) ) (  log . METHOD_6 ( STRING_2 , e ) )  log . METHOD_6 ( STRING_2 , e ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ! ( super . METHOD_1 ( ) ) ) COND ! ( super . METHOD_1 ( ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  VAR_1 = METHOD_2 ( ) )  VAR_1 = METHOD_2 ( ) ( IF IF ( COND ( VAR_1 ) == null ) COND ( VAR_1 ) == null ( THEN THEN (  addCanDoActionMessage ( java.lang.String . METHOD_3 ( STRING_1 , TYPE_1 . getVdsGroup ( ) . METHOD_4 ( ) ) ) )  addCanDoActionMessage ( java.lang.String . METHOD_3 ( STRING_1 , TYPE_1 . getVdsGroup ( ) . METHOD_4 ( ) ) ) (  addCanDoActionMessage ( VAR_2 ) )  addCanDoActionMessage ( VAR_2 ) (  return false ; )  return false ; ) THEN THEN ) IF IF (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( METHOD_2 ( ) , METHOD_3 ( ) ) ) INIT = new TYPE_1 ( METHOD_2 ( ) , METHOD_3 ( ) ) ) VAR VAR ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_3 ) RETURN TYPE_3 ( NAME METHOD_4 ) NAME METHOD_4 ( BLOCK BLOCK (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD ( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_4 ) RETURN TYPE_4 ( NAME METHOD_5 ) NAME METHOD_5 ( BLOCK BLOCK (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD ( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_5 ) RETURN TYPE_5 ( NAME METHOD_6 ) NAME METHOD_6 ( BLOCK BLOCK (  return VAR_4 ; )  return VAR_4 ; ) BLOCK BLOCK ) METHOD METHOD (  command = new TYPE_2 < TYPE_1 > ( VAR_1 ) { public TYPE_3 METHOD_4 ( ) { return VAR_2 ; } protected TYPE_4 METHOD_5 ( ) { return VAR_3 ; } protected TYPE_5 METHOD_6 ( ) { return VAR_4 ; } } )  command = new TYPE_2 < TYPE_1 > ( VAR_1 ) { public TYPE_3 METHOD_4 ( ) { return VAR_2 ; } protected TYPE_4 METHOD_5 ( ) { return VAR_3 ; } protected TYPE_5 METHOD_6 ( ) { return VAR_4 ; } } ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) . METHOD_3 ( TYPE_2 . METHOD_4 ( ) ) ) INIT = METHOD_2 ( ) . METHOD_3 ( TYPE_2 . METHOD_4 ( ) ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( VAR_3 < java.lang.Integer > getValue ( VAR_4 ) ) * INT_1 ) INIT = ( VAR_3 < java.lang.Integer > getValue ( VAR_4 ) ) * INT_1 ) VAR VAR ( WHILE WHILE ( COND VAR_1 . METHOD_5 ( true ) ) COND VAR_1 . METHOD_5 ( true ) ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 . METHOD_6 ( ) . getStatus ( ) ) == ( VAR_5 ) ) COND ( VAR_1 . METHOD_6 ( ) . getStatus ( ) ) == ( VAR_5 ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF (  TYPE_3 . METHOD_7 ( VAR_2 ) )  TYPE_3 . METHOD_7 ( VAR_2 ) ) BLOCK BLOCK ) WHILE WHILE (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.VM ) TYPE TYPE_1.VM ( NAME entity ) NAME entity ( INIT = new TYPE_1 . VM ( ) ) INIT = new TYPE_1 . VM ( ) ) VAR VAR (  entity . METHOD_2 ( VAR_1 ) )  entity . METHOD_2 ( VAR_1 ) ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_3 ( ) ) INIT = TYPE_2 . METHOD_3 ( ) ) VAR VAR (  entity . METHOD_4 ( VAR_2 ) )  entity . METHOD_4 ( VAR_2 ) ( VAR VAR ( TYPE TYPE_1.VM ) TYPE TYPE_1.VM ( NAME model ) NAME model ( INIT = TYPE_3 . map ( entity , null ) ) INIT = TYPE_3 . map ( entity , null ) ) VAR VAR (  assertEquals ( VAR_2 . toString ( ) , model . METHOD_5 ( ) . getId ( ) ) )  assertEquals ( VAR_2 . toString ( ) , model . METHOD_5 ( ) . getId ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME nic ) NAME nic ( INIT = METHOD_2 ( STRING_1 , null ) ) INIT = METHOD_2 ( STRING_1 , null ) ) VAR VAR (  METHOD_3 ( nic ) )  METHOD_3 ( nic ) (  nic . METHOD_4 ( STRING_2 ) )  nic . METHOD_4 ( STRING_2 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_5 ( METHOD_6 ( nic ) ) ) INIT = METHOD_5 ( METHOD_6 ( nic ) ) ) VAR VAR (  METHOD_7 ( VAR_1 , VAR_2 , nic . METHOD_8 ( ) ) )  METHOD_7 ( VAR_1 , VAR_2 , nic . METHOD_8 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_3 ( ) ) INIT = new TYPE_3 ( ) ) VAR VAR (  VAR_3 . METHOD_2 ( VAR_1 ) )  VAR_3 . METHOD_2 ( VAR_1 ) ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_5 . map ( VAR_3 , null ) ) INIT = TYPE_5 . map ( VAR_3 , null ) ) VAR VAR (  assertEquals ( VAR_4 . METHOD_3 ( ) , VAR_2 . value ( ) ) )  assertEquals ( VAR_4 . METHOD_3 ( ) , VAR_2 . value ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDS> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDS> ( NAME hosts ) NAME hosts ( INIT = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VDS > ) ( returnValue ) ) ) INIT = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VDS > ) ( returnValue ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDS> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDS> ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_1 ( hosts ) ) INIT = METHOD_1 ( hosts ) ) VAR VAR (  VAR_2 . setItems ( METHOD_2 ( VAR_1 ) ) )  VAR_2 . setItems ( METHOD_2 ( VAR_1 ) ) (  VAR_3 . setItems ( METHOD_2 ( VAR_1 ) ) )  VAR_3 . setItems ( METHOD_2 ( VAR_1 ) ) (  VAR_4 . setItems ( METHOD_2 ( VAR_1 ) ) )  VAR_4 . setItems ( METHOD_2 ( VAR_1 ) ) (  this . hosts . setItems ( VAR_1 ) )  this . hosts . setItems ( VAR_1 ) (  METHOD_3 ( ) )  METHOD_3 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = null ) INIT = null ) VAR VAR ( IF IF ( COND ( VAR_2 != null ) && ( ! ( TYPE_3 . equals ( VAR_2 ) ) ) ) COND ( VAR_2 != null ) && ( ! ( TYPE_3 . equals ( VAR_2 ) ) ) ( THEN THEN ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_4 . METHOD_3 ( ) . get ( VAR_2 ) ) INIT = TYPE_4 . METHOD_3 ( ) . get ( VAR_2 ) ) VAR VAR (  VAR_3 = TYPE_5 . METHOD_4 ( VAR_4 , VAR_1 . METHOD_5 ( ) ) )  VAR_3 = TYPE_5 . METHOD_4 ( VAR_4 , VAR_1 . METHOD_5 ( ) ) ) THEN THEN ) IF IF (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ) TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  this . VAR_1 = VAR_1 )  this . VAR_1 = VAR_1 (  METHOD_2 ( VAR_2 ) )  METHOD_2 ( VAR_2 ) (  METHOD_3 ( ) )  METHOD_3 ( ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_2 ( ) { public void METHOD_4 ( TYPE_3 VAR_4 , java.lang.Object sender , TYPE_4 args ) { METHOD_5 ( ) ; } } ) INIT = new TYPE_2 ( ) { public void METHOD_4 ( TYPE_3 VAR_4 , java.lang.Object sender , TYPE_4 args ) { METHOD_5 ( ) ; } } ) VAR VAR ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_4 ) NAME METHOD_4 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME sender ) NAME sender ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME args ) NAME args ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_5 ( ) )  METHOD_5 ( ) ) BLOCK BLOCK ) METHOD METHOD (  METHOD_6 ( ) . METHOD_7 ( ) . METHOD_8 ( VAR_3 ) )  METHOD_6 ( ) . METHOD_7 ( ) . METHOD_8 ( VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_1 . METHOD_2 ( ) . get ( VAR_3 ) ) INIT = VAR_1 . METHOD_2 ( ) . get ( VAR_3 ) ) VAR VAR ( IF IF ( COND ( ( VAR_3 != null ) && ( VAR_4 != null ) ) && ( ( VAR_4 . METHOD_3 ( ) ) != null ) ) COND ( ( VAR_3 != null ) && ( VAR_4 != null ) ) && ( ( VAR_4 . METHOD_3 ( ) ) != null ) ( THEN THEN (  METHOD_4 ( VAR_4 ) )  METHOD_4 ( VAR_4 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<?extendsTYPE_2> ) TYPE TYPE_1<?extendsTYPE_2> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME sender ) NAME sender ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME args ) NAME args ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  super . METHOD_1 ( VAR_1 , sender , args ) )  super . METHOD_1 ( VAR_1 , sender , args ) ( IF IF ( COND ( VAR_1 . METHOD_2 ( VAR_2 ) ) && ( sender == ( METHOD_3 ( ) ) ) ) COND ( VAR_1 . METHOD_2 ( VAR_2 ) ) && ( sender == ( METHOD_3 ( ) ) ) ( THEN THEN (  METHOD_4 ( ) . METHOD_5 ( this , VAR_3 ) )  METHOD_4 ( ) . METHOD_5 ( this , VAR_3 ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND ( VAR_1 . METHOD_2 ( VAR_2 ) ) && ( sender == ( METHOD_6 ( ) ) ) ) COND ( VAR_1 . METHOD_2 ( VAR_2 ) ) && ( sender == ( METHOD_6 ( ) ) ) ( THEN THEN (  METHOD_7 ( args ) )  METHOD_7 ( args ) ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.Network ) TYPE org.ovirt.engine.core.common.businessentities.Network ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.Network ) TYPE org.ovirt.engine.core.common.businessentities.Network ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( VAR_1 , VAR_4 , java.lang.String . METHOD_3 ( STRING_1 , VAR_2 . getName ( ) , ( ( VAR_2 . METHOD_4 ( ) ) == 0 ? STRING_2 : VAR_2 . METHOD_4 ( ) ) , VAR_3 . getName ( ) , VAR_3 . METHOD_4 ( ) ) ) )  METHOD_2 ( VAR_1 , VAR_4 , java.lang.String . METHOD_3 ( STRING_1 , VAR_2 . getName ( ) , ( ( VAR_2 . METHOD_4 ( ) ) == 0 ? STRING_2 : VAR_2 . METHOD_4 ( ) ) , VAR_3 . getName ( ) , VAR_3 . METHOD_4 ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_1 . setId ( VAR_2 ) )  VAR_1 . setId ( VAR_2 ) (  VAR_1 . METHOD_2 ( new TYPE_2 . StorageDomain ( ) ) )  VAR_1 . METHOD_2 ( new TYPE_2 . StorageDomain ( ) ) (  VAR_1 . METHOD_3 ( ) . setId ( VAR_3 ) )  VAR_1 . METHOD_3 ( ) . setId ( VAR_3 ) (  TYPE_3 . METHOD_4 ( METHOD_5 ( ) , VAR_1 ) )  TYPE_3 . METHOD_4 ( METHOD_5 ( ) , VAR_1 ) (  assertEquals ( VAR_4 , VAR_1 . METHOD_6 ( ) ) )  assertEquals ( VAR_4 , VAR_1 . METHOD_6 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_1 ) ( model ) ) ) INIT = ( ( TYPE_1 ) ( model ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.Network> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.Network> ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ) ( result ) ) ) INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ) ( result ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_2 ( VAR_2 ) ) INIT = METHOD_2 ( VAR_2 ) ) VAR VAR (  VAR_1 . METHOD_3 ( VAR_3 ) )  VAR_1 . METHOD_3 ( VAR_3 ) (  VAR_3 . setTitle ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_4 ( ) ) )  VAR_3 . setTitle ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_4 ( ) ) (  VAR_3 . METHOD_5 ( STRING_1 ) )  VAR_3 . METHOD_5 ( STRING_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME parameters ) NAME parameters ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  parameters . METHOD_3 ( METHOD_4 ( VAR_1 ) ) )  parameters . METHOD_3 ( METHOD_4 ( VAR_1 ) ) ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.DiskImage ) TYPE org.ovirt.engine.core.common.businessentities.DiskImage ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_5 ( ) ) INIT = METHOD_5 ( ) ) VAR VAR (  VAR_2 . METHOD_6 ( org.ovirt.engine.core.compat.Guid . METHOD_7 ( ) ) )  VAR_2 . METHOD_6 ( org.ovirt.engine.core.compat.Guid . METHOD_7 ( ) ) (  org.mockito.Mockito.when ( VAR_3 . get ( VAR_4 ) ) . thenReturn ( VAR_2 ) )  org.mockito.Mockito.when ( VAR_3 . get ( VAR_4 ) ) . thenReturn ( VAR_2 ) (  METHOD_8 ( parameters ) )  METHOD_8 ( parameters ) (  METHOD_9 ( ) )  METHOD_9 ( ) (  TYPE_2 . METHOD_10 ( command . METHOD_11 ( ) ) )  TYPE_2 . METHOD_10 ( command . METHOD_11 ( ) ) (  command . METHOD_12 ( ) )  command . METHOD_12 ( ) (  TYPE_2 . METHOD_10 ( ( ( VAR_2 . METHOD_13 ( ) ) == null ) ) )  TYPE_2 . METHOD_10 ( ( ( VAR_2 . METHOD_13 ( ) ) == null ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.ArrayList<TYPE_1> ) RETURN java.util.ArrayList<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2.VdcActionType ) TYPE TYPE_2.VdcActionType ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.ArrayList<TYPE_2.VdcActionParametersBase> ) TYPE java.util.ArrayList<TYPE_2.VdcActionParametersBase> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_5 . METHOD_2 ( ( ( STRING_1 + ( VAR_2 . size ( ) ) ) + STRING_2 ) ) )  VAR_5 . METHOD_2 ( ( ( STRING_1 + ( VAR_2 . size ( ) ) ) + STRING_2 ) ) ( FOR-EACH FOR-EACH ( TYPE TYPE_2.VdcActionParametersBase ) TYPE TYPE_2.VdcActionParametersBase ( NAME params ) NAME params ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK (  params . METHOD_3 ( METHOD_4 ( ) . getId ( ) ) )  params . METHOD_3 ( METHOD_4 ( ) . getId ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ( VAR VAR ( TYPE java.util.ArrayList<TYPE_1> ) TYPE java.util.ArrayList<TYPE_1> ( NAME VAR_6 ) NAME VAR_6 ( INIT = METHOD_5 ( ) . METHOD_6 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ) INIT = METHOD_5 ( ) . METHOD_6 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ) VAR VAR (  return VAR_6 ; )  return VAR_6 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( ) { public TYPE_3 METHOD_2 ( org.ovirt.engine.core.compat.Guid VAR_2 ) throws TYPE_4 { return VAR_3 . METHOD_2 ( VAR_2 ) ; } } ) INIT = new TYPE_2 ( ) { public TYPE_3 METHOD_2 ( org.ovirt.engine.core.compat.Guid VAR_2 ) throws TYPE_4 { return VAR_3 . METHOD_2 ( VAR_2 ) ; } } ) VAR VAR ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_3 ) RETURN TYPE_3 ( NAME METHOD_2 ) NAME METHOD_2 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return VAR_3 . METHOD_2 ( VAR_2 ) ; )  return VAR_3 . METHOD_2 ( VAR_2 ) ; ) BLOCK BLOCK ) METHOD METHOD ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_5 ( VAR_1 , METHOD_3 ( id ) ) ) INIT = new TYPE_5 ( VAR_1 , METHOD_3 ( id ) ) ) VAR VAR (  return inject ( new TYPE_6 < TYPE_7 , TYPE_3 > ( VAR_5 , VAR_2 , VAR_4 ) ) ; )  return inject ( new TYPE_6 < TYPE_7 , TYPE_3 > ( VAR_5 , VAR_2 , VAR_4 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_3 = STRING_1 )  VAR_3 = STRING_1 ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_2 . METHOD_2 ( VAR_1 , VAR_2 ) ) INIT = TYPE_2 . METHOD_2 ( VAR_1 , VAR_2 ) ) VAR VAR (  TYPE_3 . METHOD_3 ( STRING_2 , ( ( VAR_4 . size ( ) ) == 1 ) ) )  TYPE_3 . METHOD_3 ( STRING_2 , ( ( VAR_4 . size ( ) ) == 1 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND source != null ) COND source != null ( THEN THEN ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDSGroup> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDSGroup> ( NAME list ) NAME list ( INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( source ) ) ) INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( source ) ) ) VAR VAR (  return TYPE_1 . METHOD_1 ( list , VAR_1 , VAR_2 ) ; )  return TYPE_1 . METHOD_1 ( list , VAR_1 , VAR_2 ) ; ) THEN THEN ) IF IF (  return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ( ) ; )  return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_1 ) ( getSelectedItem ( ) ) ) ) INIT = ( ( TYPE_1 ) ( getSelectedItem ( ) ) ) ) VAR VAR ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN (  VAR_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( VAR_3 . Network ) ) )  VAR_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( VAR_3 . Network ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.Map ) RETURN java.util.Map ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.VM ) TYPE TYPE_1.VM ( NAME vm ) NAME vm ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map ) TYPE java.util.Map ( NAME VAR_1 ) NAME VAR_1 ( INIT = map ( ) ) INIT = map ( ) ) VAR VAR (  VAR_1 . put ( STRING_1 , METHOD_2 ( ) ) )  VAR_1 . put ( STRING_1 , METHOD_2 ( ) ) (  VAR_1 . put ( STRING_2 , ( STRING_3 + ( METHOD_3 ( vm , STRING_2 , 2 ) ) ) ) )  VAR_1 . put ( STRING_2 , ( STRING_3 + ( METHOD_3 ( vm , STRING_2 , 2 ) ) ) ) (  VAR_1 . put ( STRING_4 , ( STRING_3 + ( METHOD_3 ( vm , STRING_4 , 2 ) ) ) ) )  VAR_1 . put ( STRING_4 , ( STRING_3 + ( METHOD_3 ( vm , STRING_4 , 2 ) ) ) ) (  VAR_1 . put ( STRING_5 , METHOD_3 ( vm , STRING_5 , INT_1 ) ) )  VAR_1 . put ( STRING_5 , METHOD_3 ( vm , STRING_5 , INT_1 ) ) (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( VAR_2 , null ) ) INIT = METHOD_2 ( VAR_2 , null ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VdsNetworkInterface> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VdsNetworkInterface> ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_3 ( null ) ) INIT = METHOD_3 ( null ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME parameters ) NAME parameters ( INIT = METHOD_4 ( VAR_1 , VAR_3 ) ) INIT = METHOD_4 ( VAR_1 , VAR_3 ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( INIT = ( VAR_1 . getName ( ) ) + STRING_1 ) INIT = ( VAR_1 . getName ( ) ) + STRING_1 ) VAR VAR (  parameters . METHOD_5 ( ) . add ( METHOD_6 ( VAR_4 , INT_1 , STRING_2 ) ) )  parameters . METHOD_5 ( ) . add ( METHOD_6 ( VAR_4 , INT_1 , STRING_2 ) ) (  METHOD_7 ( VAR_1 , VAR_3 ) )  METHOD_7 ( VAR_1 , VAR_3 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_5 ) NAME VAR_5 ( INIT = METHOD_8 ( parameters ) ) INIT = METHOD_8 ( parameters ) ) VAR VAR (  METHOD_9 ( VAR_5 , VAR_6 , VAR_4 ) )  METHOD_9 ( VAR_5 , VAR_6 , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ) ( source ) ) : null ; )  return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ) ( source ) ) : null ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ) ( source ) ) : null ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ) ( source ) ) : null ; } } (  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<java.lang.String> ) RETURN java.util.List<java.lang.String> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.util.List<TYPE_1>> ) TYPE java.util.Map<java.lang.String,java.util.List<TYPE_1>> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_2<java.lang.String,java.util.List<TYPE_1>> ) TYPE TYPE_2<java.lang.String,java.util.List<TYPE_1>> ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_1 . METHOD_2 ( ) ) IN VAR_1 . METHOD_2 ( ) ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_3 . METHOD_3 ( ) ) INIT = VAR_3 . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_3 . getValue ( ) ) INIT = VAR_3 . getValue ( ) ) VAR VAR ( IF IF ( COND ! ( METHOD_4 ( VAR_5 ) ) ) COND ! ( METHOD_4 ( VAR_5 ) ) ( THEN THEN (  VAR_2 . add ( VAR_4 ) )  VAR_2 . add ( VAR_4 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_1 . METHOD_2 ( null ) )  VAR_1 . METHOD_2 ( null ) ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StoragePool ) TYPE org.ovirt.engine.core.common.businessentities.StoragePool ( NAME VAR_2 ) NAME VAR_2 ( INIT = new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ) VAR VAR (  VAR_2 . setId ( VAR_3 ) )  VAR_2 . setId ( VAR_3 ) (  VAR_1 . METHOD_3 ( VAR_2 ) )  VAR_1 . METHOD_3 ( VAR_2 ) ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_1 . getStoragePoolId ( ) ) INIT = VAR_1 . getStoragePoolId ( ) ) VAR VAR (  TYPE_2 . assertEquals ( VAR_3 , VAR_4 ) )  TYPE_2 . assertEquals ( VAR_3 , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VM> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VM> ( NAME list ) NAME list ( INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ) ( returnValue ) ) ) INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ) ( returnValue ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ( INIT = ( ( TYPE_1 ) ( target ) ) ) INIT = ( ( TYPE_1 ) ( target ) ) ) VAR VAR (  model . setItems ( list ) )  model . setItems ( list ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( VAR_2 . Guid class ) ) ) . thenReturn ( TYPE_2 . METHOD_3 ( ) ) )  org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( VAR_2 . Guid class ) ) ) . thenReturn ( TYPE_2 . METHOD_3 ( ) ) (  org.mockito.Mockito.when ( VAR_1 . METHOD_4 ( TYPE_1 . METHOD_5 ( ) ) ) . thenReturn ( TYPE_2 . METHOD_3 ( ) ) )  org.mockito.Mockito.when ( VAR_1 . METHOD_4 ( TYPE_1 . METHOD_5 ( ) ) ) . thenReturn ( TYPE_2 . METHOD_3 ( ) ) (  VAR_3 . METHOD_6 ( VAR_4 , java.lang.Boolean . FALSE ) )  VAR_3 . METHOD_6 ( VAR_4 , java.lang.Boolean . FALSE ) (  VAR_3 . METHOD_6 ( VAR_5 , VAR_6 , java.lang.Boolean . TRUE ) )  VAR_3 . METHOD_6 ( VAR_5 , VAR_6 , java.lang.Boolean . TRUE ) (  METHOD_7 ( ) )  METHOD_7 ( ) (  METHOD_8 ( ) )  METHOD_8 ( ) (  METHOD_9 ( VAR_7 ) )  METHOD_9 ( VAR_7 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_1 ) ( target ) ) ) INIT = ( ( TYPE_1 ) ( target ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Disk> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Disk> ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Disk > ) ( returnValue ) ) ) INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Disk > ) ( returnValue ) ) ) VAR VAR (  VAR_3 = VAR_2 )  VAR_3 = VAR_2 (  VAR_1 . METHOD_2 ( ) )  VAR_1 . METHOD_2 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( ( ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) ) || ( ( VAR_1 ) < ( ( VAR_2 < java.lang.Integer > METHOD_3 ( VAR_3 ) ) - 1 ) ) ) && ( METHOD_4 ( ) . METHOD_5 ( ) ) ) && ( METHOD_4 ( ) . METHOD_6 ( ) ) ) COND ( ( ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) ) || ( ( VAR_1 ) < ( ( VAR_2 < java.lang.Integer > METHOD_3 ( VAR_3 ) ) - 1 ) ) ) && ( METHOD_4 ( ) . METHOD_5 ( ) ) ) && ( METHOD_4 ( ) . METHOD_6 ( ) ) ( THEN THEN (  ( VAR_1 ) ++ )  ( VAR_1 ) ++ (  TYPE_1 . METHOD_7 ( ) )  TYPE_1 . METHOD_7 ( ) ) THEN THEN ( ELSE ELSE (  TYPE_1 . METHOD_8 ( ) . METHOD_9 ( false ) )  TYPE_1 . METHOD_8 ( ) . METHOD_9 ( false ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.DiskImage> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.DiskImage> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( VAR_1 ) )  METHOD_2 ( VAR_1 ) ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_2 ) ( target ) ) ) INIT = ( ( TYPE_2 ) ( target ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Disk> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Disk> ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Disk > ) ( returnValue ) ) ) INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Disk > ) ( returnValue ) ) ) VAR VAR (  VAR_2 . METHOD_4 ( VAR_3 ) )  VAR_2 . METHOD_4 ( VAR_3 ) (  VAR_2 . METHOD_5 ( ) )  VAR_2 . METHOD_5 ( ) ) BLOCK BLOCK ) METHOD METHOD (  TYPE_1 . METHOD_3 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_2 VAR_2 = ( ( TYPE_2 ) ( target ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Disk > VAR_3 = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Disk > ) ( returnValue ) ) ; VAR_2 . METHOD_4 ( VAR_3 ) ; VAR_2 . METHOD_5 ( ) ; } } ) ) )  TYPE_1 . METHOD_3 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_2 VAR_2 = ( ( TYPE_2 ) ( target ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Disk > VAR_3 = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Disk > ) ( returnValue ) ) ; VAR_2 . METHOD_4 ( VAR_3 ) ; VAR_2 . METHOD_5 ( ) ; } } ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.HashMap<org.ovirt.engine.core.compat.Guid,org.ovirt.engine.core.common.businessentities.DiskImage> ) RETURN java.util.HashMap<org.ovirt.engine.core.compat.Guid,org.ovirt.engine.core.common.businessentities.DiskImage> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.HashMap<org.ovirt.engine.core.compat.Guid,org.ovirt.engine.core.common.businessentities.DiskImage> ) TYPE java.util.HashMap<org.ovirt.engine.core.compat.Guid,org.ovirt.engine.core.common.businessentities.DiskImage> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.HashMap < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ) INIT = new java.util.HashMap < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.DiskImage ) TYPE org.ovirt.engine.core.common.businessentities.DiskImage ( NAME VAR_3 ) NAME VAR_3 ( IN ( ( java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > ) ( getEntity ( VAR_4 . List class , ) IN ( ( java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > ) ( getEntity ( VAR_4 . List class , ( BLOCK BLOCK ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  new TYPE_1 ( VAR_1 ) , )  new TYPE_1 ( VAR_1 ) , (  VAR_2 . put ( VAR_3 . getId ( ) , VAR_3 ) )  VAR_2 . put ( VAR_3 . getId ( ) , VAR_3 ) (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.DiskImage ) TYPE org.ovirt.engine.core.common.businessentities.DiskImage ( NAME diskImage ) NAME diskImage ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( diskImage . METHOD_3 ( ) , diskImage . getId ( ) ) )  TYPE_1 . METHOD_2 ( diskImage . METHOD_3 ( ) , diskImage . getId ( ) ) (  TYPE_1 . METHOD_4 ( diskImage ) )  TYPE_1 . METHOD_4 ( diskImage ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( BLOCK BLOCK (  VAR_2 . error ( STRING_1 , VAR_1 ) )  VAR_2 . error ( STRING_1 , VAR_1 ) (  throw new TYPE_3 ( VAR_3 , VAR_1 ) ; )  throw new TYPE_3 ( VAR_3 , VAR_1 ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.DiskImage ) TYPE org.ovirt.engine.core.common.businessentities.DiskImage ( NAME disk ) NAME disk ( INIT = new org.ovirt.engine.core.common.businessentities.DiskImage ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.DiskImage ( ) ) VAR VAR (  disk . METHOD_2 ( VAR_1 ) )  disk . METHOD_2 ( VAR_1 ) (  disk . METHOD_3 ( VAR_2 ) )  disk . METHOD_3 ( VAR_2 ) (  disk . METHOD_4 ( true ) )  disk . METHOD_4 ( true ) (  disk . METHOD_5 ( vmId ) )  disk . METHOD_5 ( vmId ) (  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( command ) . METHOD_6 ( ) )  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( command ) . METHOD_6 ( ) (  org.mockito.Mockito.when ( VAR_3 . get ( VAR_1 ) ) . thenReturn ( disk ) )  org.mockito.Mockito.when ( VAR_3 . get ( VAR_1 ) ) . thenReturn ( disk ) (  METHOD_7 ( true ) )  METHOD_7 ( true ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( VAR_2 , null ) ) INIT = new TYPE_1 ( VAR_2 , null ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR (  TYPE_2 . assertEquals ( VAR_2 , VAR_3 ) )  TYPE_2 . assertEquals ( VAR_2 , VAR_3 ) ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_1 . METHOD_3 ( ) ) INIT = VAR_1 . METHOD_3 ( ) ) VAR VAR (  TYPE_2 . assertEquals ( VAR_5 , VAR_4 ) )  TYPE_2 . assertEquals ( VAR_5 , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = dao . METHOD_2 ( VAR_2 , VAR_3 ) ) INIT = dao . METHOD_2 ( VAR_2 , VAR_3 ) ) VAR VAR (  TYPE_2 . METHOD_3 ( VAR_1 ) )  TYPE_2 . METHOD_3 ( VAR_1 ) (  TYPE_2 . assertEquals ( VAR_1 . METHOD_4 ( ) , VAR_2 ) )  TYPE_2 . assertEquals ( VAR_1 . METHOD_4 ( ) , VAR_2 ) (  TYPE_2 . assertEquals ( VAR_1 . METHOD_5 ( ) , VAR_3 ) )  TYPE_2 . assertEquals ( VAR_1 . METHOD_5 ( ) , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( 1 , true ) )  METHOD_2 ( 1 , true ) (  VAR_1 . METHOD_3 ( ) )  VAR_1 . METHOD_3 ( ) ( TRY TRY ( BLOCK BLOCK (  resource . METHOD_4 ( ) )  resource . METHOD_4 ( ) (  METHOD_5 ( STRING_1 ) )  METHOD_5 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( BLOCK BLOCK (  METHOD_6 ( VAR_2 . METHOD_7 ( ) ) )  METHOD_6 ( VAR_2 . METHOD_7 ( ) ) (  assertEquals ( INT_1 , VAR_2 . METHOD_7 ( ) . getStatus ( ) ) )  assertEquals ( INT_1 , VAR_2 . METHOD_7 ( ) . getStatus ( ) ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN TYPE_1.Disk ) RETURN TYPE_1.Disk ( NAME getModel ) NAME getModel ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.Disk ) TYPE TYPE_1.Disk ( NAME model ) NAME model ( INIT = new TYPE_1 . Disk ( ) ) INIT = new TYPE_1 . Disk ( ) ) VAR VAR (  model . METHOD_1 ( TYPE_2 . toString ( ) ) )  model . METHOD_1 ( TYPE_2 . toString ( ) ) (  model . METHOD_2 ( TYPE_3 . toString ( ) ) )  model . METHOD_2 ( TYPE_3 . toString ( ) ) (  model . METHOD_3 ( true ) )  model . METHOD_3 ( true ) (  model . METHOD_4 ( false ) )  model . METHOD_4 ( false ) (  model . METHOD_5 ( false ) )  model . METHOD_5 ( false ) (  model . METHOD_6 ( false ) )  model . METHOD_6 ( false ) (  model . METHOD_7 ( true ) )  model . METHOD_7 ( true ) (  return model ; )  return model ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( getVm ( ) . METHOD_2 ( ) ) != null ) COND ( getVm ( ) . METHOD_2 ( ) ) != null ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( IN getVm ( ) . METHOD_2 ( ) ) IN getVm ( ) . METHOD_2 ( ) ( BLOCK BLOCK ( IF IF ( COND METHOD_3 ( ) . METHOD_4 ( getVm ( ) . getId ( ) , VAR_1 . getId ( ) ) ) COND METHOD_3 ( ) . METHOD_4 ( getVm ( ) . getId ( ) , VAR_1 . getId ( ) ) ( THEN THEN (  METHOD_3 ( ) . METHOD_5 ( VAR_1 ) )  METHOD_3 ( ) . METHOD_5 ( VAR_1 ) ) THEN THEN ( ELSE ELSE (  METHOD_3 ( ) . METHOD_6 ( VAR_1 ) )  METHOD_3 ( ) . METHOD_6 ( VAR_1 ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( STRING_1 , VAR_2 , STRING_2 , STRING_3 , STRING_4 , STRING_5 ) ) INIT = METHOD_2 ( STRING_1 , VAR_2 , STRING_2 , STRING_3 , STRING_4 , STRING_5 ) ) VAR VAR (  parameters . METHOD_3 ( VAR_1 ) )  parameters . METHOD_3 ( VAR_1 ) (  org.mockito.Mockito.when ( VAR_3 . get ( VAR_1 . METHOD_4 ( ) ) ) . thenReturn ( VAR_4 ) )  org.mockito.Mockito.when ( VAR_3 . get ( VAR_1 . METHOD_4 ( ) ) ) . thenReturn ( VAR_4 ) (  TYPE_2 . METHOD_5 ( command , VAR_5 ) )  TYPE_2 . METHOD_5 ( command , VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.doReturn ( METHOD_2 ( false ) ) . when ( VAR_1 ) . METHOD_3 ( TYPE_1 . METHOD_4 ( VAR_2 ) , TYPE_1 . any ( VAR_3 class ) ) )  org.mockito.Mockito.doReturn ( METHOD_2 ( false ) ) . when ( VAR_1 ) . METHOD_3 ( TYPE_1 . METHOD_4 ( VAR_2 ) , TYPE_1 . any ( VAR_3 class ) ) (  VAR_1 . METHOD_5 ( ) )  VAR_1 . METHOD_5 ( ) (  org.mockito.Mockito . METHOD_6 ( VAR_4 , org.mockito.Mockito . METHOD_7 ( 0 ) ) . METHOD_8 ( TYPE_1 . METHOD_9 ( ) ) )  org.mockito.Mockito . METHOD_6 ( VAR_4 , org.mockito.Mockito . METHOD_7 ( 0 ) ) . METHOD_8 ( TYPE_1 . METHOD_9 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  assertEquals ( STRING_1 , VAR_1 ) )  assertEquals ( STRING_1 , VAR_1 ) (  METHOD_2 ( VAR_3 , VAR_4 class , new java.lang.String [ ] { STRING_2 , STRING_3 } , new java.lang.Object [ ] { VAR_5 [ 0 ] , VAR_6 } , METHOD_3 ( ) , VAR_2 ) )  METHOD_2 ( VAR_3 , VAR_4 class , new java.lang.String [ ] { STRING_2 , STRING_3 } , new java.lang.Object [ ] { VAR_5 [ 0 ] , VAR_6 } , METHOD_3 ( ) , VAR_2 ) (  VAR_7 . METHOD_4 ( ) )  VAR_7 . METHOD_4 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  org.mockito.Mockito.doReturn ( new TYPE_1 . ValidationResult ( VAR_1 ) ) . when ( VAR_2 ) . METHOD_3 ( ) )  org.mockito.Mockito.doReturn ( new TYPE_1 . ValidationResult ( VAR_1 ) ) . when ( VAR_2 ) . METHOD_3 ( ) (  TYPE_2 . METHOD_4 ( command . validate ( ) ) )  TYPE_2 . METHOD_4 ( command . validate ( ) ) (  TYPE_2 . METHOD_5 ( command . getReturnValue ( ) . METHOD_6 ( ) . METHOD_7 ( TYPE_3 . toString ( ) ) ) )  TYPE_2 . METHOD_5 ( command . getReturnValue ( ) . METHOD_6 ( ) . METHOD_7 ( TYPE_3 . toString ( ) ) ) (  org.mockito.Mockito . METHOD_8 ( VAR_2 ) . METHOD_3 ( ) )  org.mockito.Mockito . METHOD_8 ( VAR_2 ) . METHOD_3 ( ) (  org.mockito.Mockito . METHOD_8 ( VAR_2 , org.mockito.Mockito . METHOD_9 ( ) ) . METHOD_10 ( TYPE_4 . METHOD_11 ( ) ) )  org.mockito.Mockito . METHOD_8 ( VAR_2 , org.mockito.Mockito . METHOD_9 ( ) ) . METHOD_10 ( TYPE_4 . METHOD_11 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = INT_1 ) INIT = INT_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = INT_2 ) INIT = INT_2 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_3 ) NAME VAR_3 ( INIT = org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) INIT = org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) VAR VAR (  METHOD_3 ( VAR_3 , VAR_4 ) )  METHOD_3 ( VAR_3 , VAR_4 ) (  METHOD_4 ( ) )  METHOD_4 ( ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_5 ) NAME VAR_5 ( INIT = METHOD_5 ( VAR_3 , VAR_1 , VAR_2 ) ) INIT = METHOD_5 ( VAR_3 , VAR_1 , VAR_2 ) ) VAR VAR (  METHOD_6 ( ) )  METHOD_6 ( ) (  METHOD_7 ( VAR_5 , true ) )  METHOD_7 ( VAR_5 , true ) (  TYPE_2 . METHOD_8 ( command . METHOD_9 ( ) ) )  TYPE_2 . METHOD_8 ( command . METHOD_9 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME validate ) NAME validate ( BLOCK BLOCK (  METHOD_1 ( ) . METHOD_2 ( new TYPE_1 [ ] { new TYPE_2 ( ) } ) )  METHOD_1 ( ) . METHOD_2 ( new TYPE_1 [ ] { new TYPE_2 ( ) } ) (  METHOD_3 ( ) . METHOD_2 ( new TYPE_1 [ ] { new TYPE_2 ( ) } ) )  METHOD_3 ( ) . METHOD_2 ( new TYPE_1 [ ] { new TYPE_2 ( ) } ) (  METHOD_4 ( ) . METHOD_5 ( new TYPE_1 [ ] { new TYPE_2 ( ) } ) )  METHOD_4 ( ) . METHOD_5 ( new TYPE_1 [ ] { new TYPE_2 ( ) } ) (  return ( ( METHOD_1 ( ) . METHOD_6 ( ) ) && ( METHOD_3 ( ) . METHOD_6 ( ) ) ) && ( METHOD_4 ( ) . METHOD_6 ( ) ) ; )  return ( ( METHOD_1 ( ) . METHOD_6 ( ) ) && ( METHOD_3 ( ) . METHOD_6 ( ) ) ) && ( METHOD_4 ( ) . METHOD_6 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 = new TYPE_1 ( ) )  VAR_1 = new TYPE_1 ( ) ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Integer ) RETURN java.lang.Integer ( NAME METHOD_2 ) NAME METHOD_2 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return VAR_1 . METHOD_3 ( ) . getValue ( ) ; )  return VAR_1 . METHOD_3 ( ) . getValue ( ) ; ) BLOCK BLOCK ) METHOD METHOD (  VAR_2 = new TYPE_2 < java.lang.Integer > ( new TYPE_3 < java.lang.Integer > ( ) , new TYPE_4 < java.lang.Integer > ( ) { public java.lang.Integer METHOD_2 ( TYPE_5 VAR_3 ) throws TYPE_6 { return VAR_1 . METHOD_3 ( ) . getValue ( ) ; } } ) )  VAR_2 = new TYPE_2 < java.lang.Integer > ( new TYPE_3 < java.lang.Integer > ( ) , new TYPE_4 < java.lang.Integer > ( ) { public java.lang.Integer METHOD_2 ( TYPE_5 VAR_3 ) throws TYPE_6 { return VAR_1 . METHOD_3 ( ) . getValue ( ) ; } } ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_1 ( false ) ) INIT = new TYPE_1 ( false ) ) VAR VAR (  VAR_3 . METHOD_2 ( TYPE_2 . METHOD_3 ( ) . getStoragePoolId ( ) ) )  VAR_3 . METHOD_2 ( TYPE_2 . METHOD_3 ( ) . getStoragePoolId ( ) ) (  VAR_3 . METHOD_4 ( VAR_1 ) )  VAR_3 . METHOD_4 ( VAR_1 ) (  VAR_3 . METHOD_5 ( VAR_2 ) )  VAR_3 . METHOD_5 ( VAR_2 ) (  VAR_3 . METHOD_6 ( VAR_4 ) )  VAR_3 . METHOD_6 ( VAR_4 ) (  TYPE_3 . getInstance ( ) . METHOD_7 ( VAR_5 , VAR_3 , METHOD_8 ( ) ) )  TYPE_3 . getInstance ( ) . METHOD_7 ( VAR_5 , VAR_3 , METHOD_8 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( STRING_1 , TYPE_1 . METHOD_3 ( ) ) )  VAR_1 . METHOD_2 ( STRING_1 , TYPE_1 . METHOD_3 ( ) ) ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME vds ) NAME vds ( INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_4 ( ) . get ( TYPE_1 . METHOD_3 ( ) ) ) INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_4 ( ) . get ( TYPE_1 . METHOD_3 ( ) ) ) VAR VAR (  VAR_1 . METHOD_2 ( STRING_2 , TYPE_1 . METHOD_3 ( ) ) )  VAR_1 . METHOD_2 ( STRING_2 , TYPE_1 . METHOD_3 ( ) ) (  VAR_2 . METHOD_5 ( vds , false ) )  VAR_2 . METHOD_5 ( vds , false ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME result ) NAME result ( INIT = dao . METHOD_2 ( VAR_1 . getId ( ) ) ) INIT = dao . METHOD_2 ( VAR_1 . getId ( ) ) ) VAR VAR (  TYPE_2 . METHOD_3 ( result ) )  TYPE_2 . METHOD_3 ( result ) (  TYPE_2 . METHOD_4 ( result . isEmpty ( ) ) )  TYPE_2 . METHOD_4 ( result . isEmpty ( ) ) ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( IN result ) IN result ( BLOCK BLOCK (  TYPE_2 . assertEquals ( VAR_1 . getId ( ) , VAR_2 . METHOD_5 ( ) ) )  TYPE_2 . assertEquals ( VAR_1 . getId ( ) , VAR_2 . METHOD_5 ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ! ( validate ( TYPE_1 . METHOD_2 ( TYPE_2 . getParameters ( ) . METHOD_3 ( ) , TYPE_2 . getParameters ( ) . METHOD_4 ( ) , TYPE_2 . getParameters ( ) . METHOD_5 ( ) , TYPE_2 . METHOD_6 ( ) , TYPE_2 . METHOD_7 ( ) . getId ( ) ) ) ) ) COND ! ( validate ( TYPE_1 . METHOD_2 ( TYPE_2 . getParameters ( ) . METHOD_3 ( ) , TYPE_2 . getParameters ( ) . METHOD_4 ( ) , TYPE_2 . getParameters ( ) . METHOD_5 ( ) , TYPE_2 . METHOD_6 ( ) , TYPE_2 . METHOD_7 ( ) . getId ( ) ) ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.lang.Boolean ) RETURN java.lang.Boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Integer ) TYPE java.lang.Integer ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Version ) TYPE org.ovirt.engine.core.compat.Version ( NAME version ) NAME version ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<java.lang.Integer,org.ovirt.engine.core.compat.Version> ) TYPE TYPE_1<java.lang.Integer,org.ovirt.engine.core.compat.Version> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 < java.lang.Integer , org.ovirt.engine.core.compat . Version > ( VAR_1 , version ) ) INIT = new TYPE_1 < java.lang.Integer , org.ovirt.engine.core.compat . Version > ( VAR_1 , version ) ) VAR VAR ( IF IF ( COND TYPE_2 . METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ) COND TYPE_2 . METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ( THEN THEN (  return TYPE_2 . METHOD_2 ( ) . get ( VAR_2 ) ; )  return TYPE_2 . METHOD_2 ( ) . get ( VAR_2 ) ; ) THEN THEN ) IF IF (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<org.ovirt.engine.core.compat.Guid,TYPE_2> ) RETURN TYPE_1<org.ovirt.engine.core.compat.Guid,TYPE_2> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME returnValue ) NAME returnValue ) VAR VAR (  returnValue = METHOD_2 ( VAR_1 , new TYPE_3 ( VAR_2 , entity . METHOD_3 ( ) , entity . METHOD_4 ( ) , entity . getName ( ) , VAR_3 , VAR_4 ) ) )  returnValue = METHOD_2 ( VAR_1 , new TYPE_3 ( VAR_2 , entity . METHOD_3 ( ) , entity . METHOD_4 ( ) , entity . getName ( ) , VAR_3 , VAR_4 ) ) (  return new TYPE_1 < org.ovirt.engine.core.compat.Guid , TYPE_2 > ( VAR_2 , returnValue ) ; )  return new TYPE_1 < org.ovirt.engine.core.compat.Guid , TYPE_2 > ( VAR_2 , returnValue ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.HashMap<java.lang.Integer,TYPE_1> ) RETURN java.util.HashMap<java.lang.Integer,TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.HashMap<java.lang.Integer,TYPE_1> ) TYPE java.util.HashMap<java.lang.Integer,TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.HashMap < > ( ) ) INIT = new java.util.HashMap < > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( IN METHOD_2 ( ) ) IN METHOD_2 ( ) ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_3 ( VAR_4 . get ( VAR_2 ) , STRING_1 , null ) ) INIT = METHOD_3 ( VAR_4 . get ( VAR_2 ) , STRING_1 , null ) ) VAR VAR ( IF IF ( COND VAR_3 != null ) COND VAR_3 != null ( THEN THEN (  VAR_1 . put ( VAR_2 , TYPE_1 . valueOf ( VAR_3 ) ) )  VAR_1 . put ( VAR_2 , TYPE_1 . valueOf ( VAR_3 ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  org.mockito.Mockito.doReturn ( domain ) . when ( cmd ) . METHOD_3 ( ) )  org.mockito.Mockito.doReturn ( domain ) . when ( cmd ) . METHOD_3 ( ) (  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( cmd ) . METHOD_4 ( ) )  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( cmd ) . METHOD_4 ( ) (  org.mockito.Mockito.when ( VAR_1 . METHOD_5 ( TYPE_1 . any ( VAR_2 . Guid class ) ) ) . thenReturn ( TYPE_2 . METHOD_6 ( ) ) )  org.mockito.Mockito.when ( VAR_1 . METHOD_5 ( TYPE_1 . any ( VAR_2 . Guid class ) ) ) . thenReturn ( TYPE_2 . METHOD_6 ( ) ) (  TYPE_3 . METHOD_7 ( cmd . METHOD_8 ( ) ) )  TYPE_3 . METHOD_7 ( cmd . METHOD_8 ( ) ) (  TYPE_3 . METHOD_7 ( cmd . getReturnValue ( ) . METHOD_9 ( ) . isEmpty ( ) ) )  TYPE_3 . METHOD_7 ( cmd . getReturnValue ( ) . METHOD_9 ( ) . isEmpty ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( VAR_1 != null ) & ( VAR_1 . METHOD_2 ( STRING_1 ) ) ) && ( VAR_1 . METHOD_3 ( STRING_2 ) ) ) COND ( ( VAR_1 != null ) & ( VAR_1 . METHOD_2 ( STRING_1 ) ) ) && ( VAR_1 . METHOD_3 ( STRING_2 ) ) ( THEN THEN (  return VAR_1 . METHOD_4 ( 1 , ( ( VAR_1 . length ( ) ) - 2 ) ) ; )  return VAR_1 . METHOD_4 ( 1 , ( ( VAR_1 . length ( ) ) - 2 ) ) ; ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.Integer ) TYPE java.lang.Integer ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.lang.Integer ( INT_1 ) ) INIT = new java.lang.Integer ( INT_1 ) ) VAR VAR (  TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_1 , new java.lang.Integer ( INT_2 ) ) ) )  TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_1 , new java.lang.Integer ( INT_2 ) ) ) (  TYPE_1 . METHOD_4 ( TYPE_2 . METHOD_3 ( VAR_1 , new java.lang.Integer ( INT_1 ) ) ) )  TYPE_1 . METHOD_4 ( TYPE_2 . METHOD_3 ( VAR_1 , new java.lang.Integer ( INT_1 ) ) ) (  TYPE_1 . METHOD_4 ( TYPE_2 . METHOD_3 ( null , null ) ) )  TYPE_1 . METHOD_4 ( TYPE_2 . METHOD_3 ( null , null ) ) (  TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_1 , null ) ) )  TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_1 , null ) ) (  TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( null , VAR_1 ) ) )  TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( null , VAR_1 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME id ) NAME id ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_2 ( VAR_3 , new TYPE_4 ( METHOD_3 ( ) , id ) ) ) INIT = VAR_2 . METHOD_2 ( VAR_3 , new TYPE_4 ( METHOD_3 ( ) , id ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_4 ) NAME VAR_4 ( INIT = ( ( TYPE_5 ) ( VAR_1 . getReturnValue ( ) ) ) ) INIT = ( ( TYPE_5 ) ( VAR_1 . getReturnValue ( ) ) ) ) VAR VAR (  return METHOD_4 ( VAR_4 ) ; )  return METHOD_4 ( VAR_4 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME params ) NAME params ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  params . METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) )  params . METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) (  params . METHOD_4 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) )  params . METHOD_4 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) (  cmd = org.mockito.Mockito . METHOD_5 ( new TYPE_2 ( params ) ) )  cmd = org.mockito.Mockito . METHOD_5 ( new TYPE_2 ( params ) ) (  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( cmd ) . METHOD_6 ( ) )  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( cmd ) . METHOD_6 ( ) (  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( cmd ) . METHOD_7 ( ) )  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( cmd ) . METHOD_7 ( ) (  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( cmd ) . METHOD_8 ( ) )  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( cmd ) . METHOD_8 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( java.lang.Boolean ) ( returnValue ) ) ) COND ( ( java.lang.Boolean ) ( returnValue ) ) ( THEN THEN (  METHOD_1 ( VAR_1 , VAR_2 ) )  METHOD_1 ( VAR_1 , VAR_2 ) ) THEN THEN ( ELSE ELSE (  METHOD_2 ( ) )  METHOD_2 ( ) (  METHOD_3 ( ) . METHOD_4 ( ) . add ( VAR_3 . METHOD_5 ( ) ) )  METHOD_3 ( ) . METHOD_4 ( ) . add ( VAR_3 . METHOD_5 ( ) ) (  METHOD_3 ( ) . METHOD_6 ( false ) )  METHOD_3 ( ) . METHOD_6 ( false ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.uicommonweb.UICommand ) TYPE org.ovirt.engine.ui.uicommonweb.UICommand ( NAME command ) NAME command ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  super . METHOD_1 ( command ) )  super . METHOD_1 ( command ) ( IF IF ( COND command == ( METHOD_2 ( ) ) ) COND command == ( METHOD_2 ( ) ) ( THEN THEN (  METHOD_3 ( ) )  METHOD_3 ( ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND TYPE_1 . METHOD_4 ( command . getName ( ) , STRING_1 ) ) COND TYPE_1 . METHOD_4 ( command . getName ( ) , STRING_1 ) ( THEN THEN (  METHOD_5 ( ) )  METHOD_5 ( ) ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . METHOD_2 ( VAR_4 , new TYPE_4 ( domain , VAR_1 , false ) ) ) INIT = VAR_3 . METHOD_2 ( VAR_4 , new TYPE_4 ( domain , VAR_1 , false ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_5> ) TYPE java.util.List<TYPE_5> ( NAME VAR_5 ) NAME VAR_5 ( INIT = ( ( java.util.List < TYPE_5 > ) ( VAR_2 . getReturnValue ( ) ) ) ) INIT = ( ( java.util.List < TYPE_5 > ) ( VAR_2 . getReturnValue ( ) ) ) ) VAR VAR (  return METHOD_3 ( VAR_5 ) ; )  return METHOD_3 ( VAR_5 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME command ) NAME command ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_2 ( ) )  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_2 ( ) (  org.mockito.Mockito.doReturn ( METHOD_3 ( VAR_2 ) ) . when ( command ) . METHOD_4 ( ) )  org.mockito.Mockito.doReturn ( METHOD_3 ( VAR_2 ) ) . when ( command ) . METHOD_4 ( ) (  org.mockito.Mockito.doReturn ( METHOD_5 ( VAR_3 ) ) . when ( VAR_1 ) . METHOD_6 ( VAR_3 ) )  org.mockito.Mockito.doReturn ( METHOD_5 ( VAR_3 ) ) . when ( VAR_1 ) . METHOD_6 ( VAR_3 ) (  org.mockito.Mockito.doReturn ( METHOD_5 ( VAR_4 ) ) . when ( VAR_1 ) . METHOD_6 ( VAR_4 ) )  org.mockito.Mockito.doReturn ( METHOD_5 ( VAR_4 ) ) . when ( VAR_1 ) . METHOD_6 ( VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME VAR_1 ) NAME VAR_1 ( INIT = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ) INIT = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ) VAR VAR ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_3 = ( ( java.util.HashMap < java.lang.Integer , TYPE_1 > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) )  VAR_3 = ( ( java.util.HashMap < java.lang.Integer , TYPE_1 > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD (  VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { VAR_3 = ( ( java.util.HashMap < java.lang.Integer , TYPE_1 > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ; } } )  VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { VAR_3 = ( ( java.util.HashMap < java.lang.Integer , TYPE_1 > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ; } } (  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_4 , new TYPE_3 ( VAR_5 ) , VAR_1 ) )  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_4 , new TYPE_3 ( VAR_5 ) , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME vds ) NAME vds ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return ( ( ! ( METHOD_2 ( vds ) ) ) && ( ! ( vds . getId ( ) . equals ( VAR_1 . getId ( ) ) ) ) ) && ( vds . METHOD_3 ( ) . equals ( VAR_1 . METHOD_3 ( ) ) ) ; )  return ( ( ! ( METHOD_2 ( vds ) ) ) && ( ! ( vds . getId ( ) . equals ( VAR_1 . getId ( ) ) ) ) ) && ( vds . METHOD_3 ( ) . equals ( VAR_1 . METHOD_3 ( ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME returnValue ) NAME returnValue ( INIT = false ) INIT = false ) VAR VAR ( IF IF ( COND ( METHOD_2 ( ) ) != null ) COND ( METHOD_2 ( ) ) != null ( THEN THEN ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME VAR_3 ) NAME VAR_3 ( INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . get ( METHOD_2 ( ) ) ) INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . get ( METHOD_2 ( ) ) ) VAR VAR (  VAR_4 . METHOD_4 ( STRING_1 , METHOD_2 ( ) , VAR_3 . getName ( ) , VAR_3 . METHOD_5 ( ) ) )  VAR_4 . METHOD_4 ( STRING_1 , METHOD_2 ( ) , VAR_3 . getName ( ) , VAR_3 . METHOD_5 ( ) ) (  returnValue = METHOD_6 ( VAR_1 , VAR_2 , new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( TYPE_1 . METHOD_7 ( VAR_3 ) ) ) )  returnValue = METHOD_6 ( VAR_1 , VAR_2 , new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( TYPE_1 . METHOD_7 ( VAR_3 ) ) ) ) THEN THEN ) IF IF (  return returnValue ; )  return returnValue ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.ArrayList<org.ovirt.engine.core.common.businessentities.DiskImage> ) RETURN java.util.ArrayList<org.ovirt.engine.core.common.businessentities.DiskImage> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.DiskImage> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.DiskImage> ( NAME VAR_2 ) NAME VAR_2 ( INIT = null ) INIT = null ) VAR VAR ( IF IF ( COND ( VAR_1 != null ) && ( VAR_1 . METHOD_2 ( ) ) ) COND ( VAR_1 != null ) && ( VAR_1 . METHOD_2 ( ) ) ( THEN THEN (  VAR_2 = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) )  VAR_2 = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ( FOR-EACH FOR-EACH ( TYPE TYPE_2.Disk ) TYPE TYPE_2.Disk ( NAME disk ) NAME disk ( IN VAR_1 . METHOD_3 ( ) ) IN VAR_1 . METHOD_3 ( ) ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.DiskImage ) TYPE org.ovirt.engine.core.common.businessentities.DiskImage ( NAME diskImage ) NAME diskImage ( INIT = ( ( org.ovirt.engine.core.common.businessentities.DiskImage ) ( TYPE_3 . map ( disk , null ) ) ) ) INIT = ( ( org.ovirt.engine.core.common.businessentities.DiskImage ) ( TYPE_3 . map ( disk , null ) ) ) ) VAR VAR (  VAR_2 . add ( diskImage ) )  VAR_2 . add ( diskImage ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.DiskImage ) TYPE org.ovirt.engine.core.common.businessentities.DiskImage ( NAME diskImage ) NAME diskImage ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( IF IF ( COND ( diskImage != null ) && ( ( diskImage . METHOD_3 ( ) ) != VAR_1 ) ) COND ( diskImage != null ) && ( ( diskImage . METHOD_3 ( ) ) != VAR_1 ) ( THEN THEN (  diskImage . METHOD_1 ( VAR_1 ) )  diskImage . METHOD_1 ( VAR_1 ) (  TYPE_2 . METHOD_4 ( diskImage . METHOD_5 ( ) . getId ( ) , VAR_1 ) )  TYPE_2 . METHOD_4 ( diskImage . METHOD_5 ( ) . getId ( ) , VAR_1 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_1 ) ( model ) ) ) INIT = ( ( TYPE_1 ) ( model ) ) ) VAR VAR (  VAR_2 . setItems ( ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmTemplate > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) ) ) )  VAR_2 . setItems ( ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmTemplate > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) ) ) (  VAR_2 . METHOD_2 ( ( ( ( ( java.util.List ) ( VAR_2 . METHOD_3 ( ) ) ) . size ( ) ) == 0 ) ) )  VAR_2 . METHOD_2 ( ( ( ( ( java.util.List ) ( VAR_2 . METHOD_3 ( ) ) ) . size ( ) ) == 0 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<?extendsTYPE_2,?> ) RETURN TYPE_1<?extendsTYPE_2,?> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.uicommonweb.UICommand ) TYPE org.ovirt.engine.ui.uicommonweb.UICommand ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . getName ( ) ) INIT = VAR_1 . getName ( ) ) VAR VAR ( IF IF ( COND VAR_3 == STRING_1 ) COND VAR_3 == STRING_1 ( THEN THEN (  return VAR_4 . get ( ) ; )  return VAR_4 . get ( ) ; ) THEN THEN ( ELSE ELSE ( IF IF ( COND VAR_3 == STRING_2 ) COND VAR_3 == STRING_2 ( THEN THEN (  return VAR_5 . get ( ) ; )  return VAR_5 . get ( ) ; ) THEN THEN ( ELSE ELSE (  return super . METHOD_1 ( source , VAR_1 , VAR_2 ) ; )  return super . METHOD_1 ( source , VAR_1 , VAR_2 ) ; ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME rs ) NAME rs ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME entity ) NAME entity ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  entity . setId ( METHOD_2 ( rs , STRING_1 ) ) )  entity . setId ( METHOD_2 ( rs , STRING_1 ) ) (  entity . METHOD_3 ( rs.getString ( STRING_2 ) ) )  entity . METHOD_3 ( rs.getString ( STRING_2 ) ) (  entity . METHOD_4 ( rs . METHOD_5 ( STRING_3 ) ) )  entity . METHOD_4 ( rs . METHOD_5 ( STRING_3 ) ) (  entity . METHOD_6 ( rs.getString ( STRING_4 ) ) )  entity . METHOD_6 ( rs.getString ( STRING_4 ) ) (  entity . METHOD_7 ( rs.getString ( STRING_5 ) ) )  entity . METHOD_7 ( rs.getString ( STRING_5 ) ) (  entity . METHOD_8 ( new TYPE_4 ( rs . METHOD_9 ( STRING_6 ) ) ) )  entity . METHOD_8 ( new TYPE_4 ( rs . METHOD_9 ( STRING_6 ) ) ) (  return entity ; )  return entity ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ( STRING_1 + ( VAR_2 ) ) , VAR_3 ) ) INIT = new TYPE_1 ( ( STRING_1 + ( VAR_2 ) ) , VAR_3 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2<TYPE_1> ) TYPE TYPE_2<TYPE_1> ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_2 ( VAR_1 ) ) INIT = METHOD_2 ( VAR_1 ) ) VAR VAR (  VAR_4 . METHOD_3 ( ) )  VAR_4 . METHOD_3 ( ) (  TYPE_3 . METHOD_4 ( ( ( VAR_5 ) == ( VAR_4 . METHOD_5 ( ) . getReturnValue ( ) ) ) ) )  TYPE_3 . METHOD_4 ( ( ( VAR_5 ) == ( VAR_4 . METHOD_5 ( ) . getReturnValue ( ) ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( ) )  VAR_1 . METHOD_2 ( ) ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = 0 ) INIT = 0 ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( IN model . METHOD_3 ( ) ) IN model . METHOD_3 ( ) ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_3 ( constants ) ) INIT = new TYPE_3 ( constants ) ) VAR VAR (  VAR_4 . METHOD_4 ( VAR_3 ) )  VAR_4 . METHOD_4 ( VAR_3 ) (  VAR_4 . METHOD_5 ( VAR_5 ) )  VAR_4 . METHOD_5 ( VAR_5 ) (  VAR_4 . METHOD_6 ( model . METHOD_7 ( ) ) )  VAR_4 . METHOD_6 ( model . METHOD_7 ( ) ) (  VAR_4 . METHOD_8 ( TYPE_4 . METHOD_9 ( VAR_6 , ( STRING_1 + ( VAR_2 ++ ) ) ) ) )  VAR_4 . METHOD_8 ( TYPE_4 . METHOD_9 ( VAR_6 , ( STRING_1 + ( VAR_2 ++ ) ) ) ) (  VAR_1 . add ( VAR_4 ) )  VAR_1 . add ( VAR_4 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME url ) NAME url ) VAR VAR ( VAR VAR ( TYPE java.lang.Integer ) TYPE java.lang.Integer ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( url , VAR_1 ) ) INIT = METHOD_2 ( url , VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_3 ( VAR_2 ) ) INIT = new TYPE_3 ( VAR_2 ) ) VAR VAR (  VAR_3 . METHOD_3 ( VAR_4 ) )  VAR_3 . METHOD_3 ( VAR_4 ) (  VAR_3 . METHOD_4 ( VAR_5 ) )  VAR_3 . METHOD_4 ( VAR_5 ) (  VAR_3 . METHOD_5 ( new TYPE_4 ( new TYPE_5 ( METHOD_6 ( url ) , METHOD_7 ( url , VAR_1 ) ) ) , VAR_6 ) )  VAR_3 . METHOD_5 ( new TYPE_4 ( new TYPE_5 ( METHOD_6 ( url ) , METHOD_7 ( url , VAR_1 ) ) ) , VAR_6 ) (  new TYPE_6 ( VAR_3 , VAR_7 , VAR_8 ) . METHOD_8 ( ) )  new TYPE_6 ( VAR_3 , VAR_7 , VAR_8 ) . METHOD_8 ( ) (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( java.lang.String ) ( result ) ) ) INIT = ( ( java.lang.String ) ( result ) ) ) VAR VAR ( IF IF ( COND ( VAR_1 != null ) && ( ( VAR_1 . length ( ) ) > 0 ) ) COND ( VAR_1 != null ) && ( ( VAR_1 . length ( ) ) > 0 ) ( THEN THEN (  METHOD_1 ( ) . setEntity ( result ) )  METHOD_1 ( ) . setEntity ( result ) (  METHOD_2 ( ) . setEntity ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_3 ( ) ) )  METHOD_2 ( ) . setEntity ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_3 ( ) ) ) THEN THEN ( ELSE ELSE (  METHOD_2 ( ) . setEntity ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_4 ( ) ) )  METHOD_2 ( ) . setEntity ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_4 ( ) ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ( ( java.lang.String ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ) ) INIT = new TYPE_1 ( ( ( java.lang.String ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ) ) VAR VAR (  METHOD_1 ( VAR_1 , METHOD_2 ( ) ) )  METHOD_1 ( VAR_1 , METHOD_2 ( ) ) (  TYPE_3 . METHOD_3 ( STRING_1 , STRING_2 , VAR_1 . toString ( ) ) )  TYPE_3 . METHOD_3 ( STRING_1 , STRING_2 , VAR_1 . toString ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_1 ) ( result ) ) ) INIT = ( ( TYPE_1 ) ( result ) ) ) VAR VAR (  VAR_2 . METHOD_1 ( ) . setItems ( TYPE_2 . METHOD_2 ( VAR_1 ) ) )  VAR_2 . METHOD_1 ( ) . setItems ( TYPE_2 . METHOD_2 ( VAR_1 ) ) (  VAR_2 . METHOD_1 ( ) . setSelectedItem ( VAR_1 ) )  VAR_2 . METHOD_1 ( ) . setSelectedItem ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.uicommonweb.UICommand ) TYPE org.ovirt.engine.ui.uicommonweb.UICommand ( NAME command ) NAME command ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  super . METHOD_1 ( command ) )  super . METHOD_1 ( command ) ( IF IF ( COND command == ( METHOD_2 ( ) ) ) COND command == ( METHOD_2 ( ) ) ( THEN THEN (  METHOD_3 ( ) )  METHOD_3 ( ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND TYPE_1 . METHOD_4 ( command . getName ( ) , STRING_1 ) ) COND TYPE_1 . METHOD_4 ( command . getName ( ) , STRING_1 ) ( THEN THEN (  METHOD_5 ( ) )  METHOD_5 ( ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND TYPE_1 . METHOD_4 ( command . getName ( ) , TYPE_2 ) ) COND TYPE_1 . METHOD_4 ( command . getName ( ) , TYPE_2 ) ( THEN THEN (  METHOD_6 ( ) )  METHOD_6 ( ) ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.Disk ) TYPE TYPE_1.Disk ( NAME disk ) NAME disk ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.Disk ) TYPE TYPE_1.Disk ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 . DiskImage ( ) ) INIT = new TYPE_1 . DiskImage ( ) ) VAR VAR (  TYPE_2 . getInstance ( ) . METHOD_2 ( TYPE_2 . getInstance ( ) . METHOD_3 ( disk ) , VAR_1 ) )  TYPE_2 . getInstance ( ) . METHOD_2 ( TYPE_2 . getInstance ( ) . METHOD_3 ( disk ) , VAR_1 ) (  TYPE_3 . assertEquals ( disk , VAR_1 ) )  TYPE_3 . assertEquals ( disk , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME context ) NAME context ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME object ) NAME object ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_2 . METHOD_2 ( object ) ) COND VAR_2 . METHOD_2 ( object ) ( THEN THEN (  VAR_1 . METHOD_3 ( STRING_1 ) )  VAR_1 . METHOD_3 ( STRING_1 ) (  TYPE_4 . METHOD_4 ( TYPE_5 . METHOD_5 ( VAR_3 ) . METHOD_6 ( ) ) )  TYPE_4 . METHOD_4 ( TYPE_5 . METHOD_5 ( VAR_3 ) . METHOD_6 ( ) ) (  VAR_1 . METHOD_3 ( STRING_2 ) )  VAR_1 . METHOD_3 ( STRING_2 ) ) THEN THEN ) IF IF (  super . METHOD_1 ( context , object , VAR_1 ) )  super . METHOD_1 ( context , object , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME validator ) NAME validator ( INIT = METHOD_2 ( METHOD_3 ( ) ) ) INIT = METHOD_2 ( METHOD_3 ( ) ) ) VAR VAR (  TYPE_2 . METHOD_4 ( validator . METHOD_5 ( METHOD_6 ( ) ) . METHOD_7 ( ) ) )  TYPE_2 . METHOD_4 ( validator . METHOD_5 ( METHOD_6 ( ) ) . METHOD_7 ( ) ) (  org.mockito.Mockito . METHOD_8 ( VAR_1 ) . METHOD_9 ( TYPE_3 . METHOD_10 ( ) ) )  org.mockito.Mockito . METHOD_8 ( VAR_1 ) . METHOD_9 ( TYPE_3 . METHOD_10 ( ) ) (  org.mockito.Mockito . METHOD_8 ( VAR_1 , org.mockito.Mockito . METHOD_11 ( ) ) . METHOD_12 ( TYPE_3 . METHOD_10 ( ) ) )  org.mockito.Mockito . METHOD_8 ( VAR_1 , org.mockito.Mockito . METHOD_11 ( ) ) . METHOD_12 ( TYPE_3 . METHOD_10 ( ) ) (  org.mockito.Mockito . METHOD_8 ( VAR_1 , org.mockito.Mockito . METHOD_11 ( ) ) . METHOD_13 ( TYPE_3 . METHOD_10 ( ) ) )  org.mockito.Mockito . METHOD_8 ( VAR_1 , org.mockito.Mockito . METHOD_11 ( ) ) . METHOD_13 ( TYPE_3 . METHOD_10 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_1 . METHOD_2 ( VAR_2 ) )  VAR_1 . METHOD_2 ( VAR_2 ) (  VAR_1 . METHOD_3 ( INT_1 ) )  VAR_1 . METHOD_3 ( INT_1 ) (  VAR_1 . METHOD_4 ( INT_2 ) )  VAR_1 . METHOD_4 ( INT_2 ) (  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( VAR_4 ) . METHOD_5 ( ) )  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( VAR_4 ) . METHOD_5 ( ) (  org.mockito.Mockito.when ( VAR_3 . METHOD_6 ( VAR_5 , VAR_6 ) ) . thenReturn ( VAR_1 ) )  org.mockito.Mockito.when ( VAR_3 . METHOD_6 ( VAR_5 , VAR_6 ) ) . thenReturn ( VAR_1 ) (  org.mockito.Mockito.when ( VAR_3 . get ( VAR_5 ) ) . thenReturn ( VAR_1 ) )  org.mockito.Mockito.when ( VAR_3 . get ( VAR_5 ) ) . thenReturn ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME returnValue ) NAME returnValue ( INIT = ( ( ( ( ( TYPE_1 . METHOD_2 ( ) ) && ( METHOD_3 ( VAR_1 , VAR_2 ) ) ) && ( TYPE_1 . METHOD_4 ( ) ) ) && ( METHOD_5 ( ) ) ) && ( ( ( TYPE_1 . METHOD_6 ( ) . METHOD_7 ( ) ) == ( VAR_3 ) ) || ( TYPE_1 . METHOD_8 ( ) ) ) ) && ( ( TYPE_1 . METHOD_9 ( ) ) != null ) ) INIT = ( ( ( ( ( TYPE_1 . METHOD_2 ( ) ) && ( METHOD_3 ( VAR_1 , VAR_2 ) ) ) && ( TYPE_1 . METHOD_4 ( ) ) ) && ( METHOD_5 ( ) ) ) && ( ( ( TYPE_1 . METHOD_6 ( ) . METHOD_7 ( ) ) == ( VAR_3 ) ) || ( TYPE_1 . METHOD_8 ( ) ) ) ) && ( ( TYPE_1 . METHOD_9 ( ) ) != null ) ) VAR VAR (  return returnValue ; )  return returnValue ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) (  dao = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) )  dao = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) (  VAR_2 = METHOD_2 ( VAR_1 . METHOD_4 ( ) ) )  VAR_2 = METHOD_2 ( VAR_1 . METHOD_4 ( ) ) (  VAR_3 = dao . get ( VAR_4 ) )  VAR_3 = dao . get ( VAR_4 ) (  VAR_5 = new TYPE_1 ( ) )  VAR_5 = new TYPE_1 ( ) (  VAR_5 . METHOD_5 ( STRING_1 ) )  VAR_5 . METHOD_5 ( STRING_1 ) (  VAR_6 = new TYPE_2 ( ) )  VAR_6 = new TYPE_2 ( ) (  VAR_6 . METHOD_6 ( VAR_7 ) )  VAR_6 . METHOD_6 ( VAR_7 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( ( ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) ) || ( ( VAR_1 ) < ( ( VAR_2 < java.lang.Integer > METHOD_3 ( VAR_3 ) ) - 1 ) ) ) && ( METHOD_4 ( ) . METHOD_5 ( ) ) ) && ( METHOD_4 ( ) . METHOD_1 ( ) ) ) COND ( ( ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) ) || ( ( VAR_1 ) < ( ( VAR_2 < java.lang.Integer > METHOD_3 ( VAR_3 ) ) - 1 ) ) ) && ( METHOD_4 ( ) . METHOD_5 ( ) ) ) && ( METHOD_4 ( ) . METHOD_1 ( ) ) ( THEN THEN (  ( VAR_1 ) ++ )  ( VAR_1 ) ++ (  TYPE_1 . METHOD_6 ( ) )  TYPE_1 . METHOD_6 ( ) ) THEN THEN ( ELSE ELSE (  TYPE_1 . METHOD_7 ( ) . METHOD_8 ( false ) )  TYPE_1 . METHOD_7 ( ) . METHOD_8 ( false ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List ) TYPE java.util.List ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 == null ) || ( ( VAR_1 . size ( ) ) != 1 ) ) COND ( VAR_1 == null ) || ( ( VAR_1 . size ( ) ) != 1 ) ( THEN THEN (  METHOD_2 ( false ) )  METHOD_2 ( false ) (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ( INIT = TYPE_1 . getSelectedItem ( ) ) INIT = TYPE_1 . getSelectedItem ( ) ) VAR VAR ( IF IF ( COND ( ( vm == null ) || ( ! ( vm . METHOD_3 ( ) ) ) ) || ( ( vm . METHOD_4 ( ) . METHOD_5 ( VAR_2 ) ) < 0 ) ) COND ( ( vm == null ) || ( ! ( vm . METHOD_3 ( ) ) ) ) || ( ( vm . METHOD_4 ( ) . METHOD_5 ( VAR_2 ) ) < 0 ) ( THEN THEN (  METHOD_2 ( false ) )  METHOD_2 ( false ) ) THEN THEN ( ELSE ELSE (  METHOD_2 ( true ) )  METHOD_2 ( true ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  METHOD_3 ( ) )  METHOD_3 ( ) (  METHOD_4 ( ) )  METHOD_4 ( ) (  METHOD_5 ( ) )  METHOD_5 ( ) (  METHOD_6 ( ) )  METHOD_6 ( ) (  METHOD_7 ( ) )  METHOD_7 ( ) (  METHOD_8 ( ) )  METHOD_8 ( ) (  METHOD_9 ( ) )  METHOD_9 ( ) (  METHOD_10 ( ) )  METHOD_10 ( ) (  METHOD_11 ( ) )  METHOD_11 ( ) ( IF IF ( COND ( VAR_1 ) != null ) COND ( VAR_1 ) != null ( THEN THEN (  VAR_2 . METHOD_12 ( VAR_1 ) )  VAR_2 . METHOD_12 ( VAR_1 ) ) THEN THEN ) IF IF ( IF IF ( COND VAR_3 ) COND VAR_3 ( THEN THEN (  VAR_2 . METHOD_13 ( VAR_4 . METHOD_14 ( ) ) )  VAR_2 . METHOD_13 ( VAR_4 . METHOD_14 ( ) ) ) THEN THEN ) IF IF ( IF IF ( COND VAR_5 ) COND VAR_5 ( THEN THEN (  VAR_2 . METHOD_15 ( VAR_4 . METHOD_16 ( ) ) )  VAR_2 . METHOD_15 ( VAR_4 . METHOD_16 ( ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME iface ) NAME iface ( IN TYPE_1 . METHOD_2 ( ) ) IN TYPE_1 . METHOD_2 ( ) ( BLOCK BLOCK (  VAR_1 . METHOD_3 ( TYPE_1 . METHOD_4 ( ) , iface ) )  VAR_1 . METHOD_3 ( TYPE_1 . METHOD_4 ( ) , iface ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  VAR_2 . METHOD_5 ( VAR_3 . METHOD_6 ( ) . get ( 0 ) . METHOD_7 ( ) ) )  VAR_2 . METHOD_5 ( VAR_3 . METHOD_6 ( ) . get ( 0 ) . METHOD_7 ( ) ) (  TYPE_2 . METHOD_8 ( ( ( VAR_3 . METHOD_6 ( ) . size ( ) ) == 1 ) ) )  TYPE_2 . METHOD_8 ( ( ( VAR_3 . METHOD_6 ( ) . size ( ) ) == 1 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) != null ) COND ( VAR_1 ) != null ( THEN THEN (  VAR_1 . METHOD_2 ( true ) )  VAR_1 . METHOD_2 ( true ) ) THEN THEN ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( BLOCK BLOCK (  log . error ( STRING_1 , VAR_2 . METHOD_3 ( ) ) )  log . error ( STRING_1 , VAR_2 . METHOD_3 ( ) ) (  log . METHOD_4 ( STRING_2 , VAR_2 ) )  log . METHOD_4 ( STRING_2 , VAR_2 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( METHOD_3 ( ) ) )  METHOD_2 ( METHOD_3 ( ) ) (  METHOD_4 ( 1 ) )  METHOD_4 ( 1 ) (  METHOD_5 ( 0 , 1 ) )  METHOD_5 ( 0 , 1 ) (  METHOD_6 ( ) )  METHOD_6 ( ) (  METHOD_7 ( 1 ) )  METHOD_7 ( 1 ) (  METHOD_8 ( ) )  METHOD_8 ( ) (  VAR_1 . METHOD_9 ( ) )  VAR_1 . METHOD_9 ( ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME response ) NAME response ( INIT = resource . get ( ) ) INIT = resource . get ( ) ) VAR VAR (  METHOD_10 ( response , 0 ) )  METHOD_10 ( response , 0 ) (  METHOD_11 ( response ) )  METHOD_11 ( response ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.util.List<java.lang.String> ) RETURN java.util.List<java.lang.String> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_4 ) NAME VAR_4 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_5 ) NAME VAR_5 ( IN VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) IN VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_6 ) NAME VAR_6 ( INIT = VAR_5 . getString ( null , VAR_2 ) ) INIT = VAR_5 . getString ( null , VAR_2 ) ) VAR VAR ( IF IF ( COND VAR_6 == null ) COND VAR_6 == null ( THEN THEN (  VAR_6 = VAR_3 )  VAR_6 = VAR_3 ) THEN THEN ) IF IF (  VAR_4 . add ( VAR_6 ) )  VAR_4 . add ( VAR_6 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_4 ; )  return VAR_4 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME equals ) NAME equals ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME obj ) NAME obj ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return ( ( ( ( obj != null ) && ( obj instanceof TYPE_1 ) ) && ( TYPE_2 . METHOD_1 ( getId ( ) , ( ( TYPE_1 ) ( obj ) ) . getId ( ) ) ) ) && ( TYPE_2 . METHOD_1 ( METHOD_2 ( ) , ( ( TYPE_1 ) ( obj ) ) . METHOD_2 ( ) ) ) ) && ( TYPE_2 . METHOD_1 ( getValue ( ) , ( ( TYPE_1 ) ( obj ) ) . getValue ( ) ) ) ; )  return ( ( ( ( obj != null ) && ( obj instanceof TYPE_1 ) ) && ( TYPE_2 . METHOD_1 ( getId ( ) , ( ( TYPE_1 ) ( obj ) ) . getId ( ) ) ) ) && ( TYPE_2 . METHOD_1 ( METHOD_2 ( ) , ( ( TYPE_1 ) ( obj ) ) . METHOD_2 ( ) ) ) ) && ( TYPE_2 . METHOD_1 ( getValue ( ) , ( ( TYPE_1 ) ( obj ) ) . getValue ( ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME validate ) NAME validate ( BLOCK BLOCK (  METHOD_1 ( ) . METHOD_2 ( new TYPE_1 [ ] { new TYPE_2 ( ) , new TYPE_3 ( INT_1 ) , new TYPE_4 ( ) } ) )  METHOD_1 ( ) . METHOD_2 ( new TYPE_1 [ ] { new TYPE_2 ( ) , new TYPE_3 ( INT_1 ) , new TYPE_4 ( ) } ) (  METHOD_3 ( ) . METHOD_2 ( new TYPE_1 [ ] { new TYPE_2 ( ) , new TYPE_3 ( INT_1 ) } ) )  METHOD_3 ( ) . METHOD_2 ( new TYPE_1 [ ] { new TYPE_2 ( ) , new TYPE_3 ( INT_1 ) } ) (  return ( METHOD_1 ( ) . METHOD_4 ( ) ) && ( METHOD_3 ( ) . METHOD_4 ( ) ) ; )  return ( METHOD_1 ( ) . METHOD_4 ( ) ) && ( METHOD_3 ( ) . METHOD_4 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( WHILE WHILE ( COND ( VAR_1 -- ) > 0 ) COND ( VAR_1 -- ) > 0 ( BLOCK BLOCK (  METHOD_1 ( VAR_3 , VAR_4 class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_5 [ 0 ] } , ( VAR_2 ? null : getEntity ( 0 ) ) ) )  METHOD_1 ( VAR_3 , VAR_4 class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_5 [ 0 ] } , ( VAR_2 ? null : getEntity ( 0 ) ) ) ) BLOCK BLOCK ) WHILE WHILE ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<TYPE_1> ) TYPE java.util.ArrayList<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( java.util.ArrayList < TYPE_1 > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ) INIT = ( ( java.util.ArrayList < TYPE_1 > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ) VAR VAR ( IF IF ( COND ( VAR_1 != null ) && ( ( VAR_1 . size ( ) ) > 0 ) ) COND ( VAR_1 != null ) && ( ( VAR_1 . size ( ) ) > 0 ) ( THEN THEN ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME pool ) NAME pool ( INIT = VAR_1 . get ( 0 ) ) INIT = VAR_1 . get ( 0 ) ) VAR VAR (  TYPE_3 . METHOD_1 ( ( ( org.ovirt.engine.ui.frontend.AsyncQuery ) ( model ) ) , pool . getId ( ) ) )  TYPE_3 . METHOD_1 ( ( ( org.ovirt.engine.ui.frontend.AsyncQuery ) ( model ) ) , pool . getId ( ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.Object> ) TYPE java.util.Map<java.lang.String,java.lang.Object> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.HashMap < > ( ) ) INIT = new java.util.HashMap < > ( ) ) VAR VAR ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.Object> ) TYPE java.util.Map<java.lang.String,java.lang.Object> ( NAME disk ) NAME disk ( INIT = new java.util.HashMap < > ( ) ) INIT = new java.util.HashMap < > ( ) ) VAR VAR (  VAR_1 . put ( STRING_1 , disk ) )  VAR_1 . put ( STRING_1 , disk ) (  VAR_1 . put ( STRING_2 , disk ) )  VAR_1 . put ( STRING_2 , disk ) ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.Object> ) TYPE java.util.Map<java.lang.String,java.lang.Object> ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_1 . METHOD_2 ( VAR_1 ) ) INIT = TYPE_1 . METHOD_2 ( VAR_1 ) ) VAR VAR (  TYPE_1 . METHOD_3 ( TYPE_1 . METHOD_4 ( ) , VAR_2 , true ) )  TYPE_1 . METHOD_3 ( TYPE_1 . METHOD_4 ( ) , VAR_2 , true ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<org.ovirt.engine.core.compat.Guid,java.lang.String> ) TYPE java.util.Map<org.ovirt.engine.core.compat.Guid,java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) INIT = ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) VAR VAR (  this . VAR_3 . METHOD_1 ( VAR_2 ) )  this . VAR_3 . METHOD_1 ( VAR_2 ) ( VAR VAR ( TYPE java.util.Map<org.ovirt.engine.core.compat.Guid,java.lang.String> ) TYPE java.util.Map<org.ovirt.engine.core.compat.Guid,java.lang.String> ( NAME result ) NAME result ( INIT = this . METHOD_2 ( VAR_4 ) ) INIT = this . METHOD_2 ( VAR_4 ) ) VAR VAR (  VAR_5 . onSuccess ( result ) )  VAR_5 . onSuccess ( result ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( null , null ) ) INIT = new TYPE_1 ( null , null ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR (  TYPE_2 . assertEquals ( VAR_3 , VAR_2 ) )  TYPE_2 . assertEquals ( VAR_3 , VAR_2 ) ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_1 . METHOD_3 ( ) ) INIT = VAR_1 . METHOD_3 ( ) ) VAR VAR (  TYPE_2 . assertEquals ( VAR_3 , VAR_4 ) )  TYPE_2 . assertEquals ( VAR_3 , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME result ) NAME result ( INIT = true ) INIT = true ) VAR VAR ( IF IF ( COND ( TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) . length ( ) ) > ( METHOD_4 ( ) ) ) COND ( TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) . length ( ) ) > ( METHOD_4 ( ) ) ( THEN THEN (  result = false )  result = false (  addCanDoActionMessage ( VAR_1 ) )  addCanDoActionMessage ( VAR_1 ) ) THEN THEN ) IF IF (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.uicommonweb.models.EntityModel ) TYPE org.ovirt.engine.ui.uicommonweb.models.EntityModel ( NAME object ) NAME object ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2.Disk ) TYPE TYPE_2.Disk ( NAME disk ) NAME disk ( INIT = ( ( TYPE_3 ) ( object . getEntity ( ) ) ) . METHOD_2 ( ) ) INIT = ( ( TYPE_3 ) ( object . getEntity ( ) ) ) . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND disk . METHOD_3 ( ) ) COND disk . METHOD_3 ( ) ( THEN THEN (  return TYPE_4 . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ; )  return TYPE_4 . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ; ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND TYPE_1 . getInstance ( ) . METHOD_2 ( ) ) COND TYPE_1 . getInstance ( ) . METHOD_2 ( ) ( THEN THEN ( VAR VAR ( TYPE java.util.List<TYPE_2<org.ovirt.engine.core.common.businessentities.VDSGroup>> ) TYPE java.util.List<TYPE_2<org.ovirt.engine.core.common.businessentities.VDSGroup>> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_3 . getInstance ( ) . METHOD_3 ( STRING_1 , METHOD_4 ( ) ) ) INIT = TYPE_3 . getInstance ( ) . METHOD_3 ( STRING_1 , METHOD_4 ( ) ) ) VAR VAR ( IF IF ( COND ( VAR_1 != null ) && ( ( VAR_1 . size ( ) ) > 0 ) ) COND ( VAR_1 != null ) && ( ( VAR_1 . size ( ) ) > 0 ) ( THEN THEN (  getTable ( ) . METHOD_5 ( new TYPE_4 < org.ovirt.engine.core.common.businessentities.VDSGroup > ( VAR_2 . METHOD_6 ( ) , VAR_1 ) ) )  getTable ( ) . METHOD_5 ( new TYPE_4 < org.ovirt.engine.core.common.businessentities.VDSGroup > ( VAR_2 . METHOD_6 ( ) , VAR_1 ) ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) (  VAR_1 = METHOD_2 ( null , null ) )  VAR_1 = METHOD_2 ( null , null ) ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_3 ( VAR_1 , VAR_3 , VAR_4 ) ) INIT = METHOD_3 ( VAR_1 , VAR_3 , VAR_4 ) ) VAR VAR (  METHOD_4 ( VAR_2 ) )  METHOD_4 ( VAR_2 ) (  VAR_5 . METHOD_5 ( VAR_6 , INT_1 ) )  VAR_5 . METHOD_5 ( VAR_6 , INT_1 ) (  org.mockito.Mockito.when ( VAR_7 . METHOD_6 ( VAR_2 ) ) . thenReturn ( VAR_1 ) )  org.mockito.Mockito.when ( VAR_7 . METHOD_6 ( VAR_2 ) ) . thenReturn ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  getParameters ( ) . METHOD_2 ( ) . setId ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) )  getParameters ( ) . METHOD_2 ( ) . setId ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME iface ) NAME iface ( IN getParameters ( ) . METHOD_2 ( ) . METHOD_4 ( ) ) IN getParameters ( ) . METHOD_2 ( ) . METHOD_4 ( ) ( BLOCK BLOCK (  iface . setId ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) )  iface . setId ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) (  iface . METHOD_5 ( TYPE_2 . getInstance ( ) . METHOD_6 ( ) ) )  iface . METHOD_5 ( TYPE_2 . getInstance ( ) . METHOD_6 ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ) RETURN org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , ( ( VAR_1 + STRING_1 ) + VAR_2 ) , false , null , VAR_2 , VAR_3 , true , null , false , null ) ; )  return METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , ( ( VAR_1 + STRING_1 ) + VAR_2 ) , false , null , VAR_2 , VAR_3 , true , null , false , null ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME version ) NAME version ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source != null ? ( ( java.lang.Integer ) ( source ) ) . METHOD_2 ( ) : 1 ; )  return source != null ? ( ( java.lang.Integer ) ( source ) ) . METHOD_2 ( ) : 1 ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . METHOD_2 ( ) : 1 ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . METHOD_2 ( ) : 1 ; } } ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME tempVar ) NAME tempVar ( INIT = new TYPE_1 ( VAR_1 ) ) INIT = new TYPE_1 ( VAR_1 ) ) VAR VAR (  tempVar . METHOD_3 ( version ) )  tempVar . METHOD_3 ( version ) (  TYPE_2 . METHOD_4 ( tempVar , aQuery ) )  TYPE_2 . METHOD_4 ( tempVar , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . METHOD_1 ( ( ( TYPE_1 < org.ovirt.engine.core.common.businessentities.StoragePool > ) ( returnValue ) ) ) )  VAR_1 . METHOD_1 ( ( ( TYPE_1 < org.ovirt.engine.core.common.businessentities.StoragePool > ) ( returnValue ) ) ) (  TYPE_2 . METHOD_2 ( VAR_1 , new TYPE_3 ( ) ) )  TYPE_2 . METHOD_2 ( VAR_1 , new TYPE_3 ( ) ) (  TYPE_4 . getInstance ( ) . METHOD_3 ( VAR_2 , VAR_3 . getId ( ) ) )  TYPE_4 . getInstance ( ) . METHOD_3 ( VAR_2 , VAR_3 . getId ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) (  dao = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) )  dao = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) (  VAR_2 = dao . METHOD_4 ( STRING_1 , STRING_2 ) )  VAR_2 = dao . METHOD_4 ( STRING_1 , STRING_2 ) (  VAR_3 = new TYPE_1 ( ) )  VAR_3 = new TYPE_1 ( ) (  VAR_3 . METHOD_5 ( STRING_3 ) )  VAR_3 . METHOD_5 ( STRING_3 ) (  VAR_3 . METHOD_6 ( STRING_4 ) )  VAR_3 . METHOD_6 ( STRING_4 ) (  VAR_3 . METHOD_7 ( STRING_2 ) )  VAR_3 . METHOD_7 ( STRING_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.util.List<org.ovirt.engine.core.common.businessentities.network.Network>> ) TYPE java.util.Map<java.lang.String,java.util.List<org.ovirt.engine.core.common.businessentities.network.Network>> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( STRING_1 , VAR_2 . Collections < org.ovirt.engine.core.common.businessentities.network.Network > METHOD_3 ( ) ) ) INIT = TYPE_1 . METHOD_2 ( STRING_1 , VAR_2 . Collections < org.ovirt.engine.core.common.businessentities.network.Network > METHOD_3 ( ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_2 ( new TYPE_3 ( VAR_2 . Collections < org.ovirt.engine.core.common.businessentities.network.Network > METHOD_3 ( ) ) ) ) INIT = new TYPE_2 ( new TYPE_3 ( VAR_2 . Collections < org.ovirt.engine.core.common.businessentities.network.Network > METHOD_3 ( ) ) ) ) VAR VAR (  TYPE_4 . METHOD_4 ( VAR_3 . METHOD_5 ( VAR_1 ) , TYPE_5 . METHOD_6 ( ) ) )  TYPE_4 . METHOD_4 ( VAR_3 . METHOD_5 ( VAR_1 ) , TYPE_5 . METHOD_6 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( 1 ) )  METHOD_2 ( 1 ) (  METHOD_3 ( METHOD_4 ( VAR_1 , VAR_2 class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 [ 2 ] } ) ) )  METHOD_3 ( METHOD_4 ( VAR_1 , VAR_2 class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 [ 2 ] } ) ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME action ) NAME action ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  action . METHOD_5 ( VAR_3 [ 2 ] ) )  action . METHOD_5 ( VAR_3 [ 2 ] ) (  METHOD_6 ( resource . METHOD_7 ( action ) ) )  METHOD_6 ( resource . METHOD_7 ( action ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1[] ) RETURN TYPE_1[] ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME object ) NAME object ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( object ) ) INIT = METHOD_2 ( object ) ) VAR VAR ( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_3 ) NAME METHOD_3 ( BLOCK BLOCK (  return org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . METHOD_4 ( ) . METHOD_5 ( VAR_1 ) ; )  return org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . METHOD_4 ( ) . METHOD_5 ( VAR_1 ) ; ) BLOCK BLOCK ) METHOD METHOD (  return new TYPE_1 [ ] { new TYPE_2 ( ) , new TYPE_3 ( VAR_1 ) , new TYPE_4 ( ) { protected java.lang.String METHOD_3 ( ) { return org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . METHOD_4 ( ) . METHOD_5 ( VAR_1 ) ; } } , new TYPE_5 ( VAR_2 ) } ; )  return new TYPE_1 [ ] { new TYPE_2 ( ) , new TYPE_3 ( VAR_1 ) , new TYPE_4 ( ) { protected java.lang.String METHOD_3 ( ) { return org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . METHOD_4 ( ) . METHOD_5 ( VAR_1 ) ; } } , new TYPE_5 ( VAR_2 ) } ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_3 ( ) )  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_3 ( ) (  org.mockito.Mockito.doReturn ( false ) . when ( command ) . METHOD_4 ( TYPE_1 . any ( VAR_2 class ) , TYPE_1 . any ( VAR_3 . ArrayList class ) ) )  org.mockito.Mockito.doReturn ( false ) . when ( command ) . METHOD_4 ( TYPE_1 . any ( VAR_2 class ) , TYPE_1 . any ( VAR_3 . ArrayList class ) ) (  VAR_4 . METHOD_5 ( org.ovirt.engine.core.compat.Guid . METHOD_6 ( ) ) )  VAR_4 . METHOD_5 ( org.ovirt.engine.core.compat.Guid . METHOD_6 ( ) ) (  TYPE_2 . METHOD_7 ( STRING_1 , command . validate ( ) ) )  TYPE_2 . METHOD_7 ( STRING_1 , command . validate ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME id ) NAME id ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_1 . setId ( id ) )  VAR_1 . setId ( id ) (  VAR_1 . METHOD_2 ( new TYPE_2 ( ) ) )  VAR_1 . METHOD_2 ( new TYPE_2 ( ) ) (  VAR_1 . METHOD_3 ( ) . setId ( VAR_2 ) )  VAR_1 . METHOD_3 ( ) . setId ( VAR_2 ) (  return TYPE_3 . METHOD_4 ( METHOD_5 ( ) , VAR_1 ) . METHOD_6 ( ) ; )  return TYPE_3 . METHOD_4 ( METHOD_5 ( ) , VAR_1 ) . METHOD_6 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<?extendsTYPE_1<org.ovirt.engine.core.common.businessentities.StorageDomain>> ) TYPE java.util.List<?extendsTYPE_1<org.ovirt.engine.core.common.businessentities.StorageDomain>> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( new TYPE_3 ( VAR_2 ) , new TYPE_4 ( VAR_3 ) ) ) INIT = TYPE_2 . METHOD_2 ( new TYPE_3 ( VAR_2 ) , new TYPE_4 ( VAR_3 ) ) ) VAR VAR (  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_4 ) . METHOD_3 ( TYPE_5 . METHOD_4 ( VAR_5 . StorageDomain class ) , TYPE_5 . METHOD_4 ( VAR_6 . DiskImage class ) ) )  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_4 ) . METHOD_3 ( TYPE_5 . METHOD_4 ( VAR_5 . StorageDomain class ) , TYPE_5 . METHOD_4 ( VAR_6 . DiskImage class ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN java.util.Map<org.ovirt.engine.core.compat.Guid,java.lang.String> ) RETURN java.util.Map<org.ovirt.engine.core.compat.Guid,java.lang.String> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) . METHOD_3 ( ) ) && ( ( TYPE_1 . getParameters ( ) . METHOD_4 ( ) ) != null ) ) && ( ! ( TYPE_2 . equals ( TYPE_1 . getParameters ( ) . METHOD_4 ( ) ) ) ) ) COND ( ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) . METHOD_3 ( ) ) && ( ( TYPE_1 . getParameters ( ) . METHOD_4 ( ) ) != null ) ) && ( ! ( TYPE_2 . equals ( TYPE_1 . getParameters ( ) . METHOD_4 ( ) ) ) ) ( THEN THEN (  return TYPE_3 . METHOD_5 ( TYPE_1 . getParameters ( ) . METHOD_4 ( ) , TYPE_4 . name ( ) ) ; )  return TYPE_3 . METHOD_5 ( TYPE_1 . getParameters ( ) . METHOD_4 ( ) , TYPE_4 . name ( ) ) ; ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_1 . METHOD_2 ( null ) )  VAR_1 . METHOD_2 ( null ) ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME VAR_2 ) NAME VAR_2 ( INIT = new org.ovirt.engine.core.common.businessentities.VM ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.VM ( ) ) VAR VAR (  VAR_2 . METHOD_3 ( VAR_3 ) )  VAR_2 . METHOD_3 ( VAR_3 ) (  VAR_1 . METHOD_4 ( VAR_2 ) )  VAR_1 . METHOD_4 ( VAR_2 ) ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_1 . METHOD_5 ( ) ) INIT = VAR_1 . METHOD_5 ( ) ) VAR VAR (  TYPE_2 . assertEquals ( VAR_3 , VAR_4 ) )  TYPE_2 . assertEquals ( VAR_3 , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME vds ) NAME vds ( INIT = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) . get ( TYPE_1 . getParameters ( ) . getId ( ) ) ) INIT = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) . get ( TYPE_1 . getParameters ( ) . getId ( ) ) ) VAR VAR ( IF IF ( COND vds != null ) COND vds != null ( THEN THEN (  vds . METHOD_4 ( TYPE_1 . METHOD_5 ( ) . METHOD_6 ( vds . METHOD_7 ( ) , vds . METHOD_8 ( ) ) ) )  vds . METHOD_4 ( TYPE_1 . METHOD_5 ( ) . METHOD_6 ( vds . METHOD_7 ( ) , vds . METHOD_8 ( ) ) ) ) THEN THEN ) IF IF (  TYPE_1 . METHOD_9 ( ) . METHOD_10 ( vds ) )  TYPE_1 . METHOD_9 ( ) . METHOD_10 ( vds ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_1 ( TYPE_2 . METHOD_2 ( ( ( java.util.List < TYPE_1 > ) ( result ) ) ) ) ) INIT = TYPE_2 . METHOD_1 ( TYPE_2 . METHOD_2 ( ( ( java.util.List < TYPE_1 > ) ( result ) ) ) ) ) VAR VAR (  VAR_2 . METHOD_3 ( ) . setItems ( VAR_1 ) )  VAR_2 . METHOD_3 ( ) . setItems ( VAR_1 ) (  VAR_2 . METHOD_3 ( ) . setSelectedItem ( TYPE_2 . METHOD_4 ( VAR_1 ) ) )  VAR_2 . METHOD_3 ( ) . setSelectedItem ( TYPE_2 . METHOD_4 ( VAR_1 ) ) (  VAR_2 . METHOD_5 ( ) )  VAR_2 . METHOD_5 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME iface ) NAME iface ( IN METHOD_2 ( ) . METHOD_3 ( ) ) IN METHOD_2 ( ) . METHOD_3 ( ) ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = iface . METHOD_4 ( ) ) INIT = iface . METHOD_4 ( ) ) VAR VAR ( IF IF ( COND ( TYPE_1 . METHOD_5 ( VAR_1 ) ) && ( ! ( VAR_2 . METHOD_6 ( VAR_1 ) ) ) ) COND ( TYPE_1 . METHOD_5 ( VAR_1 ) ) && ( ! ( VAR_2 . METHOD_6 ( VAR_1 ) ) ) ( THEN THEN (  VAR_3 . add ( VAR_1 ) )  VAR_3 . add ( VAR_1 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  parameters . METHOD_2 ( TYPE_1 ) )  parameters . METHOD_2 ( TYPE_1 ) (  org.mockito.Mockito . METHOD_3 ( ) . when ( VAR_1 ) . METHOD_4 ( TYPE_1 . METHOD_5 ( ) ) )  org.mockito.Mockito . METHOD_3 ( ) . when ( VAR_1 ) . METHOD_4 ( TYPE_1 . METHOD_5 ( ) ) (  org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_6 ( ) )  org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_6 ( ) (  command . METHOD_7 ( ) )  command . METHOD_7 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , null , VAR_1 , VAR_2 ) ) ) )  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , null , VAR_1 , VAR_2 ) ) ) (  METHOD_4 ( ) )  METHOD_4 ( ) (  METHOD_5 ( true , null , VAR_3 ) )  METHOD_5 ( true , null , VAR_3 ) (  cmd . METHOD_6 ( ) )  cmd . METHOD_6 ( ) (  org.mockito.Mockito . METHOD_7 ( VAR_4 , org.mockito.Mockito . METHOD_8 ( INT_1 ) ) . METHOD_9 ( TYPE_3 . any ( VAR_5 class ) ) )  org.mockito.Mockito . METHOD_7 ( VAR_4 , org.mockito.Mockito . METHOD_8 ( INT_1 ) ) . METHOD_9 ( TYPE_3 . any ( VAR_5 class ) ) (  TYPE_4 . assertEquals ( cmd . METHOD_10 ( ) , VAR_6 ) )  TYPE_4 . assertEquals ( cmd . METHOD_10 ( ) , VAR_6 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME context ) NAME context ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME value ) NAME value ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME event ) NAME event ) VAR VAR ( VAR VAR ( TYPE TYPE_5<TYPE_3> ) TYPE TYPE_5<TYPE_3> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_2 ( value ) ) INIT = METHOD_2 ( value ) ) VAR VAR ( IF IF ( COND VAR_3 == null ) COND VAR_3 == null ( THEN THEN (  VAR_3 = METHOD_2 ( value , VAR_1 ) )  VAR_3 = METHOD_2 ( value , VAR_1 ) ) THEN THEN ) IF IF (  TYPE_7 . METHOD_3 ( event , VAR_1 , VAR_3 ) )  TYPE_7 . METHOD_3 ( event , VAR_1 , VAR_3 ) (  super . METHOD_1 ( context , VAR_1 , value , event , VAR_2 ) )  super . METHOD_1 ( context , VAR_1 , value , event , VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.VdcQueryReturnValue ) TYPE TYPE_1.VdcQueryReturnValue ( NAME response ) NAME response ( INIT = ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) ) INIT = ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) ) VAR VAR ( IF IF ( COND response . getSucceeded ( ) ) COND response . getSucceeded ( ) ( THEN THEN (  model . METHOD_1 ( ( ( java.util.ArrayList < TYPE_2 > ) ( response . getReturnValue ( ) ) ) , false , VAR_1 ) )  model . METHOD_1 ( ( ( java.util.ArrayList < TYPE_2 > ) ( response . getReturnValue ( ) ) ) , false , VAR_1 ) (  model . METHOD_2 ( STRING_1 ) )  model . METHOD_2 ( STRING_1 ) ) THEN THEN ( ELSE ELSE (  model . METHOD_2 ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_3 ( ) ) )  model . METHOD_2 ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_3 ( ) ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN org.ovirt.engine.core.common.businessentities.StorageDomain ) RETURN org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME status ) NAME status ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ) TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( status , STRING_1 , VAR_2 ) ) INIT = METHOD_2 ( status , STRING_1 , VAR_2 ) ) VAR VAR (  org.mockito.Mockito.when ( VAR_3 . METHOD_3 ( TYPE_2 . any ( VAR_4 . Guid class ) ) ) . thenReturn ( TYPE_3 . METHOD_4 ( VAR_1 ) ) )  org.mockito.Mockito.when ( VAR_3 . METHOD_3 ( TYPE_2 . any ( VAR_4 . Guid class ) ) ) . thenReturn ( TYPE_3 . METHOD_4 ( VAR_1 ) ) (  cmd . METHOD_5 ( new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ) )  cmd . METHOD_5 ( new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ) (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME METHOD_2 ) NAME METHOD_2 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source != null ? TYPE_1 . METHOD_3 ( ( ( java.lang.Integer ) ( source ) ) . METHOD_4 ( ) ) : VAR_1 ; )  return source != null ? TYPE_1 . METHOD_3 ( ( ( java.lang.Integer ) ( source ) ) . METHOD_4 ( ) ) : VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object METHOD_2 ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? TYPE_1 . METHOD_3 ( ( ( java.lang.Integer ) ( source ) ) . METHOD_4 ( ) ) : VAR_1 ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object METHOD_2 ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? TYPE_1 . METHOD_3 ( ( ( java.lang.Integer ) ( source ) ) . METHOD_4 ( ) ) : VAR_1 ; } } (  METHOD_5 ( new TYPE_2 ( VAR_2 , METHOD_6 ( ) ) , aQuery ) )  METHOD_5 ( new TYPE_2 ( VAR_2 , METHOD_6 ( ) ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( TYPE_1 . METHOD_2 ( ) ) == null ) COND ( TYPE_1 . METHOD_2 ( ) ) == null ( THEN THEN (  return METHOD_3 ( VAR_1 ) ; )  return METHOD_3 ( VAR_1 ) ; ) THEN THEN ) IF IF ( IF IF ( COND ( TYPE_1 . METHOD_2 ( ) . METHOD_4 ( ) ) == ( VAR_2 ) ) COND ( TYPE_1 . METHOD_2 ( ) . METHOD_4 ( ) ) == ( VAR_2 ) ( THEN THEN (  return METHOD_3 ( VAR_3 ) ; )  return METHOD_3 ( VAR_3 ) ; ) THEN THEN ) IF IF (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND source == null ) COND source == null ( THEN THEN (  return new java.util.ArrayList < TYPE_1 > ( ) ; )  return new java.util.ArrayList < TYPE_1 > ( ) ; ) THEN THEN ) IF IF (  TYPE_2 . METHOD_2 ( ( ( java.util.List < TYPE_1 > ) ( source ) ) , new TYPE_3 ( ) ) )  TYPE_2 . METHOD_2 ( ( ( java.util.List < TYPE_1 > ) ( source ) ) , new TYPE_3 ( ) ) (  return source ; )  return source ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < TYPE_1 > ( ) ; } TYPE_2 . METHOD_2 ( ( ( java.util.List < TYPE_1 > ) ( source ) ) , new TYPE_3 ( ) ) ; return source ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < TYPE_1 > ( ) ; } TYPE_2 . METHOD_2 ( ( ( java.util.List < TYPE_1 > ) ( source ) ) , new TYPE_3 ( ) ) ; return source ; } } (  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_1 , new TYPE_4 ( ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_1 , new TYPE_4 ( ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2.DiskImage ) TYPE TYPE_2.DiskImage ( NAME disk ) NAME disk ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME parameters ) NAME parameters ( INIT = new TYPE_1 ( VAR_1 , disk ) ) INIT = new TYPE_1 ( VAR_1 , disk ) ) VAR VAR (  parameters . METHOD_2 ( VAR_2 ) )  parameters . METHOD_2 ( VAR_2 ) (  parameters . METHOD_3 ( VAR_3 . METHOD_4 ( ) ) )  parameters . METHOD_3 ( VAR_3 . METHOD_4 ( ) ) (  parameters . METHOD_5 ( VAR_3 . getParameters ( ) ) )  parameters . METHOD_5 ( VAR_3 . getParameters ( ) ) (  parameters . METHOD_6 ( false ) )  parameters . METHOD_6 ( false ) (  return parameters ; )  return parameters ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.Object> ) TYPE java.util.Map<java.lang.String,java.lang.Object> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR ( IF IF ( COND VAR_1 . METHOD_2 ( STRING_1 ) ) COND VAR_1 . METHOD_2 ( STRING_1 ) ( THEN THEN (  VAR_2 . METHOD_3 ( TYPE_2 . valueOf ( VAR_1 . get ( STRING_1 ) . toString ( ) ) ) )  VAR_2 . METHOD_3 ( TYPE_2 . valueOf ( VAR_1 . get ( STRING_1 ) . toString ( ) ) ) ) THEN THEN ) IF IF (  VAR_2 . METHOD_4 ( TYPE_3 . METHOD_5 ( VAR_1 , STRING_2 ) ) )  VAR_2 . METHOD_4 ( TYPE_3 . METHOD_5 ( VAR_1 , STRING_2 ) ) ( VAR VAR ( TYPE java.lang.Integer ) TYPE java.lang.Integer ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_3 . METHOD_6 ( VAR_1 , STRING_3 ) ) INIT = TYPE_3 . METHOD_6 ( VAR_1 , STRING_3 ) ) VAR VAR ( IF IF ( COND VAR_3 != null ) COND VAR_3 != null ( THEN THEN (  VAR_2 . METHOD_7 ( VAR_3 ) )  VAR_2 . METHOD_7 ( VAR_3 ) ) THEN THEN ) IF IF (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME params ) NAME params ( INIT = new TYPE_2 ( VAR_2 , null , null ) ) INIT = new TYPE_2 ( VAR_2 , null , null ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME returnValue ) NAME returnValue ( INIT = TYPE_4 . getInstance ( ) . METHOD_2 ( VAR_3 , params , TYPE_5 . METHOD_3 ( ) ) ) INIT = TYPE_4 . getInstance ( ) . METHOD_2 ( VAR_3 , params , TYPE_5 . METHOD_3 ( ) ) ) VAR VAR ( IF IF ( COND ! ( returnValue . getSucceeded ( ) ) ) COND ! ( returnValue . getSucceeded ( ) ) ( THEN THEN (  VAR_4 . METHOD_4 ( STRING_1 , VAR_2 . getName ( ) ) )  VAR_4 . METHOD_4 ( STRING_1 , VAR_2 . getName ( ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME command ) NAME command ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_2 ( ) )  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_2 ( ) (  org.mockito.Mockito.doReturn ( METHOD_3 ( ) ) . when ( VAR_1 ) . get ( VAR_2 ) )  org.mockito.Mockito.doReturn ( METHOD_3 ( ) ) . when ( VAR_1 ) . get ( VAR_2 ) (  org.mockito.Mockito.doReturn ( METHOD_4 ( ) ) . when ( VAR_1 ) . get ( VAR_3 ) )  org.mockito.Mockito.doReturn ( METHOD_4 ( ) ) . when ( VAR_1 ) . get ( VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ) TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME storageDomain ) NAME storageDomain ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ) TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . METHOD_2 ( storageDomain . getId ( ) , INT_1 ) ) INIT = VAR_3 . METHOD_2 ( storageDomain . getId ( ) , INT_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_3 . METHOD_2 ( VAR_1 . getId ( ) , INT_1 ) ) INIT = VAR_3 . METHOD_2 ( VAR_1 . getId ( ) , INT_1 ) ) VAR VAR (  return VAR_2 . METHOD_3 ( VAR_4 ) ; )  return VAR_2 . METHOD_3 ( VAR_4 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( METHOD_3 ( ) ) )  METHOD_2 ( METHOD_3 ( ) ) ( TRY TRY ( BLOCK BLOCK (  VAR_1 . METHOD_4 ( ) )  VAR_1 . METHOD_4 ( ) (  resource . METHOD_5 ( new TYPE_1 ( ) ) )  resource . METHOD_5 ( new TYPE_1 ( ) ) (  METHOD_6 ( STRING_1 ) )  METHOD_6 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( BLOCK BLOCK (  METHOD_7 ( VAR_2 , STRING_2 , STRING_3 , STRING_4 ) )  METHOD_7 ( VAR_2 , STRING_2 , STRING_3 , STRING_4 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected static ) MODIFIER protected static ( RETURN TYPE_1<TYPE_2> ) RETURN TYPE_1<TYPE_2> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_3<TYPE_4.DiskImage> ) TYPE TYPE_3<TYPE_4.DiskImage> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<org.ovirt.engine.core.compat.Guid,TYPE_2> ) TYPE java.util.Map<org.ovirt.engine.core.compat.Guid,TYPE_2> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.HashMap < org.ovirt.engine.core.compat.Guid , TYPE_2 > ( ) ) INIT = new java.util.HashMap < org.ovirt.engine.core.compat.Guid , TYPE_2 > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_4.Disk ) TYPE TYPE_4.Disk ( NAME diskImage ) NAME diskImage ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  VAR_2 . put ( diskImage . getId ( ) , diskImage ) )  VAR_2 . put ( diskImage . getId ( ) , diskImage ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return new TYPE_5 < TYPE_2 > ( VAR_2 . METHOD_2 ( ) ) ; )  return new TYPE_5 < TYPE_2 > ( VAR_2 . METHOD_2 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.String> ) TYPE java.util.Map<java.lang.String,java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME tempVar ) NAME tempVar ( INIT = new TYPE_2 ( TYPE_3 . METHOD_2 ( ) . getId ( ) , VAR_1 , VAR_2 ) ) INIT = new TYPE_2 ( TYPE_3 . METHOD_2 ( ) . getId ( ) , VAR_1 , VAR_2 ) ) VAR VAR (  tempVar . METHOD_3 ( true ) )  tempVar . METHOD_3 ( true ) (  TYPE_4 . getInstance ( ) . METHOD_4 ( VAR_3 , tempVar , TYPE_5 . METHOD_5 ( ) ) )  TYPE_4 . getInstance ( ) . METHOD_4 ( VAR_3 , tempVar , TYPE_5 . METHOD_5 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_4 ( ) ) INIT = new TYPE_4 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_3 ) NAME VAR_3 ( INIT = null ) INIT = null ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_3 = new TYPE_6 ( VAR_1 ) )  VAR_3 = new TYPE_6 ( VAR_1 ) (  VAR_2 . METHOD_2 ( VAR_3 ) )  VAR_2 . METHOD_2 ( VAR_3 ) ) BLOCK BLOCK ( FINALLY FINALLY ( IF IF ( COND VAR_3 != null ) COND VAR_3 != null ( THEN THEN (  VAR_3 . METHOD_3 ( ) )  VAR_3 . METHOD_3 ( ) ) THEN THEN ) IF IF ) FINALLY FINALLY ) TRY TRY (  return new TYPE_7 ( VAR_2 ) ; )  return new TYPE_7 ( VAR_2 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_2 . getVm ( ) . METHOD_2 ( true ) )  TYPE_2 . getVm ( ) . METHOD_2 ( true ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = super . METHOD_1 ( ) ) INIT = super . METHOD_1 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . getParameters ( ) ) INIT = TYPE_2 . getParameters ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_4 ( ) ) INIT = new TYPE_4 ( ) ) VAR VAR (  VAR_3 . METHOD_3 ( VAR_2 . METHOD_4 ( ) ) )  VAR_3 . METHOD_3 ( VAR_2 . METHOD_4 ( ) ) (  VAR_3 . METHOD_5 ( VAR_2 . METHOD_6 ( ) ) )  VAR_3 . METHOD_5 ( VAR_2 . METHOD_6 ( ) ) (  VAR_3 . METHOD_7 ( VAR_2 . METHOD_8 ( ) ) )  VAR_3 . METHOD_7 ( VAR_2 . METHOD_8 ( ) ) (  VAR_1 . METHOD_9 ( VAR_3 ) )  VAR_1 . METHOD_9 ( VAR_3 ) (  VAR_1 . METHOD_10 ( VAR_2 . METHOD_11 ( ) ) )  VAR_1 . METHOD_10 ( VAR_2 . METHOD_11 ( ) ) (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME vmId ) NAME vmId ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < VAR_1 ) COND i < VAR_1 ( UPDATE UPDATE (  ++ i )  ++ i ) UPDATE UPDATE ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_3 . METHOD_2 ( VAR_4 . METHOD_3 ( ) ) )  VAR_3 . METHOD_2 ( VAR_4 . METHOD_3 ( ) ) (  VAR_3 . METHOD_4 ( java.lang.String.valueOf ( i ) ) )  VAR_3 . METHOD_4 ( java.lang.String.valueOf ( i ) ) (  VAR_3 . METHOD_5 ( VAR_5 ) )  VAR_3 . METHOD_5 ( VAR_5 ) (  VAR_3 . METHOD_6 ( vmId ) )  VAR_3 . METHOD_6 ( vmId ) (  VAR_2 . add ( VAR_3 ) )  VAR_2 . add ( VAR_3 ) ) BLOCK BLOCK ) FOR FOR (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  return ( ( ( ( ( ( ( this ) == ( VAR_1 ) ) || ( ( this ) == ( VAR_2 ) ) ) || ( ( this ) == ( VAR_3 ) ) ) || ( ( this ) == ( VAR_4 ) ) ) || ( ( this ) == ( VAR_5 ) ) ) || ( ( this ) == ( VAR_6 ) ) ) || ( ( this ) == ( VAR_7 ) ) ; )  return ( ( ( ( ( ( ( this ) == ( VAR_1 ) ) || ( ( this ) == ( VAR_2 ) ) ) || ( ( this ) == ( VAR_3 ) ) ) || ( ( this ) == ( VAR_4 ) ) ) || ( ( this ) == ( VAR_5 ) ) ) || ( ( this ) == ( VAR_6 ) ) ) || ( ( this ) == ( VAR_7 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 < java.lang.String > METHOD_2 ( VAR_3 ) ) INIT = VAR_2 < java.lang.String > METHOD_2 ( VAR_3 ) ) VAR VAR ( IF IF ( COND ( VAR_1 . METHOD_3 ( ) . length ( ) ) == 0 ) COND ( VAR_1 . METHOD_3 ( ) . length ( ) ) == 0 ( THEN THEN (  VAR_4 . METHOD_4 ( ) )  VAR_4 . METHOD_4 ( ) ) THEN THEN ( ELSE ELSE (  VAR_4 . METHOD_5 ( VAR_5 , VAR_1 ) )  VAR_4 . METHOD_5 ( VAR_5 , VAR_1 ) ) ELSE ELSE ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( null ) ) INIT = TYPE_2 . METHOD_2 ( null ) ) VAR VAR (  VAR_2 . add ( VAR_3 ) )  VAR_2 . add ( VAR_3 ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_4 ( VAR_5 ) ) INIT = new TYPE_4 ( VAR_5 ) ) VAR VAR (  METHOD_3 ( VAR_4 ) )  METHOD_3 ( VAR_4 ) (  VAR_6 . METHOD_4 ( VAR_1 ) )  VAR_6 . METHOD_4 ( VAR_1 ) (  VAR_7 . METHOD_5 ( ) )  VAR_7 . METHOD_5 ( ) ( TRY TRY ( BLOCK BLOCK (  METHOD_6 ( ) )  METHOD_6 ( ) (  TYPE_2 . METHOD_7 ( STRING_1 ) )  TYPE_2 . METHOD_7 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_8 ) NAME VAR_8 ( BLOCK BLOCK (  METHOD_8 ( VAR_8 , VAR_9 , VAR_4 ) )  METHOD_8 ( VAR_8 , VAR_9 , VAR_4 ) ) BLOCK BLOCK ) CATCH CATCH ( FINALLY FINALLY (  VAR_2 . METHOD_9 ( ) )  VAR_2 . METHOD_9 ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) ( IF IF ( COND ( getSelectedItem ( ) ) != null ) COND ( getSelectedItem ( ) ) != null ( THEN THEN ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StoragePool ) TYPE org.ovirt.engine.core.common.businessentities.StoragePool ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( org.ovirt.engine.core.common.businessentities.StoragePool ) ( getSelectedItem ( ) ) ) ) INIT = ( ( org.ovirt.engine.core.common.businessentities.StoragePool ) ( getSelectedItem ( ) ) ) ) VAR VAR (  VAR_2 . METHOD_2 ( ( ( VAR_1 . METHOD_3 ( ) ) != ( VAR_3 ) ) ) )  VAR_2 . METHOD_2 ( ( ( VAR_1 . METHOD_3 ( ) ) != ( VAR_3 ) ) ) (  METHOD_4 ( VAR_1 ) )  METHOD_4 ( VAR_1 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( ) , null ) ) )  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( ) , null ) ) (  METHOD_3 ( cmd , VAR_1 ) )  METHOD_3 ( cmd , VAR_1 ) (  METHOD_4 ( false ) )  METHOD_4 ( false ) (  TYPE_3 . METHOD_5 ( cmd . validate ( ) ) )  TYPE_3 . METHOD_5 ( cmd . validate ( ) ) (  METHOD_4 ( true ) )  METHOD_4 ( true ) (  METHOD_6 ( VAR_2 ) )  METHOD_6 ( VAR_2 ) (  TYPE_3 . METHOD_5 ( cmd . validate ( ) ) )  TYPE_3 . METHOD_5 ( cmd . validate ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME quota ) NAME quota ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  quota . METHOD_3 ( METHOD_4 ( ) ) )  quota . METHOD_3 ( METHOD_4 ( ) ) (  METHOD_5 ( quota ) )  METHOD_5 ( quota ) (  VAR_1 . METHOD_6 ( ) )  VAR_1 . METHOD_6 ( ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . list ( ) ) INIT = VAR_3 . list ( ) ) VAR VAR (  METHOD_7 ( VAR_2 , 1 ) )  METHOD_7 ( VAR_2 , 1 ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_2 . METHOD_8 ( ) . get ( 0 ) ) INIT = VAR_2 . METHOD_8 ( ) . get ( 0 ) ) VAR VAR (  assertEquals ( VAR_5 , VAR_4 . METHOD_9 ( ) ) )  assertEquals ( VAR_5 , VAR_4 . METHOD_9 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  command . METHOD_3 ( ) )  command . METHOD_3 ( ) (  TYPE_1 . METHOD_4 ( command . METHOD_5 ( ) ) )  TYPE_1 . METHOD_4 ( command . METHOD_5 ( ) ) (  org.mockito.Mockito . METHOD_6 ( VAR_1 ) . METHOD_7 ( ) )  org.mockito.Mockito . METHOD_6 ( VAR_1 ) . METHOD_7 ( ) (  org.mockito.Mockito . METHOD_6 ( VAR_1 ) . METHOD_8 ( TYPE_2 . METHOD_9 ( ) ) )  org.mockito.Mockito . METHOD_6 ( VAR_1 ) . METHOD_8 ( TYPE_2 . METHOD_9 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.network.Network ) TYPE org.ovirt.engine.core.common.businessentities.network.Network ( NAME network ) NAME network ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( ) . METHOD_3 ( network . getId ( ) ) ) INIT = METHOD_2 ( ) . METHOD_3 ( network . getId ( ) ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK ( IF IF ( COND VAR_3 . METHOD_4 ( ) ) COND VAR_3 . METHOD_4 ( ) ( THEN THEN ( IF IF ( COND METHOD_5 ( VAR_1 , VAR_3 , VAR_4 ) ) COND METHOD_5 ( VAR_1 , VAR_3 , VAR_4 ) ( THEN THEN (  return VAR_3 ; )  return VAR_3 ; ) THEN THEN ) IF IF ) THEN THEN ( ELSE ELSE ( IF IF ( COND METHOD_5 ( VAR_1 , VAR_3 , VAR_5 ) ) COND METHOD_5 ( VAR_1 , VAR_3 , VAR_5 ) ( THEN THEN (  return VAR_3 ; )  return VAR_3 ; ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME command ) NAME command ) VAR VAR ( VAR VAR ( TYPE TYPE_3.VdcBllMessages ) TYPE TYPE_3.VdcBllMessages ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_4 . METHOD_2 ( command . METHOD_3 ( ) ) )  TYPE_4 . METHOD_2 ( command . METHOD_3 ( ) ) (  TYPE_4 . METHOD_4 ( command . getReturnValue ( ) . METHOD_5 ( ) . METHOD_6 ( VAR_1 . name ( ) ) ) )  TYPE_4 . METHOD_4 ( command . getReturnValue ( ) . METHOD_5 ( ) . METHOD_6 ( VAR_1 . name ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( TYPE_1 . any ( VAR_2 . String class ) , TYPE_2 . METHOD_3 ( ) ) ) . thenReturn ( TYPE_3 . METHOD_4 ( ) ) )  org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( TYPE_1 . any ( VAR_2 . String class ) , TYPE_2 . METHOD_3 ( ) ) ) . thenReturn ( TYPE_3 . METHOD_4 ( ) ) (  org.mockito.Mockito.when ( VAR_3 . METHOD_5 ( ) ) . thenReturn ( VAR_1 ) )  org.mockito.Mockito.when ( VAR_3 . METHOD_5 ( ) ) . thenReturn ( VAR_1 ) (  validator = new TYPE_4 ( VAR_3 , cluster , VAR_4 ) )  validator = new TYPE_4 ( VAR_3 , cluster , VAR_4 ) (  TYPE_5 . METHOD_6 ( validator . METHOD_1 ( ) , TYPE_6 . METHOD_7 ( ) ) )  TYPE_5 . METHOD_6 ( validator . METHOD_1 ( ) , TYPE_6 . METHOD_7 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( VAR_2 , false ) )  VAR_1 . METHOD_2 ( VAR_2 , false ) (  org.mockito.Mockito.when ( cluster . METHOD_3 ( ) ) . thenReturn ( true ) )  org.mockito.Mockito.when ( cluster . METHOD_3 ( ) ) . thenReturn ( true ) (  org.mockito.Mockito.when ( cluster . METHOD_4 ( ) ) . thenReturn ( true ) )  org.mockito.Mockito.when ( cluster . METHOD_4 ( ) ) . thenReturn ( true ) (  validator = new TYPE_1 ( VAR_3 , VAR_4 , cluster , VAR_5 ) )  validator = new TYPE_1 ( VAR_3 , VAR_4 , cluster , VAR_5 ) (  TYPE_2 . METHOD_5 ( validator . METHOD_6 ( ) , TYPE_3 . METHOD_7 ( VAR_6 ) ) )  TYPE_2 . METHOD_5 ( validator . METHOD_6 ( ) , TYPE_3 . METHOD_7 ( VAR_6 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME from ) NAME from ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  from . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_1 class ) . value ( ) ) )  from . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_1 class ) . value ( ) ) (  from . METHOD_4 ( new TYPE_3 ( ) ) )  from . METHOD_4 ( new TYPE_3 ( ) ) (  from . METHOD_5 ( ) . setId ( from . getId ( ) ) )  from . METHOD_5 ( ) . setId ( from . getId ( ) ) (  return from ; )  return from ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( java.util.List < java.lang.String > ) ( returnValue ) ) ) INIT = ( ( java.util.List < java.lang.String > ) ( returnValue ) ) ) VAR VAR (  METHOD_1 ( ) . setItems ( VAR_1 ) )  METHOD_1 ( ) . setItems ( VAR_1 ) ( IF IF ( COND ! ( TYPE_1 . METHOD_2 ( VAR_2 ) ) ) COND ! ( TYPE_1 . METHOD_2 ( VAR_2 ) ) ( THEN THEN ( IF IF ( COND ! ( VAR_1 . METHOD_3 ( VAR_2 ) ) ) COND ! ( VAR_1 . METHOD_3 ( VAR_2 ) ) ( THEN THEN (  VAR_1 . add ( VAR_2 ) )  VAR_1 . add ( VAR_2 ) ) THEN THEN ) IF IF (  METHOD_1 ( ) . setSelectedItem ( VAR_2 ) )  METHOD_1 ( ) . setSelectedItem ( VAR_2 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( TYPE_1 . getParameters ( ) . getStoragePoolId ( ) , TYPE_1 . METHOD_7 ( ) , TYPE_1 . getParameters ( ) . METHOD_8 ( ) ) ) )  TYPE_1 . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( TYPE_1 . getParameters ( ) . getStoragePoolId ( ) , TYPE_1 . METHOD_7 ( ) , TYPE_1 . getParameters ( ) . METHOD_8 ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( METHOD_3 ( ) ) )  METHOD_2 ( METHOD_3 ( ) ) (  METHOD_4 ( true ) )  METHOD_4 ( true ) (  VAR_1 . METHOD_5 ( ) )  VAR_1 . METHOD_5 ( ) ( TRY TRY ( BLOCK BLOCK (  resource . get ( ) )  resource . get ( ) (  METHOD_6 ( STRING_1 ) )  METHOD_6 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( BLOCK BLOCK (  METHOD_7 ( VAR_2 ) )  METHOD_7 ( VAR_2 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN org.ovirt.engine.core.compat.Guid ) RETURN org.ovirt.engine.core.compat.Guid ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<TYPE_1.DiskImage> ) TYPE java.util.List<TYPE_1.DiskImage> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_2 . equals ( VAR_3 ) ) && ( ( TYPE_2 . getVm ( ) ) != null ) ) COND ( VAR_2 . equals ( VAR_3 ) ) && ( ( TYPE_2 . getVm ( ) ) != null ) ( THEN THEN ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ) TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME storageDomain ) NAME storageDomain ( INIT = TYPE_3 . METHOD_2 ( TYPE_2 . getVm ( ) . getStoragePoolId ( ) , VAR_1 ) ) INIT = TYPE_3 . METHOD_2 ( TYPE_2 . getVm ( ) . getStoragePoolId ( ) , VAR_1 ) ) VAR VAR ( IF IF ( COND storageDomain != null ) COND storageDomain != null ( THEN THEN (  VAR_2 = storageDomain . getId ( ) )  VAR_2 = storageDomain . getId ( ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  super . METHOD_1 ( VAR_1 ) )  super . METHOD_1 ( VAR_1 ) (  VAR_2 . METHOD_2 ( VAR_3 ) )  VAR_2 . METHOD_2 ( VAR_3 ) (  VAR_3 . METHOD_3 ( ) . METHOD_4 ( STRING_1 ) )  VAR_3 . METHOD_3 ( ) . METHOD_4 ( STRING_1 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_5 ( ) ) INIT = METHOD_5 ( ) ) VAR VAR ( IF IF ( COND ( ( VAR_4 . getId ( ) ) == null ) || ( VAR_4 . getId ( ) . isEmpty ( ) ) ) COND ( ( VAR_4 . getId ( ) ) == null ) || ( VAR_4 . getId ( ) . isEmpty ( ) ) ( THEN THEN (  VAR_4 . setId ( TYPE_3 . METHOD_6 ( ) ) )  VAR_4 . setId ( TYPE_3 . METHOD_6 ( ) ) ) THEN THEN ) IF IF (  METHOD_7 ( VAR_4 . getId ( ) ) )  METHOD_7 ( VAR_4 . getId ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) ) ) )  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) ) ) (  METHOD_3 ( true , METHOD_4 ( ) , VAR_2 ) )  METHOD_3 ( true , METHOD_4 ( ) , VAR_2 ) (  TYPE_3 . METHOD_5 ( cmd . validate ( ) ) )  TYPE_3 . METHOD_5 ( cmd . validate ( ) ) (  TYPE_3 . METHOD_6 ( cmd . getReturnValue ( ) . METHOD_7 ( ) . METHOD_8 ( TYPE_4 . toString ( ) ) ) )  TYPE_3 . METHOD_6 ( cmd . getReturnValue ( ) . METHOD_7 ( ) . METHOD_8 ( TYPE_4 . toString ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME returnValue ) NAME returnValue ( INIT = true ) INIT = true ) VAR VAR ( IF IF ( COND ( TYPE_1 . METHOD_2 ( ) ) == null ) COND ( TYPE_1 . METHOD_2 ( ) ) == null ( THEN THEN (  addCanDoActionMessage ( VAR_1 ) )  addCanDoActionMessage ( VAR_1 ) (  returnValue = false )  returnValue = false ) THEN THEN ) IF IF ( IF IF ( COND ( ( TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ) == ( VAR_2 ) ) || ( ( TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ) == ( VAR_3 ) ) ) COND ( ( TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ) == ( VAR_2 ) ) || ( ( TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ) == ( VAR_3 ) ) ( THEN THEN (  addCanDoActionMessage ( VAR_4 ) )  addCanDoActionMessage ( VAR_4 ) (  returnValue = false )  returnValue = false ) THEN THEN ) IF IF (  return returnValue ; )  return returnValue ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME context ) NAME context ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME value ) NAME value ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME id ) NAME id ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND value != null ) COND value != null ( THEN THEN (  VAR_1 . append ( VAR_2 . METHOD_2 ( VAR_3 , VAR_4 , TYPE_4 . METHOD_3 ( TYPE_5 . METHOD_4 ( value ) . METHOD_5 ( ) ) ) ) )  VAR_1 . append ( VAR_2 . METHOD_2 ( VAR_3 , VAR_4 , TYPE_4 . METHOD_3 ( TYPE_5 . METHOD_4 ( value ) . METHOD_5 ( ) ) ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( ) )  VAR_1 . METHOD_2 ( ) (  org.mockito.Mockito . METHOD_3 ( VAR_2 , org.mockito.Mockito . METHOD_4 ( 0 ) ) . METHOD_5 ( VAR_3 [ 0 ] , null ) )  org.mockito.Mockito . METHOD_3 ( VAR_2 , org.mockito.Mockito . METHOD_4 ( 0 ) ) . METHOD_5 ( VAR_3 [ 0 ] , null ) (  org.mockito.Mockito . METHOD_3 ( VAR_2 , org.mockito.Mockito . METHOD_4 ( 0 ) ) . METHOD_5 ( VAR_3 [ 1 ] , null ) )  org.mockito.Mockito . METHOD_3 ( VAR_2 , org.mockito.Mockito . METHOD_4 ( 0 ) ) . METHOD_5 ( VAR_3 [ 1 ] , null ) (  org.mockito.Mockito . METHOD_3 ( VAR_4 , org.mockito.Mockito . METHOD_4 ( 0 ) ) . METHOD_6 ( TYPE_1 . any ( VAR_5 class ) ) )  org.mockito.Mockito . METHOD_3 ( VAR_4 , org.mockito.Mockito . METHOD_4 ( 0 ) ) . METHOD_6 ( TYPE_1 . any ( VAR_5 class ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( ) )  TYPE_1 . METHOD_2 ( ) ( IF IF ( COND ( TYPE_1 . getVm ( ) ) != null ) COND ( TYPE_1 . getVm ( ) ) != null ( THEN THEN (  TYPE_2 . METHOD_3 ( TYPE_1 . getVm ( ) . METHOD_4 ( ) , TYPE_1 . METHOD_5 ( ) ) )  TYPE_2 . METHOD_3 ( TYPE_1 . getVm ( ) . METHOD_4 ( ) , TYPE_1 . METHOD_5 ( ) ) (  METHOD_6 ( ) )  METHOD_6 ( ) ) THEN THEN ( ELSE ELSE (  TYPE_1 . METHOD_7 ( false ) )  TYPE_1 . METHOD_7 ( false ) (  log . METHOD_8 ( STRING_1 ) )  log . METHOD_8 ( STRING_1 ) ) ELSE ELSE ) IF IF (  TYPE_1 . METHOD_9 ( true ) )  TYPE_1 . METHOD_9 ( true ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 = new TYPE_1 ( ) )  VAR_1 = new TYPE_1 ( ) ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Integer ) RETURN java.lang.Integer ( NAME METHOD_2 ) NAME METHOD_2 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return VAR_1 . METHOD_3 ( ) . getValue ( ) ; )  return VAR_1 . METHOD_3 ( ) . getValue ( ) ; ) BLOCK BLOCK ) METHOD METHOD (  VAR_2 = new TYPE_2 ( new TYPE_3 < java.lang.Integer > ( ) , new TYPE_4 < java.lang.Integer > ( ) { public java.lang.Integer METHOD_2 ( TYPE_5 VAR_3 ) throws TYPE_6 { return VAR_1 . METHOD_3 ( ) . getValue ( ) ; } } ) )  VAR_2 = new TYPE_2 ( new TYPE_3 < java.lang.Integer > ( ) , new TYPE_4 < java.lang.Integer > ( ) { public java.lang.Integer METHOD_2 ( TYPE_5 VAR_3 ) throws TYPE_6 { return VAR_1 . METHOD_3 ( ) . getValue ( ) ; } } ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  METHOD_3 ( VAR_1 , VAR_2 ) )  METHOD_3 ( VAR_1 , VAR_2 ) (  METHOD_4 ( VAR_3 , org.ovirt.engine.core.compat.Guid . METHOD_5 ( ) , VAR_1 ) )  METHOD_4 ( VAR_3 , org.ovirt.engine.core.compat.Guid . METHOD_5 ( ) , VAR_1 ) (  org.mockito.Mockito.doReturn ( new TYPE_1 . ValidationResult ( VAR_4 ) ) . when ( VAR_5 ) . METHOD_6 ( TYPE_2 . METHOD_7 ( ) , TYPE_2 . METHOD_8 ( ) ) )  org.mockito.Mockito.doReturn ( new TYPE_1 . ValidationResult ( VAR_4 ) ) . when ( VAR_5 ) . METHOD_6 ( TYPE_2 . METHOD_7 ( ) , TYPE_2 . METHOD_8 ( ) ) (  TYPE_3 . METHOD_9 ( command . validate ( ) ) )  TYPE_3 . METHOD_9 ( command . validate ( ) ) (  TYPE_3 . METHOD_10 ( command . getReturnValue ( ) . METHOD_11 ( ) . METHOD_12 ( TYPE_4 . name ( ) ) ) )  TYPE_3 . METHOD_10 ( command . getReturnValue ( ) . METHOD_11 ( ) . METHOD_12 ( TYPE_4 . name ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) RETURN org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME getModel ) NAME getModel ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME nic ) NAME nic ( INIT = new org.ovirt.engine.core.common.businessentities . VdsNetworkInterface ( ) ) INIT = new org.ovirt.engine.core.common.businessentities . VdsNetworkInterface ( ) ) VAR VAR (  nic . setId ( VAR_1 [ 1 ] ) )  nic . setId ( VAR_1 [ 1 ] ) (  nic . METHOD_1 ( VAR_2 [ i ] ) )  nic . METHOD_1 ( VAR_2 [ i ] ) (  nic . METHOD_2 ( VAR_3 [ i ] ) )  nic . METHOD_2 ( VAR_3 [ i ] ) (  nic . METHOD_3 ( VAR_4 [ i ] ) )  nic . METHOD_3 ( VAR_4 [ i ] ) (  nic . METHOD_4 ( VAR_5 [ i ] ) )  nic . METHOD_4 ( VAR_5 [ i ] ) (  return nic ; )  return nic ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME response ) NAME response ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( response . METHOD_2 ( ) ) == ( VAR_2 ) ) && ( response . METHOD_3 ( ) . METHOD_4 ( ) . equals ( VAR_3 ) ) ) COND ( ( response . METHOD_2 ( ) ) == ( VAR_2 ) ) && ( response . METHOD_3 ( ) . METHOD_4 ( ) . equals ( VAR_3 ) ) ( THEN THEN (  VAR_4 = true )  VAR_4 = true (  METHOD_5 ( ) . METHOD_6 ( url , params ) )  METHOD_5 ( ) . METHOD_6 ( url , params ) ) THEN THEN ( ELSE ELSE (  VAR_5 . METHOD_7 ( VAR_6 . METHOD_8 ( ) ) )  VAR_5 . METHOD_7 ( VAR_6 . METHOD_8 ( ) ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) ( IF IF ( COND ! ( TYPE_1 . getParameters ( ) . METHOD_3 ( ) ) ) COND ! ( TYPE_1 . getParameters ( ) . METHOD_3 ( ) ) ( THEN THEN ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( storageDomain ) ) INIT = new TYPE_2 ( storageDomain ) ) VAR VAR ( IF IF ( COND ! ( validate ( VAR_1 . METHOD_4 ( ) ) ) ) COND ! ( validate ( VAR_1 . METHOD_4 ( ) ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( null ) ) INIT = METHOD_2 ( null ) ) VAR VAR (  METHOD_3 ( VAR_2 ) )  METHOD_3 ( VAR_2 ) (  VAR_3 . METHOD_4 ( ) )  VAR_3 . METHOD_4 ( ) (  VAR_4 . METHOD_5 ( VAR_1 ) )  VAR_4 . METHOD_5 ( VAR_1 ) (  METHOD_6 ( METHOD_7 ( ) ) )  METHOD_6 ( METHOD_7 ( ) ) (  METHOD_8 ( STRING_1 ) )  METHOD_8 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_5 ) NAME VAR_5 ( BLOCK BLOCK (  METHOD_9 ( VAR_5 ) )  METHOD_9 ( VAR_5 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.doReturn ( new TYPE_1 . DiskImage ( ) ) . when ( validator ) . METHOD_2 ( TYPE_2 . any ( VAR_1 . Guid class ) ) )  org.mockito.Mockito.doReturn ( new TYPE_1 . DiskImage ( ) ) . when ( validator ) . METHOD_2 ( TYPE_2 . any ( VAR_1 . Guid class ) ) (  TYPE_3 . METHOD_3 ( validator . METHOD_4 ( ) , TYPE_4 . METHOD_5 ( TYPE_5 . METHOD_6 ( VAR_2 ) ) . METHOD_7 ( TYPE_5 . METHOD_8 ( TYPE_4 . METHOD_9 ( TYPE_6 . METHOD_10 ( VAR_3 , VAR_4 ) ) ) ) ) )  TYPE_3 . METHOD_3 ( validator . METHOD_4 ( ) , TYPE_4 . METHOD_5 ( TYPE_5 . METHOD_6 ( VAR_2 ) ) . METHOD_7 ( TYPE_5 . METHOD_8 ( TYPE_4 . METHOD_9 ( TYPE_6 . METHOD_10 ( VAR_3 , VAR_4 ) ) ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . getParameters ( ) . METHOD_4 ( ) . getValue ( ) , TYPE_1 . getParameters ( ) . getStoragePoolId ( ) . toString ( ) , METHOD_5 ( ) ) )  VAR_1 = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . getParameters ( ) . METHOD_4 ( ) . getValue ( ) , TYPE_1 . getParameters ( ) . getStoragePoolId ( ) . toString ( ) , METHOD_5 ( ) ) (  TYPE_1 . METHOD_6 ( ) )  TYPE_1 . METHOD_6 ( ) ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.String> ) TYPE java.util.Map<java.lang.String,java.lang.String> ( NAME returnValue ) NAME returnValue ( INIT = VAR_1 . METHOD_7 ( ) ) INIT = VAR_1 . METHOD_7 ( ) ) VAR VAR (  TYPE_1 . METHOD_8 ( returnValue ) )  TYPE_1 . METHOD_8 ( returnValue ) (  METHOD_9 ( returnValue ) )  METHOD_9 ( returnValue ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return new TYPE_1 ( new TYPE_2 ( VAR_1 , VAR_2 , METHOD_2 ( VAR_1 , STRING_1 , 1 ) . get ( 0 ) , METHOD_2 ( VAR_1 , STRING_2 , 1 ) . get ( 0 ) , false ) ) ; )  return new TYPE_1 ( new TYPE_2 ( VAR_1 , VAR_2 , METHOD_2 ( VAR_1 , STRING_1 , 1 ) . get ( 0 ) , METHOD_2 ( VAR_1 , STRING_2 , 1 ) . get ( 0 ) , false ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ( INIT = ( ( TYPE_1 ) ( target ) ) ) INIT = ( ( TYPE_1 ) ( target ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Disk> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Disk> ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Disk > ) ( returnValue ) ) ) INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Disk > ) ( returnValue ) ) ) VAR VAR (  TYPE_2 . METHOD_2 ( VAR_1 , new TYPE_3 ( ) ) )  TYPE_2 . METHOD_2 ( VAR_1 , new TYPE_3 ( ) ) ( VAR VAR ( TYPE java.util.ArrayList<TYPE_4> ) TYPE java.util.ArrayList<TYPE_4> ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_3 ( VAR_1 ) ) INIT = TYPE_2 . METHOD_3 ( VAR_1 ) ) VAR VAR (  model . METHOD_4 ( ) . setItems ( TYPE_2 . METHOD_5 ( TYPE_2 . METHOD_6 ( VAR_2 , VAR_3 ) ) ) )  model . METHOD_4 ( ) . setItems ( TYPE_2 . METHOD_5 ( TYPE_2 . METHOD_6 ( VAR_2 , VAR_3 ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) )  METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ( IN VAR_1 . METHOD_5 ( ) ) IN VAR_1 . METHOD_5 ( ) ( BLOCK BLOCK (  METHOD_2 ( ) . METHOD_3 ( ) . METHOD_6 ( VAR_1 . getId ( ) , VAR_2 ) )  METHOD_2 ( ) . METHOD_3 ( ) . METHOD_6 ( VAR_1 . getId ( ) , VAR_2 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_1 . METHOD_7 ( ) ) IN VAR_1 . METHOD_7 ( ) ( BLOCK BLOCK (  METHOD_2 ( ) . METHOD_3 ( ) . METHOD_8 ( VAR_1 . getId ( ) , VAR_3 ) )  METHOD_2 ( ) . METHOD_3 ( ) . METHOD_8 ( VAR_1 . getId ( ) , VAR_3 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  getReturnValue ( ) . METHOD_9 ( VAR_1 . getId ( ) ) )  getReturnValue ( ) . METHOD_9 ( VAR_1 . getId ( ) ) (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME map ) NAME map ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME type ) NAME type ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_2 . METHOD_1 ( new TYPE_3 ( ) ) )  VAR_2 . METHOD_1 ( new TYPE_3 ( ) ) (  VAR_2 . METHOD_2 ( ) . METHOD_3 ( new TYPE_4 ( ) ) )  VAR_2 . METHOD_2 ( ) . METHOD_3 ( new TYPE_4 ( ) ) (  VAR_2 . METHOD_2 ( ) . METHOD_4 ( ) . METHOD_5 ( VAR_1 ) )  VAR_2 . METHOD_2 ( ) . METHOD_4 ( ) . METHOD_5 ( VAR_1 ) (  VAR_2 . METHOD_2 ( ) . METHOD_4 ( ) . METHOD_6 ( type . value ( ) ) )  VAR_2 . METHOD_2 ( ) . METHOD_4 ( ) . METHOD_6 ( type . value ( ) ) (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( METHOD_3 ( ) ) )  METHOD_2 ( METHOD_3 ( ) ) (  METHOD_4 ( VAR_1 , VAR_2 class , new java.lang.String [ ] { STRING_1 , STRING_2 } , new java.lang.Object [ ] { true , false } , METHOD_5 ( ) ) )  METHOD_4 ( VAR_1 , VAR_2 class , new java.lang.String [ ] { STRING_1 , STRING_2 } , new java.lang.Object [ ] { true , false } , METHOD_5 ( ) ) (  METHOD_6 ( ) )  METHOD_6 ( ) (  VAR_3 . METHOD_7 ( ) )  VAR_3 . METHOD_7 ( ) (  METHOD_8 ( resource . get ( ) , 0 ) )  METHOD_8 ( resource . get ( ) , 0 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME validate ) NAME validate ( BLOCK BLOCK ( IF IF ( COND ! ( super . validate ( ) ) ) COND ! ( super . validate ( ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( IF IF ( COND ( METHOD_1 ( ) ) == null ) COND ( METHOD_1 ( ) ) == null ( THEN THEN (  METHOD_2 ( VAR_1 ) )  METHOD_2 ( VAR_1 ) (  return false ; )  return false ; ) THEN THEN ) IF IF ( IF IF ( COND METHOD_1 ( ) . METHOD_3 ( ) ) COND METHOD_1 ( ) . METHOD_3 ( ) ( THEN THEN (  METHOD_2 ( VAR_2 ) )  METHOD_2 ( VAR_2 ) (  return false ; )  return false ; ) THEN THEN ) IF IF (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1.DiskImage ) RETURN TYPE_1.DiskImage ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.DiskImage ) TYPE TYPE_1.DiskImage ( NAME disk ) NAME disk ( INIT = new TYPE_1 . DiskImage ( ) ) INIT = new TYPE_1 . DiskImage ( ) ) VAR VAR (  disk . METHOD_2 ( VAR_1 ) )  disk . METHOD_2 ( VAR_1 ) ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.compat.Guid> ) TYPE java.util.ArrayList<org.ovirt.engine.core.compat.Guid> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR (  VAR_2 . add ( VAR_3 ) )  VAR_2 . add ( VAR_3 ) (  disk . METHOD_3 ( VAR_2 ) )  disk . METHOD_3 ( VAR_2 ) (  disk . METHOD_4 ( VAR_4 ) )  disk . METHOD_4 ( VAR_4 ) (  return disk ; )  return disk ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME storage ) NAME storage ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  storage . setId ( VAR_1 ) )  storage . setId ( VAR_1 ) (  storage . METHOD_2 ( new TYPE_2 ( ) ) )  storage . METHOD_2 ( new TYPE_2 ( ) ) (  storage . METHOD_3 ( ) . setId ( VAR_2 ) )  storage . METHOD_3 ( ) . setId ( VAR_2 ) (  TYPE_3 . METHOD_4 ( METHOD_5 ( ) , storage ) )  TYPE_3 . METHOD_4 ( METHOD_5 ( ) , storage ) (  assertEquals ( VAR_3 , storage . METHOD_6 ( ) ) )  assertEquals ( VAR_3 , storage . METHOD_6 ( ) ) (  assertEquals ( VAR_4 , storage . METHOD_3 ( ) . METHOD_6 ( ) ) )  assertEquals ( VAR_4 , storage . METHOD_3 ( ) . METHOD_6 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME vds ) NAME vds ( INIT = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) . get ( TYPE_1 . getParameters ( ) . METHOD_4 ( ) , TYPE_1 . METHOD_5 ( ) , TYPE_1 . getParameters ( ) . METHOD_6 ( ) ) ) INIT = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) . get ( TYPE_1 . getParameters ( ) . METHOD_4 ( ) , TYPE_1 . METHOD_5 ( ) , TYPE_1 . getParameters ( ) . METHOD_6 ( ) ) ) VAR VAR ( IF IF ( COND vds != null ) COND vds != null ( THEN THEN (  vds . METHOD_7 ( TYPE_2 . METHOD_8 ( vds . METHOD_9 ( ) , vds . METHOD_10 ( ) ) ) )  vds . METHOD_7 ( TYPE_2 . METHOD_8 ( vds . METHOD_9 ( ) , vds . METHOD_10 ( ) ) ) ) THEN THEN ) IF IF (  TYPE_1 . METHOD_11 ( ) . METHOD_12 ( vds ) )  TYPE_1 . METHOD_11 ( ) . METHOD_12 ( vds ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> ) RETURN java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ( NAME i ) NAME i ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( IF IF ( COND ! ( TYPE_1 . METHOD_2 ( i . METHOD_3 ( ) ) ) ) COND ! ( TYPE_1 . METHOD_2 ( i . METHOD_3 ( ) ) ) ( THEN THEN (  VAR_2 . add ( i ) )  VAR_2 . add ( i ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.ui.uicommonweb.UICommand ) TYPE org.ovirt.engine.ui.uicommonweb.UICommand ( NAME VAR_1 ) NAME VAR_1 ( INIT = new org.ovirt.engine.ui.uicommonweb.UICommand ( STRING_1 , this ) ) INIT = new org.ovirt.engine.ui.uicommonweb.UICommand ( STRING_1 , this ) ) VAR VAR (  VAR_1 . setTitle ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_2 ( ) ) )  VAR_1 . setTitle ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_2 ( ) ) (  VAR_1 . METHOD_3 ( true ) )  VAR_1 . METHOD_3 ( true ) (  METHOD_4 ( ) . add ( VAR_1 ) )  METHOD_4 ( ) . add ( VAR_1 ) ( VAR VAR ( TYPE org.ovirt.engine.ui.uicommonweb.UICommand ) TYPE org.ovirt.engine.ui.uicommonweb.UICommand ( NAME VAR_2 ) NAME VAR_2 ( INIT = new org.ovirt.engine.ui.uicommonweb.UICommand ( STRING_2 , this ) ) INIT = new org.ovirt.engine.ui.uicommonweb.UICommand ( STRING_2 , this ) ) VAR VAR (  VAR_2 . setTitle ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_5 ( ) ) )  VAR_2 . setTitle ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_5 ( ) ) (  VAR_2 . METHOD_6 ( true ) )  VAR_2 . METHOD_6 ( true ) (  METHOD_4 ( ) . add ( VAR_2 ) )  METHOD_4 ( ) . add ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.VM ) TYPE TYPE_1.VM ( NAME vm ) NAME vm ( INIT = new TYPE_1 . VM ( ) ) INIT = new TYPE_1 . VM ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  VAR_1 . METHOD_2 ( VAR_2 ) )  VAR_1 . METHOD_2 ( VAR_2 ) (  VAR_1 . METHOD_3 ( STRING_1 ) )  VAR_1 . METHOD_3 ( STRING_1 ) (  vm . METHOD_4 ( VAR_1 ) )  vm . METHOD_4 ( VAR_1 ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME map ) NAME map ( INIT = TYPE_4 . map ( vm , ( ( TYPE_3 ) ( null ) ) ) ) INIT = TYPE_4 . map ( vm , ( ( TYPE_3 ) ( null ) ) ) ) VAR VAR (  METHOD_5 ( map . METHOD_6 ( ) ) )  METHOD_5 ( map . METHOD_6 ( ) ) (  assertEquals ( map . METHOD_6 ( ) , STRING_1 ) )  assertEquals ( map . METHOD_6 ( ) , STRING_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME id ) NAME id ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ( INIT = new org.ovirt.engine.core.compat.Guid ( id . METHOD_2 ( ) , false ) ) INIT = new org.ovirt.engine.core.compat.Guid ( id . METHOD_2 ( ) , false ) ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_3 ( ) ) INIT = VAR_1 . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND VAR_4 < ( VAR_2 . length ) ) COND VAR_4 < ( VAR_2 . length ) ( UPDATE UPDATE (  VAR_4 ++ )  VAR_4 ++ ) UPDATE UPDATE ( BLOCK BLOCK (  VAR_3 . append ( ( STRING_1 + ( java.lang.String . METHOD_4 ( STRING_2 , VAR_2 [ VAR_4 ] ) ) ) ) )  VAR_3 . append ( ( STRING_1 + ( java.lang.String . METHOD_4 ( STRING_2 , VAR_2 [ VAR_4 ] ) ) ) ) ) BLOCK BLOCK ) FOR FOR (  return VAR_3 . toString ( ) ; )  return VAR_3 . toString ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME parameters ) NAME parameters ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  super . METHOD_1 ( parameters ) )  super . METHOD_1 ( parameters ) (  METHOD_2 ( parameters . METHOD_3 ( ) ) )  METHOD_2 ( parameters . METHOD_3 ( ) ) (  parameters . METHOD_4 ( new TYPE_2 ( VAR_1 . VmTemplate , TYPE_3 . METHOD_5 ( ) ) ) )  parameters . METHOD_4 ( new TYPE_2 ( VAR_1 . VmTemplate , TYPE_3 . METHOD_5 ( ) ) ) (  VAR_2 = TYPE_3 . getParameters ( ) . METHOD_6 ( ) )  VAR_2 = TYPE_3 . getParameters ( ) . METHOD_6 ( ) (  VAR_3 = new java.util.HashMap < > ( ) )  VAR_3 = new java.util.HashMap < > ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND org.ovirt.engine.ui.frontend.Frontend . METHOD_2 ( VAR_1 ) ) COND org.ovirt.engine.ui.frontend.Frontend . METHOD_2 ( VAR_1 ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  VAR_2 . log ( VAR_3 , ( STRING_1 + VAR_1 ) , VAR_1 ) )  VAR_2 . log ( VAR_3 , ( STRING_1 + VAR_1 ) , VAR_1 ) (  org.ovirt.engine.ui.frontend.Frontend . METHOD_3 ( VAR_1 ) )  org.ovirt.engine.ui.frontend.Frontend . METHOD_3 ( VAR_1 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_2 ( VAR_5 , parameters , null ) ) INIT = new TYPE_2 ( VAR_5 , parameters , null ) ) VAR VAR (  org.ovirt.engine.ui.frontend.Frontend . METHOD_3 ( VAR_1 ) )  org.ovirt.engine.ui.frontend.Frontend . METHOD_3 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  < org.ovirt.engine.core.compat.Guid > VAR_1 = new TYPE_2 < org.ovirt.engine.core.compat.Guid > ( VAR_2 , VAR_3 . IdQueryParameters class ) )  < org.ovirt.engine.core.compat.Guid > VAR_1 = new TYPE_2 < org.ovirt.engine.core.compat.Guid > ( VAR_2 , VAR_3 . IdQueryParameters class ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_3 ( VAR_1 , METHOD_2 ( id ) ) ) INIT = new TYPE_3 ( VAR_1 , METHOD_2 ( id ) ) ) VAR VAR (  return inject ( new TYPE_4 < TYPE_5 . Disk , TYPE_5 . Disk > ( VAR_5 , VAR_6 , VAR_4 ) ) ; )  return inject ( new TYPE_4 < TYPE_5 . Disk , TYPE_5 . Disk > ( VAR_5 , VAR_6 , VAR_4 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME value ) NAME value ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND value == null ) COND value == null ( THEN THEN (  return METHOD_2 ( value ) ; )  return METHOD_2 ( value ) ; ) THEN THEN ) IF IF ( IF IF ( COND value . METHOD_3 ( ) ) COND value . METHOD_3 ( ) ( THEN THEN (  return STRING_1 ; )  return STRING_1 ; ) THEN THEN ( ELSE ELSE ( IF IF ( COND value . METHOD_4 ( ) ) COND value . METHOD_4 ( ) ( THEN THEN (  return STRING_2 ; )  return STRING_2 ; ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF (  return STRING_3 ; )  return STRING_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME instance ) NAME instance ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2<?>[] ) TYPE TYPE_2<?>[] ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object[] ) TYPE java.lang.Object[] ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_2 ( instance , VAR_1 ) ) INIT = METHOD_2 ( instance , VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_5 ) NAME VAR_5 ( INIT = TYPE_3 . METHOD_3 ( ) . METHOD_4 ( VAR_4 , VAR_6 ) . METHOD_5 ( VAR_7 class ) . METHOD_6 ( ) ) INIT = TYPE_3 . METHOD_3 ( ) . METHOD_4 ( VAR_4 , VAR_6 ) . METHOD_5 ( VAR_7 class ) . METHOD_6 ( ) ) VAR VAR (  METHOD_7 ( VAR_5 . METHOD_8 ( ) , instance , VAR_1 , VAR_2 , VAR_3 ) )  METHOD_7 ( VAR_5 . METHOD_8 ( ) , instance , VAR_1 , VAR_2 , VAR_3 ) (  return VAR_5 ; )  return VAR_5 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME vds ) NAME vds ( INIT = null ) INIT = null ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ( INIT = new org.ovirt.engine.core.common.businessentities.VM ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.VM ( ) ) VAR VAR (  vm . METHOD_2 ( VAR_2 ) )  vm . METHOD_2 ( VAR_2 ) ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 ) INIT = VAR_4 ) VAR VAR (  VAR_1 . METHOD_3 ( vds ) )  VAR_1 . METHOD_3 ( vds ) (  VAR_1 . METHOD_4 ( VAR_3 ) )  VAR_1 . METHOD_4 ( VAR_3 ) (  VAR_1 . METHOD_5 ( vm ) )  VAR_1 . METHOD_5 ( vm ) ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_1 . METHOD_6 ( ) ) INIT = VAR_1 . METHOD_6 ( ) ) VAR VAR (  TYPE_3 . assertEquals ( VAR_4 , VAR_5 . getId ( ) ) )  TYPE_3 . assertEquals ( VAR_4 , VAR_5 . getId ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1.DiskImage ) TYPE TYPE_1.DiskImage ( NAME disk ) NAME disk ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( TYPE_2 . METHOD_2 ( ) . METHOD_3 ( getVm ( ) . getId ( ) , VAR_1 ) ) ) COND ! ( TYPE_2 . METHOD_2 ( ) . METHOD_3 ( getVm ( ) . getId ( ) , VAR_1 ) ) ( THEN THEN (  TYPE_2 . METHOD_2 ( ) . METHOD_4 ( new TYPE_3 ( VAR_1 , VAR_2 , getVm ( ) . getId ( ) , null , VAR_3 , disk . METHOD_5 ( ) , disk . METHOD_6 ( ) , disk . METHOD_7 ( ) ) ) )  TYPE_2 . METHOD_2 ( ) . METHOD_4 ( new TYPE_3 ( VAR_1 , VAR_2 , getVm ( ) . getId ( ) , null , VAR_3 , disk . METHOD_5 ( ) , disk . METHOD_6 ( ) , disk . METHOD_7 ( ) ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.Boolean ) TYPE java.lang.Boolean ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( java.lang.Boolean ) ( returnValue ) ) ) INIT = ( ( java.lang.Boolean ) ( returnValue ) ) ) VAR VAR ( IF IF ( COND ! VAR_1 ) COND ! VAR_1 ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ( NAME i ) NAME i ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK ( IF IF ( COND TYPE_1 . METHOD_2 ( i . METHOD_3 ( ) , VAR_3 . getName ( ) ) ) COND TYPE_1 . METHOD_2 ( i . METHOD_3 ( ) , VAR_3 . getName ( ) ) ( THEN THEN (  VAR_4 . add ( i ) )  VAR_4 . add ( i ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF (  VAR_5 . append ( VAR_3 . getName ( ) ) )  VAR_5 . append ( VAR_3 . getName ( ) ) (  VAR_6 . METHOD_1 ( VAR_7 , VAR_4 ) )  VAR_6 . METHOD_1 ( VAR_7 , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  model . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_1 class ) . value ( ) ) )  model . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_1 class ) . value ( ) ) (  model . METHOD_4 ( TYPE_2 . METHOD_3 ( VAR_2 class ) . value ( ) ) )  model . METHOD_4 ( TYPE_2 . METHOD_3 ( VAR_2 class ) . value ( ) ) (  model . METHOD_5 ( TYPE_2 . METHOD_3 ( VAR_3 class ) . value ( ) ) )  model . METHOD_5 ( TYPE_2 . METHOD_3 ( VAR_3 class ) . value ( ) ) (  model . METHOD_6 ( TYPE_3 . METHOD_7 ( TYPE_2 . METHOD_3 ( VAR_4 class ) ) ) )  model . METHOD_6 ( TYPE_3 . METHOD_7 ( TYPE_2 . METHOD_3 ( VAR_4 class ) ) ) (  model . METHOD_8 ( null ) )  model . METHOD_8 ( null ) (  return model ; )  return model ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME type ) NAME type ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return ( VAR_1 != null ) && ( ( VAR_1 . isEmpty ( ) ) || ( TYPE_3 . getInstance ( ) . METHOD_2 ( type ) . METHOD_3 ( TYPE_4 . METHOD_4 ( ) , VAR_1 , TYPE_4 . METHOD_5 ( ) . getId ( ) ) ) ) ; )  return ( VAR_1 != null ) && ( ( VAR_1 . isEmpty ( ) ) || ( TYPE_3 . getInstance ( ) . METHOD_2 ( type ) . METHOD_3 ( TYPE_4 . METHOD_4 ( ) , VAR_1 , TYPE_4 . METHOD_5 ( ) . getId ( ) ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME quota ) NAME quota ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  quota . METHOD_3 ( METHOD_4 ( ) ) )  quota . METHOD_3 ( METHOD_4 ( ) ) (  METHOD_5 ( quota ) )  METHOD_5 ( quota ) (  VAR_1 . METHOD_6 ( ) )  VAR_1 . METHOD_6 ( ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . list ( ) ) INIT = VAR_3 . list ( ) ) VAR VAR (  METHOD_7 ( VAR_2 , 1 ) )  METHOD_7 ( VAR_2 , 1 ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_2 . METHOD_8 ( ) . get ( 0 ) ) INIT = VAR_2 . METHOD_8 ( ) . get ( 0 ) ) VAR VAR (  assertEquals ( VAR_4 . METHOD_9 ( ) , VAR_5 ) )  assertEquals ( VAR_4 . METHOD_9 ( ) , VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME parameters ) NAME parameters ( INIT = null ) INIT = null ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  parameters = VAR_2 . METHOD_2 ( ) )  parameters = VAR_2 . METHOD_2 ( ) (  parameters . getParameters ( ) . add ( new TYPE_2 ( VAR_1 , null , VAR_3 , VAR_4 , FLOAT_1 ) ) )  parameters . getParameters ( ) . add ( new TYPE_2 ( VAR_1 , null , VAR_3 , VAR_4 , FLOAT_1 ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  return VAR_5 . METHOD_3 ( parameters ) ; )  return VAR_5 . METHOD_3 ( parameters ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN (  VAR_4 . METHOD_3 ( VAR_2 . METHOD_2 ( ) ) )  VAR_4 . METHOD_3 ( VAR_2 . METHOD_2 ( ) ) ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME name ) NAME name ( INIT = new TYPE_2 ( VAR_4 ) ) INIT = new TYPE_2 ( VAR_4 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  result . METHOD_4 ( METHOD_5 ( name ) ) )  result . METHOD_4 ( METHOD_5 ( name ) ) (  result . METHOD_6 ( METHOD_7 ( VAR_3 , METHOD_8 ( VAR_1 ) ) ) )  result . METHOD_6 ( METHOD_7 ( VAR_3 , METHOD_8 ( VAR_1 ) ) ) (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_1 ) ( target ) ) ) INIT = ( ( TYPE_1 ) ( target ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_1 ( ( ( TYPE_3 ) ( returnValue ) ) ) ) INIT = VAR_1 . METHOD_1 ( ( ( TYPE_3 ) ( returnValue ) ) ) ) VAR VAR (  VAR_2 . getName ( ) . setEntity ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_2 ( ) ) )  VAR_2 . getName ( ) . setEntity ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_2 ( ) ) (  VAR_2 . METHOD_3 ( VAR_3 ) )  VAR_2 . METHOD_3 ( VAR_3 ) (  VAR_2 . METHOD_4 ( false ) )  VAR_2 . METHOD_4 ( false ) (  VAR_1 . setItems ( new java.util.ArrayList ( TYPE_4 . METHOD_5 ( new TYPE_2 [ ] { VAR_2 } ) ) ) )  VAR_1 . setItems ( new java.util.ArrayList ( TYPE_4 . METHOD_5 ( new TYPE_2 [ ] { VAR_2 } ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME status ) NAME status ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( VAR_1 , VAR_2 ) )  METHOD_2 ( VAR_1 , VAR_2 ) (  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( cmd ) . METHOD_3 ( ) )  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( cmd ) . METHOD_3 ( ) (  org.mockito.Mockito.when ( VAR_3 . get ( TYPE_3 . any ( VAR_4 . Guid class ) ) ) . thenReturn ( METHOD_4 ( VAR_5 , STRING_1 , VAR_6 , status ) ) )  org.mockito.Mockito.when ( VAR_3 . get ( TYPE_3 . any ( VAR_4 . Guid class ) ) ) . thenReturn ( METHOD_4 ( VAR_5 , STRING_1 , VAR_6 , status ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( source ) ) : null ; )  return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( source ) ) : null ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( source ) ) : null ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( source ) ) : null ; } } (  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_5 , new TYPE_3 ( VAR_1 , VAR_3 , VAR_2 , VAR_4 ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_5 , new TYPE_3 ( VAR_1 , VAR_3 , VAR_2 , VAR_4 ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.when ( VAR_1 . get ( ) ) . thenReturn ( VAR_2 ) )  org.mockito.Mockito.when ( VAR_1 . get ( ) ) . thenReturn ( VAR_2 ) (  org.mockito.Mockito.when ( VAR_2 . METHOD_2 ( ) ) . thenReturn ( VAR_3 ) )  org.mockito.Mockito.when ( VAR_2 . METHOD_2 ( ) ) . thenReturn ( VAR_3 ) (  org.mockito.Mockito.when ( VAR_2 . getStoragePoolId ( ) ) . thenReturn ( VAR_4 ) )  org.mockito.Mockito.when ( VAR_2 . getStoragePoolId ( ) ) . thenReturn ( VAR_4 ) (  org.mockito.Mockito.when ( VAR_2 . METHOD_3 ( ) ) . thenReturn ( VAR_5 ) )  org.mockito.Mockito.when ( VAR_2 . METHOD_3 ( ) ) . thenReturn ( VAR_5 ) (  org.mockito.Mockito . METHOD_4 ( VAR_6 ) )  org.mockito.Mockito . METHOD_4 ( VAR_6 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 = new org.ovirt.engine.core.common.businessentities.VDS ( ) )  VAR_1 = new org.ovirt.engine.core.common.businessentities.VDS ( ) (  VAR_1 . setId ( VAR_2 ) )  VAR_1 . setId ( VAR_2 ) (  VAR_1 . METHOD_2 ( VAR_3 ) )  VAR_1 . METHOD_2 ( VAR_3 ) (  VAR_4 = org.mockito.Mockito . METHOD_3 ( new TYPE_1 ( METHOD_4 ( ) , METHOD_5 ( ) , null ) ) )  VAR_4 = org.mockito.Mockito . METHOD_3 ( new TYPE_1 ( METHOD_4 ( ) , METHOD_5 ( ) , null ) ) (  org.mockito.Mockito . METHOD_6 ( ) . when ( VAR_4 ) . METHOD_7 ( TYPE_2 . any ( VAR_5 . VDS class ) , TYPE_2 . any ( VAR_6 class ) , TYPE_2 . any ( VAR_7 . Map class ) ) )  org.mockito.Mockito . METHOD_6 ( ) . when ( VAR_4 ) . METHOD_7 ( TYPE_2 . any ( VAR_5 . VDS class ) , TYPE_2 . any ( VAR_6 class ) , TYPE_2 . any ( VAR_7 . Map class ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ( INIT = super . METHOD_1 ( ) ) INIT = super . METHOD_1 ( ) ) VAR VAR ( IF IF ( COND VAR_1 && ( METHOD_2 ( ) ) ) COND VAR_1 && ( METHOD_2 ( ) ) ( THEN THEN (  VAR_1 = ( validate ( METHOD_3 ( ) . METHOD_4 ( VAR_2 ) ) ) && ( validate ( METHOD_3 ( ) . METHOD_5 ( METHOD_6 ( ) ) ) ) )  VAR_1 = ( validate ( METHOD_3 ( ) . METHOD_4 ( VAR_2 ) ) ) && ( validate ( METHOD_3 ( ) . METHOD_5 ( METHOD_6 ( ) ) ) ) ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME vds ) NAME vds ( INIT = VAR_1 . get ( VAR_2 ) ) INIT = VAR_1 . get ( VAR_2 ) ) VAR VAR (  TYPE_2 . METHOD_2 ( vds ) )  TYPE_2 . METHOD_2 ( vds ) ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ( INIT = vds . getName ( ) ) INIT = vds . getName ( ) ) VAR VAR (  TYPE_2 . METHOD_3 ( name . equals ( VAR_3 . METHOD_4 ( VAR_2 , VAR_4 . VDS ) ) ) )  TYPE_2 . METHOD_3 ( name . equals ( VAR_3 . METHOD_4 ( VAR_2 , VAR_4 . VDS ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( STRING_1 , STRING_2 ) )  TYPE_1 . METHOD_2 ( STRING_1 , STRING_2 ) (  TYPE_2 . METHOD_3 ( new TYPE_3 ( ) ) )  TYPE_2 . METHOD_3 ( new TYPE_3 ( ) ) (  TYPE_2 . METHOD_4 ( ) . METHOD_5 ( TYPE_4 . name ( ) , STRING_3 ) )  TYPE_2 . METHOD_4 ( ) . METHOD_5 ( TYPE_4 . name ( ) , STRING_3 ) (  VAR_1 = VAR_2 . METHOD_6 ( ) )  VAR_1 = VAR_2 . METHOD_6 ( ) (  VAR_3 = VAR_4 . cluster ( VAR_1 ) . METHOD_6 ( ) )  VAR_3 = VAR_4 . cluster ( VAR_1 ) . METHOD_6 ( ) (  VAR_5 = VAR_6 . host ( VAR_3 ) . METHOD_7 ( ) . METHOD_6 ( ) )  VAR_5 = VAR_6 . host ( VAR_3 ) . METHOD_7 ( ) . METHOD_6 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( VAR_2 ) ) ) . thenReturn ( null ) )  org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( VAR_2 ) ) ) . thenReturn ( null ) (  VAR_3 . METHOD_4 ( ) )  VAR_3 . METHOD_4 ( ) (  org.mockito.Mockito . METHOD_5 ( VAR_3 ) . METHOD_6 ( VAR_4 ) )  org.mockito.Mockito . METHOD_5 ( VAR_3 ) . METHOD_6 ( VAR_4 ) (  org.mockito.Mockito . METHOD_5 ( VAR_3 , org.mockito.Mockito . METHOD_7 ( 1 ) ) . METHOD_6 ( TYPE_1 . any ( VAR_5 . VM class ) ) )  org.mockito.Mockito . METHOD_5 ( VAR_3 , org.mockito.Mockito . METHOD_7 ( 1 ) ) . METHOD_6 ( TYPE_1 . any ( VAR_5 . VM class ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ! ( super . METHOD_1 ( ) ) ) COND ! ( super . METHOD_1 ( ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME validator ) NAME validator ( INIT = new TYPE_1 ( METHOD_2 ( ) ) ) INIT = new TYPE_1 ( METHOD_2 ( ) ) ) VAR VAR (  return ( validate ( validator . METHOD_3 ( ) ) ) && ( validate ( validator . METHOD_4 ( ) ) ) ; )  return ( validate ( validator . METHOD_3 ( ) ) ) && ( validate ( validator . METHOD_4 ( ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 . get ( VAR_1 ) ) INIT = VAR_4 . get ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_3 == null ) COND VAR_3 == null ( THEN THEN (  throw new TYPE_3 ( VAR_5 ) ; )  throw new TYPE_3 ( VAR_5 ) ; ) THEN THEN ) IF IF (  return VAR_6 . METHOD_2 ( VAR_1 , VAR_3 , VAR_2 ) ; )  return VAR_6 . METHOD_2 ( VAR_1 , VAR_3 , VAR_2 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , VAR_2 ) ) ) )  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , VAR_2 ) ) ) (  METHOD_3 ( cmd ) )  METHOD_3 ( cmd ) (  org.mockito.Mockito.doReturn ( METHOD_4 ( VAR_2 , VAR_3 ) ) . when ( VAR_4 ) . METHOD_5 ( VAR_2 ) )  org.mockito.Mockito.doReturn ( METHOD_4 ( VAR_2 , VAR_3 ) ) . when ( VAR_4 ) . METHOD_5 ( VAR_2 ) (  TYPE_3 . METHOD_6 ( cmd . validate ( ) ) )  TYPE_3 . METHOD_6 ( cmd . validate ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN org.ovirt.engine.core.common.businessentities.StorageDomain ) RETURN org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ) TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME domain ) NAME domain ( INIT = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) ) VAR VAR (  domain . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) )  domain . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) (  domain . METHOD_3 ( VAR_1 ) )  domain . METHOD_3 ( VAR_1 ) (  disk . METHOD_4 ( new java.util.ArrayList ( TYPE_2 . METHOD_5 ( domain . getId ( ) ) ) ) )  disk . METHOD_4 ( new java.util.ArrayList ( TYPE_2 . METHOD_5 ( domain . getId ( ) ) ) ) (  VAR_2 . METHOD_6 ( VAR_3 class , VAR_4 ) )  VAR_2 . METHOD_6 ( VAR_3 class , VAR_4 ) (  org.mockito.Mockito.when ( VAR_4 . get ( domain . getId ( ) ) ) . thenReturn ( domain ) )  org.mockito.Mockito.when ( VAR_4 . get ( domain . getId ( ) ) ) . thenReturn ( domain ) (  return domain ; )  return domain ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME parameters ) NAME parameters ( IN VAR_1 . getParameters ( ) . METHOD_2 ( ) ) IN VAR_1 . getParameters ( ) . METHOD_2 ( ) ( BLOCK BLOCK (  METHOD_3 ( parameters ) )  METHOD_3 ( parameters ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  METHOD_4 ( ) )  METHOD_4 ( ) (  METHOD_5 ( ) )  METHOD_5 ( ) (  TYPE_2 . METHOD_6 ( VAR_1 . METHOD_7 ( ) , false ) )  TYPE_2 . METHOD_6 ( VAR_1 . METHOD_7 ( ) , false ) (  VAR_1 . METHOD_8 ( null ) )  VAR_1 . METHOD_8 ( null ) (  VAR_1 . getReturnValue ( ) . METHOD_9 ( true ) )  VAR_1 . getReturnValue ( ) . METHOD_9 ( true ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( java.lang.String ) ( result ) ) ) INIT = ( ( java.lang.String ) ( result ) ) ) VAR VAR ( IF IF ( COND ( VAR_1 != null ) && ( ( VAR_1 . length ( ) ) > 0 ) ) COND ( VAR_1 != null ) && ( ( VAR_1 . length ( ) ) > 0 ) ( THEN THEN (  METHOD_1 ( ) . setEntity ( ( ( java.lang.String ) ( result ) ) ) )  METHOD_1 ( ) . setEntity ( ( ( java.lang.String ) ( result ) ) ) (  METHOD_2 ( true ) )  METHOD_2 ( true ) ) THEN THEN ( ELSE ELSE (  METHOD_1 ( ) . setEntity ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_3 ( ) ) )  METHOD_1 ( ) . setEntity ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_3 ( ) ) (  METHOD_2 ( false ) )  METHOD_2 ( false ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( METHOD_3 ( ) ) )  METHOD_2 ( METHOD_3 ( ) ) (  METHOD_4 ( 1 , true ) )  METHOD_4 ( 1 , true ) (  VAR_1 . METHOD_5 ( ) )  VAR_1 . METHOD_5 ( ) ( TRY TRY ( BLOCK BLOCK (  resource . METHOD_6 ( getModel ( 1 ) ) )  resource . METHOD_6 ( getModel ( 1 ) ) (  METHOD_7 ( STRING_1 ) )  METHOD_7 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( BLOCK BLOCK (  METHOD_8 ( VAR_2 ) )  METHOD_8 ( VAR_2 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( VAR_1 , VAR_2 class , new java.lang.String [ ] { STRING_1 , STRING_2 } , new java.lang.Object [ ] { VAR_3 , VAR_4 } , getEntity ( 0 ) ) )  METHOD_2 ( VAR_1 , VAR_2 class , new java.lang.String [ ] { STRING_1 , STRING_2 } , new java.lang.Object [ ] { VAR_3 , VAR_4 } , getEntity ( 0 ) ) (  VAR_5 . METHOD_3 ( ) )  VAR_5 . METHOD_3 ( ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_6 ) NAME VAR_6 ( INIT = resource . get ( ) ) INIT = resource . get ( ) ) VAR VAR (  METHOD_4 ( VAR_6 ) )  METHOD_4 ( VAR_6 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_2 ( ) )  super . METHOD_2 ( ) ( VAR VAR ( TYPE org.ovirt.engine.ui.uicommonweb.UICommand ) TYPE org.ovirt.engine.ui.uicommonweb.UICommand ( NAME VAR_1 ) NAME VAR_1 ( INIT = new org.ovirt.engine.ui.uicommonweb.UICommand ( STRING_1 , this ) ) INIT = new org.ovirt.engine.ui.uicommonweb.UICommand ( STRING_1 , this ) ) VAR VAR (  VAR_1 . setTitle ( VAR_2 . METHOD_3 ( ) ) )  VAR_1 . setTitle ( VAR_2 . METHOD_3 ( ) ) (  VAR_1 . METHOD_4 ( true ) )  VAR_1 . METHOD_4 ( true ) (  METHOD_5 ( ) . add ( VAR_1 ) )  METHOD_5 ( ) . add ( VAR_1 ) (  METHOD_5 ( ) . add ( METHOD_6 ( ) ) )  METHOD_5 ( ) . add ( METHOD_6 ( ) ) ( IF IF ( COND ( getVm ( ) ) != null ) COND ( getVm ( ) ) != null ( THEN THEN (  METHOD_7 ( ) )  METHOD_7 ( ) (  METHOD_8 ( ) . METHOD_9 ( true ) )  METHOD_8 ( ) . METHOD_9 ( true ) ) THEN THEN ) IF IF (  METHOD_10 ( ) )  METHOD_10 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source != null ? ( ( TYPE_1 ) ( source ) ) : null ; )  return source != null ? ( ( TYPE_1 ) ( source ) ) : null ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( TYPE_1 ) ( source ) ) : null ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( TYPE_1 ) ( source ) ) : null ; } } ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME params ) NAME params ( INIT = new TYPE_2 ( id ) ) INIT = new TYPE_2 ( id ) ) VAR VAR (  params . METHOD_2 ( VAR_1 ) )  params . METHOD_2 ( VAR_1 ) (  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , params , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , params , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND source == null ) COND source == null ( THEN THEN (  return new java.util.ArrayList < TYPE_1 > ( ) ; )  return new java.util.ArrayList < TYPE_1 > ( ) ; ) THEN THEN ) IF IF (  return source ; )  return source ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < TYPE_1 > ( ) ; } return source ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < TYPE_1 > ( ) ; } return source ; } } (  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_1 , new TYPE_2 ( ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_1 , new TYPE_2 ( ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.String> ) TYPE java.util.Map<java.lang.String,java.lang.String> ( NAME VAR_4 ) NAME VAR_4 ( INIT = new java.util.HashMap < > ( ) ) INIT = new java.util.HashMap < > ( ) ) VAR VAR (  VAR_4 . put ( STRING_1 , VAR_2 ) )  VAR_4 . put ( STRING_1 , VAR_2 ) (  VAR_4 . put ( STRING_2 , VAR_3 ) )  VAR_4 . put ( STRING_2 , VAR_3 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME tempVar ) NAME tempVar ( INIT = new TYPE_2 ( TYPE_3 . METHOD_2 ( ) , VAR_1 , VAR_4 ) ) INIT = new TYPE_2 ( TYPE_3 . METHOD_2 ( ) , VAR_1 , VAR_4 ) ) VAR VAR (  METHOD_3 ( VAR_5 , tempVar , TYPE_4 . METHOD_4 ( TYPE_3 . METHOD_5 ( ) ) ) )  METHOD_3 ( VAR_5 , tempVar , TYPE_4 . METHOD_4 ( TYPE_3 . METHOD_5 ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.compat.Guid> ) TYPE java.util.List<org.ovirt.engine.core.compat.Guid> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( TYPE_1 . getParameters ( ) . METHOD_5 ( ) ) ) INIT = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( TYPE_1 . getParameters ( ) . METHOD_5 ( ) ) ) VAR VAR ( IF IF ( COND ! ( VAR_1 . isEmpty ( ) ) ) COND ! ( VAR_1 . isEmpty ( ) ) ( THEN THEN ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  VAR_2 . METHOD_6 ( TYPE_1 . METHOD_7 ( ) ) )  VAR_2 . METHOD_6 ( TYPE_1 . METHOD_7 ( ) ) (  VAR_3 . log ( VAR_2 , VAR_4 ) )  VAR_3 . log ( VAR_2 , VAR_4 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ) TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ( NAME cluster ) NAME cluster ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.Integer ) TYPE java.lang.Integer ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_3 ( ) . getSelectedItem ( ) ) INIT = METHOD_3 ( ) . getSelectedItem ( ) ) VAR VAR ( IF IF ( COND ( cluster == null ) || ( VAR_1 == null ) ) COND ( cluster == null ) || ( VAR_1 == null ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE java.util.List<TYPE_1<TYPE_2,TYPE_3>> ) TYPE java.util.List<TYPE_1<TYPE_2,TYPE_3>> ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_4 . getInstance ( ) . METHOD_4 ( VAR_1 , cluster . METHOD_5 ( ) ) ) INIT = TYPE_4 . getInstance ( ) . METHOD_4 ( VAR_1 , cluster . METHOD_5 ( ) ) ) VAR VAR (  METHOD_6 ( VAR_2 ) )  METHOD_6 ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<TYPE_1.Disk> ) TYPE java.util.ArrayList<TYPE_1.Disk> ( NAME list ) NAME list ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR ( IF IF ( COND source != null ) COND source != null ( THEN THEN ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_2 ) ( source ) ) ) INIT = ( ( TYPE_2 ) ( source ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR ( WHILE WHILE ( COND VAR_2 . METHOD_3 ( ) ) COND VAR_2 . METHOD_3 ( ) ( BLOCK BLOCK (  list . add ( ( ( TYPE_1 . Disk ) ( VAR_2 . METHOD_4 ( ) ) ) ) )  list . add ( ( ( TYPE_1 . Disk ) ( VAR_2 . METHOD_4 ( ) ) ) ) ) BLOCK BLOCK ) WHILE WHILE ) THEN THEN ) IF IF (  return list ; )  return list ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<TYPE_1.VdcActionParametersBase> ) TYPE java.util.ArrayList<TYPE_1.VdcActionParametersBase> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < TYPE_1 . VdcActionParametersBase > ( ) ) INIT = new java.util.ArrayList < TYPE_1 . VdcActionParametersBase > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME a ) NAME a ( IN VAR_2 . METHOD_2 ( ) ) IN VAR_2 . METHOD_2 ( ) ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.Network ) TYPE org.ovirt.engine.core.common.businessentities.Network ( NAME network ) NAME network ( INIT = ( ( org.ovirt.engine.core.common.businessentities . Network ) ( a ) ) ) INIT = ( ( org.ovirt.engine.core.common.businessentities . Network ) ( a ) ) ) VAR VAR (  VAR_1 . add ( new TYPE_2 ( network . METHOD_3 ( ) . getValue ( ) , network ) ) )  VAR_1 . add ( new TYPE_2 ( network . METHOD_3 ( ) . getValue ( ) , network ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  org.ovirt.engine.ui.frontend.Frontend . METHOD_4 ( VAR_3 , VAR_1 ) )  org.ovirt.engine.ui.frontend.Frontend . METHOD_4 ( VAR_3 , VAR_1 ) (  VAR_2 . METHOD_5 ( null ) )  VAR_2 . METHOD_5 ( null ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1.ValidationResult ) RETURN TYPE_1.ValidationResult ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( storageDomain ) == null ) COND ( storageDomain ) == null ( THEN THEN (  return new TYPE_1 . ValidationResult ( VAR_1 ) ; )  return new TYPE_1 . ValidationResult ( VAR_1 ) ; ) THEN THEN ) IF IF ( IF IF ( COND ( ( storageDomain . METHOD_2 ( ) ) == null ) || ( ( storageDomain . METHOD_2 ( ) ) != ( VAR_2 ) ) ) COND ( ( storageDomain . METHOD_2 ( ) ) == null ) || ( ( storageDomain . METHOD_2 ( ) ) != ( VAR_2 ) ) ( THEN THEN (  return new TYPE_1 . ValidationResult ( VAR_3 ) ; )  return new TYPE_1 . ValidationResult ( VAR_3 ) ; ) THEN THEN ) IF IF (  return VAR_4 ; )  return VAR_4 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  command = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , false ) ) ) )  command = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , false ) ) ) (  METHOD_4 ( ) )  METHOD_4 ( ) (  METHOD_5 ( VAR_1 ) )  METHOD_5 ( VAR_1 ) (  METHOD_6 ( ) )  METHOD_6 ( ) (  METHOD_7 ( VAR_2 . Collections < java.lang.String > METHOD_8 ( ) ) )  METHOD_7 ( VAR_2 . Collections < java.lang.String > METHOD_8 ( ) ) (  METHOD_9 ( true ) )  METHOD_9 ( true ) (  METHOD_10 ( true ) )  METHOD_10 ( true ) (  TYPE_3 . METHOD_11 ( command , VAR_3 ) )  TYPE_3 . METHOD_11 ( command , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( ) )  VAR_1 . METHOD_2 ( ) ( IF IF ( COND ! ( result . getReturnValue ( ) . getSucceeded ( ) ) ) COND ! ( result . getReturnValue ( ) . getSucceeded ( ) ) ( THEN THEN (  VAR_1 . METHOD_3 ( result . getReturnValue ( ) . METHOD_4 ( ) . METHOD_5 ( ) ) )  VAR_1 . METHOD_3 ( result . getReturnValue ( ) . METHOD_4 ( ) . METHOD_5 ( ) ) ) THEN THEN ( ELSE ELSE (  METHOD_6 ( null ) )  METHOD_6 ( null ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND org.ovirt.engine.core.common.businessentities.VM . METHOD_2 ( TYPE_1 . getVm ( ) . METHOD_3 ( ) ) ) COND org.ovirt.engine.core.common.businessentities.VM . METHOD_2 ( TYPE_1 . getVm ( ) . METHOD_3 ( ) ) ( THEN THEN (  METHOD_4 ( TYPE_2 . getInstance ( ) . METHOD_5 ( ) . METHOD_6 ( VAR_1 , new TYPE_3 ( TYPE_1 . METHOD_7 ( ) , TYPE_1 . METHOD_8 ( ) ) ) . getReturnValue ( ) ) )  METHOD_4 ( TYPE_2 . getInstance ( ) . METHOD_5 ( ) . METHOD_6 ( VAR_1 , new TYPE_3 ( TYPE_1 . METHOD_7 ( ) , TYPE_1 . METHOD_8 ( ) ) ) . getReturnValue ( ) ) (  TYPE_1 . METHOD_9 ( true ) )  TYPE_1 . METHOD_9 ( true ) ) THEN THEN ( ELSE ELSE (  METHOD_4 ( TYPE_1 . getVm ( ) . METHOD_3 ( ) ) )  METHOD_4 ( TYPE_1 . getVm ( ) . METHOD_3 ( ) ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.DiskImage ) TYPE org.ovirt.engine.core.common.businessentities.DiskImage ( NAME disk ) NAME disk ( INIT = new org.ovirt.engine.core.common.businessentities.DiskImage ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.DiskImage ( ) ) VAR VAR (  disk . METHOD_2 ( VAR_1 ) )  disk . METHOD_2 ( VAR_1 ) (  disk . METHOD_3 ( VAR_2 ) )  disk . METHOD_3 ( VAR_2 ) (  disk . METHOD_4 ( true ) )  disk . METHOD_4 ( true ) (  disk . METHOD_5 ( vmId ) )  disk . METHOD_5 ( vmId ) (  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( command ) . METHOD_6 ( ) )  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( command ) . METHOD_6 ( ) (  TYPE_1 . when ( VAR_3 . get ( VAR_1 ) ) . thenReturn ( disk ) )  TYPE_1 . when ( VAR_3 . get ( VAR_1 ) ) . thenReturn ( disk ) (  METHOD_7 ( true ) )  METHOD_7 ( true ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_2 ( ) )  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_2 ( ) (  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( command ) . METHOD_3 ( ) )  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( command ) . METHOD_3 ( ) (  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( VAR_4 ) . METHOD_4 ( VAR_5 ) )  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( VAR_4 ) . METHOD_4 ( VAR_5 ) (  org.mockito.Mockito.doReturn ( vds ) . when ( VAR_1 ) . get ( VAR_5 ) )  org.mockito.Mockito.doReturn ( vds ) . when ( VAR_1 ) . get ( VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . getInstance ( ) . METHOD_2 ( VAR_3 , METHOD_3 ( VAR_1 ) , TYPE_3 . METHOD_4 ( METHOD_5 ( ) ) ) ) INIT = TYPE_2 . getInstance ( ) . METHOD_2 ( VAR_3 , METHOD_3 ( VAR_1 ) , TYPE_3 . METHOD_4 ( METHOD_5 ( ) ) ) ) VAR VAR ( IF IF ( COND VAR_2 . getSucceeded ( ) ) COND VAR_2 . getSucceeded ( ) ( THEN THEN (  getReturnValue ( ) . METHOD_6 ( ) . METHOD_7 ( VAR_2 . METHOD_8 ( ) ) )  getReturnValue ( ) . METHOD_6 ( ) . METHOD_7 ( VAR_2 . METHOD_8 ( ) ) ) THEN THEN ) IF IF (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) ) ) )  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) ) ) (  METHOD_3 ( ) )  METHOD_3 ( ) (  METHOD_4 ( false , VAR_2 ) )  METHOD_4 ( false , VAR_2 ) (  cmd . METHOD_5 ( ) )  cmd . METHOD_5 ( ) (  org.mockito.Mockito . METHOD_6 ( VAR_3 , org.mockito.Mockito . METHOD_7 ( ) ) . METHOD_8 ( TYPE_3 . any ( VAR_4 class ) ) )  org.mockito.Mockito . METHOD_6 ( VAR_3 , org.mockito.Mockito . METHOD_7 ( ) ) . METHOD_8 ( TYPE_3 . any ( VAR_4 class ) ) (  TYPE_4 . assertEquals ( cmd . METHOD_9 ( ) , VAR_5 ) )  TYPE_4 . assertEquals ( cmd . METHOD_9 ( ) , VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME vds ) NAME vds ( INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . get ( TYPE_1 . getParameters ( ) . METHOD_3 ( ) ) ) INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . get ( TYPE_1 . getParameters ( ) . METHOD_3 ( ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.Object> ) TYPE java.util.Map<java.lang.String,java.lang.Object> ( NAME result ) NAME result ( INIT = new java.util.HashMap < java.lang.String , java.lang.Object > ( ) ) INIT = new java.util.HashMap < java.lang.String , java.lang.Object > ( ) ) VAR VAR ( IF IF ( COND vds != null ) COND vds != null ( THEN THEN (  result = TYPE_2 . METHOD_4 ( vds . METHOD_5 ( ) ) )  result = TYPE_2 . METHOD_4 ( vds . METHOD_5 ( ) ) ) THEN THEN ) IF IF (  TYPE_1 . METHOD_6 ( ) . METHOD_7 ( result ) )  TYPE_1 . METHOD_6 ( ) . METHOD_7 ( result ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.Object[] ) TYPE java.lang.Object[] ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( ( java.lang.Object [ ] ) ( VAR_1 ) ) ) INIT = ( ( java.lang.Object [ ] ) ( VAR_1 ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = ( ( TYPE_1 ) ( VAR_3 [ 0 ] ) ) ) INIT = ( ( TYPE_1 ) ( VAR_3 [ 0 ] ) ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StoragePool ) TYPE org.ovirt.engine.core.common.businessentities.StoragePool ( NAME VAR_5 ) NAME VAR_5 ( INIT = ( ( org.ovirt.engine.core.common.businessentities.StoragePool ) ( VAR_3 [ 1 ] ) ) ) INIT = ( ( org.ovirt.engine.core.common.businessentities.StoragePool ) ( VAR_3 [ 1 ] ) ) ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_6 ) NAME VAR_6 ( INIT = ( ( VAR_5 . METHOD_1 ( ) ) == ( VAR_7 ) ) && ( VAR_2 == null ) ) INIT = ( ( VAR_5 . METHOD_1 ( ) ) == ( VAR_7 ) ) && ( VAR_2 == null ) ) VAR VAR (  VAR_4 . METHOD_2 ( VAR_5 , VAR_6 ) )  VAR_4 . METHOD_2 ( VAR_5 , VAR_6 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  command = METHOD_2 ( ) )  command = METHOD_2 ( ) (  org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_3 ( TYPE_1 . any ( VAR_1 . Guid class ) ) )  org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_3 ( TYPE_1 . any ( VAR_1 . Guid class ) ) (  org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_4 ( TYPE_1 . any ( VAR_1 . Version class ) ) )  org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_4 ( TYPE_1 . any ( VAR_1 . Version class ) ) (  org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_5 ( ) )  org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_5 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME vmId ) NAME vmId ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_2 . METHOD_2 ( vmId ) )  VAR_2 . METHOD_2 ( vmId ) (  VAR_2 . METHOD_3 ( VAR_1 ) )  VAR_2 . METHOD_3 ( VAR_1 ) (  VAR_2 . METHOD_4 ( INT_1 ) )  VAR_2 . METHOD_4 ( INT_1 ) (  VAR_2 . METHOD_5 ( INT_2 ) )  VAR_2 . METHOD_5 ( INT_2 ) (  VAR_2 . METHOD_6 ( VAR_3 ) )  VAR_2 . METHOD_6 ( VAR_3 ) (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_3 . METHOD_2 ( ( ( VAR_2 + STRING_1 ) + ( VAR_1 . METHOD_3 ( ) ) ) ) )  VAR_3 . METHOD_2 ( ( ( VAR_2 + STRING_1 ) + ( VAR_1 . METHOD_3 ( ) ) ) ) ( IF IF ( COND ( VAR_1 . METHOD_4 ( ) ) != null ) COND ( VAR_1 . METHOD_4 ( ) ) != null ( THEN THEN (  VAR_3 . METHOD_2 ( VAR_1 . METHOD_4 ( ) ) )  VAR_3 . METHOD_2 ( VAR_1 . METHOD_4 ( ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND source == null ) COND source == null ( THEN THEN (  return new java.util.ArrayList < TYPE_2 > ( ) ; )  return new java.util.ArrayList < TYPE_2 > ( ) ; ) THEN THEN ) IF IF (  return source ; )  return source ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < TYPE_2 > ( ) ; } return source ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < TYPE_2 > ( ) ; } return source ; } } (  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new TYPE_3 ( VAR_1 ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new TYPE_3 ( VAR_1 ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_1 ) ( model ) ) ) INIT = ( ( TYPE_1 ) ( model ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VmTemplate> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VmTemplate> ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( ( TYPE_2 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) INIT = ( ( TYPE_2 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) VAR VAR (  TYPE_3 . METHOD_1 ( VAR_3 , new TYPE_4 ( ) ) )  TYPE_3 . METHOD_1 ( VAR_3 , new TYPE_4 ( ) ) (  VAR_2 . setItems ( VAR_3 ) )  VAR_2 . setItems ( VAR_3 ) (  VAR_2 . METHOD_2 ( ( ( VAR_3 . size ( ) ) == 0 ) ) )  VAR_2 . METHOD_2 ( ( ( VAR_3 . size ( ) ) == 0 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME model ) NAME model ( INIT = ( ( TYPE_2 ) ( target ) ) ) INIT = ( ( TYPE_2 ) ( target ) ) ) VAR VAR (  VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) )  VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) ( IF IF ( COND ( VAR_2 ) != null ) COND ( VAR_2 ) != null ( THEN THEN (  METHOD_3 ( VAR_2 ) )  METHOD_3 ( VAR_2 ) ) THEN THEN ) IF IF (  VAR_3 = true )  VAR_3 = true ) BLOCK BLOCK ) METHOD METHOD (  TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_2 model = ( ( TYPE_2 ) ( target ) ) ; VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) ; if ( ( VAR_2 ) != null ) { METHOD_3 ( VAR_2 ) ; } VAR_3 = true ; } } ) ) )  TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_2 model = ( ( TYPE_2 ) ( target ) ) ; VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) ; if ( ( VAR_2 ) != null ) { METHOD_3 ( VAR_2 ) ; } VAR_3 = true ; } } ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_2 . METHOD_2 ( VAR_1 , VAR_2 ) ) INIT = TYPE_2 . METHOD_2 ( VAR_1 , VAR_2 ) ) VAR VAR (  TYPE_3 . METHOD_3 ( STRING_1 , ( ( VAR_3 . size ( ) ) == 0 ) ) )  TYPE_3 . METHOD_3 ( STRING_1 , ( ( VAR_3 . size ( ) ) == 0 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StoragePool ) TYPE org.ovirt.engine.core.common.businessentities.StoragePool ( NAME VAR_1 ) NAME VAR_1 ( INIT = new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ) VAR VAR (  VAR_1 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) )  VAR_1 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) (  org.mockito.Mockito.when ( VAR_2 . get ( VAR_1 . getId ( ) ) ) . thenReturn ( VAR_1 ) )  org.mockito.Mockito.when ( VAR_2 . get ( VAR_1 . getId ( ) ) ) . thenReturn ( VAR_1 ) (  command . METHOD_3 ( VAR_1 . getId ( ) ) )  command . METHOD_3 ( VAR_1 . getId ( ) ) (  TYPE_1 . METHOD_4 ( command . METHOD_5 ( ) ) )  TYPE_1 . METHOD_4 ( command . METHOD_5 ( ) ) (  TYPE_2 . METHOD_6 ( STRING_1 , command , VAR_3 ) )  TYPE_2 . METHOD_6 ( STRING_1 , command , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( TYPE_1 . getVm ( ) ) != null ) COND ( TYPE_1 . getVm ( ) ) != null ( THEN THEN (  VAR_1 . METHOD_2 ( TYPE_1 . getVm ( ) . getId ( ) ) )  VAR_1 . METHOD_2 ( TYPE_1 . getVm ( ) . getId ( ) ) ) THEN THEN ) IF IF (  METHOD_3 ( ) )  METHOD_3 ( ) (  METHOD_4 ( ) )  METHOD_4 ( ) (  TYPE_1 . METHOD_5 ( true ) )  TYPE_1 . METHOD_5 ( true ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) . METHOD_3 ( ) ) INIT = METHOD_2 ( ) . METHOD_3 ( ) ) VAR VAR ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_3 < TYPE_2 > ( ) ) INIT = new TYPE_3 < TYPE_2 > ( ) ) VAR VAR (  VAR_2 . add ( METHOD_4 ( ) ) )  VAR_2 . add ( METHOD_4 ( ) ) (  METHOD_2 ( ) . setItems ( VAR_2 ) )  METHOD_2 ( ) . setItems ( VAR_2 ) ) THEN THEN ( ELSE ELSE ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  VAR_3 . METHOD_5 ( METHOD_6 ( ) . METHOD_7 ( ) , METHOD_6 ( ) . getId ( ) ) )  VAR_3 . METHOD_5 ( METHOD_6 ( ) . METHOD_7 ( ) , METHOD_6 ( ) . getId ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<TYPE_1> ) TYPE java.util.ArrayList<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) INIT = ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME domain ) NAME domain ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( IF IF ( COND ( domain . METHOD_1 ( ) ) == ( VAR_2 ) ) COND ( domain . METHOD_1 ( ) ) == ( VAR_2 ) ( THEN THEN (  return domain ; )  return domain ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( getEntity ( ) ) instanceof org.ovirt.engine.core.common.businessentities.VM ) COND ( getEntity ( ) ) instanceof org.ovirt.engine.core.common.businessentities.VM ( THEN THEN (  VAR_1 = new TYPE_1 ( this ) )  VAR_1 = new TYPE_1 ( this ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND ( getEntity ( ) ) instanceof TYPE_2 ) COND ( getEntity ( ) ) instanceof TYPE_2 ( THEN THEN (  VAR_1 = new TYPE_3 ( this ) )  VAR_1 = new TYPE_3 ( this ) ) THEN THEN ( ELSE ELSE (  throw new TYPE_4 ( ) ; )  throw new TYPE_4 ( ) ; ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF (  VAR_1 . METHOD_2 ( ) )  VAR_1 . METHOD_2 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( VAR_2 , VAR_3 ) ) INIT = METHOD_2 ( VAR_2 , VAR_3 ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_5 . METHOD_3 ( ) . getStoragePoolId ( ) ) INIT = VAR_5 . METHOD_3 ( ) . getStoragePoolId ( ) ) VAR VAR ( IF IF ( COND ! ( VAR_4 . equals ( VAR_6 ) ) ) COND ! ( VAR_4 . equals ( VAR_6 ) ) ( THEN THEN (  METHOD_4 ( VAR_1 , VAR_4 ) )  METHOD_4 ( VAR_1 , VAR_4 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME equals ) NAME equals ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME obj ) NAME obj ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( this ) == obj ) COND ( this ) == obj ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ( IF IF ( COND obj == null ) COND obj == null ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( IF IF ( COND ( METHOD_1 ( ) ) != ( obj . METHOD_1 ( ) ) ) COND ( METHOD_1 ( ) ) != ( obj . METHOD_1 ( ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME other ) NAME other ( INIT = ( ( TYPE_1 ) ( obj ) ) ) INIT = ( ( TYPE_1 ) ( obj ) ) ) VAR VAR (  return TYPE_2 . equals ( id , other . id ) ; )  return TYPE_2 . equals ( id , other . id ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < TYPE_1 > ( ) ) INIT = new java.util.ArrayList < TYPE_1 > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME domain ) NAME domain ( IN METHOD_2 ( ) ) IN METHOD_2 ( ) ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_2 . METHOD_3 ( domain ) )  VAR_2 . METHOD_3 ( domain ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_2 ( domain . METHOD_4 ( ) , true ) ) INIT = new TYPE_2 ( domain . METHOD_4 ( ) , true ) ) VAR VAR (  VAR_2 . setId ( VAR_3 . toString ( ) ) )  VAR_2 . setId ( VAR_3 . toString ( ) ) (  VAR_1 . add ( VAR_2 ) )  VAR_1 . add ( VAR_2 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME url ) NAME url ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME resource ) NAME resource ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME params ) NAME params ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_3 ( ) ) INIT = new TYPE_3 ( ) ) VAR VAR (  VAR_2 . METHOD_2 ( ( VAR_1 + ( VAR_3 ) ) ) )  VAR_2 . METHOD_2 ( ( VAR_1 + ( VAR_3 ) ) ) (  VAR_2 . METHOD_3 ( TYPE_4 . METHOD_4 ( ( ( TYPE_4 . METHOD_4 ( url , VAR_1 ) ) + ( VAR_4 ) ) , params ) ) )  VAR_2 . METHOD_3 ( TYPE_4 . METHOD_4 ( ( ( TYPE_4 . METHOD_4 ( url , VAR_1 ) ) + ( VAR_4 ) ) , params ) ) (  resource . METHOD_5 ( ) . add ( VAR_2 ) )  resource . METHOD_5 ( ) . add ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) == null ) COND ( VAR_1 ) == null ( THEN THEN (  VAR_1 = new TYPE_1 ( ) )  VAR_1 = new TYPE_1 ( ) ) THEN THEN ) IF IF (  VAR_1 . METHOD_2 ( getName ( ) . getEntity ( ) ) )  VAR_1 . METHOD_2 ( getName ( ) . getEntity ( ) ) ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.network.Network ) TYPE org.ovirt.engine.core.common.businessentities.network.Network ( NAME network ) NAME network ( INIT = METHOD_3 ( ) . getSelectedItem ( ) ) INIT = METHOD_3 ( ) . getSelectedItem ( ) ) VAR VAR (  VAR_1 . METHOD_4 ( ( network != null ? network . METHOD_5 ( ) : null ) ) )  VAR_1 . METHOD_4 ( ( network != null ? network . METHOD_5 ( ) : null ) ) (  VAR_1 . METHOD_6 ( METHOD_7 ( ) . getEntity ( ) ) )  VAR_1 . METHOD_6 ( METHOD_7 ( ) . getEntity ( ) ) (  VAR_1 . METHOD_8 ( METHOD_9 ( ) . getSelectedItem ( ) ) )  VAR_1 . METHOD_8 ( METHOD_9 ( ) . getSelectedItem ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.uicommonweb.models.EntityModel ) TYPE org.ovirt.engine.ui.uicommonweb.models.EntityModel ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME object ) NAME object ( IN VAR_3 . METHOD_2 ( ) ) IN VAR_3 . METHOD_2 ( ) ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ( INIT = ( ( org.ovirt.engine.core.common.businessentities.VM ) ( object ) ) ) INIT = ( ( org.ovirt.engine.core.common.businessentities.VM ) ( object ) ) ) VAR VAR ( IF IF ( COND ! ( METHOD_3 ( ( ( vm . METHOD_4 ( ) ) + VAR_1 ) , vm . METHOD_5 ( ) , VAR_2 ) ) ) COND ! ( METHOD_3 ( ( ( vm . METHOD_4 ( ) ) + VAR_1 ) , vm . METHOD_5 ( ) , VAR_2 ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME get ) NAME get ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_1 ( TYPE_3 . METHOD_2 ( METHOD_3 ( ) , METHOD_4 ( id ) ) . METHOD_5 ( ) ) ) INIT = TYPE_2 . METHOD_1 ( TYPE_3 . METHOD_2 ( METHOD_3 ( ) , METHOD_4 ( id ) ) . METHOD_5 ( ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME status ) NAME status ( INIT = VAR_2 ) INIT = VAR_2 ) VAR VAR (  return TYPE_1 . status ( status ) . METHOD_6 ( VAR_1 ) . METHOD_7 ( ) ; )  return TYPE_1 . status ( status ) . METHOD_6 ( VAR_1 ) . METHOD_7 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public final ) MODIFIER public final ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) == null ) COND ( VAR_1 ) == null ( THEN THEN (  VAR_1 = new TYPE_1 ( 1 , VAR_2 ) )  VAR_1 = new TYPE_1 ( 1 , VAR_2 ) ) THEN THEN ) IF IF ( IF IF ( COND ( model . METHOD_2 ( ) ) == null ) COND ( model . METHOD_2 ( ) ) == null ( THEN THEN (  model . METHOD_3 ( null ) )  model . METHOD_3 ( null ) (  VAR_1 . METHOD_4 ( true ) )  VAR_1 . METHOD_4 ( true ) ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_3 ) != null ) COND ( VAR_3 ) != null ( THEN THEN (  VAR_3 . METHOD_5 ( VAR_1 ) )  VAR_3 . METHOD_5 ( VAR_1 ) ) THEN THEN ) IF IF ( IF IF ( COND METHOD_6 ( ) ) COND METHOD_6 ( ) ( THEN THEN (  METHOD_7 ( ) )  METHOD_7 ( ) ) THEN THEN ( ELSE ELSE (  METHOD_8 ( ) )  METHOD_8 ( ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 < TYPE_2 > ( new TYPE_2 ( VAR_1 ) ) ) )  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 < TYPE_2 > ( new TYPE_2 ( VAR_1 ) ) ) (  METHOD_3 ( cmd ) )  METHOD_3 ( cmd ) (  METHOD_4 ( cmd , true ) )  METHOD_4 ( cmd , true ) (  cmd . METHOD_1 ( ) )  cmd . METHOD_1 ( ) (  TYPE_3 . METHOD_5 ( cmd . getReturnValue ( ) . getSucceeded ( ) ) )  TYPE_3 . METHOD_5 ( cmd . getReturnValue ( ) . getSucceeded ( ) ) (  TYPE_3 . assertEquals ( cmd . METHOD_6 ( ) , VAR_2 ) )  TYPE_3 . assertEquals ( cmd . METHOD_6 ( ) , VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) . METHOD_3 ( ) )  METHOD_2 ( ) . METHOD_3 ( ) (  TYPE_1 . METHOD_4 ( STRING_1 , TYPE_2 . METHOD_5 ( ( ( TYPE_3 < java.lang.String > ) ( METHOD_2 ( ) . METHOD_6 ( ) . getReturnValue ( ) ) ) , TYPE_4 . METHOD_7 ( STRING_2 , STRING_3 , STRING_4 ) ) ) )  TYPE_1 . METHOD_4 ( STRING_1 , TYPE_2 . METHOD_5 ( ( ( TYPE_3 < java.lang.String > ) ( METHOD_2 ( ) . METHOD_6 ( ) . getReturnValue ( ) ) ) , TYPE_4 . METHOD_7 ( STRING_2 , STRING_3 , STRING_4 ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND returnValue == null ) COND returnValue == null ( THEN THEN (  return new java.util.ArrayList < > ( ) ; )  return new java.util.ArrayList < > ( ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_2 ( TYPE_2 . METHOD_3 ( ( ( TYPE_3 < TYPE_1 > ) ( returnValue ) ) , VAR_3 ) ) ) INIT = TYPE_2 . METHOD_2 ( TYPE_2 . METHOD_3 ( ( ( TYPE_3 < TYPE_1 > ) ( returnValue ) ) , VAR_3 ) ) ) VAR VAR (  TYPE_4 . METHOD_4 ( VAR_2 , new TYPE_5 ( ) ) )  TYPE_4 . METHOD_4 ( VAR_2 , new TYPE_5 ( ) ) (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.network.Network ) TYPE org.ovirt.engine.core.common.businessentities.network.Network ( NAME network ) NAME network ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  org.mockito.Mockito.when ( VAR_1 . get ( network . getId ( ) ) ) . thenReturn ( network ) )  org.mockito.Mockito.when ( VAR_1 . get ( network . getId ( ) ) ) . thenReturn ( network ) (  org.mockito.Mockito.when ( VAR_2 . METHOD_3 ( TYPE_1 . METHOD_4 ( network . getId ( ) ) ) ) . thenReturn ( TYPE_2 . METHOD_5 ( ) ) )  org.mockito.Mockito.when ( VAR_2 . METHOD_3 ( TYPE_1 . METHOD_4 ( network . getId ( ) ) ) ) . thenReturn ( TYPE_2 . METHOD_5 ( ) ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_3 ( ) ) INIT = new TYPE_3 ( ) ) VAR VAR (  VAR_3 . METHOD_6 ( network . getId ( ) ) )  VAR_3 . METHOD_6 ( network . getId ( ) ) (  TYPE_4 . METHOD_7 ( METHOD_8 ( VAR_3 ) . METHOD_9 ( ) , TYPE_5 . METHOD_10 ( ) ) )  TYPE_4 . METHOD_7 ( METHOD_8 ( VAR_3 ) . METHOD_9 ( ) , TYPE_5 . METHOD_10 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_1 . setId ( VAR_2 ) )  VAR_1 . setId ( VAR_2 ) (  VAR_1 . METHOD_2 ( new TYPE_2 ( ) ) )  VAR_1 . METHOD_2 ( new TYPE_2 ( ) ) (  VAR_1 . METHOD_3 ( ) . setId ( VAR_3 ) )  VAR_1 . METHOD_3 ( ) . setId ( VAR_3 ) (  TYPE_3 . METHOD_4 ( METHOD_5 ( ) , VAR_1 ) )  TYPE_3 . METHOD_4 ( METHOD_5 ( ) , VAR_1 ) (  assertEquals ( VAR_4 , VAR_1 . METHOD_6 ( ) ) )  assertEquals ( VAR_4 , VAR_1 . METHOD_6 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VmTemplate ) TYPE org.ovirt.engine.core.common.businessentities.VmTemplate ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_2 ( ) . get ( VAR_3 ) ) INIT = VAR_2 . METHOD_2 ( ) . get ( VAR_3 ) ) VAR VAR (  TYPE_1 . METHOD_3 ( VAR_1 ) )  TYPE_1 . METHOD_3 ( VAR_1 ) ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ( INIT = VAR_1 . METHOD_4 ( ) ) INIT = VAR_1 . METHOD_4 ( ) ) VAR VAR (  TYPE_1 . METHOD_5 ( name . equals ( VAR_2 . METHOD_6 ( VAR_3 , VAR_4 . VmTemplate ) ) ) )  TYPE_1 . METHOD_5 ( name . equals ( VAR_2 . METHOD_6 ( VAR_3 , VAR_4 . VmTemplate ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.doReturn ( new TYPE_1 . ValidationResult ( VAR_1 ) ) . when ( VAR_2 ) . METHOD_2 ( TYPE_2 . METHOD_3 ( ) ) )  org.mockito.Mockito.doReturn ( new TYPE_1 . ValidationResult ( VAR_1 ) ) . when ( VAR_2 ) . METHOD_2 ( TYPE_2 . METHOD_3 ( ) ) (  METHOD_4 ( ) )  METHOD_4 ( ) (  TYPE_3 . METHOD_5 ( cmd . METHOD_6 ( ) ) )  TYPE_3 . METHOD_5 ( cmd . METHOD_6 ( ) ) (  org.mockito.Mockito . METHOD_7 ( VAR_2 ) . METHOD_2 ( TYPE_2 . METHOD_3 ( ) ) )  org.mockito.Mockito . METHOD_7 ( VAR_2 ) . METHOD_2 ( TYPE_2 . METHOD_3 ( ) ) (  org.mockito.Mockito . METHOD_7 ( VAR_2 , org.mockito.Mockito . METHOD_8 ( ) ) . METHOD_9 ( TYPE_2 . METHOD_3 ( ) ) )  org.mockito.Mockito . METHOD_7 ( VAR_2 , org.mockito.Mockito . METHOD_8 ( ) ) . METHOD_9 ( TYPE_2 . METHOD_3 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ( INIT = ( ( TYPE_1 ) ( target ) ) ) INIT = ( ( TYPE_1 ) ( target ) ) ) VAR VAR (  VAR_1 = ( ( TYPE_2 ) ( returnValue ) ) )  VAR_1 = ( ( TYPE_2 ) ( returnValue ) ) ( IF IF ( COND ( ( VAR_1 ) == null ) || ( ( VAR_1 . METHOD_2 ( ) ) != ( VAR_2 ) ) ) COND ( ( VAR_1 ) == null ) || ( ( VAR_1 . METHOD_2 ( ) ) != ( VAR_2 ) ) ( THEN THEN (  model . METHOD_3 ( ) )  model . METHOD_3 ( ) ) THEN THEN ( ELSE ELSE (  model . METHOD_4 ( ) )  model . METHOD_4 ( ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_2 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) INIT = ( ( TYPE_2 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) VAR VAR (  TYPE_3 . METHOD_1 ( VAR_2 , new TYPE_4 ( ) ) )  TYPE_3 . METHOD_1 ( VAR_2 , new TYPE_4 ( ) ) ( VAR VAR ( TYPE java.util.ArrayList<TYPE_5.Disk> ) TYPE java.util.ArrayList<TYPE_5.Disk> ( NAME VAR_3 ) NAME VAR_3 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK (  VAR_3 . add ( VAR_4 . METHOD_2 ( ) ) )  VAR_3 . add ( VAR_4 . METHOD_2 ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  setItems ( VAR_3 ) )  setItems ( VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_1 . when ( VAR_2 . METHOD_2 ( VAR_3 . Matchers < org.ovirt.engine.core.compat.Guid > any ( VAR_4 . Guid class ) , VAR_3 . Matchers < TYPE_2 > any ( VAR_5 class ) ) ) . thenReturn ( METHOD_3 ( VAR_1 ) ) )  TYPE_1 . when ( VAR_2 . METHOD_2 ( VAR_3 . Matchers < org.ovirt.engine.core.compat.Guid > any ( VAR_4 . Guid class ) , VAR_3 . Matchers < TYPE_2 > any ( VAR_5 class ) ) ) . thenReturn ( METHOD_3 ( VAR_1 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN java.lang.Boolean ) RETURN java.lang.Boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 . METHOD_2 ( name ) ) COND VAR_1 . METHOD_2 ( name ) ( THEN THEN ( IF IF ( COND ( VAR_1 . METHOD_3 ( name ) ) instanceof java.lang.Boolean ) COND ( VAR_1 . METHOD_3 ( name ) ) instanceof java.lang.Boolean ( THEN THEN (  return ( ( java.lang.Boolean ) ( VAR_1 . METHOD_3 ( name ) ) ) ; )  return ( ( java.lang.Boolean ) ( VAR_1 . METHOD_3 ( name ) ) ) ; ) THEN THEN ) IF IF (  return java.lang.Boolean . METHOD_4 ( VAR_1 . METHOD_3 ( name ) . toString ( ) ) ; )  return java.lang.Boolean . METHOD_4 ( VAR_1 . METHOD_3 ( name ) . toString ( ) ) ; ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( METHOD_3 ( ) ) )  METHOD_2 ( METHOD_3 ( ) ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ( INIT = METHOD_4 ( null ) ) INIT = METHOD_4 ( null ) ) VAR VAR (  model . METHOD_5 ( new TYPE_2 ( ) ) )  model . METHOD_5 ( new TYPE_2 ( ) ) (  model . METHOD_6 ( ) . METHOD_7 ( new TYPE_3 ( ) ) )  model . METHOD_6 ( ) . METHOD_7 ( new TYPE_3 ( ) ) (  VAR_1 . METHOD_8 ( ) )  VAR_1 . METHOD_8 ( ) ( TRY TRY ( BLOCK BLOCK (  VAR_2 . add ( model ) )  VAR_2 . add ( model ) (  METHOD_9 ( STRING_1 ) )  METHOD_9 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_3 ) NAME VAR_3 ( BLOCK BLOCK (  METHOD_10 ( VAR_3 , STRING_2 , STRING_3 , STRING_4 , STRING_5 ) )  METHOD_10 ( VAR_3 , STRING_2 , STRING_3 , STRING_4 , STRING_5 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1.ValidationResult ) RETURN TYPE_1.ValidationResult ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StoragePool ) TYPE org.ovirt.engine.core.common.businessentities.StoragePool ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  return TYPE_2 . METHOD_3 ( VAR_2 ) . when ( ( ( VAR_1 != null ) && ( cluster . METHOD_4 ( ) ? ( VAR_1 . METHOD_5 ( ) . METHOD_6 ( cluster . METHOD_5 ( ) ) ) > 0 : false ) ) ) ; )  return TYPE_2 . METHOD_3 ( VAR_2 ) . when ( ( ( VAR_1 != null ) && ( cluster . METHOD_4 ( ) ? ( VAR_1 . METHOD_5 ( ) . METHOD_6 ( cluster . METHOD_5 ( ) ) ) > 0 : false ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME status ) NAME status ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 . size ( ) ) == 0 ) COND ( VAR_1 . size ( ) ) == 0 ( THEN THEN ( SYNCHRONIZED SYNCHRONIZED (  VAR_1 )  VAR_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) )  VAR_1 . METHOD_2 ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) THEN THEN ) IF IF (  return ! ( VAR_1 . METHOD_5 ( status . getValue ( ) ) ) ; )  return ! ( VAR_1 . METHOD_5 ( status . getValue ( ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  return new TYPE_1 ( new TYPE_2 ( disk . getId ( ) , TYPE_3 . METHOD_2 ( ) ) , VAR_1 , TYPE_4 . getName ( ) , STRING_1 , 0 , null , true , TYPE_3 . getParameters ( ) . METHOD_3 ( ) , false , STRING_1 ) ; )  return new TYPE_1 ( new TYPE_2 ( disk . getId ( ) , TYPE_3 . METHOD_2 ( ) ) , VAR_1 , TYPE_4 . getName ( ) , STRING_1 , 0 , null , true , TYPE_3 . getParameters ( ) . METHOD_3 ( ) , false , STRING_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDSGroup> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDSGroup> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.ArrayList < TYPE_1 > ( ) ) INIT = new java.util.ArrayList < TYPE_1 > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ) TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ( NAME cluster ) NAME cluster ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  VAR_2 . add ( METHOD_2 ( cluster ) ) )  VAR_2 . add ( METHOD_2 ( cluster ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  METHOD_3 ( ) . setItems ( VAR_2 ) )  METHOD_3 ( ) . setItems ( VAR_2 ) ( IF IF ( COND VAR_3 ) COND VAR_3 ( THEN THEN (  VAR_3 = false )  VAR_3 = false (  METHOD_4 ( ) )  METHOD_4 ( ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( ( ( ( ( ( ( ( ( METHOD_3 ( ) ? STRING_1 : STRING_2 ) + ( METHOD_4 ( ) ? STRING_3 : STRING_4 ) ) + STRING_5 ) + STRING_6 ) + ( VAR_2 [ VAR_3 ] ) ) + STRING_7 ) + ( ( METHOD_5 ( ) ) / INT_1 ) ) + STRING_8 ) ) )  VAR_1 . METHOD_2 ( ( ( ( ( ( ( ( ( METHOD_3 ( ) ? STRING_1 : STRING_2 ) + ( METHOD_4 ( ) ? STRING_3 : STRING_4 ) ) + STRING_5 ) + STRING_6 ) + ( VAR_2 [ VAR_3 ] ) ) + STRING_7 ) + ( ( METHOD_5 ( ) ) / INT_1 ) ) + STRING_8 ) ) (  return org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . METHOD_6 ( ) . METHOD_7 ( ( ( METHOD_5 ( ) ) / INT_1 ) ) ; )  return org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . METHOD_6 ( ) . METHOD_7 ( ( ( METHOD_5 ( ) ) / INT_1 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_1 . METHOD_2 ( false ) )  VAR_1 . METHOD_2 ( false ) (  VAR_1 . METHOD_3 ( VAR_2 ) )  VAR_1 . METHOD_3 ( VAR_2 ) (  VAR_1 . METHOD_4 ( VAR_3 ) )  VAR_1 . METHOD_4 ( VAR_3 ) (  cmd = org.mockito.Mockito . METHOD_5 ( new TYPE_2 ( VAR_1 ) ) )  cmd = org.mockito.Mockito . METHOD_5 ( new TYPE_2 ( VAR_1 ) ) (  METHOD_6 ( cmd ) )  METHOD_6 ( cmd ) (  org.mockito.Mockito.doReturn ( METHOD_7 ( VAR_3 , VAR_4 , VAR_2 ) ) . when ( VAR_5 ) . METHOD_8 ( VAR_3 ) )  org.mockito.Mockito.doReturn ( METHOD_7 ( VAR_3 , VAR_4 , VAR_2 ) ) . when ( VAR_5 ) . METHOD_8 ( VAR_3 ) (  TYPE_3 . METHOD_9 ( cmd . validate ( ) ) )  TYPE_3 . METHOD_9 ( cmd . validate ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_4 . METHOD_2 ( ) ) == VAR_2 ) COND ( VAR_4 . METHOD_2 ( ) ) == VAR_2 ( THEN THEN ( IF IF ( COND ( VAR_3 == null ) || ( VAR_3 . equals ( VAR_4 . METHOD_3 ( ) ) ) ) COND ( VAR_3 == null ) || ( VAR_3 . equals ( VAR_4 . METHOD_3 ( ) ) ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ( ) ; )  return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ( ) ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ( ) ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ( ) ; } } (  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new TYPE_1 ( VAR_1 ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new TYPE_1 ( VAR_1 ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( TYPE_1 . METHOD_2 ( ) ) != null ) COND ( TYPE_1 . METHOD_2 ( ) ) != null ( THEN THEN (  METHOD_3 ( ) )  METHOD_3 ( ) (  TYPE_2 . METHOD_4 ( TYPE_1 . METHOD_5 ( ) ) )  TYPE_2 . METHOD_4 ( TYPE_1 . METHOD_5 ( ) ) (  TYPE_3 . METHOD_6 ( TYPE_1 . METHOD_2 ( ) ) )  TYPE_3 . METHOD_6 ( TYPE_1 . METHOD_2 ( ) ) ) THEN THEN ( ELSE ELSE (  TYPE_1 . METHOD_7 ( false ) )  TYPE_1 . METHOD_7 ( false ) (  log . METHOD_8 ( STRING_1 ) )  log . METHOD_8 ( STRING_1 ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> ( NAME result ) NAME result ( INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . getParameters ( ) . METHOD_4 ( ) ) ) INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . getParameters ( ) . METHOD_4 ( ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( result ) ) INIT = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( result ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ) TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME domain ) NAME domain ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( IF IF ( COND ( domain . METHOD_5 ( ) ) == ( VAR_2 ) ) COND ( domain . METHOD_5 ( ) ) == ( VAR_2 ) ( THEN THEN (  result . METHOD_6 ( domain ) )  result . METHOD_6 ( domain ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  TYPE_1 . METHOD_7 ( ) . METHOD_8 ( result ) )  TYPE_1 . METHOD_7 ( ) . METHOD_8 ( result ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source != null ? source : new java.util.HashMap < org.ovirt.engine.core.common.businessentities.VmTemplate , java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > > ( ) ; )  return source != null ? source : new java.util.HashMap < org.ovirt.engine.core.common.businessentities.VmTemplate , java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > > ( ) ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : new java.util.HashMap < org.ovirt.engine.core.common.businessentities.VmTemplate , java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > > ( ) ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : new java.util.HashMap < org.ovirt.engine.core.common.businessentities.VmTemplate , java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > > ( ) ; } } ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_1 ( VAR_1 , VAR_2 ) ) INIT = new TYPE_1 ( VAR_1 , VAR_2 ) ) VAR VAR (  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_4 , VAR_3 , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_4 , VAR_3 , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_1 . METHOD_3 ( ( VAR_1 != null ? VAR_1 : STRING_1 ) ) ) INIT = TYPE_1 . METHOD_3 ( ( VAR_1 != null ? VAR_1 : STRING_1 ) ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = STRING_2 ) INIT = STRING_2 ) VAR VAR ( IF IF ( COND ! ( TYPE_2 . METHOD_4 ( VAR_2 ) ) ) COND ! ( TYPE_2 . METHOD_4 ( VAR_2 ) ) ( THEN THEN (  VAR_3 = STRING_3 + ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . METHOD_5 ( ) . METHOD_6 ( VAR_2 ) ) )  VAR_3 = STRING_3 + ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . METHOD_5 ( ) . METHOD_6 ( VAR_2 ) ) ) THEN THEN ) IF IF (  return ( ( getEntity ( ) . getName ( ) ) + STRING_4 ) + VAR_3 ; )  return ( ( getEntity ( ) . getName ( ) ) + STRING_4 ) + VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = 0 ) INIT = 0 ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = 1 ) INIT = 1 ) VAR VAR ) INIT INIT ( COND VAR_2 < INT_1 ) COND VAR_2 < INT_1 ( UPDATE UPDATE (  VAR_3 ++ )  VAR_3 ++ ) UPDATE UPDATE ( BLOCK BLOCK (  VAR_2 = VAR_3 * INT_2 )  VAR_2 = VAR_3 * INT_2 (  VAR_1 . add ( java.lang.String.valueOf ( VAR_2 ) ) )  VAR_1 . add ( java.lang.String.valueOf ( VAR_2 ) ) ) BLOCK BLOCK ) FOR FOR (  METHOD_2 ( ) . setItems ( VAR_1 , java.lang.String.valueOf ( INT_2 ) ) )  METHOD_2 ( ) . setItems ( VAR_1 , java.lang.String.valueOf ( INT_2 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  model . METHOD_2 ( VAR_1 [ 0 ] ) )  model . METHOD_2 ( VAR_1 [ 0 ] ) (  METHOD_3 ( METHOD_4 ( ) ) )  METHOD_3 ( METHOD_4 ( ) ) (  VAR_2 . METHOD_5 ( ) )  VAR_2 . METHOD_5 ( ) ( TRY TRY ( BLOCK BLOCK (  VAR_3 . add ( model ) )  VAR_3 . add ( model ) (  METHOD_6 ( STRING_1 ) )  METHOD_6 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( BLOCK BLOCK (  METHOD_7 ( VAR_4 , STRING_2 , STRING_3 , STRING_4 , STRING_5 ) )  METHOD_7 ( VAR_4 , STRING_2 , STRING_3 , STRING_4 , STRING_5 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( ( TYPE_1 . getVm ( ) . METHOD_2 ( ) ) != ( VAR_1 ) ) && ( ( TYPE_1 . getVm ( ) . METHOD_2 ( ) ) != ( VAR_2 ) ) ) COND ( ( TYPE_1 . getVm ( ) . METHOD_2 ( ) ) != ( VAR_1 ) ) && ( ( TYPE_1 . getVm ( ) . METHOD_2 ( ) ) != ( VAR_2 ) ) ( THEN THEN (  addCanDoActionMessage ( VAR_3 ) )  addCanDoActionMessage ( VAR_3 ) (  return false ; )  return false ; ) THEN THEN ) IF IF (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME getValue ) NAME getValue ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_1 ( VAR_1 . METHOD_2 ( ) ) )  METHOD_1 ( VAR_1 . METHOD_2 ( ) ) ( SWITCH SWITCH ( NAME VAR_1 . METHOD_2 ( ) ) NAME VAR_1 . METHOD_2 ( ) ( CASE VAR_2 ( BLOCK BLOCK (  return METHOD_3 ( ) . METHOD_4 ( ) ; )  return METHOD_3 ( ) . METHOD_4 ( ) ; ) BLOCK BLOCK ) CASE VAR_2 ( CASE VAR_3 ( BLOCK BLOCK (  return METHOD_3 ( ) . METHOD_5 ( ) ; )  return METHOD_3 ( ) . METHOD_5 ( ) ; ) BLOCK BLOCK ) CASE VAR_3 ( CASE VAR_4 ( BLOCK BLOCK (  return METHOD_3 ( ) . METHOD_6 ( ) ; )  return METHOD_3 ( ) . METHOD_6 ( ) ; ) BLOCK BLOCK ) CASE VAR_4 ( CASE VAR_5 ( BLOCK BLOCK (  return METHOD_3 ( ) . METHOD_7 ( ) ; )  return METHOD_3 ( ) . METHOD_7 ( ) ; ) BLOCK BLOCK ) CASE VAR_5 ( CASE VAR_6 ( BLOCK BLOCK (  return METHOD_3 ( ) . METHOD_8 ( ) ; )  return METHOD_3 ( ) . METHOD_8 ( ) ; ) BLOCK BLOCK ) CASE VAR_6 ( DEFAULT DEFAULT ( BLOCK BLOCK (  return METHOD_3 ( ) . METHOD_6 ( ) ; )  return METHOD_3 ( ) . METHOD_6 ( ) ; ) BLOCK BLOCK ) DEFAULT DEFAULT ) SWITCH SWITCH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN java.util.Map<java.lang.String,java.lang.Object> ) RETURN java.util.Map<java.lang.String,java.lang.Object> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.Object> ) TYPE java.util.Map<java.lang.String,java.lang.Object> ( NAME VAR_3 ) NAME VAR_3 ( INIT = new java.util.HashMap < java.lang.String , java.lang.Object > ( ) ) INIT = new java.util.HashMap < java.lang.String , java.lang.Object > ( ) ) VAR VAR (  VAR_3 . put ( VAR_4 , ( model + VAR_1 ) ) )  VAR_3 . put ( VAR_4 , ( model + VAR_1 ) ) (  VAR_3 . put ( VAR_5 , java.lang.Integer . toString ( VAR_2 ) ) )  VAR_3 . put ( VAR_5 , java.lang.Integer . toString ( VAR_2 ) ) (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1.ValidationResult ) RETURN TYPE_1.ValidationResult ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ) TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME storageDomain ) NAME storageDomain ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_2 ( ) ) INIT = VAR_2 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = storageDomain . METHOD_3 ( ) ) INIT = storageDomain . METHOD_3 ( ) ) VAR VAR ( IF IF ( COND ! ( VAR_1 . equals ( VAR_3 ) ) ) COND ! ( VAR_1 . equals ( VAR_3 ) ) ( THEN THEN (  return new TYPE_1 . ValidationResult ( VAR_4 ) ; )  return new TYPE_1 . ValidationResult ( VAR_4 ) ; ) THEN THEN ) IF IF (  return VAR_5 ; )  return VAR_5 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = dao . METHOD_2 ( VAR_2 , true ) ) INIT = dao . METHOD_2 ( VAR_2 , true ) ) VAR VAR (  TYPE_2 . METHOD_3 ( VAR_1 ) )  TYPE_2 . METHOD_3 ( VAR_1 ) (  TYPE_2 . METHOD_4 ( ( ( VAR_1 . METHOD_5 ( ) . size ( ) ) == 2 ) ) )  TYPE_2 . METHOD_4 ( ( ( VAR_1 . METHOD_5 ( ) . size ( ) ) == 2 ) ) (  TYPE_2 . assertEquals ( VAR_2 , VAR_1 . getId ( ) ) )  TYPE_2 . assertEquals ( VAR_2 , VAR_1 . getId ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1.ValidationResult ) RETURN TYPE_1.ValidationResult ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_2 < VAR_1 ) COND VAR_2 < VAR_1 ( THEN THEN (  return new TYPE_1 . ValidationResult ( VAR_3 , java.lang.String . METHOD_2 ( STRING_1 , VAR_1 ) , java.lang.String . METHOD_2 ( STRING_2 , VAR_2 ) ) ; )  return new TYPE_1 . ValidationResult ( VAR_3 , java.lang.String . METHOD_2 ( STRING_1 , VAR_1 ) , java.lang.String . METHOD_2 ( STRING_2 , VAR_2 ) ) ; ) THEN THEN ) IF IF (  return VAR_4 ; )  return VAR_4 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . METHOD_2 ( METHOD_3 ( ) ) ) INIT = VAR_3 . METHOD_2 ( METHOD_3 ( ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.ArrayList<TYPE_3.VdcActionParametersBase> ) TYPE java.util.ArrayList<TYPE_3.VdcActionParametersBase> ( NAME VAR_4 ) NAME VAR_4 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR (  VAR_4 . METHOD_4 ( VAR_2 . METHOD_5 ( VAR_1 . METHOD_6 ( ) , VAR_1 . METHOD_7 ( ) ) ) )  VAR_4 . METHOD_4 ( VAR_2 . METHOD_5 ( VAR_1 . METHOD_6 ( ) , VAR_1 . METHOD_7 ( ) ) ) (  TYPE_4 . METHOD_8 ( VAR_4 ) )  TYPE_4 . METHOD_8 ( VAR_4 ) (  METHOD_9 ( VAR_4 ) )  METHOD_9 ( VAR_4 ) (  METHOD_10 ( VAR_5 , VAR_4 ) )  METHOD_10 ( VAR_5 , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain> ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( returnValue ) ) ) INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( returnValue ) ) ) VAR VAR (  VAR_2 = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) )  VAR_2 = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ) TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME domain ) NAME domain ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( IF IF ( COND TYPE_1 . METHOD_2 ( domain ) ) COND TYPE_1 . METHOD_2 ( domain ) ( THEN THEN (  VAR_2 . add ( domain ) )  VAR_2 . add ( domain ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  METHOD_3 ( ) . setItems ( VAR_2 ) )  METHOD_3 ( ) . setItems ( VAR_2 ) ( IF IF ( COND VAR_3 ) COND VAR_3 ( THEN THEN (  METHOD_4 ( ) )  METHOD_4 ( ) ) THEN THEN ( ELSE ELSE (  METHOD_5 ( ) )  METHOD_5 ( ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  VAR_2 . setId ( VAR_3 ) )  VAR_2 . setId ( VAR_3 ) (  VAR_1 . METHOD_2 ( VAR_2 ) )  VAR_1 . METHOD_2 ( VAR_2 ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_1 . METHOD_3 ( ) ) INIT = VAR_1 . METHOD_3 ( ) ) VAR VAR (  TYPE_4 . assertEquals ( VAR_3 , VAR_4 ) )  TYPE_4 . assertEquals ( VAR_3 , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  cmd . METHOD_2 ( VAR_1 ) )  cmd . METHOD_2 ( VAR_1 ) (  cmd . METHOD_1 ( ) )  cmd . METHOD_1 ( ) (  TYPE_1 . assertEquals ( VAR_2 , cmd . METHOD_3 ( ) ) )  TYPE_1 . assertEquals ( VAR_2 , cmd . METHOD_3 ( ) ) (  org.mockito.Mockito . METHOD_4 ( VAR_3 , org.mockito.Mockito . METHOD_5 ( 1 ) ) . METHOD_6 ( TYPE_2 . any ( VAR_4 . VDS class ) , TYPE_2 . any ( VAR_5 class ) ) )  org.mockito.Mockito . METHOD_4 ( VAR_3 , org.mockito.Mockito . METHOD_5 ( 1 ) ) . METHOD_6 ( TYPE_2 . any ( VAR_4 . VDS class ) , TYPE_2 . any ( VAR_5 class ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME iface ) NAME iface ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( iface . getId ( ) ) == null ) COND ( iface . getId ( ) ) == null ( THEN THEN (  iface . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) )  iface . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) ) THEN THEN ) IF IF (  METHOD_3 ( iface ) )  METHOD_3 ( iface ) (  iface . METHOD_4 ( null ) )  iface . METHOD_4 ( null ) (  iface . METHOD_5 ( TYPE_2 . METHOD_6 ( ) ) )  iface . METHOD_5 ( TYPE_2 . METHOD_6 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN java.util.Map<org.ovirt.engine.core.compat.Guid,java.lang.String> ) RETURN java.util.Map<org.ovirt.engine.core.compat.Guid,java.lang.String> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) ) != null ) && ( ! ( TYPE_2 . equals ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) ) ) ) ) COND ( ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) ) != null ) && ( ! ( TYPE_2 . equals ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) ) ) ) ( THEN THEN (  return TYPE_3 . METHOD_3 ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) , TYPE_4 . name ( ) ) ; )  return TYPE_3 . METHOD_3 ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) , TYPE_4 . name ( ) ) ; ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME vmId ) NAME vmId ( INIT = new org.ovirt.engine.core.compat.Guid ( STRING_1 ) ) INIT = new org.ovirt.engine.core.compat.Guid ( STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = dao . get ( vmId ) ) INIT = dao . get ( vmId ) ) VAR VAR (  VAR_1 . METHOD_2 ( TYPE_2 ) )  VAR_1 . METHOD_2 ( TYPE_2 ) (  dao . METHOD_3 ( VAR_1 ) )  dao . METHOD_3 ( VAR_1 ) (  VAR_1 = dao . get ( vmId ) )  VAR_1 = dao . get ( vmId ) (  TYPE_3 . METHOD_4 ( ( ( VAR_1 . METHOD_5 ( ) . getValue ( ) ) == ( TYPE_2 . getValue ( ) ) ) ) )  TYPE_3 . METHOD_4 ( ( ( VAR_1 . METHOD_5 ( ) . getValue ( ) ) == ( TYPE_2 . getValue ( ) ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME VAR_2 ) NAME VAR_2 ( INIT = new org.ovirt.engine.core.common.businessentities.VDS ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.VDS ( ) ) VAR VAR (  VAR_2 . METHOD_2 ( VAR_3 ) )  VAR_2 . METHOD_2 ( VAR_3 ) (  VAR_1 . METHOD_3 ( VAR_2 ) )  VAR_1 . METHOD_3 ( VAR_2 ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_1 . METHOD_4 ( ) ) INIT = VAR_1 . METHOD_4 ( ) ) VAR VAR (  TYPE_4 . assertEquals ( VAR_3 , VAR_4 . getId ( ) ) )  TYPE_4 . assertEquals ( VAR_3 , VAR_4 . getId ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME value ) NAME value ( INIT = TYPE_2 . METHOD_2 ( VAR_1 , VAR_2 ) ) INIT = TYPE_2 . METHOD_2 ( VAR_1 , VAR_2 ) ) VAR VAR ( IF IF ( COND value == null ) COND value == null ( THEN THEN (  throw new TYPE_3 ( VAR_3 , java.lang.String . METHOD_3 ( VAR_4 , VAR_2 ) ) ; )  throw new TYPE_3 ( VAR_3 , java.lang.String . METHOD_3 ( VAR_4 , VAR_2 ) ) ; ) THEN THEN ) IF IF (  return TYPE_4 . METHOD_4 ( value , TYPE_5 . name ( ) ) ; )  return TYPE_4 . METHOD_4 ( value , TYPE_5 . name ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = INT_1 ) INIT = INT_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = INT_2 ) INIT = INT_2 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_3 ) NAME VAR_3 ( INIT = org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) INIT = org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) VAR VAR (  METHOD_3 ( VAR_3 , VAR_4 ) )  METHOD_3 ( VAR_3 , VAR_4 ) (  METHOD_4 ( ) )  METHOD_4 ( ) ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ) TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME VAR_5 ) NAME VAR_5 ( INIT = METHOD_5 ( VAR_3 , VAR_1 , VAR_2 ) ) INIT = METHOD_5 ( VAR_3 , VAR_1 , VAR_2 ) ) VAR VAR (  METHOD_6 ( ) )  METHOD_6 ( ) (  TYPE_1 . METHOD_7 ( command . METHOD_8 ( ) ) )  TYPE_1 . METHOD_7 ( command . METHOD_8 ( ) ) (  TYPE_1 . METHOD_9 ( command . getReturnValue ( ) . METHOD_10 ( ) . METHOD_11 ( TYPE_2 . toString ( ) ) ) )  TYPE_1 . METHOD_9 ( command . getReturnValue ( ) . METHOD_10 ( ) . METHOD_11 ( TYPE_2 . toString ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME equals ) NAME equals ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME obj ) NAME obj ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME returnValue ) NAME returnValue ( INIT = super . equals ( obj ) ) INIT = super . equals ( obj ) ) VAR VAR ( IF IF ( COND ( ( ! returnValue ) && ( obj != null ) ) && ( obj instanceof TYPE_1 ) ) COND ( ( ! returnValue ) && ( obj != null ) ) && ( obj instanceof TYPE_1 ) ( THEN THEN (  returnValue = ( ! ( STRING_1 . equals ( METHOD_1 ( ) ) ) ) && ( TYPE_2 . METHOD_2 ( METHOD_1 ( ) , ( ( TYPE_1 ) ( obj ) ) . METHOD_1 ( ) ) ) )  returnValue = ( ! ( STRING_1 . equals ( METHOD_1 ( ) ) ) ) && ( TYPE_2 . METHOD_2 ( METHOD_1 ( ) , ( ( TYPE_1 ) ( obj ) ) . METHOD_1 ( ) ) ) ) THEN THEN ) IF IF (  return returnValue ; )  return returnValue ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME validator ) NAME validator ( INIT = new TYPE_1 ( VAR_1 , TYPE_2 . METHOD_2 ( ) ) ) INIT = new TYPE_1 ( VAR_1 , TYPE_2 . METHOD_2 ( ) ) ) VAR VAR (  return ( ( ( validate ( validator . METHOD_3 ( ) ) ) && ( validate ( validator . METHOD_4 ( ) ) ) ) && ( validate ( validator . METHOD_5 ( ) ) ) ) && ( validate ( validator . METHOD_6 ( ) ) ) ; )  return ( ( ( validate ( validator . METHOD_3 ( ) ) ) && ( validate ( validator . METHOD_4 ( ) ) ) ) && ( validate ( validator . METHOD_5 ( ) ) ) ) && ( validate ( validator . METHOD_6 ( ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( java.lang.String ) ( TYPE_2 . METHOD_2 ( VAR_2 ) ) ) ) INIT = ( ( java.lang.String ) ( TYPE_2 . METHOD_2 ( VAR_2 ) ) ) ) VAR VAR ( IF IF ( COND ! ( TYPE_3 . METHOD_3 ( VAR_1 ) ) ) COND ! ( TYPE_3 . METHOD_3 ( VAR_1 ) ) ( THEN THEN ( VAR VAR ( TYPE org.ovirt.engine.ui.uicommonweb.models.EntityModel ) TYPE org.ovirt.engine.ui.uicommonweb.models.EntityModel ( NAME VAR_3 ) NAME VAR_3 ( INIT = model . METHOD_4 ( ) . METHOD_5 ( ) ) INIT = model . METHOD_4 ( ) . METHOD_5 ( ) ) VAR VAR (  VAR_3 . setEntity ( VAR_1 ) )  VAR_3 . setEntity ( VAR_1 ) (  VAR_3 . setIsChangable ( false ) )  VAR_3 . setIsChangable ( false ) ) THEN THEN ) IF IF (  METHOD_6 ( model ) )  METHOD_6 ( model ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ( INIT = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ) INIT = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ) VAR VAR (  _asyncQuery . METHOD_2 ( this ) )  _asyncQuery . METHOD_2 ( this ) ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME version ) NAME version ( INIT = ( ( java.lang.String ) ( result ) ) ) INIT = ( ( java.lang.String ) ( result ) ) ) VAR VAR (  METHOD_3 ( ) . METHOD_4 ( version ) )  METHOD_3 ( ) . METHOD_4 ( version ) ) BLOCK BLOCK ) METHOD METHOD (  VAR_1 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object result ) { java.lang.String version = ( ( java.lang.String ) ( result ) ) ; METHOD_3 ( ) . METHOD_4 ( version ) ; } } )  VAR_1 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object result ) { java.lang.String version = ( ( java.lang.String ) ( result ) ) ; METHOD_3 ( ) . METHOD_4 ( version ) ; } } (  TYPE_1 . METHOD_5 ( _asyncQuery ) )  TYPE_1 . METHOD_5 ( _asyncQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ( INIT = org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) INIT = org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.Object> ) TYPE java.util.Map<java.lang.String,java.lang.Object> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.HashMap < > ( ) ) INIT = new java.util.HashMap < > ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_1 ( new TYPE_2 ( VAR_1 , vm . getId ( ) ) , VAR_4 , STRING_1 , null , 0 , VAR_2 , true , true , true , null , null , null , null ) ) INIT = new TYPE_1 ( new TYPE_2 ( VAR_1 , vm . getId ( ) ) , VAR_4 , STRING_1 , null , 0 , VAR_2 , true , true , true , null , null , null , null ) ) VAR VAR (  vm . METHOD_3 ( ) . put ( VAR_1 , VAR_3 ) )  vm . METHOD_3 ( ) . put ( VAR_1 , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ) TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ( NAME cluster ) NAME cluster ( INIT = getModel ( ) . METHOD_2 ( ) ) INIT = getModel ( ) . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( java.lang.Boolean ) ( TYPE_1 . METHOD_3 ( VAR_2 , cluster . METHOD_4 ( ) . getValue ( ) ) ) ) ) INIT = ( ( java.lang.Boolean ) ( TYPE_1 . METHOD_3 ( VAR_2 , cluster . METHOD_4 ( ) . getValue ( ) ) ) ) ) VAR VAR (  getModel ( ) . METHOD_5 ( ) . METHOD_6 ( VAR_1 ) )  getModel ( ) . METHOD_5 ( ) . METHOD_6 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) . METHOD_3 ( TYPE_1 . getParameters ( ) . METHOD_4 ( ) ) )  METHOD_2 ( ) . METHOD_3 ( TYPE_1 . getParameters ( ) . METHOD_4 ( ) ) (  return validate ( TYPE_2 . METHOD_1 ( TYPE_3 . METHOD_5 ( METHOD_2 ( ) , TYPE_1 . getParameters ( ) . METHOD_6 ( ) ) , TYPE_1 . METHOD_7 ( ) . METHOD_8 ( ) , TYPE_1 . METHOD_9 ( ) ) ) ; )  return validate ( TYPE_2 . METHOD_1 ( TYPE_3 . METHOD_5 ( METHOD_2 ( ) , TYPE_1 . getParameters ( ) . METHOD_6 ( ) ) , TYPE_1 . METHOD_7 ( ) . METHOD_8 ( ) , TYPE_1 . METHOD_9 ( ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME id ) NAME id ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = getEntity ( ) ) INIT = getEntity ( ) ) VAR VAR ( IF IF ( COND ! ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( TYPE_3 . METHOD_4 ( id ) ) ) ) COND ! ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( TYPE_3 . METHOD_4 ( id ) ) ) ( THEN THEN (  throw new TYPE_4 ( VAR_2 ) ; )  throw new TYPE_4 ( VAR_2 ) ; ) THEN THEN ) IF IF (  return METHOD_5 ( VAR_3 , new TYPE_5 ( VAR_1 . getId ( ) , VAR_1 ) ) ; )  return METHOD_5 ( VAR_3 , new TYPE_5 ( VAR_1 . getId ( ) , VAR_1 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  METHOD_3 ( ) )  METHOD_3 ( ) (  METHOD_4 ( ) )  METHOD_4 ( ) (  METHOD_5 ( ) )  METHOD_5 ( ) (  METHOD_6 ( ) )  METHOD_6 ( ) (  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_2 ) . METHOD_7 ( ) )  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_2 ) . METHOD_7 ( ) (  org.mockito.Mockito.doReturn ( new TYPE_1 . ValidationResult ( VAR_3 ) ) . when ( VAR_2 ) . METHOD_8 ( TYPE_2 . METHOD_9 ( ) ) )  org.mockito.Mockito.doReturn ( new TYPE_1 . ValidationResult ( VAR_3 ) ) . when ( VAR_2 ) . METHOD_8 ( TYPE_2 . METHOD_9 ( ) ) (  TYPE_3 . METHOD_10 ( cmd , VAR_4 ) )  TYPE_3 . METHOD_10 ( cmd , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME vmId ) NAME vmId ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source ; )  return source ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } (  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_1 , new TYPE_1 ( vmId ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_1 , new TYPE_1 ( vmId ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<TYPE_1<org.ovirt.engine.core.compat.Guid,java.lang.String>> ) TYPE java.util.List<TYPE_1<org.ovirt.engine.core.compat.Guid,java.lang.String>> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_1<org.ovirt.engine.core.compat.Guid,java.lang.String> ) TYPE TYPE_1<org.ovirt.engine.core.compat.Guid,java.lang.String> ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  VAR_2 . METHOD_2 ( VAR_3 . METHOD_3 ( ) . METHOD_4 ( ) , ( ( VAR_3 . METHOD_5 ( ) ) + STRING_1 ) ) )  VAR_2 . METHOD_2 ( VAR_3 . METHOD_3 ( ) . METHOD_4 ( ) , ( ( VAR_3 . METHOD_5 ( ) ) + STRING_1 ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME validator ) NAME validator ( INIT = new TYPE_1 ( METHOD_2 ( ) ) ) INIT = new TYPE_1 ( METHOD_2 ( ) ) ) VAR VAR (  return ( ( validate ( validator . METHOD_3 ( ) ) ) && ( validate ( validator . METHOD_4 ( METHOD_5 ( ) ) ) ) ) && ( validate ( validator . METHOD_6 ( METHOD_5 ( ) , METHOD_7 ( ) ) ) ) ; )  return ( ( validate ( validator . METHOD_3 ( ) ) ) && ( validate ( validator . METHOD_4 ( METHOD_5 ( ) ) ) ) ) && ( validate ( validator . METHOD_6 ( METHOD_5 ( ) , METHOD_7 ( ) ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME value ) NAME value ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME context ) NAME context ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( value . METHOD_2 ( ) ) == null ) || ( STRING_1 . equals ( value . METHOD_2 ( ) . METHOD_3 ( ) ) ) ) COND ( ( value . METHOD_2 ( ) ) == null ) || ( STRING_1 . equals ( value . METHOD_2 ( ) . METHOD_3 ( ) ) ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( VAR_2 . METHOD_4 ( value . METHOD_5 ( ) ) ) ? VAR_3 : VAR_4 ) INIT = ( VAR_2 . METHOD_4 ( value . METHOD_5 ( ) ) ) ? VAR_3 : VAR_4 ) VAR VAR (  return VAR_1 . METHOD_6 ( ) . METHOD_7 ( value . METHOD_2 ( ) ) ; )  return VAR_1 . METHOD_6 ( ) . METHOD_7 ( value . METHOD_2 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_3 . METHOD_2 ( VAR_1 ) ) INIT = TYPE_3 . METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND ! ( VAR_2 . METHOD_3 ( ) ) ) COND ! ( VAR_2 . METHOD_3 ( ) ) ( THEN THEN (  VAR_3 . error ( ( STRING_1 + STRING_2 ) , VAR_1 , TYPE_3 . METHOD_4 ( ) ) )  VAR_3 . error ( ( STRING_1 + STRING_2 ) , VAR_1 , TYPE_3 . METHOD_4 ( ) ) (  return null ; )  return null ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME version ) NAME version ( INIT = VAR_2 . METHOD_5 ( VAR_4 ) ) INIT = VAR_2 . METHOD_5 ( VAR_4 ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_2 . METHOD_5 ( VAR_6 ) ) INIT = VAR_2 . METHOD_5 ( VAR_6 ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_7 ) NAME VAR_7 ( INIT = VAR_2 . METHOD_5 ( VAR_8 ) ) INIT = VAR_2 . METHOD_5 ( VAR_8 ) ) VAR VAR (  return new TYPE_1 ( version , VAR_5 , VAR_7 ) ; )  return new TYPE_1 ( version , VAR_5 , VAR_7 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.network.Network ) TYPE org.ovirt.engine.core.common.businessentities.network.Network ( NAME network ) NAME network ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_2 . METHOD_2 ( network . getName ( ) ) )  VAR_2 . METHOD_2 ( network . getName ( ) ) (  VAR_2 . METHOD_3 ( network . getId ( ) ) )  VAR_2 . METHOD_3 ( network . getId ( ) ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME parameters ) NAME parameters ( INIT = new TYPE_2 ( VAR_2 ) ) INIT = new TYPE_2 ( VAR_2 ) ) VAR VAR (  parameters . METHOD_4 ( VAR_1 ) )  parameters . METHOD_4 ( VAR_1 ) ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_6 ) NAME METHOD_6 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_4 . METHOD_7 ( ) . METHOD_8 ( ) )  VAR_4 . METHOD_7 ( ) . METHOD_8 ( ) ) BLOCK BLOCK ) METHOD METHOD (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_5 ( VAR_3 , parameters , new TYPE_3 ( ) { public void METHOD_6 ( TYPE_4 result ) { VAR_4 . METHOD_7 ( ) . METHOD_8 ( ) ; } } ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_5 ( VAR_3 , parameters , new TYPE_3 ( ) { public void METHOD_6 ( TYPE_4 result ) { VAR_4 . METHOD_7 ( ) . METHOD_8 ( ) ; } } ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_2 . METHOD_2 ( METHOD_3 ( ) ) )  VAR_2 . METHOD_2 ( METHOD_3 ( ) ) (  VAR_3 . METHOD_4 ( java.lang.String.valueOf ( METHOD_3 ( ) . METHOD_5 ( ) ) ) )  VAR_3 . METHOD_4 ( java.lang.String.valueOf ( METHOD_3 ( ) . METHOD_5 ( ) ) ) (  VAR_4 . METHOD_4 ( java.lang.Boolean . toString ( METHOD_3 ( ) . METHOD_6 ( ) ) ) )  VAR_4 . METHOD_4 ( java.lang.Boolean . toString ( METHOD_3 ( ) . METHOD_6 ( ) ) ) (  VAR_5 . METHOD_4 ( TYPE_2 . METHOD_7 ( METHOD_3 ( ) . METHOD_8 ( ) ) ) )  VAR_5 . METHOD_4 ( TYPE_2 . METHOD_7 ( METHOD_3 ( ) . METHOD_8 ( ) ) ) (  VAR_6 . METHOD_9 ( METHOD_3 ( ) ) )  VAR_6 . METHOD_9 ( METHOD_3 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( ( VAR_1 . METHOD_2 ( ) ) == ( VAR_2 ) ) && ( VAR_3 . METHOD_3 ( VAR_1 ) ) ) COND ( ( VAR_1 . METHOD_2 ( ) ) == ( VAR_2 ) ) && ( VAR_3 . METHOD_3 ( VAR_1 ) ) ( THEN THEN (  VAR_4 . METHOD_4 ( VAR_5 , VAR_1 ) )  VAR_4 . METHOD_4 ( VAR_5 , VAR_1 ) (  VAR_6 = true )  VAR_6 = true (  VAR_7 = true )  VAR_7 = true (  VAR_8 . METHOD_5 ( STRING_1 , VAR_1 . getId ( ) , VAR_1 . METHOD_6 ( ) ) )  VAR_8 . METHOD_5 ( STRING_1 , VAR_1 . getId ( ) , VAR_1 . METHOD_6 ( ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.when ( VAR_1 . get ( TYPE_2 . any ( VAR_2 . Guid class ) ) ) . thenReturn ( METHOD_2 ( VAR_3 ) ) )  org.mockito.Mockito.when ( VAR_1 . get ( TYPE_2 . any ( VAR_2 . Guid class ) ) ) . thenReturn ( METHOD_2 ( VAR_3 ) ) (  METHOD_3 ( ) . METHOD_4 ( ) )  METHOD_3 ( ) . METHOD_4 ( ) ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.String> ) TYPE java.util.Map<java.lang.String,java.lang.String> ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_3 ( ) . METHOD_5 ( ) . getReturnValue ( ) ) INIT = METHOD_3 ( ) . METHOD_5 ( ) . getReturnValue ( ) ) VAR VAR (  TYPE_3 . METHOD_6 ( VAR_4 ) )  TYPE_3 . METHOD_6 ( VAR_4 ) (  TYPE_3 . assertEquals ( METHOD_7 ( ) , VAR_4 ) )  TYPE_3 . assertEquals ( METHOD_7 ( ) , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME vmId ) NAME vmId ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( VAR_2 ) ) INIT = new TYPE_2 ( VAR_2 ) ) VAR VAR (  VAR_1 . METHOD_2 ( VAR_3 ) )  VAR_1 . METHOD_2 ( VAR_3 ) (  VAR_1 . METHOD_3 ( vmId ) )  VAR_1 . METHOD_3 ( vmId ) (  org.mockito.Mockito.when ( VAR_4 . METHOD_4 ( vmId , VAR_5 ) ) . thenReturn ( TYPE_3 . METHOD_5 ( VAR_1 ) ) )  org.mockito.Mockito.when ( VAR_4 . METHOD_4 ( vmId , VAR_5 ) ) . thenReturn ( TYPE_3 . METHOD_5 ( VAR_1 ) ) (  TYPE_4 . METHOD_6 ( VAR_6 ) )  TYPE_4 . METHOD_6 ( VAR_6 ) (  org.mockito.Mockito.doReturn ( VAR_4 ) . when ( VAR_6 ) . METHOD_7 ( ) )  org.mockito.Mockito.doReturn ( VAR_4 ) . when ( VAR_6 ) . METHOD_7 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.Object> ) TYPE java.util.Map<java.lang.String,java.lang.Object> ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . get ( VAR_1 . METHOD_2 ( ) ) ) INIT = VAR_3 . get ( VAR_1 . METHOD_2 ( ) ) ) VAR VAR ( IF IF ( COND VAR_2 == null ) COND VAR_2 == null ( THEN THEN (  VAR_2 = new java.util.HashMap < java.lang.String , java.lang.Object > ( ) )  VAR_2 = new java.util.HashMap < java.lang.String , java.lang.Object > ( ) (  VAR_3 . put ( VAR_1 . METHOD_2 ( ) , VAR_2 ) )  VAR_3 . put ( VAR_1 . METHOD_2 ( ) , VAR_2 ) ) THEN THEN ) IF IF (  VAR_2 . put ( VAR_1 . METHOD_3 ( ) , TYPE_2 . METHOD_4 ( VAR_1 ) ) )  VAR_2 . put ( VAR_1 . METHOD_3 ( ) , TYPE_2 . METHOD_4 ( VAR_1 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN org.ovirt.engine.core.common.businessentities.StorageDomain ) RETURN org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME status ) NAME status ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ) TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( status , name , VAR_2 ) ) INIT = METHOD_2 ( status , name , VAR_2 ) ) VAR VAR (  VAR_1 . METHOD_3 ( VAR_3 ) )  VAR_1 . METHOD_3 ( VAR_3 ) (  org.mockito.Mockito.doReturn ( VAR_4 ) . when ( cmd ) . METHOD_4 ( ) )  org.mockito.Mockito.doReturn ( VAR_4 ) . when ( cmd ) . METHOD_4 ( ) (  org.mockito.Mockito.when ( VAR_4 . METHOD_5 ( TYPE_2 . any ( VAR_5 . Guid class ) ) ) . thenReturn ( TYPE_3 . METHOD_6 ( VAR_1 ) ) )  org.mockito.Mockito.when ( VAR_4 . METHOD_5 ( TYPE_2 . any ( VAR_5 . Guid class ) ) ) . thenReturn ( TYPE_3 . METHOD_6 ( VAR_1 ) ) (  cmd . METHOD_7 ( new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ) )  cmd . METHOD_7 ( new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ) (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  return ( ( ( ( getParameters ( ) . METHOD_2 ( ) ) != ( VAR_1 ) ) && ( ( TYPE_1 . getVm ( ) ) != null ) ) && ( ( TYPE_1 . getVm ( ) . METHOD_3 ( ) ) || ( ( TYPE_1 . getVm ( ) . getStatus ( ) ) == ( VAR_2 ) ) ) ) && ( ( TYPE_1 . getVm ( ) . METHOD_4 ( ) ) != null ) ; )  return ( ( ( ( getParameters ( ) . METHOD_2 ( ) ) != ( VAR_1 ) ) && ( ( TYPE_1 . getVm ( ) ) != null ) ) && ( ( TYPE_1 . getVm ( ) . METHOD_3 ( ) ) || ( ( TYPE_1 . getVm ( ) . getStatus ( ) ) == ( VAR_2 ) ) ) ) && ( ( TYPE_1 . getVm ( ) . METHOD_4 ( ) ) != null ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  parameters = new TYPE_1 ( ) )  parameters = new TYPE_1 ( ) (  parameters . METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) )  parameters . METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) (  command = org.mockito.Mockito . METHOD_4 ( new TYPE_2 < TYPE_1 > ( parameters ) ) )  command = org.mockito.Mockito . METHOD_4 ( new TYPE_2 < TYPE_1 > ( parameters ) ) (  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_5 ( ) )  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_5 ( ) (  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( command ) . METHOD_6 ( ) )  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( command ) . METHOD_6 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  org.mockito.Mockito.when ( VAR_2 . METHOD_2 ( ) ) . thenReturn ( VAR_3 ) )  org.mockito.Mockito.when ( VAR_2 . METHOD_2 ( ) ) . thenReturn ( VAR_3 ) ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME storageDomain ) NAME storageDomain ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  org.mockito.Mockito.when ( VAR_3 . METHOD_3 ( storageDomain . getId ( ) , VAR_4 ) ) . thenReturn ( storageDomain ) )  org.mockito.Mockito.when ( VAR_3 . METHOD_3 ( storageDomain . getId ( ) , VAR_4 ) ) . thenReturn ( storageDomain ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME action ) NAME action ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  getEntity ( id ) )  getEntity ( id ) ( IF IF ( COND ( action . METHOD_2 ( ) ) && ( action . METHOD_3 ( ) ) ) COND ( action . METHOD_2 ( ) ) && ( action . METHOD_3 ( ) ) ( THEN THEN (  return METHOD_4 ( VAR_1 , new TYPE_3 ( VAR_2 , org.ovirt.engine.core.compat.Guid . METHOD_5 ( id ) , true ) ) ; )  return METHOD_4 ( VAR_1 , new TYPE_3 ( VAR_2 , org.ovirt.engine.core.compat.Guid . METHOD_5 ( id ) , true ) ) ; ) THEN THEN ( ELSE ELSE (  return METHOD_1 ( id ) ; )  return METHOD_1 ( id ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME result ) NAME result ( INIT = dao . METHOD_2 ( STRING_1 ) ) INIT = dao . METHOD_2 ( STRING_1 ) ) VAR VAR (  TYPE_2 . METHOD_3 ( result ) )  TYPE_2 . METHOD_3 ( result ) (  TYPE_2 . METHOD_4 ( result . isEmpty ( ) ) )  TYPE_2 . METHOD_4 ( result . isEmpty ( ) ) ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME vm ) NAME vm ( IN result ) IN result ( BLOCK BLOCK (  TYPE_2 . assertEquals ( STRING_1 , vm . METHOD_5 ( ) ) )  TYPE_2 . assertEquals ( STRING_1 , vm . METHOD_5 ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ( INIT = ( ( TYPE_1 ) ( target ) ) ) INIT = ( ( TYPE_1 ) ( target ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain> ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( returnValue ) ) ) INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( returnValue ) ) ) VAR VAR (  TYPE_2 . METHOD_1 ( VAR_1 , new TYPE_3 ( ) ) )  TYPE_2 . METHOD_1 ( VAR_1 , new TYPE_3 ( ) ) (  METHOD_2 ( VAR_1 ) )  METHOD_2 ( VAR_1 ) (  METHOD_3 ( value ) )  METHOD_3 ( value ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME from ) NAME from ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME to ) NAME to ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR ( IF IF ( COND from . METHOD_2 ( ) ) COND from . METHOD_2 ( ) ( THEN THEN (  to . METHOD_3 ( TYPE_3 . METHOD_4 ( from . METHOD_5 ( ) ) ) )  to . METHOD_3 ( TYPE_3 . METHOD_4 ( from . METHOD_5 ( ) ) ) ) THEN THEN ) IF IF ( IF IF ( COND from . METHOD_6 ( ) ) COND from . METHOD_6 ( ) ( THEN THEN (  to . METHOD_7 ( from . METHOD_8 ( ) ) )  to . METHOD_7 ( from . METHOD_8 ( ) ) ) THEN THEN ) IF IF (  return to ; )  return to ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<TYPE_1> ) TYPE java.util.ArrayList<TYPE_1> ( NAME list ) NAME list ( INIT = new java.util.ArrayList < TYPE_1 > ( ) ) INIT = new java.util.ArrayList < TYPE_1 > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK ( IF IF ( COND ( VAR_3 . METHOD_2 ( ) ) == ( VAR_4 ) ) COND ( VAR_3 . METHOD_2 ( ) ) == ( VAR_4 ) ( THEN THEN (  list . add ( VAR_3 ) )  list . add ( VAR_3 ) ( IF IF ( COND ( VAR_3 . METHOD_3 ( ) ) != null ) COND ( VAR_3 . METHOD_3 ( ) ) != null ( THEN THEN (  TYPE_2 . METHOD_1 ( VAR_3 , VAR_3 . METHOD_3 ( ) ) )  TYPE_2 . METHOD_1 ( VAR_3 , VAR_3 . METHOD_3 ( ) ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  VAR_1 . METHOD_4 ( list ) )  VAR_1 . METHOD_4 ( list ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( 2 ) )  METHOD_2 ( 2 ) (  METHOD_3 ( METHOD_4 ( VAR_1 , VAR_2 class , new java.lang.String [ ] { STRING_1 , STRING_2 , STRING_3 } , new java.lang.Object [ ] { VAR_3 , VAR_4 , java.lang.Boolean . TRUE } , true , true ) ) )  METHOD_3 ( METHOD_4 ( VAR_1 , VAR_2 class , new java.lang.String [ ] { STRING_1 , STRING_2 , STRING_3 } , new java.lang.Object [ ] { VAR_3 , VAR_4 , java.lang.Boolean . TRUE } , true , true ) ) ( VAR VAR ( TYPE TYPE_1.Disk ) TYPE TYPE_1.Disk ( NAME disk ) NAME disk ( INIT = resource . METHOD_5 ( METHOD_6 ( ) ) ) INIT = resource . METHOD_5 ( METHOD_6 ( ) ) ) VAR VAR (  METHOD_7 ( disk ) )  METHOD_7 ( disk ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( VAR_1 . Frontend class ) . METHOD_3 ( VAR_2 class ) )  METHOD_2 ( VAR_1 . Frontend class ) . METHOD_3 ( VAR_2 class ) (  METHOD_4 ( VAR_3 class ) )  METHOD_4 ( VAR_3 class ) (  METHOD_2 ( VAR_4 class ) . METHOD_3 ( VAR_2 class ) )  METHOD_2 ( VAR_4 class ) . METHOD_3 ( VAR_2 class ) (  METHOD_2 ( VAR_5 class ) . METHOD_3 ( VAR_2 class ) )  METHOD_2 ( VAR_5 class ) . METHOD_3 ( VAR_2 class ) (  METHOD_2 ( VAR_6 class ) . to ( VAR_7 class ) . METHOD_3 ( VAR_2 class ) )  METHOD_2 ( VAR_6 class ) . to ( VAR_7 class ) . METHOD_3 ( VAR_2 class ) (  METHOD_2 ( VAR_8 class ) . METHOD_3 ( VAR_2 class ) )  METHOD_2 ( VAR_8 class ) . METHOD_3 ( VAR_2 class ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( 1 , INT_1 , INT_2 , 2 , 1 ) ) INIT = METHOD_2 ( 1 , INT_1 , INT_2 , 2 , 1 ) ) VAR VAR (  TYPE_2 . assertEquals ( 1 , VAR_1 . size ( ) ) )  TYPE_2 . assertEquals ( 1 , VAR_1 . size ( ) ) (  TYPE_2 . METHOD_3 ( VAR_1 . METHOD_4 ( VAR_2 . METHOD_5 ( nic , null ) ) ) )  TYPE_2 . METHOD_3 ( VAR_1 . METHOD_4 ( VAR_2 . METHOD_5 ( nic , null ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = null ) INIT = null ) VAR VAR ( IF IF ( COND ( getModel ( ) . METHOD_2 ( ) ) && ( ! ( getModel ( ) . METHOD_3 ( true ) ) ) ) COND ( getModel ( ) . METHOD_2 ( ) ) && ( ! ( getModel ( ) . METHOD_3 ( true ) ) ) ( THEN THEN (  VAR_1 = TYPE_2 . METHOD_4 ( VAR_2 . METHOD_5 ( ) ) )  VAR_1 = TYPE_2 . METHOD_4 ( VAR_2 . METHOD_5 ( ) ) ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  VAR_1 . METHOD_3 ( new java.util.ArrayList ( TYPE_2 . METHOD_4 ( TYPE_3 . getParameters ( ) . METHOD_5 ( ) ) ) ) )  VAR_1 . METHOD_3 ( new java.util.ArrayList ( TYPE_2 . METHOD_4 ( TYPE_3 . getParameters ( ) . METHOD_5 ( ) ) ) ) ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_6 ( VAR_1 ) ) INIT = METHOD_6 ( VAR_1 ) ) VAR VAR (  return validate ( VAR_2 . METHOD_7 ( ) ) ; )  return validate ( VAR_2 . METHOD_7 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  VAR_3 . METHOD_2 ( VAR_1 ) )  VAR_3 . METHOD_2 ( VAR_1 ) (  VAR_3 . METHOD_3 ( VAR_2 ) )  VAR_3 . METHOD_3 ( VAR_2 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME command ) NAME command ( INIT = new TYPE_1 ( VAR_3 ) ) INIT = new TYPE_1 ( VAR_3 ) ) VAR VAR (  command . METHOD_4 ( org.mockito.Mockito . METHOD_5 ( VAR_4 . AuditLogDirector class ) ) )  command . METHOD_4 ( org.mockito.Mockito . METHOD_5 ( VAR_4 . AuditLogDirector class ) ) (  return org.mockito.Mockito . METHOD_6 ( command ) ; )  return org.mockito.Mockito . METHOD_6 ( command ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME resource ) NAME resource ( INIT = new TYPE_1 ( VAR_1 [ 0 ] . toString ( ) , VAR_2 ) ) INIT = new TYPE_1 ( VAR_1 [ 0 ] . toString ( ) , VAR_2 ) ) VAR VAR (  VAR_2 . METHOD_2 ( METHOD_3 ( null ) ) )  VAR_2 . METHOD_2 ( METHOD_3 ( null ) ) (  METHOD_4 ( STRING_1 , null ) )  METHOD_4 ( STRING_1 , null ) (  METHOD_5 ( resource . get ( ) , 0 ) )  METHOD_5 ( resource . get ( ) , 0 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 . isEmpty ( ) ) COND VAR_1 . isEmpty ( ) ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  return ( VAR_1 . size ( ) ) >= 2 ? VAR_1 . get ( 1 ) : VAR_1 . get ( 0 ) ; )  return ( VAR_1 . size ( ) ) >= 2 ? VAR_1 . get ( 1 ) : VAR_1 . get ( 0 ) ; ) THEN THEN ) IF IF (  return VAR_1 . get ( 0 ) ; )  return VAR_1 . get ( 0 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.Object> ) TYPE java.util.Map<java.lang.String,java.lang.Object> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.String> ) TYPE java.util.Map<java.lang.String,java.lang.String> ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) INIT = TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) VAR VAR ( IF IF ( COND ! ( VAR_3 . isEmpty ( ) ) ) COND ! ( VAR_3 . isEmpty ( ) ) ( THEN THEN (  VAR_2 . put ( VAR_4 , VAR_3 ) )  VAR_2 . put ( VAR_4 , VAR_3 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  VAR_1 . METHOD_2 ( TYPE_3 . METHOD_3 ( VAR_2 class ) . value ( ) ) )  VAR_1 . METHOD_2 ( TYPE_3 . METHOD_3 ( VAR_2 class ) . value ( ) ) (  model . METHOD_4 ( VAR_1 ) )  model . METHOD_4 ( VAR_1 ) (  model . METHOD_5 ( ) . METHOD_6 ( TYPE_4 . value ( ) ) )  model . METHOD_5 ( ) . METHOD_6 ( TYPE_4 . value ( ) ) (  model . METHOD_7 ( ) . METHOD_7 ( ) . METHOD_8 ( ) )  model . METHOD_7 ( ) . METHOD_7 ( ) . METHOD_8 ( ) (  model . METHOD_7 ( ) . METHOD_7 ( ) . add ( TYPE_5 . name ( ) ) )  model . METHOD_7 ( ) . METHOD_7 ( ) . add ( TYPE_5 . name ( ) ) (  return model ; )  return model ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME equals ) NAME equals ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( this ) == VAR_1 ) COND ( this ) == VAR_1 ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_1 == null ) || ( ( METHOD_1 ( ) ) != ( VAR_1 . METHOD_1 ( ) ) ) ) COND ( VAR_1 == null ) || ( ( METHOD_1 ( ) ) != ( VAR_1 . METHOD_1 ( ) ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME other ) NAME other ( INIT = ( ( TYPE_1 ) ( VAR_1 ) ) ) INIT = ( ( TYPE_1 ) ( VAR_1 ) ) ) VAR VAR (  return ( TYPE_2 . equals ( VAR_2 , VAR_3 ) ) && ( TYPE_2 . equals ( VAR_4 , VAR_5 ) ) ; )  return ( TYPE_2 . equals ( VAR_2 , VAR_3 ) ) && ( TYPE_2 . equals ( VAR_4 , VAR_5 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.String> ) TYPE java.util.Map<java.lang.String,java.lang.String> ( NAME VAR_4 ) NAME VAR_4 ( INIT = new java.util.HashMap < > ( ) ) INIT = new java.util.HashMap < > ( ) ) VAR VAR (  VAR_4 . put ( STRING_1 , VAR_2 ) )  VAR_4 . put ( STRING_1 , VAR_2 ) (  VAR_4 . put ( STRING_2 , VAR_3 ) )  VAR_4 . put ( STRING_2 , VAR_3 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME tempVar ) NAME tempVar ( INIT = new TYPE_2 ( TYPE_3 . METHOD_2 ( ) , VAR_1 , VAR_4 ) ) INIT = new TYPE_2 ( TYPE_3 . METHOD_2 ( ) , VAR_1 , VAR_4 ) ) VAR VAR (  TYPE_4 . getInstance ( ) . METHOD_3 ( VAR_5 , tempVar , TYPE_5 . METHOD_4 ( ) ) )  TYPE_4 . getInstance ( ) . METHOD_3 ( VAR_5 , tempVar , TYPE_5 . METHOD_4 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( TYPE_3 . METHOD_3 ( TYPE_4 . METHOD_4 ( VAR_2 ) ) ) ) . thenReturn ( VAR_3 ) )  org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( TYPE_3 . METHOD_3 ( TYPE_4 . METHOD_4 ( VAR_2 ) ) ) ) . thenReturn ( VAR_3 ) ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME vds ) NAME vds ( INIT = new org.ovirt.engine.core.common.businessentities.VDS ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.VDS ( ) ) VAR VAR (  vds . METHOD_5 ( STRING_1 ) )  vds . METHOD_5 ( STRING_1 ) (  vds . METHOD_6 ( TYPE_5 . METHOD_7 ( ) ) )  vds . METHOD_6 ( TYPE_5 . METHOD_7 ( ) ) (  VAR_3 . add ( vds ) )  VAR_3 . add ( vds ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<TYPE_2,TYPE_3> ) RETURN TYPE_1<TYPE_2,TYPE_3> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_5<TYPE_6> ) TYPE TYPE_5<TYPE_6> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_5<TYPE_2> ) TYPE TYPE_5<TYPE_2> ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE TYPE_5<TYPE_3> ) TYPE TYPE_5<TYPE_3> ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_7<TYPE_2,TYPE_3> ) TYPE TYPE_7<TYPE_2,TYPE_3> ( NAME result ) NAME result ( INIT = new TYPE_7 < TYPE_2 , TYPE_3 > ( VAR_1 , VAR_2 ) ) INIT = new TYPE_7 < TYPE_2 , TYPE_3 > ( VAR_1 , VAR_2 ) ) VAR VAR (  result . METHOD_2 ( VAR_3 ) )  result . METHOD_2 ( VAR_3 ) (  result . METHOD_3 ( VAR_4 ) )  result . METHOD_3 ( VAR_4 ) (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( null ) ) ) )  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( null ) ) ) (  METHOD_3 ( ) )  METHOD_3 ( ) (  TYPE_3 . METHOD_4 ( cmd . validate ( ) ) )  TYPE_3 . METHOD_4 ( cmd . validate ( ) ) (  TYPE_3 . METHOD_5 ( cmd . getReturnValue ( ) . METHOD_6 ( ) . METHOD_7 ( TYPE_4 . toString ( ) ) ) )  TYPE_3 . METHOD_5 ( cmd . getReturnValue ( ) . METHOD_6 ( ) . METHOD_7 ( TYPE_4 . toString ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  METHOD_3 ( false , VAR_1 ) )  METHOD_3 ( false , VAR_1 ) ( TRY TRY ( BLOCK BLOCK (  cmd . METHOD_4 ( ) )  cmd . METHOD_4 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME e ) NAME e ( BLOCK BLOCK (  TYPE_2 . assertEquals ( VAR_1 , e . METHOD_5 ( ) ) )  TYPE_2 . assertEquals ( VAR_1 , e . METHOD_5 ( ) ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  org.mockito.Mockito . METHOD_6 ( VAR_2 , org.mockito.Mockito . METHOD_7 ( ) ) . METHOD_8 ( TYPE_3 . any ( VAR_3 class ) ) )  org.mockito.Mockito . METHOD_6 ( VAR_2 , org.mockito.Mockito . METHOD_7 ( ) ) . METHOD_8 ( TYPE_3 . any ( VAR_3 class ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 < java.lang.String > METHOD_2 ( VAR_3 ) ) INIT = VAR_2 < java.lang.String > METHOD_2 ( VAR_3 ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR ( IF IF ( COND VAR_5 ) COND VAR_5 ( THEN THEN (  VAR_4 += VAR_2 < java.lang.String > METHOD_2 ( VAR_6 ) )  VAR_4 += VAR_2 < java.lang.String > METHOD_2 ( VAR_6 ) ) THEN THEN ) IF IF ( IF IF ( COND VAR_7 ) COND VAR_7 ( THEN THEN (  VAR_4 += VAR_2 < java.lang.String > METHOD_2 ( VAR_8 ) )  VAR_4 += VAR_2 < java.lang.String > METHOD_2 ( VAR_8 ) ) THEN THEN ) IF IF (  VAR_1 . METHOD_3 ( VAR_9 , VAR_4 ) )  VAR_1 . METHOD_3 ( VAR_9 , VAR_4 ) (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.network.Network ) TYPE org.ovirt.engine.core.common.businessentities.network.Network ( NAME network ) NAME network ( INIT = VAR_1 . get ( VAR_2 ) ) INIT = VAR_1 . get ( VAR_2 ) ) VAR VAR (  TYPE_1 . METHOD_2 ( network ) )  TYPE_1 . METHOD_2 ( network ) ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ( INIT = network . getName ( ) ) INIT = network . getName ( ) ) VAR VAR (  TYPE_1 . METHOD_3 ( name . equals ( VAR_3 . METHOD_4 ( VAR_2 , VAR_4 . Network ) ) ) )  TYPE_1 . METHOD_3 ( name . equals ( VAR_3 . METHOD_4 ( VAR_2 , VAR_4 . Network ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  aQuery . METHOD_2 ( true ) )  aQuery . METHOD_2 ( true ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME parameters ) NAME parameters ( INIT = new TYPE_2 ( VAR_1 , VAR_2 , VAR_3 ) ) INIT = new TYPE_2 ( VAR_1 , VAR_2 , VAR_3 ) ) VAR VAR (  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_4 , parameters , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_4 , parameters , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1<TYPE_2.DiskImage> ) TYPE TYPE_1<TYPE_2.DiskImage> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3<org.ovirt.engine.core.common.businessentities.StorageDomain> ) TYPE TYPE_3<org.ovirt.engine.core.common.businessentities.StorageDomain> ( NAME VAR_3 ) NAME VAR_3 ( INIT = null ) INIT = null ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_3<org.ovirt.engine.core.common.businessentities.StorageDomain> ) TYPE TYPE_3<org.ovirt.engine.core.common.businessentities.StorageDomain> ( NAME VAR_4 ) NAME VAR_4 ( IN METHOD_2 ( VAR_1 , VAR_2 ) ) IN METHOD_2 ( VAR_1 , VAR_2 ) ( BLOCK BLOCK (  VAR_3 = ( VAR_3 == null ) ? VAR_4 . METHOD_3 ( ) : VAR_3 . METHOD_4 ( VAR_4 . METHOD_3 ( ) ) )  VAR_3 = ( VAR_3 == null ) ? VAR_4 . METHOD_3 ( ) : VAR_3 . METHOD_4 ( VAR_4 . METHOD_3 ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  TYPE_4 . METHOD_5 ( VAR_1 , VAR_3 ) )  TYPE_4 . METHOD_5 ( VAR_1 , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  log . METHOD_2 ( STRING_1 , this . METHOD_3 ( ) . getName ( ) ) )  log . METHOD_2 ( STRING_1 , this . METHOD_3 ( ) . getName ( ) ) ( TRY TRY ( BLOCK BLOCK ( IF IF ( COND METHOD_4 ( ) ) COND METHOD_4 ( ) ( THEN THEN (  METHOD_5 ( ) )  METHOD_5 ( ) ) THEN THEN ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME e ) NAME e ( BLOCK BLOCK (  log . error ( STRING_2 , e ) )  log . error ( STRING_2 , e ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  TYPE_2 . METHOD_6 ( this ) )  TYPE_2 . METHOD_6 ( this ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) (  vm = new org.ovirt.engine.core.common.businessentities.VM ( ) )  vm = new org.ovirt.engine.core.common.businessentities.VM ( ) (  vm . METHOD_2 ( VAR_1 ) )  vm . METHOD_2 ( VAR_1 ) (  org.mockito.Mockito.when ( VAR_2 . METHOD_3 ( METHOD_4 ( ) , java.lang.Boolean . FALSE ) ) . thenReturn ( TYPE_1 . METHOD_5 ( vm ) ) )  org.mockito.Mockito.when ( VAR_2 . METHOD_3 ( METHOD_4 ( ) , java.lang.Boolean . FALSE ) ) . thenReturn ( TYPE_1 . METHOD_5 ( vm ) ) (  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( cmd ) . METHOD_6 ( ) )  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( cmd ) . METHOD_6 ( ) (  org.mockito.Mockito.doReturn ( METHOD_7 ( ) ) . when ( cmd ) . METHOD_7 ( ) )  org.mockito.Mockito.doReturn ( METHOD_7 ( ) ) . when ( cmd ) . METHOD_7 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_1 ) ( target ) ) ) INIT = ( ( TYPE_1 ) ( target ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VmTemplate> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VmTemplate> ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VmTemplate > ) ( returnValue ) ) ) INIT = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VmTemplate > ) ( returnValue ) ) ) VAR VAR (  VAR_1 . METHOD_1 ( TYPE_2 . METHOD_2 ( VAR_2 , VAR_3 . METHOD_3 ( ) . METHOD_4 ( ) ) ) )  VAR_1 . METHOD_1 ( TYPE_2 . METHOD_2 ( VAR_2 , VAR_3 . METHOD_3 ( ) . METHOD_4 ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.ArrayList<TYPE_1> ) RETURN java.util.ArrayList<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2.VdcActionType ) TYPE TYPE_2.VdcActionType ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.ArrayList<TYPE_2.VdcActionParametersBase> ) TYPE java.util.ArrayList<TYPE_2.VdcActionParametersBase> ( NAME parameters ) NAME parameters ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME returnValue ) NAME returnValue ( INIT = METHOD_2 ( VAR_1 ) ) INIT = METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND returnValue != null ) COND returnValue != null ( THEN THEN ( VAR VAR ( TYPE java.util.ArrayList<TYPE_1> ) TYPE java.util.ArrayList<TYPE_1> ( NAME list ) NAME list ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR (  list . add ( returnValue ) )  list . add ( returnValue ) (  return list ; )  return list ; ) THEN THEN ( ELSE ELSE (  return METHOD_3 ( VAR_1 , parameters , false , VAR_2 , VAR_3 , null ) ; )  return METHOD_3 ( VAR_1 , parameters , false , VAR_2 , VAR_3 , null ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<TYPE_2.VdcActionType,TYPE_2.VdcActionParametersBase> ) TYPE TYPE_1<TYPE_2.VdcActionType,TYPE_2.VdcActionParametersBase> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 < TYPE_2 . VdcActionType , TYPE_2 . VdcActionParametersBase > ( VAR_2 , new TYPE_2 . VdcActionParametersBase ( ) , null ) ) INIT = new TYPE_1 < TYPE_2 . VdcActionType , TYPE_2 . VdcActionParametersBase > ( VAR_2 , new TYPE_2 . VdcActionParametersBase ( ) , null ) ) VAR VAR (  VAR_3 . METHOD_2 ( VAR_1 ) )  VAR_3 . METHOD_2 ( VAR_1 ) (  org.mockito.Mockito . METHOD_3 ( VAR_4 ) . METHOD_4 ( VAR_3 ) )  org.mockito.Mockito . METHOD_3 ( VAR_4 ) . METHOD_4 ( VAR_3 ) (  org.mockito.Mockito . METHOD_3 ( VAR_5 ) . METHOD_5 ( TYPE_3 . any ( VAR_6 class ) ) )  org.mockito.Mockito . METHOD_3 ( VAR_5 ) . METHOD_5 ( TYPE_3 . any ( VAR_6 class ) ) (  TYPE_4 . assertEquals ( STRING_1 , VAR_1 , VAR_3 . METHOD_6 ( ) ) )  TYPE_4 . assertEquals ( STRING_1 , VAR_1 , VAR_3 . METHOD_6 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME rs ) NAME rs ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME entity ) NAME entity ( INIT = VAR_2 . METHOD_1 ( rs , VAR_1 ) ) INIT = VAR_2 . METHOD_1 ( rs , VAR_1 ) ) VAR VAR (  entity . METHOD_2 ( TYPE_4 . METHOD_3 ( ( ( java.lang.Integer [ ] ) ( rs . METHOD_4 ( STRING_1 ) . METHOD_4 ( ) ) ) ) ) )  entity . METHOD_2 ( TYPE_4 . METHOD_3 ( ( ( java.lang.Integer [ ] ) ( rs . METHOD_4 ( STRING_1 ) . METHOD_4 ( ) ) ) ) ) (  return entity ; )  return entity ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME add ) NAME add ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.String> ) TYPE java.util.Map<java.lang.String,java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_2 . METHOD_1 ( name ) )  TYPE_2 . METHOD_1 ( name ) ( IF IF ( COND ( VAR_1 == null ) || ( VAR_1 . isEmpty ( ) ) ) COND ( VAR_1 == null ) || ( VAR_1 . isEmpty ( ) ) ( THEN THEN (  return this ; )  return this ; ) THEN THEN ) IF IF (  this . VAR_1 . put ( name , VAR_1 ) )  this . VAR_1 . put ( name , VAR_1 ) (  return this ; )  return this ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME response ) NAME response ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  TYPE_5 . METHOD_2 ( response , TYPE_6 . METHOD_3 ( METHOD_4 ( VAR_1 ) ) ) )  TYPE_5 . METHOD_2 ( response , TYPE_6 . METHOD_3 ( METHOD_4 ( VAR_1 ) ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME VAR_2 ) NAME VAR_2 ( BLOCK BLOCK (  TYPE_5 . METHOD_5 ( response , VAR_3 , VAR_2 ) )  TYPE_5 . METHOD_5 ( response , VAR_3 , VAR_2 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN java.util.Map<java.lang.String,java.lang.String> ) RETURN java.util.Map<java.lang.String,java.lang.String> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ) TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ( NAME cluster ) NAME cluster ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.String> ) TYPE java.util.Map<java.lang.String,java.lang.String> ( NAME parameters ) NAME parameters ( INIT = new java.util.HashMap < > ( ) ) INIT = new java.util.HashMap < > ( ) ) VAR VAR ( IF IF ( COND ( cluster . METHOD_2 ( ) ) != null ) COND ( cluster . METHOD_2 ( ) ) != null ( THEN THEN (  parameters . METHOD_3 ( cluster . METHOD_2 ( ) ) )  parameters . METHOD_3 ( cluster . METHOD_2 ( ) ) ) THEN THEN ) IF IF (  return parameters ; )  return parameters ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN java.util.ArrayList<TYPE_1> ) RETURN java.util.ArrayList<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.ArrayList<TYPE_1> ) TYPE java.util.ArrayList<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<TYPE_1> ) TYPE java.util.ArrayList<TYPE_1> ( NAME VAR_3 ) NAME VAR_3 ( INIT = new java.util.ArrayList < TYPE_1 > ( ) ) INIT = new java.util.ArrayList < TYPE_1 > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME storage ) NAME storage ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( IF IF ( COND storage . METHOD_2 ( ) . equals ( VAR_2 ) ) COND storage . METHOD_2 ( ) . equals ( VAR_2 ) ( THEN THEN (  VAR_3 . add ( storage ) )  VAR_3 . add ( storage ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( VAR_1 , new TYPE_1 . DiskImage ( ) ) )  METHOD_2 ( VAR_1 , new TYPE_1 . DiskImage ( ) ) (  TYPE_2 . METHOD_3 ( command . validate ( ) ) )  TYPE_2 . METHOD_3 ( command . validate ( ) ) (  TYPE_2 . METHOD_4 ( command . getReturnValue ( ) . METHOD_5 ( ) . METHOD_6 ( TYPE_3 . toString ( ) ) ) )  TYPE_2 . METHOD_4 ( command . getReturnValue ( ) . METHOD_5 ( ) . METHOD_6 ( TYPE_3 . toString ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) . METHOD_3 ( getParameters ( ) . METHOD_4 ( ) ) )  METHOD_2 ( ) . METHOD_3 ( getParameters ( ) . METHOD_4 ( ) ) (  METHOD_5 ( ) . METHOD_6 ( METHOD_7 ( ) . getStoragePoolId ( ) , getParameters ( ) . METHOD_4 ( ) ) )  METHOD_5 ( ) . METHOD_6 ( METHOD_7 ( ) . getStoragePoolId ( ) , getParameters ( ) . METHOD_4 ( ) ) (  getReturnValue ( ) . METHOD_8 ( true ) )  getReturnValue ( ) . METHOD_8 ( true ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ) RETURN org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ( NAME map ) NAME map ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME entity ) NAME entity ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ( NAME template ) NAME template ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ( NAME iface ) NAME iface ( INIT = super . map ( entity , template ) ) INIT = super . map ( entity , template ) ) VAR VAR ( IF IF ( COND entity . METHOD_1 ( ) ) COND entity . METHOD_1 ( ) ( THEN THEN ( VAR VAR ( TYPE TYPE_2.Network ) TYPE TYPE_2.Network ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( entity . METHOD_3 ( ) ) ) INIT = METHOD_2 ( entity . METHOD_3 ( ) ) ) VAR VAR (  iface . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) )  iface . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ) THEN THEN ) IF IF (  return iface ; )  return iface ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = dao . get ( VAR_2 ) ) INIT = dao . get ( VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.String> ) TYPE java.util.Map<java.lang.String,java.lang.String> ( NAME map ) NAME map ( INIT = new TYPE_2 < > ( ) ) INIT = new TYPE_2 < > ( ) ) VAR VAR (  map . put ( STRING_1 , STRING_2 ) )  map . put ( STRING_1 , STRING_2 ) (  VAR_1 . METHOD_2 ( map ) )  VAR_1 . METHOD_2 ( map ) (  VAR_1 . METHOD_3 ( STRING_3 ) )  VAR_1 . METHOD_3 ( STRING_3 ) (  dao . METHOD_4 ( VAR_1 ) )  dao . METHOD_4 ( VAR_1 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ( INIT = dao . get ( VAR_1 . getId ( ) ) ) INIT = dao . get ( VAR_1 . getId ( ) ) ) VAR VAR (  TYPE_3 . METHOD_5 ( result . equals ( VAR_1 ) ) )  TYPE_3 . METHOD_5 ( result . equals ( VAR_1 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME status ) NAME status ) VAR VAR ( VAR VAR ( TYPE TYPE_2.VdcBllMessages ) TYPE TYPE_2.VdcBllMessages ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME returnValue ) NAME returnValue ( INIT = false ) INIT = false ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_4 . METHOD_2 ( ) ) INIT = TYPE_4 . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN (  returnValue = ( VAR_2 . METHOD_3 ( ) ) != status )  returnValue = ( VAR_2 . METHOD_3 ( ) ) != status ( IF IF ( COND ( ! returnValue ) && ( ! ( TYPE_4 . getReturnValue ( ) . METHOD_4 ( ) . METHOD_5 ( VAR_1 . name ( ) ) ) ) ) COND ( ! returnValue ) && ( ! ( TYPE_4 . getReturnValue ( ) . METHOD_4 ( ) . METHOD_5 ( VAR_1 . name ( ) ) ) ) ( THEN THEN (  addCanDoActionMessage ( VAR_1 ) )  addCanDoActionMessage ( VAR_1 ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return returnValue ; )  return returnValue ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = dao . METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( VAR_2 ) ) ) INIT = dao . METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( VAR_2 ) ) ) VAR VAR (  TYPE_2 . METHOD_4 ( VAR_1 ) )  TYPE_2 . METHOD_4 ( VAR_1 ) (  TYPE_2 . assertEquals ( 1 , VAR_1 . size ( ) ) )  TYPE_2 . assertEquals ( 1 , VAR_1 . size ( ) ) (  METHOD_5 ( VAR_1 . get ( 0 ) ) )  METHOD_5 ( VAR_1 . get ( 0 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( null ) ) INIT = TYPE_2 . METHOD_2 ( null ) ) VAR VAR (  VAR_2 . add ( VAR_3 ) )  VAR_2 . add ( VAR_3 ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_4 ( VAR_5 ) ) INIT = new TYPE_4 ( VAR_5 ) ) VAR VAR (  METHOD_3 ( VAR_4 ) )  METHOD_3 ( VAR_4 ) (  VAR_6 . METHOD_4 ( VAR_1 ) )  VAR_6 . METHOD_4 ( VAR_1 ) (  VAR_7 . METHOD_5 ( ) )  VAR_7 . METHOD_5 ( ) ( TRY TRY ( BLOCK BLOCK (  TYPE_2 . METHOD_6 ( ) )  TYPE_2 . METHOD_6 ( ) (  TYPE_2 . METHOD_7 ( STRING_1 ) )  TYPE_2 . METHOD_7 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_8 ) NAME VAR_8 ( BLOCK BLOCK (  METHOD_8 ( VAR_8 , VAR_9 , VAR_4 ) )  METHOD_8 ( VAR_8 , VAR_9 , VAR_4 ) ) BLOCK BLOCK ) CATCH CATCH ( FINALLY FINALLY (  VAR_2 . METHOD_9 ( ) )  VAR_2 . METHOD_9 ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) ) == false ) COND ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) ) == false ( THEN THEN (  TYPE_1 . METHOD_3 ( ) . METHOD_4 ( false ) )  TYPE_1 . METHOD_3 ( ) . METHOD_4 ( false ) (  VAR_1 . METHOD_5 ( TYPE_1 . METHOD_6 ( ) , TYPE_1 . METHOD_3 ( ) . METHOD_7 ( ) . METHOD_8 ( ) ) )  VAR_1 . METHOD_5 ( TYPE_1 . METHOD_6 ( ) , TYPE_1 . METHOD_3 ( ) . METHOD_7 ( ) . METHOD_8 ( ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.DiskImage ) TYPE TYPE_1.DiskImage ( NAME entity ) NAME entity ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2<TYPE_3.Disk,TYPE_1.DiskImage> ) TYPE TYPE_2<TYPE_3.Disk,TYPE_1.DiskImage> ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_2 < TYPE_3 . Disk , TYPE_1 . DiskImage > ) ( ( ( TYPE_4 ) ( resource ) ) . METHOD_3 ( ) ) ) ) INIT = ( ( TYPE_2 < TYPE_3 . Disk , TYPE_1 . DiskImage > ) ( ( ( TYPE_4 ) ( resource ) ) . METHOD_3 ( ) ) ) ) VAR VAR (  METHOD_4 ( VAR_1 ) )  METHOD_4 ( VAR_1 ) (  METHOD_5 ( VAR_1 . METHOD_6 ( ) , entity ) )  METHOD_5 ( VAR_1 . METHOD_6 ( ) , entity ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME vmId ) NAME vmId ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND source != null ) COND source != null ( THEN THEN (  return ( ( ( java.util.List < java.lang.String > ) ( source ) ) . size ( ) ) > 0 ; )  return ( ( ( java.util.List < java.lang.String > ) ( source ) ) . size ( ) ) > 0 ; ) THEN THEN ) IF IF (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return ( ( ( java.util.List < java.lang.String > ) ( source ) ) . size ( ) ) > 0 ; } return false ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return ( ( ( java.util.List < java.lang.String > ) ( source ) ) . size ( ) ) > 0 ; } return false ; } } (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.VdcActionType ) TYPE TYPE_1.VdcActionType ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( org.ovirt.engine.ui.frontend.Frontend . METHOD_2 ( ) ) != null ) COND ( org.ovirt.engine.ui.frontend.Frontend . METHOD_2 ( ) ) != null ( THEN THEN ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = org.ovirt.engine.ui.frontend.Frontend . METHOD_3 ( VAR_2 ) ) INIT = org.ovirt.engine.ui.frontend.Frontend . METHOD_3 ( VAR_2 ) ) VAR VAR (  VAR_2 . METHOD_4 ( VAR_3 ) )  VAR_2 . METHOD_4 ( VAR_3 ) (  org.ovirt.engine.ui.frontend.Frontend . METHOD_2 ( ) . METHOD_1 ( VAR_1 , VAR_2 ) )  org.ovirt.engine.ui.frontend.Frontend . METHOD_2 ( ) . METHOD_1 ( VAR_1 , VAR_2 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1.VdcActionParametersBase ) RETURN TYPE_1.VdcActionParametersBase ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.VdcActionType ) TYPE TYPE_1.VdcActionType ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1.VdcActionParametersBase ) TYPE TYPE_1.VdcActionParametersBase ( NAME parameters ) NAME parameters ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 == ( VAR_2 ) ) COND VAR_1 == ( VAR_2 ) ( THEN THEN (  return parameters ; )  return parameters ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1.VdcActionParametersBase ) TYPE TYPE_1.VdcActionParametersBase ( NAME VAR_3 ) NAME VAR_3 ( INIT = parameters . METHOD_2 ( ) ) INIT = parameters . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND VAR_3 == null ) COND VAR_3 == null ( THEN THEN ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( INIT = STRING_1 + VAR_1 ) INIT = STRING_1 + VAR_1 ) VAR VAR (  log . error ( VAR_4 ) )  log . error ( VAR_4 ) (  throw new TYPE_2 ( VAR_5 , VAR_4 ) ; )  throw new TYPE_2 ( VAR_5 , VAR_4 ) ; ) THEN THEN ) IF IF (  VAR_3 . METHOD_3 ( parameters . METHOD_4 ( ) ) )  VAR_3 . METHOD_3 ( parameters . METHOD_4 ( ) ) (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StoragePool ) TYPE org.ovirt.engine.core.common.businessentities.StoragePool ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( java.lang.Boolean ) ( TYPE_1 . METHOD_2 ( VAR_3 , VAR_1 . METHOD_3 ( ) . getValue ( ) ) ) ) ) INIT = ( ( java.lang.Boolean ) ( TYPE_1 . METHOD_2 ( VAR_3 , VAR_1 . METHOD_3 ( ) . getValue ( ) ) ) ) ) VAR VAR ( IF IF ( COND METHOD_4 ( ) . METHOD_5 ( ) ) COND METHOD_4 ( ) . METHOD_5 ( ) ( THEN THEN (  METHOD_4 ( ) . METHOD_6 ( TYPE_2 . METHOD_7 ( ) ) )  METHOD_4 ( ) . METHOD_6 ( TYPE_2 . METHOD_7 ( ) ) (  METHOD_4 ( ) . setIsChangable ( ( VAR_2 && ( METHOD_8 ( ) ) ) ) )  METHOD_4 ( ) . setIsChangable ( ( VAR_2 && ( METHOD_8 ( ) ) ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( STRING_1 , VAR_2 , STRING_2 , STRING_3 , STRING_4 ) ) INIT = METHOD_2 ( STRING_1 , VAR_2 , STRING_2 , STRING_3 , STRING_4 ) ) VAR VAR (  parameters . METHOD_3 ( VAR_1 ) )  parameters . METHOD_3 ( VAR_1 ) (  parameters . METHOD_4 ( VAR_3 ) )  parameters . METHOD_4 ( VAR_3 ) (  org.mockito.Mockito.doReturn ( false ) . when ( command ) . METHOD_5 ( VAR_1 ) )  org.mockito.Mockito.doReturn ( false ) . when ( command ) . METHOD_5 ( VAR_1 ) (  TYPE_2 . METHOD_6 ( command ) )  TYPE_2 . METHOD_6 ( command ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( STRING_1 , VAR_2 , STRING_2 , STRING_3 ) ) INIT = METHOD_2 ( STRING_1 , VAR_2 , STRING_2 , STRING_3 ) ) VAR VAR (  VAR_1 . METHOD_3 ( org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) . toString ( ) ) )  VAR_1 . METHOD_3 ( org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) . toString ( ) ) (  parameters . METHOD_5 ( VAR_1 ) )  parameters . METHOD_5 ( VAR_1 ) (  parameters . METHOD_6 ( VAR_3 ) )  parameters . METHOD_6 ( VAR_3 ) (  org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_7 ( VAR_1 ) )  org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_7 ( VAR_1 ) (  TYPE_2 . METHOD_8 ( command , VAR_4 ) )  TYPE_2 . METHOD_8 ( command , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( null ) ) INIT = METHOD_2 ( null ) ) VAR VAR (  VAR_2 . add ( VAR_3 ) )  VAR_2 . add ( VAR_3 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_3 ( VAR_5 ) ) INIT = new TYPE_3 ( VAR_5 ) ) VAR VAR (  METHOD_3 ( VAR_4 ) )  METHOD_3 ( VAR_4 ) (  VAR_6 . METHOD_4 ( VAR_1 ) )  VAR_6 . METHOD_4 ( VAR_1 ) ( TRY TRY ( BLOCK BLOCK (  METHOD_5 ( ) )  METHOD_5 ( ) (  TYPE_4 . METHOD_6 ( STRING_1 ) )  TYPE_4 . METHOD_6 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_7 ) NAME VAR_7 ( BLOCK BLOCK (  METHOD_7 ( VAR_7 , VAR_8 , VAR_4 ) )  METHOD_7 ( VAR_7 , VAR_8 , VAR_4 ) ) BLOCK BLOCK ) CATCH CATCH ( FINALLY FINALLY (  VAR_2 . METHOD_8 ( ) )  VAR_2 . METHOD_8 ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.doReturn ( METHOD_2 ( 0 ) ) . when ( VAR_1 ) . METHOD_3 ( TYPE_1 . METHOD_4 ( VAR_2 ) , TYPE_1 . any ( VAR_3 class ) ) )  org.mockito.Mockito.doReturn ( METHOD_2 ( 0 ) ) . when ( VAR_1 ) . METHOD_3 ( TYPE_1 . METHOD_4 ( VAR_2 ) , TYPE_1 . any ( VAR_3 class ) ) (  VAR_1 . METHOD_5 ( ) )  VAR_1 . METHOD_5 ( ) (  org.mockito.Mockito . METHOD_6 ( VAR_4 , org.mockito.Mockito . METHOD_7 ( 0 ) ) . METHOD_8 ( TYPE_1 . any ( VAR_5 class ) ) )  org.mockito.Mockito . METHOD_6 ( VAR_4 , org.mockito.Mockito . METHOD_7 ( 0 ) ) . METHOD_8 ( TYPE_1 . any ( VAR_5 class ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME id ) NAME id ( INIT = ( ( TYPE_4 ) ( VAR_1 . METHOD_3 ( ) ) ) ) INIT = ( ( TYPE_4 ) ( VAR_1 . METHOD_3 ( ) ) ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR (  return new TYPE_1 ( VAR_2 , id , name ) ; )  return new TYPE_1 ( VAR_2 , id , name ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME sender ) NAME sender ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME args ) NAME args ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( METHOD_2 ( ) . METHOD_3 ( ) . getEntity ( ) ) != null ) && ( ( java.lang.Boolean ) ( METHOD_2 ( ) . METHOD_3 ( ) . getEntity ( ) ) ) ) COND ( ( METHOD_2 ( ) . METHOD_3 ( ) . getEntity ( ) ) != null ) && ( ( java.lang.Boolean ) ( METHOD_2 ( ) . METHOD_3 ( ) . getEntity ( ) ) ) ( THEN THEN (  METHOD_4 ( ) . setEntity ( false ) )  METHOD_4 ( ) . setEntity ( false ) (  METHOD_4 ( ) . setIsChangable ( false ) )  METHOD_4 ( ) . setIsChangable ( false ) ) THEN THEN ( ELSE ELSE (  METHOD_4 ( ) . setIsChangable ( true ) )  METHOD_4 ( ) . setIsChangable ( true ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( VAR_2 class ) ) INIT = new TYPE_1 ( VAR_2 class ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( STRING_1 ) ) ) INIT = TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( STRING_1 ) ) ) VAR VAR (  VAR_4 . METHOD_4 ( VAR_3 ) )  VAR_4 . METHOD_4 ( VAR_3 ) (  TYPE_3 . METHOD_5 ( STRING_2 , ( ( VAR_3 . METHOD_6 ( STRING_2 ) ) || ( VAR_3 . METHOD_6 ( STRING_3 ) ) ) ) )  TYPE_3 . METHOD_5 ( STRING_2 , ( ( VAR_3 . METHOD_6 ( STRING_2 ) ) || ( VAR_3 . METHOD_6 ( STRING_3 ) ) ) ) (  TYPE_3 . METHOD_5 ( STRING_4 , VAR_3 . METHOD_6 ( STRING_4 ) ) )  TYPE_3 . METHOD_5 ( STRING_4 , VAR_3 . METHOD_6 ( STRING_4 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( IF IF ( COND VAR_1 <= 0 ) COND VAR_1 <= 0 ( THEN THEN (  METHOD_3 ( VAR_2 ) )  METHOD_3 ( VAR_2 ) (  METHOD_4 ( ) )  METHOD_4 ( ) ) THEN THEN ( ELSE ELSE (  METHOD_3 ( VAR_3 ) )  METHOD_3 ( VAR_3 ) (  METHOD_5 ( METHOD_2 ( ) ) )  METHOD_5 ( METHOD_2 ( ) ) ) ELSE ELSE ) IF IF (  TYPE_1 . METHOD_6 ( true ) )  TYPE_1 . METHOD_6 ( true ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.VM ) TYPE TYPE_1.VM ( NAME vm ) NAME vm ( INIT = new TYPE_1 . VM ( ) ) INIT = new TYPE_1 . VM ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  VAR_1 . METHOD_2 ( VAR_2 ) )  VAR_1 . METHOD_2 ( VAR_2 ) (  vm . METHOD_3 ( VAR_1 ) )  vm . METHOD_3 ( VAR_1 ) ( VAR VAR ( TYPE TYPE_1.VM ) TYPE TYPE_1.VM ( NAME map ) NAME map ( INIT = TYPE_3 . map ( vm , ( ( TYPE_1 . VM ) ( null ) ) ) ) INIT = TYPE_3 . map ( vm , ( ( TYPE_1 . VM ) ( null ) ) ) ) VAR VAR (  METHOD_4 ( map . METHOD_5 ( ) ) )  METHOD_4 ( map . METHOD_5 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VmTemplate ) TYPE org.ovirt.engine.core.common.businessentities.VmTemplate ( NAME template ) NAME template ( INIT = ( ( org.ovirt.engine.core.common.businessentities.VmTemplate ) ( getModel ( ) . METHOD_2 ( ) . getSelectedItem ( ) ) ) ) INIT = ( ( org.ovirt.engine.core.common.businessentities.VmTemplate ) ( getModel ( ) . METHOD_2 ( ) . getSelectedItem ( ) ) ) ) VAR VAR ( IF IF ( COND template == null ) COND template == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  METHOD_3 ( template , template . getStoragePoolId ( ) . getValue ( ) ) )  METHOD_3 ( template , template . getStoragePoolId ( ) . getValue ( ) ) (  METHOD_4 ( template . METHOD_5 ( ) ) )  METHOD_4 ( template . METHOD_5 ( ) ) (  METHOD_6 ( template . METHOD_7 ( ) ) )  METHOD_6 ( template . METHOD_7 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN org.ovirt.engine.core.common.businessentities.VM ) RETURN org.ovirt.engine.core.common.businessentities.VM ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  METHOD_3 ( ) )  METHOD_3 ( ) (  METHOD_4 ( VAR_1 ) )  METHOD_4 ( VAR_1 ) (  METHOD_5 ( VAR_1 ) )  METHOD_5 ( VAR_1 ) (  METHOD_6 ( ) )  METHOD_6 ( ) (  METHOD_7 ( ) )  METHOD_7 ( ) (  METHOD_8 ( VAR_2 , VAR_3 ) )  METHOD_8 ( VAR_2 , VAR_3 ) ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ( INIT = TYPE_1 . METHOD_9 ( ) ) INIT = TYPE_1 . METHOD_9 ( ) ) VAR VAR (  return vm ; )  return vm ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 == ( VAR_3 ) ) COND VAR_1 == ( VAR_3 ) ( THEN THEN (  VAR_4 . METHOD_2 ( VAR_2 , 0 ) )  VAR_4 . METHOD_2 ( VAR_2 , 0 ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND VAR_1 == ( VAR_5 ) ) COND VAR_1 == ( VAR_5 ) ( THEN THEN ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN (  VAR_4 . METHOD_2 ( VAR_2 , 0 ) )  VAR_4 . METHOD_2 ( VAR_2 , 0 ) (  this . VAR_6 = VAR_2 )  this . VAR_6 = VAR_2 ) THEN THEN ( ELSE ELSE ( IF IF ( COND ( this . VAR_6 ) != null ) COND ( this . VAR_6 ) != null ( THEN THEN (  VAR_4 . METHOD_3 ( this . VAR_6 ) )  VAR_4 . METHOD_3 ( this . VAR_6 ) ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ) THEN THEN ( ELSE ELSE (  super . METHOD_1 ( VAR_1 , VAR_2 ) )  super . METHOD_1 ( VAR_1 , VAR_2 ) ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( STRING_1 ) )  VAR_1 . METHOD_2 ( STRING_1 ) (  METHOD_3 ( ) )  METHOD_3 ( ) (  METHOD_4 ( ) )  METHOD_4 ( ) ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  METHOD_5 ( ) )  METHOD_5 ( ) ) THEN THEN ) IF IF (  VAR_1 . METHOD_2 ( STRING_2 ) )  VAR_1 . METHOD_2 ( STRING_2 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME e ) NAME e ( BLOCK BLOCK ( IF IF ( COND ! ( TYPE_2 . METHOD_6 ( ) ) ) COND ! ( TYPE_2 . METHOD_6 ( ) ) ( THEN THEN (  VAR_1 . error ( java.lang.String . METHOD_7 ( STRING_3 , e . METHOD_8 ( ) ) , e ) )  VAR_1 . error ( java.lang.String . METHOD_7 ( STRING_3 , e . METHOD_8 ( ) ) , e ) ) THEN THEN ) IF IF (  METHOD_9 ( ) )  METHOD_9 ( ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList ( ( ( TYPE_2 < TYPE_1 > ) ( ( ( TYPE_3 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ) ) INIT = new java.util.ArrayList ( ( ( TYPE_2 < TYPE_1 > ) ( ( ( TYPE_3 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ) ) VAR VAR (  VAR_1 . add ( VAR_2 ) )  VAR_1 . add ( VAR_2 ) (  METHOD_1 ( ) . setItems ( VAR_1 ) )  METHOD_1 ( ) . setItems ( VAR_1 ) (  METHOD_2 ( ) )  METHOD_2 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 < java.lang.Integer > METHOD_2 ( VAR_3 ) ) INIT = VAR_2 < java.lang.Integer > METHOD_2 ( VAR_3 ) ) VAR VAR (  log . METHOD_3 ( STRING_1 , VAR_1 ) )  log . METHOD_3 ( STRING_1 , VAR_1 ) (  TYPE_1 . METHOD_4 ( ( VAR_1 * INT_1 ) ) )  TYPE_1 . METHOD_4 ( ( VAR_1 * INT_1 ) ) (  TYPE_2 . getInstance ( ) . METHOD_5 ( ) . METHOD_6 ( VAR_4 , new TYPE_3 ( TYPE_4 . METHOD_7 ( ) , VAR_5 ) ) )  TYPE_2 . getInstance ( ) . METHOD_5 ( ) . METHOD_6 ( VAR_4 , new TYPE_3 ( TYPE_4 . METHOD_7 ( ) , VAR_5 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( METHOD_2 ( ) . size ( ) ) > 0 ) || ( ( VAR_2 . size ( ) ) > 0 ) ) INIT = ( ( METHOD_2 ( ) . size ( ) ) > 0 ) || ( ( VAR_2 . size ( ) ) > 0 ) ) VAR VAR ( IF IF ( COND ! VAR_1 ) COND ! VAR_1 ( THEN THEN (  METHOD_3 ( ) . add ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_4 ( ) ) )  METHOD_3 ( ) . add ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_4 ( ) ) ) THEN THEN ) IF IF (  METHOD_5 ( VAR_1 ) )  METHOD_5 ( VAR_1 ) (  return ( super . METHOD_1 ( ) ) && ( METHOD_6 ( ) ) ; )  return ( super . METHOD_1 ( ) ) && ( METHOD_6 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  METHOD_3 ( ) )  METHOD_3 ( ) ( IF IF ( COND ( METHOD_4 ( ) ) == null ) COND ( METHOD_4 ( ) ) == null ( THEN THEN (  METHOD_5 ( ) )  METHOD_5 ( ) (  METHOD_6 ( ) )  METHOD_6 ( ) (  METHOD_7 ( ) )  METHOD_7 ( ) (  METHOD_8 ( ) )  METHOD_8 ( ) ) THEN THEN ) IF IF (  METHOD_9 ( getVm ( ) . getId ( ) ) )  METHOD_9 ( getVm ( ) . getId ( ) ) (  METHOD_10 ( true ) )  METHOD_10 ( true ) (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( VAR_1 ) )  TYPE_1 . METHOD_2 ( VAR_1 ) (  TYPE_2 . METHOD_3 ( STRING_1 , VAR_2 . METHOD_4 ( VAR_3 , VAR_4 ) ) )  TYPE_2 . METHOD_3 ( STRING_1 , VAR_2 . METHOD_4 ( VAR_3 , VAR_4 ) ) (  TYPE_2 . assertEquals ( STRING_2 , VAR_4 , VAR_2 . METHOD_5 ( VAR_3 ) ) )  TYPE_2 . assertEquals ( STRING_2 , VAR_4 , VAR_2 . METHOD_5 ( VAR_3 ) ) (  TYPE_2 . assertEquals ( STRING_3 , VAR_4 , VAR_2 . METHOD_5 ( VAR_1 , VAR_3 ) ) )  TYPE_2 . assertEquals ( STRING_3 , VAR_4 , VAR_2 . METHOD_5 ( VAR_1 , VAR_3 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2.AuditLogType ) TYPE TYPE_2.AuditLogType ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( VAR_1 . METHOD_2 ( ) ) ? TYPE_3 . METHOD_3 ( VAR_1 . METHOD_4 ( ) , INT_1 ) : VAR_2 . METHOD_5 ( ) ) INIT = ( VAR_1 . METHOD_2 ( ) ) ? TYPE_3 . METHOD_3 ( VAR_1 . METHOD_4 ( ) , INT_1 ) : VAR_2 . METHOD_5 ( ) ) VAR VAR ( IF IF ( COND VAR_3 > 0 ) COND VAR_3 > 0 ( THEN THEN (  VAR_1 . METHOD_6 ( TYPE_4 . METHOD_7 ( VAR_3 ) ) )  VAR_1 . METHOD_6 ( TYPE_4 . METHOD_7 ( VAR_3 ) ) (  VAR_1 . METHOD_8 ( TYPE_5 . METHOD_9 ( VAR_1 , VAR_2 ) ) )  VAR_1 . METHOD_8 ( TYPE_5 . METHOD_9 ( VAR_1 , VAR_2 ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( java.util.List < TYPE_1 > ) ( returnValue ) ) ) INIT = ( ( java.util.List < TYPE_1 > ) ( returnValue ) ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  VAR_3 . METHOD_2 ( VAR_2 . getId ( ) . toString ( ) ) )  VAR_3 . METHOD_2 ( VAR_2 . getId ( ) . toString ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ( IF IF ( COND VAR_3 == null ) COND VAR_3 == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  METHOD_3 ( VAR_3 ) )  METHOD_3 ( VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ( INIT = true ) INIT = true ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( IN ( ( TYPE_2 < TYPE_1 > ) ( METHOD_2 ( ) ) ) ) IN ( ( TYPE_2 < TYPE_1 > ) ( METHOD_2 ( ) ) ) ( BLOCK BLOCK ( IF IF ( COND ! ( METHOD_3 ( VAR_2 ) ) ) COND ! ( METHOD_3 ( VAR_2 ) ) ( THEN THEN (  VAR_1 = false )  VAR_1 = false ) THEN THEN ( ELSE ELSE (  VAR_2 . METHOD_4 ( null ) )  VAR_2 . METHOD_4 ( null ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ( IF IF ( COND ! VAR_1 ) COND ! VAR_1 ( THEN THEN (  METHOD_5 ( new TYPE_3 ( STRING_1 ) ) )  METHOD_5 ( new TYPE_3 ( STRING_1 ) ) ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.ui.uicommonweb.models.EntityModel<TYPE_1>> ) TYPE java.util.List<org.ovirt.engine.ui.uicommonweb.models.EntityModel<TYPE_1>> ( NAME VAR_3 ) NAME VAR_3 ( INIT = new java.util.ArrayList < org.ovirt.engine.ui.uicommonweb.models.EntityModel < TYPE_1 > > ( ) ) INIT = new java.util.ArrayList < org.ovirt.engine.ui.uicommonweb.models.EntityModel < TYPE_1 > > ( ) ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < ( VAR_1 . size ( ) ) ) COND i < ( VAR_1 . size ( ) ) ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.ui.uicommonweb.models.EntityModel<TYPE_1> ) TYPE org.ovirt.engine.ui.uicommonweb.models.EntityModel<TYPE_1> ( NAME VAR_4 ) NAME VAR_4 ( INIT = new org.ovirt.engine.ui.uicommonweb.models.EntityModel < TYPE_1 > ( VAR_1 . get ( i ) ) ) INIT = new org.ovirt.engine.ui.uicommonweb.models.EntityModel < TYPE_1 > ( VAR_1 . get ( i ) ) ) VAR VAR (  VAR_3 . add ( VAR_4 ) )  VAR_3 . add ( VAR_4 ) ) BLOCK BLOCK ) FOR FOR (  VAR_2 . setItems ( VAR_3 ) )  VAR_2 . setItems ( VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN java.util.List<TYPE_1.VdcActionParametersBase> ) RETURN java.util.List<TYPE_1.VdcActionParametersBase> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1.VdcActionParametersBase> ) TYPE java.util.List<TYPE_1.VdcActionParametersBase> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . getParameters ( ) . METHOD_2 ( ) ) INIT = TYPE_2 . getParameters ( ) . METHOD_2 ( ) ) VAR VAR ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_4 ) NAME METHOD_4 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.VdcActionParametersBase ) TYPE TYPE_1.VdcActionParametersBase ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_1.VdcActionParametersBase ) TYPE TYPE_1.VdcActionParametersBase ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return ( ( TYPE_5 ) ( VAR_2 ) ) . METHOD_5 ( ) . METHOD_6 ( ( ( TYPE_5 ) ( VAR_3 ) ) . METHOD_5 ( ) ) ; )  return ( ( TYPE_5 ) ( VAR_2 ) ) . METHOD_5 ( ) . METHOD_6 ( ( ( TYPE_5 ) ( VAR_3 ) ) . METHOD_5 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD (  TYPE_3 . METHOD_3 ( VAR_1 , new TYPE_4 < TYPE_1 . VdcActionParametersBase > ( ) { public int METHOD_4 ( TYPE_1 . VdcActionParametersBase VAR_2 , TYPE_1 . VdcActionParametersBase VAR_3 ) { return ( ( TYPE_5 ) ( VAR_2 ) ) . METHOD_5 ( ) . METHOD_6 ( ( ( TYPE_5 ) ( VAR_3 ) ) . METHOD_5 ( ) ) ; } } ) )  TYPE_3 . METHOD_3 ( VAR_1 , new TYPE_4 < TYPE_1 . VdcActionParametersBase > ( ) { public int METHOD_4 ( TYPE_1 . VdcActionParametersBase VAR_2 , TYPE_1 . VdcActionParametersBase VAR_3 ) { return ( ( TYPE_5 ) ( VAR_2 ) ) . METHOD_5 ( ) . METHOD_6 ( ( ( TYPE_5 ) ( VAR_3 ) ) . METHOD_5 ( ) ) ; } } ) (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ( INIT = ( ( TYPE_1 ) ( target ) ) ) INIT = ( ( TYPE_1 ) ( target ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDSGroup> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDSGroup> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_1 ( ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( returnValue ) ) ) ) INIT = TYPE_2 . METHOD_1 ( ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( returnValue ) ) ) ) VAR VAR (  model . METHOD_2 ( ) . setItems ( VAR_1 ) )  model . METHOD_2 ( ) . setItems ( VAR_1 ) (  model . METHOD_2 ( ) . METHOD_3 ( VAR_1 . isEmpty ( ) ) )  model . METHOD_2 ( ) . METHOD_3 ( VAR_1 . isEmpty ( ) ) (  model . METHOD_4 ( ) )  model . METHOD_4 ( ) (  METHOD_5 ( ) )  METHOD_5 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.VdcQueryReturnValue ) TYPE TYPE_1.VdcQueryReturnValue ( NAME returnValue ) NAME returnValue ) VAR VAR ( VAR VAR ( TYPE TYPE_2<TYPE_3> ) TYPE TYPE_2<TYPE_3> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME item ) NAME item ( IN ( ( java.util.List < TYPE_4 > ) ( returnValue . getReturnValue ( ) ) ) ) IN ( ( java.util.List < TYPE_4 > ) ( returnValue . getReturnValue ( ) ) ) ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME a ) NAME a ( INIT = ( ( TYPE_5 ) ( item ) ) ) INIT = ( ( TYPE_5 ) ( item ) ) ) VAR VAR ( IF IF ( COND ! ( VAR_1 . METHOD_2 ( a . getId ( ) ) ) ) COND ! ( VAR_1 . METHOD_2 ( a . getId ( ) ) ) ( THEN THEN ( VAR VAR ( TYPE org.ovirt.engine.ui.uicommonweb.models.EntityModel ) TYPE org.ovirt.engine.ui.uicommonweb.models.EntityModel ( NAME VAR_2 ) NAME VAR_2 ( INIT = new org.ovirt.engine.ui.uicommonweb.models.EntityModel ( ) ) INIT = new org.ovirt.engine.ui.uicommonweb.models.EntityModel ( ) ) VAR VAR (  VAR_2 . setEntity ( new TYPE_6 ( a ) ) )  VAR_2 . setEntity ( new TYPE_6 ( a ) ) (  METHOD_3 ( ) . add ( VAR_2 ) )  METHOD_3 ( ) . add ( VAR_2 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_2 ( disk ) )  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_2 ( disk ) (  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( VAR_1 ) . METHOD_3 ( ) )  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( VAR_1 ) . METHOD_3 ( ) (  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( VAR_1 ) . METHOD_4 ( vmId ) )  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( VAR_1 ) . METHOD_4 ( vmId ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME vds ) NAME vds ( INIT = new org.ovirt.engine.core.common.businessentities.VDS ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.VDS ( ) ) VAR VAR (  vds . setId ( VAR_1 ) )  vds . setId ( VAR_1 ) (  vds . METHOD_2 ( INT_1 ) )  vds . METHOD_2 ( INT_1 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME host ) NAME host ( INIT = TYPE_2 . map ( vds , ( ( TYPE_1 ) ( null ) ) ) ) INIT = TYPE_2 . map ( vds , ( ( TYPE_1 ) ( null ) ) ) ) VAR VAR (  METHOD_3 ( host . METHOD_4 ( ) ) )  METHOD_3 ( host . METHOD_4 ( ) ) (  assertEquals ( host . METHOD_4 ( ) , TYPE_3 . valueOf ( INT_2 ) ) )  assertEquals ( host . METHOD_4 ( ) , TYPE_3 . valueOf ( INT_2 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME setEntity ) NAME setEntity ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME value ) NAME value ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  cluster = null )  cluster = null (  super . setEntity ( value ) )  super . setEntity ( value ) ( IF IF ( COND ( getEntity ( ) ) != null ) COND ( getEntity ( ) ) != null ( THEN THEN ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  cluster = ( ( org.ovirt.engine.core.common.businessentities.VDSGroup ) ( returnValue ) ) )  cluster = ( ( org.ovirt.engine.core.common.businessentities.VDSGroup ) ( returnValue ) ) (  METHOD_2 ( ) )  METHOD_2 ( ) ) BLOCK BLOCK ) METHOD METHOD (  TYPE_1 . getInstance ( ) . METHOD_1 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object VAR_1 , java.lang.Object returnValue ) { cluster = ( ( org.ovirt.engine.core.common.businessentities.VDSGroup ) ( returnValue ) ) ; METHOD_2 ( ) ; } } ) , ( ( org.ovirt.engine.core.common.businessentities.VmTemplate ) ( getEntity ( ) ) ) . METHOD_3 ( ) ) )  TYPE_1 . getInstance ( ) . METHOD_1 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object VAR_1 , java.lang.Object returnValue ) { cluster = ( ( org.ovirt.engine.core.common.businessentities.VDSGroup ) ( returnValue ) ) ; METHOD_2 ( ) ; } } ) , ( ( org.ovirt.engine.core.common.businessentities.VmTemplate ) ( getEntity ( ) ) ) . METHOD_3 ( ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_3 . METHOD_2 ( VAR_3 class ) ) INIT = TYPE_3 . METHOD_2 ( VAR_3 class ) ) VAR VAR ( IF IF ( COND VAR_2 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ) COND VAR_2 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ( THEN THEN (  METHOD_5 ( ) . METHOD_6 ( VAR_2 . get ( VAR_1 . METHOD_4 ( ) ) ) )  METHOD_5 ( ) . METHOD_6 ( VAR_2 . get ( VAR_1 . METHOD_4 ( ) ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Version ) TYPE org.ovirt.engine.core.compat.Version ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_2 ) ) INIT = VAR_4 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_2 ) ) VAR VAR (  TYPE_2 . METHOD_4 ( new TYPE_3 ( org.ovirt.engine.core.compat.Guid . METHOD_5 ( ) , VAR_1 . getId ( ) ) , VAR_5 , TYPE_4 . METHOD_6 ( VAR_3 ) , new java.util.HashMap < java.lang.String , java.lang.Object > ( ) , true , true , null ) )  TYPE_2 . METHOD_4 ( new TYPE_3 ( org.ovirt.engine.core.compat.Guid . METHOD_5 ( ) , VAR_1 . getId ( ) ) , VAR_5 , TYPE_4 . METHOD_6 ( VAR_3 ) , new java.util.HashMap < java.lang.String , java.lang.Object > ( ) , true , true , null ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  METHOD_3 ( METHOD_4 ( VAR_4 , VAR_5 class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_6 [ 0 ] } , VAR_1 , VAR_2 ) ) )  METHOD_3 ( METHOD_4 ( VAR_4 , VAR_5 class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_6 [ 0 ] } , VAR_1 , VAR_2 ) ) ( TRY TRY ( BLOCK BLOCK (  VAR_7 . METHOD_5 ( VAR_6 [ 0 ] . toString ( ) ) )  VAR_7 . METHOD_5 ( VAR_6 [ 0 ] . toString ( ) ) (  METHOD_6 ( STRING_2 ) )  METHOD_6 ( STRING_2 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_8 ) NAME VAR_8 ( BLOCK BLOCK (  METHOD_7 ( VAR_8 , VAR_3 ) )  METHOD_7 ( VAR_8 , VAR_3 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_1 ) ( resource ) ) ) INIT = ( ( TYPE_1 ) ( resource ) ) ) VAR VAR (  METHOD_2 ( INT_1 ) )  METHOD_2 ( INT_1 ) (  METHOD_3 ( INT_1 ) )  METHOD_3 ( INT_1 ) (  METHOD_4 ( INT_1 ) )  METHOD_4 ( INT_1 ) (  METHOD_5 ( INT_2 ) )  METHOD_5 ( INT_2 ) (  METHOD_6 ( ) )  METHOD_6 ( ) (  METHOD_7 ( METHOD_8 ( VAR_2 , VAR_3 class , new java.lang.String [ ] { STRING_1 , STRING_2 } , new java.lang.Object [ ] { VAR_4 , VAR_5 [ 1 ] } ) ) )  METHOD_7 ( METHOD_8 ( VAR_2 , VAR_3 class , new java.lang.String [ ] { STRING_1 , STRING_2 } , new java.lang.Object [ ] { VAR_4 , VAR_5 [ 1 ] } ) ) (  METHOD_9 ( VAR_1 . METHOD_10 ( new TYPE_2 ( ) ) ) )  METHOD_9 ( VAR_1 . METHOD_10 ( new TYPE_2 ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.util.ArrayList<org.ovirt.engine.core.compat.Guid> ) RETURN java.util.ArrayList<org.ovirt.engine.core.compat.Guid> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.compat.Guid> ) TYPE java.util.ArrayList<org.ovirt.engine.core.compat.Guid> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR ( IF IF ( COND ( VAR_1 != null ) && ( ! ( VAR_1 . isEmpty ( ) ) ) ) COND ( VAR_1 != null ) && ( ! ( VAR_1 . isEmpty ( ) ) ) ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  VAR_2 . add ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( VAR_3 ) ) )  VAR_2 . add ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( VAR_3 ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<TYPE_2<TYPE_3>,TYPE_4> ) TYPE TYPE_1<TYPE_2<TYPE_3>,TYPE_4> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 < TYPE_2 < TYPE_3 > , TYPE_4 > ( ) { public TYPE_4 getModel ( ) { return METHOD_2 ( ) ; } public void METHOD_3 ( ) { } public void METHOD_4 ( ) { } } ) INIT = new TYPE_1 < TYPE_2 < TYPE_3 > , TYPE_4 > ( ) { public TYPE_4 getModel ( ) { return METHOD_2 ( ) ; } public void METHOD_3 ( ) { } public void METHOD_4 ( ) { } } ) VAR VAR ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_4 ) RETURN TYPE_4 ( NAME getModel ) NAME getModel ( BLOCK BLOCK (  return METHOD_2 ( ) ; )  return METHOD_2 ( ) ; ) BLOCK BLOCK ) METHOD METHOD ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_3 ) NAME METHOD_3 ( BLOCK BLOCK ) BLOCK BLOCK ) METHOD METHOD ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_4 ) NAME METHOD_4 ( BLOCK BLOCK ) BLOCK BLOCK ) METHOD METHOD (  VAR_2 = new TYPE_5 ( VAR_1 , constants ) )  VAR_2 = new TYPE_5 ( VAR_1 , constants ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( IF IF ( COND ! ( this . VAR_1 . METHOD_2 ( VAR_2 . METHOD_3 ( ) , VAR_2 . METHOD_4 ( ) ) ) ) COND ! ( this . VAR_1 . METHOD_2 ( VAR_2 . METHOD_3 ( ) , VAR_2 . METHOD_4 ( ) ) ) ( THEN THEN (  METHOD_5 ( ) )  METHOD_5 ( ) (  throw new TYPE_1 ( STRING_1 ) ; )  throw new TYPE_1 ( STRING_1 ) ; ) THEN THEN ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME e ) NAME e ( BLOCK BLOCK (  METHOD_6 ( STRING_2 ) )  METHOD_6 ( STRING_2 ) (  throw new TYPE_3 ( STRING_3 ) ; )  throw new TYPE_3 ( STRING_3 ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( IF IF ( COND TYPE_2 . METHOD_2 ( VAR_3 ) ) COND TYPE_2 . METHOD_2 ( VAR_3 ) ( THEN THEN ( IF IF ( COND VAR_3 . METHOD_3 ( ) ) COND VAR_3 . METHOD_3 ( ) ( THEN THEN (  VAR_3 . METHOD_4 ( ( ++ VAR_2 ) ) )  VAR_3 . METHOD_4 ( ( ++ VAR_2 ) ) ) THEN THEN ) IF IF (  break ; )  break ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( false ) )  METHOD_2 ( false ) (  cmd . METHOD_3 ( ) )  cmd . METHOD_3 ( ) (  TYPE_1 . METHOD_4 ( STRING_1 , cmd , VAR_1 ) )  TYPE_1 . METHOD_4 ( STRING_1 , cmd , VAR_1 ) (  org.mockito.Mockito . METHOD_5 ( VAR_2 , org.mockito.Mockito . METHOD_6 ( 1 ) ) . METHOD_7 ( TYPE_2 . METHOD_8 ( VAR_3 ) , TYPE_2 . any ( VAR_4 class ) ) )  org.mockito.Mockito . METHOD_5 ( VAR_2 , org.mockito.Mockito . METHOD_6 ( 1 ) ) . METHOD_7 ( TYPE_2 . METHOD_8 ( VAR_3 ) , TYPE_2 . any ( VAR_4 class ) ) (  org.mockito.Mockito . METHOD_5 ( cmd , org.mockito.Mockito . METHOD_6 ( 0 ) ) . METHOD_9 ( ) )  org.mockito.Mockito . METHOD_5 ( cmd , org.mockito.Mockito . METHOD_6 ( 0 ) ) . METHOD_9 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( STRING_1 , null ) ) INIT = METHOD_2 ( STRING_1 , null ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( STRING_2 , null ) ) INIT = METHOD_2 ( STRING_2 , null ) ) VAR VAR (  VAR_2 . METHOD_3 ( STRING_3 ) )  VAR_2 . METHOD_3 ( STRING_3 ) (  cmd = org.mockito.Mockito . METHOD_4 ( new TYPE_2 ( new TYPE_3 ( VAR_3 , STRING_4 , STRING_5 , VAR_4 , null , null , TYPE_4 . METHOD_5 ( VAR_1 , VAR_2 ) ) ) ) )  cmd = org.mockito.Mockito . METHOD_4 ( new TYPE_2 ( new TYPE_3 ( VAR_3 , STRING_4 , STRING_5 , VAR_4 , null , null , TYPE_4 . METHOD_5 ( VAR_1 , VAR_2 ) ) ) ) (  METHOD_6 ( cmd , VAR_5 ) )  METHOD_6 ( cmd , VAR_5 ) (  TYPE_5 . METHOD_7 ( cmd . validate ( ) ) )  TYPE_5 . METHOD_7 ( cmd . validate ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME vmId ) NAME vmId ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME value ) NAME value ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return TYPE_3 . METHOD_1 ( vmId , VAR_1 . METHOD_2 ( ) , VAR_1 . type ( ) , VAR_1 . METHOD_3 ( ) , VAR_2 , value , VAR_3 ) ; )  return TYPE_3 . METHOD_1 ( vmId , VAR_1 . METHOD_2 ( ) , VAR_1 . type ( ) , VAR_1 . METHOD_3 ( ) , VAR_2 , value , VAR_3 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_1 ) ( target ) ) ) INIT = ( ( TYPE_1 ) ( target ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( returnValue ) ) ) INIT = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( returnValue ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> ( NAME VAR_3 ) NAME VAR_3 ( INIT = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ) INIT = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ) TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME a ) NAME a ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK ( IF IF ( COND ( a . METHOD_2 ( ) ) == ( VAR_4 ) ) COND ( a . METHOD_2 ( ) ) == ( VAR_4 ) ( THEN THEN (  VAR_3 . add ( a ) )  VAR_3 . add ( a ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  VAR_1 . METHOD_3 ( VAR_3 ) )  VAR_1 . METHOD_3 ( VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ( INIT = new org.ovirt.engine.core.common.businessentities.VM ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.VM ( ) ) VAR VAR (  vm . METHOD_2 ( VAR_1 ) )  vm . METHOD_2 ( VAR_1 ) (  vm . METHOD_3 ( VAR_2 ) )  vm . METHOD_3 ( VAR_2 ) (  org.mockito.Mockito.when ( VAR_4 . get ( TYPE_3 . any ( VAR_5 . Guid class ) ) ) . thenReturn ( vm ) )  org.mockito.Mockito.when ( VAR_4 . get ( TYPE_3 . any ( VAR_5 . Guid class ) ) ) . thenReturn ( vm ) (  org.mockito.Mockito.when ( VAR_4 . METHOD_4 ( VAR_3 ) ) . thenReturn ( TYPE_4 . METHOD_5 ( vm ) ) )  org.mockito.Mockito.when ( VAR_4 . METHOD_4 ( VAR_3 ) ) . thenReturn ( TYPE_4 . METHOD_5 ( vm ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.network.Network ) TYPE org.ovirt.engine.core.common.businessentities.network.Network ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_3 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) )  VAR_3 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) (  VAR_3 . METHOD_3 ( VAR_1 . getName ( ) ) )  VAR_3 . METHOD_3 ( VAR_1 . getName ( ) ) (  VAR_3 . METHOD_4 ( VAR_1 . getId ( ) ) )  VAR_3 . METHOD_4 ( VAR_1 . getId ( ) ) (  VAR_3 . METHOD_5 ( false ) )  VAR_3 . METHOD_5 ( false ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_4 . METHOD_6 ( VAR_2 ) ) INIT = TYPE_4 . METHOD_6 ( VAR_2 ) ) VAR VAR (  VAR_3 . METHOD_7 ( ( VAR_4 == null ? null : VAR_4 . getId ( ) ) ) )  VAR_3 . METHOD_7 ( ( VAR_4 == null ? null : VAR_4 . getId ( ) ) ) (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( model . METHOD_3 ( ) ) )  METHOD_2 ( model . METHOD_3 ( ) ) (  METHOD_2 ( model . METHOD_3 ( ) . METHOD_4 ( ) ) )  METHOD_2 ( model . METHOD_3 ( ) . METHOD_4 ( ) ) (  assertEquals ( model . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( ) , VAR_1 ) )  assertEquals ( model . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( ) , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN TYPE_1.VM ) RETURN TYPE_1.VM ( NAME getModel ) NAME getModel ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.VM ) TYPE TYPE_1.VM ( NAME model ) NAME model ( INIT = new TYPE_1 . VM ( ) ) INIT = new TYPE_1 . VM ( ) ) VAR VAR (  model . METHOD_1 ( VAR_2 [ VAR_1 ] ) )  model . METHOD_1 ( VAR_2 [ VAR_1 ] ) (  model . METHOD_2 ( VAR_3 [ VAR_1 ] ) )  model . METHOD_2 ( VAR_3 [ VAR_1 ] ) (  model . setId ( VAR_4 [ 0 ] . toString ( ) ) )  model . setId ( VAR_4 [ 0 ] . toString ( ) ) (  model . METHOD_3 ( new TYPE_2 ( ) ) )  model . METHOD_3 ( new TYPE_2 ( ) ) (  model . METHOD_4 ( ) . setId ( VAR_4 [ 2 ] . toString ( ) ) )  model . METHOD_4 ( ) . setId ( VAR_4 [ 2 ] . toString ( ) ) (  return model ; )  return model ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.VdcActionParametersBase ) TYPE TYPE_1.VdcActionParametersBase ( NAME params ) NAME params ( INIT = new TYPE_2 ( ) . METHOD_2 ( METHOD_3 ( ) , VAR_1 . VdcActionParametersBase class ) ) INIT = new TYPE_2 ( ) . METHOD_2 ( METHOD_3 ( ) , VAR_1 . VdcActionParametersBase class ) ) VAR VAR (  TYPE_3 . METHOD_4 ( params . METHOD_5 ( ) ) )  TYPE_3 . METHOD_4 ( params . METHOD_5 ( ) ) (  TYPE_3 . METHOD_6 ( params . METHOD_5 ( ) . METHOD_7 ( ) ) )  TYPE_3 . METHOD_6 ( params . METHOD_5 ( ) . METHOD_7 ( ) ) (  TYPE_3 . assertEquals ( params . METHOD_5 ( ) . METHOD_8 ( ) , VAR_2 ) )  TYPE_3 . assertEquals ( params . METHOD_5 ( ) . METHOD_8 ( ) , VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . METHOD_2 ( VAR_1 ) ) INIT = VAR_3 . METHOD_2 ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( INIT = null ) INIT = null ) VAR VAR ( IF IF ( COND ( VAR_2 . METHOD_3 ( ) ) && ( ( VAR_2 . METHOD_4 ( ) ) > 1 ) ) COND ( VAR_2 . METHOD_3 ( ) ) && ( ( VAR_2 . METHOD_4 ( ) ) > 1 ) ( THEN THEN (  VAR_4 = VAR_2 . METHOD_5 ( 2 ) )  VAR_4 = VAR_2 . METHOD_5 ( 2 ) (  return TYPE_2 . METHOD_1 ( VAR_4 . METHOD_6 ( ) ) ; )  return TYPE_2 . METHOD_1 ( VAR_4 . METHOD_6 ( ) ) ; ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 = org.mockito.Mockito . METHOD_2 ( VAR_2 . VDS class ) )  VAR_1 = org.mockito.Mockito . METHOD_2 ( VAR_2 . VDS class ) (  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( VAR_1 ) . getId ( ) )  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( VAR_1 ) . getId ( ) (  org.mockito.Mockito.doReturn ( VAR_4 ) . when ( VAR_1 ) . METHOD_3 ( ) )  org.mockito.Mockito.doReturn ( VAR_4 ) . when ( VAR_1 ) . METHOD_3 ( ) (  org.mockito.Mockito.doReturn ( VAR_5 ) . when ( VAR_1 ) . getStoragePoolId ( ) )  org.mockito.Mockito.doReturn ( VAR_5 ) . when ( VAR_1 ) . getStoragePoolId ( ) (  org.mockito.Mockito.doReturn ( STRING_1 ) . when ( VAR_1 ) . METHOD_4 ( ) )  org.mockito.Mockito.doReturn ( STRING_1 ) . when ( VAR_1 ) . METHOD_4 ( ) (  org.mockito.Mockito.doReturn ( TYPE_1 . METHOD_5 ( METHOD_6 ( VAR_3 , STRING_2 ) ) ) . when ( VAR_1 ) . METHOD_7 ( ) )  org.mockito.Mockito.doReturn ( TYPE_1 . METHOD_5 ( METHOD_6 ( VAR_3 , STRING_2 ) ) ) . when ( VAR_1 ) . METHOD_7 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_2 . METHOD_3 ( VAR_2 ) ) INIT = TYPE_2 . METHOD_3 ( VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ( INIT = ( VAR_1 . METHOD_4 ( ) ) - VAR_3 ) INIT = ( VAR_1 . METHOD_4 ( ) ) - VAR_3 ) VAR VAR ( IF IF ( COND VAR_4 > 0 ) COND VAR_4 > 0 ( THEN THEN ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_5 ) NAME VAR_5 ( INIT = TYPE_3 . METHOD_5 ( VAR_4 , VAR_6 < java.lang.Integer > METHOD_6 ( VAR_7 ) ) ) INIT = TYPE_3 . METHOD_5 ( VAR_4 , VAR_6 < java.lang.Integer > METHOD_6 ( VAR_7 ) ) ) VAR VAR (  VAR_8 . METHOD_7 ( STRING_1 , VAR_2 , VAR_4 , VAR_5 ) )  VAR_8 . METHOD_7 ( STRING_1 , VAR_2 , VAR_4 , VAR_5 ) (  METHOD_8 ( VAR_2 , VAR_5 ) )  METHOD_8 ( VAR_2 , VAR_5 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME equals ) NAME equals ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME obj ) NAME obj ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME returnValue ) NAME returnValue ( INIT = super . equals ( obj ) ) INIT = super . equals ( obj ) ) VAR VAR ( IF IF ( COND ( ( ! returnValue ) && ( obj != null ) ) && ( obj instanceof TYPE_1 ) ) COND ( ( ! returnValue ) && ( obj != null ) ) && ( obj instanceof TYPE_1 ) ( THEN THEN (  returnValue = ( ( ( METHOD_1 ( ) ) != null ) && ( ! ( METHOD_1 ( ) . isEmpty ( ) ) ) ) && ( METHOD_1 ( ) . equals ( ( ( TYPE_1 ) ( obj ) ) . METHOD_1 ( ) ) ) )  returnValue = ( ( ( METHOD_1 ( ) ) != null ) && ( ! ( METHOD_1 ( ) . isEmpty ( ) ) ) ) && ( METHOD_1 ( ) . equals ( ( ( TYPE_1 ) ( obj ) ) . METHOD_1 ( ) ) ) ) THEN THEN ) IF IF (  return returnValue ; )  return returnValue ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ) RETURN org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.network.Network ) TYPE org.ovirt.engine.core.common.businessentities.network.Network ( NAME network ) NAME network ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ( NAME nic ) NAME nic ( INIT = METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , VAR_1 , false , null , network . METHOD_4 ( ) , network . getName ( ) , network . METHOD_5 ( ) , network . METHOD_6 ( ) ) ) INIT = METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , VAR_1 , false , null , network . METHOD_4 ( ) , network . getName ( ) , network . METHOD_5 ( ) , network . METHOD_6 ( ) ) ) VAR VAR (  return nic ; )  return nic ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME getValue ) NAME getValue ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ) TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME object ) NAME object ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( object . METHOD_1 ( ) ) == ( VAR_1 ) ) COND ( object . METHOD_1 ( ) ) == ( VAR_1 ) ( THEN THEN (  return TYPE_1 . METHOD_2 ( object . METHOD_3 ( ) ) ; )  return TYPE_1 . METHOD_2 ( object . METHOD_3 ( ) ) ; ) THEN THEN ( ELSE ELSE (  return TYPE_1 . METHOD_2 ( object . getStatus ( ) ) ; )  return TYPE_1 . METHOD_2 ( object . getStatus ( ) ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.when ( METHOD_2 ( ) . METHOD_3 ( ) ) . thenReturn ( VAR_1 ) )  org.mockito.Mockito.when ( METHOD_2 ( ) . METHOD_3 ( ) ) . thenReturn ( VAR_1 ) (  VAR_2 = new java.util.ArrayList < TYPE_1 > ( ) )  VAR_2 = new java.util.ArrayList < TYPE_1 > ( ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_2 . add ( VAR_3 ) )  VAR_2 . add ( VAR_3 ) (  org.mockito.Mockito.when ( METHOD_4 ( ) . METHOD_5 ( ) ) . thenReturn ( VAR_4 ) )  org.mockito.Mockito.when ( METHOD_4 ( ) . METHOD_5 ( ) ) . thenReturn ( VAR_4 ) (  org.mockito.Mockito.when ( VAR_1 . METHOD_6 ( VAR_4 ) ) . thenReturn ( VAR_2 ) )  org.mockito.Mockito.when ( VAR_1 . METHOD_6 ( VAR_4 ) ) . thenReturn ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  return TYPE_1 . METHOD_2 ( TYPE_2 . getVm ( ) , TYPE_2 . getReturnValue ( ) . METHOD_3 ( ) , TYPE_2 . getVm ( ) . METHOD_4 ( ) , VAR_1 , true , true , false , false , false , false , true , true , METHOD_5 ( ) ) ; )  return TYPE_1 . METHOD_2 ( TYPE_2 . getVm ( ) , TYPE_2 . getReturnValue ( ) . METHOD_3 ( ) , TYPE_2 . getVm ( ) . METHOD_4 ( ) , VAR_1 , true , true , false , false , false , false , true , true , METHOD_5 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( IF IF ( COND VAR_1 instanceof TYPE_2 ) COND VAR_1 instanceof TYPE_2 ( THEN THEN (  VAR_2 = ( ( org.ovirt.engine.ui.frontend.Frontend . getConstants ( ) . METHOD_2 ( ) ) + STRING_1 ) + ( ( ( TYPE_2 ) ( VAR_1 ) ) . METHOD_3 ( ) ) )  VAR_2 = ( ( org.ovirt.engine.ui.frontend.Frontend . getConstants ( ) . METHOD_2 ( ) ) + STRING_1 ) + ( ( ( TYPE_2 ) ( VAR_1 ) ) . METHOD_3 ( ) ) ) THEN THEN ( ELSE ELSE (  VAR_2 = ( ( org.ovirt.engine.ui.frontend.Frontend . getConstants ( ) . METHOD_4 ( ) ) + STRING_1 ) + ( VAR_1 . METHOD_5 ( ) ) )  VAR_2 = ( ( org.ovirt.engine.ui.frontend.Frontend . getConstants ( ) . METHOD_4 ( ) ) + STRING_1 ) + ( VAR_1 . METHOD_5 ( ) ) ) ELSE ELSE ) IF IF (  org.ovirt.engine.ui.frontend.Frontend . METHOD_1 ( VAR_2 ) )  org.ovirt.engine.ui.frontend.Frontend . METHOD_1 ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.compat.Guid> ) TYPE java.util.List<org.ovirt.engine.core.compat.Guid> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . getParameters ( ) . METHOD_2 ( ) . METHOD_3 ( ) ) INIT = TYPE_1 . getParameters ( ) . METHOD_2 ( ) . METHOD_3 ( ) ) VAR VAR ( IF IF ( COND VAR_1 . isEmpty ( ) ) COND VAR_1 . isEmpty ( ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( IF IF ( COND ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_4 ( ) . get ( VAR_2 ) ) == null ) COND ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_4 ( ) . get ( VAR_2 ) ) == null ( THEN THEN (  METHOD_5 ( VAR_3 ) )  METHOD_5 ( VAR_3 ) (  return false ; )  return false ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ( INIT = new org.ovirt.engine.core.common.businessentities.VM ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.VM ( ) ) VAR VAR (  vm . METHOD_2 ( VAR_1 ) )  vm . METHOD_2 ( VAR_1 ) (  vm . METHOD_3 ( ( ( VAR_2 ) + 1 ) ) )  vm . METHOD_3 ( ( ( VAR_2 ) + 1 ) ) (  VAR_3 . METHOD_4 ( VAR_4 , VAR_1 , INT_1 ) )  VAR_3 . METHOD_4 ( VAR_4 , VAR_1 , INT_1 ) (  TYPE_1 . METHOD_5 ( VAR_5 . METHOD_6 ( vm ) , false , VAR_6 ) )  TYPE_1 . METHOD_5 ( VAR_5 . METHOD_6 ( vm ) , false , VAR_6 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = vm . METHOD_2 ( ) ) INIT = vm . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 < java.lang.Integer > METHOD_3 ( VAR_4 ) ) INIT = VAR_3 < java.lang.Integer > METHOD_3 ( VAR_4 ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_3 < java.lang.Integer > METHOD_3 ( VAR_6 ) ) INIT = VAR_3 < java.lang.Integer > METHOD_3 ( VAR_6 ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_7 ) NAME VAR_7 ( INIT = ( vm . METHOD_4 ( ) . METHOD_5 ( ) ) ? VAR_2 : VAR_5 ) INIT = ( vm . METHOD_4 ( ) . METHOD_5 ( ) ) ? VAR_2 : VAR_5 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_8 ) NAME VAR_8 ( INIT = ( VAR_1 . length ( ) ) <= VAR_7 ) INIT = ( VAR_1 . length ( ) ) <= VAR_7 ) VAR VAR (  return VAR_8 ; )  return VAR_8 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( TYPE_1 . getWindow ( ) ) != null ) COND ( TYPE_1 . getWindow ( ) ) != null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.ui.uicommonweb.UICommand> ) TYPE java.util.List<org.ovirt.engine.ui.uicommonweb.UICommand> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR (  VAR_1 . add ( org.ovirt.engine.ui.uicommonweb.UICommand . METHOD_2 ( STRING_1 , this ) ) )  VAR_1 . add ( org.ovirt.engine.ui.uicommonweb.UICommand . METHOD_2 ( STRING_1 , this ) ) (  VAR_1 . add ( org.ovirt.engine.ui.uicommonweb.UICommand . METHOD_3 ( STRING_2 , this ) ) )  VAR_1 . add ( org.ovirt.engine.ui.uicommonweb.UICommand . METHOD_3 ( STRING_2 , this ) ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME model ) NAME model ( INIT = new TYPE_2 ( new TYPE_3 ( ) , this ) ) INIT = new TYPE_2 ( new TYPE_3 ( ) , this ) ) VAR VAR (  METHOD_4 ( model , VAR_2 , METHOD_5 ( ) , VAR_1 ) )  METHOD_4 ( model , VAR_2 , METHOD_5 ( ) , VAR_1 ) (  model . METHOD_6 ( null ) )  model . METHOD_6 ( null ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ( IN METHOD_2 ( ) ) IN METHOD_2 ( ) ( BLOCK BLOCK ( IF IF ( COND ! ( METHOD_3 ( ) . equals ( VAR_1 ) ) ) COND ! ( METHOD_3 ( ) . equals ( VAR_1 ) ) ( THEN THEN (  TYPE_1 . getInstance ( ) . METHOD_4 ( ) . METHOD_5 ( VAR_2 , new TYPE_2 ( VAR_1 ) ) )  TYPE_1 . getInstance ( ) . METHOD_4 ( ) . METHOD_5 ( VAR_2 , new TYPE_2 ( VAR_1 ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_2 ( ) ) INIT = TYPE_2 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_2 . METHOD_3 ( ) ) INIT = VAR_2 . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_3 . METHOD_4 ( VAR_1 , node , VAR_5 ) ) INIT = VAR_3 . METHOD_4 ( VAR_1 , node , VAR_5 ) ) VAR VAR ( IF IF ( COND VAR_4 != null ) COND VAR_4 != null ( THEN THEN (  return new TYPE_1 ( ( ( TYPE_4 ) ( VAR_4 ) ) ) ; )  return new TYPE_1 ( ( ( TYPE_4 ) ( VAR_4 ) ) ) ; ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_6 ( ( STRING_1 + VAR_1 ) , e ) ; )  throw new TYPE_6 ( ( STRING_1 + VAR_1 ) , e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME entity ) NAME entity ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_2 . METHOD_2 ( entity . getId ( ) ) . METHOD_3 ( VAR_2 [ VAR_1 ] ) . METHOD_4 ( ) )  TYPE_2 . METHOD_2 ( entity . getId ( ) ) . METHOD_3 ( VAR_2 [ VAR_1 ] ) . METHOD_4 ( ) (  TYPE_2 . METHOD_2 ( entity . getName ( ) ) . METHOD_3 ( VAR_3 [ VAR_1 ] ) . METHOD_4 ( ) )  TYPE_2 . METHOD_2 ( entity . getName ( ) ) . METHOD_3 ( VAR_3 [ VAR_1 ] ) . METHOD_4 ( ) (  TYPE_2 . METHOD_2 ( entity . METHOD_5 ( ) ) . METHOD_3 ( VAR_4 [ VAR_1 ] ) . METHOD_4 ( ) )  TYPE_2 . METHOD_2 ( entity . METHOD_5 ( ) ) . METHOD_3 ( VAR_4 [ VAR_1 ] ) . METHOD_4 ( ) (  return entity ; )  return entity ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ( IN METHOD_2 ( ) ) IN METHOD_2 ( ) ( BLOCK BLOCK ( IF IF ( COND ! ( vm . METHOD_3 ( ) ) ) COND ! ( vm . METHOD_3 ( ) ) ( THEN THEN ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ( INIT = METHOD_4 ( VAR_1 , METHOD_5 ( new TYPE_2 ( vm . getId ( ) , VAR_2 . NORMAL ) , TYPE_3 . METHOD_6 ( ) ) , TYPE_3 . METHOD_7 ( ) ) ) INIT = METHOD_4 ( VAR_1 , METHOD_5 ( new TYPE_2 ( vm . getId ( ) , VAR_2 . NORMAL ) , TYPE_3 . METHOD_6 ( ) ) , TYPE_3 . METHOD_7 ( ) ) ) VAR VAR ( IF IF ( COND ! ( result . getSucceeded ( ) ) ) COND ! ( result . getSucceeded ( ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( METHOD_3 ( ) . getSelectedItem ( ) ) == ( VAR_3 ) ) INIT = ( METHOD_3 ( ) . getSelectedItem ( ) ) == ( VAR_3 ) ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_4 ) NAME VAR_4 ( INIT = ( METHOD_4 ( ) . getSelectedItem ( ) ) == ( VAR_5 ) ) INIT = ( METHOD_4 ( ) . getSelectedItem ( ) ) == ( VAR_5 ) ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_6 ) NAME VAR_6 ( INIT = ( ( METHOD_5 ( ) ) != null ) && ( ( VAR_7 . METHOD_6 ( METHOD_5 ( ) . METHOD_7 ( ) ) ) <= 0 ) ) INIT = ( ( METHOD_5 ( ) ) != null ) && ( ( VAR_7 . METHOD_6 ( METHOD_5 ( ) . METHOD_7 ( ) ) ) <= 0 ) ) VAR VAR (  return ( ( VAR_1 && VAR_2 ) && VAR_4 ) && VAR_6 ; )  return ( ( VAR_1 && VAR_2 ) && VAR_4 ) && VAR_6 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.StorageDomain ) TYPE TYPE_1.StorageDomain ( NAME storageDomain ) NAME storageDomain ( INIT = new TYPE_1 . StorageDomain ( ) ) INIT = new TYPE_1 . StorageDomain ( ) ) VAR VAR (  storageDomain . setId ( VAR_1 [ 2 ] . toString ( ) ) )  storageDomain . setId ( VAR_1 [ 2 ] . toString ( ) ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME cluster ) NAME cluster ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  cluster . setId ( VAR_1 [ 1 ] . toString ( ) ) )  cluster . setId ( VAR_1 [ 1 ] . toString ( ) ) (  METHOD_2 ( VAR_2 ) )  METHOD_2 ( VAR_2 ) (  METHOD_3 ( storageDomain , cluster ) )  METHOD_3 ( storageDomain , cluster ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( ( TYPE_1 . getVdsGroup ( ) ) == null ) && ( TYPE_2 . equals ( super . METHOD_2 ( ) ) ) ) COND ( ( TYPE_1 . getVdsGroup ( ) ) == null ) && ( TYPE_2 . equals ( super . METHOD_2 ( ) ) ) ( THEN THEN (  return METHOD_3 ( VAR_1 ) ; )  return METHOD_3 ( VAR_1 ) ; ) THEN THEN ) IF IF ( IF IF ( COND ! ( TYPE_3 . METHOD_4 ( METHOD_2 ( ) . getValue ( ) , TYPE_1 . getParameters ( ) . METHOD_5 ( ) , TYPE_1 . getReturnValue ( ) . METHOD_6 ( ) ) ) ) COND ! ( TYPE_3 . METHOD_4 ( METHOD_2 ( ) . getValue ( ) , TYPE_1 . getParameters ( ) . METHOD_5 ( ) , TYPE_1 . getReturnValue ( ) . METHOD_6 ( ) ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  return super . METHOD_1 ( ) ; )  return super . METHOD_1 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_2 ( ) ) INIT = VAR_2 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.network.Network ) TYPE org.ovirt.engine.core.common.businessentities.network.Network ( NAME result ) NAME result ( INIT = dao . METHOD_3 ( VAR_3 , VAR_4 ) ) INIT = dao . METHOD_3 ( VAR_3 , VAR_4 ) ) VAR VAR (  TYPE_2 . METHOD_4 ( result ) )  TYPE_2 . METHOD_4 ( result ) (  TYPE_2 . assertEquals ( result . METHOD_5 ( ) . getId ( ) , VAR_5 ) )  TYPE_2 . assertEquals ( result . METHOD_5 ( ) . getId ( ) , VAR_5 ) (  dao . METHOD_6 ( result . getId ( ) ) )  dao . METHOD_6 ( result . getId ( ) ) (  TYPE_2 . METHOD_7 ( dao . METHOD_3 ( VAR_3 , VAR_4 ) ) )  TYPE_2 . METHOD_7 ( dao . METHOD_3 ( VAR_3 , VAR_4 ) ) (  TYPE_2 . METHOD_7 ( VAR_1 . get ( VAR_5 ) ) )  TYPE_2 . METHOD_7 ( VAR_1 . get ( VAR_5 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = INT_1 ) INIT = INT_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME result ) NAME result ( INIT = 1 ) INIT = 1 ) VAR VAR (  result = ( VAR_1 * result ) + ( ( VAR_2 ) == null ? 0 : VAR_2 . METHOD_1 ( ) ) )  result = ( VAR_1 * result ) + ( ( VAR_2 ) == null ? 0 : VAR_2 . METHOD_1 ( ) ) (  result = ( VAR_1 * result ) + ( ( id ) == null ? 0 : id . METHOD_1 ( ) ) )  result = ( VAR_1 * result ) + ( ( id ) == null ? 0 : id . METHOD_1 ( ) ) (  result = ( VAR_1 * result ) + ( ( VAR_3 ) == null ? 0 : VAR_3 . METHOD_1 ( ) ) )  result = ( VAR_1 * result ) + ( ( VAR_3 ) == null ? 0 : VAR_3 . METHOD_1 ( ) ) (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 < > ( ) ) INIT = new TYPE_1 < > ( ) ) VAR VAR (  VAR_2 . METHOD_2 ( VAR_3 , INT_1 ) )  VAR_2 . METHOD_2 ( VAR_3 , INT_1 ) (  org.mockito.Mockito.when ( VAR_4 . METHOD_3 ( ) ) . thenReturn ( new TYPE_2 ( ( ( new TYPE_3 ( ) . METHOD_4 ( ) ) - INT_2 ) ) ) )  org.mockito.Mockito.when ( VAR_4 . METHOD_3 ( ) ) . thenReturn ( new TYPE_2 ( ( ( new TYPE_3 ( ) . METHOD_4 ( ) ) - INT_2 ) ) ) ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME result ) NAME result ( INIT = validator . METHOD_5 ( VAR_1 ) ) INIT = validator . METHOD_5 ( VAR_1 ) ) VAR VAR (  TYPE_4 . METHOD_6 ( result ) )  TYPE_4 . METHOD_6 ( result ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return METHOD_2 ( ) . METHOD_3 ( STRING_1 , VAR_3 . instance , METHOD_4 ( ) . addValue ( STRING_2 , VAR_1 ) . addValue ( STRING_3 , VAR_2 . name ( ) ) ) ; )  return METHOD_2 ( ) . METHOD_3 ( STRING_1 , VAR_3 . instance , METHOD_4 ( ) . addValue ( STRING_2 , VAR_1 ) . addValue ( STRING_3 , VAR_2 . name ( ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  VAR_1 . METHOD_3 ( STRING_1 ) )  VAR_1 . METHOD_3 ( STRING_1 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( VAR_1 , org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) , org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) , org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) , org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) ) ) INIT = new TYPE_1 ( VAR_1 , org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) , org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) , org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) , org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) ) ) VAR VAR (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = INT_1 ) INIT = INT_1 ) VAR VAR ( WHILE WHILE ( COND ( ( VAR_2 > 0 ) && ( ( VAR_3 ) == null ) ) && ( ! ( VAR_4 ) ) ) COND ( ( VAR_2 > 0 ) && ( ( VAR_3 ) == null ) ) && ( ! ( VAR_4 ) ) ( BLOCK BLOCK (  VAR_2 -- )  VAR_2 -- ( TRY TRY ( BLOCK BLOCK (  TYPE_1 . getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( VAR_5 , new TYPE_2 ( VAR_1 ) ) )  TYPE_1 . getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( VAR_5 , new TYPE_2 ( VAR_1 ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) WHILE WHILE ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.uicommonweb.models.EntityModel ) TYPE org.ovirt.engine.ui.uicommonweb.models.EntityModel ( NAME entity ) NAME entity ) VAR VAR ( VAR VAR ( TYPE TYPE_1[] ) TYPE TYPE_1[] ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.ui.uicommonweb.models.EntityModel ) TYPE org.ovirt.engine.ui.uicommonweb.models.EntityModel ( NAME VAR_3 ) NAME VAR_3 ( INIT = new org.ovirt.engine.ui.uicommonweb.models.EntityModel ( ) ) INIT = new org.ovirt.engine.ui.uicommonweb.models.EntityModel ( ) ) VAR VAR (  VAR_3 . METHOD_2 ( true ) )  VAR_3 . METHOD_2 ( true ) (  VAR_3 . setEntity ( VAR_1 ) )  VAR_3 . setEntity ( VAR_1 ) (  VAR_3 . METHOD_3 ( VAR_2 ) )  VAR_3 . METHOD_3 ( VAR_2 ) ( IF IF ( COND ! ( VAR_3 . METHOD_4 ( ) ) ) COND ! ( VAR_3 . METHOD_4 ( ) ) ( THEN THEN (  entity . METHOD_5 ( VAR_3 . METHOD_6 ( ) ) )  entity . METHOD_5 ( VAR_3 . METHOD_6 ( ) ) (  entity . METHOD_2 ( false ) )  entity . METHOD_2 ( false ) ) THEN THEN ) IF IF (  return VAR_3 . METHOD_4 ( ) ; )  return VAR_3 . METHOD_4 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME vmId ) NAME vmId ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source ; )  return source ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } (  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  quota = METHOD_2 ( VAR_1 ) )  quota = METHOD_2 ( VAR_1 ) (  org.mockito.Mockito.when ( VAR_2 . METHOD_3 ( VAR_1 ) ) . thenReturn ( quota ) )  org.mockito.Mockito.when ( VAR_2 . METHOD_3 ( VAR_1 ) ) . thenReturn ( quota ) ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_3 ) NAME VAR_3 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR (  VAR_3 . add ( new TYPE_1 ( ) ) )  VAR_3 . add ( new TYPE_1 ( ) ) (  VAR_3 . add ( new TYPE_1 ( ) ) )  VAR_3 . add ( new TYPE_1 ( ) ) (  org.mockito.Mockito.when ( VAR_2 . METHOD_4 ( VAR_4 ) ) . thenReturn ( VAR_3 ) )  org.mockito.Mockito.when ( VAR_2 . METHOD_4 ( VAR_4 ) ) . thenReturn ( VAR_3 ) (  org.mockito.Mockito.when ( VAR_2 . METHOD_5 ( TYPE_2 . any ( VAR_5 class ) ) ) . thenReturn ( false ) )  org.mockito.Mockito.when ( VAR_2 . METHOD_5 ( TYPE_2 . any ( VAR_5 class ) ) ) . thenReturn ( false ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = dao . get ( METHOD_2 ( ) ) ) INIT = dao . get ( METHOD_2 ( ) ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( VAR_1 . METHOD_3 ( ) ) + 1 ) INIT = ( VAR_1 . METHOD_3 ( ) ) + 1 ) VAR VAR (  TYPE_2 . METHOD_4 ( TYPE_3 . METHOD_5 ( VAR_1 . METHOD_6 ( ) ) ) )  TYPE_2 . METHOD_4 ( TYPE_3 . METHOD_5 ( VAR_1 . METHOD_6 ( ) ) ) (  VAR_1 . METHOD_7 ( VAR_2 ) )  VAR_1 . METHOD_7 ( VAR_2 ) (  dao . METHOD_8 ( VAR_1 ) )  dao . METHOD_8 ( VAR_1 ) (  dao . get ( METHOD_2 ( ) ) )  dao . get ( METHOD_2 ( ) ) (  TYPE_4 . assertEquals ( VAR_1 . METHOD_3 ( ) , VAR_2 ) )  TYPE_4 . assertEquals ( VAR_1 . METHOD_3 ( ) , VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND METHOD_2 ( ) ) COND METHOD_2 ( ) ( THEN THEN (  TYPE_1 . METHOD_3 ( true ) )  TYPE_1 . METHOD_3 ( true ) (  return ; )  return ; ) THEN THEN ) IF IF (  METHOD_4 ( ) )  METHOD_4 ( ) ( IF IF ( COND ( ( METHOD_5 ( ) ) && ( TYPE_1 . getVm ( ) . METHOD_6 ( ) ) ) && ( TYPE_1 . getSucceeded ( ) ) ) COND ( ( METHOD_5 ( ) ) && ( TYPE_1 . getVm ( ) . METHOD_6 ( ) ) ) && ( TYPE_1 . getSucceeded ( ) ) ( THEN THEN (  METHOD_7 ( ) )  METHOD_7 ( ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  VAR_1 . add ( STRING_1 ) )  VAR_1 . add ( STRING_1 ) (  METHOD_2 ( METHOD_3 ( ) ) )  METHOD_2 ( METHOD_3 ( ) ) (  METHOD_4 ( 1 ) )  METHOD_4 ( 1 ) (  METHOD_5 ( 0 , 1 ) )  METHOD_5 ( 0 , 1 ) (  METHOD_6 ( ) )  METHOD_6 ( ) (  METHOD_7 ( 1 ) )  METHOD_7 ( 1 ) (  VAR_2 . METHOD_8 ( ) )  VAR_2 . METHOD_8 ( ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME vm ) NAME vm ( INIT = resource . get ( ) ) INIT = resource . get ( ) ) VAR VAR (  METHOD_9 ( vm . METHOD_10 ( ) ) )  METHOD_9 ( vm . METHOD_10 ( ) ) (  METHOD_11 ( vm , 0 ) )  METHOD_11 ( vm , 0 ) ) BLOCK BLOCK ( FINALLY FINALLY (  VAR_1 . METHOD_12 ( ) )  VAR_1 . METHOD_12 ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( TYPE_1 . any ( VAR_2 . String class ) ) ) . thenReturn ( null ) )  org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( TYPE_1 . any ( VAR_2 . String class ) ) ) . thenReturn ( null ) (  org.mockito.Mockito.when ( VAR_3 . METHOD_3 ( ) ) . thenReturn ( VAR_1 ) )  org.mockito.Mockito.when ( VAR_3 . METHOD_3 ( ) ) . thenReturn ( VAR_1 ) (  validator = new TYPE_2 ( VAR_3 , host , VAR_4 ) )  validator = new TYPE_2 ( VAR_3 , host , VAR_4 ) (  TYPE_3 . METHOD_4 ( validator . METHOD_1 ( ) , TYPE_4 . METHOD_5 ( ) ) )  TYPE_3 . METHOD_4 ( validator . METHOD_1 ( ) , TYPE_4 . METHOD_5 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = org.mockito.Mockito . METHOD_2 ( VAR_4 class ) ) INIT = org.mockito.Mockito . METHOD_2 ( VAR_4 class ) ) VAR VAR (  org.mockito.Mockito.when ( VAR_3 . METHOD_3 ( VAR_5 ) ) . thenReturn ( true ) )  org.mockito.Mockito.when ( VAR_3 . METHOD_3 ( VAR_5 ) ) . thenReturn ( true ) (  org.mockito.Mockito.when ( VAR_3 . METHOD_4 ( VAR_5 ) ) . thenReturn ( VAR_2 ) )  org.mockito.Mockito.when ( VAR_3 . METHOD_4 ( VAR_5 ) ) . thenReturn ( VAR_2 ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_6 ) NAME VAR_6 ( INIT = TYPE_4 . METHOD_5 ( VAR_3 ) ) INIT = TYPE_4 . METHOD_5 ( VAR_3 ) ) VAR VAR (  TYPE_5 . assertEquals ( VAR_1 , VAR_6 . METHOD_6 ( ) ) )  TYPE_5 . assertEquals ( VAR_1 , VAR_6 . METHOD_6 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1.ValidationResult ) RETURN TYPE_1.ValidationResult ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ) VAR VAR ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 . isEmpty ( ) ) COND VAR_1 . isEmpty ( ) ( THEN THEN (  return VAR_2 ; )  return VAR_2 ; ) THEN THEN ) IF IF (  return ! ( vm . METHOD_2 ( ) ) ? new TYPE_2 ( VAR_1 ) . METHOD_3 ( ) : VAR_2 ; )  return ! ( vm . METHOD_2 ( ) ) ? new TYPE_2 ( VAR_1 ) . METHOD_3 ( ) : VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME event ) NAME event ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List ) TYPE java.util.List ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( java.util.List ) ( object . METHOD_2 ( ) . METHOD_3 ( ) ) ) ) INIT = ( ( java.util.List ) ( object . METHOD_2 ( ) . METHOD_3 ( ) ) ) ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( VAR_3 . METHOD_4 ( ) ) >= 0 ) ? VAR_1 . get ( VAR_3 . METHOD_4 ( ) ) : null ) INIT = ( ( VAR_3 . METHOD_4 ( ) ) >= 0 ) ? VAR_1 . get ( VAR_3 . METHOD_4 ( ) ) : null ) VAR VAR (  object . METHOD_2 ( ) . setSelectedItem ( VAR_2 ) )  object . METHOD_2 ( ) . setSelectedItem ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( METHOD_3 ( ) ) )  METHOD_2 ( METHOD_3 ( ) ) (  METHOD_4 ( METHOD_5 ( getEntity ( 2 ) ) ) )  METHOD_4 ( METHOD_5 ( getEntity ( 2 ) ) ) (  VAR_1 . METHOD_6 ( ) )  VAR_1 . METHOD_6 ( ) ( TRY TRY ( BLOCK BLOCK (  resource . get ( ) )  resource . get ( ) (  METHOD_7 ( STRING_1 ) )  METHOD_7 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( BLOCK BLOCK (  METHOD_8 ( VAR_2 ) )  METHOD_8 ( VAR_2 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 = new org.ovirt.engine.core.common.businessentities.VDS ( ) )  VAR_1 = new org.ovirt.engine.core.common.businessentities.VDS ( ) (  VAR_1 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) )  VAR_1 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) (  VAR_1 . METHOD_3 ( STRING_1 ) )  VAR_1 . METHOD_3 ( STRING_1 ) (  VAR_2 = new org.ovirt.engine.core.common.businessentities.VDS ( ) )  VAR_2 = new org.ovirt.engine.core.common.businessentities.VDS ( ) (  VAR_2 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) )  VAR_2 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) (  VAR_2 . METHOD_3 ( null ) )  VAR_2 . METHOD_3 ( null ) (  VAR_3 = new TYPE_1 ( ) )  VAR_3 = new TYPE_1 ( ) (  vm = new org.ovirt.engine.core.common.businessentities.VM ( ) )  vm = new org.ovirt.engine.core.common.businessentities.VM ( ) (  vm . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) )  vm . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  TYPE_1 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) )  TYPE_1 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) (  org.mockito.Mockito . METHOD_5 ( validator , org.mockito.Mockito . METHOD_6 ( 1 ) ) . METHOD_7 ( TYPE_2 . any ( VAR_2 . Boolean class ) , TYPE_2 . any ( VAR_3 class ) ) )  org.mockito.Mockito . METHOD_5 ( validator , org.mockito.Mockito . METHOD_6 ( 1 ) ) . METHOD_7 ( TYPE_2 . any ( VAR_2 . Boolean class ) , TYPE_2 . any ( VAR_3 class ) ) (  org.mockito.Mockito . METHOD_5 ( validator , org.mockito.Mockito . METHOD_6 ( 1 ) ) . METHOD_8 ( TYPE_2 . any ( VAR_2 . Boolean class ) , TYPE_2 . any ( VAR_4 class ) ) )  org.mockito.Mockito . METHOD_5 ( validator , org.mockito.Mockito . METHOD_6 ( 1 ) ) . METHOD_8 ( TYPE_2 . any ( VAR_2 . Boolean class ) , TYPE_2 . any ( VAR_4 class ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ( INIT = org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) INIT = org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) VAR VAR (  VAR_1 . add ( METHOD_3 ( STRING_1 , VAR_2 ) ) )  VAR_1 . add ( METHOD_3 ( STRING_1 , VAR_2 ) ) (  VAR_1 . add ( METHOD_3 ( STRING_2 , VAR_2 ) ) )  VAR_1 . add ( METHOD_3 ( STRING_2 , VAR_2 ) ) (  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_3 ) . METHOD_4 ( TYPE_2 . any ( VAR_4 . Guid class ) ) )  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_3 ) . METHOD_4 ( TYPE_2 . any ( VAR_4 . Guid class ) ) (  TYPE_3 . assertEquals ( VAR_5 , validator . METHOD_5 ( METHOD_3 ( STRING_3 , VAR_2 ) ) ) )  TYPE_3 . assertEquals ( VAR_5 , validator . METHOD_5 ( METHOD_3 ( STRING_3 , VAR_2 ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( java.lang.String ) ( result ) ) ) INIT = ( ( java.lang.String ) ( result ) ) ) VAR VAR ( IF IF ( COND ( VAR_1 != null ) && ( ( VAR_1 . length ( ) ) > 0 ) ) COND ( VAR_1 != null ) && ( ( VAR_1 . length ( ) ) > 0 ) ( THEN THEN (  METHOD_1 ( ) . setEntity ( result ) )  METHOD_1 ( ) . setEntity ( result ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.List<TYPE_1.DiskImage> ) RETURN java.util.List<TYPE_1.DiskImage> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1.DiskImage> ) TYPE java.util.List<TYPE_1.DiskImage> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ( IN TYPE_2 . getParameters ( ) . METHOD_1 ( ) ) IN TYPE_2 . getParameters ( ) . METHOD_1 ( ) ( BLOCK BLOCK (  VAR_1 . add ( METHOD_2 ( VAR_2 ) ) )  VAR_1 . add ( METHOD_2 ( VAR_2 ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1.ValidationResult ) RETURN TYPE_1.ValidationResult ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_2.DiskImage> ) TYPE java.util.List<TYPE_2.DiskImage> ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) ) INIT = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) ) VAR VAR ( IF IF ( COND ! ( VAR_2 . isEmpty ( ) ) ) COND ! ( VAR_2 . isEmpty ( ) ) ( THEN THEN (  return new TYPE_1 . ValidationResult ( VAR_3 ) ; )  return new TYPE_1 . ValidationResult ( VAR_3 ) ; ) THEN THEN ) IF IF (  return VAR_4 ; )  return VAR_4 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static final ) MODIFIER private static final ( RETURN TYPE_1<TYPE_2> ) RETURN TYPE_1<TYPE_2> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME type ) NAME type ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_3 ) NAME METHOD_3 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return VAR_1 . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( type ) ; )  return VAR_1 . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( type ) ; ) BLOCK BLOCK ) METHOD METHOD (  return TYPE_4 . METHOD_2 ( source , new TYPE_5 < TYPE_2 > ( ) { public boolean METHOD_3 ( TYPE_2 VAR_1 ) { return VAR_1 . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( type ) ; } } ) ; )  return TYPE_4 . METHOD_2 ( source , new TYPE_5 < TYPE_2 > ( ) { public boolean METHOD_3 ( TYPE_2 VAR_1 ) { return VAR_1 . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( type ) ; } } ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( VAR_2 , new TYPE_2 ( VAR_3 . getId ( ) , METHOD_3 ( ) ) ) ) INIT = METHOD_2 ( VAR_2 , new TYPE_2 ( VAR_3 . getId ( ) , METHOD_3 ( ) ) ) ) VAR VAR (  METHOD_4 ( VAR_1 . getSucceeded ( ) ) )  METHOD_4 ( VAR_1 . getSucceeded ( ) ) ( IF IF ( COND ! ( getSucceeded ( ) ) ) COND ! ( getSucceeded ( ) ) ( THEN THEN (  METHOD_5 ( VAR_4 , VAR_1 . METHOD_6 ( ) . METHOD_7 ( ) ) )  METHOD_5 ( VAR_4 , VAR_1 . METHOD_6 ( ) . METHOD_7 ( ) ) (  return ; )  return ; ) THEN THEN ) IF IF (  METHOD_8 ( ) )  METHOD_8 ( ) (  METHOD_9 ( ) )  METHOD_9 ( ) (  getReturnValue ( ) . METHOD_10 ( VAR_1 ) )  getReturnValue ( ) . METHOD_10 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  resource = new TYPE_1 ( VAR_1 [ 0 ] . toString ( ) , new TYPE_2 ( ) ) )  resource = new TYPE_1 ( VAR_1 [ 0 ] . toString ( ) , new TYPE_2 ( ) ) (  resource . METHOD_2 ( VAR_2 ) )  resource . METHOD_2 ( VAR_2 ) (  resource . METHOD_3 ( VAR_3 ) )  resource . METHOD_3 ( VAR_3 ) (  resource . METHOD_4 ( VAR_4 ) )  resource . METHOD_4 ( VAR_4 ) (  resource . METHOD_5 ( VAR_5 ) )  resource . METHOD_5 ( VAR_5 ) (  resource . METHOD_6 ( VAR_6 ) )  resource . METHOD_6 ( VAR_6 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<TYPE_2,TYPE_3> ) TYPE TYPE_1<TYPE_2,TYPE_3> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 < TYPE_2 , TYPE_3 > ( ) { public TYPE_3 getModel ( ) { return METHOD_2 ( ) ; } public void METHOD_3 ( ) { } public void METHOD_4 ( ) { } } ) INIT = new TYPE_1 < TYPE_2 , TYPE_3 > ( ) { public TYPE_3 getModel ( ) { return METHOD_2 ( ) ; } public void METHOD_3 ( ) { } public void METHOD_4 ( ) { } } ) VAR VAR ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_3 ) RETURN TYPE_3 ( NAME getModel ) NAME getModel ( BLOCK BLOCK (  return METHOD_2 ( ) ; )  return METHOD_2 ( ) ; ) BLOCK BLOCK ) METHOD METHOD ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_3 ) NAME METHOD_3 ( BLOCK BLOCK ) BLOCK BLOCK ) METHOD METHOD ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_4 ) NAME METHOD_4 ( BLOCK BLOCK ) BLOCK BLOCK ) METHOD METHOD (  VAR_2 = new TYPE_4 ( VAR_1 , constants ) )  VAR_2 = new TYPE_4 ( VAR_1 , constants ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Integer ) TYPE java.lang.Integer ( NAME value ) NAME value ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( VAR_1 ) == null ) && ( value == null ) ) COND ( ( VAR_1 ) == null ) && ( value == null ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( IF IF ( COND ( ( VAR_1 ) == null ) || ( ! ( VAR_1 . equals ( value ) ) ) ) COND ( ( VAR_1 ) == null ) || ( ! ( VAR_1 . equals ( value ) ) ) ( THEN THEN (  VAR_1 = value )  VAR_1 = value (  METHOD_2 ( new TYPE_1 ( STRING_1 ) ) )  METHOD_2 ( new TYPE_1 ( STRING_1 ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 < TYPE_2 > ( new TYPE_2 ( null ) ) ) )  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 < TYPE_2 > ( new TYPE_2 ( null ) ) ) (  METHOD_3 ( cmd ) )  METHOD_3 ( cmd ) (  TYPE_3 . METHOD_4 ( cmd . METHOD_5 ( ) ) )  TYPE_3 . METHOD_4 ( cmd . METHOD_5 ( ) ) (  TYPE_3 . METHOD_6 ( cmd . getReturnValue ( ) . METHOD_7 ( ) . METHOD_8 ( TYPE_4 . toString ( ) ) ) )  TYPE_3 . METHOD_6 ( cmd . getReturnValue ( ) . METHOD_7 ( ) . METHOD_8 ( TYPE_4 . toString ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN org.ovirt.engine.core.common.businessentities.VM ) RETURN org.ovirt.engine.core.common.businessentities.VM ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ( INIT = new org.ovirt.engine.core.common.businessentities.VM ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.VM ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  VAR_3 . METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) )  VAR_3 . METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) (  VAR_3 . METHOD_4 ( STRING_1 ) )  VAR_3 . METHOD_4 ( STRING_1 ) (  VAR_3 . METHOD_5 ( 1 ) )  VAR_3 . METHOD_5 ( 1 ) (  vm . METHOD_6 ( VAR_3 ) )  vm . METHOD_6 ( VAR_3 ) (  vm . METHOD_7 ( VAR_2 ) )  vm . METHOD_7 ( VAR_2 ) (  return vm ; )  return vm ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 . getStatus ( ) ) != ( VAR_2 . METHOD_2 ( ) ) ) COND ( VAR_1 . getStatus ( ) ) != ( VAR_2 . METHOD_2 ( ) ) ( THEN THEN (  VAR_3 . METHOD_3 ( STRING_1 , VAR_1 . getName ( ) , VAR_1 . getId ( ) , VAR_1 . getStatus ( ) . name ( ) , VAR_2 . METHOD_2 ( ) . name ( ) ) )  VAR_3 . METHOD_3 ( STRING_1 , VAR_1 . getName ( ) , VAR_1 . getId ( ) , VAR_1 . getStatus ( ) . name ( ) , VAR_2 . METHOD_2 ( ) . name ( ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_3 ( ) ) INIT = new TYPE_3 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_5 ) NAME VAR_5 ( INIT = new TYPE_4 ( ) ) INIT = new TYPE_4 ( ) ) VAR VAR (  VAR_5 . METHOD_2 ( VAR_2 ) )  VAR_5 . METHOD_2 ( VAR_2 ) (  VAR_5 . METHOD_3 ( VAR_3 ) )  VAR_5 . METHOD_3 ( VAR_3 ) (  VAR_5 . METHOD_4 ( VAR_1 ) )  VAR_5 . METHOD_4 ( VAR_1 ) (  VAR_4 . METHOD_5 ( ) . add ( VAR_5 ) )  VAR_4 . METHOD_5 ( ) . add ( VAR_5 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_6 ) NAME VAR_6 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_6 . METHOD_6 ( VAR_4 ) )  VAR_6 . METHOD_6 ( VAR_4 ) (  return VAR_6 ; )  return VAR_6 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  validator = TYPE_1 . METHOD_2 ( ) )  validator = TYPE_1 . METHOD_2 ( ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = org.mockito.Mockito . METHOD_3 ( VAR_2 class ) ) INIT = org.mockito.Mockito . METHOD_3 ( VAR_2 class ) ) VAR VAR (  org.mockito.Mockito.when ( VAR_1 . METHOD_4 ( VAR_3 , VAR_4 ) ) . thenReturn ( VAR_5 ) )  org.mockito.Mockito.when ( VAR_1 . METHOD_4 ( VAR_3 , VAR_4 ) ) . thenReturn ( VAR_5 ) (  org.mockito.Mockito.when ( VAR_1 . METHOD_4 ( VAR_6 , VAR_4 ) ) . thenReturn ( VAR_7 ) )  org.mockito.Mockito.when ( VAR_1 . METHOD_4 ( VAR_6 , VAR_4 ) ) . thenReturn ( VAR_7 ) (  TYPE_3 . METHOD_5 ( VAR_1 ) )  TYPE_3 . METHOD_5 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.Network ) TYPE org.ovirt.engine.core.common.businessentities.Network ( NAME network ) NAME network ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( network == null ) ? null : network . getId ( ) ) INIT = ( network == null ) ? null : network . getId ( ) ) VAR VAR (  return TYPE_2 . METHOD_3 ( new TYPE_1 ( VAR_1 , VAR_2 . Network , TYPE_3 . METHOD_4 ( ) . METHOD_5 ( ) ) ) ; )  return TYPE_2 . METHOD_3 ( new TYPE_1 ( VAR_1 , VAR_2 . Network , TYPE_3 . METHOD_4 ( ) . METHOD_5 ( ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME object ) NAME object ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . METHOD_1 ( object ) )  VAR_1 . METHOD_1 ( object ) (  VAR_2 . METHOD_2 ( object . METHOD_3 ( ) ) )  VAR_2 . METHOD_2 ( object . METHOD_3 ( ) ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( IN object . METHOD_4 ( ) ) IN object . METHOD_4 ( ) ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_5 ) NAME VAR_5 ( INIT = TYPE_3 . METHOD_5 ( VAR_4 ) ) INIT = TYPE_3 . METHOD_5 ( VAR_4 ) ) VAR VAR (  VAR_3 . append ( METHOD_6 ( VAR_5 , VAR_6 ) ) )  VAR_3 . append ( METHOD_6 ( VAR_5 , VAR_6 ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  VAR_7 . METHOD_7 ( VAR_3 . METHOD_8 ( ) ) )  VAR_7 . METHOD_7 ( VAR_3 . METHOD_8 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.Network> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.Network> ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) ) ) INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) ) ) VAR VAR (  TYPE_2 . METHOD_2 ( VAR_2 , new TYPE_3 ( ) ) )  TYPE_2 . METHOD_2 ( VAR_2 , new TYPE_3 ( ) ) ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( ( TYPE_4 ) ( model ) ) ) INIT = ( ( TYPE_4 ) ( model ) ) ) VAR VAR (  VAR_3 . setItems ( VAR_2 ) )  VAR_3 . setItems ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME event ) NAME event ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = event . METHOD_2 ( ) ) INIT = event . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND VAR_2 . METHOD_3 ( ) ) COND VAR_2 . METHOD_3 ( ) ( THEN THEN ( IF IF ( COND VAR_1 != ( VAR_2 . METHOD_2 ( ) ) ) COND VAR_1 != ( VAR_2 . METHOD_2 ( ) ) ( THEN THEN (  VAR_2 . METHOD_4 ( ) )  VAR_2 . METHOD_4 ( ) (  VAR_2 . METHOD_5 ( VAR_1 ) )  VAR_2 . METHOD_5 ( VAR_1 ) (  VAR_2 . METHOD_6 ( ) )  VAR_2 . METHOD_6 ( ) ) THEN THEN ) IF IF ) THEN THEN ( ELSE ELSE (  VAR_2 . METHOD_5 ( VAR_1 ) )  VAR_2 . METHOD_5 ( VAR_1 ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND TYPE_1 . getParameters ( ) . METHOD_2 ( ) ) COND TYPE_1 . getParameters ( ) . METHOD_2 ( ) ( THEN THEN (  METHOD_3 ( ) )  METHOD_3 ( ) ) THEN THEN ( ELSE ELSE (  TYPE_1 . METHOD_4 ( ) . METHOD_5 ( new TYPE_2 ( TYPE_1 . getParameters ( ) . METHOD_6 ( ) , TYPE_1 . getParameters ( ) . METHOD_7 ( ) ) ) )  TYPE_1 . METHOD_4 ( ) . METHOD_5 ( new TYPE_2 ( TYPE_1 . getParameters ( ) . METHOD_6 ( ) , TYPE_1 . getParameters ( ) . METHOD_7 ( ) ) ) (  TYPE_1 . METHOD_8 ( ) )  TYPE_1 . METHOD_8 ( ) ) ELSE ELSE ) IF IF (  TYPE_1 . METHOD_9 ( true ) )  TYPE_1 . METHOD_9 ( true ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<TYPE_1.Disk> ) TYPE java.util.ArrayList<TYPE_1.Disk> ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( METHOD_2 ( ) ) != null ) ? VAR_2 . Linq < TYPE_1 . Disk > METHOD_3 ( METHOD_2 ( ) ) : new java.util.ArrayList < TYPE_1 . Disk > ( ) ) INIT = ( ( METHOD_2 ( ) ) != null ) ? VAR_2 . Linq < TYPE_1 . Disk > METHOD_3 ( METHOD_2 ( ) ) : new java.util.ArrayList < TYPE_1 . Disk > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1.Disk ) TYPE TYPE_1.Disk ( NAME disk ) NAME disk ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( IF IF ( COND ( METHOD_4 ( disk ) ) || ( ( ! ( METHOD_5 ( ) ) ) && ( disk . METHOD_6 ( ) ) ) ) COND ( METHOD_4 ( disk ) ) || ( ( ! ( METHOD_5 ( ) ) ) && ( disk . METHOD_6 ( ) ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  log . METHOD_2 ( STRING_1 ) )  log . METHOD_2 ( STRING_1 ) ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ) TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ( NAME cluster ) NAME cluster ( IN METHOD_3 ( ) . METHOD_4 ( ) ) IN METHOD_3 ( ) . METHOD_4 ( ) ( BLOCK BLOCK ( IF IF ( COND ( TYPE_1 . METHOD_5 ( cluster . METHOD_6 ( ) ) ) && ( cluster . METHOD_7 ( ) ) ) COND ( TYPE_1 . METHOD_5 ( cluster . METHOD_6 ( ) ) ) && ( cluster . METHOD_7 ( ) ) ( THEN THEN ( TRY TRY ( BLOCK BLOCK (  METHOD_8 ( cluster ) )  METHOD_8 ( cluster ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ( BLOCK BLOCK (  log . METHOD_9 ( STRING_2 , cluster . METHOD_10 ( ) , e ) )  log . METHOD_9 ( STRING_2 , cluster . METHOD_10 ( ) , e ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME setSelectedItem ) NAME setSelectedItem ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Integer ) TYPE java.lang.Integer ( NAME value ) NAME value ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( TYPE_1 . METHOD_1 ( value ) ) ) COND ! ( TYPE_1 . METHOD_1 ( value ) ) ( THEN THEN ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) . getSelectedItem ( ) ) INIT = METHOD_2 ( ) . getSelectedItem ( ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ) TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ( NAME cluster ) NAME cluster ( INIT = ( VAR_1 == null ) ? null : VAR_1 . METHOD_3 ( ) ) INIT = ( VAR_1 == null ) ? null : VAR_1 . METHOD_3 ( ) ) VAR VAR ( IF IF ( COND cluster == null ) COND cluster == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  super . setSelectedItem ( TYPE_1 . METHOD_4 ( cluster . METHOD_5 ( ) ) ) )  super . setSelectedItem ( TYPE_1 . METHOD_4 ( cluster . METHOD_5 ( ) ) ) ) THEN THEN ( ELSE ELSE (  super . setSelectedItem ( value ) )  super . setSelectedItem ( value ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<TYPE_2,?> ) TYPE TYPE_1<TYPE_2,?> ( NAME column ) NAME column ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  return ( ( ( ( ( ( VAR_2 ) + STRING_1 ) + ( VAR_3 ) ) + STRING_1 ) + ( METHOD_2 ( ) ) ) + STRING_1 ) + ( METHOD_3 ( METHOD_4 ( column ) ) ) ; )  return ( ( ( ( ( ( VAR_2 ) + STRING_1 ) + ( VAR_3 ) ) + STRING_1 ) + ( METHOD_2 ( ) ) ) + STRING_1 ) + ( METHOD_3 ( METHOD_4 ( column ) ) ) ; ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  org.mockito.Mockito.doReturn ( java.lang.Boolean . FALSE ) . when ( cmd ) . METHOD_3 ( VAR_1 ) )  org.mockito.Mockito.doReturn ( java.lang.Boolean . FALSE ) . when ( cmd ) . METHOD_3 ( VAR_1 ) (  org.mockito.Mockito.doReturn ( TYPE_1 . METHOD_4 ( ) ) . when ( cmd ) . METHOD_5 ( ) )  org.mockito.Mockito.doReturn ( TYPE_1 . METHOD_4 ( ) ) . when ( cmd ) . METHOD_5 ( ) (  TYPE_2 . METHOD_6 ( cmd . METHOD_7 ( ) ) )  TYPE_2 . METHOD_6 ( cmd . METHOD_7 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = INT_1 ) INIT = INT_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME result ) NAME result ( INIT = 1 ) INIT = 1 ) VAR VAR (  result = ( VAR_1 * result ) + ( ( VAR_2 ) == null ? 0 : VAR_2 . METHOD_1 ( ) ) )  result = ( VAR_1 * result ) + ( ( VAR_2 ) == null ? 0 : VAR_2 . METHOD_1 ( ) ) (  result = ( VAR_1 * result ) + ( ( VAR_3 ) == null ? 0 : VAR_3 . METHOD_1 ( ) ) )  result = ( VAR_1 * result ) + ( ( VAR_3 ) == null ? 0 : VAR_3 . METHOD_1 ( ) ) (  result = ( VAR_1 * result ) + ( ( id . vmId ) == null ? 0 : VAR_4 . METHOD_1 ( ) ) )  result = ( VAR_1 * result ) + ( ( id . vmId ) == null ? 0 : VAR_4 . METHOD_1 ( ) ) (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME sender ) NAME sender ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME e ) NAME e ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  super . METHOD_1 ( sender , e ) )  super . METHOD_1 ( sender , e ) ( IF IF ( COND ( ( METHOD_2 ( ) ) != null ) && ( ( METHOD_2 ( ) . METHOD_3 ( ) ) == ( VAR_1 ) ) ) COND ( ( METHOD_2 ( ) ) != null ) && ( ( METHOD_2 ( ) . METHOD_3 ( ) ) == ( VAR_1 ) ) ( THEN THEN ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME storage ) NAME storage ( INIT = ( ( TYPE_2 ) ( METHOD_2 ( ) . getEntity ( ) ) ) ) INIT = ( ( TYPE_2 ) ( METHOD_2 ( ) . getEntity ( ) ) ) ) VAR VAR (  setSelectedItem ( TYPE_3 . METHOD_4 ( VAR_2 . Linq < TYPE_2 > METHOD_5 ( METHOD_6 ( ) ) , new TYPE_4 ( storage . getId ( ) ) ) ) )  setSelectedItem ( TYPE_3 . METHOD_4 ( VAR_2 . Linq < TYPE_2 > METHOD_5 ( METHOD_6 ( ) ) , new TYPE_4 ( storage . getId ( ) ) ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.network.Network ) TYPE org.ovirt.engine.core.common.businessentities.network.Network ( NAME network ) NAME network ( INIT = METHOD_2 ( VAR_1 ) ) INIT = METHOD_2 ( VAR_1 ) ) VAR VAR (  METHOD_3 ( network ) )  METHOD_3 ( network ) ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ( NAME iface ) NAME iface ( INIT = METHOD_4 ( STRING_1 , network ) ) INIT = METHOD_4 ( STRING_1 , network ) ) VAR VAR (  METHOD_5 ( iface ) )  METHOD_5 ( iface ) (  iface . METHOD_6 ( METHOD_7 ( ) ) )  iface . METHOD_6 ( METHOD_7 ( ) ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_8 ( METHOD_9 ( iface ) ) ) INIT = METHOD_8 ( METHOD_9 ( iface ) ) ) VAR VAR (  METHOD_10 ( VAR_2 , VAR_3 , VAR_1 ) )  METHOD_10 ( VAR_2 , VAR_3 , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) , null ) ) )  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) , null ) ) (  METHOD_3 ( ) )  METHOD_3 ( ) (  org.mockito.Mockito . METHOD_4 ( ) . when ( VAR_2 ) . METHOD_5 ( METHOD_6 ( ) , true ) )  org.mockito.Mockito . METHOD_4 ( ) . when ( VAR_2 ) . METHOD_5 ( METHOD_6 ( ) , true ) (  cmd . METHOD_1 ( ) )  cmd . METHOD_1 ( ) (  TYPE_3 . assertEquals ( cmd . METHOD_7 ( ) , VAR_3 ) )  TYPE_3 . assertEquals ( cmd . METHOD_7 ( ) , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( VAR_1 ) )  METHOD_2 ( VAR_1 ) (  assertEquals ( ( ( VAR_2 . length ) * 2 ) , VAR_1 . size ( ) ) )  assertEquals ( ( ( VAR_2 . length ) * 2 ) , VAR_1 . size ( ) ) ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < ( ( VAR_2 . length ) * 2 ) ) COND i < ( ( VAR_2 . length ) * 2 ) ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK (  METHOD_3 ( VAR_1 . get ( i ) , ( i % ( VAR_2 . length ) ) ) )  METHOD_3 ( VAR_1 . get ( i ) , ( i % ( VAR_2 . length ) ) ) ) BLOCK BLOCK ) FOR FOR ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1.ValidationResult ) RETURN TYPE_1.ValidationResult ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( vm . getStatus ( ) ) == ( VAR_1 ) ) && ( ( vm . METHOD_2 ( ) ) != null ) ) COND ( ( vm . getStatus ( ) ) == ( VAR_1 ) ) && ( ( vm . METHOD_2 ( ) ) != null ) ( THEN THEN ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME vds ) NAME vds ( INIT = METHOD_3 ( ) . get ( new org.ovirt.engine.core.compat.Guid ( vm . METHOD_2 ( ) . toString ( ) ) ) ) INIT = METHOD_3 ( ) . get ( new org.ovirt.engine.core.compat.Guid ( vm . METHOD_2 ( ) . toString ( ) ) ) ) VAR VAR ( IF IF ( COND ( vds . getStatus ( ) ) != ( VAR_2 ) ) COND ( vds . getStatus ( ) ) != ( VAR_2 ) ( THEN THEN (  return new TYPE_1 . ValidationResult ( VAR_3 , TYPE_2 . toString ( ) ) ; )  return new TYPE_1 . ValidationResult ( VAR_3 , TYPE_2 . toString ( ) ) ; ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return VAR_4 ; )  return VAR_4 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME sender ) NAME sender ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME e ) NAME e ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( this ) )  METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( this ) (  METHOD_2 ( ) . METHOD_5 ( ) . METHOD_4 ( this ) )  METHOD_2 ( ) . METHOD_5 ( ) . METHOD_4 ( this ) (  METHOD_6 ( false ) )  METHOD_6 ( false ) ( IF IF ( COND ( e . METHOD_7 ( ) ) > INT_1 ) COND ( e . METHOD_7 ( ) ) > INT_1 ( THEN THEN (  METHOD_8 ( ) . METHOD_9 ( this , e ) )  METHOD_8 ( ) . METHOD_9 ( this , e ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.when ( cluster . METHOD_2 ( ) ) . thenReturn ( true ) )  org.mockito.Mockito.when ( cluster . METHOD_2 ( ) ) . thenReturn ( true ) (  validator = org.mockito.Mockito . METHOD_3 ( new TYPE_1 ( VAR_1 , VAR_2 , cluster , VAR_3 ) ) )  validator = org.mockito.Mockito . METHOD_3 ( new TYPE_1 ( VAR_1 , VAR_2 , cluster , VAR_3 ) ) (  org.mockito.Mockito.doReturn ( false ) . when ( validator ) . METHOD_4 ( ) )  org.mockito.Mockito.doReturn ( false ) . when ( validator ) . METHOD_4 ( ) (  TYPE_2 . METHOD_5 ( validator . METHOD_6 ( ) , TYPE_3 . METHOD_7 ( VAR_4 ) ) )  TYPE_2 . METHOD_5 ( validator . METHOD_6 ( ) , TYPE_3 . METHOD_7 ( VAR_4 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( ( getParameters ( ) ) == null ) || ( ( getParameters ( ) . METHOD_2 ( ) ) == null ) ) COND ( ( getParameters ( ) ) == null ) || ( ( getParameters ( ) . METHOD_2 ( ) ) == null ) ( THEN THEN (  addCanDoActionMessage ( VAR_1 ) )  addCanDoActionMessage ( VAR_1 ) (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME quota ) NAME quota ( INIT = METHOD_3 ( ) ) INIT = METHOD_3 ( ) ) VAR VAR ( IF IF ( COND quota == null ) COND quota == null ( THEN THEN (  addCanDoActionMessage ( VAR_1 ) )  addCanDoActionMessage ( VAR_1 ) (  return false ; )  return false ; ) THEN THEN ) IF IF ( IF IF ( COND METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( quota ) ) COND METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( quota ) ( THEN THEN (  addCanDoActionMessage ( VAR_2 ) )  addCanDoActionMessage ( VAR_2 ) (  return false ; )  return false ; ) THEN THEN ) IF IF (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME version ) NAME version ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source != null ? ( ( java.lang.Boolean ) ( source ) ) . METHOD_2 ( ) : true ; )  return source != null ? ( ( java.lang.Boolean ) ( source ) ) . METHOD_2 ( ) : true ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Boolean ) ( source ) ) . METHOD_2 ( ) : true ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Boolean ) ( source ) ) . METHOD_2 ( ) : true ; } } ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME tempVar ) NAME tempVar ( INIT = new TYPE_1 ( VAR_1 ) ) INIT = new TYPE_1 ( VAR_1 ) ) VAR VAR (  tempVar . METHOD_3 ( version ) )  tempVar . METHOD_3 ( version ) (  TYPE_2 . METHOD_4 ( tempVar , aQuery ) )  TYPE_2 . METHOD_4 ( tempVar , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( result == null ) || ( ! ( result instanceof java.lang.Object [ ] ) ) ) COND ( result == null ) || ( ! ( result instanceof java.lang.Object [ ] ) ) ( THEN THEN (  VAR_1 . METHOD_2 ( STRING_1 ) )  VAR_1 . METHOD_2 ( STRING_1 ) ) THEN THEN ) IF IF ( VAR VAR ( TYPE java.lang.Object[] ) TYPE java.lang.Object[] ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( java.lang.Object [ ] ) ( result ) ) ) INIT = ( ( java.lang.Object [ ] ) ( result ) ) ) VAR VAR ( IF IF ( COND ( VAR_2 . length ) != 1 ) COND ( VAR_2 . length ) != 1 ( THEN THEN (  VAR_1 . METHOD_2 ( STRING_2 ) )  VAR_1 . METHOD_2 ( STRING_2 ) ) THEN THEN ) IF IF ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = STRING_3 + ( VAR_2 [ 0 ] . toString ( ) ) ) INIT = STRING_3 + ( VAR_2 [ 0 ] . toString ( ) ) ) VAR VAR (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME returnValue ) NAME returnValue ( INIT = METHOD_2 ( VAR_3 , new TYPE_3 ( TYPE_4 . METHOD_3 ( ) , VAR_1 , VAR_2 ) ) ) INIT = METHOD_2 ( VAR_3 , new TYPE_3 ( TYPE_4 . METHOD_3 ( ) , VAR_1 , VAR_2 ) ) ) VAR VAR ( IF IF ( COND ! ( returnValue . getSucceeded ( ) ) ) COND ! ( returnValue . getSucceeded ( ) ) ( THEN THEN (  VAR_4 . log ( new TYPE_5 ( TYPE_4 . METHOD_3 ( ) ) , VAR_5 ) )  VAR_4 . log ( new TYPE_5 ( TYPE_4 . METHOD_3 ( ) ) , VAR_5 ) (  log . error ( STRING_1 , TYPE_4 . METHOD_4 ( ) . getName ( ) ) )  log . error ( STRING_1 , TYPE_4 . METHOD_4 ( ) . getName ( ) ) (  return false ; )  return false ; ) THEN THEN ) IF IF (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME quota ) NAME quota ) VAR VAR ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( ) . METHOD_3 ( quota . METHOD_4 ( ) ) ) INIT = METHOD_2 ( ) . METHOD_3 ( quota . METHOD_4 ( ) ) ) VAR VAR ( IF IF ( COND ( VAR_2 != null ) && ( ! ( VAR_2 . getId ( ) . equals ( quota . getId ( ) ) ) ) ) COND ( VAR_2 != null ) && ( ! ( VAR_2 . getId ( ) . equals ( quota . getId ( ) ) ) ) ( THEN THEN (  VAR_1 . add ( TYPE_2 . toString ( ) ) )  VAR_1 . add ( TYPE_2 . toString ( ) ) (  return false ; )  return false ; ) THEN THEN ) IF IF (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.doReturn ( METHOD_2 ( VAR_1 , VAR_2 ) ) . when ( VAR_3 ) . METHOD_3 ( VAR_1 ) )  org.mockito.Mockito.doReturn ( METHOD_2 ( VAR_1 , VAR_2 ) ) . when ( VAR_3 ) . METHOD_3 ( VAR_1 ) (  org.mockito.Mockito.doReturn ( METHOD_2 ( VAR_4 , VAR_2 ) ) . when ( VAR_3 ) . METHOD_3 ( VAR_4 ) )  org.mockito.Mockito.doReturn ( METHOD_2 ( VAR_4 , VAR_2 ) ) . when ( VAR_3 ) . METHOD_3 ( VAR_4 ) (  org.mockito.Mockito.doReturn ( METHOD_2 ( VAR_5 , VAR_2 ) ) . when ( VAR_3 ) . METHOD_3 ( VAR_5 ) )  org.mockito.Mockito.doReturn ( METHOD_2 ( VAR_5 , VAR_2 ) ) . when ( VAR_3 ) . METHOD_3 ( VAR_5 ) (  org.mockito.Mockito.doReturn ( METHOD_4 ( VAR_6 , VAR_2 ) ) . when ( VAR_7 ) . METHOD_5 ( VAR_6 ) )  org.mockito.Mockito.doReturn ( METHOD_4 ( VAR_6 , VAR_2 ) ) . when ( VAR_7 ) . METHOD_5 ( VAR_6 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME value ) NAME value ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME item ) NAME item ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_2 . METHOD_2 ( ( ! VAR_1 ) ) )  VAR_2 . METHOD_2 ( ( ! VAR_1 ) ) (  VAR_2 . METHOD_3 ( ) . METHOD_2 ( true ) )  VAR_2 . METHOD_3 ( ) . METHOD_2 ( true ) ( IF IF ( COND ! VAR_1 ) COND ! VAR_1 ( THEN THEN (  VAR_3 . add ( value . METHOD_4 ( ) ) )  VAR_3 . add ( value . METHOD_4 ( ) ) ) THEN THEN ) IF IF (  VAR_4 += ( VAR_1 ) ? - 1 : 1 )  VAR_4 += ( VAR_1 ) ? - 1 : 1 (  METHOD_5 ( ) )  METHOD_5 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_1 . setId ( VAR_2 ) )  VAR_1 . setId ( VAR_2 ) (  VAR_1 . METHOD_2 ( new TYPE_2 ( ) ) )  VAR_1 . METHOD_2 ( new TYPE_2 ( ) ) (  VAR_1 . getVm ( ) . setId ( VAR_3 ) )  VAR_1 . getVm ( ) . setId ( VAR_3 ) (  TYPE_3 . METHOD_3 ( METHOD_4 ( ) , VAR_1 ) )  TYPE_3 . METHOD_3 ( METHOD_4 ( ) , VAR_1 ) (  assertEquals ( VAR_4 , VAR_1 . METHOD_5 ( ) ) )  assertEquals ( VAR_4 , VAR_1 . METHOD_5 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ( INIT = ( ( TYPE_1 ) ( getWindow ( ) ) ) ) INIT = ( ( TYPE_1 ) ( getWindow ( ) ) ) ) VAR VAR ( IF IF ( COND ( model . METHOD_2 ( ) ) != null ) COND ( model . METHOD_2 ( ) ) != null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  model . METHOD_3 ( null ) )  model . METHOD_3 ( null ) (  METHOD_4 ( model ) )  METHOD_4 ( model ) (  new TYPE_2 ( this , model , getEntity ( ) ) . METHOD_5 ( ) )  new TYPE_2 ( this , model , getEntity ( ) ) . METHOD_5 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  this . VAR_2 = new TYPE_3 ( VAR_3 , METHOD_2 ( this . client ) , VAR_1 ) )  this . VAR_2 = new TYPE_3 ( VAR_3 , METHOD_2 ( this . client ) , VAR_1 ) (  this . VAR_2 . METHOD_3 ( ) )  this . VAR_2 . METHOD_3 ( ) ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_5 ) INIT = VAR_5 ) VAR VAR (  VAR_6 . METHOD_4 ( ) )  VAR_6 . METHOD_4 ( ) (  VAR_7 = this . VAR_3 . METHOD_5 ( VAR_8 , ( VAR_4 |= VAR_9 ) , this ) )  VAR_7 = this . VAR_3 . METHOD_5 ( VAR_8 , ( VAR_4 |= VAR_9 ) , this ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4|TYPE_5 ) TYPE TYPE_4|TYPE_5 ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_10 . error ( STRING_1 , e ) )  VAR_10 . error ( STRING_1 , e ) (  throw new TYPE_2 ( e ) ; )  throw new TYPE_2 ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) , null ) ) )  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) , null ) ) (  METHOD_3 ( cmd ) )  METHOD_3 ( cmd ) (  METHOD_4 ( cmd , true ) )  METHOD_4 ( cmd , true ) (  cmd . METHOD_1 ( ) )  cmd . METHOD_1 ( ) (  TYPE_3 . assertEquals ( cmd . METHOD_5 ( ) , VAR_2 ) )  TYPE_3 . assertEquals ( cmd . METHOD_5 ( ) , VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME sender ) NAME sender ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME e ) NAME e ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( this ) )  METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( this ) (  METHOD_2 ( ) . METHOD_5 ( ) . METHOD_6 ( ) )  METHOD_2 ( ) . METHOD_5 ( ) . METHOD_6 ( ) (  METHOD_2 ( ) . METHOD_3 ( ) . METHOD_7 ( this ) )  METHOD_2 ( ) . METHOD_3 ( ) . METHOD_7 ( this ) (  METHOD_8 ( VAR_1 . System , null ) )  METHOD_8 ( VAR_1 . System , null ) (  METHOD_9 ( STRING_1 ) )  METHOD_9 ( STRING_1 ) (  METHOD_10 ( e . METHOD_11 ( ) . METHOD_12 ( ) ) )  METHOD_10 ( e . METHOD_11 ( ) . METHOD_12 ( ) ) (  METHOD_13 ( ) . METHOD_6 ( ) )  METHOD_13 ( ) . METHOD_6 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = org.mockito.Mockito . METHOD_2 ( VAR_2 class ) ) INIT = org.mockito.Mockito . METHOD_2 ( VAR_2 class ) ) VAR VAR (  org.mockito.Mockito.when ( VAR_1 . METHOD_3 ( VAR_3 , METHOD_4 ( ) . METHOD_5 ( ) , METHOD_6 ( ) . METHOD_7 ( ) ) ) . thenReturn ( VAR_4 ) )  org.mockito.Mockito.when ( VAR_1 . METHOD_3 ( VAR_3 , METHOD_4 ( ) . METHOD_5 ( ) , METHOD_6 ( ) . METHOD_7 ( ) ) ) . thenReturn ( VAR_4 ) (  org.mockito.Mockito.when ( METHOD_8 ( ) . METHOD_9 ( ) ) . thenReturn ( VAR_1 ) )  org.mockito.Mockito.when ( METHOD_8 ( ) . METHOD_9 ( ) ) . thenReturn ( VAR_1 ) (  METHOD_10 ( true ) )  METHOD_10 ( true ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_2 . add ( new TYPE_2 < TYPE_1 , java.lang.Integer > ( VAR_1 , 1 ) ) )  VAR_2 . add ( new TYPE_2 < TYPE_1 , java.lang.Integer > ( VAR_1 , 1 ) ) ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < ( VAR_3 . size ( ) ) ) COND i < ( VAR_3 . size ( ) ) ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK ( IF IF ( COND VAR_3 . get ( i ) . getId ( ) . equals ( VAR_1 . getId ( ) ) ) COND VAR_3 . get ( i ) . getId ( ) . equals ( VAR_1 . getId ( ) ) ( THEN THEN (  VAR_3 . METHOD_2 ( VAR_1 ) )  VAR_3 . METHOD_2 ( VAR_1 ) (  break ; )  break ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR FOR (  METHOD_3 ( null , false ) )  METHOD_3 ( null , false ) (  METHOD_4 ( ) . METHOD_5 ( this , VAR_4 ) )  METHOD_4 ( ) . METHOD_5 ( this , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1<TYPE_2,TYPE_3> ) RETURN TYPE_1<TYPE_2,TYPE_3> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<TYPE_2,TYPE_3> ) TYPE TYPE_1<TYPE_2,TYPE_3> ( NAME result ) NAME result ( INIT = new TYPE_1 < TYPE_2 , TYPE_3 > ( ) ) INIT = new TYPE_1 < TYPE_2 , TYPE_3 > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_4 ) IN VAR_4 ( BLOCK BLOCK ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_1 ) INIT = VAR_1 ) VAR VAR (  VAR_1 = TYPE_4 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) )  VAR_1 = TYPE_4 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ( IF IF ( COND VAR_1 >= 1 ) COND VAR_1 >= 1 ( THEN THEN (  result . METHOD_3 ( VAR_1 ) )  result . METHOD_3 ( VAR_1 ) (  result . METHOD_4 ( VAR_3 ) )  result . METHOD_4 ( VAR_3 ) (  break ; )  break ; ) THEN THEN ) IF IF (  VAR_1 = VAR_5 )  VAR_1 = VAR_5 ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN java.util.Map<java.lang.String,TYPE_1<java.lang.String,java.lang.String>> ) RETURN java.util.Map<java.lang.String,TYPE_1<java.lang.String,java.lang.String>> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<java.lang.String,TYPE_1<java.lang.String,java.lang.String>> ) TYPE java.util.Map<java.lang.String,TYPE_1<java.lang.String,java.lang.String>> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.HashMap < > ( ) ) INIT = new java.util.HashMap < > ( ) ) VAR VAR (  VAR_1 . put ( TYPE_2 . METHOD_2 ( ) . METHOD_2 ( ) , TYPE_3 . METHOD_3 ( VAR_2 , VAR_3 ) ) )  VAR_1 . put ( TYPE_2 . METHOD_2 ( ) . METHOD_2 ( ) , TYPE_3 . METHOD_3 ( VAR_2 , VAR_3 ) ) (  VAR_1 . put ( TYPE_2 . METHOD_2 ( ) . METHOD_4 ( ) , TYPE_3 . METHOD_3 ( VAR_2 , VAR_3 ) ) )  VAR_1 . put ( TYPE_2 . METHOD_2 ( ) . METHOD_4 ( ) , TYPE_3 . METHOD_3 ( VAR_2 , VAR_3 ) ) (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.DiskImage ) TYPE org.ovirt.engine.core.common.businessentities.DiskImage ( NAME disk ) NAME disk ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return new TYPE_1 ( new TYPE_2 ( disk . METHOD_2 ( ) , VAR_1 ) , VAR_2 , TYPE_3 . getName ( ) , STRING_1 , 1 , null , true , true , true , STRING_1 ) ; )  return new TYPE_1 ( new TYPE_2 ( disk . METHOD_2 ( ) , VAR_1 ) , VAR_2 , TYPE_3 . getName ( ) , STRING_1 , 1 , null , true , true , true , STRING_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDSGroup> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDSGroup> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( model . METHOD_2 ( ) . METHOD_3 ( ) ) != null ) && ( ( model . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) != ( VAR_4 . System ) ) ) COND ( ( model . METHOD_2 ( ) . METHOD_3 ( ) ) != null ) && ( ( model . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) != ( VAR_4 . System ) ) ( THEN THEN (  METHOD_5 ( model , VAR_1 , VAR_2 , VAR_3 ) )  METHOD_5 ( model , VAR_1 , VAR_2 , VAR_3 ) ) THEN THEN ( ELSE ELSE (  METHOD_6 ( model , VAR_1 , VAR_2 , VAR_3 ) )  METHOD_6 ( model , VAR_1 , VAR_2 , VAR_3 ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_1 . METHOD_2 ( VAR_2 ) ) ) COND ! ( VAR_1 . METHOD_2 ( VAR_2 ) ) ( THEN THEN (  VAR_1 . put ( VAR_2 , new TYPE_1 ( ) ) )  VAR_1 . put ( VAR_2 , new TYPE_1 ( ) ) (  METHOD_3 ( ) . setItems ( new java.util.ArrayList < java.lang.String > ( VAR_1 . METHOD_4 ( ) ) ) )  METHOD_3 ( ) . setItems ( new java.util.ArrayList < java.lang.String > ( VAR_1 . METHOD_4 ( ) ) ) ) THEN THEN ) IF IF (  METHOD_3 ( ) . setSelectedItem ( VAR_2 ) )  METHOD_3 ( ) . setSelectedItem ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . METHOD_1 ( STRING_1 ) )  VAR_1 . METHOD_1 ( STRING_1 ) (  VAR_2 . METHOD_2 ( VAR_3 . getModel ( ) , result ) )  VAR_2 . METHOD_2 ( VAR_3 . getModel ( ) , result ) ( IF IF ( COND ( org.ovirt.engine.ui.frontend.Frontend . METHOD_3 ( ) ) != null ) COND ( org.ovirt.engine.ui.frontend.Frontend . METHOD_3 ( ) ) != null ( THEN THEN (  org.ovirt.engine.ui.frontend.Frontend . METHOD_3 ( ) . METHOD_4 ( ) )  org.ovirt.engine.ui.frontend.Frontend . METHOD_3 ( ) . METHOD_4 ( ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.doReturn ( METHOD_2 ( 0 ) ) . when ( VAR_1 ) . METHOD_3 ( VAR_2 [ 0 ] ) )  org.mockito.Mockito.doReturn ( METHOD_2 ( 0 ) ) . when ( VAR_1 ) . METHOD_3 ( VAR_2 [ 0 ] ) (  org.mockito.Mockito.doReturn ( METHOD_2 ( 1 ) ) . when ( VAR_1 ) . METHOD_3 ( VAR_2 [ 1 ] ) )  org.mockito.Mockito.doReturn ( METHOD_2 ( 1 ) ) . when ( VAR_1 ) . METHOD_3 ( VAR_2 [ 1 ] ) (  org.mockito.Mockito.doReturn ( new java.util.ArrayList < TYPE_1 > ( ) ) . when ( VAR_3 ) . METHOD_4 ( VAR_2 [ 0 ] ) )  org.mockito.Mockito.doReturn ( new java.util.ArrayList < TYPE_1 > ( ) ) . when ( VAR_3 ) . METHOD_4 ( VAR_2 [ 0 ] ) (  org.mockito.Mockito.doReturn ( new java.util.ArrayList < TYPE_1 > ( ) ) . when ( VAR_3 ) . METHOD_4 ( VAR_2 [ 1 ] ) )  org.mockito.Mockito.doReturn ( new java.util.ArrayList < TYPE_1 > ( ) ) . when ( VAR_3 ) . METHOD_4 ( VAR_2 [ 1 ] ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  ( VAR_1 ) ++ )  ( VAR_1 ) ++ ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME quota ) NAME quota ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  quota . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) )  quota . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) (  quota . METHOD_3 ( VAR_2 . getId ( ) . getValue ( ) ) )  quota . METHOD_3 ( VAR_2 . getId ( ) . getValue ( ) ) (  quota . METHOD_4 ( STRING_1 ) )  quota . METHOD_4 ( STRING_1 ) (  quota . METHOD_5 ( STRING_2 ) )  quota . METHOD_5 ( STRING_2 ) (  quota . METHOD_6 ( INT_1 ) )  quota . METHOD_6 ( INT_1 ) (  quota . METHOD_7 ( INT_1 ) )  quota . METHOD_7 ( INT_1 ) (  quota . METHOD_8 ( INT_2 ) )  quota . METHOD_8 ( INT_2 ) (  quota . METHOD_9 ( INT_2 ) )  quota . METHOD_9 ( INT_2 ) (  quota . METHOD_10 ( VAR_3 ) )  quota . METHOD_10 ( VAR_3 ) (  return quota ; )  return quota ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( VAR_2 ) )  org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( VAR_2 ) (  VAR_3 . METHOD_3 ( VAR_1 , VAR_4 , VAR_5 ) )  VAR_3 . METHOD_3 ( VAR_1 , VAR_4 , VAR_5 ) (  org.mockito.Mockito . METHOD_4 ( VAR_5 ) . METHOD_3 ( VAR_1 , VAR_4 ) )  org.mockito.Mockito . METHOD_4 ( VAR_5 ) . METHOD_3 ( VAR_1 , VAR_4 ) (  org.mockito.Mockito . METHOD_4 ( VAR_4 , org.mockito.Mockito . METHOD_5 ( 1 ) ) . METHOD_6 ( ( ( TYPE_3 ) ( org.mockito.Mockito . any ( ) ) ) ) )  org.mockito.Mockito . METHOD_4 ( VAR_4 , org.mockito.Mockito . METHOD_5 ( 1 ) ) . METHOD_6 ( ( ( TYPE_3 ) ( org.mockito.Mockito . any ( ) ) ) ) (  org.mockito.Mockito . METHOD_4 ( VAR_1 ) . METHOD_7 ( VAR_6 , VAR_7 ) )  org.mockito.Mockito . METHOD_4 ( VAR_1 ) . METHOD_7 ( VAR_6 , VAR_7 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ( INIT = dao . get ( VAR_1 . getId ( ) ) ) INIT = dao . get ( VAR_1 . getId ( ) ) ) VAR VAR (  TYPE_2 . METHOD_2 ( result ) )  TYPE_2 . METHOD_2 ( result ) (  TYPE_2 . assertEquals ( dao . METHOD_3 ( ) , 2 ) )  TYPE_2 . assertEquals ( dao . METHOD_3 ( ) , 2 ) (  result = dao . get ( VAR_1 . getId ( ) ) )  result = dao . get ( VAR_1 . getId ( ) ) (  TYPE_2 . METHOD_4 ( result ) )  TYPE_2 . METHOD_4 ( result ) (  TYPE_2 . assertEquals ( dao . METHOD_3 ( ) , 0 ) )  TYPE_2 . assertEquals ( dao . METHOD_3 ( ) , 0 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.Object> ) TYPE java.util.Map<java.lang.String,java.lang.Object> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_2 . put ( VAR_3 , VAR_1 . METHOD_2 ( ) ) )  VAR_2 . put ( VAR_3 , VAR_1 . METHOD_2 ( ) ) (  VAR_2 . put ( VAR_4 , VAR_1 . METHOD_3 ( ) ) )  VAR_2 . put ( VAR_4 , VAR_1 . METHOD_3 ( ) ) (  VAR_2 . put ( VAR_5 , STRING_1 ) )  VAR_2 . put ( VAR_5 , STRING_1 ) (  VAR_2 . put ( VAR_6 , VAR_7 ) )  VAR_2 . put ( VAR_6 , VAR_7 ) (  VAR_2 . put ( VAR_8 , java.lang.String.valueOf ( VAR_1 . METHOD_4 ( ) ) ) )  VAR_2 . put ( VAR_8 , java.lang.String.valueOf ( VAR_1 . METHOD_4 ( ) ) ) (  VAR_2 . put ( VAR_9 , TYPE_2 . toString ( ) ) )  VAR_2 . put ( VAR_9 , TYPE_2 . toString ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_2 ( ) )  super . METHOD_2 ( ) (  METHOD_3 ( ) )  METHOD_3 ( ) ( IF IF ( COND ( TYPE_1 . getVm ( ) ) != null ) COND ( TYPE_1 . getVm ( ) ) != null ( THEN THEN (  METHOD_4 ( TYPE_1 . getVm ( ) . METHOD_5 ( ) , TYPE_1 . METHOD_6 ( ) ) )  METHOD_4 ( TYPE_1 . getVm ( ) . METHOD_5 ( ) , TYPE_1 . METHOD_6 ( ) ) ) THEN THEN ) IF IF (  METHOD_7 ( ) )  METHOD_7 ( ) (  TYPE_1 . METHOD_8 ( true ) )  TYPE_1 . METHOD_8 ( true ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( IN VAR_1 . METHOD_2 ( ) ) IN VAR_1 . METHOD_2 ( ) ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) ) INIT = VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) ) VAR VAR ( IF IF ( COND VAR_3 == null ) COND VAR_3 == null ( THEN THEN (  continue ; )  continue ; ) THEN THEN ) IF IF ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( IN METHOD_2 ( ) ) IN METHOD_2 ( ) ( BLOCK BLOCK ( IF IF ( COND VAR_3 . equals ( VAR_4 . METHOD_3 ( ) . METHOD_4 ( ) ) ) COND VAR_3 . equals ( VAR_4 . METHOD_3 ( ) . METHOD_4 ( ) ) ( THEN THEN (  VAR_4 . METHOD_5 ( VAR_2 . METHOD_6 ( ) ) )  VAR_4 . METHOD_5 ( VAR_2 . METHOD_6 ( ) ) (  break ; )  break ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) ( IF IF ( COND ( VAR_1 ) == ( VAR_2 ) ) COND ( VAR_1 ) == ( VAR_2 ) ( THEN THEN ) THEN THEN ( ELSE ELSE ( IF IF ( COND ( VAR_1 ) == ( VAR_3 ) ) COND ( VAR_1 ) == ( VAR_3 ) ( THEN THEN (  METHOD_3 ( VAR_4 , VAR_5 ) )  METHOD_3 ( VAR_4 , VAR_5 ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND ( VAR_1 ) == ( VAR_6 ) ) COND ( VAR_1 ) == ( VAR_6 ) ( THEN THEN (  METHOD_3 ( VAR_5 ) )  METHOD_3 ( VAR_5 ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND ( VAR_1 ) == ( VAR_7 ) ) COND ( VAR_1 ) == ( VAR_7 ) ( THEN THEN (  METHOD_3 ( VAR_8 ) )  METHOD_3 ( VAR_8 ) ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_2.VdcQueryReturnValue> ) TYPE java.util.List<TYPE_2.VdcQueryReturnValue> ( NAME VAR_1 ) NAME VAR_1 ( INIT = result . METHOD_2 ( ) ) INIT = result . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VmTemplate> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VmTemplate> ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmTemplate > ) ( VAR_1 . get ( 0 ) . getReturnValue ( ) ) ) ) INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmTemplate > ) ( VAR_1 . get ( 0 ) . getReturnValue ( ) ) ) ) VAR VAR (  METHOD_3 ( VAR_2 ) )  METHOD_3 ( VAR_2 ) (  METHOD_4 ( ) )  METHOD_4 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( VAR_2 class ) ) INIT = new TYPE_2 ( VAR_2 class ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_3 . METHOD_2 ( VAR_1 . METHOD_3 ( STRING_1 ) ) ) INIT = TYPE_3 . METHOD_2 ( VAR_1 . METHOD_3 ( STRING_1 ) ) ) VAR VAR (  VAR_4 . METHOD_4 ( VAR_3 ) )  VAR_4 . METHOD_4 ( VAR_3 ) (  TYPE_4 . METHOD_5 ( STRING_2 , VAR_3 . METHOD_6 ( STRING_2 ) ) )  TYPE_4 . METHOD_5 ( STRING_2 , VAR_3 . METHOD_6 ( STRING_2 ) ) (  TYPE_4 . METHOD_5 ( STRING_3 , VAR_3 . METHOD_6 ( STRING_3 ) ) )  TYPE_4 . METHOD_5 ( STRING_3 , VAR_3 . METHOD_6 ( STRING_3 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( VAR_2 , VAR_3 ) ) INIT = TYPE_2 . METHOD_2 ( VAR_2 , VAR_3 ) ) VAR VAR (  TYPE_3 . assertEquals ( VAR_1 . getName ( ) , VAR_3 ) )  TYPE_3 . assertEquals ( VAR_1 . getName ( ) , VAR_3 ) (  TYPE_3 . assertEquals ( VAR_1 . METHOD_3 ( ) , VAR_2 ) )  TYPE_3 . assertEquals ( VAR_1 . METHOD_3 ( ) , VAR_2 ) (  TYPE_3 . METHOD_4 ( VAR_1 . getId ( ) ) )  TYPE_3 . METHOD_4 ( VAR_1 . getId ( ) ) (  TYPE_3 . assertEquals ( VAR_1 . METHOD_5 ( ) , VAR_4 ) )  TYPE_3 . assertEquals ( VAR_1 . METHOD_5 ( ) , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1.ValidationResult ) RETURN TYPE_1.ValidationResult ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_3<org.ovirt.engine.core.compat.Guid,TYPE_4> ) TYPE TYPE_3<org.ovirt.engine.core.compat.Guid,TYPE_4> ( NAME VAR_2 ) NAME VAR_2 ( IN VAR_3 . METHOD_2 ( ) ) IN VAR_3 . METHOD_2 ( ) ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.ValidationResult ) TYPE TYPE_1.ValidationResult ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_1 . METHOD_3 ( METHOD_4 ( VAR_2 ) ) ) INIT = VAR_1 . METHOD_3 ( METHOD_4 ( VAR_2 ) ) ) VAR VAR ( IF IF ( COND ! ( VAR_4 . METHOD_5 ( ) ) ) COND ! ( VAR_4 . METHOD_5 ( ) ) ( THEN THEN (  return VAR_4 ; )  return VAR_4 ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_5 ; )  return VAR_5 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN org.ovirt.engine.core.compat.Guid ) RETURN org.ovirt.engine.core.compat.Guid ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME pool ) NAME pool ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME type ) NAME type ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME returnValue ) NAME returnValue ( INIT = VAR_1 ) INIT = VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( pool ) ) INIT = METHOD_2 ( pool ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME domain ) NAME domain ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK ( IF IF ( COND ( domain . METHOD_3 ( ) ) == type ) COND ( domain . METHOD_3 ( ) ) == type ( THEN THEN (  returnValue = domain . getId ( ) )  returnValue = domain . getId ( ) (  break ; )  break ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return returnValue ; )  return returnValue ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( VAR_1 , VAR_2 ) )  METHOD_2 ( VAR_1 , VAR_2 ) ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ) TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_3 ( VAR_1 ) ) INIT = METHOD_3 ( VAR_1 ) ) VAR VAR (  VAR_3 . METHOD_4 ( VAR_4 ) )  VAR_3 . METHOD_4 ( VAR_4 ) ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ) TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME VAR_5 ) NAME VAR_5 ( INIT = METHOD_3 ( VAR_2 ) ) INIT = METHOD_3 ( VAR_2 ) ) VAR VAR (  VAR_5 . METHOD_4 ( VAR_4 ) )  VAR_5 . METHOD_4 ( VAR_4 ) (  METHOD_5 ( VAR_6 , VAR_7 ) )  METHOD_5 ( VAR_6 , VAR_7 ) (  METHOD_6 ( VAR_8 , org.ovirt.engine.core.compat.Guid . METHOD_7 ( ) , VAR_6 ) )  METHOD_6 ( VAR_8 , org.ovirt.engine.core.compat.Guid . METHOD_7 ( ) , VAR_6 ) (  org.mockito.Mockito.doReturn ( false ) . when ( command ) . METHOD_8 ( ) )  org.mockito.Mockito.doReturn ( false ) . when ( command ) . METHOD_8 ( ) (  TYPE_1 . METHOD_9 ( command . validate ( ) ) )  TYPE_1 . METHOD_9 ( command . validate ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.List<org.ovirt.engine.core.compat.Guid> ) RETURN java.util.List<org.ovirt.engine.core.compat.Guid> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.compat.Guid> ) TYPE java.util.List<org.ovirt.engine.core.compat.Guid> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( TYPE_1 . METHOD_2 ( ) ) ) INIT = new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( TYPE_1 . METHOD_2 ( ) ) ) VAR VAR ( IF IF ( COND ( TYPE_1 . METHOD_3 ( ) ) != null ) COND ( TYPE_1 . METHOD_3 ( ) ) != null ( THEN THEN (  VAR_1 . add ( TYPE_1 . METHOD_3 ( ) ) )  VAR_1 . add ( TYPE_1 . METHOD_3 ( ) ) ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  cmd . METHOD_2 ( VAR_1 ) )  cmd . METHOD_2 ( VAR_1 ) (  METHOD_3 ( true , VAR_2 , true , null ) )  METHOD_3 ( true , VAR_2 , true , null ) (  TYPE_1 . METHOD_4 ( cmd . validate ( ) ) )  TYPE_1 . METHOD_4 ( cmd . validate ( ) ) (  cmd . METHOD_5 ( ) )  cmd . METHOD_5 ( ) (  org.mockito.Mockito . METHOD_6 ( cmd ) . METHOD_7 ( TYPE_2 . METHOD_8 ( VAR_2 ) , TYPE_2 . METHOD_9 ( ) , TYPE_2 . METHOD_8 ( true ) ) )  org.mockito.Mockito . METHOD_6 ( cmd ) . METHOD_7 ( TYPE_2 . METHOD_8 ( VAR_2 ) , TYPE_2 . METHOD_9 ( ) , TYPE_2 . METHOD_8 ( true ) ) (  org.mockito.Mockito . METHOD_6 ( cmd ) . METHOD_10 ( ) )  org.mockito.Mockito . METHOD_6 ( cmd ) . METHOD_10 ( ) (  TYPE_1 . assertEquals ( VAR_3 , cmd . METHOD_11 ( ) ) )  TYPE_1 . assertEquals ( VAR_3 , cmd . METHOD_11 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 == null ) || ( VAR_1 . METHOD_2 ( ) . isEmpty ( ) ) ) COND ( VAR_1 == null ) || ( VAR_1 . METHOD_2 ( ) . isEmpty ( ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  return TYPE_1 . METHOD_3 ( VAR_1 ) ? TYPE_2 . METHOD_4 ( VAR_1 ) : TYPE_2 . METHOD_5 ( VAR_1 ) ; )  return TYPE_1 . METHOD_3 ( VAR_1 ) ? TYPE_2 . METHOD_4 ( VAR_1 ) : TYPE_2 . METHOD_5 ( VAR_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1.AuditLogType ) RETURN TYPE_1.AuditLogType ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( TYPE_2 . METHOD_2 ( ) . getStatus ( ) ) == ( VAR_1 ) ) COND ( TYPE_2 . METHOD_2 ( ) . getStatus ( ) ) == ( VAR_1 ) ( THEN THEN (  return VAR_2 ; )  return VAR_2 ; ) THEN THEN ) IF IF ( IF IF ( COND ( METHOD_3 ( ) ) == null ) COND ( METHOD_3 ( ) ) == null ( THEN THEN (  return VAR_3 ; )  return VAR_3 ; ) THEN THEN ) IF IF (  return VAR_4 ; )  return VAR_4 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 . METHOD_2 ( name ) ) COND VAR_1 . METHOD_2 ( name ) ( THEN THEN (  return ( ( java.lang.String ) ( ( VAR_1 . METHOD_3 ( name ) ) instanceof java.lang.String ? VAR_1 . METHOD_3 ( name ) : null ) ) ; )  return ( ( java.lang.String ) ( ( VAR_1 . METHOD_3 ( name ) ) instanceof java.lang.String ? VAR_1 . METHOD_3 ( name ) : null ) ) ; ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME pool ) NAME pool ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME user ) NAME user ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.Object> ) TYPE java.util.Map<java.lang.String,java.lang.Object> ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = ( ( TYPE_1 ) ( METHOD_2 ( pool , VAR_3 ) . VAR_5 . METHOD_3 ( new TYPE_2 ( user , VAR_1 , VAR_2 ) ) ) ) ) INIT = ( ( TYPE_1 ) ( METHOD_2 ( pool , VAR_3 ) . VAR_5 . METHOD_3 ( new TYPE_2 ( user , VAR_1 , VAR_2 ) ) ) ) ) VAR VAR ( IF IF ( COND ( VAR_4 . METHOD_4 ( ) ) != ( VAR_6 ) ) COND ( VAR_4 . METHOD_4 ( ) ) != ( VAR_6 ) ( THEN THEN (  throw new TYPE_3 ( VAR_4 ) ; )  throw new TYPE_3 ( VAR_4 ) ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) . METHOD_3 ( ) ) INIT = METHOD_2 ( ) . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StoragePool ) TYPE org.ovirt.engine.core.common.businessentities.StoragePool ( NAME VAR_2 ) NAME VAR_2 ( INIT = getEntity ( ) ) INIT = getEntity ( ) ) VAR VAR ( IF IF ( COND ( VAR_1 != null ) && ( VAR_2 != null ) ) COND ( VAR_1 != null ) && ( VAR_2 != null ) ( THEN THEN ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_2 . METHOD_4 ( ) ) INIT = VAR_2 . METHOD_4 ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( IF IF ( COND VAR_3 == null ? VAR_4 . METHOD_5 ( ) : VAR_3 . equals ( VAR_4 . getId ( ) ) ) COND VAR_3 == null ? VAR_4 . METHOD_5 ( ) : VAR_3 . equals ( VAR_4 . getId ( ) ) ( THEN THEN (  METHOD_2 ( ) . setSelectedItem ( VAR_4 ) )  METHOD_2 ( ) . setSelectedItem ( VAR_4 ) (  break ; )  break ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME response ) NAME response ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_6 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_3 ) ) INIT = TYPE_6 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_3 ) ) VAR VAR (  VAR_2 = METHOD_4 ( VAR_1 , response , VAR_2 , VAR_1 . METHOD_3 ( ) ) )  VAR_2 = METHOD_4 ( VAR_1 , response , VAR_2 , VAR_1 . METHOD_3 ( ) ) ( IF IF ( COND VAR_2 == null ) COND VAR_2 == null ( THEN THEN (  response . METHOD_5 ( VAR_4 ) )  response . METHOD_5 ( VAR_4 ) ) THEN THEN ( ELSE ELSE (  TYPE_6 . METHOD_6 ( VAR_1 , response , VAR_2 , type ) )  TYPE_6 . METHOD_6 ( VAR_1 , response , VAR_2 , type ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( VAR_1 , new TYPE_1 . DiskImage ( ) ) )  METHOD_2 ( VAR_1 , new TYPE_1 . DiskImage ( ) ) (  METHOD_3 ( false ) )  METHOD_3 ( false ) (  METHOD_4 ( ) )  METHOD_4 ( ) (  command . METHOD_5 ( ) . METHOD_6 ( VAR_2 ) )  command . METHOD_5 ( ) . METHOD_6 ( VAR_2 ) (  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( command ) . METHOD_7 ( ) )  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( command ) . METHOD_7 ( ) (  TYPE_2 . METHOD_8 ( command . validate ( ) ) )  TYPE_2 . METHOD_8 ( command . validate ( ) ) (  TYPE_2 . METHOD_9 ( command . getReturnValue ( ) . METHOD_10 ( ) . METHOD_11 ( TYPE_3 . toString ( ) ) ) )  TYPE_2 . METHOD_9 ( command . getReturnValue ( ) . METHOD_10 ( ) . METHOD_11 ( TYPE_3 . toString ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.ui.uicommonweb.UICommand ) TYPE org.ovirt.engine.ui.uicommonweb.UICommand ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . getModel ( ) . METHOD_2 ( ) ) INIT = TYPE_1 . getModel ( ) . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2<?> ) TYPE TYPE_2<?> ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_3 ( VAR_1 ) ) INIT = METHOD_3 ( VAR_1 ) ) VAR VAR (  ( ( TYPE_2 < TYPE_3 > ) ( VAR_2 ) ) . METHOD_4 ( TYPE_1 . getModel ( ) . METHOD_5 ( ) ) )  ( ( TYPE_2 < TYPE_3 > ) ( VAR_2 ) ) . METHOD_4 ( TYPE_1 . getModel ( ) . METHOD_5 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME VAR_1 ) NAME VAR_1 ( INIT = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ) INIT = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ) VAR VAR ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_3 = ( ( java.util.Map < TYPE_1 < java.lang.Integer , org.ovirt.engine.core.compat . Version > , java.lang.Boolean > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) )  VAR_3 = ( ( java.util.Map < TYPE_1 < java.lang.Integer , org.ovirt.engine.core.compat . Version > , java.lang.Boolean > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD (  VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { VAR_3 = ( ( java.util.Map < TYPE_1 < java.lang.Integer , org.ovirt.engine.core.compat . Version > , java.lang.Boolean > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ; } } )  VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { VAR_3 = ( ( java.util.Map < TYPE_1 < java.lang.Integer , org.ovirt.engine.core.compat . Version > , java.lang.Boolean > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ; } } (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_4 , new TYPE_3 ( VAR_5 ) , VAR_1 ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_4 , new TYPE_3 ( VAR_5 ) , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME setEntity ) NAME setEntity ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME value ) NAME value ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  cluster = null )  cluster = null (  super . setEntity ( value ) )  super . setEntity ( value ) ( IF IF ( COND ( getEntity ( ) ) != null ) COND ( getEntity ( ) ) != null ( THEN THEN ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  cluster = ( ( org.ovirt.engine.core.common.businessentities.VDSGroup ) ( returnValue ) ) )  cluster = ( ( org.ovirt.engine.core.common.businessentities.VDSGroup ) ( returnValue ) ) (  METHOD_2 ( ) )  METHOD_2 ( ) ) BLOCK BLOCK ) METHOD METHOD (  TYPE_1 . METHOD_1 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object VAR_1 , java.lang.Object returnValue ) { cluster = ( ( org.ovirt.engine.core.common.businessentities.VDSGroup ) ( returnValue ) ) ; METHOD_2 ( ) ; } } ) , ( ( org.ovirt.engine.core.common.businessentities.VmTemplate ) ( getEntity ( ) ) ) . METHOD_3 ( ) ) )  TYPE_1 . METHOD_1 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object VAR_1 , java.lang.Object returnValue ) { cluster = ( ( org.ovirt.engine.core.common.businessentities.VDSGroup ) ( returnValue ) ) ; METHOD_2 ( ) ; } } ) , ( ( org.ovirt.engine.core.common.businessentities.VmTemplate ) ( getEntity ( ) ) ) . METHOD_3 ( ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 ( VAR_1 ) ) INIT = new TYPE_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND ! ( VAR_2 . METHOD_2 ( ) ) ) COND ! ( VAR_2 . METHOD_2 ( ) ) ( THEN THEN (  return VAR_3 ; )  return VAR_3 ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_3 ( VAR_1 ) ) INIT = new TYPE_3 ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_5 ) NAME VAR_5 ( INIT = new TYPE_4 ( VAR_4 ) ) INIT = new TYPE_4 ( VAR_4 ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_6 ) NAME VAR_6 ( INIT = VAR_5 . METHOD_3 ( ) ) INIT = VAR_5 . METHOD_3 ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_4 . METHOD_4 ( ) )  VAR_4 . METHOD_4 ( ) (  VAR_5 . METHOD_4 ( ) )  VAR_5 . METHOD_4 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ( IF IF ( COND VAR_6 == null ) COND VAR_6 == null ( THEN THEN (  return VAR_3 ; )  return VAR_3 ; ) THEN THEN ) IF IF (  return VAR_6 ; )  return VAR_6 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source != null ? new java.util.ArrayList < java.lang.String > ( ( ( java.util.ArrayList < java.lang.String > ) ( source ) ) ) : new java.util.ArrayList < java.lang.String > ( ) ; )  return source != null ? new java.util.ArrayList < java.lang.String > ( ( ( java.util.ArrayList < java.lang.String > ) ( source ) ) ) : new java.util.ArrayList < java.lang.String > ( ) ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? new java.util.ArrayList < java.lang.String > ( ( ( java.util.ArrayList < java.lang.String > ) ( source ) ) ) : new java.util.ArrayList < java.lang.String > ( ) ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? new java.util.ArrayList < java.lang.String > ( ( ( java.util.ArrayList < java.lang.String > ) ( source ) ) ) : new java.util.ArrayList < java.lang.String > ( ) ; } } ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME tempVar ) NAME tempVar ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  tempVar . METHOD_2 ( VAR_1 ) )  tempVar . METHOD_2 ( VAR_1 ) (  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , tempVar , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , tempVar , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND TYPE_1 . METHOD_2 ( ) ) COND TYPE_1 . METHOD_2 ( ) ( THEN THEN ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_3 ( ) ) INIT = TYPE_1 . METHOD_3 ( ) ) VAR VAR ( IF IF ( COND ! ( validate ( VAR_1 . METHOD_4 ( VAR_2 , VAR_3 , TYPE_1 . METHOD_5 ( ) ) ) ) ) COND ! ( validate ( VAR_1 . METHOD_4 ( VAR_2 , VAR_3 , TYPE_1 . METHOD_5 ( ) ) ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  METHOD_6 ( TYPE_1 . METHOD_7 ( ) . getStoragePoolId ( ) , TYPE_1 . getVm ( ) . METHOD_5 ( ) ) )  METHOD_6 ( TYPE_1 . METHOD_7 ( ) . getStoragePoolId ( ) , TYPE_1 . getVm ( ) . METHOD_5 ( ) ) ) THEN THEN ) IF IF (  return super . METHOD_1 ( ) ; )  return super . METHOD_1 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( METHOD_3 ( ) ) )  METHOD_2 ( METHOD_3 ( ) ) (  METHOD_4 ( ) )  METHOD_4 ( ) (  METHOD_5 ( 0 ) )  METHOD_5 ( 0 ) (  METHOD_6 ( ) )  METHOD_6 ( ) (  METHOD_7 ( VAR_1 , VAR_2 class , new java.lang.String [ ] { STRING_1 , STRING_2 } , new java.lang.Object [ ] { VAR_3 [ 0 ] , java.lang.Boolean . FALSE } , true , true ) )  METHOD_7 ( VAR_1 , VAR_2 class , new java.lang.String [ ] { STRING_1 , STRING_2 } , new java.lang.Object [ ] { VAR_3 [ 0 ] , java.lang.Boolean . FALSE } , true , true ) ( STATIC-BLOCK STATIC-BLOCK ) STATIC-BLOCK STATIC-BLOCK (  METHOD_8 ( VAR_4 . METHOD_9 ( VAR_3 [ 0 ] . toString ( ) , new TYPE_1 ( ) { { } } ) ) )  METHOD_8 ( VAR_4 . METHOD_9 ( VAR_3 [ 0 ] . toString ( ) , new TYPE_1 ( ) { { } } ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  return TYPE_1 . METHOD_2 ( TYPE_2 . getVm ( ) , TYPE_2 . getReturnValue ( ) . METHOD_3 ( ) , TYPE_2 . getVm ( ) . getStoragePoolId ( ) , VAR_1 , true , true , false , false , false , true , true , METHOD_4 ( ) ) ; )  return TYPE_1 . METHOD_2 ( TYPE_2 . getVm ( ) , TYPE_2 . getReturnValue ( ) . METHOD_3 ( ) , TYPE_2 . getVm ( ) . getStoragePoolId ( ) , VAR_1 , true , true , false , false , false , true , true , METHOD_4 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.network.Network ) TYPE org.ovirt.engine.core.common.businessentities.network.Network ( NAME result ) NAME result ( INIT = dao . METHOD_2 ( VAR_1 , VAR_2 ) ) INIT = dao . METHOD_2 ( VAR_1 , VAR_2 ) ) VAR VAR (  TYPE_1 . METHOD_3 ( result ) )  TYPE_1 . METHOD_3 ( result ) (  TYPE_1 . assertEquals ( result . METHOD_4 ( ) . getId ( ) , VAR_3 ) )  TYPE_1 . assertEquals ( result . METHOD_4 ( ) . getId ( ) , VAR_3 ) (  dao . METHOD_5 ( result . getId ( ) ) )  dao . METHOD_5 ( result . getId ( ) ) (  TYPE_1 . METHOD_6 ( dao . METHOD_2 ( VAR_1 , VAR_2 ) ) )  TYPE_1 . METHOD_6 ( dao . METHOD_2 ( VAR_1 , VAR_2 ) ) (  TYPE_1 . METHOD_6 ( VAR_4 . get ( VAR_3 ) ) )  TYPE_1 . METHOD_6 ( VAR_4 . get ( VAR_3 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 = new java.util.HashMap < TYPE_1 , TYPE_2 > ( ) )  VAR_1 = new java.util.HashMap < TYPE_1 , TYPE_2 > ( ) (  VAR_2 = new TYPE_3 < TYPE_1 , TYPE_2 > ( VAR_1 ) )  VAR_2 = new TYPE_3 < TYPE_1 , TYPE_2 > ( VAR_1 ) (  VAR_3 = new TYPE_1 ( STRING_1 , 0 ) )  VAR_3 = new TYPE_1 ( STRING_1 , 0 ) (  VAR_4 = new TYPE_2 ( VAR_5 , VAR_6 ) )  VAR_4 = new TYPE_2 ( VAR_5 , VAR_6 ) (  VAR_7 = new TYPE_1 ( STRING_2 , 0 ) )  VAR_7 = new TYPE_1 ( STRING_2 , 0 ) (  VAR_8 = new TYPE_2 ( VAR_9 , VAR_10 ) )  VAR_8 = new TYPE_2 ( VAR_9 , VAR_10 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) , null ) ) )  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) , null ) ) (  METHOD_3 ( ) )  METHOD_3 ( ) (  METHOD_4 ( false , VAR_2 ) )  METHOD_4 ( false , VAR_2 ) (  cmd . METHOD_5 ( ) )  cmd . METHOD_5 ( ) (  org.mockito.Mockito . METHOD_6 ( VAR_3 , org.mockito.Mockito . METHOD_7 ( ) ) . METHOD_8 ( TYPE_3 . any ( VAR_4 class ) ) )  org.mockito.Mockito . METHOD_6 ( VAR_3 , org.mockito.Mockito . METHOD_7 ( ) ) . METHOD_8 ( TYPE_3 . any ( VAR_4 class ) ) (  TYPE_4 . assertEquals ( cmd . METHOD_9 ( ) , VAR_5 ) )  TYPE_4 . assertEquals ( cmd . METHOD_9 ( ) , VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ( INIT = ( ( TYPE_1 ) ( target ) ) ) INIT = ( ( TYPE_1 ) ( target ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2<TYPE_3> ) TYPE TYPE_2<TYPE_3> ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_4 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) INIT = ( ( TYPE_4 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  model . METHOD_1 ( ) . setSelectedItem ( VAR_2 . METHOD_2 ( ) . name ( ) . METHOD_3 ( ) ) )  model . METHOD_1 ( ) . setSelectedItem ( VAR_2 . METHOD_2 ( ) . name ( ) . METHOD_3 ( ) ) (  model . METHOD_4 ( ) . setSelectedItem ( VAR_2 . getModel ( ) . name ( ) ) )  model . METHOD_4 ( ) . setSelectedItem ( VAR_2 . getModel ( ) . name ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.AddVmCommand<TYPE_2> ) TYPE TYPE_1.AddVmCommand<TYPE_2> ( NAME command ) NAME command ( INIT = METHOD_2 ( 0 , 0 ) ) INIT = METHOD_2 ( 0 , 0 ) ) VAR VAR (  org.mockito.Mockito.doReturn ( new TYPE_1 . ValidationResult ( VAR_1 ) ) . when ( VAR_2 ) . METHOD_3 ( ) )  org.mockito.Mockito.doReturn ( new TYPE_1 . ValidationResult ( VAR_1 ) ) . when ( VAR_2 ) . METHOD_3 ( ) (  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( command ) . METHOD_4 ( TYPE_3 . any ( VAR_3 . StorageDomain class ) ) )  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( command ) . METHOD_4 ( TYPE_3 . any ( VAR_3 . StorageDomain class ) ) (  TYPE_4 . METHOD_5 ( command . METHOD_6 ( ) ) )  TYPE_4 . METHOD_5 ( command . METHOD_6 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) (  VAR_1 . METHOD_2 ( VAR_2 , INT_1 ) )  VAR_1 . METHOD_2 ( VAR_2 , INT_1 ) ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_3 ( VAR_4 , VAR_5 ) ) INIT = METHOD_3 ( VAR_4 , VAR_5 ) ) VAR VAR (  VAR_3 . METHOD_4 ( INT_2 ) )  VAR_3 . METHOD_4 ( INT_2 ) (  METHOD_5 ( VAR_3 ) )  METHOD_5 ( VAR_3 ) (  org.mockito.Mockito.when ( VAR_6 . METHOD_6 ( VAR_3 ) ) . thenReturn ( VAR_3 ) )  org.mockito.Mockito.when ( VAR_6 . METHOD_6 ( VAR_3 ) ) . thenReturn ( VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  getParameters ( ) . METHOD_2 ( new TYPE_1 ( VAR_1 . VM , TYPE_2 . METHOD_3 ( ) ) ) )  getParameters ( ) . METHOD_2 ( new TYPE_1 ( VAR_1 . VM , TYPE_2 . METHOD_3 ( ) ) ) ( IF IF ( COND ( TYPE_2 . getVm ( ) ) != null ) COND ( TYPE_2 . getVm ( ) ) != null ( THEN THEN (  METHOD_4 ( TYPE_2 . getVm ( ) . getStoragePoolId ( ) ) )  METHOD_4 ( TYPE_2 . getVm ( ) . getStoragePoolId ( ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME template ) NAME template ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( model . METHOD_2 ( ) ) != null ) COND ( model . METHOD_2 ( ) ) != null ( THEN THEN ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME result ) NAME result ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( IN model . METHOD_2 ( ) ) IN model . METHOD_2 ( ) ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME source ) NAME source ( INIT = TYPE_3 . METHOD_3 ( VAR_1 ) ) INIT = TYPE_3 . METHOD_3 ( VAR_1 ) ) VAR VAR (  result . add ( TYPE_4 . map ( source , null ) ) )  result . add ( TYPE_4 . map ( source , null ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_2 ) NAME VAR_2 ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return result ; )  return result ; ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME vm ) NAME vm ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.Object[] ) TYPE java.lang.Object[] ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( java.lang.Object [ ] ) ( VAR_1 . METHOD_2 ( VAR_3 ) ) ) ) INIT = ( ( java.lang.Object [ ] ) ( VAR_1 . METHOD_2 ( VAR_3 ) ) ) ) VAR VAR ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN ( VAR VAR ( TYPE java.util.ArrayList<java.lang.Object> ) TYPE java.util.ArrayList<java.lang.Object> ( NAME VAR_4 ) NAME VAR_4 ( INIT = new java.util.ArrayList < java.lang.Object > ( TYPE_3 . METHOD_3 ( VAR_2 ) ) ) INIT = new java.util.ArrayList < java.lang.Object > ( TYPE_3 . METHOD_3 ( VAR_2 ) ) ) VAR VAR (  vm . METHOD_4 ( TYPE_4 . METHOD_5 ( ) . METHOD_6 ( VAR_4 ) ) )  vm . METHOD_4 ( TYPE_4 . METHOD_5 ( ) . METHOD_6 ( VAR_4 ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  METHOD_3 ( ) )  METHOD_3 ( ) (  METHOD_4 ( ) )  METHOD_4 ( ) (  METHOD_5 ( ) )  METHOD_5 ( ) (  METHOD_6 ( ) )  METHOD_6 ( ) ( IF IF ( COND ( getModel ( ) . METHOD_7 ( ) . getSelectedItem ( ) ) != null ) COND ( getModel ( ) . METHOD_7 ( ) . getSelectedItem ( ) ) != null ( THEN THEN ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VmTemplate ) TYPE org.ovirt.engine.core.common.businessentities.VmTemplate ( NAME template ) NAME template ( INIT = getModel ( ) . METHOD_7 ( ) . getSelectedItem ( ) ) INIT = getModel ( ) . METHOD_7 ( ) . getSelectedItem ( ) ) VAR VAR (  METHOD_8 ( template . METHOD_9 ( ) , template . METHOD_10 ( ) ) )  METHOD_8 ( template . METHOD_9 ( ) , template . METHOD_10 ( ) ) ) THEN THEN ) IF IF (  METHOD_11 ( ) )  METHOD_11 ( ) (  METHOD_12 ( ) )  METHOD_12 ( ) (  METHOD_13 ( ) )  METHOD_13 ( ) (  METHOD_14 ( ) )  METHOD_14 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME cluster ) NAME cluster ( INIT = METHOD_2 ( true ) ) INIT = METHOD_2 ( true ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2<org.ovirt.engine.core.compat.Guid> ) TYPE TYPE_2<org.ovirt.engine.core.compat.Guid> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_3 . METHOD_3 ( VAR_2 , VAR_3 ) ) INIT = TYPE_3 . METHOD_3 ( VAR_2 , VAR_3 ) ) VAR VAR (  TYPE_4 . METHOD_4 ( STRING_1 , ( ( VAR_4 . METHOD_5 ( cluster , VAR_1 ) . size ( ) ) == 2 ) ) )  TYPE_4 . METHOD_4 ( STRING_1 , ( ( VAR_4 . METHOD_5 ( cluster , VAR_1 ) . size ( ) ) == 2 ) ) (  TYPE_4 . METHOD_4 ( TYPE_3 . METHOD_3 ( STRING_2 , STRING_3 ) . equals ( VAR_4 . METHOD_5 ( cluster , VAR_1 ) ) ) )  TYPE_4 . METHOD_4 ( TYPE_3 . METHOD_3 ( STRING_2 , STRING_3 ) . equals ( VAR_4 . METHOD_5 ( cluster , VAR_1 ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.VdcActionParametersBase ) TYPE TYPE_1.VdcActionParametersBase ( NAME VAR_1 ) NAME VAR_1 ( INIT = org.mockito.Mockito . METHOD_2 ( VAR_2 . VdcActionParametersBase class ) ) INIT = org.mockito.Mockito . METHOD_2 ( VAR_2 . VdcActionParametersBase class ) ) VAR VAR (  org.mockito.Mockito.when ( VAR_1 . METHOD_3 ( ) ) . thenReturn ( VAR_3 ) )  org.mockito.Mockito.when ( VAR_1 . METHOD_3 ( ) ) . thenReturn ( VAR_3 ) (  org.mockito.Mockito.when ( VAR_1 . METHOD_4 ( ) ) . thenReturn ( TYPE_2 . METHOD_5 ( VAR_4 ) ) )  org.mockito.Mockito.when ( VAR_1 . METHOD_4 ( ) ) . thenReturn ( TYPE_2 . METHOD_5 ( VAR_4 ) ) ( VAR VAR ( TYPE TYPE_3<TYPE_1.VdcActionParametersBase> ) TYPE TYPE_3<TYPE_1.VdcActionParametersBase> ( NAME command ) NAME command ( INIT = org.mockito.Mockito . METHOD_6 ( new TYPE_4 ( VAR_1 ) ) ) INIT = org.mockito.Mockito . METHOD_6 ( new TYPE_4 ( VAR_1 ) ) ) VAR VAR (  command . METHOD_7 ( ) )  command . METHOD_7 ( ) (  command . METHOD_8 ( ) )  command . METHOD_8 ( ) (  org.mockito.Mockito . METHOD_9 ( command ) . METHOD_10 ( ) )  org.mockito.Mockito . METHOD_9 ( command ) . METHOD_10 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ) TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME storage ) NAME storage ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( storage . METHOD_2 ( ) . METHOD_3 ( ) ) && ( ! ( storage . METHOD_2 ( ) . equals ( VAR_1 ) ) ) ) COND ( storage . METHOD_2 ( ) . METHOD_3 ( ) ) && ( ! ( storage . METHOD_2 ( ) . equals ( VAR_1 ) ) ) ( THEN THEN ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = storage . METHOD_4 ( ) ) INIT = storage . METHOD_4 ( ) ) VAR VAR (  return ( VAR_2 . METHOD_5 ( ) ) && ( METHOD_6 ( storage ) ) ; )  return ( VAR_2 . METHOD_5 ( ) ) && ( METHOD_6 ( storage ) ) ; ) THEN THEN ) IF IF (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1.AuditLogType ) RETURN TYPE_1.AuditLogType ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( SWITCH SWITCH ( NAME TYPE_2 . METHOD_2 ( ) ) NAME TYPE_2 . METHOD_2 ( ) ( CASE VAR_1 ( BLOCK BLOCK ( IF IF ( COND ! ( getParameters ( ) . METHOD_3 ( ) ) ) COND ! ( getParameters ( ) . METHOD_3 ( ) ) ( THEN THEN (  return VAR_2 ; )  return VAR_2 ; ) THEN THEN ) IF IF ( IF IF ( COND ( METHOD_4 ( ) ) && ( TYPE_2 . getSucceeded ( ) ) ) COND ( METHOD_4 ( ) ) && ( TYPE_2 . getSucceeded ( ) ) ( THEN THEN (  return VAR_3 ; )  return VAR_3 ; ) THEN THEN ) IF IF (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_1 ( CASE VAR_4 ( BLOCK BLOCK (  return VAR_5 ; )  return VAR_5 ; ) BLOCK BLOCK ) CASE VAR_4 ( CASE VAR_6 ( BLOCK BLOCK (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) CASE VAR_6 ) SWITCH SWITCH (  return VAR_7 ; )  return VAR_7 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME equals ) NAME equals ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME obj ) NAME obj ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( this ) == obj ) COND ( this ) == obj ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ( IF IF ( COND ! ( super . equals ( obj ) ) ) COND ! ( super . equals ( obj ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( IF IF ( COND ! ( obj instanceof TYPE_1 ) ) COND ! ( obj instanceof TYPE_1 ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME other ) NAME other ( INIT = ( ( TYPE_1 ) ( obj ) ) ) INIT = ( ( TYPE_1 ) ( obj ) ) ) VAR VAR (  return ( TYPE_2 . equals ( VAR_1 , VAR_2 ) ) && ( TYPE_2 . equals ( VAR_3 , VAR_4 ) ) ; )  return ( TYPE_2 . equals ( VAR_1 , VAR_2 ) ) && ( TYPE_2 . equals ( VAR_3 , VAR_4 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_1 ) ( model ) ) ) INIT = ( ( TYPE_1 ) ( model ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.Network> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.Network> ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) ) ) INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) ) ) VAR VAR (  TYPE_3 . METHOD_2 ( VAR_3 , new TYPE_4 ( ) ) )  TYPE_3 . METHOD_2 ( VAR_3 , new TYPE_4 ( ) ) (  VAR_2 . setItems ( VAR_3 ) )  VAR_2 . setItems ( VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( METHOD_3 ( null ) ) )  VAR_1 . METHOD_2 ( METHOD_3 ( null ) ) (  METHOD_4 ( VAR_2 ) )  METHOD_4 ( VAR_2 ) (  VAR_3 . METHOD_5 ( ) )  VAR_3 . METHOD_5 ( ) ( TRY TRY ( BLOCK BLOCK (  METHOD_6 ( ) )  METHOD_6 ( ) (  METHOD_7 ( STRING_1 ) )  METHOD_7 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( BLOCK BLOCK (  METHOD_8 ( VAR_4 , VAR_5 , new TYPE_2 ( VAR_6 ) ) )  METHOD_8 ( VAR_4 , VAR_5 , new TYPE_2 ( VAR_6 ) ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( null ) )  METHOD_2 ( null ) ( IF IF ( COND ( getVm ( ) ) != null ) COND ( getVm ( ) ) != null ( THEN THEN (  METHOD_3 ( ) )  METHOD_3 ( ) (  METHOD_4 ( ) )  METHOD_4 ( ) (  METHOD_5 ( getVm ( ) ) )  METHOD_5 ( getVm ( ) ) (  METHOD_6 ( ) . METHOD_7 ( METHOD_8 ( ) ) )  METHOD_6 ( ) . METHOD_7 ( METHOD_8 ( ) ) (  METHOD_9 ( ) . METHOD_7 ( METHOD_8 ( ) ) )  METHOD_9 ( ) . METHOD_7 ( METHOD_8 ( ) ) (  METHOD_10 ( ) . METHOD_7 ( METHOD_8 ( ) ) )  METHOD_10 ( ) . METHOD_7 ( METHOD_8 ( ) ) (  METHOD_11 ( true ) )  METHOD_11 ( true ) ) THEN THEN ( ELSE ELSE (  METHOD_2 ( getParameters ( ) . getVm ( ) ) )  METHOD_2 ( getParameters ( ) . getVm ( ) ) (  getReturnValue ( ) . METHOD_12 ( false ) )  getReturnValue ( ) . METHOD_12 ( false ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return TYPE_1 . METHOD_2 ( vm , TYPE_2 . getReturnValue ( ) . METHOD_3 ( ) , vm . getStoragePoolId ( ) , METHOD_4 ( ) . getValue ( ) , false , true , false , false , false , false , true , VAR_1 . Collections < org.ovirt.engine.core.common.businessentities . Disk > METHOD_5 ( ) ) ; )  return TYPE_1 . METHOD_2 ( vm , TYPE_2 . getReturnValue ( ) . METHOD_3 ( ) , vm . getStoragePoolId ( ) , METHOD_4 ( ) . getValue ( ) , false , true , false , false , false , false , true , VAR_1 . Collections < org.ovirt.engine.core.common.businessentities . Disk > METHOD_5 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( TYPE_1 . METHOD_2 ( ) ) != null ) COND ( TYPE_1 . METHOD_2 ( ) ) != null ( THEN THEN ( IF IF ( COND TYPE_1 . getParameters ( ) . METHOD_3 ( ) ) COND TYPE_1 . getParameters ( ) . METHOD_3 ( ) ( THEN THEN (  METHOD_4 ( VAR_1 ) )  METHOD_4 ( VAR_1 ) ) THEN THEN ( ELSE ELSE (  org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_5 ( ) . METHOD_6 ( TYPE_1 . METHOD_2 ( ) . METHOD_7 ( ) ) )  org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_5 ( ) . METHOD_6 ( TYPE_1 . METHOD_2 ( ) . METHOD_7 ( ) ) (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) ) ELSE ELSE ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME vds ) NAME vds ) VAR VAR ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_3 < java.lang.String > METHOD_4 ( VAR_4 , vds . METHOD_5 ( ) . getValue ( ) ) . METHOD_6 ( STRING_1 ) ) , VAR_1 ) ) INIT = TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_3 < java.lang.String > METHOD_4 ( VAR_4 , vds . METHOD_5 ( ) . getValue ( ) ) . METHOD_6 ( STRING_1 ) ) , VAR_1 ) ) VAR VAR ( IF IF ( COND ( VAR_2 != null ) && ( ! ( VAR_2 . isEmpty ( ) ) ) ) COND ( VAR_2 != null ) && ( ! ( VAR_2 . isEmpty ( ) ) ) ( THEN THEN (  METHOD_7 ( vds , VAR_2 ) )  METHOD_7 ( vds , VAR_2 ) (  return true ; )  return true ; ) THEN THEN ) IF IF (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME entity ) NAME entity ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  model . METHOD_2 ( new TYPE_2 ( ) ) )  model . METHOD_2 ( new TYPE_2 ( ) ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_3 ( METHOD_3 ( model . getId ( ) ) ) ) INIT = new TYPE_3 ( METHOD_3 ( model . getId ( ) ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_4> ) TYPE java.util.List<TYPE_4> ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_4 ( entity ) ) INIT = VAR_1 . METHOD_4 ( entity ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK (  TYPE_5 . METHOD_5 ( VAR_4 , VAR_3 , VAR_1 . METHOD_6 ( ) ) )  TYPE_5 . METHOD_5 ( VAR_4 , VAR_3 , VAR_1 . METHOD_6 ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  model . METHOD_4 ( ) . METHOD_4 ( ) . METHOD_7 ( VAR_2 ) )  model . METHOD_4 ( ) . METHOD_4 ( ) . METHOD_7 ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  host = new org.ovirt.engine.core.common.businessentities.VDS ( ) )  host = new org.ovirt.engine.core.common.businessentities.VDS ( ) (  host . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) )  host . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  host . METHOD_3 ( VAR_1 ) )  host . METHOD_3 ( VAR_1 ) (  VAR_2 = new TYPE_2 ( ) )  VAR_2 = new TYPE_2 ( ) (  VAR_2 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) )  VAR_2 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) (  org.mockito.Mockito.when ( VAR_3 . METHOD_4 ( ) ) . thenReturn ( VAR_4 ) )  org.mockito.Mockito.when ( VAR_3 . METHOD_4 ( ) ) . thenReturn ( VAR_4 ) (  org.mockito.Mockito.when ( VAR_5 . METHOD_5 ( TYPE_3 . any ( ) ) ) . thenReturn ( VAR_6 ) )  org.mockito.Mockito.when ( VAR_5 . METHOD_5 ( TYPE_3 . any ( ) ) ) . thenReturn ( VAR_6 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME a ) NAME a ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return ( ( ( ( a . METHOD_2 ( ) ) != ( VAR_1 ) ) && ( ( a . METHOD_2 ( ) ) != ( VAR_2 ) ) ) && ( ( a . METHOD_3 ( ) ) != null ) ) && ( ( a . METHOD_3 ( ) ) == ( VAR_3 ) ) ; )  return ( ( ( ( a . METHOD_2 ( ) ) != ( VAR_1 ) ) && ( ( a . METHOD_2 ( ) ) != ( VAR_2 ) ) ) && ( ( a . METHOD_3 ( ) ) != null ) ) && ( ( a . METHOD_3 ( ) ) == ( VAR_3 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  return new TYPE_2 ( METHOD_2 ( ) . getParameters ( ) . getStoragePoolId ( ) . getValue ( ) , METHOD_2 ( ) . getParameters ( ) . METHOD_3 ( ) , METHOD_2 ( ) . getParameters ( ) . METHOD_4 ( ) , METHOD_2 ( ) . getParameters ( ) . METHOD_5 ( ) , VAR_1 ) ; )  return new TYPE_2 ( METHOD_2 ( ) . getParameters ( ) . getStoragePoolId ( ) . getValue ( ) , METHOD_2 ( ) . getParameters ( ) . METHOD_3 ( ) , METHOD_2 ( ) . getParameters ( ) . METHOD_4 ( ) , METHOD_2 ( ) . getParameters ( ) . METHOD_5 ( ) , VAR_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( VAR_1 ) )  METHOD_2 ( VAR_1 ) (  VAR_2 . METHOD_3 ( VAR_3 , VAR_1 , true ) )  VAR_2 . METHOD_3 ( VAR_3 , VAR_1 , true ) (  VAR_2 . METHOD_4 ( ) )  VAR_2 . METHOD_4 ( ) (  TYPE_1 . METHOD_5 ( STRING_1 , VAR_2 . METHOD_3 ( VAR_3 , VAR_1 , false ) ) )  TYPE_1 . METHOD_5 ( STRING_1 , VAR_2 . METHOD_3 ( VAR_3 , VAR_1 , false ) ) (  METHOD_6 ( ) )  METHOD_6 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME constants ) NAME constants ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( constants . METHOD_3 ( ) ) )  VAR_1 . METHOD_2 ( constants . METHOD_3 ( ) ) (  VAR_2 . METHOD_4 ( constants . METHOD_5 ( ) ) )  VAR_2 . METHOD_4 ( constants . METHOD_5 ( ) ) (  VAR_3 . METHOD_4 ( constants . METHOD_6 ( ) ) )  VAR_3 . METHOD_4 ( constants . METHOD_6 ( ) ) (  VAR_4 . METHOD_4 ( constants . METHOD_7 ( ) ) )  VAR_4 . METHOD_4 ( constants . METHOD_7 ( ) ) (  VAR_5 . METHOD_2 ( constants . METHOD_8 ( ) ) )  VAR_5 . METHOD_2 ( constants . METHOD_8 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_3 ) NAME VAR_3 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_4 ) NAME VAR_4 ( IN TYPE_3 . METHOD_2 ( VAR_1 , VAR_2 ) ) IN TYPE_3 . METHOD_2 ( VAR_1 , VAR_2 ) ( BLOCK BLOCK (  VAR_3 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_1 , TYPE_4 . METHOD_5 ( VAR_4 , VAR_5 ) ) ) )  VAR_3 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_1 , TYPE_4 . METHOD_5 ( VAR_4 , VAR_5 ) ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.ValidationResult ) TYPE TYPE_1.ValidationResult ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  command . getParameters ( ) . METHOD_2 ( VAR_2 ) )  command . getParameters ( ) . METHOD_2 ( VAR_2 ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = org.mockito.Mockito . METHOD_3 ( VAR_4 class ) ) INIT = org.mockito.Mockito . METHOD_3 ( VAR_4 class ) ) VAR VAR (  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( command ) . METHOD_4 ( ) )  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( command ) . METHOD_4 ( ) (  org.mockito.Mockito.when ( VAR_3 . METHOD_5 ( TYPE_4 . any ( VAR_5 . Guid class ) ) ) . thenReturn ( VAR_1 ) )  org.mockito.Mockito.when ( VAR_3 . METHOD_5 ( TYPE_4 . any ( VAR_5 . Guid class ) ) ) . thenReturn ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.Map<java.lang.String,java.util.List<org.ovirt.engine.core.compat.Guid>> ) RETURN java.util.Map<java.lang.String,java.util.List<org.ovirt.engine.core.compat.Guid>> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.util.List<org.ovirt.engine.core.compat.Guid>> ) TYPE java.util.Map<java.lang.String,java.util.List<org.ovirt.engine.core.compat.Guid>> ( NAME map ) NAME map ( INIT = new java.util.HashMap < > ( ) ) INIT = new java.util.HashMap < > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  TYPE_3 . METHOD_2 ( VAR_2 . METHOD_3 ( ) , VAR_2 . getId ( ) , map , new TYPE_4 < org.ovirt.engine.core.compat.Guid > ( ) ) )  TYPE_3 . METHOD_2 ( VAR_2 . METHOD_3 ( ) , VAR_2 . getId ( ) , map , new TYPE_4 < org.ovirt.engine.core.compat.Guid > ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return map ; )  return map ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  assertEquals ( STRING_1 , VAR_1 ) )  assertEquals ( STRING_1 , VAR_1 ) (  METHOD_2 ( VAR_3 , VAR_4 class , new java.lang.String [ ] { } , new java.lang.Object [ ] { } , TYPE_1 . METHOD_3 ( ) , VAR_2 ) )  METHOD_2 ( VAR_3 , VAR_4 class , new java.lang.String [ ] { } , new java.lang.Object [ ] { } , TYPE_1 . METHOD_3 ( ) , VAR_2 ) ( IF IF ( COND VAR_2 == null ) COND VAR_2 == null ( THEN THEN (  METHOD_2 ( VAR_5 , VAR_4 class , new java.lang.String [ ] { } , new java.lang.Object [ ] { } , TYPE_1 . METHOD_4 ( ) ) )  METHOD_2 ( VAR_5 , VAR_4 class , new java.lang.String [ ] { } , new java.lang.Object [ ] { } , TYPE_1 . METHOD_4 ( ) ) ) THEN THEN ) IF IF (  VAR_6 . METHOD_5 ( ) )  VAR_6 . METHOD_5 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source != null ? source : new java.util.ArrayList < TYPE_1 > ( ) ; )  return source != null ? source : new java.util.ArrayList < TYPE_1 > ( ) ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : new java.util.ArrayList < TYPE_1 > ( ) ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : new java.util.ArrayList < TYPE_1 > ( ) ; } } (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new TYPE_2 ( VAR_1 , VAR_3 ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new TYPE_2 ( VAR_1 , VAR_3 ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2<TYPE_1> ) TYPE TYPE_2<TYPE_1> ( NAME cmd ) NAME cmd ( INIT = TYPE_3 . METHOD_2 ( VAR_1 ) ) INIT = TYPE_3 . METHOD_2 ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_4> ) TYPE java.util.List<TYPE_4> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.ArrayList < TYPE_4 > ( ) ) INIT = new java.util.ArrayList < TYPE_4 > ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_4 ( ) ) INIT = new TYPE_4 ( ) ) VAR VAR (  VAR_3 . METHOD_3 ( VAR_4 ) )  VAR_3 . METHOD_3 ( VAR_4 ) (  VAR_2 . add ( VAR_3 ) )  VAR_2 . add ( VAR_3 ) ( VAR VAR ( TYPE java.util.List<TYPE_4> ) TYPE java.util.List<TYPE_4> ( NAME VAR_5 ) NAME VAR_5 ( INIT = cmd . METHOD_4 ( VAR_2 ) ) INIT = cmd . METHOD_4 ( VAR_2 ) ) VAR VAR (  TYPE_5 . METHOD_5 ( ( ! ( VAR_5 . isEmpty ( ) ) ) ) )  TYPE_5 . METHOD_5 ( ( ! ( VAR_5 . isEmpty ( ) ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_2.VdcActionParametersBase> ) TYPE java.util.List<TYPE_2.VdcActionParametersBase> ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_3 ) NAME METHOD_3 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_5 ) NAME VAR_5 ( INIT = new TYPE_5 ( ) { public void METHOD_4 ( ) { METHOD_5 ( VAR_1 , VAR_2 ) ; } } ) INIT = new TYPE_5 ( ) { public void METHOD_4 ( ) { METHOD_5 ( VAR_1 , VAR_2 ) ; } } ) VAR VAR ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_4 ) NAME METHOD_4 ( BLOCK BLOCK (  METHOD_5 ( VAR_1 , VAR_2 ) )  METHOD_5 ( VAR_1 , VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD (  VAR_5 . METHOD_6 ( INT_1 ) )  VAR_5 . METHOD_6 ( INT_1 ) ) BLOCK BLOCK ) METHOD METHOD (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_2 ( VAR_4 , VAR_3 , new TYPE_3 ( ) { public void METHOD_3 ( TYPE_4 result ) { TYPE_5 VAR_5 = new TYPE_5 ( ) { public void METHOD_4 ( ) { METHOD_5 ( VAR_1 , VAR_2 ) ; } } ; VAR_5 . METHOD_6 ( INT_1 ) ; } } , this ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_2 ( VAR_4 , VAR_3 , new TYPE_3 ( ) { public void METHOD_3 ( TYPE_4 result ) { TYPE_5 VAR_5 = new TYPE_5 ( ) { public void METHOD_4 ( ) { METHOD_5 ( VAR_1 , VAR_2 ) ; } } ; VAR_5 . METHOD_6 ( INT_1 ) ; } } , this ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . getInstance ( ) . METHOD_2 ( VAR_2 , new TYPE_3 ( VAR_3 . METHOD_3 ( ) ) ) ) INIT = TYPE_2 . getInstance ( ) . METHOD_2 ( VAR_2 , new TYPE_3 ( VAR_3 . METHOD_3 ( ) ) ) ) VAR VAR ( IF IF ( COND VAR_1 . getSucceeded ( ) ) COND VAR_1 . getSucceeded ( ) ( THEN THEN (  VAR_4 = ( ( java.util.Map < org.ovirt.engine.core.compat.Guid , TYPE_4 > ) ( VAR_1 . getReturnValue ( ) ) ) )  VAR_4 = ( ( java.util.Map < org.ovirt.engine.core.compat.Guid , TYPE_4 > ) ( VAR_1 . getReturnValue ( ) ) ) (  METHOD_4 ( ) )  METHOD_4 ( ) ) THEN THEN ( ELSE ELSE (  METHOD_5 ( ) )  METHOD_5 ( ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 = new TYPE_1 ( new TYPE_2 < TYPE_3 > ( ) ) )  VAR_1 = new TYPE_1 ( new TYPE_2 < TYPE_3 > ( ) ) (  VAR_2 = new TYPE_1 ( new TYPE_4 ( ) ) )  VAR_2 = new TYPE_1 ( new TYPE_4 ( ) ) (  VAR_3 = new TYPE_1 < TYPE_5 > ( new TYPE_2 < TYPE_5 > ( ) ) )  VAR_3 = new TYPE_1 < TYPE_5 > ( new TYPE_2 < TYPE_5 > ( ) ) (  VAR_4 = new TYPE_1 ( new TYPE_4 ( ) ) )  VAR_4 = new TYPE_1 ( new TYPE_4 ( ) ) (  VAR_5 = new TYPE_1 ( new TYPE_6 < TYPE_7 > ( ) ) )  VAR_5 = new TYPE_1 ( new TYPE_6 < TYPE_7 > ( ) ) (  VAR_6 = new TYPE_1 ( new TYPE_6 < TYPE_8 > ( ) ) )  VAR_6 = new TYPE_1 ( new TYPE_6 < TYPE_8 > ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) (  dao = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) )  dao = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) (  VAR_2 = METHOD_2 ( VAR_1 . METHOD_4 ( ) ) )  VAR_2 = METHOD_2 ( VAR_1 . METHOD_4 ( ) ) (  VAR_3 = VAR_2 . get ( VAR_4 ) )  VAR_3 = VAR_2 . get ( VAR_4 ) (  VAR_5 = dao . get ( VAR_3 . getId ( ) ) )  VAR_5 = dao . get ( VAR_3 . getId ( ) ) (  VAR_6 = new TYPE_1 ( VAR_7 , VAR_8 , 1 ) )  VAR_6 = new TYPE_1 ( VAR_7 , VAR_8 , 1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) )  VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) ( TRY TRY ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_3 ) ) COND ! ( VAR_3 ) ( THEN THEN (  METHOD_4 ( STRING_1 ) )  METHOD_4 ( STRING_1 ) ) THEN THEN ) IF IF ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  METHOD_5 ( VAR_4 ) )  METHOD_5 ( VAR_4 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ( FINALLY FINALLY (  VAR_2 . METHOD_2 ( ) . METHOD_6 ( ) )  VAR_2 . METHOD_2 ( ) . METHOD_6 ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.compat.Guid> ) TYPE java.util.ArrayList<org.ovirt.engine.core.compat.Guid> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME parameters ) NAME parameters ( INIT = new TYPE_1 ( false , VAR_2 ) ) INIT = new TYPE_1 ( false , VAR_2 ) ) VAR VAR (  parameters . METHOD_2 ( VAR_1 ) )  parameters . METHOD_2 ( VAR_1 ) (  TYPE_2 . getInstance ( ) . METHOD_3 ( VAR_3 , parameters , TYPE_3 . METHOD_4 ( ) ) )  TYPE_2 . getInstance ( ) . METHOD_3 ( VAR_3 , parameters , TYPE_3 . METHOD_4 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME event ) NAME event ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_2 ( ) ) INIT = VAR_2 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( VAR_1 != null ) ? new java.util.ArrayList < TYPE_2 > ( TYPE_3 . METHOD_3 ( VAR_1 ) ) : new java.util.ArrayList < TYPE_2 > ( ) ) INIT = ( VAR_1 != null ) ? new java.util.ArrayList < TYPE_2 > ( TYPE_3 . METHOD_3 ( VAR_1 ) ) : new java.util.ArrayList < TYPE_2 > ( ) ) VAR VAR (  this . METHOD_4 ( VAR_3 ) )  this . METHOD_4 ( VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_1 ( ) . setItems ( ( ( java.util.List < TYPE_1 > ) ( VAR_2 ) ) ) )  METHOD_1 ( ) . setItems ( ( ( java.util.List < TYPE_1 > ) ( VAR_2 ) ) ) (  VAR_3 . METHOD_2 ( METHOD_1 ( ) , METHOD_3 ( ) ) )  VAR_3 . METHOD_2 ( METHOD_1 ( ) , METHOD_3 ( ) ) (  METHOD_4 ( ) )  METHOD_4 ( ) (  VAR_4 . METHOD_5 ( true ) )  VAR_4 . METHOD_5 ( true ) (  METHOD_6 ( ) )  METHOD_6 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME returnValue ) NAME returnValue ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  returnValue . METHOD_2 ( true ) )  returnValue . METHOD_2 ( true ) (  returnValue . METHOD_3 ( TYPE_2 . METHOD_4 ( ) ) )  returnValue . METHOD_3 ( TYPE_2 . METHOD_4 ( ) ) (  org.mockito.Mockito.when ( VAR_1 . METHOD_5 ( TYPE_3 . METHOD_6 ( VAR_2 ) , TYPE_3 . any ( VAR_3 class ) ) ) . thenReturn ( returnValue ) )  org.mockito.Mockito.when ( VAR_1 . METHOD_5 ( TYPE_3 . METHOD_6 ( VAR_2 ) , TYPE_3 . any ( VAR_3 class ) ) ) . thenReturn ( returnValue ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source != null ? ( ( java.lang.Boolean ) ( source ) ) . METHOD_2 ( ) : true ; )  return source != null ? ( ( java.lang.Boolean ) ( source ) ) . METHOD_2 ( ) : true ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Boolean ) ( source ) ) . METHOD_2 ( ) : true ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Boolean ) ( source ) ) . METHOD_2 ( ) : true ; } } (  TYPE_1 . METHOD_3 ( new TYPE_2 ( VAR_1 , TYPE_1 . METHOD_4 ( ) ) , aQuery ) )  TYPE_1 . METHOD_3 ( new TYPE_2 ( VAR_1 , TYPE_1 . METHOD_4 ( ) ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.uicommonweb.models.EntityModel ) TYPE org.ovirt.engine.ui.uicommonweb.models.EntityModel ( NAME model ) NAME model ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_1 ) ( model ) ) ) INIT = ( ( TYPE_1 ) ( model ) ) ) VAR VAR ( VAR VAR ( TYPE java.lang.Boolean ) TYPE java.lang.Boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( java.lang.Boolean ) ( TYPE_2 . METHOD_2 ( VAR_3 , VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) . toString ( ) ) ) ) ) INIT = ( ( java.lang.Boolean ) ( TYPE_2 . METHOD_2 ( VAR_3 , VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) . toString ( ) ) ) ) ) VAR VAR (  return ( VAR_2 && ( VAR_1 . METHOD_5 ( ) ) ) && ( ! ( VAR_1 . METHOD_6 ( ) ) ) ; )  return ( VAR_2 && ( VAR_1 . METHOD_5 ( ) ) ) && ( ! ( VAR_1 . METHOD_6 ( ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  < org.ovirt.engine.core.compat.Guid > VAR_2 = new TYPE_2 < org.ovirt.engine.core.compat.Guid > ( VAR_3 , VAR_4 . IdQueryParameters class ) )  < org.ovirt.engine.core.compat.Guid > VAR_2 = new TYPE_2 < org.ovirt.engine.core.compat.Guid > ( VAR_3 , VAR_4 . IdQueryParameters class ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME entity ) NAME entity ( INIT = getEntity ( VAR_2 , true ) ) INIT = getEntity ( VAR_2 , true ) ) VAR VAR (  return METHOD_2 ( VAR_1 , entity , map ( entity ) , VAR_2 , VAR_5 , new TYPE_4 ( ) ) ; )  return METHOD_2 ( VAR_1 , entity , map ( entity ) , VAR_2 , VAR_5 , new TYPE_4 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  org.mockito.Mockito.doReturn ( METHOD_2 ( ) ) . when ( VAR_3 ) . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_1 ) , TYPE_2 . any ( VAR_4 class ) , TYPE_2 . any ( VAR_5 class ) ) )  org.mockito.Mockito.doReturn ( METHOD_2 ( ) ) . when ( VAR_3 ) . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_1 ) , TYPE_2 . any ( VAR_4 class ) , TYPE_2 . any ( VAR_5 class ) ) ) THEN THEN ( ELSE ELSE (  org.mockito.Mockito.doReturn ( METHOD_2 ( ) ) . when ( VAR_3 ) . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_1 ) , TYPE_2 . any ( VAR_4 class ) ) )  org.mockito.Mockito.doReturn ( METHOD_2 ( ) ) . when ( VAR_3 ) . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_1 ) , TYPE_2 . any ( VAR_4 class ) ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ! ( validate ( TYPE_1 . METHOD_2 ( TYPE_2 . getParameters ( ) . METHOD_3 ( ) , TYPE_2 . getParameters ( ) . METHOD_4 ( ) , TYPE_2 . getParameters ( ) . METHOD_5 ( ) , TYPE_2 . getVm ( ) . METHOD_6 ( ) , TYPE_2 . METHOD_7 ( ) . getId ( ) ) ) ) ) COND ! ( validate ( TYPE_1 . METHOD_2 ( TYPE_2 . getParameters ( ) . METHOD_3 ( ) , TYPE_2 . getParameters ( ) . METHOD_4 ( ) , TYPE_2 . getParameters ( ) . METHOD_5 ( ) , TYPE_2 . getVm ( ) . METHOD_6 ( ) , TYPE_2 . METHOD_7 ( ) . getId ( ) ) ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source != null ? ( ( TYPE_1 ) ( source ) ) : null ; )  return source != null ? ( ( TYPE_1 ) ( source ) ) : null ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( TYPE_1 ) ( source ) ) : null ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( TYPE_1 ) ( source ) ) : null ; } } (  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new TYPE_2 ( VAR_1 ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new TYPE_2 ( VAR_1 ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME version ) NAME version ( INIT = TYPE_1 . getParameters ( ) . METHOD_2 ( ) ) INIT = TYPE_1 . getParameters ( ) . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( version ) ) INIT = new TYPE_2 ( version ) ) VAR VAR ( VAR VAR ( TYPE java.util.HashMap<java.lang.String,java.util.HashMap<java.lang.String,java.lang.String>> ) TYPE java.util.HashMap<java.lang.String,java.util.HashMap<java.lang.String,java.lang.String>> ( NAME map ) NAME map ( INIT = VAR_1 . METHOD_3 ( ) ) INIT = VAR_1 . METHOD_3 ( ) ) VAR VAR (  TYPE_1 . METHOD_4 ( ) . METHOD_5 ( map ) )  TYPE_1 . METHOD_4 ( ) . METHOD_5 ( map ) (  TYPE_1 . METHOD_4 ( ) . METHOD_6 ( ( ( map . size ( ) ) > 0 ) ) )  TYPE_1 . METHOD_4 ( ) . METHOD_6 ( ( ( map . size ( ) ) > 0 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<TYPE_1.VdcActionParametersBase> ) TYPE java.util.ArrayList<TYPE_1.VdcActionParametersBase> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < TYPE_1 . VdcActionParametersBase > ( ) ) INIT = new java.util.ArrayList < TYPE_1 . VdcActionParametersBase > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME a ) NAME a ( IN VAR_2 . Linq < TYPE_2 > METHOD_2 ( METHOD_3 ( ) ) ) IN VAR_2 . Linq < TYPE_2 > METHOD_2 ( METHOD_3 ( ) ) ( BLOCK BLOCK (  VAR_1 . add ( new TYPE_3 ( a . getId ( ) , getEntity ( ) . getId ( ) ) ) )  VAR_1 . add ( new TYPE_3 ( a . getId ( ) , getEntity ( ) . getId ( ) ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  org.ovirt.engine.ui.frontend.Frontend . METHOD_4 ( VAR_3 , VAR_1 ) )  org.ovirt.engine.ui.frontend.Frontend . METHOD_4 ( VAR_3 , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_1 ( METHOD_2 ( ) , ( ( java.lang.Integer ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) , VAR_1 ) )  METHOD_1 ( METHOD_2 ( ) , ( ( java.lang.Integer ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) , VAR_1 ) ( IF IF ( COND ! ( ( ( ( TYPE_2 ) ( model ) ) . METHOD_3 ( ) ) instanceof TYPE_3 ) ) COND ! ( ( ( ( TYPE_2 ) ( model ) ) . METHOD_3 ( ) ) instanceof TYPE_3 ) ( THEN THEN (  METHOD_1 ( METHOD_4 ( ) , ( ( java.lang.Integer ) ( METHOD_2 ( ) . getEntity ( ) ) ) , 1 ) )  METHOD_1 ( METHOD_4 ( ) , ( ( java.lang.Integer ) ( METHOD_2 ( ) . getEntity ( ) ) ) , 1 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND source == null ) COND source == null ( THEN THEN (  return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ; )  return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ; ) THEN THEN ) IF IF (  return source ; )  return source ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ; } return source ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ; } return source ; } } ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME params ) NAME params ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  params . METHOD_2 ( VAR_1 ) )  params . METHOD_2 ( VAR_1 ) (  params . METHOD_3 ( VAR_2 ) )  params . METHOD_3 ( VAR_2 ) (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_3 , params , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_3 , params , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.Network ) TYPE org.ovirt.engine.core.common.businessentities.Network ( NAME result ) NAME result ( INIT = dao . METHOD_2 ( VAR_1 ) ) INIT = dao . METHOD_2 ( VAR_1 ) ) VAR VAR (  TYPE_1 . METHOD_3 ( result ) )  TYPE_1 . METHOD_3 ( result ) (  dao . METHOD_4 ( result . getId ( ) ) )  dao . METHOD_4 ( result . getId ( ) ) (  result = dao . METHOD_2 ( VAR_1 ) )  result = dao . METHOD_2 ( VAR_1 ) (  TYPE_1 . METHOD_5 ( result ) )  TYPE_1 . METHOD_5 ( result ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) . METHOD_5 ( ) . get ( TYPE_1 . getParameters ( ) . METHOD_6 ( ) , TYPE_1 . METHOD_7 ( ) , TYPE_1 . getParameters ( ) . METHOD_8 ( ) ) ) )  TYPE_1 . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) . METHOD_5 ( ) . get ( TYPE_1 . getParameters ( ) . METHOD_6 ( ) , TYPE_1 . METHOD_7 ( ) , TYPE_1 . getParameters ( ) . METHOD_8 ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( new TYPE_3 ( TYPE_4 . METHOD_3 ( ) . getId ( ) , TYPE_4 . getParameters ( ) . METHOD_4 ( ) ) , TYPE_4 . METHOD_3 ( ) . METHOD_5 ( ) , TYPE_4 . METHOD_3 ( ) . METHOD_6 ( ) ) ) INIT = TYPE_2 . METHOD_2 ( new TYPE_3 ( TYPE_4 . METHOD_3 ( ) . getId ( ) , TYPE_4 . getParameters ( ) . METHOD_4 ( ) ) , TYPE_4 . METHOD_3 ( ) . METHOD_5 ( ) , TYPE_4 . METHOD_3 ( ) . METHOD_6 ( ) ) ) VAR VAR (  TYPE_4 . METHOD_7 ( ) . METHOD_8 ( VAR_1 ) )  TYPE_4 . METHOD_7 ( ) . METHOD_8 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME iface ) NAME iface ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  METHOD_3 ( iface , true , METHOD_4 ( iface . METHOD_5 ( ) , iface . METHOD_6 ( ) , iface . METHOD_7 ( ) , iface . METHOD_8 ( ) ) ) )  METHOD_3 ( iface , true , METHOD_4 ( iface . METHOD_5 ( ) , iface . METHOD_6 ( ) , iface . METHOD_7 ( ) , iface . METHOD_8 ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<TYPE_1> ) TYPE java.util.ArrayList<TYPE_1> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.ArrayList < TYPE_1 > ( VAR_1 . size ( ) ) ) INIT = new java.util.ArrayList < TYPE_1 > ( VAR_1 . size ( ) ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_4 . METHOD_2 ( VAR_3 . getName ( ) ) )  VAR_4 . METHOD_2 ( VAR_3 . getName ( ) ) (  VAR_4 . setId ( VAR_3 . getId ( ) ) )  VAR_4 . setId ( VAR_3 . getId ( ) ) (  VAR_2 . add ( VAR_4 ) )  VAR_2 . add ( VAR_4 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , VAR_2 ) ) ) )  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , VAR_2 ) ) ) (  METHOD_3 ( cmd , false ) )  METHOD_3 ( cmd , false ) (  TYPE_3 . METHOD_4 ( cmd . METHOD_5 ( ) ) )  TYPE_3 . METHOD_4 ( cmd . METHOD_5 ( ) ) (  TYPE_3 . METHOD_6 ( cmd . getReturnValue ( ) . METHOD_7 ( ) . METHOD_8 ( TYPE_4 . toString ( ) ) ) )  TYPE_3 . METHOD_6 ( cmd . getReturnValue ( ) . METHOD_7 ( ) . METHOD_8 ( TYPE_4 . toString ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME cmd ) NAME cmd ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( cmd ) . METHOD_2 ( ) )  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( cmd ) . METHOD_2 ( ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_3 ( ) ) INIT = new TYPE_3 ( ) ) VAR VAR (  VAR_4 . METHOD_3 ( VAR_1 ) )  VAR_4 . METHOD_3 ( VAR_1 ) (  VAR_4 . METHOD_4 ( VAR_1 ) )  VAR_4 . METHOD_4 ( VAR_1 ) ( IF IF ( COND ! VAR_1 ) COND ! VAR_1 ( THEN THEN (  VAR_4 . METHOD_5 ( new TYPE_4 ( VAR_2 , STRING_1 ) ) )  VAR_4 . METHOD_5 ( new TYPE_4 ( VAR_2 , STRING_1 ) ) ) THEN THEN ) IF IF (  org.mockito.Mockito.when ( VAR_5 . METHOD_6 ( TYPE_5 . any ( VAR_6 class ) , TYPE_5 . any ( VAR_7 class ) ) ) . thenReturn ( VAR_4 ) )  org.mockito.Mockito.when ( VAR_5 . METHOD_6 ( TYPE_5 . any ( VAR_6 class ) , TYPE_5 . any ( VAR_7 class ) ) ) . thenReturn ( VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN org.ovirt.engine.core.common.businessentities.VDS ) RETURN org.ovirt.engine.core.common.businessentities.VDS ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME VAR_2 ) NAME VAR_2 ( INIT = new org.ovirt.engine.core.common.businessentities.VDS ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.VDS ( ) ) VAR VAR (  VAR_2 . METHOD_2 ( STRING_1 ) )  VAR_2 . METHOD_2 ( STRING_1 ) (  VAR_2 . METHOD_3 ( INT_1 ) )  VAR_2 . METHOD_3 ( INT_1 ) (  VAR_2 . METHOD_4 ( STRING_2 ) )  VAR_2 . METHOD_4 ( STRING_2 ) (  VAR_2 . METHOD_5 ( STRING_3 ) )  VAR_2 . METHOD_5 ( STRING_3 ) (  VAR_2 . METHOD_6 ( STRING_4 ) )  VAR_2 . METHOD_6 ( STRING_4 ) (  VAR_2 . METHOD_7 ( new org.ovirt.engine.core.compat . Version ( STRING_5 ) ) )  VAR_2 . METHOD_7 ( new org.ovirt.engine.core.compat . Version ( STRING_5 ) ) (  VAR_2 . METHOD_8 ( org.ovirt.engine.core.compat.Guid . METHOD_9 ( ) ) )  VAR_2 . METHOD_8 ( org.ovirt.engine.core.compat.Guid . METHOD_9 ( ) ) (  VAR_2 . setId ( VAR_1 ) )  VAR_2 . setId ( VAR_1 ) (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = null ) INIT = null ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = null ) INIT = null ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_2 = VAR_4 . METHOD_2 ( ) )  VAR_2 = VAR_4 . METHOD_2 ( ) (  VAR_3 = VAR_2 . METHOD_3 ( ( STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ) ) )  VAR_3 = VAR_2 . METHOD_3 ( ( STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ) ) (  VAR_3 . METHOD_4 ( 1 , VAR_1 ) )  VAR_3 . METHOD_4 ( 1 , VAR_1 ) ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_3 . METHOD_5 ( ) ) INIT = VAR_3 . METHOD_5 ( ) ) VAR VAR ( IF IF ( COND VAR_5 != 1 ) COND VAR_5 != 1 ( THEN THEN (  VAR_6 . error ( STRING_5 , VAR_1 ) )  VAR_6 . error ( STRING_5 , VAR_1 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ( FINALLY FINALLY (  TYPE_4 . METHOD_6 ( VAR_3 , VAR_2 ) )  TYPE_4 . METHOD_6 ( VAR_3 , VAR_2 ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME returnValue ) NAME returnValue ( INIT = ( ( java.lang.Boolean ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( result ) ) . getReturnValue ( ) ) ) ) INIT = ( ( java.lang.Boolean ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( result ) ) . getReturnValue ( ) ) ) ) VAR VAR ( IF IF ( COND returnValue ) COND returnValue ( THEN THEN (  command . METHOD_1 ( ) )  command . METHOD_1 ( ) ) THEN THEN ( ELSE ELSE (  METHOD_2 ( command ) )  METHOD_2 ( command ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  command . getParameters ( ) . METHOD_2 ( METHOD_3 ( ) ) )  command . getParameters ( ) . METHOD_2 ( METHOD_3 ( ) ) (  METHOD_4 ( VAR_1 ) )  METHOD_4 ( VAR_1 ) (  METHOD_5 ( VAR_2 , org.ovirt.engine.core.compat.Guid . METHOD_6 ( ) , VAR_1 ) )  METHOD_5 ( VAR_2 , org.ovirt.engine.core.compat.Guid . METHOD_6 ( ) , VAR_1 ) (  command . METHOD_7 ( ) )  command . METHOD_7 ( ) (  TYPE_1 . METHOD_8 ( ( ( command . METHOD_9 ( ) . size ( ) ) == 1 ) ) )  TYPE_1 . METHOD_8 ( ( ( command . METHOD_9 ( ) . size ( ) ) == 1 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( true ) ) INIT = new TYPE_1 ( true ) ) VAR VAR (  TYPE_2 . METHOD_2 ( STRING_1 , VAR_1 . METHOD_3 ( STRING_1 , STRING_2 ) ) )  TYPE_2 . METHOD_2 ( STRING_1 , VAR_1 . METHOD_3 ( STRING_1 , STRING_2 ) ) (  TYPE_2 . METHOD_4 ( STRING_3 , VAR_1 . METHOD_3 ( STRING_4 , STRING_2 ) ) )  TYPE_2 . METHOD_4 ( STRING_3 , VAR_1 . METHOD_3 ( STRING_4 , STRING_2 ) ) (  TYPE_2 . METHOD_4 ( STRING_5 , VAR_1 . METHOD_3 ( STRING_1 , STRING_6 ) ) )  TYPE_2 . METHOD_4 ( STRING_5 , VAR_1 . METHOD_3 ( STRING_1 , STRING_6 ) ) (  TYPE_2 . METHOD_4 ( STRING_7 , VAR_1 . METHOD_3 ( STRING_1 , null ) ) )  TYPE_2 . METHOD_4 ( STRING_7 , VAR_1 . METHOD_3 ( STRING_1 , null ) ) (  TYPE_2 . METHOD_4 ( STRING_8 , VAR_1 . METHOD_3 ( null , STRING_2 ) ) )  TYPE_2 . METHOD_4 ( STRING_8 , VAR_1 . METHOD_3 ( null , STRING_2 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME type ) NAME type ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ( INIT = type . METHOD_2 ( ) ) INIT = type . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_3 ( VAR_1 , true ) ) INIT = METHOD_3 ( VAR_1 , true ) ) VAR VAR (  VAR_2 . METHOD_4 ( VAR_3 . List class ) )  VAR_2 . METHOD_4 ( VAR_3 . List class ) (  VAR_2 . METHOD_5 ( ( ( STRING_1 + ( VAR_2 . METHOD_6 ( ) ) ) + STRING_2 ) ) )  VAR_2 . METHOD_5 ( ( ( STRING_1 + ( VAR_2 . METHOD_6 ( ) ) ) + STRING_2 ) ) (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS> ( NAME hosts ) NAME hosts ( INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ) ( result ) ) ) INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ) ( result ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1<org.ovirt.engine.core.common.businessentities.VDS> ) TYPE TYPE_1<org.ovirt.engine.core.common.businessentities.VDS> ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_1 ( ) ) INIT = METHOD_1 ( ) ) VAR VAR (  VAR_1 . setItems ( hosts ) )  VAR_1 . setItems ( hosts ) (  VAR_1 . METHOD_2 ( true ) )  VAR_1 . METHOD_2 ( true ) (  METHOD_3 ( true ) )  METHOD_3 ( true ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME METHOD_2 ) NAME METHOD_2 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source != null ? ( ( java.lang.Boolean ) ( source ) ) . METHOD_3 ( ) : true ; )  return source != null ? ( ( java.lang.Boolean ) ( source ) ) . METHOD_3 ( ) : true ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object METHOD_2 ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Boolean ) ( source ) ) . METHOD_3 ( ) : true ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object METHOD_2 ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Boolean ) ( source ) ) . METHOD_3 ( ) : true ; } } (  METHOD_4 ( new TYPE_1 ( VAR_1 , METHOD_5 ( ) ) , aQuery ) )  METHOD_4 ( new TYPE_1 ( VAR_1 , METHOD_5 ( ) ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ) TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME storageDomain ) NAME storageDomain ( INIT = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) ) VAR VAR (  storageDomain . setId ( VAR_1 ) )  storageDomain . setId ( VAR_1 ) (  storageDomain . METHOD_2 ( VAR_2 ) )  storageDomain . METHOD_2 ( VAR_2 ) (  org.mockito.Mockito.when ( VAR_3 . get ( TYPE_1 . any ( VAR_4 . Guid class ) ) ) . thenReturn ( storageDomain ) )  org.mockito.Mockito.when ( VAR_3 . get ( TYPE_1 . any ( VAR_4 . Guid class ) ) ) . thenReturn ( storageDomain ) (  org.mockito.Mockito.when ( VAR_3 . METHOD_3 ( VAR_1 , VAR_2 ) ) . thenReturn ( storageDomain ) )  org.mockito.Mockito.when ( VAR_3 . METHOD_3 ( VAR_1 , VAR_2 ) ) . thenReturn ( storageDomain ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  getWindow ( ) . METHOD_2 ( ) )  getWindow ( ) . METHOD_2 ( ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME returnValue ) NAME returnValue ( INIT = result . getReturnValue ( ) ) INIT = result . getReturnValue ( ) ) VAR VAR ( IF IF ( COND ( returnValue != null ) && ( returnValue . getSucceeded ( ) ) ) COND ( returnValue != null ) && ( returnValue . getSucceeded ( ) ) ( THEN THEN (  METHOD_3 ( null ) )  METHOD_3 ( null ) (  METHOD_4 ( ) )  METHOD_4 ( ) (  METHOD_5 ( returnValue ) )  METHOD_5 ( returnValue ) ) THEN THEN ( ELSE ELSE (  METHOD_6 ( ) )  METHOD_6 ( ) ) ELSE ELSE ) IF IF (  super . METHOD_1 ( result ) )  super . METHOD_1 ( result ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME returnValue ) NAME returnValue ( INIT = VAR_1 ) INIT = VAR_1 ) VAR VAR ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.String> ) TYPE java.util.Map<java.lang.String,java.lang.String> ( NAME map ) NAME map ( INIT = TYPE_2 . METHOD_2 ( VAR_2 ) ) INIT = TYPE_2 . METHOD_2 ( VAR_2 ) ) VAR VAR (  returnValue = TYPE_2 . METHOD_1 ( VAR_1 , map ) )  returnValue = TYPE_2 . METHOD_1 ( VAR_1 , map ) ) THEN THEN ) IF IF (  return returnValue ; )  return returnValue ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( ( VAR_1 ) == null ) && ( ( METHOD_2 ( ) ) != null ) ) COND ( ( VAR_1 ) == null ) && ( ( METHOD_2 ( ) ) != null ) ( THEN THEN (  VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) )  VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) (  VAR_1 . add ( new TYPE_1 ( METHOD_2 ( ) . getId ( ) , VAR_2 . Disk , VAR_3 ) ) )  VAR_1 . add ( new TYPE_1 ( METHOD_2 ( ) . getId ( ) , VAR_2 . Disk , VAR_3 ) ) ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_1 ) ( VAR_3 ) ) ) INIT = ( ( TYPE_1 ) ( VAR_3 ) ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_2 . METHOD_2 ( ) ) INIT = VAR_2 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2.Network ) TYPE TYPE_2.Network ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_2 . METHOD_3 ( VAR_4 , null , VAR_1 ) ) INIT = VAR_2 . METHOD_3 ( VAR_4 , null , VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_5 != null ) COND VAR_5 != null ( THEN THEN (  return VAR_5 . getId ( ) . toString ( ) ; )  return VAR_5 . getId ( ) . toString ( ) ; ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME parameters ) NAME parameters ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND TYPE_2 . METHOD_2 ( ) . equals ( VAR_1 . METHOD_3 ( ) ) ) COND TYPE_2 . METHOD_2 ( ) . equals ( VAR_1 . METHOD_3 ( ) ) ( THEN THEN (  TYPE_3 . getInstance ( ) . METHOD_4 ( VAR_1 , ( parameters . METHOD_5 ( ) ? VAR_2 : VAR_3 ) ) )  TYPE_3 . getInstance ( ) . METHOD_4 ( VAR_1 , ( parameters . METHOD_5 ( ) ? VAR_2 : VAR_3 ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> ( NAME result ) NAME result ( INIT = dao . METHOD_2 ( VAR_1 ) ) INIT = dao . METHOD_2 ( VAR_1 ) ) VAR VAR (  TYPE_1 . METHOD_3 ( result ) )  TYPE_1 . METHOD_3 ( result ) (  TYPE_1 . METHOD_4 ( ( ( result . size ( ) ) == 1 ) ) )  TYPE_1 . METHOD_4 ( ( ( result . size ( ) ) == 1 ) ) (  TYPE_1 . assertEquals ( result . get ( 0 ) . getId ( ) , VAR_2 ) )  TYPE_1 . assertEquals ( result . get ( 0 ) . getId ( ) , VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( STRING_1 , vds . getId ( ) , vds . METHOD_3 ( ) ) )  VAR_1 . METHOD_2 ( STRING_1 , vds . getId ( ) , vds . METHOD_3 ( ) ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME params ) NAME params ( INIT = new TYPE_1 ( vds . getId ( ) , VAR_2 ) ) INIT = new TYPE_1 ( vds . getId ( ) , VAR_2 ) ) VAR VAR (  params . METHOD_4 ( VAR_3 ) )  params . METHOD_4 ( VAR_3 ) (  TYPE_2 . getInstance ( ) . METHOD_5 ( VAR_4 , params , TYPE_3 . METHOD_6 ( ) ) )  TYPE_2 . getInstance ( ) . METHOD_5 ( VAR_4 , params , TYPE_3 . METHOD_6 ( ) ) (  METHOD_7 ( vds ) )  METHOD_7 ( vds ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) (  dao = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) )  dao = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) (  cluster = new org.ovirt.engine.core.compat.Guid ( STRING_1 ) )  cluster = new org.ovirt.engine.core.compat.Guid ( STRING_1 ) (  VAR_2 = new org.ovirt.engine.core.compat.Guid ( STRING_2 ) )  VAR_2 = new org.ovirt.engine.core.compat.Guid ( STRING_2 ) (  VAR_3 = STRING_3 )  VAR_3 = STRING_3 (  VAR_4 = new org.ovirt.engine.core.common.businessentities . network ( ) )  VAR_4 = new org.ovirt.engine.core.common.businessentities . network ( ) (  VAR_4 . METHOD_4 ( STRING_4 ) )  VAR_4 . METHOD_4 ( STRING_4 ) (  VAR_4 . METHOD_5 ( STRING_5 ) )  VAR_4 . METHOD_5 ( STRING_5 ) (  VAR_4 . METHOD_6 ( VAR_2 ) )  VAR_4 . METHOD_6 ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( ( VAR_1 ) == null ) && ( ( METHOD_2 ( ) ) != null ) ) COND ( ( VAR_1 ) == null ) && ( ( METHOD_2 ( ) ) != null ) ( THEN THEN (  VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) )  VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) (  VAR_1 . add ( new TYPE_1 ( METHOD_2 ( ) . getId ( ) , VAR_2 . Disk , VAR_3 ) ) )  VAR_1 . add ( new TYPE_1 ( METHOD_2 ( ) . getId ( ) , VAR_2 . Disk , VAR_3 ) ) (  VAR_1 . add ( new TYPE_1 ( METHOD_2 ( ) . getId ( ) , VAR_2 . Disk , VAR_4 ) ) )  VAR_1 . add ( new TYPE_1 ( METHOD_2 ( ) . getId ( ) , VAR_2 . Disk , VAR_4 ) ) ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ; )  return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ; } } ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( STRING_1 , VAR_2 . Disk ) ) INIT = new TYPE_1 ( STRING_1 , VAR_2 . Disk ) ) VAR VAR (  VAR_1 . METHOD_2 ( INT_1 ) )  VAR_1 . METHOD_2 ( INT_1 ) (  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_3 , VAR_1 , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_3 , VAR_1 , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.Map<java.lang.String,java.lang.String> ) RETURN java.util.Map<java.lang.String,java.lang.String> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( VAR_1 , METHOD_3 ( ) ) )  METHOD_2 ( VAR_1 , METHOD_3 ( ) ) (  METHOD_2 ( VAR_2 , getParameters ( ) . METHOD_4 ( ) ) )  METHOD_2 ( VAR_2 , getParameters ( ) . METHOD_4 ( ) ) (  METHOD_2 ( VAR_3 , getParameters ( ) . METHOD_5 ( ) ) )  METHOD_2 ( VAR_3 , getParameters ( ) . METHOD_5 ( ) ) (  METHOD_2 ( VAR_4 , getParameters ( ) . METHOD_6 ( ) ) )  METHOD_2 ( VAR_4 , getParameters ( ) . METHOD_6 ( ) ) (  METHOD_2 ( VAR_5 , TYPE_1 . name ( ) ) )  METHOD_2 ( VAR_5 , TYPE_1 . name ( ) ) (  return super . METHOD_1 ( ) ; )  return super . METHOD_1 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.ArrayList<java.lang.String> ) RETURN java.util.ArrayList<java.lang.String> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<java.lang.String> ) TYPE java.util.ArrayList<java.lang.String> ( NAME list ) NAME list ( INIT = new java.util.ArrayList < java.lang.String > ( VAR_1 . length ) ) INIT = new java.util.ArrayList < java.lang.String > ( VAR_1 . length ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME e ) NAME e ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  list . add ( e . METHOD_2 ( ) ) )  list . add ( e . METHOD_2 ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return list ; )  return list ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  validator = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( VAR_1 , cluster , VAR_2 ) ) )  validator = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( VAR_1 , cluster , VAR_2 ) ) (  org.mockito.Mockito.doReturn ( true ) . when ( validator ) . METHOD_3 ( TYPE_2 . any ( VAR_3 class ) ) )  org.mockito.Mockito.doReturn ( true ) . when ( validator ) . METHOD_3 ( TYPE_2 . any ( VAR_3 class ) ) (  TYPE_3 . METHOD_4 ( validator . METHOD_1 ( TYPE_4 . instance ( ) . METHOD_5 ( VAR_3 class ) ) , TYPE_5 . METHOD_6 ( ) ) )  TYPE_3 . METHOD_4 ( validator . METHOD_1 ( TYPE_4 . instance ( ) . METHOD_5 ( VAR_3 class ) ) , TYPE_5 . METHOD_6 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME vmId ) NAME vmId ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND source != null ) COND source != null ( THEN THEN (  return ( ( ( java.util.List < TYPE_1 > ) ( source ) ) . size ( ) ) > 0 ; )  return ( ( ( java.util.List < TYPE_1 > ) ( source ) ) . size ( ) ) > 0 ; ) THEN THEN ) IF IF (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return ( ( ( java.util.List < TYPE_1 > ) ( source ) ) . size ( ) ) > 0 ; } return false ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return ( ( ( java.util.List < TYPE_1 > ) ( source ) ) . size ( ) ) > 0 ; } return false ; } } (  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME host ) NAME host ( INIT = context . host ) INIT = context . host ) VAR VAR ( IF IF ( COND ( host . getStoragePoolId ( ) ) != null ) COND ( host . getStoragePoolId ( ) ) != null ( THEN THEN ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 = ( ( org.ovirt.engine.core.common.businessentities.StoragePool ) ( returnValue ) ) )  VAR_1 = ( ( org.ovirt.engine.core.common.businessentities.StoragePool ) ( returnValue ) ) (  METHOD_3 ( ) )  METHOD_3 ( ) ) BLOCK BLOCK ) METHOD METHOD (  TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 = ( ( org.ovirt.engine.core.common.businessentities.StoragePool ) ( returnValue ) ) ; METHOD_3 ( ) ; } } , VAR_2 ) , host . getStoragePoolId ( ) ) )  TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 = ( ( org.ovirt.engine.core.common.businessentities.StoragePool ) ( returnValue ) ) ; METHOD_3 ( ) ; } } , VAR_2 ) , host . getStoragePoolId ( ) ) ) THEN THEN ( ELSE ELSE (  METHOD_3 ( ) )  METHOD_3 ( ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  METHOD_3 ( ) )  METHOD_3 ( ) ( VAR VAR ( TYPE java.util.List<TYPE_1.DiskImage> ) TYPE java.util.List<TYPE_1.DiskImage> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_4 ( ) ) INIT = TYPE_2 . METHOD_4 ( ) ) VAR VAR (  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( cmd ) . METHOD_5 ( ) )  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( cmd ) . METHOD_5 ( ) (  org.mockito.Mockito.doReturn ( new TYPE_3 . ValidationResult ( VAR_2 ) ) . when ( VAR_3 ) . METHOD_6 ( VAR_1 ) )  org.mockito.Mockito.doReturn ( new TYPE_3 . ValidationResult ( VAR_2 ) ) . when ( VAR_3 ) . METHOD_6 ( VAR_1 ) (  TYPE_4 . METHOD_7 ( cmd , VAR_4 ) )  TYPE_4 . METHOD_7 ( cmd , VAR_4 ) (  org.mockito.Mockito . METHOD_8 ( VAR_3 ) . METHOD_6 ( VAR_1 ) )  org.mockito.Mockito . METHOD_8 ( VAR_3 ) . METHOD_6 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public synchronized ) MODIFIER public synchronized ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND METHOD_2 ( ) ) COND METHOD_2 ( ) ( THEN THEN (  METHOD_3 ( ) )  METHOD_3 ( ) ( IF IF ( COND ( METHOD_2 ( ) ) && ( VAR_1 ) ) COND ( METHOD_2 ( ) ) && ( VAR_1 ) ( THEN THEN (  VAR_2 . METHOD_4 ( STRING_1 , VAR_3 < java.lang.Integer > METHOD_5 ( VAR_4 ) ) )  VAR_2 . METHOD_4 ( STRING_1 , VAR_3 < java.lang.Integer > METHOD_5 ( VAR_4 ) ) (  VAR_1 = false )  VAR_1 = false ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_5 . size ( ) ) > 0 ) COND ( VAR_5 . size ( ) ) > 0 ( THEN THEN (  METHOD_6 ( ) )  METHOD_6 ( ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < VAR_2 ) COND i < VAR_2 ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK (  TYPE_2 . METHOD_2 ( new TYPE_3 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , VAR_1 . getId ( ) ) , VAR_3 , VAR_1 . METHOD_4 ( ) . METHOD_5 ( ) , TYPE_2 . METHOD_6 ( VAR_1 ) , true , false ) )  TYPE_2 . METHOD_2 ( new TYPE_3 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , VAR_1 . getId ( ) ) , VAR_3 , VAR_1 . METHOD_4 ( ) . METHOD_5 ( ) , TYPE_2 . METHOD_6 ( VAR_1 ) , true , false ) ) BLOCK BLOCK ) FOR FOR ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<java.lang.Integer,TYPE_1> ) TYPE java.util.Map<java.lang.Integer,TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) INIT = ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) VAR VAR ( IF IF ( COND ( VAR_1 . get ( VAR_2 ) ) == null ) COND ( VAR_1 . get ( VAR_2 ) ) == null ( THEN THEN (  throw new TYPE_3 ( STRING_1 ) ; )  throw new TYPE_3 ( STRING_1 ) ; ) THEN THEN ) IF IF (  VAR_3 = TYPE_4 . METHOD_1 ( VAR_1 ) )  VAR_3 = TYPE_4 . METHOD_1 ( VAR_1 ) (  METHOD_2 ( ) )  METHOD_2 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.doReturn ( true ) . when ( cmd ) . METHOD_2 ( ) )  org.mockito.Mockito.doReturn ( true ) . when ( cmd ) . METHOD_2 ( ) (  org.mockito.Mockito.doReturn ( true ) . when ( cmd ) . METHOD_3 ( ) )  org.mockito.Mockito.doReturn ( true ) . when ( cmd ) . METHOD_3 ( ) (  cmd . getParameters ( ) . getVm ( ) . METHOD_4 ( VAR_1 ) )  cmd . getParameters ( ) . getVm ( ) . METHOD_4 ( VAR_1 ) (  cluster . METHOD_5 ( VAR_1 ) )  cluster . METHOD_5 ( VAR_1 ) (  cluster . METHOD_6 ( TYPE_1 . METHOD_7 ( ) ) )  cluster . METHOD_6 ( TYPE_1 . METHOD_7 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( VAR_1 ) ) INIT = METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND null == VAR_2 ) COND null == VAR_2 ( THEN THEN (  VAR_2 = METHOD_3 ( VAR_1 . METHOD_4 ( ) ) )  VAR_2 = METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_3 . METHOD_5 ( VAR_2 , true ) ) INIT = TYPE_3 . METHOD_5 ( VAR_2 , true ) ) VAR VAR (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN java.util.Map<java.lang.String,java.lang.String> ) RETURN java.util.Map<java.lang.String,java.lang.String> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.String> ) TYPE java.util.Map<java.lang.String,java.lang.String> ( NAME returnValue ) NAME returnValue ( INIT = new java.util.HashMap < java.lang.String , java.lang.String > ( VAR_2 . METHOD_2 ( ) ) ) INIT = new java.util.HashMap < java.lang.String , java.lang.String > ( VAR_2 . METHOD_2 ( ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2<java.lang.String> ) TYPE TYPE_2<java.lang.String> ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_3 . METHOD_3 ( VAR_1 ) ) INIT = TYPE_3 . METHOD_3 ( VAR_1 ) ) VAR VAR ( IF IF ( COND ( VAR_3 != null ) && ( ( VAR_3 . size ( ) ) > 0 ) ) COND ( VAR_3 != null ) && ( ( VAR_3 . size ( ) ) > 0 ) ( THEN THEN (  TYPE_4 . METHOD_4 ( VAR_2 , VAR_3 , returnValue ) )  TYPE_4 . METHOD_4 ( VAR_2 , VAR_3 , returnValue ) ) THEN THEN ) IF IF (  return returnValue ; )  return returnValue ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1.AddVmCommand<TYPE_2> ) RETURN TYPE_1.AddVmCommand<TYPE_2> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ( INIT = METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ) INIT = METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1.AddVmCommand<TYPE_2> ) TYPE TYPE_1.AddVmCommand<TYPE_2> ( NAME cmd ) NAME cmd ( INIT = METHOD_3 ( vm ) ) INIT = METHOD_3 ( vm ) ) VAR VAR (  TYPE_3 . METHOD_4 ( cmd ) )  TYPE_3 . METHOD_4 ( cmd ) (  org.mockito.Mockito.doReturn ( METHOD_5 ( ) ) . when ( cmd ) . METHOD_6 ( ) )  org.mockito.Mockito.doReturn ( METHOD_5 ( ) ) . when ( cmd ) . METHOD_6 ( ) (  return cmd ; )  return cmd ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.util.ArrayList<TYPE_1> ) RETURN java.util.ArrayList<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.ArrayList<TYPE_1> ) TYPE java.util.ArrayList<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<TYPE_1> ) TYPE java.util.ArrayList<TYPE_1> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.ArrayList < TYPE_1 > ( ) ) INIT = new java.util.ArrayList < TYPE_1 > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME i ) NAME i ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( IF IF ( COND ! ( TYPE_2 . METHOD_2 ( i . METHOD_3 ( ) ) ) ) COND ! ( TYPE_2 . METHOD_2 ( i . METHOD_3 ( ) ) ) ( THEN THEN (  VAR_2 . add ( i ) )  VAR_2 . add ( i ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) ) ) )  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) ) ) (  METHOD_3 ( cmd ) )  METHOD_3 ( cmd ) (  METHOD_4 ( cmd , true ) )  METHOD_4 ( cmd , true ) (  cmd . METHOD_1 ( ) )  cmd . METHOD_1 ( ) (  TYPE_3 . METHOD_5 ( cmd . getReturnValue ( ) . getSucceeded ( ) ) )  TYPE_3 . METHOD_5 ( cmd . getReturnValue ( ) . getSucceeded ( ) ) (  TYPE_3 . assertEquals ( cmd . METHOD_6 ( ) , VAR_2 ) )  TYPE_3 . assertEquals ( cmd . METHOD_6 ( ) , VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source != null ? source : new java.util.ArrayList < TYPE_1 > ( ) ; )  return source != null ? source : new java.util.ArrayList < TYPE_1 > ( ) ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : new java.util.ArrayList < TYPE_1 > ( ) ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : new java.util.ArrayList < TYPE_1 > ( ) ; } } (  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new TYPE_2 ( VAR_1 , VAR_3 ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new TYPE_2 ( VAR_1 , VAR_3 ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME nic ) NAME nic ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  nic . setId ( VAR_1 ) )  nic . setId ( VAR_1 ) (  nic . METHOD_2 ( new TYPE_2 ( ) ) )  nic . METHOD_2 ( new TYPE_2 ( ) ) (  nic . getVm ( ) . setId ( VAR_2 ) )  nic . getVm ( ) . setId ( VAR_2 ) (  TYPE_3 . METHOD_3 ( METHOD_4 ( ) , nic ) )  TYPE_3 . METHOD_3 ( METHOD_4 ( ) , nic ) (  assertEquals ( VAR_3 , nic . METHOD_5 ( ) ) )  assertEquals ( VAR_3 , nic . METHOD_5 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ! ( TYPE_1 . METHOD_2 ( TYPE_2 . getVm ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) ) ) COND ! ( TYPE_1 . METHOD_2 ( TYPE_2 . getVm ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ( IF IF ( COND ! ( VAR_1 . METHOD_5 ( TYPE_2 . getVm ( ) . METHOD_6 ( ) . METHOD_7 ( ) , METHOD_8 ( ) ) ) ) COND ! ( VAR_1 . METHOD_5 ( TYPE_2 . getVm ( ) . METHOD_6 ( ) . METHOD_7 ( ) , METHOD_8 ( ) ) ) ( THEN THEN (  METHOD_9 ( STRING_1 , TYPE_2 . getVdsGroup ( ) . METHOD_10 ( ) ) )  METHOD_9 ( STRING_1 , TYPE_2 . getVdsGroup ( ) . METHOD_10 ( ) ) (  return METHOD_11 ( VAR_2 ) ; )  return METHOD_11 ( VAR_2 ) ; ) THEN THEN ) IF IF (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = resource . METHOD_2 ( ) . METHOD_2 ( ) . METHOD_2 ( ) ) INIT = resource . METHOD_2 ( ) . METHOD_2 ( ) . METHOD_2 ( ) ) VAR VAR (  VAR_1 . METHOD_3 ( VAR_2 ) )  VAR_1 . METHOD_3 ( VAR_2 ) (  VAR_1 . METHOD_4 ( VAR_3 ) )  VAR_1 . METHOD_4 ( VAR_3 ) (  VAR_1 . METHOD_5 ( VAR_4 ) )  VAR_1 . METHOD_5 ( VAR_4 ) (  VAR_1 . METHOD_6 ( VAR_5 ) )  VAR_1 . METHOD_6 ( VAR_5 ) (  VAR_1 . METHOD_7 ( VAR_6 ) )  VAR_1 . METHOD_7 ( VAR_6 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VdsNetworkInterface> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VdsNetworkInterface> ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ) INIT = METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME VAR_4 ) NAME VAR_4 ( IN VAR_3 ) IN VAR_3 ( BLOCK BLOCK ( IF IF ( COND VAR_1 . equals ( VAR_4 . METHOD_4 ( ) ) ) COND VAR_1 . equals ( VAR_4 . METHOD_4 ( ) ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.VdcQueryReturnValue ) TYPE TYPE_1.VdcQueryReturnValue ( NAME returnValue ) NAME returnValue ( INIT = new TYPE_1 . VdcQueryReturnValue ( ) ) INIT = new TYPE_1 . VdcQueryReturnValue ( ) ) VAR VAR (  returnValue . METHOD_2 ( true ) )  returnValue . METHOD_2 ( true ) (  returnValue . METHOD_3 ( VAR_1 ) )  returnValue . METHOD_3 ( VAR_1 ) (  org.mockito.Mockito.when ( VAR_2 . runQuery ( TYPE_2 . METHOD_4 ( VAR_3 ) , TYPE_3 . METHOD_5 ( VAR_4 class ) ) ) . thenReturn ( returnValue ) )  org.mockito.Mockito.when ( VAR_2 . runQuery ( TYPE_2 . METHOD_4 ( VAR_3 ) , TYPE_3 . METHOD_5 ( VAR_4 class ) ) ) . thenReturn ( returnValue ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ) TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ( NAME cluster ) NAME cluster ( INIT = ( ( org.ovirt.engine.core.common.businessentities.VDSGroup ) ( returnValue ) ) ) INIT = ( ( org.ovirt.engine.core.common.businessentities.VDSGroup ) ( returnValue ) ) ) VAR VAR ( IF IF ( COND ( ( cluster != null ) && ( cluster . METHOD_1 ( ) ) ) && ( ! ( cluster . METHOD_2 ( ) ) ) ) COND ( ( cluster != null ) && ( cluster . METHOD_1 ( ) ) ) && ( ! ( cluster . METHOD_2 ( ) ) ) ( THEN THEN (  model . METHOD_3 ( ) . METHOD_4 ( true ) )  model . METHOD_3 ( ) . METHOD_4 ( true ) ) THEN THEN ) IF IF (  model . METHOD_5 ( ) )  model . METHOD_5 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < TYPE_1 > ( VAR_2 . METHOD_2 ( ) ) ) INIT = new java.util.ArrayList < TYPE_1 > ( VAR_2 . METHOD_2 ( ) ) ) VAR VAR (  VAR_1 . METHOD_3 ( VAR_2 . METHOD_4 ( ) . METHOD_5 ( ) ) )  VAR_1 . METHOD_3 ( VAR_2 . METHOD_4 ( ) . METHOD_5 ( ) ) (  TYPE_2 . METHOD_1 ( METHOD_6 ( ) , TYPE_3 . METHOD_7 ( ) , VAR_2 , VAR_2 . METHOD_8 ( ) , true , VAR_1 , VAR_3 , VAR_4 , TYPE_3 . getParameters ( ) . METHOD_9 ( ) , TYPE_3 . getParameters ( ) . METHOD_10 ( ) ) )  TYPE_2 . METHOD_1 ( METHOD_6 ( ) , TYPE_3 . METHOD_7 ( ) , VAR_2 , VAR_2 . METHOD_8 ( ) , true , VAR_1 , VAR_3 , VAR_4 , TYPE_3 . getParameters ( ) . METHOD_9 ( ) , TYPE_3 . getParameters ( ) . METHOD_10 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME map ) NAME map ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR (  TYPE_3 . METHOD_3 ( ) . METHOD_4 ( map ) )  TYPE_3 . METHOD_3 ( ) . METHOD_4 ( map ) (  TYPE_3 . METHOD_3 ( ) . METHOD_5 ( ( ( map . METHOD_6 ( ) . size ( ) ) > 0 ) ) )  TYPE_3 . METHOD_3 ( ) . METHOD_5 ( ( ( map . METHOD_6 ( ) . size ( ) ) > 0 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1.ValidationResult ) RETURN TYPE_1.ValidationResult ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . METHOD_3 ( ) ) INIT = VAR_1 . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_1 . getId ( ) ) INIT = VAR_1 . getId ( ) ) VAR VAR (  return METHOD_4 ( VAR_4 , VAR_2 , VAR_3 , VAR_5 , VAR_6 ) ; )  return METHOD_4 ( VAR_4 , VAR_2 , VAR_3 , VAR_5 , VAR_6 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME parameters ) NAME parameters ( INIT = null ) INIT = null ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  parameters = VAR_2 . METHOD_2 ( ) )  parameters = VAR_2 . METHOD_2 ( ) (  parameters . getParameters ( ) . add ( new TYPE_2 ( VAR_1 , null , VAR_3 , VAR_4 , 1 , 1 ) ) )  parameters . getParameters ( ) . add ( new TYPE_2 ( VAR_1 , null , VAR_3 , VAR_4 , 1 , 1 ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  return VAR_5 . METHOD_3 ( parameters ) ; )  return VAR_5 . METHOD_3 ( parameters ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 < TYPE_2 > ( new TYPE_2 ( VAR_1 ) ) ) )  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 < TYPE_2 > ( new TYPE_2 ( VAR_1 ) ) ) (  METHOD_3 ( ) )  METHOD_3 ( ) (  org.mockito.Mockito . METHOD_4 ( ) . when ( VAR_2 ) . METHOD_5 ( getVdsGroup ( ) , true ) )  org.mockito.Mockito . METHOD_4 ( ) . when ( VAR_2 ) . METHOD_5 ( getVdsGroup ( ) , true ) (  cmd . METHOD_1 ( ) )  cmd . METHOD_1 ( ) (  TYPE_3 . assertEquals ( cmd . METHOD_6 ( ) , VAR_3 ) )  TYPE_3 . assertEquals ( cmd . METHOD_6 ( ) , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected static ) MODIFIER protected static ( RETURN TYPE_1<TYPE_2> ) RETURN TYPE_1<TYPE_2> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_3<TYPE_4.DiskImage> ) TYPE TYPE_3<TYPE_4.DiskImage> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<org.ovirt.engine.core.compat.Guid,TYPE_2> ) TYPE java.util.Map<org.ovirt.engine.core.compat.Guid,TYPE_2> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.HashMap < > ( ) ) INIT = new java.util.HashMap < > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_4.Disk ) TYPE TYPE_4.Disk ( NAME diskImage ) NAME diskImage ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  VAR_2 . put ( diskImage . getId ( ) , diskImage ) )  VAR_2 . put ( diskImage . getId ( ) , diskImage ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return new TYPE_5 ( VAR_2 . METHOD_2 ( ) ) ; )  return new TYPE_5 ( VAR_2 . METHOD_2 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.Object[] ) TYPE java.lang.Object[] ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( java.lang.Object [ ] ) ( target ) ) ) INIT = ( ( java.lang.Object [ ] ) ( target ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_1 ) ( VAR_1 [ 0 ] ) ) ) INIT = ( ( TYPE_1 ) ( VAR_1 [ 0 ] ) ) ) VAR VAR (  VAR_3 = ( ( java.lang.Integer ) ( returnValue ) ) )  VAR_3 = ( ( java.lang.Integer ) ( returnValue ) ) (  VAR_2 . METHOD_2 ( ) )  VAR_2 . METHOD_2 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( ) ) INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME pool ) NAME pool ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( IF IF ( COND ( pool . METHOD_4 ( ) ) == ( VAR_2 ) ) COND ( pool . METHOD_4 ( ) ) == ( VAR_2 ) ( THEN THEN (  TYPE_2 . METHOD_5 ( pool . getId ( ) , VAR_3 ) )  TYPE_2 . METHOD_5 ( pool . getId ( ) , VAR_3 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ( INIT = ( ( TYPE_1 ) ( target ) ) ) INIT = ( ( TYPE_1 ) ( target ) ) ) VAR VAR (  VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) )  VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) ( IF IF ( COND ( VAR_2 ) != null ) COND ( VAR_2 ) != null ( THEN THEN (  METHOD_2 ( VAR_2 ) )  METHOD_2 ( VAR_2 ) ) THEN THEN ) IF IF (  VAR_3 = true )  VAR_3 = true ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND source == null ) COND source == null ( THEN THEN (  return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ( ) ; )  return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ( ) ; ) THEN THEN ) IF IF (  return source ; )  return source ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ( ) ; } return source ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ( ) ; } return source ; } } (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new TYPE_1 ( STRING_1 , VAR_2 . StoragePool ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new TYPE_1 ( STRING_1 , VAR_2 . StoragePool ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) )  VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_2 . METHOD_2 ( VAR_3 ) )  VAR_2 . METHOD_2 ( VAR_3 ) (  VAR_2 . METHOD_3 ( VAR_4 ) )  VAR_2 . METHOD_3 ( VAR_4 ) (  VAR_2 . METHOD_4 ( VAR_5 ) )  VAR_2 . METHOD_4 ( VAR_5 ) (  VAR_1 . add ( VAR_2 ) )  VAR_1 . add ( VAR_2 ) (  VAR_2 = new TYPE_1 ( ) )  VAR_2 = new TYPE_1 ( ) (  VAR_2 . METHOD_2 ( VAR_6 ) )  VAR_2 . METHOD_2 ( VAR_6 ) (  VAR_2 . METHOD_3 ( VAR_7 ) )  VAR_2 . METHOD_3 ( VAR_7 ) (  VAR_2 . METHOD_4 ( VAR_5 ) )  VAR_2 . METHOD_4 ( VAR_5 ) (  VAR_1 . add ( VAR_2 ) )  VAR_1 . add ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME id ) NAME id ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source ; )  return source ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<?extendsTYPE_2> ) TYPE TYPE_1<?extendsTYPE_2> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME sender ) NAME sender ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME args ) NAME args ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( ( ! ( ( java.lang.Boolean ) ( model . METHOD_6 ( ) . getEntity ( ) ) ) ) ) )  METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( ( ! ( ( java.lang.Boolean ) ( model . METHOD_6 ( ) . getEntity ( ) ) ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME getValue ) NAME getValue ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.uicommonweb.models.EntityModel<TYPE_2> ) TYPE org.ovirt.engine.ui.uicommonweb.models.EntityModel<TYPE_2> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 . getEntity ( ) . METHOD_1 ( ) ) == ( VAR_2 ) ) COND ( VAR_1 . getEntity ( ) . METHOD_1 ( ) ) == ( VAR_2 ) ( THEN THEN (  return VAR_3 . METHOD_2 ( ) ; )  return VAR_3 . METHOD_2 ( ) ; ) THEN THEN ( ELSE ELSE ( IF IF ( COND ( VAR_1 . getEntity ( ) . METHOD_1 ( ) ) == ( VAR_4 ) ) COND ( VAR_1 . getEntity ( ) . METHOD_1 ( ) ) == ( VAR_4 ) ( THEN THEN (  return VAR_3 . METHOD_3 ( ) ; )  return VAR_3 . METHOD_3 ( ) ; ) THEN THEN ( ELSE ELSE ( IF IF ( COND ( VAR_1 . getEntity ( ) . METHOD_1 ( ) ) == ( VAR_5 ) ) COND ( VAR_1 . getEntity ( ) . METHOD_1 ( ) ) == ( VAR_5 ) ( THEN THEN (  return VAR_3 . METHOD_4 ( ) ; )  return VAR_3 . METHOD_4 ( ) ; ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StoragePool ) TYPE org.ovirt.engine.core.common.businessentities.StoragePool ( NAME VAR_3 ) NAME VAR_3 ( INIT = new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ) VAR VAR (  VAR_3 . METHOD_2 ( VAR_1 ) )  VAR_3 . METHOD_2 ( VAR_1 ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_4 . map ( VAR_3 , null ) ) INIT = TYPE_4 . map ( VAR_3 , null ) ) VAR VAR (  assertEquals ( VAR_4 . getStatus ( ) . METHOD_3 ( ) , VAR_2 . value ( ) ) )  assertEquals ( VAR_4 . getStatus ( ) . METHOD_3 ( ) , VAR_2 . value ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1<TYPE_2> ) RETURN TYPE_1<TYPE_2> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( STATIC-BLOCK STATIC-BLOCK (  METHOD_6 ( ) )  METHOD_6 ( ) (  METHOD_7 ( ) )  METHOD_7 ( ) (  METHOD_8 ( ) )  METHOD_8 ( ) (  METHOD_9 ( ) )  METHOD_9 ( ) (  METHOD_10 ( ) )  METHOD_10 ( ) ) STATIC-BLOCK STATIC-BLOCK (  return new TYPE_1 < TYPE_2 > ( VAR_1 , METHOD_2 ( ) , METHOD_3 ( ) , TYPE_3 . METHOD_4 ( ) , TYPE_3 . METHOD_5 ( ) ) { { METHOD_6 ( ) ; METHOD_7 ( ) ; METHOD_8 ( ) ; METHOD_9 ( ) ; METHOD_10 ( ) ; } } ; )  return new TYPE_1 < TYPE_2 > ( VAR_1 , METHOD_2 ( ) , METHOD_3 ( ) , TYPE_3 . METHOD_4 ( ) , TYPE_3 . METHOD_5 ( ) ) { { METHOD_6 ( ) ; METHOD_7 ( ) ; METHOD_8 ( ) ; METHOD_9 ( ) ; METHOD_10 ( ) ; } } ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = false ) INIT = false ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME status ) NAME status ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( IF IF ( COND status != null ) COND status != null ( THEN THEN (  VAR_2 = TYPE_2 . METHOD_3 ( VAR_1 ) . METHOD_4 ( status ) )  VAR_2 = TYPE_2 . METHOD_3 ( VAR_1 ) . METHOD_4 ( status ) ) THEN THEN ) IF IF ( IF IF ( COND ! VAR_2 ) COND ! VAR_2 ( THEN THEN ( IF IF ( COND status . METHOD_5 ( ) ) COND status . METHOD_5 ( ) ( THEN THEN (  return METHOD_6 ( VAR_3 ) ; )  return METHOD_6 ( VAR_3 ) ; ) THEN THEN ) IF IF (  METHOD_7 ( ) )  METHOD_7 ( ) ) THEN THEN ) IF IF (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME iface ) NAME iface ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<java.lang.String,org.ovirt.engine.core.common.businessentities.Network> ) TYPE java.util.Map<java.lang.String,org.ovirt.engine.core.common.businessentities.Network> ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_2 ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) ) ) INIT = TYPE_2 . METHOD_2 ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = iface . METHOD_5 ( ) ) INIT = iface . METHOD_5 ( ) ) VAR VAR (  return ( VAR_2 . METHOD_6 ( VAR_3 ) ) && ( VAR_2 . get ( VAR_3 ) . METHOD_7 ( ) ) ; )  return ( VAR_2 . METHOD_6 ( VAR_3 ) ) && ( VAR_2 . get ( VAR_3 ) . METHOD_7 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2<TYPE_3> ) TYPE TYPE_2<TYPE_3> ( NAME entity ) NAME entity ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME template ) NAME template ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ( INIT = ( template == null ) ? new TYPE_1 ( ) : template ) INIT = ( template == null ) ? new TYPE_1 ( ) : template ) VAR VAR ( IF IF ( COND entity != null ) COND entity != null ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME source ) NAME source ( IN entity ) IN entity ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_5 . map ( source , null ) ) INIT = TYPE_5 . map ( source , null ) ) VAR VAR (  result . METHOD_2 ( ) . add ( VAR_1 . name ( ) ) )  result . METHOD_2 ( ) . add ( VAR_1 . name ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<?> ) RETURN TYPE_1<?> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . METHOD_2 ( VAR_4 , new TYPE_3 ( domain , name , VAR_1 ) ) ) INIT = VAR_3 . METHOD_2 ( VAR_4 , new TYPE_3 ( domain , name , VAR_1 ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_5 ) NAME VAR_5 ( INIT = ( ( TYPE_4 ) ( VAR_2 . getReturnValue ( ) ) ) ) INIT = ( ( TYPE_4 ) ( VAR_2 . getReturnValue ( ) ) ) ) VAR VAR (  return new TYPE_5 ( VAR_5 ) ; )  return new TYPE_5 ( VAR_5 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ( INIT = false ) INIT = false ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_2 . METHOD_2 ( STRING_1 ) )  VAR_2 . METHOD_2 ( STRING_1 ) (  METHOD_3 ( ) )  METHOD_3 ( ) (  VAR_1 = TYPE_1 . METHOD_4 ( ) . getSucceeded ( ) )  VAR_1 = TYPE_1 . METHOD_4 ( ) . getSucceeded ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( BLOCK BLOCK (  VAR_2 . error ( STRING_2 , VAR_3 ) )  VAR_2 . error ( STRING_2 , VAR_3 ) ) BLOCK BLOCK ) CATCH CATCH ( FINALLY FINALLY (  METHOD_5 ( ) )  METHOD_5 ( ) ) FINALLY FINALLY ) TRY TRY (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_1 ) ( target ) ) ) INIT = ( ( TYPE_1 ) ( target ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Disk> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Disk> ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Disk > ) ( returnValue ) ) ) INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Disk > ) ( returnValue ) ) ) VAR VAR (  TYPE_2 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) )  TYPE_2 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) (  VAR_1 . METHOD_3 ( ) . add ( METHOD_4 ( ) ) )  VAR_1 . METHOD_3 ( ) . add ( METHOD_4 ( ) ) (  VAR_1 . METHOD_3 ( ) . add ( METHOD_5 ( ) ) )  VAR_1 . METHOD_3 ( ) . add ( METHOD_5 ( ) ) (  VAR_1 . METHOD_6 ( ) )  VAR_1 . METHOD_6 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) (  dao = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) )  dao = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) (  VAR_2 = METHOD_2 ( VAR_1 . METHOD_4 ( ) ) )  VAR_2 = METHOD_2 ( VAR_1 . METHOD_4 ( ) ) (  VAR_3 = METHOD_2 ( VAR_1 . METHOD_5 ( ) ) )  VAR_3 = METHOD_2 ( VAR_1 . METHOD_5 ( ) ) (  VAR_4 = METHOD_2 ( VAR_1 . METHOD_6 ( ) ) )  VAR_4 = METHOD_2 ( VAR_1 . METHOD_6 ( ) ) (  VAR_5 = dao . get ( new org.ovirt.engine.core.compat.Guid ( STRING_1 ) ) )  VAR_5 = dao . get ( new org.ovirt.engine.core.compat.Guid ( STRING_1 ) ) (  VAR_6 = new TYPE_1 ( ) )  VAR_6 = new TYPE_1 ( ) (  VAR_6 . METHOD_7 ( STRING_2 ) )  VAR_6 . METHOD_7 ( STRING_2 ) (  VAR_6 . METHOD_8 ( STRING_3 ) )  VAR_6 . METHOD_8 ( STRING_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( null ) )  TYPE_1 . METHOD_2 ( null ) ( IF IF ( COND ( TYPE_1 . METHOD_3 ( ) ) == null ) COND ( TYPE_1 . METHOD_3 ( ) ) == null ( THEN THEN (  TYPE_1 . METHOD_4 ( false ) )  TYPE_1 . METHOD_4 ( false ) (  log . METHOD_5 ( STRING_1 , TYPE_1 . METHOD_6 ( ) , TYPE_1 . METHOD_7 ( ) ) )  log . METHOD_5 ( STRING_1 , TYPE_1 . METHOD_6 ( ) , TYPE_1 . METHOD_7 ( ) ) (  TYPE_1 . getReturnValue ( ) . METHOD_8 ( false ) )  TYPE_1 . getReturnValue ( ) . METHOD_8 ( false ) (  return ; )  return ; ) THEN THEN ) IF IF (  VAR_1 = METHOD_9 ( ) )  VAR_1 = METHOD_9 ( ) (  TYPE_1 . getReturnValue ( ) . METHOD_8 ( ( ( VAR_1 ) == ( VAR_2 ) ) ) )  TYPE_1 . getReturnValue ( ) . METHOD_8 ( ( ( VAR_1 ) == ( VAR_2 ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.compat.Guid> ) TYPE java.util.List<org.ovirt.engine.core.compat.Guid> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1<?> ) TYPE TYPE_1<?> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_2 ( VAR_1 ) ) INIT = METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_3 == null ) COND VAR_3 == null ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( SWITCH SWITCH ( NAME VAR_3 . METHOD_3 ( ) ) NAME VAR_3 . METHOD_3 ( ) ( CASE VAR_4 ( BLOCK BLOCK (  VAR_2 . METHOD_4 ( VAR_9 ) )  VAR_2 . METHOD_4 ( VAR_9 ) (  return true ; )  return true ; ) BLOCK BLOCK ) CASE VAR_4 ( CASE VAR_5 ( BLOCK BLOCK (  VAR_2 . METHOD_4 ( VAR_9 ) )  VAR_2 . METHOD_4 ( VAR_9 ) (  return true ; )  return true ; ) BLOCK BLOCK ) CASE VAR_5 ( CASE VAR_6 ( BLOCK BLOCK (  VAR_2 . METHOD_4 ( VAR_9 ) )  VAR_2 . METHOD_4 ( VAR_9 ) (  return true ; )  return true ; ) BLOCK BLOCK ) CASE VAR_6 ( CASE VAR_7 ( BLOCK BLOCK (  VAR_2 . METHOD_4 ( VAR_9 ) )  VAR_2 . METHOD_4 ( VAR_9 ) (  return true ; )  return true ; ) BLOCK BLOCK ) CASE VAR_7 ( CASE VAR_8 ( BLOCK BLOCK (  VAR_2 . METHOD_4 ( VAR_9 ) )  VAR_2 . METHOD_4 ( VAR_9 ) (  return true ; )  return true ; ) BLOCK BLOCK ) CASE VAR_8 ( CASE VAR_10 ( BLOCK BLOCK (  VAR_2 . METHOD_4 ( VAR_11 ) )  VAR_2 . METHOD_4 ( VAR_11 ) (  return true ; )  return true ; ) BLOCK BLOCK ) CASE VAR_10 ) SWITCH SWITCH (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME METHOD_2 ) NAME METHOD_2 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source != null ? ( ( java.lang.Integer ) ( source ) ) . METHOD_3 ( ) : INT_1 ; )  return source != null ? ( ( java.lang.Integer ) ( source ) ) . METHOD_3 ( ) : INT_1 ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object METHOD_2 ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . METHOD_3 ( ) : INT_1 ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object METHOD_2 ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . METHOD_3 ( ) : INT_1 ; } } (  METHOD_4 ( new TYPE_1 ( VAR_1 , METHOD_5 ( ) ) , aQuery ) )  METHOD_4 ( new TYPE_1 ( VAR_1 , METHOD_5 ( ) ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_2 . getId ( ) ) ) INIT = METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_2 . getId ( ) ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ) TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  METHOD_2 ( ) . METHOD_3 ( ) . METHOD_5 ( VAR_3 . getId ( ) ) )  METHOD_2 ( ) . METHOD_3 ( ) . METHOD_5 ( VAR_3 . getId ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( IF IF ( COND VAR_1 == 0 ) COND VAR_1 == 0 ( THEN THEN (  METHOD_3 ( VAR_2 ) )  METHOD_3 ( VAR_2 ) (  METHOD_4 ( ) )  METHOD_4 ( ) ) THEN THEN ( ELSE ELSE (  METHOD_3 ( VAR_3 ) )  METHOD_3 ( VAR_3 ) (  METHOD_5 ( METHOD_2 ( ) ) )  METHOD_5 ( METHOD_2 ( ) ) ) ELSE ELSE ) IF IF (  TYPE_1 . METHOD_6 ( true ) )  TYPE_1 . METHOD_6 ( true ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( 1 , getEntity ( 0 ) ) )  METHOD_2 ( 1 , getEntity ( 0 ) ) (  METHOD_3 ( 1 ) )  METHOD_3 ( 1 ) (  METHOD_4 ( METHOD_5 ( ) ) )  METHOD_4 ( METHOD_5 ( ) ) (  VAR_1 . METHOD_6 ( ) )  VAR_1 . METHOD_6 ( ) ( VAR VAR ( TYPE TYPE_1.StorageDomain ) TYPE TYPE_1.StorageDomain ( NAME model ) NAME model ( INIT = TYPE_2 . getModel ( 1 ) ) INIT = TYPE_2 . getModel ( 1 ) ) VAR VAR (  model . setId ( VAR_2 [ 1 ] . toString ( ) ) )  model . setId ( VAR_2 [ 1 ] . toString ( ) ) ( TRY TRY ( BLOCK BLOCK (  resource . METHOD_7 ( model ) )  resource . METHOD_7 ( model ) (  METHOD_8 ( STRING_1 ) )  METHOD_8 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( BLOCK BLOCK (  METHOD_9 ( VAR_3 ) )  METHOD_9 ( VAR_3 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source != null ? ! ( ( ( java.lang.Boolean ) ( source ) ) . METHOD_2 ( ) ) : false ; )  return source != null ? ! ( ( ( java.lang.Boolean ) ( source ) ) . METHOD_2 ( ) ) : false ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ! ( ( ( java.lang.Boolean ) ( source ) ) . METHOD_2 ( ) ) : false ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ! ( ( ( java.lang.Boolean ) ( source ) ) . METHOD_2 ( ) ) : false ; } } (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new TYPE_1 ( name ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new TYPE_1 ( name ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( true ) ) INIT = new TYPE_1 ( true ) ) VAR VAR (  TYPE_2 . assertEquals ( STRING_1 , STRING_2 , VAR_1 . METHOD_2 ( STRING_1 ) ) )  TYPE_2 . assertEquals ( STRING_1 , STRING_2 , VAR_1 . METHOD_2 ( STRING_1 ) ) (  TYPE_2 . METHOD_3 ( STRING_3 , VAR_1 . METHOD_2 ( STRING_4 ) ) )  TYPE_2 . METHOD_3 ( STRING_3 , VAR_1 . METHOD_2 ( STRING_4 ) ) (  TYPE_2 . METHOD_3 ( STRING_5 , VAR_1 . METHOD_2 ( null ) ) )  TYPE_2 . METHOD_3 ( STRING_5 , VAR_1 . METHOD_2 ( null ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( VAR_1 , true ) ) INIT = METHOD_2 ( VAR_1 , true ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_2 ( VAR_1 , true ) ) INIT = METHOD_2 ( VAR_1 , true ) ) VAR VAR (  VAR_2 . METHOD_3 ( VAR_3 ) )  VAR_2 . METHOD_3 ( VAR_3 ) (  VAR_2 . METHOD_4 ( ) )  VAR_2 . METHOD_4 ( ) (  METHOD_5 ( false , VAR_2 . METHOD_6 ( ) , 1 , VAR_1 ) )  METHOD_5 ( false , VAR_2 . METHOD_6 ( ) , 1 , VAR_1 ) (  METHOD_5 ( true , VAR_2 . METHOD_6 ( ) , 2 , 1 , VAR_1 ) )  METHOD_5 ( true , VAR_2 . METHOD_6 ( ) , 2 , 1 , VAR_1 ) (  METHOD_7 ( new java.util.ArrayList < TYPE_1 > ( TYPE_2 . METHOD_8 ( VAR_2 , VAR_3 ) ) , 1 ) )  METHOD_7 ( new java.util.ArrayList < TYPE_1 > ( TYPE_2 . METHOD_8 ( VAR_2 , VAR_3 ) ) , 1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( VAR_1 , VAR_2 class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 [ 0 ] } , null ) )  METHOD_2 ( VAR_1 , VAR_2 class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 [ 0 ] } , null ) (  VAR_4 . METHOD_3 ( ) )  VAR_4 . METHOD_3 ( ) ( TRY TRY ( BLOCK BLOCK (  resource . METHOD_4 ( ) )  resource . METHOD_4 ( ) (  METHOD_5 ( STRING_2 ) )  METHOD_5 ( STRING_2 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_5 ) NAME VAR_5 ( BLOCK BLOCK (  METHOD_6 ( VAR_5 . METHOD_7 ( ) ) )  METHOD_6 ( VAR_5 . METHOD_7 ( ) ) (  assertEquals ( INT_1 , VAR_5 . METHOD_7 ( ) . getStatus ( ) ) )  assertEquals ( INT_1 , VAR_5 . METHOD_7 ( ) . getStatus ( ) ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME response ) NAME response ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  response . METHOD_2 ( STRING_1 ) )  response . METHOD_2 ( STRING_1 ) ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_2 ) NAME VAR_2 ( INIT = response . METHOD_3 ( ) ) INIT = response . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 < java.lang.String > METHOD_4 ( VAR_5 ) ) INIT = VAR_4 < java.lang.String > METHOD_4 ( VAR_5 ) ) VAR VAR ( IF IF ( COND TYPE_6 . isEmpty ( VAR_3 ) ) COND TYPE_6 . isEmpty ( VAR_3 ) ( THEN THEN (  METHOD_5 ( VAR_2 , STRING_2 ) )  METHOD_5 ( VAR_2 , STRING_2 ) ) THEN THEN ( ELSE ELSE (  response . METHOD_6 ( VAR_3 ) )  response . METHOD_6 ( VAR_3 ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME list ) NAME list ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( list . METHOD_3 ( ) ) )  METHOD_2 ( list . METHOD_3 ( ) ) (  METHOD_2 ( list . METHOD_3 ( ) . METHOD_4 ( ) ) )  METHOD_2 ( list . METHOD_3 ( ) . METHOD_4 ( ) ) (  METHOD_2 ( list . METHOD_3 ( ) . METHOD_4 ( ) . get ( 0 ) ) )  METHOD_2 ( list . METHOD_3 ( ) . METHOD_4 ( ) . get ( 0 ) ) (  assertEquals ( list . METHOD_3 ( ) . METHOD_4 ( ) . get ( 0 ) . METHOD_5 ( ) , VAR_1 ) )  assertEquals ( list . METHOD_3 ( ) . METHOD_4 ( ) . get ( 0 ) . METHOD_5 ( ) , VAR_1 ) (  assertEquals ( list . METHOD_3 ( ) . METHOD_4 ( ) . get ( 0 ) . METHOD_6 ( ) , VAR_2 ) )  assertEquals ( list . METHOD_3 ( ) . METHOD_4 ( ) . get ( 0 ) . METHOD_6 ( ) , VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) ( IF IF ( COND METHOD_3 ( ) ) COND METHOD_3 ( ) ( THEN THEN ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_4 ( ) . METHOD_5 ( this , STRING_1 , new TYPE_1 [ 0 ] , new java.lang.Object [ 0 ] , 0 , VAR_2 ) ) INIT = METHOD_4 ( ) . METHOD_5 ( this , STRING_1 , new TYPE_1 [ 0 ] , new java.lang.Object [ 0 ] , 0 , VAR_2 ) ) VAR VAR (  VAR_3 . put ( TYPE_2 . getParameters ( ) . METHOD_6 ( ) , VAR_1 ) )  VAR_3 . put ( TYPE_2 . getParameters ( ) . METHOD_6 ( ) , VAR_1 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME getValue ) NAME getValue ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME object ) NAME object ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( object . METHOD_1 ( ) ) == ( VAR_1 ) ) || ( ( object . METHOD_1 ( ) ) == ( VAR_2 ) ) ) COND ( ( object . METHOD_1 ( ) ) == ( VAR_1 ) ) || ( ( object . METHOD_1 ( ) ) == ( VAR_2 ) ) ( THEN THEN (  return STRING_1 ; )  return STRING_1 ; ) THEN THEN ( ELSE ELSE (  return VAR_3 . METHOD_2 ( METHOD_3 ( object ) ) ; )  return VAR_3 . METHOD_2 ( METHOD_3 ( object ) ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( STRING_1 , name ) )  VAR_1 . METHOD_2 ( STRING_1 , name ) ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_3 ( name ) ) INIT = METHOD_3 ( name ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( IF IF ( COND ( VAR_2 . size ( ) ) == 1 ) COND ( VAR_2 . size ( ) ) == 1 ( THEN THEN (  VAR_3 = VAR_2 )  VAR_3 = VAR_2 ) THEN THEN ( ELSE ELSE (  VAR_3 = new java.util.ArrayList < TYPE_1 > ( VAR_2 ) )  VAR_3 = new java.util.ArrayList < TYPE_1 > ( VAR_2 ) (  TYPE_3 . METHOD_4 ( VAR_3 , VAR_4 ) )  TYPE_3 . METHOD_4 ( VAR_3 , VAR_4 ) ) ELSE ELSE ) IF IF (  VAR_1 . METHOD_2 ( STRING_2 , VAR_3 ) )  VAR_1 . METHOD_2 ( STRING_2 , VAR_3 ) (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.VDS ) TYPE TYPE_1.VDS ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1.VDS ) TYPE TYPE_1.VDS ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_1.VM ) TYPE TYPE_1.VM ( NAME vm ) NAME vm ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return ( ( VAR_1 . METHOD_2 ( ) ) - ( VAR_1 . METHOD_3 ( ) ) ) < ( ( VAR_2 . METHOD_2 ( ) ) - ( VAR_2 . METHOD_3 ( ) ) ) ; )  return ( ( VAR_1 . METHOD_2 ( ) ) - ( VAR_1 . METHOD_3 ( ) ) ) < ( ( VAR_2 . METHOD_2 ( ) ) - ( VAR_2 . METHOD_3 ( ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.HashMap<java.lang.Integer,java.lang.String> ) RETURN java.util.HashMap<java.lang.Integer,java.lang.String> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.HashMap<java.lang.Integer,java.lang.String> ) TYPE java.util.HashMap<java.lang.Integer,java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.HashMap < > ( ) ) INIT = new java.util.HashMap < > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( IN METHOD_2 ( ) ) IN METHOD_2 ( ) ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ( INIT = METHOD_3 ( VAR_3 . get ( VAR_2 ) , STRING_1 , null ) ) INIT = METHOD_3 ( VAR_3 . get ( VAR_2 ) , STRING_1 , null ) ) VAR VAR ( IF IF ( COND name != null ) COND name != null ( THEN THEN (  VAR_1 . put ( VAR_2 , name ) )  VAR_1 . put ( VAR_2 , name ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ) TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ( NAME cluster ) NAME cluster ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( STRING_1 , cluster . METHOD_3 ( ) ) )  VAR_1 . METHOD_2 ( STRING_1 , cluster . METHOD_3 ( ) ) ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDS> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDS> ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_4 ( ) . METHOD_5 ( cluster . getId ( ) ) ) INIT = METHOD_4 ( ) . METHOD_5 ( cluster . getId ( ) ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_6 ( ) . METHOD_7 ( cluster . getId ( ) ) ) INIT = METHOD_6 ( ) . METHOD_7 ( cluster . getId ( ) ) ) VAR VAR ( IF IF ( COND VAR_3 == null ) COND VAR_3 == null ( THEN THEN (  VAR_1 . METHOD_2 ( STRING_2 , cluster . METHOD_3 ( ) ) )  VAR_1 . METHOD_2 ( STRING_2 , cluster . METHOD_3 ( ) ) (  return ; )  return ; ) THEN THEN ) IF IF (  METHOD_8 ( cluster , VAR_3 , VAR_2 ) )  METHOD_8 ( cluster , VAR_3 , VAR_2 ) (  METHOD_9 ( cluster , VAR_3 , VAR_2 ) )  METHOD_9 ( cluster , VAR_3 , VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( VAR_2 , VAR_3 , VAR_4 ) )  VAR_1 . METHOD_2 ( VAR_2 , VAR_3 , VAR_4 ) (  VAR_1 . METHOD_3 ( ) )  VAR_1 . METHOD_3 ( ) (  TYPE_1 . assertEquals ( STRING_1 , VAR_4 , VAR_1 . METHOD_4 ( VAR_2 , VAR_3 ) ) )  TYPE_1 . assertEquals ( STRING_1 , VAR_4 , VAR_1 . METHOD_4 ( VAR_2 , VAR_3 ) ) (  TYPE_2 . METHOD_5 ( VAR_2 ) )  TYPE_2 . METHOD_5 ( VAR_2 ) (  VAR_1 . METHOD_3 ( ) )  VAR_1 . METHOD_3 ( ) (  TYPE_1 . METHOD_6 ( STRING_2 , VAR_1 . METHOD_4 ( VAR_2 , VAR_3 ) ) )  TYPE_1 . METHOD_6 ( STRING_2 , VAR_1 . METHOD_4 ( VAR_2 , VAR_3 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( ) . METHOD_3 ( ) ) INIT = METHOD_2 ( ) . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_1 . METHOD_4 ( VAR_1 , VAR_2 ) ) INIT = TYPE_1 . METHOD_4 ( VAR_1 , VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_5 ( VAR_3 ) ) INIT = METHOD_5 ( VAR_3 ) ) VAR VAR (  return ( ( validate ( VAR_4 . METHOD_6 ( ) ) ) && ( validate ( VAR_4 . METHOD_7 ( ) ) ) ) && ( validate ( VAR_4 . METHOD_8 ( VAR_1 , VAR_2 ) ) ) ; )  return ( ( validate ( VAR_4 . METHOD_6 ( ) ) ) && ( validate ( VAR_4 . METHOD_7 ( ) ) ) ) && ( validate ( VAR_4 . METHOD_8 ( VAR_1 , VAR_2 ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN java.util.List<org.ovirt.engine.core.compat.Guid> ) RETURN java.util.List<org.ovirt.engine.core.compat.Guid> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<org.ovirt.engine.core.common.businessentities.VM> ) TYPE TYPE_1<org.ovirt.engine.core.common.businessentities.VM> ( NAME vms ) NAME vms ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.compat.Guid> ) TYPE java.util.List<org.ovirt.engine.core.compat.Guid> ( NAME result ) NAME result ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ( IN vms ) IN vms ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  result . add ( vm . METHOD_2 ( ) . METHOD_3 ( ) ) )  result . add ( vm . METHOD_2 ( ) . METHOD_3 ( ) ) ) THEN THEN ) IF IF ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  result . add ( vm . METHOD_2 ( ) . METHOD_4 ( ) ) )  result . add ( vm . METHOD_2 ( ) . METHOD_4 ( ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.network.Network ) TYPE org.ovirt.engine.core.common.businessentities.network.Network ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( STRING_1 ) ) INIT = METHOD_2 ( STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.network.Network ) TYPE org.ovirt.engine.core.common.businessentities.network.Network ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( STRING_2 ) ) INIT = METHOD_2 ( STRING_2 ) ) VAR VAR (  METHOD_3 ( VAR_1 , VAR_2 ) )  METHOD_3 ( VAR_1 , VAR_2 ) ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ( NAME nic ) NAME nic ( INIT = METHOD_4 ( STRING_3 , VAR_1 ) ) INIT = METHOD_4 ( STRING_3 , VAR_1 ) ) VAR VAR (  METHOD_5 ( nic ) )  METHOD_5 ( nic ) ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_6 ( nic . getName ( ) , INT_1 , VAR_2 . getName ( ) ) ) INIT = METHOD_6 ( nic . getName ( ) , INT_1 , VAR_2 . getName ( ) ) ) VAR VAR (  VAR_3 . METHOD_7 ( null ) )  VAR_3 . METHOD_7 ( null ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_8 ( METHOD_9 ( nic , VAR_3 ) ) ) INIT = METHOD_8 ( METHOD_9 ( nic , VAR_3 ) ) ) VAR VAR (  METHOD_10 ( VAR_4 , VAR_5 , nic . getName ( ) ) )  METHOD_10 ( VAR_4 , VAR_5 , nic . getName ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . getParameters ( ) . METHOD_4 ( ) . toString ( ) ) )  VAR_1 = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . getParameters ( ) . METHOD_4 ( ) . toString ( ) ) (  TYPE_1 . METHOD_5 ( ) )  TYPE_1 . METHOD_5 ( ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME domain ) NAME domain ( INIT = TYPE_1 . METHOD_6 ( VAR_2 ) ) INIT = TYPE_1 . METHOD_6 ( VAR_2 ) ) VAR VAR (  domain . setId ( TYPE_1 . getParameters ( ) . METHOD_4 ( ) ) )  domain . setId ( TYPE_1 . getParameters ( ) . METHOD_4 ( ) ) (  METHOD_7 ( domain ) )  METHOD_7 ( domain ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ( INIT = ( ( org.ovirt.engine.core.common.businessentities.VM ) ( getEntity ( ) ) ) ) INIT = ( ( org.ovirt.engine.core.common.businessentities.VM ) ( getEntity ( ) ) ) ) VAR VAR (  METHOD_2 ( org.ovirt.engine.ui.frontend.Frontend . METHOD_3 ( VAR_1 , new TYPE_1 ( vm . getId ( ) ) ) ) )  METHOD_2 ( org.ovirt.engine.ui.frontend.Frontend . METHOD_3 ( VAR_1 , new TYPE_1 ( vm . getId ( ) ) ) ) (  setItems ( METHOD_4 ( ) . METHOD_5 ( ) ) )  setItems ( METHOD_4 ( ) . METHOD_5 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.ArrayList<java.lang.String> ) TYPE java.util.ArrayList<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  return STRING_1 ; )  return STRING_1 ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2<java.lang.String> ) TYPE TYPE_2<java.lang.String> ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR ( WHILE WHILE ( COND VAR_4 . METHOD_3 ( ) ) COND VAR_4 . METHOD_3 ( ) ( BLOCK BLOCK (  VAR_3 . append ( VAR_4 . METHOD_4 ( ) ) )  VAR_3 . append ( VAR_4 . METHOD_4 ( ) ) ( IF IF ( COND ! ( VAR_4 . METHOD_3 ( ) ) ) COND ! ( VAR_4 . METHOD_3 ( ) ) ( THEN THEN (  break ; )  break ; ) THEN THEN ) IF IF (  VAR_3 . append ( VAR_2 ) )  VAR_3 . append ( VAR_2 ) ) BLOCK BLOCK ) WHILE WHILE (  return VAR_3 . toString ( ) ; )  return VAR_3 . toString ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_5 ( VAR_3 ) . METHOD_2 ( ) ) INIT = new TYPE_5 ( VAR_3 ) . METHOD_2 ( ) ) VAR VAR (  this . VAR_4 = new TYPE_6 ( VAR_2 ) )  this . VAR_4 = new TYPE_6 ( VAR_2 ) (  this . VAR_5 = new TYPE_7 ( VAR_2 , this . VAR_4 ) )  this . VAR_5 = new TYPE_7 ( VAR_2 , this . VAR_4 ) (  TYPE_8 . METHOD_3 ( VAR_2 . METHOD_4 ( ) , VAR_6 < TYPE_1 > get ( VAR_7 ) . < java.lang.String > get ( VAR_8 ) ) )  TYPE_8 . METHOD_3 ( VAR_2 . METHOD_4 ( ) , VAR_6 < TYPE_1 > get ( VAR_7 ) . < java.lang.String > get ( VAR_8 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( null ) ) INIT = TYPE_2 . METHOD_2 ( null ) ) VAR VAR (  VAR_2 . add ( VAR_3 ) )  VAR_2 . add ( VAR_3 ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_4 ( VAR_5 ) ) INIT = new TYPE_4 ( VAR_5 ) ) VAR VAR (  METHOD_3 ( VAR_4 ) )  METHOD_3 ( VAR_4 ) (  VAR_6 . METHOD_4 ( VAR_1 ) )  VAR_6 . METHOD_4 ( VAR_1 ) ( TRY TRY ( BLOCK BLOCK (  METHOD_5 ( ) )  METHOD_5 ( ) (  TYPE_2 . METHOD_6 ( STRING_1 ) )  TYPE_2 . METHOD_6 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_7 ) NAME VAR_7 ( BLOCK BLOCK (  METHOD_7 ( VAR_7 , VAR_8 , VAR_4 ) )  METHOD_7 ( VAR_7 , VAR_8 , VAR_4 ) ) BLOCK BLOCK ) CATCH CATCH ( FINALLY FINALLY (  VAR_2 . METHOD_8 ( ) )  VAR_2 . METHOD_8 ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.ArrayList<TYPE_1> ) RETURN java.util.ArrayList<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2.VdcActionType ) TYPE TYPE_2.VdcActionType ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.ArrayList<TYPE_2.VdcActionParametersBase> ) TYPE java.util.ArrayList<TYPE_2.VdcActionParametersBase> ( NAME parameters ) NAME parameters ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_6 ) NAME VAR_6 ( INIT = VAR_7 . METHOD_2 ( VAR_1 , parameters , VAR_2 , VAR_5 ) ) INIT = VAR_7 . METHOD_2 ( VAR_1 , parameters , VAR_2 , VAR_5 ) ) VAR VAR (  VAR_6 . METHOD_3 ( VAR_3 ) )  VAR_6 . METHOD_3 ( VAR_3 ) (  VAR_6 . METHOD_4 ( VAR_4 ) )  VAR_6 . METHOD_4 ( VAR_4 ) (  return VAR_6 . METHOD_5 ( ) ; )  return VAR_6 . METHOD_5 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_3 . METHOD_3 ( null ) )  VAR_3 . METHOD_3 ( null ) (  VAR_4 . onSuccess ( result ) )  VAR_4 . onSuccess ( result ) ) BLOCK BLOCK ) METHOD METHOD ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_4 ) NAME METHOD_4 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_3 . METHOD_3 ( null ) )  VAR_3 . METHOD_3 ( null ) (  VAR_4 . METHOD_4 ( VAR_5 ) )  VAR_4 . METHOD_4 ( VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD (  VAR_1 . METHOD_2 ( ( ( TYPE_2 ) ( VAR_2 ) ) , new TYPE_3 < TYPE_4 > ( ) { public void onSuccess ( final TYPE_4 result ) { VAR_3 . METHOD_3 ( null ) ; VAR_4 . onSuccess ( result ) ; } public void METHOD_4 ( final TYPE_5 VAR_5 ) { VAR_3 . METHOD_3 ( null ) ; VAR_4 . METHOD_4 ( VAR_5 ) ; } } ) )  VAR_1 . METHOD_2 ( ( ( TYPE_2 ) ( VAR_2 ) ) , new TYPE_3 < TYPE_4 > ( ) { public void onSuccess ( final TYPE_4 result ) { VAR_3 . METHOD_3 ( null ) ; VAR_4 . onSuccess ( result ) ; } public void METHOD_4 ( final TYPE_5 VAR_5 ) { VAR_3 . METHOD_3 ( null ) ; VAR_4 . METHOD_4 ( VAR_5 ) ; } } ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  METHOD_3 ( ) )  METHOD_3 ( ) ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_4 ( ) . METHOD_5 ( VAR_3 , TYPE_2 . getParameters ( ) . METHOD_6 ( ) . get ( 0 ) , new TYPE_3 ( TYPE_2 . METHOD_7 ( ) ) ) ) INIT = TYPE_2 . METHOD_4 ( ) . METHOD_5 ( VAR_3 , TYPE_2 . getParameters ( ) . METHOD_6 ( ) . get ( 0 ) , new TYPE_3 ( TYPE_2 . METHOD_7 ( ) ) ) ) VAR VAR (  METHOD_8 ( VAR_2 . getSucceeded ( ) ) )  METHOD_8 ( VAR_2 . getSucceeded ( ) ) ) THEN THEN ( ELSE ELSE (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME command ) NAME command ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_2 ( ) )  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_2 ( ) (  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( command ) . METHOD_3 ( ) )  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( command ) . METHOD_3 ( ) (  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( command ) . METHOD_4 ( ) )  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( command ) . METHOD_4 ( ) (  org.mockito.Mockito.doReturn ( METHOD_5 ( ) ) . when ( VAR_3 ) . METHOD_6 ( TYPE_2 . any ( VAR_4 . Guid class ) ) )  org.mockito.Mockito.doReturn ( METHOD_5 ( ) ) . when ( VAR_3 ) . METHOD_6 ( TYPE_2 . any ( VAR_4 . Guid class ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  cmd = org.mockito.Mockito . METHOD_2 ( METHOD_3 ( VAR_1 , METHOD_4 ( VAR_1 , 2 ) , 0 , INT_1 , false ) ) )  cmd = org.mockito.Mockito . METHOD_2 ( METHOD_3 ( VAR_1 , METHOD_4 ( VAR_1 , 2 ) , 0 , INT_1 , false ) ) (  METHOD_5 ( cmd ) )  METHOD_5 ( cmd ) (  METHOD_6 ( cmd ) )  METHOD_6 ( cmd ) (  TYPE_1 . METHOD_7 ( cmd . validate ( ) ) )  TYPE_1 . METHOD_7 ( cmd . validate ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME equals ) NAME equals ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME obj ) NAME obj ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( this ) == obj ) COND ( this ) == obj ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ( IF IF ( COND ( obj == null ) || ( ( obj . METHOD_1 ( ) ) != ( this . METHOD_1 ( ) ) ) ) COND ( obj == null ) || ( ( obj . METHOD_1 ( ) ) != ( this . METHOD_1 ( ) ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME other ) NAME other ( INIT = ( ( TYPE_1 ) ( obj ) ) ) INIT = ( ( TYPE_1 ) ( obj ) ) ) VAR VAR (  return ( TYPE_2 . equals ( VAR_1 , VAR_2 ) ) && ( TYPE_2 . equals ( VAR_3 , VAR_4 ) ) ; )  return ( TYPE_2 . equals ( VAR_1 , VAR_2 ) ) && ( TYPE_2 . equals ( VAR_3 , VAR_4 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME entity ) NAME entity ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  entity . METHOD_2 ( VAR_1 ) )  entity . METHOD_2 ( VAR_1 ) (  entity . METHOD_3 ( VAR_2 ) )  entity . METHOD_3 ( VAR_2 ) (  entity . setId ( VAR_3 ) )  entity . setId ( VAR_3 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME model ) NAME model ( INIT = TYPE_3 . map ( entity , null ) ) INIT = TYPE_3 . map ( entity , null ) ) VAR VAR (  TYPE_4 . METHOD_4 ( model ) )  TYPE_4 . METHOD_4 ( model ) (  TYPE_4 . assertEquals ( model . METHOD_5 ( ) , VAR_4 ) )  TYPE_4 . assertEquals ( model . METHOD_5 ( ) , VAR_4 ) (  TYPE_4 . assertEquals ( model . getModel ( ) , VAR_5 ) )  TYPE_4 . assertEquals ( model . getModel ( ) , VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1<TYPE_2> ) RETURN TYPE_1<TYPE_2> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  return new TYPE_3 < TYPE_2 > ( VAR_1 , METHOD_2 ( ) , TYPE_4 . instance ( ) . METHOD_3 ( ) , new TYPE_5 ( VAR_1 , TYPE_4 . instance ( ) . METHOD_3 ( ) , TYPE_4 . instance ( ) . METHOD_4 ( ) ) ) ; )  return new TYPE_3 < TYPE_2 > ( VAR_1 , METHOD_2 ( ) , TYPE_4 . instance ( ) . METHOD_3 ( ) , new TYPE_5 ( VAR_1 , TYPE_4 . instance ( ) . METHOD_3 ( ) , TYPE_4 . instance ( ) . METHOD_4 ( ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_2 ( ) ) INIT = VAR_2 . METHOD_2 ( ) ) VAR VAR (  VAR_1 . METHOD_3 ( VAR_3 ) )  VAR_1 . METHOD_3 ( VAR_3 ) (  VAR_1 . METHOD_3 ( VAR_4 ) )  VAR_1 . METHOD_3 ( VAR_4 ) ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.compat.Guid> ) TYPE java.util.List<org.ovirt.engine.core.compat.Guid> ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_6 . METHOD_4 ( VAR_7 ) ) INIT = VAR_6 . METHOD_4 ( VAR_7 ) ) VAR VAR (  TYPE_2 . assertEquals ( STRING_1 , 2 , VAR_5 . size ( ) ) )  TYPE_2 . assertEquals ( STRING_1 , 2 , VAR_5 . size ( ) ) (  TYPE_2 . METHOD_5 ( STRING_2 , VAR_5 . METHOD_6 ( VAR_3 ) ) )  TYPE_2 . METHOD_5 ( STRING_2 , VAR_5 . METHOD_6 ( VAR_3 ) ) (  TYPE_2 . METHOD_5 ( STRING_2 , VAR_5 . METHOD_6 ( VAR_4 ) ) )  TYPE_2 . METHOD_5 ( STRING_2 , VAR_5 . METHOD_6 ( VAR_4 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( model ) )  METHOD_2 ( model ) (  assertEquals ( model . getId ( ) , java.lang.String.valueOf ( VAR_2 [ VAR_1 ] ) ) )  assertEquals ( model . getId ( ) , java.lang.String.valueOf ( VAR_2 [ VAR_1 ] ) ) (  assertEquals ( model . METHOD_3 ( ) , TYPE_2 . value ( ) ) )  assertEquals ( model . METHOD_3 ( ) , TYPE_2 . value ( ) ) (  assertEquals ( model . METHOD_4 ( ) , VAR_3 [ VAR_1 ] ) )  assertEquals ( model . METHOD_4 ( ) , VAR_3 [ VAR_1 ] ) (  assertEquals ( model . METHOD_5 ( ) , VAR_4 [ VAR_1 ] ) )  assertEquals ( model . METHOD_5 ( ) , VAR_4 [ VAR_1 ] ) (  assertEquals ( model . METHOD_6 ( ) , VAR_5 [ VAR_1 ] ) )  assertEquals ( model . METHOD_6 ( ) , VAR_5 [ VAR_1 ] ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( VAR_1 , new TYPE_1 . DiskImage ( ) ) )  METHOD_2 ( VAR_1 , new TYPE_1 . DiskImage ( ) ) (  METHOD_3 ( ) )  METHOD_3 ( ) (  TYPE_2 . METHOD_4 ( command . validate ( ) ) )  TYPE_2 . METHOD_4 ( command . validate ( ) ) (  TYPE_2 . METHOD_5 ( command . getReturnValue ( ) . METHOD_6 ( ) . METHOD_7 ( TYPE_3 . toString ( ) ) ) )  TYPE_2 . METHOD_5 ( command . getReturnValue ( ) . METHOD_6 ( ) . METHOD_7 ( TYPE_3 . toString ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.DiskImage ) TYPE org.ovirt.engine.core.common.businessentities.DiskImage ( NAME disk ) NAME disk ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return new TYPE_1 ( new TYPE_2 ( disk . getId ( ) , VAR_1 ) , VAR_2 , TYPE_3 . getName ( ) , STRING_1 , 1 , null , true , true , true , STRING_1 , null , disk . METHOD_2 ( ) ) ; )  return new TYPE_1 ( new TYPE_2 ( disk . getId ( ) , VAR_1 ) , VAR_2 , TYPE_3 . getName ( ) , STRING_1 , 1 , null , true , true , true , STRING_1 , null , disk . METHOD_2 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) ( IF IF ( COND METHOD_2 ( ) ) COND METHOD_2 ( ) ( THEN THEN (  METHOD_3 ( ) )  METHOD_3 ( ) ) THEN THEN ( ELSE ELSE (  TYPE_1 . METHOD_4 ( false ) )  TYPE_1 . METHOD_4 ( false ) ) ELSE ELSE ) IF IF (  TYPE_1 . METHOD_5 ( ) . getTable ( ) . METHOD_6 ( ) )  TYPE_1 . METHOD_5 ( ) . getTable ( ) . METHOD_6 ( ) (  TYPE_1 . METHOD_5 ( ) . getTable ( ) . METHOD_7 ( VAR_1 ) )  TYPE_1 . METHOD_5 ( ) . getTable ( ) . METHOD_7 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( IN org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( ) ) IN org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( ) ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_2 . METHOD_4 ( VAR_1 . getId ( ) ) ) ) COND ! ( VAR_2 . METHOD_4 ( VAR_1 . getId ( ) ) ) ( THEN THEN (  VAR_2 . put ( VAR_1 . getId ( ) , new TYPE_2 ( VAR_1 . getId ( ) ) ) )  VAR_2 . put ( VAR_1 . getId ( ) , new TYPE_2 ( VAR_1 . getId ( ) ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StoragePool> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StoragePool> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME vds ) NAME vds ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN (  METHOD_2 ( ) . setItems ( VAR_1 ) )  METHOD_2 ( ) . setItems ( VAR_1 ) (  METHOD_2 ( ) . setSelectedItem ( TYPE_1 . METHOD_3 ( VAR_1 , new TYPE_2 < > ( vds . getStoragePoolId ( ) ) ) ) )  METHOD_2 ( ) . setSelectedItem ( TYPE_1 . METHOD_3 ( VAR_1 , new TYPE_2 < > ( vds . getStoragePoolId ( ) ) ) ) ( IF IF ( COND ( METHOD_2 ( ) . getSelectedItem ( ) ) == null ) COND ( METHOD_2 ( ) . getSelectedItem ( ) ) == null ( THEN THEN (  METHOD_2 ( ) . setSelectedItem ( TYPE_1 . METHOD_3 ( VAR_1 ) ) )  METHOD_2 ( ) . setSelectedItem ( TYPE_1 . METHOD_3 ( VAR_1 ) ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND source != null ) COND source != null ( THEN THEN ( VAR VAR ( TYPE java.util.ArrayList<TYPE_1> ) TYPE java.util.ArrayList<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( IN ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) IN ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ( BLOCK BLOCK ( IF IF ( COND ( VAR_2 . METHOD_2 ( ) ) == ( VAR_3 ) ) COND ( VAR_2 . METHOD_2 ( ) ) == ( VAR_3 ) ( THEN THEN (  VAR_1 . add ( VAR_2 ) )  VAR_1 . add ( VAR_2 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_1 ; )  return VAR_1 ; ) THEN THEN ) IF IF (  return new TYPE_1 ( ) ; )  return new TYPE_1 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME METHOD_2 ) NAME METHOD_2 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source != null ? ( ( java.lang.Integer ) ( source ) ) . METHOD_3 ( ) : 0 ; )  return source != null ? ( ( java.lang.Integer ) ( source ) ) . METHOD_3 ( ) : 0 ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object METHOD_2 ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . METHOD_3 ( ) : 0 ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object METHOD_2 ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . METHOD_3 ( ) : 0 ; } } (  VAR_1 . onSuccess ( aQuery . getModel ( ) , INT_1 ) )  VAR_1 . onSuccess ( aQuery . getModel ( ) , INT_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND TYPE_1 . getInstance ( ) . METHOD_2 ( ) ) COND TYPE_1 . getInstance ( ) . METHOD_2 ( ) ( THEN THEN ( VAR VAR ( TYPE java.util.List<TYPE_2<org.ovirt.engine.core.common.businessentities.StorageDomain>> ) TYPE java.util.List<TYPE_2<org.ovirt.engine.core.common.businessentities.StorageDomain>> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_3 . getInstance ( ) . METHOD_3 ( STRING_1 , METHOD_4 ( ) ) ) INIT = TYPE_3 . getInstance ( ) . METHOD_3 ( STRING_1 , METHOD_4 ( ) ) ) VAR VAR ( IF IF ( COND ( VAR_1 != null ) && ( ( VAR_1 . size ( ) ) > 0 ) ) COND ( VAR_1 != null ) && ( ( VAR_1 . size ( ) ) > 0 ) ( THEN THEN (  getTable ( ) . METHOD_5 ( new TYPE_4 < org.ovirt.engine.core.common.businessentities.StorageDomain > ( VAR_2 . METHOD_6 ( ) , VAR_1 ) ) )  getTable ( ) . METHOD_5 ( new TYPE_4 < org.ovirt.engine.core.common.businessentities.StorageDomain > ( VAR_2 . METHOD_6 ( ) , VAR_1 ) ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_4 ) RETURN TYPE_4 ( NAME METHOD_3 ) NAME METHOD_3 ( BLOCK BLOCK (  METHOD_4 ( VAR_3 , METHOD_5 ( VAR_1 ) ) )  METHOD_4 ( VAR_3 , METHOD_5 ( VAR_1 ) ) (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD (  TYPE_2 . METHOD_2 ( VAR_2 , new TYPE_3 < TYPE_4 > ( ) { public TYPE_4 METHOD_3 ( ) { METHOD_4 ( VAR_3 , METHOD_5 ( VAR_1 ) ) ; return null ; } } ) )  TYPE_2 . METHOD_2 ( VAR_2 , new TYPE_3 < TYPE_4 > ( ) { public TYPE_4 METHOD_3 ( ) { METHOD_4 ( VAR_3 , METHOD_5 ( VAR_1 ) ) ; return null ; } } ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME e ) NAME e ( BLOCK BLOCK (  METHOD_6 ( e ) )  METHOD_6 ( e ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME action ) NAME action ( IN TYPE_1 . METHOD_2 ( ) ) IN TYPE_1 . METHOD_2 ( ) ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_3 . map ( action , null ) ) INIT = TYPE_3 . map ( action , null ) ) VAR VAR (  TYPE_4 . METHOD_3 ( VAR_1 ) )  TYPE_4 . METHOD_3 ( VAR_1 ) (  TYPE_4 . assertEquals ( VAR_1 . name ( ) . METHOD_4 ( ) , action . name ( ) . METHOD_4 ( ) ) )  TYPE_4 . assertEquals ( VAR_1 . name ( ) . METHOD_4 ( ) , action . name ( ) . METHOD_4 ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VdsNetworkInterface> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VdsNetworkInterface> ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( result ) )  TYPE_1 . METHOD_2 ( result ) (  TYPE_1 . METHOD_3 ( result . isEmpty ( ) ) )  TYPE_1 . METHOD_3 ( result . isEmpty ( ) ) ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME iface ) NAME iface ( IN result ) IN result ( BLOCK BLOCK (  TYPE_1 . assertEquals ( VAR_1 , iface . METHOD_4 ( ) ) )  TYPE_1 . assertEquals ( VAR_1 , iface . METHOD_4 ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND TYPE_1 . isEmpty ( TYPE_2 . METHOD_2 ( ) ) ) COND TYPE_1 . isEmpty ( TYPE_2 . METHOD_2 ( ) ) ( THEN THEN ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_3 ( ) . get ( TYPE_2 . getParameters ( ) . METHOD_4 ( ) ) ) INIT = METHOD_3 ( ) . get ( TYPE_2 . getParameters ( ) . METHOD_4 ( ) ) ) VAR VAR ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN (  METHOD_5 ( VAR_1 . METHOD_6 ( ) ) )  METHOD_5 ( VAR_1 . METHOD_6 ( ) ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  METHOD_7 ( TYPE_2 . getVm ( ) . getStoragePoolId ( ) ) )  METHOD_7 ( TYPE_2 . getVm ( ) . getStoragePoolId ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  parameters = new TYPE_1 ( ) )  parameters = new TYPE_1 ( ) (  parameters . METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) )  parameters . METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) (  command = org.mockito.Mockito . METHOD_4 ( new TYPE_2 < TYPE_1 > ( parameters , null ) ) )  command = org.mockito.Mockito . METHOD_4 ( new TYPE_2 < TYPE_1 > ( parameters , null ) ) (  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_5 ( ) )  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_5 ( ) (  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( command ) . METHOD_6 ( ) )  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( command ) . METHOD_6 ( ) (  org.mockito.Mockito.doReturn ( null ) . when ( command ) . METHOD_7 ( TYPE_3 . any ( VAR_3 class ) ) )  org.mockito.Mockito.doReturn ( null ) . when ( command ) . METHOD_7 ( TYPE_3 . any ( VAR_3 class ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = 0 ) INIT = 0 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_1 . METHOD_2 ( VAR_3 ) . toString ( ) . METHOD_3 ( STRING_1 , STRING_2 ) ) INIT = TYPE_1 . METHOD_2 ( VAR_3 ) . toString ( ) . METHOD_3 ( STRING_1 , STRING_2 ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_2 . METHOD_4 ( STRING_3 ) ) INIT = VAR_2 . METHOD_4 ( STRING_3 ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_5 ) NAME VAR_5 ( IN VAR_4 ) IN VAR_4 ( BLOCK BLOCK (  VAR_5 = VAR_5 . METHOD_5 ( ) )  VAR_5 = VAR_5 . METHOD_5 ( ) ( IF IF ( COND ( java.lang.Integer . valueOf ( VAR_5 ) ) > VAR_1 ) COND ( java.lang.Integer . valueOf ( VAR_5 ) ) > VAR_1 ( THEN THEN (  VAR_1 = java.lang.Integer . valueOf ( VAR_5 ) )  VAR_1 = java.lang.Integer . valueOf ( VAR_5 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( false ) )  METHOD_2 ( false ) (  VAR_1 . METHOD_3 ( ) )  VAR_1 . METHOD_3 ( ) ( TRY TRY ( BLOCK BLOCK (  resource . METHOD_4 ( ) )  resource . METHOD_4 ( ) (  METHOD_5 ( STRING_1 ) )  METHOD_5 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( BLOCK BLOCK (  METHOD_6 ( VAR_2 . METHOD_7 ( ) ) )  METHOD_6 ( VAR_2 . METHOD_7 ( ) ) (  assertEquals ( INT_1 , VAR_2 . METHOD_7 ( ) . getStatus ( ) ) )  assertEquals ( INT_1 , VAR_2 . METHOD_7 ( ) . getStatus ( ) ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME parameters ) NAME parameters ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME validator ) NAME validator ( INIT = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( parameters ) ) ) INIT = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( parameters ) ) ) VAR VAR (  parameters . METHOD_3 ( true ) )  parameters . METHOD_3 ( true ) ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.compat.Guid> ) TYPE java.util.ArrayList<org.ovirt.engine.core.compat.Guid> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList ( TYPE_3 . METHOD_4 ( org.ovirt.engine.core.compat.Guid . METHOD_5 ( ) ) ) ) INIT = new java.util.ArrayList ( TYPE_3 . METHOD_4 ( org.ovirt.engine.core.compat.Guid . METHOD_5 ( ) ) ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_4.DiskImage ) TYPE TYPE_4.DiskImage ( NAME image ) NAME image ( IN parameters . getVm ( ) . METHOD_6 ( ) ) IN parameters . getVm ( ) . METHOD_6 ( ) ( BLOCK BLOCK (  image . METHOD_7 ( VAR_1 ) )  image . METHOD_7 ( VAR_1 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( validator ) . METHOD_8 ( TYPE_5 . METHOD_9 ( ) ) )  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( validator ) . METHOD_8 ( TYPE_5 . METHOD_9 ( ) ) (  return validator ; )  return validator ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = getReturnValue ( ) . METHOD_2 ( ) ) INIT = getReturnValue ( ) . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE java.util.Map<org.ovirt.engine.core.compat.Guid,TYPE_1> ) TYPE java.util.Map<org.ovirt.engine.core.compat.Guid,TYPE_1> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.HashMap < org.ovirt.engine.core.compat.Guid , TYPE_1 > ( ) ) INIT = new java.util.HashMap < org.ovirt.engine.core.compat.Guid , TYPE_1 > ( ) ) VAR VAR ( IF IF ( COND ! ( METHOD_3 ( VAR_1 , VAR_2 ) ) ) COND ! ( METHOD_3 ( VAR_1 , VAR_2 ) ) ( THEN THEN (  return METHOD_4 ( ) ; )  return METHOD_4 ( ) ; ) THEN THEN ) IF IF ( IF IF ( COND getParameters ( ) . METHOD_5 ( ) ) COND getParameters ( ) . METHOD_5 ( ) ( THEN THEN (  METHOD_6 ( ) )  METHOD_6 ( ) ) THEN THEN ) IF IF ( IF IF ( COND ! ( METHOD_7 ( VAR_1 , VAR_2 ) ) ) COND ! ( METHOD_7 ( VAR_1 , VAR_2 ) ) ( THEN THEN (  return METHOD_4 ( ) ; )  return METHOD_4 ( ) ; ) THEN THEN ) IF IF (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) ) ) INIT = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.DiskImage> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.DiskImage> ( NAME VAR_3 ) NAME VAR_3 ( INIT = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ) INIT = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ) VAR VAR (  VAR_3 . METHOD_1 ( VAR_2 ) )  VAR_3 . METHOD_1 ( VAR_2 ) (  TYPE_2 . METHOD_2 ( VAR_3 , new TYPE_3 ( ) ) )  TYPE_2 . METHOD_2 ( VAR_3 , new TYPE_3 ( ) ) ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_4 ) NAME VAR_4 ( INIT = ( ( TYPE_4 ) ( model ) ) ) INIT = ( ( TYPE_4 ) ( model ) ) ) VAR VAR (  VAR_4 . setItems ( VAR_3 ) )  VAR_4 . setItems ( VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.VdcQueryReturnValue ) TYPE TYPE_1.VdcQueryReturnValue ( NAME response ) NAME response ( INIT = ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) ) INIT = ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) ) VAR VAR ( IF IF ( COND response . getSucceeded ( ) ) COND response . getSucceeded ( ) ( THEN THEN ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( java.util.ArrayList < TYPE_2 > ) ( response . getReturnValue ( ) ) ) ) INIT = ( ( java.util.ArrayList < TYPE_2 > ) ( response . getReturnValue ( ) ) ) ) VAR VAR (  METHOD_1 ( VAR_2 . METHOD_2 ( VAR_1 ) ) )  METHOD_1 ( VAR_2 . METHOD_2 ( VAR_1 ) ) ) THEN THEN ( ELSE ELSE (  VAR_2 . METHOD_3 ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_4 ( ) ) )  VAR_2 . METHOD_3 ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_4 ( ) ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME vds ) NAME vds ( INIT = new org.ovirt.engine.core.common.businessentities.VDS ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.VDS ( ) ) VAR VAR (  vds . setId ( VAR_1 . getValue ( ) ) )  vds . setId ( VAR_1 . getValue ( ) ) (  getModel ( ) . METHOD_2 ( ) . setItems ( TYPE_2 . METHOD_3 ( vds ) ) )  getModel ( ) . METHOD_2 ( ) . setItems ( TYPE_2 . METHOD_3 ( vds ) ) ) THEN THEN ) IF IF (  super . METHOD_1 ( VAR_1 ) )  super . METHOD_1 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) , null ) ) )  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) , null ) ) (  METHOD_3 ( ) )  METHOD_3 ( ) (  METHOD_4 ( false , VAR_2 ) )  METHOD_4 ( false , VAR_2 ) (  cmd . METHOD_5 ( ) )  cmd . METHOD_5 ( ) (  org.mockito.Mockito . METHOD_6 ( VAR_3 , org.mockito.Mockito . METHOD_7 ( ) ) . METHOD_8 ( TYPE_3 . any ( VAR_4 . Guid class ) ) )  org.mockito.Mockito . METHOD_6 ( VAR_3 , org.mockito.Mockito . METHOD_7 ( ) ) . METHOD_8 ( TYPE_3 . any ( VAR_4 . Guid class ) ) (  TYPE_4 . assertEquals ( cmd . METHOD_9 ( ) , VAR_5 ) )  TYPE_4 . assertEquals ( cmd . METHOD_9 ( ) , VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( 1 , ( - INT_1 ) , ( - INT_2 ) , INT_2 ) ) INIT = new TYPE_1 ( 1 , ( - INT_1 ) , ( - INT_2 ) , INT_2 ) ) VAR VAR (  VAR_2 . METHOD_2 ( VAR_1 ) )  VAR_2 . METHOD_2 ( VAR_1 ) (  assertEquals ( STRING_1 , 0 , VAR_3 ) )  assertEquals ( STRING_1 , 0 , VAR_3 ) (  assertEquals ( STRING_2 , INT_3 , VAR_4 ) )  assertEquals ( STRING_2 , INT_3 , VAR_4 ) (  assertEquals ( STRING_3 , INT_4 , VAR_5 ) )  assertEquals ( STRING_3 , INT_4 , VAR_5 ) (  assertEquals ( STRING_4 , INT_2 , VAR_6 ) )  assertEquals ( STRING_4 , INT_2 , VAR_6 ) (  assertEquals ( STRING_5 , 0 , VAR_7 ) )  assertEquals ( STRING_5 , 0 , VAR_7 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME status ) NAME status ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME context ) NAME context ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( TYPE_3 . METHOD_2 ( ) ) != null ) && ( ( TYPE_3 . METHOD_2 ( ) . getStoragePoolId ( ) ) != null ) ) COND ( ( TYPE_3 . METHOD_2 ( ) ) != null ) && ( ( TYPE_3 . METHOD_2 ( ) . getStoragePoolId ( ) ) != null ) ( THEN THEN ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME map ) NAME map ( INIT = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( ) ) INIT = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( ) ) VAR VAR ( IF IF ( COND context != null ) COND context != null ( THEN THEN (  context . METHOD_4 ( map ) )  context . METHOD_4 ( map ) ) THEN THEN ) IF IF (  TYPE_3 . METHOD_2 ( ) . METHOD_5 ( status ) )  TYPE_3 . METHOD_2 ( ) . METHOD_5 ( status ) (  METHOD_6 ( ) . METHOD_7 ( map . getId ( ) , status ) )  METHOD_6 ( ) . METHOD_7 ( map . getId ( ) , status ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME add ) NAME add ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2.VM ) TYPE TYPE_2.VM ( NAME vm ) NAME vm ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ( INIT = getEntity ( ) ) INIT = getEntity ( ) ) VAR VAR (  VAR_1 . METHOD_1 ( ) . add ( TYPE_4 . METHOD_2 ( vm . getId ( ) ) ) )  VAR_1 . METHOD_1 ( ) . add ( TYPE_4 . METHOD_2 ( vm . getId ( ) ) ) (  return METHOD_3 ( VAR_2 , new TYPE_5 ( VAR_1 . getId ( ) , VAR_1 ) ) ; )  return METHOD_3 ( VAR_2 , new TYPE_5 ( VAR_1 . getId ( ) , VAR_1 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ) TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME storageDomain ) NAME storageDomain ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( storageDomain . getId ( ) ) ) INIT = METHOD_2 ( storageDomain . getId ( ) ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( IF IF ( COND VAR_2 . METHOD_3 ( ) . equals ( VAR_3 . METHOD_3 ( ) ) ) COND VAR_2 . METHOD_3 ( ) . equals ( VAR_3 . METHOD_3 ( ) ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3.AuditLogType ) TYPE TYPE_3.AuditLogType ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE TYPE_3.AuditLogSeverity ) TYPE TYPE_3.AuditLogSeverity ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 . METHOD_2 ( ) ) COND VAR_1 . METHOD_2 ( ) ( THEN THEN (  return VAR_1 . METHOD_1 ( VAR_2 , VAR_4 , VAR_3 ) ; )  return VAR_1 . METHOD_1 ( VAR_2 , VAR_4 , VAR_3 ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_5 ) NAME VAR_5 ( INIT = TYPE_4 . METHOD_3 ( VAR_2 ) ) INIT = TYPE_4 . METHOD_3 ( VAR_2 ) ) VAR VAR ( IF IF ( COND VAR_5 == null ) COND VAR_5 == null ( THEN THEN (  return null ; )  return null ; ) THEN THEN ( ELSE ELSE ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_6 ) NAME VAR_6 ( INIT = METHOD_4 ( VAR_5 , VAR_1 ) ) INIT = METHOD_4 ( VAR_5 , VAR_1 ) ) VAR VAR (  return VAR_1 . METHOD_1 ( VAR_2 , VAR_4 , VAR_6 ) ; )  return VAR_1 . METHOD_1 ( VAR_2 , VAR_4 , VAR_6 ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ( INIT = new org.ovirt.engine.core.common.businessentities.VM ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.VM ( ) ) VAR VAR (  vm . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) )  vm . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) (  vm . METHOD_3 ( VAR_1 ) )  vm . METHOD_3 ( VAR_1 ) (  vm . METHOD_4 ( VAR_2 ) )  vm . METHOD_4 ( VAR_2 ) (  vm . METHOD_5 ( VAR_3 ) )  vm . METHOD_5 ( VAR_3 ) (  org.mockito.Mockito.doReturn ( vm ) . when ( cmd ) . getVm ( ) )  org.mockito.Mockito.doReturn ( vm ) . when ( cmd ) . getVm ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1.VdcActionType ) RETURN TYPE_1.VdcActionType ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) == null ) COND ( VAR_1 ) == null ( THEN THEN ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ( INIT = METHOD_2 ( ) . getName ( ) ) INIT = METHOD_2 ( ) . getName ( ) ) VAR VAR (  name = name . METHOD_3 ( 0 , ( ( name . length ( ) ) - INT_1 ) ) )  name = name . METHOD_3 ( 0 , ( ( name . length ( ) ) - INT_1 ) ) (  name = name . METHOD_3 ( ( ( name . METHOD_4 ( CHAR_1 ) ) + 1 ) ) )  name = name . METHOD_3 ( ( ( name . METHOD_4 ( CHAR_1 ) ) + 1 ) ) (  VAR_1 = TYPE_2 . valueOf ( name ) )  VAR_1 = TYPE_2 . valueOf ( name ) ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ( BLOCK BLOCK (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.compat.Guid> ) TYPE java.util.List<org.ovirt.engine.core.compat.Guid> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  log . error ( STRING_1 , METHOD_2 ( ) ) )  log . error ( STRING_1 , METHOD_2 ( ) ) (  super . METHOD_1 ( VAR_1 , VAR_2 ) )  super . METHOD_1 ( VAR_1 , VAR_2 ) (  METHOD_3 ( ) . getParameters ( ) . METHOD_4 ( false ) )  METHOD_3 ( ) . getParameters ( ) . METHOD_4 ( false ) (  METHOD_5 ( VAR_1 ) )  METHOD_5 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( VAR_2 ) ) . getReturnValue ( ) ) ) ) INIT = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( VAR_2 ) ) . getReturnValue ( ) ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.DiskImage> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.DiskImage> ( NAME VAR_4 ) NAME VAR_4 ( INIT = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ) INIT = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ) VAR VAR (  VAR_4 . METHOD_2 ( VAR_3 ) )  VAR_4 . METHOD_2 ( VAR_3 ) (  TYPE_2 . METHOD_3 ( VAR_4 , new TYPE_3 ( ) ) )  TYPE_2 . METHOD_3 ( VAR_4 , new TYPE_3 ( ) ) ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_5 ) NAME VAR_5 ( INIT = ( ( TYPE_4 ) ( VAR_1 ) ) ) INIT = ( ( TYPE_4 ) ( VAR_1 ) ) ) VAR VAR (  VAR_5 . setItems ( VAR_4 ) )  VAR_5 . setItems ( VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1<org.ovirt.engine.core.compat.Guid,java.lang.String>> ) TYPE java.util.List<TYPE_1<org.ovirt.engine.core.compat.Guid,java.lang.String>> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR (  VAR_1 . add ( new TYPE_1 ( VAR_2 , VAR_3 ) ) )  VAR_1 . add ( new TYPE_1 ( VAR_2 , VAR_3 ) ) (  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_4 ) . METHOD_2 ( ) )  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_4 ) . METHOD_2 ( ) (  org.mockito.Mockito.doReturn ( TYPE_2 . METHOD_3 ( ) ) . when ( VAR_5 ) . METHOD_4 ( ) )  org.mockito.Mockito.doReturn ( TYPE_2 . METHOD_3 ( ) ) . when ( VAR_5 ) . METHOD_4 ( ) (  org.mockito.Mockito.doReturn ( VAR_5 ) . when ( VAR_6 ) . METHOD_5 ( TYPE_3 . any ( ) ) )  org.mockito.Mockito.doReturn ( VAR_5 ) . when ( VAR_6 ) . METHOD_5 ( TYPE_3 . any ( ) ) (  VAR_7 . METHOD_6 ( VAR_8 class , VAR_9 ) )  VAR_7 . METHOD_6 ( VAR_8 class , VAR_9 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_2 . METHOD_1 ( VAR_1 ) )  VAR_2 . METHOD_1 ( VAR_1 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME event ) NAME event ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR (  VAR_3 . METHOD_3 ( ) . METHOD_4 ( event . METHOD_5 ( ) ) )  VAR_3 . METHOD_3 ( ) . METHOD_4 ( event . METHOD_5 ( ) ) (  VAR_4 . METHOD_3 ( ) . METHOD_4 ( new TYPE_3 ( ) . METHOD_6 ( event . METHOD_7 ( ) ) ) )  VAR_4 . METHOD_3 ( ) . METHOD_4 ( new TYPE_3 ( ) . METHOD_6 ( event . METHOD_7 ( ) ) ) (  VAR_5 . METHOD_3 ( ) . METHOD_4 ( event . METHOD_8 ( ) ) )  VAR_5 . METHOD_3 ( ) . METHOD_4 ( event . METHOD_8 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VM> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VM> ( NAME vms ) NAME vms ( INIT = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ( ) ) INIT = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ( ) ) VAR VAR (  vms . add ( vm ) )  vms . add ( vm ) ( VAR VAR ( TYPE java.util.Map<java.lang.Boolean,java.util.List<org.ovirt.engine.core.common.businessentities.VM>> ) TYPE java.util.Map<java.lang.Boolean,java.util.List<org.ovirt.engine.core.common.businessentities.VM>> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.HashMap < java.lang.Boolean , java.util.List < org.ovirt.engine.core.common.businessentities.VM > > ( ) ) INIT = new java.util.HashMap < java.lang.Boolean , java.util.List < org.ovirt.engine.core.common.businessentities.VM > > ( ) ) VAR VAR (  VAR_1 . put ( java.lang.Boolean . TRUE , vms ) )  VAR_1 . put ( java.lang.Boolean . TRUE , vms ) (  org.mockito.Mockito.when ( VAR_2 . METHOD_2 ( VAR_3 ) ) . thenReturn ( VAR_1 ) )  org.mockito.Mockito.when ( VAR_2 . METHOD_2 ( VAR_3 ) ) . thenReturn ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 = VAR_1 . METHOD_2 ( CHAR_1 , CHAR_2 ) )  VAR_1 = VAR_1 . METHOD_2 ( CHAR_1 , CHAR_2 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( ( VAR_2 . METHOD_3 ( INT_1 ) ) + INT_2 ) + STRING_1 ) INIT = ( ( VAR_2 . METHOD_3 ( INT_1 ) ) + INT_2 ) + STRING_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( INIT = ( ( ( VAR_5 ) + VAR_3 ) + STRING_2 ) + VAR_1 ) INIT = ( ( ( VAR_5 ) + VAR_3 ) + STRING_2 ) + VAR_1 ) VAR VAR (  return VAR_4 ; )  return VAR_4 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  METHOD_2 ( ) . setSelectedItem ( TYPE_3 . METHOD_3 ( VAR_2 ) ) )  METHOD_2 ( ) . setSelectedItem ( TYPE_3 . METHOD_3 ( VAR_2 ) ) ) THEN THEN ( ELSE ELSE (  model . METHOD_2 ( ) . setSelectedItem ( TYPE_3 . METHOD_3 ( VAR_2 , new TYPE_4 ( ( ( org.ovirt.engine.core.compat.Guid ) ( VAR_1 ) ) ) ) ) )  model . METHOD_2 ( ) . setSelectedItem ( TYPE_3 . METHOD_3 ( VAR_2 , new TYPE_4 ( ( ( org.ovirt.engine.core.compat.Guid ) ( VAR_1 ) ) ) ) ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME constants ) NAME constants ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( constants . METHOD_3 ( ) ) )  VAR_1 . METHOD_2 ( constants . METHOD_3 ( ) ) (  VAR_2 . METHOD_2 ( constants . METHOD_4 ( ) ) )  VAR_2 . METHOD_2 ( constants . METHOD_4 ( ) ) (  VAR_3 . METHOD_5 ( constants . METHOD_6 ( ) ) )  VAR_3 . METHOD_5 ( constants . METHOD_6 ( ) ) (  VAR_4 . METHOD_2 ( constants . METHOD_7 ( ) ) )  VAR_4 . METHOD_2 ( constants . METHOD_7 ( ) ) (  VAR_5 . METHOD_2 ( constants . METHOD_8 ( ) ) )  VAR_5 . METHOD_2 ( constants . METHOD_8 ( ) ) (  VAR_6 . METHOD_2 ( constants . METHOD_9 ( ) ) )  VAR_6 . METHOD_2 ( constants . METHOD_9 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME user ) NAME user ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( user . getId ( ) , TYPE_4 . METHOD_4 ( user . METHOD_5 ( ) , STRING_1 ) ) ) INIT = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( user . getId ( ) , TYPE_4 . METHOD_4 ( user . METHOD_5 ( ) , STRING_1 ) ) ) VAR VAR ( IF IF ( COND ! ( VAR_1 . isEmpty ( ) ) ) COND ! ( VAR_1 . isEmpty ( ) ) ( THEN THEN (  VAR_2 . METHOD_6 ( STRING_2 , VAR_1 . get ( 0 ) . METHOD_7 ( ) ) )  VAR_2 . METHOD_6 ( STRING_2 , VAR_1 . get ( 0 ) . METHOD_7 ( ) ) (  return true ; )  return true ; ) THEN THEN ) IF IF (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.VdcQueryReturnValue ) TYPE TYPE_1.VdcQueryReturnValue ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) ) INIT = ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) ) VAR VAR ( IF IF ( COND VAR_1 . getSucceeded ( ) ) COND VAR_1 . getSucceeded ( ) ( THEN THEN ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ( INIT = VAR_1 . getReturnValue ( ) ) INIT = VAR_1 . getReturnValue ( ) ) VAR VAR (  METHOD_1 ( TYPE_2 . METHOD_2 ( vm ) ) )  METHOD_1 ( TYPE_2 . METHOD_2 ( vm ) ) ) THEN THEN ( ELSE ELSE (  METHOD_3 ( VAR_2 . METHOD_4 ( METHOD_5 ( ) . getEntity ( ) ) ) )  METHOD_3 ( VAR_2 . METHOD_4 ( METHOD_5 ( ) . getEntity ( ) ) ) ) ELSE ELSE ) IF IF (  METHOD_6 ( ) )  METHOD_6 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( 1 ) )  METHOD_2 ( 1 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_3 ( VAR_2 , VAR_3 class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_4 [ 1 ] } , true , true , false ) ) INIT = METHOD_3 ( VAR_2 , VAR_3 class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_4 [ 1 ] } , true , true , false ) ) VAR VAR (  VAR_1 = METHOD_4 ( VAR_1 , VAR_5 , VAR_4 [ 0 ] . toString ( ) ) )  VAR_1 = METHOD_4 ( VAR_1 , VAR_5 , VAR_4 [ 0 ] . toString ( ) ) (  METHOD_5 ( VAR_1 ) )  METHOD_5 ( VAR_1 ) (  VAR_6 . METHOD_6 ( ) )  VAR_6 . METHOD_6 ( ) (  METHOD_7 ( resource . METHOD_8 ( ) ) )  METHOD_7 ( resource . METHOD_8 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_1 ) ( target ) ) ) INIT = ( ( TYPE_1 ) ( target ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( java.util.List < TYPE_2 > ) ( returnValue ) ) ) INIT = ( ( java.util.List < TYPE_2 > ) ( returnValue ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME VAR_3 ) NAME VAR_3 ( INIT = new java.util.ArrayList < TYPE_2 > ( ) ) INIT = new java.util.ArrayList < TYPE_2 > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME a ) NAME a ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK ( IF IF ( COND ( a . METHOD_2 ( ) ) == ( VAR_4 ) ) COND ( a . METHOD_2 ( ) ) == ( VAR_4 ) ( THEN THEN (  VAR_3 . add ( a ) )  VAR_3 . add ( a ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  VAR_1 . METHOD_3 ( VAR_3 ) )  VAR_1 . METHOD_3 ( VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) )  METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) (  TYPE_1 . METHOD_4 ( STRING_1 , STRING_2 ) )  TYPE_1 . METHOD_4 ( STRING_1 , STRING_2 ) (  METHOD_5 ( new int [ ] { 0 , 0 } ) )  METHOD_5 ( new int [ ] { 0 , 0 } ) (  METHOD_6 ( new int [ ] { 0 , 0 } ) )  METHOD_6 ( new int [ ] { 0 , 0 } ) (  TYPE_1 . METHOD_7 ( new int [ ] { 0 , 0 } ) )  TYPE_1 . METHOD_7 ( new int [ ] { 0 , 0 } ) (  METHOD_8 ( 0 ) )  METHOD_8 ( 0 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) (  org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( TYPE_1 . METHOD_3 ( ) ) )  org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( TYPE_1 . METHOD_3 ( ) ) (  org.mockito.Mockito.doReturn ( java.lang.Boolean . TRUE ) . when ( METHOD_4 ( ) ) . METHOD_5 ( TYPE_2 . METHOD_6 ( storageDomain ) ) )  org.mockito.Mockito.doReturn ( java.lang.Boolean . TRUE ) . when ( METHOD_4 ( ) ) . METHOD_5 ( TYPE_2 . METHOD_6 ( storageDomain ) ) (  org.mockito.Mockito.doReturn ( java.lang.Boolean . TRUE ) . when ( METHOD_4 ( ) ) . METHOD_7 ( TYPE_2 . METHOD_6 ( storageDomain ) ) )  org.mockito.Mockito.doReturn ( java.lang.Boolean . TRUE ) . when ( METHOD_4 ( ) ) . METHOD_7 ( TYPE_2 . METHOD_6 ( storageDomain ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.network.Network ) TYPE org.ovirt.engine.core.common.businessentities.network.Network ( NAME network ) NAME network ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( network ) )  METHOD_2 ( network ) ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ( NAME iface ) NAME iface ( INIT = METHOD_3 ( STRING_1 , network ) ) INIT = METHOD_3 ( STRING_1 , network ) ) VAR VAR (  iface . METHOD_4 ( true ) )  iface . METHOD_4 ( true ) (  METHOD_5 ( iface ) )  METHOD_5 ( iface ) (  iface . METHOD_6 ( VAR_1 ) )  iface . METHOD_6 ( VAR_1 ) (  return METHOD_7 ( METHOD_8 ( iface ) , VAR_2 ) ; )  return METHOD_7 ( METHOD_8 ( iface ) , VAR_2 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . setId ( VAR_2 ) )  VAR_1 . setId ( VAR_2 ) (  VAR_1 . METHOD_2 ( 0 ) )  VAR_1 . METHOD_2 ( 0 ) (  VAR_1 . METHOD_3 ( TYPE_1 . METHOD_4 ( 2 , INT_1 , INT_2 ) ) )  VAR_1 . METHOD_3 ( TYPE_1 . METHOD_4 ( 2 , INT_1 , INT_2 ) ) (  VAR_1 . METHOD_5 ( TYPE_1 . METHOD_4 ( INT_3 , INT_4 , INT_5 ) ) )  VAR_1 . METHOD_5 ( TYPE_1 . METHOD_4 ( INT_3 , INT_4 , INT_5 ) ) (  VAR_1 . METHOD_6 ( TYPE_2 . METHOD_7 ( ) ) )  VAR_1 . METHOD_6 ( TYPE_2 . METHOD_7 ( ) ) (  dao . METHOD_8 ( VAR_1 ) )  dao . METHOD_8 ( VAR_1 ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = dao . get ( VAR_2 ) ) INIT = dao . get ( VAR_2 ) ) VAR VAR (  TYPE_4 . METHOD_9 ( VAR_3 ) )  TYPE_4 . METHOD_9 ( VAR_3 ) (  TYPE_4 . assertEquals ( VAR_1 , VAR_3 ) )  TYPE_4 . assertEquals ( VAR_1 , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( model ) )  VAR_1 . METHOD_2 ( model ) (  VAR_2 . METHOD_3 ( java.lang.Integer . toString ( getModel ( ) . METHOD_4 ( ) ) ) )  VAR_2 . METHOD_3 ( java.lang.Integer . toString ( getModel ( ) . METHOD_4 ( ) ) ) (  VAR_3 . METHOD_3 ( java.lang.Boolean . toString ( getModel ( ) . METHOD_5 ( ) ) ) )  VAR_3 . METHOD_3 ( java.lang.Boolean . toString ( getModel ( ) . METHOD_5 ( ) ) ) (  VAR_4 . METHOD_3 ( java.lang.Boolean . toString ( getModel ( ) . METHOD_6 ( ) ) ) )  VAR_4 . METHOD_3 ( java.lang.Boolean . toString ( getModel ( ) . METHOD_6 ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source != null ? ( ( org.ovirt.engine.core.common.businessentities.StorageDomain ) ( source ) ) : null ; )  return source != null ? ( ( org.ovirt.engine.core.common.businessentities.StorageDomain ) ( source ) ) : null ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( org.ovirt.engine.core.common.businessentities.StorageDomain ) ( source ) ) : null ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( org.ovirt.engine.core.common.businessentities.StorageDomain ) ( source ) ) : null ; } } (  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1[] ) TYPE TYPE_1[] ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  < TYPE_1 > VAR_2 = org.mockito.Mockito.when ( VAR_3 . METHOD_2 ( TYPE_3 . any ( VAR_4 class ) , TYPE_3 . any ( VAR_5 class ) ) ) )  < TYPE_1 > VAR_2 = org.mockito.Mockito.when ( VAR_3 . METHOD_2 ( TYPE_3 . any ( VAR_4 class ) , TYPE_3 . any ( VAR_5 class ) ) ) ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  VAR_2 = VAR_2 . thenReturn ( result ) )  VAR_2 = VAR_2 . thenReturn ( result ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> ) RETURN java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ( NAME i ) NAME i ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( IF IF ( COND ( i . METHOD_2 ( ) ) == null ) COND ( i . METHOD_2 ( ) ) == null ( THEN THEN (  VAR_2 . add ( i ) )  VAR_2 . add ( i ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.when ( cluster . getStoragePoolId ( ) ) . thenReturn ( org.mockito.Mockito . METHOD_2 ( VAR_1 . Guid class ) ) )  org.mockito.Mockito.when ( cluster . getStoragePoolId ( ) ) . thenReturn ( org.mockito.Mockito . METHOD_2 ( VAR_1 . Guid class ) ) (  org.mockito.Mockito.when ( VAR_2 . get ( TYPE_1 . any ( ) ) ) . thenReturn ( org.mockito.Mockito . METHOD_2 ( VAR_3 . StoragePool class ) ) )  org.mockito.Mockito.when ( VAR_2 . get ( TYPE_1 . any ( ) ) ) . thenReturn ( org.mockito.Mockito . METHOD_2 ( VAR_3 . StoragePool class ) ) (  validator = new TYPE_2 ( VAR_4 , VAR_2 , cluster , VAR_5 ) )  validator = new TYPE_2 ( VAR_4 , VAR_2 , cluster , VAR_5 ) (  TYPE_3 . METHOD_3 ( validator . METHOD_4 ( ) , TYPE_4 . METHOD_5 ( ) ) )  TYPE_3 . METHOD_3 ( validator . METHOD_4 ( ) , TYPE_4 . METHOD_5 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.Map<java.lang.String,java.lang.String> ) RETURN java.util.Map<java.lang.String,java.lang.String> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( java.lang.String ) ( METHOD_2 ( VAR_3 . String , name , VAR_1 ) ) ) ) INIT = ( ( java.lang.String ) ( METHOD_2 ( VAR_3 . String , name , VAR_1 ) ) ) ) VAR VAR ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN (  return new TYPE_1 ( ) . METHOD_3 ( VAR_2 , VAR_4 . HashMap class ) ; )  return new TYPE_1 ( ) . METHOD_3 ( VAR_2 , VAR_4 . HashMap class ) ; ) THEN THEN ( ELSE ELSE (  return null ; )  return null ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( VAR_2 . Guid class ) ) ) . thenReturn ( new TYPE_2 ( STRING_1 , VAR_3 , STRING_1 , TYPE_3 . getValue ( ) , TYPE_4 . getValue ( ) ) ) )  org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( VAR_2 . Guid class ) ) ) . thenReturn ( new TYPE_2 ( STRING_1 , VAR_3 , STRING_1 , TYPE_3 . getValue ( ) , TYPE_4 . getValue ( ) ) ) (  org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ) . thenReturn ( TYPE_5 . METHOD_4 ( ) ) )  org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ) . thenReturn ( TYPE_5 . METHOD_4 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND org.ovirt.engine.ui.frontend.Frontend . METHOD_2 ( VAR_1 ) ) COND org.ovirt.engine.ui.frontend.Frontend . METHOD_2 ( VAR_1 ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  VAR_2 . log ( VAR_3 , ( STRING_1 + VAR_1 ) , VAR_1 ) )  VAR_2 . log ( VAR_3 , ( STRING_1 + VAR_1 ) , VAR_1 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_2 ( VAR_5 , VAR_6 , null ) ) INIT = new TYPE_2 ( VAR_5 , VAR_6 , null ) ) VAR VAR (  org.ovirt.engine.ui.frontend.Frontend . METHOD_3 ( VAR_1 ) )  org.ovirt.engine.ui.frontend.Frontend . METHOD_3 ( VAR_1 ) (  VAR_7 . METHOD_4 ( VAR_4 ) )  VAR_7 . METHOD_4 ( VAR_4 ) (  org.ovirt.engine.ui.frontend.Frontend . METHOD_5 ( VAR_5 , context ) )  org.ovirt.engine.ui.frontend.Frontend . METHOD_5 ( VAR_5 , context ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.Object> ) TYPE java.util.Map<java.lang.String,java.lang.Object> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.HashMap < > ( ) ) INIT = new java.util.HashMap < > ( ) ) VAR VAR (  VAR_2 . put ( VAR_3 , VAR_1 . toString ( ) ) )  VAR_2 . put ( VAR_3 , VAR_1 . toString ( ) ) (  VAR_2 . put ( VAR_4 , TYPE_2 . METHOD_2 ( TYPE_3 . getParameters ( ) . METHOD_3 ( ) ) ) )  VAR_2 . put ( VAR_4 , TYPE_2 . METHOD_2 ( TYPE_3 . getParameters ( ) . METHOD_3 ( ) ) ) (  return METHOD_4 ( VAR_2 ) ; )  return METHOD_4 ( VAR_2 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ( INIT = ( ( TYPE_1 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) INIT = ( ( TYPE_1 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( java.util.List < TYPE_2 > ) ( returnValue ) ) ) INIT = ( ( java.util.List < TYPE_2 > ) ( returnValue ) ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK (  VAR_4 . add ( VAR_3 ) )  VAR_4 . add ( VAR_3 ) (  VAR_5 . put ( VAR_3 . METHOD_1 ( ) , new TYPE_2 ( VAR_3 ) ) )  VAR_5 . put ( VAR_3 . METHOD_1 ( ) , new TYPE_2 ( VAR_3 ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  METHOD_2 ( ) )  METHOD_2 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ( INIT = ( ( TYPE_1 ) ( getWindow ( ) ) ) ) INIT = ( ( TYPE_1 ) ( getWindow ( ) ) ) ) VAR VAR ( IF IF ( COND ( model . METHOD_2 ( ) ) != null ) COND ( model . METHOD_2 ( ) ) != null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( IF IF ( COND ! ( model . validate ( ) ) ) COND ! ( model . validate ( ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  model . METHOD_3 ( null ) )  model . METHOD_3 ( null ) (  METHOD_4 ( ) )  METHOD_4 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_1 ) ( getSelectedItem ( ) ) ) ) INIT = ( ( TYPE_1 ) ( getSelectedItem ( ) ) ) ) VAR VAR ( IF IF ( COND ( getWindow ( ) ) != null ) COND ( getWindow ( ) ) != null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_3 ( VAR_1 . METHOD_2 ( ) , this ) ) INIT = new TYPE_3 ( VAR_1 . METHOD_2 ( ) , this ) ) VAR VAR (  METHOD_3 ( VAR_2 ) )  METHOD_3 ( VAR_2 ) (  METHOD_4 ( VAR_2 ) )  METHOD_4 ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME type ) NAME type ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( model . METHOD_3 ( ) ) )  METHOD_2 ( model . METHOD_3 ( ) ) (  METHOD_2 ( model . METHOD_3 ( ) . METHOD_4 ( ) ) )  METHOD_2 ( model . METHOD_3 ( ) . METHOD_4 ( ) ) (  assertEquals ( VAR_1 , model . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( ) ) )  assertEquals ( VAR_1 , model . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( ) ) (  assertEquals ( type . value ( ) , model . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_6 ( ) ) )  assertEquals ( type . value ( ) , model . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_6 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) ) INIT = new TYPE_1 ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) ) VAR VAR (  command = org.mockito.Mockito . METHOD_3 ( new TYPE_2 . RunVmCommand < TYPE_1 > ( VAR_1 ) ) )  command = org.mockito.Mockito . METHOD_3 ( new TYPE_2 . RunVmCommand < TYPE_1 > ( VAR_1 ) ) (  org.mockito.Mockito . METHOD_4 ( ) . when ( command ) . METHOD_5 ( ) )  org.mockito.Mockito . METHOD_4 ( ) . when ( command ) . METHOD_5 ( ) (  METHOD_6 ( ) )  METHOD_6 ( ) (  METHOD_7 ( ) )  METHOD_7 ( ) (  METHOD_8 ( ) )  METHOD_8 ( ) (  METHOD_9 ( ) )  METHOD_9 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_1 . METHOD_2 ( VAR_2 ) )  VAR_1 . METHOD_2 ( VAR_2 ) (  VAR_1 . METHOD_3 ( STRING_1 ) )  VAR_1 . METHOD_3 ( STRING_1 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_3 . map ( VAR_1 , null ) ) INIT = TYPE_3 . map ( VAR_1 , null ) ) VAR VAR (  assertEquals ( VAR_1 . METHOD_4 ( ) . name ( ) . METHOD_5 ( ) , VAR_3 . METHOD_6 ( ) ) )  assertEquals ( VAR_1 . METHOD_4 ( ) . name ( ) . METHOD_5 ( ) , VAR_3 . METHOD_6 ( ) ) (  assertEquals ( VAR_1 . METHOD_7 ( ) , VAR_3 . METHOD_7 ( ) ) )  assertEquals ( VAR_1 . METHOD_7 ( ) , VAR_3 . METHOD_7 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 = TYPE_1 . METHOD_2 ( this . METHOD_3 ( ) , TYPE_2 . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( VAR_2 ) , METHOD_6 ( ) , TYPE_3 . METHOD_7 ( METHOD_6 ( ) , METHOD_8 ( VAR_3 ) ) ) )  VAR_1 = TYPE_1 . METHOD_2 ( this . METHOD_3 ( ) , TYPE_2 . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( VAR_2 ) , METHOD_6 ( ) , TYPE_3 . METHOD_7 ( METHOD_6 ( ) , METHOD_8 ( VAR_3 ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_1 ) ( model ) ) ) INIT = ( ( TYPE_1 ) ( model ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.ArrayList<TYPE_2> ) TYPE java.util.ArrayList<TYPE_2> ( NAME list ) NAME list ( INIT = new java.util.ArrayList < TYPE_2 > ( TYPE_3 . METHOD_2 ( new TYPE_2 [ ] { ( ( TYPE_2 ) ( result ) ) } ) ) ) INIT = new java.util.ArrayList < TYPE_2 > ( TYPE_3 . METHOD_2 ( new TYPE_2 [ ] { ( ( TYPE_2 ) ( result ) ) } ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_4 ) ( VAR_1 . getWindow ( ) ) ) ) INIT = ( ( TYPE_4 ) ( VAR_1 . getWindow ( ) ) ) ) VAR VAR (  VAR_2 . METHOD_3 ( ) . setItems ( list ) )  VAR_2 . METHOD_3 ( ) . setItems ( list ) (  VAR_2 . METHOD_3 ( ) . setSelectedItem ( TYPE_5 . METHOD_4 ( list ) ) )  VAR_2 . METHOD_3 ( ) . setSelectedItem ( TYPE_5 . METHOD_4 ( list ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = org.mockito.Mockito . METHOD_2 ( VAR_2 class ) ) INIT = org.mockito.Mockito . METHOD_2 ( VAR_2 class ) ) VAR VAR (  cluster = new TYPE_2 ( ) )  cluster = new TYPE_2 ( ) (  cluster . METHOD_3 ( STRING_1 ) )  cluster . METHOD_3 ( STRING_1 ) (  cluster . METHOD_4 ( ) . add ( VAR_3 ) )  cluster . METHOD_4 ( ) . add ( VAR_3 ) (  org.mockito.Mockito.when ( VAR_1 . get ( TYPE_3 . any ( VAR_4 . Guid class ) ) ) . thenReturn ( cluster ) )  org.mockito.Mockito.when ( VAR_1 . get ( TYPE_3 . any ( VAR_4 . Guid class ) ) ) . thenReturn ( cluster ) (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  METHOD_3 ( ) )  METHOD_3 ( ) (  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_2 ) . METHOD_4 ( TYPE_1 . any ( VAR_3 . Guid class ) , TYPE_1 . any ( VAR_3 . Guid class ) ) )  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_2 ) . METHOD_4 ( TYPE_1 . any ( VAR_3 . Guid class ) , TYPE_1 . any ( VAR_3 . Guid class ) ) (  cmd . getVm ( ) . METHOD_5 ( VAR_4 ) )  cmd . getVm ( ) . METHOD_5 ( VAR_4 ) ( VAR VAR ( TYPE java.util.List<TYPE_2.DiskImage> ) TYPE java.util.List<TYPE_2.DiskImage> ( NAME VAR_5 ) NAME VAR_5 ( INIT = METHOD_6 ( 2 ) ) INIT = METHOD_6 ( 2 ) ) VAR VAR (  org.mockito.Mockito.doReturn ( VAR_5 ) . when ( cmd ) . METHOD_7 ( ) )  org.mockito.Mockito.doReturn ( VAR_5 ) . when ( cmd ) . METHOD_7 ( ) (  TYPE_3 . METHOD_8 ( cmd ) )  TYPE_3 . METHOD_8 ( cmd ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND source != null ) COND source != null ( THEN THEN ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDSGroup> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDSGroup> ( NAME list ) NAME list ( INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( source ) ) ) INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( source ) ) ) VAR VAR (  TYPE_1 . METHOD_2 ( list , new TYPE_2 ( ) ) )  TYPE_1 . METHOD_2 ( list , new TYPE_2 ( ) ) (  return list ; )  return list ; ) THEN THEN ) IF IF (  return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ( ) ; )  return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ( ) ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > list = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( source ) ) ; TYPE_1 . METHOD_2 ( list , new TYPE_2 ( ) ) ; return list ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ( ) ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > list = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( source ) ) ; TYPE_1 . METHOD_2 ( list , new TYPE_2 ( ) ) ; return list ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ( ) ; } } (  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new TYPE_3 ( VAR_1 ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new TYPE_3 ( VAR_1 ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( new TYPE_1 ( ) ) )  METHOD_2 ( new TYPE_1 ( ) ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = org.mockito.Mockito . METHOD_3 ( VAR_2 class ) ) INIT = org.mockito.Mockito . METHOD_3 ( VAR_2 class ) ) VAR VAR (  org.mockito.Mockito.when ( VAR_1 . METHOD_4 ( METHOD_5 ( ) . getStoragePoolId ( ) ) ) . thenReturn ( VAR_3 ) )  org.mockito.Mockito.when ( VAR_1 . METHOD_4 ( METHOD_5 ( ) . getStoragePoolId ( ) ) ) . thenReturn ( VAR_3 ) (  org.mockito.Mockito.when ( METHOD_6 ( ) . METHOD_7 ( ) . METHOD_8 ( ) ) . thenReturn ( VAR_1 ) )  org.mockito.Mockito.when ( METHOD_6 ( ) . METHOD_7 ( ) . METHOD_8 ( ) ) . thenReturn ( VAR_1 ) (  TYPE_3 . assertEquals ( STRING_1 , VAR_3 , METHOD_6 ( ) . METHOD_9 ( ) ) )  TYPE_3 . assertEquals ( STRING_1 , VAR_3 , METHOD_6 ( ) . METHOD_9 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( VAR_1 ) )  METHOD_2 ( VAR_1 ) (  METHOD_3 ( ) )  METHOD_3 ( ) (  org.mockito.Mockito.doReturn ( null ) . when ( command ) . METHOD_4 ( ) )  org.mockito.Mockito.doReturn ( null ) . when ( command ) . METHOD_4 ( ) (  command . METHOD_5 ( ) )  command . METHOD_5 ( ) (  TYPE_1 . METHOD_6 ( command . METHOD_7 ( ) ) )  TYPE_1 . METHOD_6 ( command . METHOD_7 ( ) ) (  TYPE_1 . METHOD_8 ( command . getReturnValue ( ) . METHOD_9 ( ) . METHOD_10 ( TYPE_2 . toString ( ) ) ) )  TYPE_1 . METHOD_8 ( command . getReturnValue ( ) . METHOD_9 ( ) . METHOD_10 ( TYPE_2 . toString ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.Disk ) TYPE org.ovirt.engine.core.common.businessentities.Disk ( NAME disk ) NAME disk ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VM> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VM> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( disk . getId ( ) ) ) INIT = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( disk . getId ( ) ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( IF IF ( COND vm . getId ( ) . equals ( TYPE_1 . METHOD_4 ( ) ) ) COND vm . getId ( ) . equals ( TYPE_1 . METHOD_4 ( ) ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.List<org.ovirt.engine.core.common.businessentities.VDS> ) RETURN java.util.List<org.ovirt.engine.core.common.businessentities.VDS> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDS> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDS> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<org.ovirt.engine.core.compat.Guid,java.util.List<org.ovirt.engine.core.common.businessentities.VDS>> ) TYPE java.util.Map<org.ovirt.engine.core.compat.Guid,java.util.List<org.ovirt.engine.core.common.businessentities.VDS>> ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( VAR_1 ) ) INIT = METHOD_2 ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDS> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDS> ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_1 < > ( ) ) INIT = new TYPE_1 < > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_2<org.ovirt.engine.core.compat.Guid,java.util.List<org.ovirt.engine.core.common.businessentities.VDS>> ) TYPE TYPE_2<org.ovirt.engine.core.compat.Guid,java.util.List<org.ovirt.engine.core.common.businessentities.VDS>> ( NAME VAR_4 ) NAME VAR_4 ( IN VAR_2 . METHOD_3 ( ) ) IN VAR_2 . METHOD_3 ( ) ( BLOCK BLOCK (  VAR_3 . add ( METHOD_4 ( VAR_4 . getValue ( ) ) ) )  VAR_3 . add ( METHOD_4 ( VAR_4 . getValue ( ) ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME sender ) NAME sender ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME args ) NAME args ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME model ) NAME model ( INIT = ( ( TYPE_3 ) ( sender ) ) ) INIT = ( ( TYPE_3 ) ( sender ) ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_4 ) ( args ) ) . VAR_3 ) INIT = ( ( TYPE_4 ) ( args ) ) . VAR_3 ) VAR VAR ( IF IF ( COND STRING_1 . equals ( VAR_2 ) ) COND STRING_1 . equals ( VAR_2 ) ( THEN THEN (  VAR_4 . METHOD_2 ( VAR_5 , model . METHOD_3 ( ) ) )  VAR_4 . METHOD_2 ( VAR_5 , model . METHOD_3 ( ) ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND STRING_2 . equals ( VAR_2 ) ) COND STRING_2 . equals ( VAR_2 ) ( THEN THEN (  VAR_6 . METHOD_4 ( model . METHOD_5 ( ) ) )  VAR_6 . METHOD_4 ( model . METHOD_5 ( ) ) ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source != null ? ( ( java.lang.Integer ) ( source ) ) . METHOD_2 ( ) : 0 ; )  return source != null ? ( ( java.lang.Integer ) ( source ) ) . METHOD_2 ( ) : 0 ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . METHOD_2 ( ) : 0 ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . METHOD_2 ( ) : 0 ; } } (  VAR_1 . METHOD_3 ( aQuery . getModel ( ) , INT_1 ) )  VAR_1 . METHOD_3 ( aQuery . getModel ( ) , INT_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2.VdcActionType ) TYPE TYPE_2.VdcActionType ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME context ) NAME context ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2.VdcActionParametersBase ) TYPE TYPE_2.VdcActionParametersBase ( NAME parameters ) NAME parameters ( INIT = VAR_3 . METHOD_2 ( ) ) INIT = VAR_3 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_5<?> ) TYPE TYPE_5<?> ( NAME command ) NAME command ( INIT = TYPE_6 . getInstance ( ) . METHOD_3 ( VAR_2 , parameters ) ) INIT = TYPE_6 . getInstance ( ) . METHOD_3 ( VAR_2 , parameters ) ) VAR VAR (  command . METHOD_4 ( new TYPE_7 ( context ) ) )  command . METHOD_4 ( new TYPE_7 ( context ) ) (  return command . METHOD_1 ( ) ; )  return command . METHOD_1 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( 1 , METHOD_3 ( ) ) )  METHOD_2 ( 1 , METHOD_3 ( ) ) (  METHOD_2 ( VAR_1 , VAR_2 class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 [ 0 ] . toString ( ) } , METHOD_4 ( ) ) )  METHOD_2 ( VAR_1 , VAR_2 class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 [ 0 ] . toString ( ) } , METHOD_4 ( ) ) (  METHOD_5 ( METHOD_6 ( ) ) )  METHOD_5 ( METHOD_6 ( ) ) (  VAR_4 . METHOD_7 ( ) )  VAR_4 . METHOD_7 ( ) (  METHOD_8 ( resource . get ( ) ) )  METHOD_8 ( resource . get ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME map ) NAME map ( IN METHOD_2 ( ) ) IN METHOD_2 ( ) ( BLOCK BLOCK (  VAR_1 . append ( STRING_1 ) )  VAR_1 . append ( STRING_1 ) (  VAR_1 . append ( map . METHOD_3 ( ) ) )  VAR_1 . append ( map . METHOD_3 ( ) ) (  VAR_1 . append ( STRING_2 ) )  VAR_1 . append ( STRING_2 ) (  VAR_1 . append ( map . METHOD_4 ( ) . name ( ) ) )  VAR_1 . append ( map . METHOD_4 ( ) . name ( ) ) (  VAR_1 . append ( STRING_3 ) )  VAR_1 . append ( STRING_3 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_1 . toString ( ) ; )  return VAR_1 . toString ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( ! ( getModel ( ) . METHOD_2 ( ) ) ) && ( ( getModel ( ) . getEntity ( ) ) != null ) ) COND ( ! ( getModel ( ) . METHOD_2 ( ) ) ) && ( ( getModel ( ) . getEntity ( ) ) != null ) ( THEN THEN ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_3 ( VAR_2 ) ) INIT = TYPE_2 . METHOD_3 ( VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( VAR_1 != null ) ? VAR_1 . METHOD_4 ( ) . toString ( 2 ) : STRING_1 ) INIT = ( VAR_1 != null ) ? VAR_1 . METHOD_4 ( ) . toString ( 2 ) : STRING_1 ) VAR VAR (  return VAR_4 . METHOD_5 ( VAR_3 ) ; )  return VAR_4 . METHOD_5 ( VAR_3 ) ; ) THEN THEN ( ELSE ELSE (  return this . METHOD_6 ( ) ; )  return this . METHOD_6 ( ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( java.lang.String ) ( result ) ) ) INIT = ( ( java.lang.String ) ( result ) ) ) VAR VAR ( IF IF ( COND ( VAR_1 != null ) && ( ( VAR_1 . length ( ) ) > 0 ) ) COND ( VAR_1 != null ) && ( ( VAR_1 . length ( ) ) > 0 ) ( THEN THEN (  METHOD_1 ( ) . setEntity ( result ) )  METHOD_1 ( ) . setEntity ( result ) (  METHOD_2 ( true ) )  METHOD_2 ( true ) ) THEN THEN ( ELSE ELSE (  METHOD_1 ( ) . setEntity ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_3 ( ) ) )  METHOD_1 ( ) . setEntity ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_3 ( ) ) (  METHOD_2 ( false ) )  METHOD_2 ( false ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , STRING_1 , STRING_2 , VAR_2 , null , null , TYPE_3 . METHOD_3 ( METHOD_4 ( STRING_3 , null ) ) ) , null ) ) )  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , STRING_1 , STRING_2 , VAR_2 , null , null , TYPE_3 . METHOD_3 ( METHOD_4 ( STRING_3 , null ) ) ) , null ) ) (  METHOD_5 ( VAR_3 ) )  METHOD_5 ( VAR_3 ) (  TYPE_4 . METHOD_6 ( cmd . validate ( ) ) )  TYPE_4 . METHOD_6 ( cmd . validate ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ( INIT = ( ( TYPE_1 ) ( target ) ) ) INIT = ( ( TYPE_1 ) ( target ) ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VmTemplate ) TYPE org.ovirt.engine.core.common.businessentities.VmTemplate ( NAME template ) NAME template ( INIT = ( ( org.ovirt.engine.core.common.businessentities.VmTemplate ) ( returnValue ) ) ) INIT = ( ( org.ovirt.engine.core.common.businessentities.VmTemplate ) ( returnValue ) ) ) VAR VAR (  model . METHOD_2 ( ) . setItems ( new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmTemplate > ( TYPE_2 . METHOD_3 ( new org.ovirt.engine.core.common.businessentities.VmTemplate [ ] { template } ) ) ) )  model . METHOD_2 ( ) . setItems ( new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmTemplate > ( TYPE_2 . METHOD_3 ( new org.ovirt.engine.core.common.businessentities.VmTemplate [ ] { template } ) ) ) (  model . METHOD_2 ( ) . setSelectedItem ( template ) )  model . METHOD_2 ( ) . setSelectedItem ( template ) (  model . METHOD_2 ( ) . setIsChangable ( false ) )  model . METHOD_2 ( ) . setIsChangable ( false ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<java.lang.String> ) TYPE java.util.ArrayList<java.lang.String> ( NAME list ) NAME list ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR ( IF IF ( COND source != null ) COND source != null ( THEN THEN ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( java.lang.String ) ( source ) ) . METHOD_2 ( STRING_1 , ( - 1 ) ) ) INIT = ( ( java.lang.String ) ( source ) ) . METHOD_2 ( STRING_1 , ( - 1 ) ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME item ) NAME item ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  list . add ( item ) )  list . add ( item ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF (  return list ; )  return list ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( 2 , false ) )  METHOD_2 ( 2 , false ) (  METHOD_3 ( METHOD_4 ( VAR_1 , VAR_2 class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 [ 0 ] } ) ) )  METHOD_3 ( METHOD_4 ( VAR_1 , VAR_2 class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 [ 0 ] } ) ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME response ) NAME response ( INIT = resource . METHOD_5 ( new TYPE_2 ( ) ) ) INIT = resource . METHOD_5 ( new TYPE_2 ( ) ) ) VAR VAR (  METHOD_6 ( response ) )  METHOD_6 ( response ) (  METHOD_7 ( ( ( TYPE_2 ) ( response . getEntity ( ) ) ) . getVm ( ) , 0 ) )  METHOD_7 ( ( ( TYPE_2 ) ( response . getEntity ( ) ) ) . getVm ( ) , 0 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( ( getEntity ( ) ) == null ) || ( ( getEntity ( ) . METHOD_2 ( ) ) == true ) ) COND ( ( getEntity ( ) ) == null ) || ( ( getEntity ( ) . METHOD_2 ( ) ) == true ) ( THEN THEN (  METHOD_3 ( ) . METHOD_4 ( false ) )  METHOD_3 ( ) . METHOD_4 ( false ) ) THEN THEN ( ELSE ELSE (  METHOD_3 ( ) . METHOD_4 ( true ) )  METHOD_3 ( ) . METHOD_4 ( true ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN org.ovirt.engine.core.common.businessentities.VDS ) RETURN org.ovirt.engine.core.common.businessentities.VDS ( NAME get ) NAME get ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return METHOD_1 ( ) . METHOD_2 ( STRING_1 , VAR_3 . instance , METHOD_3 ( ) . addValue ( STRING_2 , id ) . addValue ( STRING_3 , VAR_1 ) . addValue ( STRING_4 , VAR_2 ) ) ; )  return METHOD_1 ( ) . METHOD_2 ( STRING_1 , VAR_3 . instance , METHOD_3 ( ) . addValue ( STRING_2 , id ) . addValue ( STRING_3 , VAR_1 ) . addValue ( STRING_4 , VAR_2 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME params ) NAME params ( INIT = new TYPE_1 ( vmId , VAR_1 ) ) INIT = new TYPE_1 ( vmId , VAR_1 ) ) VAR VAR (  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_2 ( params ) ) )  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_2 ( params ) ) (  org.mockito.Mockito . METHOD_3 ( ) . when ( cmd ) . METHOD_4 ( ) )  org.mockito.Mockito . METHOD_3 ( ) . when ( cmd ) . METHOD_4 ( ) (  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( cmd ) . METHOD_5 ( ) )  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( cmd ) . METHOD_5 ( ) (  TYPE_3 . METHOD_6 ( cmd , VAR_3 ) )  TYPE_3 . METHOD_6 ( cmd , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_1 ) ( target ) ) ) INIT = ( ( TYPE_1 ) ( target ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.ArrayList<TYPE_2.Disk> ) TYPE java.util.ArrayList<TYPE_2.Disk> ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( java.util.ArrayList < TYPE_2 . Disk > ) ( returnValue ) ) ) INIT = ( ( java.util.ArrayList < TYPE_2 . Disk > ) ( returnValue ) ) ) VAR VAR (  METHOD_1 ( VAR_2 ) )  METHOD_1 ( VAR_2 ) (  TYPE_3 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) )  TYPE_3 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) (  VAR_1 . METHOD_3 ( ) . add ( METHOD_4 ( ) ) )  VAR_1 . METHOD_3 ( ) . add ( METHOD_4 ( ) ) (  VAR_1 . METHOD_3 ( ) . add ( METHOD_5 ( ) ) )  VAR_1 . METHOD_3 ( ) . add ( METHOD_5 ( ) ) (  VAR_1 . METHOD_6 ( ) )  VAR_1 . METHOD_6 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( STRING_1 ) )  org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( STRING_1 ) (  org.mockito.Mockito.when ( VAR_2 . METHOD_3 ( ) ) . thenReturn ( this . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( STRING_2 ) . METHOD_7 ( ) . METHOD_8 ( ) ) )  org.mockito.Mockito.when ( VAR_2 . METHOD_3 ( ) ) . thenReturn ( this . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( STRING_2 ) . METHOD_7 ( ) . METHOD_8 ( ) ) (  VAR_3 . METHOD_9 ( VAR_1 , VAR_4 ) )  VAR_3 . METHOD_9 ( VAR_1 , VAR_4 ) (  org.mockito.Mockito . METHOD_10 ( VAR_4 ) . METHOD_11 ( TYPE_4 . METHOD_12 ( STRING_3 ) , TYPE_4 . METHOD_13 ( ) ) )  org.mockito.Mockito . METHOD_10 ( VAR_4 ) . METHOD_11 ( TYPE_4 . METHOD_12 ( STRING_3 ) , TYPE_4 . METHOD_13 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StoragePool ) TYPE org.ovirt.engine.core.common.businessentities.StoragePool ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( ) . getEntity ( ) ) INIT = METHOD_2 ( ) . getEntity ( ) ) VAR VAR ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( ( java.lang.Boolean ) ( TYPE_1 . METHOD_3 ( VAR_4 , VAR_1 . METHOD_4 ( ) . getValue ( ) ) ) ) ) INIT = ( ( java.lang.Boolean ) ( TYPE_1 . METHOD_3 ( VAR_4 , VAR_1 . METHOD_4 ( ) . getValue ( ) ) ) ) ) VAR VAR (  METHOD_5 ( ) . setEntity ( VAR_3 ) )  METHOD_5 ( ) . setEntity ( VAR_3 ) (  METHOD_6 ( ( ! VAR_3 ? TYPE_2 . METHOD_7 ( ) : STRING_1 ) ) )  METHOD_6 ( ( ! VAR_3 ? TYPE_2 . METHOD_7 ( ) : STRING_1 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<java.lang.Boolean,org.ovirt.engine.core.common.businessentities.VmTemplate> ) TYPE java.util.Map<java.lang.Boolean,org.ovirt.engine.core.common.businessentities.VmTemplate> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( TYPE_1 . getParameters ( ) . METHOD_5 ( ) ) ) INIT = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( TYPE_1 . getParameters ( ) . METHOD_5 ( ) ) ) VAR VAR ( IF IF ( COND ! ( VAR_1 . METHOD_6 ( ) . isEmpty ( ) ) ) COND ! ( VAR_1 . METHOD_6 ( ) . isEmpty ( ) ) ( THEN THEN (  METHOD_7 ( VAR_1 . METHOD_6 ( ) . METHOD_8 ( ) . METHOD_9 ( ) ) )  METHOD_7 ( VAR_1 . METHOD_6 ( ) . METHOD_8 ( ) . METHOD_9 ( ) ) ) THEN THEN ) IF IF (  TYPE_1 . METHOD_10 ( ) . METHOD_11 ( VAR_1 ) )  TYPE_1 . METHOD_10 ( ) . METHOD_11 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  this . VAR_3 = new TYPE_4 ( VAR_4 ) . METHOD_2 ( ) )  this . VAR_3 = new TYPE_4 ( VAR_4 ) . METHOD_2 ( ) (  this . VAR_5 = new TYPE_5 ( VAR_3 ) )  this . VAR_5 = new TYPE_5 ( VAR_3 ) (  this . VAR_6 = new TYPE_6 ( VAR_3 , this . VAR_5 ) )  this . VAR_6 = new TYPE_6 ( VAR_3 , this . VAR_5 ) (  TYPE_7 . METHOD_3 ( VAR_3 . METHOD_4 ( ) , VAR_7 < TYPE_1 > get ( VAR_8 ) . < java.lang.String > get ( VAR_9 ) ) )  TYPE_7 . METHOD_3 ( VAR_3 . METHOD_4 ( ) , VAR_7 < TYPE_1 > get ( VAR_8 ) . < java.lang.String > get ( VAR_9 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) INIT = ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) VAR VAR (  getModel ( ) . METHOD_1 ( ) . setEntity ( ( ! ( VAR_1 . isEmpty ( ) ) ) ) )  getModel ( ) . METHOD_1 ( ) . setEntity ( ( ! ( VAR_1 . isEmpty ( ) ) ) ) (  getModel ( ) . METHOD_2 ( ( VAR_1 . isEmpty ( ) ? TYPE_1 . METHOD_3 ( ) : VAR_1 . get ( 0 ) ) ) )  getModel ( ) . METHOD_2 ( ( VAR_1 . isEmpty ( ) ? TYPE_1 . METHOD_3 ( ) : VAR_1 . get ( 0 ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.Object> ) TYPE java.util.Map<java.lang.String,java.lang.Object> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = java.lang.String.valueOf ( VAR_1 . METHOD_2 ( ) ) ) INIT = java.lang.String.valueOf ( VAR_1 . METHOD_2 ( ) ) ) VAR VAR ( IF IF ( COND ( ! ( TYPE_2 . isEmpty ( VAR_3 ) ) ) && ( ! ( VAR_3 . equals ( STRING_1 ) ) ) ) COND ( ! ( TYPE_2 . isEmpty ( VAR_3 ) ) ) && ( ! ( VAR_3 . equals ( STRING_1 ) ) ) ( THEN THEN (  VAR_2 . put ( VAR_4 , VAR_3 ) )  VAR_2 . put ( VAR_4 , VAR_3 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) . METHOD_3 ( ) )  METHOD_2 ( ) . METHOD_3 ( ) (  METHOD_4 ( ) . METHOD_3 ( ) )  METHOD_4 ( ) . METHOD_3 ( ) ( IF IF ( COND ( getEntity ( ) ) != null ) COND ( getEntity ( ) ) != null ( THEN THEN (  METHOD_5 ( null ) )  METHOD_5 ( null ) ( IF IF ( COND ! ( getEntity ( ) . METHOD_6 ( ) ) ) COND ! ( getEntity ( ) . METHOD_6 ( ) ) ( THEN THEN (  METHOD_7 ( ) )  METHOD_7 ( ) ) THEN THEN ( ELSE ELSE (  METHOD_8 ( ) )  METHOD_8 ( ) ) ELSE ELSE ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VM> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VM> ( NAME result ) NAME result ( INIT = dao . METHOD_2 ( new org.ovirt.engine.core.compat.Guid ( STRING_1 ) ) ) INIT = dao . METHOD_2 ( new org.ovirt.engine.core.compat.Guid ( STRING_1 ) ) ) VAR VAR (  TYPE_1 . assertEquals ( result . size ( ) , 1 ) )  TYPE_1 . assertEquals ( result . size ( ) , 1 ) (  TYPE_1 . assertEquals ( result . METHOD_3 ( ) . METHOD_4 ( ) . getId ( ) , new org.ovirt.engine.core.compat.Guid ( STRING_2 ) ) )  TYPE_1 . assertEquals ( result . METHOD_3 ( ) . METHOD_4 ( ) . getId ( ) , new org.ovirt.engine.core.compat.Guid ( STRING_2 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . instance ( ) . METHOD_2 ( INT_1 ) ) INIT = TYPE_1 . instance ( ) . METHOD_2 ( INT_1 ) ) VAR VAR (  org.mockito.Mockito.when ( METHOD_3 ( ) . getName ( ) ) . thenReturn ( VAR_1 ) )  org.mockito.Mockito.when ( METHOD_3 ( ) . getName ( ) ) . thenReturn ( VAR_1 ) ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME result ) NAME result ( INIT = TYPE_1 . instance ( ) . METHOD_4 ( ) ) INIT = TYPE_1 . instance ( ) . METHOD_4 ( ) ) VAR VAR (  org.mockito.Mockito.doReturn ( result ) . when ( METHOD_5 ( ) ) . METHOD_6 ( ) )  org.mockito.Mockito.doReturn ( result ) . when ( METHOD_5 ( ) ) . METHOD_6 ( ) (  METHOD_5 ( ) . METHOD_7 ( ) )  METHOD_5 ( ) . METHOD_7 ( ) (  TYPE_2 . assertEquals ( STRING_1 , result , METHOD_5 ( ) . METHOD_8 ( ) . getReturnValue ( ) ) )  TYPE_2 . assertEquals ( STRING_1 , result , METHOD_5 ( ) . METHOD_8 ( ) . getReturnValue ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( null ) )  METHOD_2 ( null ) ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_5 ) NAME METHOD_5 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_6 ( ) )  METHOD_6 ( ) (  VAR_2 . METHOD_7 ( VAR_3 ) )  VAR_2 . METHOD_7 ( VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_3 ( VAR_1 , METHOD_4 ( ) , new TYPE_1 ( ) { public void METHOD_5 ( TYPE_2 result ) { METHOD_6 ( ) ; VAR_2 . METHOD_7 ( VAR_3 ) ; } } , this ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_3 ( VAR_1 , METHOD_4 ( ) , new TYPE_1 ( ) { public void METHOD_5 ( TYPE_2 result ) { METHOD_6 ( ) ; VAR_2 . METHOD_7 ( VAR_3 ) ; } } , this ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( getModel ( ) . METHOD_2 ( ) ) != null ) && ( getModel ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) ) INIT = ( ( getModel ( ) . METHOD_2 ( ) ) != null ) && ( getModel ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) ) VAR VAR (  METHOD_5 ( ) . METHOD_6 ( ) . METHOD_7 ( VAR_1 ) )  METHOD_5 ( ) . METHOD_6 ( ) . METHOD_7 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.AuditLogSeverity ) TYPE TYPE_1.AuditLogSeverity ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SWITCH SWITCH ( NAME VAR_1 ) NAME VAR_1 ( CASE NORMAL ( BLOCK BLOCK (  VAR_3 . METHOD_2 ( VAR_2 ) )  VAR_3 . METHOD_2 ( VAR_2 ) (  break ; )  break ; ) BLOCK BLOCK ) CASE NORMAL ( CASE ERROR ( BLOCK BLOCK (  VAR_3 . error ( VAR_2 ) )  VAR_3 . error ( VAR_2 ) (  break ; )  break ; ) BLOCK BLOCK ) CASE ERROR ( CASE VAR_4 ( BLOCK BLOCK (  VAR_3 . METHOD_3 ( VAR_2 ) )  VAR_3 . METHOD_3 ( VAR_2 ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_4 ( CASE VAR_5 ( BLOCK BLOCK (  VAR_3 . METHOD_3 ( VAR_2 ) )  VAR_3 . METHOD_3 ( VAR_2 ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_5 ( DEFAULT DEFAULT ( BLOCK BLOCK (  VAR_3 . METHOD_3 ( VAR_2 ) )  VAR_3 . METHOD_3 ( VAR_2 ) (  break ; )  break ; ) BLOCK BLOCK ) DEFAULT DEFAULT ) SWITCH SWITCH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<TYPE_2> ) RETURN TYPE_1<TYPE_2> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Integer ) TYPE java.lang.Integer ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Version ) TYPE org.ovirt.engine.core.compat.Version ( NAME version ) NAME version ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3<java.lang.String> ) TYPE TYPE_3<java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( ) . get ( new TYPE_4 < java.lang.Integer , org.ovirt.engine.core.compat . Version > ( VAR_1 , version ) ) ) INIT = METHOD_2 ( ) . get ( new TYPE_4 < java.lang.Integer , org.ovirt.engine.core.compat . Version > ( VAR_1 , version ) ) ) VAR VAR ( IF IF ( COND VAR_2 == null ) COND VAR_2 == null ( THEN THEN (  return TYPE_5 . METHOD_3 ( ) ; )  return TYPE_5 . METHOD_3 ( ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_6 < TYPE_2 > ( ) ) INIT = new TYPE_6 < TYPE_2 > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK (  VAR_3 . add ( TYPE_2 . valueOf ( VAR_4 ) ) )  VAR_3 . add ( TYPE_2 . valueOf ( VAR_4 ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList ( ( ( TYPE_2 < TYPE_1 > ) ( ( ( TYPE_3 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ) ) INIT = new java.util.ArrayList ( ( ( TYPE_2 < TYPE_1 > ) ( ( ( TYPE_3 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ) ) VAR VAR (  VAR_1 . add ( VAR_2 ) )  VAR_1 . add ( VAR_2 ) (  METHOD_1 ( ) . setItems ( VAR_1 ) )  METHOD_1 ( ) . setItems ( VAR_1 ) (  METHOD_2 ( ) )  METHOD_2 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<java.lang.String> ) RETURN java.util.List<java.lang.String> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME source ) NAME source ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND source != null ) COND source != null ( THEN THEN ( VAR VAR ( TYPE java.util.ArrayList<java.lang.String> ) TYPE java.util.ArrayList<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( IN source ) IN source ( BLOCK BLOCK ( IF IF ( COND METHOD_2 ( VAR_2 ) ) COND METHOD_2 ( VAR_2 ) ( THEN THEN (  VAR_1 . add ( METHOD_3 ( VAR_1 , VAR_2 ) ) )  VAR_1 . add ( METHOD_3 ( VAR_1 , VAR_2 ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  TYPE_2 . METHOD_4 ( VAR_1 , new TYPE_3 ( ) ) )  TYPE_2 . METHOD_4 ( VAR_1 , new TYPE_3 ( ) ) (  return VAR_1 ; )  return VAR_1 ; ) THEN THEN ) IF IF (  return new java.util.ArrayList < > ( ) ; )  return new java.util.ArrayList < > ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_2 == null ) COND VAR_2 == null ( THEN THEN (  return TYPE_2 . METHOD_2 ( VAR_1 , VAR_4 ) ; )  return TYPE_2 . METHOD_2 ( VAR_1 , VAR_4 ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_5 ) NAME VAR_5 ( INIT = TYPE_3 . METHOD_3 ( VAR_1 , new TYPE_4 ( VAR_2 , VAR_3 ) ) ) INIT = TYPE_3 . METHOD_3 ( VAR_1 , new TYPE_4 ( VAR_2 , VAR_3 ) ) ) VAR VAR (  return VAR_5 != null ? VAR_5 : TYPE_2 . METHOD_2 ( VAR_1 , VAR_4 ) ; )  return VAR_5 != null ? VAR_5 : TYPE_2 . METHOD_2 ( VAR_1 , VAR_4 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<TYPE_1.DiskImage,org.ovirt.engine.core.compat.Guid> ) TYPE java.util.Map<TYPE_1.DiskImage,org.ovirt.engine.core.compat.Guid> ( NAME map ) NAME map ( INIT = new java.util.HashMap < > ( ) ) INIT = new java.util.HashMap < > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1.DiskImage ) TYPE TYPE_1.DiskImage ( NAME diskImage ) NAME diskImage ( IN TYPE_2 . getVm ( ) . METHOD_2 ( ) ) IN TYPE_2 . getVm ( ) . METHOD_2 ( ) ( BLOCK BLOCK (  map . put ( diskImage , TYPE_2 . METHOD_3 ( ) ) )  map . put ( diskImage , TYPE_2 . METHOD_3 ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return validate ( TYPE_3 . METHOD_1 ( map , TYPE_2 . METHOD_4 ( ) . METHOD_5 ( ) , TYPE_2 . METHOD_6 ( ) ) ) ; )  return validate ( TYPE_3 . METHOD_1 ( map , TYPE_2 . METHOD_4 ( ) . METHOD_5 ( ) , TYPE_2 . METHOD_6 ( ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( TYPE_2 . METHOD_2 ( ) , getStoragePoolId ( ) , TYPE_2 . getVdsGroup ( ) . METHOD_3 ( ) , VAR_2 ) ) INIT = new TYPE_1 ( TYPE_2 . METHOD_2 ( ) , getStoragePoolId ( ) , TYPE_2 . getVdsGroup ( ) . METHOD_3 ( ) , VAR_2 ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME iface ) NAME iface ( IN VAR_3 . METHOD_4 ( ) ) IN VAR_3 . METHOD_4 ( ) ( BLOCK BLOCK (  VAR_1 . METHOD_5 ( iface , TYPE_2 . METHOD_6 ( ) . getId ( ) ) )  VAR_1 . METHOD_5 ( iface , TYPE_2 . METHOD_6 ( ) . getId ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  VAR_1 . METHOD_7 ( TYPE_2 . METHOD_8 ( ) ) )  VAR_1 . METHOD_7 ( TYPE_2 . METHOD_8 ( ) ) (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ! ( TYPE_1 . METHOD_2 ( TYPE_2 . getVm ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) ) ) COND ! ( TYPE_1 . METHOD_2 ( TYPE_2 . getVm ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ( IF IF ( COND ! ( VAR_1 . METHOD_5 ( TYPE_2 . getVm ( ) . METHOD_6 ( ) . METHOD_7 ( ) , TYPE_2 . getVdsGroup ( ) . METHOD_8 ( ) ) ) ) COND ! ( VAR_1 . METHOD_5 ( TYPE_2 . getVm ( ) . METHOD_6 ( ) . METHOD_7 ( ) , TYPE_2 . getVdsGroup ( ) . METHOD_8 ( ) ) ) ( THEN THEN (  METHOD_9 ( STRING_1 , TYPE_2 . getVdsGroup ( ) . METHOD_10 ( ) ) )  METHOD_9 ( STRING_1 , TYPE_2 . getVdsGroup ( ) . METHOD_10 ( ) ) (  return METHOD_11 ( VAR_2 ) ; )  return METHOD_11 ( VAR_2 ) ; ) THEN THEN ) IF IF (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME get ) NAME get ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_1 ( ) . addValue ( STRING_1 , id ) . addValue ( STRING_2 , VAR_1 ) . addValue ( STRING_3 , VAR_2 ) ) INIT = METHOD_1 ( ) . addValue ( STRING_1 , id ) . addValue ( STRING_2 , VAR_1 ) . addValue ( STRING_3 , VAR_2 ) ) VAR VAR (  return METHOD_2 ( ) . METHOD_3 ( STRING_4 , VAR_4 . instance , VAR_3 ) ; )  return METHOD_2 ( ) . METHOD_3 ( STRING_4 , VAR_4 . instance , VAR_3 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( METHOD_3 ( ) ) )  METHOD_2 ( METHOD_3 ( ) ) (  METHOD_4 ( 1 , 0 , false ) )  METHOD_4 ( 1 , 0 , false ) (  VAR_1 . METHOD_5 ( ) )  VAR_1 . METHOD_5 ( ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ( INIT = TYPE_2 . getModel ( 1 ) ) INIT = TYPE_2 . getModel ( 1 ) ) VAR VAR (  model . setId ( VAR_2 [ 1 ] . toString ( ) ) )  model . setId ( VAR_2 [ 1 ] . toString ( ) ) ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME resource ) NAME resource ( INIT = ( ( TYPE_3 ) ( this . resource ) ) ) INIT = ( ( TYPE_3 ) ( this . resource ) ) ) VAR VAR (  resource . METHOD_6 ( model ) )  resource . METHOD_6 ( model ) (  METHOD_7 ( STRING_1 ) )  METHOD_7 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_3 ) NAME VAR_3 ( BLOCK BLOCK (  METHOD_8 ( VAR_3 ) )  METHOD_8 ( VAR_3 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME response ) NAME response ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_4 ( VAR_4 , VAR_2 . toString ( ) ) ) INIT = new TYPE_4 ( VAR_4 , VAR_2 . toString ( ) ) ) VAR VAR (  VAR_3 . METHOD_2 ( VAR_5 ) )  VAR_3 . METHOD_2 ( VAR_5 ) (  VAR_3 . METHOD_3 ( VAR_6 ) )  VAR_3 . METHOD_3 ( VAR_6 ) (  VAR_3 . METHOD_4 ( true ) )  VAR_3 . METHOD_4 ( true ) (  response . METHOD_5 ( VAR_3 ) )  response . METHOD_5 ( VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.compat.Guid> ) TYPE java.util.List<org.ovirt.engine.core.compat.Guid> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( ) ) INIT = new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( ) ) VAR VAR (  METHOD_2 ( new TYPE_1 ( ) , VAR_1 ) )  METHOD_2 ( new TYPE_1 ( ) , VAR_1 ) ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME tempVar ) NAME tempVar ( INIT = new TYPE_2 ( VAR_2 , VAR_3 ) ) INIT = new TYPE_2 ( VAR_2 , VAR_3 ) ) VAR VAR (  tempVar . METHOD_3 ( true ) )  tempVar . METHOD_3 ( true ) (  tempVar . METHOD_4 ( TYPE_3 . METHOD_5 ( ) . getId ( ) ) )  tempVar . METHOD_4 ( TYPE_3 . METHOD_5 ( ) . getId ( ) ) (  tempVar . METHOD_6 ( VAR_4 ) )  tempVar . METHOD_6 ( VAR_4 ) (  TYPE_3 . METHOD_7 ( ) . METHOD_8 ( VAR_5 , tempVar , TYPE_4 . METHOD_9 ( ) ) )  TYPE_3 . METHOD_7 ( ) . METHOD_8 ( VAR_5 , tempVar , TYPE_4 . METHOD_9 ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME add ) NAME add ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2.Network ) TYPE TYPE_2.Network ( NAME network ) NAME network ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_1 ( network , METHOD_2 ( ) ) )  METHOD_1 ( network , METHOD_2 ( ) ) ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.network ) TYPE org.ovirt.engine.core.common.businessentities.network ( NAME entity ) NAME entity ( INIT = map ( network ) ) INIT = map ( network ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME params ) NAME params ( INIT = METHOD_3 ( network , entity ) ) INIT = METHOD_3 ( network , entity ) ) VAR VAR (  return METHOD_4 ( VAR_1 , params , new TYPE_4 ( network . getName ( ) , params . getStoragePoolId ( ) . toString ( ) ) ) ; )  return METHOD_4 ( VAR_1 , params , new TYPE_4 ( network . getName ( ) , params . getStoragePoolId ( ) . toString ( ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.when ( command . METHOD_2 ( parameters . METHOD_3 ( ) . METHOD_4 ( ) ) ) . thenReturn ( TYPE_1 . METHOD_5 ( ) ) )  org.mockito.Mockito.when ( command . METHOD_2 ( parameters . METHOD_3 ( ) . METHOD_4 ( ) ) ) . thenReturn ( TYPE_1 . METHOD_5 ( ) ) (  command . METHOD_6 ( ) )  command . METHOD_6 ( ) (  TYPE_2 . METHOD_7 ( command . getReturnValue ( ) . getSucceeded ( ) ) )  TYPE_2 . METHOD_7 ( command . getReturnValue ( ) . getSucceeded ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Network> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Network> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.Network ) TYPE org.ovirt.engine.core.common.businessentities.Network ( NAME a ) NAME a ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( a == null ) ? null : a . METHOD_2 ( ) ) INIT = ( a == null ) ? null : a . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND TYPE_1 . METHOD_3 ( VAR_2 , METHOD_4 ( ) . METHOD_5 ( ) ) ) COND TYPE_1 . METHOD_3 ( VAR_2 , METHOD_4 ( ) . METHOD_5 ( ) ) ( THEN THEN (  METHOD_6 ( ) . setSelectedItem ( a ) )  METHOD_6 ( ) . setSelectedItem ( a ) (  return ; )  return ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ( IF IF ( COND ( METHOD_4 ( ) . METHOD_5 ( ) ) == null ) COND ( METHOD_4 ( ) . METHOD_5 ( ) ) == null ( THEN THEN (  METHOD_6 ( ) . setSelectedItem ( null ) )  METHOD_6 ( ) . setSelectedItem ( null ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<TYPE_1.VdcActionParametersBase> ) TYPE java.util.ArrayList<TYPE_1.VdcActionParametersBase> ( NAME list ) NAME list ( INIT = new java.util.ArrayList < TYPE_1 . VdcActionParametersBase > ( ) ) INIT = new java.util.ArrayList < TYPE_1 . VdcActionParametersBase > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME item ) NAME item ( IN TYPE_2 . METHOD_2 ( ) ) IN TYPE_2 . METHOD_2 ( ) ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME vds ) NAME vds ( INIT = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( item ) ) ) INIT = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( item ) ) ) VAR VAR (  list . add ( new TYPE_3 ( vds . getId ( ) , VAR_1 ) ) )  list . add ( new TYPE_3 ( vds . getId ( ) , VAR_1 ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_4 ) NAME METHOD_4 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ) BLOCK BLOCK ) METHOD METHOD (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_3 ( VAR_2 , list , new TYPE_4 ( ) { public void METHOD_4 ( TYPE_5 result ) { } } , null ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_3 ( VAR_2 , list , new TYPE_4 ( ) { public void METHOD_4 ( TYPE_5 result ) { } } , null ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VmTemplate ) TYPE org.ovirt.engine.core.common.businessentities.VmTemplate ( NAME template ) NAME template ) VAR VAR ( VAR VAR ( TYPE java.util.Map<org.ovirt.engine.core.compat.Guid,org.ovirt.engine.core.common.businessentities.DiskImage> ) TYPE java.util.Map<org.ovirt.engine.core.compat.Guid,org.ovirt.engine.core.common.businessentities.DiskImage> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.Map<org.ovirt.engine.core.compat.Guid,org.ovirt.engine.core.common.businessentities.StorageDomain> ) TYPE java.util.Map<org.ovirt.engine.core.compat.Guid,org.ovirt.engine.core.common.businessentities.StorageDomain> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> ( NAME VAR_4 ) NAME VAR_4 ( INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( template . getStoragePoolId ( ) . getValue ( ) ) ) INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( template . getStoragePoolId ( ) . getValue ( ) ) ) VAR VAR (  TYPE_1 . METHOD_1 ( template , VAR_4 , VAR_1 , VAR_2 , VAR_3 ) )  TYPE_1 . METHOD_1 ( template , VAR_4 , VAR_1 , VAR_2 , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ( STRING_1 + ( VAR_2 ) ) , VAR_3 . StoragePool ) ) INIT = new TYPE_1 ( ( STRING_1 + ( VAR_2 ) ) , VAR_3 . StoragePool ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2<TYPE_1> ) TYPE TYPE_2<TYPE_1> ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_2 ( VAR_1 ) ) INIT = METHOD_2 ( VAR_1 ) ) VAR VAR (  VAR_4 . METHOD_3 ( ) )  VAR_4 . METHOD_3 ( ) (  TYPE_3 . METHOD_4 ( ( ( VAR_5 ) == ( VAR_4 . METHOD_5 ( ) . getReturnValue ( ) ) ) ) )  TYPE_3 . METHOD_4 ( ( ( VAR_5 ) == ( VAR_4 . METHOD_5 ( ) . getReturnValue ( ) ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( java.util.List < java.lang.String > ) ( TYPE_1 . METHOD_2 ( VAR_2 ) ) ) ) INIT = ( ( java.util.List < java.lang.String > ) ( TYPE_1 . METHOD_2 ( VAR_2 ) ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.ArrayList<java.lang.String> ) TYPE java.util.ArrayList<java.lang.String> ( NAME VAR_3 ) NAME VAR_3 ( INIT = new java.util.ArrayList < java.lang.String > ( ) ) INIT = new java.util.ArrayList < java.lang.String > ( ) ) VAR VAR (  VAR_3 . add ( null ) )  VAR_3 . add ( null ) (  VAR_3 . METHOD_3 ( VAR_1 ) )  VAR_3 . METHOD_3 ( VAR_1 ) (  METHOD_4 ( ) . setItems ( VAR_3 ) )  METHOD_4 ( ) . setItems ( VAR_3 ) (  METHOD_4 ( ) . METHOD_5 ( METHOD_6 ( ) ) )  METHOD_4 ( ) . METHOD_5 ( METHOD_6 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_3 < TYPE_2 > ( VAR_1 , null , VAR_3 ) { protected void METHOD_2 ( ) { METHOD_3 ( METHOD_4 ( ) . METHOD_5 ( ) , VAR_4 ) ; } } ) INIT = new TYPE_3 < TYPE_2 > ( VAR_1 , null , VAR_3 ) { protected void METHOD_2 ( ) { METHOD_3 ( METHOD_4 ( ) . METHOD_5 ( ) , VAR_4 ) ; } } ) VAR VAR ( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_2 ) NAME METHOD_2 ( BLOCK BLOCK (  METHOD_3 ( METHOD_4 ( ) . METHOD_5 ( ) , VAR_4 ) )  METHOD_3 ( METHOD_4 ( ) . METHOD_5 ( ) , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD (  VAR_2 . METHOD_6 ( true ) )  VAR_2 . METHOD_6 ( true ) (  VAR_2 . METHOD_7 ( VAR_5 ) )  VAR_2 . METHOD_7 ( VAR_5 ) (  VAR_1 . METHOD_8 ( VAR_2 ) )  VAR_1 . METHOD_8 ( VAR_2 ) (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND source == null ) COND source == null ( THEN THEN (  return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ( ) ; )  return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ( ) ; ) THEN THEN ) IF IF (  return source ; )  return source ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ( ) ; } return source ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ( ) ; } return source ; } } (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new TYPE_1 ( ( ( STRING_1 + name ) + STRING_2 ) , VAR_2 . StoragePool ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new TYPE_1 ( ( ( STRING_1 + name ) + STRING_2 ) , VAR_2 . StoragePool ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  storageDomain = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) )  storageDomain = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) (  storageDomain . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) )  storageDomain . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) (  storageDomain . METHOD_3 ( VAR_1 ) )  storageDomain . METHOD_3 ( VAR_1 ) (  storageDomain . METHOD_4 ( VAR_2 ) )  storageDomain . METHOD_4 ( VAR_2 ) (  VAR_3 = new org.ovirt.engine.core.common.businessentities.StoragePool ( ) )  VAR_3 = new org.ovirt.engine.core.common.businessentities.StoragePool ( ) (  VAR_3 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) )  VAR_3 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) (  VAR_3 . METHOD_5 ( TYPE_1 . get ( 0 ) ) )  VAR_3 . METHOD_5 ( TYPE_1 . get ( 0 ) ) (  org.mockito.Mockito.when ( VAR_4 . METHOD_6 ( storageDomain . getId ( ) ) ) . thenReturn ( TYPE_2 . METHOD_7 ( ) ) )  org.mockito.Mockito.when ( VAR_4 . METHOD_6 ( storageDomain . getId ( ) ) ) . thenReturn ( TYPE_2 . METHOD_7 ( ) ) (  METHOD_8 ( ) )  METHOD_8 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) (  dao = VAR_1 . METHOD_2 ( ) )  dao = VAR_1 . METHOD_2 ( ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_3 ( ) ) INIT = VAR_1 . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_2 . get ( STRING_1 ) ) INIT = VAR_2 . get ( STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  VAR_4 . METHOD_4 ( STRING_2 ) )  VAR_4 . METHOD_4 ( STRING_2 ) (  VAR_4 . METHOD_5 ( VAR_5 ) )  VAR_4 . METHOD_5 ( VAR_5 ) (  VAR_6 = dao . get ( new TYPE_3 ( STRING_3 , VAR_3 . METHOD_6 ( ) ) ) )  VAR_6 = dao . get ( new TYPE_3 ( STRING_3 , VAR_3 . METHOD_6 ( ) ) ) (  VAR_7 = new TYPE_4 ( VAR_8 , VAR_3 . METHOD_6 ( ) ) )  VAR_7 = new TYPE_4 ( VAR_8 , VAR_3 . METHOD_6 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ) TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME domain ) NAME domain ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME map ) NAME map ( INIT = METHOD_2 ( domain ) ) INIT = METHOD_2 ( domain ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME context ) NAME context ( INIT = METHOD_3 ( ) ) INIT = METHOD_3 ( ) ) VAR VAR (  context . METHOD_4 ( map , map . METHOD_5 ( ) ) )  context . METHOD_4 ( map , map . METHOD_5 ( ) ) (  METHOD_6 ( map , status ) )  METHOD_6 ( map , status ) (  METHOD_3 ( ) . METHOD_7 ( ) )  METHOD_3 ( ) . METHOD_7 ( ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME equals ) NAME equals ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME obj ) NAME obj ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( this ) == obj ) COND ( this ) == obj ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ( IF IF ( COND ! ( obj instanceof TYPE_1 ) ) COND ! ( obj instanceof TYPE_1 ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME other ) NAME other ( INIT = ( ( TYPE_1 ) ( obj ) ) ) INIT = ( ( TYPE_1 ) ( obj ) ) ) VAR VAR (  return ( ( ( VAR_1 ) == ( VAR_2 ) ) && ( TYPE_2 . equals ( METHOD_1 ( ) , other . METHOD_1 ( ) ) ) ) && ( TYPE_2 . equals ( VAR_3 , VAR_4 ) ) ; )  return ( ( ( VAR_1 ) == ( VAR_2 ) ) && ( TYPE_2 . equals ( METHOD_1 ( ) , other . METHOD_1 ( ) ) ) ) && ( TYPE_2 . equals ( VAR_3 , VAR_4 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  VAR_1 . METHOD_2 ( VAR_2 ) )  VAR_1 . METHOD_2 ( VAR_2 ) (  VAR_1 . METHOD_3 ( VAR_3 ) )  VAR_1 . METHOD_3 ( VAR_3 ) (  VAR_1 . METHOD_4 ( VAR_4 ) )  VAR_1 . METHOD_4 ( VAR_4 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  result . METHOD_5 ( VAR_5 ) )  result . METHOD_5 ( VAR_5 ) (  result . METHOD_6 ( TYPE_3 . METHOD_7 ( VAR_1 ) ) )  result . METHOD_6 ( TYPE_3 . METHOD_7 ( VAR_1 ) ) (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<?> ) TYPE TYPE_1<?> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1<?> ) TYPE TYPE_1<?> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME params ) NAME params ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( INIT = ( ( TYPE_3 ) ( VAR_1 ) ) ) INIT = ( ( TYPE_3 ) ( VAR_1 ) ) ) VAR VAR (  VAR_3 . METHOD_2 ( VAR_4 . METHOD_3 ( ) ) )  VAR_3 . METHOD_2 ( VAR_4 . METHOD_3 ( ) ) (  TYPE_4 . METHOD_4 ( VAR_4 , VAR_3 ) )  TYPE_4 . METHOD_4 ( VAR_4 , VAR_3 ) (  TYPE_4 . METHOD_5 ( VAR_4 , VAR_3 ) )  TYPE_4 . METHOD_5 ( VAR_4 , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( ) ) ) )  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( ) ) ) (  METHOD_3 ( cmd , VAR_1 ) )  METHOD_3 ( cmd , VAR_1 ) (  TYPE_3 . METHOD_4 ( cmd . validate ( ) ) )  TYPE_3 . METHOD_4 ( cmd . validate ( ) ) (  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( vds ) . getStatus ( ) )  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( vds ) . getStatus ( ) (  TYPE_3 . METHOD_4 ( cmd . validate ( ) ) )  TYPE_3 . METHOD_4 ( cmd . validate ( ) ) (  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( vds ) . getStatus ( ) )  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( vds ) . getStatus ( ) (  TYPE_3 . METHOD_4 ( cmd . validate ( ) ) )  TYPE_3 . METHOD_4 ( cmd . validate ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  resource . METHOD_2 ( ) . METHOD_3 ( METHOD_4 ( ) ) )  resource . METHOD_2 ( ) . METHOD_3 ( METHOD_4 ( ) ) (  METHOD_5 ( 1 ) )  METHOD_5 ( 1 ) (  VAR_1 . METHOD_6 ( ) )  VAR_1 . METHOD_6 ( ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = resource . get ( ) ) INIT = resource . get ( ) ) VAR VAR (  assertEquals ( TYPE_2 . toString ( ) , VAR_2 . getId ( ) ) )  assertEquals ( TYPE_2 . toString ( ) , VAR_2 . getId ( ) ) (  METHOD_7 ( VAR_2 ) )  METHOD_7 ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( VAR_1 , VAR_2 class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 [ VAR_4 ] } , getEntity ( VAR_5 ) ) )  METHOD_2 ( VAR_1 , VAR_2 class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 [ VAR_4 ] } , getEntity ( VAR_5 ) ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ( INIT = TYPE_2 . getModel ( 0 ) ) INIT = TYPE_2 . getModel ( 0 ) ) VAR VAR (  model . METHOD_3 ( ) . METHOD_4 ( ) . setId ( null ) )  model . METHOD_3 ( ) . METHOD_4 ( ) . setId ( null ) (  model . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( VAR_3 [ VAR_4 ] ) )  model . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( VAR_3 [ VAR_4 ] ) (  METHOD_6 ( model , 0 ) )  METHOD_6 ( model , 0 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME context ) NAME context ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND context == null ) COND context == null ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = null ) INIT = null ) VAR VAR ( IF IF ( COND context . METHOD_2 ( ) ) COND context . METHOD_2 ( ) ( THEN THEN ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = context . METHOD_3 ( ) ) INIT = context . METHOD_3 ( ) ) VAR VAR ( IF IF ( COND VAR_4 != null ) COND VAR_4 != null ( THEN THEN (  VAR_3 = TYPE_4 . METHOD_4 ( VAR_4 , VAR_1 , VAR_2 ) )  VAR_3 = TYPE_4 . METHOD_4 ( VAR_4 , VAR_1 , VAR_2 ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.when ( command . METHOD_2 ( parameters . METHOD_3 ( ) . METHOD_4 ( ) ) ) . thenReturn ( TYPE_1 . METHOD_5 ( ) ) )  org.mockito.Mockito.when ( command . METHOD_2 ( parameters . METHOD_3 ( ) . METHOD_4 ( ) ) ) . thenReturn ( TYPE_1 . METHOD_5 ( ) ) (  org.mockito.Mockito.doReturn ( TYPE_2 . METHOD_6 ( ) ) . when ( command ) . METHOD_7 ( ) )  org.mockito.Mockito.doReturn ( TYPE_2 . METHOD_6 ( ) ) . when ( command ) . METHOD_7 ( ) (  parameters . METHOD_3 ( ) . METHOD_8 ( VAR_1 ) )  parameters . METHOD_3 ( ) . METHOD_8 ( VAR_1 ) (  TYPE_3 . METHOD_9 ( command . METHOD_10 ( ) ) )  TYPE_3 . METHOD_9 ( command . METHOD_10 ( ) ) (  TYPE_4 . METHOD_11 ( STRING_1 , command , VAR_2 ) )  TYPE_4 . METHOD_11 ( STRING_1 , command , VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME VAR_1 ) NAME VAR_1 ( INIT = new org.ovirt.engine.core.common.businessentities.VM ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.VM ( ) ) VAR VAR (  TYPE_1 . METHOD_2 ( METHOD_3 ( VAR_1 , VAR_2 , VAR_3 ) , TYPE_2 . METHOD_4 ( TYPE_3 . METHOD_5 ( VAR_2 , VAR_4 ) , TYPE_3 . METHOD_5 ( VAR_3 , VAR_5 ) ) ) )  TYPE_1 . METHOD_2 ( METHOD_3 ( VAR_1 , VAR_2 , VAR_3 ) , TYPE_2 . METHOD_4 ( TYPE_3 . METHOD_5 ( VAR_2 , VAR_4 ) , TYPE_3 . METHOD_5 ( VAR_3 , VAR_5 ) ) ) (  TYPE_1 . METHOD_2 ( METHOD_3 ( VAR_1 , VAR_2 , VAR_3 ) , TYPE_2 . METHOD_6 ( 2 ) ) )  TYPE_1 . METHOD_2 ( METHOD_3 ( VAR_1 , VAR_2 , VAR_3 ) , TYPE_2 . METHOD_6 ( 2 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN java.util.Map<java.lang.String,TYPE_1<java.lang.String,java.lang.String>> ) RETURN java.util.Map<java.lang.String,TYPE_1<java.lang.String,java.lang.String>> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<java.lang.String,TYPE_1<java.lang.String,java.lang.String>> ) TYPE java.util.Map<java.lang.String,TYPE_1<java.lang.String,java.lang.String>> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.HashMap < > ( ) ) INIT = new java.util.HashMap < > ( ) ) VAR VAR (  VAR_1 . put ( TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) , TYPE_3 . METHOD_4 ( VAR_2 , VAR_3 ) ) )  VAR_1 . put ( TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) , TYPE_3 . METHOD_4 ( VAR_2 , VAR_3 ) ) (  VAR_1 . put ( TYPE_2 . METHOD_2 ( ) . METHOD_5 ( ) , TYPE_3 . METHOD_4 ( VAR_2 , VAR_3 ) ) )  VAR_1 . put ( TYPE_2 . METHOD_2 ( ) . METHOD_5 ( ) , TYPE_3 . METHOD_4 ( VAR_2 , VAR_3 ) ) (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR (  VAR_1 . add ( STRING_1 ) )  VAR_1 . add ( STRING_1 ) (  command = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , VAR_1 ) ) ) )  command = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , VAR_1 ) ) ) (  org.mockito.Mockito.doReturn ( vds ) . when ( command ) . METHOD_4 ( ) )  org.mockito.Mockito.doReturn ( vds ) . when ( command ) . METHOD_4 ( ) (  TYPE_3 . METHOD_5 ( command . METHOD_6 ( ) ) )  TYPE_3 . METHOD_5 ( command . METHOD_6 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME value ) NAME value ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE char ) TYPE char ( NAME VAR_3 ) NAME VAR_3 ( INIT = CHAR_1 ) INIT = CHAR_1 ) VAR VAR ( VAR VAR ( TYPE char ) TYPE char ( NAME VAR_4 ) NAME VAR_4 ( INIT = CHAR_2 ) INIT = CHAR_2 ) VAR VAR ( IF IF ( COND ( VAR_1 . length ( ) ) > 0 ) COND ( VAR_1 . length ( ) ) > 0 ( THEN THEN (  VAR_1 . append ( VAR_3 ) )  VAR_1 . append ( VAR_3 ) ) THEN THEN ) IF IF (  VAR_1 . append ( VAR_2 ) . append ( VAR_4 ) . append ( value ) )  VAR_1 . append ( VAR_2 ) . append ( VAR_4 ) . append ( value ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) != null ) COND ( VAR_1 ) != null ( THEN THEN (  VAR_2 . METHOD_2 ( VAR_3 , VAR_1 ) )  VAR_2 . METHOD_2 ( VAR_3 , VAR_1 ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND VAR_4 ) COND VAR_4 ( THEN THEN (  VAR_2 . METHOD_2 ( VAR_3 , TYPE_1 . METHOD_3 ( ) ) )  VAR_2 . METHOD_2 ( VAR_3 , TYPE_1 . METHOD_3 ( ) ) ) THEN THEN ( ELSE ELSE (  VAR_2 . METHOD_4 ( ) )  VAR_2 . METHOD_4 ( ) ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.DiskImage> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.DiskImage> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( VAR_1 ) )  METHOD_2 ( VAR_1 ) ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_2 ) ( target ) ) ) INIT = ( ( TYPE_2 ) ( target ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Disk> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Disk> ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Disk > ) ( returnValue ) ) ) INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Disk > ) ( returnValue ) ) ) VAR VAR (  VAR_2 . METHOD_4 ( VAR_1 ) )  VAR_2 . METHOD_4 ( VAR_1 ) (  VAR_2 . METHOD_5 ( ) )  VAR_2 . METHOD_5 ( ) ) BLOCK BLOCK ) METHOD METHOD (  TYPE_1 . METHOD_3 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_2 VAR_2 = ( ( TYPE_2 ) ( target ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Disk > VAR_1 = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Disk > ) ( returnValue ) ) ; VAR_2 . METHOD_4 ( VAR_1 ) ; VAR_2 . METHOD_5 ( ) ; } } ) ) )  TYPE_1 . METHOD_3 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_2 VAR_2 = ( ( TYPE_2 ) ( target ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Disk > VAR_1 = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Disk > ) ( returnValue ) ) ; VAR_2 . METHOD_4 ( VAR_1 ) ; VAR_2 . METHOD_5 ( ) ; } } ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VdsNetworkInterface> ) RETURN java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VdsNetworkInterface> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VdsNetworkInterface> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VdsNetworkInterface> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VdsNetworkInterface> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VdsNetworkInterface> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . VdsNetworkInterface > ( ) ) INIT = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . VdsNetworkInterface > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME i ) NAME i ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( IF IF ( COND ( i . METHOD_2 ( ) ) == null ) COND ( i . METHOD_2 ( ) ) == null ( THEN THEN (  VAR_2 . add ( i ) )  VAR_2 . add ( i ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME vm ) NAME vm ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = null ) INIT = null ) VAR VAR ( IF IF ( COND ( vm . METHOD_2 ( ) ) && ( vm . METHOD_3 ( ) . METHOD_4 ( ) ) ) COND ( vm . METHOD_2 ( ) ) && ( vm . METHOD_3 ( ) . METHOD_4 ( ) ) ( THEN THEN (  VAR_1 = METHOD_5 ( VAR_2 class , VAR_3 class ) . map ( vm . METHOD_3 ( ) . METHOD_1 ( ) . get ( 0 ) , new TYPE_1 ( ) ) )  VAR_1 = METHOD_5 ( VAR_2 class , VAR_3 class ) . map ( vm . METHOD_3 ( ) . METHOD_1 ( ) . get ( 0 ) , new TYPE_1 ( ) ) ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) . setEntity ( ( ( METHOD_3 ( ) . METHOD_4 ( ) ) != 0 ) ) )  METHOD_2 ( ) . setEntity ( ( ( METHOD_3 ( ) . METHOD_4 ( ) ) != 0 ) ) (  METHOD_4 ( ) . setEntity ( ( ( METHOD_3 ( ) . METHOD_4 ( ) ) != 0 ? java.lang.String.valueOf ( METHOD_3 ( ) . METHOD_4 ( ) ) : null ) ) )  METHOD_4 ( ) . setEntity ( ( ( METHOD_3 ( ) . METHOD_4 ( ) ) != 0 ? java.lang.String.valueOf ( METHOD_3 ( ) . METHOD_4 ( ) ) : null ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 = VAR_2 )  VAR_1 = VAR_2 (  METHOD_2 ( new TYPE_1 . DiskImage ( ) ) )  METHOD_2 ( new TYPE_1 . DiskImage ( ) ) (  command . getParameters ( ) . METHOD_3 ( VAR_1 ) )  command . getParameters ( ) . METHOD_3 ( VAR_1 ) (  command . METHOD_3 ( VAR_1 ) )  command . METHOD_3 ( VAR_1 ) (  METHOD_4 ( false ) )  METHOD_4 ( false ) (  METHOD_5 ( ) )  METHOD_5 ( ) (  METHOD_6 ( ) )  METHOD_6 ( ) (  TYPE_2 . METHOD_7 ( command , VAR_3 ) )  TYPE_2 . METHOD_7 ( command , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) . size ( ) ) INIT = METHOD_2 ( ) . size ( ) ) VAR VAR (  return ( ( METHOD_3 ( ) . METHOD_4 ( TYPE_1 . METHOD_5 ( ) . getId ( ) ) . size ( ) ) > VAR_1 ) || ( ( METHOD_6 ( ) . METHOD_7 ( TYPE_1 . METHOD_5 ( ) . getId ( ) ) . size ( ) ) > VAR_1 ) ; )  return ( ( METHOD_3 ( ) . METHOD_4 ( TYPE_1 . METHOD_5 ( ) . getId ( ) ) . size ( ) ) > VAR_1 ) || ( ( METHOD_6 ( ) . METHOD_7 ( TYPE_1 . METHOD_5 ( ) . getId ( ) ) . size ( ) ) > VAR_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( IN TYPE_3 . getInstance ( ) . METHOD_2 ( VAR_2 ) ) IN TYPE_3 . getInstance ( ) . METHOD_2 ( VAR_2 ) ( BLOCK BLOCK (  METHOD_3 ( new TYPE_4 ( new TYPE_5 ( VAR_1 ) , new TYPE_6 ( TYPE_3 . getInstance ( ) . METHOD_4 ( VAR_1 . METHOD_5 ( ) . < TYPE_7 > get ( VAR_3 ) . METHOD_6 ( VAR_4 ) ) ) ) ) )  METHOD_3 ( new TYPE_4 ( new TYPE_5 ( VAR_1 ) , new TYPE_6 ( TYPE_3 . getInstance ( ) . METHOD_4 ( VAR_1 . METHOD_5 ( ) . < TYPE_7 > get ( VAR_3 ) . METHOD_6 ( VAR_4 ) ) ) ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  return new TYPE_2 ( METHOD_2 ( ) . getParameters ( ) . getStoragePoolId ( ) . getValue ( ) , METHOD_2 ( ) . getParameters ( ) . METHOD_3 ( ) , METHOD_2 ( ) . getParameters ( ) . METHOD_4 ( ) , METHOD_2 ( ) . getParameters ( ) . METHOD_5 ( ) ) ; )  return new TYPE_2 ( METHOD_2 ( ) . getParameters ( ) . getStoragePoolId ( ) . getValue ( ) , METHOD_2 ( ) . getParameters ( ) . METHOD_3 ( ) , METHOD_2 ( ) . getParameters ( ) . METHOD_4 ( ) , METHOD_2 ( ) . getParameters ( ) . METHOD_5 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_3 ( ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( VAR_1 ) ) ) )  METHOD_3 ( ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( VAR_1 ) ) ) ) BLOCK BLOCK ) METHOD METHOD (  TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object VAR_1 ) { METHOD_3 ( ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( VAR_1 ) ) ) ; } } ) , METHOD_4 ( ) . getId ( ) ) )  TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object VAR_1 ) { METHOD_3 ( ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( VAR_1 ) ) ) ; } } ) , METHOD_4 ( ) . getId ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . getInstance ( ) . METHOD_2 ( VAR_1 class , VAR_2 ) )  TYPE_1 . getInstance ( ) . METHOD_2 ( VAR_1 class , VAR_2 ) (  METHOD_3 ( ) )  METHOD_3 ( ) (  VAR_3 = new java.util.ArrayList < > ( ) )  VAR_3 = new java.util.ArrayList < > ( ) (  VAR_4 = STRING_1 )  VAR_4 = STRING_1 (  VAR_5 = STRING_2 )  VAR_5 = STRING_2 (  VAR_6 = new TYPE_2 ( vm , VAR_3 , version , VAR_4 , VAR_5 ) )  VAR_6 = new TYPE_2 ( vm , VAR_3 , version , VAR_4 , VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME storageDomain ) NAME storageDomain ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( ( storageDomain . METHOD_2 ( ) ) != ( VAR_1 ) ) && ( ( storageDomain . METHOD_2 ( ) ) != ( VAR_2 ) ) ) && ( ( TYPE_2 . METHOD_3 ( ) . METHOD_4 ( ) ) != ( storageDomain . METHOD_5 ( ) ) ) ) COND ( ( ( storageDomain . METHOD_2 ( ) ) != ( VAR_1 ) ) && ( ( storageDomain . METHOD_2 ( ) ) != ( VAR_2 ) ) ) && ( ( TYPE_2 . METHOD_3 ( ) . METHOD_4 ( ) ) != ( storageDomain . METHOD_5 ( ) ) ) ( THEN THEN (  addCanDoActionMessage ( VAR_3 ) )  addCanDoActionMessage ( VAR_3 ) (  return false ; )  return false ; ) THEN THEN ) IF IF (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.when ( VAR_1 . getName ( ) ) . thenReturn ( METHOD_2 ( ) ) )  org.mockito.Mockito.when ( VAR_1 . getName ( ) ) . thenReturn ( METHOD_2 ( ) ) (  org.mockito.Mockito.when ( host . getName ( ) ) . thenReturn ( METHOD_2 ( ) ) )  org.mockito.Mockito.when ( host . getName ( ) ) . thenReturn ( METHOD_2 ( ) ) (  org.mockito.Mockito.when ( VAR_2 . METHOD_3 ( TYPE_1 . METHOD_4 ( ) ) ) . thenReturn ( org.mockito.Mockito . METHOD_5 ( VAR_3 . VDS class ) ) )  org.mockito.Mockito.when ( VAR_2 . METHOD_3 ( TYPE_1 . METHOD_4 ( ) ) ) . thenReturn ( org.mockito.Mockito . METHOD_5 ( VAR_3 . VDS class ) ) (  TYPE_2 . METHOD_6 ( validator . METHOD_7 ( ) , TYPE_3 . METHOD_8 ( VAR_4 ) ) )  TYPE_2 . METHOD_6 ( validator . METHOD_7 ( ) , TYPE_3 . METHOD_8 ( VAR_4 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_1 ) ( model ) ) ) INIT = ( ( TYPE_1 ) ( model ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS> ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ) ( result ) ) ) INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ) ( result ) ) ) VAR VAR (  VAR_1 . METHOD_2 ( ) . setItems ( VAR_2 ) )  VAR_1 . METHOD_2 ( ) . setItems ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME from ) NAME from ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( WHILE WHILE ( COND ( from . METHOD_2 ( ) ) == 0 ) COND ( from . METHOD_2 ( ) ) == 0 ( BLOCK BLOCK (  from . METHOD_3 ( TYPE_2 . METHOD_4 ( INT_1 ) ) )  from . METHOD_3 ( TYPE_2 . METHOD_4 ( INT_1 ) ) ) BLOCK BLOCK ) WHILE WHILE (  from . METHOD_5 ( TYPE_2 . METHOD_6 ( VAR_1 class ) . value ( ) ) )  from . METHOD_5 ( TYPE_2 . METHOD_6 ( VAR_1 class ) . value ( ) ) (  from . METHOD_7 ( ) . METHOD_8 ( INT_2 ) )  from . METHOD_7 ( ) . METHOD_8 ( INT_2 ) (  from . METHOD_9 ( ) . METHOD_10 ( new TYPE_3 ( ) ) )  from . METHOD_9 ( ) . METHOD_10 ( new TYPE_3 ( ) ) (  return from ; )  return from ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( getVm ( ) . METHOD_3 ( ) . METHOD_4 ( ) , true , false ) ) INIT = TYPE_1 . METHOD_2 ( getVm ( ) . METHOD_3 ( ) . METHOD_4 ( ) , true , false ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.DiskImage ) TYPE org.ovirt.engine.core.common.businessentities.DiskImage ( NAME image ) NAME image ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  image . METHOD_5 ( new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( TYPE_2 . METHOD_6 ( TYPE_3 . getParameters ( ) . METHOD_7 ( ) ) ) ) )  image . METHOD_5 ( new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( TYPE_2 . METHOD_6 ( TYPE_3 . getParameters ( ) . METHOD_7 ( ) ) ) ) (  image . METHOD_8 ( TYPE_3 . getParameters ( ) . getStoragePoolId ( ) ) )  image . METHOD_8 ( TYPE_3 . getParameters ( ) . getStoragePoolId ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  METHOD_9 ( VAR_1 ) )  METHOD_9 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  VAR_1 = METHOD_3 ( VAR_1 , STRING_1 , STRING_2 ) )  VAR_1 = METHOD_3 ( VAR_1 , STRING_1 , STRING_2 ) (  METHOD_4 ( VAR_1 ) )  METHOD_4 ( VAR_1 ) (  METHOD_5 ( getVm ( ) ) )  METHOD_5 ( getVm ( ) ) (  VAR_2 . METHOD_6 ( ) )  VAR_2 . METHOD_6 ( ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = resource . get ( ) ) INIT = resource . get ( ) ) VAR VAR (  METHOD_7 ( VAR_3 ) )  METHOD_7 ( VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_1.VdcActionParametersBase ) TYPE TYPE_1.VdcActionParametersBase ( NAME VAR_1 ) NAME VAR_1 ( IN TYPE_2 . getParameters ( ) . METHOD_2 ( ) ) IN TYPE_2 . getParameters ( ) . METHOD_2 ( ) ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_3 ) ( VAR_1 ) ) ) INIT = ( ( TYPE_3 ) ( VAR_1 ) ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_2 . METHOD_3 ( ) ) INIT = VAR_2 . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_2 . METHOD_4 ( ) ) INIT = VAR_2 . METHOD_4 ( ) ) VAR VAR (  METHOD_5 ( VAR_3 , VAR_4 ) )  METHOD_5 ( VAR_3 , VAR_4 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( METHOD_3 ( ) ) )  METHOD_2 ( METHOD_3 ( ) ) (  METHOD_4 ( ) )  METHOD_4 ( ) (  METHOD_5 ( 1 ) )  METHOD_5 ( 1 ) (  METHOD_6 ( 1 ) )  METHOD_6 ( 1 ) (  METHOD_7 ( 1 ) )  METHOD_7 ( 1 ) (  METHOD_8 ( 1 ) )  METHOD_8 ( 1 ) (  VAR_1 . METHOD_9 ( ) )  VAR_1 . METHOD_9 ( ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME nic ) NAME nic ( INIT = resource . get ( ) ) INIT = resource . get ( ) ) VAR VAR (  TYPE_2 . METHOD_10 ( nic , 1 ) )  TYPE_2 . METHOD_10 ( nic , 1 ) (  METHOD_11 ( nic ) )  METHOD_11 ( nic ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( ) ) INIT = TYPE_1 . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  VAR_1 = TYPE_1 . METHOD_3 ( ) . METHOD_4 ( ) )  VAR_1 = TYPE_1 . METHOD_3 ( ) . METHOD_4 ( ) ( IF IF ( COND ! VAR_1 ) COND ! VAR_1 ( THEN THEN (  addCanDoActionMessage ( VAR_2 ) )  addCanDoActionMessage ( VAR_2 ) ) THEN THEN ( ELSE ELSE (  VAR_1 = TYPE_1 . METHOD_5 ( ) )  VAR_1 = TYPE_1 . METHOD_5 ( ) ) ELSE ELSE ) IF IF ) THEN THEN ) IF IF ( IF IF ( COND ! VAR_1 ) COND ! VAR_1 ( THEN THEN (  TYPE_1 . METHOD_6 ( ) )  TYPE_1 . METHOD_6 ( ) ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME validate ) NAME validate ( BLOCK BLOCK ( IF IF ( COND ! ( TYPE_1 . getParameters ( ) . METHOD_1 ( ) ) ) COND ! ( TYPE_1 . getParameters ( ) . METHOD_1 ( ) ) ( THEN THEN ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( TYPE_1 . METHOD_2 ( ) ) ) INIT = new TYPE_2 ( TYPE_1 . METHOD_2 ( ) ) ) VAR VAR ( IF IF ( COND ( ! ( validate ( VAR_1 . METHOD_3 ( ) ) ) ) || ( ! ( validate ( VAR_1 . METHOD_4 ( ) ) ) ) ) COND ( ! ( validate ( VAR_1 . METHOD_3 ( ) ) ) ) || ( ! ( validate ( VAR_1 . METHOD_4 ( ) ) ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME model ) NAME model ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( java.lang.Boolean ) ( model . METHOD_2 ( ) . getEntity ( ) ) ) || ( ( java.lang.Boolean ) ( model . METHOD_3 ( ) . getEntity ( ) ) ) ) COND ( ( java.lang.Boolean ) ( model . METHOD_2 ( ) . getEntity ( ) ) ) || ( ( java.lang.Boolean ) ( model . METHOD_3 ( ) . getEntity ( ) ) ) ( THEN THEN (  return METHOD_4 ( model . METHOD_5 ( ) , ( ( java.lang.String ) ( model . METHOD_6 ( ) . getEntity ( ) ) ) ) ; )  return METHOD_4 ( model . METHOD_5 ( ) , ( ( java.lang.String ) ( model . METHOD_6 ( ) . getEntity ( ) ) ) ) ; ) THEN THEN ( ELSE ELSE (  return null ; )  return null ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . getParameters ( ) . METHOD_2 ( ) ) INIT = TYPE_2 . getParameters ( ) . METHOD_2 ( ) ) VAR VAR (  METHOD_3 ( VAR_1 . METHOD_4 ( ) . toString ( ) ) )  METHOD_3 ( VAR_1 . METHOD_4 ( ) . toString ( ) ) (  METHOD_5 ( VAR_1 . METHOD_6 ( ) . name ( ) ) )  METHOD_5 ( VAR_1 . METHOD_6 ( ) . name ( ) ) (  METHOD_7 ( VAR_1 . METHOD_8 ( ) . name ( ) ) )  METHOD_7 ( VAR_1 . METHOD_8 ( ) . name ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME quota ) NAME quota ( INIT = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( VAR_1 ) ) INIT = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( VAR_1 ) ) VAR VAR (  VAR_2 = new TYPE_1 ( ) )  VAR_2 = new TYPE_1 ( ) ( IF IF ( COND quota != null ) COND quota != null ( THEN THEN (  VAR_2 . setId ( quota . getStoragePoolId ( ) ) )  VAR_2 . setId ( quota . getStoragePoolId ( ) ) (  VAR_2 . METHOD_4 ( quota . METHOD_5 ( ) ) )  VAR_2 . METHOD_4 ( quota . METHOD_5 ( ) ) ) THEN THEN ( ELSE ELSE (  VAR_2 . setId ( VAR_3 ) )  VAR_2 . setId ( VAR_3 ) (  VAR_2 . METHOD_4 ( VAR_4 ) )  VAR_2 . METHOD_4 ( VAR_4 ) ) ELSE ELSE ) IF IF (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) RETURN org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME entity ) NAME entity ( INIT = new org.ovirt.engine.core.common.businessentities . VdsNetworkInterface ( ) ) INIT = new org.ovirt.engine.core.common.businessentities . VdsNetworkInterface ( ) ) VAR VAR (  entity . setId ( VAR_1 ) )  entity . setId ( VAR_1 ) (  entity . METHOD_2 ( VAR_2 ) )  entity . METHOD_2 ( VAR_2 ) (  entity . METHOD_3 ( VAR_3 ) )  entity . METHOD_3 ( VAR_3 ) (  entity . METHOD_4 ( VAR_4 ) )  entity . METHOD_4 ( VAR_4 ) (  entity . METHOD_5 ( VAR_5 ) )  entity . METHOD_5 ( VAR_5 ) (  return TYPE_1 . METHOD_6 ( entity , VAR_1 ) ; )  return TYPE_1 . METHOD_6 ( entity , VAR_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.DiskImage ) TYPE TYPE_1.DiskImage ( NAME image ) NAME image ( INIT = new TYPE_1 . DiskImage ( ) ) INIT = new TYPE_1 . DiskImage ( ) ) VAR VAR (  image . METHOD_2 ( new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( TYPE_2 . METHOD_3 ( VAR_1 ) ) ) )  image . METHOD_2 ( new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( TYPE_2 . METHOD_3 ( VAR_1 ) ) ) (  METHOD_4 ( ) . METHOD_5 ( ) . put ( image . getId ( ) , image ) )  METHOD_4 ( ) . METHOD_5 ( ) . put ( image . getId ( ) , image ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . get ( TYPE_3 . getParameters ( ) . METHOD_3 ( ) ) ) INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . get ( TYPE_3 . getParameters ( ) . METHOD_3 ( ) ) ) VAR VAR ( IF IF ( COND ( VAR_2 == null ) || ( ( VAR_2 . METHOD_4 ( ) ) == ( VAR_3 ) ) ) COND ( VAR_2 == null ) || ( ( VAR_2 . METHOD_4 ( ) ) == ( VAR_3 ) ) ( THEN THEN (  return new TYPE_4 ( VAR_1 ) ; )  return new TYPE_4 ( VAR_1 ) ; ) THEN THEN ) IF IF (  return super . METHOD_1 ( VAR_1 ) ; )  return super . METHOD_1 ( VAR_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VmTemplate> ) RETURN java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VmTemplate> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VmTemplate> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VmTemplate> ( NAME list ) NAME list ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VmTemplate> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VmTemplate> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmTemplate > ( ) ) INIT = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmTemplate > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.VmTemplate ) TYPE org.ovirt.engine.core.common.businessentities.VmTemplate ( NAME template ) NAME template ( IN list ) IN list ( BLOCK BLOCK ( IF IF ( COND ( template . getId ( ) . equals ( VAR_3 ) ) || ( template . METHOD_2 ( ) . equals ( VAR_1 ) ) ) COND ( template . getId ( ) . equals ( VAR_3 ) ) || ( template . METHOD_2 ( ) . equals ( VAR_1 ) ) ( THEN THEN (  VAR_2 . add ( template ) )  VAR_2 . add ( template ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.when ( command . METHOD_2 ( ) . get ( TYPE_1 . any ( VAR_1 . Guid class ) ) ) . thenReturn ( null ) )  org.mockito.Mockito.when ( command . METHOD_2 ( ) . get ( TYPE_1 . any ( VAR_1 . Guid class ) ) ) . thenReturn ( null ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = command . METHOD_3 ( ) . METHOD_4 ( ) ) INIT = command . METHOD_3 ( ) . METHOD_4 ( ) ) VAR VAR (  org.mockito.Mockito.doReturn ( new TYPE_3 ( VAR_2 , VAR_2 . getId ( ) ) ) . when ( command ) . METHOD_5 ( TYPE_1 . any ( VAR_3 class ) ) )  org.mockito.Mockito.doReturn ( new TYPE_3 ( VAR_2 , VAR_2 . getId ( ) ) ) . when ( command ) . METHOD_5 ( TYPE_1 . any ( VAR_3 class ) ) (  TYPE_4 . METHOD_6 ( command ) )  TYPE_4 . METHOD_6 ( command ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1[] ) RETURN TYPE_1[] ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . getInstance ( STRING_1 ) ) INIT = TYPE_2 . getInstance ( STRING_1 ) ) VAR VAR (  VAR_1 . METHOD_2 ( this . VAR_2 , this . VAR_3 . METHOD_3 ( ) ) )  VAR_1 . METHOD_2 ( this . VAR_2 , this . VAR_3 . METHOD_3 ( ) ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_3 . getInstance ( TYPE_3 . METHOD_4 ( ) ) ) INIT = TYPE_3 . getInstance ( TYPE_3 . METHOD_4 ( ) ) ) VAR VAR (  VAR_4 . METHOD_5 ( VAR_1 ) )  VAR_4 . METHOD_5 ( VAR_1 ) (  return VAR_4 . METHOD_6 ( ) ; )  return VAR_4 . METHOD_6 ( ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4|TYPE_5|TYPE_6|TYPE_7 ) TYPE TYPE_4|TYPE_5|TYPE_6|TYPE_7 ( NAME VAR_5 ) NAME VAR_5 ( BLOCK BLOCK (  throw new TYPE_8 ( VAR_5 ) ; )  throw new TYPE_8 ( VAR_5 ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . getSelectedItem ( ) ) INIT = TYPE_2 . getSelectedItem ( ) ) VAR VAR ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME params ) NAME params ( INIT = new TYPE_3 ( VAR_1 . METHOD_2 ( ) ) ) INIT = new TYPE_3 ( VAR_1 . METHOD_2 ( ) ) ) VAR VAR ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_4 ) NAME METHOD_4 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  this . METHOD_5 ( ) )  this . METHOD_5 ( ) ) BLOCK BLOCK ) METHOD METHOD (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_3 ( VAR_2 , params , new TYPE_4 ( ) { public void METHOD_4 ( TYPE_5 result ) { VAR_3 this . METHOD_5 ( ) ; } } ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_3 ( VAR_2 , params , new TYPE_4 ( ) { public void METHOD_4 ( TYPE_5 result ) { VAR_3 this . METHOD_5 ( ) ; } } ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ! ( TYPE_1 . isEmpty ( vm . METHOD_2 ( ) ) ) ) COND ! ( TYPE_1 . isEmpty ( vm . METHOD_2 ( ) ) ) ( THEN THEN (  VAR_1 . add ( VAR_2 , vm . METHOD_2 ( ) ) )  VAR_1 . add ( VAR_2 , vm . METHOD_2 ( ) ) ) THEN THEN ) IF IF ( IF IF ( COND ! ( TYPE_1 . isEmpty ( vm . METHOD_3 ( ) ) ) ) COND ! ( TYPE_1 . isEmpty ( vm . METHOD_3 ( ) ) ) ( THEN THEN (  VAR_1 . add ( VAR_3 , vm . METHOD_3 ( ) ) )  VAR_1 . add ( VAR_3 , vm . METHOD_3 ( ) ) ( IF IF ( COND ! ( TYPE_1 . isEmpty ( vm . METHOD_4 ( ) ) ) ) COND ! ( TYPE_1 . isEmpty ( vm . METHOD_4 ( ) ) ) ( THEN THEN (  VAR_1 . add ( VAR_4 , vm . METHOD_4 ( ) ) )  VAR_1 . add ( VAR_4 , vm . METHOD_4 ( ) ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ( INIT = new TYPE_1 ( new TYPE_5 ( ) ) ) INIT = new TYPE_1 ( new TYPE_5 ( ) ) ) VAR VAR (  result . METHOD_2 ( TYPE_6 . METHOD_3 ( VAR_1 ) ) )  result . METHOD_2 ( TYPE_6 . METHOD_3 ( VAR_1 ) ) (  result . METHOD_4 ( TYPE_6 . METHOD_5 ( result , VAR_1 ) ) )  result . METHOD_4 ( TYPE_6 . METHOD_5 ( result , VAR_1 ) ) (  result . METHOD_6 ( TYPE_6 . METHOD_7 ( VAR_1 ) ) )  result . METHOD_6 ( TYPE_6 . METHOD_7 ( VAR_1 ) ) (  TYPE_6 . METHOD_8 ( result , VAR_1 ) )  TYPE_6 . METHOD_8 ( result , VAR_1 ) (  TYPE_7 . METHOD_9 ( result . METHOD_10 ( ) , VAR_1 ) )  TYPE_7 . METHOD_9 ( result . METHOD_10 ( ) , VAR_1 ) (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_2 ( ) . get ( VAR_3 . METHOD_3 ( ) ) . getStoragePoolId ( ) ) INIT = VAR_2 . METHOD_2 ( ) . get ( VAR_3 . METHOD_3 ( ) ) . getStoragePoolId ( ) ) VAR VAR (  TYPE_2 . METHOD_4 ( VAR_1 . getValue ( ) ) )  TYPE_2 . METHOD_4 ( VAR_1 . getValue ( ) ) ( VAR VAR ( TYPE java.util.List<TYPE_3> ) TYPE java.util.List<TYPE_3> ( NAME result ) NAME result ( INIT = dao . METHOD_5 ( VAR_1 . getValue ( ) ) ) INIT = dao . METHOD_5 ( VAR_1 . getValue ( ) ) ) VAR VAR (  TYPE_2 . METHOD_4 ( result ) )  TYPE_2 . METHOD_4 ( result ) (  TYPE_2 . METHOD_6 ( result . isEmpty ( ) ) )  TYPE_2 . METHOD_6 ( result . isEmpty ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  METHOD_3 ( METHOD_4 ( VAR_2 , true , STRING_1 , VAR_1 , false ) ) )  METHOD_3 ( METHOD_4 ( VAR_2 , true , STRING_1 , VAR_1 , false ) ) (  METHOD_5 ( true ) )  METHOD_5 ( true ) (  VAR_3 . METHOD_6 ( VAR_4 ) )  VAR_3 . METHOD_6 ( VAR_4 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME response ) NAME response ( INIT = VAR_3 . add ( METHOD_7 ( ) ) ) INIT = VAR_3 . add ( METHOD_7 ( ) ) ) VAR VAR (  assertEquals ( INT_1 , response . getStatus ( ) ) )  assertEquals ( INT_1 , response . getStatus ( ) ) (  METHOD_8 ( ( ( response . getEntity ( ) ) instanceof TYPE_3 ) ) )  METHOD_8 ( ( ( response . getEntity ( ) ) instanceof TYPE_3 ) ) (  METHOD_9 ( ( ( TYPE_3 ) ( response . getEntity ( ) ) ) , 1 ) )  METHOD_9 ( ( ( TYPE_3 ) ( response . getEntity ( ) ) ) , 1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.Object> ) TYPE java.util.Map<java.lang.String,java.lang.Object> ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 . METHOD_1 ( VAR_1 , VAR_2 . METHOD_2 ( ) ) ) INIT = VAR_4 . METHOD_1 ( VAR_1 , VAR_2 . METHOD_2 ( ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_5 ) NAME VAR_5 ( INIT = new TYPE_1 ( VAR_3 ) ) INIT = new TYPE_1 ( VAR_3 ) ) VAR VAR (  return VAR_5 ; )  return VAR_5 ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_6 ) NAME VAR_6 ( BLOCK BLOCK (  throw new TYPE_4 ( VAR_6 ) ; )  throw new TYPE_4 ( VAR_6 ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( java.lang.Boolean ) ( METHOD_2 ( ) . getEntity ( ) ) ) ) INIT = ( ( java.lang.Boolean ) ( METHOD_2 ( ) . getEntity ( ) ) ) ) VAR VAR ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( ( java.lang.Boolean ) ( TYPE_2 . METHOD_3 ( VAR_4 , VAR_1 . METHOD_4 ( ) . getValue ( ) ) ) ) ) INIT = ( ( java.lang.Boolean ) ( TYPE_2 . METHOD_3 ( VAR_4 , VAR_1 . METHOD_4 ( ) . getValue ( ) ) ) ) ) VAR VAR (  METHOD_5 ( ) . setEntity ( VAR_3 ) )  METHOD_5 ( ) . setEntity ( VAR_3 ) (  METHOD_6 ( ( ! VAR_3 ? TYPE_3 . METHOD_7 ( ) : STRING_1 ) ) )  METHOD_6 ( ( ! VAR_3 ? TYPE_3 . METHOD_7 ( ) : STRING_1 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( SWITCH SWITCH ( NAME ( ( TYPE_2 ) ( item ) ) . getStatus ( ) ) NAME ( ( TYPE_2 ) ( item ) ) . getStatus ( ) ( CASE VAR_1 ( BLOCK BLOCK (  return VAR_2 . METHOD_2 ( ) ; )  return VAR_2 . METHOD_2 ( ) ; ) BLOCK BLOCK ) CASE VAR_1 ( CASE VAR_3 ( BLOCK BLOCK (  return VAR_2 . METHOD_3 ( ) ; )  return VAR_2 . METHOD_3 ( ) ; ) BLOCK BLOCK ) CASE VAR_3 ( CASE VAR_4 ( BLOCK BLOCK (  return VAR_2 . METHOD_4 ( ) ; )  return VAR_2 . METHOD_4 ( ) ; ) BLOCK BLOCK ) CASE VAR_4 ( DEFAULT DEFAULT ( BLOCK BLOCK (  return VAR_2 . METHOD_4 ( ) ; )  return VAR_2 . METHOD_4 ( ) ; ) BLOCK BLOCK ) DEFAULT DEFAULT ) SWITCH SWITCH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME result ) NAME result ( INIT = dao . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ) INIT = dao . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ) VAR VAR (  TYPE_2 . METHOD_3 ( result ) )  TYPE_2 . METHOD_3 ( result ) (  TYPE_2 . METHOD_4 ( result . isEmpty ( ) ) )  TYPE_2 . METHOD_4 ( result . isEmpty ( ) ) (  TYPE_2 . assertEquals ( result . get ( 0 ) . getId ( ) , VAR_4 . getId ( ) ) )  TYPE_2 . assertEquals ( result . get ( 0 ) . getId ( ) , VAR_4 . getId ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( METHOD_2 ( ) ) . METHOD_3 ( ) )  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( METHOD_2 ( ) ) . METHOD_3 ( ) (  org.mockito.Mockito.doReturn ( null ) . when ( VAR_2 ) . METHOD_4 ( VAR_1 ) )  org.mockito.Mockito.doReturn ( null ) . when ( VAR_2 ) . METHOD_4 ( VAR_1 ) (  METHOD_5 ( ) . METHOD_6 ( ) )  METHOD_5 ( ) . METHOD_6 ( ) ( VAR VAR ( TYPE TYPE_1.VdcQueryReturnValue ) TYPE TYPE_1.VdcQueryReturnValue ( NAME returnValue ) NAME returnValue ( INIT = ( ( TYPE_1 . VdcQueryReturnValue ) ( METHOD_5 ( ) . getReturnValue ( ) ) ) ) INIT = ( ( TYPE_1 . VdcQueryReturnValue ) ( METHOD_5 ( ) . getReturnValue ( ) ) ) ) VAR VAR (  TYPE_2 . assertEquals ( TYPE_3 . toString ( ) , returnValue . METHOD_7 ( ) ) )  TYPE_2 . assertEquals ( TYPE_3 . toString ( ) , returnValue . METHOD_7 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.ui.uicommonweb.models.EntityModel<TYPE_1> ) TYPE org.ovirt.engine.ui.uicommonweb.models.EntityModel<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) . getSelectedItem ( ) ) INIT = METHOD_2 ( ) . getSelectedItem ( ) ) VAR VAR ( IF IF ( COND ( VAR_1 != null ) && ( ( VAR_1 . getEntity ( ) ) != ( VAR_2 ) ) ) COND ( VAR_1 != null ) && ( ( VAR_1 . getEntity ( ) ) != ( VAR_2 ) ) ( THEN THEN (  METHOD_3 ( ) . setSelectedItem ( 1 ) )  METHOD_3 ( ) . setSelectedItem ( 1 ) (  METHOD_3 ( ) . setIsChangable ( false ) )  METHOD_3 ( ) . setIsChangable ( false ) ) THEN THEN ( ELSE ELSE (  METHOD_3 ( ) . setIsChangable ( true ) )  METHOD_3 ( ) . setIsChangable ( true ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME cluster ) NAME cluster ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  cluster . setId ( VAR_1 ) )  cluster . setId ( VAR_1 ) (  cluster . METHOD_2 ( new TYPE_2 ( ) ) )  cluster . METHOD_2 ( new TYPE_2 ( ) ) (  cluster . METHOD_3 ( ) . setId ( VAR_2 ) )  cluster . METHOD_3 ( ) . setId ( VAR_2 ) (  TYPE_3 . METHOD_4 ( METHOD_5 ( ) , cluster ) )  TYPE_3 . METHOD_4 ( METHOD_5 ( ) , cluster ) (  assertEquals ( VAR_3 , cluster . METHOD_6 ( ) ) )  assertEquals ( VAR_3 , cluster . METHOD_6 ( ) ) (  assertEquals ( VAR_4 , cluster . METHOD_3 ( ) . METHOD_6 ( ) ) )  assertEquals ( VAR_4 , cluster . METHOD_3 ( ) . METHOD_6 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_2 = new TYPE_1 ( ) )  VAR_2 = new TYPE_1 ( ) (  VAR_2 . setId ( new TYPE_2 ( ) ) )  VAR_2 . setId ( new TYPE_2 ( ) ) (  VAR_2 . METHOD_2 ( VAR_1 ) )  VAR_2 . METHOD_2 ( VAR_1 ) (  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( command ) . METHOD_3 ( ) )  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( command ) . METHOD_3 ( ) (  org.mockito.Mockito.when ( VAR_3 . get ( TYPE_3 . any ( VAR_4 class ) ) ) . thenReturn ( VAR_2 ) )  org.mockito.Mockito.when ( VAR_3 . get ( TYPE_3 . any ( VAR_4 class ) ) ) . thenReturn ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.compat.Guid> ) TYPE java.util.List<org.ovirt.engine.core.compat.Guid> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  super . METHOD_1 ( VAR_1 , VAR_2 ) )  super . METHOD_1 ( VAR_1 , VAR_2 ) (  TYPE_1 . METHOD_2 ( ) . getParameters ( ) . METHOD_3 ( false ) )  TYPE_1 . METHOD_2 ( ) . getParameters ( ) . METHOD_3 ( false ) (  VAR_3 . error ( STRING_1 , METHOD_4 ( ) ) )  VAR_3 . error ( STRING_1 , METHOD_4 ( ) ) (  TYPE_1 . METHOD_2 ( ) . METHOD_5 ( ) )  TYPE_1 . METHOD_2 ( ) . METHOD_5 ( ) (  TYPE_2 . METHOD_6 ( VAR_1 ) )  TYPE_2 . METHOD_6 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) , null ) ) )  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) , null ) ) (  METHOD_3 ( cmd ) )  METHOD_3 ( cmd ) (  METHOD_4 ( cmd , false ) )  METHOD_4 ( cmd , false ) (  cmd . METHOD_5 ( ) )  cmd . METHOD_5 ( ) (  TYPE_3 . assertEquals ( cmd . METHOD_6 ( ) , VAR_2 ) )  TYPE_3 . assertEquals ( cmd . METHOD_6 ( ) , VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public synchronized ) MODIFIER public synchronized ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE TYPE_1.VdcActionType ) TYPE TYPE_1.VdcActionType ( NAME type ) NAME type ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ( INIT = false ) INIT = false ) VAR VAR ( IF IF ( COND ( VAR_2 ) != null ) COND ( VAR_2 ) != null ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_2 . METHOD_2 ( ) ) IN VAR_2 . METHOD_2 ( ) ( BLOCK BLOCK ( IF IF ( COND ( METHOD_3 ( id , VAR_3 ) ) && ( type . equals ( VAR_3 . getParameters ( ) . METHOD_4 ( ) . METHOD_5 ( ) ) ) ) COND ( METHOD_3 ( id , VAR_3 ) ) && ( type . equals ( VAR_3 . getParameters ( ) . METHOD_4 ( ) . METHOD_5 ( ) ) ) ( THEN THEN (  VAR_1 = true )  VAR_1 = true (  break ; )  break ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME vds ) NAME vds ( INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . get ( TYPE_1 . getParameters ( ) . METHOD_3 ( ) ) ) INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . get ( TYPE_1 . getParameters ( ) . METHOD_3 ( ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME result ) NAME result ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR ( IF IF ( COND vds != null ) COND vds != null ( THEN THEN (  result = TYPE_3 . METHOD_4 ( vds . METHOD_5 ( ) ) )  result = TYPE_3 . METHOD_4 ( vds . METHOD_5 ( ) ) ) THEN THEN ) IF IF (  TYPE_1 . METHOD_6 ( ) . METHOD_7 ( result ) )  TYPE_1 . METHOD_6 ( ) . METHOD_7 ( result ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.ArrayList ) TYPE java.util.ArrayList ( NAME parameters ) NAME parameters ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  super . METHOD_1 ( parameters ) )  super . METHOD_1 ( parameters ) ( IF IF ( COND ! ( ( parameters . get ( INT_1 ) ) instanceof java.lang.Boolean ) ) COND ! ( ( parameters . get ( INT_1 ) ) instanceof java.lang.Boolean ) ( THEN THEN (  throw new TYPE_1 ( ) ; )  throw new TYPE_1 ( ) ; ) THEN THEN ) IF IF (  VAR_1 = ( ( java.lang.Boolean ) ( parameters . get ( INT_1 ) ) ) )  VAR_1 = ( ( java.lang.Boolean ) ( parameters . get ( INT_1 ) ) ) ( IF IF ( COND ! ( ( parameters . get ( INT_2 ) ) instanceof TYPE_2 . Guid ) ) COND ! ( ( parameters . get ( INT_2 ) ) instanceof TYPE_2 . Guid ) ( THEN THEN (  throw new TYPE_1 ( ) ; )  throw new TYPE_1 ( ) ; ) THEN THEN ) IF IF (  VAR_2 = ( ( TYPE_2 . Guid ) ( parameters . get ( INT_2 ) ) ) )  VAR_2 = ( ( TYPE_2 . Guid ) ( parameters . get ( INT_2 ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1.ValidationResult ) RETURN TYPE_1.ValidationResult ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  return TYPE_2 . METHOD_2 ( VAR_1 ) . when ( ( ( ( ( cluster . METHOD_3 ( ) ) > INT_1 ) || ( ( cluster . METHOD_3 ( ) ) <= 0 ) ) && ( ! ( ( cluster . METHOD_4 ( ) ) || ( cluster . METHOD_5 ( ) ) ) ) ) ) ; )  return TYPE_2 . METHOD_2 ( VAR_1 ) . when ( ( ( ( ( cluster . METHOD_3 ( ) ) > INT_1 ) || ( ( cluster . METHOD_3 ( ) ) <= 0 ) ) && ( ! ( ( cluster . METHOD_4 ( ) ) || ( cluster . METHOD_5 ( ) ) ) ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME status ) NAME status ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( INIT = null ) INIT = null ) VAR VAR ( IF IF ( COND ( VAR_4 = VAR_5 . get ( VAR_1 ) ) != null ) COND ( VAR_4 = VAR_5 . get ( VAR_1 ) ) != null ( THEN THEN (  return VAR_4 . METHOD_2 ( status , VAR_2 , VAR_3 ) ; )  return VAR_4 . METHOD_2 ( status , VAR_2 , VAR_3 ) ; ) THEN THEN ) IF IF (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( model ) )  VAR_1 . METHOD_2 ( model ) (  VAR_2 . METHOD_3 ( java.lang.Integer . toString ( getModel ( ) . METHOD_4 ( ) ) ) )  VAR_2 . METHOD_3 ( java.lang.Integer . toString ( getModel ( ) . METHOD_4 ( ) ) ) (  VAR_3 . METHOD_3 ( TYPE_2 . METHOD_5 ( getModel ( ) . METHOD_6 ( ) ) ) )  VAR_3 . METHOD_3 ( TYPE_2 . METHOD_5 ( getModel ( ) . METHOD_6 ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( null , org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , VAR_1 , VAR_2 ) , null ) ) )  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( null , org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , VAR_1 , VAR_2 ) , null ) ) (  METHOD_4 ( ) )  METHOD_4 ( ) (  METHOD_5 ( true , null , VAR_3 ) )  METHOD_5 ( true , null , VAR_3 ) (  cmd . METHOD_6 ( ) )  cmd . METHOD_6 ( ) (  org.mockito.Mockito . METHOD_7 ( VAR_4 , org.mockito.Mockito . METHOD_8 ( 2 ) ) . METHOD_9 ( TYPE_3 . any ( VAR_5 class ) ) )  org.mockito.Mockito . METHOD_7 ( VAR_4 , org.mockito.Mockito . METHOD_8 ( 2 ) ) . METHOD_9 ( TYPE_3 . any ( VAR_5 class ) ) (  TYPE_4 . assertEquals ( cmd . METHOD_10 ( ) , VAR_6 ) )  TYPE_4 . assertEquals ( cmd . METHOD_10 ( ) , VAR_6 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  assertEquals ( VAR_2 [ VAR_1 ] . toString ( ) , model . getId ( ) ) )  assertEquals ( VAR_2 [ VAR_1 ] . toString ( ) , model . getId ( ) ) (  assertEquals ( VAR_3 [ VAR_1 ] , model . getName ( ) ) )  assertEquals ( VAR_3 [ VAR_1 ] , model . getName ( ) ) (  assertEquals ( TYPE_2 . name ( ) . METHOD_2 ( ) , model . METHOD_3 ( ) ) )  assertEquals ( TYPE_2 . name ( ) . METHOD_2 ( ) , model . METHOD_3 ( ) ) (  assertEquals ( VAR_4 . toString ( ) , model . METHOD_4 ( ) . getId ( ) ) )  assertEquals ( VAR_4 . toString ( ) , model . METHOD_4 ( ) . getId ( ) ) (  METHOD_5 ( model ) )  METHOD_5 ( model ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_5 ) NAME VAR_5 ( INIT = null ) INIT = null ) VAR VAR ( IF IF ( COND ! ( METHOD_2 ( VAR_2 , VAR_3 , VAR_4 ) ) ) COND ! ( METHOD_2 ( VAR_2 , VAR_3 , VAR_4 ) ) ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF (  VAR_5 = METHOD_3 ( VAR_1 , VAR_2 ) )  VAR_5 = METHOD_3 ( VAR_1 , VAR_2 ) (  return VAR_5 ; )  return VAR_5 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = org.mockito.Mockito . METHOD_2 ( VAR_2 class ) ) INIT = org.mockito.Mockito . METHOD_2 ( VAR_2 class ) ) VAR VAR (  org.mockito.Mockito.when ( VAR_1 . METHOD_3 ( storageDomain , command . getParameters ( ) . METHOD_4 ( ) ) ) . thenReturn ( new TYPE_2 < java.lang.Boolean , TYPE_3 > ( true , null ) ) )  org.mockito.Mockito.when ( VAR_1 . METHOD_3 ( storageDomain , command . getParameters ( ) . METHOD_4 ( ) ) ) . thenReturn ( new TYPE_2 < java.lang.Boolean , TYPE_3 > ( true , null ) ) (  org.mockito.Mockito.when ( VAR_1 . METHOD_5 ( storageDomain , command . getParameters ( ) . METHOD_4 ( ) ) ) . thenReturn ( true ) )  org.mockito.Mockito.when ( VAR_1 . METHOD_5 ( storageDomain , command . getParameters ( ) . METHOD_4 ( ) ) ) . thenReturn ( true ) (  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_6 ( storageDomain ) )  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_6 ( storageDomain ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) == null ) COND ( VAR_1 ) == null ( THEN THEN (  VAR_1 = TYPE_1 . METHOD_2 ( ) . get ( TYPE_1 . getParameters ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) )  VAR_1 = TYPE_1 . METHOD_2 ( ) . get ( TYPE_1 . getParameters ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_2 ) == null ) COND ( VAR_2 ) == null ( THEN THEN (  VAR_2 = TYPE_1 . METHOD_5 ( ) . get ( TYPE_1 . getParameters ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) )  VAR_2 = TYPE_1 . METHOD_5 ( ) . get ( TYPE_1 . getParameters ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME event ) NAME event ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2<TYPE_3<?>> ) TYPE TYPE_2<TYPE_3<?>> ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( TYPE_4 . METHOD_3 ( VAR_2 ) ) ) INIT = METHOD_2 ( TYPE_4 . METHOD_3 ( VAR_2 ) ) ) VAR VAR ( IF IF ( COND ( event . METHOD_4 ( ) ) != null ) COND ( event . METHOD_4 ( ) ) != null ( THEN THEN (  event . METHOD_4 ( ) . METHOD_5 ( VAR_1 . METHOD_6 ( ) . METHOD_7 ( ) ) )  event . METHOD_4 ( ) . METHOD_5 ( VAR_1 . METHOD_6 ( ) . METHOD_7 ( ) ) ) THEN THEN ) IF IF (  METHOD_8 ( VAR_3 , event . METHOD_4 ( ) ) )  METHOD_8 ( VAR_3 , event . METHOD_4 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME value ) NAME value ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( VAR_1 , STRING_1 ) )  TYPE_1 . METHOD_2 ( VAR_1 , STRING_1 ) ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = name . METHOD_3 ( ) ) INIT = name . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = value ) INIT = value ) VAR VAR (  METHOD_4 ( ) )  METHOD_4 ( ) ( IF IF ( COND VAR_4 . METHOD_5 ( VAR_2 ) ) COND VAR_4 . METHOD_5 ( VAR_2 ) ( THEN THEN (  VAR_3 = java.lang.String . METHOD_6 ( STRING_2 , VAR_4 . get ( VAR_2 ) , VAR_1 , value ) )  VAR_3 = java.lang.String . METHOD_6 ( STRING_2 , VAR_4 . get ( VAR_2 ) , VAR_1 , value ) ) THEN THEN ) IF IF (  VAR_4 . put ( name . METHOD_3 ( ) , VAR_3 ) )  VAR_4 . put ( name . METHOD_3 ( ) , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<org.ovirt.engine.core.common.businessentities.VDS> ) RETURN java.util.List<org.ovirt.engine.core.common.businessentities.VDS> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDS> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDS> ( NAME hosts ) NAME hosts ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ) VAR VAR ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.String> ) TYPE java.util.Map<java.lang.String,java.lang.String> ( NAME parameters ) NAME parameters ) VAR VAR ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( vm . METHOD_2 ( ) ) == ( VAR_2 ) ) COND ( vm . METHOD_2 ( ) ) == ( VAR_2 ) ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME host ) NAME host ( IN hosts ) IN hosts ( BLOCK BLOCK ( IF IF ( COND host . getId ( ) . equals ( vm . METHOD_3 ( ) ) ) COND host . getId ( ) . equals ( vm . METHOD_3 ( ) ) ( THEN THEN (  return TYPE_1 . METHOD_4 ( host ) ; )  return TYPE_1 . METHOD_4 ( host ) ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF (  return hosts ; )  return hosts ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_1 . METHOD_2 ( VAR_3 ) ) INIT = TYPE_1 . METHOD_2 ( VAR_3 ) ) VAR VAR ( IF IF ( COND VAR_2 == null ) COND VAR_2 == null ( THEN THEN (  VAR_4 . METHOD_3 ( ( STRING_1 + VAR_1 ) ) )  VAR_4 . METHOD_3 ( ( STRING_1 + VAR_1 ) ) (  VAR_2 = VAR_5 )  VAR_2 = VAR_5 ) THEN THEN ) IF IF (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ( BLOCK BLOCK (  return VAR_5 ; )  return VAR_5 ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return ( ( ( ( VAR_1 . METHOD_2 ( ) ) + ( METHOD_3 ( VAR_1 ) ) ) < VAR_2 ) && ( ( VAR_1 . METHOD_4 ( ) ) >= VAR_3 ) ) && ( ( ( VAR_1 . METHOD_5 ( ) ) == null ) || ( ( ( METHOD_6 ( ) . METHOD_6 ( ) ) - ( VAR_1 . METHOD_5 ( ) . METHOD_6 ( ) ) ) < ( TYPE_1 . METHOD_7 ( VAR_4 ) ) ) ) ; )  return ( ( ( ( VAR_1 . METHOD_2 ( ) ) + ( METHOD_3 ( VAR_1 ) ) ) < VAR_2 ) && ( ( VAR_1 . METHOD_4 ( ) ) >= VAR_3 ) ) && ( ( ( VAR_1 . METHOD_5 ( ) ) == null ) || ( ( ( METHOD_6 ( ) . METHOD_6 ( ) ) - ( VAR_1 . METHOD_5 ( ) . METHOD_6 ( ) ) ) < ( TYPE_1 . METHOD_7 ( VAR_4 ) ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME equals ) NAME equals ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME obj ) NAME obj ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( this ) == obj ) COND ( this ) == obj ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ( IF IF ( COND obj == null ) COND obj == null ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( IF IF ( COND ( METHOD_1 ( ) ) != ( obj . METHOD_1 ( ) ) ) COND ( METHOD_1 ( ) ) != ( obj . METHOD_1 ( ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME other ) NAME other ( INIT = ( ( TYPE_1 ) ( obj ) ) ) INIT = ( ( TYPE_1 ) ( obj ) ) ) VAR VAR (  return ( TYPE_2 . equals ( name , other . name ) ) && ( TYPE_2 . equals ( value , other . value ) ) ; )  return ( TYPE_2 . equals ( name , other . name ) ) && ( TYPE_2 . equals ( value , other . value ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( METHOD_3 ( ) . getSelectedItem ( ) ) )  VAR_1 . METHOD_2 ( METHOD_3 ( ) . getSelectedItem ( ) ) (  METHOD_3 ( ) . setItems ( new java.util.ArrayList < java.lang.String > ( VAR_1 . METHOD_4 ( ) ) ) )  METHOD_3 ( ) . setItems ( new java.util.ArrayList < java.lang.String > ( VAR_1 . METHOD_4 ( ) ) ) (  METHOD_3 ( ) . setSelectedItem ( TYPE_1 . METHOD_5 ( VAR_1 . METHOD_4 ( ) ) ) )  METHOD_3 ( ) . setSelectedItem ( TYPE_1 . METHOD_5 ( VAR_1 . METHOD_4 ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) ( IF IF ( COND ! ( METHOD_2 ( ) . METHOD_3 ( ) ) ) COND ! ( METHOD_2 ( ) . METHOD_3 ( ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_4 ( ) ) INIT = METHOD_4 ( ) ) VAR VAR ( IF IF ( COND ( ( ( METHOD_5 ( ) ) && ( VAR_2 ) ) && VAR_1 ) && ( METHOD_6 ( ) ) ) COND ( ( ( METHOD_5 ( ) ) && ( VAR_2 ) ) && VAR_1 ) && ( METHOD_6 ( ) ) ( THEN THEN (  METHOD_2 ( ) . METHOD_7 ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_8 ( ) ) )  METHOD_2 ( ) . METHOD_7 ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_8 ( ) ) (  METHOD_2 ( ) . METHOD_9 ( false ) )  METHOD_2 ( ) . METHOD_9 ( false ) (  METHOD_10 ( ) )  METHOD_10 ( ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<?> ) TYPE TYPE_1<?> ( NAME args ) NAME args ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_4 ) NAME METHOD_4 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Boolean ) TYPE java.lang.Boolean ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  this . VAR_5 = result )  this . VAR_5 = result (  this . VAR_6 = VAR_3 )  this . VAR_6 = VAR_3 ) BLOCK BLOCK ) METHOD METHOD (  return VAR_2 . METHOD_3 ( args , VAR_3 , new TYPE_3 < java.lang.Boolean > ( ) { public void METHOD_4 ( java.lang.Boolean result ) { VAR_4 this . VAR_5 = result ; VAR_4 this . VAR_6 = VAR_3 ; } } , VAR_1 ) ; )  return VAR_2 . METHOD_3 ( args , VAR_3 , new TYPE_3 < java.lang.Boolean > ( ) { public void METHOD_4 ( java.lang.Boolean result ) { VAR_4 this . VAR_5 = result ; VAR_4 this . VAR_6 = VAR_3 ; } } , VAR_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN org.ovirt.engine.core.common.businessentities.network ) RETURN org.ovirt.engine.core.common.businessentities.network ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.network ) TYPE org.ovirt.engine.core.common.businessentities.network ( NAME VAR_2 ) NAME VAR_2 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( IF IF ( COND TYPE_1 . METHOD_2 ( VAR_2 . METHOD_3 ( ) , name ) ) COND TYPE_1 . METHOD_2 ( VAR_2 . METHOD_3 ( ) , name ) ( THEN THEN (  return VAR_2 ; )  return VAR_2 ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . METHOD_2 ( VAR_4 , new TYPE_4 ( null , METHOD_3 ( ) , VAR_1 ) ) ) INIT = VAR_3 . METHOD_2 ( VAR_4 , new TYPE_4 ( null , METHOD_3 ( ) , VAR_1 ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_5> ) TYPE java.util.List<TYPE_5> ( NAME VAR_5 ) NAME VAR_5 ( INIT = ( ( java.util.List < TYPE_5 > ) ( VAR_2 . getReturnValue ( ) ) ) ) INIT = ( ( java.util.List < TYPE_5 > ) ( VAR_2 . getReturnValue ( ) ) ) ) VAR VAR (  return METHOD_4 ( VAR_5 ) ; )  return METHOD_4 ( VAR_5 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND returnValue instanceof java.util.ArrayList ) COND returnValue instanceof java.util.ArrayList ( THEN THEN (  return ( ( java.util.ArrayList < TYPE_1 > ) ( returnValue ) ) ; )  return ( ( java.util.ArrayList < TYPE_1 > ) ( returnValue ) ) ; ) THEN THEN ) IF IF ( IF IF ( COND returnValue instanceof TYPE_1 ) COND returnValue instanceof TYPE_1 ( THEN THEN ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < TYPE_1 > ( ) ) INIT = new java.util.ArrayList < TYPE_1 > ( ) ) VAR VAR (  VAR_1 . add ( ( ( TYPE_1 ) ( returnValue ) ) ) )  VAR_1 . add ( ( ( TYPE_1 ) ( returnValue ) ) ) (  return VAR_1 ; )  return VAR_1 ; ) THEN THEN ) IF IF (  throw new TYPE_2 ( ( STRING_1 + ( returnValue . METHOD_2 ( ) . getName ( ) ) ) ) ; )  throw new TYPE_2 ( ( STRING_1 + ( returnValue . METHOD_2 ( ) . getName ( ) ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = dao . METHOD_2 ( VAR_2 , VAR_3 ) ) INIT = dao . METHOD_2 ( VAR_2 , VAR_3 ) ) VAR VAR (  TYPE_2 . assertEquals ( true , ( ( VAR_1 . size ( ) ) == 1 ) ) )  TYPE_2 . assertEquals ( true , ( ( VAR_1 . size ( ) ) == 1 ) ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_1 . get ( 0 ) ) INIT = VAR_1 . get ( 0 ) ) VAR VAR (  TYPE_2 . METHOD_3 ( VAR_4 ) )  TYPE_2 . METHOD_3 ( VAR_4 ) (  TYPE_2 . assertEquals ( VAR_4 . METHOD_4 ( ) , VAR_5 ) )  TYPE_2 . assertEquals ( VAR_4 . METHOD_4 ( ) , VAR_5 ) (  TYPE_2 . assertEquals ( true , VAR_4 . METHOD_5 ( ) . equals ( INT_1 ) ) )  TYPE_2 . assertEquals ( true , VAR_4 . METHOD_5 ( ) . equals ( INT_1 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 ( VAR_1 . METHOD_2 ( STRING_2 ) ) ) INIT = new TYPE_2 ( VAR_1 . METHOD_2 ( STRING_2 ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_3 ( ) ) INIT = new TYPE_3 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_3 ( ) ) INIT = new TYPE_3 ( ) ) VAR VAR (  client . METHOD_3 ( STRING_3 , VAR_2 , VAR_3 , VAR_4 ) )  client . METHOD_3 ( STRING_3 , VAR_2 , VAR_3 , VAR_4 ) (  TYPE_4 . assertEquals ( VAR_1 , new java.lang.String ( VAR_4 . METHOD_4 ( ) , STRING_2 ) ) )  TYPE_4 . assertEquals ( VAR_1 , new java.lang.String ( VAR_4 . METHOD_4 ( ) , STRING_2 ) ) (  TYPE_4 . assertEquals ( 0 , VAR_3 . size ( ) ) )  TYPE_4 . assertEquals ( 0 , VAR_3 . size ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 = new org.ovirt.engine.core.common.businessentities.VDS ( ) )  VAR_1 = new org.ovirt.engine.core.common.businessentities.VDS ( ) (  VAR_1 . setId ( VAR_2 ) )  VAR_1 . setId ( VAR_2 ) (  VAR_1 . METHOD_2 ( VAR_3 ) )  VAR_1 . METHOD_2 ( VAR_3 ) (  VAR_4 = org.mockito.Mockito . METHOD_3 ( new TYPE_1 ( METHOD_4 ( ) , METHOD_5 ( ) , null ) ) )  VAR_4 = org.mockito.Mockito . METHOD_3 ( new TYPE_1 ( METHOD_4 ( ) , METHOD_5 ( ) , null ) ) (  org.mockito.Mockito . METHOD_6 ( ) . when ( VAR_4 ) . METHOD_7 ( TYPE_2 . any ( VAR_5 . VDS class ) , TYPE_2 . any ( VAR_6 class ) , TYPE_2 . any ( ) ) )  org.mockito.Mockito . METHOD_6 ( ) . when ( VAR_4 ) . METHOD_7 ( TYPE_2 . any ( VAR_5 . VDS class ) , TYPE_2 . any ( VAR_6 class ) , TYPE_2 . any ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected static ) MODIFIER protected static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE byte ) TYPE byte ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE byte ) TYPE byte ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE byte ) TYPE byte ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_5 ) NAME VAR_5 ( INIT = ( ( ( VAR_1 & INT_1 ) < < INT_2 ) | ( ( VAR_2 & INT_1 ) < < INT_3 ) ) | ( VAR_3 & INT_1 ) ) INIT = ( ( ( VAR_1 & INT_1 ) < < INT_2 ) | ( ( VAR_2 & INT_1 ) < < INT_3 ) ) | ( VAR_3 & INT_1 ) ) VAR VAR ( WHILE WHILE ( COND ( VAR_4 -- ) > 0 ) COND ( VAR_4 -- ) > 0 ( BLOCK BLOCK (  result . append ( VAR_6 [ ( VAR_5 & INT_4 ) ] ) )  result . append ( VAR_6 [ ( VAR_5 & INT_4 ) ] ) (  VAR_5 = VAR_5 > > INT_5 )  VAR_5 = VAR_5 > > INT_5 ) BLOCK BLOCK ) WHILE WHILE (  return result . toString ( ) ; )  return result . toString ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.Integer> ) TYPE java.util.Map<java.lang.String,java.lang.Integer> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( vm . METHOD_3 ( ) ) ) INIT = TYPE_1 . METHOD_2 ( vm . METHOD_3 ( ) ) ) VAR VAR (  return ( ( ( VAR_1 . METHOD_4 ( VAR_2 , 0 ) ) + ( VAR_1 . METHOD_4 ( VAR_3 , 0 ) ) ) + INT_1 ) / INT_2 ; )  return ( ( ( VAR_1 . METHOD_4 ( VAR_2 , 0 ) ) + ( VAR_1 . METHOD_4 ( VAR_3 , 0 ) ) ) + INT_1 ) / INT_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND TYPE_1 . isEmpty ( VAR_1 ) ) COND TYPE_1 . isEmpty ( VAR_1 ) ( THEN THEN (  return VAR_1 ; )  return VAR_1 ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_2 ( VAR_1 ) . getName ( ) ) INIT = new TYPE_2 ( VAR_1 ) . getName ( ) ) VAR VAR (  return java.lang.String . METHOD_2 ( STRING_1 , VAR_2 , VAR_3 ) ; )  return java.lang.String . METHOD_2 ( STRING_1 , VAR_2 , VAR_3 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 = new java.util.ArrayList < java.lang.Integer > ( VAR_2 . METHOD_2 ( ) ) )  VAR_1 = new java.util.ArrayList < java.lang.Integer > ( VAR_2 . METHOD_2 ( ) ) ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_4 ) NAME METHOD_4 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Integer ) TYPE java.lang.Integer ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE java.lang.Integer ) TYPE java.lang.Integer ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return VAR_2 . get ( VAR_3 ) . METHOD_5 ( VAR_2 . get ( VAR_4 ) ) ; )  return VAR_2 . get ( VAR_3 ) . METHOD_5 ( VAR_2 . get ( VAR_4 ) ) ; ) BLOCK BLOCK ) METHOD METHOD (  TYPE_1 . METHOD_3 ( VAR_1 , new TYPE_2 < java.lang.Integer > ( ) { public int METHOD_4 ( java.lang.Integer VAR_3 , java.lang.Integer VAR_4 ) { return VAR_2 . get ( VAR_3 ) . METHOD_5 ( VAR_2 . get ( VAR_4 ) ) ; } } ) )  TYPE_1 . METHOD_3 ( VAR_1 , new TYPE_2 < java.lang.Integer > ( ) { public int METHOD_4 ( java.lang.Integer VAR_3 , java.lang.Integer VAR_4 ) { return VAR_2 . get ( VAR_3 ) . METHOD_5 ( VAR_2 . get ( VAR_4 ) ) ; } } ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.String> ) TYPE java.util.Map<java.lang.String,java.lang.String> ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) INIT = TYPE_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) VAR VAR ( IF IF ( COND ( VAR_3 . size ( ) ) > 0 ) COND ( VAR_3 . size ( ) ) > 0 ( THEN THEN (  VAR_2 . add ( VAR_4 , VAR_3 ) )  VAR_2 . add ( VAR_4 , VAR_3 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = org.mockito.Mockito . METHOD_2 ( VAR_2 class ) ) INIT = org.mockito.Mockito . METHOD_2 ( VAR_2 class ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ) TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ( NAME value ) NAME value ( INIT = new org.ovirt.engine.core.common.businessentities.VDSGroup ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.VDSGroup ( ) ) VAR VAR (  value . METHOD_3 ( STRING_1 ) )  value . METHOD_3 ( STRING_1 ) (  org.mockito.Mockito.when ( VAR_1 . get ( TYPE_2 . any ( VAR_3 . Guid class ) ) ) . thenReturn ( value ) )  org.mockito.Mockito.when ( VAR_1 . get ( TYPE_2 . any ( VAR_3 . Guid class ) ) ) . thenReturn ( value ) (  org.mockito.Mockito.when ( VAR_1 . METHOD_4 ( TYPE_2 . any ( VAR_3 . Guid class ) ) ) . thenReturn ( value ) )  org.mockito.Mockito.when ( VAR_1 . METHOD_4 ( TYPE_2 . any ( VAR_3 . Guid class ) ) ) . thenReturn ( value ) (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<TYPE_2,?> ) TYPE TYPE_1<TYPE_2,?> ( NAME column ) NAME column ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND METHOD_2 ( column ) ) COND METHOD_2 ( column ) ( THEN THEN (  VAR_2 . put ( column , VAR_1 ) )  VAR_2 . put ( column , VAR_1 ) ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( ( METHOD_3 ( column ) ) != null ) ? METHOD_3 ( column ) : VAR_4 . get ( column ) ) INIT = ( ( METHOD_3 ( column ) ) != null ) ? METHOD_3 ( column ) : VAR_4 . get ( column ) ) VAR VAR (  METHOD_4 ( column , VAR_1 ) )  METHOD_4 ( column , VAR_1 ) (  METHOD_5 ( column , null , VAR_1 , VAR_3 , false ) )  METHOD_5 ( column , null , VAR_1 , VAR_3 , false ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2.EngineMessage ) TYPE TYPE_2.EngineMessage ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 ) INIT = VAR_3 ) VAR VAR ( VAR VAR ( TYPE TYPE_3.ValidationResult ) TYPE TYPE_3.ValidationResult ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_3 . ValidationResult ( VAR_2 , TYPE_4 . METHOD_3 ( VAR_2 , VAR_1 . getName ( ) ) ) ) INIT = new TYPE_3 . ValidationResult ( VAR_2 , TYPE_4 . METHOD_3 ( VAR_2 , VAR_1 . getName ( ) ) ) ) VAR VAR (  METHOD_4 ( VAR_1 , VAR_5 , VAR_4 , VAR_4 , VAR_5 ) )  METHOD_4 ( VAR_1 , VAR_5 , VAR_4 , VAR_4 , VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_3 ( VAR_1 ) ) INIT = new TYPE_3 ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_4 ( ) ) INIT = new TYPE_4 ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_3 . METHOD_2 ( VAR_2 ) )  VAR_3 . METHOD_2 ( VAR_2 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME VAR_4 ) NAME VAR_4 ( BLOCK BLOCK (  TYPE_5 . METHOD_3 ( ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + ( VAR_4 . METHOD_4 ( ) ) ) ) )  TYPE_5 . METHOD_3 ( ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + ( VAR_4 . METHOD_4 ( ) ) ) ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  METHOD_3 ( ) . METHOD_4 ( ) )  METHOD_3 ( ) . METHOD_4 ( ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_3 ( ) . get ( VAR_2 ) ) INIT = METHOD_3 ( ) . get ( VAR_2 ) ) VAR VAR (  TYPE_2 . METHOD_5 ( VAR_1 ) )  TYPE_2 . METHOD_5 ( VAR_1 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_3 ( ) . get ( VAR_4 ) ) INIT = METHOD_3 ( ) . get ( VAR_4 ) ) VAR VAR (  TYPE_2 . METHOD_6 ( VAR_3 ) )  TYPE_2 . METHOD_6 ( VAR_3 ) (  METHOD_2 ( ) )  METHOD_2 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_2 . METHOD_2 ( VAR_1 ) )  VAR_2 . METHOD_2 ( VAR_1 ) (  VAR_3 . add ( VAR_1 ) )  VAR_3 . add ( VAR_1 ) ( IF IF ( COND VAR_2 . isEmpty ( ) ) COND VAR_2 . isEmpty ( ) ( THEN THEN ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  TYPE_2 . log ( VAR_4 , VAR_5 ) )  TYPE_2 . log ( VAR_4 , VAR_5 ) (  return false ; )  return false ; ) THEN THEN ) IF IF (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME storageDomain ) NAME storageDomain ( INIT = VAR_1 . METHOD_2 ( ) . get ( VAR_2 ) ) INIT = VAR_1 . METHOD_2 ( ) . get ( VAR_2 ) ) VAR VAR (  TYPE_2 . METHOD_3 ( storageDomain ) )  TYPE_2 . METHOD_3 ( storageDomain ) ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ( INIT = storageDomain . METHOD_4 ( ) ) INIT = storageDomain . METHOD_4 ( ) ) VAR VAR (  TYPE_2 . METHOD_5 ( name . equals ( VAR_1 . METHOD_6 ( VAR_2 , VAR_3 ) ) ) )  TYPE_2 . METHOD_5 ( name . equals ( VAR_1 . METHOD_6 ( VAR_2 , VAR_3 ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDSGroup> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDSGroup> ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( result ) )  TYPE_1 . METHOD_2 ( result ) (  TYPE_1 . METHOD_3 ( result . isEmpty ( ) ) )  TYPE_1 . METHOD_3 ( result . isEmpty ( ) ) ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ) TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ( NAME VAR_1 ) NAME VAR_1 ( IN result ) IN result ( BLOCK BLOCK (  TYPE_1 . assertEquals ( VAR_2 . getId ( ) , VAR_1 . METHOD_4 ( ) ) )  TYPE_1 . assertEquals ( VAR_2 . getId ( ) , VAR_1 . METHOD_4 ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2<TYPE_1,TYPE_3> ) TYPE TYPE_2<TYPE_1,TYPE_3> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  new TYPE_4 ( VAR_2 , new TYPE_5 ( ) , new TYPE_6 ( ) , new TYPE_7 ( new TYPE_8 ( ) . METHOD_2 ( ) , new TYPE_9 ( new TYPE_10 ( ) , new TYPE_11 ( ) ) . METHOD_2 ( ) ) ) . METHOD_3 ( VAR_1 , getModel ( ) ) )  new TYPE_4 ( VAR_2 , new TYPE_5 ( ) , new TYPE_6 ( ) , new TYPE_7 ( new TYPE_8 ( ) . METHOD_2 ( ) , new TYPE_9 ( new TYPE_10 ( ) , new TYPE_11 ( ) ) . METHOD_2 ( ) ) ) . METHOD_3 ( VAR_1 , getModel ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN org.ovirt.engine.core.common.businessentities.VM ) RETURN org.ovirt.engine.core.common.businessentities.VM ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME result ) NAME result ( INIT = null ) INIT = null ) VAR VAR ( VAR VAR ( TYPE TYPE_1.VdcQueryReturnValue ) TYPE TYPE_1.VdcQueryReturnValue ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . getInstance ( ) . RunQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_3 . getId ( ) ) ) ) INIT = TYPE_2 . getInstance ( ) . RunQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_3 . getId ( ) ) ) ) VAR VAR ( IF IF ( COND VAR_1 . getSucceeded ( ) ) COND VAR_1 . getSucceeded ( ) ( THEN THEN (  result = VAR_1 . getReturnValue ( ) )  result = VAR_1 . getReturnValue ( ) ) THEN THEN ) IF IF (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_1 ) ) COND ! ( VAR_1 ) ( THEN THEN ( TRY TRY ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  VAR_2 . instance )  VAR_2 . instance ( BLOCK BLOCK (  VAR_3 . METHOD_2 ( STRING_1 ) )  VAR_3 . METHOD_2 ( STRING_1 ) (  VAR_1 = true )  VAR_1 = true ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDS> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDS> ( NAME hosts ) NAME hosts ( INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME host ) NAME host ( IN hosts ) IN hosts ( BLOCK BLOCK ( IF IF ( COND host . METHOD_5 ( ) ) COND host . METHOD_5 ( ) ( THEN THEN (  METHOD_1 ( host ) )  METHOD_1 ( host ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  VAR_3 . METHOD_2 ( STRING_2 ) )  VAR_3 . METHOD_2 ( STRING_2 ) ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ( FINALLY FINALLY (  VAR_1 = false )  VAR_1 = false ) FINALLY FINALLY ) TRY TRY ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME vmId ) NAME vmId ) VAR VAR ( VAR VAR ( TYPE java.util.ArrayList<java.lang.String> ) TYPE java.util.ArrayList<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( vmId ) . size ( ) ) > 0 ) COND ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( vmId ) . size ( ) ) > 0 ( THEN THEN (  VAR_1 . add ( TYPE_1 . toString ( ) ) )  VAR_1 . add ( TYPE_1 . toString ( ) ) (  return true ; )  return true ; ) THEN THEN ) IF IF (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.String> ) TYPE java.util.Map<java.lang.String,java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME tempVar ) NAME tempVar ( INIT = new TYPE_2 ( METHOD_2 ( ) . getId ( ) , VAR_1 , VAR_2 ) ) INIT = new TYPE_2 ( METHOD_2 ( ) . getId ( ) , VAR_1 , VAR_2 ) ) VAR VAR (  tempVar . METHOD_3 ( true ) )  tempVar . METHOD_3 ( true ) (  TYPE_3 . getInstance ( ) . METHOD_4 ( VAR_3 , tempVar , TYPE_4 . METHOD_5 ( ) ) )  TYPE_3 . getInstance ( ) . METHOD_4 ( VAR_3 , tempVar , TYPE_4 . METHOD_5 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( result . METHOD_2 ( ) ) ) COND ! ( result . METHOD_2 ( ) ) ( THEN THEN (  VAR_1 . error ( result . METHOD_3 ( ) ) )  VAR_1 . error ( result . METHOD_3 ( ) ) (  VAR_2 . METHOD_4 ( result . METHOD_3 ( ) ) )  VAR_2 . METHOD_4 ( result . METHOD_3 ( ) ) (  TYPE_2 . METHOD_5 ( result . METHOD_6 ( ) ) )  TYPE_2 . METHOD_5 ( result . METHOD_6 ( ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( TYPE_2 . getParameters ( ) . METHOD_3 ( ) , TYPE_2 . getVm ( ) ) )  TYPE_1 . METHOD_2 ( TYPE_2 . getParameters ( ) . METHOD_3 ( ) , TYPE_2 . getVm ( ) ) ( IF IF ( COND ( VAR_1 ) == ( TYPE_2 . getParameters ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) ) COND ( VAR_1 ) == ( TYPE_2 . getParameters ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) ( THEN THEN (  METHOD_5 ( ) )  METHOD_5 ( ) (  METHOD_6 ( ) )  METHOD_6 ( ) ) THEN THEN ( ELSE ELSE (  METHOD_7 ( ) )  METHOD_7 ( ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<org.ovirt.engine.ui.uicommonweb.models.EntityModel> ) TYPE TYPE_1<org.ovirt.engine.ui.uicommonweb.models.EntityModel> ( NAME event ) NAME event ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = event . METHOD_2 ( ) ) INIT = event . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND ! ( TYPE_3 . equals ( VAR_1 . METHOD_3 ( ) ) ) ) COND ! ( TYPE_3 . equals ( VAR_1 . METHOD_3 ( ) ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME target ) NAME target ( INIT = VAR_1 . METHOD_4 ( ) . METHOD_5 ( ) ) INIT = VAR_1 . METHOD_4 ( ) . METHOD_5 ( ) ) VAR VAR (  return STRING_1 . equals ( target . METHOD_6 ( ) . METHOD_7 ( ) ) ; )  return STRING_1 . equals ( target . METHOD_6 ( ) . METHOD_7 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> ) RETURN java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > ( ) ) INIT = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ( NAME VAR_2 ) NAME VAR_2 ( IN VAR_3 ) IN VAR_3 ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_4 . METHOD_2 ( VAR_2 . getName ( ) ) ) ) COND ! ( VAR_4 . METHOD_2 ( VAR_2 . getName ( ) ) ) ( THEN THEN (  VAR_1 . add ( VAR_2 ) )  VAR_1 . add ( VAR_2 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME event ) NAME event ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND user . METHOD_2 ( ) ) COND user . METHOD_2 ( ) ( THEN THEN (  VAR_1 . METHOD_3 ( STRING_1 , TYPE_2 . METHOD_4 ( user . METHOD_5 ( ) , user . METHOD_6 ( ) . toString ( ) ) ) )  VAR_1 . METHOD_3 ( STRING_1 , TYPE_2 . METHOD_4 ( user . METHOD_5 ( ) , user . METHOD_6 ( ) . toString ( ) ) ) ) THEN THEN ( ELSE ELSE (  VAR_1 . METHOD_3 ( STRING_2 , null ) )  VAR_1 . METHOD_3 ( STRING_2 , null ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( java.lang.Boolean ) ( METHOD_2 ( ) . METHOD_3 ( VAR_2 , new TYPE_1 ( getVm ( ) . METHOD_4 ( ) ) ) . getReturnValue ( ) ) ) ) INIT = ( ( java.lang.Boolean ) ( METHOD_2 ( ) . METHOD_3 ( VAR_2 , new TYPE_1 ( getVm ( ) . METHOD_4 ( ) ) ) . getReturnValue ( ) ) ) ) VAR VAR ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  addCanDoActionMessage ( VAR_3 ) )  addCanDoActionMessage ( VAR_3 ) ) THEN THEN ) IF IF (  return ! VAR_1 ; )  return ! VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( RESOURCES RESOURCES ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 ( VAR_1 ) ) INIT = new TYPE_2 ( VAR_1 ) ) VAR VAR ) RESOURCES RESOURCES ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_3 ( ) ) INIT = new TYPE_3 ( ) ) VAR VAR (  VAR_3 . METHOD_1 ( VAR_2 ) )  VAR_3 . METHOD_1 ( VAR_2 ) (  METHOD_2 ( VAR_3 , VAR_1 ) )  METHOD_2 ( VAR_3 , VAR_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_4 ) NAME VAR_4 ( BLOCK BLOCK (  throw new TYPE_5 ( java.lang.String . METHOD_3 ( STRING_1 , VAR_1 . METHOD_4 ( ) ) ) ; )  throw new TYPE_5 ( java.lang.String . METHOD_3 ( STRING_1 , VAR_1 . METHOD_4 ( ) ) ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND source != null ) COND source != null ( THEN THEN ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain> ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( source ) ) ) INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( source ) ) ) VAR VAR (  return VAR_1 . isEmpty ( ) ; )  return VAR_1 . isEmpty ( ) ; ) THEN THEN ) IF IF (  return source ; )  return source ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > VAR_1 = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( source ) ) ; return VAR_1 . isEmpty ( ) ; } return source ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > VAR_1 = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( source ) ) ; return VAR_1 . isEmpty ( ) ; } return source ; } } (  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new TYPE_1 ( ( STRING_1 + name ) , VAR_3 . StorageDomain ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new TYPE_1 ( ( STRING_1 + name ) , VAR_3 . StorageDomain ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.network.Network ) TYPE org.ovirt.engine.core.common.businessentities.network.Network ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.network.Network ) TYPE org.ovirt.engine.core.common.businessentities.network.Network ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) INIT = VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) ) INIT = VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) ) VAR VAR ( IF IF ( COND VAR_3 == VAR_4 ) COND VAR_3 == VAR_4 ( THEN THEN (  return VAR_5 . METHOD_1 ( VAR_1 . getName ( ) , VAR_2 . getName ( ) ) ; )  return VAR_5 . METHOD_1 ( VAR_1 . getName ( ) , VAR_2 . getName ( ) ) ; ) THEN THEN ( ELSE ELSE (  return VAR_3 ? - 1 : 1 ; )  return VAR_3 ? - 1 : 1 ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<java.lang.String,java.lang.String> ) TYPE TYPE_1<java.lang.String,java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . put ( STRING_1 , TYPE_2 . toString ( ( ( VAR_2 < java.lang.Integer > METHOD_2 ( VAR_3 ) ) * INT_1 ) ) ) )  VAR_1 . put ( STRING_1 , TYPE_2 . toString ( ( ( VAR_2 < java.lang.Integer > METHOD_2 ( VAR_3 ) ) * INT_1 ) ) ) (  VAR_1 . put ( STRING_2 , TYPE_2 . toString ( ( ( VAR_2 < java.lang.Integer > METHOD_2 ( VAR_4 ) ) * INT_1 ) ) ) )  VAR_1 . put ( STRING_2 , TYPE_2 . toString ( ( ( VAR_2 < java.lang.Integer > METHOD_2 ( VAR_4 ) ) * INT_1 ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME result ) NAME result ( INIT = true ) INIT = true ) VAR VAR ( IF IF ( COND ( TYPE_1 . METHOD_2 ( ) ) == null ) COND ( TYPE_1 . METHOD_2 ( ) ) == null ( THEN THEN (  addCanDoActionMessage ( VAR_1 ) )  addCanDoActionMessage ( VAR_1 ) (  result = false )  result = false ) THEN THEN ( ELSE ELSE ( IF IF ( COND ( ( TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ) == ( VAR_2 ) ) || ( ( TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ) == ( VAR_3 ) ) ) COND ( ( TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ) == ( VAR_2 ) ) || ( ( TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ) == ( VAR_3 ) ) ( THEN THEN (  addCanDoActionMessage ( VAR_4 ) )  addCanDoActionMessage ( VAR_4 ) (  result = false )  result = false ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME getValue ) NAME getValue ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME object ) NAME object ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_1 ( object . METHOD_2 ( ) ) ) INIT = VAR_2 . METHOD_1 ( object . METHOD_2 ( ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.ArrayList<java.lang.String> ) TYPE java.util.ArrayList<java.lang.String> ( NAME VAR_3 ) NAME VAR_3 ( INIT = new java.util.ArrayList < java.lang.String > ( ) ) INIT = new java.util.ArrayList < java.lang.String > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.network.Network ) TYPE org.ovirt.engine.core.common.businessentities.network.Network ( NAME network ) NAME network ( IN VAR_2 . METHOD_3 ( ) ) IN VAR_2 . METHOD_3 ( ) ( BLOCK BLOCK (  VAR_3 . add ( network . getName ( ) ) )  VAR_3 . add ( network . getName ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  ( ( TYPE_3 ) ( METHOD_4 ( ) ) ) . METHOD_5 ( VAR_3 ) )  ( ( TYPE_3 ) ( METHOD_4 ( ) ) ) . METHOD_5 ( VAR_3 ) (  return VAR_3 . isEmpty ( ) ? STRING_1 : VAR_3 . get ( 0 ) ; )  return VAR_3 . isEmpty ( ) ? STRING_1 : VAR_3 . get ( 0 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDSGroup> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDSGroup> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ) TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ( NAME cluster ) NAME cluster ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( IF IF ( COND ( cluster . getStoragePoolId ( ) ) != null ) COND ( cluster . getStoragePoolId ( ) ) != null ( THEN THEN ( IF IF ( COND org.ovirt.engine.core.compat.Guid . METHOD_2 ( cluster . getId ( ) , vm . METHOD_3 ( ) . getValue ( ) ) ) COND org.ovirt.engine.core.compat.Guid . METHOD_2 ( cluster . getId ( ) , vm . METHOD_3 ( ) . getValue ( ) ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_4 ( ( ( java.lang.String ) ( returnValue ) ) ) )  METHOD_4 ( ( ( java.lang.String ) ( returnValue ) ) ) ) BLOCK BLOCK ) METHOD METHOD (  TYPE_1 . METHOD_3 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { METHOD_4 ( ( ( java.lang.String ) ( returnValue ) ) ) ; } } ) ) )  TYPE_1 . METHOD_3 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { METHOD_4 ( ( ( java.lang.String ) ( returnValue ) ) ) ; } } ) ) (  METHOD_5 ( ) )  METHOD_5 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.Object[] ) TYPE java.lang.Object[] ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( java.lang.Object [ ] ) ( target ) ) ) INIT = ( ( java.lang.Object [ ] ) ( target ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_1 ) ( VAR_1 [ 0 ] ) ) ) INIT = ( ( TYPE_1 ) ( VAR_1 [ 0 ] ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( ( TYPE_2 ) ( VAR_1 [ 1 ] ) ) ) INIT = ( ( TYPE_2 ) ( VAR_1 [ 1 ] ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_3> ) TYPE java.util.List<TYPE_3> ( NAME VAR_4 ) NAME VAR_4 ( INIT = ( ( java.util.List < TYPE_3 > ) ( returnValue ) ) ) INIT = ( ( java.util.List < TYPE_3 > ) ( returnValue ) ) ) VAR VAR (  VAR_2 . METHOD_2 ( VAR_3 , VAR_4 , VAR_5 ) )  VAR_2 . METHOD_2 ( VAR_3 , VAR_4 , VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( getWindow ( ) ) != null ) COND ( getWindow ( ) ) != null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < TYPE_1 > ( ) ) INIT = new java.util.ArrayList < TYPE_1 > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME item ) NAME item ( IN METHOD_2 ( ) ) IN METHOD_2 ( ) ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2<TYPE_1,org.ovirt.engine.core.common.businessentities.VmTemplate> ) TYPE TYPE_2<TYPE_1,org.ovirt.engine.core.common.businessentities.VmTemplate> ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_2 < TYPE_1 , org.ovirt.engine.core.common.businessentities.VmTemplate > ) ( item ) ) ) INIT = ( ( TYPE_2 < TYPE_1 , org.ovirt.engine.core.common.businessentities.VmTemplate > ) ( item ) ) ) VAR VAR (  VAR_1 . add ( VAR_2 . METHOD_3 ( ) ) )  VAR_1 . add ( VAR_2 . METHOD_3 ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME model ) NAME model ( INIT = new TYPE_3 ( this , VAR_1 , true ) ) INIT = new TYPE_3 ( this , VAR_1 , true ) ) VAR VAR (  METHOD_4 ( model ) )  METHOD_4 ( model ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_6 ) NAME VAR_6 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_7 ) NAME VAR_7 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_7 . METHOD_2 ( id ) )  VAR_7 . METHOD_2 ( id ) (  VAR_7 . METHOD_3 ( VAR_1 ) )  VAR_7 . METHOD_3 ( VAR_1 ) (  VAR_7 . METHOD_4 ( VAR_2 ) )  VAR_7 . METHOD_4 ( VAR_2 ) (  VAR_7 . METHOD_5 ( VAR_5 ) )  VAR_7 . METHOD_5 ( VAR_5 ) (  VAR_7 . METHOD_6 ( VAR_6 ) )  VAR_7 . METHOD_6 ( VAR_6 ) (  VAR_7 . METHOD_7 ( VAR_3 ) )  VAR_7 . METHOD_7 ( VAR_3 ) (  VAR_7 . METHOD_8 ( VAR_4 ) )  VAR_7 . METHOD_8 ( VAR_4 ) (  dao . METHOD_9 ( VAR_7 ) )  dao . METHOD_9 ( VAR_7 ) (  return VAR_7 ; )  return VAR_7 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_1 . METHOD_2 ( VAR_2 ) )  VAR_1 . METHOD_2 ( VAR_2 ) (  org.mockito.Mockito.when ( VAR_3 . get ( TYPE_2 . any ( VAR_4 . Guid class ) ) ) . thenReturn ( VAR_1 ) )  org.mockito.Mockito.when ( VAR_3 . get ( TYPE_2 . any ( VAR_4 . Guid class ) ) ) . thenReturn ( VAR_1 ) (  org.mockito.Mockito.when ( command . getStoragePoolId ( ) ) . thenReturn ( VAR_5 ) )  org.mockito.Mockito.when ( command . getStoragePoolId ( ) ) . thenReturn ( VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  TYPE_1 . getInstance ( ) . METHOD_2 ( VAR_2 . METHOD_3 ( ) ) )  TYPE_1 . getInstance ( ) . METHOD_2 ( VAR_2 . METHOD_3 ( ) ) ( IF IF ( COND ! ( VAR_3 < java.lang.Boolean > METHOD_4 ( VAR_4 ) ) ) COND ! ( VAR_3 < java.lang.Boolean > METHOD_4 ( VAR_4 ) ) ( THEN THEN (  TYPE_1 . getInstance ( ) . METHOD_5 ( TYPE_2 . getParameters ( ) . METHOD_6 ( ) . METHOD_3 ( ) ) )  TYPE_1 . getInstance ( ) . METHOD_5 ( TYPE_2 . getParameters ( ) . METHOD_6 ( ) . METHOD_3 ( ) ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  validator = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( VAR_1 , VAR_2 , cluster , VAR_3 ) ) )  validator = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( VAR_1 , VAR_2 , cluster , VAR_3 ) ) (  org.mockito.Mockito.doReturn ( false ) . when ( validator ) . METHOD_3 ( TYPE_2 . any ( ) ) )  org.mockito.Mockito.doReturn ( false ) . when ( validator ) . METHOD_3 ( TYPE_2 . any ( ) ) (  TYPE_3 . METHOD_4 ( validator . METHOD_5 ( TYPE_4 . instance ( ) . METHOD_6 ( VAR_4 class ) ) , TYPE_5 . METHOD_7 ( VAR_5 ) ) )  TYPE_3 . METHOD_4 ( validator . METHOD_5 ( TYPE_4 . instance ( ) . METHOD_6 ( VAR_4 class ) ) , TYPE_5 . METHOD_7 ( VAR_5 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_2 . getParameters ( ) . METHOD_2 ( ) ) == null ) ? null : TYPE_2 . getParameters ( ) . METHOD_2 ( ) . getId ( ) ) INIT = ( ( TYPE_2 . getParameters ( ) . METHOD_2 ( ) ) == null ) ? null : TYPE_2 . getParameters ( ) . METHOD_2 ( ) . getId ( ) ) VAR VAR (  return TYPE_3 . METHOD_3 ( new TYPE_1 ( VAR_1 , VAR_2 . Network , TYPE_2 . METHOD_4 ( ) . METHOD_5 ( ) ) ) ; )  return TYPE_3 . METHOD_3 ( new TYPE_1 ( VAR_1 , VAR_2 . Network , TYPE_2 . METHOD_4 ( ) . METHOD_5 ( ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME context ) NAME context ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND context == null ) COND context == null ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = null ) INIT = null ) VAR VAR ( IF IF ( COND ( context != null ) && ( context . METHOD_2 ( ) ) ) COND ( context != null ) && ( context . METHOD_2 ( ) ) ( THEN THEN ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = context . METHOD_3 ( ) ) INIT = context . METHOD_3 ( ) ) VAR VAR ( IF IF ( COND VAR_4 != null ) COND VAR_4 != null ( THEN THEN (  VAR_3 = TYPE_4 . METHOD_4 ( VAR_4 , VAR_1 , VAR_2 ) )  VAR_3 = TYPE_4 . METHOD_4 ( VAR_4 , VAR_1 , VAR_2 ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME iface ) NAME iface ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  METHOD_3 ( iface , false , iface . METHOD_4 ( ) , iface . METHOD_5 ( ) , ( ( iface . METHOD_6 ( ) ) + 1 ) , iface . METHOD_7 ( ) ) )  METHOD_3 ( iface , false , iface . METHOD_4 ( ) , iface . METHOD_5 ( ) , ( ( iface . METHOD_6 ( ) ) + 1 ) , iface . METHOD_7 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME storageDomain ) NAME storageDomain ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( storageDomain ) ) INIT = METHOD_2 ( storageDomain ) ) VAR VAR ( IF IF ( COND VAR_1 > 0 ) COND VAR_1 > 0 ( THEN THEN ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME list ) NAME list ( INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( storageDomain . METHOD_5 ( ) ) ) INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( storageDomain . METHOD_5 ( ) ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( IN METHOD_6 ( list , storageDomain . METHOD_5 ( ) ) ) IN METHOD_6 ( list , storageDomain . METHOD_5 ( ) ) ( BLOCK BLOCK (  org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . METHOD_7 ( VAR_2 . METHOD_8 ( ) ) )  org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . METHOD_7 ( VAR_2 . METHOD_8 ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND source == null ) COND source == null ( THEN THEN (  return new java.util.HashMap < org.ovirt.engine.core.common.businessentities.network.Network , TYPE_1 < org.ovirt.engine.core.compat.Guid > > ( ) ; )  return new java.util.HashMap < org.ovirt.engine.core.common.businessentities.network.Network , TYPE_1 < org.ovirt.engine.core.compat.Guid > > ( ) ; ) THEN THEN ) IF IF (  return source ; )  return source ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.HashMap < org.ovirt.engine.core.common.businessentities.network.Network , TYPE_1 < org.ovirt.engine.core.compat.Guid > > ( ) ; } return source ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.HashMap < org.ovirt.engine.core.common.businessentities.network.Network , TYPE_1 < org.ovirt.engine.core.compat.Guid > > ( ) ; } return source ; } } (  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( null , org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , VAR_1 , VAR_2 ) ) ) )  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( null , org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , VAR_1 , VAR_2 ) ) ) (  METHOD_4 ( ) )  METHOD_4 ( ) (  METHOD_5 ( true , null , VAR_3 ) )  METHOD_5 ( true , null , VAR_3 ) (  cmd . METHOD_6 ( ) )  cmd . METHOD_6 ( ) (  org.mockito.Mockito . METHOD_7 ( VAR_4 , org.mockito.Mockito . METHOD_8 ( 2 ) ) . METHOD_9 ( TYPE_3 . any ( VAR_5 class ) ) )  org.mockito.Mockito . METHOD_7 ( VAR_4 , org.mockito.Mockito . METHOD_8 ( 2 ) ) . METHOD_9 ( TYPE_3 . any ( VAR_5 class ) ) (  TYPE_4 . assertEquals ( cmd . METHOD_10 ( ) , VAR_6 ) )  TYPE_4 . assertEquals ( cmd . METHOD_10 ( ) , VAR_6 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDSGroup> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDSGroup> ( NAME result ) NAME result ( INIT = dao . METHOD_2 ( VAR_1 . getId ( ) ) ) INIT = dao . METHOD_2 ( VAR_1 . getId ( ) ) ) VAR VAR (  TYPE_1 . METHOD_3 ( result ) )  TYPE_1 . METHOD_3 ( result ) (  TYPE_1 . METHOD_4 ( result . isEmpty ( ) ) )  TYPE_1 . METHOD_4 ( result . isEmpty ( ) ) ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ) TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ( NAME VAR_2 ) NAME VAR_2 ( IN result ) IN result ( BLOCK BLOCK (  TYPE_1 . assertEquals ( VAR_1 . METHOD_5 ( ) , VAR_2 . METHOD_6 ( ) ) )  TYPE_1 . assertEquals ( VAR_1 . METHOD_5 ( ) , VAR_2 . METHOD_6 ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.String> ) TYPE java.util.Map<java.lang.String,java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_2 . get ( VAR_4 ) ) INIT = VAR_2 . get ( VAR_4 ) ) VAR VAR ( IF IF ( COND TYPE_2 . isEmpty ( VAR_3 ) ) COND TYPE_2 . isEmpty ( VAR_3 ) ( THEN THEN (  return new TYPE_1 ( ) . error ( ) . METHOD_3 ( VAR_5 , STRING_1 ) ; )  return new TYPE_1 ( ) . error ( ) . METHOD_3 ( VAR_5 , STRING_1 ) ; ) THEN THEN ) IF IF ( FOR-EACH FOR-EACH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_6 ) NAME VAR_6 ( IN VAR_7 ) IN VAR_7 ( BLOCK BLOCK (  VAR_6 . METHOD_4 ( VAR_1 . METHOD_5 ( ) . METHOD_6 ( VAR_8 ) ) )  VAR_6 . METHOD_4 ( VAR_1 . METHOD_5 ( ) . METHOD_6 ( VAR_8 ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( getEntity ( ) ) == null ) COND ( getEntity ( ) ) == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ( INIT = ( ( org.ovirt.engine.core.common.businessentities.VM ) ( getEntity ( ) ) ) ) INIT = ( ( org.ovirt.engine.core.common.businessentities.VM ) ( getEntity ( ) ) ) ) VAR VAR (  super . METHOD_2 ( VAR_1 , new TYPE_1 ( vm . METHOD_3 ( ) ) ) )  super . METHOD_2 ( VAR_1 , new TYPE_1 ( vm . METHOD_3 ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1.ValidationResult ) RETURN TYPE_1.ValidationResult ( NAME validate ) NAME validate ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME value ) NAME value ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.ValidationResult ) TYPE TYPE_1.ValidationResult ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . validate ( value ) ) INIT = TYPE_2 . validate ( value ) ) VAR VAR ( IF IF ( COND ! ( VAR_1 . METHOD_1 ( ) ) ) COND ! ( VAR_1 . METHOD_1 ( ) ) ( THEN THEN (  return VAR_1 ; )  return VAR_1 ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1.ValidationResult ) TYPE TYPE_1.ValidationResult ( NAME result ) NAME result ( INIT = new TYPE_1 . ValidationResult ( ) ) INIT = new TYPE_1 . ValidationResult ( ) ) VAR VAR ( IF IF ( COND ( value != null ) && ( value instanceof java.lang.String ) ) COND ( value != null ) && ( value instanceof java.lang.String ) ( THEN THEN (  result . METHOD_2 ( METHOD_3 ( ( ( java.lang.String ) ( value ) ) ) ) )  result . METHOD_2 ( METHOD_3 ( ( ( java.lang.String ) ( value ) ) ) ) (  result . METHOD_4 ( VAR_2 ) )  result . METHOD_4 ( VAR_2 ) ) THEN THEN ) IF IF (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<TYPE_2> ) RETURN TYPE_1<TYPE_2> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_5 ( VAR_1 ) ) INIT = new TYPE_5 ( VAR_1 ) ) VAR VAR (  this . VAR_3 . METHOD_2 ( VAR_1 , VAR_2 ) )  this . VAR_3 . METHOD_2 ( VAR_1 , VAR_2 ) ( TRY TRY ( BLOCK BLOCK (  this . METHOD_3 ( ) . METHOD_4 ( TYPE_6 . METHOD_5 ( VAR_1 . METHOD_6 ( ) ) ) )  this . METHOD_3 ( ) . METHOD_4 ( TYPE_6 . METHOD_5 ( VAR_1 . METHOD_6 ( ) ) ) ) BLOCK BLOCK ( FINALLY FINALLY (  METHOD_7 ( VAR_1 , VAR_2 ) )  METHOD_7 ( VAR_1 , VAR_2 ) ) FINALLY FINALLY ) TRY TRY (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<TYPE_1.VdcActionParametersBase> ) TYPE java.util.ArrayList<TYPE_1.VdcActionParametersBase> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < TYPE_1 . VdcActionParametersBase > ( ) ) INIT = new java.util.ArrayList < TYPE_1 . VdcActionParametersBase > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_2 ) NAME VAR_2 ( IN METHOD_2 ( ) ) IN METHOD_2 ( ) ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VmTemplate ) TYPE org.ovirt.engine.core.common.businessentities.VmTemplate ( NAME template ) NAME template ( INIT = ( ( org.ovirt.engine.core.common.businessentities.VmTemplate ) ( VAR_2 ) ) ) INIT = ( ( org.ovirt.engine.core.common.businessentities.VmTemplate ) ( VAR_2 ) ) ) VAR VAR (  VAR_1 . add ( new TYPE_2 ( template . getId ( ) , getEntity ( ) . getId ( ) , pool . getId ( ) ) ) )  VAR_1 . add ( new TYPE_2 ( template . getId ( ) , getEntity ( ) . getId ( ) , pool . getId ( ) ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_3 ( VAR_3 , VAR_1 ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_3 ( VAR_3 , VAR_1 ) (  METHOD_4 ( ) )  METHOD_4 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME iface ) NAME iface ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) . get ( iface . getName ( ) ) ) INIT = METHOD_2 ( ) . get ( iface . getName ( ) ) ) VAR VAR (  return ( VAR_1 == null ) || ( ! ( iface . METHOD_3 ( ) . equals ( VAR_1 . METHOD_3 ( ) ) ) ) ; )  return ( VAR_1 == null ) || ( ! ( iface . METHOD_3 ( ) . equals ( VAR_1 . METHOD_3 ( ) ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME cluster ) NAME cluster ( INIT = METHOD_2 ( true , VAR_1 ) ) INIT = METHOD_2 ( true , VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2<org.ovirt.engine.core.compat.Guid> ) TYPE TYPE_2<org.ovirt.engine.core.compat.Guid> ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_3 . METHOD_3 ( VAR_3 , VAR_4 ) ) INIT = TYPE_3 . METHOD_3 ( VAR_3 , VAR_4 ) ) VAR VAR (  org.mockito.Mockito.doReturn ( VAR_5 ) . when ( VAR_6 ) . METHOD_4 ( VAR_3 ) )  org.mockito.Mockito.doReturn ( VAR_5 ) . when ( VAR_6 ) . METHOD_4 ( VAR_3 ) (  TYPE_4 . METHOD_5 ( VAR_7 . METHOD_6 ( cluster , VAR_2 ) . isEmpty ( ) ) )  TYPE_4 . METHOD_5 ( VAR_7 . METHOD_6 ( cluster , VAR_2 ) . isEmpty ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.network.Network ) TYPE org.ovirt.engine.core.common.businessentities.network.Network ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( STRING_1 ) ) INIT = METHOD_2 ( STRING_1 ) ) VAR VAR (  VAR_1 . METHOD_3 ( false ) )  VAR_1 . METHOD_3 ( false ) ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.network.Network ) TYPE org.ovirt.engine.core.common.businessentities.network.Network ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( STRING_2 ) ) INIT = METHOD_2 ( STRING_2 ) ) VAR VAR (  VAR_2 . METHOD_4 ( INT_1 ) )  VAR_2 . METHOD_4 ( INT_1 ) (  METHOD_5 ( VAR_1 , VAR_2 ) )  METHOD_5 ( VAR_1 , VAR_2 ) ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ( NAME nic ) NAME nic ( INIT = METHOD_6 ( STRING_3 , VAR_1 ) ) INIT = METHOD_6 ( STRING_3 , VAR_1 ) ) VAR VAR (  METHOD_7 ( nic ) )  METHOD_7 ( nic ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_8 ( METHOD_9 ( nic , METHOD_10 ( nic . getName ( ) , VAR_2 . METHOD_11 ( ) , VAR_2 . getName ( ) ) ) ) ) INIT = METHOD_8 ( METHOD_9 ( nic , METHOD_10 ( nic . getName ( ) , VAR_2 . METHOD_11 ( ) , VAR_2 . getName ( ) ) ) ) ) VAR VAR (  METHOD_12 ( VAR_3 ) )  METHOD_12 ( VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( ) )  VAR_1 . METHOD_2 ( ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ( INIT = TYPE_2 . getModel ( 0 ) ) INIT = TYPE_2 . getModel ( 0 ) ) VAR VAR (  model . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_2 [ 2 ] ) ) )  model . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_2 [ 2 ] ) ) (  model . METHOD_5 ( TYPE_3 . METHOD_6 ( ) ) )  model . METHOD_5 ( TYPE_3 . METHOD_6 ( ) ) ( TRY TRY ( BLOCK BLOCK (  METHOD_7 ( resource . METHOD_8 ( model ) , 0 ) )  METHOD_7 ( resource . METHOD_8 ( model ) , 0 ) (  METHOD_9 ( STRING_1 ) )  METHOD_9 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_3 ) NAME VAR_3 ( BLOCK BLOCK (  METHOD_10 ( VAR_3 , VAR_4 ) )  METHOD_10 ( VAR_3 , VAR_4 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_1 instanceof java.util.ArrayList ) ) COND ! ( VAR_1 instanceof java.util.ArrayList ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.compat.Guid> ) TYPE java.util.ArrayList<org.ovirt.engine.core.compat.Guid> ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ) ( VAR_1 ) ) ) INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ) ( VAR_1 ) ) ) VAR VAR (  return ( ( VAR_2 != null ) && ( ( VAR_2 . size ( ) ) == ( VAR_3 . size ( ) ) ) ) && ( VAR_3 . METHOD_2 ( VAR_2 ) ) ; )  return ( ( VAR_2 != null ) && ( ( VAR_2 . size ( ) ) == ( VAR_3 . size ( ) ) ) ) && ( VAR_3 . METHOD_2 ( VAR_2 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME validate ) NAME validate ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.ValidationResult ) TYPE TYPE_1.ValidationResult ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_1 . METHOD_1 ( ) ) ) COND ! ( VAR_1 . METHOD_1 ( ) ) ( THEN THEN (  VAR_2 . add ( VAR_1 . METHOD_2 ( ) . name ( ) ) )  VAR_2 . add ( VAR_1 . METHOD_2 ( ) . name ( ) ) ( IF IF ( COND ( VAR_1 . METHOD_3 ( ) ) != null ) COND ( VAR_1 . METHOD_3 ( ) ) != null ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_1 . METHOD_3 ( ) ) IN VAR_1 . METHOD_3 ( ) ( BLOCK BLOCK (  VAR_2 . add ( VAR_3 ) )  VAR_2 . add ( VAR_3 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return VAR_1 . METHOD_1 ( ) ; )  return VAR_1 . METHOD_1 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_2 ) ( dao ) ) . METHOD_2 ( true , false , STRING_1 ) ) INIT = ( ( TYPE_2 ) ( dao ) ) . METHOD_2 ( true , false , STRING_1 ) ) VAR VAR (  TYPE_3 . METHOD_3 ( VAR_1 ) )  TYPE_3 . METHOD_3 ( VAR_1 ) (  TYPE_3 . assertEquals ( 1 , VAR_1 . size ( ) ) )  TYPE_3 . assertEquals ( 1 , VAR_1 . size ( ) ) (  TYPE_3 . assertEquals ( VAR_2 , VAR_1 . get ( 0 ) . getId ( ) ) )  TYPE_3 . assertEquals ( VAR_2 , VAR_1 . get ( 0 ) . getId ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) . METHOD_3 ( ) ) INIT = METHOD_2 ( ) . METHOD_3 ( ) ) VAR VAR ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_3 < TYPE_2 > ( ) ) INIT = new TYPE_3 < TYPE_2 > ( ) ) VAR VAR (  VAR_2 . add ( METHOD_4 ( ) ) )  VAR_2 . add ( METHOD_4 ( ) ) (  METHOD_2 ( ) . setItems ( VAR_2 ) )  METHOD_2 ( ) . setItems ( VAR_2 ) ) THEN THEN ( ELSE ELSE ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  VAR_3 . METHOD_5 ( METHOD_6 ( ) . METHOD_7 ( ) , false , METHOD_6 ( ) . getId ( ) , null ) )  VAR_3 . METHOD_5 ( METHOD_6 ( ) . METHOD_7 ( ) , false , METHOD_6 ( ) . getId ( ) , null ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND name == null ) COND name == null ( THEN THEN (  throw new TYPE_2 ( java.lang.String . METHOD_2 ( STRING_1 ) ) ; )  throw new TYPE_2 ( java.lang.String . METHOD_2 ( STRING_1 ) ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . get ( name ) ) INIT = VAR_2 . get ( name ) ) VAR VAR ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  throw new TYPE_2 ( java.lang.String . METHOD_2 ( STRING_2 , name ) ) ; )  throw new TYPE_2 ( java.lang.String . METHOD_2 ( STRING_2 , name ) ) ; ) THEN THEN ) IF IF (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME setEntity ) NAME setEntity ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME value ) NAME value ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME vds ) NAME vds ( INIT = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( value ) ) ) INIT = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( value ) ) ) VAR VAR (  VAR_1 = ( ( ( vds == null ) || ( ( getEntity ( ) ) == null ) ) || ( ! ( vds . getId ( ) . equals ( getEntity ( ) . getId ( ) ) ) ) ) || ( ! ( vds . METHOD_1 ( ) . equals ( getEntity ( ) . METHOD_1 ( ) ) ) ) )  VAR_1 = ( ( ( vds == null ) || ( ( getEntity ( ) ) == null ) ) || ( ! ( vds . getId ( ) . equals ( getEntity ( ) . getId ( ) ) ) ) ) || ( ! ( vds . METHOD_1 ( ) . equals ( getEntity ( ) . METHOD_1 ( ) ) ) ) (  super . setEntity ( value ) )  super . setEntity ( value ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME parameters ) NAME parameters ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_3 . METHOD_2 ( VAR_1 , parameters . METHOD_3 ( ) . getId ( ) ) ) INIT = TYPE_3 . METHOD_2 ( VAR_1 , parameters . METHOD_3 ( ) . getId ( ) ) ) VAR VAR (  VAR_1 . METHOD_4 ( ) )  VAR_1 . METHOD_4 ( ) (  VAR_1 . METHOD_5 ( VAR_2 ) )  VAR_1 . METHOD_5 ( VAR_2 ) (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( null ) )  TYPE_1 . METHOD_2 ( null ) (  METHOD_3 ( ) )  METHOD_3 ( ) ( IF IF ( COND ( ( TYPE_1 . getVm ( ) ) != null ) && ( ( TYPE_1 . getVm ( ) . METHOD_4 ( ) ) == ( VAR_1 ) ) ) COND ( ( TYPE_1 . getVm ( ) ) != null ) && ( ( TYPE_1 . getVm ( ) . METHOD_4 ( ) ) == ( VAR_1 ) ) ( THEN THEN (  METHOD_5 ( null ) )  METHOD_5 ( null ) (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) ) THEN THEN ( ELSE ELSE (  METHOD_6 ( METHOD_7 ( ) . getId ( ) ) )  METHOD_6 ( METHOD_7 ( ) . getId ( ) ) (  VAR_2 = true )  VAR_2 = true (  TYPE_1 . METHOD_8 ( false ) )  TYPE_1 . METHOD_8 ( false ) (  TYPE_1 . log ( ) )  TYPE_1 . log ( ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_2 . METHOD_2 ( VAR_1 ) )  VAR_2 . METHOD_2 ( VAR_1 ) (  METHOD_3 ( VAR_3 , VAR_1 ) )  METHOD_3 ( VAR_3 , VAR_1 ) ( IF IF ( COND VAR_2 . isEmpty ( ) ) COND VAR_2 . isEmpty ( ) ( THEN THEN ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  TYPE_2 . log ( VAR_4 , VAR_5 ) )  TYPE_2 . log ( VAR_4 , VAR_5 ) (  return false ; )  return false ; ) THEN THEN ) IF IF (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = STRING_2 ) INIT = STRING_2 ) VAR VAR ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.Object> ) TYPE java.util.Map<java.lang.String,java.lang.Object> ( NAME VAR_3 ) NAME VAR_3 ( INIT = new java.util.HashMap ( ) ) INIT = new java.util.HashMap ( ) ) VAR VAR (  VAR_3 . put ( VAR_1 , VAR_2 ) )  VAR_3 . put ( VAR_1 , VAR_2 ) (  dao . METHOD_2 ( VAR_4 , VAR_3 ) )  dao . METHOD_2 ( VAR_4 , VAR_3 ) ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME result ) NAME result ( INIT = dao . get ( VAR_4 , VAR_1 ) ) INIT = dao . get ( VAR_4 , VAR_1 ) ) VAR VAR (  TYPE_1 . assertEquals ( result , VAR_2 ) )  TYPE_1 . assertEquals ( result , VAR_2 ) (  VAR_5 . METHOD_3 ( VAR_4 ) )  VAR_5 . METHOD_3 ( VAR_4 ) ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_6 ) NAME VAR_6 ( INIT = dao . get ( VAR_4 , VAR_1 ) ) INIT = dao . get ( VAR_4 , VAR_1 ) ) VAR VAR (  TYPE_1 . METHOD_4 ( VAR_6 ) )  TYPE_1 . METHOD_4 ( VAR_6 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN org.ovirt.engine.core.compat.Guid ) RETURN org.ovirt.engine.core.compat.Guid ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2.VdcActionType ) TYPE TYPE_2.VdcActionType ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_3 ( VAR_1 , new TYPE_4 ( VAR_2 , VAR_4 , VAR_5 , VAR_1 . METHOD_2 ( ) , TYPE_5 . getParameters ( ) , VAR_1 . METHOD_3 ( ) , TYPE_5 . METHOD_4 ( ) ) ) ) INIT = new TYPE_3 ( VAR_1 , new TYPE_4 ( VAR_2 , VAR_4 , VAR_5 , VAR_1 . METHOD_2 ( ) , TYPE_5 . getParameters ( ) , VAR_1 . METHOD_3 ( ) , TYPE_5 . METHOD_4 ( ) ) ) ) VAR VAR (  VAR_3 . METHOD_5 ( TYPE_5 . getParameters ( ) . METHOD_6 ( ) ) )  VAR_3 . METHOD_5 ( TYPE_5 . getParameters ( ) . METHOD_6 ( ) ) ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_6 ) NAME VAR_6 ( INIT = TYPE_6 . getInstance ( ) . METHOD_7 ( VAR_7 , VAR_3 , false ) ) INIT = TYPE_6 . getInstance ( ) . METHOD_7 ( VAR_7 , VAR_3 , false ) ) VAR VAR (  return VAR_6 ; )  return VAR_6 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  model . METHOD_2 ( VAR_1 [ 0 ] ) )  model . METHOD_2 ( VAR_1 [ 0 ] ) (  METHOD_3 ( METHOD_4 ( ) ) )  METHOD_3 ( METHOD_4 ( ) ) (  VAR_2 . METHOD_5 ( ) )  VAR_2 . METHOD_5 ( ) ( TRY TRY ( BLOCK BLOCK (  VAR_3 . add ( model ) )  VAR_3 . add ( model ) (  METHOD_6 ( STRING_1 ) )  METHOD_6 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( BLOCK BLOCK (  METHOD_7 ( VAR_4 , STRING_2 , STRING_3 , STRING_4 ) )  METHOD_7 ( VAR_4 , STRING_2 , STRING_3 , STRING_4 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VdsNetworkInterface> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VdsNetworkInterface> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 < org.ovirt.engine.core.common.businessentities . VdsNetworkInterface > ( ) ) INIT = new TYPE_1 < org.ovirt.engine.core.common.businessentities . VdsNetworkInterface > ( ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME VAR_3 ) NAME VAR_3 ( INIT = new org.ovirt.engine.core.common.businessentities . VdsNetworkInterface ( ) ) INIT = new org.ovirt.engine.core.common.businessentities . VdsNetworkInterface ( ) ) VAR VAR (  VAR_3 . METHOD_2 ( STRING_1 ) )  VAR_3 . METHOD_2 ( STRING_1 ) (  VAR_2 . add ( VAR_3 ) )  VAR_2 . add ( VAR_3 ) (  METHOD_3 ( VAR_4 , VAR_5 class , new java.lang.String [ ] { STRING_2 , STRING_3 } , new java.lang.Object [ ] { VAR_6 , VAR_1 } , VAR_2 ) )  METHOD_3 ( VAR_4 , VAR_5 class , new java.lang.String [ ] { STRING_2 , STRING_3 } , new java.lang.Object [ ] { VAR_6 , VAR_1 } , VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME setEntity ) NAME setEntity ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME value ) NAME value ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  super . setEntity ( value ) )  super . setEntity ( value ) ( IF IF ( COND METHOD_1 ( ) . METHOD_2 ( ) ) COND METHOD_1 ( ) . METHOD_2 ( ) ( THEN THEN (  METHOD_3 ( ( ( java.lang.Boolean ) ( value ) ) ) )  METHOD_3 ( ( ( java.lang.Boolean ) ( value ) ) ) ( IF IF ( COND ! ( ( java.lang.Boolean ) ( value ) ) ) COND ! ( ( java.lang.Boolean ) ( value ) ) ( THEN THEN (  METHOD_4 ( ) )  METHOD_4 ( ) ) THEN THEN ( ELSE ELSE (  METHOD_5 ( ) )  METHOD_5 ( ) ) ELSE ELSE ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_1 ) ( model ) ) ) INIT = ( ( TYPE_1 ) ( model ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS> ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ) ( result ) ) ) INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ) ( result ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2<org.ovirt.engine.core.common.businessentities.VDS> ) TYPE TYPE_2<org.ovirt.engine.core.common.businessentities.VDS> ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_2 . METHOD_1 ( ) ) INIT = VAR_2 . METHOD_1 ( ) ) VAR VAR ( WHILE WHILE ( COND VAR_3 . METHOD_2 ( ) ) COND VAR_3 . METHOD_2 ( ) ( BLOCK BLOCK ( IF IF ( COND ( VAR_3 . METHOD_3 ( ) . getStatus ( ) ) != ( VAR_4 ) ) COND ( VAR_3 . METHOD_3 ( ) . getStatus ( ) ) != ( VAR_4 ) ( THEN THEN (  VAR_3 . METHOD_4 ( ) )  VAR_3 . METHOD_4 ( ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) WHILE WHILE (  VAR_1 . METHOD_5 ( VAR_2 ) )  VAR_1 . METHOD_5 ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME equals ) NAME equals ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME obj ) NAME obj ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( this ) == obj ) COND ( this ) == obj ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ( IF IF ( COND ! ( super . equals ( obj ) ) ) COND ! ( super . equals ( obj ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( IF IF ( COND ! ( obj instanceof TYPE_1 ) ) COND ! ( obj instanceof TYPE_1 ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME other ) NAME other ( INIT = ( ( TYPE_1 ) ( obj ) ) ) INIT = ( ( TYPE_1 ) ( obj ) ) ) VAR VAR ( IF IF ( COND ( METHOD_1 ( ) ) != ( other . METHOD_1 ( ) ) ) COND ( METHOD_1 ( ) ) != ( other . METHOD_1 ( ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) . METHOD_3 ( ( ( command . METHOD_4 ( ) ) && ( command . METHOD_5 ( ) ) ) ) )  METHOD_2 ( ) . METHOD_3 ( ( ( command . METHOD_4 ( ) ) && ( command . METHOD_5 ( ) ) ) ) (  METHOD_2 ( ) . METHOD_6 ( command . METHOD_7 ( ) ) )  METHOD_2 ( ) . METHOD_6 ( command . METHOD_7 ( ) ) (  METHOD_2 ( ) . METHOD_8 ( command . METHOD_9 ( ) ) )  METHOD_2 ( ) . METHOD_8 ( command . METHOD_9 ( ) ) (  METHOD_2 ( ) . setTitle ( command . METHOD_9 ( ) ) )  METHOD_2 ( ) . setTitle ( command . METHOD_9 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  VAR_2 )  VAR_2 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME length ) NAME length ( INIT = 0 ) INIT = 0 ) VAR VAR (  this . VAR_3 = METHOD_2 ( VAR_1 ) )  this . VAR_3 = METHOD_2 ( VAR_1 ) (  this . VAR_4 = METHOD_2 ( VAR_1 ) )  this . VAR_4 = METHOD_2 ( VAR_1 ) (  this . VAR_5 = METHOD_3 ( VAR_1 ) )  this . VAR_5 = METHOD_3 ( VAR_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_3 ( e ) ; )  throw new TYPE_3 ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = dao . get ( VAR_2 ) ) INIT = dao . get ( VAR_2 ) ) VAR VAR (  TYPE_2 . METHOD_2 ( VAR_1 ) )  TYPE_2 . METHOD_2 ( VAR_1 ) (  TYPE_2 . METHOD_3 ( TYPE_3 . equals ( VAR_1 . METHOD_4 ( ) ) ) )  TYPE_2 . METHOD_3 ( TYPE_3 . equals ( VAR_1 . METHOD_4 ( ) ) ) (  VAR_1 . METHOD_5 ( VAR_3 ) )  VAR_1 . METHOD_5 ( VAR_3 ) (  VAR_1 . METHOD_6 ( STRING_1 ) )  VAR_1 . METHOD_6 ( STRING_1 ) (  dao . METHOD_7 ( VAR_1 ) )  dao . METHOD_7 ( VAR_1 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ( INIT = dao . get ( VAR_1 . getId ( ) ) ) INIT = dao . get ( VAR_1 . getId ( ) ) ) VAR VAR (  TYPE_2 . METHOD_2 ( result ) )  TYPE_2 . METHOD_2 ( result ) (  TYPE_2 . assertEquals ( VAR_1 , result ) )  TYPE_2 . assertEquals ( VAR_1 , result ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  METHOD_3 ( ) )  METHOD_3 ( ) ( VAR VAR ( TYPE java.util.List<TYPE_1.DiskImage> ) TYPE java.util.List<TYPE_1.DiskImage> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_4 ( ) ) INIT = TYPE_2 . METHOD_4 ( ) ) VAR VAR (  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( cmd ) . METHOD_5 ( ) )  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( cmd ) . METHOD_5 ( ) (  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( VAR_3 ) . METHOD_6 ( VAR_1 ) )  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( VAR_3 ) . METHOD_6 ( VAR_1 ) (  TYPE_3 . METHOD_7 ( cmd ) )  TYPE_3 . METHOD_7 ( cmd ) (  org.mockito.Mockito . METHOD_8 ( VAR_3 ) . METHOD_6 ( VAR_1 ) )  org.mockito.Mockito . METHOD_8 ( VAR_3 ) . METHOD_6 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME validator ) NAME validator ( INIT = new TYPE_1 ( VAR_1 , TYPE_2 . METHOD_2 ( ) . get ( METHOD_3 ( ) . getId ( ) ) ) ) INIT = new TYPE_1 ( VAR_1 , TYPE_2 . METHOD_2 ( ) . get ( METHOD_3 ( ) . getId ( ) ) ) ) VAR VAR (  return ( ( ( ( validate ( validator . METHOD_4 ( ) ) ) && ( validate ( validator . METHOD_5 ( ) ) ) ) && ( validate ( validator . METHOD_6 ( ) ) ) ) && ( validate ( validator . METHOD_7 ( ) ) ) ) && ( validate ( validator . METHOD_8 ( ) ) ) ; )  return ( ( ( ( validate ( validator . METHOD_4 ( ) ) ) && ( validate ( validator . METHOD_5 ( ) ) ) ) && ( validate ( validator . METHOD_6 ( ) ) ) ) && ( validate ( validator . METHOD_7 ( ) ) ) ) && ( validate ( validator . METHOD_8 ( ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 . getId ( ) ) == null ) COND ( VAR_1 . getId ( ) ) == null ( THEN THEN ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_2 ( VAR_1 ) ) INIT = TYPE_2 . METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN (  VAR_1 . setId ( VAR_2 . getId ( ) ) )  VAR_1 . setId ( VAR_2 . getId ( ) ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = INT_1 ) INIT = INT_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME result ) NAME result ( INIT = 1 ) INIT = 1 ) VAR VAR (  result = ( VAR_1 * result ) + ( ( VAR_2 ) == null ? 0 : VAR_2 . METHOD_1 ( ) ) )  result = ( VAR_1 * result ) + ( ( VAR_2 ) == null ? 0 : VAR_2 . METHOD_1 ( ) ) (  result = ( VAR_1 * result ) + ( ( VAR_3 ) == null ? 0 : VAR_3 . METHOD_1 ( ) ) )  result = ( VAR_1 * result ) + ( ( VAR_3 ) == null ? 0 : VAR_3 . METHOD_1 ( ) ) (  result = ( VAR_1 * result ) + ( ( source ) == null ? 0 : source . METHOD_1 ( ) ) )  result = ( VAR_1 * result ) + ( ( source ) == null ? 0 : source . METHOD_1 ( ) ) (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( ! ( METHOD_2 ( ) . isEmpty ( ) ) ) || ( VAR_2 . METHOD_3 ( ) ) ) INIT = ( ! ( METHOD_2 ( ) . isEmpty ( ) ) ) || ( VAR_2 . METHOD_3 ( ) ) ) VAR VAR (  return new TYPE_3 ( ) . METHOD_4 ( VAR_1 , getParameters ( ) . METHOD_5 ( ) , ( VAR_3 ? VAR_4 : VAR_5 ) , getParameters ( ) . METHOD_6 ( ) , TYPE_4 . getVm ( ) , true , VAR_2 . METHOD_7 ( ) , TYPE_4 . METHOD_8 ( ) ) ; )  return new TYPE_3 ( ) . METHOD_4 ( VAR_1 , getParameters ( ) . METHOD_5 ( ) , ( VAR_3 ? VAR_4 : VAR_5 ) , getParameters ( ) . METHOD_6 ( ) , TYPE_4 . getVm ( ) , true , VAR_2 . METHOD_7 ( ) , TYPE_4 . METHOD_8 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_1 . METHOD_2 ( 2 ) )  VAR_1 . METHOD_2 ( 2 ) (  VAR_1 . METHOD_3 ( new TYPE_2 ( 2 , TYPE_3 . toString ( ) ) ) )  VAR_1 . METHOD_3 ( new TYPE_2 ( 2 , TYPE_3 . toString ( ) ) ) (  VAR_1 . METHOD_4 ( 0 ) )  VAR_1 . METHOD_4 ( 0 ) (  VAR_1 . METHOD_5 ( 0 ) )  VAR_1 . METHOD_5 ( 0 ) (  VAR_1 . METHOD_6 ( METHOD_7 ( ) ) )  VAR_1 . METHOD_6 ( METHOD_7 ( ) ) (  VAR_1 . METHOD_8 ( METHOD_9 ( ) ) )  VAR_1 . METHOD_8 ( METHOD_9 ( ) ) (  return TYPE_4 . METHOD_10 ( VAR_1 ) ; )  return TYPE_4 . METHOD_10 ( VAR_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ! ( TYPE_1 . METHOD_2 ( ) ) ) COND ! ( TYPE_1 . METHOD_2 ( ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2<TYPE_3> ) TYPE TYPE_2<TYPE_3> ( NAME validator ) NAME validator ( INIT = METHOD_3 ( TYPE_1 . METHOD_4 ( ) ) ) INIT = METHOD_3 ( TYPE_1 . METHOD_4 ( ) ) ) VAR VAR (  return ( ( super . METHOD_1 ( ) ) && ( validate ( validator . METHOD_5 ( ) ) ) ) && ( validate ( validator . METHOD_6 ( ) ) ) ; )  return ( ( super . METHOD_1 ( ) ) && ( validate ( validator . METHOD_5 ( ) ) ) ) && ( validate ( validator . METHOD_6 ( ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( null ) ) INIT = METHOD_2 ( null ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_3 ( VAR_3 ) ) INIT = new TYPE_3 ( VAR_3 ) ) VAR VAR (  METHOD_3 ( 1 , VAR_2 ) )  METHOD_3 ( 1 , VAR_2 ) (  VAR_4 . METHOD_4 ( ) )  VAR_4 . METHOD_4 ( ) (  VAR_5 . METHOD_5 ( VAR_1 ) )  VAR_5 . METHOD_5 ( VAR_1 ) ( TRY TRY ( BLOCK BLOCK (  METHOD_6 ( ) )  METHOD_6 ( ) (  METHOD_7 ( STRING_1 ) )  METHOD_7 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_6 ) NAME VAR_6 ( BLOCK BLOCK (  METHOD_8 ( VAR_6 , VAR_7 , VAR_2 ) )  METHOD_8 ( VAR_6 , VAR_7 , VAR_2 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = dao . METHOD_2 ( VAR_2 ) . get ( 0 ) ) INIT = dao . METHOD_2 ( VAR_2 ) . get ( 0 ) ) VAR VAR (  TYPE_2 . METHOD_3 ( STRING_1 , VAR_1 . METHOD_4 ( ) , TYPE_3 . METHOD_5 ( TYPE_3 . METHOD_6 ( VAR_3 ) ) ) )  TYPE_2 . METHOD_3 ( STRING_1 , VAR_1 . METHOD_4 ( ) , TYPE_3 . METHOD_5 ( TYPE_3 . METHOD_6 ( VAR_3 ) ) ) (  dao . METHOD_7 ( VAR_4 , VAR_5 , VAR_3 ) )  dao . METHOD_7 ( VAR_4 , VAR_5 , VAR_3 ) (  VAR_1 = dao . METHOD_2 ( VAR_2 ) . get ( 0 ) )  VAR_1 = dao . METHOD_2 ( VAR_2 ) . get ( 0 ) (  TYPE_2 . assertEquals ( STRING_2 , VAR_1 . METHOD_4 ( ) , VAR_3 ) )  TYPE_2 . assertEquals ( STRING_2 , VAR_1 . METHOD_4 ( ) , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_3 ( VAR_2 , VAR_3 class , new java.lang.String [ ] { STRING_1 , STRING_2 , STRING_3 } , new java.lang.Object [ ] { VAR_4 [ 0 ] , VAR_4 [ 1 ] , java.lang.Boolean . FALSE } , true , true , false ) ) INIT = METHOD_3 ( VAR_2 , VAR_3 class , new java.lang.String [ ] { STRING_1 , STRING_2 , STRING_3 } , new java.lang.Object [ ] { VAR_4 [ 0 ] , VAR_4 [ 1 ] , java.lang.Boolean . FALSE } , true , true , false ) ) VAR VAR (  VAR_1 = METHOD_4 ( VAR_1 , VAR_5 , VAR_4 [ 1 ] . toString ( ) ) )  VAR_1 = METHOD_4 ( VAR_1 , VAR_5 , VAR_4 [ 1 ] . toString ( ) ) (  METHOD_5 ( VAR_1 ) )  METHOD_5 ( VAR_1 ) (  VAR_6 . METHOD_6 ( ) )  VAR_6 . METHOD_6 ( ) (  METHOD_7 ( resource . METHOD_8 ( ) ) )  METHOD_7 ( resource . METHOD_8 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<TYPE_1<org.ovirt.engine.core.compat.Guid,java.lang.Integer>> ) RETURN java.util.List<TYPE_1<org.ovirt.engine.core.compat.Guid,java.lang.Integer>> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDS> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDS> ( NAME hosts ) NAME hosts ) VAR VAR ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.Object> ) TYPE java.util.Map<java.lang.String,java.lang.Object> ( NAME parameters ) NAME parameters ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1<org.ovirt.engine.core.compat.Guid,java.lang.Integer>> ) TYPE java.util.List<TYPE_1<org.ovirt.engine.core.compat.Guid,java.lang.Integer>> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < TYPE_1 < org.ovirt.engine.core.compat.Guid , java.lang.Integer > > ( ) ) INIT = new java.util.ArrayList < TYPE_1 < org.ovirt.engine.core.compat.Guid , java.lang.Integer > > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME vds ) NAME vds ( IN hosts ) IN hosts ( BLOCK BLOCK (  VAR_1 . add ( new TYPE_1 < org.ovirt.engine.core.compat.Guid , java.lang.Integer > ( vds . getId ( ) , vds . METHOD_2 ( ) ) ) )  VAR_1 . add ( new TYPE_1 < org.ovirt.engine.core.compat.Guid , java.lang.Integer > ( vds . getId ( ) , vds . METHOD_2 ( ) ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME value ) NAME value ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( name , value ) ) INIT = new TYPE_1 ( name , value ) ) VAR VAR (  VAR_2 . METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_2 ( ) ) )  VAR_2 . METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_2 ( ) ) ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 . get ( name ) ) INIT = VAR_4 . get ( name ) ) VAR VAR ( IF IF ( COND VAR_3 == null ) COND VAR_3 == null ( THEN THEN (  VAR_4 . put ( name , new TYPE_2 < TYPE_1 > ( TYPE_3 . METHOD_4 ( VAR_1 ) ) ) )  VAR_4 . put ( name , new TYPE_2 < TYPE_1 > ( TYPE_3 . METHOD_4 ( VAR_1 ) ) ) ) THEN THEN ( ELSE ELSE (  VAR_3 . add ( VAR_1 ) )  VAR_3 . add ( VAR_1 ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_2 ( ) )  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_2 ( ) (  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( command ) . METHOD_3 ( ) )  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( command ) . METHOD_3 ( ) (  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( command ) . METHOD_4 ( ) )  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( command ) . METHOD_4 ( ) (  org.mockito.Mockito.doReturn ( null ) . when ( command ) . METHOD_5 ( TYPE_1 . any ( VAR_4 class ) ) )  org.mockito.Mockito.doReturn ( null ) . when ( command ) . METHOD_5 ( TYPE_1 . any ( VAR_4 class ) ) (  org.mockito.Mockito.doReturn ( VAR_5 ) . when ( command ) . METHOD_6 ( ) )  org.mockito.Mockito.doReturn ( VAR_5 ) . when ( command ) . METHOD_6 ( ) (  org.mockito.Mockito.doReturn ( VAR_6 ) . when ( command ) . METHOD_7 ( ) )  org.mockito.Mockito.doReturn ( VAR_6 ) . when ( command ) . METHOD_7 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN TYPE_1<org.ovirt.engine.core.common.businessentities.VM,TYPE_2> ) RETURN TYPE_1<org.ovirt.engine.core.common.businessentities.VM,TYPE_2> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<org.ovirt.engine.core.common.businessentities.VM,TYPE_2> ) TYPE TYPE_1<org.ovirt.engine.core.common.businessentities.VM,TYPE_2> ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( METHOD_3 ( ) , METHOD_4 ( ) ) ) INIT = METHOD_2 ( METHOD_3 ( ) , METHOD_4 ( ) ) ) VAR VAR (  VAR_1 . METHOD_5 ( ) . METHOD_6 ( ) . METHOD_7 ( VAR_2 ) )  VAR_1 . METHOD_5 ( ) . METHOD_6 ( ) . METHOD_7 ( VAR_2 ) (  VAR_1 . METHOD_5 ( ) . METHOD_6 ( ) . METHOD_8 ( VAR_3 ) )  VAR_1 . METHOD_5 ( ) . METHOD_6 ( ) . METHOD_8 ( VAR_3 ) (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito . METHOD_2 ( VAR_1 ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) , TYPE_1 . METHOD_5 ( STRING_1 ) , TYPE_1 . METHOD_5 ( new TYPE_2 [ ] { } ) , TYPE_1 . METHOD_5 ( new java.lang.Object [ ] { } ) , TYPE_1 . METHOD_5 ( INT_1 ) , TYPE_1 . METHOD_6 ( ) , TYPE_1 . METHOD_5 ( VAR_2 ) ) )  org.mockito.Mockito . METHOD_2 ( VAR_1 ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) , TYPE_1 . METHOD_5 ( STRING_1 ) , TYPE_1 . METHOD_5 ( new TYPE_2 [ ] { } ) , TYPE_1 . METHOD_5 ( new java.lang.Object [ ] { } ) , TYPE_1 . METHOD_5 ( INT_1 ) , TYPE_1 . METHOD_6 ( ) , TYPE_1 . METHOD_5 ( VAR_2 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_2 . METHOD_2 ( ( VAR_1 ? VAR_3 . METHOD_3 ( ) : VAR_3 . METHOD_4 ( ) ) ) )  VAR_2 . METHOD_2 ( ( VAR_1 ? VAR_3 . METHOD_3 ( ) : VAR_3 . METHOD_4 ( ) ) ) (  VAR_4 . METHOD_5 ( ( VAR_1 ? VAR_5 . METHOD_6 ( ) : VAR_5 . METHOD_7 ( ) ) ) )  VAR_4 . METHOD_5 ( ( VAR_1 ? VAR_5 . METHOD_6 ( ) : VAR_5 . METHOD_7 ( ) ) ) (  VAR_4 . METHOD_8 ( ) )  VAR_4 . METHOD_8 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ) VAR VAR ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  result = new TYPE_1 ( VAR_2 , VAR_3 ) )  result = new TYPE_1 ( VAR_2 , VAR_3 ) ) THEN THEN ( ELSE ELSE (  result = new TYPE_1 ( VAR_4 . ERROR , VAR_5 ) )  result = new TYPE_1 ( VAR_4 . ERROR , VAR_5 ) ) ELSE ELSE ) IF IF (  org.mockito.Mockito.doReturn ( result ) . when ( VAR_6 ) . METHOD_2 ( TYPE_2 . any ( VAR_7 class ) ) )  org.mockito.Mockito.doReturn ( result ) . when ( VAR_6 ) . METHOD_2 ( TYPE_2 . any ( VAR_7 class ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( aQuery.converterCallback ) == null ) COND ( aQuery.converterCallback ) == null ( THEN THEN ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND source == null ) COND source == null ( THEN THEN (  return new java.util.ArrayList < TYPE_1 > ( ) ; )  return new java.util.ArrayList < TYPE_1 > ( ) ; ) THEN THEN ) IF IF (  return source ; )  return source ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < TYPE_1 > ( ) ; } return source ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < TYPE_1 > ( ) ; } return source ; } } ) THEN THEN ) IF IF (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( VAR_1 , new TYPE_1 . DiskImage ( ) ) )  METHOD_2 ( VAR_1 , new TYPE_1 . DiskImage ( ) ) (  METHOD_3 ( ) )  METHOD_3 ( ) (  METHOD_4 ( ) )  METHOD_4 ( ) (  METHOD_5 ( false ) )  METHOD_5 ( false ) (  METHOD_6 ( ) )  METHOD_6 ( ) (  METHOD_7 ( VAR_2 ) )  METHOD_7 ( VAR_2 ) (  VAR_3 . METHOD_8 ( org.ovirt.engine.core.compat.Guid . METHOD_9 ( ) ) )  VAR_3 . METHOD_8 ( org.ovirt.engine.core.compat.Guid . METHOD_9 ( ) ) (  TYPE_2 . METHOD_10 ( command ) )  TYPE_2 . METHOD_10 ( command ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_1 ) ( model ) ) ) INIT = ( ( TYPE_1 ) ( model ) ) ) VAR VAR (  VAR_2 . setItems ( ( ( TYPE_2 ) ( ( ( TYPE_3 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) ) ) )  VAR_2 . setItems ( ( ( TYPE_2 ) ( ( ( TYPE_3 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source != null ? ( ( java.lang.String ) ( source ) ) : STRING_1 ; )  return source != null ? ( ( java.lang.String ) ( source ) ) : STRING_1 ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.String ) ( source ) ) : STRING_1 ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.String ) ( source ) ) : STRING_1 ; } } (  TYPE_1 . METHOD_2 ( new TYPE_2 ( VAR_1 , TYPE_1 . METHOD_3 ( ) ) , aQuery ) )  TYPE_1 . METHOD_2 ( new TYPE_2 ( VAR_1 , TYPE_1 . METHOD_3 ( ) ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  disk . METHOD_2 ( STRING_1 ) )  disk . METHOD_2 ( STRING_1 ) (  disk . METHOD_3 ( STRING_2 ) )  disk . METHOD_3 ( STRING_2 ) (  METHOD_4 ( disk , TYPE_1 . METHOD_5 ( STRING_1 ) , TYPE_1 . METHOD_6 ( TYPE_1 . METHOD_7 ( STRING_2 ) ) , TYPE_1 . METHOD_8 ( 2 ) ) )  METHOD_4 ( disk , TYPE_1 . METHOD_5 ( STRING_1 ) , TYPE_1 . METHOD_6 ( TYPE_1 . METHOD_7 ( STRING_2 ) ) , TYPE_1 . METHOD_8 ( 2 ) ) (  TYPE_1 . METHOD_9 ( disk ) )  TYPE_1 . METHOD_9 ( disk ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME value ) NAME value ( INIT = VAR_2 . METHOD_1 ( VAR_1 ) ) INIT = VAR_2 . METHOD_1 ( VAR_1 ) ) VAR VAR ( IF IF ( COND value == null ) COND value == null ( THEN THEN ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( STRING_1 + VAR_1 ) + STRING_2 ) INIT = ( STRING_1 + VAR_1 ) + STRING_2 ) VAR VAR (  VAR_4 . error ( VAR_3 ) )  VAR_4 . error ( VAR_3 ) (  throw new TYPE_1 ( VAR_3 ) ; )  throw new TYPE_1 ( VAR_3 ) ; ) THEN THEN ) IF IF (  return VAR_2 . METHOD_1 ( VAR_1 ) ; )  return VAR_2 . METHOD_1 ( VAR_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Version ) TYPE org.ovirt.engine.core.compat.Version ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( VAR_1 == null ) || ( ! ( VAR_1 . METHOD_2 ( ) ) ) ) || ( ! ( VAR_1 . METHOD_3 ( ) ) ) ) COND ( ( VAR_1 == null ) || ( ! ( VAR_1 . METHOD_2 ( ) ) ) ) || ( ! ( VAR_1 . METHOD_3 ( ) ) ) ( THEN THEN (  return VAR_3 ; )  return VAR_3 ; ) THEN THEN ( ELSE ELSE ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_4 . METHOD_4 ( VAR_1 ) ) INIT = TYPE_4 . METHOD_4 ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_4 == null ) COND VAR_4 == null ( THEN THEN (  return TYPE_4 . METHOD_5 ( VAR_2 ) ; )  return TYPE_4 . METHOD_5 ( VAR_2 ) ; ) THEN THEN ( ELSE ELSE (  return TYPE_4 . METHOD_6 ( VAR_4 ) ; )  return TYPE_4 . METHOD_6 ( VAR_4 ) ; ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( java.lang.Boolean ) ( TYPE_2 . METHOD_3 ( VAR_3 , VAR_1 . METHOD_4 ( ) . toString ( ) ) ) ) ) INIT = ( ( java.lang.Boolean ) ( TYPE_2 . METHOD_3 ( VAR_3 , VAR_1 . METHOD_4 ( ) . toString ( ) ) ) ) ) VAR VAR (  METHOD_5 ( VAR_2 ) )  METHOD_5 ( VAR_2 ) ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_4 ) NAME VAR_4 ( INIT = ( ( java.lang.Boolean ) ( TYPE_2 . METHOD_3 ( VAR_5 , VAR_1 . METHOD_4 ( ) . toString ( ) ) ) ) ) INIT = ( ( java.lang.Boolean ) ( TYPE_2 . METHOD_3 ( VAR_5 , VAR_1 . METHOD_4 ( ) . toString ( ) ) ) ) ) VAR VAR (  METHOD_6 ( VAR_4 ) )  METHOD_6 ( VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<org.ovirt.engine.core.compat.Guid,org.ovirt.engine.core.common.businessentities.StorageDomain> ) TYPE java.util.Map<org.ovirt.engine.core.compat.Guid,org.ovirt.engine.core.common.businessentities.StorageDomain> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( ) ) ) INIT = TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3<TYPE_4> ) TYPE TYPE_3<TYPE_4> ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_3 . METHOD_4 ( VAR_3 ) ) INIT = TYPE_3 . METHOD_4 ( VAR_3 ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_5.DiskImage> ) TYPE java.util.List<TYPE_5.DiskImage> ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_6 . METHOD_5 ( TYPE_2 . METHOD_6 ( ) , true , false , false ) ) INIT = TYPE_6 . METHOD_5 ( TYPE_2 . METHOD_6 ( ) , true , false , false ) ) VAR VAR (  VAR_5 = TYPE_6 . METHOD_7 ( VAR_4 , VAR_1 , VAR_2 ) )  VAR_5 = TYPE_6 . METHOD_7 ( VAR_4 , VAR_1 , VAR_2 ) (  return validate ( new TYPE_7 ( VAR_4 ) . METHOD_8 ( VAR_5 , VAR_1 , VAR_6 , VAR_2 ) ) ; )  return validate ( new TYPE_7 ( VAR_4 ) . METHOD_8 ( VAR_5 , VAR_1 , VAR_6 , VAR_2 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , null , VAR_1 , VAR_2 ) , null ) ) )  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , null , VAR_1 , VAR_2 ) , null ) ) (  METHOD_4 ( ) )  METHOD_4 ( ) (  METHOD_5 ( true , null , VAR_3 ) )  METHOD_5 ( true , null , VAR_3 ) (  cmd . METHOD_6 ( ) )  cmd . METHOD_6 ( ) (  org.mockito.Mockito . METHOD_7 ( VAR_4 , org.mockito.Mockito . METHOD_8 ( INT_1 ) ) . METHOD_9 ( TYPE_3 . any ( VAR_5 class ) ) )  org.mockito.Mockito . METHOD_7 ( VAR_4 , org.mockito.Mockito . METHOD_8 ( INT_1 ) ) . METHOD_9 ( TYPE_3 . any ( VAR_5 class ) ) (  TYPE_4 . assertEquals ( cmd . METHOD_10 ( ) , VAR_6 ) )  TYPE_4 . assertEquals ( cmd . METHOD_10 ( ) , VAR_6 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1.VdcActionParametersBase ) RETURN TYPE_1.VdcActionParametersBase ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.VdcActionType ) TYPE TYPE_1.VdcActionType ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1.VdcActionParametersBase ) TYPE TYPE_1.VdcActionParametersBase ( NAME parameters ) NAME parameters ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.VdcActionParametersBase ) TYPE TYPE_1.VdcActionParametersBase ( NAME VAR_2 ) NAME VAR_2 ( INIT = parameters . METHOD_2 ( ) ) INIT = parameters . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND ( VAR_1 == ( VAR_3 ) ) || ( VAR_2 == null ) ) COND ( VAR_1 == ( VAR_3 ) ) || ( VAR_2 == null ) ( THEN THEN (  return parameters ; )  return parameters ; ) THEN THEN ) IF IF (  VAR_2 . METHOD_3 ( parameters . METHOD_4 ( ) ) )  VAR_2 . METHOD_3 ( parameters . METHOD_4 ( ) ) (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_1 ) ( model ) ) ) INIT = ( ( TYPE_1 ) ( model ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.HashMap<java.lang.Boolean,org.ovirt.engine.core.common.businessentities.VmTemplate> ) TYPE java.util.HashMap<java.lang.Boolean,org.ovirt.engine.core.common.businessentities.VmTemplate> ( NAME map ) NAME map ( INIT = ( ( java.util.HashMap < java.lang.Boolean , org.ovirt.engine.core.common.businessentities.VmTemplate > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) ) ) INIT = ( ( java.util.HashMap < java.lang.Boolean , org.ovirt.engine.core.common.businessentities.VmTemplate > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VmTemplate> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VmTemplate> ( NAME VAR_3 ) NAME VAR_3 ( INIT = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmTemplate > ( ) ) INIT = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmTemplate > ( ) ) VAR VAR (  VAR_3 . add ( map . get ( true ) ) )  VAR_3 . add ( map . get ( true ) ) (  VAR_2 . setItems ( VAR_3 ) )  VAR_2 . setItems ( VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 . METHOD_2 ( this . VAR_2 ) ) COND VAR_1 . METHOD_2 ( this . VAR_2 ) ( THEN THEN (  return ( this . VAR_3 ) + VAR_1 ; )  return ( this . VAR_3 ) + VAR_1 ; ) THEN THEN ) IF IF (  return ( ( ( this . VAR_3 ) + ( VAR_4 ) ) + ( this . VAR_2 ) ) + VAR_1 ; )  return ( ( ( this . VAR_3 ) + ( VAR_4 ) ) + ( this . VAR_2 ) ) + VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_1 . METHOD_2 ( true ) )  VAR_1 . METHOD_2 ( true ) (  VAR_1 . METHOD_3 ( VAR_2 ) )  VAR_1 . METHOD_3 ( VAR_2 ) (  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_3 ) . METHOD_4 ( TYPE_2 . METHOD_5 ( VAR_4 ) , TYPE_2 . any ( VAR_5 class ) ) )  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_3 ) . METHOD_4 ( TYPE_2 . METHOD_5 ( VAR_4 ) , TYPE_2 . any ( VAR_5 class ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( null ) ) INIT = METHOD_2 ( null ) ) VAR VAR (  VAR_2 . add ( VAR_3 ) )  VAR_2 . add ( VAR_3 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_3 ( VAR_5 ) ) INIT = new TYPE_3 ( VAR_5 ) ) VAR VAR (  METHOD_3 ( VAR_6 , VAR_4 ) )  METHOD_3 ( VAR_6 , VAR_4 ) (  VAR_7 . METHOD_4 ( VAR_1 ) )  VAR_7 . METHOD_4 ( VAR_1 ) ( TRY TRY ( BLOCK BLOCK (  METHOD_5 ( ) )  METHOD_5 ( ) (  TYPE_4 . METHOD_6 ( STRING_1 ) )  TYPE_4 . METHOD_6 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_8 ) NAME VAR_8 ( BLOCK BLOCK (  METHOD_7 ( VAR_8 , VAR_9 , VAR_4 ) )  METHOD_7 ( VAR_8 , VAR_9 , VAR_4 ) ) BLOCK BLOCK ) CATCH CATCH ( FINALLY FINALLY (  VAR_2 . METHOD_8 ( ) )  VAR_2 . METHOD_8 ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( VAR_2 , VAR_3 ) )  VAR_1 . METHOD_2 ( VAR_2 , VAR_3 ) ) BLOCK BLOCK ( FINALLY FINALLY ( IF IF ( COND ( user ) != null ) COND ( user ) != null ( THEN THEN (  VAR_1 . METHOD_3 ( VAR_4 . METHOD_4 ( new TYPE_1 ( user . METHOD_5 ( ) ) ) ) )  VAR_1 . METHOD_3 ( VAR_4 . METHOD_4 ( new TYPE_1 ( user . METHOD_5 ( ) ) ) ) ) THEN THEN ) IF IF (  VAR_4 . METHOD_6 ( ) )  VAR_4 . METHOD_6 ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME entity ) NAME entity ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_1 ) ( entity ) ) ) INIT = ( ( TYPE_1 ) ( entity ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME storageDomain ) NAME storageDomain ( INIT = ( ( TYPE_2 ) ( VAR_1 . METHOD_2 ( ) . getSelectedItem ( ) ) ) ) INIT = ( ( TYPE_2 ) ( VAR_1 . METHOD_2 ( ) . getSelectedItem ( ) ) ) ) VAR VAR (  return ( ( ( org.ovirt.engine.core.common.businessentities.DiskImage ) ( VAR_1 . METHOD_3 ( ) ) ) . METHOD_4 ( ) . toString ( ) ) + ( storageDomain . getId ( ) . toString ( ) ) ; )  return ( ( ( org.ovirt.engine.core.common.businessentities.DiskImage ) ( VAR_1 . METHOD_3 ( ) ) ) . METHOD_4 ( ) . toString ( ) ) + ( storageDomain . getId ( ) . toString ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.DiskImage ) TYPE org.ovirt.engine.core.common.businessentities.DiskImage ( NAME diskImage ) NAME diskImage ( INIT = METHOD_2 ( VAR_1 ) ) INIT = METHOD_2 ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ( INIT = diskImage . METHOD_3 ( ) . get ( 0 ) ) INIT = diskImage . METHOD_3 ( ) . get ( 0 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME validator ) NAME validator ( INIT = METHOD_4 ( VAR_2 , TYPE_2 . getStoragePoolId ( ) . getValue ( ) ) ) INIT = METHOD_4 ( VAR_2 , TYPE_2 . getStoragePoolId ( ) . getValue ( ) ) ) VAR VAR (  return validate ( validator . METHOD_5 ( ) ) ; )  return validate ( validator . METHOD_5 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( ( ( VAR_1 . METHOD_3 ( VAR_2 ) ) == ( - 1 ) ) ) )  TYPE_1 . METHOD_2 ( ( ( VAR_1 . METHOD_3 ( VAR_2 ) ) == ( - 1 ) ) ) (  TYPE_1 . METHOD_2 ( ( ( VAR_2 . METHOD_3 ( VAR_1 ) ) == 1 ) ) )  TYPE_1 . METHOD_2 ( ( ( VAR_2 . METHOD_3 ( VAR_1 ) ) == 1 ) ) (  TYPE_1 . METHOD_2 ( ( ( VAR_1 . METHOD_3 ( new org.ovirt.engine.core.compat . Version ( STRING_1 ) ) ) == 0 ) ) )  TYPE_1 . METHOD_2 ( ( ( VAR_1 . METHOD_3 ( new org.ovirt.engine.core.compat . Version ( STRING_1 ) ) ) == 0 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( java.lang.String ) ( result ) ) ) INIT = ( ( java.lang.String ) ( result ) ) ) VAR VAR ( IF IF ( COND ( VAR_1 != null ) && ( ( VAR_1 . length ( ) ) > 0 ) ) COND ( VAR_1 != null ) && ( ( VAR_1 . length ( ) ) > 0 ) ( THEN THEN (  METHOD_2 ( ) . setEntity ( result ) )  METHOD_2 ( ) . setEntity ( result ) (  METHOD_3 ( true ) )  METHOD_3 ( true ) ) THEN THEN ( ELSE ELSE (  METHOD_2 ( ) . setEntity ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_4 ( ) ) )  METHOD_2 ( ) . setEntity ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_4 ( ) ) (  METHOD_3 ( false ) )  METHOD_3 ( false ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.Map<java.lang.String,org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> ) TYPE java.util.Map<java.lang.String,org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1<org.ovirt.engine.core.common.businessentities.network.Network> ) TYPE TYPE_1<org.ovirt.engine.core.common.businessentities.network.Network> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.network.Network ) TYPE org.ovirt.engine.core.common.businessentities.network.Network ( NAME network ) NAME network ( INIT = VAR_2 . get ( VAR_4 . METHOD_2 ( ) ) ) INIT = VAR_2 . get ( VAR_4 . METHOD_2 ( ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_3 . get ( network . METHOD_3 ( ) ) ) INIT = VAR_3 . get ( network . METHOD_3 ( ) ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ( NAME nic ) NAME nic ( INIT = METHOD_4 ( VAR_1 , VAR_2 , VAR_4 ) ) INIT = METHOD_4 ( VAR_1 , VAR_2 , VAR_4 ) ) VAR VAR ( IF IF ( COND nic != null ) COND nic != null ( THEN THEN ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_6 ) NAME VAR_6 ( INIT = METHOD_5 ( network , VAR_5 , nic ) . METHOD_6 ( ) ) INIT = METHOD_5 ( network , VAR_5 , nic ) . METHOD_6 ( ) ) VAR VAR (  VAR_4 . METHOD_7 ( VAR_6 ) )  VAR_4 . METHOD_7 ( VAR_6 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( STRING_1 , null ) ) INIT = METHOD_2 ( STRING_1 , null ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( STRING_2 , null ) ) INIT = METHOD_2 ( STRING_2 , null ) ) VAR VAR (  VAR_2 . METHOD_3 ( STRING_3 ) )  VAR_2 . METHOD_3 ( STRING_3 ) (  cmd = org.mockito.Mockito . METHOD_4 ( new TYPE_2 ( new TYPE_3 ( VAR_3 , STRING_4 , STRING_5 , VAR_4 , null , null , TYPE_4 . METHOD_5 ( VAR_1 , VAR_2 ) ) , null ) ) )  cmd = org.mockito.Mockito . METHOD_4 ( new TYPE_2 ( new TYPE_3 ( VAR_3 , STRING_4 , STRING_5 , VAR_4 , null , null , TYPE_4 . METHOD_5 ( VAR_1 , VAR_2 ) ) , null ) ) (  METHOD_6 ( cmd , VAR_5 ) )  METHOD_6 ( cmd , VAR_5 ) (  TYPE_5 . METHOD_7 ( cmd . validate ( ) ) )  TYPE_5 . METHOD_7 ( cmd . validate ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( TYPE_1 . getParameters ( ) . METHOD_3 ( ) ) )  METHOD_2 ( TYPE_1 . getParameters ( ) . METHOD_3 ( ) ) (  METHOD_4 ( TYPE_1 . getParameters ( ) . METHOD_5 ( ) ) )  METHOD_4 ( TYPE_1 . getParameters ( ) . METHOD_5 ( ) ) (  METHOD_6 ( TYPE_1 . getParameters ( ) . METHOD_7 ( ) ) )  METHOD_6 ( TYPE_1 . getParameters ( ) . METHOD_7 ( ) ) (  METHOD_8 ( TYPE_1 . getParameters ( ) . getStoragePoolId ( ) ) )  METHOD_8 ( TYPE_1 . getParameters ( ) . getStoragePoolId ( ) ) (  METHOD_9 ( TYPE_1 . getParameters ( ) . METHOD_10 ( ) ) )  METHOD_9 ( TYPE_1 . getParameters ( ) . METHOD_10 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( VAR_4 ) )  METHOD_2 ( VAR_4 ) (  METHOD_3 ( METHOD_4 ( VAR_5 , VAR_6 class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_4 } , VAR_1 , VAR_2 ) ) )  METHOD_3 ( METHOD_4 ( VAR_5 , VAR_6 class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_4 } , VAR_1 , VAR_2 ) ) ( VAR VAR ( TYPE TYPE_1.Network ) TYPE TYPE_1.Network ( NAME model ) NAME model ( INIT = getModel ( 0 ) ) INIT = getModel ( 0 ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  ( ( TYPE_2 ) ( VAR_7 ) ) . add ( model ) )  ( ( TYPE_2 ) ( VAR_7 ) ) . add ( model ) (  METHOD_5 ( STRING_2 ) )  METHOD_5 ( STRING_2 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_8 ) NAME VAR_8 ( BLOCK BLOCK (  METHOD_6 ( VAR_8 , VAR_3 ) )  METHOD_6 ( VAR_8 , VAR_3 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN org.ovirt.engine.core.common.businessentities.StoragePool ) RETURN org.ovirt.engine.core.common.businessentities.StoragePool ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Version ) TYPE org.ovirt.engine.core.compat.Version ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ( INIT = org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) INIT = org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StoragePool ) TYPE org.ovirt.engine.core.common.businessentities.StoragePool ( NAME VAR_3 ) NAME VAR_3 ( INIT = new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ) VAR VAR (  VAR_3 . setId ( VAR_2 ) )  VAR_3 . setId ( VAR_2 ) (  VAR_3 . METHOD_3 ( VAR_1 ) )  VAR_3 . METHOD_3 ( VAR_1 ) (  VAR_3 . METHOD_4 ( VAR_4 ) )  VAR_3 . METHOD_4 ( VAR_4 ) (  org.mockito.Mockito.when ( VAR_5 . get ( VAR_2 ) ) . thenReturn ( VAR_3 ) )  org.mockito.Mockito.when ( VAR_5 . get ( VAR_2 ) ) . thenReturn ( VAR_3 ) (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.StorageDomain ) TYPE TYPE_1.StorageDomain ( NAME storageDomain ) NAME storageDomain ( INIT = new TYPE_1 . StorageDomain ( ) ) INIT = new TYPE_1 . StorageDomain ( ) ) VAR VAR (  storageDomain . setId ( VAR_1 ) )  storageDomain . setId ( VAR_1 ) (  storageDomain . METHOD_2 ( new TYPE_2 ( ) ) )  storageDomain . METHOD_2 ( new TYPE_2 ( ) ) (  storageDomain . METHOD_3 ( ) . METHOD_4 ( STRING_1 ) )  storageDomain . METHOD_3 ( ) . METHOD_4 ( STRING_1 ) (  TYPE_3 . METHOD_5 ( METHOD_6 ( ) , storageDomain ) )  TYPE_3 . METHOD_5 ( METHOD_6 ( ) , storageDomain ) (  assertEquals ( VAR_2 , storageDomain . METHOD_7 ( ) ) )  assertEquals ( VAR_2 , storageDomain . METHOD_7 ( ) ) (  METHOD_8 ( storageDomain . METHOD_3 ( ) . METHOD_7 ( ) ) )  METHOD_8 ( storageDomain . METHOD_3 ( ) . METHOD_7 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME url ) NAME url ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( url , VAR_1 ) ) INIT = METHOD_2 ( url , VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_3 ( VAR_2 ) ) INIT = new TYPE_3 ( VAR_2 ) ) VAR VAR (  VAR_3 . METHOD_3 ( VAR_4 ) )  VAR_3 . METHOD_3 ( VAR_4 ) (  VAR_3 . METHOD_4 ( VAR_5 ) )  VAR_3 . METHOD_4 ( VAR_5 ) (  VAR_3 . METHOD_5 ( new TYPE_4 ( new TYPE_5 ( METHOD_6 ( url ) , METHOD_7 ( url , VAR_1 ) ) ) , VAR_6 ) )  VAR_3 . METHOD_5 ( new TYPE_4 ( new TYPE_5 ( METHOD_6 ( url ) , METHOD_7 ( url , VAR_1 ) ) ) , VAR_6 ) (  new TYPE_6 ( VAR_3 , VAR_7 , VAR_8 ) . METHOD_8 ( ) )  new TYPE_6 ( VAR_3 , VAR_7 , VAR_8 ) . METHOD_8 ( ) (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND source == null ) COND source == null ( THEN THEN (  return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ; )  return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ; ) THEN THEN ) IF IF (  return source ; )  return source ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ; } return source ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ; } return source ; } } (  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN java.util.Map<java.lang.String,TYPE_1<java.lang.String,java.lang.String>> ) RETURN java.util.Map<java.lang.String,TYPE_1<java.lang.String,java.lang.String>> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  return getParameters ( ) . METHOD_2 ( ) ? TYPE_2 . METHOD_3 ( TYPE_3 . METHOD_4 ( ) . toString ( ) , TYPE_4 . METHOD_5 ( VAR_1 . VM , METHOD_6 ( ) ) ) : null ; )  return getParameters ( ) . METHOD_2 ( ) ? TYPE_2 . METHOD_3 ( TYPE_3 . METHOD_4 ( ) . toString ( ) , TYPE_4 . METHOD_5 ( VAR_1 . VM , METHOD_6 ( ) ) ) : null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 < > ( ) ) INIT = new TYPE_1 < > ( ) ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME result ) NAME result ( INIT = validator . METHOD_2 ( null , VAR_1 ) ) INIT = validator . METHOD_2 ( null , VAR_1 ) ) VAR VAR (  TYPE_2 . METHOD_3 ( result ) )  TYPE_2 . METHOD_3 ( result ) (  TYPE_2 . assertEquals ( VAR_1 . size ( ) , 1 ) )  TYPE_2 . assertEquals ( VAR_1 . size ( ) , 1 ) (  TYPE_2 . assertEquals ( VAR_1 . get ( 0 ) , STRING_1 ) )  TYPE_2 . assertEquals ( VAR_1 . get ( 0 ) , STRING_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( null ) )  TYPE_1 . METHOD_2 ( null ) (  METHOD_3 ( ) )  METHOD_3 ( ) ( IF IF ( COND ( ( TYPE_1 . getVm ( ) ) != null ) && ( ( TYPE_1 . getVm ( ) . getStatus ( ) ) == ( VAR_1 ) ) ) COND ( ( TYPE_1 . getVm ( ) ) != null ) && ( ( TYPE_1 . getVm ( ) . getStatus ( ) ) == ( VAR_1 ) ) ( THEN THEN (  METHOD_4 ( null ) )  METHOD_4 ( null ) (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) ) THEN THEN ( ELSE ELSE (  TYPE_1 . METHOD_5 ( ) )  TYPE_1 . METHOD_5 ( ) (  VAR_2 = true )  VAR_2 = true ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = false ) INIT = false ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME status ) NAME status ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( IF IF ( COND status != null ) COND status != null ( THEN THEN (  VAR_2 = TYPE_2 . METHOD_3 ( VAR_1 ) . METHOD_4 ( METHOD_2 ( ) ) )  VAR_2 = TYPE_2 . METHOD_3 ( VAR_1 ) . METHOD_4 ( METHOD_2 ( ) ) ) THEN THEN ) IF IF ( IF IF ( COND ! VAR_2 ) COND ! VAR_2 ( THEN THEN ( IF IF ( COND status == ( VAR_3 ) ) COND status == ( VAR_3 ) ( THEN THEN (  return METHOD_5 ( VAR_4 ) ; )  return METHOD_5 ( VAR_4 ) ; ) THEN THEN ) IF IF (  METHOD_6 ( ) )  METHOD_6 ( ) ) THEN THEN ) IF IF (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2.AuditLogType ) TYPE TYPE_2.AuditLogType ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2.AuditLogSeverity ) TYPE TYPE_2.AuditLogSeverity ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_2 . METHOD_2 ( ) ) INIT = VAR_2 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_5 ) NAME VAR_5 ( INIT = METHOD_3 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ) INIT = METHOD_3 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ) VAR VAR ( IF IF ( COND VAR_5 == null ) COND VAR_5 == null ( THEN THEN (  VAR_6 . METHOD_4 ( STRING_1 ) )  VAR_6 . METHOD_4 ( STRING_1 ) ) THEN THEN ( ELSE ELSE (  TYPE_4 . METHOD_5 ( VAR_1 , VAR_5 ) )  TYPE_4 . METHOD_5 ( VAR_1 , VAR_5 ) (  TYPE_4 . METHOD_6 ( ) . METHOD_7 ( ) . METHOD_8 ( VAR_5 ) )  TYPE_4 . METHOD_6 ( ) . METHOD_7 ( ) . METHOD_8 ( VAR_5 ) (  METHOD_9 ( VAR_4 , TYPE_4 . METHOD_10 ( VAR_3 , VAR_5 ) ) )  METHOD_9 ( VAR_4 , TYPE_4 . METHOD_10 ( VAR_3 , VAR_5 ) ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( null ) ) INIT = METHOD_2 ( null ) ) VAR VAR (  VAR_2 . add ( VAR_3 ) )  VAR_2 . add ( VAR_3 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_3 ( VAR_5 ) ) INIT = new TYPE_3 ( VAR_5 ) ) VAR VAR (  METHOD_3 ( VAR_4 ) )  METHOD_3 ( VAR_4 ) (  VAR_6 . METHOD_4 ( VAR_1 ) )  VAR_6 . METHOD_4 ( VAR_1 ) (  VAR_7 . METHOD_5 ( ) )  VAR_7 . METHOD_5 ( ) ( TRY TRY ( BLOCK BLOCK (  METHOD_6 ( ) )  METHOD_6 ( ) (  METHOD_7 ( STRING_1 ) )  METHOD_7 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_8 ) NAME VAR_8 ( BLOCK BLOCK (  METHOD_8 ( VAR_8 , VAR_9 , VAR_4 ) )  METHOD_8 ( VAR_8 , VAR_9 , VAR_4 ) ) BLOCK BLOCK ) CATCH CATCH ( FINALLY FINALLY (  VAR_2 . METHOD_9 ( ) )  VAR_2 . METHOD_9 ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) ( IF IF ( COND TYPE_1 . METHOD_2 ( ) ) COND TYPE_1 . METHOD_2 ( ) ( THEN THEN (  TYPE_1 . METHOD_3 ( ) . METHOD_4 ( VAR_1 . METHOD_5 ( ) , VAR_1 . METHOD_6 ( ) ) )  TYPE_1 . METHOD_3 ( ) . METHOD_4 ( VAR_1 . METHOD_5 ( ) , VAR_1 . METHOD_6 ( ) ) ) THEN THEN ) IF IF (  METHOD_7 ( TYPE_1 . METHOD_8 ( ) . getId ( ) ) )  METHOD_7 ( TYPE_1 . METHOD_8 ( ) . getId ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND METHOD_2 ( ) ) COND METHOD_2 ( ) ( THEN THEN ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_3 ( ) ) INIT = METHOD_3 ( ) ) VAR VAR ( IF IF ( COND ( TYPE_1 . METHOD_4 ( ) . METHOD_5 ( VAR_1 , this , this . METHOD_6 ( ) , VAR_2 ) ) == null ) COND ( TYPE_1 . METHOD_4 ( ) . METHOD_5 ( VAR_1 , this , this . METHOD_6 ( ) , VAR_2 ) ) == null ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF (  return false ; )  return false ; ) THEN THEN ) IF IF (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN TYPE_1<TYPE_2> ) RETURN TYPE_1<TYPE_2> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) ) INIT = VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) ) VAR VAR (  return ( VAR_1 != null ) && ( ( VAR_1 . METHOD_4 ( ) ) != null ) ? VAR_1 . METHOD_4 ( ) : new java.util.ArrayList < TYPE_2 > ( ) ; )  return ( VAR_1 != null ) && ( ( VAR_1 . METHOD_4 ( ) ) != null ) ? VAR_1 . METHOD_4 ( ) : new java.util.ArrayList < TYPE_2 > ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( VAR_1 != null ) && ( ( VAR_1 . METHOD_2 ( ) ) == ( VAR_2 ) ) ) && ( ( VAR_1 . METHOD_3 ( ) ) == ( VAR_3 ) ) ) COND ( ( VAR_1 != null ) && ( ( VAR_1 . METHOD_2 ( ) ) == ( VAR_2 ) ) ) && ( ( VAR_1 . METHOD_3 ( ) ) == ( VAR_3 ) ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ( INIT = org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) INIT = org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) VAR VAR (  org.mockito.Mockito . METHOD_3 ( ) . when ( VAR_2 ) . METHOD_4 ( VAR_1 ) )  org.mockito.Mockito . METHOD_3 ( ) . when ( VAR_2 ) . METHOD_4 ( VAR_1 ) (  VAR_2 . getParameters ( ) . METHOD_5 ( VAR_1 ) )  VAR_2 . getParameters ( ) . METHOD_5 ( VAR_1 ) (  VAR_2 . METHOD_6 ( ) )  VAR_2 . METHOD_6 ( ) (  org.mockito.Mockito . METHOD_7 ( VAR_2 , org.mockito.Mockito . METHOD_8 ( ) ) . METHOD_9 ( ) )  org.mockito.Mockito . METHOD_7 ( VAR_2 , org.mockito.Mockito . METHOD_8 ( ) ) . METHOD_9 ( ) (  org.mockito.Mockito . METHOD_7 ( VAR_2 , org.mockito.Mockito . METHOD_10 ( 1 ) ) . METHOD_4 ( VAR_1 ) )  org.mockito.Mockito . METHOD_7 ( VAR_2 , org.mockito.Mockito . METHOD_10 ( 1 ) ) . METHOD_4 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  assertEquals ( VAR_2 [ VAR_1 ] . toString ( ) , model . getId ( ) ) )  assertEquals ( VAR_2 [ VAR_1 ] . toString ( ) , model . getId ( ) ) (  assertEquals ( VAR_3 [ VAR_1 ] . toString ( ) . METHOD_2 ( ) , model . METHOD_3 ( ) ) )  assertEquals ( VAR_3 [ VAR_1 ] . toString ( ) . METHOD_2 ( ) , model . METHOD_3 ( ) ) (  METHOD_4 ( model ) )  METHOD_4 ( model ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( IN getVm ( ) . METHOD_2 ( ) ) IN getVm ( ) . METHOD_2 ( ) ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 . METHOD_3 ( ) ) == ( VAR_2 ) ) COND ( VAR_1 . METHOD_3 ( ) ) == ( VAR_2 ) ( THEN THEN (  return VAR_1 ; )  return VAR_1 ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  VAR_3 . METHOD_4 ( STRING_1 , METHOD_5 ( ) ) )  VAR_3 . METHOD_4 ( STRING_1 , METHOD_5 ( ) ) (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME vds ) NAME vds ( INIT = null ) INIT = null ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ( INIT = new org.ovirt.engine.core.common.businessentities.VM ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.VM ( ) ) VAR VAR (  vm . METHOD_2 ( VAR_2 ) )  vm . METHOD_2 ( VAR_2 ) ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_3 ) NAME VAR_3 ( INIT = null ) INIT = null ) VAR VAR (  VAR_1 . METHOD_3 ( vds ) )  VAR_1 . METHOD_3 ( vds ) (  VAR_1 . METHOD_4 ( VAR_3 ) )  VAR_1 . METHOD_4 ( VAR_3 ) (  VAR_1 . METHOD_5 ( vm ) )  VAR_1 . METHOD_5 ( vm ) ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_1 . METHOD_6 ( ) ) INIT = VAR_1 . METHOD_6 ( ) ) VAR VAR (  TYPE_3 . METHOD_7 ( VAR_4 ) )  TYPE_3 . METHOD_7 ( VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1<TYPE_2.DiskImage> ) RETURN TYPE_1<TYPE_2.DiskImage> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<TYPE_2.DiskImage> ) TYPE TYPE_1<TYPE_2.DiskImage> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_3 < > ( ) ) INIT = new TYPE_3 < > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ( IN TYPE_4 . getParameters ( ) . METHOD_2 ( ) . METHOD_3 ( ) ) IN TYPE_4 . getParameters ( ) . METHOD_2 ( ) . METHOD_3 ( ) ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2.DiskImage ) TYPE TYPE_2.DiskImage ( NAME diskImage ) NAME diskImage ( INIT = new TYPE_2 . DiskImage ( ) ) INIT = new TYPE_2 . DiskImage ( ) ) VAR VAR (  diskImage . METHOD_4 ( new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( TYPE_5 . METHOD_5 ( VAR_2 ) ) ) )  diskImage . METHOD_4 ( new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( TYPE_5 . METHOD_5 ( VAR_2 ) ) ) (  VAR_1 . add ( diskImage ) )  VAR_1 . add ( diskImage ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<TYPE_2.DiskImage> ) TYPE TYPE_1<TYPE_2.DiskImage> ( NAME value ) NAME value ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<TYPE_2.DiskImage> ) TYPE java.util.ArrayList<TYPE_2.DiskImage> ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( value != null ) ? VAR_2 . Linq < TYPE_2 . DiskImage > METHOD_2 ( value ) : new java.util.ArrayList < TYPE_2 . DiskImage > ( ) ) INIT = ( value != null ) ? VAR_2 . Linq < TYPE_2 . DiskImage > METHOD_2 ( value ) : new java.util.ArrayList < TYPE_2 . DiskImage > ( ) ) VAR VAR (  TYPE_3 . METHOD_3 ( VAR_1 , new TYPE_4 ( ) ) )  TYPE_3 . METHOD_3 ( VAR_1 , new TYPE_4 ( ) ) (  super . setItems ( VAR_1 ) )  super . setItems ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) . METHOD_3 ( diskImage . METHOD_4 ( ) , VAR_1 ) )  METHOD_2 ( ) . METHOD_3 ( diskImage . METHOD_4 ( ) , VAR_1 ) (  METHOD_2 ( ) . METHOD_5 ( ) )  METHOD_2 ( ) . METHOD_5 ( ) (  diskImage . METHOD_6 ( VAR_2 ) )  diskImage . METHOD_6 ( VAR_2 ) (  TYPE_2 . METHOD_7 ( diskImage . METHOD_8 ( ) , VAR_2 ) )  TYPE_2 . METHOD_7 ( diskImage . METHOD_8 ( ) , VAR_2 ) (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ( INIT = dao . get ( VAR_1 . getId ( ) ) ) INIT = dao . get ( VAR_1 . getId ( ) ) ) VAR VAR (  TYPE_2 . METHOD_2 ( result ) )  TYPE_2 . METHOD_2 ( result ) (  TYPE_2 . assertEquals ( dao . METHOD_3 ( ) , 1 ) )  TYPE_2 . assertEquals ( dao . METHOD_3 ( ) , 1 ) (  result = dao . get ( VAR_1 . getId ( ) ) )  result = dao . get ( VAR_1 . getId ( ) ) (  TYPE_2 . METHOD_4 ( result ) )  TYPE_2 . METHOD_4 ( result ) (  TYPE_2 . assertEquals ( dao . METHOD_3 ( ) , 0 ) )  TYPE_2 . assertEquals ( dao . METHOD_3 ( ) , 0 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( IF IF ( COND ( vm . METHOD_2 ( ) ) != ( VAR_2 ) ) COND ( vm . METHOD_2 ( ) ) != ( VAR_2 ) ( THEN THEN ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_3 ( ) . get ( new TYPE_2 ( disk . getId ( ) , vm . getId ( ) ) ) ) INIT = METHOD_3 ( ) . get ( new TYPE_2 ( disk . getId ( ) , vm . getId ( ) ) ) ) VAR VAR ( IF IF ( COND VAR_3 . METHOD_4 ( ) ) COND VAR_3 . METHOD_4 ( ) ( THEN THEN (  addCanDoActionMessage ( VAR_4 ) )  addCanDoActionMessage ( VAR_4 ) (  return false ; )  return false ; ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = INT_1 ) INIT = INT_1 ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = - 2 ) INIT = - 2 ) VAR VAR ) INIT INIT ( COND i > ( - INT_2 ) ) COND i > ( - INT_2 ) ( UPDATE UPDATE (  i -- )  i -- ) UPDATE UPDATE ( BLOCK BLOCK (  VAR_1 = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( i ) . METHOD_4 ( ) . toString ( ) )  VAR_1 = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( i ) . METHOD_4 ( ) . toString ( ) (  VAR_3 . put ( VAR_1 , VAR_2 ) )  VAR_3 . put ( VAR_1 , VAR_2 ) (  VAR_4 . put ( VAR_1 , VAR_1 ) )  VAR_4 . put ( VAR_1 , VAR_1 ) (  VAR_2 ++ )  VAR_2 ++ ) BLOCK BLOCK ) FOR FOR ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME equals ) NAME equals ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME obj ) NAME obj ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( this ) == obj ) COND ( this ) == obj ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ( IF IF ( COND obj == null ) COND obj == null ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( IF IF ( COND ! ( obj instanceof TYPE_1 ) ) COND ! ( obj instanceof TYPE_1 ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME other ) NAME other ( INIT = ( ( TYPE_2 ) ( obj ) ) ) INIT = ( ( TYPE_2 ) ( obj ) ) ) VAR VAR (  return ( ( super . equals ( obj ) ) && ( TYPE_3 . equals ( VAR_1 , VAR_2 ) ) ) && ( TYPE_3 . equals ( VAR_3 , VAR_4 ) ) ; )  return ( ( super . equals ( obj ) ) && ( TYPE_3 . equals ( VAR_1 , VAR_2 ) ) ) && ( TYPE_3 . equals ( VAR_3 , VAR_4 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . add ( VAR_2 ) )  VAR_1 . add ( VAR_2 ) (  VAR_3 . METHOD_2 ( METHOD_3 ( null ) ) )  VAR_3 . METHOD_2 ( METHOD_3 ( null ) ) (  METHOD_4 ( VAR_4 ) )  METHOD_4 ( VAR_4 ) ( TRY TRY ( BLOCK BLOCK (  METHOD_5 ( ) )  METHOD_5 ( ) (  TYPE_1 . METHOD_6 ( STRING_1 ) )  TYPE_1 . METHOD_6 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_5 ) NAME VAR_5 ( BLOCK BLOCK (  METHOD_7 ( VAR_5 , VAR_6 , new TYPE_3 ( VAR_7 ) ) )  METHOD_7 ( VAR_5 , VAR_6 , new TYPE_3 ( VAR_7 ) ) ) BLOCK BLOCK ) CATCH CATCH ( FINALLY FINALLY (  VAR_1 . METHOD_8 ( ) )  VAR_1 . METHOD_8 ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME disk ) NAME disk ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND disk == null ) COND disk == null ( THEN THEN (  VAR_1 . METHOD_2 ( STRING_1 ) )  VAR_1 . METHOD_2 ( STRING_1 ) (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = STRING_2 ) INIT = STRING_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = 1 ) INIT = 1 ) VAR VAR ( IF IF ( COND vm != null ) COND vm != null ( THEN THEN (  VAR_2 = vm . METHOD_3 ( ) )  VAR_2 = vm . METHOD_3 ( ) (  VAR_3 = ( vm . METHOD_4 ( ) ) + 1 )  VAR_3 = ( vm . METHOD_4 ( ) ) + 1 ) THEN THEN ) IF IF (  disk . METHOD_1 ( TYPE_2 . METHOD_5 ( disk , VAR_2 , VAR_3 ) ) )  disk . METHOD_1 ( TYPE_2 . METHOD_5 ( disk , VAR_2 , VAR_3 ) ) (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.when ( VAR_1 . get ( VAR_2 ) ) . thenReturn ( METHOD_2 ( ) ) )  org.mockito.Mockito.when ( VAR_1 . get ( VAR_2 ) ) . thenReturn ( METHOD_2 ( ) ) (  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( cmd ) . METHOD_3 ( ) )  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( cmd ) . METHOD_3 ( ) (  org.mockito.Mockito.when ( cmd . METHOD_4 ( ) ) . thenReturn ( VAR_3 ) )  org.mockito.Mockito.when ( cmd . METHOD_4 ( ) ) . thenReturn ( VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  VAR_1 . add ( STRING_1 ) )  VAR_1 . add ( STRING_1 ) (  METHOD_2 ( METHOD_3 ( ) ) )  METHOD_2 ( METHOD_3 ( ) ) (  METHOD_4 ( ) )  METHOD_4 ( ) (  METHOD_5 ( 1 ) )  METHOD_5 ( 1 ) (  METHOD_6 ( 1 ) )  METHOD_6 ( 1 ) (  VAR_2 . METHOD_7 ( ) )  VAR_2 . METHOD_7 ( ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME nic ) NAME nic ( INIT = resource . get ( ) ) INIT = resource . get ( ) ) VAR VAR (  METHOD_8 ( nic . METHOD_9 ( ) ) )  METHOD_8 ( nic . METHOD_9 ( ) ) (  METHOD_10 ( nic , 1 ) )  METHOD_10 ( nic , 1 ) (  METHOD_11 ( nic ) )  METHOD_11 ( nic ) ) BLOCK BLOCK ( FINALLY FINALLY (  VAR_1 . METHOD_12 ( ) )  VAR_1 . METHOD_12 ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME vmId ) NAME vmId ) VAR VAR ( VAR VAR ( TYPE java.util.Map<org.ovirt.engine.core.compat.Guid,java.lang.String> ) TYPE java.util.Map<org.ovirt.engine.core.compat.Guid,java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_2 . get ( VAR_4 class ) ) INIT = TYPE_2 . get ( VAR_4 class ) ) VAR VAR (  VAR_3 . METHOD_2 ( VAR_1 , vmId , new TYPE_3 < java.lang.String > ( VAR_2 . METHOD_3 ( ) ) ) )  VAR_3 . METHOD_2 ( VAR_1 , vmId , new TYPE_3 < java.lang.String > ( VAR_2 . METHOD_3 ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ( INIT = org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) INIT = org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME image ) NAME image ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  image . METHOD_3 ( VAR_2 ) )  image . METHOD_3 ( VAR_2 ) (  image . METHOD_4 ( VAR_3 ) )  image . METHOD_4 ( VAR_3 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME params ) NAME params ( INIT = new TYPE_2 ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) , image ) ) INIT = new TYPE_2 ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) , image ) ) VAR VAR (  METHOD_5 ( VAR_1 , params ) )  METHOD_5 ( VAR_1 , params ) (  TYPE_3 . METHOD_6 ( command . METHOD_7 ( ) ) )  TYPE_3 . METHOD_6 ( command . METHOD_7 ( ) ) (  TYPE_3 . METHOD_8 ( command . getReturnValue ( ) . METHOD_9 ( ) . METHOD_10 ( STRING_1 ) ) )  TYPE_3 . METHOD_8 ( command . getReturnValue ( ) . METHOD_9 ( ) . METHOD_10 ( STRING_1 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.Object> ) TYPE java.util.Map<java.lang.String,java.lang.Object> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.HashMap < > ( ) ) INIT = new java.util.HashMap < > ( ) ) VAR VAR (  VAR_1 . put ( VAR_2 , VAR_3 ) )  VAR_1 . put ( VAR_2 , VAR_3 ) (  VAR_1 . put ( VAR_4 , VAR_3 ) )  VAR_1 . put ( VAR_4 , VAR_3 ) (  VAR_1 . put ( VAR_5 , org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) )  VAR_1 . put ( VAR_5 , org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) (  VAR_1 . put ( VAR_6 , vm . METHOD_3 ( ) . toString ( ) ) )  VAR_1 . put ( VAR_6 , vm . METHOD_3 ( ) . toString ( ) ) (  VAR_1 . put ( VAR_7 , vm . getId ( ) . toString ( ) ) )  VAR_1 . put ( VAR_7 , vm . getId ( ) . toString ( ) ) (  VAR_8 . add ( VAR_1 ) )  VAR_8 . add ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( STRING_1 , VAR_1 . METHOD_3 ( STRING_2 ) . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( STRING_3 ) ) )  TYPE_1 . METHOD_2 ( STRING_1 , VAR_1 . METHOD_3 ( STRING_2 ) . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( STRING_3 ) ) (  TYPE_1 . METHOD_2 ( STRING_4 , VAR_1 . METHOD_3 ( STRING_2 ) . METHOD_7 ( ) . equals ( STRING_5 ) ) )  TYPE_1 . METHOD_2 ( STRING_4 , VAR_1 . METHOD_3 ( STRING_2 ) . METHOD_7 ( ) . equals ( STRING_5 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  TYPE_1 . METHOD_3 ( cmd . METHOD_4 ( ) ) )  TYPE_1 . METHOD_3 ( cmd . METHOD_4 ( ) ) (  org.mockito.Mockito . METHOD_5 ( VAR_1 , org.mockito.Mockito . METHOD_6 ( VAR_2 ) ) . METHOD_7 ( TYPE_2 . METHOD_8 ( ) ) )  org.mockito.Mockito . METHOD_5 ( VAR_1 , org.mockito.Mockito . METHOD_6 ( VAR_2 ) ) . METHOD_7 ( TYPE_2 . METHOD_8 ( ) ) (  org.mockito.Mockito . METHOD_5 ( VAR_1 , org.mockito.Mockito . METHOD_9 ( ) ) . METHOD_10 ( TYPE_2 . METHOD_8 ( ) ) )  org.mockito.Mockito . METHOD_5 ( VAR_1 , org.mockito.Mockito . METHOD_9 ( ) ) . METHOD_10 ( TYPE_2 . METHOD_8 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 . METHOD_2 ( ) ) != null ) COND ( VAR_1 . METHOD_2 ( ) ) != null ( THEN THEN (  return METHOD_3 ( VAR_2 ) ; )  return METHOD_3 ( VAR_2 ) ; ) THEN THEN ) IF IF ( IF IF ( COND ! ( METHOD_4 ( ) ) ) COND ! ( METHOD_4 ( ) ) ( THEN THEN (  return METHOD_3 ( VAR_3 ) ; )  return METHOD_3 ( VAR_3 ) ; ) THEN THEN ) IF IF ( IF IF ( COND ! ( TYPE_1 . METHOD_5 ( VAR_4 ) . METHOD_6 ( VAR_5 . METHOD_7 ( ) ) ) ) COND ! ( TYPE_1 . METHOD_5 ( VAR_4 ) . METHOD_6 ( VAR_5 . METHOD_7 ( ) ) ) ( THEN THEN (  return METHOD_3 ( VAR_6 ) ; )  return METHOD_3 ( VAR_6 ) ; ) THEN THEN ) IF IF (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND source != null ) COND source != null ( THEN THEN (  return ! ( ( java.lang.Boolean ) ( source ) ) ; )  return ! ( ( java.lang.Boolean ) ( source ) ) ; ) THEN THEN ) IF IF (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return ! ( ( java.lang.Boolean ) ( source ) ) ; } return false ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return ! ( ( java.lang.Boolean ) ( source ) ) ; } return false ; } } (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new TYPE_1 ( name ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new TYPE_1 ( name ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_1 ( INT_1 ) ) INIT = new TYPE_1 ( INT_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_3 . METHOD_2 ( STRING_1 ) ) INIT = TYPE_3 . METHOD_2 ( STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_4 . METHOD_3 ( VAR_1 , true ) ) INIT = VAR_4 . METHOD_3 ( VAR_1 , true ) ) VAR VAR (  TYPE_5 . METHOD_4 ( ( STRING_2 + VAR_1 ) , VAR_5 . METHOD_5 ( ) ) )  TYPE_5 . METHOD_4 ( ( STRING_2 + VAR_1 ) , VAR_5 . METHOD_5 ( ) ) ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_6 ) NAME VAR_6 ( INIT = VAR_3 . METHOD_6 ( VAR_5 , true ) ) INIT = VAR_3 . METHOD_6 ( VAR_5 , true ) ) VAR VAR (  TYPE_5 . assertEquals ( VAR_2 , VAR_6 ) )  TYPE_5 . assertEquals ( VAR_2 , VAR_6 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = null ) INIT = null ) VAR VAR ( IF IF ( COND TYPE_2 . METHOD_2 ( VAR_1 , STRING_1 ) ) COND TYPE_2 . METHOD_2 ( VAR_1 , STRING_1 ) ( THEN THEN (  VAR_2 = new TYPE_3 ( VAR_3 class ) )  VAR_2 = new TYPE_3 ( VAR_3 class ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND TYPE_2 . METHOD_2 ( VAR_1 , STRING_2 ) ) COND TYPE_2 . METHOD_2 ( VAR_1 , STRING_2 ) ( THEN THEN (  VAR_2 = new TYPE_3 ( VAR_4 class ) )  VAR_2 = new TYPE_3 ( VAR_4 class ) ) THEN THEN ( ELSE ELSE ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain> ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_1 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) INIT = ( ( TYPE_1 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ) TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME domain ) NAME domain ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK (  domain . setId ( domain . getStoragePoolId ( ) ) )  domain . setId ( domain . getStoragePoolId ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  TYPE_2 . METHOD_1 ( VAR_2 , new TYPE_3 ( ) ) )  TYPE_2 . METHOD_1 ( VAR_2 , new TYPE_3 ( ) ) (  setItems ( VAR_2 ) )  setItems ( VAR_2 ) (  METHOD_2 ( ( ( METHOD_3 ( ) . size ( ) ) == 0 ) ) )  METHOD_2 ( ( ( METHOD_3 ( ) . size ( ) ) == 0 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( VAR_4 , VAR_5 . METHOD_3 ( ) , new java.lang.String [ ] { VAR_6 } , new java.lang.Object [ ] { VAR_7 [ 1 ] } , METHOD_4 ( VAR_3 ) , VAR_2 ) )  METHOD_2 ( VAR_4 , VAR_5 . METHOD_3 ( ) , new java.lang.String [ ] { VAR_6 } , new java.lang.Object [ ] { VAR_7 [ 1 ] } , METHOD_4 ( VAR_3 ) , VAR_2 ) (  VAR_8 . METHOD_5 ( ) )  VAR_8 . METHOD_5 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND source != null ) COND source != null ( THEN THEN ( VAR VAR ( TYPE java.util.ArrayList<TYPE_1> ) TYPE java.util.ArrayList<TYPE_1> ( NAME list ) NAME list ( INIT = ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) INIT = ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) VAR VAR (  return METHOD_2 ( list , VAR_1 , VAR_2 ) ; )  return METHOD_2 ( list , VAR_1 , VAR_2 ) ; ) THEN THEN ) IF IF (  return new java.util.ArrayList < TYPE_1 > ( ) ; )  return new java.util.ArrayList < TYPE_1 > ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source != null ? source : STRING_1 ; )  return source != null ? source : STRING_1 ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : STRING_1 ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : STRING_1 ; } } ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME parameters ) NAME parameters ( INIT = new TYPE_1 ( VAR_1 ) ) INIT = new TYPE_1 ( VAR_1 ) ) VAR VAR (  parameters . METHOD_2 ( VAR_2 ) )  parameters . METHOD_2 ( VAR_2 ) (  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_3 , parameters , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_3 , parameters , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR (  VAR_1 . add ( STRING_1 ) )  VAR_1 . add ( STRING_1 ) (  TYPE_1 . METHOD_2 ( VAR_2 ) )  TYPE_1 . METHOD_2 ( VAR_2 ) (  TYPE_1 . METHOD_3 ( VAR_2 . METHOD_4 ( VAR_3 ) ) . METHOD_5 ( VAR_1 ) )  TYPE_1 . METHOD_3 ( VAR_2 . METHOD_4 ( VAR_3 ) ) . METHOD_5 ( VAR_1 ) (  resource . METHOD_6 ( METHOD_7 ( ) ) )  resource . METHOD_6 ( METHOD_7 ( ) ) (  VAR_4 . METHOD_8 ( ) )  VAR_4 . METHOD_8 ( ) (  resource . get ( ) )  resource . get ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( false , false ) )  METHOD_2 ( false , false ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME host ) NAME host ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  host . METHOD_3 ( new TYPE_2 ( ) ) )  host . METHOD_3 ( new TYPE_2 ( ) ) (  host . METHOD_4 ( ) . setId ( STRING_1 ) )  host . METHOD_4 ( ) . setId ( STRING_1 ) (  VAR_1 . METHOD_5 ( ) )  VAR_1 . METHOD_5 ( ) (  resource . METHOD_6 ( host ) )  resource . METHOD_6 ( host ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( VAR_2 ) ) INIT = METHOD_2 ( VAR_2 ) ) VAR VAR (  VAR_3 . METHOD_3 ( ) )  VAR_3 . METHOD_3 ( ) (  VAR_3 . METHOD_3 ( ) )  VAR_3 . METHOD_3 ( ) (  TYPE_2 . METHOD_4 ( STRING_1 , VAR_3 . METHOD_5 ( VAR_4 , VAR_2 ) ) )  TYPE_2 . METHOD_4 ( STRING_1 , VAR_3 . METHOD_5 ( VAR_4 , VAR_2 ) ) (  org.mockito.Mockito . METHOD_6 ( VAR_1 ) )  org.mockito.Mockito . METHOD_6 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  assertEquals ( STRING_1 , VAR_1 ) )  assertEquals ( STRING_1 , VAR_1 ) ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  METHOD_3 ( VAR_4 , VAR_5 . METHOD_4 ( ) , new java.lang.String [ ] { VAR_6 } , new java.lang.Object [ ] { VAR_7 [ 1 ] } , VAR_3 , VAR_2 ) )  METHOD_3 ( VAR_4 , VAR_5 . METHOD_4 ( ) , new java.lang.String [ ] { VAR_6 } , new java.lang.Object [ ] { VAR_7 [ 1 ] } , VAR_3 , VAR_2 ) (  VAR_8 . METHOD_5 ( ) )  VAR_8 . METHOD_5 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ( INIT = getEntity ( ) ) INIT = getEntity ( ) ) VAR VAR ( IF IF ( COND ( getWindow ( ) ) != null ) COND ( getWindow ( ) ) != null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ( INIT = TYPE_2 . METHOD_2 ( getEntity ( ) . METHOD_3 ( ) , getEntity ( ) . METHOD_4 ( ) , ( ( java.util.ArrayList < TYPE_3 > ) ( METHOD_5 ( ) ) ) , this ) ) INIT = TYPE_2 . METHOD_2 ( getEntity ( ) . METHOD_3 ( ) , getEntity ( ) . METHOD_4 ( ) , ( ( java.util.ArrayList < TYPE_3 > ) ( METHOD_5 ( ) ) ) , this ) ) VAR VAR (  METHOD_6 ( model ) )  METHOD_6 ( model ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.Boolean ) TYPE java.lang.Boolean ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( java.lang.Boolean ) ( returnValue ) ) ) INIT = ( ( java.lang.Boolean ) ( returnValue ) ) ) VAR VAR ( IF IF ( COND ! VAR_1 ) COND ! VAR_1 ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME i ) NAME i ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK ( IF IF ( COND TYPE_1 . METHOD_2 ( i . METHOD_3 ( ) , VAR_3 . getName ( ) ) ) COND TYPE_1 . METHOD_2 ( i . METHOD_3 ( ) , VAR_3 . getName ( ) ) ( THEN THEN (  VAR_4 . add ( i ) )  VAR_4 . add ( i ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF (  VAR_5 . append ( VAR_3 . getName ( ) ) )  VAR_5 . append ( VAR_3 . getName ( ) ) (  VAR_6 . METHOD_1 ( VAR_7 , VAR_4 ) )  VAR_6 . METHOD_1 ( VAR_7 , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return ( ( ( ( METHOD_2 ( ) ) != null ) && ( ( METHOD_2 ( ) . size ( ) ) > 0 ) ) && ( METHOD_3 ( VAR_1 ) ) ) && ( ( METHOD_4 ( ) ) || ( ( METHOD_5 ( ) ) && ( METHOD_6 ( ) ) ) ) ; )  return ( ( ( ( METHOD_2 ( ) ) != null ) && ( ( METHOD_2 ( ) . size ( ) ) > 0 ) ) && ( METHOD_3 ( VAR_1 ) ) ) && ( ( METHOD_4 ( ) ) || ( ( METHOD_5 ( ) ) && ( METHOD_6 ( ) ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME type ) NAME type ) VAR VAR ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.Object> ) TYPE java.util.Map<java.lang.String,java.lang.Object> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE java.lang.Boolean ) TYPE java.lang.Boolean ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return TYPE_5 . METHOD_1 ( id , VAR_1 , type , VAR_2 , VAR_3 , VAR_4 , STRING_1 , null , false ) ; )  return TYPE_5 . METHOD_1 ( id , VAR_1 , type , VAR_2 , VAR_3 , VAR_4 , STRING_1 , null , false ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( TYPE_1 . getParameters ( ) . METHOD_7 ( ) , TYPE_1 . METHOD_8 ( ) , TYPE_1 . getParameters ( ) . METHOD_9 ( ) ) ) )  TYPE_1 . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( TYPE_1 . getParameters ( ) . METHOD_7 ( ) , TYPE_1 . METHOD_8 ( ) , TYPE_1 . getParameters ( ) . METHOD_9 ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE double ) TYPE double ( NAME VAR_1 ) NAME VAR_1 ( INIT = INT_1 * ( TYPE_1 . METHOD_2 ( INT_2 , INT_3 ) ) ) INIT = INT_1 * ( TYPE_1 . METHOD_2 ( INT_2 , INT_3 ) ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_3 ( ( ( long ) ( VAR_1 ) ) , VAR_3 , VAR_4 ) . METHOD_4 ( ) ) INIT = TYPE_2 . METHOD_3 ( ( ( long ) ( VAR_1 ) ) , VAR_3 , VAR_4 ) . METHOD_4 ( ) ) VAR VAR (  TYPE_3 . assertEquals ( VAR_2 , INT_1 ) )  TYPE_3 . assertEquals ( VAR_2 , INT_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) . get ( getParameters ( ) . METHOD_3 ( ) ) ) INIT = METHOD_2 ( ) . get ( getParameters ( ) . METHOD_3 ( ) ) ) VAR VAR (  METHOD_4 ( ) . METHOD_5 ( VAR_1 , VAR_1 . getStatus ( ) ) )  METHOD_4 ( ) . METHOD_5 ( VAR_1 , VAR_1 . getStatus ( ) ) (  METHOD_2 ( ) . METHOD_6 ( getParameters ( ) . METHOD_3 ( ) , VAR_2 ) )  METHOD_2 ( ) . METHOD_6 ( getParameters ( ) . METHOD_3 ( ) , VAR_2 ) (  METHOD_4 ( ) . METHOD_7 ( ) )  METHOD_4 ( ) . METHOD_7 ( ) (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( METHOD_2 ( ) ) == null ) ? STRING_1 : METHOD_2 ( ) ) INIT = ( ( METHOD_2 ( ) ) == null ) ? STRING_1 : METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_1 . getVdsGroup ( ) ) == null ) ? STRING_1 : TYPE_1 . getVdsGroup ( ) . getName ( ) ) INIT = ( ( TYPE_1 . getVdsGroup ( ) ) == null ) ? STRING_1 : TYPE_1 . getVdsGroup ( ) . getName ( ) ) VAR VAR (  return ( VAR_1 + STRING_2 ) + VAR_2 ; )  return ( VAR_1 + STRING_2 ) + VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2.AuditLogType ) TYPE TYPE_2.AuditLogType ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( VAR_1 . METHOD_2 ( ) ) ? TYPE_3 . METHOD_3 ( VAR_1 . METHOD_4 ( ) , INT_1 ) : VAR_2 . METHOD_5 ( ) ) INIT = ( VAR_1 . METHOD_2 ( ) ) ? TYPE_3 . METHOD_3 ( VAR_1 . METHOD_4 ( ) , INT_1 ) : VAR_2 . METHOD_5 ( ) ) VAR VAR ( IF IF ( COND VAR_3 > 0 ) COND VAR_3 > 0 ( THEN THEN (  VAR_1 . METHOD_6 ( ( ( TYPE_4 . METHOD_7 ( ) ) + ( TYPE_5 . METHOD_8 ( VAR_3 ) ) ) ) )  VAR_1 . METHOD_6 ( ( ( TYPE_4 . METHOD_7 ( ) ) + ( TYPE_5 . METHOD_8 ( VAR_3 ) ) ) ) (  VAR_1 . METHOD_9 ( TYPE_6 . METHOD_10 ( VAR_1 , VAR_2 ) ) )  VAR_1 . METHOD_9 ( TYPE_6 . METHOD_10 ( VAR_1 , VAR_2 ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito . METHOD_2 ( ) . when ( command ) . METHOD_3 ( ) )  org.mockito.Mockito . METHOD_2 ( ) . when ( command ) . METHOD_3 ( ) (  org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_4 ( TYPE_1 . any ( VAR_1 . Guid class ) ) )  org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_4 ( TYPE_1 . any ( VAR_1 . Guid class ) ) (  org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_5 ( ) )  org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_5 ( ) (  org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_6 ( ) )  org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_6 ( ) (  org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_7 ( ) )  org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_7 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME rs ) NAME rs ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME entity ) NAME entity ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  entity . setId ( METHOD_2 ( rs , STRING_1 ) ) )  entity . setId ( METHOD_2 ( rs , STRING_1 ) ) (  entity . METHOD_3 ( rs.getString ( STRING_2 ) ) )  entity . METHOD_3 ( rs.getString ( STRING_2 ) ) (  entity . METHOD_4 ( rs.getString ( STRING_3 ) ) )  entity . METHOD_4 ( rs.getString ( STRING_3 ) ) (  entity . METHOD_5 ( rs.getString ( STRING_4 ) ) )  entity . METHOD_5 ( rs.getString ( STRING_4 ) ) (  entity . METHOD_6 ( ( ( rs.getString ( STRING_5 ) ) != null ? TYPE_4 . METHOD_7 ( rs.getString ( STRING_5 ) . METHOD_8 ( STRING_6 ) ) : null ) ) )  entity . METHOD_6 ( ( ( rs.getString ( STRING_5 ) ) != null ? TYPE_4 . METHOD_7 ( rs.getString ( STRING_5 ) . METHOD_8 ( STRING_6 ) ) : null ) ) (  return entity ; )  return entity ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  command . getParameters ( ) . METHOD_2 ( METHOD_3 ( ) ) )  command . getParameters ( ) . METHOD_2 ( METHOD_3 ( ) ) (  METHOD_4 ( VAR_1 ) )  METHOD_4 ( VAR_1 ) (  METHOD_5 ( VAR_2 , null , VAR_1 ) )  METHOD_5 ( VAR_2 , null , VAR_1 ) (  command . METHOD_6 ( ) )  command . METHOD_6 ( ) (  TYPE_1 . METHOD_7 ( ( ( command . METHOD_8 ( ) . size ( ) ) == 1 ) ) )  TYPE_1 . METHOD_7 ( ( ( command . METHOD_8 ( ) . size ( ) ) == 1 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ( NAME iface ) NAME iface ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > ) ( source ) ) ) INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > ) ( source ) ) ) VAR VAR ( IF IF ( COND ( VAR_2 . size ( ) ) > 0 ) COND ( VAR_2 . size ( ) ) > 0 ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > VAR_2 = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > ) ( source ) ) ; if ( ( VAR_2 . size ( ) ) > 0 ) { return true ; } return false ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > VAR_2 = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > ) ( source ) ) ; if ( ( VAR_2 . size ( ) ) > 0 ) { return true ; } return false ; } } (  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_3 , new TYPE_1 ( VAR_1 , iface ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_3 , new TYPE_1 ( VAR_1 , iface ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ( STRING_1 + ( VAR_1 [ 2 ] ) ) , VAR_2 . StorageDomain , METHOD_3 ( 2 ) ) )  METHOD_2 ( ( STRING_1 + ( VAR_1 [ 2 ] ) ) , VAR_2 . StorageDomain , METHOD_3 ( 2 ) ) (  METHOD_4 ( VAR_3 ) )  METHOD_4 ( VAR_3 ) ( VAR VAR ( TYPE TYPE_1.StorageDomain ) TYPE TYPE_1.StorageDomain ( NAME storageDomain ) NAME storageDomain ( INIT = new TYPE_1 . StorageDomain ( ) ) INIT = new TYPE_1 . StorageDomain ( ) ) VAR VAR (  storageDomain . METHOD_5 ( VAR_1 [ 2 ] ) )  storageDomain . METHOD_5 ( VAR_1 [ 2 ] ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME cluster ) NAME cluster ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  cluster . setId ( VAR_4 [ 1 ] . toString ( ) ) )  cluster . setId ( VAR_4 [ 1 ] . toString ( ) ) (  METHOD_6 ( storageDomain , cluster ) )  METHOD_6 ( storageDomain , cluster ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_5 ) NAME VAR_5 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  VAR_5 . METHOD_3 ( STRING_1 , VAR_2 ) )  VAR_5 . METHOD_3 ( STRING_1 , VAR_2 ) (  VAR_5 . METHOD_3 ( STRING_2 , VAR_4 ) )  VAR_5 . METHOD_3 ( STRING_2 , VAR_4 ) (  VAR_5 . METHOD_3 ( STRING_3 , VAR_3 ) )  VAR_5 . METHOD_3 ( STRING_3 , VAR_3 ) (  TYPE_3 . log ( VAR_5 , VAR_6 ) )  TYPE_3 . log ( VAR_5 , VAR_6 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( aQuery.converterCallback ) == null ) COND ( aQuery.converterCallback ) == null ( THEN THEN ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND source == null ) COND source == null ( THEN THEN (  return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ( ) ; )  return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ( ) ; ) THEN THEN ) IF IF (  return source ; )  return source ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ( ) ; } return source ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ( ) ; } return source ; } } ) THEN THEN ) IF IF (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.Object> ) TYPE java.util.Map<java.lang.String,java.lang.Object> ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( IF IF ( COND VAR_3 == null ) COND VAR_3 == null ( THEN THEN (  VAR_4 = VAR_5 . METHOD_1 ( STRING_1 , VAR_2 ) )  VAR_4 = VAR_5 . METHOD_1 ( STRING_1 , VAR_2 ) ) THEN THEN ( ELSE ELSE (  VAR_4 = VAR_5 . METHOD_1 ( VAR_3 , VAR_2 ) )  VAR_4 = VAR_5 . METHOD_1 ( VAR_3 , VAR_2 ) ) ELSE ELSE ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_6 ) NAME VAR_6 ( INIT = new TYPE_1 ( VAR_1 , VAR_2 , VAR_4 ) ) INIT = new TYPE_1 ( VAR_1 , VAR_2 , VAR_4 ) ) VAR VAR (  return VAR_6 ; )  return VAR_6 ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_7 ) NAME VAR_7 ( BLOCK BLOCK (  throw new TYPE_3 ( VAR_7 ) ; )  throw new TYPE_3 ( VAR_7 ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.ArrayList<TYPE_1> ) RETURN java.util.ArrayList<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<TYPE_1> ) TYPE java.util.ArrayList<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < TYPE_1 > ( ) ) INIT = new java.util.ArrayList < TYPE_1 > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME item ) NAME item ( IN METHOD_2 ( ) . METHOD_3 ( ) ) IN METHOD_2 ( ) . METHOD_3 ( ) ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_1 ) ( item ) ) ) INIT = ( ( TYPE_1 ) ( item ) ) ) VAR VAR ( IF IF ( COND VAR_2 . METHOD_4 ( ) ) COND VAR_2 . METHOD_4 ( ) ( THEN THEN (  VAR_1 . add ( VAR_2 ) )  VAR_1 . add ( VAR_2 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( getParameters ( ) . METHOD_2 ( ) , METHOD_3 ( ) ) ) INIT = new TYPE_2 ( getParameters ( ) . METHOD_2 ( ) , METHOD_3 ( ) ) ) VAR VAR (  VAR_2 . METHOD_4 ( VAR_3 , false , VAR_1 ) )  VAR_2 . METHOD_4 ( VAR_3 , false , VAR_1 ) (  METHOD_5 ( ) . METHOD_6 ( METHOD_7 ( ) . getId ( ) , METHOD_7 ( ) . METHOD_8 ( ) ) )  METHOD_5 ( ) . METHOD_6 ( METHOD_7 ( ) . getId ( ) , METHOD_7 ( ) . METHOD_8 ( ) ) ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.network.Network ) TYPE org.ovirt.engine.core.common.businessentities.network.Network ( NAME VAR_4 ) NAME VAR_4 ( IN METHOD_9 ( ) ) IN METHOD_9 ( ) ( BLOCK BLOCK (  TYPE_3 . METHOD_10 ( METHOD_11 ( ) , VAR_4 ) )  TYPE_3 . METHOD_10 ( METHOD_11 ( ) , VAR_4 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 = org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) )  VAR_1 = org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) (  org.mockito.Mockito.doReturn ( cluster ) . when ( VAR_2 ) . get ( TYPE_1 . any ( VAR_3 . Guid class ) ) )  org.mockito.Mockito.doReturn ( cluster ) . when ( VAR_2 ) . get ( TYPE_1 . any ( VAR_3 . Guid class ) ) (  org.mockito.Mockito.doReturn ( VAR_4 ) . when ( command ) . METHOD_3 ( ) )  org.mockito.Mockito.doReturn ( VAR_4 ) . when ( command ) . METHOD_3 ( ) (  org.mockito.Mockito.doReturn ( VAR_5 ) . when ( command ) . METHOD_4 ( ) )  org.mockito.Mockito.doReturn ( VAR_5 ) . when ( command ) . METHOD_4 ( ) (  org.mockito.Mockito.when ( VAR_5 . METHOD_5 ( VAR_1 ) ) . thenReturn ( METHOD_6 ( VAR_6 ) ) )  org.mockito.Mockito.when ( VAR_5 . METHOD_5 ( VAR_1 ) ) . thenReturn ( METHOD_6 ( VAR_6 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND source != null ) COND source != null ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME item ) NAME item ( IN ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) IN ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ( BLOCK BLOCK (  return item ; )  return item ; ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { for ( TYPE_1 item : ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) { return item ; } } return null ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { for ( TYPE_1 item : ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) { return item ; } } return null ; } } ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 ( ( STRING_1 + VAR_1 ) , VAR_3 . VDS ) ) INIT = new TYPE_2 ( ( STRING_1 + VAR_1 ) , VAR_3 . VDS ) ) VAR VAR (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_4 , VAR_2 , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_4 , VAR_2 , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME type ) NAME type ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME id ) NAME id ( INIT = org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) INIT = org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_3 ( id , VAR_1 , type ) ) INIT = METHOD_3 ( id , VAR_1 , type ) ) VAR VAR (  VAR_4 . METHOD_4 ( VAR_2 ) )  VAR_4 . METHOD_4 ( VAR_2 ) (  VAR_4 . METHOD_5 ( VAR_3 ) )  VAR_4 . METHOD_5 ( VAR_3 ) (  return VAR_4 ; )  return VAR_4 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( METHOD_3 ( ) ) )  METHOD_2 ( METHOD_3 ( ) ) (  METHOD_4 ( VAR_1 , VAR_2 class , new java.lang.String [ ] { STRING_1 , STRING_2 } , new java.lang.Object [ ] { true , false } , METHOD_5 ( ) ) )  METHOD_4 ( VAR_1 , VAR_2 class , new java.lang.String [ ] { STRING_1 , STRING_2 } , new java.lang.Object [ ] { true , false } , METHOD_5 ( ) ) (  METHOD_6 ( 1 ) )  METHOD_6 ( 1 ) (  VAR_3 . METHOD_7 ( ) )  VAR_3 . METHOD_7 ( ) (  METHOD_8 ( resource . get ( ) , 0 ) )  METHOD_8 ( resource . get ( ) , 0 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( VAR_4 ) )  METHOD_2 ( VAR_4 ) (  METHOD_3 ( 2 , false , false , false ) )  METHOD_3 ( 2 , false , false , false ) (  METHOD_4 ( METHOD_5 ( VAR_5 , VAR_6 class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_4 } , VAR_1 , VAR_2 ) ) )  METHOD_4 ( METHOD_5 ( VAR_5 , VAR_6 class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_4 } , VAR_1 , VAR_2 ) ) ( TRY TRY ( BLOCK BLOCK (  resource . METHOD_6 ( ) )  resource . METHOD_6 ( ) (  METHOD_7 ( STRING_2 ) )  METHOD_7 ( STRING_2 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_7 ) NAME VAR_7 ( BLOCK BLOCK (  METHOD_8 ( VAR_7 , VAR_3 ) )  METHOD_8 ( VAR_7 , VAR_3 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VdsNetworkInterface> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VdsNetworkInterface> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.Network ) TYPE org.ovirt.engine.core.common.businessentities.Network ( NAME network ) NAME network ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME vds ) NAME vds ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 . size ( ) ) != 1 ) COND ( VAR_1 . size ( ) ) != 1 ( THEN THEN ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_2 . METHOD_2 ( vds . getId ( ) ) )  VAR_2 . METHOD_2 ( vds . getId ( ) ) (  VAR_2 . METHOD_3 ( STRING_1 , network . getName ( ) ) )  VAR_2 . METHOD_3 ( STRING_1 , network . getName ( ) ) (  VAR_2 . METHOD_3 ( STRING_2 , TYPE_2 . METHOD_4 ( TYPE_3 . METHOD_5 ( VAR_1 ) , STRING_3 ) ) )  VAR_2 . METHOD_3 ( STRING_2 , TYPE_2 . METHOD_4 ( TYPE_3 . METHOD_5 ( VAR_1 ) , STRING_3 ) ) (  TYPE_4 . log ( VAR_2 , VAR_3 ) )  TYPE_4 . log ( VAR_2 , VAR_3 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( TYPE_1 . any ( VAR_2 . Guid class ) ) ) . thenReturn ( TYPE_2 . METHOD_3 ( new TYPE_3 ( ) ) ) )  org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( TYPE_1 . any ( VAR_2 . Guid class ) ) ) . thenReturn ( TYPE_2 . METHOD_3 ( new TYPE_3 ( ) ) ) ( VAR VAR ( TYPE TYPE_4.ValidationResult ) TYPE TYPE_4.ValidationResult ( NAME VAR_3 ) NAME VAR_3 ( INIT = validator . METHOD_4 ( ) ) INIT = validator . METHOD_4 ( ) ) VAR VAR (  TYPE_5 . METHOD_5 ( VAR_3 , TYPE_6 . METHOD_6 ( VAR_4 ) ) )  TYPE_5 . METHOD_5 ( VAR_3 , TYPE_6 . METHOD_6 ( VAR_4 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  METHOD_3 ( ) )  METHOD_3 ( ) (  TYPE_1 . METHOD_4 ( TYPE_2 . getVm ( ) . METHOD_5 ( ) ) )  TYPE_1 . METHOD_4 ( TYPE_2 . getVm ( ) . METHOD_5 ( ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK (  TYPE_2 . METHOD_6 ( ) . METHOD_7 ( VAR_1 ) )  TYPE_2 . METHOD_6 ( ) . METHOD_7 ( VAR_1 ) (  throw e ; )  throw e ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  TYPE_2 . METHOD_8 ( true ) )  TYPE_2 . METHOD_8 ( true ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( STRING_1 , VAR_2 , STRING_2 , STRING_3 ) ) INIT = METHOD_2 ( STRING_1 , VAR_2 , STRING_2 , STRING_3 ) ) VAR VAR (  parameters . METHOD_3 ( VAR_1 ) )  parameters . METHOD_3 ( VAR_1 ) (  parameters . METHOD_4 ( VAR_3 ) )  parameters . METHOD_4 ( VAR_3 ) (  org.mockito.Mockito.doReturn ( VAR_4 ) . when ( METHOD_5 ( ) ) . METHOD_6 ( ) )  org.mockito.Mockito.doReturn ( VAR_4 ) . when ( METHOD_5 ( ) ) . METHOD_6 ( ) (  org.mockito.Mockito.when ( METHOD_5 ( ) . METHOD_7 ( ) . get ( VAR_1 . getId ( ) ) ) . thenReturn ( VAR_1 ) )  org.mockito.Mockito.when ( METHOD_5 ( ) . METHOD_7 ( ) . get ( VAR_1 . getId ( ) ) ) . thenReturn ( VAR_1 ) (  TYPE_2 . METHOD_8 ( METHOD_5 ( ) ) )  TYPE_2 . METHOD_8 ( METHOD_5 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( METHOD_3 ( ) ) )  METHOD_2 ( METHOD_3 ( ) ) (  METHOD_4 ( 1 , 0 , true ) )  METHOD_4 ( 1 , 0 , true ) (  VAR_1 . METHOD_5 ( ) )  VAR_1 . METHOD_5 ( ) ( TRY TRY ( BLOCK BLOCK (  resource . METHOD_6 ( TYPE_1 . getModel ( 0 ) ) )  resource . METHOD_6 ( TYPE_1 . getModel ( 0 ) ) (  METHOD_7 ( STRING_1 ) )  METHOD_7 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( BLOCK BLOCK (  METHOD_8 ( VAR_2 ) )  METHOD_8 ( VAR_2 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.DiskImage ) TYPE TYPE_1.DiskImage ( NAME diskImage ) NAME diskImage ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME vmId ) NAME vmId ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  TYPE_2 . METHOD_2 ( vmId , diskImage . getId ( ) ) )  TYPE_2 . METHOD_2 ( vmId , diskImage . getId ( ) ) (  TYPE_2 . METHOD_3 ( diskImage ) )  TYPE_2 . METHOD_3 ( diskImage ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ( BLOCK BLOCK (  VAR_2 . error ( STRING_1 , VAR_1 . METHOD_4 ( ) ) )  VAR_2 . error ( STRING_1 , VAR_1 . METHOD_4 ( ) ) (  VAR_2 . METHOD_5 ( STRING_2 , VAR_1 ) )  VAR_2 . METHOD_5 ( STRING_2 , VAR_1 ) (  throw new TYPE_4 ( VAR_3 , VAR_1 ) ; )  throw new TYPE_4 ( VAR_3 , VAR_1 ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.DiskImage ) TYPE TYPE_1.DiskImage ( NAME image ) NAME image ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME vmId ) NAME vmId ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  TYPE_3 . METHOD_2 ( image , VAR_1 , VAR_2 ) )  TYPE_3 . METHOD_2 ( image , VAR_1 , VAR_2 ) (  TYPE_3 . METHOD_3 ( image , vmId ) )  TYPE_3 . METHOD_3 ( image , vmId ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_3 ) NAME VAR_3 ( BLOCK BLOCK (  VAR_4 . error ( STRING_1 , VAR_3 . METHOD_4 ( ) ) )  VAR_4 . error ( STRING_1 , VAR_3 . METHOD_4 ( ) ) (  VAR_4 . METHOD_5 ( STRING_2 , VAR_3 ) )  VAR_4 . METHOD_5 ( STRING_2 , VAR_3 ) (  throw new TYPE_5 ( VAR_5 , VAR_3 ) ; )  throw new TYPE_5 ( VAR_5 , VAR_3 ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.StoragePool > ) ( returnValue ) ) ) INIT = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.StoragePool > ) ( returnValue ) ) ) VAR VAR ( IF IF ( COND ( VAR_1 == null ) || ( ( VAR_1 . size ( ) ) != 1 ) ) COND ( VAR_1 == null ) || ( ( VAR_1 . size ( ) ) != 1 ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StoragePool ) TYPE org.ovirt.engine.core.common.businessentities.StoragePool ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . get ( 0 ) ) INIT = VAR_1 . get ( 0 ) ) VAR VAR (  METHOD_1 ( VAR_2 ) )  METHOD_1 ( VAR_2 ) (  VAR_3 . onSuccess ( model , returnValue ) )  VAR_3 . onSuccess ( model , returnValue ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME vmId ) NAME vmId ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source ; )  return source ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source != null ? TYPE_1 . METHOD_2 ( ( ( java.lang.Integer ) ( source ) ) . METHOD_3 ( ) ) : VAR_1 ; )  return source != null ? TYPE_1 . METHOD_2 ( ( ( java.lang.Integer ) ( source ) ) . METHOD_3 ( ) ) : VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? TYPE_1 . METHOD_2 ( ( ( java.lang.Integer ) ( source ) ) . METHOD_3 ( ) ) : VAR_1 ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? TYPE_1 . METHOD_2 ( ( ( java.lang.Integer ) ( source ) ) . METHOD_3 ( ) ) : VAR_1 ; } } (  TYPE_2 . METHOD_4 ( new TYPE_3 ( VAR_2 , TYPE_2 . METHOD_5 ( ) ) , aQuery ) )  TYPE_2 . METHOD_4 ( new TYPE_3 ( VAR_2 , TYPE_2 . METHOD_5 ( ) ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.when ( version . getValue ( ) ) . thenReturn ( VAR_1 ) )  org.mockito.Mockito.when ( version . getValue ( ) ) . thenReturn ( VAR_1 ) (  validator = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( nic , version ) ) )  validator = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( nic , version ) ) (  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( validator ) . METHOD_3 ( ) )  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( validator ) . METHOD_3 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( VAR_2 , null ) ) INIT = METHOD_2 ( VAR_2 , null ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VdsNetworkInterface> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VdsNetworkInterface> ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_1 . METHOD_3 ( METHOD_4 ( STRING_1 , null ) ) ) INIT = TYPE_1 . METHOD_3 ( METHOD_4 ( STRING_1 , null ) ) ) VAR VAR (  METHOD_5 ( VAR_1 , VAR_3 ) )  METHOD_5 ( VAR_1 , VAR_3 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_6 ( METHOD_7 ( VAR_1 , VAR_3 ) ) ) INIT = METHOD_6 ( METHOD_7 ( VAR_1 , VAR_3 ) ) ) VAR VAR (  METHOD_8 ( VAR_4 , VAR_5 , VAR_1 . getName ( ) ) )  METHOD_8 ( VAR_4 , VAR_5 , VAR_1 . getName ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = null ) INIT = null ) VAR VAR ( IF IF ( COND TYPE_2 . equals ( VAR_1 ) ) COND TYPE_2 . equals ( VAR_1 ) ( THEN THEN (  VAR_2 = new TYPE_3 ( VAR_3 class ) )  VAR_2 = new TYPE_3 ( VAR_3 class ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND TYPE_4 . equals ( VAR_1 ) ) COND TYPE_4 . equals ( VAR_1 ) ( THEN THEN (  VAR_2 = new TYPE_3 ( VAR_4 class ) )  VAR_2 = new TYPE_3 ( VAR_4 class ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND TYPE_5 . equals ( VAR_1 ) ) COND TYPE_5 . equals ( VAR_1 ) ( THEN THEN (  VAR_2 = new TYPE_6 ( ) )  VAR_2 = new TYPE_6 ( ) ) THEN THEN ( ELSE ELSE ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_2 ) ( model ) ) ) INIT = ( ( TYPE_2 ) ( model ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_3> ) TYPE java.util.List<TYPE_3> ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( ( TYPE_4 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) INIT = ( ( TYPE_4 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) VAR VAR ( IF IF ( COND VAR_3 != null ) COND VAR_3 != null ( THEN THEN (  TYPE_5 . METHOD_1 ( VAR_3 , VAR_4 ) )  TYPE_5 . METHOD_1 ( VAR_3 , VAR_4 ) ) THEN THEN ) IF IF (  METHOD_2 ( true ) )  METHOD_2 ( true ) (  VAR_2 . setItems ( VAR_3 ) )  VAR_2 . setItems ( VAR_3 ) (  METHOD_2 ( false ) )  METHOD_2 ( false ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( TYPE_1 . any ( ) ) ) . thenReturn ( TYPE_2 . METHOD_3 ( ) ) )  org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( TYPE_1 . any ( ) ) ) . thenReturn ( TYPE_2 . METHOD_3 ( ) ) ( VAR VAR ( TYPE java.util.List<TYPE_3> ) TYPE java.util.List<TYPE_3> ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_4 . METHOD_4 ( new TYPE_3 ( ) , new TYPE_3 ( ) ) ) INIT = TYPE_4 . METHOD_4 ( new TYPE_3 ( ) , new TYPE_3 ( ) ) ) VAR VAR (  org.mockito.Mockito.when ( VAR_3 . METHOD_2 ( TYPE_1 . any ( ) ) ) . thenReturn ( VAR_2 ) )  org.mockito.Mockito.when ( VAR_3 . METHOD_2 ( TYPE_1 . any ( ) ) ) . thenReturn ( VAR_2 ) (  cmd . METHOD_5 ( ) . METHOD_6 ( true ) )  cmd . METHOD_5 ( ) . METHOD_6 ( true ) (  TYPE_5 . METHOD_7 ( cmd , VAR_4 ) )  TYPE_5 . METHOD_7 ( cmd , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.doReturn ( METHOD_2 ( VAR_1 ) ) . when ( VAR_2 ) . METHOD_3 ( VAR_3 [ 1 ] ) )  org.mockito.Mockito.doReturn ( METHOD_2 ( VAR_1 ) ) . when ( VAR_2 ) . METHOD_3 ( VAR_3 [ 1 ] ) (  METHOD_4 ( ) )  METHOD_4 ( ) (  VAR_4 . METHOD_5 ( ) )  VAR_4 . METHOD_5 ( ) (  org.mockito.Mockito . METHOD_6 ( VAR_5 , org.mockito.Mockito . METHOD_7 ( 0 ) ) . METHOD_8 ( TYPE_1 . any ( VAR_6 class ) ) )  org.mockito.Mockito . METHOD_6 ( VAR_5 , org.mockito.Mockito . METHOD_7 ( 0 ) ) . METHOD_8 ( TYPE_1 . any ( VAR_6 class ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME entity ) NAME entity ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME model ) NAME model ( INIT = ( ( TYPE_2 ) ( target ) ) ) INIT = ( ( TYPE_2 ) ( target ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Disk> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Disk> ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Disk > ) ( returnValue ) ) ) INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Disk > ) ( returnValue ) ) ) VAR VAR (  TYPE_3 . METHOD_1 ( model , VAR_1 , VAR_2 ) )  TYPE_3 . METHOD_1 ( model , VAR_1 , VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD (  TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( getWindow ( ) , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { final TYPE_2 model = ( ( TYPE_2 ) ( target ) ) ; final java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Disk > VAR_1 = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Disk > ) ( returnValue ) ) ; TYPE_3 . METHOD_1 ( model , VAR_1 , VAR_2 ) ; } } ) , entity . getId ( ) ) )  TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( getWindow ( ) , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { final TYPE_2 model = ( ( TYPE_2 ) ( target ) ) ; final java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Disk > VAR_1 = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Disk > ) ( returnValue ) ) ; TYPE_3 . METHOD_1 ( model , VAR_1 , VAR_2 ) ; } } ) , entity . getId ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( org.ovirt.engine.core.compat.Guid ) ( TYPE_1 . METHOD_2 ( ) ) ) ) INIT = ( ( org.ovirt.engine.core.compat.Guid ) ( TYPE_1 . METHOD_2 ( ) ) ) ) VAR VAR (  METHOD_3 ( true ) )  METHOD_3 ( true ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . get ( VAR_1 ) ) INIT = VAR_3 . get ( VAR_1 ) ) VAR VAR ( IF IF ( COND ( VAR_2 == null ) || ( ( VAR_2 . getStatus ( ) ) != ( VAR_4 ) ) ) COND ( VAR_2 == null ) || ( ( VAR_2 . getStatus ( ) ) != ( VAR_4 ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  VAR_2 . METHOD_4 ( VAR_5 ) )  VAR_2 . METHOD_4 ( VAR_5 ) (  VAR_3 . METHOD_5 ( VAR_2 ) )  VAR_3 . METHOD_5 ( VAR_2 ) (  TYPE_1 . METHOD_6 ( true ) )  TYPE_1 . METHOD_6 ( true ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . get ( VAR_3 ) ) INIT = VAR_2 . get ( VAR_3 ) ) VAR VAR (  TYPE_2 . METHOD_2 ( VAR_1 ) )  TYPE_2 . METHOD_2 ( VAR_1 ) ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ( INIT = VAR_1 . getName ( ) ) INIT = VAR_1 . getName ( ) ) VAR VAR (  TYPE_2 . METHOD_3 ( name . equals ( VAR_4 . METHOD_4 ( VAR_5 , VAR_6 . VM ) ) ) )  TYPE_2 . METHOD_3 ( name . equals ( VAR_4 . METHOD_4 ( VAR_5 , VAR_6 . VM ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  METHOD_3 ( VAR_1 , VAR_2 ) )  METHOD_3 ( VAR_1 , VAR_2 ) (  METHOD_4 ( VAR_3 , org.ovirt.engine.core.compat.Guid . METHOD_5 ( ) , VAR_1 ) )  METHOD_4 ( VAR_3 , org.ovirt.engine.core.compat.Guid . METHOD_5 ( ) , VAR_1 ) (  org.mockito.Mockito.doReturn ( new TYPE_1 . ValidationResult ( VAR_4 ) ) . when ( VAR_5 ) . METHOD_6 ( TYPE_2 . METHOD_7 ( ) ) )  org.mockito.Mockito.doReturn ( new TYPE_1 . ValidationResult ( VAR_4 ) ) . when ( VAR_5 ) . METHOD_6 ( TYPE_2 . METHOD_7 ( ) ) (  TYPE_3 . METHOD_8 ( command . validate ( ) ) )  TYPE_3 . METHOD_8 ( command . validate ( ) ) (  TYPE_3 . METHOD_9 ( command . getReturnValue ( ) . METHOD_10 ( ) . METHOD_11 ( TYPE_4 . name ( ) ) ) )  TYPE_3 . METHOD_9 ( command . getReturnValue ( ) . METHOD_10 ( ) . METHOD_11 ( TYPE_4 . name ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_1 ( ) . METHOD_2 ( ) )  METHOD_1 ( ) . METHOD_2 ( ) (  METHOD_3 ( ( ( TYPE_1 < TYPE_2 > ) ( ( ( TYPE_3 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ) )  METHOD_3 ( ( ( TYPE_1 < TYPE_2 > ) ( ( ( TYPE_3 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ) (  METHOD_1 ( ) . METHOD_4 ( ) )  METHOD_1 ( ) . METHOD_4 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = model . METHOD_2 ( ) ) INIT = model . METHOD_2 ( ) ) VAR VAR (  TYPE_2 . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) )  TYPE_2 . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) ( VAR VAR ( TYPE org.ovirt.engine.ui.uicommonweb.UICommand ) TYPE org.ovirt.engine.ui.uicommonweb.UICommand ( NAME VAR_2 ) NAME VAR_2 ( INIT = model . METHOD_5 ( ) ) INIT = model . METHOD_5 ( ) ) VAR VAR ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( ( model . METHOD_6 ( ) . METHOD_7 ( ) ) && ( VAR_1 != null ) ) && ( ( TYPE_3 . METHOD_8 ( VAR_1 ) ) != null ) ) INIT = ( ( model . METHOD_6 ( ) . METHOD_7 ( ) ) && ( VAR_1 != null ) ) && ( ( TYPE_3 . METHOD_8 ( VAR_1 ) ) != null ) ) VAR VAR (  VAR_2 . METHOD_9 ( VAR_3 ) )  VAR_2 . METHOD_9 ( VAR_3 ) (  METHOD_10 ( ( VAR_3 ? VAR_2 : null ) ) )  METHOD_10 ( ( VAR_3 ? VAR_2 : null ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  model . METHOD_2 ( null ) )  model . METHOD_2 ( null ) (  METHOD_3 ( METHOD_4 ( ) ) )  METHOD_3 ( METHOD_4 ( ) ) (  VAR_1 . METHOD_5 ( ) )  VAR_1 . METHOD_5 ( ) ( TRY TRY ( BLOCK BLOCK (  VAR_2 . add ( model ) )  VAR_2 . add ( model ) (  METHOD_6 ( STRING_1 ) )  METHOD_6 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( BLOCK BLOCK (  METHOD_7 ( VAR_3 , STRING_2 , STRING_3 , STRING_4 ) )  METHOD_7 ( VAR_3 , STRING_2 , STRING_3 , STRING_4 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME id ) NAME id ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( VAR_1 ) )  METHOD_2 ( VAR_1 ) (  resource . id = id )  resource . id = id (  VAR_2 . METHOD_3 ( ) )  VAR_2 . METHOD_3 ( ) ( TRY TRY ( BLOCK BLOCK (  resource . METHOD_4 ( ) )  resource . METHOD_4 ( ) (  METHOD_5 ( STRING_1 ) )  METHOD_5 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( BLOCK BLOCK (  METHOD_6 ( VAR_3 ) )  METHOD_6 ( VAR_3 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  resource . id = STRING_2 )  resource . id = STRING_2 ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  VAR_4 . addValue ( STRING_1 , VAR_1 ) )  VAR_4 . addValue ( STRING_1 , VAR_1 ) (  VAR_4 . addValue ( STRING_2 , VAR_2 ) )  VAR_4 . addValue ( STRING_2 , VAR_2 ) (  VAR_4 . addValue ( STRING_3 , VAR_3 ) )  VAR_4 . addValue ( STRING_3 , VAR_3 ) ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_5 ) NAME VAR_5 ( INIT = METHOD_3 ( ) . METHOD_4 ( STRING_4 , METHOD_5 ( ) , VAR_4 ) ) INIT = METHOD_3 ( ) . METHOD_4 ( STRING_4 , METHOD_5 ( ) , VAR_4 ) ) VAR VAR (  return VAR_5 ; )  return VAR_5 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.Map<java.lang.String,java.lang.String> ) RETURN java.util.Map<java.lang.String,java.lang.String> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) == null ) COND ( VAR_1 ) == null ( THEN THEN (  VAR_1 = new java.util.HashMap < java.lang.String , java.lang.String > ( ) )  VAR_1 = new java.util.HashMap < java.lang.String , java.lang.String > ( ) ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ) TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_1 . getVdsGroup ( ) ) INIT = TYPE_1 . getVdsGroup ( ) ) VAR VAR (  VAR_1 . put ( VAR_3 , ( VAR_2 == null ? null : VAR_2 . METHOD_2 ( ) ) ) )  VAR_1 . put ( VAR_3 , ( VAR_2 == null ? null : VAR_2 . METHOD_2 ( ) ) ) ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.network.Network ) TYPE org.ovirt.engine.core.common.businessentities.network.Network ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return ( ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) . equals ( METHOD_5 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) ) && ( ! ( VAR_1 . getId ( ) . equals ( METHOD_6 ( ) . getId ( ) ) ) ) ) && ( METHOD_6 ( ) . METHOD_7 ( ) . equals ( VAR_1 . METHOD_7 ( ) ) ) ; )  return ( ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) . equals ( METHOD_5 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) ) && ( ! ( VAR_1 . getId ( ) . equals ( METHOD_6 ( ) . getId ( ) ) ) ) ) && ( METHOD_6 ( ) . METHOD_7 ( ) . equals ( VAR_1 . METHOD_7 ( ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME status ) NAME status ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME domain ) NAME domain ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  domain . METHOD_2 ( status ) )  domain . METHOD_2 ( status ) (  domain . setId ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) )  domain . setId ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) (  org.mockito.Mockito.when ( VAR_1 . get ( TYPE_3 . any ( VAR_2 . Guid class ) ) ) . thenReturn ( domain ) )  org.mockito.Mockito.when ( VAR_1 . get ( TYPE_3 . any ( VAR_2 . Guid class ) ) ) . thenReturn ( domain ) (  org.mockito.Mockito.when ( VAR_1 . METHOD_4 ( TYPE_3 . any ( VAR_2 . Guid class ) , TYPE_3 . any ( VAR_2 . Guid class ) ) ) . thenReturn ( domain ) )  org.mockito.Mockito.when ( VAR_1 . METHOD_4 ( TYPE_3 . any ( VAR_2 . Guid class ) , TYPE_3 . any ( VAR_2 . Guid class ) ) ) . thenReturn ( domain ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME setItems ) NAME setItems ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME value ) NAME value ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) != value ) COND ( VAR_1 ) != value ( THEN THEN ( IF IF ( COND ( VAR_1 ) != null ) COND ( VAR_1 ) != null ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( IN ( ( TYPE_1 < TYPE_2 > ) ( VAR_1 ) ) ) IN ( ( TYPE_1 < TYPE_2 > ) ( VAR_1 ) ) ( BLOCK BLOCK (  VAR_2 . METHOD_1 ( ) )  VAR_2 . METHOD_1 ( ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF (  METHOD_2 ( value , VAR_1 ) )  METHOD_2 ( value , VAR_1 ) (  VAR_1 = value )  VAR_1 = value (  METHOD_3 ( ) . METHOD_4 ( this , VAR_3 ) )  METHOD_3 ( ) . METHOD_4 ( this , VAR_3 ) (  METHOD_5 ( new TYPE_3 ( STRING_1 ) ) )  METHOD_5 ( new TYPE_3 ( STRING_1 ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( TYPE_1 . isEmpty ( vm . METHOD_2 ( ) ) ) ) COND ! ( TYPE_1 . isEmpty ( vm . METHOD_2 ( ) ) ) ( THEN THEN (  return vm . METHOD_2 ( ) ; )  return vm . METHOD_2 ( ) ; ) THEN THEN ) IF IF ( IF IF ( COND VAR_1 . METHOD_3 ( vm . METHOD_4 ( ) ) ) COND VAR_1 . METHOD_3 ( vm . METHOD_4 ( ) ) ( THEN THEN (  return VAR_2 < java.lang.String > METHOD_5 ( VAR_3 ) ; )  return VAR_2 < java.lang.String > METHOD_5 ( VAR_3 ) ; ) THEN THEN ( ELSE ELSE (  return STRING_1 ; )  return STRING_1 ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ! ( METHOD_2 ( ) . getEntity ( ) ) ) COND ! ( METHOD_2 ( ) . getEntity ( ) ) ( THEN THEN (  METHOD_3 ( ) . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) )  METHOD_3 ( ) . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) (  METHOD_3 ( ) . METHOD_6 ( false ) )  METHOD_3 ( ) . METHOD_6 ( false ) (  METHOD_3 ( ) . setEntity ( false ) )  METHOD_3 ( ) . setEntity ( false ) (  return ; )  return ; ) THEN THEN ) IF IF (  METHOD_3 ( ) . METHOD_6 ( METHOD_7 ( ) ) )  METHOD_3 ( ) . METHOD_6 ( METHOD_7 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  < org.ovirt.engine.core.compat.Guid > VAR_1 = new TYPE_3 < org.ovirt.engine.core.compat.Guid > ( VAR_2 , VAR_3 . IdQueryParameters class ) )  < org.ovirt.engine.core.compat.Guid > VAR_1 = new TYPE_3 < org.ovirt.engine.core.compat.Guid > ( VAR_2 , VAR_3 . IdQueryParameters class ) ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_4 ( VAR_1 , METHOD_2 ( id ) ) ) INIT = new TYPE_4 ( VAR_1 , METHOD_2 ( id ) ) ) VAR VAR (  return inject ( new TYPE_5 < TYPE_6 , org.ovirt.engine.core.common.businessentities.VDS > ( VAR_5 , VAR_6 , VAR_4 ) ) ; )  return inject ( new TYPE_5 < TYPE_6 , org.ovirt.engine.core.common.businessentities.VDS > ( VAR_5 , VAR_6 , VAR_4 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = dao . METHOD_2 ( VAR_2 , VAR_3 , VAR_4 ) ) INIT = dao . METHOD_2 ( VAR_2 , VAR_3 , VAR_4 ) ) VAR VAR (  TYPE_2 . METHOD_3 ( VAR_1 ) )  TYPE_2 . METHOD_3 ( VAR_1 ) (  TYPE_2 . assertEquals ( VAR_1 . METHOD_4 ( ) , STRING_1 ) )  TYPE_2 . assertEquals ( VAR_1 . METHOD_4 ( ) , STRING_1 ) (  dao . METHOD_5 ( VAR_2 , VAR_3 , VAR_4 , STRING_2 ) )  dao . METHOD_5 ( VAR_2 , VAR_3 , VAR_4 , STRING_2 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_5 ) NAME VAR_5 ( INIT = dao . METHOD_2 ( VAR_2 , VAR_3 , VAR_4 ) ) INIT = dao . METHOD_2 ( VAR_2 , VAR_3 , VAR_4 ) ) VAR VAR (  TYPE_2 . METHOD_3 ( VAR_5 ) )  TYPE_2 . METHOD_3 ( VAR_5 ) (  TYPE_2 . assertEquals ( VAR_5 . METHOD_4 ( ) , STRING_2 ) )  TYPE_2 . assertEquals ( VAR_5 . METHOD_4 ( ) , STRING_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source != null ? source : new java.util.ArrayList < TYPE_1 > ( ) ; )  return source != null ? source : new java.util.ArrayList < TYPE_1 > ( ) ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : new java.util.ArrayList < TYPE_1 > ( ) ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : new java.util.ArrayList < TYPE_1 > ( ) ; } } (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new TYPE_2 ( VAR_1 ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new TYPE_2 ( VAR_1 ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return ( ( ( VAR_1 instanceof TYPE_2 ) && ( id . equals ( VAR_1 . getParameters ( ) . METHOD_2 ( ) . getId ( ) ) ) ) && ( ( VAR_1 . METHOD_3 ( ) ) != ( VAR_2 ) ) ) && ( ( VAR_1 . METHOD_3 ( ) ) != ( VAR_3 ) ) ; )  return ( ( ( VAR_1 instanceof TYPE_2 ) && ( id . equals ( VAR_1 . getParameters ( ) . METHOD_2 ( ) . getId ( ) ) ) ) && ( ( VAR_1 . METHOD_3 ( ) ) != ( VAR_2 ) ) ) && ( ( VAR_1 . METHOD_3 ( ) ) != ( VAR_3 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain> ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( returnValue ) ) ) INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( returnValue ) ) ) VAR VAR (  VAR_2 = new java.util.ArrayList < > ( ) )  VAR_2 = new java.util.ArrayList < > ( ) ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ) TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME domain ) NAME domain ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( IF IF ( COND TYPE_1 . METHOD_1 ( domain ) ) COND TYPE_1 . METHOD_1 ( domain ) ( THEN THEN (  VAR_2 . add ( domain ) )  VAR_2 . add ( domain ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ( IF IF ( COND METHOD_2 ( ) . METHOD_3 ( ) ) COND METHOD_2 ( ) . METHOD_3 ( ) ( THEN THEN (  METHOD_4 ( ) )  METHOD_4 ( ) ) THEN THEN ( ELSE ELSE (  METHOD_5 ( ) )  METHOD_5 ( ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME id ) NAME id ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Boolean ) RETURN java.lang.Boolean ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return ( ( java.lang.Boolean ) ( source ) ) ; )  return ( ( java.lang.Boolean ) ( source ) ) ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter < java.lang.Boolean > ( ) { public java.lang.Boolean Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return ( ( java.lang.Boolean ) ( source ) ) ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter < java.lang.Boolean > ( ) { public java.lang.Boolean Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return ( ( java.lang.Boolean ) ( source ) ) ; } } (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( ) )  VAR_1 . METHOD_2 ( ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ( INIT = METHOD_3 ( null ) ) INIT = METHOD_3 ( null ) ) VAR VAR (  model . METHOD_4 ( TYPE_2 . METHOD_5 ( ) ) )  model . METHOD_4 ( TYPE_2 . METHOD_5 ( ) ) (  model . METHOD_6 ( TYPE_2 . METHOD_7 ( VAR_2 [ 2 ] ) ) )  model . METHOD_6 ( TYPE_2 . METHOD_7 ( VAR_2 [ 2 ] ) ) ( TRY TRY ( BLOCK BLOCK (  VAR_3 . add ( model ) )  VAR_3 . add ( model ) (  METHOD_8 ( STRING_1 ) )  METHOD_8 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( BLOCK BLOCK (  METHOD_9 ( VAR_4 , VAR_5 ) )  METHOD_9 ( VAR_4 , VAR_5 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME returnValue ) NAME returnValue ( INIT = result . getReturnValue ( ) ) INIT = result . getReturnValue ( ) ) VAR VAR ( IF IF ( COND ( returnValue != null ) && ( returnValue . getSucceeded ( ) ) ) COND ( returnValue != null ) && ( returnValue . getSucceeded ( ) ) ( THEN THEN (  VAR_1 . METHOD_2 ( ( ( VAR_2 ) == null ? ( ( org.ovirt.engine.core.compat.Guid ) ( returnValue . METHOD_3 ( ) ) ) : VAR_2 ) , VAR_3 . METHOD_4 ( ) . METHOD_5 ( ) , VAR_3 . METHOD_6 ( ) ) )  VAR_1 . METHOD_2 ( ( ( VAR_2 ) == null ? ( ( org.ovirt.engine.core.compat.Guid ) ( returnValue . METHOD_3 ( ) ) ) : VAR_2 ) , VAR_3 . METHOD_4 ( ) . METHOD_5 ( ) , VAR_3 . METHOD_6 ( ) ) ) THEN THEN ( ELSE ELSE (  VAR_1 . METHOD_7 ( ) . METHOD_8 ( ) )  VAR_1 . METHOD_7 ( ) . METHOD_8 ( ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_2 ( ) ) INIT = VAR_2 . METHOD_2 ( ) ) VAR VAR (  TYPE_2 . assertEquals ( VAR_1 . size ( ) , 2 ) )  TYPE_2 . assertEquals ( VAR_1 . size ( ) , 2 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . get ( 0 ) ) INIT = VAR_1 . get ( 0 ) ) VAR VAR (  TYPE_2 . assertEquals ( cluster . getStoragePoolId ( ) , VAR_3 . METHOD_3 ( ) ) )  TYPE_2 . assertEquals ( cluster . getStoragePoolId ( ) , VAR_3 . METHOD_3 ( ) ) (  TYPE_2 . assertEquals ( VAR_4 . StoragePool , VAR_3 . METHOD_4 ( ) ) )  TYPE_2 . assertEquals ( VAR_4 . StoragePool , VAR_3 . METHOD_4 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> ( NAME VAR_1 ) NAME VAR_1 ( INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( getStoragePoolId ( ) . getValue ( ) ) ) INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( getStoragePoolId ( ) . getValue ( ) ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.network.Network ) TYPE org.ovirt.engine.core.common.businessentities.network.Network ( NAME VAR_2 ) NAME VAR_2 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  METHOD_4 ( ) . METHOD_5 ( VAR_2 ) )  METHOD_4 ( ) . METHOD_5 ( VAR_2 ) (  org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_6 ( VAR_2 . getId ( ) ) )  org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_6 ( VAR_2 . getId ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  METHOD_4 ( ) . METHOD_7 ( ) )  METHOD_4 ( ) . METHOD_7 ( ) (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  org.mockito.Mockito.doReturn ( true ) . when ( cmd ) . METHOD_3 ( TYPE_1 . any ( ) ) )  org.mockito.Mockito.doReturn ( true ) . when ( cmd ) . METHOD_3 ( TYPE_1 . any ( ) ) (  org.mockito.Mockito.when ( cmd . METHOD_4 ( ) . METHOD_5 ( TYPE_1 . METHOD_6 ( ) ) ) . thenReturn ( new TYPE_2 . ValidationResult ( VAR_1 ) ) )  org.mockito.Mockito.when ( cmd . METHOD_4 ( ) . METHOD_5 ( TYPE_1 . METHOD_6 ( ) ) ) . thenReturn ( new TYPE_2 . ValidationResult ( VAR_1 ) ) (  METHOD_7 ( TYPE_3 . METHOD_8 ( ) ) )  METHOD_7 ( TYPE_3 . METHOD_8 ( ) ) (  TYPE_4 . METHOD_9 ( cmd , VAR_2 ) )  TYPE_4 . METHOD_9 ( cmd , VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.DiskImage ) TYPE org.ovirt.engine.core.common.businessentities.DiskImage ( NAME disk ) NAME disk ( INIT = new org.ovirt.engine.core.common.businessentities.DiskImage ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.DiskImage ( ) ) VAR VAR (  disk . METHOD_2 ( VAR_1 ) )  disk . METHOD_2 ( VAR_1 ) (  disk . METHOD_3 ( VAR_2 ) )  disk . METHOD_3 ( VAR_2 ) (  disk . METHOD_4 ( true ) )  disk . METHOD_4 ( true ) (  disk . METHOD_5 ( vmId ) )  disk . METHOD_5 ( vmId ) (  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( command ) . METHOD_6 ( ) )  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( command ) . METHOD_6 ( ) (  TYPE_1 . when ( VAR_3 . get ( VAR_1 ) ) . thenReturn ( disk ) )  TYPE_1 . when ( VAR_3 . get ( VAR_1 ) ) . thenReturn ( disk ) (  METHOD_7 ( false ) )  METHOD_7 ( false ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( java.util.List < TYPE_1 > ) ( returnValue ) ) ) INIT = ( ( java.util.List < TYPE_1 > ) ( returnValue ) ) ) VAR VAR (  VAR_1 = ( VAR_1 != null ) ? VAR_1 : new java.util.ArrayList < TYPE_1 > ( ) )  VAR_1 = ( VAR_1 != null ) ? VAR_1 : new java.util.ArrayList < TYPE_1 > ( ) (  METHOD_1 ( ) . setItems ( VAR_1 ) )  METHOD_1 ( ) . setItems ( VAR_1 ) (  METHOD_1 ( ) . METHOD_2 ( VAR_1 . isEmpty ( ) ) )  METHOD_1 ( ) . METHOD_2 ( VAR_1 . isEmpty ( ) ) (  METHOD_3 ( ) )  METHOD_3 ( ) (  METHOD_4 ( ) )  METHOD_4 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( VAR_1 ) )  METHOD_2 ( VAR_1 ) (  VAR_2 . METHOD_3 ( VAR_3 class , VAR_4 ) )  VAR_2 . METHOD_3 ( VAR_3 class , VAR_4 ) (  org.mockito.Mockito.doReturn ( org.mockito.Mockito . METHOD_4 ( VAR_5 class ) ) . when ( cmd ) . METHOD_5 ( ) )  org.mockito.Mockito.doReturn ( org.mockito.Mockito . METHOD_4 ( VAR_5 class ) ) . when ( cmd ) . METHOD_5 ( ) (  validator = org.mockito.Mockito . METHOD_6 ( new TYPE_2 ( cmd . getParameters ( ) ) ) )  validator = org.mockito.Mockito . METHOD_6 ( new TYPE_2 ( cmd . getParameters ( ) ) ) (  org.mockito.Mockito.doReturn ( validator ) . when ( cmd ) . METHOD_7 ( ) )  org.mockito.Mockito.doReturn ( validator ) . when ( cmd ) . METHOD_7 ( ) (  METHOD_8 ( ) )  METHOD_8 ( ) (  org.mockito.Mockito.doReturn ( VAR_6 ) . when ( validator ) . METHOD_9 ( ) )  org.mockito.Mockito.doReturn ( VAR_6 ) . when ( validator ) . METHOD_9 ( ) (  cmd . METHOD_10 ( ) )  cmd . METHOD_10 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME sql ) NAME sql ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  sql = METHOD_2 ( sql ) )  sql = METHOD_2 ( sql ) ( IF IF ( COND ( sql . length ( ) ) > 0 ) COND ( sql . length ( ) ) > 0 ( THEN THEN (  sql = sql . METHOD_3 ( STRING_1 , STRING_2 ) )  sql = sql . METHOD_3 ( STRING_1 , STRING_2 ) ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK ( IF IF ( COND sql . METHOD_4 ( VAR_1 ) ) COND sql . METHOD_4 ( VAR_1 ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME status ) NAME status ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME returnValue ) NAME returnValue ( INIT = false ) INIT = false ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_3 . METHOD_2 ( ) ) INIT = TYPE_3 . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN (  returnValue = ( VAR_1 . METHOD_3 ( ) ) == status )  returnValue = ( VAR_1 . METHOD_3 ( ) ) == status ( IF IF ( COND ( ! returnValue ) && ( ! ( TYPE_3 . getReturnValue ( ) . METHOD_4 ( ) . METHOD_5 ( TYPE_4 . toString ( ) ) ) ) ) COND ( ! returnValue ) && ( ! ( TYPE_3 . getReturnValue ( ) . METHOD_4 ( ) . METHOD_5 ( TYPE_4 . toString ( ) ) ) ) ( THEN THEN (  addCanDoActionMessage ( TYPE_4 ) )  addCanDoActionMessage ( TYPE_4 ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return returnValue ; )  return returnValue ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<TYPE_1> ) TYPE java.util.ArrayList<TYPE_1> ( NAME models ) NAME models ( INIT = new java.util.ArrayList < TYPE_1 > ( ) ) INIT = new java.util.ArrayList < TYPE_1 > ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  VAR_1 . METHOD_2 ( true ) )  VAR_1 . METHOD_2 ( true ) (  models . add ( VAR_1 ) )  models . add ( VAR_1 ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_3 ( ) ) INIT = new TYPE_3 ( ) ) VAR VAR (  models . add ( VAR_2 ) )  models . add ( VAR_2 ) (  TYPE_4 . METHOD_3 ( VAR_3 , models ) )  TYPE_4 . METHOD_3 ( VAR_3 , models ) (  return models ; )  return models ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME context ) NAME context ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME value ) NAME value ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = null ) INIT = null ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( IN TYPE_3 . METHOD_2 ( context ) . METHOD_3 ( VAR_4 class . getName ( ) ) ) IN TYPE_3 . METHOD_2 ( context ) . METHOD_3 ( VAR_4 class . getName ( ) ) ( BLOCK BLOCK ( IF IF ( COND value . equals ( VAR_3 . METHOD_4 ( ) . < TYPE_4 > get ( VAR_5 ) . METHOD_5 ( VAR_1 ) ) ) COND value . equals ( VAR_3 . METHOD_4 ( ) . < TYPE_4 > get ( VAR_5 ) . METHOD_5 ( VAR_1 ) ) ( THEN THEN (  VAR_2 = VAR_3 )  VAR_2 = VAR_3 (  break ; )  break ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ( INIT = ( ( TYPE_1 ) ( target ) ) ) INIT = ( ( TYPE_1 ) ( target ) ) ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME result ) NAME result ( INIT = ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) INIT = ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) VAR VAR ( IF IF ( COND result != null ) COND result != null ( THEN THEN (  model . METHOD_2 ( ( ( java.util.ArrayList < TYPE_3 > ) ( result ) ) ) )  model . METHOD_2 ( ( ( java.util.ArrayList < TYPE_3 > ) ( result ) ) ) ) THEN THEN ( ELSE ELSE (  METHOD_3 ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_4 ( ) ) )  METHOD_3 ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_4 ( ) ) ) ELSE ELSE ) IF IF (  model . METHOD_5 ( ) . METHOD_6 ( ) )  model . METHOD_5 ( ) . METHOD_6 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.Map<java.lang.String,java.lang.String> ) RETURN java.util.Map<java.lang.String,java.lang.String> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) == null ) COND ( VAR_1 ) == null ( THEN THEN (  VAR_1 = new java.util.HashMap < > ( ) )  VAR_1 = new java.util.HashMap < > ( ) (  VAR_1 . put ( TYPE_1 . name ( ) . METHOD_2 ( ) , ( ( TYPE_2 . METHOD_3 ( ) ) == null ? STRING_1 : TYPE_2 . METHOD_3 ( ) ) ) )  VAR_1 . put ( TYPE_1 . name ( ) . METHOD_2 ( ) , ( ( TYPE_2 . METHOD_3 ( ) ) == null ? STRING_1 : TYPE_2 . METHOD_3 ( ) ) ) (  VAR_1 . put ( TYPE_3 . name ( ) . METHOD_2 ( ) , TYPE_2 . METHOD_4 ( ) ) )  VAR_1 . put ( TYPE_3 . name ( ) . METHOD_2 ( ) , TYPE_2 . METHOD_4 ( ) ) ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  validator = TYPE_1 . METHOD_2 ( ) )  validator = TYPE_1 . METHOD_2 ( ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = org.mockito.Mockito . METHOD_3 ( VAR_2 class ) ) INIT = org.mockito.Mockito . METHOD_3 ( VAR_2 class ) ) VAR VAR (  org.mockito.Mockito.when ( VAR_1 . getValue ( VAR_3 , VAR_4 ) ) . thenReturn ( VAR_5 ) )  org.mockito.Mockito.when ( VAR_1 . getValue ( VAR_3 , VAR_4 ) ) . thenReturn ( VAR_5 ) (  org.mockito.Mockito.when ( VAR_1 . getValue ( VAR_6 , VAR_4 ) ) . thenReturn ( VAR_7 ) )  org.mockito.Mockito.when ( VAR_1 . getValue ( VAR_6 , VAR_4 ) ) . thenReturn ( VAR_7 ) (  TYPE_3 . METHOD_4 ( VAR_1 ) )  TYPE_3 . METHOD_4 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN java.lang.Boolean ) RETURN java.lang.Boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.Object> ) TYPE java.util.Map<java.lang.String,java.lang.Object> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 . METHOD_2 ( name ) ) COND VAR_1 . METHOD_2 ( name ) ( THEN THEN ( IF IF ( COND ( VAR_1 . get ( name ) ) instanceof java.lang.Boolean ) COND ( VAR_1 . get ( name ) ) instanceof java.lang.Boolean ( THEN THEN (  return ( ( java.lang.Boolean ) ( VAR_1 . get ( name ) ) ) ; )  return ( ( java.lang.Boolean ) ( VAR_1 . get ( name ) ) ) ; ) THEN THEN ) IF IF (  return java.lang.Boolean . METHOD_3 ( VAR_1 . get ( name ) . toString ( ) ) ; )  return java.lang.Boolean . METHOD_3 ( VAR_1 . get ( name ) . toString ( ) ) ; ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) )  METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) (  VAR_1 . METHOD_4 ( ) )  VAR_1 . METHOD_4 ( ) ( TRY TRY ( BLOCK BLOCK (  resource . METHOD_5 ( ) )  resource . METHOD_5 ( ) (  METHOD_6 ( STRING_1 ) )  METHOD_6 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( BLOCK BLOCK (  METHOD_7 ( VAR_2 . METHOD_8 ( ) ) )  METHOD_7 ( VAR_2 . METHOD_8 ( ) ) (  assertEquals ( INT_1 , VAR_2 . METHOD_8 ( ) . getStatus ( ) ) )  assertEquals ( INT_1 , VAR_2 . METHOD_8 ( ) . getStatus ( ) ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( VAR_2 . Guid class ) ) ) . thenReturn ( TYPE_2 . METHOD_3 ( ) ) )  org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( VAR_2 . Guid class ) ) ) . thenReturn ( TYPE_2 . METHOD_3 ( ) ) (  org.mockito.Mockito.when ( VAR_1 . METHOD_4 ( TYPE_1 . METHOD_5 ( ) ) ) . thenReturn ( TYPE_2 . METHOD_3 ( ) ) )  org.mockito.Mockito.when ( VAR_1 . METHOD_4 ( TYPE_1 . METHOD_5 ( ) ) ) . thenReturn ( TYPE_2 . METHOD_3 ( ) ) (  VAR_3 . METHOD_6 ( VAR_4 , java.lang.Boolean . FALSE ) )  VAR_3 . METHOD_6 ( VAR_4 , java.lang.Boolean . FALSE ) (  METHOD_7 ( ) )  METHOD_7 ( ) (  METHOD_8 ( ) )  METHOD_8 ( ) (  METHOD_9 ( VAR_5 ) )  METHOD_9 ( VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . list ( METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ) ) INIT = TYPE_2 . list ( METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ( INIT = null ) INIT = null ) VAR VAR ( IF IF ( COND ( VAR_1 != null ) && ( ( VAR_1 . size ( ) ) == 1 ) ) COND ( VAR_1 != null ) && ( ( VAR_1 . size ( ) ) == 1 ) ( THEN THEN (  result = new TYPE_1 ( VAR_1 . get ( 0 ) ) )  result = new TYPE_1 ( VAR_1 . get ( 0 ) ) ) THEN THEN ) IF IF (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = dao . METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( VAR_2 ) , VAR_3 ) ) INIT = dao . METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( VAR_2 ) , VAR_3 ) ) VAR VAR (  TYPE_2 . METHOD_4 ( VAR_1 ) )  TYPE_2 . METHOD_4 ( VAR_1 ) (  TYPE_2 . assertEquals ( VAR_4 , VAR_1 . getStatus ( ) ) )  TYPE_2 . assertEquals ( VAR_4 , VAR_1 . getStatus ( ) ) (  VAR_1 . METHOD_5 ( VAR_5 ) )  VAR_1 . METHOD_5 ( VAR_5 ) (  dao . METHOD_6 ( VAR_1 ) )  dao . METHOD_6 ( VAR_1 ) (  VAR_1 = dao . METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( VAR_2 ) , VAR_3 ) )  VAR_1 = dao . METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( VAR_2 ) , VAR_3 ) (  TYPE_2 . METHOD_4 ( VAR_1 ) )  TYPE_2 . METHOD_4 ( VAR_1 ) (  TYPE_2 . assertEquals ( VAR_5 , VAR_1 . getStatus ( ) ) )  TYPE_2 . assertEquals ( VAR_5 , VAR_1 . getStatus ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME equals ) NAME equals ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME obj ) NAME obj ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( this ) == obj ) COND ( this ) == obj ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ( IF IF ( COND obj == null ) COND obj == null ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( IF IF ( COND ( METHOD_1 ( ) ) != ( obj . METHOD_1 ( ) ) ) COND ( METHOD_1 ( ) ) != ( obj . METHOD_1 ( ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME other ) NAME other ( INIT = ( ( TYPE_1 ) ( obj ) ) ) INIT = ( ( TYPE_1 ) ( obj ) ) ) VAR VAR ( IF IF ( COND ( VAR_1 ) != ( VAR_2 ) ) COND ( VAR_1 ) != ( VAR_2 ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VmTemplate> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VmTemplate> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( TYPE_1 . getParameters ( ) . METHOD_5 ( ) ) ) INIT = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( TYPE_1 . getParameters ( ) . METHOD_5 ( ) ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.VmTemplate ) TYPE org.ovirt.engine.core.common.businessentities.VmTemplate ( NAME VAR_2 ) NAME VAR_2 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  TYPE_2 . METHOD_6 ( VAR_2 ) )  TYPE_2 . METHOD_6 ( VAR_2 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  TYPE_1 . METHOD_7 ( ) . METHOD_8 ( VAR_1 ) )  TYPE_1 . METHOD_7 ( ) . METHOD_8 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( true , new org.ovirt.engine.core.common.businessentities.VDS ( ) , true ) )  METHOD_2 ( true , new org.ovirt.engine.core.common.businessentities.VDS ( ) , true ) (  org.mockito.Mockito.when ( VAR_1 . METHOD_3 ( TYPE_1 . any ( VAR_2 . Guid class ) , TYPE_1 . METHOD_4 ( VAR_3 ) ) ) . thenReturn ( true ) )  org.mockito.Mockito.when ( VAR_1 . METHOD_3 ( TYPE_1 . any ( VAR_2 . Guid class ) , TYPE_1 . METHOD_4 ( VAR_3 ) ) ) . thenReturn ( true ) (  TYPE_2 . METHOD_5 ( command . validate ( ) ) )  TYPE_2 . METHOD_5 ( command . validate ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME getModel ) NAME getModel ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  model . setId ( java.lang.String.valueOf ( VAR_2 [ VAR_1 ] ) ) )  model . setId ( java.lang.String.valueOf ( VAR_2 [ VAR_1 ] ) ) (  model . METHOD_1 ( TYPE_2 . value ( ) ) )  model . METHOD_1 ( TYPE_2 . value ( ) ) (  model . METHOD_2 ( VAR_3 [ VAR_1 ] ) )  model . METHOD_2 ( VAR_3 [ VAR_1 ] ) (  model . METHOD_3 ( VAR_4 [ VAR_1 ] ) )  model . METHOD_3 ( VAR_4 [ VAR_1 ] ) (  model . METHOD_4 ( VAR_5 [ VAR_1 ] ) )  model . METHOD_4 ( VAR_5 [ VAR_1 ] ) (  model . METHOD_5 ( INT_1 ) )  model . METHOD_5 ( INT_1 ) (  return model ; )  return model ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1.Network ) RETURN TYPE_1.Network ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_1.Network ) TYPE TYPE_1.Network ( NAME entity ) NAME entity ( IN METHOD_2 ( VAR_1 , METHOD_3 ( ) ) ) IN METHOD_2 ( VAR_1 , METHOD_3 ( ) ) ( BLOCK BLOCK ( IF IF ( COND ( ( id != null ) && ( id . equals ( entity . getId ( ) ) ) ) || ( ( name != null ) && ( name . equals ( entity . METHOD_4 ( ) ) ) ) ) COND ( ( id != null ) && ( id . equals ( entity . getId ( ) ) ) ) || ( ( name != null ) && ( name . equals ( entity . METHOD_4 ( ) ) ) ) ( THEN THEN (  return entity ; )  return entity ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VM> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VM> ( NAME list ) NAME list ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( IF IF ( COND list == null ) COND list == null ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ( IN list ) IN list ( BLOCK BLOCK ( IF IF ( COND VAR_1 . METHOD_3 ( vm ) . METHOD_4 ( ) ) COND VAR_1 . METHOD_3 ( vm ) . METHOD_4 ( ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  cmd . getVm ( ) . METHOD_3 ( STRING_1 ) )  cmd . getVm ( ) . METHOD_3 ( STRING_1 ) (  METHOD_4 ( ) )  METHOD_4 ( ) (  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_2 ) . METHOD_5 ( TYPE_1 . any ( VAR_3 . Guid class ) ) )  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_2 ) . METHOD_5 ( TYPE_1 . any ( VAR_3 . Guid class ) ) (  org.mockito.Mockito.when ( VAR_4 . get ( VAR_5 ) ) . thenReturn ( new TYPE_2 ( ) ) )  org.mockito.Mockito.when ( VAR_4 . get ( VAR_5 ) ) . thenReturn ( new TYPE_2 ( ) ) (  TYPE_3 . METHOD_6 ( cmd , VAR_6 ) )  TYPE_3 . METHOD_6 ( cmd , VAR_6 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( STRING_1 , VAR_2 , STRING_2 , STRING_3 , STRING_4 ) ) INIT = METHOD_2 ( STRING_1 , VAR_2 , STRING_2 , STRING_3 , STRING_4 ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_3 ) NAME VAR_3 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_2 ( STRING_1 , VAR_2 , STRING_2 , STRING_3 , STRING_4 ) ) INIT = METHOD_2 ( STRING_1 , VAR_2 , STRING_2 , STRING_3 , STRING_4 ) ) VAR VAR (  VAR_3 . add ( VAR_4 ) )  VAR_3 . add ( VAR_4 ) (  org.mockito.Mockito.when ( VAR_5 . METHOD_3 ( VAR_1 ) ) . thenReturn ( VAR_3 ) )  org.mockito.Mockito.when ( VAR_5 . METHOD_3 ( VAR_1 ) ) . thenReturn ( VAR_3 ) ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_6 ) NAME VAR_6 ( INIT = command . METHOD_4 ( VAR_1 ) ) INIT = command . METHOD_4 ( VAR_1 ) ) VAR VAR (  TYPE_2 . METHOD_5 ( VAR_6 ) )  TYPE_2 . METHOD_5 ( VAR_6 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1<TYPE_2> ) RETURN TYPE_1<TYPE_2> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME event ) NAME event ) VAR VAR ( VAR VAR ( TYPE TYPE_4<TYPE_2> ) TYPE TYPE_4<TYPE_2> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_1 < TYPE_2 > ( VAR_1 ) ) INIT = new TYPE_1 < TYPE_2 > ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_5<TYPE_3,TYPE_1<TYPE_2>> ) TYPE TYPE_5<TYPE_3,TYPE_1<TYPE_2>> ( NAME VAR_5 ) NAME VAR_5 ( INIT = new TYPE_5 < TYPE_3 , TYPE_1 < TYPE_2 > > ( event , VAR_4 ) ) INIT = new TYPE_5 < TYPE_3 , TYPE_1 < TYPE_2 > > ( event , VAR_4 ) ) VAR VAR ( IF IF ( COND VAR_3 ) COND VAR_3 ( THEN THEN (  METHOD_2 ( VAR_2 ) . METHOD_3 ( VAR_5 ) )  METHOD_2 ( VAR_2 ) . METHOD_3 ( VAR_5 ) ) THEN THEN ( ELSE ELSE (  METHOD_2 ( VAR_2 ) . add ( VAR_5 ) )  METHOD_2 ( VAR_2 ) . add ( VAR_5 ) ) ELSE ELSE ) IF IF (  return VAR_4 ; )  return VAR_4 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( java.util.List < java.lang.String > ) ( returnValue ) ) ) INIT = ( ( java.util.List < java.lang.String > ) ( returnValue ) ) ) VAR VAR (  METHOD_2 ( ) . setItems ( VAR_1 ) )  METHOD_2 ( ) . setItems ( VAR_1 ) ( IF IF ( COND ( METHOD_2 ( ) . METHOD_3 ( ) ) && ( ( METHOD_2 ( ) . getSelectedItem ( ) ) == null ) ) COND ( METHOD_2 ( ) . METHOD_3 ( ) ) && ( ( METHOD_2 ( ) . getSelectedItem ( ) ) == null ) ( THEN THEN (  METHOD_2 ( ) . setSelectedItem ( TYPE_1 . METHOD_4 ( VAR_1 ) ) )  METHOD_2 ( ) . setSelectedItem ( TYPE_1 . METHOD_4 ( VAR_1 ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_2 ) ( target ) ) ) INIT = ( ( TYPE_2 ) ( target ) ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( returnValue ) ) ) INIT = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( returnValue ) ) ) VAR VAR (  VAR_3 = VAR_2 )  VAR_3 = VAR_2 (  VAR_1 . METHOD_3 ( ) )  VAR_1 . METHOD_3 ( ) ) BLOCK BLOCK ) METHOD METHOD (  TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_2 VAR_1 = ( ( TYPE_2 ) ( target ) ) ; org.ovirt.engine.core.common.businessentities.VDS VAR_2 = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( returnValue ) ) ; VAR_3 = VAR_2 ; VAR_1 . METHOD_3 ( ) ; } } ) , VAR_4 . getName ( ) ) )  TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_2 VAR_1 = ( ( TYPE_2 ) ( target ) ) ; org.ovirt.engine.core.common.businessentities.VDS VAR_2 = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( returnValue ) ) ; VAR_3 = VAR_2 ; VAR_1 . METHOD_3 ( ) ; } } ) , VAR_4 . getName ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( ( METHOD_2 ( ) ) == ( VAR_1 ) ) || ( ( METHOD_2 ( ) ) == ( VAR_2 ) ) ) COND ( ( METHOD_2 ( ) ) == ( VAR_1 ) ) || ( ( METHOD_2 ( ) ) == ( VAR_2 ) ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ( INIT = true ) INIT = true ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( IN METHOD_3 ( ) ) IN METHOD_3 ( ) ( BLOCK BLOCK (  VAR_4 . METHOD_4 ( ) . METHOD_5 ( new TYPE_2 [ ] { new TYPE_3 ( ) } ) )  VAR_4 . METHOD_4 ( ) . METHOD_5 ( new TYPE_2 [ ] { new TYPE_3 ( ) } ) (  VAR_3 &= VAR_4 . METHOD_4 ( ) . METHOD_6 ( ) )  VAR_3 &= VAR_4 . METHOD_4 ( ) . METHOD_6 ( ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( 1 ) )  METHOD_2 ( 1 ) (  VAR_1 . METHOD_3 ( ) )  VAR_1 . METHOD_3 ( ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ( INIT = TYPE_2 . getModel ( 1 ) ) INIT = TYPE_2 . getModel ( 1 ) ) VAR VAR (  model . setId ( VAR_2 [ 1 ] . toString ( ) ) )  model . setId ( VAR_2 [ 1 ] . toString ( ) ) ( TRY TRY ( BLOCK BLOCK (  resource . METHOD_4 ( model ) )  resource . METHOD_4 ( model ) (  METHOD_5 ( STRING_1 ) )  METHOD_5 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( BLOCK BLOCK (  METHOD_6 ( VAR_3 ) )  METHOD_6 ( VAR_3 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.Disk ) TYPE TYPE_1.Disk ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE TYPE_1.Disk ) TYPE TYPE_1.Disk ( NAME entity ) NAME entity ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  model . METHOD_2 ( new TYPE_2 ( ) ) )  model . METHOD_2 ( new TYPE_2 ( ) ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_3 ( METHOD_3 ( model . getId ( ) ) ) ) INIT = new TYPE_3 ( METHOD_3 ( model . getId ( ) ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_4> ) TYPE java.util.List<TYPE_4> ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_4 ( entity ) ) INIT = VAR_1 . METHOD_4 ( entity ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK (  TYPE_5 . METHOD_5 ( VAR_4 , VAR_3 , VAR_1 . METHOD_6 ( ) ) )  TYPE_5 . METHOD_5 ( VAR_4 , VAR_3 , VAR_1 . METHOD_6 ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  model . METHOD_4 ( ) . METHOD_4 ( ) . METHOD_7 ( VAR_2 ) )  model . METHOD_4 ( ) . METHOD_4 ( ) . METHOD_7 ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  returnValue = TYPE_1 . getInstance ( ) . METHOD_2 ( VAR_1 , VAR_2 ) )  returnValue = TYPE_1 . getInstance ( ) . METHOD_2 ( VAR_1 , VAR_2 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( BLOCK BLOCK (  VAR_4 . error ( STRING_1 , VAR_3 ) )  VAR_4 . error ( STRING_1 , VAR_3 ) ) BLOCK BLOCK ) CATCH CATCH ( FINALLY FINALLY (  VAR_5 . METHOD_3 ( ) )  VAR_5 . METHOD_3 ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME getValue ) NAME getValue ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME item ) NAME item ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_3 . METHOD_1 ( ) . get ( VAR_2 . METHOD_2 ( item ) ) ) INIT = TYPE_3 . METHOD_1 ( ) . get ( VAR_2 . METHOD_2 ( item ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME resource ) NAME resource ( INIT = TYPE_5 . METHOD_3 ( ) . METHOD_4 ( ( VAR_1 + STRING_1 ) ) ) INIT = TYPE_5 . METHOD_3 ( ) . METHOD_4 ( ( VAR_1 + STRING_1 ) ) ) VAR VAR ( IF IF ( COND ( resource == null ) || ( ! ( resource instanceof TYPE_1 ) ) ) COND ( resource == null ) || ( ! ( resource instanceof TYPE_1 ) ) ( THEN THEN (  resource = TYPE_5 . METHOD_3 ( ) . METHOD_5 ( ) )  resource = TYPE_5 . METHOD_3 ( ) . METHOD_5 ( ) ) THEN THEN ) IF IF (  return ( ( TYPE_1 ) ( resource ) ) ; )  return ( ( TYPE_1 ) ( resource ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_1 . METHOD_2 ( null ) )  VAR_1 . METHOD_2 ( null ) (  VAR_1 . METHOD_3 ( null ) )  VAR_1 . METHOD_3 ( null ) ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ) TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME VAR_2 ) NAME VAR_2 ( INIT = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) ) VAR VAR (  VAR_2 . METHOD_4 ( VAR_3 ) )  VAR_2 . METHOD_4 ( VAR_3 ) (  VAR_1 . METHOD_5 ( VAR_2 ) )  VAR_1 . METHOD_5 ( VAR_2 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_1 . getStoragePoolId ( ) ) INIT = VAR_1 . getStoragePoolId ( ) ) VAR VAR (  TYPE_3 . assertEquals ( VAR_3 , VAR_4 ) )  TYPE_3 . assertEquals ( VAR_3 , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2<org.ovirt.engine.core.compat.Guid> ) TYPE TYPE_2<org.ovirt.engine.core.compat.Guid> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 < org.ovirt.engine.core.compat.Guid > ( ) { public org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface METHOD_2 ( org.ovirt.engine.core.compat.Guid VAR_2 ) throws TYPE_3 { return VAR_3 . METHOD_3 ( id ) ; } } ) INIT = new TYPE_2 < org.ovirt.engine.core.compat.Guid > ( ) { public org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface METHOD_2 ( org.ovirt.engine.core.compat.Guid VAR_2 ) throws TYPE_3 { return VAR_3 . METHOD_3 ( id ) ; } } ) VAR VAR ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ) RETURN org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ( NAME METHOD_2 ) NAME METHOD_2 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return VAR_3 . METHOD_3 ( id ) ; )  return VAR_3 . METHOD_3 ( id ) ; ) BLOCK BLOCK ) METHOD METHOD ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_4 ( VAR_1 , METHOD_4 ( id ) ) ) INIT = new TYPE_4 ( VAR_1 , METHOD_4 ( id ) ) ) VAR VAR (  return inject ( new TYPE_5 < TYPE_6 , org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > ( VAR_5 , VAR_2 , VAR_4 ) ) ; )  return inject ( new TYPE_5 < TYPE_6 , org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > ( VAR_5 , VAR_2 , VAR_4 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  model . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_1 class ) ) )  model . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_1 class ) ) (  model . METHOD_4 ( TYPE_2 . METHOD_3 ( VAR_2 class ) ) )  model . METHOD_4 ( TYPE_2 . METHOD_3 ( VAR_2 class ) ) (  model . METHOD_5 ( TYPE_2 . METHOD_3 ( VAR_3 class ) ) )  model . METHOD_5 ( TYPE_2 . METHOD_3 ( VAR_3 class ) ) (  model . METHOD_6 ( TYPE_2 . METHOD_3 ( VAR_4 class ) ) )  model . METHOD_6 ( TYPE_2 . METHOD_3 ( VAR_4 class ) ) (  model . METHOD_7 ( null ) )  model . METHOD_7 ( null ) (  return model ; )  return model ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  METHOD_3 ( true , null ) )  METHOD_3 ( true , null ) (  cmd . METHOD_4 ( ) )  cmd . METHOD_4 ( ) (  org.mockito.Mockito . METHOD_5 ( VAR_1 , org.mockito.Mockito . METHOD_6 ( 1 ) ) . METHOD_7 ( TYPE_1 . any ( VAR_2 class ) ) )  org.mockito.Mockito . METHOD_5 ( VAR_1 , org.mockito.Mockito . METHOD_6 ( 1 ) ) . METHOD_7 ( TYPE_1 . any ( VAR_2 class ) ) (  TYPE_2 . assertEquals ( VAR_3 , cmd . METHOD_8 ( ) ) )  TYPE_2 . assertEquals ( VAR_3 , cmd . METHOD_8 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( VAR_2 ) == null ) || ( VAR_2 . isEmpty ( ) ) ) COND ( ( VAR_2 ) == null ) || ( VAR_2 . isEmpty ( ) ) ( THEN THEN (  VAR_2 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) )  VAR_2 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) THEN THEN ) IF IF (  return ( ( VAR_2 ) != null ) && ( ! ( VAR_2 . isEmpty ( ) ) ) ; )  return ( ( VAR_2 ) != null ) && ( ! ( VAR_2 . isEmpty ( ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME rs ) NAME rs ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME entity ) NAME entity ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  entity . setId ( METHOD_2 ( rs , STRING_1 ) ) )  entity . setId ( METHOD_2 ( rs , STRING_1 ) ) (  entity . METHOD_3 ( rs.getString ( STRING_2 ) ) )  entity . METHOD_3 ( rs.getString ( STRING_2 ) ) (  entity . METHOD_4 ( rs.getString ( STRING_3 ) ) )  entity . METHOD_4 ( rs.getString ( STRING_3 ) ) (  entity . METHOD_5 ( rs.getString ( STRING_4 ) ) )  entity . METHOD_5 ( rs.getString ( STRING_4 ) ) (  entity . METHOD_6 ( TYPE_4 . METHOD_7 ( rs.getString ( STRING_5 ) . METHOD_8 ( STRING_6 ) ) ) )  entity . METHOD_6 ( TYPE_4 . METHOD_7 ( rs.getString ( STRING_5 ) . METHOD_8 ( STRING_6 ) ) ) (  return entity ; )  return entity ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME validator ) NAME validator ( INIT = METHOD_2 ( METHOD_3 ( ) ) ) INIT = METHOD_2 ( METHOD_3 ( ) ) ) VAR VAR (  return ( ( super . METHOD_1 ( ) ) && ( validate ( validator . METHOD_4 ( ) ) ) ) && ( validate ( validator . METHOD_5 ( ) ) ) ; )  return ( ( super . METHOD_1 ( ) ) && ( validate ( validator . METHOD_4 ( ) ) ) ) && ( validate ( validator . METHOD_5 ( ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME params ) NAME params ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  params . METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) )  params . METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) (  params . METHOD_4 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) )  params . METHOD_4 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) (  cmd = org.mockito.Mockito . METHOD_5 ( new TYPE_2 ( params , null ) ) )  cmd = org.mockito.Mockito . METHOD_5 ( new TYPE_2 ( params , null ) ) (  cmd . METHOD_6 ( ) )  cmd . METHOD_6 ( ) (  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( cmd ) . METHOD_7 ( ) )  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( cmd ) . METHOD_7 ( ) (  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( cmd ) . METHOD_8 ( ) )  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( cmd ) . METHOD_8 ( ) (  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( cmd ) . METHOD_9 ( ) )  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( cmd ) . METHOD_9 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( VAR_1 , TYPE_1 . METHOD_3 ( STRING_1 ) ) )  METHOD_2 ( VAR_1 , TYPE_1 . METHOD_3 ( STRING_1 ) ) (  METHOD_2 ( VAR_2 , TYPE_1 . METHOD_3 ( STRING_2 ) ) )  METHOD_2 ( VAR_2 , TYPE_1 . METHOD_3 ( STRING_2 ) ) (  METHOD_2 ( VAR_3 , TYPE_1 . METHOD_3 ( STRING_3 ) ) )  METHOD_2 ( VAR_3 , TYPE_1 . METHOD_3 ( STRING_3 ) ) (  METHOD_2 ( VAR_4 , TYPE_1 . METHOD_3 ( STRING_4 ) ) )  METHOD_2 ( VAR_4 , TYPE_1 . METHOD_3 ( STRING_4 ) ) (  METHOD_2 ( VAR_5 , TYPE_1 . METHOD_3 ( STRING_5 ) ) )  METHOD_2 ( VAR_5 , TYPE_1 . METHOD_3 ( STRING_5 ) ) (  METHOD_2 ( VAR_6 , TYPE_1 . METHOD_3 ( STRING_6 ) ) )  METHOD_2 ( VAR_6 , TYPE_1 . METHOD_3 ( STRING_6 ) ) (  METHOD_2 ( VAR_7 , STRING_7 ) )  METHOD_2 ( VAR_7 , STRING_7 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN org.ovirt.engine.core.common.businessentities.DiskImage ) RETURN org.ovirt.engine.core.common.businessentities.DiskImage ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.DiskImage ) TYPE org.ovirt.engine.core.common.businessentities.DiskImage ( NAME diskImage ) NAME diskImage ( INIT = new org.ovirt.engine.core.common.businessentities.DiskImage ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.DiskImage ( ) ) VAR VAR (  diskImage . METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) )  diskImage . METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) (  diskImage . METHOD_4 ( new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( TYPE_1 . METHOD_5 ( new org.ovirt.engine.core.compat.Guid ( ) ) ) ) )  diskImage . METHOD_4 ( new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( TYPE_1 . METHOD_5 ( new org.ovirt.engine.core.compat.Guid ( ) ) ) ) (  return diskImage ; )  return diskImage ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.Network ) TYPE org.ovirt.engine.core.common.businessentities.Network ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( STRING_1 ) ) INIT = METHOD_2 ( STRING_1 ) ) VAR VAR (  METHOD_3 ( VAR_1 ) )  METHOD_3 ( VAR_1 ) ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_4 ( VAR_3 , VAR_1 . getName ( ) ) ) INIT = METHOD_4 ( VAR_3 , VAR_1 . getName ( ) ) ) VAR VAR (  VAR_2 . METHOD_5 ( VAR_4 ) )  VAR_2 . METHOD_5 ( VAR_4 ) ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VdsNetworkInterface> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VdsNetworkInterface> ( NAME VAR_5 ) NAME VAR_5 ( INIT = METHOD_6 ( VAR_2 . getName ( ) ) ) INIT = METHOD_6 ( VAR_2 . getName ( ) ) ) VAR VAR (  METHOD_7 ( VAR_2 , VAR_5 ) )  METHOD_7 ( VAR_2 , VAR_5 ) (  VAR_2 . METHOD_5 ( VAR_6 ) )  VAR_2 . METHOD_5 ( VAR_6 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_7 ) NAME VAR_7 ( INIT = METHOD_8 ( METHOD_9 ( VAR_2 , VAR_5 ) ) ) INIT = METHOD_8 ( METHOD_9 ( VAR_2 , VAR_5 ) ) ) VAR VAR (  METHOD_10 ( VAR_7 , VAR_1 ) )  METHOD_10 ( VAR_7 , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( ) )  VAR_1 . METHOD_2 ( ) (  VAR_1 . add ( TYPE_1 . METHOD_3 ( 1 , VAR_2 ) ) )  VAR_1 . add ( TYPE_1 . METHOD_3 ( 1 , VAR_2 ) ) (  METHOD_4 ( ) )  METHOD_4 ( ) (  command . METHOD_5 ( ) )  command . METHOD_5 ( ) (  org.mockito.Mockito . METHOD_6 ( VAR_3 ) . METHOD_7 ( TYPE_2 . METHOD_8 ( VAR_1 ) , TYPE_2 . any ( VAR_4 . Guid class ) ) )  org.mockito.Mockito . METHOD_6 ( VAR_3 ) . METHOD_7 ( TYPE_2 . METHOD_8 ( VAR_1 ) , TYPE_2 . any ( VAR_4 . Guid class ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . METHOD_1 ( ( ( TYPE_1 < org.ovirt.engine.core.common.businessentities.StoragePool > ) ( returnValue ) ) ) )  VAR_1 . METHOD_1 ( ( ( TYPE_1 < org.ovirt.engine.core.common.businessentities.StoragePool > ) ( returnValue ) ) ) (  TYPE_2 . METHOD_2 ( VAR_1 , new TYPE_3 ( ) ) )  TYPE_2 . METHOD_2 ( VAR_1 , new TYPE_3 ( ) ) (  TYPE_4 . METHOD_3 ( VAR_2 , VAR_3 . getId ( ) ) )  TYPE_4 . METHOD_3 ( VAR_2 , VAR_3 . getId ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( STRING_1 ) ) INIT = TYPE_2 . METHOD_2 ( STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_3 ( org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) ) ) INIT = TYPE_2 . METHOD_3 ( org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) ) ) VAR VAR (  org.mockito.Mockito.when ( VAR_3 . METHOD_5 ( VAR_2 . METHOD_6 ( ) , VAR_2 . METHOD_7 ( ) ) ) . thenReturn ( VAR_2 ) )  org.mockito.Mockito.when ( VAR_3 . METHOD_5 ( VAR_2 . METHOD_6 ( ) , VAR_2 . METHOD_7 ( ) ) ) . thenReturn ( VAR_2 ) ( VAR VAR ( TYPE TYPE_4<java.lang.String,java.lang.String> ) TYPE TYPE_4<java.lang.String,java.lang.String> ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_5 . METHOD_8 ( VAR_2 . METHOD_6 ( ) , VAR_1 ) ) INIT = VAR_5 . METHOD_8 ( VAR_2 . METHOD_6 ( ) , VAR_1 ) ) VAR VAR (  TYPE_2 . METHOD_9 ( VAR_4 , VAR_1 . METHOD_10 ( ) , VAR_1 . METHOD_11 ( ) ) )  TYPE_2 . METHOD_9 ( VAR_4 , VAR_1 . METHOD_10 ( ) , VAR_1 . METHOD_11 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VM> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VM> ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StoragePool ) TYPE org.ovirt.engine.core.common.businessentities.StoragePool ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_3 ( ) . getSelectedItem ( ) ) INIT = METHOD_3 ( ) . getSelectedItem ( ) ) VAR VAR ( IF IF ( COND ( VAR_1 . isEmpty ( ) ) || ( VAR_2 == null ) ) COND ( VAR_1 . isEmpty ( ) ) || ( VAR_2 == null ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  return ( METHOD_4 ( VAR_1 ) ) && ( METHOD_5 ( VAR_1 . get ( 0 ) . METHOD_6 ( ) , VAR_2 ) ) ; )  return ( METHOD_4 ( VAR_1 ) ) && ( METHOD_5 ( VAR_1 . get ( 0 ) . METHOD_6 ( ) , VAR_2 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Boolean ) TYPE java.lang.Boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Version ) TYPE org.ovirt.engine.core.compat.Version ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return ( ( VAR_1 == null ) && ( VAR_4 . METHOD_2 ( VAR_2 . METHOD_3 ( ) , VAR_3 ) ) ) && ( ( VAR_2 . METHOD_4 ( ) ) == ( VAR_5 ) ) ; )  return ( ( VAR_1 == null ) && ( VAR_4 . METHOD_2 ( VAR_2 . METHOD_3 ( ) , VAR_3 ) ) ) && ( ( VAR_2 . METHOD_4 ( ) ) == ( VAR_5 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) == null ) COND ( VAR_1 ) == null ( THEN THEN (  VAR_1 = TYPE_1 . METHOD_2 ( ) . get ( TYPE_1 . getParameters ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) )  VAR_1 = TYPE_1 . METHOD_2 ( ) . get ( TYPE_1 . getParameters ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_2 ) == null ) COND ( VAR_2 ) == null ( THEN THEN ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_1 . METHOD_5 ( ) . get ( TYPE_1 . getParameters ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) ) INIT = TYPE_1 . METHOD_5 ( ) . get ( TYPE_1 . getParameters ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) ) VAR VAR (  VAR_2 = new TYPE_3 ( VAR_3 ) )  VAR_2 = new TYPE_3 ( VAR_3 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) ( IF IF ( COND TYPE_1 . METHOD_2 ( ) ) COND TYPE_1 . METHOD_2 ( ) ( THEN THEN ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_3 ( ) ) INIT = METHOD_3 ( ) ) VAR VAR ( IF IF ( COND ( VAR_1 != null ) && ( VAR_1 . getSucceeded ( ) ) ) COND ( VAR_1 != null ) && ( VAR_1 . getSucceeded ( ) ) ( THEN THEN (  METHOD_4 ( ) )  METHOD_4 ( ) (  METHOD_5 ( VAR_2 ) )  METHOD_5 ( VAR_2 ) (  METHOD_6 ( VAR_2 ) )  METHOD_6 ( VAR_2 ) (  TYPE_1 . METHOD_7 ( true ) )  TYPE_1 . METHOD_7 ( true ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = null ) INIT = null ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME rs ) NAME rs ( INIT = null ) INIT = null ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_1 = VAR_2 . METHOD_2 ( ) )  VAR_1 = VAR_2 . METHOD_2 ( ) (  rs = VAR_1 . METHOD_3 ( STRING_1 ) )  rs = VAR_1 . METHOD_3 ( STRING_1 ) (  rs . METHOD_4 ( ) )  rs . METHOD_4 ( ) ) BLOCK BLOCK ( FINALLY FINALLY ( IF IF ( COND rs != null ) COND rs != null ( THEN THEN (  rs . METHOD_5 ( ) )  rs . METHOD_5 ( ) ) THEN THEN ) IF IF ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN (  VAR_1 . METHOD_5 ( ) )  VAR_1 . METHOD_5 ( ) ) THEN THEN ) IF IF ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME validate ) NAME validate ( BLOCK BLOCK (  METHOD_1 ( ) . validate ( ) )  METHOD_1 ( ) . validate ( ) (  METHOD_2 ( ) . validate ( ) )  METHOD_2 ( ) . validate ( ) (  METHOD_3 ( ( ( METHOD_1 ( ) . METHOD_4 ( ) ) && ( METHOD_2 ( ) . METHOD_4 ( ) ) ) ) )  METHOD_3 ( ( ( METHOD_1 ( ) . METHOD_4 ( ) ) && ( METHOD_2 ( ) . METHOD_4 ( ) ) ) ) (  return METHOD_4 ( ) ; )  return METHOD_4 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ( STRING_1 + ( VAR_1 [ 1 ] ) ) , VAR_2 , METHOD_3 ( 1 ) ) )  METHOD_2 ( ( STRING_1 + ( VAR_1 [ 1 ] ) ) , VAR_2 , METHOD_3 ( 1 ) ) ( VAR VAR ( TYPE TYPE_1.StorageDomain ) TYPE TYPE_1.StorageDomain ( NAME storageDomain ) NAME storageDomain ( INIT = new TYPE_1 . StorageDomain ( ) ) INIT = new TYPE_1 . StorageDomain ( ) ) VAR VAR (  storageDomain . setId ( VAR_3 [ 2 ] . toString ( ) ) )  storageDomain . setId ( VAR_3 [ 2 ] . toString ( ) ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME cluster ) NAME cluster ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  cluster . METHOD_4 ( VAR_1 [ 1 ] ) )  cluster . METHOD_4 ( VAR_1 [ 1 ] ) (  METHOD_5 ( VAR_4 ) )  METHOD_5 ( VAR_4 ) (  METHOD_6 ( storageDomain , cluster ) )  METHOD_6 ( storageDomain , cluster ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) )  METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) (  METHOD_4 ( 1 , 0 , true ) )  METHOD_4 ( 1 , 0 , true ) (  VAR_1 . METHOD_5 ( ) )  VAR_1 . METHOD_5 ( ) ( TRY TRY ( BLOCK BLOCK (  resource . METHOD_6 ( getModel ( 0 ) ) )  resource . METHOD_6 ( getModel ( 0 ) ) (  TYPE_1 . METHOD_7 ( STRING_1 ) )  TYPE_1 . METHOD_7 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( BLOCK BLOCK (  METHOD_8 ( VAR_2 ) )  METHOD_8 ( VAR_2 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ) TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( VAR_2 , STRING_1 , VAR_3 ) ) INIT = METHOD_2 ( VAR_2 , STRING_1 , VAR_3 ) ) VAR VAR (  VAR_1 . METHOD_3 ( VAR_4 ) )  VAR_1 . METHOD_3 ( VAR_4 ) ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ) TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME VAR_5 ) NAME VAR_5 ( INIT = METHOD_2 ( VAR_2 , STRING_2 , VAR_6 ) ) INIT = METHOD_2 ( VAR_2 , STRING_2 , VAR_6 ) ) VAR VAR (  org.mockito.Mockito.when ( VAR_7 . METHOD_4 ( TYPE_1 . any ( VAR_8 . Guid class ) ) ) . thenReturn ( TYPE_2 . METHOD_5 ( VAR_5 , VAR_1 ) ) )  org.mockito.Mockito.when ( VAR_7 . METHOD_4 ( TYPE_1 . any ( VAR_8 . Guid class ) ) ) . thenReturn ( TYPE_2 . METHOD_5 ( VAR_5 , VAR_1 ) ) (  cmd . METHOD_6 ( new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ) )  cmd . METHOD_6 ( new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ) (  TYPE_3 . assertEquals ( VAR_5 , cmd . METHOD_7 ( ) ) )  TYPE_3 . assertEquals ( VAR_5 , cmd . METHOD_7 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<TYPE_1.VdcActionParametersBase> ) TYPE java.util.ArrayList<TYPE_1.VdcActionParametersBase> ( NAME parameters ) NAME parameters ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ( IN VAR_2 . METHOD_2 ( VAR_3 ) ) IN VAR_2 . METHOD_2 ( VAR_3 ) ( BLOCK BLOCK (  parameters . add ( new TYPE_2 ( VAR_1 ) ) )  parameters . add ( new TYPE_2 ( VAR_1 ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  VAR_4 . METHOD_3 ( VAR_5 , parameters ) )  VAR_4 . METHOD_3 ( VAR_5 , parameters ) (  VAR_6 . METHOD_4 ( ) )  VAR_6 . METHOD_4 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1<java.lang.String,java.lang.String> ) RETURN TYPE_1<java.lang.String,java.lang.String> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<java.lang.String> ) TYPE java.util.ArrayList<java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( VAR_1 . METHOD_3 ( STRING_1 ) ) ) INIT = METHOD_2 ( VAR_1 . METHOD_3 ( STRING_1 ) ) ) VAR VAR (  return ( VAR_2 . size ( ) ) == 2 ? new TYPE_1 ( VAR_2 . get ( 0 ) , VAR_2 . get ( 1 ) ) : null ; )  return ( VAR_2 . size ( ) ) == 2 ? new TYPE_1 ( VAR_2 . get ( 0 ) , VAR_2 . get ( 1 ) ) : null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN org.ovirt.engine.core.common.businessentities.DiskImage ) RETURN org.ovirt.engine.core.common.businessentities.DiskImage ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) == null ) COND ( VAR_1 ) == null ( THEN THEN ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.DiskImage ) TYPE org.ovirt.engine.core.common.businessentities.DiskImage ( NAME image ) NAME image ( INIT = TYPE_1 . METHOD_2 ( ) . get ( METHOD_3 ( ) ) ) INIT = TYPE_1 . METHOD_2 ( ) . get ( METHOD_3 ( ) ) ) VAR VAR ( IF IF ( COND image != null ) COND image != null ( THEN THEN (  VAR_1 = image )  VAR_1 = image ) THEN THEN ( ELSE ELSE (  image = TYPE_1 . METHOD_2 ( ) . METHOD_4 ( METHOD_3 ( ) ) )  image = TYPE_1 . METHOD_2 ( ) . METHOD_4 ( METHOD_3 ( ) ) ( IF IF ( COND image != null ) COND image != null ( THEN THEN (  VAR_1 = image )  VAR_1 = image ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ) TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME storageDomain ) NAME storageDomain ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( ( storageDomain . METHOD_2 ( ) ) != ( VAR_1 ) ) && ( ( storageDomain . METHOD_2 ( ) ) != ( VAR_2 ) ) ) && ( ( TYPE_1 . METHOD_3 ( ) . METHOD_4 ( ) ) != ( storageDomain . METHOD_5 ( ) ) ) ) COND ( ( ( storageDomain . METHOD_2 ( ) ) != ( VAR_1 ) ) && ( ( storageDomain . METHOD_2 ( ) ) != ( VAR_2 ) ) ) && ( ( TYPE_1 . METHOD_3 ( ) . METHOD_4 ( ) ) != ( storageDomain . METHOD_5 ( ) ) ) ( THEN THEN (  addCanDoActionMessage ( VAR_3 ) )  addCanDoActionMessage ( VAR_3 ) (  return false ; )  return false ; ) THEN THEN ) IF IF (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  VAR_1 . add ( STRING_1 ) )  VAR_1 . add ( STRING_1 ) (  METHOD_2 ( METHOD_3 ( ) ) )  METHOD_2 ( METHOD_3 ( ) ) (  METHOD_4 ( ) )  METHOD_4 ( ) (  METHOD_5 ( 1 ) )  METHOD_5 ( 1 ) (  METHOD_6 ( 1 ) )  METHOD_6 ( 1 ) (  VAR_2 . METHOD_7 ( ) )  VAR_2 . METHOD_7 ( ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME nic ) NAME nic ( INIT = resource . get ( ) ) INIT = resource . get ( ) ) VAR VAR (  METHOD_8 ( nic . METHOD_9 ( ) ) )  METHOD_8 ( nic . METHOD_9 ( ) ) (  TYPE_2 . METHOD_10 ( nic , 1 ) )  TYPE_2 . METHOD_10 ( nic , 1 ) (  METHOD_11 ( nic ) )  METHOD_11 ( nic ) ) BLOCK BLOCK ( FINALLY FINALLY (  VAR_1 . METHOD_12 ( ) )  VAR_1 . METHOD_12 ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.VdcQueryType ) TYPE TYPE_1.VdcQueryType ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( VAR_2 , VAR_3 ) )  METHOD_2 ( VAR_2 , VAR_3 ) ( VAR VAR ( TYPE TYPE_1.VdcQueryReturnValue ) TYPE TYPE_1.VdcQueryReturnValue ( NAME result ) NAME result ( INIT = VAR_4 . METHOD_3 ( VAR_1 , VAR_2 ) ) INIT = VAR_4 . METHOD_3 ( VAR_1 , VAR_2 ) ) VAR VAR (  return result . getSucceeded ( ) ? result . getReturnValue ( ) : null ; )  return result . getSucceeded ( ) ? result . getReturnValue ( ) : null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<?extendsTYPE_2> ) TYPE TYPE_1<?extendsTYPE_2> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME sender ) NAME sender ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME args ) NAME args ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3<TYPE_4> ) TYPE TYPE_3<TYPE_4> ( NAME VAR_2 ) NAME VAR_2 ( INIT = getModel ( ) . METHOD_2 ( ) . METHOD_3 ( ) ) INIT = getModel ( ) . METHOD_2 ( ) . METHOD_3 ( ) ) VAR VAR ( IF IF ( COND VAR_2 . METHOD_4 ( ) ) COND VAR_2 . METHOD_4 ( ) ( THEN THEN ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_3 ) NAME VAR_3 ( INIT = getModel ( ) . METHOD_5 ( VAR_2 . METHOD_6 ( ) ) ) INIT = getModel ( ) . METHOD_5 ( VAR_2 . METHOD_6 ( ) ) ) VAR VAR (  METHOD_7 ( TYPE_5 . METHOD_8 ( VAR_3 ) ) )  METHOD_7 ( TYPE_5 . METHOD_8 ( VAR_3 ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_2 ) NAME VAR_2 ( INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ) INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ) VAR VAR ( IF IF ( COND ( VAR_2 . size ( ) ) == 1 ) COND ( VAR_2 . size ( ) ) == 1 ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( IN METHOD_5 ( VAR_1 . METHOD_6 ( ) , STRING_1 , VAR_1 . METHOD_7 ( ) ) ) IN METHOD_5 ( VAR_1 . METHOD_6 ( ) , STRING_1 , VAR_1 . METHOD_7 ( ) ) ( BLOCK BLOCK (  org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_8 ( ) . METHOD_9 ( VAR_3 . METHOD_10 ( ) ) )  org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_8 ( ) . METHOD_9 ( VAR_3 . METHOD_10 ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME nic ) NAME nic ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME parameters ) NAME parameters ( INIT = new TYPE_3 ( nic , VAR_1 , VAR_2 ) ) INIT = new TYPE_3 ( nic , VAR_1 , VAR_2 ) ) VAR VAR (  parameters . METHOD_2 ( TYPE_4 . getParameters ( ) . METHOD_3 ( ) ) )  parameters . METHOD_2 ( TYPE_4 . getParameters ( ) . METHOD_3 ( ) ) ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME returnValue ) NAME returnValue ( INIT = METHOD_4 ( VAR_3 , parameters , TYPE_4 . METHOD_5 ( ) ) ) INIT = METHOD_4 ( VAR_3 , parameters , TYPE_4 . METHOD_5 ( ) ) ) VAR VAR ( IF IF ( COND ! ( returnValue . getSucceeded ( ) ) ) COND ! ( returnValue . getSucceeded ( ) ) ( THEN THEN (  METHOD_6 ( returnValue ) )  METHOD_6 ( returnValue ) ) THEN THEN ) IF IF (  return returnValue . getSucceeded ( ) ; )  return returnValue . getSucceeded ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  parameters = new TYPE_1 ( ) )  parameters = new TYPE_1 ( ) (  parameters . METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) )  parameters . METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) (  parameters . METHOD_4 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) )  parameters . METHOD_4 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) (  command = org.mockito.Mockito . METHOD_5 ( new TYPE_2 ( parameters ) ) )  command = org.mockito.Mockito . METHOD_5 ( new TYPE_2 ( parameters ) ) (  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_6 ( ) )  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_6 ( ) (  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( command ) . METHOD_7 ( ) )  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( command ) . METHOD_7 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_2 ( TYPE_2 . METHOD_3 ( ) ) ) INIT = VAR_2 . METHOD_2 ( TYPE_2 . METHOD_3 ( ) ) ) VAR VAR (  VAR_1 . METHOD_4 ( TYPE_2 . getParameters ( ) . METHOD_5 ( ) . METHOD_6 ( ) ) )  VAR_1 . METHOD_4 ( TYPE_2 . getParameters ( ) . METHOD_5 ( ) . METHOD_6 ( ) ) (  VAR_1 . METHOD_7 ( TYPE_2 . getParameters ( ) . METHOD_5 ( ) . METHOD_8 ( ) ) )  VAR_1 . METHOD_7 ( TYPE_2 . getParameters ( ) . METHOD_5 ( ) . METHOD_8 ( ) ) (  VAR_2 . METHOD_9 ( VAR_1 ) )  VAR_2 . METHOD_9 ( VAR_1 ) (  TYPE_2 . METHOD_10 ( true ) )  TYPE_2 . METHOD_10 ( true ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.Object[] ) TYPE java.lang.Object[] ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( ( java.lang.Object [ ] ) ( VAR_1 ) ) ) INIT = ( ( java.lang.Object [ ] ) ( VAR_1 ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = ( ( TYPE_1 ) ( VAR_3 [ 0 ] ) ) ) INIT = ( ( TYPE_1 ) ( VAR_3 [ 0 ] ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_5 ) NAME VAR_5 ( INIT = ( ( TYPE_2 ) ( VAR_3 [ 1 ] ) ) ) INIT = ( ( TYPE_2 ) ( VAR_3 [ 1 ] ) ) ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_6 ) NAME VAR_6 ( INIT = ( ( VAR_5 . METHOD_1 ( ) ) == ( VAR_7 ) ) && ( VAR_2 == null ) ) INIT = ( ( VAR_5 . METHOD_1 ( ) ) == ( VAR_7 ) ) && ( VAR_2 == null ) ) VAR VAR (  VAR_4 . METHOD_2 ( VAR_5 , VAR_6 ) )  VAR_4 . METHOD_2 ( VAR_5 , VAR_6 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME returnValue ) NAME returnValue ( INIT = METHOD_2 ( ) . METHOD_3 ( VAR_1 , new TYPE_2 ( TYPE_3 . getParameters ( ) . METHOD_4 ( ) , METHOD_5 ( TYPE_3 . getParameters ( ) . METHOD_4 ( ) ) , METHOD_6 ( TYPE_3 . getParameters ( ) . METHOD_7 ( ) ) ) ) ) INIT = METHOD_2 ( ) . METHOD_3 ( VAR_1 , new TYPE_2 ( TYPE_3 . getParameters ( ) . METHOD_4 ( ) , METHOD_5 ( TYPE_3 . getParameters ( ) . METHOD_4 ( ) ) , METHOD_6 ( TYPE_3 . getParameters ( ) . METHOD_7 ( ) ) ) ) ) VAR VAR (  TYPE_3 . METHOD_8 ( ) . METHOD_9 ( returnValue . getReturnValue ( ) ) )  TYPE_3 . METHOD_8 ( ) . METHOD_9 ( returnValue . getReturnValue ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN org.ovirt.engine.core.common.businessentities.VM ) RETURN org.ovirt.engine.core.common.businessentities.VM ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.VM ) TYPE TYPE_1.VM ( NAME entity ) NAME entity ( INIT = org.mockito.Mockito . METHOD_2 ( VAR_1 . VM class ) ) INIT = org.mockito.Mockito . METHOD_2 ( VAR_1 . VM class ) ) VAR VAR (  org.mockito.Mockito.when ( entity . getId ( ) ) . thenReturn ( VAR_2 [ 0 ] ) )  org.mockito.Mockito.when ( entity . getId ( ) ) . thenReturn ( VAR_2 [ 0 ] ) (  org.mockito.Mockito.when ( entity . METHOD_3 ( ) ) . thenReturn ( new TYPE_2 ( ) ) )  org.mockito.Mockito.when ( entity . METHOD_3 ( ) ) . thenReturn ( new TYPE_2 ( ) ) (  org.mockito.Mockito.when ( entity . METHOD_4 ( ) ) . thenReturn ( TYPE_3 . METHOD_5 ( ) ) )  org.mockito.Mockito.when ( entity . METHOD_4 ( ) ) . thenReturn ( TYPE_3 . METHOD_5 ( ) ) (  return entity ; )  return entity ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN org.ovirt.engine.core.common.businessentities.DiskImage ) RETURN org.ovirt.engine.core.common.businessentities.DiskImage ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) == null ) COND ( VAR_1 ) == null ( THEN THEN ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.DiskImage ) TYPE org.ovirt.engine.core.common.businessentities.DiskImage ( NAME image ) NAME image ( INIT = METHOD_2 ( ) . get ( METHOD_3 ( ) ) ) INIT = METHOD_2 ( ) . get ( METHOD_3 ( ) ) ) VAR VAR ( IF IF ( COND image != null ) COND image != null ( THEN THEN (  VAR_1 = image )  VAR_1 = image ) THEN THEN ( ELSE ELSE (  image = METHOD_2 ( ) . METHOD_4 ( METHOD_3 ( ) ) )  image = METHOD_2 ( ) . METHOD_4 ( METHOD_3 ( ) ) ( IF IF ( COND image != null ) COND image != null ( THEN THEN (  image . METHOD_5 ( METHOD_6 ( ) ) )  image . METHOD_5 ( METHOD_6 ( ) ) (  VAR_1 = image )  VAR_1 = image ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.List<java.lang.String> ) RETURN java.util.List<java.lang.String> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME list ) NAME list ( INIT = ( ( VAR_1 ) == null ) ? new TYPE_1 < java.lang.String > ( ) : new TYPE_1 < > ( VAR_1 ) ) INIT = ( ( VAR_1 ) == null ) ? new TYPE_1 < java.lang.String > ( ) : new TYPE_1 < > ( VAR_1 ) ) VAR VAR (  list . METHOD_2 ( METHOD_3 ( ) ) )  list . METHOD_2 ( METHOD_3 ( ) ) ( IF IF ( COND ( list . size ( ) ) > 0 ) COND ( list . size ( ) ) > 0 ( THEN THEN (  list . add ( 0 , VAR_2 ) )  list . add ( 0 , VAR_2 ) ) THEN THEN ( ELSE ELSE (  list . add ( VAR_3 ) )  list . add ( VAR_3 ) ) ELSE ELSE ) IF IF (  return list ; )  return list ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) . METHOD_3 ( new TYPE_1 [ ] { new TYPE_2 ( ) } ) )  METHOD_2 ( ) . METHOD_3 ( new TYPE_1 [ ] { new TYPE_2 ( ) } ) (  METHOD_4 ( ) . METHOD_3 ( new TYPE_1 [ ] { new TYPE_2 ( ) } ) )  METHOD_4 ( ) . METHOD_3 ( new TYPE_1 [ ] { new TYPE_2 ( ) } ) (  METHOD_5 ( ) . METHOD_6 ( new TYPE_1 [ ] { new TYPE_2 ( ) } ) )  METHOD_5 ( ) . METHOD_6 ( new TYPE_1 [ ] { new TYPE_2 ( ) } ) (  return ( ( METHOD_2 ( ) . METHOD_7 ( ) ) && ( METHOD_4 ( ) . METHOD_7 ( ) ) ) && ( METHOD_5 ( ) . METHOD_7 ( ) ) ; )  return ( ( METHOD_2 ( ) . METHOD_7 ( ) ) && ( METHOD_4 ( ) . METHOD_7 ( ) ) ) && ( METHOD_5 ( ) . METHOD_7 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 = new TYPE_1 ( VAR_2 , VAR_3 , false ) )  VAR_1 = new TYPE_1 ( VAR_2 , VAR_3 , false ) (  command = org.mockito.Mockito . METHOD_2 ( new TYPE_2 ( VAR_1 ) ) )  command = org.mockito.Mockito . METHOD_2 ( new TYPE_2 ( VAR_1 ) ) (  org.mockito.Mockito.doReturn ( validator ) . when ( command ) . METHOD_3 ( ) )  org.mockito.Mockito.doReturn ( validator ) . when ( command ) . METHOD_3 ( ) (  org.mockito.Mockito.doReturn ( VAR_4 ) . when ( command ) . METHOD_4 ( ) )  org.mockito.Mockito.doReturn ( VAR_4 ) . when ( command ) . METHOD_4 ( ) (  org.mockito.Mockito.doReturn ( VAR_5 ) . when ( command ) . METHOD_5 ( ) )  org.mockito.Mockito.doReturn ( VAR_5 ) . when ( command ) . METHOD_5 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDSGroup> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDSGroup> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.ArrayList < TYPE_1 > ( ) ) INIT = new java.util.ArrayList < TYPE_1 > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ) TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ( NAME cluster ) NAME cluster ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  VAR_2 . add ( METHOD_2 ( cluster ) ) )  VAR_2 . add ( METHOD_2 ( cluster ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  METHOD_3 ( ) . setItems ( VAR_2 ) )  METHOD_3 ( ) . setItems ( VAR_2 ) ( IF IF ( COND VAR_3 ) COND VAR_3 ( THEN THEN (  VAR_3 = false )  VAR_3 = false (  METHOD_4 ( ) )  METHOD_4 ( ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2.VdcActionType ) TYPE TYPE_2.VdcActionType ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3<?extendsTYPE_2.VdcActionParametersBase> ) TYPE TYPE_3<?extendsTYPE_2.VdcActionParametersBase> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object[] ) TYPE java.lang.Object[] ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.compat.Guid> ) TYPE java.util.ArrayList<org.ovirt.engine.core.compat.Guid> ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ( VAR VAR ( TYPE java.util.ArrayList<TYPE_4> ) TYPE java.util.ArrayList<TYPE_4> ( NAME VAR_6 ) NAME VAR_6 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_7 ) NAME VAR_7 ( INIT = ( VAR_8 ) + STRING_1 ) INIT = ( VAR_8 ) + STRING_1 ) VAR VAR (  return METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , true , true , null , VAR_5 , VAR_6 , VAR_7 , true ) ; )  return METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , true , true , null , VAR_5 , VAR_6 , VAR_7 , true ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_2 ( ) )  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_2 ( ) (  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( VAR_1 ) . METHOD_3 ( TYPE_1 . any ( VAR_3 . Guid class ) ) )  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( VAR_1 ) . METHOD_3 ( TYPE_1 . any ( VAR_3 . Guid class ) ) (  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( VAR_1 ) . METHOD_4 ( TYPE_1 . any ( VAR_3 . Guid class ) ) )  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( VAR_1 ) . METHOD_4 ( TYPE_1 . any ( VAR_3 . Guid class ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME iface ) NAME iface ) VAR VAR ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VdsNetworkInterface> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VdsNetworkInterface> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME i ) NAME i ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( IF IF ( COND ( ( i . METHOD_2 ( ) ) != null ) && ( TYPE_1 . METHOD_3 ( i . getName ( ) , iface . getName ( ) ) ) ) COND ( ( i . METHOD_2 ( ) ) != null ) && ( TYPE_1 . METHOD_3 ( i . getName ( ) , iface . getName ( ) ) ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( vm . getId ( ) , VAR_1 ) ) COND org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( vm . getId ( ) , VAR_1 ) ( THEN THEN (  log . METHOD_4 ( STRING_1 , vm . getId ( ) ) )  log . METHOD_4 ( STRING_1 , vm . getId ( ) ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( vm . getId ( ) ) ) INIT = new TYPE_1 ( vm . getId ( ) ) ) VAR VAR (  VAR_2 . METHOD_5 ( VAR_3 ) )  VAR_2 . METHOD_5 ( VAR_3 ) (  TYPE_2 . getInstance ( ) . METHOD_6 ( VAR_4 , VAR_2 , new TYPE_3 ( TYPE_4 . METHOD_7 ( ) , TYPE_4 . METHOD_8 ( ) ) ) )  TYPE_2 . getInstance ( ) . METHOD_6 ( VAR_4 , VAR_2 , new TYPE_3 ( TYPE_4 . METHOD_7 ( ) , TYPE_4 . METHOD_8 ( ) ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_2 ) . METHOD_3 ( TYPE_1 . any ( VAR_3 . Guid class ) , TYPE_1 . any ( VAR_3 . Guid class ) ) )  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_2 ) . METHOD_3 ( TYPE_1 . any ( VAR_3 . Guid class ) , TYPE_1 . any ( VAR_3 . Guid class ) ) (  cmd . getVm ( ) . METHOD_4 ( VAR_4 ) )  cmd . getVm ( ) . METHOD_4 ( VAR_4 ) (  TYPE_2 . METHOD_5 ( cmd , VAR_5 ) )  TYPE_2 . METHOD_5 ( cmd , VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_3 ( ) ) INIT = new TYPE_3 ( ) ) VAR VAR (  VAR_2 . METHOD_2 ( VAR_3 ) )  VAR_2 . METHOD_2 ( VAR_3 ) (  VAR_2 . METHOD_3 ( VAR_4 ) )  VAR_2 . METHOD_3 ( VAR_4 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME domain ) NAME domain ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  domain . METHOD_4 ( VAR_2 ) )  domain . METHOD_4 ( VAR_2 ) (  TYPE_4 . METHOD_5 ( VAR_5 , VAR_6 ) )  TYPE_4 . METHOD_5 ( VAR_5 , VAR_6 ) (  return domain ; )  return domain ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME validate ) NAME validate ( BLOCK BLOCK ( IF IF ( COND ! ( super . validate ( ) ) ) COND ! ( super . validate ( ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  return validate ( VAR_1 . METHOD_1 ( getParameters ( ) . METHOD_2 ( ) , METHOD_3 ( ) , getParameters ( ) . METHOD_4 ( ) , false ) ) ; )  return validate ( VAR_1 . METHOD_1 ( getParameters ( ) . METHOD_2 ( ) , METHOD_3 ( ) , getParameters ( ) . METHOD_4 ( ) , false ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<?extendsTYPE_2,?> ) RETURN TYPE_1<?extendsTYPE_2,?> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.uicommonweb.UICommand ) TYPE org.ovirt.engine.ui.uicommonweb.UICommand ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND TYPE_4 . METHOD_2 ( VAR_1 . getName ( ) , STRING_1 ) ) COND TYPE_4 . METHOD_2 ( VAR_1 . getName ( ) , STRING_1 ) ( THEN THEN (  return VAR_2 . get ( ) ; )  return VAR_2 . get ( ) ; ) THEN THEN ) IF IF (  return super . METHOD_1 ( source , VAR_1 ) ; )  return super . METHOD_1 ( source , VAR_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( ! ( VAR_1 ) ) && ( METHOD_2 ( ) ) ) COND ( ! ( VAR_1 ) ) && ( METHOD_2 ( ) ) ( THEN THEN (  VAR_1 = true )  VAR_1 = true (  METHOD_3 ( ) . setSelectedItem ( null ) )  METHOD_3 ( ) . setSelectedItem ( null ) ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME a ) NAME a ( IN METHOD_3 ( ) . METHOD_4 ( ) ) IN METHOD_3 ( ) . METHOD_4 ( ) ( BLOCK BLOCK ( IF IF ( COND TYPE_2 . METHOD_5 ( a . METHOD_6 ( ) , getEntity ( ) . METHOD_7 ( ) ) ) COND TYPE_2 . METHOD_5 ( a . METHOD_6 ( ) , getEntity ( ) . METHOD_7 ( ) ) ( THEN THEN (  METHOD_3 ( ) . setSelectedItem ( a ) )  METHOD_3 ( ) . setSelectedItem ( a ) (  break ; )  break ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND result != null ) COND result != null ( THEN THEN ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ( INIT = ( ( TYPE_1 . VdcQueryReturnValue ) ( result ) ) . getReturnValue ( ) ) INIT = ( ( TYPE_1 . VdcQueryReturnValue ) ( result ) ) . getReturnValue ( ) ) VAR VAR ( IF IF ( COND vm == null ) COND vm == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  METHOD_1 ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( vm . getId ( ) ) ) )  METHOD_1 ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( vm . getId ( ) ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND METHOD_2 ( ) ) COND METHOD_2 ( ) ( THEN THEN (  METHOD_3 ( ) )  METHOD_3 ( ) (  METHOD_4 ( ) )  METHOD_4 ( ) ) THEN THEN ( ELSE ELSE ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.String> ) TYPE java.util.Map<java.lang.String,java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_5 ( STRING_1 , TYPE_2 . METHOD_6 ( ) ) ) INIT = TYPE_1 . METHOD_5 ( STRING_1 , TYPE_2 . METHOD_6 ( ) ) ) VAR VAR (  METHOD_7 ( VAR_2 , VAR_1 ) )  METHOD_7 ( VAR_2 , VAR_1 ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<java.lang.Integer> ) TYPE java.util.ArrayList<java.lang.Integer> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR ( IF IF ( COND source != null ) COND source != null ( THEN THEN ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_1 ) ( source ) ) ) INIT = ( ( TYPE_1 ) ( source ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_2 . METHOD_2 ( ) ) INIT = VAR_2 . METHOD_2 ( ) ) VAR VAR ( WHILE WHILE ( COND VAR_3 . METHOD_3 ( ) ) COND VAR_3 . METHOD_3 ( ) ( BLOCK BLOCK (  VAR_1 . add ( java.lang.Integer . METHOD_4 ( VAR_3 . METHOD_5 ( ) . toString ( ) ) ) )  VAR_1 . add ( java.lang.Integer . METHOD_4 ( VAR_3 . METHOD_5 ( ) . toString ( ) ) ) ) BLOCK BLOCK ) WHILE WHILE ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ( INIT = new TYPE_1 ( this , VAR_1 , false ) ) INIT = new TYPE_1 ( this , VAR_1 , false ) ) VAR VAR (  model . setTitle ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_2 ( ) ) )  model . setTitle ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_2 ( ) ) (  model . METHOD_3 ( STRING_1 ) )  model . METHOD_3 ( STRING_1 ) (  model . METHOD_4 ( VAR_2 ) )  model . METHOD_4 ( VAR_2 ) (  model . setEntity ( ( ( TYPE_2 ) ( getSelectedItem ( ) ) ) ) )  model . setEntity ( ( ( TYPE_2 ) ( getSelectedItem ( ) ) ) ) (  METHOD_5 ( model ) )  METHOD_5 ( model ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = org.mockito.Mockito . METHOD_2 ( VAR_2 class ) ) INIT = org.mockito.Mockito . METHOD_2 ( VAR_2 class ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ) TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ( NAME VAR_3 ) NAME VAR_3 ( INIT = new org.ovirt.engine.core.common.businessentities.VDSGroup ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.VDSGroup ( ) ) VAR VAR (  VAR_3 . METHOD_3 ( VAR_4 ) )  VAR_3 . METHOD_3 ( VAR_4 ) (  org.mockito.Mockito.when ( VAR_1 . get ( VAR_4 ) ) . thenReturn ( VAR_3 ) )  org.mockito.Mockito.when ( VAR_1 . get ( VAR_4 ) ) . thenReturn ( VAR_3 ) (  org.mockito.Mockito.when ( VAR_1 . METHOD_4 ( VAR_4 ) ) . thenReturn ( VAR_3 ) )  org.mockito.Mockito.when ( VAR_1 . METHOD_4 ( VAR_4 ) ) . thenReturn ( VAR_3 ) (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StoragePool> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StoragePool> ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ) ( returnValue ) ) ) INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ) ( returnValue ) ) ) VAR VAR (  VAR_2 . METHOD_1 ( ) . setItems ( VAR_1 ) )  VAR_2 . METHOD_1 ( ) . setItems ( VAR_1 ) ( IF IF ( COND VAR_2 instanceof TYPE_1 ) COND VAR_2 instanceof TYPE_1 ( THEN THEN ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StoragePool ) TYPE org.ovirt.engine.core.common.businessentities.StoragePool ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_2 ( VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) , VAR_1 ) ) INIT = METHOD_2 ( VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) , VAR_1 ) ) VAR VAR (  VAR_2 . METHOD_1 ( ) . setSelectedItem ( VAR_3 ) )  VAR_2 . METHOD_1 ( ) . setSelectedItem ( VAR_3 ) ) THEN THEN ( ELSE ELSE (  VAR_2 . METHOD_1 ( ) . setSelectedItem ( TYPE_2 . METHOD_5 ( VAR_1 ) ) )  VAR_2 . METHOD_1 ( ) . setSelectedItem ( TYPE_2 . METHOD_5 ( VAR_1 ) ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1<TYPE_2.ValidationResult> ) TYPE TYPE_1<TYPE_2.ValidationResult> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.network.Network ) TYPE org.ovirt.engine.core.common.businessentities.network.Network ( NAME network ) NAME network ( INIT = new org.ovirt.engine.core.common.businessentities.network.Network ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.network.Network ( ) ) VAR VAR (  network . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) )  network . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_3 ( ) ) INIT = new TYPE_3 ( ) ) VAR VAR (  VAR_3 . METHOD_3 ( null ) )  VAR_3 . METHOD_3 ( null ) (  VAR_3 . METHOD_4 ( network . getId ( ) ) )  VAR_3 . METHOD_4 ( network . getId ( ) ) (  METHOD_1 ( VAR_1 , VAR_2 , network , VAR_3 ) )  METHOD_1 ( VAR_1 , VAR_2 , network , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME id ) NAME id ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ( INIT = null ) INIT = null ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  name = new java.lang.String ( id . METHOD_2 ( ) , STRING_1 ) )  name = new java.lang.String ( id . METHOD_2 ( ) , STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK (  return null ; )  return null ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  return new TYPE_1 ( this , id , name ) ; )  return new TYPE_1 ( this , id , name ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = dao . METHOD_2 ( null , VAR_2 ) ) INIT = dao . METHOD_2 ( null , VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . get ( 0 ) ) INIT = VAR_1 . get ( 0 ) ) VAR VAR (  TYPE_2 . assertEquals ( true , ( ( VAR_1 . size ( ) ) == 2 ) ) )  TYPE_2 . assertEquals ( true , ( ( VAR_1 . size ( ) ) == 2 ) ) (  TYPE_2 . METHOD_3 ( VAR_3 ) )  TYPE_2 . METHOD_3 ( VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) ) == ( VAR_1 ) ) COND ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) ) == ( VAR_1 ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF (  return validate ( TYPE_2 . METHOD_1 ( TYPE_1 . getParameters ( ) . METHOD_3 ( ) , TYPE_1 . getVdsGroup ( ) . METHOD_4 ( ) ) ) ; )  return validate ( TYPE_2 . METHOD_1 ( TYPE_1 . getParameters ( ) . METHOD_3 ( ) , TYPE_1 . getVdsGroup ( ) . METHOD_4 ( ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( getModel ( ) . METHOD_2 ( ) . getSelectedItem ( ) ) == ( VAR_2 ) ) INIT = ( getModel ( ) . METHOD_2 ( ) . getSelectedItem ( ) ) == ( VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( getModel ( ) . METHOD_2 ( ) . getSelectedItem ( ) ) == ( VAR_4 ) ) INIT = ( getModel ( ) . METHOD_2 ( ) . getSelectedItem ( ) ) == ( VAR_4 ) ) VAR VAR (  getModel ( ) . METHOD_3 ( ) . setEntity ( ( VAR_1 || VAR_3 ? null : getModel ( ) . METHOD_2 ( ) . getSelectedItem ( ) . getValue ( ) ) ) )  getModel ( ) . METHOD_3 ( ) . setEntity ( ( VAR_1 || VAR_3 ? null : getModel ( ) . METHOD_2 ( ) . getSelectedItem ( ) . getValue ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND source == null ) COND source == null ( THEN THEN (  return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ( ) ; )  return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ( ) ; ) THEN THEN ) IF IF (  return source ; )  return source ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ( ) ; } return source ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ( ) ; } return source ; } } (  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new TYPE_1 ( VAR_1 ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new TYPE_1 ( VAR_1 ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.Map<java.lang.String,org.ovirt.engine.core.common.businessentities.Network> ) RETURN java.util.Map<java.lang.String,org.ovirt.engine.core.common.businessentities.Network> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE java.lang.Integer ) TYPE java.lang.Integer ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.Network ) TYPE org.ovirt.engine.core.common.businessentities.Network ( NAME network ) NAME network ( INIT = new org.ovirt.engine.core.common.businessentities . Network ( ) ) INIT = new org.ovirt.engine.core.common.businessentities . Network ( ) ) VAR VAR (  network . METHOD_2 ( VAR_2 ) )  network . METHOD_2 ( VAR_2 ) (  network . METHOD_3 ( VAR_3 ) )  network . METHOD_3 ( VAR_3 ) (  network . METHOD_4 ( VAR_4 ) )  network . METHOD_4 ( VAR_4 ) (  return TYPE_1 . METHOD_5 ( VAR_1 , network ) ; )  return TYPE_1 . METHOD_5 ( VAR_1 , network ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.compat.Guid> ) TYPE java.util.List<org.ovirt.engine.core.compat.Guid> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME parameters ) NAME parameters ( INIT = new TYPE_1 ( false , VAR_2 ) ) INIT = new TYPE_1 ( false , VAR_2 ) ) VAR VAR (  parameters . METHOD_2 ( new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( VAR_1 ) ) )  parameters . METHOD_2 ( new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( VAR_1 ) ) (  VAR_3 . METHOD_3 ( VAR_4 , parameters , TYPE_2 . METHOD_4 ( ) ) )  VAR_3 . METHOD_3 ( VAR_4 , parameters , TYPE_2 . METHOD_4 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  METHOD_3 ( ) )  METHOD_3 ( ) (  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_4 ( ) )  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_4 ( ) (  TYPE_1 . when ( VAR_1 . get ( VAR_2 ) ) . thenReturn ( null ) )  TYPE_1 . when ( VAR_1 . get ( VAR_2 ) ) . thenReturn ( null ) (  TYPE_2 . METHOD_5 ( command . METHOD_6 ( ) ) )  TYPE_2 . METHOD_5 ( command . METHOD_6 ( ) ) (  TYPE_2 . METHOD_7 ( command . getReturnValue ( ) . METHOD_8 ( ) . METHOD_9 ( TYPE_3 . toString ( ) ) ) )  TYPE_2 . METHOD_7 ( command . getReturnValue ( ) . METHOD_8 ( ) . METHOD_9 ( TYPE_3 . toString ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME parameters ) NAME parameters ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SWITCH SWITCH ( NAME parameters . METHOD_2 ( ) ) NAME parameters . METHOD_2 ( ) ( CASE VAR_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3<?> ) TYPE TYPE_3<?> ( NAME command ) NAME command ( INIT = TYPE_4 . METHOD_3 ( parameters . METHOD_2 ( ) , parameters ) ) INIT = TYPE_4 . METHOD_3 ( parameters . METHOD_2 ( ) , parameters ) ) VAR VAR (  return command . METHOD_4 ( ) ; )  return command . METHOD_4 ( ) ; ) BLOCK BLOCK ) CASE VAR_1 ( CASE VAR_2 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3<?> ) TYPE TYPE_3<?> ( NAME command ) NAME command ( INIT = TYPE_4 . METHOD_3 ( parameters . METHOD_2 ( ) , parameters ) ) INIT = TYPE_4 . METHOD_3 ( parameters . METHOD_2 ( ) , parameters ) ) VAR VAR (  return command . METHOD_4 ( ) ; )  return command . METHOD_4 ( ) ; ) BLOCK BLOCK ) CASE VAR_2 ( CASE VAR_3 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3<?> ) TYPE TYPE_3<?> ( NAME command ) NAME command ( INIT = TYPE_4 . METHOD_3 ( parameters . METHOD_2 ( ) , parameters ) ) INIT = TYPE_4 . METHOD_3 ( parameters . METHOD_2 ( ) , parameters ) ) VAR VAR (  return command . METHOD_4 ( ) ; )  return command . METHOD_4 ( ) ; ) BLOCK BLOCK ) CASE VAR_3 ( DEFAULT DEFAULT ( BLOCK BLOCK (  return TYPE_5 . METHOD_5 ( ) ; )  return TYPE_5 . METHOD_5 ( ) ; ) BLOCK BLOCK ) DEFAULT DEFAULT ) SWITCH SWITCH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < java.lang.String > ( ) ) INIT = new java.util.ArrayList < java.lang.String > ( ) ) VAR VAR (  VAR_1 . add ( STRING_1 ) )  VAR_1 . add ( STRING_1 ) (  TYPE_1 . METHOD_2 ( VAR_2 ) )  TYPE_1 . METHOD_2 ( VAR_2 ) (  TYPE_1 . METHOD_3 ( VAR_2 . METHOD_4 ( STRING_2 ) ) . METHOD_5 ( VAR_1 ) )  TYPE_1 . METHOD_3 ( VAR_2 . METHOD_4 ( STRING_2 ) ) . METHOD_5 ( VAR_1 ) (  resource . METHOD_6 ( METHOD_7 ( ) ) )  resource . METHOD_6 ( METHOD_7 ( ) ) (  METHOD_8 ( true , true ) )  METHOD_8 ( true , true ) (  VAR_3 . METHOD_9 ( ) )  VAR_3 . METHOD_9 ( ) (  resource . get ( ) )  resource . get ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VM> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VM> ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ) ( returnValue ) ) ) INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ) ( returnValue ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.compat.Guid> ) TYPE java.util.List<org.ovirt.engine.core.compat.Guid> ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_1 ( ) . METHOD_2 ( ) ) INIT = METHOD_1 ( ) . METHOD_2 ( ) ) VAR VAR (  METHOD_3 ( ) . METHOD_4 ( VAR_1 , ( VAR_2 != null ? VAR_2 : new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( ) ) ) )  METHOD_3 ( ) . METHOD_4 ( VAR_1 , ( VAR_2 != null ? VAR_2 : new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( ) ) ) (  METHOD_5 ( ) )  METHOD_5 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_1 ) ( target ) ) ) INIT = ( ( TYPE_1 ) ( target ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VmTemplate> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VmTemplate> ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VmTemplate > ) ( returnValue ) ) ) INIT = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VmTemplate > ) ( returnValue ) ) ) VAR VAR (  VAR_1 . METHOD_1 ( TYPE_2 . getInstance ( ) . METHOD_2 ( VAR_2 , VAR_3 . METHOD_3 ( ) . METHOD_4 ( ) ) ) )  VAR_1 . METHOD_1 ( TYPE_2 . getInstance ( ) . METHOD_2 ( VAR_2 , VAR_3 . METHOD_3 ( ) . METHOD_4 ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = null ) INIT = null ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_4 . METHOD_2 ( ) ) IN VAR_4 . METHOD_2 ( ) ( BLOCK BLOCK ( IF IF ( COND ( VAR_5 . get ( VAR_6 ) ) == VAR_1 ) COND ( VAR_5 . get ( VAR_6 ) ) == VAR_1 ( THEN THEN (  VAR_2 = ( ( java.lang.String ) ( VAR_5 . get ( VAR_7 ) ) ) )  VAR_2 = ( ( java.lang.String ) ( VAR_5 . get ( VAR_7 ) ) ) (  break ; )  break ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( result ) )  TYPE_1 . METHOD_2 ( result ) (  TYPE_1 . METHOD_3 ( result . isEmpty ( ) ) )  TYPE_1 . METHOD_3 ( result . isEmpty ( ) ) ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ) TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME domain ) NAME domain ( IN result ) IN result ( BLOCK BLOCK (  TYPE_1 . assertEquals ( VAR_1 , domain . METHOD_4 ( ) ) )  TYPE_1 . assertEquals ( VAR_1 , domain . METHOD_4 ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.uicommonweb.UICommand ) TYPE org.ovirt.engine.ui.uicommonweb.UICommand ( NAME command ) NAME command ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  super . METHOD_1 ( command ) )  super . METHOD_1 ( command ) ( IF IF ( COND command == ( model . METHOD_2 ( ) ) ) COND command == ( model . METHOD_2 ( ) ) ( THEN THEN (  METHOD_3 ( model ) )  METHOD_3 ( model ) (  METHOD_4 ( ) . METHOD_5 ( ) )  METHOD_4 ( ) . METHOD_5 ( ) (  VAR_1 . METHOD_6 ( model . getModel ( ) ) )  VAR_1 . METHOD_6 ( model . getModel ( ) ) (  TYPE_1 . METHOD_7 ( METHOD_8 ( ) , model . getModel ( ) ) )  TYPE_1 . METHOD_7 ( METHOD_8 ( ) , model . getModel ( ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_3 . getInstance ( ) . METHOD_2 ( TYPE_4 . METHOD_3 ( ) . get ( TYPE_4 . getParameters ( ) . getVm ( ) . METHOD_4 ( ) ) . METHOD_5 ( ) , VAR_1 . METHOD_6 ( ) ) ) INIT = TYPE_3 . getInstance ( ) . METHOD_2 ( TYPE_4 . METHOD_3 ( ) . get ( TYPE_4 . getParameters ( ) . getVm ( ) . METHOD_4 ( ) ) . METHOD_5 ( ) , VAR_1 . METHOD_6 ( ) ) ) VAR VAR (  VAR_1 . METHOD_7 ( VAR_2 . METHOD_8 ( ) ) )  VAR_1 . METHOD_7 ( VAR_2 . METHOD_8 ( ) ) (  VAR_1 . METHOD_9 ( VAR_2 . METHOD_10 ( ) ) )  VAR_1 . METHOD_9 ( VAR_2 . METHOD_10 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME client ) NAME client ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  client . METHOD_2 ( VAR_1 ) )  client . METHOD_2 ( VAR_1 ) ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME result ) NAME result ( INIT = client . METHOD_3 ( VAR_2 , VAR_3 ) ) INIT = client . METHOD_3 ( VAR_2 , VAR_3 ) ) VAR VAR (  return METHOD_4 ( result ) ; )  return METHOD_4 ( result ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_4 . error ( ( STRING_1 + e ) ) )  VAR_4 . error ( ( STRING_1 + e ) ) (  return null ; )  return null ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME id ) NAME id ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  getModel ( ) . METHOD_3 ( ) . setEntity ( returnValue ) )  getModel ( ) . METHOD_3 ( ) . setEntity ( returnValue ) ) BLOCK BLOCK ) METHOD METHOD (  TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( getModel ( ) , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { getModel ( ) . METHOD_3 ( ) . setEntity ( returnValue ) ; } } ) , id ) )  TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( getModel ( ) , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { getModel ( ) . METHOD_3 ( ) . setEntity ( returnValue ) ; } } ) , id ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( VAR_1 ) )  METHOD_2 ( VAR_1 ) (  VAR_2 . METHOD_3 ( ) )  VAR_2 . METHOD_3 ( ) (  TYPE_2 . METHOD_4 ( ( ( VAR_1 . METHOD_5 ( ) ) != null ) ) )  TYPE_2 . METHOD_4 ( ( ( VAR_1 . METHOD_5 ( ) ) != null ) ) (  TYPE_2 . METHOD_4 ( ( ( VAR_1 . METHOD_6 ( ) ) == null ) ) )  TYPE_2 . METHOD_4 ( ( ( VAR_1 . METHOD_6 ( ) ) == null ) ) (  org.mockito.Mockito . METHOD_7 ( VAR_3 ) . METHOD_8 ( VAR_4 . METHOD_9 ( ) ) )  org.mockito.Mockito . METHOD_7 ( VAR_3 ) . METHOD_8 ( VAR_4 . METHOD_9 ( ) ) (  TYPE_3 . METHOD_10 ( ( ( VAR_4 . getValue ( ) . size ( ) ) == 0 ) ) )  TYPE_3 . METHOD_10 ( ( ( VAR_4 . getValue ( ) . size ( ) ) == 0 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND model . equals ( METHOD_2 ( ) ) ) COND model . equals ( METHOD_2 ( ) ) ( THEN THEN (  this . setItems ( ( ( java.util.List < TYPE_1 < TYPE_2 , org.ovirt.engine.core.common.businessentities.VM > > ) ( ( ( TYPE_3 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) ) ) )  this . setItems ( ( ( java.util.List < TYPE_1 < TYPE_2 , org.ovirt.engine.core.common.businessentities.VM > > ) ( ( ( TYPE_3 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME type ) NAME type ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_1 ( type , name ) ) INIT = VAR_1 . METHOD_1 ( type , name ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_2 ( METHOD_1 ( ) , true ) ) INIT = new TYPE_2 ( METHOD_1 ( ) , true ) ) VAR VAR (  VAR_3 . METHOD_2 ( STRING_1 , VAR_2 ) )  VAR_3 . METHOD_2 ( STRING_1 , VAR_2 ) (  return VAR_3 . toString ( ) ; )  return VAR_3 . toString ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( TYPE_2 . METHOD_4 ( ) ) ) INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( TYPE_2 . METHOD_4 ( ) ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_5 ( VAR_2 . METHOD_6 ( ) , TYPE_2 . METHOD_4 ( ) ) )  org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_5 ( VAR_2 . METHOD_6 ( ) , TYPE_2 . METHOD_4 ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( METHOD_1 ( ) . getSelectedItem ( ) . getId ( ) . equals ( cluster . getId ( ) ) ) ) COND ! ( METHOD_1 ( ) . getSelectedItem ( ) . getId ( ) . equals ( cluster . getId ( ) ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( IF IF ( COND ( ( java.lang.Boolean ) ( returnValue ) ) ) COND ( ( java.lang.Boolean ) ( returnValue ) ) ( THEN THEN (  METHOD_2 ( ) . METHOD_3 ( true ) )  METHOD_2 ( ) . METHOD_3 ( true ) (  METHOD_4 ( null ) )  METHOD_4 ( null ) ) THEN THEN ( ELSE ELSE (  METHOD_2 ( ) . METHOD_3 ( false ) )  METHOD_2 ( ) . METHOD_3 ( false ) (  METHOD_4 ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_5 ( ) ) )  METHOD_4 ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_5 ( ) ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME sender ) NAME sender ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME args ) NAME args ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 ) INIT = VAR_3 ) VAR VAR ( IF IF ( COND VAR_2 . equals ( STRING_1 ) ) COND VAR_2 . equals ( STRING_1 ) ( THEN THEN (  METHOD_2 ( object ) )  METHOD_2 ( object ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND VAR_2 . equals ( STRING_2 ) ) COND VAR_2 . equals ( STRING_2 ) ( THEN THEN (  METHOD_3 ( object ) )  METHOD_3 ( object ) ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.util.ArrayList<TYPE_1> ) RETURN java.util.ArrayList<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) != null ) COND ( VAR_1 ) != null ( THEN THEN (  return VAR_1 ; )  return VAR_1 ; ) THEN THEN ) IF IF (  VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) )  VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME type ) NAME type ( IN TYPE_1 . METHOD_2 ( ) ) IN TYPE_1 . METHOD_2 ( ) ( BLOCK BLOCK ( IF IF ( COND type . METHOD_3 ( ) ) COND type . METHOD_3 ( ) ( THEN THEN (  VAR_1 . add ( type ) )  VAR_1 . add ( type ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 . getId ( ) . equals ( VAR_3 ) ) COND VAR_1 . getId ( ) . equals ( VAR_3 ) ( THEN THEN ( VAR VAR ( TYPE java.lang.Integer ) TYPE java.lang.Integer ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_3 . METHOD_2 ( VAR_2 ) ) INIT = TYPE_3 . METHOD_2 ( VAR_2 ) ) VAR VAR ( IF IF ( COND VAR_4 != null ) COND VAR_4 != null ( THEN THEN (  METHOD_3 ( VAR_4 . METHOD_4 ( ) ) )  METHOD_3 ( VAR_4 . METHOD_4 ( ) ) ) THEN THEN ) IF IF ) THEN THEN ( ELSE ELSE (  METHOD_3 ( VAR_1 . METHOD_5 ( ) ) )  METHOD_3 ( VAR_1 . METHOD_5 ( ) ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1.ValidationResult ) RETURN TYPE_1.ValidationResult ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME cluster ) NAME cluster ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME source ) NAME source ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( cluster != null ) && ( METHOD_3 ( cluster . METHOD_4 ( ) ) ) ) && ( cluster . METHOD_5 ( ) . METHOD_6 ( source ) ) ) INIT = ( ( cluster != null ) && ( METHOD_3 ( cluster . METHOD_4 ( ) ) ) ) && ( cluster . METHOD_5 ( ) . METHOD_6 ( source ) ) ) VAR VAR ( IF IF ( COND ! VAR_2 ) COND ! VAR_2 ( THEN THEN (  return new TYPE_1 . ValidationResult ( VAR_3 ) ; )  return new TYPE_1 . ValidationResult ( VAR_3 ) ; ) THEN THEN ) IF IF (  return VAR_4 ; )  return VAR_4 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_3 ( ) ) INIT = METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_4 ( VAR_4 , VAR_2 , this , true ) ) INIT = new TYPE_4 ( VAR_4 , VAR_2 , this , true ) ) VAR VAR (  VAR_3 . METHOD_4 ( METHOD_5 ( ) ) . METHOD_4 ( METHOD_6 ( ) ) . METHOD_7 ( VAR_1 ) )  VAR_3 . METHOD_4 ( METHOD_5 ( ) ) . METHOD_4 ( METHOD_6 ( ) ) . METHOD_7 ( VAR_1 ) (  VAR_3 . METHOD_8 ( ) )  VAR_3 . METHOD_8 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND source == null ) COND source == null ( THEN THEN (  return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ; )  return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ; ) THEN THEN ) IF IF (  return source ; )  return source ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ; } return source ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ; } return source ; } } (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( false ) )  METHOD_2 ( false ) ( TRY TRY ( BLOCK BLOCK (  command . METHOD_3 ( ) )  command . METHOD_3 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( BLOCK BLOCK (  org.mockito.Mockito . METHOD_4 ( VAR_2 ) . METHOD_5 ( TYPE_2 . METHOD_6 ( VAR_3 ) , TYPE_2 . any ( VAR_4 class ) ) )  org.mockito.Mockito . METHOD_4 ( VAR_2 ) . METHOD_5 ( TYPE_2 . METHOD_6 ( VAR_3 ) , TYPE_2 . any ( VAR_4 class ) ) (  return ; )  return ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  TYPE_3 . METHOD_7 ( ) )  TYPE_3 . METHOD_7 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1.Disk ) RETURN TYPE_1.Disk ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.Disk ) TYPE TYPE_1.Disk ( NAME model ) NAME model ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  model . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_1 class ) . value ( ) ) )  model . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_1 class ) . value ( ) ) (  model . METHOD_4 ( TYPE_2 . METHOD_3 ( VAR_2 class ) . value ( ) ) )  model . METHOD_4 ( TYPE_2 . METHOD_3 ( VAR_2 class ) . value ( ) ) (  model . METHOD_5 ( TYPE_2 . METHOD_3 ( VAR_3 class ) . value ( ) ) )  model . METHOD_5 ( TYPE_2 . METHOD_3 ( VAR_3 class ) . value ( ) ) (  model . METHOD_6 ( TYPE_3 . METHOD_7 ( TYPE_2 . METHOD_3 ( VAR_4 class ) ) ) )  model . METHOD_6 ( TYPE_3 . METHOD_7 ( TYPE_2 . METHOD_3 ( VAR_4 class ) ) ) (  model . METHOD_8 ( null ) )  model . METHOD_8 ( null ) (  return model ; )  return model ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME vds ) NAME vds ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME iface ) NAME iface ) VAR VAR ( VAR VAR ( TYPE java.lang.Object[] ) TYPE java.lang.Object[] ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  vds . METHOD_2 ( ) . add ( iface ) )  vds . METHOD_2 ( ) . add ( iface ) ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME name ) NAME name ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME VAR_2 ) NAME VAR_2 ( IN vds . METHOD_2 ( ) ) IN vds . METHOD_2 ( ) ( BLOCK BLOCK ( IF IF ( COND VAR_2 . getName ( ) . equals ( name . toString ( ) ) ) COND VAR_2 . getName ( ) . equals ( name . toString ( ) ) ( THEN THEN (  VAR_2 . METHOD_3 ( iface . getName ( ) ) )  VAR_2 . METHOD_3 ( iface . getName ( ) ) (  break ; )  break ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_1 . METHOD_2 ( new TYPE_2 ( ) ) )  VAR_1 . METHOD_2 ( new TYPE_2 ( ) ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_3 ( ) ) INIT = new TYPE_3 ( ) ) VAR VAR (  VAR_2 . setId ( TYPE_4 . toString ( ) ) )  VAR_2 . setId ( TYPE_4 . toString ( ) ) (  VAR_1 . METHOD_3 ( ) . METHOD_3 ( ) . add ( VAR_2 ) )  VAR_1 . METHOD_3 ( ) . METHOD_3 ( ) . add ( VAR_2 ) ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 ) INIT = VAR_4 ) VAR VAR (  TYPE_6 . assertEquals ( VAR_3 , TYPE_7 . map ( VAR_1 , null ) ) )  TYPE_6 . assertEquals ( VAR_3 , TYPE_7 . map ( VAR_1 , null ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME response ) NAME response ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  TYPE_3 . getInstance ( ) . METHOD_2 ( response . METHOD_3 ( ) ) )  TYPE_3 . getInstance ( ) . METHOD_2 ( response . METHOD_3 ( ) ) (  VAR_2 = TYPE_3 . getInstance ( ) . METHOD_4 ( ) )  VAR_2 = TYPE_3 . getInstance ( ) . METHOD_4 ( ) (  VAR_3 = TYPE_3 . getInstance ( ) . METHOD_5 ( ) )  VAR_3 = TYPE_3 . getInstance ( ) . METHOD_5 ( ) (  VAR_4 = TYPE_3 . getInstance ( ) . METHOD_6 ( ) )  VAR_4 = TYPE_3 . getInstance ( ) . METHOD_6 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ( FINALLY FINALLY (  METHOD_7 ( ) )  METHOD_7 ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  command = org.mockito.Mockito . METHOD_2 ( new TYPE_2 ( new TYPE_3 ( VAR_2 , VAR_3 , VAR_4 , VAR_1 ) ) ) )  command = org.mockito.Mockito . METHOD_2 ( new TYPE_2 ( new TYPE_3 ( VAR_2 , VAR_3 , VAR_4 , VAR_1 ) ) ) (  org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_3 ( ) )  org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_3 ( ) (  org.mockito.Mockito.doReturn ( TYPE_4 . METHOD_4 ( ) ) . when ( command ) . METHOD_5 ( ) )  org.mockito.Mockito.doReturn ( TYPE_4 . METHOD_4 ( ) ) . when ( command ) . METHOD_5 ( ) (  org.mockito.Mockito.doReturn ( false ) . when ( command ) . METHOD_6 ( ) )  org.mockito.Mockito.doReturn ( false ) . when ( command ) . METHOD_6 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) . METHOD_3 ( ) ) != null ) && ( ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) != null ) ) COND ( ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) . METHOD_3 ( ) ) != null ) && ( ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) != null ) ( THEN THEN (  return METHOD_5 ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) , TYPE_1 . getReturnValue ( ) . METHOD_6 ( ) ) ; )  return METHOD_5 ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) , TYPE_1 . getReturnValue ( ) . METHOD_6 ( ) ) ; ) THEN THEN ) IF IF (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) ) INIT = new TYPE_1 ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) ) VAR VAR (  command = org.mockito.Mockito . METHOD_3 ( new TYPE_2 . RunVmCommand < TYPE_1 > ( VAR_1 ) ) )  command = org.mockito.Mockito . METHOD_3 ( new TYPE_2 . RunVmCommand < TYPE_1 > ( VAR_1 ) ) (  METHOD_4 ( ) )  METHOD_4 ( ) (  METHOD_5 ( ) )  METHOD_5 ( ) (  METHOD_6 ( ) )  METHOD_6 ( ) (  METHOD_7 ( ) )  METHOD_7 ( ) (  METHOD_8 ( ) )  METHOD_8 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ) TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ( NAME cluster ) NAME cluster ( INIT = ( ( org.ovirt.engine.core.common.businessentities.VDSGroup ) ( returnValue ) ) ) INIT = ( ( org.ovirt.engine.core.common.businessentities.VDSGroup ) ( returnValue ) ) ) VAR VAR ( IF IF ( COND ( ( cluster != null ) && ( cluster . METHOD_2 ( ) ) ) && ( ! ( cluster . METHOD_3 ( ) ) ) ) COND ( ( cluster != null ) && ( cluster . METHOD_2 ( ) ) ) && ( ! ( cluster . METHOD_3 ( ) ) ) ( THEN THEN (  model . METHOD_4 ( ) . METHOD_5 ( true ) )  model . METHOD_4 ( ) . METHOD_5 ( true ) ) THEN THEN ) IF IF (  model . METHOD_6 ( ) )  model . METHOD_6 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME dao ) NAME dao ( INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) ) INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = dao . METHOD_3 ( VAR_1 . METHOD_4 ( ) . getName ( ) , VAR_1 . getId ( ) ) ) INIT = dao . METHOD_3 ( VAR_1 . METHOD_4 ( ) . getName ( ) , VAR_1 . getId ( ) ) ) VAR VAR ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN (  dao . METHOD_5 ( VAR_2 ) )  dao . METHOD_5 ( VAR_2 ) ) THEN THEN ( ELSE ELSE (  VAR_2 = new TYPE_1 ( VAR_1 ) )  VAR_2 = new TYPE_1 ( VAR_1 ) (  VAR_2 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_6 ( ) ) )  VAR_2 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_6 ( ) ) (  dao . METHOD_7 ( VAR_2 ) )  dao . METHOD_7 ( VAR_2 ) ) ELSE ELSE ) IF IF (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ( INIT = ( ( TYPE_1 ) ( target ) ) ) INIT = ( ( TYPE_1 ) ( target ) ) ) VAR VAR (  model . METHOD_1 ( model , VAR_1 , ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( returnValue ) ) , null ) )  model . METHOD_1 ( model , VAR_1 , ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( returnValue ) ) , null ) (  METHOD_2 ( ) )  METHOD_2 ( ) (  METHOD_3 ( ) )  METHOD_3 ( ) (  METHOD_4 ( ) . METHOD_5 ( this , VAR_2 ) )  METHOD_4 ( ) . METHOD_5 ( this , VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  command = org.mockito.Mockito . METHOD_2 ( new TYPE_1 < TYPE_2 > ( new TYPE_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , false ) ) ) )  command = org.mockito.Mockito . METHOD_2 ( new TYPE_1 < TYPE_2 > ( new TYPE_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , false ) ) ) (  METHOD_4 ( ) )  METHOD_4 ( ) (  METHOD_5 ( VAR_1 ) )  METHOD_5 ( VAR_1 ) (  METHOD_6 ( ) )  METHOD_6 ( ) (  METHOD_7 ( VAR_2 . Collections < java.lang.String > METHOD_8 ( ) ) )  METHOD_7 ( VAR_2 . Collections < java.lang.String > METHOD_8 ( ) ) (  METHOD_9 ( false ) )  METHOD_9 ( false ) (  METHOD_10 ( false ) )  METHOD_10 ( false ) (  TYPE_3 . METHOD_11 ( command ) )  TYPE_3 . METHOD_11 ( command ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_1 ) ( target ) ) ) INIT = ( ( TYPE_1 ) ( target ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2<org.ovirt.engine.core.common.businessentities.VDS> ) TYPE TYPE_2<org.ovirt.engine.core.common.businessentities.VDS> ( NAME hosts ) NAME hosts ( INIT = ( ( TYPE_2 < org.ovirt.engine.core.common.businessentities.VDS > ) ( returnValue ) ) ) INIT = ( ( TYPE_2 < org.ovirt.engine.core.common.businessentities.VDS > ) ( returnValue ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME host ) NAME host ( IN hosts ) IN hosts ( BLOCK BLOCK ( IF IF ( COND METHOD_1 ( host ) ) COND METHOD_1 ( host ) ( THEN THEN (  VAR_2 . add ( host ) )  VAR_2 . add ( host ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  VAR_1 . METHOD_2 ( ) . setItems ( VAR_2 ) )  VAR_1 . METHOD_2 ( ) . setItems ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.compat.Guid> ) TYPE java.util.List<org.ovirt.engine.core.compat.Guid> ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_1 . METHOD_2 ( VAR_1 ) ) INIT = TYPE_1 . METHOD_2 ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.compat.Guid> ) TYPE java.util.List<org.ovirt.engine.core.compat.Guid> ( NAME VAR_3 ) NAME VAR_3 ( INIT = new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( ) ) INIT = new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( ) ) VAR VAR (  VAR_3 . add ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( STRING_2 ) ) )  VAR_3 . add ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( STRING_2 ) ) (  VAR_3 . add ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( STRING_3 ) ) )  VAR_3 . add ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( STRING_3 ) ) (  TYPE_2 . assertEquals ( VAR_3 , VAR_2 ) )  TYPE_2 . assertEquals ( VAR_3 , VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.network.Network ) TYPE org.ovirt.engine.core.common.businessentities.network.Network ( NAME network ) NAME network ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME vds ) NAME vds ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 . size ( ) ) != 1 ) COND ( VAR_1 . size ( ) ) != 1 ( THEN THEN ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_2 . METHOD_2 ( vds . getId ( ) ) )  VAR_2 . METHOD_2 ( vds . getId ( ) ) (  VAR_2 . METHOD_3 ( STRING_1 , network . getName ( ) ) )  VAR_2 . METHOD_3 ( STRING_1 , network . getName ( ) ) (  VAR_2 . METHOD_3 ( STRING_2 , TYPE_2 . METHOD_4 ( TYPE_3 . METHOD_5 ( VAR_1 ) , STRING_3 ) ) )  VAR_2 . METHOD_3 ( STRING_2 , TYPE_2 . METHOD_4 ( TYPE_3 . METHOD_5 ( VAR_1 ) , STRING_3 ) ) (  TYPE_4 . log ( VAR_2 , VAR_3 ) )  TYPE_4 . log ( VAR_2 , VAR_3 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = null ) INIT = null ) VAR VAR ( IF IF ( COND ( ( ! ( getModel ( ) . METHOD_2 ( ) ) ) && ( getModel ( ) . METHOD_3 ( ) ) ) && ( ! ( getModel ( ) . METHOD_4 ( ) ) ) ) COND ( ( ! ( getModel ( ) . METHOD_2 ( ) ) ) && ( getModel ( ) . METHOD_3 ( ) ) ) && ( ! ( getModel ( ) . METHOD_4 ( ) ) ) ( THEN THEN (  VAR_1 = VAR_2 . METHOD_5 ( ) )  VAR_1 = VAR_2 . METHOD_5 ( ) ) THEN THEN ( ELSE ELSE (  VAR_1 = this . METHOD_6 ( ) )  VAR_1 = this . METHOD_6 ( ) ) ELSE ELSE ) IF IF (  return TYPE_2 . METHOD_7 ( VAR_1 ) ; )  return TYPE_2 . METHOD_7 ( VAR_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_1 . add ( VAR_2 , java.lang.Boolean . toString ( TYPE_2 . getParameters ( ) . METHOD_2 ( ) ) ) )  VAR_1 . add ( VAR_2 , java.lang.Boolean . toString ( TYPE_2 . getParameters ( ) . METHOD_2 ( ) ) ) ( IF IF ( COND ( TYPE_2 . getParameters ( ) . METHOD_3 ( ) ) >= 0 ) COND ( TYPE_2 . getParameters ( ) . METHOD_3 ( ) ) >= 0 ( THEN THEN (  VAR_1 . add ( VAR_3 , TYPE_2 . getParameters ( ) . METHOD_3 ( ) ) )  VAR_1 . add ( VAR_3 , TYPE_2 . getParameters ( ) . METHOD_3 ( ) ) ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return ( ( ( ( ( VAR_1 . METHOD_2 ( ) ) + ( METHOD_3 ( VAR_1 ) ) ) >= VAR_2 ) && ( ( VAR_1 . METHOD_4 ( ) ) != null ) ) && ( ( ( new TYPE_1 ( ) . METHOD_5 ( ) ) - ( VAR_1 . METHOD_4 ( ) . METHOD_5 ( ) ) ) >= ( TYPE_2 . METHOD_6 ( VAR_3 ) ) ) ) && ( ( VAR_1 . METHOD_7 ( ) ) > 0 ) ; )  return ( ( ( ( ( VAR_1 . METHOD_2 ( ) ) + ( METHOD_3 ( VAR_1 ) ) ) >= VAR_2 ) && ( ( VAR_1 . METHOD_4 ( ) ) != null ) ) && ( ( ( new TYPE_1 ( ) . METHOD_5 ( ) ) - ( VAR_1 . METHOD_4 ( ) . METHOD_5 ( ) ) ) >= ( TYPE_2 . METHOD_6 ( VAR_3 ) ) ) ) && ( ( VAR_1 . METHOD_7 ( ) ) > 0 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . METHOD_3 ( ( ( java.lang.Boolean ) ( returnValue ) ) ) )  VAR_1 . METHOD_3 ( ( ( java.lang.Boolean ) ( returnValue ) ) ) ) BLOCK BLOCK ) METHOD METHOD (  TYPE_2 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 . METHOD_3 ( ( ( java.lang.Boolean ) ( returnValue ) ) ) ; } } ) ) )  TYPE_2 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 . METHOD_3 ( ( ( java.lang.Boolean ) ( returnValue ) ) ) ; } } ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.DiskImage ) TYPE org.ovirt.engine.core.common.businessentities.DiskImage ( NAME image ) NAME image ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR ( IF IF ( COND ( image . METHOD_2 ( ) ) != null ) COND ( image . METHOD_2 ( ) ) != null ( THEN THEN (  VAR_1 += image . METHOD_2 ( ) . getValue ( ) . toString ( ) )  VAR_1 += image . METHOD_2 ( ) . getValue ( ) . toString ( ) ) THEN THEN ( ELSE ELSE (  VAR_1 += VAR_2 )  VAR_1 += VAR_2 ) ELSE ELSE ) IF IF (  VAR_1 += STRING_2 + ( image . METHOD_3 ( ) . toString ( ) ) )  VAR_1 += STRING_2 + ( image . METHOD_3 ( ) . toString ( ) ) (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( false ) )  METHOD_2 ( false ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME host ) NAME host ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  host . METHOD_3 ( new TYPE_2 ( ) ) )  host . METHOD_3 ( new TYPE_2 ( ) ) (  host . METHOD_4 ( ) . setId ( STRING_1 ) )  host . METHOD_4 ( ) . setId ( STRING_1 ) (  VAR_1 . METHOD_5 ( ) )  VAR_1 . METHOD_5 ( ) (  resource . METHOD_6 ( host ) )  resource . METHOD_6 ( host ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<?extendsTYPE_2> ) TYPE TYPE_1<?extendsTYPE_2> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME sender ) NAME sender ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME args ) NAME args ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( METHOD_2 ( ) . getEntity ( ) ) == null ) COND ( METHOD_2 ( ) . getEntity ( ) ) == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( IF IF ( COND ( METHOD_2 ( ) . getEntity ( ) ) == true ) COND ( METHOD_2 ( ) . getEntity ( ) ) == true ( THEN THEN (  METHOD_3 ( ) . METHOD_4 ( true ) )  METHOD_3 ( ) . METHOD_4 ( true ) ) THEN THEN ) IF IF ( IF IF ( COND ( METHOD_2 ( ) . getEntity ( ) ) == false ) COND ( METHOD_2 ( ) . getEntity ( ) ) == false ( THEN THEN (  METHOD_3 ( ) . METHOD_4 ( false ) )  METHOD_3 ( ) . METHOD_4 ( false ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDS> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDS> ( NAME hosts ) NAME hosts ( INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ) ( returnValue ) ) ) INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ) ( returnValue ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDS> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDS> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME host ) NAME host ( IN hosts ) IN hosts ( BLOCK BLOCK ( IF IF ( COND TYPE_1 . equals ( host . getStatus ( ) ) ) COND TYPE_1 . equals ( host . getStatus ( ) ) ( THEN THEN (  VAR_1 . add ( host ) )  VAR_1 . add ( host ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  METHOD_1 ( ) . setItems ( VAR_1 ) )  METHOD_1 ( ) . setItems ( VAR_1 ) ( IF IF ( COND VAR_1 . isEmpty ( ) ) COND VAR_1 . isEmpty ( ) ( THEN THEN (  METHOD_2 ( false ) )  METHOD_2 ( false ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ) VAR VAR ( VAR VAR ( TYPE java.util.Map<org.ovirt.engine.core.compat.Guid,TYPE_1<java.lang.String,java.util.List<org.ovirt.engine.core.compat.Guid>>> ) TYPE java.util.Map<org.ovirt.engine.core.compat.Guid,TYPE_1<java.lang.String,java.util.List<org.ovirt.engine.core.compat.Guid>>> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.ArrayList<TYPE_2.DiskImage> ) TYPE java.util.ArrayList<TYPE_2.DiskImage> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_2 ( vm , VAR_2 ) ) INIT = METHOD_2 ( vm , VAR_2 ) ) VAR VAR (  VAR_1 . put ( vm . getId ( ) , new TYPE_1 ( VAR_3 , vm . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( ) . map ( TYPE_3 : : getId ) . METHOD_6 ( TYPE_4 . METHOD_7 ( ) ) ) ) )  VAR_1 . put ( vm . getId ( ) , new TYPE_1 ( VAR_3 , vm . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( ) . map ( TYPE_3 : : getId ) . METHOD_6 ( TYPE_4 . METHOD_7 ( ) ) ) ) (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  org.mockito.Mockito.when ( METHOD_2 ( ) . METHOD_3 ( ) ) . thenReturn ( VAR_2 ) )  org.mockito.Mockito.when ( METHOD_2 ( ) . METHOD_3 ( ) ) . thenReturn ( VAR_2 ) (  org.mockito.Mockito.when ( METHOD_2 ( ) . getId ( ) ) . thenReturn ( VAR_3 ) )  org.mockito.Mockito.when ( METHOD_2 ( ) . getId ( ) ) . thenReturn ( VAR_3 ) (  METHOD_4 ( VAR_2 , VAR_1 ) )  METHOD_4 ( VAR_2 , VAR_1 ) (  METHOD_5 ( ) )  METHOD_5 ( ) (  METHOD_6 ( VAR_4 ) )  METHOD_6 ( VAR_4 ) (  METHOD_7 ( VAR_5 ) )  METHOD_7 ( VAR_5 ) (  METHOD_8 ( ) . METHOD_9 ( true ) )  METHOD_8 ( ) . METHOD_9 ( true ) (  METHOD_8 ( ) . METHOD_10 ( ) )  METHOD_8 ( ) . METHOD_10 ( ) (  TYPE_1 . METHOD_11 ( METHOD_8 ( ) , true ) )  TYPE_1 . METHOD_11 ( METHOD_8 ( ) , true ) (  METHOD_12 ( METHOD_8 ( ) ) )  METHOD_12 ( METHOD_8 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN java.util.Map<java.lang.String,TYPE_1<java.lang.String,java.lang.String>> ) RETURN java.util.Map<java.lang.String,TYPE_1<java.lang.String,java.lang.String>> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ! ( TYPE_2 . METHOD_2 ( getParameters ( ) . getVm ( ) . getName ( ) ) ) ) COND ! ( TYPE_2 . METHOD_2 ( getParameters ( ) . getVm ( ) . getName ( ) ) ) ( THEN THEN (  return TYPE_3 . METHOD_3 ( getParameters ( ) . getVm ( ) . getName ( ) , TYPE_4 . METHOD_4 ( VAR_1 , VAR_2 ) ) ; )  return TYPE_3 . METHOD_3 ( getParameters ( ) . getVm ( ) . getName ( ) , TYPE_4 . METHOD_4 ( VAR_1 , VAR_2 ) ) ; ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  log . METHOD_2 ( STRING_1 ) )  log . METHOD_2 ( STRING_1 ) ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDSGroup> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDSGroup> ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_3 ( ) . METHOD_4 ( ) ) INIT = METHOD_3 ( ) . METHOD_4 ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ) TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ( NAME cluster ) NAME cluster ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( IF IF ( COND cluster . METHOD_5 ( ) ) COND cluster . METHOD_5 ( ) ( THEN THEN ( TRY TRY ( BLOCK BLOCK (  METHOD_6 ( cluster ) )  METHOD_6 ( cluster ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ( BLOCK BLOCK (  log . METHOD_7 ( STRING_2 , cluster . METHOD_8 ( ) , e ) )  log . METHOD_7 ( STRING_2 , cluster . METHOD_8 ( ) , e ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND TYPE_2 . equals ( VAR_1 ) ) COND TYPE_2 . equals ( VAR_1 ) ( THEN THEN (  VAR_3 . error ( VAR_2 ) )  VAR_3 . error ( VAR_2 ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND TYPE_3 . equals ( VAR_1 ) ) COND TYPE_3 . equals ( VAR_1 ) ( THEN THEN (  VAR_3 . METHOD_2 ( VAR_2 ) )  VAR_3 . METHOD_2 ( VAR_2 ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND TYPE_4 . equals ( VAR_1 ) ) COND TYPE_4 . equals ( VAR_1 ) ( THEN THEN (  VAR_3 . METHOD_3 ( VAR_2 ) )  VAR_3 . METHOD_3 ( VAR_2 ) ) THEN THEN ( ELSE ELSE (  VAR_3 . METHOD_4 ( VAR_2 ) )  VAR_3 . METHOD_4 ( VAR_2 ) ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( true , false ) )  METHOD_2 ( true , false ) (  METHOD_3 ( ) )  METHOD_3 ( ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = org.mockito.Mockito . METHOD_4 ( VAR_2 class ) ) INIT = org.mockito.Mockito . METHOD_4 ( VAR_2 class ) ) VAR VAR (  org.mockito.Mockito.when ( VAR_1 . get ( TYPE_2 . any ( VAR_3 . Guid class ) ) ) . thenReturn ( TYPE_3 . METHOD_5 ( ) ) )  org.mockito.Mockito.when ( VAR_1 . get ( TYPE_2 . any ( VAR_3 . Guid class ) ) ) . thenReturn ( TYPE_3 . METHOD_5 ( ) ) (  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( cmd ) . METHOD_6 ( ) )  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( cmd ) . METHOD_6 ( ) (  METHOD_7 ( true ) )  METHOD_7 ( true ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = dao . get ( VAR_2 . getId ( ) ) ) INIT = dao . get ( VAR_2 . getId ( ) ) ) VAR VAR (  dao . METHOD_2 ( VAR_1 ) )  dao . METHOD_2 ( VAR_1 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = dao . get ( VAR_2 . getId ( ) ) ) INIT = dao . get ( VAR_2 . getId ( ) ) ) VAR VAR (  TYPE_2 . METHOD_3 ( TYPE_3 . equals ( VAR_1 . METHOD_4 ( ) , VAR_3 . METHOD_4 ( ) ) ) )  TYPE_2 . METHOD_3 ( TYPE_3 . equals ( VAR_1 . METHOD_4 ( ) , VAR_3 . METHOD_4 ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME context ) NAME context ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ) TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME domain ) NAME domain ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME map ) NAME map ( IN METHOD_3 ( domain ) ) IN METHOD_3 ( domain ) ( BLOCK BLOCK (  context . METHOD_4 ( map , map . getStatus ( ) ) )  context . METHOD_4 ( map , map . getStatus ( ) ) (  METHOD_5 ( map , status ) )  METHOD_5 ( map , status ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  METHOD_2 ( ) . METHOD_6 ( ) )  METHOD_2 ( ) . METHOD_6 ( ) (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.Map<org.ovirt.engine.core.compat.Guid,org.ovirt.engine.core.common.businessentities.VM> ) TYPE java.util.Map<org.ovirt.engine.core.compat.Guid,org.ovirt.engine.core.common.businessentities.VM> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME VAR_2 ) NAME VAR_2 ( IN VAR_1 . METHOD_2 ( ) ) IN VAR_1 . METHOD_2 ( ) ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_3 . METHOD_3 ( VAR_2 . getId ( ) ) ) ) COND ! ( VAR_3 . METHOD_3 ( VAR_2 . getId ( ) ) ) ( THEN THEN (  VAR_4 . add ( new TYPE_1 < org.ovirt.engine.core.common.businessentities.VM , TYPE_2 > ( VAR_2 , null ) ) )  VAR_4 . add ( new TYPE_1 < org.ovirt.engine.core.common.businessentities.VM , TYPE_2 > ( VAR_2 , null ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME params ) NAME params ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  params . setId ( new org.ovirt.engine.core.compat.Guid ( STRING_1 ) ) )  params . setId ( new org.ovirt.engine.core.compat.Guid ( STRING_1 ) ) (  params . METHOD_2 ( VAR_1 ) )  params . METHOD_2 ( VAR_1 ) (  params . METHOD_3 ( VAR_2 ) )  params . METHOD_3 ( VAR_2 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = org.mockito.Mockito . METHOD_4 ( VAR_4 class ) ) INIT = org.mockito.Mockito . METHOD_4 ( VAR_4 class ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME command ) NAME command ( INIT = org.mockito.Mockito . METHOD_5 ( new TYPE_3 ( params , null ) ) ) INIT = org.mockito.Mockito . METHOD_5 ( new TYPE_3 ( params , null ) ) ) VAR VAR (  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( command ) . METHOD_6 ( ) )  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( command ) . METHOD_6 ( ) (  TYPE_4 . METHOD_7 ( command . validate ( ) ) )  TYPE_4 . METHOD_7 ( command . validate ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = vm . METHOD_2 ( ) ) INIT = vm . METHOD_2 ( ) ) VAR VAR (  VAR_3 . METHOD_3 ( VAR_2 ) )  VAR_3 . METHOD_3 ( VAR_2 ) (  TYPE_2 . getInstance ( ) . METHOD_4 ( ) . METHOD_5 ( VAR_4 , new TYPE_3 ( VAR_1 , VAR_3 ) ) )  TYPE_2 . getInstance ( ) . METHOD_4 ( ) . METHOD_5 ( VAR_4 , new TYPE_3 ( VAR_1 , VAR_3 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME from ) NAME from ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME to ) NAME to ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR ( IF IF ( COND from . METHOD_2 ( ) ) COND from . METHOD_2 ( ) ( THEN THEN (  to . METHOD_3 ( from . METHOD_4 ( ) ) )  to . METHOD_3 ( from . METHOD_4 ( ) ) ) THEN THEN ) IF IF ( IF IF ( COND from . METHOD_5 ( ) ) COND from . METHOD_5 ( ) ( THEN THEN (  to . METHOD_6 ( from . getValue ( ) ) )  to . METHOD_6 ( from . getValue ( ) ) ) THEN THEN ) IF IF (  return to ; )  return to ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) )  METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) (  METHOD_4 ( 1 , 0 , true ) )  METHOD_4 ( 1 , 0 , true ) (  VAR_1 . METHOD_5 ( ) )  VAR_1 . METHOD_5 ( ) ( TRY TRY ( BLOCK BLOCK (  resource . get ( ) )  resource . get ( ) (  TYPE_1 . METHOD_6 ( STRING_1 ) )  TYPE_1 . METHOD_6 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( BLOCK BLOCK (  METHOD_7 ( VAR_2 ) )  METHOD_7 ( VAR_2 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME quota ) NAME quota ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ( INIT = false ) INIT = false ) VAR VAR ( IF IF ( COND quota instanceof TYPE_3 ) COND quota instanceof TYPE_3 ( THEN THEN (  VAR_1 = METHOD_2 ( ( ( TYPE_3 ) ( quota ) ) ) )  VAR_1 = METHOD_2 ( ( ( TYPE_3 ) ( quota ) ) ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND quota instanceof TYPE_4 ) COND quota instanceof TYPE_4 ( THEN THEN (  VAR_1 = METHOD_2 ( ( ( TYPE_4 ) ( quota ) ) ) )  VAR_1 = METHOD_2 ( ( ( TYPE_4 ) ( quota ) ) ) ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  return TYPE_5 . METHOD_3 ( VAR_2 . METHOD_4 ( ) ) ; )  return TYPE_5 . METHOD_3 ( VAR_2 . METHOD_4 ( ) ) ; ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( VAR_3 ) )  TYPE_1 . METHOD_2 ( VAR_3 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_3 . getInstance ( ) ) INIT = TYPE_3 . getInstance ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_4 . METHOD_3 ( VAR_1 ) ) INIT = VAR_4 . METHOD_3 ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_6 ) NAME VAR_6 ( INIT = VAR_4 . METHOD_3 ( VAR_2 ) ) INIT = VAR_4 . METHOD_3 ( VAR_2 ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_7 ) NAME VAR_7 ( IN VAR_3 ) IN VAR_3 ( BLOCK BLOCK (  VAR_5 . METHOD_4 ( VAR_7 ) )  VAR_5 . METHOD_4 ( VAR_7 ) (  VAR_6 . METHOD_5 ( VAR_7 ) )  VAR_6 . METHOD_5 ( VAR_7 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_1 ) ( target ) ) ) INIT = ( ( TYPE_1 ) ( target ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_2 ) ( returnValue ) ) ) INIT = ( ( TYPE_2 ) ( returnValue ) ) ) VAR VAR (  VAR_1 . METHOD_2 ( ) . setEntity ( VAR_2 . METHOD_3 ( ) ) )  VAR_1 . METHOD_2 ( ) . setEntity ( VAR_2 . METHOD_3 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ! ( super . METHOD_1 ( ) ) ) COND ! ( super . METHOD_1 ( ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME validator ) NAME validator ( INIT = new TYPE_1 ( METHOD_2 ( ) ) ) INIT = new TYPE_1 ( METHOD_2 ( ) ) ) VAR VAR (  return ( ( validate ( validator . METHOD_3 ( ) ) ) && ( validate ( validator . METHOD_4 ( ) ) ) ) && ( validate ( validator . METHOD_5 ( ) ) ) ; )  return ( ( validate ( validator . METHOD_3 ( ) ) ) && ( validate ( validator . METHOD_4 ( ) ) ) ) && ( validate ( validator . METHOD_5 ( ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME value ) NAME value ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME widget ) NAME widget ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_2 . METHOD_2 ( ( ( ! VAR_1 ) && ( value . METHOD_3 ( ) . METHOD_4 ( ) ) ) ) )  VAR_2 . METHOD_2 ( ( ( ! VAR_1 ) && ( value . METHOD_3 ( ) . METHOD_4 ( ) ) ) ) (  VAR_3 . METHOD_2 ( ( ( ! VAR_1 ) && ( value . METHOD_5 ( ) . METHOD_4 ( ) ) ) ) )  VAR_3 . METHOD_2 ( ( ( ! VAR_1 ) && ( value . METHOD_5 ( ) . METHOD_4 ( ) ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.when ( cluster . METHOD_2 ( ) ) . thenReturn ( true ) )  org.mockito.Mockito.when ( cluster . METHOD_2 ( ) ) . thenReturn ( true ) (  validator = org.mockito.Mockito . METHOD_3 ( new TYPE_1 ( VAR_1 , VAR_2 , cluster , VAR_3 ) ) )  validator = org.mockito.Mockito . METHOD_3 ( new TYPE_1 ( VAR_1 , VAR_2 , cluster , VAR_3 ) ) (  org.mockito.Mockito.doReturn ( true ) . when ( validator ) . METHOD_4 ( ) )  org.mockito.Mockito.doReturn ( true ) . when ( validator ) . METHOD_4 ( ) (  TYPE_2 . METHOD_5 ( validator . METHOD_6 ( ) , TYPE_3 . METHOD_7 ( ) ) )  TYPE_2 . METHOD_5 ( validator . METHOD_6 ( ) , TYPE_3 . METHOD_7 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME vmId ) NAME vmId ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Disk > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Disk > ( ) ; )  return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Disk > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Disk > ( ) ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Disk > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Disk > ( ) ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Disk > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Disk > ( ) ; } } ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME params ) NAME params ( INIT = new TYPE_1 ( VAR_1 ) ) INIT = new TYPE_1 ( VAR_1 ) ) VAR VAR (  params . METHOD_2 ( vmId ) )  params . METHOD_2 ( vmId ) (  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , params , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , params , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME event ) NAME event ( INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . get ( TYPE_2 . getParameters ( ) . getId ( ) ) ) INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . get ( TYPE_2 . getParameters ( ) . getId ( ) ) ) VAR VAR ( IF IF ( COND event == null ) COND event == null ( THEN THEN (  return METHOD_3 ( VAR_1 ) ; )  return METHOD_3 ( VAR_1 ) ; ) THEN THEN ) IF IF ( IF IF ( COND TYPE_3 . METHOD_4 ( event . METHOD_5 ( ) ) ) COND TYPE_3 . METHOD_4 ( event . METHOD_5 ( ) ) ( THEN THEN (  return METHOD_3 ( VAR_2 ) ; )  return METHOD_3 ( VAR_2 ) ; ) THEN THEN ) IF IF ( IF IF ( COND ( event . METHOD_6 ( ) ) == ( VAR_3 ) ) COND ( event . METHOD_6 ( ) ) == ( VAR_3 ) ( THEN THEN (  return METHOD_3 ( VAR_4 ) ; )  return METHOD_3 ( VAR_4 ) ; ) THEN THEN ) IF IF (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<TYPE_1> ) TYPE java.util.ArrayList<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( java.util.ArrayList < TYPE_1 > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ) INIT = ( ( java.util.ArrayList < TYPE_1 > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ) VAR VAR ( IF IF ( COND ( VAR_1 != null ) && ( ( VAR_1 . size ( ) ) > 0 ) ) COND ( VAR_1 != null ) && ( ( VAR_1 . size ( ) ) > 0 ) ( THEN THEN ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME pool ) NAME pool ( INIT = VAR_1 . get ( 0 ) ) INIT = VAR_1 . get ( 0 ) ) VAR VAR (  TYPE_3 . METHOD_2 ( ( ( org.ovirt.engine.ui.frontend.AsyncQuery ) ( model ) ) , pool . getId ( ) ) )  TYPE_3 . METHOD_2 ( ( ( org.ovirt.engine.ui.frontend.AsyncQuery ) ( model ) ) , pool . getId ( ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME constants ) NAME constants ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  this . VAR_1 = new TYPE_2 < java.lang.Integer > ( constants ) )  this . VAR_1 = new TYPE_2 < java.lang.Integer > ( constants ) (  this . VAR_2 = new TYPE_2 < java.lang.Integer > ( constants ) )  this . VAR_2 = new TYPE_2 < java.lang.Integer > ( constants ) (  this . VAR_3 = new TYPE_2 < java.lang.Integer > ( constants ) )  this . VAR_3 = new TYPE_2 < java.lang.Integer > ( constants ) (  this . VAR_4 = new TYPE_2 < TYPE_3 > ( constants ) )  this . VAR_4 = new TYPE_2 < TYPE_3 > ( constants ) (  this . VAR_5 = new TYPE_2 < TYPE_3 > ( constants ) )  this . VAR_5 = new TYPE_2 < TYPE_3 > ( constants ) (  this . VAR_6 = new TYPE_2 < TYPE_3 > ( constants ) )  this . VAR_6 = new TYPE_2 < TYPE_3 > ( constants ) (  this . VAR_7 = new TYPE_2 < TYPE_4 > ( constants ) )  this . VAR_7 = new TYPE_2 < TYPE_4 > ( constants ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ! ( super . METHOD_1 ( ) ) ) COND ! ( super . METHOD_1 ( ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  VAR_1 = METHOD_2 ( ) . get ( METHOD_3 ( ) ) )  VAR_1 = METHOD_2 ( ) . get ( METHOD_3 ( ) ) (  return ( ( validate ( new TYPE_1 ( VAR_1 ) . METHOD_4 ( ) ) ) && ( validate ( new TYPE_1 ( METHOD_5 ( ) ) . METHOD_6 ( ) ) ) ) && ( validate ( TYPE_2 . METHOD_7 ( VAR_1 , METHOD_5 ( ) ) ) ) ; )  return ( ( validate ( new TYPE_1 ( VAR_1 ) . METHOD_4 ( ) ) ) && ( validate ( new TYPE_1 ( METHOD_5 ( ) ) . METHOD_6 ( ) ) ) ) && ( validate ( TYPE_2 . METHOD_7 ( VAR_1 , METHOD_5 ( ) ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN org.ovirt.engine.core.common.businessentities.DiskImage ) RETURN org.ovirt.engine.core.common.businessentities.DiskImage ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.DiskImage ) TYPE org.ovirt.engine.core.common.businessentities.DiskImage ( NAME disk ) NAME disk ( INIT = new org.ovirt.engine.core.common.businessentities.DiskImage ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.DiskImage ( ) ) VAR VAR (  disk . METHOD_2 ( VAR_1 ) )  disk . METHOD_2 ( VAR_1 ) (  disk . METHOD_3 ( VAR_2 ) )  disk . METHOD_3 ( VAR_2 ) (  disk . METHOD_4 ( true ) )  disk . METHOD_4 ( true ) (  disk . METHOD_5 ( vmId ) )  disk . METHOD_5 ( vmId ) (  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( command ) . METHOD_6 ( ) )  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( command ) . METHOD_6 ( ) (  org.mockito.Mockito.when ( VAR_3 . get ( VAR_1 ) ) . thenReturn ( disk ) )  org.mockito.Mockito.when ( VAR_3 . get ( VAR_1 ) ) . thenReturn ( disk ) (  return disk ; )  return disk ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.uicommonweb.UICommand ) TYPE org.ovirt.engine.ui.uicommonweb.UICommand ( NAME command ) NAME command ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  super . METHOD_1 ( command ) )  super . METHOD_1 ( command ) ( IF IF ( COND command == ( model . METHOD_2 ( ) ) ) COND command == ( model . METHOD_2 ( ) ) ( THEN THEN (  METHOD_3 ( model ) )  METHOD_3 ( model ) (  METHOD_4 ( ) . METHOD_5 ( ) )  METHOD_4 ( ) . METHOD_5 ( ) (  VAR_1 . METHOD_6 ( model . getModel ( ) , model . METHOD_7 ( ) ) )  VAR_1 . METHOD_6 ( model . getModel ( ) , model . METHOD_7 ( ) ) (  TYPE_1 . METHOD_8 ( METHOD_9 ( ) , model . getModel ( ) ) )  TYPE_1 . METHOD_8 ( METHOD_9 ( ) , model . getModel ( ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1<TYPE_2> ) RETURN TYPE_1<TYPE_2> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ( INIT = METHOD_2 ( VAR_1 , VAR_2 ) ) INIT = METHOD_2 ( VAR_1 , VAR_2 ) ) VAR VAR (  METHOD_3 ( vm ) )  METHOD_3 ( vm ) ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME cmd ) NAME cmd ( INIT = METHOD_4 ( vm , VAR_3 ) ) INIT = METHOD_4 ( vm , VAR_3 ) ) VAR VAR (  TYPE_3 . METHOD_5 ( cmd ) )  TYPE_3 . METHOD_5 ( cmd ) (  return cmd ; )  return cmd ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND returnValue != null ) COND returnValue != null ( THEN THEN ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.String> ) TYPE java.util.Map<java.lang.String,java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) INIT = ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) VAR VAR (  METHOD_1 ( ) . METHOD_2 ( VAR_1 ) )  METHOD_1 ( ) . METHOD_2 ( VAR_1 ) (  METHOD_1 ( ) . METHOD_3 ( ( ! ( VAR_1 . isEmpty ( ) ) ) ) )  METHOD_1 ( ) . METHOD_3 ( ( ! ( VAR_1 . isEmpty ( ) ) ) ) (  METHOD_4 ( ) )  METHOD_4 ( ) ) THEN THEN ) IF IF (  METHOD_5 ( ) )  METHOD_5 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN org.ovirt.engine.core.common.businessentities.VDSGroup ) RETURN org.ovirt.engine.core.common.businessentities.VDSGroup ( NAME map ) NAME map ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME pool ) NAME pool ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ) TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ( NAME template ) NAME template ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ) TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ( NAME entity ) NAME entity ( INIT = ( template != null ) ? template : new org.ovirt.engine.core.common.businessentities.VDSGroup ( ) ) INIT = ( template != null ) ? template : new org.ovirt.engine.core.common.businessentities.VDSGroup ( ) ) VAR VAR ( IF IF ( COND ( pool . METHOD_1 ( ) ) != null ) COND ( pool . METHOD_1 ( ) ) != null ( THEN THEN (  entity . METHOD_2 ( pool . METHOD_1 ( ) ) )  entity . METHOD_2 ( pool . METHOD_1 ( ) ) ) THEN THEN ) IF IF (  return entity ; )  return entity ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.EngineMessage ) TYPE TYPE_1.EngineMessage ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2<java.lang.String> ) TYPE TYPE_2<java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3.ValidationResult ) TYPE TYPE_3.ValidationResult ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( VAR_2 . isEmpty ( ) ) ? VAR_4 : new TYPE_3 . ValidationResult ( VAR_1 , VAR_2 ) ) INIT = ( VAR_2 . isEmpty ( ) ) ? VAR_4 : new TYPE_3 . ValidationResult ( VAR_1 , VAR_2 ) ) VAR VAR (  org.mockito.Mockito.when ( VAR_5 . METHOD_2 ( TYPE_4 . any ( ) ) ) . thenReturn ( VAR_3 ) )  org.mockito.Mockito.when ( VAR_5 . METHOD_2 ( TYPE_4 . any ( ) ) ) . thenReturn ( VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ( ) ; )  return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ( ) ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ( ) ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ( ) ; } } ( VAR VAR ( TYPE org.ovirt.engine.core.common.queries.IdQueryParameters ) TYPE org.ovirt.engine.core.common.queries.IdQueryParameters ( NAME params ) NAME params ( INIT = new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) ) INIT = new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) ) VAR VAR (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , params , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , params , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 < TYPE_1 > ( ) ) INIT = new TYPE_2 < TYPE_1 > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME item ) NAME item ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( ( TYPE_3 ) ( item ) ) ) INIT = ( ( TYPE_3 ) ( item ) ) ) VAR VAR ( IF IF ( COND ( ! ( VAR_3 . METHOD_2 ( ) ) ) && ( VAR_3 . METHOD_3 ( ) . METHOD_4 ( ) ) ) COND ( ! ( VAR_3 . METHOD_2 ( ) ) ) && ( VAR_3 . METHOD_3 ( ) . METHOD_4 ( ) ) ( THEN THEN (  VAR_1 . add ( VAR_3 . METHOD_3 ( ) ) )  VAR_1 . add ( VAR_3 . METHOD_3 ( ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME entity ) NAME entity ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.Network ) TYPE org.ovirt.engine.core.common.businessentities.Network ( NAME network ) NAME network ( INIT = METHOD_2 ( model ) ) INIT = METHOD_2 ( model ) ) VAR VAR (  model . METHOD_3 ( ) . setId ( network . getId ( ) . toString ( ) ) )  model . METHOD_3 ( ) . setId ( network . getId ( ) . toString ( ) ) (  model . METHOD_3 ( ) . METHOD_4 ( null ) )  model . METHOD_3 ( ) . METHOD_4 ( null ) (  return model ; )  return model ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME response ) NAME response ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_2 ( VAR_3 ) ) INIT = VAR_1 . METHOD_2 ( VAR_3 ) ) VAR VAR ( IF IF ( COND runQuery ( VAR_1 , response , VAR_2 ) ) COND runQuery ( VAR_1 , response , VAR_2 ) ( THEN THEN (  response . METHOD_3 ( VAR_4 ) )  response . METHOD_3 ( VAR_4 ) (  VAR_5 . METHOD_4 ( STRING_1 , VAR_2 ) )  VAR_5 . METHOD_4 ( STRING_1 , VAR_2 ) ) THEN THEN ( ELSE ELSE (  response . METHOD_3 ( VAR_6 ) )  response . METHOD_3 ( VAR_6 ) (  VAR_5 . METHOD_4 ( STRING_2 , VAR_2 ) )  VAR_5 . METHOD_4 ( STRING_2 , VAR_2 ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME dao ) NAME dao ( INIT = TYPE_2 . METHOD_2 ( ) ) INIT = TYPE_2 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . getParameters ( ) . METHOD_3 ( ) ) INIT = TYPE_2 . getParameters ( ) . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = dao . METHOD_4 ( VAR_1 . METHOD_5 ( ) , VAR_1 . METHOD_6 ( ) ) ) INIT = dao . METHOD_4 ( VAR_1 . METHOD_5 ( ) , VAR_1 . METHOD_6 ( ) ) ) VAR VAR ( IF IF ( COND VAR_2 == null ) COND VAR_2 == null ( THEN THEN (  dao . METHOD_7 ( VAR_1 ) )  dao . METHOD_7 ( VAR_1 ) ) THEN THEN ( ELSE ELSE (  dao . METHOD_8 ( VAR_2 ) )  dao . METHOD_8 ( VAR_2 ) ) ELSE ELSE ) IF IF (  METHOD_9 ( VAR_1 . getId ( ) ) )  METHOD_9 ( VAR_1 . getId ( ) ) (  TYPE_2 . METHOD_10 ( true ) )  TYPE_2 . METHOD_10 ( true ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN java.util.List<org.ovirt.engine.core.common.businessentities.VM> ) RETURN java.util.List<org.ovirt.engine.core.common.businessentities.VM> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VM> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VM> ( NAME vms ) NAME vms ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_2 . METHOD_2 ( VAR_3 ) ) ) COND ! ( VAR_2 . METHOD_2 ( VAR_3 ) ) ( THEN THEN (  vms . add ( VAR_2 . METHOD_3 ( VAR_3 ) ) )  vms . add ( VAR_2 . METHOD_3 ( VAR_3 ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( BLOCK BLOCK (  METHOD_4 ( VAR_4 . getName ( ) , VAR_4 . METHOD_5 ( ) ) )  METHOD_4 ( VAR_4 . getName ( ) , VAR_4 . METHOD_5 ( ) ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return vms ; )  return vms ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME parameters ) NAME parameters ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SWITCH SWITCH ( NAME parameters . METHOD_2 ( ) ) NAME parameters . METHOD_2 ( ) ( CASE VAR_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3<?> ) TYPE TYPE_3<?> ( NAME command ) NAME command ( INIT = TYPE_4 . METHOD_3 ( parameters . METHOD_2 ( ) , parameters ) ) INIT = TYPE_4 . METHOD_3 ( parameters . METHOD_2 ( ) , parameters ) ) VAR VAR (  return command . METHOD_4 ( ) ; )  return command . METHOD_4 ( ) ; ) BLOCK BLOCK ) CASE VAR_1 ( CASE VAR_2 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3<?> ) TYPE TYPE_3<?> ( NAME command ) NAME command ( INIT = TYPE_4 . METHOD_3 ( parameters . METHOD_2 ( ) , parameters ) ) INIT = TYPE_4 . METHOD_3 ( parameters . METHOD_2 ( ) , parameters ) ) VAR VAR (  return command . METHOD_4 ( ) ; )  return command . METHOD_4 ( ) ; ) BLOCK BLOCK ) CASE VAR_2 ( CASE VAR_3 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3<?> ) TYPE TYPE_3<?> ( NAME command ) NAME command ( INIT = TYPE_4 . METHOD_3 ( parameters . METHOD_2 ( ) , parameters ) ) INIT = TYPE_4 . METHOD_3 ( parameters . METHOD_2 ( ) , parameters ) ) VAR VAR (  return command . METHOD_4 ( ) ; )  return command . METHOD_4 ( ) ; ) BLOCK BLOCK ) CASE VAR_3 ( DEFAULT DEFAULT ( BLOCK BLOCK (  return METHOD_5 ( VAR_4 ) ; )  return METHOD_5 ( VAR_4 ) ; ) BLOCK BLOCK ) DEFAULT DEFAULT ) SWITCH SWITCH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME vds ) NAME vds ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = null ) INIT = null ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_1 = new TYPE_1 ( vds . METHOD_2 ( ) , STRING_1 , true ) )  VAR_1 = new TYPE_1 ( vds . METHOD_2 ( ) , STRING_1 , true ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_2 . METHOD_3 ( STRING_2 , vds . getId ( ) , vds . METHOD_4 ( ) , vds . METHOD_2 ( ) , TYPE_3 . METHOD_5 ( e ) ) )  VAR_2 . METHOD_3 ( STRING_2 , vds . getId ( ) , vds . METHOD_4 ( ) , vds . METHOD_2 ( ) , TYPE_3 . METHOD_5 ( e ) ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = org.mockito.Mockito . METHOD_2 ( VAR_2 class ) ) INIT = org.mockito.Mockito . METHOD_2 ( VAR_2 class ) ) VAR VAR (  cluster = new TYPE_2 ( ) )  cluster = new TYPE_2 ( ) (  cluster . METHOD_3 ( STRING_1 ) )  cluster . METHOD_3 ( STRING_1 ) (  cluster . METHOD_4 ( ) . add ( VAR_3 ) )  cluster . METHOD_4 ( ) . add ( VAR_3 ) (  cluster . METHOD_5 ( VAR_4 ) )  cluster . METHOD_5 ( VAR_4 ) (  org.mockito.Mockito.when ( VAR_1 . get ( TYPE_3 . any ( VAR_5 . Guid class ) ) ) . thenReturn ( cluster ) )  org.mockito.Mockito.when ( VAR_1 . get ( TYPE_3 . any ( VAR_5 . Guid class ) ) ) . thenReturn ( cluster ) (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 ( VAR_1 . METHOD_2 ( STRING_2 ) ) ) INIT = new TYPE_2 ( VAR_1 . METHOD_2 ( STRING_2 ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_3 ( ) ) INIT = new TYPE_3 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_3 ( ) ) INIT = new TYPE_3 ( ) ) VAR VAR (  client . METHOD_3 ( STRING_3 , VAR_2 , VAR_3 , VAR_4 ) )  client . METHOD_3 ( STRING_3 , VAR_2 , VAR_3 , VAR_4 ) (  TYPE_4 . assertEquals ( VAR_1 , new java.lang.String ( VAR_3 . METHOD_4 ( ) , STRING_2 ) ) )  TYPE_4 . assertEquals ( VAR_1 , new java.lang.String ( VAR_3 . METHOD_4 ( ) , STRING_2 ) ) (  TYPE_4 . assertEquals ( 0 , VAR_4 . size ( ) ) )  TYPE_4 . assertEquals ( 0 , VAR_4 . size ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = org.mockito.Mockito . METHOD_2 ( VAR_2 class ) ) INIT = org.mockito.Mockito . METHOD_2 ( VAR_2 class ) ) VAR VAR (  VAR_3 . METHOD_3 ( VAR_1 ) )  VAR_3 . METHOD_3 ( VAR_1 ) (  org.mockito.Mockito . METHOD_4 ( VAR_1 , org.mockito.Mockito . METHOD_5 ( ) ) . METHOD_6 ( TYPE_2 . METHOD_7 ( ) ) )  org.mockito.Mockito . METHOD_4 ( VAR_1 , org.mockito.Mockito . METHOD_5 ( ) ) . METHOD_6 ( TYPE_2 . METHOD_7 ( ) ) (  org.mockito.Mockito . METHOD_4 ( VAR_1 , org.mockito.Mockito . METHOD_5 ( ) ) . setId ( TYPE_2 . any ( ) ) )  org.mockito.Mockito . METHOD_4 ( VAR_1 , org.mockito.Mockito . METHOD_5 ( ) ) . setId ( TYPE_2 . any ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( ) { public TYPE_3 . Disk METHOD_2 ( org.ovirt.engine.core.compat.Guid VAR_2 ) throws TYPE_4 { return VAR_3 . METHOD_2 ( VAR_2 ) ; } } ) INIT = new TYPE_2 ( ) { public TYPE_3 . Disk METHOD_2 ( org.ovirt.engine.core.compat.Guid VAR_2 ) throws TYPE_4 { return VAR_3 . METHOD_2 ( VAR_2 ) ; } } ) VAR VAR ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_3.Disk ) RETURN TYPE_3.Disk ( NAME METHOD_2 ) NAME METHOD_2 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return VAR_3 . METHOD_2 ( VAR_2 ) ; )  return VAR_3 . METHOD_2 ( VAR_2 ) ; ) BLOCK BLOCK ) METHOD METHOD ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_5 ( VAR_1 , METHOD_3 ( id ) ) ) INIT = new TYPE_5 ( VAR_1 , METHOD_3 ( id ) ) ) VAR VAR (  return inject ( new TYPE_6 < TYPE_3 . Disk , TYPE_3 . Disk > ( VAR_5 , VAR_2 , VAR_4 ) ) ; )  return inject ( new TYPE_6 < TYPE_3 . Disk , TYPE_3 . Disk > ( VAR_5 , VAR_2 , VAR_4 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  METHOD_3 ( VAR_4 , VAR_5 . METHOD_4 ( ) , new java.lang.String [ ] { VAR_6 } , new java.lang.Object [ ] { VAR_7 [ 1 ] } , VAR_3 , VAR_2 ) )  METHOD_3 ( VAR_4 , VAR_5 . METHOD_4 ( ) , new java.lang.String [ ] { VAR_6 } , new java.lang.Object [ ] { VAR_7 [ 1 ] } , VAR_3 , VAR_2 ) (  VAR_8 . METHOD_5 ( ) )  VAR_8 . METHOD_5 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<TYPE_2<TYPE_3>> ) TYPE TYPE_1<TYPE_2<TYPE_3>> ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . validate ( getParameters ( ) ) ) INIT = VAR_2 . validate ( getParameters ( ) ) ) VAR VAR ( IF IF ( COND ! ( VAR_1 . isEmpty ( ) ) ) COND ! ( VAR_1 . isEmpty ( ) ) ( THEN THEN (  returnValue . METHOD_2 ( VAR_1 . toString ( ) ) )  returnValue . METHOD_2 ( VAR_1 . toString ( ) ) (  return false ; )  return false ; ) THEN THEN ) IF IF (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2<TYPE_1,TYPE_3> ) TYPE TYPE_2<TYPE_1,TYPE_3> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  new TYPE_4 ( VAR_2 , new TYPE_5 ( ) , new TYPE_6 ( ) , new TYPE_7 ( new TYPE_8 ( ) , new TYPE_9 ( new TYPE_10 ( ) , new TYPE_11 ( ) . METHOD_2 ( ) ) . METHOD_2 ( ) ) ) . METHOD_3 ( VAR_1 , getModel ( ) ) )  new TYPE_4 ( VAR_2 , new TYPE_5 ( ) , new TYPE_6 ( ) , new TYPE_7 ( new TYPE_8 ( ) , new TYPE_9 ( new TYPE_10 ( ) , new TYPE_11 ( ) . METHOD_2 ( ) ) . METHOD_2 ( ) ) ) . METHOD_3 ( VAR_1 , getModel ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ( ) ; )  return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ( ) ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ( ) ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ( ) ; } } (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( disk . METHOD_2 ( ) ) == ( VAR_1 . VM ) ) COND ( disk . METHOD_2 ( ) ) == ( VAR_1 . VM ) ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ( IN METHOD_3 ( ) ) IN METHOD_3 ( ) ( BLOCK BLOCK ( IF IF ( COND ( vm . METHOD_4 ( ) ) != ( VAR_2 ) ) COND ( vm . METHOD_4 ( ) ) != ( VAR_2 ) ( THEN THEN ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_5 ( ) . get ( new TYPE_2 ( disk . getId ( ) , vm . getId ( ) ) ) ) INIT = METHOD_5 ( ) . get ( new TYPE_2 ( disk . getId ( ) , vm . getId ( ) ) ) ) VAR VAR ( IF IF ( COND VAR_3 . METHOD_6 ( ) ) COND VAR_3 . METHOD_6 ( ) ( THEN THEN (  addCanDoActionMessage ( VAR_4 ) )  addCanDoActionMessage ( VAR_4 ) (  return false ; )  return false ; ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( ) ) ) )  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( ) ) ) (  METHOD_3 ( cmd , VAR_1 ) )  METHOD_3 ( cmd , VAR_1 ) (  METHOD_4 ( false ) )  METHOD_4 ( false ) (  TYPE_3 . METHOD_5 ( cmd . validate ( ) ) )  TYPE_3 . METHOD_5 ( cmd . validate ( ) ) (  METHOD_4 ( true ) )  METHOD_4 ( true ) (  METHOD_6 ( VAR_2 ) )  METHOD_6 ( VAR_2 ) (  TYPE_3 . METHOD_5 ( cmd . validate ( ) ) )  TYPE_3 . METHOD_5 ( cmd . validate ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public final ) MODIFIER public final ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1<java.lang.String> ) TYPE TYPE_1<java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<java.lang.String> ) TYPE java.util.ArrayList<java.lang.String> ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_2 . METHOD_2 ( source , VAR_1 ) ) INIT = TYPE_2 . METHOD_2 ( source , VAR_1 ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK ( IF IF ( COND VAR_3 . METHOD_3 ( VAR_4 ) ) COND VAR_3 . METHOD_3 ( VAR_4 ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.Object[] ) TYPE java.lang.Object[] ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( ) ) INIT = TYPE_1 . METHOD_2 ( ) ) VAR VAR (  VAR_1 [ 1 ] = new java.util.HashMap < java.lang.String , java.lang.String > ( ) )  VAR_1 [ 1 ] = new java.util.HashMap < java.lang.String , java.lang.String > ( ) ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.Object> ) TYPE java.util.Map<java.lang.String,java.lang.Object> ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_1 . METHOD_3 ( VAR_1 ) ) INIT = TYPE_1 . METHOD_3 ( VAR_1 ) ) VAR VAR (  TYPE_1 . METHOD_4 ( METHOD_5 ( ) , VAR_1 , VAR_2 ) )  TYPE_1 . METHOD_4 ( METHOD_5 ( ) , VAR_1 , VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME command ) NAME command ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_4.VdcActionType ) TYPE TYPE_4.VdcActionType ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_5 ( VAR_2 , METHOD_2 ( VAR_1 , command , VAR_2 , VAR_3 ) ) ) INIT = new TYPE_5 ( VAR_2 , METHOD_2 ( VAR_1 , command , VAR_2 , VAR_3 ) ) ) VAR VAR (  VAR_4 . METHOD_3 ( command . getParameters ( ) . METHOD_4 ( ) ) )  VAR_4 . METHOD_3 ( command . getParameters ( ) . METHOD_4 ( ) ) (  return METHOD_5 ( command . METHOD_6 ( ) , VAR_4 ) ; )  return METHOD_5 ( command . METHOD_6 ( ) , VAR_4 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_1 . METHOD_2 ( null ) )  VAR_1 . METHOD_2 ( null ) ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME VAR_2 ) NAME VAR_2 ( INIT = new org.ovirt.engine.core.common.businessentities.VDS ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.VDS ( ) ) VAR VAR (  VAR_2 . METHOD_2 ( VAR_3 ) )  VAR_2 . METHOD_2 ( VAR_3 ) (  VAR_1 . METHOD_3 ( VAR_2 ) )  VAR_1 . METHOD_3 ( VAR_2 ) ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_1 . METHOD_4 ( ) ) INIT = VAR_1 . METHOD_4 ( ) ) VAR VAR (  TYPE_2 . assertEquals ( VAR_3 , VAR_4 ) )  TYPE_2 . assertEquals ( VAR_3 , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME type ) NAME type ( IN TYPE_1 . METHOD_2 ( ) ) IN TYPE_1 . METHOD_2 ( ) ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME model ) NAME model ( INIT = TYPE_3 . map ( type , null ) ) INIT = TYPE_3 . map ( type , null ) ) VAR VAR (  TYPE_4 . METHOD_3 ( model ) )  TYPE_4 . METHOD_3 ( model ) (  TYPE_4 . assertEquals ( model . name ( ) . METHOD_4 ( ) , type . name ( ) . METHOD_4 ( ) ) )  TYPE_4 . assertEquals ( model . name ( ) . METHOD_4 ( ) , type . name ( ) . METHOD_4 ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( ( VAR_1 ) == null ) && ( ! ( METHOD_2 ( ) . equals ( VAR_2 ) ) ) ) COND ( ( VAR_1 ) == null ) && ( ! ( METHOD_2 ( ) . equals ( VAR_2 ) ) ) ( THEN THEN ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . get ( METHOD_2 ( ) ) ) INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . get ( METHOD_2 ( ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_4 . getInstance ( ) . METHOD_4 ( VAR_3 . METHOD_5 ( ) ) ) INIT = TYPE_4 . getInstance ( ) . METHOD_4 ( VAR_3 . METHOD_5 ( ) ) ) VAR VAR (  VAR_1 = VAR_4 . METHOD_6 ( VAR_3 . METHOD_7 ( ) ) )  VAR_1 = VAR_4 . METHOD_6 ( VAR_3 . METHOD_7 ( ) ) ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 < > ( ) ) INIT = new TYPE_1 < > ( ) ) VAR VAR (  VAR_2 . METHOD_2 ( VAR_3 , INT_1 ) )  VAR_2 . METHOD_2 ( VAR_3 , INT_1 ) (  org.mockito.Mockito.when ( VAR_4 . METHOD_3 ( ) ) . thenReturn ( new TYPE_2 ( new TYPE_3 ( ) ) ) )  org.mockito.Mockito.when ( VAR_4 . METHOD_3 ( ) ) . thenReturn ( new TYPE_2 ( new TYPE_3 ( ) ) ) ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME result ) NAME result ( INIT = validator . METHOD_4 ( VAR_1 ) ) INIT = validator . METHOD_4 ( VAR_1 ) ) VAR VAR (  TYPE_4 . assertEquals ( 1 , VAR_1 . size ( ) ) )  TYPE_4 . assertEquals ( 1 , VAR_1 . size ( ) ) (  TYPE_4 . assertEquals ( STRING_1 , VAR_1 . get ( 0 ) ) )  TYPE_4 . assertEquals ( STRING_1 , VAR_1 . get ( 0 ) ) (  TYPE_4 . METHOD_5 ( result ) )  TYPE_4 . METHOD_5 ( result ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2.VdcActionType ) TYPE TYPE_2.VdcActionType ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( METHOD_3 ( VAR_2 , VAR_4 class , new java.lang.String [ ] { STRING_1 , STRING_2 } , new java.lang.Object [ ] { VAR_5 [ 0 ] , VAR_3 } ) ) )  METHOD_2 ( METHOD_3 ( VAR_2 , VAR_4 class , new java.lang.String [ ] { STRING_1 , STRING_2 } , new java.lang.Object [ ] { VAR_5 [ 0 ] , VAR_3 } ) ) ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME action ) NAME action ( INIT = new TYPE_4 ( ) ) INIT = new TYPE_4 ( ) ) VAR VAR (  action . METHOD_4 ( VAR_1 . value ( ) ) )  action . METHOD_4 ( VAR_1 . value ( ) ) (  METHOD_5 ( resource . METHOD_6 ( action ) ) )  METHOD_5 ( resource . METHOD_6 ( action ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME result ) NAME result ( INIT = null ) INIT = null ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_2 ) NAME VAR_2 ( INIT = source . METHOD_2 ( ) . METHOD_3 ( STRING_1 ) ) INIT = source . METHOD_2 ( ) . METHOD_3 ( STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_4 . getInstance ( VAR_4 ) ) INIT = TYPE_4 . getInstance ( VAR_4 ) ) VAR VAR (  VAR_3 . METHOD_4 ( VAR_5 , VAR_1 . METHOD_5 ( ) ) )  VAR_3 . METHOD_4 ( VAR_5 , VAR_1 . METHOD_5 ( ) ) ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_6 ) NAME VAR_6 ( INIT = VAR_3 . METHOD_6 ( VAR_2 ) ) INIT = VAR_3 . METHOD_6 ( VAR_2 ) ) VAR VAR (  result = TYPE_5 . METHOD_7 ( VAR_6 ) )  result = TYPE_5 . METHOD_7 ( VAR_6 ) (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<TYPE_1.DiskImage> ) TYPE java.util.ArrayList<TYPE_1.DiskImage> ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( METHOD_2 ( ) ) != null ) ? VAR_2 . Linq < TYPE_1 . DiskImage > METHOD_3 ( METHOD_2 ( ) ) : new java.util.ArrayList < TYPE_1 . DiskImage > ( ) ) INIT = ( ( METHOD_2 ( ) ) != null ) ? VAR_2 . Linq < TYPE_1 . DiskImage > METHOD_3 ( METHOD_2 ( ) ) : new java.util.ArrayList < TYPE_1 . DiskImage > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1.DiskImage ) TYPE TYPE_1.DiskImage ( NAME disk ) NAME disk ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( IF IF ( COND ( ( disk . METHOD_4 ( ) ) != ( VAR_3 ) ) || ( ( disk . METHOD_5 ( ) ) != ( VAR_4 ) ) ) COND ( ( disk . METHOD_4 ( ) ) != ( VAR_3 ) ) || ( ( disk . METHOD_5 ( ) ) != ( VAR_4 ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.util.ArrayList<TYPE_1> ) RETURN java.util.ArrayList<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<TYPE_1> ) TYPE java.util.ArrayList<TYPE_1> ( NAME list ) NAME list ( INIT = new java.util.ArrayList < TYPE_1 > ( TYPE_3 . METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ) ) INIT = new java.util.ArrayList < TYPE_1 > ( TYPE_3 . METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ) ) VAR VAR (  list . METHOD_4 ( VAR_3 ) )  list . METHOD_4 ( VAR_3 ) ( IF IF ( COND TYPE_4 . METHOD_5 ( VAR_1 ) ) COND TYPE_4 . METHOD_5 ( VAR_1 ) ( THEN THEN (  list . METHOD_4 ( VAR_4 ) )  list . METHOD_4 ( VAR_4 ) ( IF IF ( COND ( VAR_1 == ( VAR_5 ) ) && VAR_2 ) COND ( VAR_1 == ( VAR_5 ) ) && VAR_2 ( THEN THEN (  list . add ( VAR_3 ) )  list . add ( VAR_3 ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return list ; )  return list ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( ( VAR_2 != null ) && ( ! ( getParameters ( ) . METHOD_3 ( ) ) ) ) ? VAR_2 . METHOD_4 ( ) : VAR_4 ) INIT = ( ( VAR_2 != null ) && ( ! ( getParameters ( ) . METHOD_3 ( ) ) ) ) ? VAR_2 . METHOD_4 ( ) : VAR_4 ) VAR VAR (  return VAR_5 . METHOD_1 ( VAR_1 , getVm ( ) , VAR_3 , TYPE_2 . METHOD_5 ( ) ) ; )  return VAR_5 . METHOD_1 ( VAR_1 , getVm ( ) , VAR_3 , TYPE_2 . METHOD_5 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND returnValue == null ) COND returnValue == null ( THEN THEN (  return new java.util.ArrayList < > ( ) ; )  return new java.util.ArrayList < > ( ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( TYPE_2 . METHOD_3 ( ( ( TYPE_3 < TYPE_1 > ) ( returnValue ) ) , VAR_2 ) ) ) INIT = TYPE_2 . METHOD_2 ( TYPE_2 . METHOD_3 ( ( ( TYPE_3 < TYPE_1 > ) ( returnValue ) ) , VAR_2 ) ) ) VAR VAR (  TYPE_4 . METHOD_4 ( VAR_1 , new TYPE_5 ( ) ) )  TYPE_4 . METHOD_4 ( VAR_1 , new TYPE_5 ( ) ) (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( java.lang.Boolean ) ( METHOD_2 ( ) . getEntity ( ) ) ) ) INIT = ( ( java.lang.Boolean ) ( METHOD_2 ( ) . getEntity ( ) ) ) ) VAR VAR (  METHOD_3 ( ) . setIsChangable ( ( ( java.lang.Boolean ) ( METHOD_2 ( ) . getEntity ( ) ) ) ) )  METHOD_3 ( ) . setIsChangable ( ( ( java.lang.Boolean ) ( METHOD_2 ( ) . getEntity ( ) ) ) ) (  METHOD_4 ( ) . setIsChangable ( ( ( java.lang.Boolean ) ( METHOD_2 ( ) . getEntity ( ) ) ) ) )  METHOD_4 ( ) . setIsChangable ( ( ( java.lang.Boolean ) ( METHOD_2 ( ) . getEntity ( ) ) ) ) (  METHOD_3 ( ) . setEntity ( ( VAR_1 ? STRING_1 : null ) ) )  METHOD_3 ( ) . setEntity ( ( VAR_1 ? STRING_1 : null ) ) (  METHOD_4 ( ) . setEntity ( ( VAR_1 ? STRING_1 : null ) ) )  METHOD_4 ( ) . setEntity ( ( VAR_1 ? STRING_1 : null ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  METHOD_3 ( ) )  METHOD_3 ( ) (  METHOD_4 ( false ) )  METHOD_4 ( false ) (  TYPE_1 . METHOD_5 ( command . METHOD_6 ( ) ) )  TYPE_1 . METHOD_5 ( command . METHOD_6 ( ) ) (  TYPE_1 . METHOD_7 ( command . getReturnValue ( ) . METHOD_8 ( ) . METHOD_9 ( TYPE_2 . toString ( ) ) ) )  TYPE_1 . METHOD_7 ( command . getReturnValue ( ) . METHOD_8 ( ) . METHOD_9 ( TYPE_2 . toString ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME getValue ) NAME getValue ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME object ) NAME object ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( object . METHOD_1 ( ) ) == ( VAR_1 ) ) COND ( object . METHOD_1 ( ) ) == ( VAR_1 ) ( THEN THEN (  return TYPE_2 . METHOD_2 ( object . METHOD_3 ( ) ) ; )  return TYPE_2 . METHOD_2 ( object . METHOD_3 ( ) ) ; ) THEN THEN ( ELSE ELSE (  return TYPE_2 . METHOD_2 ( object . METHOD_4 ( ) ) ; )  return TYPE_2 . METHOD_2 ( object . METHOD_4 ( ) ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2.VdcActionType ) TYPE TYPE_2.VdcActionType ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3<?extendsTYPE_2.VdcActionParametersBase> ) TYPE TYPE_3<?extendsTYPE_2.VdcActionParametersBase> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object[] ) TYPE java.lang.Object[] ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.compat.Guid> ) TYPE java.util.ArrayList<org.ovirt.engine.core.compat.Guid> ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ( VAR VAR ( TYPE java.util.ArrayList<TYPE_4> ) TYPE java.util.ArrayList<TYPE_4> ( NAME VAR_6 ) NAME VAR_6 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_7 ) NAME VAR_7 ( INIT = ( ( ( STRING_1 + ( VAR_8 ) ) + STRING_2 ) + ( VAR_9 ) ) + STRING_3 ) INIT = ( ( ( STRING_1 + ( VAR_8 ) ) + STRING_2 ) + ( VAR_9 ) ) + STRING_3 ) VAR VAR (  return METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , true , true , null , VAR_5 , VAR_6 , VAR_7 , true ) ; )  return METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , true , true , null , VAR_5 , VAR_6 , VAR_7 , true ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return ( ( VAR_1 . METHOD_2 ( ) . equals ( vm . METHOD_3 ( ) ) ) && ( TYPE_1 . METHOD_4 ( VAR_1 , vm ) ) ) && ( TYPE_1 . METHOD_5 ( VAR_1 , vm ) ) ; )  return ( ( VAR_1 . METHOD_2 ( ) . equals ( vm . METHOD_3 ( ) ) ) && ( TYPE_1 . METHOD_4 ( VAR_1 , vm ) ) ) && ( TYPE_1 . METHOD_5 ( VAR_1 , vm ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  return TYPE_1 . equals ( ( ( ( TYPE_2 . getParameters ( ) . METHOD_2 ( ) ) && ( VAR_1 . METHOD_3 ( ) ) ) && ( ( TYPE_2 . getVm ( ) . METHOD_4 ( ) ) != ( VAR_2 ) ) ) ) ; )  return TYPE_1 . equals ( ( ( ( TYPE_2 . getParameters ( ) . METHOD_2 ( ) ) && ( VAR_1 . METHOD_3 ( ) ) ) && ( ( TYPE_2 . getVm ( ) . METHOD_4 ( ) ) != ( VAR_2 ) ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN java.util.List<java.lang.String> ) RETURN java.util.List<java.lang.String> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VdsNetworkInterface> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VdsNetworkInterface> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_3 ) NAME VAR_3 ( INIT = new java.util.ArrayList < java.lang.String > ( ) ) INIT = new java.util.ArrayList < java.lang.String > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME i ) NAME i ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK ( IF IF ( COND VAR_1 . getName ( ) . equals ( i . METHOD_2 ( ) ) ) COND VAR_1 . getName ( ) . equals ( i . METHOD_2 ( ) ) ( THEN THEN (  VAR_3 . add ( i . getName ( ) ) )  VAR_3 . add ( i . getName ( ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME map ) NAME map ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME entity ) NAME entity ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME template ) NAME template ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND template == null ) COND template == null ( THEN THEN (  template = new TYPE_1 ( ) )  template = new TYPE_1 ( ) ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_4 . map ( entity . METHOD_1 ( ) , null ) ) INIT = TYPE_4 . map ( entity . METHOD_1 ( ) , null ) ) VAR VAR (  template . METHOD_2 ( ( VAR_1 == null ? STRING_1 : VAR_1 . value ( ) ) ) )  template . METHOD_2 ( ( VAR_1 == null ? STRING_1 : VAR_1 . value ( ) ) ) (  template . METHOD_3 ( entity . METHOD_4 ( ) ) )  template . METHOD_3 ( entity . METHOD_4 ( ) ) (  return template ; )  return template ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static synchronized ) MODIFIER public static synchronized ( RETURN java.lang.String[] ) RETURN java.lang.String[] ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.StorageDomain ) TYPE TYPE_1.StorageDomain ( NAME storageDomain ) NAME storageDomain ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return TYPE_2 . METHOD_2 ( storageDomain ) ? new java.lang.String [ ] { STRING_1 , STRING_2 , STRING_3 , STRING_4 , STRING_5 } : TYPE_2 . METHOD_3 ( storageDomain ) ? new java.lang.String [ ] { STRING_6 , STRING_4 , STRING_5 } : TYPE_2 . METHOD_4 ( storageDomain ) ? new java.lang.String [ ] { STRING_1 , STRING_2 , STRING_6 , STRING_3 , STRING_4 } : new java.lang.String [ ] { STRING_1 , STRING_2 , STRING_6 , STRING_5 } ; )  return TYPE_2 . METHOD_2 ( storageDomain ) ? new java.lang.String [ ] { STRING_1 , STRING_2 , STRING_3 , STRING_4 , STRING_5 } : TYPE_2 . METHOD_3 ( storageDomain ) ? new java.lang.String [ ] { STRING_6 , STRING_4 , STRING_5 } : TYPE_2 . METHOD_4 ( storageDomain ) ? new java.lang.String [ ] { STRING_1 , STRING_2 , STRING_6 , STRING_3 , STRING_4 } : new java.lang.String [ ] { STRING_1 , STRING_2 , STRING_6 , STRING_5 } ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( VAR_1 , false ) )  METHOD_2 ( VAR_1 , false ) (  VAR_2 . METHOD_3 ( ) )  VAR_2 . METHOD_3 ( ) ( TRY TRY ( BLOCK BLOCK (  resource . METHOD_4 ( ) )  resource . METHOD_4 ( ) (  METHOD_5 ( STRING_1 ) )  METHOD_5 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( BLOCK BLOCK (  METHOD_6 ( VAR_3 . METHOD_7 ( ) ) )  METHOD_6 ( VAR_3 . METHOD_7 ( ) ) (  assertEquals ( VAR_3 . METHOD_7 ( ) . getStatus ( ) , INT_1 ) )  assertEquals ( VAR_3 . METHOD_7 ( ) . getStatus ( ) , INT_1 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( TYPE_2 . getParameters ( ) . METHOD_5 ( ) ) ) INIT = TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( TYPE_2 . getParameters ( ) . METHOD_5 ( ) ) ) VAR VAR (  TYPE_2 . METHOD_6 ( ) . METHOD_7 ( METHOD_8 ( VAR_1 ) ) )  TYPE_2 . METHOD_6 ( ) . METHOD_7 ( METHOD_8 ( VAR_1 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.Disk ) TYPE TYPE_1.Disk ( NAME model ) NAME model ( INIT = TYPE_2 . getModel ( 0 ) ) INIT = TYPE_2 . getModel ( 0 ) ) VAR VAR (  model . METHOD_2 ( null ) )  model . METHOD_2 ( null ) (  METHOD_3 ( METHOD_4 ( ) ) )  METHOD_3 ( METHOD_4 ( ) ) (  VAR_1 . METHOD_5 ( ) )  VAR_1 . METHOD_5 ( ) ( TRY TRY ( BLOCK BLOCK (  VAR_2 . add ( model ) )  VAR_2 . add ( model ) (  METHOD_6 ( STRING_1 ) )  METHOD_6 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( BLOCK BLOCK (  METHOD_7 ( VAR_3 , STRING_2 , STRING_3 , STRING_4 ) )  METHOD_7 ( VAR_3 , STRING_2 , STRING_3 , STRING_4 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND METHOD_2 ( ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) , VAR_1 ) ) COND METHOD_2 ( ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) , VAR_1 ) ( THEN THEN (  VAR_2 . METHOD_5 ( STRING_1 , TYPE_1 . METHOD_4 ( ) ) )  VAR_2 . METHOD_5 ( STRING_1 , TYPE_1 . METHOD_4 ( ) ) (  METHOD_6 ( VAR_3 , new TYPE_2 ( TYPE_1 . METHOD_4 ( ) ) , TYPE_3 . METHOD_7 ( TYPE_1 . METHOD_8 ( ) , TYPE_1 . METHOD_9 ( ) ) ) )  METHOD_6 ( VAR_3 , new TYPE_2 ( TYPE_1 . METHOD_4 ( ) ) , TYPE_3 . METHOD_7 ( TYPE_1 . METHOD_8 ( ) , TYPE_1 . METHOD_9 ( ) ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME getStoragePoolId ) NAME getStoragePoolId ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) == null ) COND ( VAR_1 ) == null ( THEN THEN ( IF IF ( COND ( VAR_2 ) != null ) COND ( VAR_2 ) != null ( THEN THEN (  VAR_1 = VAR_2 . getId ( ) )  VAR_1 = VAR_2 . getId ( ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND ( METHOD_1 ( ) ) != null ) COND ( METHOD_1 ( ) ) != null ( THEN THEN (  VAR_1 = METHOD_1 ( ) . METHOD_2 ( ) )  VAR_1 = METHOD_1 ( ) . METHOD_2 ( ) ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.DiskImage ) TYPE org.ovirt.engine.core.common.businessentities.DiskImage ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1.VdcActionParametersBase ) TYPE TYPE_1.VdcActionParametersBase ( NAME parameters ) NAME parameters ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_3 . getParameters ( ) . METHOD_2 ( ) . add ( parameters ) )  TYPE_3 . getParameters ( ) . METHOD_2 ( ) . add ( parameters ) ( IF IF ( COND ! ( result . getSucceeded ( ) ) ) COND ! ( result . getSucceeded ( ) ) ( THEN THEN (  throw new TYPE_4 ( VAR_2 ) ; )  throw new TYPE_4 ( VAR_2 ) ; ) THEN THEN ( ELSE ELSE (  TYPE_5 . METHOD_3 ( VAR_1 ) )  TYPE_5 . METHOD_3 ( VAR_1 ) (  TYPE_3 . METHOD_4 ( ) . METHOD_5 ( result . METHOD_6 ( ) ) )  TYPE_3 . METHOD_4 ( ) . METHOD_5 ( result . METHOD_6 ( ) ) (  VAR_3 . add ( VAR_1 ) )  VAR_3 . add ( VAR_1 ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME vds ) NAME vds ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ) TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( ( vds . METHOD_3 ( ) ) != null ) ? vds . METHOD_3 ( ) . METHOD_4 ( STRING_1 ) : new java.lang.String [ ] { STRING_2 } ) INIT = ( ( vds . METHOD_3 ( ) ) != null ) ? vds . METHOD_3 ( ) . METHOD_4 ( STRING_1 ) : new java.lang.String [ ] { STRING_2 } ) VAR VAR ( IF IF ( COND ( VAR_2 == null ) || ( VAR_2 . isEmpty ( ) ) ) COND ( VAR_2 == null ) || ( VAR_2 . isEmpty ( ) ) ( THEN THEN (  return METHOD_5 ( vds , VAR_3 ) ; )  return METHOD_5 ( vds , VAR_3 ) ; ) THEN THEN ( ELSE ELSE (  return TYPE_1 . METHOD_6 ( VAR_3 ) . METHOD_7 ( VAR_2 ) ; )  return TYPE_1 . METHOD_6 ( VAR_3 ) . METHOD_7 ( VAR_2 ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_2 . METHOD_2 ( VAR_3 ) )  VAR_2 . METHOD_2 ( VAR_3 ) (  VAR_2 . METHOD_3 ( VAR_4 ) )  VAR_2 . METHOD_3 ( VAR_4 ) (  VAR_2 . METHOD_4 ( VAR_1 ) )  VAR_2 . METHOD_4 ( VAR_1 ) (  VAR_2 . METHOD_5 ( VAR_5 ) )  VAR_2 . METHOD_5 ( VAR_5 ) (  VAR_2 . setId ( VAR_6 ) )  VAR_2 . setId ( VAR_6 ) (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , STRING_1 , STRING_2 , VAR_2 , null , null , VAR_3 . Collections < TYPE_3 > METHOD_3 ( ) ) ) ) )  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , STRING_1 , STRING_2 , VAR_2 , null , null , VAR_3 . Collections < TYPE_3 > METHOD_3 ( ) ) ) ) (  METHOD_4 ( cmd , VAR_4 ) )  METHOD_4 ( cmd , VAR_4 ) (  TYPE_4 . METHOD_5 ( cmd . validate ( ) ) )  TYPE_4 . METHOD_5 ( cmd . validate ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  disk . METHOD_2 ( STRING_1 ) )  disk . METHOD_2 ( STRING_1 ) ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = STRING_2 ) INIT = STRING_2 ) VAR VAR (  disk . METHOD_3 ( VAR_1 ) )  disk . METHOD_3 ( VAR_1 ) (  METHOD_4 ( disk , TYPE_2 . METHOD_5 ( TYPE_2 . METHOD_6 ( STRING_1 ) ) , TYPE_2 . METHOD_7 ( TYPE_2 . METHOD_6 ( VAR_1 . METHOD_8 ( 0 , INT_1 ) ) ) , TYPE_2 . METHOD_9 ( INT_2 ) ) )  METHOD_4 ( disk , TYPE_2 . METHOD_5 ( TYPE_2 . METHOD_6 ( STRING_1 ) ) , TYPE_2 . METHOD_7 ( TYPE_2 . METHOD_6 ( VAR_1 . METHOD_8 ( 0 , INT_1 ) ) ) , TYPE_2 . METHOD_9 ( INT_2 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME sender ) NAME sender ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME args ) NAME args ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 ) INIT = VAR_3 ) VAR VAR ( IF IF ( COND VAR_4 . METHOD_2 ( VAR_2 ) ) COND VAR_4 . METHOD_2 ( VAR_2 ) ( THEN THEN (  METHOD_3 ( source , VAR_5 , false , VAR_2 ) )  METHOD_3 ( source , VAR_5 , false , VAR_2 ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND VAR_6 . METHOD_2 ( VAR_2 ) ) COND VAR_6 . METHOD_2 ( VAR_2 ) ( THEN THEN (  METHOD_3 ( source , VAR_7 , true , VAR_2 ) )  METHOD_3 ( source , VAR_7 , true , VAR_2 ) ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  return TYPE_1 . METHOD_2 ( TYPE_2 . getVm ( ) , TYPE_2 . getReturnValue ( ) . METHOD_3 ( ) , TYPE_2 . getVm ( ) . getStoragePoolId ( ) , VAR_1 , METHOD_4 ( ) , METHOD_4 ( ) , METHOD_4 ( ) , METHOD_4 ( ) , true , true , true , null ) ; )  return TYPE_1 . METHOD_2 ( TYPE_2 . getVm ( ) , TYPE_2 . getReturnValue ( ) . METHOD_3 ( ) , TYPE_2 . getVm ( ) . getStoragePoolId ( ) , VAR_1 , METHOD_4 ( ) , METHOD_4 ( ) , METHOD_4 ( ) , METHOD_4 ( ) , true , true , true , null ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( VAR_1 class ) . to ( VAR_2 class ) )  METHOD_2 ( VAR_1 class ) . to ( VAR_2 class ) (  METHOD_2 ( VAR_3 class ) . to ( VAR_4 class ) )  METHOD_2 ( VAR_3 class ) . to ( VAR_4 class ) (  METHOD_2 ( VAR_5 class ) . to ( VAR_6 class ) )  METHOD_2 ( VAR_5 class ) . to ( VAR_6 class ) (  METHOD_2 ( VAR_7 class ) . to ( VAR_8 class ) )  METHOD_2 ( VAR_7 class ) . to ( VAR_8 class ) (  METHOD_2 ( VAR_9 class ) . to ( VAR_10 class ) )  METHOD_2 ( VAR_9 class ) . to ( VAR_10 class ) (  METHOD_2 ( VAR_11 class ) . to ( VAR_12 class ) )  METHOD_2 ( VAR_11 class ) . to ( VAR_12 class ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME log ) NAME log ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2.AuditLogType ) TYPE TYPE_2.AuditLogType ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_2 . METHOD_1 ( ) ) ) COND ! ( VAR_2 . METHOD_1 ( ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_3 ( VAR_1 , VAR_2 ) ) INIT = new TYPE_3 ( VAR_1 , VAR_2 ) ) VAR VAR (  VAR_4 . METHOD_2 ( ) )  VAR_4 . METHOD_2 ( ) ( IF IF ( COND VAR_4 . METHOD_3 ( ) ) COND VAR_4 . METHOD_3 ( ) ( THEN THEN (  METHOD_4 ( VAR_1 , VAR_2 , VAR_3 ) )  METHOD_4 ( VAR_1 , VAR_2 , VAR_3 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( STRING_1 , METHOD_3 ( ) . METHOD_4 ( ) ) )  VAR_1 . METHOD_2 ( STRING_1 , METHOD_3 ( ) . METHOD_4 ( ) ) ( VAR VAR ( TYPE java.lang.Integer ) TYPE java.lang.Integer ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 < java.lang.Integer > getValue ( VAR_4 ) ) INIT = VAR_3 < java.lang.Integer > getValue ( VAR_4 ) ) VAR VAR ( IF IF ( COND VAR_2 > 0 ) COND VAR_2 > 0 ( THEN THEN (  TYPE_1 . getInstance ( ) . METHOD_5 ( this , STRING_2 , new TYPE_2 [ ] { } , new java.lang.Object [ ] { } , VAR_2 , VAR_2 , VAR_5 ) )  TYPE_1 . getInstance ( ) . METHOD_5 ( this , STRING_2 , new TYPE_2 [ ] { } , new java.lang.Object [ ] { } , VAR_2 , VAR_2 , VAR_5 ) (  VAR_1 . METHOD_2 ( STRING_3 , METHOD_3 ( ) . METHOD_4 ( ) ) )  VAR_1 . METHOD_2 ( STRING_3 , METHOD_3 ( ) . METHOD_4 ( ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME storageDomain ) NAME storageDomain ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND storageDomain == null ) COND storageDomain == null ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( storageDomain . METHOD_2 ( ) ) == ( VAR_2 ) ) || ( ( storageDomain . METHOD_2 ( ) ) == ( VAR_3 ) ) ) INIT = ( ( storageDomain . METHOD_2 ( ) ) == ( VAR_2 ) ) || ( ( storageDomain . METHOD_2 ( ) ) == ( VAR_3 ) ) ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_4 ) NAME VAR_4 ( INIT = storageDomain . METHOD_3 ( ) . METHOD_4 ( ) ) INIT = storageDomain . METHOD_3 ( ) . METHOD_4 ( ) ) VAR VAR (  return VAR_4 ? true : VAR_1 ; )  return VAR_4 ? true : VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( ) . put ( VAR_2 . getId ( ) , VAR_2 ) )  VAR_1 . METHOD_2 ( ) . put ( VAR_2 . getId ( ) , VAR_2 ) (  VAR_1 . METHOD_3 ( ) . add ( VAR_2 ) )  VAR_1 . METHOD_3 ( ) . add ( VAR_2 ) (  VAR_3 . METHOD_4 ( VAR_1 , VAR_4 ) )  VAR_3 . METHOD_4 ( VAR_1 , VAR_4 ) ( FOR-EACH FOR-EACH ( TYPE TYPE_1.Disk ) TYPE TYPE_1.Disk ( NAME diskImage ) NAME diskImage ( IN VAR_1 . METHOD_2 ( ) . METHOD_5 ( ) ) IN VAR_1 . METHOD_2 ( ) . METHOD_5 ( ) ( BLOCK BLOCK (  TYPE_2 . assertEquals ( ( ( TYPE_1 . DiskImage ) ( diskImage ) ) . METHOD_6 ( ) , VAR_5 ) )  TYPE_2 . assertEquals ( ( ( TYPE_1 . DiskImage ) ( diskImage ) ) . METHOD_6 ( ) , VAR_5 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> ) RETURN java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ) VAR VAR ( VAR VAR ( TYPE TYPE_1<?extendsorg.ovirt.engine.core.common.businessentities.Disk> ) TYPE TYPE_1<?extendsorg.ovirt.engine.core.common.businessentities.Disk> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  return TYPE_2 . METHOD_2 ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( vm . getId ( ) ) , true , false ) ; )  return TYPE_2 . METHOD_2 ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( vm . getId ( ) ) , true , false ) ; ) THEN THEN ) IF IF (  return TYPE_2 . METHOD_2 ( VAR_1 , true , false ) ; )  return TYPE_2 . METHOD_2 ( VAR_1 , true , false ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  METHOD_3 ( VAR_1 ) )  METHOD_3 ( VAR_1 ) (  METHOD_4 ( 2 ) )  METHOD_4 ( 2 ) (  METHOD_5 ( VAR_2 , VAR_1 ) )  METHOD_5 ( VAR_2 , VAR_1 ) (  VAR_3 . METHOD_6 ( ) )  VAR_3 . METHOD_6 ( ) ( TRY TRY ( BLOCK BLOCK (  resource . get ( ) )  resource . get ( ) (  METHOD_7 ( STRING_1 ) )  METHOD_7 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( BLOCK BLOCK (  METHOD_8 ( VAR_4 ) )  METHOD_8 ( VAR_4 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN (  METHOD_2 ( ) . METHOD_3 ( VAR_1 ) )  METHOD_2 ( ) . METHOD_3 ( VAR_1 ) (  METHOD_2 ( ) . METHOD_4 ( METHOD_2 ( ) . getId ( TYPE_1 . METHOD_5 ( ) , VAR_2 ) , VAR_1 ) )  METHOD_2 ( ) . METHOD_4 ( METHOD_2 ( ) . getId ( TYPE_1 . METHOD_5 ( ) , VAR_2 ) , VAR_1 ) ) THEN THEN ) IF IF (  TYPE_1 . METHOD_6 ( false ) )  TYPE_1 . METHOD_6 ( false ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME returnValue ) NAME returnValue ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  returnValue . METHOD_2 ( true ) )  returnValue . METHOD_2 ( true ) (  org.mockito.Mockito.when ( VAR_1 . METHOD_3 ( org.mockito.Mockito . METHOD_4 ( VAR_2 ) , TYPE_2 . any ( VAR_3 class ) ) ) . thenReturn ( returnValue ) )  org.mockito.Mockito.when ( VAR_1 . METHOD_3 ( org.mockito.Mockito . METHOD_4 ( VAR_2 ) , TYPE_2 . any ( VAR_3 class ) ) ) . thenReturn ( returnValue ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( VAR_2 . Guid class ) ) ) . thenReturn ( TYPE_2 . METHOD_3 ( ) ) )  org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( VAR_2 . Guid class ) ) ) . thenReturn ( TYPE_2 . METHOD_3 ( ) ) (  org.mockito.Mockito.when ( VAR_1 . METHOD_4 ( TYPE_1 . METHOD_5 ( ) ) ) . thenReturn ( TYPE_2 . METHOD_3 ( ) ) )  org.mockito.Mockito.when ( VAR_1 . METHOD_4 ( TYPE_1 . METHOD_5 ( ) ) ) . thenReturn ( TYPE_2 . METHOD_3 ( ) ) (  org.mockito.Mockito.when ( VAR_3 . METHOD_6 ( TYPE_1 . any ( VAR_2 . Guid class ) ) ) . thenReturn ( new java.util.ArrayList < > ( ) ) )  org.mockito.Mockito.when ( VAR_3 . METHOD_6 ( TYPE_1 . any ( VAR_2 . Guid class ) ) ) . thenReturn ( new java.util.ArrayList < > ( ) ) (  METHOD_7 ( ) )  METHOD_7 ( ) (  METHOD_8 ( true ) )  METHOD_8 ( true ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2.AuditLogType ) TYPE TYPE_2.AuditLogType ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2.AuditLogSeverity ) TYPE TYPE_2.AuditLogSeverity ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_2 . METHOD_2 ( ) ) INIT = VAR_2 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_5 ) NAME VAR_5 ( INIT = METHOD_3 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ) INIT = METHOD_3 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ) VAR VAR ( IF IF ( COND VAR_5 == null ) COND VAR_5 == null ( THEN THEN (  VAR_6 . METHOD_4 ( STRING_1 ) )  VAR_6 . METHOD_4 ( STRING_1 ) ) THEN THEN ( ELSE ELSE (  METHOD_5 ( VAR_1 , VAR_5 ) )  METHOD_5 ( VAR_1 , VAR_5 ) (  TYPE_4 . METHOD_6 ( ) . METHOD_7 ( ) . METHOD_8 ( VAR_5 ) )  TYPE_4 . METHOD_6 ( ) . METHOD_7 ( ) . METHOD_8 ( VAR_5 ) (  METHOD_9 ( VAR_4 , METHOD_10 ( VAR_3 , VAR_5 ) ) )  METHOD_9 ( VAR_4 , METHOD_10 ( VAR_3 , VAR_5 ) ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  cmd . getParameters ( ) . METHOD_2 ( VAR_1 ) )  cmd . getParameters ( ) . METHOD_2 ( VAR_1 ) (  cmd . getParameters ( ) . METHOD_3 ( org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) ) )  cmd . getParameters ( ) . METHOD_3 ( org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) ) (  cmd . getParameters ( ) . METHOD_5 ( org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) ) )  cmd . getParameters ( ) . METHOD_5 ( org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) ) (  cmd . METHOD_3 ( cmd . getParameters ( ) . METHOD_6 ( ) ) )  cmd . METHOD_3 ( cmd . getParameters ( ) . METHOD_6 ( ) ) (  cmd . METHOD_7 ( cmd . getParameters ( ) . METHOD_8 ( ) ) )  cmd . METHOD_7 ( cmd . getParameters ( ) . METHOD_8 ( ) ) (  METHOD_9 ( cmd ) )  METHOD_9 ( cmd ) (  TYPE_1 . METHOD_10 ( cmd . validate ( ) ) )  TYPE_1 . METHOD_10 ( cmd . validate ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_1 ) ( result ) ) ) INIT = ( ( TYPE_1 ) ( result ) ) ) VAR VAR ( IF IF ( COND ( VAR_1 . METHOD_2 ( ) ) != null ) COND ( VAR_1 . METHOD_2 ( ) ) != null ( THEN THEN (  METHOD_3 ( VAR_1 . METHOD_2 ( ) ) )  METHOD_3 ( VAR_1 . METHOD_2 ( ) ) ) THEN THEN ( ELSE ELSE (  METHOD_3 ( new java.util.ArrayList < TYPE_2 > ( ) ) )  METHOD_3 ( new java.util.ArrayList < TYPE_2 > ( ) ) ) ELSE ELSE ) IF IF (  METHOD_4 ( ) )  METHOD_4 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME VAR_1 ) NAME VAR_1 ( INIT = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ) INIT = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ) VAR VAR (  VAR_1 . METHOD_2 ( this ) )  VAR_1 . METHOD_2 ( this ) ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( ( TYPE_1 ) ( model ) ) ) INIT = ( ( TYPE_1 ) ( model ) ) ) VAR VAR (  VAR_3 . METHOD_3 ( ( ( java.util.List < org.ovirt.engine.core.common.businessentities.StoragePool > ) ( result ) ) ) )  VAR_3 . METHOD_3 ( ( ( java.util.List < org.ovirt.engine.core.common.businessentities.StoragePool > ) ( result ) ) ) (  METHOD_4 ( ) )  METHOD_4 ( ) ) BLOCK BLOCK ) METHOD METHOD (  VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object result ) { final TYPE_1 VAR_3 = ( ( TYPE_1 ) ( model ) ) ; VAR_3 . METHOD_3 ( ( ( java.util.List < org.ovirt.engine.core.common.businessentities.StoragePool > ) ( result ) ) ) ; METHOD_4 ( ) ; } } )  VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object result ) { final TYPE_1 VAR_3 = ( ( TYPE_1 ) ( model ) ) ; VAR_3 . METHOD_3 ( ( ( java.util.List < org.ovirt.engine.core.common.businessentities.StoragePool > ) ( result ) ) ) ; METHOD_4 ( ) ; } } (  TYPE_2 . METHOD_5 ( VAR_1 ) )  TYPE_2 . METHOD_5 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) == ( VAR_2 . METHOD_2 ( ) ) ) COND ( VAR_1 ) == ( VAR_2 . METHOD_2 ( ) ) ( THEN THEN ( IF IF ( COND ! ( ( ( org.ovirt.engine.core.common.businessentities.DiskImage ) ( VAR_2 ) ) . METHOD_3 ( ) . equals ( TYPE_1 . METHOD_3 ( ) ) ) ) COND ! ( ( ( org.ovirt.engine.core.common.businessentities.DiskImage ) ( VAR_2 ) ) . METHOD_3 ( ) . equals ( TYPE_1 . METHOD_3 ( ) ) ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ( INIT = new org.ovirt.engine.core.common.businessentities.VM ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.VM ( ) ) VAR VAR (  vm . METHOD_2 ( VAR_1 ) )  vm . METHOD_2 ( VAR_1 ) (  vm . METHOD_3 ( ( ( VAR_2 ) + 1 ) ) )  vm . METHOD_3 ( ( ( VAR_2 ) + 1 ) ) (  vm . METHOD_4 ( VAR_3 ) )  vm . METHOD_4 ( VAR_3 ) (  METHOD_5 ( ) )  METHOD_5 ( ) (  TYPE_1 . METHOD_6 ( VAR_4 . METHOD_7 ( vm ) , false , VAR_5 ) )  TYPE_1 . METHOD_6 ( VAR_4 . METHOD_7 ( vm ) , false , VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME host ) NAME host ( INIT = new TYPE_3 ( ) ) INIT = new TYPE_3 ( ) ) VAR VAR (  host . setId ( VAR_2 ) )  host . setId ( VAR_2 ) (  VAR_1 . METHOD_2 ( host ) )  VAR_1 . METHOD_2 ( host ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME params ) NAME params ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  params . METHOD_3 ( map ( VAR_1 , null ) ) )  params . METHOD_3 ( map ( VAR_1 , null ) ) (  return params ; )  return params ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_3 . METHOD_2 ( VAR_1 ) )  VAR_3 . METHOD_2 ( VAR_1 ) (  VAR_3 . METHOD_3 ( VAR_2 ) )  VAR_3 . METHOD_3 ( VAR_2 ) (  VAR_3 . METHOD_4 ( ( ! ( TYPE_3 . getReturnValue ( ) . METHOD_5 ( ) . isEmpty ( ) ) ) ) )  VAR_3 . METHOD_4 ( ( ! ( TYPE_3 . getReturnValue ( ) . METHOD_5 ( ) . isEmpty ( ) ) ) ) (  return METHOD_6 ( VAR_3 , TYPE_3 . METHOD_7 ( ) ) ; )  return METHOD_6 ( VAR_3 , TYPE_3 . METHOD_7 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) )  VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) (  METHOD_3 ( ) )  METHOD_3 ( ) (  METHOD_4 ( ) )  METHOD_4 ( ) ) BLOCK BLOCK ) METHOD METHOD (  TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; } } ) ) )  TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; } } ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) . METHOD_3 ( TYPE_2 . getParameters ( ) . getId ( ) , VAR_2 ) ) INIT = METHOD_2 ( ) . METHOD_3 ( TYPE_2 . getParameters ( ) . getId ( ) , VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME result ) NAME result ( INIT = new java.util.ArrayList < java.lang.String > ( VAR_1 . size ( ) ) ) INIT = new java.util.ArrayList < java.lang.String > ( VAR_1 . size ( ) ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  result . add ( VAR_3 . METHOD_4 ( ) ) )  result . add ( VAR_3 . METHOD_4 ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  TYPE_2 . METHOD_5 ( ) . METHOD_6 ( result ) )  TYPE_2 . METHOD_5 ( ) . METHOD_6 ( result ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) (  dao = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) )  dao = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) (  VAR_2 = dao . get ( VAR_3 ) )  VAR_2 = dao . get ( VAR_3 ) (  VAR_4 = dao . get ( VAR_5 ) )  VAR_4 = dao . get ( VAR_5 ) (  VAR_6 = new TYPE_1 ( ) )  VAR_6 = new TYPE_1 ( ) (  VAR_6 . METHOD_4 ( STRING_1 ) )  VAR_6 . METHOD_4 ( STRING_1 ) (  VAR_6 . METHOD_5 ( STRING_2 ) )  VAR_6 . METHOD_5 ( STRING_2 ) (  VAR_6 . METHOD_6 ( VAR_7 ) )  VAR_6 . METHOD_6 ( VAR_7 ) (  VAR_8 = dao . METHOD_7 ( new org.ovirt.engine.core.compat.Guid ( STRING_3 ) ) )  VAR_8 = dao . METHOD_7 ( new org.ovirt.engine.core.compat.Guid ( STRING_3 ) ) (  VAR_9 = new TYPE_2 ( VAR_10 , VAR_2 . METHOD_8 ( ) ) )  VAR_9 = new TYPE_2 ( VAR_10 , VAR_2 . METHOD_8 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME rs ) NAME rs ) VAR VAR ( VAR VAR ( TYPE TYPE_3<?> ) TYPE TYPE_3<?> ( NAME entity ) NAME entity ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SWITCH SWITCH ( NAME entity . METHOD_2 ( ) ) NAME entity . METHOD_2 ( ) ( CASE VAR_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_5 ( ) ) INIT = new TYPE_5 ( ) ) VAR VAR (  VAR_2 . METHOD_3 ( rs.getString ( STRING_1 ) ) )  VAR_2 . METHOD_3 ( rs.getString ( STRING_1 ) ) (  VAR_2 . METHOD_4 ( TYPE_6 . valueOf ( rs.getString ( STRING_2 ) ) ) )  VAR_2 . METHOD_4 ( TYPE_6 . valueOf ( rs.getString ( STRING_2 ) ) ) (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) CASE VAR_1 ( DEFAULT DEFAULT ( BLOCK BLOCK (  return null ; )  return null ; ) BLOCK BLOCK ) DEFAULT DEFAULT ) SWITCH SWITCH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1.ValidationResult ) RETURN TYPE_1.ValidationResult ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2<TYPE_3.DiskImage> ) TYPE TYPE_2<TYPE_3.DiskImage> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.Map<org.ovirt.engine.core.compat.Guid,org.ovirt.engine.core.compat.Guid> ) TYPE java.util.Map<org.ovirt.engine.core.compat.Guid,org.ovirt.engine.core.compat.Guid> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ! ( params . METHOD_2 ( ) ) ) && ( ! ( params . METHOD_3 ( ) ) ) ) COND ( ! ( params . METHOD_2 ( ) ) ) && ( ! ( params . METHOD_3 ( ) ) ) ( THEN THEN (  return new TYPE_4 ( VAR_1 ) . METHOD_4 ( VAR_2 ) ; )  return new TYPE_4 ( VAR_1 ) . METHOD_4 ( VAR_2 ) ; ) THEN THEN ) IF IF (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( METHOD_3 ( ) ) )  METHOD_2 ( METHOD_3 ( ) ) (  METHOD_4 ( 1 , METHOD_5 ( ) ) )  METHOD_4 ( 1 , METHOD_5 ( ) ) (  METHOD_4 ( VAR_1 , VAR_2 class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { TYPE_1 . toString ( ) } , getEntity ( 0 ) ) )  METHOD_4 ( VAR_1 , VAR_2 class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { TYPE_1 . toString ( ) } , getEntity ( 0 ) ) (  VAR_3 . METHOD_6 ( ) )  VAR_3 . METHOD_6 ( ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME model ) NAME model ( INIT = resource . get ( ) ) INIT = resource . get ( ) ) VAR VAR (  assertEquals ( VAR_4 [ 0 ] . toString ( ) , model . getId ( ) ) )  assertEquals ( VAR_4 [ 0 ] . toString ( ) , model . getId ( ) ) (  METHOD_7 ( model ) )  METHOD_7 ( model ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.EngineMessage ) TYPE TYPE_1.EngineMessage ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 ) INIT = VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_2.ValidationResult ) TYPE TYPE_2.ValidationResult ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_2 . ValidationResult ( VAR_1 , TYPE_3 . METHOD_2 ( VAR_1 , STRING_1 ) , TYPE_3 . METHOD_3 ( VAR_4 , STRING_2 ) ) ) INIT = new TYPE_2 . ValidationResult ( VAR_1 , TYPE_3 . METHOD_2 ( VAR_1 , STRING_1 ) , TYPE_3 . METHOD_3 ( VAR_4 , STRING_2 ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_5 ) NAME VAR_5 ( INIT = METHOD_4 ( ) ) INIT = METHOD_4 ( ) ) VAR VAR (  VAR_5 . METHOD_5 ( TYPE_5 . METHOD_6 ( STRING_1 , STRING_3 ) ) )  VAR_5 . METHOD_5 ( TYPE_5 . METHOD_6 ( STRING_1 , STRING_3 ) ) (  METHOD_7 ( VAR_5 , VAR_6 , VAR_6 , VAR_3 , VAR_3 ) )  METHOD_7 ( VAR_5 , VAR_6 , VAR_6 , VAR_3 , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.Map<java.lang.String,java.lang.Object> ) RETURN java.util.Map<java.lang.String,java.lang.Object> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.Object> ) TYPE java.util.Map<java.lang.String,java.lang.Object> ( NAME map ) NAME map ( INIT = null ) INIT = null ) VAR VAR ( IF IF ( COND ( ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) ) != null ) && ( TYPE_2 . METHOD_3 ( METHOD_4 ( ) . METHOD_5 ( ) ) ) ) COND ( ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) ) != null ) && ( TYPE_2 . METHOD_3 ( METHOD_4 ( ) . METHOD_5 ( ) ) ) ( THEN THEN (  map = new java.util.HashMap < > ( ) )  map = new java.util.HashMap < > ( ) ( IF IF ( COND TYPE_1 . getParameters ( ) . METHOD_2 ( ) . METHOD_6 ( ) ) COND TYPE_1 . getParameters ( ) . METHOD_2 ( ) . METHOD_6 ( ) ( THEN THEN (  map . put ( VAR_1 , METHOD_7 ( ) ) )  map . put ( VAR_1 , METHOD_7 ( ) ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return map ; )  return map ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME source ) NAME source ( INIT = TYPE_1 . METHOD_2 ( STRING_1 , STRING_2 , STRING_3 , STRING_4 ) ) INIT = TYPE_1 . METHOD_2 ( STRING_1 , STRING_2 , STRING_3 , STRING_4 ) ) VAR VAR (  TYPE_2 . assertEquals ( STRING_2 , TYPE_3 . METHOD_3 ( source , STRING_2 , STRING_5 ) ) )  TYPE_2 . assertEquals ( STRING_2 , TYPE_3 . METHOD_3 ( source , STRING_2 , STRING_5 ) ) (  TYPE_2 . assertEquals ( STRING_2 , TYPE_3 . METHOD_3 ( source , STRING_5 , STRING_2 ) ) )  TYPE_2 . assertEquals ( STRING_2 , TYPE_3 . METHOD_3 ( source , STRING_5 , STRING_2 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  host . METHOD_2 ( VAR_1 ) )  host . METHOD_2 ( VAR_1 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = org.mockito.Mockito . METHOD_3 ( VAR_3 ) ) INIT = org.mockito.Mockito . METHOD_3 ( VAR_3 ) ) VAR VAR (  org.mockito.Mockito.doReturn ( VAR_4 ) . when ( VAR_2 ) . METHOD_4 ( ) )  org.mockito.Mockito.doReturn ( VAR_4 ) . when ( VAR_2 ) . METHOD_4 ( ) (  org.mockito.Mockito.when ( VAR_4 . METHOD_5 ( TYPE_2 . METHOD_6 ( VAR_5 ) , TYPE_2 . any ( VAR_6 class ) , TYPE_2 . any ( VAR_7 class ) ) ) . thenReturn ( METHOD_7 ( false ) ) )  org.mockito.Mockito.when ( VAR_4 . METHOD_5 ( TYPE_2 . METHOD_6 ( VAR_5 ) , TYPE_2 . any ( VAR_6 class ) , TYPE_2 . any ( VAR_7 class ) ) ) . thenReturn ( METHOD_7 ( false ) ) (  METHOD_8 ( VAR_2 , VAR_8 ) )  METHOD_8 ( VAR_2 , VAR_8 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<java.lang.String> ) TYPE TYPE_1<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.List<java.lang.Object> ) TYPE java.util.List<java.lang.Object> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2<java.lang.String> ) TYPE TYPE_2<java.lang.String> ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR ( WHILE WHILE ( COND VAR_3 . METHOD_3 ( ) ) COND VAR_3 . METHOD_3 ( ) ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_3 . METHOD_4 ( ) ) INIT = VAR_3 . METHOD_4 ( ) ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = VAR_5 ) INIT = VAR_5 ) VAR VAR ) INIT INIT ( COND i < ( VAR_2 . size ( ) ) ) COND i < ( VAR_2 . size ( ) ) ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK (  TYPE_3 . METHOD_5 ( VAR_4 . METHOD_6 ( METHOD_7 ( i ) ) ) )  TYPE_3 . METHOD_5 ( VAR_4 . METHOD_6 ( METHOD_7 ( i ) ) ) ) BLOCK BLOCK ) FOR FOR ) BLOCK BLOCK ) WHILE WHILE ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME vds ) NAME vds ( INIT = null ) INIT = null ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ( INIT = new org.ovirt.engine.core.common.businessentities.VM ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.VM ( ) ) VAR VAR (  vm . METHOD_2 ( null ) )  vm . METHOD_2 ( null ) ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ( INIT = null ) INIT = null ) VAR VAR (  VAR_1 . METHOD_3 ( vds ) )  VAR_1 . METHOD_3 ( vds ) (  VAR_1 . METHOD_4 ( VAR_2 ) )  VAR_1 . METHOD_4 ( VAR_2 ) (  VAR_1 . METHOD_5 ( vm ) )  VAR_1 . METHOD_5 ( vm ) ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . METHOD_6 ( ) ) INIT = VAR_1 . METHOD_6 ( ) ) VAR VAR (  TYPE_2 . METHOD_7 ( VAR_3 ) )  TYPE_2 . METHOD_7 ( VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN org.ovirt.engine.core.common.businessentities.StoragePool ) RETURN org.ovirt.engine.core.common.businessentities.StoragePool ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( ( ( VAR_1 ) == null ) && ( ( getStoragePoolId ( ) ) != null ) ) && ( ! ( TYPE_1 . equals ( getStoragePoolId ( ) ) ) ) ) COND ( ( ( VAR_1 ) == null ) && ( ( getStoragePoolId ( ) ) != null ) ) && ( ! ( TYPE_1 . equals ( getStoragePoolId ( ) ) ) ) ( THEN THEN (  VAR_1 = METHOD_2 ( ) . get ( getStoragePoolId ( ) . getValue ( ) ) )  VAR_1 = METHOD_2 ( ) . get ( getStoragePoolId ( ) . getValue ( ) ) ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME sender ) NAME sender ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME args ) NAME args ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND args instanceof TYPE_3 ) COND args instanceof TYPE_3 ( THEN THEN ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_3 ) ( args ) ) ) INIT = ( ( TYPE_3 ) ( args ) ) ) VAR VAR ( IF IF ( COND STRING_1 . equals ( VAR_3 ) ) COND STRING_1 . equals ( VAR_3 ) ( THEN THEN (  ( ( TYPE_4 . ViewDef ) ( METHOD_2 ( ) ) ) . METHOD_3 ( ( ( TYPE_5 ) ( model . METHOD_4 ( ) . getSelectedItem ( ) ) ) . METHOD_5 ( ) ) )  ( ( TYPE_4 . ViewDef ) ( METHOD_2 ( ) ) ) . METHOD_3 ( ( ( TYPE_5 ) ( model . METHOD_4 ( ) . getSelectedItem ( ) ) ) . METHOD_5 ( ) ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN org.ovirt.engine.core.common.businessentities.VM ) RETURN org.ovirt.engine.core.common.businessentities.VM ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.RunVmCommand<TYPE_2> ) TYPE TYPE_1.RunVmCommand<TYPE_2> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ( INIT = new org.ovirt.engine.core.common.businessentities.VM ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.VM ( ) ) VAR VAR (  vm . METHOD_2 ( VAR_2 ) )  vm . METHOD_2 ( VAR_2 ) (  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( command ) . METHOD_3 ( ) )  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( command ) . METHOD_3 ( ) (  org.mockito.Mockito.when ( VAR_3 . get ( command . getParameters ( ) . METHOD_4 ( ) ) ) . thenReturn ( vm ) )  org.mockito.Mockito.when ( VAR_3 . get ( command . getParameters ( ) . METHOD_4 ( ) ) ) . thenReturn ( vm ) (  return vm ; )  return vm ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN org.ovirt.engine.core.compat.Guid ) RETURN org.ovirt.engine.core.compat.Guid ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<TYPE_1.DiskImage> ) TYPE java.util.List<TYPE_1.DiskImage> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_2 . equals ( VAR_3 ) ) && ( ( TYPE_2 . getVm ( ) ) != null ) ) COND ( VAR_2 . equals ( VAR_3 ) ) && ( ( TYPE_2 . getVm ( ) ) != null ) ( THEN THEN ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ) TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME storageDomain ) NAME storageDomain ( INIT = TYPE_3 . getInstance ( ) . METHOD_2 ( TYPE_2 . getVm ( ) . getStoragePoolId ( ) , VAR_1 , METHOD_3 ( ) ) ) INIT = TYPE_3 . getInstance ( ) . METHOD_2 ( TYPE_2 . getVm ( ) . getStoragePoolId ( ) , VAR_1 , METHOD_3 ( ) ) ) VAR VAR ( IF IF ( COND storageDomain != null ) COND storageDomain != null ( THEN THEN (  VAR_2 = storageDomain . getId ( ) )  VAR_2 = storageDomain . getId ( ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME getValue ) NAME getValue ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_1 ( VAR_1 . METHOD_2 ( ) ) )  METHOD_1 ( VAR_1 . METHOD_2 ( ) ) ( SWITCH SWITCH ( NAME VAR_1 . METHOD_2 ( ) ) NAME VAR_1 . METHOD_2 ( ) ( CASE VAR_2 ( BLOCK BLOCK (  return METHOD_3 ( ) . METHOD_4 ( ) ; )  return METHOD_3 ( ) . METHOD_4 ( ) ; ) BLOCK BLOCK ) CASE VAR_2 ( CASE VAR_3 ( BLOCK BLOCK (  return METHOD_3 ( ) . METHOD_5 ( ) ; )  return METHOD_3 ( ) . METHOD_5 ( ) ; ) BLOCK BLOCK ) CASE VAR_3 ( CASE VAR_4 ( BLOCK BLOCK (  return METHOD_3 ( ) . METHOD_6 ( ) ; )  return METHOD_3 ( ) . METHOD_6 ( ) ; ) BLOCK BLOCK ) CASE VAR_4 ( CASE VAR_5 ( BLOCK BLOCK (  return METHOD_3 ( ) . METHOD_6 ( ) ; )  return METHOD_3 ( ) . METHOD_6 ( ) ; ) BLOCK BLOCK ) CASE VAR_5 ( CASE VAR_6 ( BLOCK BLOCK (  return METHOD_3 ( ) . METHOD_6 ( ) ; )  return METHOD_3 ( ) . METHOD_6 ( ) ; ) BLOCK BLOCK ) CASE VAR_6 ( CASE VAR_7 ( BLOCK BLOCK (  return METHOD_3 ( ) . METHOD_7 ( ) ; )  return METHOD_3 ( ) . METHOD_7 ( ) ; ) BLOCK BLOCK ) CASE VAR_7 ( DEFAULT DEFAULT ( BLOCK BLOCK (  break ; )  break ; ) BLOCK BLOCK ) DEFAULT DEFAULT ) SWITCH SWITCH (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME nic ) NAME nic ( INIT = METHOD_2 ( STRING_2 , VAR_1 ) ) INIT = METHOD_2 ( STRING_2 , VAR_1 ) ) VAR VAR (  METHOD_3 ( nic ) )  METHOD_3 ( nic ) (  nic . METHOD_4 ( null ) )  nic . METHOD_4 ( null ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_5 ( METHOD_6 ( nic ) ) ) INIT = METHOD_5 ( METHOD_6 ( nic ) ) ) VAR VAR (  METHOD_7 ( VAR_2 ) )  METHOD_7 ( VAR_2 ) (  METHOD_8 ( VAR_2 ) )  METHOD_8 ( VAR_2 ) (  METHOD_9 ( VAR_2 ) )  METHOD_9 ( VAR_2 ) (  METHOD_10 ( VAR_2 , VAR_1 ) )  METHOD_10 ( VAR_2 , VAR_1 ) (  METHOD_11 ( VAR_2 ) )  METHOD_11 ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1.ValidationResult ) RETURN TYPE_1.ValidationResult ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME vds ) NAME vds ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . append ( STRING_1 ) . append ( vds . METHOD_2 ( ) ) . append ( STRING_2 ) . append ( vds . getId ( ) ) . append ( STRING_2 ) )  VAR_1 . append ( STRING_1 ) . append ( vds . METHOD_2 ( ) ) . append ( STRING_2 ) . append ( vds . getId ( ) ) . append ( STRING_2 ) ( FOR-EACH FOR-EACH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME validator ) NAME validator ( IN this . VAR_3 ) IN this . VAR_3 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4.VdcBllMessages ) TYPE TYPE_4.VdcBllMessages ( NAME result ) NAME result ( INIT = validator . validate ( vds , VAR_1 , VAR_2 ) ) INIT = validator . validate ( vds , VAR_1 , VAR_2 ) ) VAR VAR ( IF IF ( COND result != null ) COND result != null ( THEN THEN (  return new TYPE_1 . ValidationResult ( result ) ; )  return new TYPE_1 . ValidationResult ( result ) ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_4 ; )  return VAR_4 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( new TYPE_3 ( TYPE_4 . getParameters ( ) . METHOD_3 ( ) . getId ( ) , TYPE_4 . getParameters ( ) . METHOD_4 ( ) ) , TYPE_4 . getParameters ( ) . METHOD_3 ( ) . METHOD_5 ( ) ) ) INIT = TYPE_2 . METHOD_2 ( new TYPE_3 ( TYPE_4 . getParameters ( ) . METHOD_3 ( ) . getId ( ) , TYPE_4 . getParameters ( ) . METHOD_4 ( ) ) , TYPE_4 . getParameters ( ) . METHOD_3 ( ) . METHOD_5 ( ) ) ) VAR VAR (  TYPE_4 . METHOD_6 ( ) . METHOD_7 ( VAR_1 ) )  TYPE_4 . METHOD_6 ( ) . METHOD_7 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( METHOD_2 ( ) ) != null ) ? METHOD_2 ( ) . size ( ) : 0 ) INIT = ( ( METHOD_2 ( ) ) != null ) ? METHOD_2 ( ) . size ( ) : 0 ) VAR VAR (  METHOD_3 ( ) . METHOD_4 ( ( VAR_1 == 1 ) ) )  METHOD_3 ( ) . METHOD_4 ( ( VAR_1 == 1 ) ) (  METHOD_5 ( ) . METHOD_4 ( ( VAR_1 > 0 ) ) )  METHOD_5 ( ) . METHOD_4 ( ( VAR_1 > 0 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  dao . METHOD_2 ( VAR_1 ) )  dao . METHOD_2 ( VAR_1 ) (  VAR_1 . METHOD_3 ( true ) )  VAR_1 . METHOD_3 ( true ) (  VAR_1 . METHOD_4 ( true ) )  VAR_1 . METHOD_4 ( true ) (  dao . METHOD_5 ( VAR_1 ) )  dao . METHOD_5 ( VAR_1 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ( INIT = dao . get ( VAR_1 . getId ( ) ) ) INIT = dao . get ( VAR_1 . getId ( ) ) ) VAR VAR (  TYPE_2 . METHOD_6 ( result ) )  TYPE_2 . METHOD_6 ( result ) (  TYPE_2 . assertEquals ( VAR_1 . getId ( ) , result . getId ( ) ) )  TYPE_2 . assertEquals ( VAR_1 . getId ( ) , result . getId ( ) ) (  TYPE_2 . assertEquals ( true , result . METHOD_7 ( ) ) )  TYPE_2 . assertEquals ( true , result . METHOD_7 ( ) ) (  TYPE_2 . METHOD_8 ( result . METHOD_9 ( ) ) )  TYPE_2 . METHOD_8 ( result . METHOD_9 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME iface ) NAME iface ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 . METHOD_2 ( iface . getName ( ) ) ) COND VAR_1 . METHOD_2 ( iface . getName ( ) ) ( THEN THEN (  METHOD_3 ( VAR_2 , iface . getName ( ) ) )  METHOD_3 ( VAR_2 , iface . getName ( ) ) (  return false ; )  return false ; ) THEN THEN ) IF IF (  VAR_1 . add ( iface . getName ( ) ) )  VAR_1 . add ( iface . getName ( ) ) (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME rs ) NAME rs ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME entity ) NAME entity ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  entity . METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( rs.getString ( STRING_1 ) ) ) )  entity . METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( rs.getString ( STRING_1 ) ) ) (  entity . METHOD_4 ( TYPE_4 . METHOD_3 ( rs.getString ( STRING_2 ) ) ) )  entity . METHOD_4 ( TYPE_4 . METHOD_3 ( rs.getString ( STRING_2 ) ) ) (  entity . METHOD_5 ( TYPE_5 . METHOD_6 ( rs . METHOD_7 ( STRING_3 ) ) ) )  entity . METHOD_5 ( TYPE_5 . METHOD_6 ( rs . METHOD_7 ( STRING_3 ) ) ) (  entity . METHOD_8 ( TYPE_6 . METHOD_6 ( rs . METHOD_7 ( STRING_4 ) ) ) )  entity . METHOD_8 ( TYPE_6 . METHOD_6 ( rs . METHOD_7 ( STRING_4 ) ) ) (  return entity ; )  return entity ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.ArrayList < TYPE_1 > ( ( ( TYPE_2 < TYPE_1 > ) ( METHOD_2 ( ) . METHOD_3 ( ) ) ) ) ) INIT = new java.util.ArrayList < TYPE_1 > ( ( ( TYPE_2 < TYPE_1 > ) ( METHOD_2 ( ) . METHOD_3 ( ) ) ) ) ) VAR VAR (  VAR_2 . add ( 1 , VAR_3 ) )  VAR_2 . add ( 1 , VAR_3 ) (  METHOD_2 ( ) . setItems ( VAR_2 ) )  METHOD_2 ( ) . setItems ( VAR_2 ) (  METHOD_2 ( ) . setSelectedItem ( VAR_3 ) )  METHOD_2 ( ) . setSelectedItem ( VAR_3 ) ) THEN THEN ) IF IF (  super . METHOD_1 ( VAR_1 ) )  super . METHOD_1 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME vds ) NAME vds ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( ( vds . METHOD_2 ( ) ) != ( VAR_1 ) ) && ( ( vds . METHOD_2 ( ) ) != ( VAR_2 ) ) ) && ( ( vds . METHOD_2 ( ) ) != ( VAR_3 ) ) ) COND ( ( ( vds . METHOD_2 ( ) ) != ( VAR_1 ) ) && ( ( vds . METHOD_2 ( ) ) != ( VAR_2 ) ) ) && ( ( vds . METHOD_2 ( ) ) != ( VAR_3 ) ) ( THEN THEN (  METHOD_3 ( VAR_4 , new TYPE_1 ( vds . getId ( ) , VAR_1 ) ) )  METHOD_3 ( VAR_4 , new TYPE_1 ( vds . getId ( ) , VAR_1 ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( METHOD_3 ( ) ) )  METHOD_2 ( METHOD_3 ( ) ) (  METHOD_4 ( 1 ) )  METHOD_4 ( 1 ) (  VAR_1 . METHOD_5 ( ) )  VAR_1 . METHOD_5 ( ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ( INIT = METHOD_6 ( 1 ) ) INIT = METHOD_6 ( 1 ) ) VAR VAR (  model . setId ( VAR_2 [ 1 ] . toString ( ) ) )  model . setId ( VAR_2 [ 1 ] . toString ( ) ) ( TRY TRY ( BLOCK BLOCK (  resource . METHOD_7 ( model ) )  resource . METHOD_7 ( model ) (  METHOD_8 ( STRING_1 ) )  METHOD_8 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( BLOCK BLOCK (  METHOD_9 ( VAR_3 ) )  METHOD_9 ( VAR_3 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ( NAME nic ) NAME nic ( INIT = METHOD_2 ( STRING_1 , null ) ) INIT = METHOD_2 ( STRING_1 , null ) ) VAR VAR (  METHOD_3 ( nic ) )  METHOD_3 ( nic ) ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = STRING_2 ) INIT = STRING_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_4 ( METHOD_5 ( nic , METHOD_6 ( nic . getName ( ) , INT_1 , VAR_1 ) ) ) ) INIT = METHOD_4 ( METHOD_5 ( nic , METHOD_6 ( nic . getName ( ) , INT_1 , VAR_1 ) ) ) ) VAR VAR (  METHOD_7 ( VAR_2 , VAR_3 , VAR_1 ) )  METHOD_7 ( VAR_2 , VAR_3 , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN org.ovirt.engine.core.common.businessentities.VDS ) RETURN org.ovirt.engine.core.common.businessentities.VDS ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDS> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDS> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 < > ( ) ) INIT = new TYPE_2 < > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME vds ) NAME vds ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  VAR_2 . METHOD_2 ( vds . METHOD_3 ( ) ) )  VAR_2 . METHOD_2 ( vds . METHOD_3 ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME vds ) NAME vds ( INIT = VAR_1 . get ( 0 ) ) INIT = VAR_1 . get ( 0 ) ) VAR VAR (  vds . METHOD_4 ( VAR_2 ) )  vds . METHOD_4 ( VAR_2 ) (  return vds ; )  return vds ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_2 ( ) . get ( VAR_3 ) ) INIT = VAR_2 . METHOD_2 ( ) . get ( VAR_3 ) ) VAR VAR (  TYPE_2 . METHOD_3 ( VAR_1 ) )  TYPE_2 . METHOD_3 ( VAR_1 ) ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ( INIT = VAR_1 . METHOD_4 ( ) ) INIT = VAR_1 . METHOD_4 ( ) ) VAR VAR (  TYPE_2 . METHOD_5 ( name . equals ( VAR_2 . METHOD_6 ( VAR_3 , VAR_4 ) ) ) )  TYPE_2 . METHOD_5 ( name . equals ( VAR_2 . METHOD_6 ( VAR_3 , VAR_4 ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.List<TYPE_1.Network> ) RETURN java.util.List<TYPE_1.Network> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ( INIT = getEntity ( VAR_3 class , VAR_4 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( METHOD_2 ( VAR_1 ) ) , null ) . getStoragePoolId ( ) ) INIT = getEntity ( VAR_3 class , VAR_4 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( METHOD_2 ( VAR_1 ) ) , null ) . getStoragePoolId ( ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.queries.IdQueryParameters ) TYPE org.ovirt.engine.core.common.queries.IdQueryParameters ( NAME params ) NAME params ( INIT = new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_2 ) ) INIT = new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_2 ) ) VAR VAR (  return METHOD_3 ( VAR_5 , params ) ; )  return METHOD_3 ( VAR_5 , params ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN java.util.List<org.ovirt.engine.core.common.businessentities.VM> ) RETURN java.util.List<org.ovirt.engine.core.common.businessentities.VM> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( getParameters ( ) . getStoragePoolId ( ) , getParameters ( ) . METHOD_2 ( ) ) ) INIT = new TYPE_1 ( getParameters ( ) . getStoragePoolId ( ) , getParameters ( ) . METHOD_2 ( ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2.VdcQueryReturnValue ) TYPE TYPE_2.VdcQueryReturnValue ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_3 . METHOD_3 ( ) . METHOD_4 ( VAR_3 , VAR_1 ) ) INIT = TYPE_3 . METHOD_3 ( ) . METHOD_4 ( VAR_3 , VAR_1 ) ) VAR VAR (  return VAR_2 . getSucceeded ( ) ? VAR_4 < java.util.List < org.ovirt.engine.core.common.businessentities.VM > > getReturnValue ( ) : null ; )  return VAR_2 . getSucceeded ( ) ? VAR_4 < java.util.List < org.ovirt.engine.core.common.businessentities.VM > > getReturnValue ( ) : null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND VAR_4 == null ) COND VAR_4 == null ( THEN THEN (  throw new TYPE_2 ( ( STRING_1 + VAR_4 ) ) ; )  throw new TYPE_2 ( ( STRING_1 + VAR_4 ) ) ; ) THEN THEN ) IF IF (  VAR_4 . METHOD_3 ( ) )  VAR_4 . METHOD_3 ( ) ( TRY TRY ( RESOURCES RESOURCES ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_5 ) NAME VAR_5 ( INIT = new TYPE_4 ( VAR_1 ) ) INIT = new TYPE_4 ( VAR_1 ) ) VAR VAR ) RESOURCES RESOURCES ( BLOCK BLOCK (  VAR_5 . METHOD_4 ( VAR_2 . METHOD_5 ( STRING_2 ) ) )  VAR_5 . METHOD_4 ( VAR_2 . METHOD_5 ( STRING_2 ) ) (  VAR_1 . METHOD_6 ( VAR_3 ) )  VAR_1 . METHOD_6 ( VAR_3 ) ) BLOCK BLOCK ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ! ( org.ovirt.engine.ui.frontend.Frontend . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( this ) ) ) COND ! ( org.ovirt.engine.ui.frontend.Frontend . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( this ) ) ( THEN THEN (  org.ovirt.engine.ui.frontend.Frontend . METHOD_2 ( ) . METHOD_5 ( this ) )  org.ovirt.engine.ui.frontend.Frontend . METHOD_2 ( ) . METHOD_5 ( this ) ) THEN THEN ) IF IF ( IF IF ( COND ! ( org.ovirt.engine.ui.frontend.Frontend . METHOD_6 ( ) . METHOD_3 ( ) . METHOD_4 ( this ) ) ) COND ! ( org.ovirt.engine.ui.frontend.Frontend . METHOD_6 ( ) . METHOD_3 ( ) . METHOD_4 ( this ) ) ( THEN THEN (  org.ovirt.engine.ui.frontend.Frontend . METHOD_6 ( ) . METHOD_5 ( this ) )  org.ovirt.engine.ui.frontend.Frontend . METHOD_6 ( ) . METHOD_5 ( this ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.when ( host . METHOD_2 ( ) ) . thenReturn ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) )  org.mockito.Mockito.when ( host . METHOD_2 ( ) ) . thenReturn ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = org.mockito.Mockito . METHOD_4 ( VAR_2 class ) ) INIT = org.mockito.Mockito . METHOD_4 ( VAR_2 class ) ) VAR VAR (  org.mockito.Mockito.when ( VAR_1 . METHOD_5 ( ) ) . thenReturn ( VAR_3 ) )  org.mockito.Mockito.when ( VAR_1 . METHOD_5 ( ) ) . thenReturn ( VAR_3 ) (  org.mockito.Mockito.when ( VAR_4 . get ( TYPE_2 . any ( VAR_5 . Guid class ) ) ) . thenReturn ( VAR_1 ) )  org.mockito.Mockito.when ( VAR_4 . get ( TYPE_2 . any ( VAR_5 . Guid class ) ) ) . thenReturn ( VAR_1 ) (  TYPE_3 . METHOD_6 ( validator . METHOD_7 ( ) , TYPE_4 . METHOD_8 ( VAR_6 ) ) )  TYPE_3 . METHOD_6 ( validator . METHOD_7 ( ) , TYPE_4 . METHOD_8 ( VAR_6 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  command . METHOD_2 ( ) )  command . METHOD_2 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( BLOCK BLOCK (  org.mockito.Mockito . METHOD_3 ( VAR_2 ) . METHOD_4 ( org.mockito.Mockito . METHOD_5 ( VAR_3 ) , TYPE_2 . any ( VAR_4 class ) ) )  org.mockito.Mockito . METHOD_3 ( VAR_2 ) . METHOD_4 ( org.mockito.Mockito . METHOD_5 ( VAR_3 ) , TYPE_2 . any ( VAR_4 class ) ) (  return ; )  return ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  TYPE_3 . METHOD_6 ( ) )  TYPE_3 . METHOD_6 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source != null ? ( ( java.lang.String ) ( source ) ) : STRING_1 ; )  return source != null ? ( ( java.lang.String ) ( source ) ) : STRING_1 ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.String ) ( source ) ) : STRING_1 ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.String ) ( source ) ) : STRING_1 ; } } ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME tempVar ) NAME tempVar ( INIT = new TYPE_1 ( VAR_1 ) ) INIT = new TYPE_1 ( VAR_1 ) ) VAR VAR (  tempVar . METHOD_2 ( TYPE_2 . METHOD_3 ( ) ) )  tempVar . METHOD_2 ( TYPE_2 . METHOD_3 ( ) ) (  TYPE_2 . METHOD_4 ( tempVar , aQuery ) )  TYPE_2 . METHOD_4 ( tempVar , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( ) ) ) . thenReturn ( new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ) )  org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( ) ) ) . thenReturn ( new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ) ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR (  VAR_2 . add ( TYPE_2 . METHOD_2 ( ) ) )  VAR_2 . add ( TYPE_2 . METHOD_2 ( ) ) (  org.mockito.Mockito.when ( VAR_1 . METHOD_3 ( TYPE_3 . METHOD_4 ( ) , TYPE_3 . METHOD_5 ( ) ) ) . thenReturn ( new java.util.ArrayList ( VAR_2 ) ) )  org.mockito.Mockito.when ( VAR_1 . METHOD_3 ( TYPE_3 . METHOD_4 ( ) , TYPE_3 . METHOD_5 ( ) ) ) . thenReturn ( new java.util.ArrayList ( VAR_2 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME context ) NAME context ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ) TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME domain ) NAME domain ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME map ) NAME map ( IN METHOD_3 ( domain ) ) IN METHOD_3 ( domain ) ( BLOCK BLOCK (  context . METHOD_4 ( map , map . METHOD_5 ( ) ) )  context . METHOD_4 ( map , map . METHOD_5 ( ) ) (  METHOD_6 ( map , status ) )  METHOD_6 ( map , status ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  METHOD_2 ( ) . METHOD_7 ( ) )  METHOD_2 ( ) . METHOD_7 ( ) (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( VAR_1 ) )  METHOD_2 ( VAR_1 ) (  log . METHOD_3 ( STRING_1 , TYPE_1 . METHOD_4 ( ) ) )  log . METHOD_3 ( STRING_1 , TYPE_1 . METHOD_4 ( ) ) (  VAR_2 . METHOD_5 ( TYPE_1 . METHOD_4 ( ) ) )  VAR_2 . METHOD_5 ( TYPE_1 . METHOD_4 ( ) ) (  TYPE_1 . METHOD_6 ( ) )  TYPE_1 . METHOD_6 ( ) (  log . error ( STRING_2 , TYPE_1 . getParameters ( ) . METHOD_7 ( ) , TYPE_1 . METHOD_4 ( ) ) )  log . error ( STRING_2 , TYPE_1 . getParameters ( ) . METHOD_7 ( ) , TYPE_1 . METHOD_4 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.when ( cluster . getStoragePoolId ( ) ) . thenReturn ( org.mockito.Mockito . METHOD_2 ( VAR_1 . Guid class ) ) )  org.mockito.Mockito.when ( cluster . getStoragePoolId ( ) ) . thenReturn ( org.mockito.Mockito . METHOD_2 ( VAR_1 . Guid class ) ) ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StoragePool ) TYPE org.ovirt.engine.core.common.businessentities.StoragePool ( NAME VAR_2 ) NAME VAR_2 ( INIT = org.mockito.Mockito . METHOD_2 ( VAR_3 . StoragePool class ) ) INIT = org.mockito.Mockito . METHOD_2 ( VAR_3 . StoragePool class ) ) VAR VAR (  org.mockito.Mockito.when ( VAR_4 . get ( TYPE_1 . any ( ) ) ) . thenReturn ( VAR_2 ) )  org.mockito.Mockito.when ( VAR_4 . get ( TYPE_1 . any ( ) ) ) . thenReturn ( VAR_2 ) (  validator = new TYPE_2 ( VAR_5 , VAR_4 , cluster , VAR_6 ) )  validator = new TYPE_2 ( VAR_5 , VAR_4 , cluster , VAR_6 ) (  TYPE_3 . METHOD_3 ( validator . METHOD_4 ( ) , TYPE_4 . METHOD_5 ( ) ) )  TYPE_3 . METHOD_3 ( validator . METHOD_4 ( ) , TYPE_4 . METHOD_5 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ( INIT = ( ( TYPE_1 ) ( getWindow ( ) ) ) ) INIT = ( ( TYPE_1 ) ( getWindow ( ) ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_2 ) ( model . getSelectedItem ( ) ) ) ) INIT = ( ( TYPE_2 ) ( model . getSelectedItem ( ) ) ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME host ) NAME host ( INIT = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( model . METHOD_2 ( ) . getSelectedItem ( ) ) ) ) INIT = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( model . METHOD_2 ( ) . getSelectedItem ( ) ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.ArrayList<java.lang.String> ) TYPE java.util.ArrayList<java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_3 ( ) ) INIT = VAR_1 . METHOD_3 ( ) ) VAR VAR ( IF IF ( COND VAR_2 . isEmpty ( ) ) COND VAR_2 . isEmpty ( ) ( THEN THEN (  METHOD_4 ( ) )  METHOD_4 ( ) ) THEN THEN ( ELSE ELSE (  METHOD_5 ( VAR_2 ) )  METHOD_5 ( VAR_2 ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1.ValidationResult ) RETURN TYPE_1.ValidationResult ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . getId ( ) ) INIT = VAR_1 . getId ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . getName ( ) ) INIT = VAR_1 . getName ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3.EngineMessage ) TYPE TYPE_3.EngineMessage ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_5 ) INIT = VAR_5 ) VAR VAR (  return VAR_6 . METHOD_2 ( VAR_1 . getName ( ) , VAR_2 , VAR_3 , VAR_4 , VAR_7 ) ; )  return VAR_6 . METHOD_2 ( VAR_1 . getName ( ) , VAR_2 , VAR_3 , VAR_4 , VAR_7 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ( INIT = false ) INIT = false ) VAR VAR ( VAR VAR ( TYPE java.util.ArrayList<TYPE_1> ) TYPE java.util.ArrayList<TYPE_1> ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( java.util.ArrayList < TYPE_1 > ) ( returnValue ) ) ) INIT = ( ( java.util.ArrayList < TYPE_1 > ) ( returnValue ) ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK ( IF IF ( COND ( VAR_3 . METHOD_1 ( ) ) == ( VAR_4 ) ) COND ( VAR_3 . METHOD_1 ( ) ) == ( VAR_4 ) ( THEN THEN (  VAR_1 = true )  VAR_1 = true (  break ; )  break ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  VAR_5 . METHOD_2 ( VAR_1 ) )  VAR_5 . METHOD_2 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND VAR_2 == ( VAR_3 ) ) COND VAR_2 == ( VAR_3 ) ( THEN THEN (  METHOD_3 ( VAR_1 ) )  METHOD_3 ( VAR_1 ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND VAR_2 == ( VAR_4 ) ) COND VAR_2 == ( VAR_4 ) ( THEN THEN (  METHOD_4 ( VAR_1 . METHOD_5 ( ) ) )  METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ) THEN THEN ( ELSE ELSE (  VAR_5 . error ( STRING_1 , VAR_1 . METHOD_6 ( ) , VAR_1 . METHOD_5 ( ) ) )  VAR_5 . error ( STRING_1 , VAR_1 . METHOD_6 ( ) , VAR_1 . METHOD_5 ( ) ) ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME result ) NAME result ( INIT = true ) INIT = true ) VAR VAR ( IF IF ( COND ( TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) . length ( ) ) > ( VAR_1 < java.lang.Integer > METHOD_4 ( VAR_2 ) ) ) COND ( TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) . length ( ) ) > ( VAR_1 < java.lang.Integer > METHOD_4 ( VAR_2 ) ) ( THEN THEN (  addCanDoActionMessage ( VAR_3 ) )  addCanDoActionMessage ( VAR_3 ) (  result = false )  result = false ) THEN THEN ) IF IF (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_1 ) ( model ) ) ) INIT = ( ( TYPE_1 ) ( model ) ) ) VAR VAR ( IF IF ( COND result != null ) COND result != null ( THEN THEN ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ( INIT = ( ( org.ovirt.engine.core.common.businessentities.VM ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( result ) ) . getReturnValue ( ) ) ) ) INIT = ( ( org.ovirt.engine.core.common.businessentities.VM ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( result ) ) . getReturnValue ( ) ) ) ) VAR VAR ( IF IF ( COND vm != null ) COND vm != null ( THEN THEN (  VAR_1 . METHOD_2 ( vm ) )  VAR_1 . METHOD_2 ( vm ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME list ) NAME list ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_2.Version ) TYPE TYPE_2.Version ( NAME VAR_2 ) NAME VAR_2 ( IN METHOD_1 ( ) ) IN METHOD_1 ( ) ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( ) . add ( METHOD_3 ( VAR_2 ) ) )  VAR_1 . METHOD_2 ( ) . add ( METHOD_3 ( VAR_2 ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  VAR_1 . METHOD_4 ( METHOD_5 ( ) ) )  VAR_1 . METHOD_4 ( METHOD_5 ( ) ) (  VAR_1 . METHOD_6 ( METHOD_7 ( ) ) )  VAR_1 . METHOD_6 ( METHOD_7 ( ) ) (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ( INIT = model . getModel ( ) . METHOD_2 ( ) ) INIT = model . getModel ( ) . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( VAR_1 instanceof TYPE_1 ) ? ( ( TYPE_1 ) ( VAR_1 ) ) : null ) INIT = ( VAR_1 instanceof TYPE_1 ) ? ( ( TYPE_1 ) ( VAR_1 ) ) : null ) VAR VAR ( IF IF ( COND VAR_3 . METHOD_3 ( ) . getValue ( ) ) COND VAR_3 . METHOD_3 ( ) . getValue ( ) ( THEN THEN (  VAR_2 . METHOD_4 ( VAR_4 ) )  VAR_2 . METHOD_4 ( VAR_4 ) ) THEN THEN ( ELSE ELSE (  VAR_2 . METHOD_4 ( VAR_5 ) )  VAR_2 . METHOD_4 ( VAR_5 ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( VAR_1 , new TYPE_1 . DiskImage ( ) ) )  METHOD_2 ( VAR_1 , new TYPE_1 . DiskImage ( ) ) (  METHOD_3 ( ) )  METHOD_3 ( ) (  METHOD_4 ( ) )  METHOD_4 ( ) (  METHOD_5 ( false ) )  METHOD_5 ( false ) (  METHOD_6 ( ) )  METHOD_6 ( ) (  METHOD_7 ( VAR_2 ) )  METHOD_7 ( VAR_2 ) (  org.mockito.Mockito.doReturn ( TYPE_2 . METHOD_8 ( ) ) . when ( command ) . METHOD_9 ( ) )  org.mockito.Mockito.doReturn ( TYPE_2 . METHOD_8 ( ) ) . when ( command ) . METHOD_9 ( ) (  TYPE_3 . METHOD_10 ( command ) )  TYPE_3 . METHOD_10 ( command ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Boolean ) RETURN java.lang.Boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Integer ) TYPE java.lang.Integer ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Version ) TYPE org.ovirt.engine.core.compat.Version ( NAME version ) NAME version ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<java.lang.Integer,org.ovirt.engine.core.compat.Version> ) TYPE TYPE_1<java.lang.Integer,org.ovirt.engine.core.compat.Version> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 < java.lang.Integer , org.ovirt.engine.core.compat . Version > ( VAR_1 , version ) ) INIT = new TYPE_1 < java.lang.Integer , org.ovirt.engine.core.compat . Version > ( VAR_1 , version ) ) VAR VAR ( IF IF ( COND METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ) COND METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ( THEN THEN (  return METHOD_2 ( ) . get ( VAR_2 ) ; )  return METHOD_2 ( ) . get ( VAR_2 ) ; ) THEN THEN ) IF IF (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.when ( VAR_1 . getName ( ) ) . thenReturn ( VAR_2 ) )  org.mockito.Mockito.when ( VAR_1 . getName ( ) ) . thenReturn ( VAR_2 ) (  org.mockito.Mockito.when ( VAR_1 . getId ( ) ) . thenReturn ( VAR_3 ) )  org.mockito.Mockito.when ( VAR_1 . getId ( ) ) . thenReturn ( VAR_3 ) (  org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( VAR_4 ) )  org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( VAR_4 ) (  org.mockito.Mockito.when ( VAR_1 . getStoragePoolId ( ) ) . thenReturn ( VAR_5 ) )  org.mockito.Mockito.when ( VAR_1 . getStoragePoolId ( ) ) . thenReturn ( VAR_5 ) (  VAR_6 = new TYPE_1 ( VAR_1 ) )  VAR_6 = new TYPE_1 ( VAR_1 ) (  org.mockito.Mockito.when ( VAR_7 . METHOD_3 ( ) ) . thenReturn ( VAR_8 ) )  org.mockito.Mockito.when ( VAR_7 . METHOD_3 ( ) ) . thenReturn ( VAR_8 ) (  TYPE_2 . METHOD_4 ( VAR_7 ) )  TYPE_2 . METHOD_4 ( VAR_7 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND source == null ) COND source == null ( THEN THEN (  return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ; )  return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ; ) THEN THEN ) IF IF (  return source ; )  return source ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ; } return source ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ; } return source ; } } ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME params ) NAME params ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  params . METHOD_2 ( VAR_1 ) )  params . METHOD_2 ( VAR_1 ) (  params . METHOD_3 ( VAR_2 ) )  params . METHOD_3 ( VAR_2 ) (  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_3 , params , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_3 , params , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_2 ( ) . METHOD_3 ( cluster ) ) INIT = VAR_2 . METHOD_2 ( ) . METHOD_3 ( cluster ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . get ( 0 ) ) INIT = VAR_1 . get ( 0 ) ) VAR VAR (  TYPE_2 . METHOD_4 ( VAR_3 ) )  TYPE_2 . METHOD_4 ( VAR_3 ) (  VAR_4 . METHOD_5 ( VAR_3 ) )  VAR_4 . METHOD_5 ( VAR_3 ) (  VAR_4 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_6 ( ) ) )  VAR_4 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_6 ( ) ) (  dao . METHOD_7 ( VAR_4 ) )  dao . METHOD_7 ( VAR_4 ) ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.network.Network ) TYPE org.ovirt.engine.core.common.businessentities.network.Network ( NAME result ) NAME result ( INIT = dao . METHOD_8 ( VAR_4 . METHOD_9 ( ) ) ) INIT = dao . METHOD_8 ( VAR_4 . METHOD_9 ( ) ) ) VAR VAR (  TYPE_2 . METHOD_4 ( result ) )  TYPE_2 . METHOD_4 ( result ) (  TYPE_2 . assertEquals ( VAR_4 , result ) )  TYPE_2 . assertEquals ( VAR_4 , result ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.Object> ) TYPE java.util.Map<java.lang.String,java.lang.Object> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_2 . put ( VAR_3 , VAR_1 . METHOD_2 ( ) ) )  VAR_2 . put ( VAR_3 , VAR_1 . METHOD_2 ( ) ) (  VAR_2 . put ( VAR_4 , VAR_1 . METHOD_3 ( ) ) )  VAR_2 . put ( VAR_4 , VAR_1 . METHOD_3 ( ) ) (  VAR_2 . put ( VAR_5 , STRING_1 ) )  VAR_2 . put ( VAR_5 , STRING_1 ) (  VAR_2 . put ( VAR_6 , VAR_7 ) )  VAR_2 . put ( VAR_6 , VAR_7 ) (  VAR_2 . put ( VAR_8 , TYPE_2 . toString ( ) ) )  VAR_2 . put ( VAR_8 , TYPE_2 . toString ( ) ) (  VAR_2 . put ( VAR_9 , TYPE_3 . toString ( ) ) )  VAR_2 . put ( VAR_9 , TYPE_3 . toString ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.lang.String [ ] { STRING_1 , STRING_2 , STRING_3 } ) INIT = new java.lang.String [ ] { STRING_1 , STRING_2 , STRING_3 } ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME result ) NAME result ( INIT = VAR_1 . METHOD_2 ( VAR_2 , STRING_4 ) ) INIT = VAR_1 . METHOD_2 ( VAR_2 , STRING_4 ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = result . METHOD_3 ( ) ) INIT = result . METHOD_3 ( ) ) VAR VAR (  TYPE_3 . assertEquals ( VAR_3 , INT_1 ) )  TYPE_3 . assertEquals ( VAR_3 , INT_1 ) ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME VAR_4 ) NAME VAR_4 ( INIT = result . METHOD_4 ( ) ) INIT = result . METHOD_4 ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_5 ) NAME VAR_5 ( IN VAR_4 ) IN VAR_4 ( BLOCK BLOCK (  VAR_6 . METHOD_5 ( VAR_5 ) )  VAR_6 . METHOD_5 ( VAR_5 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN org.ovirt.engine.core.compat.Guid ) RETURN org.ovirt.engine.core.compat.Guid ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( ( ( VAR_1 ) != null ) && ( VAR_1 . equals ( VAR_2 ) ) ) && ( ( METHOD_2 ( ) ) != null ) ) COND ( ( ( VAR_1 ) != null ) && ( VAR_1 . equals ( VAR_2 ) ) ) && ( ( METHOD_2 ( ) ) != null ) ( THEN THEN (  VAR_1 = METHOD_2 ( ) . METHOD_1 ( ) )  VAR_1 = METHOD_2 ( ) . METHOD_1 ( ) ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<org.ovirt.engine.core.common.businessentities.VDS> ) RETURN java.util.List<org.ovirt.engine.core.common.businessentities.VDS> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME status ) NAME status ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return METHOD_2 ( ) . METHOD_3 ( STRING_1 , VAR_2 . instance , METHOD_4 ( ) . addValue ( STRING_2 , VAR_1 ) . addValue ( STRING_3 , status . getValue ( ) ) ) ; )  return METHOD_2 ( ) . METHOD_3 ( STRING_1 , VAR_2 . instance , METHOD_4 ( ) . addValue ( STRING_2 , VAR_1 ) . addValue ( STRING_3 , status . getValue ( ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source != null ? ( ( java.lang.String ) ( source ) ) : STRING_1 ; )  return source != null ? ( ( java.lang.String ) ( source ) ) : STRING_1 ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.String ) ( source ) ) : STRING_1 ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.String ) ( source ) ) : STRING_1 ; } } (  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new TYPE_1 ( VAR_1 ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new TYPE_1 ( VAR_1 ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( 1 ) )  METHOD_2 ( 1 ) (  METHOD_3 ( METHOD_4 ( VAR_4 , VAR_5 class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_6 } , VAR_1 , VAR_2 ) ) )  METHOD_3 ( METHOD_4 ( VAR_4 , VAR_5 class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_6 } , VAR_1 , VAR_2 ) ) ( TRY TRY ( BLOCK BLOCK (  resource . METHOD_5 ( TYPE_1 . getModel ( 0 ) ) )  resource . METHOD_5 ( TYPE_1 . getModel ( 0 ) ) (  METHOD_6 ( STRING_2 ) )  METHOD_6 ( STRING_2 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_7 ) NAME VAR_7 ( BLOCK BLOCK (  METHOD_7 ( VAR_7 , VAR_3 ) )  METHOD_7 ( VAR_7 , VAR_3 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<?extendsTYPE_2> ) TYPE TYPE_1<?extendsTYPE_2> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME sender ) NAME sender ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME args ) NAME args ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<TYPE_3> ) TYPE java.util.ArrayList<TYPE_3> ( NAME VAR_2 ) NAME VAR_2 ( INIT = getModel ( ) . METHOD_2 ( ) ) INIT = getModel ( ) . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND ( VAR_2 != null ) && ( ! ( VAR_2 . isEmpty ( ) ) ) ) COND ( VAR_2 != null ) && ( ! ( VAR_2 . isEmpty ( ) ) ) ( THEN THEN (  VAR_3 . METHOD_3 ( VAR_2 . get ( 0 ) , true ) )  VAR_3 . METHOD_3 ( VAR_2 . get ( 0 ) , true ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  cmd = org.mockito.Mockito . METHOD_2 ( METHOD_3 ( VAR_1 , 0 ) ) )  cmd = org.mockito.Mockito . METHOD_2 ( METHOD_3 ( VAR_1 , 0 ) ) (  METHOD_4 ( cmd ) )  METHOD_4 ( cmd ) (  METHOD_5 ( true , null ) )  METHOD_5 ( true , null ) (  TYPE_1 . METHOD_6 ( cmd . validate ( ) ) )  TYPE_1 . METHOD_6 ( cmd . validate ( ) ) (  cmd . METHOD_1 ( ) )  cmd . METHOD_1 ( ) (  org.mockito.Mockito . METHOD_7 ( cmd ) . METHOD_8 ( ) )  org.mockito.Mockito . METHOD_7 ( cmd ) . METHOD_8 ( ) (  org.mockito.Mockito . METHOD_7 ( cmd ) . METHOD_9 ( VAR_2 ) )  org.mockito.Mockito . METHOD_7 ( cmd ) . METHOD_9 ( VAR_2 ) (  org.mockito.Mockito . METHOD_7 ( cmd ) . METHOD_10 ( VAR_2 ) )  org.mockito.Mockito . METHOD_7 ( cmd ) . METHOD_10 ( VAR_2 ) (  TYPE_1 . assertEquals ( cmd . METHOD_11 ( ) , VAR_3 ) )  TYPE_1 . assertEquals ( cmd . METHOD_11 ( ) , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ( ( java.lang.Integer ) ( TYPE_2 . getValue ( VAR_3 ) ) ) ) ) INIT = METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ( ( java.lang.Integer ) ( TYPE_2 . getValue ( VAR_3 ) ) ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR ( IF IF ( COND ! ( ( VAR_2 . METHOD_5 ( VAR_4 ) ) || ( VAR_2 . equals ( VAR_4 ) ) ) ) COND ! ( ( VAR_2 . METHOD_5 ( VAR_4 ) ) || ( VAR_2 . equals ( VAR_4 ) ) ) ( THEN THEN (  VAR_1 . add ( TYPE_3 . name ( ) ) )  VAR_1 . add ( TYPE_3 . name ( ) ) (  return false ; )  return false ; ) THEN THEN ( ELSE ELSE (  return true ; )  return true ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_2 . METHOD_2 ( ) ) COND VAR_2 . METHOD_2 ( ) ( THEN THEN (  return VAR_3 ; )  return VAR_3 ; ) THEN THEN ( ELSE ELSE ( IF IF ( COND VAR_2 . METHOD_3 ( ) ) COND VAR_2 . METHOD_3 ( ) ( THEN THEN ( SWITCH SWITCH ( NAME VAR_1 ) NAME VAR_1 ( CASE VAR_4 ( BLOCK BLOCK (  return VAR_5 ; )  return VAR_5 ; ) BLOCK BLOCK ) CASE VAR_4 ( CASE VAR_6 ( BLOCK BLOCK (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) CASE VAR_6 ( DEFAULT DEFAULT ( BLOCK BLOCK (  return VAR_7 ; )  return VAR_7 ; ) BLOCK BLOCK ) DEFAULT DEFAULT ) SWITCH SWITCH ) THEN THEN ( ELSE ELSE (  return VAR_7 ; )  return VAR_7 ; ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( 2 ) )  METHOD_2 ( 2 ) (  METHOD_3 ( VAR_1 , VAR_2 class , new java.lang.String [ ] { STRING_1 , STRING_2 } , new java.lang.Object [ ] { true , false } , METHOD_4 ( ) ) )  METHOD_3 ( VAR_1 , VAR_2 class , new java.lang.String [ ] { STRING_1 , STRING_2 } , new java.lang.Object [ ] { true , false } , METHOD_4 ( ) ) (  METHOD_5 ( METHOD_6 ( VAR_3 , VAR_4 class , new java.lang.String [ ] { STRING_3 } , new java.lang.Object [ ] { VAR_5 [ 0 ] } , true , true ) ) )  METHOD_5 ( METHOD_6 ( VAR_3 , VAR_4 class , new java.lang.String [ ] { STRING_3 } , new java.lang.Object [ ] { VAR_5 [ 0 ] } , true , true ) ) (  METHOD_7 ( resource . METHOD_8 ( ) ) )  METHOD_7 ( resource . METHOD_8 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( METHOD_3 ( ) ) )  METHOD_2 ( METHOD_3 ( ) ) (  METHOD_4 ( null ) )  METHOD_4 ( null ) (  VAR_1 . METHOD_5 ( ) )  VAR_1 . METHOD_5 ( ) ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_6 ( VAR_3 ) ) INIT = METHOD_6 ( VAR_3 ) ) VAR VAR (  resource . METHOD_7 ( VAR_2 ) )  resource . METHOD_7 ( VAR_2 ) (  METHOD_8 ( STRING_1 ) )  METHOD_8 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( BLOCK BLOCK (  METHOD_9 ( VAR_4 ) )  METHOD_9 ( VAR_4 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( 1 ) )  METHOD_2 ( 1 ) (  METHOD_3 ( METHOD_4 ( VAR_1 , VAR_2 class , new java.lang.String [ ] { STRING_1 , STRING_2 } , new java.lang.Object [ ] { VAR_3 [ 0 ] , VAR_3 [ 1 ] } ) ) )  METHOD_3 ( METHOD_4 ( VAR_1 , VAR_2 class , new java.lang.String [ ] { STRING_1 , STRING_2 } , new java.lang.Object [ ] { VAR_3 [ 0 ] , VAR_3 [ 1 ] } ) ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME action ) NAME action ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  action . METHOD_5 ( TYPE_2 . value ( ) ) )  action . METHOD_5 ( TYPE_2 . value ( ) ) (  METHOD_6 ( resource . METHOD_7 ( action ) ) )  METHOD_6 ( resource . METHOD_7 ( action ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.Network> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.Network> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.network.Network ) TYPE org.ovirt.engine.core.common.businessentities.network.Network ( NAME a ) NAME a ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( a == null ) ? null : a . METHOD_2 ( ) ) INIT = ( a == null ) ? null : a . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND TYPE_1 . METHOD_3 ( VAR_2 , METHOD_4 ( ) . METHOD_5 ( ) ) ) COND TYPE_1 . METHOD_3 ( VAR_2 , METHOD_4 ( ) . METHOD_5 ( ) ) ( THEN THEN (  METHOD_6 ( ) . setSelectedItem ( a ) )  METHOD_6 ( ) . setSelectedItem ( a ) (  return ; )  return ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ( IF IF ( COND ( METHOD_4 ( ) . METHOD_5 ( ) ) == null ) COND ( METHOD_4 ( ) . METHOD_5 ( ) ) == null ( THEN THEN (  METHOD_6 ( ) . setSelectedItem ( null ) )  METHOD_6 ( ) . setSelectedItem ( null ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( 1 , INT_1 , INT_2 , 2 , 1 ) ) INIT = METHOD_2 ( 1 , INT_1 , INT_2 , 2 , 1 ) ) VAR VAR (  TYPE_2 . assertEquals ( 1 , VAR_1 . size ( ) ) )  TYPE_2 . assertEquals ( 1 , VAR_1 . size ( ) ) (  TYPE_2 . METHOD_3 ( VAR_1 . METHOD_4 ( VAR_2 . METHOD_5 ( nic ) ) ) )  TYPE_2 . METHOD_3 ( VAR_1 . METHOD_4 ( VAR_2 . METHOD_5 ( nic ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME status ) NAME status ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME type ) NAME type ( INIT = null ) INIT = null ) VAR VAR ( IF IF ( COND ( type = VAR_4 . get ( VAR_1 ) ) != null ) COND ( type = VAR_4 . get ( VAR_1 ) ) != null ( THEN THEN (  return TYPE_3 . METHOD_1 ( type , VAR_2 , status , VAR_3 ) ; )  return TYPE_3 . METHOD_1 ( type , VAR_2 , status , VAR_3 ) ; ) THEN THEN ( ELSE ELSE (  throw new TYPE_4 ( java.lang.String . METHOD_2 ( STRING_1 , type ) ) ; )  throw new TYPE_4 ( java.lang.String . METHOD_2 ( STRING_1 , type ) ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.doReturn ( METHOD_2 ( true , 0 ) ) . when ( VAR_1 ) . METHOD_3 ( TYPE_1 . METHOD_4 ( VAR_2 ) , TYPE_1 . any ( VAR_3 class ) ) )  org.mockito.Mockito.doReturn ( METHOD_2 ( true , 0 ) ) . when ( VAR_1 ) . METHOD_3 ( TYPE_1 . METHOD_4 ( VAR_2 ) , TYPE_1 . any ( VAR_3 class ) ) (  VAR_1 . METHOD_5 ( ) )  VAR_1 . METHOD_5 ( ) (  org.mockito.Mockito . METHOD_6 ( VAR_4 , org.mockito.Mockito . METHOD_7 ( 0 ) ) . METHOD_8 ( TYPE_1 . any ( VAR_5 class ) ) )  org.mockito.Mockito . METHOD_6 ( VAR_4 , org.mockito.Mockito . METHOD_7 ( 0 ) ) . METHOD_8 ( TYPE_1 . any ( VAR_5 class ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ( INIT = ( ( TYPE_1 ) ( target ) ) ) INIT = ( ( TYPE_1 ) ( target ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> ( NAME VAR_1 ) NAME VAR_1 ( INIT = model . METHOD_1 ( ( ( java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( returnValue ) ) ) ) INIT = model . METHOD_1 ( ( ( java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( returnValue ) ) ) ) VAR VAR (  model . METHOD_2 ( ) . setItems ( VAR_1 ) )  model . METHOD_2 ( ) . setItems ( VAR_1 ) (  model . METHOD_2 ( ) . METHOD_3 ( VAR_1 . isEmpty ( ) ) )  model . METHOD_2 ( ) . METHOD_3 ( VAR_1 . isEmpty ( ) ) (  model . METHOD_4 ( ) )  model . METHOD_4 ( ) (  METHOD_5 ( ) )  METHOD_5 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return ( ( ( ( TYPE_1 ) ( VAR_1 ) ) . METHOD_2 ( ) . getName ( ) ) + STRING_1 ) + ( ( ( TYPE_1 ) ( VAR_1 ) ) . METHOD_3 ( ) . METHOD_4 ( ) ) ; )  return ( ( ( ( TYPE_1 ) ( VAR_1 ) ) . METHOD_2 ( ) . getName ( ) ) + STRING_1 ) + ( ( ( TYPE_1 ) ( VAR_1 ) ) . METHOD_3 ( ) . METHOD_4 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME vmId ) NAME vmId ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_2 . METHOD_2 ( VAR_1 ) ) INIT = TYPE_2 . METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND METHOD_3 ( VAR_3 ) ) COND METHOD_3 ( VAR_3 ) ( THEN THEN ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.Object> ) TYPE java.util.Map<java.lang.String,java.lang.Object> ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_1 . METHOD_4 ( ) ) INIT = VAR_1 . METHOD_4 ( ) ) VAR VAR (  VAR_5 . METHOD_5 ( ( VAR_2 + STRING_2 ) , TYPE_3 . METHOD_6 ( VAR_3 ) , vmId , VAR_4 ) )  VAR_5 . METHOD_5 ( ( VAR_2 + STRING_2 ) , TYPE_3 . METHOD_6 ( VAR_3 ) , vmId , VAR_4 ) ) THEN THEN ( ELSE ELSE (  VAR_5 . METHOD_5 ( VAR_2 , TYPE_3 . METHOD_6 ( VAR_3 ) , vmId ) )  VAR_5 . METHOD_5 ( VAR_2 , TYPE_3 . METHOD_6 ( VAR_3 ) , vmId ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source != null ? new java.util.ArrayList < java.lang.String > ( ( ( java.util.ArrayList < java.lang.String > ) ( source ) ) ) : new java.util.ArrayList < java.lang.String > ( ) ; )  return source != null ? new java.util.ArrayList < java.lang.String > ( ( ( java.util.ArrayList < java.lang.String > ) ( source ) ) ) : new java.util.ArrayList < java.lang.String > ( ) ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? new java.util.ArrayList < java.lang.String > ( ( ( java.util.ArrayList < java.lang.String > ) ( source ) ) ) : new java.util.ArrayList < java.lang.String > ( ) ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? new java.util.ArrayList < java.lang.String > ( ( ( java.util.ArrayList < java.lang.String > ) ( source ) ) ) : new java.util.ArrayList < java.lang.String > ( ) ; } } (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_2 ( VAR_1 , new TYPE_1 ( ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_2 ( VAR_1 , new TYPE_1 ( ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) (  dao = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) )  dao = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) (  VAR_2 = dao . get ( new org.ovirt.engine.core.compat.Guid ( STRING_1 ) ) )  VAR_2 = dao . get ( new org.ovirt.engine.core.compat.Guid ( STRING_1 ) ) (  VAR_3 = new TYPE_1 ( ) )  VAR_3 = new TYPE_1 ( ) (  VAR_3 . METHOD_4 ( STRING_2 ) )  VAR_3 . METHOD_4 ( STRING_2 ) (  VAR_3 . METHOD_5 ( STRING_3 ) )  VAR_3 . METHOD_5 ( STRING_3 ) (  VAR_3 . METHOD_6 ( VAR_4 ) )  VAR_3 . METHOD_6 ( VAR_4 ) (  VAR_3 . METHOD_7 ( false ) )  VAR_3 . METHOD_7 ( false ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_3 . METHOD_2 ( ) ) INIT = TYPE_3 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_3 . METHOD_3 ( ) ) INIT = VAR_3 . METHOD_3 ( ) ) VAR VAR (  VAR_4 . METHOD_4 ( VAR_2 ) )  VAR_4 . METHOD_4 ( VAR_2 ) ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_4 . METHOD_5 ( VAR_1 , VAR_6 , VAR_7 ) ) INIT = VAR_4 . METHOD_5 ( VAR_1 , VAR_6 , VAR_7 ) ) VAR VAR (  return new TYPE_1 ( ( ( TYPE_5 ) ( VAR_5 ) ) ) ; )  return new TYPE_1 ( ( ( TYPE_5 ) ( VAR_5 ) ) ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_7 ( ( STRING_1 + VAR_1 ) , e ) ; )  throw new TYPE_7 ( ( STRING_1 + VAR_1 ) , e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  cmd . getParameters ( ) . METHOD_2 ( VAR_1 ) )  cmd . getParameters ( ) . METHOD_2 ( VAR_1 ) (  cmd . getParameters ( ) . METHOD_3 ( org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) ) )  cmd . getParameters ( ) . METHOD_3 ( org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) ) (  cmd . METHOD_3 ( cmd . getParameters ( ) . METHOD_5 ( ) ) )  cmd . METHOD_3 ( cmd . getParameters ( ) . METHOD_5 ( ) ) (  METHOD_6 ( cmd ) )  METHOD_6 ( cmd ) (  TYPE_1 . METHOD_7 ( cmd . validate ( ) ) )  TYPE_1 . METHOD_7 ( cmd . validate ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.Map<java.lang.String,java.lang.Object> ) RETURN java.util.Map<java.lang.String,java.lang.Object> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.Object> ) TYPE java.util.Map<java.lang.String,java.lang.Object> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.HashMap < > ( ) ) INIT = new java.util.HashMap < > ( ) ) VAR VAR (  VAR_2 . put ( VAR_3 , VAR_1 . METHOD_2 ( ) ) )  VAR_2 . put ( VAR_3 , VAR_1 . METHOD_2 ( ) ) (  VAR_2 . put ( VAR_4 , ( TYPE_2 . isEmpty ( VAR_1 . METHOD_3 ( ) ) ? STRING_1 : VAR_1 . METHOD_3 ( ) ) ) )  VAR_2 . put ( VAR_4 , ( TYPE_2 . isEmpty ( VAR_1 . METHOD_3 ( ) ) ? STRING_1 : VAR_1 . METHOD_3 ( ) ) ) (  VAR_2 . put ( VAR_5 , VAR_1 . METHOD_4 ( ) ) )  VAR_2 . put ( VAR_5 , VAR_1 . METHOD_4 ( ) ) (  VAR_2 . put ( VAR_6 , STRING_2 ) )  VAR_2 . put ( VAR_6 , STRING_2 ) (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME nic ) NAME nic ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) . METHOD_3 ( ) . list ( ) . METHOD_4 ( ) . METHOD_5 ( ) ) INIT = METHOD_2 ( ) . METHOD_3 ( ) . list ( ) . METHOD_4 ( ) . METHOD_5 ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( IF IF ( COND ( TYPE_3 . equals ( VAR_2 . METHOD_6 ( ) ) ) && ( nic . getId ( ) . toString ( ) . equals ( VAR_2 . METHOD_7 ( ) ) ) ) COND ( TYPE_3 . equals ( VAR_2 . METHOD_6 ( ) ) ) && ( nic . getId ( ) . toString ( ) . equals ( VAR_2 . METHOD_7 ( ) ) ) ( THEN THEN (  return VAR_2 ; )  return VAR_2 ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VM> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VM> ( NAME vms ) NAME vms ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.core.common.businessentities.VM>> ) TYPE java.util.List<org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.core.common.businessentities.VM>> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR (  TYPE_1 . METHOD_3 ( vms , new TYPE_2 ( ) ) )  TYPE_1 . METHOD_3 ( vms , new TYPE_2 ( ) ) ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ( IN vms ) IN vms ( BLOCK BLOCK (  VAR_1 . add ( new org.ovirt.engine.ui.uicommonweb.models.EntityModel ( vm ) ) )  VAR_1 . add ( new org.ovirt.engine.ui.uicommonweb.models.EntityModel ( vm ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  VAR_2 . setItems ( VAR_1 ) )  VAR_2 . setItems ( VAR_1 ) (  METHOD_4 ( ) )  METHOD_4 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.Network ) TYPE TYPE_1.Network ( NAME network ) NAME network ( INIT = new TYPE_1 . Network ( ) ) INIT = new TYPE_1 . Network ( ) ) VAR VAR (  network . setId ( VAR_1 ) )  network . setId ( VAR_1 ) (  network . METHOD_2 ( new TYPE_2 ( ) ) )  network . METHOD_2 ( new TYPE_2 ( ) ) (  network . METHOD_3 ( ) . setId ( VAR_2 ) )  network . METHOD_3 ( ) . setId ( VAR_2 ) (  TYPE_3 . METHOD_4 ( METHOD_5 ( ) , network ) )  TYPE_3 . METHOD_4 ( METHOD_5 ( ) , network ) (  assertEquals ( VAR_3 , network . METHOD_6 ( ) ) )  assertEquals ( VAR_3 , network . METHOD_6 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . getInstance ( ) . METHOD_2 ( METHOD_3 ( ) . getStoragePoolId ( ) , getParameters ( ) . METHOD_4 ( ) ) )  TYPE_1 . getInstance ( ) . METHOD_2 ( METHOD_3 ( ) . getStoragePoolId ( ) , getParameters ( ) . METHOD_4 ( ) ) (  METHOD_5 ( ) . METHOD_6 ( getParameters ( ) . METHOD_4 ( ) ) )  METHOD_5 ( ) . METHOD_6 ( getParameters ( ) . METHOD_4 ( ) ) (  getReturnValue ( ) . METHOD_7 ( true ) )  getReturnValue ( ) . METHOD_7 ( true ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  org.mockito.Mockito.when ( VAR_2 . get ( TYPE_2 . any ( VAR_3 . Guid class ) ) ) . thenReturn ( VAR_1 ) )  org.mockito.Mockito.when ( VAR_2 . get ( TYPE_2 . any ( VAR_3 . Guid class ) ) ) . thenReturn ( VAR_1 ) (  org.mockito.Mockito.when ( VAR_4 . get ( VAR_5 . METHOD_3 ( ) ) ) . thenReturn ( VAR_5 ) )  org.mockito.Mockito.when ( VAR_4 . get ( VAR_5 . METHOD_3 ( ) ) ) . thenReturn ( VAR_5 ) (  org.mockito.Mockito.when ( VAR_4 . get ( VAR_6 . METHOD_3 ( ) ) ) . thenReturn ( VAR_6 ) )  org.mockito.Mockito.when ( VAR_4 . get ( VAR_6 . METHOD_3 ( ) ) ) . thenReturn ( VAR_6 ) (  TYPE_3 . METHOD_4 ( validator . METHOD_5 ( VAR_1 . getId ( ) ) , TYPE_4 . METHOD_6 ( VAR_7 ) ) )  TYPE_3 . METHOD_4 ( validator . METHOD_5 ( VAR_1 . getId ( ) ) , TYPE_4 . METHOD_6 ( VAR_7 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( VAR_1 , VAR_2 , null ) )  METHOD_2 ( VAR_1 , VAR_2 , null ) (  METHOD_2 ( VAR_1 , VAR_3 , VAR_4 ) )  METHOD_2 ( VAR_1 , VAR_3 , VAR_4 ) ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.compat.Guid> ) TYPE java.util.List<org.ovirt.engine.core.compat.Guid> ( NAME VAR_5 ) NAME VAR_5 ( INIT = dao . METHOD_3 ( false ) ) INIT = dao . METHOD_3 ( false ) ) VAR VAR (  TYPE_1 . METHOD_4 ( VAR_5 . METHOD_5 ( VAR_6 ) ) )  TYPE_1 . METHOD_4 ( VAR_5 . METHOD_5 ( VAR_6 ) ) (  TYPE_1 . METHOD_4 ( VAR_5 . METHOD_5 ( VAR_7 ) ) )  TYPE_1 . METHOD_4 ( VAR_5 . METHOD_5 ( VAR_7 ) ) (  TYPE_1 . METHOD_4 ( VAR_5 . METHOD_5 ( VAR_1 ) ) )  TYPE_1 . METHOD_4 ( VAR_5 . METHOD_5 ( VAR_1 ) ) (  TYPE_1 . METHOD_6 ( VAR_5 . METHOD_5 ( VAR_8 ) ) )  TYPE_1 . METHOD_6 ( VAR_5 . METHOD_5 ( VAR_8 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME validate ) NAME validate ( BLOCK BLOCK ( IF IF ( COND ! ( super . validate ( ) ) ) COND ! ( super . validate ( ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( IF IF ( COND METHOD_1 ( ) . METHOD_2 ( ) . METHOD_3 ( ) ) COND METHOD_1 ( ) . METHOD_2 ( ) . METHOD_3 ( ) ( THEN THEN (  return METHOD_4 ( VAR_1 ) ; )  return METHOD_4 ( VAR_1 ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  return validate ( VAR_2 . METHOD_5 ( getParameters ( ) . METHOD_6 ( ) , METHOD_1 ( ) , getParameters ( ) . METHOD_7 ( ) , true ) ) ; )  return validate ( VAR_2 . METHOD_5 ( getParameters ( ) . METHOD_6 ( ) , METHOD_1 ( ) , getParameters ( ) . METHOD_7 ( ) , true ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND source != null ) COND source != null ( THEN THEN ( VAR VAR ( TYPE java.util.ArrayList<TYPE_1> ) TYPE java.util.ArrayList<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) INIT = ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.ArrayList<TYPE_1> ) TYPE java.util.ArrayList<TYPE_1> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.ArrayList < TYPE_1 > ( ) ) INIT = new java.util.ArrayList < TYPE_1 > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME storageDomain ) NAME storageDomain ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( IF IF ( COND ( storageDomain . METHOD_1 ( ) ) == ( VAR_3 ) ) COND ( storageDomain . METHOD_1 ( ) ) == ( VAR_3 ) ( THEN THEN (  VAR_2 . add ( storageDomain ) )  VAR_2 . add ( storageDomain ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_2 ; )  return VAR_2 ; ) THEN THEN ) IF IF (  return new java.util.ArrayList < TYPE_1 > ( ) ; )  return new java.util.ArrayList < TYPE_1 > ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( VAR_1 , true ) ) INIT = METHOD_2 ( VAR_1 , true ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_2 ( VAR_1 , true ) ) INIT = METHOD_2 ( VAR_1 , true ) ) VAR VAR (  VAR_2 . METHOD_3 ( VAR_3 ) )  VAR_2 . METHOD_3 ( VAR_3 ) (  VAR_2 . METHOD_4 ( ) )  VAR_2 . METHOD_4 ( ) (  METHOD_5 ( false , VAR_2 . METHOD_6 ( ) , 1 , VAR_1 ) )  METHOD_5 ( false , VAR_2 . METHOD_6 ( ) , 1 , VAR_1 ) (  METHOD_5 ( true , VAR_2 . METHOD_6 ( ) , 2 , 1 , VAR_1 ) )  METHOD_5 ( true , VAR_2 . METHOD_6 ( ) , 2 , 1 , VAR_1 ) (  METHOD_7 ( TYPE_2 . METHOD_8 ( VAR_2 , VAR_3 ) , 1 ) )  METHOD_7 ( TYPE_2 . METHOD_8 ( VAR_2 , VAR_3 ) , 1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) (  dao = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) )  dao = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) (  VAR_2 = METHOD_2 ( VAR_1 . METHOD_4 ( ) ) )  VAR_2 = METHOD_2 ( VAR_1 . METHOD_4 ( ) ) (  VAR_3 = VAR_2 . get ( new org.ovirt.engine.core.compat.Guid ( STRING_1 ) ) )  VAR_3 = VAR_2 . get ( new org.ovirt.engine.core.compat.Guid ( STRING_1 ) ) (  VAR_4 = dao . get ( new TYPE_1 ( VAR_5 , VAR_3 . getId ( ) ) ) )  VAR_4 = dao . get ( new TYPE_1 ( VAR_5 , VAR_3 . getId ( ) ) ) (  VAR_6 = new TYPE_2 ( VAR_7 , VAR_3 . getId ( ) , VAR_8 ) )  VAR_6 = new TYPE_2 ( VAR_7 , VAR_3 . getId ( ) , VAR_8 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.Object> ) TYPE java.util.Map<java.lang.String,java.lang.Object> ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . get ( VAR_1 . METHOD_2 ( ) ) ) INIT = VAR_3 . get ( VAR_1 . METHOD_2 ( ) ) ) VAR VAR ( IF IF ( COND VAR_2 == null ) COND VAR_2 == null ( THEN THEN (  VAR_2 = new java.util.HashMap < > ( ) )  VAR_2 = new java.util.HashMap < > ( ) (  VAR_3 . put ( VAR_1 . METHOD_2 ( ) , VAR_2 ) )  VAR_3 . put ( VAR_1 . METHOD_2 ( ) , VAR_2 ) ) THEN THEN ) IF IF (  VAR_2 . put ( VAR_1 . METHOD_3 ( ) , TYPE_2 . getValue ( VAR_1 ) ) )  VAR_2 . put ( VAR_1 . METHOD_3 ( ) , TYPE_2 . getValue ( VAR_1 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME source ) NAME source ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( source == null ) || ( ( source . METHOD_2 ( ) . length ( ) ) == 0 ) ) COND ( source == null ) || ( ( source . METHOD_2 ( ) . length ( ) ) == 0 ) ( THEN THEN (  return STRING_1 ; )  return STRING_1 ; ) THEN THEN ( ELSE ELSE ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . getInstance ( STRING_2 ) ) INIT = TYPE_2 . getInstance ( STRING_2 ) ) VAR VAR (  VAR_1 . METHOD_3 ( VAR_2 , TYPE_3 . METHOD_4 ( ) . METHOD_5 ( ) ) )  VAR_1 . METHOD_3 ( VAR_2 , TYPE_3 . METHOD_4 ( ) . METHOD_5 ( ) ) (  return new java.lang.String ( VAR_1 . METHOD_6 ( new TYPE_4 ( ) . METHOD_7 ( source ) ) , TYPE_5 . METHOD_8 ( STRING_3 ) ) ; )  return new java.lang.String ( VAR_1 . METHOD_6 ( new TYPE_4 ( ) . METHOD_7 ( source ) ) , TYPE_5 . METHOD_8 ( STRING_3 ) ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND source != null ) COND source != null ( THEN THEN ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDSGroup> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDSGroup> ( NAME list ) NAME list ( INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( source ) ) ) INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( source ) ) ) VAR VAR (  TYPE_1 . METHOD_2 ( list , new TYPE_2 ( ) ) )  TYPE_1 . METHOD_2 ( list , new TYPE_2 ( ) ) (  return list ; )  return list ; ) THEN THEN ) IF IF (  return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ( ) ; )  return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ( ) ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > list = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( source ) ) ; TYPE_1 . METHOD_2 ( list , new TYPE_2 ( ) ) ; return list ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ( ) ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > list = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( source ) ) ; TYPE_1 . METHOD_2 ( list , new TYPE_2 ( ) ) ; return list ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ( ) ; } } (  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_1 , new TYPE_3 ( ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_1 , new TYPE_3 ( ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  command = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , new TYPE_3 ( TYPE_4 . METHOD_4 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ) , null , null ) ) ) )  command = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , new TYPE_3 ( TYPE_4 . METHOD_4 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ) , null , null ) ) ) (  org.mockito.Mockito.doReturn ( vds ) . when ( command ) . METHOD_5 ( ) )  org.mockito.Mockito.doReturn ( vds ) . when ( command ) . METHOD_5 ( ) (  org.mockito.Mockito.doReturn ( null ) . when ( command ) . METHOD_6 ( ) )  org.mockito.Mockito.doReturn ( null ) . when ( command ) . METHOD_6 ( ) (  TYPE_5 . METHOD_7 ( command . METHOD_8 ( ) ) )  TYPE_5 . METHOD_7 ( command . METHOD_8 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.List<TYPE_1.DiskImage> ) RETURN java.util.List<TYPE_1.DiskImage> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1.DiskImage> ) TYPE java.util.List<TYPE_1.DiskImage> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.ArrayList < > ( VAR_1 ) ) INIT = new java.util.ArrayList < > ( VAR_1 ) ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND VAR_3 < VAR_1 ) COND VAR_3 < VAR_1 ( UPDATE UPDATE (  VAR_3 ++ )  VAR_3 ++ ) UPDATE UPDATE ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.DiskImage ) TYPE TYPE_1.DiskImage ( NAME image ) NAME image ( INIT = METHOD_2 ( VAR_4 ) ) INIT = METHOD_2 ( VAR_4 ) ) VAR VAR (  VAR_2 . add ( image ) )  VAR_2 . add ( image ) ) BLOCK BLOCK ) FOR FOR (  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( cmd ) . METHOD_3 ( ) )  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( cmd ) . METHOD_3 ( ) (  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( cmd ) . METHOD_4 ( ) )  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( cmd ) . METHOD_4 ( ) (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( getWindow ( ) ) != null ) COND ( getWindow ( ) ) != null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( this ) ) INIT = new TYPE_1 ( this ) ) VAR VAR (  VAR_1 . setEntity ( ( ( TYPE_2 < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface , org.ovirt.engine.core.common.businessentities.VDS > ) ( getSelectedItem ( ) ) ) . METHOD_2 ( ) ) )  VAR_1 . setEntity ( ( ( TYPE_2 < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface , org.ovirt.engine.core.common.businessentities.VDS > ) ( getSelectedItem ( ) ) ) . METHOD_2 ( ) ) (  METHOD_3 ( VAR_1 ) )  METHOD_3 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) RETURN org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.Network ) TYPE org.ovirt.engine.core.common.businessentities.Network ( NAME network ) NAME network ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME nic ) NAME nic ( INIT = METHOD_2 ( VAR_1 , network . METHOD_3 ( ) , network . getName ( ) ) ) INIT = METHOD_2 ( VAR_1 , network . METHOD_3 ( ) , network . getName ( ) ) ) VAR VAR (  nic . METHOD_4 ( network . METHOD_5 ( ) ) )  nic . METHOD_4 ( network . METHOD_5 ( ) ) (  nic . METHOD_6 ( network . METHOD_7 ( ) ) )  nic . METHOD_6 ( network . METHOD_7 ( ) ) (  return nic ; )  return nic ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME list ) NAME list ( BLOCK BLOCK ( IF IF ( COND TYPE_2 . METHOD_1 ( METHOD_2 ( ) , VAR_1 ) ) COND TYPE_2 . METHOD_1 ( METHOD_2 ( ) , VAR_1 ) ( THEN THEN (  return METHOD_3 ( METHOD_4 ( VAR_2 , new TYPE_3 ( VAR_3 , METHOD_5 ( VAR_3 ) ) ) ) ; )  return METHOD_3 ( METHOD_4 ( VAR_2 , new TYPE_3 ( VAR_3 , METHOD_5 ( VAR_3 ) ) ) ) ; ) THEN THEN ( ELSE ELSE (  return METHOD_3 ( METHOD_4 ( VAR_4 , new TYPE_4 ( this . VAR_3 ) ) ) ; )  return METHOD_3 ( METHOD_4 ( VAR_4 , new TYPE_4 ( this . VAR_3 ) ) ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 = new TYPE_1 < org.ovirt.engine.core.common.businessentities.VDSGroup > ( VAR_2 , METHOD_2 ( ) , METHOD_3 ( ) , VAR_3 , VAR_4 ) )  VAR_1 = new TYPE_1 < org.ovirt.engine.core.common.businessentities.VDSGroup > ( VAR_2 , METHOD_2 ( ) , METHOD_3 ( ) , VAR_3 , VAR_4 ) ( VAR VAR ( TYPE TYPE_2<org.ovirt.engine.core.common.businessentities.VDSGroup> ) TYPE TYPE_2<org.ovirt.engine.core.common.businessentities.VDSGroup> ( NAME VAR_5 ) NAME VAR_5 ( INIT = new TYPE_2 < org.ovirt.engine.core.common.businessentities.VDSGroup > ( ) { public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities.VDSGroup object ) { return object . getName ( ) ; } } ) INIT = new TYPE_2 < org.ovirt.engine.core.common.businessentities.VDSGroup > ( ) { public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities.VDSGroup object ) { return object . getName ( ) ; } } ) VAR VAR ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME getValue ) NAME getValue ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ) TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ( NAME object ) NAME object ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return object . getName ( ) ; )  return object . getName ( ) ; ) BLOCK BLOCK ) METHOD METHOD (  VAR_1 . addColumn ( VAR_5 , VAR_6 . METHOD_4 ( ) ) )  VAR_1 . addColumn ( VAR_5 , VAR_6 . METHOD_4 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  return TYPE_1 . METHOD_2 ( TYPE_2 . getReturnValue ( ) . METHOD_3 ( ) , TYPE_2 . getVm ( ) . getStoragePoolId ( ) , VAR_1 , false , true , true , true , true , true , TYPE_2 . METHOD_4 ( ) . METHOD_5 ( TYPE_2 . METHOD_6 ( ) ) ) ; )  return TYPE_1 . METHOD_2 ( TYPE_2 . getReturnValue ( ) . METHOD_3 ( ) , TYPE_2 . getVm ( ) . getStoragePoolId ( ) , VAR_1 , false , true , true , true , true , true , TYPE_2 . METHOD_4 ( ) . METHOD_5 ( TYPE_2 . METHOD_6 ( ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  ( ( TYPE_2 ) ( model ) ) . setItems ( ( ( TYPE_3 ) ( returnValue ) ) ) )  ( ( TYPE_2 ) ( model ) ) . setItems ( ( ( TYPE_3 ) ( returnValue ) ) ) ) BLOCK BLOCK ) METHOD METHOD (  TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { ( ( TYPE_2 ) ( model ) ) . setItems ( ( ( TYPE_3 ) ( returnValue ) ) ) ; } } ) , METHOD_3 ( ) ) )  TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { ( ( TYPE_2 ) ( model ) ) . setItems ( ( ( TYPE_3 ) ( returnValue ) ) ) ; } } ) , METHOD_3 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1.ValidationResult ) RETURN TYPE_1.ValidationResult ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( ( vm . METHOD_2 ( ) ) == ( VAR_1 ) ) || ( ( vm . METHOD_2 ( ) ) == ( VAR_2 ) ) ) COND ( ( vm . METHOD_2 ( ) ) == ( VAR_1 ) ) || ( ( vm . METHOD_2 ( ) ) == ( VAR_2 ) ) ( THEN THEN (  return new TYPE_1 . ValidationResult ( VAR_3 ) ; )  return new TYPE_1 . ValidationResult ( VAR_3 ) ; ) THEN THEN ) IF IF (  return VAR_4 ; )  return VAR_4 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected static ) MODIFIER protected static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.AuditLogType ) TYPE TYPE_1.AuditLogType ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . name ( ) ) INIT = VAR_1 . name ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  return VAR_3 . getString ( VAR_2 ) ; )  return VAR_3 . getString ( VAR_2 ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_4 . error ( STRING_1 , VAR_2 , TYPE_2 . METHOD_2 ( ) ) )  VAR_4 . error ( STRING_1 , VAR_2 , TYPE_2 . METHOD_2 ( ) ) (  return null ; )  return null ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME result ) NAME result ( INIT = METHOD_2 ( VAR_4 , new TYPE_3 ( VAR_1 . getId ( ) , VAR_2 , VAR_3 , null , false ) ) ) INIT = METHOD_2 ( VAR_4 , new TYPE_3 ( VAR_1 . getId ( ) , VAR_2 , VAR_3 , null , false ) ) ) VAR VAR (  return result . getSucceeded ( ) ? ( ( TYPE_1 ) ( result . getReturnValue ( ) ) ) : null ; )  return result . getSucceeded ( ) ? ( ( TYPE_1 ) ( result . getReturnValue ( ) ) ) : null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<TYPE_2> ) RETURN TYPE_1<TYPE_2> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_5 ( VAR_1 ) ) INIT = new TYPE_5 ( VAR_1 ) ) VAR VAR (  this . VAR_3 . METHOD_2 ( VAR_1 , VAR_2 ) )  this . VAR_3 . METHOD_2 ( VAR_1 , VAR_2 ) (  this . METHOD_3 ( ) . METHOD_4 ( TYPE_6 . METHOD_5 ( VAR_1 . METHOD_6 ( ) ) ) )  this . METHOD_3 ( ) . METHOD_4 ( TYPE_6 . METHOD_5 ( VAR_1 . METHOD_6 ( ) ) ) (  METHOD_7 ( VAR_1 , VAR_2 ) )  METHOD_7 ( VAR_1 , VAR_2 ) (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( ( STRING_1 + ( METHOD_3 ( ) . METHOD_4 ( ) ) ) ) )  VAR_1 . METHOD_2 ( ( STRING_1 + ( METHOD_3 ( ) . METHOD_4 ( ) ) ) ) (  TYPE_1 . getInstance ( ) . METHOD_5 ( this , STRING_2 , new TYPE_2 < ? > [ ] { } , new java.lang.Object [ ] { } , VAR_2 < java.lang.String > METHOD_6 ( VAR_3 ) ) )  TYPE_1 . getInstance ( ) . METHOD_5 ( this , STRING_2 , new TYPE_2 < ? > [ ] { } , new java.lang.Object [ ] { } , VAR_2 < java.lang.String > METHOD_6 ( VAR_3 ) ) (  VAR_1 . METHOD_2 ( ( STRING_3 + ( METHOD_3 ( ) . METHOD_4 ( ) ) ) ) )  VAR_1 . METHOD_2 ( ( STRING_3 + ( METHOD_3 ( ) . METHOD_4 ( ) ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( STRING_1 ) )  VAR_1 . METHOD_2 ( STRING_1 ) (  VAR_2 = new TYPE_1 ( ) )  VAR_2 = new TYPE_1 ( ) (  VAR_2 . METHOD_3 ( VAR_3 ) )  VAR_2 . METHOD_3 ( VAR_3 ) (  TYPE_2 . getInstance ( ) . METHOD_4 ( this , VAR_4 , new TYPE_3 [ ] { } , new java.lang.Object [ ] { } , 0 , VAR_5 < java.lang.Integer > METHOD_5 ( VAR_6 ) , VAR_7 ) )  TYPE_2 . getInstance ( ) . METHOD_4 ( this , VAR_4 , new TYPE_3 [ ] { } , new java.lang.Object [ ] { } , 0 , VAR_5 < java.lang.Integer > METHOD_5 ( VAR_6 ) , VAR_7 ) (  VAR_1 . METHOD_2 ( STRING_2 ) )  VAR_1 . METHOD_2 ( STRING_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND VAR_1 < java.lang.Boolean > getValue ( VAR_2 ) ) COND VAR_1 < java.lang.Boolean > getValue ( VAR_2 ) ( THEN THEN (  VAR_3 . METHOD_2 ( STRING_1 ) )  VAR_3 . METHOD_2 ( STRING_1 ) ( VAR VAR ( TYPE java.lang.Integer ) TYPE java.lang.Integer ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_1 < java.lang.Integer > getValue ( VAR_5 ) ) INIT = VAR_1 < java.lang.Integer > getValue ( VAR_5 ) ) VAR VAR (  TYPE_1 . get ( VAR_6 class ) . METHOD_3 ( this , STRING_2 , new TYPE_2 [ ] { } , new java.lang.Object [ ] { } , VAR_4 , VAR_4 , VAR_7 ) )  TYPE_1 . get ( VAR_6 class ) . METHOD_3 ( this , STRING_2 , new TYPE_2 [ ] { } , new java.lang.Object [ ] { } , VAR_4 , VAR_4 , VAR_7 ) (  VAR_3 . METHOD_2 ( STRING_3 ) )  VAR_3 . METHOD_2 ( STRING_3 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME vmId ) NAME vmId ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME type ) NAME type ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return new TYPE_1 ( new TYPE_3 ( VAR_1 , vmId ) , type , VAR_2 , STRING_1 , 0 , TYPE_4 . METHOD_2 ( ) , VAR_3 , true , false , STRING_1 , TYPE_4 . METHOD_2 ( ) , null , null ) ; )  return new TYPE_1 ( new TYPE_3 ( VAR_1 , vmId ) , type , VAR_2 , STRING_1 , 0 , TYPE_4 . METHOD_2 ( ) , VAR_3 , true , false , STRING_1 , TYPE_4 . METHOD_2 ( ) , null , null ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) == null ) COND ( VAR_1 ) == null ( THEN THEN ( SWITCH SWITCH ( NAME METHOD_2 ( ) . METHOD_3 ( ) ) NAME METHOD_2 ( ) . METHOD_3 ( ) ( CASE VAR_2 ( BLOCK BLOCK (  return null ; )  return null ; ) BLOCK BLOCK ) CASE VAR_2 ( CASE VAR_3 ( BLOCK BLOCK (  VAR_1 = METHOD_4 ( ) . METHOD_5 ( ) )  VAR_1 = METHOD_4 ( ) . METHOD_5 ( ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_3 ( CASE VAR_4 ( BLOCK BLOCK (  VAR_1 = METHOD_6 ( ) . METHOD_7 ( ) )  VAR_1 = METHOD_6 ( ) . METHOD_7 ( ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_4 ( DEFAULT DEFAULT ( BLOCK BLOCK (  VAR_1 = METHOD_4 ( ) . METHOD_5 ( ) )  VAR_1 = METHOD_4 ( ) . METHOD_5 ( ) (  VAR_1 . METHOD_8 ( METHOD_6 ( ) . METHOD_7 ( ) ) )  VAR_1 . METHOD_8 ( METHOD_6 ( ) . METHOD_7 ( ) ) (  break ; )  break ; ) BLOCK BLOCK ) DEFAULT DEFAULT ) SWITCH SWITCH ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_1 ) ( result ) ) ) INIT = ( ( TYPE_1 ) ( result ) ) ) VAR VAR (  VAR_2 . METHOD_2 ( ) . setItems ( TYPE_2 . METHOD_3 ( VAR_1 ) ) )  VAR_2 . METHOD_2 ( ) . setItems ( TYPE_2 . METHOD_3 ( VAR_1 ) ) (  VAR_2 . METHOD_2 ( ) . setSelectedItem ( VAR_1 ) )  VAR_2 . METHOD_2 ( ) . setSelectedItem ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.compat.Guid> ) TYPE java.util.List<org.ovirt.engine.core.compat.Guid> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1<?> ) TYPE TYPE_1<?> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_2 ( VAR_1 ) ) INIT = METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_3 != null ) COND VAR_3 != null ( THEN THEN ( SWITCH SWITCH ( NAME VAR_3 . METHOD_3 ( ) ) NAME VAR_3 . METHOD_3 ( ) ( CASE VAR_4 ( BLOCK BLOCK (  return false ; )  return false ; ) BLOCK BLOCK ) CASE VAR_4 ( CASE VAR_5 ( BLOCK BLOCK (  return false ; )  return false ; ) BLOCK BLOCK ) CASE VAR_5 ( CASE VAR_6 ( BLOCK BLOCK (  VAR_2 . METHOD_4 ( VAR_9 ) )  VAR_2 . METHOD_4 ( VAR_9 ) (  return true ; )  return true ; ) BLOCK BLOCK ) CASE VAR_6 ( CASE VAR_7 ( BLOCK BLOCK (  VAR_2 . METHOD_4 ( VAR_9 ) )  VAR_2 . METHOD_4 ( VAR_9 ) (  return true ; )  return true ; ) BLOCK BLOCK ) CASE VAR_7 ( CASE VAR_8 ( BLOCK BLOCK (  VAR_2 . METHOD_4 ( VAR_9 ) )  VAR_2 . METHOD_4 ( VAR_9 ) (  return true ; )  return true ; ) BLOCK BLOCK ) CASE VAR_8 ( CASE VAR_10 ( BLOCK BLOCK (  VAR_2 . METHOD_4 ( VAR_11 ) )  VAR_2 . METHOD_4 ( VAR_11 ) (  return true ; )  return true ; ) BLOCK BLOCK ) CASE VAR_10 ) SWITCH SWITCH ) THEN THEN ) IF IF (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND VAR_3 . isEmpty ( ) ) COND VAR_3 . isEmpty ( ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  METHOD_3 ( ) . METHOD_1 ( VAR_1 . getId ( ) ) )  METHOD_3 ( ) . METHOD_1 ( VAR_1 . getId ( ) ) ) THEN THEN ) IF IF (  return METHOD_4 ( VAR_3 , METHOD_5 ( ) , false ) ; )  return METHOD_4 ( VAR_3 , METHOD_5 ( ) , false ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) ( IF IF ( COND ! ( METHOD_2 ( ) ) ) COND ! ( METHOD_2 ( ) ) ( THEN THEN (  VAR_1 = false )  VAR_1 = false (  getModel ( ) . METHOD_3 ( ) . METHOD_4 ( new TYPE_1 ( ) ) )  getModel ( ) . METHOD_3 ( ) . METHOD_4 ( new TYPE_1 ( ) ) ) THEN THEN ) IF IF (  METHOD_5 ( false ) )  METHOD_5 ( false ) (  getModel ( ) . METHOD_6 ( ) )  getModel ( ) . METHOD_6 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( VAR_2 , VAR_3 ) )  VAR_1 . METHOD_2 ( VAR_2 , VAR_3 ) (  org.mockito.Mockito.when ( METHOD_3 ( ) . METHOD_4 ( ) ) . thenReturn ( VAR_4 ) )  org.mockito.Mockito.when ( METHOD_3 ( ) . METHOD_4 ( ) ) . thenReturn ( VAR_4 ) (  METHOD_5 ( ) . METHOD_6 ( ) )  METHOD_5 ( ) . METHOD_6 ( ) ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME result ) NAME result ( INIT = ( ( java.lang.String ) ( METHOD_5 ( ) . METHOD_7 ( ) . getReturnValue ( ) ) ) ) INIT = ( ( java.lang.String ) ( METHOD_5 ( ) . METHOD_7 ( ) . getReturnValue ( ) ) ) ) VAR VAR (  TYPE_1 . METHOD_8 ( ( STRING_1 + result ) , result . equals ( VAR_3 ) ) )  TYPE_1 . METHOD_8 ( ( STRING_1 + result ) , result . equals ( VAR_3 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME params ) NAME params ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4<TYPE_1> ) TYPE TYPE_4<TYPE_1> ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_5 . METHOD_2 ( VAR_3 , params , TYPE_6 . METHOD_3 ( ) ) ) INIT = TYPE_5 . METHOD_2 ( VAR_3 , params , TYPE_6 . METHOD_3 ( ) ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  return VAR_2 . get ( ) ; )  return VAR_2 . get ( ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_7|TYPE_8 ) TYPE TYPE_7|TYPE_8 ( NAME e ) NAME e ( BLOCK BLOCK (  e . METHOD_4 ( ) )  e . METHOD_4 ( ) (  log . error ( STRING_1 ) )  log . error ( STRING_1 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( VAR_1 < java.lang.Boolean > METHOD_3 ( VAR_2 , STRING_1 ) ) )  TYPE_1 . METHOD_2 ( VAR_1 < java.lang.Boolean > METHOD_3 ( VAR_2 , STRING_1 ) ) (  TYPE_1 . METHOD_4 ( VAR_1 < java.lang.Boolean > METHOD_3 ( VAR_2 , STRING_2 ) ) )  TYPE_1 . METHOD_4 ( VAR_1 < java.lang.Boolean > METHOD_3 ( VAR_2 , STRING_2 ) ) (  TYPE_1 . METHOD_4 ( VAR_1 < java.lang.Boolean > METHOD_3 ( VAR_2 , STRING_3 ) ) )  TYPE_1 . METHOD_4 ( VAR_1 < java.lang.Boolean > METHOD_3 ( VAR_2 , STRING_3 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( STRING_1 , vds . getId ( ) , vds . METHOD_3 ( ) ) )  VAR_1 . METHOD_2 ( STRING_1 , vds . getId ( ) , vds . METHOD_3 ( ) ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME params ) NAME params ( INIT = new TYPE_1 ( vds . getId ( ) , VAR_2 ) ) INIT = new TYPE_1 ( vds . getId ( ) , VAR_2 ) ) VAR VAR (  TYPE_2 . getInstance ( ) . METHOD_4 ( VAR_3 , params , TYPE_3 . METHOD_5 ( ) ) )  TYPE_2 . getInstance ( ) . METHOD_4 ( VAR_3 , params , TYPE_3 . METHOD_5 ( ) ) (  METHOD_6 ( vds ) )  METHOD_6 ( vds ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN org.ovirt.engine.core.common.businessentities.StorageDomain ) RETURN org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME map ) NAME map ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE TYPE_2.StorageDomain ) TYPE TYPE_2.StorageDomain ( NAME template ) NAME template ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2.StorageDomain ) TYPE TYPE_2.StorageDomain ( NAME entity ) NAME entity ( INIT = ( template != null ) ? template : new TYPE_2 . StorageDomain ( ) ) INIT = ( template != null ) ? template : new TYPE_2 . StorageDomain ( ) ) VAR VAR (  entity . METHOD_1 ( model . getId ( ) ) )  entity . METHOD_1 ( model . getId ( ) ) ( IF IF ( COND model . METHOD_2 ( ) ) COND model . METHOD_2 ( ) ( THEN THEN ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_3 . METHOD_3 ( model . METHOD_4 ( ) ) ) INIT = TYPE_3 . METHOD_3 ( model . METHOD_4 ( ) ) ) VAR VAR ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN (  entity . METHOD_5 ( TYPE_4 . map ( VAR_1 , null ) ) )  entity . METHOD_5 ( TYPE_4 . map ( VAR_1 , null ) ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return entity ; )  return entity ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<TYPE_2,org.ovirt.engine.ui.uicommonweb.models.EntityModel<TYPE_3>> ) RETURN TYPE_1<TYPE_2,org.ovirt.engine.ui.uicommonweb.models.EntityModel<TYPE_3>> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_5<TYPE_6> ) TYPE TYPE_5<TYPE_6> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_5<TYPE_2> ) TYPE TYPE_5<TYPE_2> ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE TYPE_5<org.ovirt.engine.ui.uicommonweb.models.EntityModel<TYPE_3>> ) TYPE TYPE_5<org.ovirt.engine.ui.uicommonweb.models.EntityModel<TYPE_3>> ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<TYPE_2,org.ovirt.engine.ui.uicommonweb.models.EntityModel<TYPE_3>> ) TYPE TYPE_1<TYPE_2,org.ovirt.engine.ui.uicommonweb.models.EntityModel<TYPE_3>> ( NAME result ) NAME result ( INIT = new TYPE_1 < TYPE_2 , org.ovirt.engine.ui.uicommonweb.models.EntityModel < TYPE_3 > > ( VAR_1 , VAR_2 ) ) INIT = new TYPE_1 < TYPE_2 , org.ovirt.engine.ui.uicommonweb.models.EntityModel < TYPE_3 > > ( VAR_1 , VAR_2 ) ) VAR VAR (  result . METHOD_2 ( VAR_3 ) )  result . METHOD_2 ( VAR_3 ) (  result . METHOD_3 ( VAR_4 ) )  result . METHOD_3 ( VAR_4 ) (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2<?> ) TYPE TYPE_2<?> ( NAME command ) NAME command ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_2 ) NAME VAR_2 ( INIT = command . METHOD_2 ( ) ) INIT = command . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ( INIT = TYPE_5 . METHOD_3 ( VAR_3 . log ) . METHOD_4 ( command , ( VAR_1 != null ? VAR_1 . METHOD_5 ( ) : null ) ) ) INIT = TYPE_5 . METHOD_3 ( VAR_3 . log ) . METHOD_4 ( command , ( VAR_1 != null ? VAR_1 . METHOD_5 ( ) : null ) ) ) VAR VAR (  METHOD_6 ( command , result ) )  METHOD_6 ( command , result ) ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN (  VAR_2 . METHOD_7 ( result ) )  VAR_2 . METHOD_7 ( result ) ) THEN THEN ) IF IF (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( IF IF ( COND ( ( ( TYPE_2 . METHOD_2 ( VAR_1 , STRING_1 ) ) || ( TYPE_2 . METHOD_2 ( VAR_1 , STRING_2 ) ) ) || ( TYPE_2 . METHOD_2 ( VAR_1 , STRING_3 ) ) ) || ( TYPE_2 . METHOD_2 ( VAR_1 , STRING_4 ) ) ) COND ( ( ( TYPE_2 . METHOD_2 ( VAR_1 , STRING_1 ) ) || ( TYPE_2 . METHOD_2 ( VAR_1 , STRING_2 ) ) ) || ( TYPE_2 . METHOD_2 ( VAR_1 , STRING_3 ) ) ) || ( TYPE_2 . METHOD_2 ( VAR_1 , STRING_4 ) ) ( THEN THEN (  VAR_2 = VAR_3 )  VAR_2 = VAR_3 ) THEN THEN ( ELSE ELSE ( IF IF ( COND TYPE_2 . METHOD_2 ( VAR_1 , STRING_5 ) ) COND TYPE_2 . METHOD_2 ( VAR_1 , STRING_5 ) ( THEN THEN (  VAR_2 = VAR_4 )  VAR_2 = VAR_4 ) THEN THEN ( ELSE ELSE (  VAR_2 = VAR_5 )  VAR_2 = VAR_5 ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<TYPE_2,java.lang.Integer> ) TYPE TYPE_1<TYPE_2,java.lang.Integer> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 < TYPE_2 , java.lang.Integer > ( ) { protected java.lang.String METHOD_2 ( ) { return STRING_1 ; } } ) INIT = new TYPE_1 < TYPE_2 , java.lang.Integer > ( ) { protected java.lang.String METHOD_2 ( ) { return STRING_1 ; } } ) VAR VAR ( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_2 ) NAME METHOD_2 ( BLOCK BLOCK (  return STRING_1 ; )  return STRING_1 ; ) BLOCK BLOCK ) METHOD METHOD (  VAR_1 . setItems ( TYPE_3 . METHOD_3 ( 1 , 2 , INT_1 ) ) )  VAR_1 . setItems ( TYPE_3 . METHOD_3 ( 1 , 2 , INT_1 ) ) (  VAR_1 . setSelectedItem ( 2 ) )  VAR_1 . setSelectedItem ( 2 ) (  VAR_1 . setItems ( TYPE_3 . METHOD_3 ( 1 , 2 ) ) )  VAR_1 . setItems ( TYPE_3 . METHOD_3 ( 1 , 2 ) ) (  TYPE_4 . assertEquals ( ( ( java.lang.Integer ) ( 2 ) ) , VAR_1 . getSelectedItem ( ) ) )  TYPE_4 . assertEquals ( ( ( java.lang.Integer ) ( 2 ) ) , VAR_1 . getSelectedItem ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = null ) INIT = null ) VAR VAR ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN (  VAR_4 = TYPE_3 . METHOD_2 ( ) . get ( VAR_2 ) )  VAR_4 = TYPE_3 . METHOD_2 ( ) . get ( VAR_2 ) ( IF IF ( COND VAR_4 != null ) COND VAR_4 != null ( THEN THEN ( IF IF ( COND ( ( VAR_4 . METHOD_3 ( ) ) == ( VAR_5 ) ) || ( ( VAR_4 . METHOD_3 ( ) ) == ( VAR_6 ) ) ) COND ( ( VAR_4 . METHOD_3 ( ) ) == ( VAR_5 ) ) || ( ( VAR_4 . METHOD_3 ( ) ) == ( VAR_6 ) ) ( THEN THEN (  VAR_1 . add ( new TYPE_1 ( VAR_3 , VAR_7 , VAR_8 ) ) )  VAR_1 . add ( new TYPE_1 ( VAR_3 , VAR_7 , VAR_8 ) ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_2 ) ( result . METHOD_2 ( ) ) ) ) INIT = ( ( TYPE_2 ) ( result . METHOD_2 ( ) ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = result . getReturnValue ( ) ) INIT = result . getReturnValue ( ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME Guid ) NAME Guid ( INIT = ( ( org.ovirt.engine.core.compat.Guid ) ( VAR_2 . METHOD_3 ( ) ) ) ) INIT = ( ( org.ovirt.engine.core.compat.Guid ) ( VAR_2 . METHOD_3 ( ) ) ) ) VAR VAR (  VAR_1 . METHOD_4 ( Guid ) )  VAR_1 . METHOD_4 ( Guid ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  VAR_1 . add ( STRING_1 ) )  VAR_1 . add ( STRING_1 ) (  METHOD_2 ( METHOD_3 ( ) ) )  METHOD_2 ( METHOD_3 ( ) ) (  METHOD_4 ( 1 ) )  METHOD_4 ( 1 ) (  METHOD_5 ( 0 ) )  METHOD_5 ( 0 ) (  METHOD_6 ( ) )  METHOD_6 ( ) (  VAR_2 . METHOD_7 ( ) )  VAR_2 . METHOD_7 ( ) ( VAR VAR ( TYPE TYPE_1.VM ) TYPE TYPE_1.VM ( NAME vm ) NAME vm ( INIT = resource . get ( ) ) INIT = resource . get ( ) ) VAR VAR (  METHOD_8 ( vm . METHOD_9 ( ) ) )  METHOD_8 ( vm . METHOD_9 ( ) ) (  METHOD_10 ( vm , 0 ) )  METHOD_10 ( vm , 0 ) ) BLOCK BLOCK ( FINALLY FINALLY (  VAR_1 . METHOD_11 ( ) )  VAR_1 . METHOD_11 ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( VAR_1 == ( TYPE_1 . VM ) ) ? true : false ) INIT = ( VAR_1 == ( TYPE_1 . VM ) ) ? true : false ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME tempVar ) NAME tempVar ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  tempVar . METHOD_3 ( METHOD_4 ( ) ) )  tempVar . METHOD_3 ( METHOD_4 ( ) ) (  tempVar . METHOD_5 ( VAR_1 ) )  tempVar . METHOD_5 ( VAR_1 ) (  tempVar . METHOD_6 ( VAR_2 ) )  tempVar . METHOD_6 ( VAR_2 ) (  tempVar . METHOD_7 ( TYPE_3 . METHOD_8 ( ) ) )  tempVar . METHOD_7 ( TYPE_3 . METHOD_8 ( ) ) (  tempVar . METHOD_9 ( METHOD_10 ( ) ) )  tempVar . METHOD_9 ( METHOD_10 ( ) ) (  super . METHOD_1 ( VAR_3 , tempVar ) )  super . METHOD_1 ( VAR_3 , tempVar ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME sender ) NAME sender ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME args ) NAME args ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( METHOD_2 ( ) . getEntity ( ) ) != null ) && ( ( java.lang.Boolean ) ( METHOD_2 ( ) . getEntity ( ) ) ) ) COND ( ( METHOD_2 ( ) . getEntity ( ) ) != null ) && ( ( java.lang.Boolean ) ( METHOD_2 ( ) . getEntity ( ) ) ) ( THEN THEN (  METHOD_3 ( ) . setIsChangable ( true ) )  METHOD_3 ( ) . setIsChangable ( true ) (  METHOD_4 ( ) . setIsChangable ( true ) )  METHOD_4 ( ) . setIsChangable ( true ) ) THEN THEN ( ELSE ELSE (  METHOD_3 ( ) . setIsChangable ( false ) )  METHOD_3 ( ) . setIsChangable ( false ) (  METHOD_4 ( ) . setIsChangable ( false ) )  METHOD_4 ( ) . setIsChangable ( false ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( java.lang.Boolean ) ( returnValue ) ) ) INIT = ( ( java.lang.Boolean ) ( returnValue ) ) ) VAR VAR ( IF IF ( COND ! VAR_1 ) COND ! VAR_1 ( THEN THEN (  model . METHOD_1 ( ) . METHOD_2 ( ) )  model . METHOD_1 ( ) . METHOD_2 ( ) (  model . getName ( ) . METHOD_1 ( ) . add ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_3 ( ) ) )  model . getName ( ) . METHOD_1 ( ) . add ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_3 ( ) ) (  model . getName ( ) . METHOD_4 ( false ) )  model . getName ( ) . METHOD_4 ( false ) (  model . METHOD_4 ( false ) )  model . METHOD_4 ( false ) (  model . METHOD_5 ( ) )  model . METHOD_5 ( ) ) THEN THEN ( ELSE ELSE (  METHOD_6 ( vm ) )  METHOD_6 ( vm ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( 2 ) )  METHOD_2 ( 2 ) (  METHOD_3 ( METHOD_4 ( VAR_1 , VAR_2 class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 [ 0 ] } , true , true ) ) )  METHOD_3 ( METHOD_4 ( VAR_1 , VAR_2 class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 [ 0 ] } , true , true ) ) (  METHOD_5 ( VAR_4 . METHOD_6 ( VAR_3 [ 0 ] . toString ( ) ) ) )  METHOD_5 ( VAR_4 . METHOD_6 ( VAR_3 [ 0 ] . toString ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME vds ) NAME vds ( INIT = null ) INIT = null ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ( INIT = null ) INIT = null ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ( INIT = null ) INIT = null ) VAR VAR (  VAR_1 . METHOD_2 ( vds ) )  VAR_1 . METHOD_2 ( vds ) (  VAR_1 . METHOD_3 ( VAR_2 ) )  VAR_1 . METHOD_3 ( VAR_2 ) (  VAR_1 . METHOD_4 ( vm ) )  VAR_1 . METHOD_4 ( vm ) ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . METHOD_5 ( ) ) INIT = VAR_1 . METHOD_5 ( ) ) VAR VAR (  TYPE_2 . METHOD_6 ( VAR_3 ) )  TYPE_2 . METHOD_6 ( VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.Map<java.lang.String,java.lang.String> ) RETURN java.util.Map<java.lang.String,java.lang.String> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.network ) TYPE org.ovirt.engine.core.common.businessentities.network ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . getValue ( ) ) INIT = VAR_3 . getValue ( ) ) VAR VAR ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.String> ) TYPE java.util.Map<java.lang.String,java.lang.String> ( NAME VAR_4 ) NAME VAR_4 ( INIT = ( ( java.util.Map < java.lang.String , java.lang.String > ) ( VAR_2 . METHOD_2 ( VAR_1 . getName ( ) ) ) ) ) INIT = ( ( java.util.Map < java.lang.String , java.lang.String > ) ( VAR_2 . METHOD_2 ( VAR_1 . getName ( ) ) ) ) ) VAR VAR (  TYPE_2 . METHOD_3 ( ( ( STRING_1 + ( VAR_1 . getName ( ) ) ) + STRING_2 ) , VAR_4 ) )  TYPE_2 . METHOD_3 ( ( ( STRING_1 + ( VAR_1 . getName ( ) ) ) + STRING_2 ) , VAR_4 ) (  return VAR_4 ; )  return VAR_4 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME entity ) NAME entity ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2<java.lang.String> ) TYPE TYPE_2<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_3 . METHOD_2 ( VAR_2 , VAR_3 ) ) INIT = TYPE_3 . METHOD_2 ( VAR_2 , VAR_3 ) ) VAR VAR (  VAR_4 . METHOD_3 ( VAR_1 , model ) )  VAR_4 . METHOD_3 ( VAR_1 , model ) ( IF IF ( COND VAR_1 . METHOD_4 ( STRING_1 ) ) COND VAR_1 . METHOD_4 ( STRING_1 ) ( THEN THEN (  METHOD_5 ( model , entity ) )  METHOD_5 ( model , entity ) ) THEN THEN ) IF IF (  TYPE_4 . METHOD_6 ( this , model ) )  TYPE_4 . METHOD_6 ( this , model ) (  TYPE_4 . METHOD_7 ( this , model ) )  TYPE_4 . METHOD_7 ( this , model ) (  TYPE_5 . METHOD_8 ( model , this ) )  TYPE_5 . METHOD_8 ( model , this ) (  return model ; )  return model ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( VAR_1 . add ( STRING_1 ) ) )  TYPE_1 . METHOD_2 ( VAR_1 . add ( STRING_1 ) ) (  TYPE_1 . METHOD_2 ( VAR_1 . add ( STRING_2 ) ) )  TYPE_1 . METHOD_2 ( VAR_1 . add ( STRING_2 ) ) (  TYPE_1 . METHOD_3 ( METHOD_4 ( ) , new java.lang.String [ ] { STRING_1 , STRING_2 } ) )  TYPE_1 . METHOD_3 ( METHOD_4 ( ) , new java.lang.String [ ] { STRING_1 , STRING_2 } ) (  TYPE_1 . assertEquals ( VAR_1 . METHOD_5 ( ) , 0 ) )  TYPE_1 . assertEquals ( VAR_1 . METHOD_5 ( ) , 0 ) (  TYPE_1 . assertEquals ( VAR_1 . size ( ) , 2 ) )  TYPE_1 . assertEquals ( VAR_1 . size ( ) , 2 ) (  TYPE_1 . METHOD_6 ( VAR_1 . isEmpty ( ) ) )  TYPE_1 . METHOD_6 ( VAR_1 . isEmpty ( ) ) (  TYPE_1 . METHOD_6 ( VAR_1 . METHOD_7 ( ) ) )  TYPE_1 . METHOD_6 ( VAR_1 . METHOD_7 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source != null ? source : STRING_1 ; )  return source != null ? source : STRING_1 ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : STRING_1 ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : STRING_1 ; } } ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME parameters ) NAME parameters ( INIT = new TYPE_1 ( VAR_1 ) ) INIT = new TYPE_1 ( VAR_1 ) ) VAR VAR (  parameters . METHOD_2 ( VAR_2 ) )  parameters . METHOD_2 ( VAR_2 ) (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_3 , parameters , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_3 , parameters , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2<TYPE_3> ) TYPE TYPE_2<TYPE_3> ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_4 . METHOD_2 ( VAR_1 ) ) INIT = TYPE_4 . METHOD_2 ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_1 ( VAR_4 ) ) INIT = new TYPE_1 ( VAR_4 ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_5 ) NAME VAR_5 ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK (  VAR_3 . METHOD_3 ( VAR_5 . METHOD_4 ( ) , VAR_5 . METHOD_5 ( ) ) )  VAR_3 . METHOD_3 ( VAR_5 . METHOD_4 ( ) , VAR_5 . METHOD_5 ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ( IF IF ( COND VAR_3 . METHOD_6 ( ) ) COND VAR_3 . METHOD_6 ( ) ( THEN THEN (  return VAR_3 ; )  return VAR_3 ; ) THEN THEN ( ELSE ELSE (  throw new TYPE_5 ( VAR_6 ) ; )  throw new TYPE_5 ( VAR_6 ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( INT_1 ) ) INIT = TYPE_2 . METHOD_2 ( INT_1 ) ) VAR VAR (  disk . METHOD_3 ( VAR_1 ) )  disk . METHOD_3 ( VAR_1 ) (  disk . METHOD_4 ( STRING_1 ) )  disk . METHOD_4 ( STRING_1 ) (  METHOD_5 ( disk , TYPE_2 . METHOD_6 ( VAR_1 . METHOD_7 ( 0 , VAR_2 ) ) ) )  METHOD_5 ( disk , TYPE_2 . METHOD_6 ( VAR_1 . METHOD_7 ( 0 , VAR_2 ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  return new TYPE_1 ( new TYPE_2 ( VAR_1 , vm . getId ( ) ) , VAR_2 , STRING_1 , STRING_2 , 1 , new java.util.HashMap < > ( ) , true , true , true , STRING_3 , new java.util.HashMap < > ( ) , org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) , STRING_4 ) ; )  return new TYPE_1 ( new TYPE_2 ( VAR_1 , vm . getId ( ) ) , VAR_2 , STRING_1 , STRING_2 , 1 , new java.util.HashMap < > ( ) , true , true , true , STRING_3 , new java.util.HashMap < > ( ) , org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) , STRING_4 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( cmd ) . METHOD_2 ( ) )  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( cmd ) . METHOD_2 ( ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  VAR_4 . METHOD_3 ( VAR_1 ) )  VAR_4 . METHOD_3 ( VAR_1 ) (  VAR_4 . METHOD_4 ( VAR_1 ) )  VAR_4 . METHOD_4 ( VAR_1 ) ( IF IF ( COND ! VAR_1 ) COND ! VAR_1 ( THEN THEN (  VAR_4 . METHOD_5 ( new TYPE_3 ( VAR_2 , STRING_1 ) ) )  VAR_4 . METHOD_5 ( new TYPE_3 ( VAR_2 , STRING_1 ) ) ) THEN THEN ) IF IF (  org.mockito.Mockito.when ( VAR_5 . METHOD_6 ( TYPE_4 . any ( VAR_6 class ) , TYPE_4 . any ( VAR_7 class ) ) ) . thenReturn ( VAR_4 ) )  org.mockito.Mockito.when ( VAR_5 . METHOD_6 ( TYPE_4 . any ( VAR_6 class ) , TYPE_4 . any ( VAR_7 class ) ) ) . thenReturn ( VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = INT_1 ) INIT = INT_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME result ) NAME result ( INIT = 1 ) INIT = 1 ) VAR VAR (  result = ( VAR_1 * result ) + ( ( VAR_2 ) == null ? 0 : VAR_2 . METHOD_1 ( ) ) )  result = ( VAR_1 * result ) + ( ( VAR_2 ) == null ? 0 : VAR_2 . METHOD_1 ( ) ) (  result = ( VAR_1 * result ) + ( ( id ) == null ? 0 : id . METHOD_1 ( ) ) )  result = ( VAR_1 * result ) + ( ( id ) == null ? 0 : id . METHOD_1 ( ) ) (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME sender ) NAME sender ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME args ) NAME args ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  super . METHOD_1 ( VAR_1 , sender , args ) )  super . METHOD_1 ( VAR_1 , sender , args ) ( IF IF ( COND METHOD_2 ( ) . equals ( sender ) ) COND METHOD_2 ( ) . equals ( sender ) ( THEN THEN (  METHOD_3 ( ) )  METHOD_3 ( ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND METHOD_4 ( ) . equals ( sender ) ) COND METHOD_4 ( ) . equals ( sender ) ( THEN THEN (  METHOD_5 ( ) )  METHOD_5 ( ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND METHOD_6 ( ) . equals ( sender ) ) COND METHOD_6 ( ) . equals ( sender ) ( THEN THEN (  METHOD_7 ( ) )  METHOD_7 ( ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND METHOD_8 ( ) . equals ( sender ) ) COND METHOD_8 ( ) . equals ( sender ) ( THEN THEN (  METHOD_9 ( ) )  METHOD_9 ( ) ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<TYPE_1> ) TYPE java.util.ArrayList<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( METHOD_2 ( ) ) != null ) ? VAR_2 . Linq < TYPE_1 > METHOD_3 ( METHOD_2 ( ) ) : new java.util.ArrayList < TYPE_1 > ( ) ) INIT = ( ( METHOD_2 ( ) ) != null ) ? VAR_2 . Linq < TYPE_1 > METHOD_3 ( METHOD_2 ( ) ) : new java.util.ArrayList < TYPE_1 > ( ) ) VAR VAR (  METHOD_4 ( ) . METHOD_5 ( ( ( VAR_1 . size ( ) ) == 1 ) ) )  METHOD_4 ( ) . METHOD_5 ( ( ( VAR_1 . size ( ) ) == 1 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1<TYPE_2> ) RETURN TYPE_1<TYPE_2> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1<TYPE_3> ) TYPE TYPE_1<TYPE_3> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME VAR_3 ) NAME VAR_3 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK (  VAR_3 . add ( TYPE_4 . METHOD_2 ( VAR_1 , VAR_4 ) ) )  VAR_3 . add ( TYPE_4 . METHOD_2 ( VAR_1 , VAR_4 ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( STRING_1 , null ) ) INIT = METHOD_2 ( STRING_1 , null ) ) VAR VAR (  VAR_1 . METHOD_3 ( false ) )  VAR_1 . METHOD_3 ( false ) (  cmd = org.mockito.Mockito . METHOD_4 ( new TYPE_2 ( new TYPE_3 ( VAR_2 , STRING_2 , STRING_3 , VAR_3 , null , null , TYPE_4 . METHOD_5 ( VAR_1 ) ) , null ) ) )  cmd = org.mockito.Mockito . METHOD_4 ( new TYPE_2 ( new TYPE_3 ( VAR_2 , STRING_2 , STRING_3 , VAR_3 , null , null , TYPE_4 . METHOD_5 ( VAR_1 ) ) , null ) ) (  METHOD_6 ( cmd , VAR_4 ) )  METHOD_6 ( cmd , VAR_4 ) (  TYPE_5 . METHOD_7 ( cmd . validate ( ) ) )  TYPE_5 . METHOD_7 ( cmd . validate ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1.DiskImage ) RETURN TYPE_1.DiskImage ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.DiskImage ) TYPE TYPE_1.DiskImage ( NAME image ) NAME image ( INIT = new TYPE_1 . DiskImage ( ) ) INIT = new TYPE_1 . DiskImage ( ) ) VAR VAR (  image . METHOD_2 ( VAR_2 ) )  image . METHOD_2 ( VAR_2 ) (  image . METHOD_3 ( VAR_3 ) )  image . METHOD_3 ( VAR_3 ) (  image . METHOD_4 ( VAR_4 ) )  image . METHOD_4 ( VAR_4 ) (  image . METHOD_5 ( VAR_5 ) )  image . METHOD_5 ( VAR_5 ) (  image . METHOD_6 ( VAR_1 ) )  image . METHOD_6 ( VAR_1 ) (  return image ; )  return image ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME source ) NAME source ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( source . METHOD_2 ( ) ) == null ) || ( ( source . METHOD_3 ( ) ) == null ) ) COND ( ( source . METHOD_2 ( ) ) == null ) || ( ( source . METHOD_3 ( ) ) == null ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  return ( source . METHOD_2 ( ) . getId ( ) . equals ( VAR_1 ) ) && ( source . METHOD_3 ( ) . getId ( ) . equals ( VAR_2 ) ) ; )  return ( source . METHOD_2 ( ) . getId ( ) . equals ( VAR_1 ) ) && ( source . METHOD_3 ( ) . getId ( ) . equals ( VAR_2 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  org.mockito.Mockito.doReturn ( true ) . when ( cmd ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) ) )  org.mockito.Mockito.doReturn ( true ) . when ( cmd ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) ) (  org.mockito.Mockito.when ( cmd . METHOD_5 ( ) . METHOD_6 ( TYPE_1 . METHOD_7 ( ) ) ) . thenReturn ( new TYPE_2 . ValidationResult ( VAR_1 ) ) )  org.mockito.Mockito.when ( cmd . METHOD_5 ( ) . METHOD_6 ( TYPE_1 . METHOD_7 ( ) ) ) . thenReturn ( new TYPE_2 . ValidationResult ( VAR_1 ) ) (  TYPE_3 . METHOD_8 ( cmd , VAR_2 ) )  TYPE_3 . METHOD_8 ( cmd , VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( ) . METHOD_3 ( STRING_1 , METHOD_4 ( ) . addValue ( STRING_2 , VAR_1 . getId ( ) ) . addValue ( STRING_3 , VAR_2 . getId ( ) ) . addValue ( STRING_4 , VAR_2 . METHOD_5 ( ) ) . addValue ( STRING_5 , VAR_2 . METHOD_6 ( ) ) . addValue ( STRING_6 , TYPE_2 . METHOD_7 ( VAR_2 . getStatus ( ) ) ) ) )  METHOD_2 ( ) . METHOD_3 ( STRING_1 , METHOD_4 ( ) . addValue ( STRING_2 , VAR_1 . getId ( ) ) . addValue ( STRING_3 , VAR_2 . getId ( ) ) . addValue ( STRING_4 , VAR_2 . METHOD_5 ( ) ) . addValue ( STRING_5 , VAR_2 . METHOD_6 ( ) ) . addValue ( STRING_6 , TYPE_2 . METHOD_7 ( VAR_2 . getStatus ( ) ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain> ) RETURN java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.compat.Guid> ) TYPE java.util.ArrayList<org.ovirt.engine.core.compat.Guid> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain> ( NAME list ) NAME list ( INIT = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ) INIT = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ) TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME storageDomain ) NAME storageDomain ( INIT = TYPE_1 . METHOD_2 ( VAR_3 , VAR_2 ) ) INIT = TYPE_1 . METHOD_2 ( VAR_3 , VAR_2 ) ) VAR VAR ( IF IF ( COND storageDomain != null ) COND storageDomain != null ( THEN THEN (  list . add ( TYPE_1 . METHOD_2 ( VAR_3 , VAR_2 ) ) )  list . add ( TYPE_1 . METHOD_2 ( VAR_3 , VAR_2 ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return list ; )  return list ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND source == null ) COND source == null ( THEN THEN (  return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ; )  return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ; ) THEN THEN ) IF IF (  return source ; )  return source ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ; } return source ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ; } return source ; } } (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) ) ) )  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) ) ) (  METHOD_3 ( cmd ) )  METHOD_3 ( cmd ) (  METHOD_4 ( cmd , false ) )  METHOD_4 ( cmd , false ) (  cmd . METHOD_5 ( ) )  cmd . METHOD_5 ( ) (  TYPE_3 . assertEquals ( cmd . METHOD_6 ( ) , VAR_2 ) )  TYPE_3 . assertEquals ( cmd . METHOD_6 ( ) , VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME type ) NAME type ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = 0 ) INIT = 0 ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( IN VAR_3 ) IN VAR_3 ( BLOCK BLOCK ( IF IF ( COND ( ( e . METHOD_2 ( ) ) == type ) && ( ( e . METHOD_3 ( ) ) == VAR_1 ) ) COND ( ( e . METHOD_2 ( ) ) == type ) && ( ( e . METHOD_3 ( ) ) == VAR_1 ) ( THEN THEN (  VAR_2 ++ )  VAR_2 ++ ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<org.ovirt.engine.ui.uicommonweb.models.EntityModel> ) TYPE TYPE_1<org.ovirt.engine.ui.uicommonweb.models.EntityModel> ( NAME event ) NAME event ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = event . METHOD_2 ( ) ) INIT = event . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND ! ( STRING_1 . equals ( VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) ) ) ) COND ! ( STRING_1 . equals ( VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME target ) NAME target ( INIT = VAR_1 . METHOD_5 ( ) . METHOD_6 ( ) ) INIT = VAR_1 . METHOD_5 ( ) . METHOD_6 ( ) ) VAR VAR (  return STRING_2 . equals ( target . METHOD_7 ( ) . METHOD_4 ( ) ) ; )  return STRING_2 . equals ( target . METHOD_7 ( ) . METHOD_4 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN org.ovirt.engine.core.common.businessentities.DiskImage ) RETURN org.ovirt.engine.core.common.businessentities.DiskImage ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . METHOD_3 ( ) ) INIT = VAR_1 . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME vmId ) NAME vmId ( INIT = VAR_1 . METHOD_4 ( ) ) INIT = VAR_1 . METHOD_4 ( ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.DiskImage ) TYPE org.ovirt.engine.core.common.businessentities.DiskImage ( NAME diskImage ) NAME diskImage ( INIT = new org.ovirt.engine.core.common.businessentities.DiskImage ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.DiskImage ( ) ) VAR VAR (  diskImage . METHOD_5 ( vmId ) )  diskImage . METHOD_5 ( vmId ) (  diskImage . setId ( VAR_2 ) )  diskImage . setId ( VAR_2 ) (  diskImage . METHOD_6 ( VAR_3 ) )  diskImage . METHOD_6 ( VAR_3 ) (  return diskImage ; )  return diskImage ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND source == null ) COND source == null ( THEN THEN (  return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ; )  return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ; ) THEN THEN ) IF IF (  return source ; )  return source ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ; } return source ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ; } return source ; } } (  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new TYPE_1 ( VAR_1 ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new TYPE_1 ( VAR_1 ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) . METHOD_3 ( ) )  METHOD_2 ( ) . METHOD_3 ( ) ( IF IF ( COND ( ( METHOD_4 ( ) ) != null ) && ( ! ( METHOD_4 ( ) . getId ( ) . equals ( VAR_1 ) ) ) ) COND ( ( METHOD_4 ( ) ) != null ) && ( ! ( METHOD_4 ( ) . getId ( ) . equals ( VAR_1 ) ) ) ( THEN THEN (  org.ovirt.engine.ui.frontend.Frontend . METHOD_5 ( METHOD_4 ( ) . getId ( ) ) )  org.ovirt.engine.ui.frontend.Frontend . METHOD_5 ( METHOD_4 ( ) . getId ( ) ) (  METHOD_6 ( null ) )  METHOD_6 ( null ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ( INIT = model . getVm ( ) ) INIT = model . getVm ( ) ) VAR VAR ( IF IF ( COND vm == null ) COND vm == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( vm ) ) INIT = TYPE_1 . METHOD_2 ( vm ) ) VAR VAR (  VAR_2 . METHOD_3 ( ( VAR_1 && ( vm . METHOD_4 ( ) ) ) ) )  VAR_2 . METHOD_3 ( ( VAR_1 && ( vm . METHOD_4 ( ) ) ) ) ( IF IF ( COND ! ( VAR_2 . METHOD_5 ( ) ) ) COND ! ( VAR_2 . METHOD_5 ( ) ) ( THEN THEN (  model . METHOD_6 ( ) . setEntity ( false ) )  model . METHOD_6 ( ) . setEntity ( false ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source != null ? ( ( TYPE_1 ) ( source ) ) : null ; )  return source != null ? ( ( TYPE_1 ) ( source ) ) : null ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( TYPE_1 ) ( source ) ) : null ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( TYPE_1 ) ( source ) ) : null ; } } ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME params ) NAME params ( INIT = new TYPE_2 ( id ) ) INIT = new TYPE_2 ( id ) ) VAR VAR (  params . METHOD_2 ( VAR_1 ) )  params . METHOD_2 ( VAR_1 ) (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , params , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , params , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN java.util.List<org.ovirt.engine.core.compat.Guid> ) RETURN java.util.List<org.ovirt.engine.core.compat.Guid> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.compat.Guid> ) TYPE java.util.List<org.ovirt.engine.core.compat.Guid> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( ) ) INIT = new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME storageDomain ) NAME storageDomain ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  VAR_2 . add ( storageDomain . getId ( ) ) )  VAR_2 . add ( storageDomain . getId ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<TYPE_1> ) TYPE java.util.ArrayList<TYPE_1> ( NAME models ) NAME models ( INIT = new java.util.ArrayList < TYPE_1 > ( ) ) INIT = new java.util.ArrayList < TYPE_1 > ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  models . add ( VAR_1 ) )  models . add ( VAR_1 ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_3 ( ) ) INIT = new TYPE_3 ( ) ) VAR VAR (  models . add ( VAR_2 ) )  models . add ( VAR_2 ) (  TYPE_4 . METHOD_2 ( VAR_3 , models ) )  TYPE_4 . METHOD_2 ( VAR_3 , models ) (  return models ; )  return models ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( ) . METHOD_4 ( TYPE_2 . METHOD_5 ( ) ) , true , false ) ) INIT = TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( ) . METHOD_4 ( TYPE_2 . METHOD_5 ( ) ) , true , false ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_3 ( VAR_1 ) ) INIT = new TYPE_3 ( VAR_1 ) ) VAR VAR (  return ( validate ( VAR_2 . METHOD_6 ( ) ) ) && ( TYPE_1 . METHOD_7 ( TYPE_2 . getReturnValue ( ) . METHOD_8 ( ) , TYPE_2 . getVm ( ) . getStoragePoolId ( ) , true , true , true , VAR_1 ) ) ; )  return ( validate ( VAR_2 . METHOD_6 ( ) ) ) && ( TYPE_1 . METHOD_7 ( TYPE_2 . getReturnValue ( ) . METHOD_8 ( ) , TYPE_2 . getVm ( ) . getStoragePoolId ( ) , true , true , true , VAR_1 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( getEntity ( ) ) == null ) COND ( getEntity ( ) ) == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VmTemplate ) TYPE org.ovirt.engine.core.common.businessentities.VmTemplate ( NAME template ) NAME template ( INIT = ( ( org.ovirt.engine.core.common.businessentities.VmTemplate ) ( getEntity ( ) ) ) ) INIT = ( ( org.ovirt.engine.core.common.businessentities.VmTemplate ) ( getEntity ( ) ) ) ) VAR VAR (  super . METHOD_1 ( VAR_1 , new TYPE_1 ( template . getId ( ) ) ) )  super . METHOD_1 ( VAR_1 , new TYPE_1 ( template . getId ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  return ( ( TYPE_1 . getVm ( ) . METHOD_2 ( ) ) || ( ! ( TYPE_2 . METHOD_3 ( TYPE_1 . getVm ( ) . METHOD_4 ( ) , TYPE_1 . getParameters ( ) . METHOD_5 ( ) , TYPE_1 . getVm ( ) . getStatus ( ) ) ) ) ) || ( ! ( TYPE_2 . METHOD_6 ( METHOD_7 ( ) , TYPE_1 . getParameters ( ) ) ) ) ; )  return ( ( TYPE_1 . getVm ( ) . METHOD_2 ( ) ) || ( ! ( TYPE_2 . METHOD_3 ( TYPE_1 . getVm ( ) . METHOD_4 ( ) , TYPE_1 . getParameters ( ) . METHOD_5 ( ) , TYPE_1 . getVm ( ) . getStatus ( ) ) ) ) ) || ( ! ( TYPE_2 . METHOD_6 ( METHOD_7 ( ) , TYPE_1 . getParameters ( ) ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME resource ) NAME resource ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( resource , VAR_1 ) )  METHOD_2 ( resource , VAR_1 ) ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.network.Network ) TYPE org.ovirt.engine.core.common.businessentities.network.Network ( NAME network ) NAME network ( INIT = METHOD_3 ( resource ) ) INIT = METHOD_3 ( resource ) ) VAR VAR ( IF IF ( COND network != null ) COND network != null ( THEN THEN (  resource . METHOD_4 ( ) . METHOD_5 ( network . METHOD_6 ( ) ) )  resource . METHOD_4 ( ) . METHOD_5 ( network . METHOD_6 ( ) ) (  resource . METHOD_4 ( ) . setId ( null ) )  resource . METHOD_4 ( ) . setId ( null ) ) THEN THEN ) IF IF (  return METHOD_7 ( resource , VAR_2 , VAR_3 , VAR_4 ) ; )  return METHOD_7 ( resource , VAR_2 , VAR_3 , VAR_4 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.ui.uicommonweb.models.EntityModel ) TYPE org.ovirt.engine.ui.uicommonweb.models.EntityModel ( NAME a ) NAME a ( IN METHOD_2 ( ) ) IN METHOD_2 ( ) ( BLOCK BLOCK ( IF IF ( COND a . METHOD_3 ( ) ) COND a . METHOD_3 ( ) ( THEN THEN ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_1 ) ( a . getEntity ( ) ) ) ) INIT = ( ( TYPE_1 ) ( a . getEntity ( ) ) ) ) VAR VAR (  VAR_1 += VAR_2 . toString ( ) )  VAR_1 += VAR_2 . toString ( ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return TYPE_1 . valueOf ( VAR_1 ) ; )  return TYPE_1 . valueOf ( VAR_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.util.Map<java.lang.String,org.ovirt.engine.core.common.businessentities.Network> ) RETURN java.util.Map<java.lang.String,org.ovirt.engine.core.common.businessentities.Network> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.Network> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.Network> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_1 . isEmpty ( ) ) ) COND ! ( VAR_1 . isEmpty ( ) ) ( THEN THEN ( VAR VAR ( TYPE java.util.Map<java.lang.String,org.ovirt.engine.core.common.businessentities.Network> ) TYPE java.util.Map<java.lang.String,org.ovirt.engine.core.common.businessentities.Network> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.HashMap < java.lang.String , org.ovirt.engine.core.common.businessentities . Network > ( ) ) INIT = new java.util.HashMap < java.lang.String , org.ovirt.engine.core.common.businessentities . Network > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.Network ) TYPE org.ovirt.engine.core.common.businessentities.Network ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  VAR_2 . put ( VAR_3 . METHOD_2 ( ) , VAR_3 ) )  VAR_2 . put ( VAR_3 . METHOD_2 ( ) , VAR_3 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_2 ; )  return VAR_2 ; ) THEN THEN ( ELSE ELSE (  return TYPE_1 . METHOD_3 ( ) ; )  return TYPE_1 . METHOD_3 ( ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( IF IF ( COND VAR_1 <= 0 ) COND VAR_1 <= 0 ( THEN THEN (  METHOD_3 ( VAR_2 ) )  METHOD_3 ( VAR_2 ) (  METHOD_4 ( ) )  METHOD_4 ( ) (  TYPE_1 . METHOD_5 ( true ) )  TYPE_1 . METHOD_5 ( true ) ) THEN THEN ( ELSE ELSE (  METHOD_3 ( VAR_3 ) )  METHOD_3 ( VAR_3 ) (  TYPE_1 . METHOD_5 ( METHOD_6 ( METHOD_2 ( ) ) ) )  TYPE_1 . METHOD_5 ( METHOD_6 ( METHOD_2 ( ) ) ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<TYPE_1.DiskImage> ) TYPE java.util.ArrayList<TYPE_1.DiskImage> ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( METHOD_2 ( ) ) != null ) ? VAR_2 . Linq < TYPE_1 . DiskImage > METHOD_3 ( METHOD_2 ( ) ) : new java.util.ArrayList < TYPE_1 . DiskImage > ( ) ) INIT = ( ( METHOD_2 ( ) ) != null ) ? VAR_2 . Linq < TYPE_1 . DiskImage > METHOD_3 ( METHOD_2 ( ) ) : new java.util.ArrayList < TYPE_1 . DiskImage > ( ) ) VAR VAR (  METHOD_4 ( ) . METHOD_5 ( ( ( ( VAR_1 . size ( ) ) > 0 ) && ( METHOD_6 ( VAR_1 ) ) ) ) )  METHOD_4 ( ) . METHOD_5 ( ( ( ( VAR_1 . size ( ) ) > 0 ) && ( METHOD_6 ( VAR_1 ) ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.when ( METHOD_2 ( ) . METHOD_3 ( ) ) . thenReturn ( VAR_1 ) )  org.mockito.Mockito.when ( METHOD_2 ( ) . METHOD_3 ( ) ) . thenReturn ( VAR_1 ) (  VAR_2 = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmTemplate > ( ) )  VAR_2 = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmTemplate > ( ) (  org.mockito.Mockito.when ( METHOD_4 ( ) . METHOD_5 ( ) ) . thenReturn ( VAR_3 ) )  org.mockito.Mockito.when ( METHOD_4 ( ) . METHOD_5 ( ) ) . thenReturn ( VAR_3 ) (  org.mockito.Mockito.when ( VAR_1 . METHOD_6 ( VAR_3 ) ) . thenReturn ( VAR_2 ) )  org.mockito.Mockito.when ( VAR_1 . METHOD_6 ( VAR_3 ) ) . thenReturn ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDS> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDS> ( NAME hosts ) NAME hosts ( INIT = TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 ) ) INIT = TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE java.util.Map<org.ovirt.engine.core.compat.Guid,java.lang.Integer> ) TYPE java.util.Map<org.ovirt.engine.core.compat.Guid,java.lang.Integer> ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_3 ( VAR_4 . METHOD_4 ( cluster , hosts , VAR_5 , null ) ) ) INIT = METHOD_3 ( VAR_4 . METHOD_4 ( cluster , hosts , VAR_5 , null ) ) ) VAR VAR (  TYPE_2 . assertEquals ( ( ( java.lang.Integer ) ( 1 ) ) , VAR_3 . get ( VAR_1 . getId ( ) ) ) )  TYPE_2 . assertEquals ( ( ( java.lang.Integer ) ( 1 ) ) , VAR_3 . get ( VAR_1 . getId ( ) ) ) (  TYPE_2 . assertEquals ( ( ( java.lang.Integer ) ( 1 ) ) , VAR_3 . get ( VAR_2 . getId ( ) ) ) )  TYPE_2 . assertEquals ( ( ( java.lang.Integer ) ( 1 ) ) , VAR_3 . get ( VAR_2 . getId ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 < TYPE_2 > ( new TYPE_2 ( VAR_1 ) ) ) )  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 < TYPE_2 > ( new TYPE_2 ( VAR_1 ) ) ) (  METHOD_3 ( cmd , false ) )  METHOD_3 ( cmd , false ) (  TYPE_3 . METHOD_4 ( cmd . METHOD_5 ( ) ) )  TYPE_3 . METHOD_4 ( cmd . METHOD_5 ( ) ) (  TYPE_3 . METHOD_6 ( cmd . getReturnValue ( ) . METHOD_7 ( ) . METHOD_8 ( TYPE_4 . toString ( ) ) ) )  TYPE_3 . METHOD_6 ( cmd . getReturnValue ( ) . METHOD_7 ( ) . METHOD_8 ( TYPE_4 . toString ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( VAR_3 ) . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_4 ) , TYPE_2 . any ( VAR_5 . IdQueryParameters class ) ) )  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( VAR_3 ) . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_4 ) , TYPE_2 . any ( VAR_5 . IdQueryParameters class ) ) (  org.mockito.Mockito.doReturn ( VAR_6 ) . when ( VAR_2 ) . getReturnValue ( ) )  org.mockito.Mockito.doReturn ( VAR_6 ) . when ( VAR_2 ) . getReturnValue ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( STRING_1 , VAR_2 , STRING_2 , STRING_3 ) ) INIT = METHOD_2 ( STRING_1 , VAR_2 , STRING_2 , STRING_3 ) ) VAR VAR (  parameters . METHOD_3 ( VAR_1 ) )  parameters . METHOD_3 ( VAR_1 ) (  parameters . METHOD_4 ( VAR_3 ) )  parameters . METHOD_4 ( VAR_3 ) (  org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_5 ( ) )  org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_5 ( ) (  org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_6 ( ) )  org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_6 ( ) (  TYPE_2 . METHOD_7 ( command , VAR_4 ) )  TYPE_2 . METHOD_7 ( command , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public final ) MODIFIER public final ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME getValue ) NAME getValue ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME object ) NAME object ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.Integer ) TYPE java.lang.Integer ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_1 ( object ) ) INIT = METHOD_1 ( object ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( VAR_1 != null ) ? VAR_1 : 0 ) INIT = ( VAR_1 != null ) ? VAR_1 : 0 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_2 ( object ) ) INIT = METHOD_2 ( object ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( INIT = ( VAR_2 < INT_1 ) ? STRING_1 : VAR_2 < INT_2 ? STRING_2 : STRING_3 ) INIT = ( VAR_2 < INT_1 ) ? STRING_1 : VAR_2 < INT_2 ? STRING_2 : STRING_3 ) VAR VAR (  return TYPE_3 . instance ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_2 , VAR_3 , VAR_4 ) ; )  return TYPE_3 . instance ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_2 , VAR_3 , VAR_4 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND source == null ) COND source == null ( THEN THEN (  return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ( ) ; )  return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ( ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDSGroup> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDSGroup> ( NAME list ) NAME list ( INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( source ) ) ) INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( source ) ) ) VAR VAR (  return TYPE_1 . METHOD_1 ( list , VAR_1 , VAR_2 ) ; )  return TYPE_1 . METHOD_1 ( list , VAR_1 , VAR_2 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME add ) NAME add ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME event ) NAME event ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_1 ( event , STRING_1 , STRING_2 , STRING_3 , STRING_4 ) )  METHOD_1 ( event , STRING_1 , STRING_2 , STRING_3 , STRING_4 ) (  METHOD_2 ( VAR_1 class , event ) )  METHOD_2 ( VAR_1 class , event ) (  return METHOD_3 ( VAR_2 , new TYPE_3 ( map ( event ) ) , new TYPE_4 < TYPE_5 > ( VAR_3 , VAR_4 class ) ) ; )  return METHOD_3 ( VAR_2 , new TYPE_3 ( map ( event ) ) , new TYPE_4 < TYPE_5 > ( VAR_3 , VAR_4 class ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StoragePool ) TYPE org.ovirt.engine.core.common.businessentities.StoragePool ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( METHOD_2 ( ) . getEntity ( ) ) != ( VAR_2 ) ) COND ( METHOD_2 ( ) . getEntity ( ) ) != ( VAR_2 ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( ( java.lang.Boolean ) ( TYPE_1 . getInstance ( ) . METHOD_3 ( VAR_4 , VAR_1 . METHOD_4 ( ) . getValue ( ) ) ) ) ) INIT = ( ( java.lang.Boolean ) ( TYPE_1 . getInstance ( ) . METHOD_3 ( VAR_4 , VAR_1 . METHOD_4 ( ) . getValue ( ) ) ) ) ) VAR VAR (  METHOD_5 ( ) . setEntity ( VAR_3 ) )  METHOD_5 ( ) . setEntity ( VAR_3 ) (  METHOD_6 ( ( ! VAR_3 ? VAR_5 . METHOD_7 ( ) : STRING_1 ) ) )  METHOD_6 ( ( ! VAR_3 ? VAR_5 . METHOD_7 ( ) : STRING_1 ) ) (  METHOD_8 ( ) . setEntity ( ( ! VAR_3 ) ) )  METHOD_8 ( ) . setEntity ( ( ! VAR_3 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1.AuditLogType ) RETURN TYPE_1.AuditLogType ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( SWITCH SWITCH ( NAME TYPE_2 . METHOD_2 ( ) ) NAME TYPE_2 . METHOD_2 ( ) ( CASE VAR_1 ( BLOCK BLOCK ( IF IF ( COND ! ( getParameters ( ) . METHOD_3 ( ) ) ) COND ! ( getParameters ( ) . METHOD_3 ( ) ) ( THEN THEN (  return VAR_2 ; )  return VAR_2 ; ) THEN THEN ) IF IF ( IF IF ( COND ( ( getParameters ( ) . METHOD_4 ( ) ) == 0 ) && ( TYPE_2 . getSucceeded ( ) ) ) COND ( ( getParameters ( ) . METHOD_4 ( ) ) == 0 ) && ( TYPE_2 . getSucceeded ( ) ) ( THEN THEN (  return VAR_3 ; )  return VAR_3 ; ) THEN THEN ) IF IF (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_1 ( CASE VAR_4 ( BLOCK BLOCK (  return VAR_5 ; )  return VAR_5 ; ) BLOCK BLOCK ) CASE VAR_4 ( CASE VAR_6 ( BLOCK BLOCK (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) CASE VAR_6 ) SWITCH SWITCH (  return VAR_7 ; )  return VAR_7 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<java.lang.String> ) TYPE java.util.ArrayList<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( INT_1 , null ) ) INIT = TYPE_1 . METHOD_2 ( INT_1 , null ) ) VAR VAR (  TYPE_2 . METHOD_3 ( ( ( VAR_1 . size ( ) ) == 2 ) ) )  TYPE_2 . METHOD_3 ( ( ( VAR_1 . size ( ) ) == 2 ) ) ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME model ) NAME model ( IN TYPE_3 . METHOD_4 ( STRING_1 ) ) IN TYPE_3 . METHOD_4 ( STRING_1 ) ( BLOCK BLOCK (  TYPE_2 . METHOD_3 ( VAR_1 . METHOD_5 ( model . METHOD_6 ( ) ) ) )  TYPE_2 . METHOD_3 ( VAR_1 . METHOD_5 ( model . METHOD_6 ( ) ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) . METHOD_3 ( true ) )  METHOD_2 ( ) . METHOD_3 ( true ) (  METHOD_2 ( ) . setIsChangable ( ( ( java.lang.Boolean ) ( METHOD_4 ( ) . getEntity ( ) ) ) ) )  METHOD_2 ( ) . setIsChangable ( ( ( java.lang.Boolean ) ( METHOD_4 ( ) . getEntity ( ) ) ) ) (  METHOD_5 ( ) . METHOD_3 ( true ) )  METHOD_5 ( ) . METHOD_3 ( true ) (  METHOD_5 ( ) . setIsChangable ( ( ( java.lang.Boolean ) ( METHOD_4 ( ) . getEntity ( ) ) ) ) )  METHOD_5 ( ) . setIsChangable ( ( ( java.lang.Boolean ) ( METHOD_4 ( ) . getEntity ( ) ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME from ) NAME from ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  from . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_1 class ) . value ( ) ) )  from . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_1 class ) . value ( ) ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_3 ( ) ) INIT = new TYPE_3 ( ) ) VAR VAR (  VAR_2 . setId ( from . getId ( ) ) )  VAR_2 . setId ( from . getId ( ) ) (  from . METHOD_4 ( ) )  from . METHOD_4 ( ) (  from . METHOD_5 ( ) . add ( VAR_2 ) )  from . METHOD_5 ( ) . add ( VAR_2 ) (  return from ; )  return from ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME validate ) NAME validate ( BLOCK BLOCK (  super . validate ( ) )  super . validate ( ) (  getName ( ) . METHOD_1 ( new TYPE_1 [ ] { new TYPE_2 ( ) , new TYPE_3 ( ) } ) )  getName ( ) . METHOD_1 ( new TYPE_1 [ ] { new TYPE_2 ( ) , new TYPE_3 ( ) } ) (  METHOD_2 ( ( ( METHOD_3 ( ) ) && ( getName ( ) . METHOD_3 ( ) ) ) ) )  METHOD_2 ( ( ( METHOD_3 ( ) ) && ( getName ( ) . METHOD_3 ( ) ) ) ) (  return METHOD_3 ( ) ; )  return METHOD_3 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<org.ovirt.engine.core.compat.Guid,java.util.List<TYPE_1.DiskImage>> ) TYPE java.util.Map<org.ovirt.engine.core.compat.Guid,java.util.List<TYPE_1.DiskImage>> ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_2 ( METHOD_3 ( ) ) ) INIT = VAR_2 . METHOD_2 ( METHOD_3 ( ) ) ) VAR VAR (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  VAR_2 . METHOD_4 ( VAR_1 , VAR_3 ) )  VAR_2 . METHOD_4 ( VAR_1 , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS> ( NAME hosts ) NAME hosts ( INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ) ( result ) ) ) INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ) ( result ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1<org.ovirt.engine.core.common.businessentities.VDS> ) TYPE TYPE_1<org.ovirt.engine.core.common.businessentities.VDS> ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_1 ( ) ) INIT = METHOD_1 ( ) ) VAR VAR (  VAR_1 . setItems ( hosts ) )  VAR_1 . setItems ( hosts ) (  VAR_1 . METHOD_2 ( true ) )  VAR_1 . METHOD_2 ( true ) (  METHOD_3 ( true ) )  METHOD_3 ( true ) (  METHOD_4 ( ) . METHOD_2 ( true ) )  METHOD_4 ( ) . METHOD_2 ( true ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.uicommonweb.UICommand ) TYPE org.ovirt.engine.ui.uicommonweb.UICommand ( NAME command ) NAME command ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  super . METHOD_1 ( command ) )  super . METHOD_1 ( command ) ( IF IF ( COND TYPE_1 . METHOD_2 ( command . getName ( ) , STRING_1 ) ) COND TYPE_1 . METHOD_2 ( command . getName ( ) , STRING_1 ) ( THEN THEN (  METHOD_3 ( ) )  METHOD_3 ( ) ) THEN THEN ) IF IF ( IF IF ( COND TYPE_1 . METHOD_2 ( command . getName ( ) , STRING_2 ) ) COND TYPE_1 . METHOD_2 ( command . getName ( ) , STRING_2 ) ( THEN THEN (  METHOD_4 ( ) )  METHOD_4 ( ) ) THEN THEN ) IF IF ( IF IF ( COND TYPE_1 . METHOD_2 ( command . getName ( ) , STRING_3 ) ) COND TYPE_1 . METHOD_2 ( command . getName ( ) , STRING_3 ) ( THEN THEN (  METHOD_5 ( ) )  METHOD_5 ( ) ) THEN THEN ) IF IF ( IF IF ( COND TYPE_1 . METHOD_2 ( command . getName ( ) , STRING_4 ) ) COND TYPE_1 . METHOD_2 ( command . getName ( ) , STRING_4 ) ( THEN THEN (  METHOD_6 ( ) )  METHOD_6 ( ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( 0 , true ) )  METHOD_2 ( 0 , true ) (  VAR_1 . METHOD_3 ( ) )  VAR_1 . METHOD_3 ( ) ( TRY TRY ( BLOCK BLOCK (  resource . METHOD_4 ( ) )  resource . METHOD_4 ( ) (  METHOD_5 ( STRING_1 ) )  METHOD_5 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( BLOCK BLOCK (  METHOD_6 ( VAR_2 . METHOD_7 ( ) ) )  METHOD_6 ( VAR_2 . METHOD_7 ( ) ) (  assertEquals ( INT_1 , VAR_2 . METHOD_7 ( ) . getStatus ( ) ) )  assertEquals ( INT_1 , VAR_2 . METHOD_7 ( ) . getStatus ( ) ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return ( ( ! ( TYPE_1 . METHOD_2 ( ( ( java.lang.String ) ( TYPE_2 . METHOD_3 ( VAR_1 ) ) ) ) ) ) || ( ! ( TYPE_1 . METHOD_2 ( vm . METHOD_4 ( ) ) ) ) ) || ( ! ( TYPE_1 . METHOD_2 ( vm . METHOD_5 ( ) ) ) ) ; )  return ( ( ! ( TYPE_1 . METHOD_2 ( ( ( java.lang.String ) ( TYPE_2 . METHOD_3 ( VAR_1 ) ) ) ) ) ) || ( ! ( TYPE_1 . METHOD_2 ( vm . METHOD_4 ( ) ) ) ) ) || ( ! ( TYPE_1 . METHOD_2 ( vm . METHOD_5 ( ) ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_1 . isEmpty ( ) ) ) COND ! ( VAR_1 . isEmpty ( ) ) ( THEN THEN (  addCanDoActionMessage ( VAR_3 ) )  addCanDoActionMessage ( VAR_3 ) (  TYPE_1 . getReturnValue ( ) . METHOD_2 ( ) . add ( java.lang.String . METHOD_3 ( STRING_1 , TYPE_2 . METHOD_4 ( VAR_2 , STRING_2 ) ) ) )  TYPE_1 . getReturnValue ( ) . METHOD_2 ( ) . add ( java.lang.String . METHOD_3 ( STRING_1 , TYPE_2 . METHOD_4 ( VAR_2 , STRING_2 ) ) ) (  TYPE_1 . getReturnValue ( ) . METHOD_2 ( ) . add ( java.lang.String . METHOD_3 ( STRING_3 , TYPE_2 . METHOD_4 ( VAR_1 , STRING_2 ) ) ) )  TYPE_1 . getReturnValue ( ) . METHOD_2 ( ) . add ( java.lang.String . METHOD_3 ( STRING_3 , TYPE_2 . METHOD_4 ( VAR_1 , STRING_2 ) ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_2 ( VAR_1 ) ) INIT = METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_3 == null ) COND VAR_3 == null ( THEN THEN (  log . error ( STRING_1 , VAR_2 , VAR_1 , METHOD_3 ( ) ) )  log . error ( STRING_1 , VAR_2 , VAR_1 , METHOD_3 ( ) ) (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2.DiskImage ) TYPE TYPE_2.DiskImage ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_3 . METHOD_4 ( ) . METHOD_5 ( VAR_3 ) ) INIT = TYPE_3 . METHOD_4 ( ) . METHOD_5 ( VAR_3 ) ) VAR VAR (  VAR_4 . METHOD_6 ( VAR_2 ) )  VAR_4 . METHOD_6 ( VAR_2 ) (  METHOD_7 ( ) . METHOD_8 ( VAR_4 . METHOD_9 ( ) ) )  METHOD_7 ( ) . METHOD_8 ( VAR_4 . METHOD_9 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) (  dao = VAR_1 . METHOD_2 ( ) )  dao = VAR_1 . METHOD_2 ( ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_3 ( ) ) INIT = VAR_1 . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_2 . get ( STRING_1 ) ) INIT = VAR_2 . get ( STRING_1 ) ) VAR VAR (  VAR_4 = dao . get ( new TYPE_3 ( STRING_2 , VAR_3 . METHOD_4 ( ) ) ) )  VAR_4 = dao . get ( new TYPE_3 ( STRING_2 , VAR_3 . METHOD_4 ( ) ) ) (  VAR_5 = new TYPE_4 ( VAR_6 , VAR_3 . METHOD_4 ( ) ) )  VAR_5 = new TYPE_4 ( VAR_6 , VAR_3 . METHOD_4 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_2 ) . METHOD_2 ( ) )  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_2 ) . METHOD_2 ( ) (  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_2 ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) ) )  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_2 ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) ) (  METHOD_5 ( ) )  METHOD_5 ( ) (  TYPE_2 . METHOD_6 ( cmd . METHOD_7 ( ) ) )  TYPE_2 . METHOD_6 ( cmd . METHOD_7 ( ) ) (  org.mockito.Mockito . METHOD_8 ( VAR_2 , org.mockito.Mockito . METHOD_9 ( VAR_3 ) ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) ) )  org.mockito.Mockito . METHOD_8 ( VAR_2 , org.mockito.Mockito . METHOD_9 ( VAR_3 ) ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) ) (  org.mockito.Mockito . METHOD_8 ( VAR_2 , org.mockito.Mockito . METHOD_10 ( ) ) . METHOD_11 ( TYPE_1 . METHOD_4 ( ) ) )  org.mockito.Mockito . METHOD_8 ( VAR_2 , org.mockito.Mockito . METHOD_10 ( ) ) . METHOD_11 ( TYPE_1 . METHOD_4 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND source != null ) COND source != null ( THEN THEN ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS> ( NAME list ) NAME list ( INIT = VAR_2 . Linq < org.ovirt.engine.core.common.businessentities.VDS > METHOD_2 ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) ) INIT = VAR_2 . Linq < org.ovirt.engine.core.common.businessentities.VDS > METHOD_2 ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) ) VAR VAR (  return list ; )  return list ; ) THEN THEN ) IF IF (  return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ; )  return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > list = VAR_2 . Linq < org.ovirt.engine.core.common.businessentities.VDS > METHOD_2 ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) ; return list ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > list = VAR_2 . Linq < org.ovirt.engine.core.common.businessentities.VDS > METHOD_2 ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) ; return list ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ; } } (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_3 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_3 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( null ) )  METHOD_2 ( null ) (  METHOD_3 ( ) )  METHOD_3 ( ) ( IF IF ( COND ( getVm ( ) ) != null ) COND ( getVm ( ) ) != null ( THEN THEN (  TYPE_1 . METHOD_4 ( getVm ( ) . getId ( ) ) )  TYPE_1 . METHOD_4 ( getVm ( ) . getId ( ) ) (  METHOD_5 ( ) )  METHOD_5 ( ) ) THEN THEN ( ELSE ELSE (  METHOD_6 ( false ) )  METHOD_6 ( false ) (  VAR_1 . METHOD_7 ( STRING_1 ) )  VAR_1 . METHOD_7 ( STRING_1 ) ) ELSE ELSE ) IF IF (  METHOD_8 ( true ) )  METHOD_8 ( true ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) (  VAR_1 = org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) )  VAR_1 = org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ( INIT = org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) INIT = org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) VAR VAR (  VAR_3 = METHOD_3 ( true ) )  VAR_3 = METHOD_3 ( true ) (  VAR_4 = METHOD_3 ( true ) )  VAR_4 = METHOD_3 ( true ) (  VAR_5 = METHOD_3 ( false ) )  VAR_5 = METHOD_3 ( false ) (  VAR_5 . METHOD_4 ( VAR_2 ) )  VAR_5 . METHOD_4 ( VAR_2 ) (  VAR_5 . METHOD_5 ( false ) )  VAR_5 . METHOD_5 ( false ) (  VAR_6 = METHOD_3 ( false ) )  VAR_6 = METHOD_3 ( false ) (  VAR_6 . METHOD_4 ( VAR_2 ) )  VAR_6 . METHOD_4 ( VAR_2 ) (  VAR_6 . METHOD_5 ( false ) )  VAR_6 . METHOD_5 ( false ) (  METHOD_6 ( ) )  METHOD_6 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = null ) INIT = null ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_1 = new TYPE_1 ( new TYPE_2 ( STRING_1 ) ) )  VAR_1 = new TYPE_1 ( new TYPE_2 ( STRING_1 ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK (  e . METHOD_2 ( ) )  e . METHOD_2 ( ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  TYPE_4 . METHOD_3 ( VAR_1 ) )  TYPE_4 . METHOD_3 ( VAR_1 ) (  VAR_1 . METHOD_4 ( ) )  VAR_1 . METHOD_4 ( ) (  VAR_1 . METHOD_5 ( ) )  VAR_1 . METHOD_5 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.Network ) TYPE TYPE_1.Network ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( model . METHOD_3 ( ) ) )  METHOD_2 ( model . METHOD_3 ( ) ) (  assertEquals ( model . METHOD_4 ( ) , true ) )  assertEquals ( model . METHOD_4 ( ) , true ) (  METHOD_2 ( model . METHOD_5 ( ) ) )  METHOD_2 ( model . METHOD_5 ( ) ) (  METHOD_6 ( model . METHOD_7 ( ) . METHOD_7 ( ) ) )  METHOD_6 ( model . METHOD_7 ( ) . METHOD_7 ( ) ) (  METHOD_2 ( model . METHOD_7 ( ) . METHOD_7 ( ) . METHOD_8 ( TYPE_2 . name ( ) ) ) )  METHOD_2 ( model . METHOD_7 ( ) . METHOD_7 ( ) . METHOD_8 ( TYPE_2 . name ( ) ) ) (  METHOD_2 ( model . METHOD_9 ( ) ) )  METHOD_2 ( model . METHOD_9 ( ) ) (  assertEquals ( model . METHOD_10 ( ) , true ) )  assertEquals ( model . METHOD_10 ( ) , true ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = null ) INIT = null ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . METHOD_2 ( VAR_4 ) ) INIT = VAR_1 . METHOD_2 ( VAR_4 ) ) VAR VAR ( IF IF ( COND ( VAR_3 != null ) && ( VAR_3 . METHOD_3 ( TYPE_2 ) ) ) COND ( VAR_3 != null ) && ( VAR_3 . METHOD_3 ( TYPE_2 ) ) ( THEN THEN (  VAR_2 = VAR_3 . METHOD_4 ( STRING_1 . length ( ) ) . METHOD_5 ( ) )  VAR_2 = VAR_3 . METHOD_4 ( STRING_1 . length ( ) ) . METHOD_5 ( ) ) THEN THEN ) IF IF (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME pool ) NAME pool ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  pool . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) )  pool . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) (  pool . METHOD_3 ( VAR_1 ) )  pool . METHOD_3 ( VAR_1 ) (  org.mockito.Mockito.when ( VAR_2 . get ( TYPE_2 . any ( VAR_3 . Guid class ) ) ) . thenReturn ( pool ) )  org.mockito.Mockito.when ( VAR_2 . get ( TYPE_2 . any ( VAR_3 . Guid class ) ) ) . thenReturn ( pool ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_2 . METHOD_2 ( VAR_3 , VAR_4 . METHOD_3 ( VAR_1 . get ( VAR_5 , VAR_6 . String class ) , VAR_1 . get ( VAR_7 , VAR_6 . Integer class , VAR_8 ) ) ) . METHOD_2 ( VAR_9 , VAR_10 ) . METHOD_2 ( VAR_11 , VAR_12 ) )  VAR_2 . METHOD_2 ( VAR_3 , VAR_4 . METHOD_3 ( VAR_1 . get ( VAR_5 , VAR_6 . String class ) , VAR_1 . get ( VAR_7 , VAR_6 . Integer class , VAR_8 ) ) ) . METHOD_2 ( VAR_9 , VAR_10 ) . METHOD_2 ( VAR_11 , VAR_12 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<TYPE_2.VdcActionType,TYPE_3> ) TYPE TYPE_1<TYPE_2.VdcActionType,TYPE_3> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND METHOD_2 ( VAR_2 ) ) COND METHOD_2 ( VAR_2 ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  VAR_3 . log ( VAR_4 , ( STRING_1 + VAR_2 ) , VAR_2 ) )  VAR_3 . log ( VAR_4 , ( STRING_1 + VAR_2 ) , VAR_2 ) (  METHOD_3 ( ) . METHOD_4 ( null ) )  METHOD_3 ( ) . METHOD_4 ( null ) (  METHOD_5 ( VAR_2 ) )  METHOD_5 ( VAR_2 ) (  METHOD_6 ( ) )  METHOD_6 ( ) ( IF IF ( COND VAR_5 . METHOD_7 ( ) ) COND VAR_5 . METHOD_7 ( ) ( THEN THEN (  METHOD_8 ( null ) )  METHOD_8 ( null ) (  VAR_5 . METHOD_9 ( ) . onSuccess ( VAR_5 . getModel ( ) , null ) )  VAR_5 . METHOD_9 ( ) . onSuccess ( VAR_5 . getModel ( ) , null ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2<org.ovirt.engine.core.compat.Guid,TYPE_1> ) TYPE TYPE_2<org.ovirt.engine.core.compat.Guid,TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 . getValue ( ) ) == null ) COND ( VAR_1 . getValue ( ) ) == null ( THEN THEN (  VAR_1 . METHOD_2 ( new TYPE_1 ( METHOD_3 ( ) . METHOD_4 ( VAR_1 . METHOD_5 ( ) , VAR_2 ) ) ) )  VAR_1 . METHOD_2 ( new TYPE_1 ( METHOD_3 ( ) . METHOD_4 ( VAR_1 . METHOD_5 ( ) , VAR_2 ) ) ) ) THEN THEN ) IF IF (  return VAR_1 . getValue ( ) ; )  return VAR_1 . getValue ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME params ) NAME params ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  params . METHOD_2 ( VAR_1 ) )  params . METHOD_2 ( VAR_1 ) (  command = new TYPE_2 ( params ) )  command = new TYPE_2 ( params ) (  command . METHOD_3 ( VAR_2 ) )  command . METHOD_3 ( VAR_2 ) (  command = org.mockito.Mockito . METHOD_4 ( command ) )  command = org.mockito.Mockito . METHOD_4 ( command ) (  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( command ) . METHOD_5 ( TYPE_3 . any ( VAR_4 . VDS class ) , TYPE_3 . any ( VAR_5 class ) ) )  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( command ) . METHOD_5 ( TYPE_3 . any ( VAR_4 . VDS class ) , TYPE_3 . any ( VAR_5 class ) ) (  org.mockito.Mockito.doReturn ( VAR_6 ) . when ( command ) . METHOD_6 ( ) )  org.mockito.Mockito.doReturn ( VAR_6 ) . when ( command ) . METHOD_6 ( ) (  command . METHOD_7 ( VAR_7 ) )  command . METHOD_7 ( VAR_7 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object[] ) TYPE java.lang.Object[] ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME entity ) NAME entity ( INIT = VAR_1 [ 0 ] ) INIT = VAR_1 [ 0 ] ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( org.ovirt.engine.core.compat.Guid ) ( VAR_1 [ 1 ] ) ) ) INIT = ( ( org.ovirt.engine.core.compat.Guid ) ( VAR_1 [ 1 ] ) ) ) VAR VAR ( IF IF ( COND TYPE_1 . METHOD_2 ( entity ) . equals ( VAR_2 ) ) COND TYPE_1 . METHOD_2 ( entity ) . equals ( VAR_2 ) ( THEN THEN (  return STRING_1 ; )  return STRING_1 ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( ( java.lang.String ) ( VAR_1 [ 2 ] ) ) ) INIT = ( ( java.lang.String ) ( VAR_1 [ 2 ] ) ) ) VAR VAR (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<java.lang.Integer,java.lang.String> ) TYPE java.util.Map<java.lang.Integer,java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . getInstance ( ) . get ( VAR_2 class ) . METHOD_2 ( ) ) INIT = TYPE_1 . getInstance ( ) . get ( VAR_2 class ) . METHOD_2 ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_2<java.lang.Integer,java.lang.String> ) TYPE TYPE_2<java.lang.Integer,java.lang.String> ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_1 . METHOD_3 ( ) ) IN VAR_1 . METHOD_3 ( ) ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_4 . METHOD_4 ( VAR_3 . getValue ( ) ) ) INIT = TYPE_4 . METHOD_4 ( VAR_3 . getValue ( ) ) ) VAR VAR ( IF IF ( COND VAR_4 != null ) COND VAR_4 != null ( THEN THEN (  VAR_5 . put ( VAR_3 . METHOD_5 ( ) , VAR_4 ) )  VAR_5 . put ( VAR_3 . METHOD_5 ( ) , VAR_4 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN org.ovirt.engine.core.common.businessentities.network.Network ) RETURN org.ovirt.engine.core.common.businessentities.network.Network ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.network.Network ) TYPE org.ovirt.engine.core.common.businessentities.network.Network ( NAME VAR_2 ) NAME VAR_2 ( INIT = null ) INIT = null ) VAR VAR ( IF IF ( COND ( VAR_1 . METHOD_2 ( ) ) != null ) COND ( VAR_1 . METHOD_2 ( ) ) != null ( THEN THEN (  VAR_2 = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . get ( VAR_1 . METHOD_2 ( ) ) )  VAR_2 = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . get ( VAR_1 . METHOD_2 ( ) ) ) THEN THEN ) IF IF (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( METHOD_3 ( ) ) )  METHOD_2 ( METHOD_3 ( ) ) (  VAR_1 . METHOD_4 ( ) )  VAR_1 . METHOD_4 ( ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . getModel ( 2 ) ) INIT = TYPE_2 . getModel ( 2 ) ) VAR VAR (  VAR_2 . METHOD_5 ( ) . METHOD_6 ( null ) )  VAR_2 . METHOD_5 ( ) . METHOD_6 ( null ) ( TRY TRY ( BLOCK BLOCK (  VAR_3 . add ( VAR_2 ) )  VAR_3 . add ( VAR_2 ) (  METHOD_7 ( STRING_1 ) )  METHOD_7 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK (  METHOD_8 ( e . METHOD_9 ( ) ) )  METHOD_8 ( e . METHOD_9 ( ) ) (  assertEquals ( INT_1 , e . METHOD_9 ( ) . getStatus ( ) ) )  assertEquals ( INT_1 , e . METHOD_9 ( ) . getStatus ( ) ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_2 . METHOD_2 ( ) ) INIT = VAR_2 . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND VAR_3 == null ) COND VAR_3 == null ( THEN THEN (  VAR_4 . METHOD_3 ( ( STRING_1 + STRING_2 ) , VAR_2 . getName ( ) ) )  VAR_4 . METHOD_3 ( ( STRING_1 + STRING_2 ) , VAR_2 . getName ( ) ) (  return ; )  return ; ) THEN THEN ) IF IF (  METHOD_4 ( VAR_1 , VAR_3 ) )  METHOD_4 ( VAR_1 , VAR_3 ) (  METHOD_5 ( VAR_1 , VAR_3 ) )  METHOD_5 ( VAR_1 , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( STRING_1 , VAR_2 , STRING_2 , STRING_3 ) ) INIT = METHOD_2 ( STRING_1 , VAR_2 , STRING_2 , STRING_3 ) ) VAR VAR (  parameters . METHOD_3 ( VAR_1 ) )  parameters . METHOD_3 ( VAR_1 ) (  parameters . METHOD_4 ( VAR_3 ) )  parameters . METHOD_4 ( VAR_3 ) (  org.mockito.Mockito.doReturn ( VAR_4 ) . when ( METHOD_5 ( ) ) . METHOD_6 ( ) )  org.mockito.Mockito.doReturn ( VAR_4 ) . when ( METHOD_5 ( ) ) . METHOD_6 ( ) (  org.mockito.Mockito.when ( METHOD_5 ( ) . METHOD_7 ( ) . get ( VAR_1 . METHOD_8 ( ) ) ) . thenReturn ( VAR_1 ) )  org.mockito.Mockito.when ( METHOD_5 ( ) . METHOD_7 ( ) . get ( VAR_1 . METHOD_8 ( ) ) ) . thenReturn ( VAR_1 ) (  TYPE_2 . METHOD_9 ( METHOD_5 ( ) ) )  TYPE_2 . METHOD_9 ( METHOD_5 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_1 ) ( model ) ) ) INIT = ( ( TYPE_1 ) ( model ) ) ) VAR VAR (  VAR_3 = ( ( java.util.ArrayList < TYPE_2 > ) ( ( ( TYPE_3 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) ) )  VAR_3 = ( ( java.util.ArrayList < TYPE_2 > ) ( ( ( TYPE_3 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) ) (  VAR_2 . METHOD_2 ( VAR_4 ) )  VAR_2 . METHOD_2 ( VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME domain ) NAME domain ( INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( TYPE_2 . getParameters ( ) . METHOD_4 ( ) , TYPE_2 . getParameters ( ) . getStoragePoolId ( ) ) ) INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( TYPE_2 . getParameters ( ) . METHOD_4 ( ) , TYPE_2 . getParameters ( ) . getStoragePoolId ( ) ) ) VAR VAR ( IF IF ( COND ( domain != null ) && ( ( domain . METHOD_5 ( ) ) == ( VAR_1 ) ) ) COND ( domain != null ) && ( ( domain . METHOD_5 ( ) ) == ( VAR_1 ) ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) == null ) COND ( VAR_1 ) == null ( THEN THEN ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE char ) TYPE char ( NAME VAR_3 ) NAME VAR_3 ( IN TYPE_2 . getParameters ( ) . METHOD_2 ( ) . METHOD_3 ( ) ) IN TYPE_2 . getParameters ( ) . METHOD_2 ( ) . METHOD_3 ( ) ( BLOCK BLOCK ( IF IF ( COND ( VAR_4 . METHOD_4 ( VAR_3 ) ) != ( - 1 ) ) COND ( VAR_4 . METHOD_4 ( VAR_3 ) ) != ( - 1 ) ( THEN THEN (  VAR_2 . append ( VAR_3 ) )  VAR_2 . append ( VAR_3 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  VAR_1 = VAR_2 . toString ( ) )  VAR_1 = VAR_2 . toString ( ) ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME vmId ) NAME vmId ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND source == null ) COND source == null ( THEN THEN (  return new java.util.ArrayList < TYPE_1 > ( ) ; )  return new java.util.ArrayList < TYPE_1 > ( ) ; ) THEN THEN ) IF IF (  return source ; )  return source ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < TYPE_1 > ( ) ; } return source ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < TYPE_1 > ( ) ; } return source ; } } (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_1 ) ( target ) ) ) INIT = ( ( TYPE_1 ) ( target ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Disk> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Disk> ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Disk > ) ( returnValue ) ) ) INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Disk > ) ( returnValue ) ) ) VAR VAR (  VAR_1 . METHOD_2 ( VAR_2 ) )  VAR_1 . METHOD_2 ( VAR_2 ) (  VAR_1 . METHOD_3 ( ) )  VAR_1 . METHOD_3 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source != null ? ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; )  return source != null ? ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; } } (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new TYPE_2 ( ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new TYPE_2 ( ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDSGroup> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDSGroup> ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) . METHOD_3 ( VAR_2 . getId ( ) ) ) INIT = METHOD_2 ( ) . METHOD_3 ( VAR_2 . getId ( ) ) ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ( INIT = false ) INIT = false ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ) TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ( NAME cluster ) NAME cluster ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( IF IF ( COND cluster . getId ( ) . equals ( TYPE_1 . METHOD_4 ( VAR_4 ) ) ) COND cluster . getId ( ) . equals ( TYPE_1 . METHOD_4 ( VAR_4 ) ) ( THEN THEN (  VAR_3 = true )  VAR_3 = true (  break ; )  break ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME tempVar ) NAME tempVar ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  tempVar . METHOD_2 ( VAR_1 ) )  tempVar . METHOD_2 ( VAR_1 ) (  tempVar . METHOD_3 ( VAR_2 ) )  tempVar . METHOD_3 ( VAR_2 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_5 ) NAME VAR_5 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  VAR_5 . METHOD_2 ( VAR_3 ) )  VAR_5 . METHOD_2 ( VAR_3 ) (  VAR_5 . METHOD_3 ( VAR_4 ) )  VAR_5 . METHOD_3 ( VAR_4 ) ( VAR VAR ( TYPE java.util.ArrayList<TYPE_2> ) TYPE java.util.ArrayList<TYPE_2> ( NAME VAR_6 ) NAME VAR_6 ( INIT = new java.util.ArrayList < TYPE_2 > ( TYPE_3 . METHOD_4 ( new TYPE_2 [ ] { tempVar , VAR_5 } ) ) ) INIT = new java.util.ArrayList < TYPE_2 > ( TYPE_3 . METHOD_4 ( new TYPE_2 [ ] { tempVar , VAR_5 } ) ) ) VAR VAR (  METHOD_5 ( ) . add ( VAR_6 ) )  METHOD_5 ( ) . add ( VAR_6 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_2 . METHOD_2 ( false ) )  VAR_2 . METHOD_2 ( false ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_3 . METHOD_2 ( ( VAR_1 ? true : false ) ) )  VAR_3 . METHOD_2 ( ( VAR_1 ? true : false ) ) (  org.mockito.Mockito.when ( VAR_4 . METHOD_3 ( org.mockito.Mockito . METHOD_4 ( VAR_5 ) , TYPE_2 . any ( VAR_6 class ) ) ) . thenReturn ( VAR_2 ) . thenReturn ( VAR_3 ) )  org.mockito.Mockito.when ( VAR_4 . METHOD_3 ( org.mockito.Mockito . METHOD_4 ( VAR_5 ) , TYPE_2 . any ( VAR_6 class ) ) ) . thenReturn ( VAR_2 ) . thenReturn ( VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.Network ) TYPE org.ovirt.engine.core.common.businessentities.Network ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_3 ( VAR_2 , null , VAR_1 ) ) INIT = METHOD_3 ( VAR_2 , null , VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_3 != null ) COND VAR_3 != null ( THEN THEN (  return VAR_3 . getId ( ) . toString ( ) ; )  return VAR_3 . getId ( ) . toString ( ) ; ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME id ) NAME id ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME log ) NAME log ( INIT = org.mockito.Mockito . METHOD_2 ( VAR_1 class ) ) INIT = org.mockito.Mockito . METHOD_2 ( VAR_1 class ) ) VAR VAR (  org.mockito.Mockito.when ( log . METHOD_3 ( ) ) . thenReturn ( true ) )  org.mockito.Mockito.when ( log . METHOD_3 ( ) ) . thenReturn ( true ) (  TYPE_2 . METHOD_4 ( log , id , new TYPE_3 ( ) , new java.lang.Object ( ) ) )  TYPE_2 . METHOD_4 ( log , id , new TYPE_3 ( ) , new java.lang.Object ( ) ) (  org.mockito.Mockito . METHOD_5 ( log ) . METHOD_6 ( TYPE_4 . METHOD_7 ( VAR_2 ) , new java.lang.Object [ ] { TYPE_4 . METHOD_8 ( ) , TYPE_4 . METHOD_8 ( ) , TYPE_4 . METHOD_7 ( id ) } ) )  org.mockito.Mockito . METHOD_5 ( log ) . METHOD_6 ( TYPE_4 . METHOD_7 ( VAR_2 ) , new java.lang.Object [ ] { TYPE_4 . METHOD_8 ( ) , TYPE_4 . METHOD_8 ( ) , TYPE_4 . METHOD_7 ( id ) } ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . METHOD_2 ( ) . METHOD_3 ( VAR_2 . METHOD_2 ( ) ) ) INIT = VAR_1 . METHOD_2 ( ) . METHOD_3 ( VAR_2 . METHOD_2 ( ) ) ) VAR VAR ( IF IF ( COND VAR_3 != 0 ) COND VAR_3 != 0 ( THEN THEN (  return VAR_3 ; )  return VAR_3 ; ) THEN THEN ) IF IF (  return VAR_1 . METHOD_4 ( ) . getName ( ) . METHOD_3 ( VAR_2 . METHOD_4 ( ) . getName ( ) ) ; )  return VAR_1 . METHOD_4 ( ) . getName ( ) . METHOD_3 ( VAR_2 . METHOD_4 ( ) . getName ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME template ) NAME template ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  template . setId ( VAR_1 ) )  template . setId ( VAR_1 ) (  template . METHOD_2 ( new TYPE_2 . StorageDomain ( ) ) )  template . METHOD_2 ( new TYPE_2 . StorageDomain ( ) ) (  template . METHOD_3 ( ) . setId ( VAR_2 ) )  template . METHOD_3 ( ) . setId ( VAR_2 ) (  template = TYPE_3 . METHOD_4 ( METHOD_5 ( ) , template ) )  template = TYPE_3 . METHOD_4 ( METHOD_5 ( ) , template ) (  assertEquals ( VAR_3 , template . METHOD_6 ( ) ) )  assertEquals ( VAR_3 , template . METHOD_6 ( ) ) (  assertEquals ( VAR_4 , template . METHOD_3 ( ) . METHOD_6 ( ) ) )  assertEquals ( VAR_4 , template . METHOD_3 ( ) . METHOD_6 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Version ) TYPE org.ovirt.engine.core.compat.Version ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME result ) NAME result ( INIT = true ) INIT = true ) VAR VAR ( IF IF ( COND ( VAR_1 == null ) || ( ! ( VAR_2 < TYPE_1 < org.ovirt.engine.core.compat . Version > > METHOD_2 ( VAR_3 ) . METHOD_3 ( VAR_1 ) ) ) ) COND ( VAR_1 == null ) || ( ! ( VAR_2 < TYPE_1 < org.ovirt.engine.core.compat . Version > > METHOD_2 ( VAR_3 ) . METHOD_3 ( VAR_1 ) ) ) ( THEN THEN (  result = false )  result = false ) THEN THEN ) IF IF (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_1 ) ( target ) ) ) INIT = ( ( TYPE_1 ) ( target ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2<org.ovirt.engine.core.common.businessentities.VDS> ) TYPE TYPE_2<org.ovirt.engine.core.common.businessentities.VDS> ( NAME hosts ) NAME hosts ( INIT = ( ( TYPE_2 < org.ovirt.engine.core.common.businessentities.VDS > ) ( returnValue ) ) ) INIT = ( ( TYPE_2 < org.ovirt.engine.core.common.businessentities.VDS > ) ( returnValue ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ) INIT = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME host ) NAME host ( IN hosts ) IN hosts ( BLOCK BLOCK ( IF IF ( COND METHOD_2 ( host ) ) COND METHOD_2 ( host ) ( THEN THEN (  VAR_2 . add ( host ) )  VAR_2 . add ( host ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  VAR_1 . METHOD_3 ( ) . setItems ( VAR_2 ) )  VAR_1 . METHOD_3 ( ) . setItems ( VAR_2 ) (  METHOD_4 ( ) )  METHOD_4 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( getWindow ( ) ) != null ) COND ( getWindow ( ) ) != null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( this ) ) INIT = new TYPE_1 ( this ) ) VAR VAR (  METHOD_2 ( VAR_1 ) )  METHOD_2 ( VAR_1 ) (  VAR_1 . METHOD_3 ( ) . setItems ( TYPE_2 . METHOD_4 ( getEntity ( ) ) ) )  VAR_1 . METHOD_3 ( ) . setItems ( TYPE_2 . METHOD_4 ( getEntity ( ) ) ) (  VAR_1 . METHOD_3 ( ) . setSelectedItem ( getEntity ( ) ) )  VAR_1 . METHOD_3 ( ) . setSelectedItem ( getEntity ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = dao . METHOD_2 ( VAR_2 , VAR_3 ) ) INIT = dao . METHOD_2 ( VAR_2 , VAR_3 ) ) VAR VAR (  TYPE_2 . METHOD_3 ( ( ( VAR_1 . size ( ) ) == 1 ) ) )  TYPE_2 . METHOD_3 ( ( ( VAR_1 . size ( ) ) == 1 ) ) (  TYPE_2 . METHOD_4 ( VAR_1 . isEmpty ( ) ) )  TYPE_2 . METHOD_4 ( VAR_1 . isEmpty ( ) ) (  dao . METHOD_5 ( VAR_2 , VAR_3 ) )  dao . METHOD_5 ( VAR_2 , VAR_3 ) ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_4 ) NAME VAR_4 ( INIT = dao . METHOD_2 ( VAR_2 , VAR_3 ) ) INIT = dao . METHOD_2 ( VAR_2 , VAR_3 ) ) VAR VAR (  TYPE_2 . METHOD_3 ( VAR_4 . isEmpty ( ) ) )  TYPE_2 . METHOD_3 ( VAR_4 . isEmpty ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR (  command = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , VAR_1 ) , null ) ) )  command = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , VAR_1 ) , null ) ) (  org.mockito.Mockito.doReturn ( vds ) . when ( command ) . METHOD_4 ( ) )  org.mockito.Mockito.doReturn ( vds ) . when ( command ) . METHOD_4 ( ) (  TYPE_3 . METHOD_5 ( command . validate ( ) ) )  TYPE_3 . METHOD_5 ( command . validate ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME map ) NAME map ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME template ) NAME template ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ( INIT = null ) INIT = null ) VAR VAR ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN ( SWITCH SWITCH ( NAME VAR_1 ) NAME VAR_1 ( CASE VAR_2 ( BLOCK BLOCK (  result = VAR_3 )  result = VAR_3 (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_2 ( CASE VAR_4 ( BLOCK BLOCK (  result = VAR_5 )  result = VAR_5 (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_4 ( CASE VAR_6 ( BLOCK BLOCK (  result = VAR_7 )  result = VAR_7 (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_6 ( DEFAULT DEFAULT ( BLOCK BLOCK (  result = VAR_7 )  result = VAR_7 (  break ; )  break ; ) BLOCK BLOCK ) DEFAULT DEFAULT ) SWITCH SWITCH ) THEN THEN ) IF IF (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.VdcActionType ) TYPE TYPE_1.VdcActionType ( NAME action ) NAME action ) VAR VAR ( VAR VAR ( TYPE TYPE_1.VdcActionParametersBase ) TYPE TYPE_1.VdcActionParametersBase ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( METHOD_2 ( ) ) == null ) COND ( METHOD_2 ( ) ) == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME model ) NAME model ( INIT = ( ( TYPE_2 ) ( METHOD_2 ( ) ) ) ) INIT = ( ( TYPE_2 ) ( METHOD_2 ( ) ) ) ) VAR VAR (  model . METHOD_3 ( null ) )  model . METHOD_3 ( null ) ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_4 ) NAME METHOD_4 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  model . METHOD_5 ( ) )  model . METHOD_5 ( ) (  METHOD_6 ( null ) )  METHOD_6 ( null ) ) BLOCK BLOCK ) METHOD METHOD (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_1 ( action , VAR_1 , new TYPE_3 ( ) { public void METHOD_4 ( TYPE_4 result ) { model . METHOD_5 ( ) ; METHOD_6 ( null ) ; } } ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_1 ( action , VAR_1 , new TYPE_3 ( ) { public void METHOD_4 ( TYPE_4 result ) { model . METHOD_5 ( ) ; METHOD_6 ( null ) ; } } ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . getInstance ( ) . METHOD_2 ( VAR_1 class , VAR_2 ) )  TYPE_1 . getInstance ( ) . METHOD_2 ( VAR_1 class , VAR_2 ) (  org.mockito.Mockito.when ( VAR_2 . METHOD_3 ( ) ) . thenReturn ( TYPE_2 . METHOD_4 ( ) ) )  org.mockito.Mockito.when ( VAR_2 . METHOD_3 ( ) ) . thenReturn ( TYPE_2 . METHOD_4 ( ) ) (  METHOD_5 ( ) )  METHOD_5 ( ) (  VAR_3 = new java.util.ArrayList < > ( ) )  VAR_3 = new java.util.ArrayList < > ( ) (  VAR_4 = STRING_1 )  VAR_4 = STRING_1 (  VAR_5 = STRING_2 )  VAR_5 = STRING_2 (  VAR_6 = new TYPE_3 ( vm , VAR_3 , version , VAR_4 , VAR_5 ) )  VAR_6 = new TYPE_3 ( vm , VAR_3 , version , VAR_4 , VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1.ValidationResult ) RETURN TYPE_1.ValidationResult ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME value ) NAME value ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.ValidationResult ) TYPE TYPE_1.ValidationResult ( NAME result ) NAME result ( INIT = new TYPE_1 . ValidationResult ( ) ) INIT = new TYPE_1 . ValidationResult ( ) ) VAR VAR ( IF IF ( COND ( value != null ) && ( ( value . length ( ) ) > ( METHOD_2 ( ) ) ) ) COND ( value != null ) && ( ( value . length ( ) ) > ( METHOD_2 ( ) ) ) ( THEN THEN (  result . METHOD_3 ( false ) )  result . METHOD_3 ( false ) (  result . METHOD_4 ( ) . add ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . METHOD_5 ( ) . METHOD_6 ( METHOD_2 ( ) ) ) )  result . METHOD_4 ( ) . add ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . METHOD_5 ( ) . METHOD_6 ( METHOD_2 ( ) ) ) ) THEN THEN ) IF IF (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  METHOD_3 ( ) )  METHOD_3 ( ) (  org.mockito.Mockito.when ( VAR_1 . METHOD_4 ( ) ) . thenReturn ( false ) )  org.mockito.Mockito.when ( VAR_1 . METHOD_4 ( ) ) . thenReturn ( false ) (  VAR_2 = org.mockito.Mockito . METHOD_5 ( new TYPE_1 ( VAR_1 , vds , org.mockito.Mockito . METHOD_6 ( VAR_3 class ) , VAR_4 , VAR_5 , VAR_6 ) ) )  VAR_2 = org.mockito.Mockito . METHOD_5 ( new TYPE_1 ( VAR_1 , vds , org.mockito.Mockito . METHOD_6 ( VAR_3 class ) , VAR_4 , VAR_5 , VAR_6 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1.ValidationResult ) RETURN TYPE_1.ValidationResult ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME value ) NAME value ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.ValidationResult ) TYPE TYPE_1.ValidationResult ( NAME result ) NAME result ( INIT = new TYPE_1 . ValidationResult ( ) ) INIT = new TYPE_1 . ValidationResult ( ) ) VAR VAR (  result . METHOD_2 ( false ) )  result . METHOD_2 ( false ) (  result . METHOD_3 ( ) . METHOD_4 ( ) )  result . METHOD_3 ( ) . METHOD_4 ( ) (  result . METHOD_3 ( ) . add ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_5 ( ) ) )  result . METHOD_3 ( ) . add ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_5 ( ) ) (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( VAR_2 . METHOD_2 ( ) ) != null ) && ( ( VAR_2 . METHOD_3 ( ) ) != null ) ) COND ( ( VAR_2 . METHOD_2 ( ) ) != null ) && ( ( VAR_2 . METHOD_3 ( ) ) != null ) ( THEN THEN (  VAR_1 . METHOD_4 ( STRING_1 , java.lang.String . METHOD_5 ( STRING_2 , new TYPE_2 ( 0 ) . METHOD_6 ( java.lang.String . METHOD_5 ( STRING_3 , VAR_2 . METHOD_2 ( ) , VAR_2 . METHOD_3 ( ) ) . METHOD_7 ( VAR_3 ) ) ) . toString ( ) ) )  VAR_1 . METHOD_4 ( STRING_1 , java.lang.String . METHOD_5 ( STRING_2 , new TYPE_2 ( 0 ) . METHOD_6 ( java.lang.String . METHOD_5 ( STRING_3 , VAR_2 . METHOD_2 ( ) , VAR_2 . METHOD_3 ( ) ) . METHOD_7 ( VAR_3 ) ) ) . toString ( ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_1 ) ( target ) ) ) INIT = ( ( TYPE_1 ) ( target ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.ArrayList<TYPE_2> ) TYPE java.util.ArrayList<TYPE_2> ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( java.util.ArrayList < TYPE_2 > ) ( returnValue ) ) ) INIT = ( ( java.util.ArrayList < TYPE_2 > ) ( returnValue ) ) ) VAR VAR (  VAR_3 = VAR_2 )  VAR_3 = VAR_2 (  VAR_1 . METHOD_2 ( ) )  VAR_1 . METHOD_2 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ! ( super . METHOD_1 ( ) ) ) COND ! ( super . METHOD_1 ( ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( IF IF ( COND ( getParameters ( ) . METHOD_2 ( ) ) == null ) COND ( getParameters ( ) . METHOD_2 ( ) ) == null ( THEN THEN (  addCanDoActionMessage ( VAR_1 ) )  addCanDoActionMessage ( VAR_1 ) (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDS> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDS> ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_3 ( getParameters ( ) . METHOD_2 ( ) ) ) INIT = METHOD_3 ( getParameters ( ) . METHOD_2 ( ) ) ) VAR VAR ( IF IF ( COND ( VAR_2 == null ) || ( VAR_2 . isEmpty ( ) ) ) COND ( VAR_2 == null ) || ( VAR_2 . isEmpty ( ) ) ( THEN THEN (  addCanDoActionMessage ( VAR_3 ) )  addCanDoActionMessage ( VAR_3 ) (  return false ; )  return false ; ) THEN THEN ) IF IF (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , STRING_1 , STRING_2 , VAR_2 , null , null , TYPE_3 . METHOD_3 ( METHOD_4 ( STRING_3 , null ) ) ) ) ) )  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , STRING_1 , STRING_2 , VAR_2 , null , null , TYPE_3 . METHOD_3 ( METHOD_4 ( STRING_3 , null ) ) ) ) ) (  METHOD_5 ( cmd , VAR_3 ) )  METHOD_5 ( cmd , VAR_3 ) (  TYPE_4 . METHOD_6 ( cmd . validate ( ) ) )  TYPE_4 . METHOD_6 ( cmd . validate ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( ( ( VAR_1 . METHOD_3 ( VAR_2 ) ) < 0 ) ) )  TYPE_1 . METHOD_2 ( ( ( VAR_1 . METHOD_3 ( VAR_2 ) ) < 0 ) ) (  TYPE_1 . METHOD_2 ( ( ( VAR_2 . METHOD_3 ( VAR_1 ) ) > 0 ) ) )  TYPE_1 . METHOD_2 ( ( ( VAR_2 . METHOD_3 ( VAR_1 ) ) > 0 ) ) (  TYPE_1 . METHOD_2 ( ( ( VAR_1 . METHOD_3 ( new org.ovirt.engine.core.compat . Version ( STRING_1 ) ) ) == 0 ) ) )  TYPE_1 . METHOD_2 ( ( ( VAR_1 . METHOD_3 ( new org.ovirt.engine.core.compat . Version ( STRING_1 ) ) ) == 0 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( STRING_1 ) ) INIT = TYPE_2 . METHOD_2 ( STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_3 ( org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) ) ) INIT = TYPE_2 . METHOD_3 ( org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) ) ) VAR VAR (  org.mockito.Mockito.when ( VAR_3 . METHOD_5 ( org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) , VAR_2 . METHOD_6 ( ) ) ) . thenReturn ( VAR_2 ) )  org.mockito.Mockito.when ( VAR_3 . METHOD_5 ( org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) , VAR_2 . METHOD_6 ( ) ) ) . thenReturn ( VAR_2 ) ( VAR VAR ( TYPE TYPE_4<java.lang.String,java.lang.String> ) TYPE TYPE_4<java.lang.String,java.lang.String> ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_5 . METHOD_7 ( VAR_2 . METHOD_8 ( ) , VAR_1 ) ) INIT = VAR_5 . METHOD_7 ( VAR_2 . METHOD_8 ( ) , VAR_1 ) ) VAR VAR (  TYPE_2 . METHOD_9 ( VAR_4 , VAR_1 . METHOD_10 ( ) , VAR_1 . METHOD_11 ( ) ) )  TYPE_2 . METHOD_9 ( VAR_4 , VAR_1 . METHOD_10 ( ) , VAR_1 . METHOD_11 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  this . VAR_2 = new TYPE_3 ( VAR_3 , METHOD_2 ( false ) , VAR_1 ) )  this . VAR_2 = new TYPE_3 ( VAR_3 , METHOD_2 ( false ) , VAR_1 ) (  this . VAR_2 . METHOD_3 ( ) )  this . VAR_2 . METHOD_3 ( ) ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_5 ) INIT = VAR_5 ) VAR VAR (  VAR_6 . METHOD_4 ( ) )  VAR_6 . METHOD_4 ( ) (  VAR_7 = this . VAR_3 . METHOD_5 ( VAR_8 , ( VAR_4 |= VAR_9 ) , this ) )  VAR_7 = this . VAR_3 . METHOD_5 ( VAR_8 , ( VAR_4 |= VAR_9 ) , this ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4|TYPE_5 ) TYPE TYPE_4|TYPE_5 ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_10 . error ( STRING_1 , e ) )  VAR_10 . error ( STRING_1 , e ) (  throw new TYPE_2 ( e ) ; )  throw new TYPE_2 ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = dao . METHOD_2 ( VAR_2 , VAR_3 ) ) INIT = dao . METHOD_2 ( VAR_2 , VAR_3 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_1 . get ( 0 ) ) INIT = VAR_1 . get ( 0 ) ) VAR VAR (  TYPE_2 . METHOD_3 ( VAR_4 ) )  TYPE_2 . METHOD_3 ( VAR_4 ) (  TYPE_2 . assertEquals ( true , ( ( VAR_1 . size ( ) ) == 1 ) ) )  TYPE_2 . assertEquals ( true , ( ( VAR_1 . size ( ) ) == 1 ) ) (  TYPE_2 . assertEquals ( VAR_4 . METHOD_4 ( ) , new java.lang.Integer ( INT_1 ) ) )  TYPE_2 . assertEquals ( VAR_4 . METHOD_4 ( ) , new java.lang.Integer ( INT_1 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<TYPE_1.VdcActionType> ) TYPE java.util.List<TYPE_1.VdcActionType> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_1.VdcActionParametersBase> ) TYPE java.util.List<TYPE_1.VdcActionParametersBase> ( NAME parameters ) NAME parameters ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_1 ( VAR_1 , parameters , VAR_2 , VAR_3 , VAR_4 , false , null ) )  METHOD_1 ( VAR_1 , parameters , VAR_2 , VAR_3 , VAR_4 , false , null ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  METHOD_3 ( ) )  METHOD_3 ( ) (  METHOD_4 ( true ) )  METHOD_4 ( true ) (  TYPE_1 . METHOD_5 ( command . METHOD_6 ( ) ) )  TYPE_1 . METHOD_5 ( command . METHOD_6 ( ) ) (  TYPE_1 . METHOD_7 ( command . getReturnValue ( ) . METHOD_8 ( ) . METHOD_9 ( TYPE_2 . toString ( ) ) ) )  TYPE_1 . METHOD_7 ( command . getReturnValue ( ) . METHOD_8 ( ) . METHOD_9 ( TYPE_2 . toString ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND source == null ) COND source == null ( THEN THEN (  return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Network > ( ) ; )  return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Network > ( ) ; ) THEN THEN ) IF IF (  return source ; )  return source ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Network > ( ) ; } return source ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Network > ( ) ; } return source ; } } (  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new TYPE_1 ( VAR_1 ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new TYPE_1 ( VAR_1 ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( STRING_1 ) )  VAR_1 . METHOD_2 ( STRING_1 ) ( IF IF ( COND ( VAR_2 ) != null ) COND ( VAR_2 ) != null ( THEN THEN ( TRY TRY ( BLOCK BLOCK (  VAR_2 . METHOD_1 ( ) )  VAR_2 . METHOD_1 ( ) (  VAR_2 = null )  VAR_2 = null ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_1 . METHOD_3 ( STRING_2 , e ) )  VAR_1 . METHOD_3 ( STRING_2 , e ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.List<org.ovirt.engine.core.common.businessentities.VdsNetworkInterface> ) RETURN java.util.List<org.ovirt.engine.core.common.businessentities.VdsNetworkInterface> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VdsNetworkInterface> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VdsNetworkInterface> ( NAME VAR_3 ) NAME VAR_3 ( INIT = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . VdsNetworkInterface > ( VAR_2 ) ) INIT = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . VdsNetworkInterface > ( VAR_2 ) ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < VAR_2 ) COND i < VAR_2 ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME nic ) NAME nic ( INIT = METHOD_2 ( ( STRING_1 + i ) , null ) ) INIT = METHOD_2 ( ( STRING_1 + i ) , null ) ) VAR VAR ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN (  nic = METHOD_3 ( nic , VAR_1 ) )  nic = METHOD_3 ( nic , VAR_1 ) ) THEN THEN ) IF IF (  VAR_3 . add ( nic ) )  VAR_3 . add ( nic ) ) BLOCK BLOCK ) FOR FOR (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR (  TYPE_4 . doReturn ( VAR_1 ) . when ( VAR_2 ) . METHOD_2 ( VAR_3 ) )  TYPE_4 . doReturn ( VAR_1 ) . when ( VAR_2 ) . METHOD_2 ( VAR_3 ) (  org.mockito.Mockito.when ( VAR_3 . METHOD_3 ( VAR_4 ) ) . thenReturn ( null ) )  org.mockito.Mockito.when ( VAR_3 . METHOD_3 ( VAR_4 ) ) . thenReturn ( null ) (  VAR_2 . METHOD_4 ( VAR_3 , VAR_5 ) )  VAR_2 . METHOD_4 ( VAR_3 , VAR_5 ) (  org.mockito.Mockito . METHOD_5 ( VAR_5 ) . METHOD_6 ( VAR_6 , VAR_1 ) )  org.mockito.Mockito . METHOD_5 ( VAR_5 ) . METHOD_6 ( VAR_6 , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( getParameters ( ) . METHOD_2 ( ) ) ) INIT = new TYPE_1 ( getParameters ( ) . METHOD_2 ( ) ) ) VAR VAR (  return ( ( ( validate ( VAR_1 . METHOD_3 ( ) ) ) && ( validate ( VAR_1 . METHOD_4 ( ) ) ) ) && ( validate ( VAR_1 . METHOD_5 ( ) ) ) ) && ( validate ( VAR_1 . METHOD_6 ( ) ) ) ; )  return ( ( ( validate ( VAR_1 . METHOD_3 ( ) ) ) && ( validate ( VAR_1 . METHOD_4 ( ) ) ) ) && ( validate ( VAR_1 . METHOD_5 ( ) ) ) ) && ( validate ( VAR_1 . METHOD_6 ( ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1.ValidationResult ) RETURN TYPE_1.ValidationResult ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( ( VAR_1 . METHOD_2 ( ) ) == ( VAR_2 ) ) && ( ! ( VAR_3 < java.lang.Boolean > METHOD_3 ( VAR_4 , VAR_1 . METHOD_4 ( ) . toString ( ) ) ) ) ) COND ( ( VAR_1 . METHOD_2 ( ) ) == ( VAR_2 ) ) && ( ! ( VAR_3 < java.lang.Boolean > METHOD_3 ( VAR_4 , VAR_1 . METHOD_4 ( ) . toString ( ) ) ) ) ( THEN THEN (  return new TYPE_1 . ValidationResult ( VAR_5 ) ; )  return new TYPE_1 . ValidationResult ( VAR_5 ) ; ) THEN THEN ) IF IF (  return VAR_6 ; )  return VAR_6 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1.StorageDomain ) RETURN TYPE_1.StorageDomain ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.StorageDomain ) TYPE TYPE_1.StorageDomain ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE TYPE_1.StorageDomain ) TYPE TYPE_1.StorageDomain ( NAME entity ) NAME entity ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND TYPE_2 . equals ( entity . METHOD_2 ( ) ) ) COND TYPE_2 . equals ( entity . METHOD_2 ( ) ) ( THEN THEN (  model . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_1 ) ) )  model . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_1 ) ) ) THEN THEN ( ELSE ELSE (  model . METHOD_3 ( null ) )  model . METHOD_3 ( null ) ) ELSE ELSE ) IF IF (  return super . METHOD_1 ( model , entity ) ; )  return super . METHOD_1 ( model , entity ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME returnValue ) NAME returnValue ( INIT = TYPE_2 . METHOD_2 ( VAR_1 , METHOD_3 ( ) , TYPE_3 . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( ) , true ) ) INIT = TYPE_2 . METHOD_2 ( VAR_1 , METHOD_3 ( ) , TYPE_3 . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( ) , true ) ) VAR VAR (  TYPE_3 . getReturnValue ( ) . METHOD_7 ( returnValue . METHOD_8 ( ) ) )  TYPE_3 . getReturnValue ( ) . METHOD_7 ( returnValue . METHOD_8 ( ) ) (  return returnValue . METHOD_9 ( ) ; )  return returnValue . METHOD_9 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VdsNetworkInterface> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VdsNetworkInterface> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface[] ) TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface[] ( NAME VAR_3 ) NAME VAR_3 ( INIT = new org.ovirt.engine.core.common.businessentities . VdsNetworkInterface [ ( VAR_2 . size ( ) ) + 1 ] ) INIT = new org.ovirt.engine.core.common.businessentities . VdsNetworkInterface [ ( VAR_2 . size ( ) ) + 1 ] ) VAR VAR (  VAR_2 . METHOD_2 ( VAR_3 ) )  VAR_2 . METHOD_2 ( VAR_3 ) (  VAR_3 [ ( ( VAR_3 . length ) - 1 ) ] = VAR_1 )  VAR_3 [ ( ( VAR_3 . length ) - 1 ) ] = VAR_1 (  METHOD_3 ( VAR_3 ) )  METHOD_3 ( VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND result != null ) COND result != null ( THEN THEN ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ( INIT = ( ( org.ovirt.engine.core.common.businessentities.VM ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( result ) ) . getReturnValue ( ) ) ) ) INIT = ( ( org.ovirt.engine.core.common.businessentities.VM ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( result ) ) . getReturnValue ( ) ) ) ) VAR VAR ( IF IF ( COND vm == null ) COND vm == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_2 ) ( model ) ) ) INIT = ( ( TYPE_2 ) ( model ) ) ) VAR VAR (  VAR_1 . METHOD_1 ( vm ) )  VAR_1 . METHOD_1 ( vm ) (  VAR_1 . METHOD_2 ( ) )  VAR_1 . METHOD_2 ( ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2.Disk ) TYPE TYPE_2.Disk ( NAME object ) NAME object ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( object . METHOD_2 ( ) ) != null ) COND ( object . METHOD_2 ( ) ) != null ( THEN THEN ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_3 . METHOD_3 ( STRING_1 ) . METHOD_4 ( object . METHOD_2 ( ) ) ) INIT = TYPE_3 . METHOD_3 ( STRING_1 ) . METHOD_4 ( object . METHOD_2 ( ) ) ) VAR VAR (  return TYPE_4 . METHOD_5 ( VAR_2 . METHOD_6 ( VAR_1 ) ) ; )  return TYPE_4 . METHOD_5 ( VAR_2 . METHOD_6 ( VAR_1 ) ) ; ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) ( VAR VAR ( TYPE java.util.ArrayList<TYPE_1.DiskImage> ) TYPE java.util.ArrayList<TYPE_1.DiskImage> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList ( TYPE_2 . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( ) ) ) INIT = new java.util.ArrayList ( TYPE_2 . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( ) ) ) VAR VAR (  METHOD_6 ( TYPE_2 . METHOD_7 ( ) . getStoragePoolId ( ) , VAR_1 ) )  METHOD_6 ( TYPE_2 . METHOD_7 ( ) . getStoragePoolId ( ) , VAR_1 ) (  TYPE_2 . METHOD_3 ( ) . METHOD_8 ( VAR_1 ) )  TYPE_2 . METHOD_3 ( ) . METHOD_8 ( VAR_1 ) ( IF IF ( COND ( TYPE_2 . METHOD_9 ( ) ) && ( ! ( METHOD_10 ( VAR_2 , VAR_3 ) ) ) ) COND ( TYPE_2 . METHOD_9 ( ) ) && ( ! ( METHOD_10 ( VAR_2 , VAR_3 ) ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  return super . METHOD_1 ( ) ; )  return super . METHOD_1 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<TYPE_1.VdcActionParametersBase> ) TYPE java.util.ArrayList<TYPE_1.VdcActionParametersBase> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < TYPE_1 . VdcActionParametersBase > ( ) ) INIT = new java.util.ArrayList < TYPE_1 . VdcActionParametersBase > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME a ) NAME a ( IN VAR_2 . METHOD_2 ( ) ) IN VAR_2 . METHOD_2 ( ) ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.network.Network ) TYPE org.ovirt.engine.core.common.businessentities.network.Network ( NAME network ) NAME network ( INIT = ( ( org.ovirt.engine.core.common.businessentities.network.Network ) ( a ) ) ) INIT = ( ( org.ovirt.engine.core.common.businessentities.network.Network ) ( a ) ) ) VAR VAR (  VAR_1 . add ( new TYPE_2 ( network . METHOD_3 ( ) . getValue ( ) , network ) ) )  VAR_1 . add ( new TYPE_2 ( network . METHOD_3 ( ) . getValue ( ) , network ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  org.ovirt.engine.ui.frontend.Frontend . METHOD_4 ( VAR_3 , VAR_1 ) )  org.ovirt.engine.ui.frontend.Frontend . METHOD_4 ( VAR_3 , VAR_1 ) (  VAR_2 . METHOD_5 ( null ) )  VAR_2 . METHOD_5 ( null ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_2 ( ) )  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_2 ( ) (  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( command ) . METHOD_3 ( TYPE_1 . any ( ) ) )  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( command ) . METHOD_3 ( TYPE_1 . any ( ) ) (  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( command ) . METHOD_4 ( TYPE_1 . any ( ) , TYPE_1 . any ( ) ) )  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( command ) . METHOD_4 ( TYPE_1 . any ( ) , TYPE_1 . any ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1<TYPE_2<TYPE_3,TYPE_4<TYPE_5>>> ) RETURN TYPE_1<TYPE_2<TYPE_3,TYPE_4<TYPE_5>>> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<TYPE_2<TYPE_3,TYPE_4<TYPE_5>>> ) TYPE TYPE_1<TYPE_2<TYPE_3,TYPE_4<TYPE_5>>> ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . get ( VAR_1 ) ) INIT = VAR_3 . get ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_2 == null ) COND VAR_2 == null ( THEN THEN (  VAR_2 = new TYPE_6 < TYPE_2 < TYPE_3 , TYPE_4 < TYPE_5 > > > ( ) )  VAR_2 = new TYPE_6 < TYPE_2 < TYPE_3 , TYPE_4 < TYPE_5 > > > ( ) (  VAR_3 . put ( VAR_1 , VAR_2 ) )  VAR_3 . put ( VAR_1 , VAR_2 ) ) THEN THEN ) IF IF (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME result ) NAME result ( INIT = METHOD_2 ( ) . METHOD_3 ( VAR_1 ) ) INIT = METHOD_2 ( ) . METHOD_3 ( VAR_1 ) ) VAR VAR (  TYPE_2 . assertEquals ( 1 , result . size ( ) ) )  TYPE_2 . assertEquals ( 1 , result . size ( ) ) (  TYPE_2 . assertEquals ( new TYPE_1 ( VAR_2 , VAR_1 ) , result . get ( 0 ) ) )  TYPE_2 . assertEquals ( new TYPE_1 ( VAR_2 , VAR_1 ) , result . get ( 0 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( VAR_1 [ 0 ] , true ) )  METHOD_2 ( VAR_1 [ 0 ] , true ) (  VAR_2 . METHOD_3 ( ) )  VAR_2 . METHOD_3 ( ) ( TRY TRY ( BLOCK BLOCK (  resource . METHOD_4 ( ) )  resource . METHOD_4 ( ) (  METHOD_5 ( STRING_1 ) )  METHOD_5 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( BLOCK BLOCK (  METHOD_6 ( VAR_3 . METHOD_7 ( ) ) )  METHOD_6 ( VAR_3 . METHOD_7 ( ) ) (  assertEquals ( INT_1 , VAR_3 . METHOD_7 ( ) . getStatus ( ) ) )  assertEquals ( INT_1 , VAR_3 . METHOD_7 ( ) . getStatus ( ) ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME list ) NAME list ( INIT = new java.util.ArrayList < TYPE_1 > ( ) ) INIT = new java.util.ArrayList < TYPE_1 > ( ) ) VAR VAR (  list . add ( new TYPE_2 ( TYPE_3 . getParameters ( ) . METHOD_2 ( ) . METHOD_3 ( ) , null , VAR_1 , TYPE_3 . METHOD_4 ( ) . getValue ( ) , TYPE_3 . getParameters ( ) . METHOD_2 ( ) . METHOD_5 ( ) ) ) )  list . add ( new TYPE_2 ( TYPE_3 . getParameters ( ) . METHOD_2 ( ) . METHOD_3 ( ) , null , VAR_1 , TYPE_3 . METHOD_4 ( ) . getValue ( ) , TYPE_3 . getParameters ( ) . METHOD_2 ( ) . METHOD_5 ( ) ) ) (  return list ; )  return list ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  org.mockito.Mockito.when ( VAR_2 . METHOD_2 ( VAR_3 . Matchers < org.ovirt.engine.core.compat.Guid > any ( VAR_4 . Guid class ) , VAR_3 . Matchers < TYPE_1 > any ( VAR_5 class ) ) ) . thenReturn ( METHOD_3 ( VAR_1 ) ) )  org.mockito.Mockito.when ( VAR_2 . METHOD_2 ( VAR_3 . Matchers < org.ovirt.engine.core.compat.Guid > any ( VAR_4 . Guid class ) , VAR_3 . Matchers < TYPE_1 > any ( VAR_5 class ) ) ) . thenReturn ( METHOD_3 ( VAR_1 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME model ) NAME model ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( model . METHOD_2 ( ) . getEntity ( ) ) || ( model . METHOD_3 ( ) . getEntity ( ) ) ) COND ( model . METHOD_2 ( ) . getEntity ( ) ) || ( model . METHOD_3 ( ) . getEntity ( ) ) ( THEN THEN (  return METHOD_4 ( model . METHOD_5 ( ) , model . METHOD_6 ( ) . getEntity ( ) ) ; )  return METHOD_4 ( model . METHOD_5 ( ) , model . METHOD_6 ( ) . getEntity ( ) ) ; ) THEN THEN ( ELSE ELSE (  return null ; )  return null ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_2 . METHOD_2 ( VAR_3 class , VAR_4 ) )  VAR_2 . METHOD_2 ( VAR_3 class , VAR_4 ) (  org.mockito.Mockito.when ( VAR_4 . METHOD_3 ( TYPE_1 . METHOD_4 ( ) ) ) . thenReturn ( VAR_1 ) )  org.mockito.Mockito.when ( VAR_4 . METHOD_3 ( TYPE_1 . METHOD_4 ( ) ) ) . thenReturn ( VAR_1 ) (  TYPE_2 . assertEquals ( validator . METHOD_5 ( TYPE_3 . METHOD_6 ( ) ) . get ( ) , VAR_1 ) )  TYPE_2 . assertEquals ( validator . METHOD_5 ( TYPE_3 . METHOD_6 ( ) ) . get ( ) , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME vds ) NAME vds ( INIT = new org.ovirt.engine.core.common.businessentities.VDS ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.VDS ( ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 < > ( ) ) INIT = new TYPE_1 < > ( ) ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME result ) NAME result ( INIT = validator . METHOD_2 ( vds , null , VAR_1 ) ) INIT = validator . METHOD_2 ( vds , null , VAR_1 ) ) VAR VAR (  TYPE_2 . METHOD_3 ( result ) )  TYPE_2 . METHOD_3 ( result ) (  TYPE_2 . assertEquals ( VAR_1 . size ( ) , 1 ) )  TYPE_2 . assertEquals ( VAR_1 . size ( ) , 1 ) (  TYPE_2 . assertEquals ( VAR_1 . get ( 0 ) , STRING_1 ) )  TYPE_2 . assertEquals ( VAR_1 . get ( 0 ) , STRING_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN java.util.ArrayList<org.ovirt.engine.core.compat.Guid> ) RETURN java.util.ArrayList<org.ovirt.engine.core.compat.Guid> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.compat.Guid> ) TYPE java.util.ArrayList<org.ovirt.engine.core.compat.Guid> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR ( IF IF ( COND ( VAR_1 != null ) && ( ! ( VAR_1 . isEmpty ( ) ) ) ) COND ( VAR_1 != null ) && ( ! ( VAR_1 . isEmpty ( ) ) ) ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  VAR_2 . add ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( VAR_3 ) ) )  VAR_2 . add ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( VAR_3 ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( VAR_2 ) )  TYPE_1 . METHOD_2 ( VAR_2 ) ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_1 . METHOD_3 ( VAR_2 , VAR_3 ) ) INIT = TYPE_1 . METHOD_3 ( VAR_2 , VAR_3 ) ) VAR VAR ( IF IF ( COND VAR_4 >= 0 ) COND VAR_4 >= 0 ( THEN THEN (  return VAR_2 [ VAR_4 ] ; )  return VAR_2 [ VAR_4 ] ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1.VdcActionParametersBase ) RETURN TYPE_1.VdcActionParametersBase ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME params ) NAME params ( INIT = new TYPE_3 ( VAR_1 . getId ( ) , new org.ovirt.engine.core.compat.Guid ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) ) ) INIT = new TYPE_3 ( VAR_1 . getId ( ) , new org.ovirt.engine.core.compat.Guid ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) ) ) VAR VAR (  params . METHOD_4 ( true ) )  params . METHOD_4 ( true ) (  return params ; )  return params ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . get ( VAR_1 ) ) INIT = VAR_3 . get ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN ( VAR VAR ( TYPE java.util.Map<org.ovirt.engine.core.compat.Guid,TYPE_2> ) TYPE java.util.Map<org.ovirt.engine.core.compat.Guid,TYPE_2> ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_5 . METHOD_2 ( VAR_1 ) ) INIT = VAR_5 . METHOD_2 ( VAR_1 ) ) VAR VAR (  VAR_2 . METHOD_3 ( VAR_4 ) )  VAR_2 . METHOD_3 ( VAR_4 ) (  METHOD_4 ( VAR_2 ) )  METHOD_4 ( VAR_2 ) ) THEN THEN ) IF IF (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_2 ) . METHOD_3 ( TYPE_1 . any ( VAR_3 . Guid class ) , TYPE_1 . any ( VAR_3 . Guid class ) ) )  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_2 ) . METHOD_3 ( TYPE_1 . any ( VAR_3 . Guid class ) , TYPE_1 . any ( VAR_3 . Guid class ) ) (  cmd . getVm ( ) . METHOD_4 ( VAR_4 ) )  cmd . getVm ( ) . METHOD_4 ( VAR_4 ) (  TYPE_2 . METHOD_5 ( cmd ) )  TYPE_2 . METHOD_5 ( cmd ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VmTemplate ) TYPE org.ovirt.engine.core.common.businessentities.VmTemplate ( NAME template ) NAME template ) VAR VAR ( VAR VAR ( TYPE java.util.Map<org.ovirt.engine.core.compat.Guid,org.ovirt.engine.core.common.businessentities.DiskImage> ) TYPE java.util.Map<org.ovirt.engine.core.compat.Guid,org.ovirt.engine.core.common.businessentities.DiskImage> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.Map<org.ovirt.engine.core.compat.Guid,org.ovirt.engine.core.common.businessentities.StorageDomain> ) TYPE java.util.Map<org.ovirt.engine.core.compat.Guid,org.ovirt.engine.core.common.businessentities.StorageDomain> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> ( NAME VAR_4 ) NAME VAR_4 ( INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( template . METHOD_4 ( ) . getValue ( ) ) ) INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( template . METHOD_4 ( ) . getValue ( ) ) ) VAR VAR (  TYPE_1 . METHOD_1 ( template , VAR_4 , VAR_1 , VAR_2 , VAR_3 ) )  TYPE_1 . METHOD_1 ( template , VAR_4 , VAR_1 , VAR_2 , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME item ) NAME item ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( item . METHOD_2 ( ) ) || ( ! ( METHOD_3 ( ) ) ) ) COND ( item . METHOD_2 ( ) ) || ( ! ( METHOD_3 ( ) ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( IF IF ( COND ( ( METHOD_3 ( ) ) && ( item . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( ) ) ) && ( item . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_7 ( ) ) ) COND ( ( METHOD_3 ( ) ) && ( item . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( ) ) ) && ( item . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_7 ( ) ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  VAR_3 . addValue ( STRING_1 , VAR_1 ) )  VAR_3 . addValue ( STRING_1 , VAR_1 ) (  VAR_3 . addValue ( STRING_2 , VAR_2 ) )  VAR_3 . addValue ( STRING_2 , VAR_2 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_3 ( ) . METHOD_4 ( STRING_3 , METHOD_5 ( ) , VAR_3 ) ) INIT = METHOD_3 ( ) . METHOD_4 ( STRING_3 , METHOD_5 ( ) , VAR_3 ) ) VAR VAR (  return VAR_4 ; )  return VAR_4 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3<TYPE_1> ) TYPE TYPE_3<TYPE_1> ( NAME VAR_5 ) NAME VAR_5 ( INIT = TYPE_4 . METHOD_2 ( VAR_1 , VAR_2 , TYPE_5 . METHOD_3 ( id ) , VAR_3 , VAR_4 ) ) INIT = TYPE_4 . METHOD_2 ( VAR_1 , VAR_2 , TYPE_5 . METHOD_3 ( id ) , VAR_3 , VAR_4 ) ) VAR VAR ( IF IF ( COND ( VAR_5 . size ( ) ) == 0 ) COND ( VAR_5 . size ( ) ) == 0 ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF (  return new java.util.ArrayList < TYPE_1 > ( VAR_5 ) . get ( 0 ) ; )  return new java.util.ArrayList < TYPE_1 > ( VAR_5 ) . get ( 0 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<TYPE_1.VdcActionParametersBase> ) TYPE java.util.ArrayList<TYPE_1.VdcActionParametersBase> ( NAME parameters ) NAME parameters ( INIT = new java.util.ArrayList < TYPE_1 . VdcActionParametersBase > ( ) ) INIT = new java.util.ArrayList < TYPE_1 . VdcActionParametersBase > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( IN VAR_2 . METHOD_2 ( ) ) IN VAR_2 . METHOD_2 ( ) ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3<TYPE_2> ) TYPE TYPE_3<TYPE_2> ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_3 < TYPE_2 > ( ) ) INIT = new TYPE_3 < TYPE_2 > ( ) ) VAR VAR (  VAR_3 . METHOD_3 ( VAR_1 . getId ( ) ) )  VAR_3 . METHOD_3 ( VAR_1 . getId ( ) ) (  parameters . add ( VAR_3 ) )  parameters . add ( VAR_3 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_4 ( METHOD_5 ( ) , parameters ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_4 ( METHOD_5 ( ) , parameters ) (  METHOD_6 ( ) )  METHOD_6 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( VAR_1 , new TYPE_2 ( ) ) )  TYPE_1 . METHOD_2 ( VAR_1 , new TYPE_2 ( ) ) ( VAR VAR ( TYPE TYPE_3<TYPE_4<java.lang.String>> ) TYPE TYPE_3<TYPE_4<java.lang.String>> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_3 < TYPE_4 < java.lang.String > > ( ) ) INIT = new TYPE_3 < TYPE_4 < java.lang.String > > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4<java.lang.String> ) TYPE TYPE_4<java.lang.String> ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_4 < java.lang.String > ( ) ) INIT = new TYPE_4 < java.lang.String > ( ) ) VAR VAR (  VAR_4 . setItems ( VAR_5 ) )  VAR_4 . setItems ( VAR_5 ) (  VAR_4 . setSelectedItem ( VAR_3 ) )  VAR_4 . setSelectedItem ( VAR_3 ) (  VAR_2 . add ( VAR_4 ) )  VAR_2 . add ( VAR_4 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  setItems ( VAR_2 ) )  setItems ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND result != null ) COND result != null ( THEN THEN ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ( INIT = ( ( org.ovirt.engine.core.common.businessentities.VM ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( result ) ) . getReturnValue ( ) ) ) ) INIT = ( ( org.ovirt.engine.core.common.businessentities.VM ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( result ) ) . getReturnValue ( ) ) ) ) VAR VAR ( IF IF ( COND vm == null ) COND vm == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_2 ) ( model ) ) ) INIT = ( ( TYPE_2 ) ( model ) ) ) VAR VAR (  VAR_1 . METHOD_1 ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( vm . getId ( ) ) ) )  VAR_1 . METHOD_1 ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( vm . getId ( ) ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME validator ) NAME validator ( INIT = new TYPE_1 ( TYPE_2 . METHOD_2 ( ) , TYPE_2 . METHOD_3 ( ) ) ) INIT = new TYPE_1 ( TYPE_2 . METHOD_2 ( ) , TYPE_2 . METHOD_3 ( ) ) ) VAR VAR (  return ( ( ( validate ( validator . METHOD_4 ( ) ) ) && ( validate ( validator . METHOD_5 ( ) ) ) ) && ( validate ( validator . METHOD_6 ( ) ) ) ) && ( validate ( validator . METHOD_7 ( TYPE_2 . getParameters ( ) . METHOD_8 ( ) ) ) ) ; )  return ( ( ( validate ( validator . METHOD_4 ( ) ) ) && ( validate ( validator . METHOD_5 ( ) ) ) ) && ( validate ( validator . METHOD_6 ( ) ) ) ) && ( validate ( validator . METHOD_7 ( TYPE_2 . getParameters ( ) . METHOD_8 ( ) ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.List<org.ovirt.engine.core.common.businessentities.VdsNetworkInterface> ) RETURN java.util.List<org.ovirt.engine.core.common.businessentities.VdsNetworkInterface> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VdsNetworkInterface> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VdsNetworkInterface> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . VdsNetworkInterface > ( ) ) INIT = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . VdsNetworkInterface > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME VAR_2 ) NAME VAR_2 ( IN VAR_3 ) IN VAR_3 ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_4 . METHOD_2 ( VAR_2 . getName ( ) ) ) ) COND ! ( VAR_4 . METHOD_2 ( VAR_2 . getName ( ) ) ) ( THEN THEN (  VAR_1 . add ( VAR_2 ) )  VAR_1 . add ( VAR_2 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( null ) ) ) )  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( null ) ) ) (  METHOD_3 ( cmd ) )  METHOD_3 ( cmd ) (  TYPE_3 . METHOD_4 ( cmd . validate ( ) ) )  TYPE_3 . METHOD_4 ( cmd . validate ( ) ) (  TYPE_3 . METHOD_5 ( cmd . getReturnValue ( ) . METHOD_6 ( ) . METHOD_7 ( TYPE_4 . toString ( ) ) ) )  TYPE_3 . METHOD_5 ( cmd . getReturnValue ( ) . METHOD_6 ( ) . METHOD_7 ( TYPE_4 . toString ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) (  TYPE_1 . getVm ( ) . METHOD_2 ( VAR_1 ) )  TYPE_1 . getVm ( ) . METHOD_2 ( VAR_1 ) (  TYPE_1 . getVm ( ) . METHOD_3 ( ) . METHOD_4 ( TYPE_1 . getParameters ( ) . METHOD_5 ( ) . METHOD_6 ( ) ) )  TYPE_1 . getVm ( ) . METHOD_3 ( ) . METHOD_4 ( TYPE_1 . getParameters ( ) . METHOD_5 ( ) . METHOD_6 ( ) ) (  VAR_2 . METHOD_7 ( TYPE_1 . getVm ( ) . METHOD_3 ( ) ) )  VAR_2 . METHOD_7 ( TYPE_1 . getVm ( ) . METHOD_3 ( ) ) (  METHOD_8 ( ) )  METHOD_8 ( ) (  METHOD_9 ( ) )  METHOD_9 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( null ) )  METHOD_2 ( null ) ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME VAR_1 ) NAME VAR_1 ( INIT = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ) INIT = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ) VAR VAR ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( ( java.util.List < TYPE_1 > ) ( result ) ) ) INIT = ( ( java.util.List < TYPE_1 > ) ( result ) ) ) VAR VAR (  METHOD_3 ( ) . setItems ( VAR_3 ) )  METHOD_3 ( ) . setItems ( VAR_3 ) (  METHOD_4 ( ) )  METHOD_4 ( ) (  METHOD_5 ( ) )  METHOD_5 ( ) ) BLOCK BLOCK ) METHOD METHOD (  VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object result ) { java.util.List < TYPE_1 > VAR_3 = ( ( java.util.List < TYPE_1 > ) ( result ) ) ; METHOD_3 ( ) . setItems ( VAR_3 ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; } } )  VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object result ) { java.util.List < TYPE_1 > VAR_3 = ( ( java.util.List < TYPE_1 > ) ( result ) ) ; METHOD_3 ( ) . setItems ( VAR_3 ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; } } (  TYPE_2 . getInstance ( ) . METHOD_6 ( VAR_1 ) )  TYPE_2 . getInstance ( ) . METHOD_6 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source ; )  return source ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME parameters ) NAME parameters ( INIT = new TYPE_1 ( VAR_1 , STRING_1 , STRING_1 , false ) ) INIT = new TYPE_1 ( VAR_1 , STRING_1 , STRING_1 , false ) ) VAR VAR (  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , parameters , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , parameters , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ( INIT = new org.ovirt.engine.core.common.businessentities.VM ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.VM ( ) ) VAR VAR (  vm . METHOD_2 ( VAR_1 ) )  vm . METHOD_2 ( VAR_1 ) (  org.mockito.Mockito.when ( VAR_2 . get ( TYPE_1 . any ( VAR_3 . Guid class ) ) ) . thenReturn ( vm ) )  org.mockito.Mockito.when ( VAR_2 . get ( TYPE_1 . any ( VAR_3 . Guid class ) ) ) . thenReturn ( vm ) ( VAR VAR ( TYPE java.util.List<TYPE_2<org.ovirt.engine.core.common.businessentities.VM,TYPE_3>> ) TYPE java.util.List<TYPE_2<org.ovirt.engine.core.common.businessentities.VM,TYPE_3>> ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_4 . METHOD_3 ( new TYPE_2 ( vm , VAR_5 ) ) ) INIT = TYPE_4 . METHOD_3 ( new TYPE_2 ( vm , VAR_5 ) ) ) VAR VAR (  org.mockito.Mockito.when ( VAR_2 . METHOD_4 ( TYPE_1 . any ( VAR_3 . Guid class ) ) ) . thenReturn ( VAR_4 ) )  org.mockito.Mockito.when ( VAR_2 . METHOD_4 ( TYPE_1 . any ( VAR_3 . Guid class ) ) ) . thenReturn ( VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  command = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , false ) ) ) )  command = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , false ) ) ) (  METHOD_4 ( ) )  METHOD_4 ( ) (  METHOD_5 ( VAR_1 ) )  METHOD_5 ( VAR_1 ) (  METHOD_6 ( ) )  METHOD_6 ( ) (  METHOD_7 ( VAR_2 . Collections < java.lang.String > METHOD_8 ( ) ) )  METHOD_7 ( VAR_2 . Collections < java.lang.String > METHOD_8 ( ) ) (  METHOD_9 ( false ) )  METHOD_9 ( false ) (  METHOD_10 ( false ) )  METHOD_10 ( false ) (  TYPE_3 . METHOD_11 ( command ) )  TYPE_3 . METHOD_11 ( command ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1<java.lang.Boolean,TYPE_2> ) RETURN TYPE_1<java.lang.Boolean,TYPE_2> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ) TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME storageDomain ) NAME storageDomain ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME type ) NAME type ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME vds ) NAME vds ( INIT = TYPE_3 . METHOD_2 ( ) . get ( VAR_1 ) ) INIT = TYPE_3 . METHOD_2 ( ) . get ( VAR_1 ) ) VAR VAR ( IF IF ( COND ! ( TYPE_3 . METHOD_3 ( vds ) ) ) COND ! ( TYPE_3 . METHOD_3 ( vds ) ) ( THEN THEN (  VAR_2 . error ( STRING_1 , vds . getName ( ) , storageDomain . getName ( ) ) )  VAR_2 . error ( STRING_1 , vds . getName ( ) , storageDomain . getName ( ) ) (  METHOD_4 ( VAR_3 , null , vds ) )  METHOD_4 ( VAR_3 , null , vds ) (  return new TYPE_1 ( false , null ) ; )  return new TYPE_1 ( false , null ) ; ) THEN THEN ) IF IF (  return super . METHOD_1 ( storageDomain , VAR_1 , type ) ; )  return super . METHOD_1 ( storageDomain , VAR_1 , type ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.Disk> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.Disk> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Disk > ( ) ) INIT = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Disk > ( ) ) VAR VAR (  VAR_1 . add ( new org.ovirt.engine.core.common.businessentities.DiskImage ( ) ) )  VAR_1 . add ( new org.ovirt.engine.core.common.businessentities.DiskImage ( ) ) (  TYPE_1 . METHOD_2 ( VAR_2 . METHOD_3 ( new org.ovirt.engine.core.common.businessentities.VM ( ) , null , VAR_1 ) , true , null ) )  TYPE_1 . METHOD_2 ( VAR_2 . METHOD_3 ( new org.ovirt.engine.core.common.businessentities.VM ( ) , null , VAR_1 ) , true , null ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN org.ovirt.engine.core.common.businessentities.VM ) RETURN org.ovirt.engine.core.common.businessentities.VM ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ( INIT = new org.ovirt.engine.core.common.businessentities.VM ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.VM ( ) ) VAR VAR (  vm . setId ( vmId ) )  vm . setId ( vmId ) (  vm . METHOD_2 ( VAR_1 ) )  vm . METHOD_2 ( VAR_1 ) (  vm . METHOD_3 ( VAR_2 ) )  vm . METHOD_3 ( VAR_2 ) (  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( VAR_4 ) . METHOD_4 ( ) )  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( VAR_4 ) . METHOD_4 ( ) (  org.mockito.Mockito.when ( VAR_3 . get ( vmId ) ) . thenReturn ( vm ) )  org.mockito.Mockito.when ( VAR_3 . get ( vmId ) ) . thenReturn ( vm ) (  return vm ; )  return vm ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND VAR_1 < java.lang.Boolean > getValue ( VAR_2 ) ) COND VAR_1 < java.lang.Boolean > getValue ( VAR_2 ) ( THEN THEN (  VAR_3 . METHOD_2 ( STRING_1 ) )  VAR_3 . METHOD_2 ( STRING_1 ) (  TYPE_1 . get ( VAR_4 class ) . METHOD_3 ( this , STRING_2 , new TYPE_2 [ ] { } , new java.lang.Object [ ] { } , VAR_1 < java.lang.Integer > getValue ( VAR_5 ) , VAR_1 < java.lang.Integer > getValue ( VAR_5 ) , VAR_6 ) )  TYPE_1 . get ( VAR_4 class ) . METHOD_3 ( this , STRING_2 , new TYPE_2 [ ] { } , new java.lang.Object [ ] { } , VAR_1 < java.lang.Integer > getValue ( VAR_5 ) , VAR_1 < java.lang.Integer > getValue ( VAR_5 ) , VAR_6 ) (  VAR_3 . METHOD_2 ( STRING_3 ) )  VAR_3 . METHOD_2 ( STRING_3 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.Disk ) TYPE TYPE_1.Disk ( NAME disk ) NAME disk ) VAR VAR ( VAR VAR ( TYPE TYPE_2.VdcActionType ) TYPE TYPE_2.VdcActionType ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = disk . METHOD_2 ( VAR_3 ) ) INIT = disk . METHOD_2 ( VAR_3 ) ) VAR VAR (  METHOD_3 ( VAR_1 , new TYPE_4 ( new TYPE_3 ( disk . getId ( ) , TYPE_5 . getParameters ( ) . METHOD_4 ( ) ) , VAR_2 . METHOD_5 ( ) , VAR_2 . METHOD_6 ( ) ) ) )  METHOD_3 ( VAR_1 , new TYPE_4 ( new TYPE_3 ( disk . getId ( ) , TYPE_5 . getParameters ( ) . METHOD_4 ( ) ) , VAR_2 . METHOD_5 ( ) , VAR_2 . METHOD_6 ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( ( ( VAR_1 . METHOD_2 ( CHAR_1 ) ) != ( - 1 ) ) || ( ( VAR_1 . METHOD_2 ( CHAR_2 ) ) != ( - 1 ) ) ) || ( ( VAR_1 . METHOD_2 ( CHAR_3 ) ) != ( - 1 ) ) ) || false ) COND ( ( ( ( VAR_1 . METHOD_2 ( CHAR_1 ) ) != ( - 1 ) ) || ( ( VAR_1 . METHOD_2 ( CHAR_2 ) ) != ( - 1 ) ) ) || ( ( VAR_1 . METHOD_2 ( CHAR_3 ) ) != ( - 1 ) ) ) || false ( THEN THEN (  throw new TYPE_1 ( STRING_1 ) ; )  throw new TYPE_1 ( STRING_1 ) ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME client ) NAME client ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_3 ( INT_1 ) ) INIT = new TYPE_3 ( INT_1 ) ) VAR VAR (  client . METHOD_2 ( VAR_2 < java.lang.String > METHOD_3 ( VAR_3 ) , null , VAR_1 , null ) )  client . METHOD_2 ( VAR_2 < java.lang.String > METHOD_3 ( VAR_3 ) , null , VAR_1 , null ) (  return new java.lang.String ( VAR_1 . METHOD_4 ( ) , TYPE_4 . METHOD_5 ( STRING_1 ) ) ; )  return new java.lang.String ( VAR_1 . METHOD_4 ( ) , TYPE_4 . METHOD_5 ( STRING_1 ) ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ( BLOCK BLOCK (  log . METHOD_6 ( STRING_2 , e ) )  log . METHOD_6 ( STRING_2 , e ) (  return null ; )  return null ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND returnValue != null ) COND returnValue != null ( THEN THEN (  VAR_1 = ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) )  VAR_1 = ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) THEN THEN ( ELSE ELSE (  VAR_1 = VAR_2 )  VAR_1 = VAR_2 ) ELSE ELSE ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( ( TYPE_2 ) ( model ) ) ) INIT = ( ( TYPE_2 ) ( model ) ) ) VAR VAR (  VAR_3 . METHOD_1 ( ) . METHOD_2 ( VAR_3 , VAR_4 ) )  VAR_3 . METHOD_1 ( ) . METHOD_2 ( VAR_3 , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VmTemplate ) TYPE org.ovirt.engine.core.common.businessentities.VmTemplate ( NAME template ) NAME template ( INIT = ( ( org.ovirt.engine.core.common.businessentities.VmTemplate ) ( getSelectedItem ( ) ) ) ) INIT = ( ( org.ovirt.engine.core.common.businessentities.VmTemplate ) ( getSelectedItem ( ) ) ) ) VAR VAR ( IF IF ( COND ( getWindow ( ) ) != null ) COND ( getWindow ( ) ) != null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME VAR_1 ) NAME VAR_1 ( INIT = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ) INIT = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ) VAR VAR ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( ( ( org.ovirt.engine.core.common.businessentities.VmTemplate ) ( result ) ) ) )  METHOD_2 ( ( ( org.ovirt.engine.core.common.businessentities.VmTemplate ) ( result ) ) ) ) BLOCK BLOCK ) METHOD METHOD (  VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object result ) { METHOD_2 ( ( ( org.ovirt.engine.core.common.businessentities.VmTemplate ) ( result ) ) ) ; } } )  VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object result ) { METHOD_2 ( ( ( org.ovirt.engine.core.common.businessentities.VmTemplate ) ( result ) ) ) ; } } (  TYPE_1 . METHOD_3 ( VAR_1 , template . getId ( ) ) )  TYPE_1 . METHOD_3 ( VAR_1 , template . getId ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.VDS ) TYPE TYPE_1.VDS ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1.VDS ) TYPE TYPE_1.VDS ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_1.VM ) TYPE TYPE_1.VM ( NAME vm ) NAME vm ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME returnValue ) NAME returnValue ( INIT = false ) INIT = false ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( VAR_1 . METHOD_2 ( ) ) == 0 ) INIT = ( VAR_1 . METHOD_2 ( ) ) == 0 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_4 ) NAME VAR_4 ( INIT = ( VAR_2 . METHOD_2 ( ) ) == 0 ) INIT = ( VAR_2 . METHOD_2 ( ) ) == 0 ) VAR VAR ( IF IF ( COND VAR_3 ) COND VAR_3 ( THEN THEN ( IF IF ( COND ! VAR_4 ) COND ! VAR_4 ( THEN THEN (  returnValue = true )  returnValue = true ) THEN THEN ) IF IF ) THEN THEN ( ELSE ELSE ( IF IF ( COND ! VAR_4 ) COND ! VAR_4 ( THEN THEN (  return super . METHOD_1 ( VAR_1 , VAR_2 , vm ) ; )  return super . METHOD_1 ( VAR_1 , VAR_2 , vm ) ; ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF (  return returnValue ; )  return returnValue ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND TYPE_2 . METHOD_2 ( result . METHOD_3 ( ) ) ) COND TYPE_2 . METHOD_2 ( result . METHOD_3 ( ) ) ( THEN THEN (  throw new TYPE_3 ( ( ( result . METHOD_4 ( ) ) != null ? result . METHOD_4 ( ) . METHOD_5 ( ) : VAR_1 ) , result . METHOD_3 ( ) ) ; )  throw new TYPE_3 ( ( ( result . METHOD_4 ( ) ) != null ? result . METHOD_4 ( ) . METHOD_5 ( ) : VAR_1 ) , result . METHOD_3 ( ) ) ; ) THEN THEN ) IF IF (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2.StorageDomain ) TYPE TYPE_2.StorageDomain ( NAME storageDomain ) NAME storageDomain ( INIT = get ( ) ) INIT = get ( ) ) VAR VAR ( IF IF ( COND storageDomain . METHOD_2 ( ) . METHOD_3 ( ) . equals ( TYPE_3 . value ( ) ) ) COND storageDomain . METHOD_2 ( ) . METHOD_3 ( ) . equals ( TYPE_3 . value ( ) ) ( THEN THEN ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME params ) NAME params ( INIT = new TYPE_4 ( VAR_1 ) ) INIT = new TYPE_4 ( VAR_1 ) ) VAR VAR (  params . METHOD_4 ( true ) )  params . METHOD_4 ( true ) (  return METHOD_5 ( VAR_2 , params ) ; )  return METHOD_5 ( VAR_2 , params ) ; ) THEN THEN ( ELSE ELSE ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME params ) NAME params ( INIT = new TYPE_5 ( VAR_1 , VAR_3 ) ) INIT = new TYPE_5 ( VAR_1 , VAR_3 ) ) VAR VAR (  return METHOD_5 ( VAR_4 , params ) ; )  return METHOD_5 ( VAR_4 , params ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME cluster ) NAME cluster ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  cluster . METHOD_2 ( STRING_1 ) )  cluster . METHOD_2 ( STRING_1 ) (  VAR_1 . METHOD_3 ( VAR_2 ) )  VAR_1 . METHOD_3 ( VAR_2 ) ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_3 . METHOD_4 ( STRING_2 , STRING_3 , STRING_4 ) ) INIT = TYPE_3 . METHOD_4 ( STRING_2 , STRING_3 , STRING_4 ) ) VAR VAR (  VAR_4 . METHOD_5 ( VAR_5 , VAR_2 , VAR_3 ) )  VAR_4 . METHOD_5 ( VAR_5 , VAR_2 , VAR_3 ) (  TYPE_4 . assertEquals ( STRING_2 , TYPE_5 . METHOD_6 ( VAR_1 , ( ) - > cluster ) ) )  TYPE_4 . assertEquals ( STRING_2 , TYPE_5 . METHOD_6 ( VAR_1 , ( ) - > cluster ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( java.lang.String ) ( returnValue ) ) ) INIT = ( ( java.lang.String ) ( returnValue ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_2 ) ( model ) ) ) INIT = ( ( TYPE_2 ) ( model ) ) ) VAR VAR (  VAR_2 . METHOD_3 ( ) . setEntity ( VAR_1 ) )  VAR_2 . METHOD_3 ( ) . setEntity ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD (  TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.lang.String VAR_1 = ( ( java.lang.String ) ( returnValue ) ) ; TYPE_2 VAR_2 = ( ( TYPE_2 ) ( model ) ) ; VAR_2 . METHOD_3 ( ) . setEntity ( VAR_1 ) ; } } , METHOD_4 ( ) ) , getVm ( ) . getId ( ) ) )  TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.lang.String VAR_1 = ( ( java.lang.String ) ( returnValue ) ) ; TYPE_2 VAR_2 = ( ( TYPE_2 ) ( model ) ) ; VAR_2 . METHOD_3 ( ) . setEntity ( VAR_1 ) ; } } , METHOD_4 ( ) ) , getVm ( ) . getId ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_1 ) ) COND ! ( VAR_1 ) ( THEN THEN (  VAR_1 = true )  VAR_1 = true ( FOR-EACH FOR-EACH ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME a ) NAME a ( IN METHOD_2 ( ) . METHOD_3 ( ) ) IN METHOD_2 ( ) . METHOD_3 ( ) ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Version ) TYPE org.ovirt.engine.core.compat.Version ( NAME item ) NAME item ( INIT = ( ( org.ovirt.engine.core.compat . Version ) ( a ) ) ) INIT = ( ( org.ovirt.engine.core.compat . Version ) ( a ) ) ) VAR VAR ( IF IF ( COND TYPE_1 . METHOD_4 ( item , getEntity ( ) . METHOD_5 ( ) ) ) COND TYPE_1 . METHOD_4 ( item , getEntity ( ) . METHOD_5 ( ) ) ( THEN THEN (  METHOD_2 ( ) . setSelectedItem ( item ) )  METHOD_2 ( ) . setSelectedItem ( item ) (  break ; )  break ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( STRING_1 , null ) ) INIT = METHOD_2 ( STRING_1 , null ) ) VAR VAR (  VAR_1 . METHOD_3 ( false ) )  VAR_1 . METHOD_3 ( false ) (  cmd = org.mockito.Mockito . METHOD_4 ( new TYPE_2 ( new TYPE_3 ( VAR_2 , STRING_2 , STRING_3 , VAR_3 , null , null , TYPE_4 . METHOD_5 ( VAR_1 ) ) , null ) ) )  cmd = org.mockito.Mockito . METHOD_4 ( new TYPE_2 ( new TYPE_3 ( VAR_2 , STRING_2 , STRING_3 , VAR_3 , null , null , TYPE_4 . METHOD_5 ( VAR_1 ) ) , null ) ) (  METHOD_6 ( VAR_4 ) )  METHOD_6 ( VAR_4 ) (  TYPE_5 . METHOD_7 ( cmd . validate ( ) ) )  TYPE_5 . METHOD_7 ( cmd . validate ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1.ValidationResult ) RETURN TYPE_1.ValidationResult ( NAME validate ) NAME validate ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME value ) NAME value ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_1 ( java.lang.Integer . METHOD_2 ( METHOD_3 ( ) . getEntity ( ) . toString ( ) ) ) ) INIT = VAR_2 . METHOD_1 ( java.lang.Integer . METHOD_2 ( METHOD_3 ( ) . getEntity ( ) . toString ( ) ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1.ValidationResult ) TYPE TYPE_1.ValidationResult ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_1 . ValidationResult ( ) ) INIT = new TYPE_1 . ValidationResult ( ) ) VAR VAR (  VAR_3 . METHOD_4 ( VAR_1 ) )  VAR_3 . METHOD_4 ( VAR_1 ) (  VAR_3 . METHOD_5 ( TYPE_2 . METHOD_6 ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . METHOD_7 ( ) . METHOD_8 ( ) ) ) )  VAR_3 . METHOD_5 ( TYPE_2 . METHOD_6 ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . METHOD_7 ( ) . METHOD_8 ( ) ) ) (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_1 ) ( target ) ) ) INIT = ( ( TYPE_1 ) ( target ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME pool ) NAME pool ( INIT = ( ( TYPE_2 ) ( returnValue ) ) ) INIT = ( ( TYPE_2 ) ( returnValue ) ) ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( pool . METHOD_2 ( ) ) == ( VAR_3 ) ) INIT = ( pool . METHOD_2 ( ) ) == ( VAR_3 ) ) VAR VAR (  VAR_1 . METHOD_3 ( VAR_2 ) )  VAR_1 . METHOD_3 ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  return ( ( ( ( validate ( METHOD_2 ( METHOD_3 ( ) ) ) ) && ( validate ( METHOD_4 ( ) ) ) ) && ( validate ( METHOD_5 ( METHOD_3 ( ) ) ) ) ) && ( validate ( METHOD_6 ( METHOD_3 ( ) ) ) ) ) && ( validate ( METHOD_7 ( METHOD_3 ( ) ) ) ) ; )  return ( ( ( ( validate ( METHOD_2 ( METHOD_3 ( ) ) ) ) && ( validate ( METHOD_4 ( ) ) ) ) && ( validate ( METHOD_5 ( METHOD_3 ( ) ) ) ) ) && ( validate ( METHOD_6 ( METHOD_3 ( ) ) ) ) ) && ( validate ( METHOD_7 ( METHOD_3 ( ) ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME id ) NAME id ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND source == null ) COND source == null ( THEN THEN (  return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ( ) ; )  return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ( ) ; ) THEN THEN ) IF IF (  return source ; )  return source ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ( ) ; } return source ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ( ) ; } return source ; } } (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Version ) TYPE org.ovirt.engine.core.compat.Version ( NAME version ) NAME version ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 = new TYPE_1 ( ) )  VAR_1 = new TYPE_1 ( ) (  VAR_1 . setId ( VAR_2 ) )  VAR_1 . setId ( VAR_2 ) (  VAR_1 . METHOD_2 ( STRING_1 ) )  VAR_1 . METHOD_2 ( STRING_1 ) (  VAR_1 . METHOD_3 ( true ) )  VAR_1 . METHOD_3 ( true ) (  VAR_1 . METHOD_4 ( false ) )  VAR_1 . METHOD_4 ( false ) (  VAR_1 . METHOD_5 ( version ) )  VAR_1 . METHOD_5 ( version ) (  VAR_1 . METHOD_6 ( true ) )  VAR_1 . METHOD_6 ( true ) (  METHOD_7 ( version ) )  METHOD_7 ( version ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN org.ovirt.engine.core.common.businessentities.StorageDomain ) RETURN org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<TYPE_1.DiskImage> ) TYPE java.util.List<TYPE_1.DiskImage> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1.DiskImage> ) TYPE java.util.List<TYPE_1.DiskImage> ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_2 ( getVm ( ) . METHOD_3 ( ) , VAR_3 ) ) INIT = TYPE_2 . METHOD_2 ( getVm ( ) . METHOD_3 ( ) , VAR_3 ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ) TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME storageDomain ) NAME storageDomain ( INIT = TYPE_3 . getInstance ( ) . METHOD_4 ( TYPE_4 . getParameters ( ) . getStoragePoolId ( ) , VAR_2 , METHOD_5 ( ) , getVm ( ) ) ) INIT = TYPE_3 . getInstance ( ) . METHOD_4 ( TYPE_4 . getParameters ( ) . getStoragePoolId ( ) , VAR_2 , METHOD_5 ( ) , getVm ( ) ) ) VAR VAR (  VAR_1 . METHOD_6 ( VAR_2 ) )  VAR_1 . METHOD_6 ( VAR_2 ) (  return storageDomain ; )  return storageDomain ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3.VdcQueryReturnValue ) TYPE TYPE_3.VdcQueryReturnValue ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_3 . VdcQueryReturnValue ) ( returnValue ) ) ) INIT = ( ( TYPE_3 . VdcQueryReturnValue ) ( returnValue ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_2 . getReturnValue ( ) ) INIT = VAR_2 . getReturnValue ( ) ) VAR VAR ( IF IF ( COND VAR_3 != null ) COND VAR_3 != null ( THEN THEN (  METHOD_3 ( VAR_3 ) )  METHOD_3 ( VAR_3 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD (  TYPE_2 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { TYPE_3 . VdcQueryReturnValue VAR_2 = ( ( TYPE_3 . VdcQueryReturnValue ) ( returnValue ) ) ; TYPE_4 VAR_3 = VAR_2 . getReturnValue ( ) ; if ( VAR_3 != null ) { METHOD_3 ( VAR_3 ) ; } } } ) , VAR_1 . METHOD_4 ( ) , VAR_1 . getId ( ) , METHOD_5 ( ) ) )  TYPE_2 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { TYPE_3 . VdcQueryReturnValue VAR_2 = ( ( TYPE_3 . VdcQueryReturnValue ) ( returnValue ) ) ; TYPE_4 VAR_3 = VAR_2 . getReturnValue ( ) ; if ( VAR_3 != null ) { METHOD_3 ( VAR_3 ) ; } } } ) , VAR_1 . METHOD_4 ( ) , VAR_1 . getId ( ) , METHOD_5 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.doReturn ( client ) . when ( VAR_1 ) . METHOD_2 ( ) )  org.mockito.Mockito.doReturn ( client ) . when ( VAR_1 ) . METHOD_2 ( ) (  org.mockito.Mockito . METHOD_3 ( ) . when ( VAR_1 ) . METHOD_4 ( client , VAR_2 , VAR_3 , VAR_4 ) )  org.mockito.Mockito . METHOD_3 ( ) . when ( VAR_1 ) . METHOD_4 ( client , VAR_2 , VAR_3 , VAR_4 ) (  org.mockito.Mockito.doReturn ( VAR_5 ) . when ( client ) . METHOD_5 ( ) )  org.mockito.Mockito.doReturn ( VAR_5 ) . when ( client ) . METHOD_5 ( ) (  org.mockito.Mockito.doReturn ( VAR_6 ) . when ( VAR_1 ) . METHOD_6 ( client ) )  org.mockito.Mockito.doReturn ( VAR_6 ) . when ( VAR_1 ) . METHOD_6 ( client ) (  org.mockito.Mockito . METHOD_7 ( VAR_7 class ) . when ( VAR_1 ) . METHOD_8 ( client ) )  org.mockito.Mockito . METHOD_7 ( VAR_7 class ) . when ( VAR_1 ) . METHOD_8 ( client ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME constants ) NAME constants ( INIT = org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) ) INIT = org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) ) VAR VAR (  METHOD_2 ( ) . METHOD_3 ( constants . METHOD_4 ( ) ) )  METHOD_2 ( ) . METHOD_3 ( constants . METHOD_4 ( ) ) (  METHOD_2 ( ) . METHOD_5 ( false ) )  METHOD_2 ( ) . METHOD_5 ( false ) (  METHOD_6 ( ) . METHOD_3 ( constants . METHOD_7 ( ) ) )  METHOD_6 ( ) . METHOD_3 ( constants . METHOD_7 ( ) ) (  METHOD_6 ( ) . METHOD_5 ( false ) )  METHOD_6 ( ) . METHOD_5 ( false ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.Object> ) TYPE java.util.Map<java.lang.String,java.lang.Object> ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_6 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ) INIT = VAR_6 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_7 ) NAME VAR_7 ( INIT = new TYPE_1 ( VAR_5 ) ) INIT = new TYPE_1 ( VAR_5 ) ) VAR VAR (  return VAR_7 ; )  return VAR_7 ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_8 ) NAME VAR_8 ( BLOCK BLOCK (  throw new TYPE_3 ( VAR_8 ) ; )  throw new TYPE_3 ( VAR_8 ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDS> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDS> ( NAME result ) NAME result ( INIT = dao . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) INIT = dao . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) VAR VAR (  TYPE_1 . METHOD_4 ( result ) )  TYPE_1 . METHOD_4 ( result ) (  TYPE_1 . METHOD_5 ( result . isEmpty ( ) ) )  TYPE_1 . METHOD_5 ( result . isEmpty ( ) ) ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME vds ) NAME vds ( IN result ) IN result ( BLOCK BLOCK (  TYPE_1 . assertEquals ( VAR_1 . METHOD_3 ( ) , vds . METHOD_3 ( ) ) )  TYPE_1 . assertEquals ( VAR_1 . METHOD_3 ( ) , vds . METHOD_3 ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.Integer ) TYPE java.lang.Integer ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 < java.lang.Integer > METHOD_2 ( VAR_3 ) ) INIT = VAR_2 < java.lang.Integer > METHOD_2 ( VAR_3 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_3 ( ) . addValue ( STRING_1 , VAR_1 ) ) INIT = METHOD_3 ( ) . addValue ( STRING_1 , VAR_1 ) ) VAR VAR (  return METHOD_4 ( ) . METHOD_5 ( STRING_2 , VAR_5 . instance , VAR_4 ) ; )  return METHOD_4 ( ) . METHOD_5 ( STRING_2 , VAR_5 . instance , VAR_4 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN java.util.List<org.ovirt.engine.core.common.businessentities.VDS> ) RETURN java.util.List<org.ovirt.engine.core.common.businessentities.VDS> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_3 . METHOD_2 ( VAR_2 ) ) INIT = TYPE_3 . METHOD_2 ( VAR_2 ) ) VAR VAR ( IF IF ( COND METHOD_3 ( ) ) COND METHOD_3 ( ) ( THEN THEN (  VAR_1 . METHOD_4 ( VAR_3 ) )  VAR_1 . METHOD_4 ( VAR_3 ) ) THEN THEN ) IF IF (  return TYPE_4 . METHOD_5 ( ) . METHOD_6 ( TYPE_4 . METHOD_7 ( ) . getId ( ) , VAR_1 ) ; )  return TYPE_4 . METHOD_5 ( ) . METHOD_6 ( TYPE_4 . METHOD_7 ( ) . getId ( ) , VAR_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<TYPE_1> ) TYPE java.util.ArrayList<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( METHOD_2 ( ) . METHOD_3 ( ) ) != null ) ? VAR_2 . Linq < TYPE_1 > METHOD_4 ( METHOD_2 ( ) . METHOD_3 ( ) ) : new java.util.ArrayList < TYPE_1 > ( ) ) INIT = ( ( METHOD_2 ( ) . METHOD_3 ( ) ) != null ) ? VAR_2 . Linq < TYPE_1 > METHOD_4 ( METHOD_2 ( ) . METHOD_3 ( ) ) : new java.util.ArrayList < TYPE_1 > ( ) ) VAR VAR (  METHOD_5 ( ( ( ( getSelectedItem ( ) ) != null ) && ( ( VAR_1 . size ( ) ) > 0 ) ) ) )  METHOD_5 ( ( ( ( getSelectedItem ( ) ) != null ) && ( ( VAR_1 . size ( ) ) > 0 ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = null ) INIT = null ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_3 . METHOD_3 ( VAR_1 ) )  VAR_3 . METHOD_3 ( VAR_1 ) (  VAR_3 . METHOD_4 ( ) )  VAR_3 . METHOD_4 ( ) (  VAR_2 = VAR_3 . METHOD_5 ( ) )  VAR_2 = VAR_3 . METHOD_5 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME e ) NAME e ( BLOCK BLOCK (  log . METHOD_6 ( STRING_1 , VAR_1 , TYPE_3 . METHOD_7 ( e ) ) )  log . METHOD_6 ( STRING_1 , VAR_1 , TYPE_3 . METHOD_7 ( e ) ) ) BLOCK BLOCK ) CATCH CATCH ( FINALLY FINALLY (  VAR_3 . METHOD_8 ( ) )  VAR_3 . METHOD_8 ( ) ) FINALLY FINALLY ) TRY TRY (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.Disk ) TYPE TYPE_1.Disk ( NAME model ) NAME model ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  model . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_4 ( ) . get ( 0 ) . setId ( null ) )  model . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_4 ( ) . get ( 0 ) . setId ( null ) (  METHOD_5 ( METHOD_6 ( ) ) )  METHOD_5 ( METHOD_6 ( ) ) (  VAR_1 . METHOD_7 ( ) )  VAR_1 . METHOD_7 ( ) ( TRY TRY ( BLOCK BLOCK (  VAR_2 . add ( model ) )  VAR_2 . add ( model ) (  METHOD_8 ( STRING_1 ) )  METHOD_8 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( BLOCK BLOCK (  METHOD_9 ( VAR_3 , STRING_2 , STRING_3 , STRING_4 ) )  METHOD_9 ( VAR_3 , STRING_2 , STRING_3 , STRING_4 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.DiskImage ) TYPE org.ovirt.engine.core.common.businessentities.DiskImage ( NAME image ) NAME image ( IN METHOD_2 ( ) ) IN METHOD_2 ( ) ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_3 ( image . METHOD_4 ( ) ) ) INIT = METHOD_3 ( image . METHOD_4 ( ) ) ) VAR VAR ( IF IF ( COND VAR_2 . getSucceeded ( ) ) COND VAR_2 . getSucceeded ( ) ( THEN THEN (  METHOD_5 ( ) . METHOD_6 ( VAR_2 . METHOD_7 ( ) ) )  METHOD_5 ( ) . METHOD_6 ( VAR_2 . METHOD_7 ( ) ) ) THEN THEN ( ELSE ELSE (  throw new TYPE_2 ( VAR_2 . METHOD_8 ( ) . METHOD_9 ( ) , STRING_1 ) ; )  throw new TYPE_2 ( VAR_2 . METHOD_8 ( ) . METHOD_9 ( ) , STRING_1 ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 . METHOD_2 ( ) ) COND VAR_1 . METHOD_2 ( ) ( THEN THEN (  METHOD_3 ( ) . METHOD_4 ( TYPE_2 . METHOD_5 ( ) ) )  METHOD_3 ( ) . METHOD_4 ( TYPE_2 . METHOD_5 ( ) ) (  METHOD_3 ( ) . setIsChangable ( false ) )  METHOD_3 ( ) . setIsChangable ( false ) (  METHOD_3 ( ) . setEntity ( false ) )  METHOD_3 ( ) . setEntity ( false ) ) THEN THEN ( ELSE ELSE (  METHOD_3 ( ) . setIsChangable ( true ) )  METHOD_3 ( ) . setIsChangable ( true ) (  METHOD_3 ( ) . setEntity ( ( ( java.lang.Boolean ) ( TYPE_3 . METHOD_6 ( VAR_2 ) ) ) ) )  METHOD_3 ( ) . setEntity ( ( ( java.lang.Boolean ) ( TYPE_3 . METHOD_6 ( VAR_2 ) ) ) ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1<TYPE_2> ) RETURN TYPE_1<TYPE_2> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  VAR_1 . METHOD_3 ( vm ) )  VAR_1 . METHOD_3 ( vm ) (  VAR_1 . METHOD_4 ( VAR_2 ) )  VAR_1 . METHOD_4 ( VAR_2 ) (  VAR_1 . METHOD_5 ( org.ovirt.engine.core.compat.Guid . METHOD_6 ( ) ) )  VAR_1 . METHOD_5 ( org.ovirt.engine.core.compat.Guid . METHOD_6 ( ) ) ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME cmd ) NAME cmd ( INIT = new TYPE_1 ( VAR_1 , null ) ) INIT = new TYPE_1 ( VAR_1 , null ) ) VAR VAR (  cmd . METHOD_3 ( vm ) )  cmd . METHOD_3 ( vm ) (  cmd . METHOD_7 ( vm . getId ( ) ) )  cmd . METHOD_7 ( vm . getId ( ) ) (  return cmd ; )  return cmd ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = org.mockito.Mockito . METHOD_2 ( VAR_2 class ) ) INIT = org.mockito.Mockito . METHOD_2 ( VAR_2 class ) ) VAR VAR (  org.mockito.Mockito.when ( VAR_1 . get ( VAR_3 ) ) . thenReturn ( new org.ovirt.engine.core.common.businessentities.VM ( ) ) )  org.mockito.Mockito.when ( VAR_1 . get ( VAR_3 ) ) . thenReturn ( new org.ovirt.engine.core.common.businessentities.VM ( ) ) (  org.mockito.Mockito.when ( VAR_1 . get ( VAR_4 ) ) . METHOD_3 ( new TYPE_2 ( ) ) )  org.mockito.Mockito.when ( VAR_1 . get ( VAR_4 ) ) . METHOD_3 ( new TYPE_2 ( ) ) (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME VAR_1 ) NAME VAR_1 ( INIT = new org.ovirt.engine.core.common.businessentities.VM ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.VM ( ) ) VAR VAR (  VAR_1 . METHOD_2 ( VAR_2 . getId ( ) ) )  VAR_1 . METHOD_2 ( VAR_2 . getId ( ) ) (  org.mockito.Mockito.when ( VAR_3 . METHOD_3 ( ) ) . thenReturn ( TYPE_1 . METHOD_4 ( VAR_4 ) ) )  org.mockito.Mockito.when ( VAR_3 . METHOD_3 ( ) ) . thenReturn ( TYPE_1 . METHOD_4 ( VAR_4 ) ) (  VAR_5 . METHOD_5 ( ) )  VAR_5 . METHOD_5 ( ) (  org.mockito.Mockito . METHOD_6 ( VAR_5 ) . METHOD_7 ( VAR_6 ) )  org.mockito.Mockito . METHOD_6 ( VAR_5 ) . METHOD_7 ( VAR_6 ) (  org.mockito.Mockito . METHOD_6 ( VAR_5 , org.mockito.Mockito . METHOD_8 ( 1 ) ) . METHOD_7 ( TYPE_2 . any ( VAR_7 . VM class ) ) )  org.mockito.Mockito . METHOD_6 ( VAR_5 , org.mockito.Mockito . METHOD_8 ( 1 ) ) . METHOD_7 ( TYPE_2 . any ( VAR_7 . VM class ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME action ) NAME action ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_4 . METHOD_2 ( this , id ) ) INIT = TYPE_4 . METHOD_2 ( this , id ) ) VAR VAR (  < TYPE_5 > entities = METHOD_3 ( VAR_2 class , VAR_3 , new TYPE_6 ( VAR_1 ) ) )  < TYPE_5 > entities = METHOD_3 ( VAR_2 class , VAR_3 , new TYPE_6 ( VAR_1 ) ) ( IF IF ( COND ( entities . size ( ) ) == 0 ) COND ( entities . size ( ) ) == 0 ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF (  return METHOD_4 ( VAR_4 , new TYPE_7 ( VAR_1 , entities . get ( 0 ) . METHOD_5 ( ) ) ) ; )  return METHOD_4 ( VAR_4 , new TYPE_7 ( VAR_1 , entities . get ( 0 ) . METHOD_5 ( ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = this . METHOD_2 ( ) ) INIT = this . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_3 ( ) ) INIT = VAR_1 . METHOD_3 ( ) ) VAR VAR (  VAR_3 . METHOD_4 ( ( ( ( ( STRING_1 + ( VAR_1 . METHOD_5 ( ) ) ) + STRING_2 ) + ( VAR_2 . getId ( ) ) ) + STRING_3 ) ) )  VAR_3 . METHOD_4 ( ( ( ( ( STRING_1 + ( VAR_1 . METHOD_5 ( ) ) ) + STRING_2 ) + ( VAR_2 . getId ( ) ) ) + STRING_3 ) ) (  return VAR_2 . getId ( ) ; )  return VAR_2 . getId ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( STRING_1 , VAR_2 , VAR_3 , INT_1 , 0 ) ) INIT = METHOD_2 ( STRING_1 , VAR_2 , VAR_3 , INT_1 , 0 ) ) VAR VAR (  parameters . METHOD_3 ( VAR_1 ) )  parameters . METHOD_3 ( VAR_1 ) ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> ( NAME VAR_4 ) NAME VAR_4 ( INIT = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ) INIT = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ) VAR VAR (  org.mockito.Mockito.when ( VAR_5 . get ( VAR_1 . METHOD_4 ( ) ) ) . thenReturn ( VAR_6 ) )  org.mockito.Mockito.when ( VAR_5 . get ( VAR_1 . METHOD_4 ( ) ) ) . thenReturn ( VAR_6 ) (  org.mockito.Mockito.doReturn ( VAR_4 ) . when ( command ) . METHOD_5 ( VAR_1 . METHOD_4 ( ) ) )  org.mockito.Mockito.doReturn ( VAR_4 ) . when ( command ) . METHOD_5 ( VAR_1 . METHOD_4 ( ) ) (  TYPE_2 . METHOD_6 ( command ) )  TYPE_2 . METHOD_6 ( command ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME VAR_1 ) NAME VAR_1 ( INIT = new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; org.ovirt.engine.core.common.businessentities.StoragePool VAR_2 = ( ( org.ovirt.engine.core.common.businessentities.StoragePool ) ( returnValue ) ) ; model . METHOD_2 ( VAR_2 . METHOD_3 ( ) ) ; } } ) ) INIT = new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; org.ovirt.engine.core.common.businessentities.StoragePool VAR_2 = ( ( org.ovirt.engine.core.common.businessentities.StoragePool ) ( returnValue ) ) ; model . METHOD_2 ( VAR_2 . METHOD_3 ( ) ) ; } } ) ) VAR VAR ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ( INIT = ( ( TYPE_1 ) ( target ) ) ) INIT = ( ( TYPE_1 ) ( target ) ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StoragePool ) TYPE org.ovirt.engine.core.common.businessentities.StoragePool ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( org.ovirt.engine.core.common.businessentities.StoragePool ) ( returnValue ) ) ) INIT = ( ( org.ovirt.engine.core.common.businessentities.StoragePool ) ( returnValue ) ) ) VAR VAR (  model . METHOD_2 ( VAR_2 . METHOD_3 ( ) ) )  model . METHOD_2 ( VAR_2 . METHOD_3 ( ) ) ) BLOCK BLOCK ) METHOD METHOD (  TYPE_2 . METHOD_4 ( VAR_1 , getEntity ( ) . getStoragePoolId ( ) ) )  TYPE_2 . METHOD_4 ( VAR_1 , getEntity ( ) . getStoragePoolId ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( METHOD_2 ( ) . METHOD_3 ( ) , METHOD_2 ( ) . getStoragePoolId ( ) , VAR_2 ) ) INIT = new TYPE_2 ( METHOD_2 ( ) . METHOD_3 ( ) , METHOD_2 ( ) . getStoragePoolId ( ) , VAR_2 ) ) VAR VAR (  org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_4 ( ) . METHOD_5 ( VAR_1 ) )  org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_4 ( ) . METHOD_5 ( VAR_1 ) (  METHOD_6 ( ) . METHOD_7 ( VAR_3 ) )  METHOD_6 ( ) . METHOD_7 ( VAR_3 ) (  METHOD_8 ( ) )  METHOD_8 ( ) (  return new TYPE_1 ( VAR_4 , VAR_5 ) ; )  return new TYPE_1 ( VAR_4 , VAR_5 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < TYPE_1 > ( ) ) INIT = new java.util.ArrayList < TYPE_1 > ( ) ) VAR VAR (  VAR_1 . add ( new TYPE_1 ( TYPE_2 . getParameters ( ) . getStoragePoolId ( ) , VAR_2 . StoragePool , VAR_3 ) ) )  VAR_1 . add ( new TYPE_1 ( TYPE_2 . getParameters ( ) . getStoragePoolId ( ) , VAR_2 . StoragePool , VAR_3 ) ) (  VAR_1 . add ( new TYPE_1 ( TYPE_2 . getParameters ( ) . METHOD_2 ( ) , VAR_2 . VDS , VAR_3 ) ) )  VAR_1 . add ( new TYPE_1 ( TYPE_2 . getParameters ( ) . METHOD_2 ( ) , VAR_2 . VDS , VAR_3 ) ) (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . getReturnValue ( ) ) INIT = VAR_1 . getReturnValue ( ) ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ( INIT = false ) INIT = false ) VAR VAR ( IF IF ( COND ( VAR_2 != null ) && ( VAR_2 . getSucceeded ( ) ) ) COND ( VAR_2 != null ) && ( VAR_2 . getSucceeded ( ) ) ( THEN THEN (  VAR_3 = true )  VAR_3 = true ) THEN THEN ) IF IF (  METHOD_2 ( ( VAR_3 ? ( ( org.ovirt.engine.core.compat.Guid ) ( VAR_2 . METHOD_3 ( ) ) ) : null ) , VAR_3 ) )  METHOD_2 ( ( VAR_3 ? ( ( org.ovirt.engine.core.compat.Guid ) ( VAR_2 . METHOD_3 ( ) ) ) : null ) , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME vmId ) NAME vmId ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_3 ( ) ) INIT = new TYPE_3 ( ) ) VAR VAR (  VAR_3 . METHOD_2 ( true , vmId ) )  VAR_3 . METHOD_2 ( true , vmId ) ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_4 . getId ( ) ) == null ) COND ( VAR_4 . getId ( ) ) == null ( THEN THEN (  VAR_4 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) )  VAR_4 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ) THEN THEN ) IF IF (  VAR_4 . METHOD_4 ( vmId ) )  VAR_4 . METHOD_4 ( vmId ) (  VAR_3 . add ( VAR_4 , VAR_2 , false ) )  VAR_3 . add ( VAR_4 , VAR_2 , false ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1.Disk ) RETURN TYPE_1.Disk ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.Disk ) TYPE TYPE_1.Disk ( NAME model ) NAME model ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  model . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_1 class ) ) )  model . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_1 class ) ) (  model . METHOD_4 ( TYPE_2 . METHOD_3 ( VAR_2 class ) ) )  model . METHOD_4 ( TYPE_2 . METHOD_3 ( VAR_2 class ) ) (  model . METHOD_5 ( TYPE_2 . METHOD_3 ( VAR_3 class ) ) )  model . METHOD_5 ( TYPE_2 . METHOD_3 ( VAR_3 class ) ) (  model . METHOD_6 ( new TYPE_3 ( ) ) )  model . METHOD_6 ( new TYPE_3 ( ) ) (  return model ; )  return model ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_2 ( VAR_3 , new TYPE_3 ( null , METHOD_3 ( ) , name ) ) ) INIT = VAR_2 . METHOD_2 ( VAR_3 , new TYPE_3 ( null , METHOD_3 ( ) , name ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_4 ) NAME VAR_4 ( INIT = ( ( TYPE_4 ) ( VAR_1 . getReturnValue ( ) ) ) ) INIT = ( ( TYPE_4 ) ( VAR_1 . getReturnValue ( ) ) ) ) VAR VAR ( IF IF ( COND VAR_4 == null ) COND VAR_4 == null ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF (  return METHOD_4 ( VAR_4 ) ; )  return METHOD_4 ( VAR_4 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME vds ) NAME vds ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = vds . METHOD_2 ( ) ) INIT = vds . METHOD_2 ( ) ) VAR VAR (  return ( ( VAR_1 . METHOD_3 ( ) ) == ( VAR_2 ) ) || ( ( ( VAR_1 . METHOD_3 ( ) ) == ( VAR_3 ) ) && ( ( VAR_1 . METHOD_4 ( ) ) == ( VAR_4 ) ) ) ; )  return ( ( VAR_1 . METHOD_3 ( ) ) == ( VAR_2 ) ) || ( ( ( VAR_1 . METHOD_3 ( ) ) == ( VAR_3 ) ) && ( ( VAR_1 . METHOD_4 ( ) ) == ( VAR_4 ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) == null ) COND ( VAR_1 ) == null ( THEN THEN (  VAR_1 = new TYPE_1 ( TYPE_2 . name ( ) ) . append ( java.lang.String . METHOD_2 ( STRING_1 , TYPE_3 . METHOD_3 ( ) ) ) . toString ( ) )  VAR_1 = new TYPE_1 ( TYPE_2 . name ( ) ) . append ( java.lang.String . METHOD_2 ( STRING_1 , TYPE_3 . METHOD_3 ( ) ) ) . toString ( ) ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME storageDomain ) NAME storageDomain ( INIT = METHOD_3 ( VAR_1 ) ) INIT = METHOD_3 ( VAR_1 ) ) VAR VAR (  storageDomain . METHOD_4 ( VAR_2 ) )  storageDomain . METHOD_4 ( VAR_2 ) (  METHOD_5 ( VAR_3 ) )  METHOD_5 ( VAR_3 ) (  METHOD_6 ( VAR_4 , org.ovirt.engine.core.compat.Guid . METHOD_7 ( ) , VAR_3 ) )  METHOD_6 ( VAR_4 , org.ovirt.engine.core.compat.Guid . METHOD_7 ( ) , VAR_3 ) (  TYPE_2 . METHOD_8 ( command . METHOD_9 ( ) ) )  TYPE_2 . METHOD_8 ( command . METHOD_9 ( ) ) (  TYPE_2 . METHOD_10 ( command . getReturnValue ( ) . METHOD_11 ( ) . METHOD_12 ( TYPE_3 . toString ( ) ) ) )  TYPE_2 . METHOD_10 ( command . getReturnValue ( ) . METHOD_11 ( ) . METHOD_12 ( TYPE_3 . toString ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  assertEquals ( VAR_2 [ VAR_1 ] . toString ( ) , model . getId ( ) ) )  assertEquals ( VAR_2 [ VAR_1 ] . toString ( ) , model . getId ( ) ) (  assertEquals ( VAR_3 [ VAR_1 ] . METHOD_2 ( ) , model . METHOD_3 ( ) ) )  assertEquals ( VAR_3 [ VAR_1 ] . METHOD_2 ( ) , model . METHOD_3 ( ) ) (  assertEquals ( VAR_4 [ VAR_1 ] , model . getName ( ) ) )  assertEquals ( VAR_4 [ VAR_1 ] , model . getName ( ) ) (  METHOD_4 ( model . METHOD_5 ( ) ) )  METHOD_4 ( model . METHOD_5 ( ) ) (  METHOD_6 ( model ) )  METHOD_6 ( model ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VmTemplate ) TYPE org.ovirt.engine.core.common.businessentities.VmTemplate ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . get ( VAR_3 ) ) INIT = VAR_2 . get ( VAR_3 ) ) VAR VAR (  TYPE_1 . METHOD_2 ( VAR_1 ) )  TYPE_1 . METHOD_2 ( VAR_1 ) ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ( INIT = VAR_1 . getName ( ) ) INIT = VAR_1 . getName ( ) ) VAR VAR (  TYPE_1 . METHOD_3 ( name . equals ( VAR_4 . METHOD_4 ( VAR_3 , VAR_5 . VmTemplate ) ) ) )  TYPE_1 . METHOD_3 ( name . equals ( VAR_4 . METHOD_4 ( VAR_3 , VAR_5 . VmTemplate ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source != null ? ( ( org.ovirt.engine.core.common.businessentities.StorageDomain ) ( source ) ) : null ; )  return source != null ? ( ( org.ovirt.engine.core.common.businessentities.StorageDomain ) ( source ) ) : null ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( org.ovirt.engine.core.common.businessentities.StorageDomain ) ( source ) ) : null ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( org.ovirt.engine.core.common.businessentities.StorageDomain ) ( source ) ) : null ; } } (  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new TYPE_1 ( VAR_1 ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new TYPE_1 ( VAR_1 ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME status ) NAME status ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) ) != status ) COND ( TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) ) != status ( THEN THEN (  TYPE_3 . getInstance ( ) . METHOD_4 ( ) . METHOD_5 ( VAR_1 , new TYPE_4 ( TYPE_2 . METHOD_2 ( ) . getId ( ) , status ) ) )  TYPE_3 . getInstance ( ) . METHOD_4 ( ) . METHOD_5 ( VAR_1 , new TYPE_4 ( TYPE_2 . METHOD_2 ( ) . getId ( ) , status ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.VdcQueryReturnValue ) TYPE TYPE_1.VdcQueryReturnValue ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( VAR_2 . VdcQueryReturnValue class ) ) INIT = TYPE_2 . METHOD_2 ( VAR_2 . VdcQueryReturnValue class ) ) VAR VAR (  TYPE_3 . METHOD_3 ( VAR_3 . runQuery ( TYPE_3 . METHOD_4 ( VAR_4 ) , METHOD_5 ( ) ) ) . METHOD_6 ( VAR_1 ) )  TYPE_3 . METHOD_3 ( VAR_3 . runQuery ( TYPE_3 . METHOD_4 ( VAR_4 ) , METHOD_5 ( ) ) ) . METHOD_6 ( VAR_1 ) (  TYPE_3 . METHOD_3 ( VAR_1 . getSucceeded ( ) ) . METHOD_6 ( true ) . METHOD_7 ( ) )  TYPE_3 . METHOD_3 ( VAR_1 . getSucceeded ( ) ) . METHOD_6 ( true ) . METHOD_7 ( ) (  TYPE_3 . METHOD_3 ( VAR_1 . getReturnValue ( ) ) . METHOD_6 ( METHOD_8 ( ) ) . METHOD_7 ( ) )  TYPE_3 . METHOD_3 ( VAR_1 . getReturnValue ( ) ) . METHOD_6 ( METHOD_8 ( ) ) . METHOD_7 ( ) (  TYPE_2 . METHOD_9 ( ) )  TYPE_2 . METHOD_9 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.Boolean ) TYPE java.lang.Boolean ( NAME VAR_1 ) NAME VAR_1 ( INIT = java.lang.Boolean . TRUE ) INIT = java.lang.Boolean . TRUE ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) INIT = ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) VAR VAR ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN (  METHOD_1 ( VAR_2 ) )  METHOD_1 ( VAR_2 ) (  VAR_1 = VAR_2 . METHOD_2 ( ) )  VAR_1 = VAR_2 . METHOD_2 ( ) (  ( ( TYPE_3 ) ( model ) ) . METHOD_3 ( ) . setEntity ( VAR_2 . METHOD_4 ( ) ) )  ( ( TYPE_3 ) ( model ) ) . METHOD_3 ( ) . setEntity ( VAR_2 . METHOD_4 ( ) ) ) THEN THEN ) IF IF (  ( ( TYPE_3 ) ( model ) ) . METHOD_5 ( ) . setEntity ( VAR_1 ) )  ( ( TYPE_3 ) ( model ) ) . METHOD_5 ( ) . setEntity ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME vds ) NAME vds ( INIT = new org.ovirt.engine.core.common.businessentities.VDS ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.VDS ( ) ) VAR VAR (  vds . METHOD_2 ( true ) )  vds . METHOD_2 ( true ) ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 < > ( ) ) INIT = new TYPE_1 < > ( ) ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME result ) NAME result ( INIT = validator . METHOD_3 ( vds , null , VAR_1 ) ) INIT = validator . METHOD_3 ( vds , null , VAR_1 ) ) VAR VAR (  TYPE_2 . METHOD_4 ( result ) )  TYPE_2 . METHOD_4 ( result ) (  TYPE_2 . assertEquals ( VAR_1 . size ( ) , 2 ) )  TYPE_2 . assertEquals ( VAR_1 . size ( ) , 2 ) (  TYPE_2 . METHOD_5 ( VAR_1 . METHOD_6 ( STRING_1 ) ) )  TYPE_2 . METHOD_5 ( VAR_1 . METHOD_6 ( STRING_1 ) ) (  TYPE_2 . METHOD_5 ( VAR_1 . METHOD_6 ( STRING_2 ) ) )  TYPE_2 . METHOD_5 ( VAR_1 . METHOD_6 ( STRING_2 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME returnValue ) NAME returnValue ( INIT = METHOD_2 ( VAR_1 , TYPE_2 . getParameters ( ) ) ) INIT = METHOD_2 ( VAR_1 , TYPE_2 . getParameters ( ) ) ) VAR VAR (  METHOD_3 ( returnValue . getSucceeded ( ) ) )  METHOD_3 ( returnValue . getSucceeded ( ) ) ( IF IF ( COND returnValue . getSucceeded ( ) ) COND returnValue . getSucceeded ( ) ( THEN THEN ( IF IF ( COND TYPE_3 . METHOD_4 ( METHOD_5 ( ) , TYPE_2 . METHOD_6 ( ) . METHOD_7 ( ) ) ) COND TYPE_3 . METHOD_4 ( METHOD_5 ( ) , TYPE_2 . METHOD_6 ( ) . METHOD_7 ( ) ) ( THEN THEN (  METHOD_8 ( ) )  METHOD_8 ( ) ) THEN THEN ) IF IF ) THEN THEN ( ELSE ELSE (  METHOD_9 ( returnValue ) )  METHOD_9 ( returnValue ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  METHOD_3 ( METHOD_4 ( VAR_1 , VAR_2 class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 [ 0 ] } , true , true ) ) )  METHOD_3 ( METHOD_4 ( VAR_1 , VAR_2 class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 [ 0 ] } , true , true ) ) (  METHOD_5 ( VAR_4 . METHOD_6 ( VAR_3 [ 0 ] . toString ( ) ) ) )  METHOD_5 ( VAR_4 . METHOD_6 ( VAR_3 [ 0 ] . toString ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME command ) NAME command ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_2 ( ) )  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_2 ( ) (  org.mockito.Mockito.doReturn ( METHOD_3 ( VAR_2 ) ) . when ( command ) . METHOD_4 ( ) )  org.mockito.Mockito.doReturn ( METHOD_3 ( VAR_2 ) ) . when ( command ) . METHOD_4 ( ) (  org.mockito.Mockito.doReturn ( METHOD_5 ( VAR_3 ) ) . when ( VAR_1 ) . METHOD_6 ( VAR_3 ) )  org.mockito.Mockito.doReturn ( METHOD_5 ( VAR_3 ) ) . when ( VAR_1 ) . METHOD_6 ( VAR_3 ) (  org.mockito.Mockito.doReturn ( METHOD_7 ( VAR_4 ) ) . when ( VAR_1 ) . METHOD_6 ( VAR_4 ) )  org.mockito.Mockito.doReturn ( METHOD_7 ( VAR_4 ) ) . when ( VAR_1 ) . METHOD_6 ( VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME status ) NAME status ( INIT = VAR_1 . getStatus ( ) ) INIT = VAR_1 . getStatus ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_2 ) NAME VAR_2 ( INIT = null ) INIT = null ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( SWITCH SWITCH ( NAME status ) NAME status ( CASE VAR_4 ( BLOCK BLOCK (  VAR_3 = VAR_5 . METHOD_2 ( ) )  VAR_3 = VAR_5 . METHOD_2 ( ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_4 ( CASE VAR_6 ( BLOCK BLOCK (  VAR_3 = VAR_5 . METHOD_3 ( ) )  VAR_3 = VAR_5 . METHOD_3 ( ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_6 ( CASE VAR_7 ( BLOCK BLOCK (  VAR_3 = VAR_5 . METHOD_4 ( ) )  VAR_3 = VAR_5 . METHOD_4 ( ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_7 ( DEFAULT DEFAULT ( BLOCK BLOCK (  VAR_3 = VAR_5 . METHOD_3 ( ) )  VAR_3 = VAR_5 . METHOD_3 ( ) ) BLOCK BLOCK ) DEFAULT DEFAULT ) SWITCH SWITCH (  return TYPE_5 . METHOD_5 ( VAR_3 ) ; )  return TYPE_5 . METHOD_5 ( VAR_3 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( null ) ) INIT = METHOD_2 ( null ) ) VAR VAR (  VAR_2 . add ( VAR_3 ) )  VAR_2 . add ( VAR_3 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_3 ( VAR_5 ) ) INIT = new TYPE_3 ( VAR_5 ) ) VAR VAR (  METHOD_3 ( 1 , VAR_4 ) )  METHOD_3 ( 1 , VAR_4 ) (  VAR_6 . METHOD_4 ( ) )  VAR_6 . METHOD_4 ( ) (  VAR_7 . METHOD_5 ( VAR_1 ) )  VAR_7 . METHOD_5 ( VAR_1 ) ( TRY TRY ( BLOCK BLOCK (  METHOD_6 ( ) )  METHOD_6 ( ) (  METHOD_7 ( STRING_1 ) )  METHOD_7 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_8 ) NAME VAR_8 ( BLOCK BLOCK (  METHOD_8 ( VAR_8 , VAR_9 , VAR_4 ) )  METHOD_8 ( VAR_8 , VAR_9 , VAR_4 ) ) BLOCK BLOCK ) CATCH CATCH ( FINALLY FINALLY (  VAR_2 . METHOD_9 ( ) )  VAR_2 . METHOD_9 ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME VAR_2 ) NAME VAR_2 ( INIT = new org.ovirt.engine.core.common.businessentities.VDS ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.VDS ( ) ) VAR VAR (  VAR_2 . setId ( VAR_3 ) )  VAR_2 . setId ( VAR_3 ) (  org.mockito.Mockito.when ( VAR_4 . METHOD_2 ( ) ) . thenReturn ( VAR_2 ) )  org.mockito.Mockito.when ( VAR_4 . METHOD_2 ( ) ) . thenReturn ( VAR_2 ) (  org.mockito.Mockito.when ( VAR_4 . METHOD_2 ( true ) ) . thenReturn ( VAR_2 ) )  org.mockito.Mockito.when ( VAR_4 . METHOD_2 ( true ) ) . thenReturn ( VAR_2 ) ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME VAR_5 ) NAME VAR_5 ( INIT = new org.ovirt.engine.core.common.businessentities.VDS ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.VDS ( ) ) VAR VAR (  VAR_5 . setId ( VAR_6 ) )  VAR_5 . setId ( VAR_6 ) (  org.mockito.Mockito.when ( VAR_4 . METHOD_2 ( true , VAR_3 ) ) . thenReturn ( VAR_5 ) )  org.mockito.Mockito.when ( VAR_4 . METHOD_2 ( true , VAR_3 ) ) . thenReturn ( VAR_5 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDSGroup> ) RETURN java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDSGroup> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDSGroup> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDSGroup> ( NAME list ) NAME list ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDSGroup> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDSGroup> ( NAME VAR_3 ) NAME VAR_3 ( INIT = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ( ) ) INIT = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ) TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ( NAME cluster ) NAME cluster ( IN list ) IN list ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 && ( cluster . METHOD_2 ( ) ) ) || ( VAR_2 && ( cluster . METHOD_3 ( ) ) ) ) COND ( VAR_1 && ( cluster . METHOD_2 ( ) ) ) || ( VAR_2 && ( cluster . METHOD_3 ( ) ) ) ( THEN THEN (  VAR_3 . add ( cluster ) )  VAR_3 . add ( cluster ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  TYPE_1 . METHOD_4 ( VAR_3 , new TYPE_2 ( ) ) )  TYPE_1 . METHOD_4 ( VAR_3 , new TYPE_2 ( ) ) (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( STRING_1 , VAR_2 , VAR_3 , INT_1 , 0 ) ) INIT = METHOD_2 ( STRING_1 , VAR_2 , VAR_3 , INT_1 , 0 ) ) VAR VAR (  parameters . METHOD_3 ( VAR_1 ) )  parameters . METHOD_3 ( VAR_1 ) (  parameters . METHOD_4 ( null ) )  parameters . METHOD_4 ( null ) (  parameters . METHOD_3 ( VAR_1 ) )  parameters . METHOD_3 ( VAR_1 ) (  org.mockito.Mockito.when ( VAR_4 . get ( VAR_1 . METHOD_5 ( ) ) ) . thenReturn ( VAR_5 ) )  org.mockito.Mockito.when ( VAR_4 . get ( VAR_1 . METHOD_5 ( ) ) ) . thenReturn ( VAR_5 ) (  TYPE_2 . METHOD_6 ( command ) )  TYPE_2 . METHOD_6 ( command ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return TYPE_1 . METHOD_2 ( vm , TYPE_2 . getReturnValue ( ) . METHOD_3 ( ) , vm . METHOD_4 ( ) , METHOD_5 ( ) . getValue ( ) , false , false , false , false , true , false , false , true , TYPE_3 . METHOD_6 ( ) ) ; )  return TYPE_1 . METHOD_2 ( vm , TYPE_2 . getReturnValue ( ) . METHOD_3 ( ) , vm . METHOD_4 ( ) , METHOD_5 ( ) . getValue ( ) , false , false , false , false , true , false , false , true , TYPE_3 . METHOD_6 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_2 . METHOD_2 ( STRING_1 ) )  VAR_2 . METHOD_2 ( STRING_1 ) ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_1 . METHOD_3 ( TYPE_2 . getInstance ( ) . METHOD_4 ( VAR_1 ) . METHOD_5 ( ) , TYPE_3 . METHOD_6 ( VAR_4 < java.lang.Integer > METHOD_7 ( VAR_5 ) ) ) ) INIT = TYPE_1 . METHOD_3 ( TYPE_2 . getInstance ( ) . METHOD_4 ( VAR_1 ) . METHOD_5 ( ) , TYPE_3 . METHOD_6 ( VAR_4 < java.lang.Integer > METHOD_7 ( VAR_5 ) ) ) ) VAR VAR (  VAR_3 = TYPE_1 . METHOD_3 ( VAR_4 < java.lang.Integer > METHOD_7 ( VAR_6 ) , VAR_3 ) )  VAR_3 = TYPE_1 . METHOD_3 ( VAR_4 < java.lang.Integer > METHOD_7 ( VAR_6 ) , VAR_3 ) (  METHOD_8 ( VAR_1 ) . METHOD_9 ( VAR_3 , VAR_7 ) )  METHOD_8 ( VAR_1 ) . METHOD_9 ( VAR_3 , VAR_7 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2.VdcActionType ) TYPE TYPE_2.VdcActionType ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2.VdcActionParametersBase ) TYPE TYPE_2.VdcActionParametersBase ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_3 ( 1 ) ) INIT = new TYPE_3 ( 1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4<TYPE_5>.TYPE_6 ) TYPE TYPE_4<TYPE_5>.TYPE_6 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_6 ( VAR_3 , VAR_1 , VAR_2 ) ) INIT = new TYPE_6 ( VAR_3 , VAR_1 , VAR_2 ) ) VAR VAR (  TYPE_7 . METHOD_2 ( VAR_4 ) )  TYPE_7 . METHOD_2 ( VAR_4 ) ( TRY TRY ( BLOCK BLOCK (  VAR_3 . METHOD_3 ( ) )  VAR_3 . METHOD_3 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_8 ) TYPE TYPE_8 ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  return VAR_4 . getReturnValue ( ) ; )  return VAR_4 . getReturnValue ( ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_9 ) TYPE TYPE_9 ( NAME VAR_5 ) NAME VAR_5 ( BLOCK BLOCK (  VAR_6 . error ( STRING_1 , VAR_5 ) )  VAR_6 . error ( STRING_1 , VAR_5 ) (  return null ; )  return null ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_3 ) ( item ) ) . getStatus ( ) ) INIT = ( ( TYPE_3 ) ( item ) ) . getStatus ( ) ) VAR VAR ( IF IF ( COND VAR_1 == ( VAR_2 ) ) COND VAR_1 == ( VAR_2 ) ( THEN THEN (  return VAR_3 . METHOD_2 ( ) ; )  return VAR_3 . METHOD_2 ( ) ; ) THEN THEN ( ELSE ELSE ( IF IF ( COND VAR_1 == ( VAR_4 ) ) COND VAR_1 == ( VAR_4 ) ( THEN THEN (  return VAR_3 . METHOD_3 ( ) ; )  return VAR_3 . METHOD_3 ( ) ; ) THEN THEN ( ELSE ELSE (  return VAR_3 . METHOD_4 ( ) ; )  return VAR_3 . METHOD_4 ( ) ; ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_3 ( VAR_1 ) ) INIT = new TYPE_3 ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_5 ( VAR_2 ) ) INIT = new TYPE_5 ( VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_5 ) NAME VAR_5 ( INIT = new byte [ INT_1 ] ) INIT = new byte [ INT_1 ] ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_6 ) NAME VAR_6 ) VAR VAR ( WHILE WHILE ( COND ( VAR_6 = VAR_3 . METHOD_2 ( VAR_5 ) ) > 0 ) COND ( VAR_6 = VAR_3 . METHOD_2 ( VAR_5 ) ) > 0 ( BLOCK BLOCK (  VAR_4 . METHOD_3 ( VAR_5 , 0 , VAR_6 ) )  VAR_4 . METHOD_3 ( VAR_5 , 0 , VAR_6 ) ) BLOCK BLOCK ) WHILE WHILE (  VAR_3 . METHOD_4 ( ) )  VAR_3 . METHOD_4 ( ) (  VAR_4 . METHOD_4 ( ) )  VAR_4 . METHOD_4 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . getParameters ( ) . METHOD_2 ( ) ) INIT = TYPE_2 . getParameters ( ) . METHOD_2 ( ) ) VAR VAR (  return ( validate ( TYPE_2 . METHOD_3 ( ) . METHOD_4 ( VAR_1 . getId ( ) ) ) ) && ( validate ( TYPE_2 . METHOD_3 ( ) . METHOD_5 ( VAR_1 ) ) ) ; )  return ( validate ( TYPE_2 . METHOD_3 ( ) . METHOD_4 ( VAR_1 . getId ( ) ) ) ) && ( validate ( TYPE_2 . METHOD_3 ( ) . METHOD_5 ( VAR_1 ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.Object> ) TYPE java.util.Map<java.lang.String,java.lang.Object> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( VAR_2 , VAR_3 , VAR_4 ) ) INIT = TYPE_1 . METHOD_2 ( VAR_2 , VAR_3 , VAR_4 ) ) VAR VAR (  TYPE_2 . assertEquals ( 2 , VAR_1 . size ( ) ) )  TYPE_2 . assertEquals ( 2 , VAR_1 . size ( ) ) (  TYPE_2 . METHOD_3 ( VAR_1 . METHOD_4 ( VAR_5 ) ) )  TYPE_2 . METHOD_3 ( VAR_1 . METHOD_4 ( VAR_5 ) ) (  TYPE_2 . assertEquals ( TYPE_3 . getValue ( ) , VAR_1 . get ( VAR_5 ) ) )  TYPE_2 . assertEquals ( TYPE_3 . getValue ( ) , VAR_1 . get ( VAR_5 ) ) (  TYPE_2 . METHOD_3 ( VAR_1 . METHOD_4 ( VAR_6 ) ) )  TYPE_2 . METHOD_3 ( VAR_1 . METHOD_4 ( VAR_6 ) ) (  TYPE_2 . assertEquals ( STRING_1 , VAR_1 . get ( VAR_6 ) ) )  TYPE_2 . assertEquals ( STRING_1 , VAR_1 . get ( VAR_6 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME nic ) NAME nic ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.Network ) TYPE org.ovirt.engine.core.common.businessentities.Network ( NAME VAR_2 ) NAME VAR_2 ( INIT = new org.ovirt.engine.core.common.businessentities . Network ( ) ) INIT = new org.ovirt.engine.core.common.businessentities . Network ( ) ) VAR VAR (  VAR_2 . METHOD_2 ( VAR_1 ) )  VAR_2 . METHOD_2 ( VAR_1 ) (  VAR_2 . METHOD_3 ( nic . METHOD_4 ( ) ) )  VAR_2 . METHOD_3 ( nic . METHOD_4 ( ) ) (  VAR_2 . METHOD_5 ( nic . METHOD_6 ( ) ) )  VAR_2 . METHOD_5 ( nic . METHOD_6 ( ) ) (  VAR_2 . METHOD_7 ( nic . METHOD_8 ( ) ) )  VAR_2 . METHOD_7 ( nic . METHOD_8 ( ) ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_1 ( VAR_2 , this ) ) INIT = new TYPE_1 ( VAR_2 , this ) ) VAR VAR (  VAR_4 . put ( VAR_1 , VAR_3 ) )  VAR_4 . put ( VAR_1 , VAR_3 ) (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME cluster ) NAME cluster ( INIT = METHOD_2 ( true , VAR_1 ) ) INIT = METHOD_2 ( true , VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2<org.ovirt.engine.core.compat.Guid> ) TYPE TYPE_2<org.ovirt.engine.core.compat.Guid> ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_3 . METHOD_3 ( VAR_3 , VAR_4 ) ) INIT = TYPE_3 . METHOD_3 ( VAR_3 , VAR_4 ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_4> ) TYPE java.util.List<TYPE_4> ( NAME VAR_5 ) NAME VAR_5 ( INIT = METHOD_4 ( VAR_1 , VAR_6 ) ) INIT = METHOD_4 ( VAR_1 , VAR_6 ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_7 ) NAME VAR_7 ( IN VAR_5 ) IN VAR_5 ( BLOCK BLOCK (  VAR_7 . METHOD_5 ( STRING_1 ) )  VAR_7 . METHOD_5 ( STRING_1 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  org.mockito.Mockito.doReturn ( VAR_5 ) . when ( VAR_8 ) . METHOD_6 ( VAR_1 ) )  org.mockito.Mockito.doReturn ( VAR_5 ) . when ( VAR_8 ) . METHOD_6 ( VAR_1 ) (  TYPE_5 . METHOD_7 ( VAR_9 . METHOD_8 ( cluster , VAR_2 ) . isEmpty ( ) ) )  TYPE_5 . METHOD_7 ( VAR_9 . METHOD_8 ( cluster , VAR_2 ) . isEmpty ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StoragePool> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StoragePool> ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ) ( returnValue ) ) ) INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ) ( returnValue ) ) ) VAR VAR ( IF IF ( COND ( VAR_1 != null ) && ( ! ( VAR_1 . isEmpty ( ) ) ) ) COND ( VAR_1 != null ) && ( ! ( VAR_1 . isEmpty ( ) ) ) ( THEN THEN (  pool = VAR_1 . get ( 0 ) )  pool = VAR_1 . get ( 0 ) (  METHOD_1 ( pool . getId ( ) , getEntity ( ) . getId ( ) ) )  METHOD_1 ( pool . getId ( ) , getEntity ( ) . getId ( ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VM> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VM> ( NAME vms ) NAME vms ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ( IN vms ) IN vms ( BLOCK BLOCK ( IF IF ( COND ( ! ( vm . METHOD_3 ( ) ) ) && ( ( vm . METHOD_4 ( ) ) != null ) ) COND ( ! ( vm . METHOD_3 ( ) ) ) && ( ( vm . METHOD_4 ( ) ) != null ) ( THEN THEN (  TYPE_1 . METHOD_5 ( vm . METHOD_4 ( ) , vm . getId ( ) , VAR_2 , new TYPE_2 < org.ovirt.engine.core.compat.Guid > ( ) ) )  TYPE_1 . METHOD_5 ( vm . METHOD_4 ( ) , vm . getId ( ) , VAR_2 , new TYPE_2 < org.ovirt.engine.core.compat.Guid > ( ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( INT_1 , null ) ) INIT = TYPE_1 . METHOD_2 ( INT_1 , null ) ) VAR VAR (  TYPE_2 . METHOD_3 ( ( ( VAR_1 . size ( ) ) == 2 ) ) )  TYPE_2 . METHOD_3 ( ( ( VAR_1 . size ( ) ) == 2 ) ) ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME model ) NAME model ( IN TYPE_3 . METHOD_4 ( STRING_1 ) ) IN TYPE_3 . METHOD_4 ( STRING_1 ) ( BLOCK BLOCK (  TYPE_2 . METHOD_3 ( VAR_1 . METHOD_5 ( model . METHOD_6 ( ) ) ) )  TYPE_2 . METHOD_3 ( VAR_1 . METHOD_5 ( model . METHOD_6 ( ) ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  VAR_1 . METHOD_3 ( VAR_2 ) )  VAR_1 . METHOD_3 ( VAR_2 ) (  org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_4 ( TYPE_1 . any ( VAR_3 . Guid class ) ) )  org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_4 ( TYPE_1 . any ( VAR_3 . Guid class ) ) (  org.mockito.Mockito.when ( VAR_4 . METHOD_5 ( TYPE_1 . METHOD_6 ( ) , TYPE_1 . any ( VAR_3 . Version class ) ) ) . thenReturn ( TYPE_2 . METHOD_7 ( STRING_1 ) ) )  org.mockito.Mockito.when ( VAR_4 . METHOD_5 ( TYPE_1 . METHOD_6 ( ) , TYPE_1 . any ( VAR_3 . Version class ) ) ) . thenReturn ( TYPE_2 . METHOD_7 ( STRING_1 ) ) (  command . METHOD_8 ( ) )  command . METHOD_8 ( ) (  TYPE_3 . METHOD_9 ( command , VAR_5 ) )  TYPE_3 . METHOD_9 ( command , VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME iface ) NAME iface ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  org.mockito.Mockito.when ( VAR_4 . METHOD_2 ( iface . METHOD_3 ( ) ) ) . thenReturn ( VAR_1 ) )  org.mockito.Mockito.when ( VAR_4 . METHOD_2 ( iface . METHOD_3 ( ) ) ) . thenReturn ( VAR_1 ) (  TYPE_3 . assertEquals ( VAR_3 , VAR_5 . add ( iface , TYPE_4 . getInstance ( ) ) ) )  TYPE_3 . assertEquals ( VAR_3 , VAR_5 . add ( iface , TYPE_4 . getInstance ( ) ) ) (  METHOD_4 ( iface , VAR_2 ) )  METHOD_4 ( iface , VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = INT_1 ) INIT = INT_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME result ) NAME result ( INIT = 1 ) INIT = 1 ) VAR VAR (  result = ( VAR_1 * result ) + ( ( VAR_2 ) * VAR_1 ) )  result = ( VAR_1 * result ) + ( ( VAR_2 ) * VAR_1 ) (  result = ( VAR_1 * result ) + ( ( VAR_3 ) == null ? 0 : VAR_3 . METHOD_1 ( ) ) )  result = ( VAR_1 * result ) + ( ( VAR_3 ) == null ? 0 : VAR_3 . METHOD_1 ( ) ) (  result = ( VAR_1 * result ) + ( ( VAR_4 ) == null ? 0 : VAR_4 . METHOD_1 ( ) ) )  result = ( VAR_1 * result ) + ( ( VAR_4 ) == null ? 0 : VAR_4 . METHOD_1 ( ) ) (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1.ValidationResult ) RETURN TYPE_1.ValidationResult ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 < java.util.List < java.lang.String > > METHOD_2 ( VAR_3 ) ) INIT = VAR_2 < java.util.List < java.lang.String > > METHOD_2 ( VAR_3 ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_2 . getInstance ( ) . get ( VAR_5 class ) . METHOD_3 ( ) . get ( vm . METHOD_4 ( ) ) ) INIT = TYPE_2 . getInstance ( ) . get ( VAR_5 class ) . METHOD_3 ( ) . get ( vm . METHOD_4 ( ) ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_6 ) NAME VAR_6 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( IF IF ( COND VAR_6 . METHOD_5 ( VAR_4 ) ) COND VAR_6 . METHOD_5 ( VAR_4 ) ( THEN THEN (  return new TYPE_1 . ValidationResult ( VAR_7 ) ; )  return new TYPE_1 . ValidationResult ( VAR_7 ) ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_8 ; )  return VAR_8 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME disk ) NAME disk ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME vmId ) NAME vmId ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( disk ) )  org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( disk ) (  TYPE_2 . METHOD_4 ( new TYPE_3 ( disk . getId ( ) , vmId ) , VAR_1 , VAR_2 , null , true , false , null ) )  TYPE_2 . METHOD_4 ( new TYPE_3 ( disk . getId ( ) , vmId ) , VAR_1 , VAR_2 , null , true , false , null ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME add ) NAME add ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_1 ( VAR_1 , STRING_1 , STRING_2 , STRING_3 ) )  METHOD_1 ( VAR_1 , STRING_1 , STRING_2 , STRING_3 ) (  METHOD_2 ( VAR_1 ) )  METHOD_2 ( VAR_1 ) (  METHOD_3 ( VAR_1 ) )  METHOD_3 ( VAR_1 ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_4 ( VAR_3 class , VAR_4 class ) . map ( VAR_1 , null ) ) INIT = METHOD_4 ( VAR_3 class , VAR_4 class ) . map ( VAR_1 , null ) ) VAR VAR (  VAR_2 . METHOD_5 ( METHOD_6 ( VAR_5 . get ( ) . getId ( ) ) ) )  VAR_2 . METHOD_5 ( METHOD_6 ( VAR_5 . get ( ) . getId ( ) ) ) (  METHOD_7 ( VAR_1 , VAR_2 ) )  METHOD_7 ( VAR_1 , VAR_2 ) (  return METHOD_8 ( VAR_6 , new TYPE_4 ( VAR_2 ) , new TYPE_5 ( VAR_7 , VAR_8 . IdQueryParameters class ) , true ) ; )  return METHOD_8 ( VAR_6 , new TYPE_4 ( VAR_2 ) , new TYPE_5 ( VAR_7 , VAR_8 . IdQueryParameters class ) , true ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ( INIT = ( ( TYPE_1 ) ( target ) ) ) INIT = ( ( TYPE_1 ) ( target ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.ArrayList<TYPE_2> ) TYPE java.util.ArrayList<TYPE_2> ( NAME list ) NAME list ( INIT = new java.util.ArrayList < TYPE_2 > ( ) ) INIT = new java.util.ArrayList < TYPE_2 > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME a ) NAME a ( IN ( ( java.util.ArrayList < TYPE_2 > ) ( returnValue ) ) ) IN ( ( java.util.ArrayList < TYPE_2 > ) ( returnValue ) ) ( BLOCK BLOCK ( IF IF ( COND ( a . METHOD_1 ( ) ) == ( VAR_1 ) ) COND ( a . METHOD_1 ( ) ) == ( VAR_1 ) ( THEN THEN (  list . add ( a ) )  list . add ( a ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  model . METHOD_2 ( model , list ) )  model . METHOD_2 ( model , list ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.ValidationResult ) TYPE TYPE_1.ValidationResult ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_4 . METHOD_2 ( VAR_5 , null , VAR_2 ) )  VAR_4 . METHOD_2 ( VAR_5 , null , VAR_2 ) (  org.mockito.Mockito.when ( nic . METHOD_3 ( ) ) . thenReturn ( VAR_3 ) )  org.mockito.Mockito.when ( nic . METHOD_3 ( ) ) . thenReturn ( VAR_3 ) (  TYPE_2 . assertEquals ( VAR_1 , validator . METHOD_4 ( ) ) )  TYPE_2 . assertEquals ( VAR_1 , validator . METHOD_4 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( METHOD_3 ( ) ) )  METHOD_2 ( METHOD_3 ( ) ) (  METHOD_4 ( 1 ) )  METHOD_4 ( 1 ) (  VAR_1 . METHOD_5 ( ) )  VAR_1 . METHOD_5 ( ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ( INIT = TYPE_2 . getModel ( 1 ) ) INIT = TYPE_2 . getModel ( 1 ) ) VAR VAR (  model . setId ( VAR_2 [ 1 ] . toString ( ) ) )  model . setId ( VAR_2 [ 1 ] . toString ( ) ) ( TRY TRY ( BLOCK BLOCK (  resource . METHOD_6 ( model ) )  resource . METHOD_6 ( model ) (  METHOD_7 ( STRING_1 ) )  METHOD_7 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( BLOCK BLOCK (  METHOD_8 ( VAR_3 ) )  METHOD_8 ( VAR_3 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_2 . METHOD_2 ( METHOD_3 ( ) ) )  VAR_2 . METHOD_2 ( METHOD_3 ( ) ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME entity ) NAME entity ( INIT = ( ( TYPE_1 ) ( METHOD_3 ( ) . getEntity ( ) ) ) ) INIT = ( ( TYPE_1 ) ( METHOD_3 ( ) . getEntity ( ) ) ) ) VAR VAR ( IF IF ( COND entity == null ) COND entity == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  VAR_3 . METHOD_4 ( entity . METHOD_5 ( ) ) )  VAR_3 . METHOD_4 ( entity . METHOD_5 ( ) ) (  VAR_4 . METHOD_4 ( entity . METHOD_6 ( ) ) )  VAR_4 . METHOD_4 ( entity . METHOD_6 ( ) ) (  VAR_5 . METHOD_4 ( entity . METHOD_7 ( ) ) )  VAR_5 . METHOD_4 ( entity . METHOD_7 ( ) ) (  VAR_6 . METHOD_4 ( entity . METHOD_8 ( ) ) )  VAR_6 . METHOD_4 ( entity . METHOD_8 ( ) ) (  VAR_7 . METHOD_9 ( METHOD_3 ( ) ) )  VAR_7 . METHOD_9 ( METHOD_3 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.ArrayList<java.lang.String> ) RETURN java.util.ArrayList<java.lang.String> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<java.lang.String> ) TYPE java.util.ArrayList<java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.ArrayList < java.lang.String > ( ) ) INIT = new java.util.ArrayList < java.lang.String > ( ) ) VAR VAR ( IF IF ( COND VAR_3 . METHOD_2 ( VAR_1 ) ) COND VAR_3 . METHOD_2 ( VAR_1 ) ( THEN THEN ( VAR VAR ( TYPE java.util.HashMap<java.lang.String,java.lang.String> ) TYPE java.util.HashMap<java.lang.String,java.lang.String> ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_3 . get ( VAR_1 ) ) INIT = VAR_3 . get ( VAR_1 ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1<java.lang.String,java.lang.String> ) TYPE TYPE_1<java.lang.String,java.lang.String> ( NAME VAR_5 ) NAME VAR_5 ( IN VAR_4 . METHOD_3 ( ) ) IN VAR_4 . METHOD_3 ( ) ( BLOCK BLOCK (  VAR_2 . add ( VAR_5 . METHOD_4 ( ) ) )  VAR_2 . add ( VAR_5 . METHOD_4 ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ( ELSE ELSE (  VAR_6 . METHOD_5 ( VAR_7 , VAR_1 ) )  VAR_6 . METHOD_5 ( VAR_7 , VAR_1 ) ) ELSE ELSE ) IF IF (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME valueOf ) NAME valueOf ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( IN TYPE_1 . METHOD_1 ( ) ) IN TYPE_1 . METHOD_1 ( ) ( BLOCK BLOCK ( IF IF ( COND VAR_2 . METHOD_2 ( ) . equals ( VAR_1 ) ) COND VAR_2 . METHOD_2 ( ) . equals ( VAR_1 ) ( THEN THEN (  return VAR_2 ; )  return VAR_2 ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  throw new TYPE_3 ( ( ( ( ( STRING_1 + ( VAR_1 . name ( ) ) ) + STRING_2 ) + ( VAR_3 class . getName ( ) ) ) + STRING_3 ) ) ; )  throw new TYPE_3 ( ( ( ( ( STRING_1 + ( VAR_1 . name ( ) ) ) + STRING_2 ) + ( VAR_3 class . getName ( ) ) ) + STRING_3 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  METHOD_2 ( ) . METHOD_3 ( new TYPE_2 [ ] { VAR_1 } ) )  METHOD_2 ( ) . METHOD_3 ( new TYPE_2 [ ] { VAR_1 } ) (  getValue ( ) . METHOD_3 ( new TYPE_2 [ ] { VAR_1 } ) )  getValue ( ) . METHOD_3 ( new TYPE_2 [ ] { VAR_1 } ) (  return ( METHOD_2 ( ) . METHOD_4 ( ) ) && ( getValue ( ) . METHOD_4 ( ) ) ; )  return ( METHOD_2 ( ) . METHOD_4 ( ) ) && ( getValue ( ) . METHOD_4 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME vmId ) NAME vmId ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Disk > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Disk > ( ) ; )  return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Disk > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Disk > ( ) ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Disk > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Disk > ( ) ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Disk > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Disk > ( ) ; } } ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME params ) NAME params ( INIT = new TYPE_1 ( VAR_1 ) ) INIT = new TYPE_1 ( VAR_1 ) ) VAR VAR (  params . METHOD_2 ( vmId ) )  params . METHOD_2 ( vmId ) (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , params , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , params , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME parameters ) NAME parameters ( INIT = new TYPE_1 < TYPE_2 > ( ) ) INIT = new TYPE_1 < TYPE_2 > ( ) ) VAR VAR (  parameters . METHOD_2 ( VAR_1 ) )  parameters . METHOD_2 ( VAR_1 ) ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_4 ) NAME METHOD_4 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_3 . getReturnValue ( ) ) INIT = VAR_3 . getReturnValue ( ) ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_5 ) NAME VAR_5 ( INIT = false ) INIT = false ) VAR VAR ( IF IF ( COND ( VAR_4 != null ) && ( VAR_4 . getSucceeded ( ) ) ) COND ( VAR_4 != null ) && ( VAR_4 . getSucceeded ( ) ) ( THEN THEN (  VAR_5 = true )  VAR_5 = true ) THEN THEN ) IF IF (  METHOD_5 ( VAR_5 ) )  METHOD_5 ( VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_3 ( VAR_2 , parameters , new TYPE_3 ( ) { public void METHOD_4 ( TYPE_4 VAR_3 ) { TYPE_5 VAR_4 = VAR_3 . getReturnValue ( ) ; boolean VAR_5 = false ; if ( ( VAR_4 != null ) && ( VAR_4 . getSucceeded ( ) ) ) { VAR_5 = true ; } METHOD_5 ( VAR_5 ) ; } } ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_3 ( VAR_2 , parameters , new TYPE_3 ( ) { public void METHOD_4 ( TYPE_4 VAR_3 ) { TYPE_5 VAR_4 = VAR_3 . getReturnValue ( ) ; boolean VAR_5 = false ; if ( ( VAR_4 != null ) && ( VAR_4 . getSucceeded ( ) ) ) { VAR_5 = true ; } METHOD_5 ( VAR_5 ) ; } } ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( METHOD_3 ( ) ) )  METHOD_2 ( METHOD_3 ( ) ) (  METHOD_4 ( null ) )  METHOD_4 ( null ) (  VAR_1 . METHOD_5 ( ) )  VAR_1 . METHOD_5 ( ) ( TRY TRY ( BLOCK BLOCK (  resource . METHOD_6 ( METHOD_7 ( VAR_2 ) ) )  resource . METHOD_6 ( METHOD_7 ( VAR_2 ) ) (  METHOD_8 ( STRING_1 ) )  METHOD_8 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( BLOCK BLOCK (  METHOD_9 ( VAR_3 ) )  METHOD_9 ( VAR_3 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_1 ( VAR_1 , TYPE_2 . METHOD_2 ( ) , METHOD_3 ( ) , TYPE_2 . getParameters ( ) . METHOD_4 ( ) , TYPE_2 . getParameters ( ) . METHOD_5 ( ) , METHOD_6 ( ) , METHOD_7 ( ) , TYPE_2 . getParameters ( ) . METHOD_8 ( ) . METHOD_9 ( ) , false ) )  TYPE_1 . METHOD_1 ( VAR_1 , TYPE_2 . METHOD_2 ( ) , METHOD_3 ( ) , TYPE_2 . getParameters ( ) . METHOD_4 ( ) , TYPE_2 . getParameters ( ) . METHOD_5 ( ) , METHOD_6 ( ) , METHOD_7 ( ) , TYPE_2 . getParameters ( ) . METHOD_8 ( ) . METHOD_9 ( ) , false ) ( IF IF ( COND ( TYPE_2 . METHOD_10 ( ) ) != null ) COND ( TYPE_2 . METHOD_10 ( ) ) != null ( THEN THEN (  METHOD_11 ( ) )  METHOD_11 ( ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  org.mockito.Mockito.when ( VAR_1 . METHOD_3 ( TYPE_1 . any ( VAR_2 class ) ) ) . thenReturn ( METHOD_4 ( VAR_3 , VAR_4 ) ) )  org.mockito.Mockito.when ( VAR_1 . METHOD_3 ( TYPE_1 . any ( VAR_2 class ) ) ) . thenReturn ( METHOD_4 ( VAR_3 , VAR_4 ) ) (  org.mockito.Mockito.doReturn ( METHOD_5 ( org.ovirt.engine.core.compat.Guid . METHOD_6 ( ) , VAR_3 , VAR_4 ) ) . when ( VAR_5 ) . METHOD_7 ( TYPE_1 . any ( VAR_6 . Guid class ) , TYPE_1 . any ( VAR_2 class ) ) )  org.mockito.Mockito.doReturn ( METHOD_5 ( org.ovirt.engine.core.compat.Guid . METHOD_6 ( ) , VAR_3 , VAR_4 ) ) . when ( VAR_5 ) . METHOD_7 ( TYPE_1 . any ( VAR_6 . Guid class ) , TYPE_1 . any ( VAR_2 class ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR (  command = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , VAR_1 ) ) ) )  command = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , VAR_1 ) ) ) (  org.mockito.Mockito.doReturn ( vds ) . when ( command ) . METHOD_4 ( ) )  org.mockito.Mockito.doReturn ( vds ) . when ( command ) . METHOD_4 ( ) (  TYPE_3 . METHOD_5 ( command . validate ( ) ) )  TYPE_3 . METHOD_5 ( command . validate ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS> ( NAME hosts ) NAME hosts ( INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ) ( result ) ) ) INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ) ( result ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1<org.ovirt.engine.core.common.businessentities.VDS> ) TYPE TYPE_1<org.ovirt.engine.core.common.businessentities.VDS> ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_1 ( ) ) INIT = METHOD_1 ( ) ) VAR VAR (  VAR_1 . setItems ( hosts ) )  VAR_1 . setItems ( hosts ) (  VAR_1 . METHOD_2 ( true ) )  VAR_1 . METHOD_2 ( true ) (  METHOD_3 ( true ) )  METHOD_3 ( true ) (  METHOD_4 ( ) . METHOD_2 ( true ) )  METHOD_4 ( ) . METHOD_2 ( true ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.util.Map<org.ovirt.engine.core.compat.Guid,org.ovirt.engine.core.common.businessentities.DiskImage> ) RETURN java.util.Map<org.ovirt.engine.core.compat.Guid,org.ovirt.engine.core.common.businessentities.DiskImage> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<org.ovirt.engine.core.common.businessentities.DiskImage> ) TYPE TYPE_1<org.ovirt.engine.core.common.businessentities.DiskImage> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<org.ovirt.engine.core.compat.Guid,org.ovirt.engine.core.common.businessentities.DiskImage> ) TYPE java.util.Map<org.ovirt.engine.core.compat.Guid,org.ovirt.engine.core.common.businessentities.DiskImage> ( NAME result ) NAME result ( INIT = null ) INIT = null ) VAR VAR ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN (  result = new java.util.HashMap < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.common.businessentities.DiskImage > ( ) )  result = new java.util.HashMap < org.ovirt.engine.core.compat.Guid , org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.DiskImage ) TYPE org.ovirt.engine.core.common.businessentities.DiskImage ( NAME diskImage ) NAME diskImage ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  result . put ( diskImage . METHOD_2 ( ) , diskImage ) )  result . put ( diskImage . METHOD_2 ( ) , diskImage ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME vmId ) NAME vmId ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = 1 ) INIT = 1 ) VAR VAR ) INIT INIT ( COND VAR_2 <= VAR_1 ) COND VAR_2 <= VAR_1 ( UPDATE UPDATE (  VAR_2 ++ )  VAR_2 ++ ) UPDATE UPDATE ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( new TYPE_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , vmId ) , VAR_3 , VAR_4 , VAR_5 , true , false ) )  TYPE_1 . METHOD_2 ( new TYPE_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , vmId ) , VAR_3 , VAR_4 , VAR_5 , true , false ) ) BLOCK BLOCK ) FOR FOR ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_4.VdcActionParametersBase ) RETURN TYPE_4.VdcActionParametersBase ( NAME getParameters ) NAME getParameters ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME entity ) NAME entity ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return new TYPE_5 ( VAR_5 , map ( VAR_1 , entity ) ) ; )  return new TYPE_5 ( VAR_5 , map ( VAR_1 , entity ) ) ; ) BLOCK BLOCK ) METHOD METHOD (  return METHOD_2 ( VAR_1 , new TYPE_2 < org.ovirt.engine.core.compat.Guid > ( VAR_2 , VAR_3 . IdQueryParameters class ) , VAR_4 , new TYPE_3 < TYPE_1 , TYPE_1 > ( ) { public TYPE_4 . VdcActionParametersBase getParameters ( TYPE_1 model , TYPE_1 entity ) { return new TYPE_5 ( VAR_5 , map ( VAR_1 , entity ) ) ; } } ) ; )  return METHOD_2 ( VAR_1 , new TYPE_2 < org.ovirt.engine.core.compat.Guid > ( VAR_2 , VAR_3 . IdQueryParameters class ) , VAR_4 , new TYPE_3 < TYPE_1 , TYPE_1 > ( ) { public TYPE_4 . VdcActionParametersBase getParameters ( TYPE_1 model , TYPE_1 entity ) { return new TYPE_5 ( VAR_5 , map ( VAR_1 , entity ) ) ; } } ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( true , false ) )  METHOD_2 ( true , false ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = org.mockito.Mockito . METHOD_3 ( VAR_2 class ) ) INIT = org.mockito.Mockito . METHOD_3 ( VAR_2 class ) ) VAR VAR (  org.mockito.Mockito.when ( VAR_1 . get ( TYPE_2 . any ( VAR_3 . Guid class ) ) ) . thenReturn ( TYPE_3 . METHOD_4 ( ) ) )  org.mockito.Mockito.when ( VAR_1 . get ( TYPE_2 . any ( VAR_3 . Guid class ) ) ) . thenReturn ( TYPE_3 . METHOD_4 ( ) ) (  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( cmd ) . METHOD_5 ( ) )  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( cmd ) . METHOD_5 ( ) (  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_4 ) . METHOD_5 ( ) )  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_4 ) . METHOD_5 ( ) (  METHOD_6 ( ) )  METHOD_6 ( ) (  METHOD_7 ( VAR_5 ) )  METHOD_7 ( VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME getValue ) NAME getValue ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME value ) NAME value ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  setTitle ( value . METHOD_1 ( ) ) )  setTitle ( value . METHOD_1 ( ) ) ( IF IF ( COND ( ( value . METHOD_1 ( ) ) != null ) && ( ( value . METHOD_1 ( ) ) != STRING_1 ) ) COND ( ( value . METHOD_1 ( ) ) != null ) && ( ( value . METHOD_1 ( ) ) != STRING_1 ) ( THEN THEN (  return TYPE_3 . METHOD_2 ( ) . METHOD_3 ( ) ; )  return TYPE_3 . METHOD_2 ( ) . METHOD_3 ( ) ; ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.Disk ) TYPE TYPE_1.Disk ( NAME model ) NAME model ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  model . METHOD_3 ( ) . METHOD_4 ( ) . get ( 0 ) . setId ( null ) )  model . METHOD_3 ( ) . METHOD_4 ( ) . get ( 0 ) . setId ( null ) (  METHOD_5 ( METHOD_6 ( ) ) )  METHOD_5 ( METHOD_6 ( ) ) (  VAR_1 . METHOD_7 ( ) )  VAR_1 . METHOD_7 ( ) ( TRY TRY ( BLOCK BLOCK (  VAR_2 . add ( model ) )  VAR_2 . add ( model ) (  METHOD_8 ( STRING_1 ) )  METHOD_8 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( BLOCK BLOCK (  METHOD_9 ( VAR_3 , STRING_2 , STRING_3 , STRING_4 ) )  METHOD_9 ( VAR_3 , STRING_2 , STRING_3 , STRING_4 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME id ) NAME id ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME log ) NAME log ( INIT = org.mockito.Mockito . METHOD_2 ( VAR_1 class ) ) INIT = org.mockito.Mockito . METHOD_2 ( VAR_1 class ) ) VAR VAR (  org.mockito.Mockito.when ( log . METHOD_3 ( ) ) . thenReturn ( true ) )  org.mockito.Mockito.when ( log . METHOD_3 ( ) ) . thenReturn ( true ) (  TYPE_2 . METHOD_4 ( log , id , new TYPE_3 ( ) , null ) )  TYPE_2 . METHOD_4 ( log , id , new TYPE_3 ( ) , null ) (  org.mockito.Mockito . METHOD_5 ( log ) . METHOD_6 ( TYPE_4 . METHOD_7 ( VAR_2 ) , new java.lang.Object [ ] { TYPE_4 . METHOD_8 ( ) , TYPE_4 . METHOD_7 ( STRING_1 ) } ) )  org.mockito.Mockito . METHOD_5 ( log ) . METHOD_6 ( TYPE_4 . METHOD_7 ( VAR_2 ) , new java.lang.Object [ ] { TYPE_4 . METHOD_8 ( ) , TYPE_4 . METHOD_7 ( STRING_1 ) } ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VM> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VM> ( NAME vms ) NAME vms ( INIT = ( ( TYPE_1 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) INIT = ( ( TYPE_1 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) VAR VAR (  TYPE_2 . METHOD_1 ( vms , new TYPE_3 ( ) ) )  TYPE_2 . METHOD_1 ( vms , new TYPE_3 ( ) ) (  setItems ( vms ) )  setItems ( vms ) (  METHOD_2 ( ( ( vms . size ( ) ) == 0 ) ) )  METHOD_2 ( ( ( vms . size ( ) ) == 0 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<TYPE_1> ) TYPE java.util.ArrayList<TYPE_1> ( NAME models ) NAME models ( INIT = new java.util.ArrayList < TYPE_1 > ( ) ) INIT = new java.util.ArrayList < TYPE_1 > ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  models . add ( VAR_1 ) )  models . add ( VAR_1 ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_3 ( ) ) INIT = new TYPE_3 ( ) ) VAR VAR (  models . add ( VAR_2 ) )  models . add ( VAR_2 ) ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_4 ( ) ) INIT = new TYPE_4 ( ) ) VAR VAR (  models . add ( VAR_3 ) )  models . add ( VAR_3 ) ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ( IN models ) IN models ( BLOCK BLOCK (  model . METHOD_2 ( VAR_4 ) )  model . METHOD_2 ( VAR_4 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return models ; )  return models ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME vds ) NAME vds ( INIT = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( METHOD_2 ( ) . getSelectedItem ( ) ) ) ) INIT = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( METHOD_2 ( ) . getSelectedItem ( ) ) ) ) VAR VAR ( IF IF ( COND vds == null ) COND vds == null ( THEN THEN (  vds = new org.ovirt.engine.core.common.businessentities.VDS ( ) )  vds = new org.ovirt.engine.core.common.businessentities.VDS ( ) ) THEN THEN ) IF IF (  METHOD_3 ( vds , null , false , null ) )  METHOD_3 ( vds , null , false , null ) (  METHOD_4 ( ) . setIsChangable ( false ) )  METHOD_4 ( ) . setIsChangable ( false ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN java.util.Map<java.lang.String,java.lang.Object> ) RETURN java.util.Map<java.lang.String,java.lang.Object> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return model . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( TYPE_2 . METHOD_5 ( ( VAR_1 ) - > VAR_1 . METHOD_6 ( ) ? VAR_1 . METHOD_7 ( ) . getName ( ) : null , ( VAR_1 ) - > VAR_1 . METHOD_8 ( ) ? TYPE_3 . map ( VAR_1 . METHOD_9 ( ) , null ) : null ) ) ; )  return model . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( TYPE_2 . METHOD_5 ( ( VAR_1 ) - > VAR_1 . METHOD_6 ( ) ? VAR_1 . METHOD_7 ( ) . getName ( ) : null , ( VAR_1 ) - > VAR_1 . METHOD_8 ( ) ? TYPE_3 . map ( VAR_1 . METHOD_9 ( ) , null ) : null ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( org.ovirt.engine.core.compat.Guid ) ( VAR_1 . METHOD_2 ( ) [ 0 ] ) ) ) INIT = ( ( org.ovirt.engine.core.compat.Guid ) ( VAR_1 . METHOD_2 ( ) [ 0 ] ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_3 < > ( ) ) INIT = new TYPE_3 < > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_4<java.util.List<TYPE_5>,org.ovirt.engine.core.common.businessentities.StorageDomain> ) TYPE TYPE_4<java.util.List<TYPE_5>,org.ovirt.engine.core.common.businessentities.StorageDomain> ( NAME VAR_4 ) NAME VAR_4 ( IN VAR_5 . METHOD_3 ( ) ) IN VAR_5 . METHOD_3 ( ) ( BLOCK BLOCK (  VAR_3 . add ( VAR_4 . METHOD_4 ( ) ) )  VAR_3 . add ( VAR_4 . METHOD_4 ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ( INIT = false ) INIT = false ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME action ) NAME action ( INIT = TYPE_2 . getParameters ( ) . METHOD_2 ( ) ) INIT = TYPE_2 . getParameters ( ) . METHOD_2 ( ) ) VAR VAR (  VAR_2 = METHOD_3 ( VAR_3 , false ) )  VAR_2 = METHOD_3 ( VAR_3 , false ) ( IF IF ( COND ( VAR_4 ) != null ) COND ( VAR_4 ) != null ( THEN THEN ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_4 . METHOD_4 ( ) ) INIT = VAR_4 . METHOD_4 ( ) ) VAR VAR ( IF IF ( COND ( ( action == ( VAR_6 ) ) && ( VAR_5 . equals ( STRING_1 ) ) ) || ( ( action == ( VAR_7 ) ) && ( VAR_5 . equals ( STRING_2 ) ) ) ) COND ( ( action == ( VAR_6 ) ) && ( VAR_5 . equals ( STRING_1 ) ) ) || ( ( action == ( VAR_7 ) ) && ( VAR_5 . equals ( STRING_2 ) ) ) ( THEN THEN (  VAR_1 = true )  VAR_1 = true ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2<?> ) TYPE TYPE_2<?> ( NAME resource ) NAME resource ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME node ) NAME node ( INIT = new TYPE_3 ( ) . name ( resource . METHOD_2 ( ) ) . METHOD_3 ( VAR_1 ) . METHOD_4 ( VAR_2 ) . METHOD_5 ( TYPE_4 . METHOD_6 ( resource ) ) . METHOD_7 ( TYPE_4 . METHOD_8 ( resource ) ) . METHOD_9 ( ) ) INIT = new TYPE_3 ( ) . name ( resource . METHOD_2 ( ) ) . METHOD_3 ( VAR_1 ) . METHOD_4 ( VAR_2 ) . METHOD_5 ( TYPE_4 . METHOD_6 ( resource ) ) . METHOD_7 ( TYPE_4 . METHOD_8 ( resource ) ) . METHOD_9 ( ) ) VAR VAR ( IF IF ( COND ! ( VAR_3 . METHOD_10 ( resource ) ) ) COND ! ( VAR_3 . METHOD_10 ( resource ) ) ( THEN THEN (  VAR_3 . put ( resource , node ) )  VAR_3 . put ( resource , node ) ) THEN THEN ) IF IF (  return node ; )  return node ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR ( IF IF ( COND VAR_1 == ( VAR_3 ) ) COND VAR_1 == ( VAR_3 ) ( THEN THEN (  VAR_2 = VAR_4 . METHOD_2 ( ) )  VAR_2 = VAR_4 . METHOD_2 ( ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND VAR_1 == ( VAR_5 ) ) COND VAR_1 == ( VAR_5 ) ( THEN THEN (  VAR_2 = VAR_4 . METHOD_3 ( ) )  VAR_2 = VAR_4 . METHOD_3 ( ) ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND org.ovirt.engine.core.common.businessentities.VM . METHOD_2 ( TYPE_1 . getVm ( ) . METHOD_3 ( ) ) ) COND org.ovirt.engine.core.common.businessentities.VM . METHOD_2 ( TYPE_1 . getVm ( ) . METHOD_3 ( ) ) ( THEN THEN (  METHOD_4 ( TYPE_2 . getInstance ( ) . METHOD_5 ( ) . METHOD_6 ( VAR_1 , new TYPE_3 ( TYPE_1 . METHOD_7 ( ) , TYPE_1 . getVm ( ) . getId ( ) , VAR_2 ) ) . getReturnValue ( ) ) )  METHOD_4 ( TYPE_2 . getInstance ( ) . METHOD_5 ( ) . METHOD_6 ( VAR_1 , new TYPE_3 ( TYPE_1 . METHOD_7 ( ) , TYPE_1 . getVm ( ) . getId ( ) , VAR_2 ) ) . getReturnValue ( ) ) (  TYPE_1 . METHOD_8 ( true ) )  TYPE_1 . METHOD_8 ( true ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  VAR_1 . add ( STRING_1 ) )  VAR_1 . add ( STRING_1 ) (  METHOD_2 ( METHOD_3 ( null ) ) )  METHOD_2 ( METHOD_3 ( null ) ) (  METHOD_4 ( 1 ) )  METHOD_4 ( 1 ) (  METHOD_5 ( 1 ) )  METHOD_5 ( 1 ) (  METHOD_6 ( INT_1 ) )  METHOD_6 ( INT_1 ) (  METHOD_7 ( STRING_2 ) )  METHOD_7 ( STRING_2 ) ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_8 ( ) ) INIT = METHOD_8 ( ) ) VAR VAR (  METHOD_9 ( VAR_2 . get ( 0 ) . METHOD_10 ( ) ) )  METHOD_9 ( VAR_2 . get ( 0 ) . METHOD_10 ( ) ) (  METHOD_11 ( VAR_2 ) )  METHOD_11 ( VAR_2 ) ) BLOCK BLOCK ( FINALLY FINALLY (  VAR_1 . METHOD_12 ( ) )  VAR_1 . METHOD_12 ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.VM ) TYPE TYPE_1.VM ( NAME vm ) NAME vm ( INIT = new TYPE_1 . VM ( ) ) INIT = new TYPE_1 . VM ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  VAR_1 . METHOD_2 ( VAR_2 ) )  VAR_1 . METHOD_2 ( VAR_2 ) (  VAR_1 . METHOD_3 ( STRING_1 ) )  VAR_1 . METHOD_3 ( STRING_1 ) (  vm . METHOD_4 ( VAR_1 ) )  vm . METHOD_4 ( VAR_1 ) ( VAR VAR ( TYPE TYPE_1.VM ) TYPE TYPE_1.VM ( NAME map ) NAME map ( INIT = TYPE_3 . map ( vm , null ) ) INIT = TYPE_3 . map ( vm , null ) ) VAR VAR (  METHOD_5 ( map . METHOD_6 ( ) . METHOD_7 ( ) ) )  METHOD_5 ( map . METHOD_6 ( ) . METHOD_7 ( ) ) (  assertEquals ( map . METHOD_6 ( ) . METHOD_7 ( ) , STRING_1 ) )  assertEquals ( map . METHOD_6 ( ) . METHOD_7 ( ) , STRING_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_2 ) ( result . METHOD_2 ( ) ) ) ) INIT = ( ( TYPE_2 ) ( result . METHOD_2 ( ) ) ) ) VAR VAR (  VAR_2 = true )  VAR_2 = true ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = result . getReturnValue ( ) ) INIT = result . getReturnValue ( ) ) VAR VAR (  VAR_4 . METHOD_3 ( ( ( java.lang.String ) ( VAR_3 . METHOD_4 ( ) ) ) ) )  VAR_4 . METHOD_3 ( ( ( java.lang.String ) ( VAR_3 . METHOD_4 ( ) ) ) ) (  VAR_5 . METHOD_5 ( ( ( java.lang.String ) ( VAR_3 . METHOD_4 ( ) ) ) ) )  VAR_5 . METHOD_5 ( ( ( java.lang.String ) ( VAR_3 . METHOD_4 ( ) ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3<?extendsTYPE_4> ) TYPE TYPE_3<?extendsTYPE_4> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  return VAR_1 . METHOD_2 ( ( ( org.ovirt.engine.core.compat.Guid ) ( result . METHOD_3 ( ) ) ) ) ; )  return VAR_1 . METHOD_2 ( ( ( org.ovirt.engine.core.compat.Guid ) ( result . METHOD_3 ( ) ) ) ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ( BLOCK BLOCK (  e . METHOD_4 ( ) )  e . METHOD_4 ( ) (  return null ; )  return null ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_1 ) ( target ) ) ) INIT = ( ( TYPE_1 ) ( target ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS> ( NAME hosts ) NAME hosts ( INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ) ( returnValue ) ) ) INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ) ( returnValue ) ) ) VAR VAR (  VAR_2 = hosts )  VAR_2 = hosts (  VAR_1 . METHOD_2 ( ) )  VAR_1 . METHOD_2 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME model ) NAME model ( INIT = ( ( TYPE_2 ) ( target ) ) ) INIT = ( ( TYPE_2 ) ( target ) ) ) VAR VAR (  VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) )  VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) (  METHOD_3 ( ) )  METHOD_3 ( ) ) BLOCK BLOCK ) METHOD METHOD (  TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_2 model = ( ( TYPE_2 ) ( target ) ) ; VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) ; METHOD_3 ( ) ; } } ) ) )  TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_2 model = ( ( TYPE_2 ) ( target ) ) ; VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) ; METHOD_3 ( ) ; } } ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ( IN TYPE_1 . METHOD_2 ( ) ) IN TYPE_1 . METHOD_2 ( ) ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_3 . map ( model , null ) ) INIT = TYPE_3 . map ( model , null ) ) VAR VAR (  TYPE_4 . METHOD_3 ( VAR_1 ) )  TYPE_4 . METHOD_3 ( VAR_1 ) (  TYPE_4 . assertEquals ( VAR_1 . name ( ) . METHOD_4 ( ) , model . name ( ) . METHOD_4 ( ) ) )  TYPE_4 . assertEquals ( VAR_1 . name ( ) . METHOD_4 ( ) , model . name ( ) . METHOD_4 ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  assertEquals ( STRING_1 , VAR_1 ) )  assertEquals ( STRING_1 , VAR_1 ) (  METHOD_2 ( VAR_3 , VAR_4 class , new java.lang.String [ ] { STRING_2 } , new java.lang.Object [ ] { VAR_5 [ 1 ] } , METHOD_3 ( ) , VAR_2 ) )  METHOD_2 ( VAR_3 , VAR_4 class , new java.lang.String [ ] { STRING_2 } , new java.lang.Object [ ] { VAR_5 [ 1 ] } , METHOD_3 ( ) , VAR_2 ) (  VAR_6 . METHOD_4 ( ) )  VAR_6 . METHOD_4 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( ) ) ) . thenReturn ( TYPE_2 . METHOD_3 ( ) ) )  org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( ) ) ) . thenReturn ( TYPE_2 . METHOD_3 ( ) ) (  METHOD_4 ( ) )  METHOD_4 ( ) (  METHOD_5 ( ) )  METHOD_5 ( ) (  METHOD_6 ( ) )  METHOD_6 ( ) (  METHOD_7 ( ) )  METHOD_7 ( ) (  org.mockito.Mockito.when ( VAR_2 . METHOD_8 ( TYPE_1 . any ( ) ) ) . thenReturn ( TYPE_3 . METHOD_9 ( STRING_1 ) ) )  org.mockito.Mockito.when ( VAR_2 . METHOD_8 ( TYPE_1 . any ( ) ) ) . thenReturn ( TYPE_3 . METHOD_9 ( STRING_1 ) ) (  METHOD_10 ( true ) )  METHOD_10 ( true ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( this . VAR_1 ) == null ) COND ( this . VAR_1 ) == null ( THEN THEN ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  inject ( VAR_2 ) )  inject ( VAR_2 ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_2 ( STRING_1 ) ) INIT = VAR_2 . METHOD_2 ( STRING_1 ) ) VAR VAR (  this . VAR_1 = ( ( TYPE_1 ) ( VAR_1 ) ) )  this . VAR_1 = ( ( TYPE_1 ) ( VAR_1 ) ) ) THEN THEN ) IF IF (  return this . VAR_1 ; )  return this . VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME add ) NAME add ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_1 ( VAR_1 , STRING_1 ) )  METHOD_1 ( VAR_1 , STRING_1 ) (  METHOD_2 ( VAR_2 class , VAR_1 ) )  METHOD_2 ( VAR_2 class , VAR_1 ) ( IF IF ( COND ! ( VAR_1 . METHOD_3 ( ) ) ) COND ! ( VAR_1 . METHOD_3 ( ) ) ( THEN THEN (  METHOD_1 ( VAR_1 , STRING_2 ) )  METHOD_1 ( VAR_1 , STRING_2 ) ) THEN THEN ) IF IF ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StoragePool ) TYPE org.ovirt.engine.core.common.businessentities.StoragePool ( NAME entity ) NAME entity ( INIT = map ( VAR_1 ) ) INIT = map ( VAR_1 ) ) VAR VAR (  return METHOD_4 ( VAR_3 , new TYPE_3 ( entity ) , new TYPE_4 < org.ovirt.engine.core.compat.Guid > ( VAR_4 , VAR_5 . IdQueryParameters class ) ) ; )  return METHOD_4 ( VAR_3 , new TYPE_3 ( entity ) , new TYPE_4 < org.ovirt.engine.core.compat.Guid > ( VAR_4 , VAR_5 . IdQueryParameters class ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_1 . METHOD_2 ( STRING_1 ) )  VAR_1 . METHOD_2 ( STRING_1 ) (  VAR_1 . METHOD_3 ( STRING_2 ) )  VAR_1 . METHOD_3 ( STRING_2 ) (  VAR_1 . METHOD_4 ( new TYPE_2 ( ) ) )  VAR_1 . METHOD_4 ( new TYPE_2 ( ) ) (  VAR_2 . METHOD_5 ( ) . METHOD_6 ( VAR_1 ) )  VAR_2 . METHOD_5 ( ) . METHOD_6 ( VAR_1 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_2 . METHOD_5 ( ) . get ( VAR_1 . getName ( ) ) ) INIT = VAR_2 . METHOD_5 ( ) . get ( VAR_1 . getName ( ) ) ) VAR VAR (  TYPE_3 . METHOD_7 ( VAR_3 ) )  TYPE_3 . METHOD_7 ( VAR_3 ) (  TYPE_3 . assertEquals ( VAR_1 , VAR_3 ) )  TYPE_3 . assertEquals ( VAR_1 , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.ArrayList<TYPE_1> ) TYPE java.util.ArrayList<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 . isEmpty ( ) ) COND VAR_1 . isEmpty ( ) ( THEN THEN (  METHOD_2 ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_3 ( ) ) )  METHOD_2 ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_3 ( ) ) (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2<TYPE_3> ) TYPE TYPE_2<TYPE_3> ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_4 ( ) ) INIT = METHOD_4 ( ) ) VAR VAR (  VAR_2 . METHOD_5 ( METHOD_6 ( ) . METHOD_7 ( ) ) )  VAR_2 . METHOD_5 ( METHOD_6 ( ) . METHOD_7 ( ) ) (  VAR_2 . METHOD_5 ( METHOD_8 ( VAR_1 . METHOD_9 ( ) ) ) )  VAR_2 . METHOD_5 ( METHOD_8 ( VAR_1 . METHOD_9 ( ) ) ) (  METHOD_6 ( ) . setItems ( new java.util.ArrayList < TYPE_3 > ( VAR_2 ) ) )  METHOD_6 ( ) . setItems ( new java.util.ArrayList < TYPE_3 > ( VAR_2 ) ) (  METHOD_10 ( ) )  METHOD_10 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME id ) NAME id ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source != null ? ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; )  return source != null ? ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; } } (  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.HashMap<org.ovirt.engine.core.compat.Guid,TYPE_1.DiskImage> ) RETURN java.util.HashMap<org.ovirt.engine.core.compat.Guid,TYPE_1.DiskImage> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2<TYPE_3.Disk> ) TYPE TYPE_2<TYPE_3.Disk> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.HashMap<org.ovirt.engine.core.compat.Guid,TYPE_1.DiskImage> ) TYPE java.util.HashMap<org.ovirt.engine.core.compat.Guid,TYPE_1.DiskImage> ( NAME result ) NAME result ( INIT = new java.util.HashMap < > ( ) ) INIT = new java.util.HashMap < > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_3.Disk ) TYPE TYPE_3.Disk ( NAME diskImage ) NAME diskImage ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  result . put ( ( ( TYPE_1 . DiskImage ) ( diskImage ) ) . getId ( ) , ( ( TYPE_1 . DiskImage ) ( diskImage ) ) ) )  result . put ( ( ( TYPE_1 . DiskImage ) ( diskImage ) ) . getId ( ) , ( ( TYPE_1 . DiskImage ) ( diskImage ) ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME model ) NAME model ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( model . METHOD_2 ( ) ) == null ) || ( ( model . METHOD_2 ( ) . METHOD_3 ( ) ) == null ) ) COND ( ( model . METHOD_2 ( ) ) == null ) || ( ( model . METHOD_2 ( ) . METHOD_3 ( ) ) == null ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME version ) NAME version ( INIT = model . METHOD_2 ( ) . METHOD_3 ( ) . getValue ( ) ) INIT = model . METHOD_2 ( ) . METHOD_3 ( ) . getValue ( ) ) VAR VAR (  return ( ( java.lang.Boolean ) ( TYPE_3 . getInstance ( ) . METHOD_4 ( VAR_1 , version ) ) ) ; )  return ( ( java.lang.Boolean ) ( TYPE_3 . getInstance ( ) . METHOD_4 ( VAR_1 , version ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_3 ( ) . setEntity ( ( ( java.lang.Integer ) ( returnValue ) ) ) )  METHOD_3 ( ) . setEntity ( ( ( java.lang.Integer ) ( returnValue ) ) ) (  METHOD_4 ( ) )  METHOD_4 ( ) ) BLOCK BLOCK ) METHOD METHOD (  TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( VAR_1 , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { METHOD_3 ( ) . setEntity ( ( ( java.lang.Integer ) ( returnValue ) ) ) ; METHOD_4 ( ) ; } } ) ) )  TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( VAR_1 , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { METHOD_3 ( ) . setEntity ( ( ( java.lang.Integer ) ( returnValue ) ) ) ; METHOD_4 ( ) ; } } ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_2 ) . METHOD_2 ( TYPE_3 . METHOD_3 ( VAR_3 . Integer class ) ) )  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_2 ) . METHOD_2 ( TYPE_3 . METHOD_3 ( VAR_3 . Integer class ) ) (  org.mockito.Mockito.doReturn ( VAR_4 ) . when ( VAR_2 ) . METHOD_4 ( TYPE_3 . METHOD_5 ( VAR_5 class ) ) )  org.mockito.Mockito.doReturn ( VAR_4 ) . when ( VAR_2 ) . METHOD_4 ( TYPE_3 . METHOD_5 ( VAR_5 class ) ) (  VAR_2 . METHOD_6 ( VAR_6 , VAR_7 ) )  VAR_2 . METHOD_6 ( VAR_6 , VAR_7 ) (  org.mockito.Mockito . METHOD_7 ( VAR_6 ) . METHOD_8 ( VAR_8 , VAR_1 ) )  org.mockito.Mockito . METHOD_7 ( VAR_6 ) . METHOD_8 ( VAR_8 , VAR_1 ) (  org.mockito.Mockito . METHOD_7 ( VAR_6 ) . METHOD_8 ( VAR_9 , VAR_4 ) )  org.mockito.Mockito . METHOD_7 ( VAR_6 ) . METHOD_8 ( VAR_9 , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_1 . METHOD_2 ( STRING_1 ) )  VAR_1 . METHOD_2 ( STRING_1 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . METHOD_3 ( ) . get ( VAR_1 . getName ( ) ) ) INIT = VAR_3 . METHOD_3 ( ) . get ( VAR_1 . getName ( ) ) ) VAR VAR (  TYPE_2 . METHOD_4 ( VAR_2 ) )  TYPE_2 . METHOD_4 ( VAR_2 ) (  TYPE_2 . assertEquals ( VAR_1 , VAR_2 ) )  TYPE_2 . assertEquals ( VAR_1 , VAR_2 ) (  TYPE_2 . METHOD_4 ( VAR_2 . METHOD_5 ( ) ) )  TYPE_2 . METHOD_4 ( VAR_2 . METHOD_5 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1<TYPE_2> ) RETURN TYPE_1<TYPE_2> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ( INIT = METHOD_2 ( VAR_1 , VAR_2 ) ) INIT = METHOD_2 ( VAR_1 , VAR_2 ) ) VAR VAR (  METHOD_3 ( vm ) )  METHOD_3 ( vm ) ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME cmd ) NAME cmd ( INIT = METHOD_4 ( vm , VAR_3 ) ) INIT = METHOD_4 ( vm , VAR_3 ) ) VAR VAR (  TYPE_3 . METHOD_5 ( cmd ) )  TYPE_3 . METHOD_5 ( cmd ) (  return cmd ; )  return cmd ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<TYPE_2,?> ) TYPE TYPE_1<TYPE_2,?> ( NAME column ) NAME column ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  return ( ( ( ( VAR_2 ) + STRING_1 ) + ( METHOD_2 ( ) ) ) + STRING_1 ) + ( METHOD_3 ( METHOD_4 ( column ) ) ) ; )  return ( ( ( ( VAR_2 ) + STRING_1 ) + ( METHOD_2 ( ) ) ) + STRING_1 ) + ( METHOD_3 ( METHOD_4 ( column ) ) ) ; ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME map ) NAME map ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME entity ) NAME entity ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME template ) NAME template ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ( INIT = ( template == null ) ? new TYPE_1 ( ) : template ) INIT = ( template == null ) ? new TYPE_1 ( ) : template ) VAR VAR (  model . METHOD_1 ( new TYPE_3 ( ) ) )  model . METHOD_1 ( new TYPE_3 ( ) ) ( IF IF ( COND entity == ( VAR_1 ) ) COND entity == ( VAR_1 ) ( THEN THEN ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_4 ( ) ) INIT = new TYPE_4 ( ) ) VAR VAR (  VAR_2 . setId ( TYPE_5 . toString ( ) ) )  VAR_2 . setId ( TYPE_5 . toString ( ) ) (  model . METHOD_2 ( ) . METHOD_2 ( ) . add ( VAR_2 ) )  model . METHOD_2 ( ) . METHOD_2 ( ) . add ( VAR_2 ) ) THEN THEN ) IF IF (  return model ; )  return model ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME vmId ) NAME vmId ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) INIT = ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) VAR VAR (  getModel ( ) . METHOD_2 ( ) . setEntity ( ( ! ( VAR_2 . isEmpty ( ) ) ) ) )  getModel ( ) . METHOD_2 ( ) . setEntity ( ( ! ( VAR_2 . isEmpty ( ) ) ) ) ) BLOCK BLOCK ) METHOD METHOD (  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) , new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.util.List < java.lang.String > VAR_2 = ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ; getModel ( ) . METHOD_2 ( ) . setEntity ( ( ! ( VAR_2 . isEmpty ( ) ) ) ) ; } } ) ) )  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) , new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.util.List < java.lang.String > VAR_2 = ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ; getModel ( ) . METHOD_2 ( ) . setEntity ( ( ! ( VAR_2 . isEmpty ( ) ) ) ) ; } } ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) RETURN org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.Network ) TYPE org.ovirt.engine.core.common.businessentities.Network ( NAME network ) NAME network ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME nic ) NAME nic ( INIT = METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , VAR_1 , false , null , network . METHOD_4 ( ) , network . getName ( ) , network . METHOD_5 ( ) ) ) INIT = METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , VAR_1 , false , null , network . METHOD_4 ( ) , network . getName ( ) , network . METHOD_5 ( ) ) ) VAR VAR (  return nic ; )  return nic ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.ArrayList<java.lang.Integer> ) RETURN java.util.ArrayList<java.lang.Integer> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<java.lang.Integer> ) TYPE java.util.ArrayList<java.lang.Integer> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < java.lang.Integer > ( ) ) INIT = new java.util.ArrayList < java.lang.Integer > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( IN METHOD_2 ( ) ) IN METHOD_2 ( ) ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_3 ( VAR_4 . get ( VAR_2 ) , STRING_1 , null ) ) INIT = METHOD_3 ( VAR_4 . get ( VAR_2 ) , STRING_1 , null ) ) VAR VAR ( IF IF ( COND ( VAR_3 != null ) && ( VAR_3 . METHOD_4 ( STRING_2 ) ) ) COND ( VAR_3 != null ) && ( VAR_3 . METHOD_4 ( STRING_2 ) ) ( THEN THEN (  VAR_1 . add ( VAR_2 ) )  VAR_1 . add ( VAR_2 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_5 ) NAME VAR_5 ( INIT = METHOD_2 ( ) . METHOD_3 ( STRING_1 , VAR_6 , METHOD_4 ( ) . addValue ( STRING_2 , VAR_1 ) . addValue ( STRING_3 , VAR_2 ) . addValue ( STRING_4 , TYPE_3 . METHOD_5 ( VAR_3 ) ) . addValue ( STRING_5 , VAR_4 ) . addValue ( STRING_6 , false ) ) ) INIT = METHOD_2 ( ) . METHOD_3 ( STRING_1 , VAR_6 , METHOD_4 ( ) . addValue ( STRING_2 , VAR_1 ) . addValue ( STRING_3 , VAR_2 ) . addValue ( STRING_4 , TYPE_3 . METHOD_5 ( VAR_3 ) ) . addValue ( STRING_5 , VAR_4 ) . addValue ( STRING_6 , false ) ) ) VAR VAR (  return VAR_5 ; )  return VAR_5 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return new TYPE_1 ( new TYPE_2 ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) , VAR_1 ) , VAR_2 , STRING_1 , STRING_2 , 2 , new java.util.HashMap < > ( ) , true , false , false , STRING_3 , TYPE_3 . METHOD_3 ( STRING_4 , STRING_5 ) , null , null ) ; )  return new TYPE_1 ( new TYPE_2 ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) , VAR_1 ) , VAR_2 , STRING_1 , STRING_2 , 2 , new java.util.HashMap < > ( ) , true , false , false , STRING_3 , TYPE_3 . METHOD_3 ( STRING_4 , STRING_5 ) , null , null ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( VAR_1 . DbFacade class ) )  TYPE_1 . METHOD_2 ( VAR_1 . DbFacade class ) (  org.mockito.Mockito.when ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) ) . thenReturn ( VAR_2 ) )  org.mockito.Mockito.when ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) ) . thenReturn ( VAR_2 ) (  org.mockito.Mockito.when ( VAR_2 . METHOD_3 ( ) ) . thenReturn ( VAR_3 ) )  org.mockito.Mockito.when ( VAR_2 . METHOD_3 ( ) ) . thenReturn ( VAR_3 ) (  org.mockito.Mockito.when ( VAR_3 . get ( TYPE_2 . any ( VAR_4 . Guid class ) ) ) . thenReturn ( METHOD_4 ( ) ) . thenReturn ( METHOD_5 ( ) ) . thenReturn ( METHOD_6 ( ) ) )  org.mockito.Mockito.when ( VAR_3 . get ( TYPE_2 . any ( VAR_4 . Guid class ) ) ) . thenReturn ( METHOD_4 ( ) ) . thenReturn ( METHOD_5 ( ) ) . thenReturn ( METHOD_6 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ( INIT = new org.ovirt.engine.core.common.businessentities.VM ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.VM ( ) ) VAR VAR (  vm . METHOD_2 ( VAR_2 ) )  vm . METHOD_2 ( VAR_2 ) (  VAR_1 . METHOD_3 ( VAR_3 ) )  VAR_1 . METHOD_3 ( VAR_3 ) (  VAR_1 . METHOD_4 ( vm ) )  VAR_1 . METHOD_4 ( vm ) ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_1 . METHOD_5 ( ) ) INIT = VAR_1 . METHOD_5 ( ) ) VAR VAR (  TYPE_3 . assertEquals ( VAR_3 , VAR_4 . getId ( ) ) )  TYPE_3 . assertEquals ( VAR_3 , VAR_4 . getId ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME vmId ) NAME vmId ( INIT = TYPE_1 . getParameters ( ) . METHOD_2 ( ) ) INIT = TYPE_1 . getParameters ( ) . METHOD_2 ( ) ) VAR VAR (  status = TYPE_1 . METHOD_3 ( ) . METHOD_4 ( vmId . toString ( ) ) )  status = TYPE_1 . METHOD_3 ( ) . METHOD_4 ( vmId . toString ( ) ) (  TYPE_1 . METHOD_5 ( ) )  TYPE_1 . METHOD_5 ( ) (  TYPE_2 . getInstance ( ) . METHOD_6 ( vmId ) )  TYPE_2 . getInstance ( ) . METHOD_6 ( vmId ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME value ) NAME value ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND METHOD_2 ( ) ) COND METHOD_2 ( ) ( THEN THEN (  VAR_3 . METHOD_3 ( VAR_2 ) )  VAR_3 . METHOD_3 ( VAR_2 ) (  VAR_3 . METHOD_4 ( value ) )  VAR_3 . METHOD_4 ( value ) ) THEN THEN ( ELSE ELSE (  VAR_4 . METHOD_5 ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) ) )  VAR_4 . METHOD_5 ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) ) (  throw new TYPE_1 ( ( ( STRING_3 + VAR_1 ) + STRING_4 ) ) ; )  throw new TYPE_1 ( ( ( STRING_3 + VAR_1 ) + STRING_4 ) ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1<TYPE_2> ) RETURN TYPE_1<TYPE_2> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_3 < TYPE_2 > ( ) ) INIT = new TYPE_3 < TYPE_2 > ( ) ) VAR VAR (  VAR_1 . add ( new TYPE_2 ( VAR_2 , VAR_3 , VAR_4 ) ) )  VAR_1 . add ( new TYPE_2 ( VAR_2 , VAR_3 , VAR_4 ) ) (  VAR_1 . add ( new TYPE_2 ( VAR_5 , VAR_6 , VAR_4 ) ) )  VAR_1 . add ( new TYPE_2 ( VAR_5 , VAR_6 , VAR_4 ) ) (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ( INIT = org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) INIT = org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) VAR VAR (  command = METHOD_3 ( 0 , 0 , VAR_1 ) )  command = METHOD_3 ( 0 , 0 , VAR_1 ) (  METHOD_4 ( command ) )  METHOD_4 ( command ) (  METHOD_5 ( command ) )  METHOD_5 ( command ) (  VAR_2 = org.mockito.Mockito . METHOD_6 ( VAR_3 class ) )  VAR_2 = org.mockito.Mockito . METHOD_6 ( VAR_3 class ) (  VAR_4 = org.mockito.Mockito . METHOD_6 ( VAR_5 class ) )  VAR_4 = org.mockito.Mockito . METHOD_6 ( VAR_5 class ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME sender ) NAME sender ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME args ) NAME args ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_3 ) ( args ) ) . VAR_3 ) INIT = ( ( TYPE_3 ) ( args ) ) . VAR_3 ) VAR VAR ( IF IF ( COND STRING_1 . equals ( VAR_2 ) ) COND STRING_1 . equals ( VAR_2 ) ( THEN THEN (  VAR_4 . setTitle ( ( model . METHOD_2 ( ) . METHOD_3 ( ) ? VAR_5 . METHOD_4 ( ) : VAR_5 . METHOD_5 ( ) ) ) )  VAR_4 . setTitle ( ( model . METHOD_2 ( ) . METHOD_3 ( ) ? VAR_5 . METHOD_4 ( ) : VAR_5 . METHOD_5 ( ) ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.Disk ) TYPE TYPE_1.Disk ( NAME model ) NAME model ( INIT = new TYPE_1 . Disk ( ) ) INIT = new TYPE_1 . Disk ( ) ) VAR VAR (  METHOD_2 ( METHOD_3 ( ) ) )  METHOD_2 ( METHOD_3 ( ) ) (  VAR_1 . METHOD_4 ( ) )  VAR_1 . METHOD_4 ( ) ( TRY TRY ( BLOCK BLOCK (  VAR_2 . add ( model ) )  VAR_2 . add ( model ) (  METHOD_5 ( STRING_1 ) )  METHOD_5 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( BLOCK BLOCK (  METHOD_6 ( VAR_3 , STRING_2 , STRING_3 , STRING_4 , STRING_5 ) )  METHOD_6 ( VAR_3 , STRING_2 , STRING_3 , STRING_4 , STRING_5 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( 1 ) )  METHOD_2 ( 1 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_3 ( VAR_2 , VAR_3 class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_4 [ 1 ] } , true , true , false ) ) INIT = METHOD_3 ( VAR_2 , VAR_3 class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_4 [ 1 ] } , true , true , false ) ) VAR VAR (  VAR_1 = METHOD_4 ( VAR_1 , VAR_5 , TYPE_2 . toString ( ) ) )  VAR_1 = METHOD_4 ( VAR_1 , VAR_5 , TYPE_2 . toString ( ) ) (  METHOD_5 ( VAR_1 ) )  METHOD_5 ( VAR_1 ) (  VAR_6 . METHOD_6 ( ) )  VAR_6 . METHOD_6 ( ) (  METHOD_7 ( resource . METHOD_8 ( ) ) )  METHOD_7 ( resource . METHOD_8 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = null ) INIT = null ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME value ) NAME value ( INIT = VAR_3 ) INIT = VAR_3 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR (  VAR_1 . METHOD_2 ( VAR_2 , value , VAR_4 ) )  VAR_1 . METHOD_2 ( VAR_2 , value , VAR_4 ) ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_1 . METHOD_3 ( VAR_2 ) ) INIT = VAR_1 . METHOD_3 ( VAR_2 ) ) VAR VAR (  TYPE_3 . assertEquals ( value , VAR_5 ) )  TYPE_3 . assertEquals ( value , VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.Object> ) TYPE java.util.Map<java.lang.String,java.lang.Object> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Version ) TYPE org.ovirt.engine.core.compat.Version ( NAME version ) NAME version ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.network.Network ) TYPE org.ovirt.engine.core.common.businessentities.network.Network ( NAME network ) NAME network ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_2 != null ) && ( VAR_2 . METHOD_2 ( ) ) ) COND ( VAR_2 != null ) && ( VAR_2 . METHOD_2 ( ) ) ( THEN THEN ( IF IF ( COND TYPE_2 . METHOD_3 ( version ) ) COND TYPE_2 . METHOD_3 ( version ) ( THEN THEN (  VAR_1 . put ( VAR_3 , ( network == null ? VAR_4 . Collections < java.lang.String > METHOD_4 ( ) : TYPE_3 . METHOD_5 ( network . getName ( ) ) ) ) )  VAR_1 . put ( VAR_3 , ( network == null ? VAR_4 . Collections < java.lang.String > METHOD_4 ( ) : TYPE_3 . METHOD_5 ( network . getName ( ) ) ) ) ) THEN THEN ( ELSE ELSE (  return false ; )  return false ; ) ELSE ELSE ) IF IF ) THEN THEN ) IF IF (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public final ) MODIFIER public final ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME status ) NAME status ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<java.lang.String> ) TYPE java.util.ArrayList<java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ( INIT = null ) INIT = null ) VAR VAR ( IF IF ( COND ! ( ( VAR_2 = VAR_3 . get ( status ) ) != null ) ) COND ! ( ( VAR_2 = VAR_3 . get ( status ) ) != null ) ( THEN THEN (  VAR_2 = new java.util.ArrayList < java.lang.String > ( ) )  VAR_2 = new java.util.ArrayList < java.lang.String > ( ) (  VAR_3 . put ( status , VAR_2 ) )  VAR_3 . put ( status , VAR_2 ) ) THEN THEN ) IF IF ( IF IF ( COND ! ( VAR_2 . METHOD_2 ( VAR_1 ) ) ) COND ! ( VAR_2 . METHOD_2 ( VAR_1 ) ) ( THEN THEN (  VAR_2 . add ( VAR_1 ) )  VAR_2 . add ( VAR_1 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME add ) NAME add ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_1 ( VAR_1 , STRING_1 ) )  METHOD_1 ( VAR_1 , STRING_1 ) ( IF IF ( COND METHOD_2 ( VAR_1 ) ) COND METHOD_2 ( VAR_1 ) ( THEN THEN (  VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) . setId ( METHOD_5 ( VAR_1 ) ) )  VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) . setId ( METHOD_5 ( VAR_1 ) ) ) THEN THEN ) IF IF (  return METHOD_6 ( VAR_2 , new TYPE_3 ( map ( VAR_1 ) ) , new TYPE_4 ( VAR_1 . getName ( ) ) ) ; )  return METHOD_6 ( VAR_2 , new TYPE_3 ( map ( VAR_1 ) ) , new TYPE_4 ( VAR_1 . getName ( ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( ( TYPE_1 ) ( VAR_1 ) ) ) INIT = ( ( TYPE_1 ) ( VAR_1 ) ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ) TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME storage ) NAME storage ( INIT = ( ( org.ovirt.engine.core.common.businessentities.StorageDomain ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( VAR_2 ) ) . getReturnValue ( ) ) ) ) INIT = ( ( org.ovirt.engine.core.common.businessentities.StorageDomain ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( VAR_2 ) ) . getReturnValue ( ) ) ) ) VAR VAR (  VAR_3 . METHOD_2 ( storage . METHOD_3 ( ) ) )  VAR_3 . METHOD_2 ( storage . METHOD_3 ( ) ) (  VAR_3 . METHOD_4 ( ) . METHOD_5 ( this , VAR_4 ) )  VAR_3 . METHOD_4 ( ) . METHOD_5 ( this , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN java.util.ArrayList<TYPE_1> ) RETURN java.util.ArrayList<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<TYPE_1> ) TYPE java.util.ArrayList<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < ( VAR_2 . length ) ) COND i < ( VAR_2 . length ) ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME user ) NAME user ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  user . setId ( VAR_3 [ i ] ) )  user . setId ( VAR_3 [ i ] ) (  user . METHOD_2 ( VAR_2 [ i ] ) )  user . METHOD_2 ( VAR_2 [ i ] ) (  user . METHOD_3 ( VAR_2 [ i ] ) )  user . METHOD_3 ( VAR_2 [ i ] ) (  VAR_1 . add ( user ) )  VAR_1 . add ( user ) ) BLOCK BLOCK ) FOR FOR (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ) != ( VAR_2 ) ) COND ( VAR_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ) != ( VAR_2 ) ( THEN THEN (  METHOD_4 ( METHOD_5 ( ) , VAR_3 ) )  METHOD_4 ( METHOD_5 ( ) , VAR_3 ) (  VAR_4 . log ( this , VAR_5 ) )  VAR_4 . log ( this , VAR_5 ) ) THEN THEN ( ELSE ELSE (  METHOD_6 ( ) )  METHOD_6 ( ) ) ELSE ELSE ) IF IF (  TYPE_1 . METHOD_7 ( true ) )  TYPE_1 . METHOD_7 ( true ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME vmId ) NAME vmId ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND source != null ) COND source != null ( THEN THEN (  return ! ( ( ( java.util.List < ? > ) ( source ) ) . isEmpty ( ) ) ; )  return ! ( ( ( java.util.List < ? > ) ( source ) ) . isEmpty ( ) ) ; ) THEN THEN ) IF IF (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return ! ( ( ( java.util.List < ? > ) ( source ) ) . isEmpty ( ) ) ; } return false ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return ! ( ( ( java.util.List < ? > ) ( source ) ) . isEmpty ( ) ) ; } return false ; } } (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  return VAR_2 ; )  return VAR_2 ; ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_3 ) == null ) COND ( VAR_3 ) == null ( THEN THEN ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_1 . METHOD_2 ( TYPE_2 . getVm ( ) . METHOD_3 ( ) , TYPE_2 . getVm ( ) . METHOD_4 ( ) ) ) INIT = TYPE_1 . METHOD_2 ( TYPE_2 . getVm ( ) . METHOD_3 ( ) , TYPE_2 . getVm ( ) . METHOD_4 ( ) ) ) VAR VAR (  VAR_3 = ( VAR_4 && ( TYPE_1 . METHOD_5 ( TYPE_2 . getVm ( ) . METHOD_4 ( ) ) ) ) ? METHOD_6 ( ) . METHOD_7 ( ) : VAR_2 )  VAR_3 = ( VAR_4 && ( TYPE_1 . METHOD_5 ( TYPE_2 . getVm ( ) . METHOD_4 ( ) ) ) ) ? METHOD_6 ( ) . METHOD_7 ( ) : VAR_2 ) THEN THEN ) IF IF (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.Integer ) TYPE java.lang.Integer ( NAME value ) NAME value ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND value != null ) COND value != null ( THEN THEN ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_5 ) NAME VAR_5 ( INIT = value + STRING_1 ) INIT = value + STRING_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_6 ) NAME VAR_6 ( INIT = VAR_3 + STRING_1 ) INIT = VAR_3 + STRING_1 ) VAR VAR (  VAR_2 . METHOD_2 ( ( value < ( VAR_7 ) ? STRING_2 : VAR_5 ) ) )  VAR_2 . METHOD_2 ( ( value < ( VAR_7 ) ? STRING_2 : VAR_5 ) ) (  VAR_2 . METHOD_3 ( VAR_4 ) )  VAR_2 . METHOD_3 ( VAR_4 ) (  VAR_1 . METHOD_4 ( VAR_6 ) )  VAR_1 . METHOD_4 ( VAR_6 ) (  VAR_1 . METHOD_5 ( ( value != 0 ) ) )  VAR_1 . METHOD_5 ( ( value != 0 ) ) (  VAR_1 . setTitle ( VAR_5 ) )  VAR_1 . setTitle ( VAR_5 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( TYPE_1 . getParameters ( ) . METHOD_3 ( ) , TYPE_1 . METHOD_4 ( ) , TYPE_1 . getParameters ( ) . METHOD_5 ( ) ) ) INIT = METHOD_2 ( TYPE_1 . getParameters ( ) . METHOD_3 ( ) , TYPE_1 . METHOD_4 ( ) , TYPE_1 . getParameters ( ) . METHOD_5 ( ) ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME result ) NAME result ( INIT = null ) INIT = null ) VAR VAR ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN (  result = METHOD_6 ( VAR_1 ) )  result = METHOD_6 ( VAR_1 ) (  METHOD_7 ( result ) )  METHOD_7 ( result ) ) THEN THEN ( ELSE ELSE (  result = METHOD_8 ( ) )  result = METHOD_8 ( ) ) ELSE ELSE ) IF IF (  TYPE_2 . METHOD_9 ( result , result . METHOD_10 ( ) ) )  TYPE_2 . METHOD_9 ( result , result . METHOD_10 ( ) ) (  TYPE_1 . METHOD_11 ( ) . METHOD_12 ( result ) )  TYPE_1 . METHOD_11 ( ) . METHOD_12 ( result ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_2 . add ( VAR_1 ) )  VAR_2 . add ( VAR_1 ) ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < ( VAR_3 . size ( ) ) ) COND i < ( VAR_3 . size ( ) ) ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK ( IF IF ( COND VAR_3 . get ( i ) . getId ( ) . equals ( VAR_1 . getId ( ) ) ) COND VAR_3 . get ( i ) . getId ( ) . equals ( VAR_1 . getId ( ) ) ( THEN THEN (  VAR_3 . METHOD_2 ( i ) )  VAR_3 . METHOD_2 ( i ) (  break ; )  break ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR FOR (  METHOD_3 ( VAR_1 ) )  METHOD_3 ( VAR_1 ) (  METHOD_4 ( ) . METHOD_5 ( this , VAR_4 ) )  METHOD_4 ( ) . METHOD_5 ( this , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1[] ) RETURN TYPE_1[] ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_3 ) NAME METHOD_3 ( BLOCK BLOCK (  return org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . METHOD_4 ( ) . METHOD_5 ( VAR_1 ) ; )  return org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . METHOD_4 ( ) . METHOD_5 ( VAR_1 ) ; ) BLOCK BLOCK ) METHOD METHOD (  return new TYPE_1 [ ] { new TYPE_2 ( ) , new TYPE_3 ( VAR_1 ) , new TYPE_4 ( ) { protected java.lang.String METHOD_3 ( ) { return org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . METHOD_4 ( ) . METHOD_5 ( VAR_1 ) ; } } , new TYPE_5 ( VAR_2 ) } ; )  return new TYPE_1 [ ] { new TYPE_2 ( ) , new TYPE_3 ( VAR_1 ) , new TYPE_4 ( ) { protected java.lang.String METHOD_3 ( ) { return org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . METHOD_4 ( ) . METHOD_5 ( VAR_1 ) ; } } , new TYPE_5 ( VAR_2 ) } ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ( INIT = true ) INIT = true ) VAR VAR ( IF IF ( COND ( ! ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) . METHOD_3 ( ) ) ) && ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) . METHOD_4 ( ) ) ) COND ( ! ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) . METHOD_3 ( ) ) ) && ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) . METHOD_4 ( ) ) ( THEN THEN (  addCanDoActionMessage ( VAR_2 ) )  addCanDoActionMessage ( VAR_2 ) (  VAR_1 = false )  VAR_1 = false ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( IN ( ( TYPE_2 < TYPE_1 > ) ( returnValue ) ) ) IN ( ( TYPE_2 < TYPE_1 > ) ( returnValue ) ) ( BLOCK BLOCK (  VAR_2 . add ( METHOD_1 ( VAR_1 . getName ( ) , VAR_1 . METHOD_2 ( ) , VAR_1 . METHOD_3 ( ) ) ) )  VAR_2 . add ( METHOD_1 ( VAR_1 . getName ( ) , VAR_1 . METHOD_2 ( ) , VAR_1 . METHOD_3 ( ) ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  setItems ( VAR_2 ) )  setItems ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_1 . METHOD_2 ( false ) )  VAR_1 . METHOD_2 ( false ) (  VAR_1 . METHOD_3 ( VAR_2 ) )  VAR_1 . METHOD_3 ( VAR_2 ) (  VAR_1 . METHOD_4 ( VAR_3 ) )  VAR_1 . METHOD_4 ( VAR_3 ) (  cmd = org.mockito.Mockito . METHOD_5 ( new TYPE_2 ( VAR_1 ) ) )  cmd = org.mockito.Mockito . METHOD_5 ( new TYPE_2 ( VAR_1 ) ) (  org.mockito.Mockito.doReturn ( METHOD_6 ( VAR_2 , VAR_4 , VAR_3 ) ) . when ( VAR_5 ) . METHOD_7 ( VAR_2 ) )  org.mockito.Mockito.doReturn ( METHOD_6 ( VAR_2 , VAR_4 , VAR_3 ) ) . when ( VAR_5 ) . METHOD_7 ( VAR_2 ) (  METHOD_8 ( cmd ) )  METHOD_8 ( cmd ) (  TYPE_3 . METHOD_9 ( cmd . validate ( ) ) )  TYPE_3 . METHOD_9 ( cmd . validate ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_3 . METHOD_2 ( ) ) INIT = TYPE_3 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_3 . METHOD_3 ( ) ) INIT = VAR_3 . METHOD_3 ( ) ) VAR VAR (  VAR_4 . METHOD_4 ( VAR_2 ) )  VAR_4 . METHOD_4 ( VAR_2 ) ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_4 . METHOD_5 ( VAR_1 , node , VAR_6 ) ) INIT = VAR_4 . METHOD_5 ( VAR_1 , node , VAR_6 ) ) VAR VAR ( IF IF ( COND VAR_5 != null ) COND VAR_5 != null ( THEN THEN (  return new TYPE_1 ( ( ( TYPE_5 ) ( VAR_5 ) ) ) ; )  return new TYPE_1 ( ( ( TYPE_5 ) ( VAR_5 ) ) ) ; ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_7 ( ( STRING_1 + VAR_1 ) , e ) ; )  throw new TYPE_7 ( ( STRING_1 + VAR_1 ) , e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  VAR_1 . add ( STRING_1 ) )  VAR_1 . add ( STRING_1 ) (  METHOD_2 ( METHOD_3 ( ) ) )  METHOD_2 ( METHOD_3 ( ) ) (  METHOD_4 ( 1 ) )  METHOD_4 ( 1 ) (  VAR_2 . METHOD_5 ( ) )  VAR_2 . METHOD_5 ( ) ( VAR VAR ( TYPE TYPE_1.Disk ) TYPE TYPE_1.Disk ( NAME disk ) NAME disk ( INIT = resource . get ( ) ) INIT = resource . get ( ) ) VAR VAR (  METHOD_6 ( disk . METHOD_7 ( ) ) )  METHOD_6 ( disk . METHOD_7 ( ) ) (  TYPE_2 . METHOD_8 ( disk , 1 ) )  TYPE_2 . METHOD_8 ( disk , 1 ) (  METHOD_9 ( disk ) )  METHOD_9 ( disk ) ) BLOCK BLOCK ( FINALLY FINALLY (  VAR_1 . METHOD_10 ( ) )  VAR_1 . METHOD_10 ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 = new TYPE_1 ( STRING_1 , org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) , STRING_1 , TYPE_2 . getValue ( ) , TYPE_3 . getValue ( ) ) )  VAR_1 = new TYPE_1 ( STRING_1 , org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) , STRING_1 , TYPE_2 . getValue ( ) , TYPE_3 . getValue ( ) ) (  validator = org.mockito.Mockito . METHOD_3 ( new TYPE_4 ( VAR_1 , new java.util.ArrayList < java.lang.String > ( ) ) ) )  validator = org.mockito.Mockito . METHOD_3 ( new TYPE_4 ( VAR_1 , new java.util.ArrayList < java.lang.String > ( ) ) ) (  METHOD_4 ( ) )  METHOD_4 ( ) (  METHOD_5 ( ) )  METHOD_5 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( VAR_2 . Guid class ) ) ) . thenReturn ( METHOD_3 ( ) ) )  org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( VAR_2 . Guid class ) ) ) . thenReturn ( METHOD_3 ( ) ) (  org.mockito.Mockito.when ( VAR_3 . get ( VAR_4 . METHOD_4 ( ) . getId ( ) ) ) . thenReturn ( VAR_4 . METHOD_4 ( ) ) )  org.mockito.Mockito.when ( VAR_3 . get ( VAR_4 . METHOD_4 ( ) . getId ( ) ) ) . thenReturn ( VAR_4 . METHOD_4 ( ) ) (  TYPE_2 . METHOD_5 ( VAR_5 , VAR_6 ) )  TYPE_2 . METHOD_5 ( VAR_5 , VAR_6 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<TYPE_2,TYPE_3<TYPE_4>,TYPE_5> ) RETURN TYPE_1<TYPE_2,TYPE_3<TYPE_4>,TYPE_5> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_7<TYPE_8> ) TYPE TYPE_7<TYPE_8> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_7<TYPE_3<TYPE_4>> ) TYPE TYPE_7<TYPE_3<TYPE_4>> ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE TYPE_7<TYPE_5> ) TYPE TYPE_7<TYPE_5> ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE TYPE_7<TYPE_9> ) TYPE TYPE_7<TYPE_9> ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_10<TYPE_2,TYPE_3<TYPE_4>,TYPE_5> ) TYPE TYPE_10<TYPE_2,TYPE_3<TYPE_4>,TYPE_5> ( NAME result ) NAME result ( INIT = new TYPE_10 < TYPE_2 , TYPE_3 < TYPE_4 > , TYPE_5 > ( VAR_1 , VAR_2 ) ) INIT = new TYPE_10 < TYPE_2 , TYPE_3 < TYPE_4 > , TYPE_5 > ( VAR_1 , VAR_2 ) ) VAR VAR (  result . METHOD_2 ( VAR_3 ) )  result . METHOD_2 ( VAR_3 ) (  result . METHOD_3 ( VAR_4 ) )  result . METHOD_3 ( VAR_4 ) (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.Object[] ) TYPE java.lang.Object[] ( NAME VAR_2 ) NAME VAR_2 ( INIT = null ) INIT = null ) VAR VAR ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.Object> ) TYPE java.util.Map<java.lang.String,java.lang.Object> ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_2 . METHOD_3 ( VAR_2 ) ) INIT = TYPE_2 . METHOD_3 ( VAR_2 ) ) VAR VAR (  TYPE_3 . METHOD_4 ( VAR_1 , VAR_3 ) )  TYPE_3 . METHOD_4 ( VAR_1 , VAR_3 ) (  TYPE_4 . assertEquals ( null , VAR_1 . METHOD_5 ( ) ) )  TYPE_4 . assertEquals ( null , VAR_1 . METHOD_5 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_2 ) ( result . METHOD_2 ( ) ) ) ) INIT = ( ( TYPE_2 ) ( result . METHOD_2 ( ) ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = result . getReturnValue ( ) ) INIT = result . getReturnValue ( ) ) VAR VAR (  VAR_3 . METHOD_3 ( ( ( java.lang.String ) ( VAR_2 . METHOD_4 ( ) ) ) ) )  VAR_3 . METHOD_3 ( ( ( java.lang.String ) ( VAR_2 . METHOD_4 ( ) ) ) ) (  VAR_4 . METHOD_5 ( ( ( java.lang.String ) ( VAR_2 . METHOD_4 ( ) ) ) ) )  VAR_4 . METHOD_5 ( ( ( java.lang.String ) ( VAR_2 . METHOD_4 ( ) ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME node ) NAME node ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME iface ) NAME iface ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  super . METHOD_1 ( node , iface ) )  super . METHOD_1 ( node , iface ) (  iface . METHOD_2 ( node . METHOD_3 ( VAR_1 , VAR_2 ) . VAR_3 ) )  iface . METHOD_2 ( node . METHOD_3 ( VAR_1 , VAR_2 ) . VAR_3 ) (  iface . METHOD_4 ( ( ( node . METHOD_3 ( STRING_1 , VAR_2 ) ) != null ? node . METHOD_3 ( STRING_1 , VAR_2 ) . VAR_3 : STRING_2 ) ) )  iface . METHOD_4 ( ( ( node . METHOD_3 ( STRING_1 , VAR_2 ) ) != null ? node . METHOD_3 ( STRING_1 , VAR_2 ) . VAR_3 : STRING_2 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME iface ) NAME iface ( IN VAR_3 . METHOD_2 ( ) ) IN VAR_3 . METHOD_2 ( ) ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ( INIT = TYPE_1 . METHOD_3 ( iface . getName ( ) ) ) INIT = TYPE_1 . METHOD_3 ( iface . getName ( ) ) ) VAR VAR ( IF IF ( COND name == null ) COND name == null ( THEN THEN (  continue ; )  continue ; ) THEN THEN ( ELSE ELSE ( IF IF ( COND ( name . equals ( VAR_1 ) ) && ( VAR_2 . equals ( iface . METHOD_4 ( ) ) ) ) COND ( name . equals ( VAR_1 ) ) && ( VAR_2 . equals ( iface . METHOD_4 ( ) ) ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source ; )  return source ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME parameters ) NAME parameters ( INIT = new TYPE_1 ( VAR_1 , null , null , false ) ) INIT = new TYPE_1 ( VAR_1 , null , null , false ) ) VAR VAR (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , parameters , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , parameters , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  VAR_1 . METHOD_2 ( TYPE_3 . METHOD_3 ( VAR_2 ) ) )  VAR_1 . METHOD_2 ( TYPE_3 . METHOD_3 ( VAR_2 ) ) (  VAR_2 . add ( VAR_1 ) )  VAR_2 . add ( VAR_1 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_1 ( VAR_1 ) ) INIT = new TYPE_1 ( VAR_1 ) ) VAR VAR (  VAR_3 . setItems ( VAR_4 ) )  VAR_3 . setItems ( VAR_4 ) (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDSGroup> ) RETURN java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDSGroup> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDSGroup> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDSGroup> ( NAME list ) NAME list ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDSGroup> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDSGroup> ( NAME VAR_3 ) NAME VAR_3 ( INIT = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ( ) ) INIT = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ) TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ( NAME cluster ) NAME cluster ( IN list ) IN list ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 && ( cluster . METHOD_2 ( ) ) ) || ( VAR_2 && ( cluster . METHOD_3 ( ) ) ) ) COND ( VAR_1 && ( cluster . METHOD_2 ( ) ) ) || ( VAR_2 && ( cluster . METHOD_3 ( ) ) ) ( THEN THEN (  VAR_3 . add ( cluster ) )  VAR_3 . add ( cluster ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  TYPE_1 . METHOD_4 ( VAR_3 , new TYPE_2 ( ) ) )  TYPE_1 . METHOD_4 ( VAR_3 , new TYPE_2 ( ) ) (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_2 ) . METHOD_2 ( ) )  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_2 ) . METHOD_2 ( ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = org.mockito.Mockito . METHOD_3 ( VAR_4 class ) ) INIT = org.mockito.Mockito . METHOD_3 ( VAR_4 class ) ) VAR VAR (  org.mockito.Mockito.when ( VAR_3 . getSucceeded ( ) ) . thenReturn ( true ) )  org.mockito.Mockito.when ( VAR_3 . getSucceeded ( ) ) . thenReturn ( true ) (  org.mockito.Mockito.when ( VAR_1 . METHOD_4 ( TYPE_2 . any ( VAR_5 . VdcActionType class ) , TYPE_2 . any ( VAR_6 class ) ) ) . thenReturn ( VAR_3 ) )  org.mockito.Mockito.when ( VAR_1 . METHOD_4 ( TYPE_2 . any ( VAR_5 . VdcActionType class ) , TYPE_2 . any ( VAR_6 class ) ) ) . thenReturn ( VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.Disk ) TYPE TYPE_1.Disk ( NAME disk ) NAME disk ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3.ValidationResult ) TYPE TYPE_3.ValidationResult ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_3 ) NAME VAR_3 ( INIT = org.mockito.Mockito . METHOD_2 ( new TYPE_4 ( disk , VAR_1 ) ) ) INIT = org.mockito.Mockito . METHOD_2 ( new TYPE_4 ( disk , VAR_1 ) ) ) VAR VAR (  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( VAR_4 ) . METHOD_3 ( disk , VAR_1 ) )  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( VAR_4 ) . METHOD_3 ( disk , VAR_1 ) (  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( VAR_3 ) . METHOD_4 ( TYPE_5 . any ( VAR_5 . Guid class ) ) )  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( VAR_3 ) . METHOD_4 ( TYPE_5 . any ( VAR_5 . Guid class ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) (  dao = VAR_1 . METHOD_2 ( ) )  dao = VAR_1 . METHOD_2 ( ) (  VAR_2 = VAR_1 . METHOD_3 ( ) )  VAR_2 = VAR_1 . METHOD_3 ( ) (  VAR_3 = dao . get ( VAR_4 ) )  VAR_3 = dao . get ( VAR_4 ) (  VAR_5 = dao . get ( VAR_6 ) )  VAR_5 = dao . get ( VAR_6 ) (  VAR_7 = new TYPE_1 ( ) )  VAR_7 = new TYPE_1 ( ) (  VAR_7 . METHOD_4 ( STRING_1 ) )  VAR_7 . METHOD_4 ( STRING_1 ) (  VAR_7 . METHOD_5 ( STRING_2 ) )  VAR_7 . METHOD_5 ( STRING_2 ) (  VAR_7 . METHOD_6 ( VAR_8 ) )  VAR_7 . METHOD_6 ( VAR_8 ) (  VAR_9 = new TYPE_2 ( VAR_10 , VAR_4 ) )  VAR_9 = new TYPE_2 ( VAR_10 , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<TYPE_1<org.ovirt.engine.core.compat.Guid,java.lang.Integer>> ) RETURN java.util.List<TYPE_1<org.ovirt.engine.core.compat.Guid,java.lang.Integer>> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDS> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDS> ( NAME hosts ) NAME hosts ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ) VAR VAR ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.String> ) TYPE java.util.Map<java.lang.String,java.lang.String> ( NAME parameters ) NAME parameters ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . error ( STRING_1 , METHOD_2 ( ) . getName ( ) ) )  VAR_1 . error ( STRING_1 , METHOD_2 ( ) . getName ( ) ) ( VAR VAR ( TYPE java.util.List<TYPE_1<org.ovirt.engine.core.compat.Guid,java.lang.Integer>> ) TYPE java.util.List<TYPE_1<org.ovirt.engine.core.compat.Guid,java.lang.Integer>> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME vds ) NAME vds ( IN hosts ) IN hosts ( BLOCK BLOCK (  VAR_2 . add ( new TYPE_1 ( vds . getId ( ) , 1 ) ) )  VAR_2 . add ( new TYPE_1 ( vds . getId ( ) , 1 ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN org.ovirt.engine.core.common.businessentities.StorageDomain ) RETURN org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME status ) NAME status ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ) TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME domain ) NAME domain ( INIT = METHOD_2 ( status , name , VAR_1 ) ) INIT = METHOD_2 ( status , name , VAR_1 ) ) VAR VAR (  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( cmd ) . METHOD_3 ( ) )  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( cmd ) . METHOD_3 ( ) (  org.mockito.Mockito.when ( VAR_2 . METHOD_4 ( TYPE_2 . any ( VAR_3 . Guid class ) ) ) . thenReturn ( TYPE_3 . METHOD_5 ( domain ) ) )  org.mockito.Mockito.when ( VAR_2 . METHOD_4 ( TYPE_2 . any ( VAR_3 . Guid class ) ) ) . thenReturn ( TYPE_3 . METHOD_5 ( domain ) ) (  cmd . METHOD_6 ( new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ) )  cmd . METHOD_6 ( new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ) (  return domain ; )  return domain ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND METHOD_2 ( ) . getEntity ( ) ) COND METHOD_2 ( ) . getEntity ( ) ( THEN THEN (  METHOD_3 ( ) . setIsChangable ( false ) )  METHOD_3 ( ) . setIsChangable ( false ) (  METHOD_4 ( ) . setIsChangable ( false ) )  METHOD_4 ( ) . setIsChangable ( false ) (  METHOD_5 ( ) . setIsChangable ( false ) )  METHOD_5 ( ) . setIsChangable ( false ) (  METHOD_6 ( ) . setIsChangable ( false ) )  METHOD_6 ( ) . setIsChangable ( false ) (  METHOD_7 ( ) . setIsChangable ( false ) )  METHOD_7 ( ) . setIsChangable ( false ) (  METHOD_8 ( ) . setIsChangable ( false ) )  METHOD_8 ( ) . setIsChangable ( false ) ) THEN THEN ) IF IF (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME VAR_1 ) NAME VAR_1 ( INIT = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ) INIT = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ) VAR VAR ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_3 = ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) )  VAR_3 = ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) BLOCK BLOCK ) METHOD METHOD (  VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { VAR_3 = ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ; } } )  VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { VAR_3 = ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ; } } (  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_4 , new TYPE_2 ( VAR_5 ) , VAR_1 ) )  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_4 , new TYPE_2 ( VAR_5 ) , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) . METHOD_3 ( VAR_1 class ) . to ( VAR_2 ) )  METHOD_2 ( ) . METHOD_3 ( VAR_1 class ) . to ( VAR_2 ) (  METHOD_2 ( ) . METHOD_3 ( VAR_3 class ) . to ( VAR_4 ) )  METHOD_2 ( ) . METHOD_3 ( VAR_3 class ) . to ( VAR_4 ) (  METHOD_2 ( ) . METHOD_3 ( VAR_5 class ) . to ( VAR_6 ) )  METHOD_2 ( ) . METHOD_3 ( VAR_5 class ) . to ( VAR_6 ) (  METHOD_4 ( VAR_7 class , VAR_8 class , VAR_9 class , VAR_10 class ) )  METHOD_4 ( VAR_7 class , VAR_8 class , VAR_9 class , VAR_10 class ) (  METHOD_5 ( VAR_11 class ) . METHOD_6 ( VAR_12 class ) )  METHOD_5 ( VAR_11 class ) . METHOD_6 ( VAR_12 class ) (  METHOD_5 ( VAR_13 class ) . METHOD_6 ( VAR_12 class ) )  METHOD_5 ( VAR_13 class ) . METHOD_6 ( VAR_12 class ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.Map<java.lang.String,java.lang.String> ) RETURN java.util.Map<java.lang.String,java.lang.String> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) == null ) COND ( VAR_1 ) == null ( THEN THEN (  VAR_1 = super . METHOD_1 ( ) )  VAR_1 = super . METHOD_1 ( ) (  VAR_1 . put ( TYPE_1 . name ( ) . METHOD_2 ( ) , ( ( METHOD_3 ( ) ) == null ? STRING_1 : METHOD_3 ( ) ) ) )  VAR_1 . put ( TYPE_1 . name ( ) . METHOD_2 ( ) , ( ( METHOD_3 ( ) ) == null ? STRING_1 : METHOD_3 ( ) ) ) (  VAR_1 . put ( TYPE_2 . name ( ) . METHOD_2 ( ) , METHOD_4 ( ) ) )  VAR_1 . put ( TYPE_2 . name ( ) . METHOD_2 ( ) , METHOD_4 ( ) ) ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3<TYPE_1> ) TYPE TYPE_3<TYPE_1> ( NAME VAR_5 ) NAME VAR_5 ( INIT = TYPE_4 . METHOD_2 ( VAR_1 , VAR_2 , TYPE_5 . METHOD_3 ( id ) , VAR_3 , VAR_4 ) ) INIT = TYPE_4 . METHOD_2 ( VAR_1 , VAR_2 , TYPE_5 . METHOD_3 ( id ) , VAR_3 , VAR_4 ) ) VAR VAR ( IF IF ( COND ( VAR_5 . size ( ) ) == 0 ) COND ( VAR_5 . size ( ) ) == 0 ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF (  return new java.util.ArrayList < TYPE_1 > ( VAR_5 ) . get ( 0 ) ; )  return new java.util.ArrayList < TYPE_1 > ( VAR_5 ) . get ( 0 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME vm ) NAME vm ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  vm . METHOD_2 ( STRING_1 ) )  vm . METHOD_2 ( STRING_1 ) (  vm . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_1 ) ) )  vm . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_1 ) ) (  vm . METHOD_5 ( new TYPE_3 ( ) ) )  vm . METHOD_5 ( new TYPE_3 ( ) ) (  TYPE_4 . METHOD_6 ( vm , STRING_2 , STRING_3 , STRING_4 ) )  TYPE_4 . METHOD_6 ( vm , STRING_2 , STRING_3 , STRING_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain> ) RETURN java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain> ( NAME VAR_3 ) NAME VAR_3 ( INIT = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ) INIT = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ) TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME storage ) NAME storage ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( IF IF ( COND storage . METHOD_2 ( ) . equals ( VAR_2 ) ) COND storage . METHOD_2 ( ) . equals ( VAR_2 ) ( THEN THEN (  VAR_3 . add ( storage ) )  VAR_3 . add ( storage ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.doReturn ( METHOD_2 ( true , 2 ) ) . when ( VAR_1 ) . METHOD_3 ( TYPE_1 . METHOD_4 ( VAR_2 ) , TYPE_1 . any ( VAR_3 class ) ) )  org.mockito.Mockito.doReturn ( METHOD_2 ( true , 2 ) ) . when ( VAR_1 ) . METHOD_3 ( TYPE_1 . METHOD_4 ( VAR_2 ) , TYPE_1 . any ( VAR_3 class ) ) (  VAR_1 . METHOD_5 ( ) )  VAR_1 . METHOD_5 ( ) (  org.mockito.Mockito . METHOD_6 ( VAR_4 , org.mockito.Mockito . METHOD_7 ( 2 ) ) . METHOD_8 ( TYPE_1 . any ( VAR_5 class ) ) )  org.mockito.Mockito . METHOD_6 ( VAR_4 , org.mockito.Mockito . METHOD_7 ( 2 ) ) . METHOD_8 ( TYPE_1 . any ( VAR_5 class ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . METHOD_2 ( VAR_4 , new TYPE_4 ( getName ( ) , VAR_1 , false ) ) ) INIT = VAR_3 . METHOD_2 ( VAR_4 , new TYPE_4 ( getName ( ) , VAR_1 , false ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_5> ) TYPE java.util.List<TYPE_5> ( NAME VAR_5 ) NAME VAR_5 ( INIT = ( ( java.util.List < TYPE_5 > ) ( VAR_2 . getReturnValue ( ) ) ) ) INIT = ( ( java.util.List < TYPE_5 > ) ( VAR_2 . getReturnValue ( ) ) ) ) VAR VAR (  return METHOD_3 ( VAR_5 ) ; )  return METHOD_3 ( VAR_5 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( VAR_2 , VAR_3 , VAR_4 , true , VAR_5 ) )  VAR_1 . METHOD_2 ( VAR_2 , VAR_3 , VAR_4 , true , VAR_5 ) (  org.mockito.Mockito . METHOD_3 ( VAR_6 ) . METHOD_4 ( VAR_2 , VAR_5 ) )  org.mockito.Mockito . METHOD_3 ( VAR_6 ) . METHOD_4 ( VAR_2 , VAR_5 ) (  org.mockito.Mockito . METHOD_3 ( VAR_6 ) . METHOD_4 ( VAR_3 , VAR_5 ) )  org.mockito.Mockito . METHOD_3 ( VAR_6 ) . METHOD_4 ( VAR_3 , VAR_5 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_7 ) NAME VAR_7 ( INIT = org.mockito.Mockito . METHOD_5 ( VAR_8 , VAR_9 ) ) INIT = org.mockito.Mockito . METHOD_5 ( VAR_8 , VAR_9 ) ) VAR VAR (  VAR_7 . METHOD_3 ( VAR_8 ) . METHOD_6 ( VAR_4 ) )  VAR_7 . METHOD_3 ( VAR_8 ) . METHOD_6 ( VAR_4 ) (  VAR_7 . METHOD_3 ( VAR_9 ) . METHOD_7 ( VAR_4 ) )  VAR_7 . METHOD_3 ( VAR_9 ) . METHOD_7 ( VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME parameters ) NAME parameters ( INIT = new TYPE_3 ( VAR_1 , TYPE_4 . getParameters ( ) . METHOD_2 ( ) , TYPE_4 . getParameters ( ) . METHOD_3 ( ) ) ) INIT = new TYPE_3 ( VAR_1 , TYPE_4 . getParameters ( ) . METHOD_2 ( ) , TYPE_4 . getParameters ( ) . METHOD_3 ( ) ) ) VAR VAR (  parameters . METHOD_4 ( TYPE_4 . getParameters ( ) . METHOD_5 ( ) ) )  parameters . METHOD_4 ( TYPE_4 . getParameters ( ) . METHOD_5 ( ) ) (  parameters . METHOD_6 ( true ) )  parameters . METHOD_6 ( true ) (  return TYPE_5 . getInstance ( ) . METHOD_7 ( VAR_2 , parameters , TYPE_6 . METHOD_8 ( TYPE_4 . METHOD_9 ( ) ) ) ; )  return TYPE_5 . getInstance ( ) . METHOD_7 ( VAR_2 , parameters , TYPE_6 . METHOD_8 ( TYPE_4 . METHOD_9 ( ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME vmId ) NAME vmId ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_3> ) TYPE java.util.List<TYPE_3> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  VAR_2 . add ( METHOD_2 ( VAR_3 , vmId ) ) )  VAR_2 . add ( METHOD_2 ( VAR_3 , vmId ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_1 ( VAR_2 , vmId ) ) INIT = new TYPE_1 ( VAR_2 , vmId ) ) VAR VAR (  VAR_4 . METHOD_3 ( VAR_5 ) )  VAR_4 . METHOD_3 ( VAR_5 ) (  return VAR_4 ; )  return VAR_4 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME value ) NAME value ( INIT = null ) INIT = null ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = STRING_2 ) INIT = STRING_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( INIT = STRING_3 ) INIT = STRING_3 ) VAR VAR (  VAR_1 . METHOD_2 ( VAR_2 , value ) )  VAR_1 . METHOD_2 ( VAR_2 , value ) (  VAR_1 . METHOD_3 ( VAR_2 , VAR_3 , VAR_4 ) )  VAR_1 . METHOD_3 ( VAR_2 , VAR_3 , VAR_4 ) ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_1 . METHOD_4 ( VAR_2 ) ) INIT = VAR_1 . METHOD_4 ( VAR_2 ) ) VAR VAR (  TYPE_3 . assertEquals ( ( ( value + VAR_4 ) + VAR_3 ) , VAR_5 ) )  TYPE_3 . assertEquals ( ( ( value + VAR_4 ) + VAR_3 ) , VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME type ) NAME type ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_2 ( type ) ) INIT = VAR_2 . METHOD_2 ( type ) ) VAR VAR (  VAR_3 . METHOD_3 ( VAR_1 ) )  VAR_3 . METHOD_3 ( VAR_1 ) (  VAR_3 . METHOD_3 ( VAR_4 class ) )  VAR_3 . METHOD_3 ( VAR_4 class ) (  VAR_3 . METHOD_3 ( VAR_5 class ) )  VAR_3 . METHOD_3 ( VAR_5 class ) (  VAR_3 . METHOD_4 ( STRING_1 , VAR_1 . METHOD_5 ( ) ) )  VAR_3 . METHOD_4 ( STRING_1 , VAR_1 . METHOD_5 ( ) ) (  VAR_3 . METHOD_4 ( STRING_2 , VAR_1 . METHOD_5 ( ) ) )  VAR_3 . METHOD_4 ( STRING_2 , VAR_1 . METHOD_5 ( ) ) (  VAR_3 . METHOD_4 ( STRING_3 ) )  VAR_3 . METHOD_4 ( STRING_3 ) (  VAR_3 . METHOD_4 ( ) )  VAR_3 . METHOD_4 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.ArrayList<java.lang.Integer> ) RETURN java.util.ArrayList<java.lang.Integer> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<java.lang.Integer> ) TYPE java.util.ArrayList<java.lang.Integer> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( IN METHOD_2 ( ) ) IN METHOD_2 ( ) ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_3 ( VAR_4 . get ( VAR_2 ) , STRING_1 , null ) ) INIT = METHOD_3 ( VAR_4 . get ( VAR_2 ) , STRING_1 , null ) ) VAR VAR ( IF IF ( COND STRING_2 . METHOD_4 ( VAR_3 ) ) COND STRING_2 . METHOD_4 ( VAR_3 ) ( THEN THEN (  VAR_1 . add ( VAR_2 ) )  VAR_1 . add ( VAR_2 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( VAR_3 , VAR_1 ) ) INIT = METHOD_2 ( VAR_3 , VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VdsNetworkInterface> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VdsNetworkInterface> ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_3 ( VAR_2 . getName ( ) ) ) INIT = METHOD_3 ( VAR_2 . getName ( ) ) ) VAR VAR (  METHOD_4 ( VAR_2 , VAR_4 ) )  METHOD_4 ( VAR_2 , VAR_4 ) (  VAR_2 . METHOD_5 ( null ) )  VAR_2 . METHOD_5 ( null ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME parameters ) NAME parameters ( INIT = METHOD_6 ( VAR_2 , VAR_4 ) ) INIT = METHOD_6 ( VAR_2 , VAR_4 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_5 ) NAME VAR_5 ( INIT = METHOD_7 ( parameters ) ) INIT = METHOD_7 ( parameters ) ) VAR VAR (  METHOD_8 ( VAR_5 ) )  METHOD_8 ( VAR_5 ) (  METHOD_9 ( VAR_5 ) )  METHOD_9 ( VAR_5 ) (  METHOD_10 ( VAR_5 ) )  METHOD_10 ( VAR_5 ) (  METHOD_11 ( VAR_5 , VAR_1 ) )  METHOD_11 ( VAR_5 , VAR_1 ) (  METHOD_12 ( VAR_5 ) )  METHOD_12 ( VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_1 ) ( model ) ) ) INIT = ( ( TYPE_1 ) ( model ) ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( ( java.lang.String ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) ) ) INIT = ( ( java.lang.String ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) ) ) VAR VAR (  VAR_2 . METHOD_2 ( ) . METHOD_3 ( VAR_3 ) )  VAR_2 . METHOD_2 ( ) . METHOD_3 ( VAR_3 ) (  VAR_2 . METHOD_4 ( ) )  VAR_2 . METHOD_4 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_3 ( ) ) INIT = new TYPE_3 ( ) ) VAR VAR (  VAR_2 . METHOD_2 ( VAR_3 ) )  VAR_2 . METHOD_2 ( VAR_3 ) (  VAR_2 . METHOD_3 ( METHOD_4 ( ) ) )  VAR_2 . METHOD_3 ( METHOD_4 ( ) ) (  VAR_2 . METHOD_5 ( new java.lang.Object [ ] { VAR_1 } ) )  VAR_2 . METHOD_5 ( new java.lang.Object [ ] { VAR_1 } ) ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_5 . METHOD_6 ( VAR_6 , new TYPE_5 ( null , METHOD_4 ( ) , VAR_2 ) ) ) INIT = VAR_5 . METHOD_6 ( VAR_6 , new TYPE_5 ( null , METHOD_4 ( ) , VAR_2 ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_6> ) TYPE java.util.List<TYPE_6> ( NAME VAR_7 ) NAME VAR_7 ( INIT = ( ( java.util.List < TYPE_6 > ) ( VAR_4 . getReturnValue ( ) ) ) ) INIT = ( ( java.util.List < TYPE_6 > ) ( VAR_4 . getReturnValue ( ) ) ) ) VAR VAR (  return METHOD_7 ( VAR_7 ) ; )  return METHOD_7 ( VAR_7 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) RETURN org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ( VAR VAR ( TYPE java.lang.Boolean ) TYPE java.lang.Boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.Integer ) TYPE java.lang.Integer ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME iface ) NAME iface ( INIT = new org.ovirt.engine.core.common.businessentities . VdsNetworkInterface ( ) ) INIT = new org.ovirt.engine.core.common.businessentities . VdsNetworkInterface ( ) ) VAR VAR (  iface . setId ( id ) )  iface . setId ( id ) (  iface . METHOD_2 ( name ) )  iface . METHOD_2 ( name ) (  iface . METHOD_3 ( VAR_1 ) )  iface . METHOD_3 ( VAR_1 ) (  iface . METHOD_4 ( VAR_2 ) )  iface . METHOD_4 ( VAR_2 ) (  iface . METHOD_5 ( VAR_3 ) )  iface . METHOD_5 ( VAR_3 ) (  iface . METHOD_6 ( VAR_4 ) )  iface . METHOD_6 ( VAR_4 ) (  iface . METHOD_7 ( VAR_5 ) )  iface . METHOD_7 ( VAR_5 ) (  return iface ; )  return iface ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 < TYPE_2 > ( new TYPE_2 ( VAR_1 ) ) ) )  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 < TYPE_2 > ( new TYPE_2 ( VAR_1 ) ) ) (  METHOD_3 ( cmd ) )  METHOD_3 ( cmd ) (  METHOD_4 ( cmd , false ) )  METHOD_4 ( cmd , false ) (  cmd . METHOD_5 ( ) )  cmd . METHOD_5 ( ) (  TYPE_3 . METHOD_6 ( cmd . getReturnValue ( ) . getSucceeded ( ) ) )  TYPE_3 . METHOD_6 ( cmd . getReturnValue ( ) . getSucceeded ( ) ) (  TYPE_3 . assertEquals ( cmd . METHOD_7 ( ) , VAR_2 ) )  TYPE_3 . assertEquals ( cmd . METHOD_7 ( ) , VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_1 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( VAR_2 ) ) )  VAR_1 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( VAR_2 ) ) (  VAR_1 . METHOD_3 ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( VAR_3 ) ) )  VAR_1 . METHOD_3 ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( VAR_3 ) ) (  VAR_1 . METHOD_4 ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( VAR_4 ) ) )  VAR_1 . METHOD_4 ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( VAR_4 ) ) (  VAR_1 . METHOD_5 ( VAR_5 ) )  VAR_1 . METHOD_5 ( VAR_5 ) (  VAR_1 . METHOD_6 ( VAR_6 ) )  VAR_1 . METHOD_6 ( VAR_6 ) (  VAR_1 . METHOD_7 ( STRING_1 ) )  VAR_1 . METHOD_7 ( STRING_1 ) (  VAR_1 . METHOD_8 ( VAR_7 ) )  VAR_1 . METHOD_8 ( VAR_7 ) (  VAR_1 . METHOD_9 ( VAR_8 ) )  VAR_1 . METHOD_9 ( VAR_8 ) (  dao . METHOD_10 ( VAR_1 ) )  dao . METHOD_10 ( VAR_1 ) (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_2 ( ) . METHOD_2 ( ) ) INIT = VAR_2 . METHOD_2 ( ) . METHOD_2 ( ) ) VAR VAR (  VAR_1 . METHOD_3 ( VAR_3 ) )  VAR_1 . METHOD_3 ( VAR_3 ) (  VAR_1 . METHOD_4 ( VAR_4 ) )  VAR_1 . METHOD_4 ( VAR_4 ) (  VAR_1 . METHOD_5 ( VAR_5 ) )  VAR_1 . METHOD_5 ( VAR_5 ) (  VAR_1 . METHOD_6 ( VAR_6 ) )  VAR_1 . METHOD_6 ( VAR_6 ) (  VAR_1 . METHOD_7 ( VAR_7 ) )  VAR_1 . METHOD_7 ( VAR_7 ) (  VAR_1 . METHOD_8 ( VAR_8 ) )  VAR_1 . METHOD_8 ( VAR_8 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME type ) NAME type ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.Object> ) TYPE java.util.Map<java.lang.String,java.lang.Object> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_6 ) NAME VAR_6 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_7 ) NAME VAR_7 ( INIT = TYPE_5 . METHOD_1 ( id , type , VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_6 ) ) INIT = TYPE_5 . METHOD_1 ( id , type , VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_6 ) ) VAR VAR ( IF IF ( COND TYPE_6 . METHOD_2 ( VAR_5 ) ) COND TYPE_6 . METHOD_2 ( VAR_5 ) ( THEN THEN (  VAR_7 . METHOD_3 ( VAR_5 ) )  VAR_7 . METHOD_3 ( VAR_5 ) ) THEN THEN ) IF IF (  return VAR_7 ; )  return VAR_7 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  return ( TYPE_1 . getParameters ( ) . METHOD_1 ( ) ) || ( ! ( METHOD_2 ( TYPE_1 . METHOD_3 ( ) . getId ( ) , VAR_1 , TYPE_1 . METHOD_4 ( ) , VAR_2 . VM ) ) ) ; )  return ( TYPE_1 . getParameters ( ) . METHOD_1 ( ) ) || ( ! ( METHOD_2 ( TYPE_1 . METHOD_3 ( ) . getId ( ) , VAR_1 , TYPE_1 . METHOD_4 ( ) , VAR_2 . VM ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME version ) NAME version ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND TYPE_3 . METHOD_2 ( version , VAR_2 ) ) COND TYPE_3 . METHOD_2 ( version , VAR_2 ) ( THEN THEN (  version . METHOD_3 ( new TYPE_4 ( ) ) )  version . METHOD_3 ( new TYPE_4 ( ) ) ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  version . METHOD_4 ( ) . METHOD_4 ( ) . add ( VAR_3 . value ( ) ) )  version . METHOD_4 ( ) . METHOD_4 ( ) . add ( VAR_3 . value ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.doReturn ( METHOD_2 ( VAR_1 ) ) . when ( cmd ) . METHOD_3 ( ) )  org.mockito.Mockito.doReturn ( METHOD_2 ( VAR_1 ) ) . when ( cmd ) . METHOD_3 ( ) (  org.mockito.Mockito.doReturn ( METHOD_4 ( VAR_2 ) ) . when ( VAR_3 ) . METHOD_5 ( VAR_2 ) )  org.mockito.Mockito.doReturn ( METHOD_4 ( VAR_2 ) ) . when ( VAR_3 ) . METHOD_5 ( VAR_2 ) (  org.mockito.Mockito.doReturn ( METHOD_6 ( VAR_4 ) ) . when ( VAR_3 ) . METHOD_5 ( VAR_4 ) )  org.mockito.Mockito.doReturn ( METHOD_6 ( VAR_4 ) ) . when ( VAR_3 ) . METHOD_5 ( VAR_4 ) (  org.mockito.Mockito.doReturn ( cluster ) . when ( cmd ) . METHOD_7 ( ) )  org.mockito.Mockito.doReturn ( cluster ) . when ( cmd ) . METHOD_7 ( ) (  org.mockito.Mockito.doReturn ( VAR_5 ) . when ( cmd ) . METHOD_8 ( ) )  org.mockito.Mockito.doReturn ( VAR_5 ) . when ( cmd ) . METHOD_8 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_2 ( VAR_1 , new TYPE_1 ( ( ( java.lang.String ) ( METHOD_3 ( ) . getEntity ( ) ) ) , ( ( java.lang.String ) ( METHOD_4 ( ) . getEntity ( ) ) ) , ( ( java.lang.String ) ( METHOD_5 ( ) . getEntity ( ) ) ) , ( ( java.lang.String ) ( METHOD_6 ( ) . getSelectedItem ( ) ) ) ) ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_2 ( VAR_1 , new TYPE_1 ( ( ( java.lang.String ) ( METHOD_3 ( ) . getEntity ( ) ) ) , ( ( java.lang.String ) ( METHOD_4 ( ) . getEntity ( ) ) ) , ( ( java.lang.String ) ( METHOD_5 ( ) . getEntity ( ) ) ) , ( ( java.lang.String ) ( METHOD_6 ( ) . getSelectedItem ( ) ) ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ( INIT = true ) INIT = true ) VAR VAR ( IF IF ( COND ! ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) . METHOD_3 ( ) ) ) COND ! ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) . METHOD_3 ( ) ) ( THEN THEN ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Version ) TYPE org.ovirt.engine.core.compat.Version ( NAME version ) NAME version ( INIT = TYPE_1 . METHOD_4 ( ) . METHOD_5 ( ) ) INIT = TYPE_1 . METHOD_4 ( ) . METHOD_5 ( ) ) VAR VAR (  VAR_1 = VAR_2 < java.lang.Boolean > METHOD_6 ( VAR_3 , version . getValue ( ) ) )  VAR_1 = VAR_2 < java.lang.Boolean > METHOD_6 ( VAR_3 , version . getValue ( ) ) ( IF IF ( COND ! VAR_1 ) COND ! VAR_1 ( THEN THEN (  addCanDoActionMessage ( VAR_4 ) )  addCanDoActionMessage ( VAR_4 ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( null ) )  METHOD_2 ( null ) ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME VAR_1 ) NAME VAR_1 ( INIT = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ) INIT = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ) VAR VAR ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( ( java.util.List < TYPE_1 > ) ( result ) ) ) INIT = ( ( java.util.List < TYPE_1 > ) ( result ) ) ) VAR VAR (  METHOD_3 ( ) . setItems ( VAR_3 ) )  METHOD_3 ( ) . setItems ( VAR_3 ) (  METHOD_4 ( ) )  METHOD_4 ( ) (  METHOD_5 ( ) )  METHOD_5 ( ) ) BLOCK BLOCK ) METHOD METHOD (  VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object result ) { java.util.List < TYPE_1 > VAR_3 = ( ( java.util.List < TYPE_1 > ) ( result ) ) ; METHOD_3 ( ) . setItems ( VAR_3 ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; } } )  VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object result ) { java.util.List < TYPE_1 > VAR_3 = ( ( java.util.List < TYPE_1 > ) ( result ) ) ; METHOD_3 ( ) . setItems ( VAR_3 ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; } } (  TYPE_2 . METHOD_6 ( VAR_1 ) )  TYPE_2 . METHOD_6 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_1 ) ( target ) ) ) INIT = ( ( TYPE_1 ) ( target ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDSGroup> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDSGroup> ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( returnValue ) ) ) INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( returnValue ) ) ) VAR VAR (  VAR_3 = VAR_2 )  VAR_3 = VAR_2 (  VAR_1 . METHOD_2 ( ) )  VAR_1 . METHOD_2 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source != null ? ( ( java.lang.String ) ( source ) ) : STRING_1 ; )  return source != null ? ( ( java.lang.String ) ( source ) ) : STRING_1 ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.String ) ( source ) ) : STRING_1 ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.String ) ( source ) ) : STRING_1 ; } } (  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_1 , new TYPE_1 ( ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_1 , new TYPE_1 ( ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_1.VdcActionParametersBase ) TYPE TYPE_1.VdcActionParametersBase ( NAME VAR_1 ) NAME VAR_1 ( IN getParameters ( ) . METHOD_2 ( ) ) IN getParameters ( ) . METHOD_2 ( ) ( BLOCK BLOCK (  VAR_1 . METHOD_3 ( getParameters ( ) . METHOD_4 ( ) ) )  VAR_1 . METHOD_3 ( getParameters ( ) . METHOD_4 ( ) ) (  TYPE_2 . METHOD_5 ( ) . METHOD_6 ( VAR_2 , VAR_1 , TYPE_2 . METHOD_7 ( ) . METHOD_8 ( ) . METHOD_9 ( ) . METHOD_10 ( ) . METHOD_11 ( ) ) )  TYPE_2 . METHOD_5 ( ) . METHOD_6 ( VAR_2 , VAR_1 , TYPE_2 . METHOD_7 ( ) . METHOD_8 ( ) . METHOD_9 ( ) . METHOD_10 ( ) . METHOD_11 ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1.VdcActionParametersBase ) RETURN TYPE_1.VdcActionParametersBase ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.VdcActionType ) TYPE TYPE_1.VdcActionType ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1.VdcActionParametersBase ) TYPE TYPE_1.VdcActionParametersBase ( NAME parameters ) NAME parameters ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.VdcActionType ) TYPE TYPE_1.VdcActionType ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( VAR_1 ) ) INIT = METHOD_2 ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1.VdcActionParametersBase ) TYPE TYPE_1.VdcActionParametersBase ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_3 ( ) ) INIT = METHOD_3 ( ) ) VAR VAR ( IF IF ( COND ( VAR_2 == ( VAR_4 ) ) || ( VAR_3 == null ) ) COND ( VAR_2 == ( VAR_4 ) ) || ( VAR_3 == null ) ( THEN THEN (  return parameters ; )  return parameters ; ) THEN THEN ) IF IF (  VAR_3 . METHOD_4 ( parameters . METHOD_5 ( ) ) )  VAR_3 . METHOD_4 ( parameters . METHOD_5 ( ) ) (  VAR_3 . METHOD_6 ( VAR_2 ) )  VAR_3 . METHOD_6 ( VAR_2 ) (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( vm . getId ( ) ) ) INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( vm . getId ( ) ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_4 ( VAR_1 ) . toString ( ) . METHOD_5 ( ) ) INIT = TYPE_2 . METHOD_4 ( VAR_1 ) . toString ( ) . METHOD_5 ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = vm . METHOD_6 ( ) . toString ( ) . METHOD_5 ( ) ) INIT = vm . METHOD_6 ( ) . toString ( ) . METHOD_5 ( ) ) VAR VAR ( IF IF ( COND VAR_3 . equals ( VAR_2 ) ) COND VAR_3 . equals ( VAR_2 ) ( THEN THEN (  VAR_4 . add ( VAR_5 , VAR_2 ) )  VAR_4 . add ( VAR_5 , VAR_2 ) ) THEN THEN ( ELSE ELSE (  VAR_4 . add ( VAR_5 , VAR_3 ) )  VAR_4 . add ( VAR_5 , VAR_3 ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ; )  return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ; } } ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( STRING_1 , VAR_2 . StorageDomain ) ) INIT = new TYPE_1 ( STRING_1 , VAR_2 . StorageDomain ) ) VAR VAR (  VAR_1 . METHOD_2 ( INT_1 ) )  VAR_1 . METHOD_2 ( INT_1 ) (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_3 , VAR_1 , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_3 , VAR_1 , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME parameters ) NAME parameters ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  super . METHOD_2 ( parameters . METHOD_3 ( ) ) )  super . METHOD_2 ( parameters . METHOD_3 ( ) ) ( IF IF ( COND ( ( METHOD_4 ( ) ) != null ) && ( ( METHOD_4 ( ) . getStoragePoolId ( ) ) != null ) ) COND ( ( METHOD_4 ( ) ) != null ) && ( ( METHOD_4 ( ) . getStoragePoolId ( ) ) != null ) ( THEN THEN (  METHOD_5 ( METHOD_4 ( ) . getStoragePoolId ( ) . getValue ( ) ) )  METHOD_5 ( METHOD_4 ( ) . getStoragePoolId ( ) . getValue ( ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( null ) )  TYPE_1 . METHOD_2 ( null ) ( IF IF ( COND ( getVm ( ) ) != null ) COND ( getVm ( ) ) != null ( THEN THEN (  TYPE_2 . METHOD_3 ( getVm ( ) ) )  TYPE_2 . METHOD_3 ( getVm ( ) ) ) THEN THEN ( ELSE ELSE (  TYPE_1 . METHOD_4 ( false ) )  TYPE_1 . METHOD_4 ( false ) (  VAR_1 . METHOD_5 ( STRING_1 ) )  VAR_1 . METHOD_5 ( STRING_1 ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_2 ( VAR_1 ) ) INIT = TYPE_2 . METHOD_2 ( VAR_1 ) ) VAR VAR ( SWITCH SWITCH ( NAME VAR_1 . METHOD_3 ( ) ) NAME VAR_1 . METHOD_3 ( ) ( CASE NORMAL ( BLOCK BLOCK (  VAR_3 . METHOD_4 ( VAR_2 ) )  VAR_3 . METHOD_4 ( VAR_2 ) (  break ; )  break ; ) BLOCK BLOCK ) CASE NORMAL ( CASE ERROR ( BLOCK BLOCK (  VAR_3 . error ( VAR_2 ) )  VAR_3 . error ( VAR_2 ) (  break ; )  break ; ) BLOCK BLOCK ) CASE ERROR ( CASE VAR_4 ( BLOCK BLOCK (  VAR_3 . METHOD_5 ( VAR_2 ) )  VAR_3 . METHOD_5 ( VAR_2 ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_4 ( CASE VAR_5 ( BLOCK BLOCK (  VAR_3 . METHOD_5 ( VAR_2 ) )  VAR_3 . METHOD_5 ( VAR_2 ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_5 ( DEFAULT DEFAULT ( BLOCK BLOCK (  VAR_3 . METHOD_5 ( VAR_2 ) )  VAR_3 . METHOD_5 ( VAR_2 ) (  break ; )  break ; ) BLOCK BLOCK ) DEFAULT DEFAULT ) SWITCH SWITCH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.Object> ) TYPE java.util.Map<java.lang.String,java.lang.Object> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME host ) NAME host ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ( NAME iface ) NAME iface ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( TYPE_2 . METHOD_2 ( host . METHOD_3 ( ) ) ) ? new TYPE_3 ( VAR_1 , iface , host ) : new TYPE_4 ( VAR_1 , iface , host ) ) INIT = ( TYPE_2 . METHOD_2 ( host . METHOD_3 ( ) ) ) ? new TYPE_3 ( VAR_1 , iface , host ) : new TYPE_4 ( VAR_1 , iface , host ) ) VAR VAR (  VAR_2 . METHOD_4 ( ) )  VAR_2 . METHOD_4 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ) TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( VAR_2 , STRING_1 , VAR_3 ) ) INIT = METHOD_2 ( VAR_2 , STRING_1 , VAR_3 ) ) VAR VAR (  VAR_1 . METHOD_3 ( VAR_4 ) )  VAR_1 . METHOD_3 ( VAR_4 ) ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ) TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME VAR_5 ) NAME VAR_5 ( INIT = METHOD_2 ( VAR_2 , STRING_2 , VAR_6 ) ) INIT = METHOD_2 ( VAR_2 , STRING_2 , VAR_6 ) ) VAR VAR (  org.mockito.Mockito.when ( VAR_7 . METHOD_4 ( TYPE_1 . any ( VAR_8 . Guid class ) ) ) . thenReturn ( TYPE_2 . METHOD_5 ( VAR_1 , VAR_5 ) ) )  org.mockito.Mockito.when ( VAR_7 . METHOD_4 ( TYPE_1 . any ( VAR_8 . Guid class ) ) ) . thenReturn ( TYPE_2 . METHOD_5 ( VAR_1 , VAR_5 ) ) (  cmd . METHOD_6 ( new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ) )  cmd . METHOD_6 ( new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ) (  TYPE_3 . assertEquals ( VAR_5 , cmd . METHOD_7 ( ) ) )  TYPE_3 . assertEquals ( VAR_5 , cmd . METHOD_7 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.Network ) TYPE org.ovirt.engine.core.common.businessentities.Network ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( STRING_1 ) ) INIT = METHOD_2 ( STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME nic ) NAME nic ( INIT = METHOD_3 ( STRING_2 , VAR_1 ) ) INIT = METHOD_3 ( STRING_2 , VAR_1 ) ) VAR VAR (  nic . METHOD_4 ( TYPE_1 . instance ( ) . METHOD_5 ( ) ) )  nic . METHOD_4 ( TYPE_1 . instance ( ) . METHOD_5 ( ) ) (  METHOD_6 ( VAR_1 ) )  METHOD_6 ( VAR_1 ) (  METHOD_7 ( nic ) )  METHOD_7 ( nic ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_8 ( METHOD_9 ( nic ) ) ) INIT = METHOD_8 ( METHOD_9 ( nic ) ) ) VAR VAR (  METHOD_10 ( VAR_2 , VAR_1 ) )  METHOD_10 ( VAR_2 , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ) TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( VAR_2 ) ) INIT = METHOD_2 ( VAR_2 ) ) VAR VAR (  VAR_1 . METHOD_3 ( VAR_3 ) )  VAR_1 . METHOD_3 ( VAR_3 ) ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ) TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_2 ( VAR_5 ) ) INIT = METHOD_2 ( VAR_5 ) ) VAR VAR (  VAR_4 . METHOD_4 ( VAR_6 ) )  VAR_4 . METHOD_4 ( VAR_6 ) (  METHOD_5 ( VAR_7 , VAR_8 ) )  METHOD_5 ( VAR_7 , VAR_8 ) (  METHOD_6 ( VAR_9 , org.ovirt.engine.core.compat.Guid . METHOD_7 ( ) , VAR_7 ) )  METHOD_6 ( VAR_9 , org.ovirt.engine.core.compat.Guid . METHOD_7 ( ) , VAR_7 ) (  TYPE_1 . METHOD_8 ( command , VAR_10 ) )  TYPE_1 . METHOD_8 ( command , VAR_10 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_1 ) ( target ) ) ) INIT = ( ( TYPE_1 ) ( target ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( java.util.ArrayList < TYPE_2 > ) ( returnValue ) ) ) INIT = ( ( java.util.ArrayList < TYPE_2 > ) ( returnValue ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_3 ) NAME VAR_3 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK (  VAR_3 . add ( VAR_4 . getName ( ) ) )  VAR_3 . add ( VAR_4 . getName ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  VAR_3 . add ( VAR_5 . METHOD_1 ( ) ) )  VAR_3 . add ( VAR_5 . METHOD_1 ( ) ) (  VAR_1 . METHOD_2 ( ) . setItems ( VAR_3 ) )  VAR_1 . METHOD_2 ( ) . setItems ( VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME setItems ) NAME setItems ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME value ) NAME value ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<TYPE_2.Disk> ) TYPE java.util.ArrayList<TYPE_2.Disk> ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( value != null ) ? VAR_2 . Linq < TYPE_2 . Disk > METHOD_1 ( value ) : new java.util.ArrayList < TYPE_2 . Disk > ( ) ) INIT = ( value != null ) ? VAR_2 . Linq < TYPE_2 . Disk > METHOD_1 ( value ) : new java.util.ArrayList < TYPE_2 . Disk > ( ) ) VAR VAR (  TYPE_3 . METHOD_2 ( VAR_1 , new TYPE_4 ( ) ) )  TYPE_3 . METHOD_2 ( VAR_1 , new TYPE_4 ( ) ) (  super . setItems ( VAR_1 ) )  super . setItems ( VAR_1 ) (  METHOD_3 ( ) )  METHOD_3 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return TYPE_3 . METHOD_2 ( id , VAR_3 , ( VAR_2 ? VAR_4 : VAR_5 ) , VAR_6 . Collections < java.lang.String , java.lang.Object > METHOD_3 ( ) , VAR_1 , false , null ) ; )  return TYPE_3 . METHOD_2 ( id , VAR_3 , ( VAR_2 ? VAR_4 : VAR_5 ) , VAR_6 . Collections < java.lang.String , java.lang.Object > METHOD_3 ( ) , VAR_1 , false , null ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME sender ) NAME sender ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME args ) NAME args ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( METHOD_2 ( ) . getEntity ( ) ) == null ) COND ( METHOD_2 ( ) . getEntity ( ) ) == null ( THEN THEN (  METHOD_3 ( ) . setIsChangable ( false ) )  METHOD_3 ( ) . setIsChangable ( false ) (  METHOD_4 ( ) . setIsChangable ( false ) )  METHOD_4 ( ) . setIsChangable ( false ) ) THEN THEN ( ELSE ELSE (  METHOD_3 ( ) . setIsChangable ( ( ( java.lang.Boolean ) ( METHOD_2 ( ) . getEntity ( ) ) ) ) )  METHOD_3 ( ) . setIsChangable ( ( ( java.lang.Boolean ) ( METHOD_2 ( ) . getEntity ( ) ) ) ) (  METHOD_4 ( ) . setIsChangable ( ( ( java.lang.Boolean ) ( METHOD_2 ( ) . getEntity ( ) ) ) ) )  METHOD_4 ( ) . setIsChangable ( ( ( java.lang.Boolean ) ( METHOD_2 ( ) . getEntity ( ) ) ) ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_6 ) NAME VAR_6 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND TYPE_4 . METHOD_2 ( VAR_2 , VAR_5 ) ) COND TYPE_4 . METHOD_2 ( VAR_2 , VAR_5 ) ( THEN THEN ( VAR VAR ( TYPE TYPE_5.DiskImage ) TYPE TYPE_5.DiskImage ( NAME VAR_7 ) NAME VAR_7 ( INIT = TYPE_4 . METHOD_3 ( VAR_3 , VAR_4 , VAR_6 , VAR_1 . getId ( ) ) ) INIT = TYPE_4 . METHOD_3 ( VAR_3 , VAR_4 , VAR_6 , VAR_1 . getId ( ) ) ) VAR VAR (  return TYPE_4 . METHOD_4 ( VAR_1 . METHOD_5 ( ) , VAR_7 . METHOD_6 ( ) ) ; )  return TYPE_4 . METHOD_4 ( VAR_1 . METHOD_5 ( ) , VAR_7 . METHOD_6 ( ) ) ; ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME iface ) NAME iface ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  METHOD_3 ( iface , false , iface . METHOD_4 ( ) , ( ! ( iface . METHOD_5 ( ) ) ) , iface . METHOD_6 ( ) , iface . METHOD_7 ( ) ) )  METHOD_3 ( iface , false , iface . METHOD_4 ( ) , ( ! ( iface . METHOD_5 ( ) ) ) , iface . METHOD_6 ( ) , iface . METHOD_7 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) INIT = VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) VAR VAR ( IF IF ( COND VAR_2 == null ) COND VAR_2 == null ( THEN THEN (  VAR_2 = new TYPE_2 ( ) )  VAR_2 = new TYPE_2 ( ) (  VAR_1 . METHOD_2 ( ) . METHOD_4 ( VAR_2 ) )  VAR_1 . METHOD_2 ( ) . METHOD_4 ( VAR_2 ) ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_3 ( ) ) INIT = new TYPE_3 ( ) ) VAR VAR (  VAR_3 . METHOD_5 ( STRING_1 ) )  VAR_3 . METHOD_5 ( STRING_1 ) (  VAR_3 . METHOD_6 ( STRING_2 ) )  VAR_3 . METHOD_6 ( STRING_2 ) (  VAR_3 . METHOD_7 ( false ) )  VAR_3 . METHOD_7 ( false ) (  VAR_2 . METHOD_3 ( ) . add ( VAR_3 ) )  VAR_2 . METHOD_3 ( ) . add ( VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.Integer ) TYPE java.lang.Integer ( NAME VAR_1 ) NAME VAR_1 ( INIT = INT_1 ) INIT = INT_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = dao . get ( VAR_3 ) ) INIT = dao . get ( VAR_3 ) ) VAR VAR (  TYPE_2 . METHOD_2 ( STRING_1 , VAR_2 . METHOD_3 ( ) , VAR_1 ) )  TYPE_2 . METHOD_2 ( STRING_1 , VAR_2 . METHOD_3 ( ) , VAR_1 ) (  METHOD_1 ( VAR_3 , VAR_1 ) )  METHOD_1 ( VAR_3 , VAR_1 ) (  VAR_2 = dao . get ( VAR_3 ) )  VAR_2 = dao . get ( VAR_3 ) (  TYPE_2 . assertEquals ( STRING_2 , VAR_2 . METHOD_3 ( ) , VAR_1 ) )  TYPE_2 . assertEquals ( STRING_2 , VAR_2 . METHOD_3 ( ) , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.ArrayList<TYPE_1.Disk> ) TYPE java.util.ArrayList<TYPE_1.Disk> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 . isEmpty ( ) ) COND VAR_1 . isEmpty ( ) ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1.Disk ) TYPE TYPE_1.Disk ( NAME disk ) NAME disk ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  VAR_2 . add ( disk . METHOD_2 ( ) ) )  VAR_2 . add ( disk . METHOD_2 ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return TYPE_2 . METHOD_3 ( VAR_2 , STRING_1 ) ; )  return TYPE_2 . METHOD_3 ( VAR_2 , STRING_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( STRING_1 , VAR_2 , VAR_3 , INT_1 , 0 ) ) INIT = METHOD_2 ( STRING_1 , VAR_2 , VAR_3 , INT_1 , 0 ) ) VAR VAR (  org.mockito.Mockito.when ( VAR_4 . get ( VAR_1 . METHOD_3 ( ) ) ) . thenReturn ( null ) )  org.mockito.Mockito.when ( VAR_4 . get ( VAR_1 . METHOD_3 ( ) ) ) . thenReturn ( null ) (  parameters . METHOD_4 ( VAR_1 ) )  parameters . METHOD_4 ( VAR_1 ) (  TYPE_2 . METHOD_5 ( command , VAR_5 ) )  TYPE_2 . METHOD_5 ( command , VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME vds ) NAME vds ( INIT = new org.ovirt.engine.core.common.businessentities.VDS ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.VDS ( ) ) VAR VAR (  vds . METHOD_2 ( VAR_2 ) )  vds . METHOD_2 ( VAR_2 ) (  vds . METHOD_3 ( VAR_1 ) )  vds . METHOD_3 ( VAR_1 ) (  org.mockito.Mockito.when ( VAR_3 . get ( TYPE_1 . any ( VAR_4 . Guid class ) ) ) . thenReturn ( vds ) )  org.mockito.Mockito.when ( VAR_3 . get ( TYPE_1 . any ( VAR_4 . Guid class ) ) ) . thenReturn ( vds ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.compat.Guid> ) TYPE java.util.List<org.ovirt.engine.core.compat.Guid> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR ( IF IF ( COND ( TYPE_1 . METHOD_2 ( ) ) != null ) COND ( TYPE_1 . METHOD_2 ( ) ) != null ( THEN THEN (  VAR_1 . add ( TYPE_1 . METHOD_2 ( ) ) )  VAR_1 . add ( TYPE_1 . METHOD_2 ( ) ) ) THEN THEN ) IF IF (  return VAR_2 . METHOD_3 ( TYPE_1 . METHOD_4 ( ) , vm , VAR_1 , TYPE_2 . METHOD_5 ( ) , new java.util.ArrayList < > ( ) ) ; )  return VAR_2 . METHOD_3 ( TYPE_1 . METHOD_4 ( ) , vm , VAR_1 , TYPE_2 . METHOD_5 ( ) , new java.util.ArrayList < > ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( TYPE_2 . getVm ( ) ) )  TYPE_1 . METHOD_2 ( TYPE_2 . getVm ( ) ) ( VAR VAR ( TYPE java.util.List<TYPE_3.DiskImage> ) TYPE java.util.List<TYPE_3.DiskImage> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_4 . METHOD_3 ( TYPE_2 . getVm ( ) . METHOD_4 ( ) . METHOD_5 ( ) , true , false ) ) INIT = TYPE_4 . METHOD_3 ( TYPE_2 . getVm ( ) . METHOD_4 ( ) . METHOD_5 ( ) , true , false ) ) VAR VAR ( IF IF ( COND ! ( VAR_1 . isEmpty ( ) ) ) COND ! ( VAR_1 . isEmpty ( ) ) ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE TYPE_3.DiskImage ) TYPE TYPE_3.DiskImage ( NAME diskImage ) NAME diskImage ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  VAR_2 . add ( diskImage . METHOD_6 ( ) ) )  VAR_2 . add ( diskImage . METHOD_6 ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  METHOD_7 ( STRING_1 , TYPE_5 . METHOD_8 ( VAR_2 , STRING_2 ) ) )  METHOD_7 ( STRING_1 , TYPE_5 . METHOD_8 ( VAR_2 , STRING_2 ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<TYPE_2>.TYPE_3 ) TYPE TYPE_1<TYPE_2>.TYPE_3 ( NAME validator ) NAME validator ( INIT = new TYPE_3 ( VAR_1 , METHOD_2 ( ) , TYPE_1 . getParameters ( ) . METHOD_3 ( ) ) ) INIT = new TYPE_3 ( VAR_1 , METHOD_2 ( ) , TYPE_1 . getParameters ( ) . METHOD_3 ( ) ) ) VAR VAR (  return ( ( ( validate ( validator . METHOD_4 ( ) ) ) && ( validate ( validator . METHOD_5 ( ) ) ) ) && ( validate ( validator . METHOD_6 ( ) ) ) ) && ( validate ( validator . METHOD_7 ( ) ) ) ; )  return ( ( ( validate ( validator . METHOD_4 ( ) ) ) && ( validate ( validator . METHOD_5 ( ) ) ) ) && ( validate ( validator . METHOD_6 ( ) ) ) ) && ( validate ( validator . METHOD_7 ( ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN double ) RETURN double ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME vds ) NAME vds ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 < java.lang.Integer > METHOD_2 ( VAR_4 ) ) INIT = VAR_3 < java.lang.Integer > METHOD_2 ( VAR_4 ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_5 ) NAME VAR_5 ( INIT = ( ( vds . METHOD_3 ( ) ) == ( VAR_6 ) ) ? 0 : VAR_3 < java.lang.Integer > METHOD_2 ( VAR_7 ) ) INIT = ( ( vds . METHOD_3 ( ) ) == ( VAR_6 ) ) ? 0 : VAR_3 < java.lang.Integer > METHOD_2 ( VAR_7 ) ) VAR VAR ( VAR VAR ( TYPE double ) TYPE double ( NAME VAR_8 ) NAME VAR_8 ( INIT = vds . METHOD_4 ( ) ) INIT = vds . METHOD_4 ( ) ) VAR VAR ( VAR VAR ( TYPE double ) TYPE double ( NAME VAR_9 ) NAME VAR_9 ( INIT = vds . METHOD_5 ( ) ) INIT = vds . METHOD_5 ( ) ) VAR VAR (  return ( VAR_8 / VAR_2 ) + ( ( ( VAR_9 + ( vm . METHOD_6 ( ) ) ) + VAR_5 ) / VAR_1 ) ; )  return ( VAR_8 / VAR_2 ) + ( ( ( VAR_9 + ( vm . METHOD_6 ( ) ) ) + VAR_5 ) / VAR_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) . METHOD_3 ( TYPE_2 . getParameters ( ) . getId ( ) , VAR_2 ) ) INIT = METHOD_2 ( ) . METHOD_3 ( TYPE_2 . getParameters ( ) . getId ( ) , VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME result ) NAME result ( INIT = new java.util.ArrayList < java.lang.String > ( VAR_1 . size ( ) ) ) INIT = new java.util.ArrayList < java.lang.String > ( VAR_1 . size ( ) ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  result . add ( VAR_3 . METHOD_4 ( ) ) )  result . add ( VAR_3 . METHOD_4 ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  TYPE_2 . METHOD_5 ( ) . METHOD_6 ( result ) )  TYPE_2 . METHOD_5 ( ) . METHOD_6 ( result ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) ) )  TYPE_1 . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) ) ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( IN METHOD_5 ( ) ) IN METHOD_5 ( ) ( BLOCK BLOCK (  TYPE_3 . METHOD_6 ( VAR_1 . METHOD_7 ( ) , TYPE_1 . METHOD_4 ( ) ) )  TYPE_3 . METHOD_6 ( VAR_1 . METHOD_7 ( ) , TYPE_1 . METHOD_4 ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  TYPE_1 . METHOD_8 ( true ) )  TYPE_1 . METHOD_8 ( true ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 . METHOD_2 ( VAR_2 ) ) INIT = VAR_4 . METHOD_2 ( VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE java.util.Map<java.lang.String,org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> ) TYPE java.util.Map<java.lang.String,org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> ( NAME VAR_5 ) NAME VAR_5 ( INIT = METHOD_3 ( VAR_3 ) ) INIT = METHOD_3 ( VAR_3 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2<org.ovirt.engine.core.common.businessentities.network.Network> ) TYPE TYPE_2<org.ovirt.engine.core.common.businessentities.network.Network> ( NAME VAR_6 ) NAME VAR_6 ( INIT = new TYPE_2 ( VAR_7 . METHOD_4 ( VAR_8 . get ( VAR_2 ) . METHOD_5 ( ) ) ) ) INIT = new TYPE_2 ( VAR_7 . METHOD_4 ( VAR_8 . get ( VAR_2 ) . METHOD_5 ( ) ) ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_9 ) NAME VAR_9 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  METHOD_1 ( VAR_5 , VAR_6 , VAR_9 ) )  METHOD_1 ( VAR_5 , VAR_6 , VAR_9 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE java.lang.Integer ) TYPE java.lang.Integer ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<org.ovirt.engine.core.compat.Guid,TYPE_2> ) TYPE java.util.Map<org.ovirt.engine.core.compat.Guid,TYPE_2> ( NAME VAR_6 ) NAME VAR_6 ( INIT = new java.util.HashMap < org.ovirt.engine.core.compat.Guid , TYPE_2 > ( ) ) INIT = new java.util.HashMap < org.ovirt.engine.core.compat.Guid , TYPE_2 > ( ) ) VAR VAR (  TYPE_3 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) )  TYPE_3 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME network ) NAME network ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME result ) NAME result ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) . METHOD_3 ( ) . list ( ) . METHOD_4 ( ) ) INIT = METHOD_2 ( ) . METHOD_3 ( ) . list ( ) . METHOD_4 ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_2 ) NAME VAR_2 ( IN VAR_1 . METHOD_5 ( ) ) IN VAR_1 . METHOD_5 ( ) ( BLOCK BLOCK ( IF IF ( COND network . METHOD_6 ( ) . equals ( VAR_2 . METHOD_7 ( ) ) ) COND network . METHOD_6 ( ) . equals ( VAR_2 . METHOD_7 ( ) ) ( THEN THEN (  result . add ( map ( VAR_2 , network ) ) )  result . add ( map ( VAR_2 , network ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  return ( ( ( ( ( ( ( ( ( ( ( METHOD_2 ( ) ) && ( METHOD_3 ( ) ) ) && ( METHOD_4 ( ) ) ) && ( METHOD_5 ( ) ) ) && ( METHOD_6 ( ) ) ) && ( METHOD_7 ( ) ) ) && ( METHOD_8 ( ) ) ) && ( METHOD_9 ( ) ) ) && ( METHOD_10 ( ) ) ) && ( METHOD_11 ( ) ) ) && ( METHOD_12 ( ) ) ) && ( METHOD_13 ( ) ) ; )  return ( ( ( ( ( ( ( ( ( ( ( METHOD_2 ( ) ) && ( METHOD_3 ( ) ) ) && ( METHOD_4 ( ) ) ) && ( METHOD_5 ( ) ) ) && ( METHOD_6 ( ) ) ) && ( METHOD_7 ( ) ) ) && ( METHOD_8 ( ) ) ) && ( METHOD_9 ( ) ) ) && ( METHOD_10 ( ) ) ) && ( METHOD_11 ( ) ) ) && ( METHOD_12 ( ) ) ) && ( METHOD_13 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.DiskImage ) TYPE org.ovirt.engine.core.common.businessentities.DiskImage ( NAME disk ) NAME disk ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ( INIT = org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) INIT = org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) VAR VAR (  VAR_3 . put ( VAR_2 , org.ovirt.engine.core.common.businessentities.DiskImage . METHOD_3 ( disk ) ) )  VAR_3 . put ( VAR_2 , org.ovirt.engine.core.common.businessentities.DiskImage . METHOD_3 ( disk ) ) (  disk . setId ( VAR_2 ) )  disk . setId ( VAR_2 ) (  disk . METHOD_4 ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) )  disk . METHOD_4 ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < ( ( VAR_1 . size ( ) ) - 1 ) ) COND i < ( ( VAR_1 . size ( ) ) - 1 ) ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK (  VAR_1 . get ( i ) . setId ( disk . getId ( ) ) )  VAR_1 . get ( i ) . setId ( disk . getId ( ) ) ) BLOCK BLOCK ) FOR FOR ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( model ) )  METHOD_2 ( model ) (  assertEquals ( model . getId ( ) , java.lang.String.valueOf ( VAR_2 [ VAR_1 ] ) ) )  assertEquals ( model . getId ( ) , java.lang.String.valueOf ( VAR_2 [ VAR_1 ] ) ) (  assertEquals ( model . METHOD_3 ( ) , VAR_3 ) )  assertEquals ( model . METHOD_3 ( ) , VAR_3 ) (  assertEquals ( model . METHOD_4 ( ) , VAR_4 [ VAR_1 ] ) )  assertEquals ( model . METHOD_4 ( ) , VAR_4 [ VAR_1 ] ) (  assertEquals ( model . METHOD_5 ( ) , VAR_5 [ VAR_1 ] ) )  assertEquals ( model . METHOD_5 ( ) , VAR_5 [ VAR_1 ] ) (  assertEquals ( model . METHOD_6 ( ) , VAR_6 [ VAR_1 ] ) )  assertEquals ( model . METHOD_6 ( ) , VAR_6 [ VAR_1 ] ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) . METHOD_3 ( VAR_1 class ) . to ( VAR_2 ) )  METHOD_2 ( ) . METHOD_3 ( VAR_1 class ) . to ( VAR_2 ) (  METHOD_2 ( ) . METHOD_3 ( VAR_3 class ) . to ( VAR_4 ) )  METHOD_2 ( ) . METHOD_3 ( VAR_3 class ) . to ( VAR_4 ) (  METHOD_2 ( ) . METHOD_3 ( VAR_5 class ) . to ( VAR_6 ) )  METHOD_2 ( ) . METHOD_3 ( VAR_5 class ) . to ( VAR_6 ) (  METHOD_2 ( ) . METHOD_3 ( VAR_7 class ) . to ( VAR_8 ) )  METHOD_2 ( ) . METHOD_3 ( VAR_7 class ) . to ( VAR_8 ) (  METHOD_4 ( VAR_9 class , VAR_10 class , VAR_11 class , VAR_12 class , VAR_13 class ) )  METHOD_4 ( VAR_9 class , VAR_10 class , VAR_11 class , VAR_12 class , VAR_13 class ) (  METHOD_5 ( VAR_14 class ) . METHOD_6 ( VAR_15 class ) )  METHOD_5 ( VAR_14 class ) . METHOD_6 ( VAR_15 class ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_2 ( ) . get ( VAR_3 ) ) INIT = VAR_2 . METHOD_2 ( ) . get ( VAR_3 ) ) VAR VAR (  TYPE_2 . METHOD_3 ( VAR_1 ) )  TYPE_2 . METHOD_3 ( VAR_1 ) ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ( INIT = VAR_1 . METHOD_4 ( ) ) INIT = VAR_1 . METHOD_4 ( ) ) VAR VAR (  TYPE_2 . METHOD_5 ( name . equals ( VAR_2 . METHOD_6 ( VAR_3 , VAR_4 . StoragePool ) ) ) )  TYPE_2 . METHOD_5 ( name . equals ( VAR_2 . METHOD_6 ( VAR_3 , VAR_4 . StoragePool ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( TYPE_1 . getVdsGroup ( ) ) != null ) COND ( TYPE_1 . getVdsGroup ( ) ) != null ( THEN THEN (  METHOD_2 ( ( ( TYPE_1 . getVdsGroup ( ) . getStoragePoolId ( ) ) != null ? TYPE_1 . getVdsGroup ( ) . getStoragePoolId ( ) . getValue ( ) : VAR_1 ) ) )  METHOD_2 ( ( ( TYPE_1 . getVdsGroup ( ) . getStoragePoolId ( ) ) != null ? TYPE_1 . getVdsGroup ( ) . getStoragePoolId ( ) . getValue ( ) : VAR_1 ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<TYPE_2.Disk> ) TYPE java.util.ArrayList<TYPE_2.Disk> ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( java.util.ArrayList < TYPE_2 . Disk > ) ( returnValue ) ) ) INIT = ( ( java.util.ArrayList < TYPE_2 . Disk > ) ( returnValue ) ) ) VAR VAR (  METHOD_3 ( VAR_1 ) )  METHOD_3 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD (  TYPE_1 . getInstance ( ) . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { java.util.ArrayList < TYPE_2 . Disk > VAR_1 = ( ( java.util.ArrayList < TYPE_2 . Disk > ) ( returnValue ) ) ; METHOD_3 ( VAR_1 ) ; } } ) , getVm ( ) . getId ( ) ) )  TYPE_1 . getInstance ( ) . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { java.util.ArrayList < TYPE_2 . Disk > VAR_1 = ( ( java.util.ArrayList < TYPE_2 . Disk > ) ( returnValue ) ) ; METHOD_3 ( VAR_1 ) ; } } ) , getVm ( ) . getId ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_2 . METHOD_2 ( STRING_1 ) )  VAR_2 . METHOD_2 ( STRING_1 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_3 . METHOD_2 ( STRING_2 ) )  VAR_3 . METHOD_2 ( STRING_2 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_4 . METHOD_2 ( STRING_3 ) )  VAR_4 . METHOD_2 ( STRING_3 ) (  VAR_1 . add ( VAR_2 ) )  VAR_1 . add ( VAR_2 ) (  VAR_1 . add ( VAR_3 ) )  VAR_1 . add ( VAR_3 ) (  VAR_1 . add ( VAR_4 ) )  VAR_1 . add ( VAR_4 ) (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_1 . assertEquals ( java.lang.String . METHOD_2 ( STRING_1 , VAR_1 , VAR_2 , ( VAR_3 == ( - 1 ) ? STRING_2 : VAR_3 == 1 ? STRING_3 : STRING_4 ) ) , java.lang.Integer . METHOD_3 ( VAR_3 ) , java.lang.Integer . METHOD_3 ( VAR_4 . METHOD_4 ( VAR_1 , VAR_2 ) ) ) )  TYPE_1 . assertEquals ( java.lang.String . METHOD_2 ( STRING_1 , VAR_1 , VAR_2 , ( VAR_3 == ( - 1 ) ? STRING_2 : VAR_3 == 1 ? STRING_3 : STRING_4 ) ) , java.lang.Integer . METHOD_3 ( VAR_3 ) , java.lang.Integer . METHOD_3 ( VAR_4 . METHOD_4 ( VAR_1 , VAR_2 ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  assertEquals ( VAR_2 [ VAR_1 ] . toString ( ) , model . getId ( ) ) )  assertEquals ( VAR_2 [ VAR_1 ] . toString ( ) , model . getId ( ) ) (  assertEquals ( VAR_3 [ VAR_1 ] , model . getName ( ) ) )  assertEquals ( VAR_3 [ VAR_1 ] , model . getName ( ) ) (  assertEquals ( VAR_4 [ VAR_1 ] , model . METHOD_2 ( ) ) )  assertEquals ( VAR_4 [ VAR_1 ] , model . METHOD_2 ( ) ) (  assertEquals ( VAR_5 [ VAR_1 ] . value ( ) , model . getStatus ( ) . METHOD_3 ( ) ) )  assertEquals ( VAR_5 [ VAR_1 ] . value ( ) , model . getStatus ( ) . METHOD_3 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME result ) NAME result ( INIT = false ) INIT = false ) VAR VAR ( IF IF ( COND ( VAR_1 != null ) && ( VAR_2 != null ) ) COND ( VAR_1 != null ) && ( VAR_2 != null ) ( THEN THEN (  result = ( VAR_3 . METHOD_2 ( VAR_1 ) ) ? VAR_3 . METHOD_2 ( VAR_2 ) : VAR_4 . METHOD_2 ( VAR_2 ) )  result = ( VAR_3 . METHOD_2 ( VAR_1 ) ) ? VAR_3 . METHOD_2 ( VAR_2 ) : VAR_4 . METHOD_2 ( VAR_2 ) ) THEN THEN ) IF IF (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.Object[] ) TYPE java.lang.Object[] ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( ) ) INIT = TYPE_1 . METHOD_2 ( ) ) VAR VAR (  VAR_1 [ 1 ] = new java.util.HashMap < > ( ) )  VAR_1 [ 1 ] = new java.util.HashMap < > ( ) ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.Object> ) TYPE java.util.Map<java.lang.String,java.lang.Object> ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_1 . METHOD_3 ( VAR_1 ) ) INIT = TYPE_1 . METHOD_3 ( VAR_1 ) ) VAR VAR (  TYPE_1 . METHOD_4 ( TYPE_1 . METHOD_5 ( ) , VAR_1 , VAR_2 ) )  TYPE_1 . METHOD_4 ( TYPE_1 . METHOD_5 ( ) , VAR_1 , VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME value ) NAME value ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_4 . get ( ) . METHOD_2 ( STRING_1 ) ) INIT = TYPE_4 . get ( ) . METHOD_2 ( STRING_1 ) ) VAR VAR (  VAR_3 . METHOD_3 ( VAR_1 ) )  VAR_3 . METHOD_3 ( VAR_1 ) (  VAR_2 . METHOD_4 ( VAR_3 ) )  VAR_2 . METHOD_4 ( VAR_3 ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_4 . get ( ) . METHOD_2 ( STRING_2 ) ) INIT = TYPE_4 . get ( ) . METHOD_2 ( STRING_2 ) ) VAR VAR (  VAR_4 . METHOD_5 ( value ) )  VAR_4 . METHOD_5 ( value ) (  VAR_2 . METHOD_4 ( VAR_4 ) )  VAR_2 . METHOD_4 ( VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1.Disk ) RETURN TYPE_1.Disk ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.Disk ) TYPE TYPE_1.Disk ( NAME model ) NAME model ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  model . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_1 class ) ) )  model . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_1 class ) ) (  model . METHOD_4 ( TYPE_2 . METHOD_3 ( VAR_2 class ) ) )  model . METHOD_4 ( TYPE_2 . METHOD_3 ( VAR_2 class ) ) (  model . METHOD_5 ( TYPE_2 . METHOD_3 ( VAR_3 class ) ) )  model . METHOD_5 ( TYPE_2 . METHOD_3 ( VAR_3 class ) ) (  model . METHOD_6 ( TYPE_3 . METHOD_7 ( TYPE_2 . METHOD_3 ( VAR_4 class ) ) ) )  model . METHOD_6 ( TYPE_3 . METHOD_7 ( TYPE_2 . METHOD_3 ( VAR_4 class ) ) ) (  model . METHOD_8 ( null ) )  model . METHOD_8 ( null ) (  return model ; )  return model ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( ) , null ) ) )  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( ) , null ) ) (  METHOD_3 ( cmd , VAR_1 ) )  METHOD_3 ( cmd , VAR_1 ) (  TYPE_3 . METHOD_4 ( cmd . validate ( ) ) )  TYPE_3 . METHOD_4 ( cmd . validate ( ) ) (  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( vds ) . getStatus ( ) )  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( vds ) . getStatus ( ) (  TYPE_3 . METHOD_4 ( cmd . validate ( ) ) )  TYPE_3 . METHOD_4 ( cmd . validate ( ) ) (  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( vds ) . getStatus ( ) )  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( vds ) . getStatus ( ) (  TYPE_3 . METHOD_4 ( cmd . validate ( ) ) )  TYPE_3 . METHOD_4 ( cmd . validate ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( null ) )  METHOD_2 ( null ) (  METHOD_3 ( STRING_1 ) )  METHOD_3 ( STRING_1 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME parameters ) NAME parameters ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  parameters . METHOD_4 ( METHOD_5 ( ) . METHOD_6 ( ) . getId ( ) ) )  parameters . METHOD_4 ( METHOD_5 ( ) . METHOD_6 ( ) . getId ( ) ) ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_8 ) NAME METHOD_8 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_9 ( result ) )  METHOD_9 ( result ) ) BLOCK BLOCK ) METHOD METHOD (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_7 ( VAR_1 , parameters , new TYPE_2 ( ) { public void METHOD_8 ( TYPE_3 result ) { METHOD_9 ( result ) ; } } , this ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_7 ( VAR_1 , parameters , new TYPE_2 ( ) { public void METHOD_8 ( TYPE_3 result ) { METHOD_9 ( result ) ; } } , this ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME params ) NAME params ( INIT = new TYPE_2 ( VAR_1 , VAR_2 , TYPE_3 . METHOD_2 ( ) , TYPE_3 . METHOD_3 ( ) . getId ( ) , TYPE_3 . METHOD_3 ( ) . METHOD_4 ( ) , TYPE_3 . METHOD_5 ( ) . METHOD_4 ( ) , TYPE_3 . METHOD_3 ( ) . METHOD_6 ( ) ) ) INIT = new TYPE_2 ( VAR_1 , VAR_2 , TYPE_3 . METHOD_2 ( ) , TYPE_3 . METHOD_3 ( ) . getId ( ) , TYPE_3 . METHOD_3 ( ) . METHOD_4 ( ) , TYPE_3 . METHOD_5 ( ) . METHOD_4 ( ) , TYPE_3 . METHOD_3 ( ) . METHOD_6 ( ) ) ) VAR VAR (  return METHOD_7 ( VAR_3 , params ) ; )  return METHOD_7 ( VAR_3 , params ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_3 . METHOD_2 ( VAR_1 . METHOD_3 ( STRING_1 ) ) ) INIT = TYPE_3 . METHOD_2 ( VAR_1 . METHOD_3 ( STRING_1 ) ) ) VAR VAR (  VAR_3 . METHOD_4 ( VAR_2 ) )  VAR_3 . METHOD_4 ( VAR_2 ) (  TYPE_4 . METHOD_5 ( STRING_2 , VAR_2 . METHOD_6 ( STRING_2 ) ) )  TYPE_4 . METHOD_5 ( STRING_2 , VAR_2 . METHOD_6 ( STRING_2 ) ) (  TYPE_4 . METHOD_7 ( STRING_3 , VAR_2 . METHOD_6 ( STRING_3 ) ) )  TYPE_4 . METHOD_7 ( STRING_3 , VAR_2 . METHOD_6 ( STRING_3 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) RETURN org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME iface ) NAME iface ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.Network ) TYPE org.ovirt.engine.core.common.businessentities.Network ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return METHOD_2 ( ( ( ( iface . getName ( ) ) + STRING_1 ) + ( VAR_1 . METHOD_3 ( ) ) ) , false , null , null , VAR_2 , VAR_1 . getName ( ) , VAR_1 . METHOD_3 ( ) ) ; )  return METHOD_2 ( ( ( ( iface . getName ( ) ) + STRING_1 ) + ( VAR_1 . METHOD_3 ( ) ) ) , false , null , null , VAR_2 , VAR_1 . getName ( ) , VAR_1 . METHOD_3 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<java.lang.String,TYPE_1> ) TYPE java.util.Map<java.lang.String,TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.HashMap < java.lang.String , TYPE_1 > ( ) ) INIT = new java.util.HashMap < java.lang.String , TYPE_1 > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.network ) TYPE org.ovirt.engine.core.common.businessentities.network ( NAME network ) NAME network ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK (  VAR_1 . put ( network . METHOD_2 ( ) , new TYPE_1 ( network , this ) ) )  VAR_1 . put ( network . METHOD_2 ( ) , new TYPE_1 ( network , this ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  METHOD_3 ( VAR_1 ) )  METHOD_3 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( METHOD_3 ( ) ) )  METHOD_2 ( METHOD_3 ( ) ) (  METHOD_4 ( 0 , null ) )  METHOD_4 ( 0 , null ) (  VAR_1 . METHOD_5 ( ) )  VAR_1 . METHOD_5 ( ) ( TRY TRY ( BLOCK BLOCK (  resource . METHOD_6 ( ) )  resource . METHOD_6 ( ) (  METHOD_7 ( STRING_1 ) )  METHOD_7 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( BLOCK BLOCK (  METHOD_8 ( VAR_2 . METHOD_9 ( ) ) )  METHOD_8 ( VAR_2 . METHOD_9 ( ) ) (  assertEquals ( INT_1 , VAR_2 . METHOD_9 ( ) . getStatus ( ) ) )  assertEquals ( INT_1 , VAR_2 . METHOD_9 ( ) . getStatus ( ) ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( IF IF ( COND ( vm . METHOD_2 ( ) ) == null ) COND ( vm . METHOD_2 ( ) ) == null ( THEN THEN ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . from ( vm . METHOD_3 ( ) , vm . METHOD_4 ( ) , vm . METHOD_5 ( ) ) ) INIT = TYPE_2 . from ( vm . METHOD_3 ( ) , vm . METHOD_4 ( ) , vm . METHOD_5 ( ) ) ) VAR VAR (  VAR_1 = VAR_2 . METHOD_1 ( ) )  VAR_1 = VAR_2 . METHOD_1 ( ) ) THEN THEN ( ELSE ELSE (  VAR_1 = METHOD_6 ( vm . METHOD_3 ( ) ) )  VAR_1 = METHOD_6 ( vm . METHOD_3 ( ) ) ) ELSE ELSE ) IF IF (  return TYPE_3 . METHOD_7 ( VAR_1 ) ; )  return TYPE_3 . METHOD_7 ( VAR_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . getReturnValue ( ) . METHOD_2 ( false ) )  TYPE_1 . getReturnValue ( ) . METHOD_2 ( false ) ( IF IF ( COND ( TYPE_1 . METHOD_3 ( ) ) != null ) COND ( TYPE_1 . METHOD_3 ( ) ) != null ( THEN THEN ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_3 ( ) . METHOD_4 ( ) ) INIT = TYPE_1 . METHOD_3 ( ) . METHOD_4 ( ) ) VAR VAR ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN (  TYPE_3 . METHOD_5 ( ) . METHOD_6 ( VAR_1 . getId ( ) , VAR_2 ) )  TYPE_3 . METHOD_5 ( ) . METHOD_6 ( VAR_1 . getId ( ) , VAR_2 ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  TYPE_1 . METHOD_7 ( ) )  TYPE_1 . METHOD_7 ( ) (  TYPE_1 . METHOD_8 ( ) )  TYPE_1 . METHOD_8 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ( INIT = new org.ovirt.engine.core.common.businessentities.VM ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.VM ( ) ) VAR VAR (  vm . METHOD_2 ( VAR_2 ) )  vm . METHOD_2 ( VAR_2 ) ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 ) INIT = VAR_4 ) VAR VAR (  VAR_1 . METHOD_3 ( VAR_3 ) )  VAR_1 . METHOD_3 ( VAR_3 ) (  VAR_1 . METHOD_4 ( vm ) )  VAR_1 . METHOD_4 ( vm ) ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_1 . METHOD_5 ( ) ) INIT = VAR_1 . METHOD_5 ( ) ) VAR VAR (  TYPE_3 . assertEquals ( VAR_4 , VAR_5 . getId ( ) ) )  TYPE_3 . assertEquals ( VAR_4 , VAR_5 . getId ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( VAR_1 class ) . to ( VAR_2 class ) )  METHOD_2 ( VAR_1 class ) . to ( VAR_2 class ) (  METHOD_2 ( VAR_3 class ) . to ( VAR_4 class ) )  METHOD_2 ( VAR_3 class ) . to ( VAR_4 class ) (  METHOD_2 ( VAR_5 class ) . to ( VAR_6 class ) )  METHOD_2 ( VAR_5 class ) . to ( VAR_6 class ) (  METHOD_2 ( VAR_7 class ) . to ( VAR_8 class ) )  METHOD_2 ( VAR_7 class ) . to ( VAR_8 class ) (  METHOD_2 ( VAR_9 class ) . to ( VAR_10 class ) )  METHOD_2 ( VAR_9 class ) . to ( VAR_10 class ) (  METHOD_2 ( VAR_11 class ) . to ( VAR_12 class ) )  METHOD_2 ( VAR_11 class ) . to ( VAR_12 class ) (  METHOD_2 ( VAR_13 class ) . to ( VAR_14 class ) )  METHOD_2 ( VAR_13 class ) . to ( VAR_14 class ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_1 ) ( model ) ) ) INIT = ( ( TYPE_1 ) ( model ) ) ) VAR VAR (  VAR_1 . setItems ( ( ( java.util.ArrayList < TYPE_2 > ) ( ( ( TYPE_3 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ) )  VAR_1 . setItems ( ( ( java.util.ArrayList < TYPE_2 > ) ( ( ( TYPE_3 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1[] ) RETURN TYPE_1[] ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1[] ) TYPE TYPE_1[] ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 [ VAR_3 ] ) INIT = new TYPE_1 [ VAR_3 ] ) VAR VAR (  VAR_2 = METHOD_2 ( VAR_1 ) )  VAR_2 = METHOD_2 ( VAR_1 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_2 [ 0 ] ) INIT = VAR_2 [ 0 ] ) VAR VAR (  VAR_2 [ 0 ] = VAR_2 [ 1 ] )  VAR_2 [ 0 ] = VAR_2 [ 1 ] (  VAR_2 [ 1 ] = VAR_4 )  VAR_2 [ 1 ] = VAR_4 (  VAR_2 [ 0 ] . METHOD_3 ( true ) )  VAR_2 [ 0 ] . METHOD_3 ( true ) (  METHOD_4 ( VAR_2 ) )  METHOD_4 ( VAR_2 ) (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  command = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , new TYPE_3 < org.ovirt.engine.core.compat.Guid > ( TYPE_4 . METHOD_4 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ) , null , null ) ) ) )  command = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , new TYPE_3 < org.ovirt.engine.core.compat.Guid > ( TYPE_4 . METHOD_4 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ) , null , null ) ) ) (  org.mockito.Mockito.doReturn ( vds ) . when ( command ) . METHOD_5 ( ) )  org.mockito.Mockito.doReturn ( vds ) . when ( command ) . METHOD_5 ( ) (  org.mockito.Mockito.doReturn ( null ) . when ( command ) . METHOD_6 ( ) )  org.mockito.Mockito.doReturn ( null ) . when ( command ) . METHOD_6 ( ) (  TYPE_5 . METHOD_7 ( command . METHOD_8 ( ) ) )  TYPE_5 . METHOD_7 ( command . METHOD_8 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME validate ) NAME validate ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.ValidationResult ) TYPE TYPE_1.ValidationResult ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.ArrayList<java.lang.String> ) TYPE java.util.ArrayList<java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_1 . METHOD_1 ( ) ) ) COND ! ( VAR_1 . METHOD_1 ( ) ) ( THEN THEN (  VAR_2 . add ( VAR_1 . METHOD_2 ( ) . name ( ) ) )  VAR_2 . add ( VAR_1 . METHOD_2 ( ) . name ( ) ) ( IF IF ( COND ( VAR_1 . METHOD_3 ( ) ) != null ) COND ( VAR_1 . METHOD_3 ( ) ) != null ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_1 . METHOD_3 ( ) ) IN VAR_1 . METHOD_3 ( ) ( BLOCK BLOCK (  VAR_2 . add ( VAR_3 ) )  VAR_2 . add ( VAR_3 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return VAR_1 . METHOD_1 ( ) ; )  return VAR_1 . METHOD_1 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME id ) NAME id ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source != null ? new java.util.ArrayList < TYPE_1 > ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; )  return source != null ? new java.util.ArrayList < TYPE_1 > ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? new java.util.ArrayList < TYPE_1 > ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? new java.util.ArrayList < TYPE_1 > ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; } } (  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_1 , new TYPE_2 ( id ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_1 , new TYPE_2 ( id ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.compat.Guid> ) TYPE java.util.List<org.ovirt.engine.core.compat.Guid> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR ( IF IF ( COND ( TYPE_1 . METHOD_2 ( ) ) != null ) COND ( TYPE_1 . METHOD_2 ( ) ) != null ( THEN THEN (  VAR_1 . add ( TYPE_1 . METHOD_2 ( ) ) )  VAR_1 . add ( TYPE_1 . METHOD_2 ( ) ) ) THEN THEN ) IF IF (  return VAR_2 . METHOD_3 ( TYPE_1 . METHOD_4 ( ) , vm , VAR_1 , VAR_3 . Collections < org.ovirt.engine.core.compat.Guid > METHOD_5 ( ) , vm . METHOD_6 ( ) , new java.util.ArrayList < > ( ) ) ; )  return VAR_2 . METHOD_3 ( TYPE_1 . METHOD_4 ( ) , vm , VAR_1 , VAR_3 . Collections < org.ovirt.engine.core.compat.Guid > METHOD_5 ( ) , vm . METHOD_6 ( ) , new java.util.ArrayList < > ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.String> ) TYPE java.util.Map<java.lang.String,java.lang.String> ( NAME VAR_6 ) NAME VAR_6 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_2 . METHOD_2 ( VAR_1 , VAR_7 , false ) )  TYPE_2 . METHOD_2 ( VAR_1 , VAR_7 , false ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME tempVar ) NAME tempVar ( INIT = new TYPE_3 ( VAR_1 , VAR_2 , VAR_6 ) ) INIT = new TYPE_3 ( VAR_1 , VAR_2 , VAR_6 ) ) VAR VAR (  tempVar . METHOD_3 ( VAR_4 ) )  tempVar . METHOD_3 ( VAR_4 ) (  tempVar . METHOD_4 ( VAR_5 ) )  tempVar . METHOD_4 ( VAR_5 ) (  tempVar . METHOD_5 ( VAR_3 ) )  tempVar . METHOD_5 ( VAR_3 ) (  TYPE_4 . getInstance ( ) . METHOD_6 ( VAR_8 , tempVar , TYPE_2 . METHOD_7 ( ) ) )  TYPE_4 . getInstance ( ) . METHOD_6 ( VAR_8 , tempVar , TYPE_2 . METHOD_7 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN org.ovirt.engine.core.common.businessentities.VM ) RETURN org.ovirt.engine.core.common.businessentities.VM ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  METHOD_3 ( ) )  METHOD_3 ( ) (  METHOD_4 ( VAR_1 ) )  METHOD_4 ( VAR_1 ) (  METHOD_5 ( VAR_1 ) )  METHOD_5 ( VAR_1 ) (  METHOD_6 ( ) )  METHOD_6 ( ) (  METHOD_7 ( ) )  METHOD_7 ( ) (  METHOD_8 ( VAR_2 ) )  METHOD_8 ( VAR_2 ) ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ( INIT = TYPE_1 . METHOD_9 ( ) ) INIT = TYPE_1 . METHOD_9 ( ) ) VAR VAR (  return vm ; )  return vm ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.when ( host . METHOD_2 ( ) ) . thenReturn ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) )  org.mockito.Mockito.when ( host . METHOD_2 ( ) ) . thenReturn ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = org.mockito.Mockito . METHOD_4 ( VAR_2 class ) ) INIT = org.mockito.Mockito . METHOD_4 ( VAR_2 class ) ) VAR VAR (  org.mockito.Mockito.when ( VAR_1 . METHOD_5 ( ) ) . thenReturn ( VAR_3 ) )  org.mockito.Mockito.when ( VAR_1 . METHOD_5 ( ) ) . thenReturn ( VAR_3 ) (  org.mockito.Mockito.when ( VAR_4 . get ( TYPE_2 . any ( VAR_5 . Guid class ) ) ) . thenReturn ( VAR_1 ) )  org.mockito.Mockito.when ( VAR_4 . get ( TYPE_2 . any ( VAR_5 . Guid class ) ) ) . thenReturn ( VAR_1 ) (  TYPE_3 . METHOD_6 ( validator . METHOD_1 ( ) , TYPE_4 . METHOD_7 ( ) ) )  TYPE_3 . METHOD_6 ( validator . METHOD_1 ( ) , TYPE_4 . METHOD_7 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.uicommonweb.UICommand ) TYPE org.ovirt.engine.ui.uicommonweb.UICommand ( NAME command ) NAME command ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  super . METHOD_1 ( command ) )  super . METHOD_1 ( command ) ( IF IF ( COND TYPE_1 . METHOD_2 ( command . getName ( ) , TYPE_2 ) ) COND TYPE_1 . METHOD_2 ( command . getName ( ) , TYPE_2 ) ( THEN THEN (  METHOD_3 ( ) )  METHOD_3 ( ) (  METHOD_4 ( ) )  METHOD_4 ( ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND TYPE_1 . METHOD_2 ( command . getName ( ) , TYPE_3 ) ) COND TYPE_1 . METHOD_2 ( command . getName ( ) , TYPE_3 ) ( THEN THEN (  METHOD_3 ( ) )  METHOD_3 ( ) ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( VAR_1 , new TYPE_1 . DiskImage ( ) ) )  METHOD_2 ( VAR_1 , new TYPE_1 . DiskImage ( ) ) (  METHOD_3 ( ) )  METHOD_3 ( ) (  METHOD_4 ( VAR_2 ) )  METHOD_4 ( VAR_2 ) (  METHOD_5 ( true ) )  METHOD_5 ( true ) (  TYPE_2 . METHOD_6 ( command . validate ( ) ) )  TYPE_2 . METHOD_6 ( command . validate ( ) ) (  TYPE_2 . METHOD_7 ( command . getReturnValue ( ) . METHOD_8 ( ) . METHOD_9 ( TYPE_3 . toString ( ) ) ) )  TYPE_2 . METHOD_7 ( command . getReturnValue ( ) . METHOD_8 ( ) . METHOD_9 ( TYPE_3 . toString ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( VAR_2 , STRING_1 ) ) INIT = METHOD_2 ( VAR_2 , STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VdsNetworkInterface> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VdsNetworkInterface> ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_3 ( VAR_1 . getName ( ) ) ) INIT = METHOD_3 ( VAR_1 . getName ( ) ) ) VAR VAR (  METHOD_4 ( VAR_1 , VAR_3 ) )  METHOD_4 ( VAR_1 , VAR_3 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME parameters ) NAME parameters ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_3 . add ( VAR_1 ) )  VAR_3 . add ( VAR_1 ) (  parameters . METHOD_5 ( VAR_3 ) )  parameters . METHOD_5 ( VAR_3 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_6 ( parameters ) ) INIT = METHOD_6 ( parameters ) ) VAR VAR (  METHOD_7 ( VAR_4 ) )  METHOD_7 ( VAR_4 ) (  METHOD_8 ( VAR_4 ) )  METHOD_8 ( VAR_4 ) (  METHOD_9 ( VAR_4 ) )  METHOD_9 ( VAR_4 ) (  METHOD_10 ( VAR_4 ) )  METHOD_10 ( VAR_4 ) (  METHOD_11 ( VAR_4 ) )  METHOD_11 ( VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.Network ) TYPE TYPE_1.Network ( NAME model ) NAME model ( INIT = new TYPE_1 . Network ( ) ) INIT = new TYPE_1 . Network ( ) ) VAR VAR (  METHOD_2 ( METHOD_3 ( ) ) )  METHOD_2 ( METHOD_3 ( ) ) (  VAR_1 . METHOD_4 ( ) )  VAR_1 . METHOD_4 ( ) ( TRY TRY ( BLOCK BLOCK (  VAR_2 . add ( model ) )  VAR_2 . add ( model ) (  METHOD_5 ( STRING_1 ) )  METHOD_5 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( BLOCK BLOCK (  METHOD_6 ( VAR_3 , STRING_2 , STRING_3 , STRING_4 ) )  METHOD_6 ( VAR_3 , STRING_2 , STRING_3 , STRING_4 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) (  dao = VAR_1 . METHOD_2 ( ) )  dao = VAR_1 . METHOD_2 ( ) (  VAR_2 = dao . get ( STRING_1 ) )  VAR_2 = dao . get ( STRING_1 ) (  VAR_3 = dao . get ( TYPE_1 . toString ( ) ) )  VAR_3 = dao . get ( TYPE_1 . toString ( ) ) (  VAR_4 = new TYPE_2 ( ) )  VAR_4 = new TYPE_2 ( ) (  VAR_4 . METHOD_3 ( STRING_2 ) )  VAR_4 . METHOD_3 ( STRING_2 ) (  VAR_4 . METHOD_4 ( VAR_5 ) )  VAR_4 . METHOD_4 ( VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME status ) NAME status ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  this . VAR_2 = status )  this . VAR_2 = status ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_3 . METHOD_2 ( ) ) INIT = TYPE_3 . METHOD_2 ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  TYPE_4 . METHOD_3 ( METHOD_4 ( ) , METHOD_5 ( ) , VAR_2 ) )  TYPE_4 . METHOD_3 ( METHOD_4 ( ) , METHOD_5 ( ) , VAR_2 ) ) BLOCK BLOCK ( FINALLY FINALLY (  TYPE_3 . METHOD_6 ( VAR_3 ) )  TYPE_3 . METHOD_6 ( VAR_3 ) ) FINALLY FINALLY ) TRY TRY ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ) . thenReturn ( 1 ) )  org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ) . thenReturn ( 1 ) (  org.mockito.Mockito.when ( VAR_2 . METHOD_4 ( TYPE_1 . METHOD_5 ( ) ) ) . thenReturn ( TYPE_2 . METHOD_6 ( VAR_3 , true ) ) )  org.mockito.Mockito.when ( VAR_2 . METHOD_4 ( TYPE_1 . METHOD_5 ( ) ) ) . thenReturn ( TYPE_2 . METHOD_6 ( VAR_3 , true ) ) (  org.mockito.Mockito.when ( VAR_4 . METHOD_7 ( TYPE_1 . METHOD_3 ( ) ) ) . thenReturn ( false ) )  org.mockito.Mockito.when ( VAR_4 . METHOD_7 ( TYPE_1 . METHOD_3 ( ) ) ) . thenReturn ( false ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME user ) NAME user ( INIT = org.mockito.Mockito . METHOD_8 ( VAR_5 class ) ) INIT = org.mockito.Mockito . METHOD_8 ( VAR_5 class ) ) VAR VAR (  VAR_6 . METHOD_9 ( VAR_7 , user ) )  VAR_6 . METHOD_9 ( VAR_7 , user ) (  VAR_6 . METHOD_10 ( VAR_7 , VAR_3 ) )  VAR_6 . METHOD_10 ( VAR_7 , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<?extendsTYPE_2> ) TYPE TYPE_1<?extendsTYPE_2> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME sender ) NAME sender ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME args ) NAME args ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME model ) NAME model ( INIT = ( ( TYPE_3 ) ( sender ) ) ) INIT = ( ( TYPE_3 ) ( sender ) ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 ) INIT = VAR_3 ) VAR VAR ( IF IF ( COND ( STRING_1 . equals ( VAR_2 ) ) || ( STRING_2 . equals ( VAR_2 ) ) ) COND ( STRING_1 . equals ( VAR_2 ) ) || ( STRING_2 . equals ( VAR_2 ) ) ( THEN THEN (  METHOD_2 ( model ) )  METHOD_2 ( model ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( METHOD_3 ( ) ) )  org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( METHOD_3 ( ) ) (  org.mockito.Mockito.when ( host . METHOD_2 ( ) ) . thenReturn ( METHOD_3 ( ) ) )  org.mockito.Mockito.when ( host . METHOD_2 ( ) ) . thenReturn ( METHOD_3 ( ) ) (  org.mockito.Mockito.when ( VAR_2 . METHOD_4 ( TYPE_1 . METHOD_5 ( ) ) ) . thenReturn ( TYPE_2 . METHOD_6 ( ) ) )  org.mockito.Mockito.when ( VAR_2 . METHOD_4 ( TYPE_1 . METHOD_5 ( ) ) ) . thenReturn ( TYPE_2 . METHOD_6 ( ) ) (  TYPE_3 . METHOD_7 ( validator . METHOD_8 ( ) , TYPE_4 . METHOD_9 ( ) ) )  TYPE_3 . METHOD_7 ( validator . METHOD_8 ( ) , TYPE_4 . METHOD_9 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.VdcQueryReturnValue ) TYPE TYPE_1.VdcQueryReturnValue ( NAME returnValue ) NAME returnValue ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME model ) NAME model ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  model . METHOD_2 ( null ) )  model . METHOD_2 ( null ) ( IF IF ( COND ! ( returnValue . getSucceeded ( ) ) ) COND ! ( returnValue . getSucceeded ( ) ) ( THEN THEN (  model . METHOD_2 ( org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( returnValue . METHOD_5 ( ) ) ) )  model . METHOD_2 ( org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( returnValue . METHOD_5 ( ) ) ) (  METHOD_6 ( ) . setEntity ( false ) )  METHOD_6 ( ) . setEntity ( false ) (  return true ; )  return true ; ) THEN THEN ) IF IF (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( SWITCH SWITCH ( NAME VAR_1 . METHOD_2 ( ) ) NAME VAR_1 . METHOD_2 ( ) ( CASE VAR_2 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 . METHOD_3 ( ) ) == ( VAR_3 ) ) COND ( VAR_1 . METHOD_3 ( ) ) == ( VAR_3 ) ( THEN THEN (  return STRING_1 ; )  return STRING_1 ; ) THEN THEN ( ELSE ELSE (  return STRING_2 ; )  return STRING_2 ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) CASE VAR_2 ( CASE VAR_4 ( BLOCK BLOCK (  return STRING_3 ; )  return STRING_3 ; ) BLOCK BLOCK ) CASE VAR_4 ( CASE VAR_5 ( BLOCK BLOCK (  return STRING_4 ; )  return STRING_4 ; ) BLOCK BLOCK ) CASE VAR_5 ( CASE VAR_6 ( BLOCK BLOCK (  return STRING_5 ; )  return STRING_5 ; ) BLOCK BLOCK ) CASE VAR_6 ) SWITCH SWITCH (  throw new TYPE_1 ( ( STRING_6 + ( VAR_1 . toString ( ) ) ) ) ; )  throw new TYPE_1 ( ( STRING_6 + ( VAR_1 . toString ( ) ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  cmd = org.mockito.Mockito . METHOD_2 ( METHOD_3 ( VAR_1 ) ) )  cmd = org.mockito.Mockito . METHOD_2 ( METHOD_3 ( VAR_1 ) ) (  METHOD_4 ( cmd ) )  METHOD_4 ( cmd ) (  cmd . METHOD_1 ( ) )  cmd . METHOD_1 ( ) (  TYPE_1 . assertEquals ( cmd . METHOD_5 ( ) , VAR_2 ) )  TYPE_1 . assertEquals ( cmd . METHOD_5 ( ) , VAR_2 ) (  org.mockito.Mockito . METHOD_6 ( VAR_3 , org.mockito.Mockito . METHOD_7 ( 1 ) ) . METHOD_8 ( TYPE_2 . any ( VAR_4 . VDS class ) , TYPE_2 . any ( VAR_5 class ) ) )  org.mockito.Mockito . METHOD_6 ( VAR_3 , org.mockito.Mockito . METHOD_7 ( 1 ) ) . METHOD_8 ( TYPE_2 . any ( VAR_4 . VDS class ) , TYPE_2 . any ( VAR_5 class ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ( INIT = true ) INIT = true ) VAR VAR ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_1 ( VAR_2 , VAR_5 < java.lang.String > METHOD_2 ( VAR_6 ) , true ) ) INIT = new TYPE_1 ( VAR_2 , VAR_5 < java.lang.String > METHOD_2 ( VAR_6 ) , true ) ) VAR VAR ( IF IF ( COND ! ( TYPE_2 . METHOD_3 ( VAR_1 , VAR_4 ) ) ) COND ! ( TYPE_2 . METHOD_3 ( VAR_1 , VAR_4 ) ) ( THEN THEN (  VAR_3 = false )  VAR_3 = false ) THEN THEN ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_7 . METHOD_4 ( STRING_1 , VAR_2 , TYPE_4 . METHOD_5 ( e ) ) )  VAR_7 . METHOD_4 ( STRING_1 , VAR_2 , TYPE_4 . METHOD_5 ( e ) ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) THEN THEN ) IF IF (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( METHOD_3 ( VAR_1 , VAR_2 class , new java.lang.String [ ] { STRING_1 , STRING_2 } , new java.lang.Object [ ] { VAR_3 , VAR_4 } ) ) )  METHOD_2 ( METHOD_3 ( VAR_1 , VAR_2 class , new java.lang.String [ ] { STRING_1 , STRING_2 } , new java.lang.Object [ ] { VAR_3 , VAR_4 } ) ) (  METHOD_4 ( resource . METHOD_5 ( new TYPE_1 ( ) ) ) )  METHOD_4 ( resource . METHOD_5 ( new TYPE_1 ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME parameters ) NAME parameters ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  parameters . METHOD_3 ( METHOD_4 ( VAR_1 ) ) )  parameters . METHOD_3 ( METHOD_4 ( VAR_1 ) ) (  org.mockito.Mockito.when ( VAR_2 . get ( VAR_3 ) ) . thenReturn ( METHOD_5 ( ) ) )  org.mockito.Mockito.when ( VAR_2 . get ( VAR_3 ) ) . thenReturn ( METHOD_5 ( ) ) (  METHOD_6 ( parameters ) )  METHOD_6 ( parameters ) (  METHOD_7 ( ) )  METHOD_7 ( ) (  TYPE_2 . METHOD_8 ( command . METHOD_9 ( ) ) )  TYPE_2 . METHOD_8 ( command . METHOD_9 ( ) ) (  TYPE_2 . METHOD_10 ( command . getReturnValue ( ) . METHOD_11 ( ) . METHOD_12 ( TYPE_3 . toString ( ) ) ) )  TYPE_2 . METHOD_10 ( command . getReturnValue ( ) . METHOD_11 ( ) . METHOD_12 ( TYPE_3 . toString ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) (  dao = VAR_1 . METHOD_2 ( ) )  dao = VAR_1 . METHOD_2 ( ) (  VAR_2 = dao . get ( new org.ovirt.engine.core.compat.Guid ( STRING_1 ) ) )  VAR_2 = dao . get ( new org.ovirt.engine.core.compat.Guid ( STRING_1 ) ) (  VAR_2 . METHOD_3 ( VAR_3 ) )  VAR_2 . METHOD_3 ( VAR_3 ) (  vds = new org.ovirt.engine.core.compat.Guid ( STRING_2 ) )  vds = new org.ovirt.engine.core.compat.Guid ( STRING_2 ) (  VAR_4 = new org.ovirt.engine.core.compat.Guid ( STRING_3 ) )  VAR_4 = new org.ovirt.engine.core.compat.Guid ( STRING_3 ) (  storageDomain = new org.ovirt.engine.core.compat.Guid ( STRING_4 ) )  storageDomain = new org.ovirt.engine.core.compat.Guid ( STRING_4 ) (  VAR_5 = new TYPE_1 ( ) )  VAR_5 = new TYPE_1 ( ) (  VAR_5 . METHOD_4 ( STRING_5 ) )  VAR_5 . METHOD_4 ( STRING_5 ) (  VAR_5 . METHOD_5 ( new org.ovirt.engine.core.compat . Version ( STRING_6 ) ) )  VAR_5 . METHOD_5 ( new org.ovirt.engine.core.compat . Version ( STRING_6 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1.Network ) RETURN TYPE_1.Network ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( TYPE_2 . METHOD_2 ( VAR_1 ) ) ) COND ! ( TYPE_2 . METHOD_2 ( VAR_1 ) ) ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE TYPE_1.Network ) TYPE TYPE_1.Network ( NAME VAR_2 ) NAME VAR_2 ( IN VAR_3 . METHOD_3 ( ) ) IN VAR_3 . METHOD_3 ( ) ( BLOCK BLOCK ( IF IF ( COND VAR_2 . METHOD_4 ( ) . equals ( VAR_1 ) ) COND VAR_2 . METHOD_4 ( ) . equals ( VAR_1 ) ( THEN THEN (  return VAR_2 ; )  return VAR_2 ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( ( TYPE_1 . getStoragePoolId ( ) ) == null ) || ( TYPE_2 . equals ( TYPE_1 . getStoragePoolId ( ) ) ) ) COND ( ( TYPE_1 . getStoragePoolId ( ) ) == null ) || ( TYPE_2 . equals ( TYPE_1 . getStoragePoolId ( ) ) ) ( THEN THEN (  METHOD_2 ( ( ( ( TYPE_1 . METHOD_3 ( ) ) != null ) && ( ( TYPE_1 . METHOD_3 ( ) . getStoragePoolId ( ) ) != null ) ? TYPE_1 . METHOD_3 ( ) . getStoragePoolId ( ) . getValue ( ) : VAR_1 ) ) )  METHOD_2 ( ( ( ( TYPE_1 . METHOD_3 ( ) ) != null ) && ( ( TYPE_1 . METHOD_3 ( ) . getStoragePoolId ( ) ) != null ) ? TYPE_1 . METHOD_3 ( ) . getStoragePoolId ( ) . getValue ( ) : VAR_1 ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> ( NAME result ) NAME result ( INIT = dao . METHOD_2 ( VAR_1 , true ) ) INIT = dao . METHOD_2 ( VAR_1 , true ) ) VAR VAR (  TYPE_1 . METHOD_3 ( result ) )  TYPE_1 . METHOD_3 ( result ) (  TYPE_1 . METHOD_4 ( result . isEmpty ( ) ) )  TYPE_1 . METHOD_4 ( result . isEmpty ( ) ) (  TYPE_1 . assertEquals ( VAR_2 , result . size ( ) ) )  TYPE_1 . assertEquals ( VAR_2 , result . size ( ) ) (  TYPE_1 . assertEquals ( result . METHOD_5 ( ) . METHOD_6 ( ) , VAR_3 ) )  TYPE_1 . assertEquals ( result . METHOD_5 ( ) . METHOD_6 ( ) , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME iface ) NAME iface ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( ) . get ( iface . getName ( ) ) ) INIT = METHOD_2 ( ) . get ( iface . getName ( ) ) ) VAR VAR (  return ( VAR_2 == null ) || ( ! ( VAR_1 . equals ( VAR_2 . METHOD_3 ( ) ) ) ) ; )  return ( VAR_2 == null ) || ( ! ( VAR_1 . equals ( VAR_2 . METHOD_3 ( ) ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  METHOD_3 ( false , VAR_1 ) )  METHOD_3 ( false , VAR_1 ) (  cmd . METHOD_4 ( ) )  cmd . METHOD_4 ( ) (  org.mockito.Mockito . METHOD_5 ( VAR_2 , org.mockito.Mockito . METHOD_6 ( ) ) . METHOD_7 ( TYPE_1 . any ( VAR_3 class ) ) )  org.mockito.Mockito . METHOD_5 ( VAR_2 , org.mockito.Mockito . METHOD_6 ( ) ) . METHOD_7 ( TYPE_1 . any ( VAR_3 class ) ) (  TYPE_2 . assertEquals ( VAR_4 , cmd . METHOD_8 ( ) ) )  TYPE_2 . assertEquals ( VAR_4 , cmd . METHOD_8 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . getInstance ( ) . METHOD_2 ( VAR_2 , params ) ) INIT = TYPE_2 . getInstance ( ) . METHOD_2 ( VAR_2 , params ) ) VAR VAR ( IF IF ( COND ( VAR_1 == null ) || ( ! ( VAR_1 . getSucceeded ( ) ) ) ) COND ( VAR_1 == null ) || ( ! ( VAR_1 . getSucceeded ( ) ) ) ( THEN THEN (  VAR_3 . METHOD_3 ( STRING_1 , params . METHOD_4 ( ) ) )  VAR_3 . METHOD_3 ( STRING_1 , params . METHOD_4 ( ) ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND VAR_1 . getSucceeded ( ) ) COND VAR_1 . getSucceeded ( ) ( THEN THEN (  VAR_3 . METHOD_5 ( STRING_2 , params . METHOD_4 ( ) ) )  VAR_3 . METHOD_5 ( STRING_2 , params . METHOD_4 ( ) ) ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( BLOCK BLOCK (  VAR_3 . error ( STRING_3 , VAR_4 ) )  VAR_3 . error ( STRING_3 , VAR_4 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( 0 ) )  METHOD_2 ( 0 ) (  METHOD_2 ( 0 ) )  METHOD_2 ( 0 ) (  METHOD_3 ( METHOD_4 ( VAR_1 , VAR_2 class , new java.lang.String [ ] { STRING_1 , STRING_2 } , new java.lang.Object [ ] { VAR_3 [ 0 ] , VAR_4 } , true , true ) ) )  METHOD_3 ( METHOD_4 ( VAR_1 , VAR_2 class , new java.lang.String [ ] { STRING_1 , STRING_2 } , new java.lang.Object [ ] { VAR_3 [ 0 ] , VAR_4 } , true , true ) ) (  METHOD_5 ( resource . METHOD_6 ( TYPE_1 . getModel ( 0 , false ) ) , 0 ) )  METHOD_5 ( resource . METHOD_6 ( TYPE_1 . getModel ( 0 , false ) ) , 0 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_1 . METHOD_2 ( true ) )  VAR_1 . METHOD_2 ( true ) ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_3 ( ) ) INIT = TYPE_2 . METHOD_3 ( ) ) VAR VAR (  VAR_2 -= INT_1 )  VAR_2 -= INT_1 ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_3 ( VAR_2 ) ) INIT = new TYPE_3 ( VAR_2 ) ) VAR VAR (  VAR_1 . METHOD_4 ( VAR_3 ) )  VAR_1 . METHOD_4 ( VAR_3 ) ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR (  VAR_1 . METHOD_5 ( VAR_4 ) )  VAR_1 . METHOD_5 ( VAR_4 ) (  VAR_1 . METHOD_6 ( ) )  VAR_1 . METHOD_6 ( ) ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME result ) NAME result ( INIT = VAR_1 . METHOD_6 ( ) ) INIT = VAR_1 . METHOD_6 ( ) ) VAR VAR (  TYPE_4 . METHOD_7 ( result ) )  TYPE_4 . METHOD_7 ( result ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME iface ) NAME iface ) VAR VAR ( VAR VAR ( TYPE java.util.Map<java.lang.String,org.ovirt.engine.core.common.businessentities.network.Network> ) TYPE java.util.Map<java.lang.String,org.ovirt.engine.core.common.businessentities.network.Network> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = iface . METHOD_2 ( ) ) INIT = iface . METHOD_2 ( ) ) VAR VAR (  return ( VAR_2 == null ) || ( ( VAR_1 . METHOD_3 ( VAR_2 ) ) && ( VAR_1 . get ( VAR_2 ) . METHOD_4 ( ) ) ) ; )  return ( VAR_2 == null ) || ( ( VAR_1 . METHOD_3 ( VAR_2 ) ) && ( VAR_1 . get ( VAR_2 ) . METHOD_4 ( ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( new TYPE_1 ( ) ) )  METHOD_2 ( new TYPE_1 ( ) ) ( IF IF ( COND ( VAR_1 . METHOD_3 ( ) ) != null ) COND ( VAR_1 . METHOD_3 ( ) ) != null ( THEN THEN (  METHOD_4 ( ) . METHOD_5 ( VAR_1 . METHOD_3 ( ) ) )  METHOD_4 ( ) . METHOD_5 ( VAR_1 . METHOD_3 ( ) ) ) THEN THEN ) IF IF (  VAR_2 = true )  VAR_2 = true (  METHOD_6 ( null ) )  METHOD_6 ( null ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  VAR_3 . METHOD_2 ( VAR_1 ) )  VAR_3 . METHOD_2 ( VAR_1 ) (  VAR_3 . METHOD_3 ( VAR_1 ) )  VAR_3 . METHOD_3 ( VAR_1 ) ( IF IF ( COND ! VAR_1 ) COND ! VAR_1 ( THEN THEN (  VAR_3 . METHOD_4 ( new TYPE_3 ( VAR_2 , STRING_1 ) ) )  VAR_3 . METHOD_4 ( new TYPE_3 ( VAR_2 , STRING_1 ) ) ) THEN THEN ) IF IF (  org.mockito.Mockito.when ( VAR_4 . METHOD_5 ( TYPE_4 . any ( VAR_5 class ) , TYPE_4 . any ( VAR_6 class ) ) ) . thenReturn ( VAR_3 ) )  org.mockito.Mockito.when ( VAR_4 . METHOD_5 ( TYPE_4 . any ( VAR_5 class ) , TYPE_4 . any ( VAR_6 class ) ) ) . thenReturn ( VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  validator = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( VAR_1 , VAR_2 , cluster , VAR_3 ) ) )  validator = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( VAR_1 , VAR_2 , cluster , VAR_3 ) ) (  org.mockito.Mockito.doReturn ( true ) . when ( validator ) . METHOD_3 ( TYPE_2 . any ( ) ) )  org.mockito.Mockito.doReturn ( true ) . when ( validator ) . METHOD_3 ( TYPE_2 . any ( ) ) (  TYPE_3 . METHOD_4 ( validator . METHOD_1 ( TYPE_4 . instance ( ) . METHOD_5 ( VAR_4 class ) ) , TYPE_5 . METHOD_6 ( ) ) )  TYPE_3 . METHOD_4 ( validator . METHOD_1 ( TYPE_4 . instance ( ) . METHOD_5 ( VAR_4 class ) ) , TYPE_5 . METHOD_6 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1.VdcBllMessages ) RETURN TYPE_1.VdcBllMessages ( NAME validate ) NAME validate ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME vds ) NAME vds ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ! ( vds . METHOD_1 ( ) . equals ( getVm ( ) . METHOD_2 ( ) ) ) ) || ( ( vds . METHOD_3 ( ) ) != ( VAR_3 ) ) ) COND ( ! ( vds . METHOD_1 ( ) . equals ( getVm ( ) . METHOD_2 ( ) ) ) ) || ( ( vds . METHOD_3 ( ) ) != ( VAR_3 ) ) ( THEN THEN (  VAR_1 . append ( STRING_1 ) )  VAR_1 . append ( STRING_1 ) (  return VAR_4 ; )  return VAR_4 ; ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List ) TYPE java.util.List ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( ( METHOD_2 ( ) ) != null ) && ( ( getSelectedItem ( ) ) != null ) ) ? METHOD_2 ( ) : new java.util.ArrayList ( ) ) INIT = ( ( ( METHOD_2 ( ) ) != null ) && ( ( getSelectedItem ( ) ) != null ) ) ? METHOD_2 ( ) : new java.util.ArrayList ( ) ) VAR VAR (  METHOD_3 ( ) . METHOD_4 ( ( ( VAR_1 . size ( ) ) == 1 ) ) )  METHOD_3 ( ) . METHOD_4 ( ( ( VAR_1 . size ( ) ) == 1 ) ) (  METHOD_5 ( ) . METHOD_4 ( ( ( VAR_1 . size ( ) ) == 1 ) ) )  METHOD_5 ( ) . METHOD_4 ( ( ( VAR_1 . size ( ) ) == 1 ) ) (  METHOD_6 ( ) . METHOD_4 ( ( ( VAR_1 . size ( ) ) == 1 ) ) )  METHOD_6 ( ) . METHOD_4 ( ( ( VAR_1 . size ( ) ) == 1 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . getInstance ( ) ) INIT = TYPE_2 . getInstance ( ) ) VAR VAR (  VAR_1 . METHOD_2 ( this , STRING_1 , new TYPE_3 [ ] { } , new java.lang.Object [ ] { } , VAR_2 < java.lang.Integer > METHOD_3 ( VAR_3 ) , VAR_2 < java.lang.Integer > METHOD_3 ( VAR_3 ) , VAR_4 ) )  VAR_1 . METHOD_2 ( this , STRING_1 , new TYPE_3 [ ] { } , new java.lang.Object [ ] { } , VAR_2 < java.lang.Integer > METHOD_3 ( VAR_3 ) , VAR_2 < java.lang.Integer > METHOD_3 ( VAR_3 ) , VAR_4 ) (  VAR_5 . METHOD_4 ( STRING_2 ) )  VAR_5 . METHOD_4 ( STRING_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( VAR_2 ) )  VAR_1 . METHOD_2 ( VAR_2 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_2 ( VAR_4 ) ) INIT = new TYPE_2 ( VAR_4 ) ) VAR VAR (  VAR_3 . METHOD_3 ( VAR_5 ) )  VAR_3 . METHOD_3 ( VAR_5 ) (  TYPE_3 . log ( VAR_3 , VAR_6 ) )  TYPE_3 . log ( VAR_3 , VAR_6 ) (  return TYPE_4 . getInstance ( ) . METHOD_4 ( ) . METHOD_5 ( VAR_5 , VAR_7 , false ) ; )  return TYPE_4 . getInstance ( ) . METHOD_4 ( ) . METHOD_5 ( VAR_5 , VAR_7 , false ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( null ) )  TYPE_1 . METHOD_2 ( null ) ( IF IF ( COND ( ( TYPE_1 . METHOD_3 ( ) ) != null ) && ( METHOD_4 ( ) ) ) COND ( ( TYPE_1 . METHOD_3 ( ) ) != null ) && ( METHOD_4 ( ) ) ( THEN THEN (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) ) THEN THEN ( ELSE ELSE (  TYPE_1 . METHOD_5 ( false ) )  TYPE_1 . METHOD_5 ( false ) (  VAR_1 . METHOD_6 ( STRING_1 , TYPE_1 . METHOD_7 ( ) , TYPE_1 . METHOD_8 ( ) ) )  VAR_1 . METHOD_6 ( STRING_1 , TYPE_1 . METHOD_7 ( ) , TYPE_1 . METHOD_8 ( ) ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_1 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) )  VAR_1 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) (  VAR_1 . METHOD_4 ( VAR_2 ) )  VAR_1 . METHOD_4 ( VAR_2 ) (  VAR_3 . METHOD_5 ( VAR_1 . getId ( ) ) )  VAR_3 . METHOD_5 ( VAR_1 . getId ( ) ) (  org.mockito.Mockito.doReturn ( VAR_4 ) . when ( command ) . METHOD_6 ( ) )  org.mockito.Mockito.doReturn ( VAR_4 ) . when ( command ) . METHOD_6 ( ) (  TYPE_2 . METHOD_7 ( STRING_1 , command . validate ( ) ) )  TYPE_2 . METHOD_7 ( STRING_1 , command . validate ( ) ) (  METHOD_8 ( VAR_5 ) )  METHOD_8 ( VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( VAR_2 . Guid class ) ) ) . thenReturn ( new org.ovirt.engine.core.common.businessentities.StoragePool ( STRING_1 , STRING_2 , VAR_3 , STRING_1 , TYPE_2 . getValue ( ) , TYPE_3 . getValue ( ) ) ) )  org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( VAR_2 . Guid class ) ) ) . thenReturn ( new org.ovirt.engine.core.common.businessentities.StoragePool ( STRING_1 , STRING_2 , VAR_3 , STRING_1 , TYPE_2 . getValue ( ) , TYPE_3 . getValue ( ) ) ) (  org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ) . thenReturn ( TYPE_4 . METHOD_4 ( ) ) )  org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ) . thenReturn ( TYPE_4 . METHOD_4 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND this . VAR_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) COND this . VAR_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ( THEN THEN (  return this . VAR_2 . get ( VAR_1 . METHOD_3 ( ) ) . METHOD_4 ( ) ; )  return this . VAR_2 . get ( VAR_1 . METHOD_3 ( ) ) . METHOD_4 ( ) ; ) THEN THEN ) IF IF (  throw new TYPE_1 ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) ) ; )  throw new TYPE_1 ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<?> ) TYPE TYPE_1<?> ( NAME command ) NAME command ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_2 ( command . METHOD_3 ( ) ) ) INIT = VAR_2 . METHOD_2 ( command . METHOD_3 ( ) ) ) VAR VAR (  VAR_1 . METHOD_4 ( result ) )  VAR_1 . METHOD_4 ( result ) ( IF IF ( COND ! ( result . METHOD_5 ( ) ) ) COND ! ( result . METHOD_5 ( ) ) ( THEN THEN (  VAR_1 . METHOD_6 ( VAR_3 ) )  VAR_1 . METHOD_6 ( VAR_3 ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND TYPE_4 . equals ( VAR_1 . METHOD_7 ( ) ) ) COND TYPE_4 . equals ( VAR_1 . METHOD_7 ( ) ) ( THEN THEN (  VAR_1 . METHOD_6 ( ( result . getSucceeded ( ) ? VAR_4 : VAR_5 ) ) )  VAR_1 . METHOD_6 ( ( result . getSucceeded ( ) ? VAR_4 : VAR_5 ) ) ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF (  VAR_2 . METHOD_8 ( VAR_1 ) )  VAR_2 . METHOD_8 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.when ( METHOD_2 ( ) . METHOD_3 ( ) ) . thenReturn ( null ) )  org.mockito.Mockito.when ( METHOD_2 ( ) . METHOD_3 ( ) ) . thenReturn ( null ) (  METHOD_4 ( ) . METHOD_5 ( ) )  METHOD_4 ( ) . METHOD_5 ( ) ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VM> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VM> ( NAME result ) NAME result ( INIT = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VM > ) ( METHOD_4 ( ) . METHOD_6 ( ) . getReturnValue ( ) ) ) ) INIT = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VM > ) ( METHOD_4 ( ) . METHOD_6 ( ) . getReturnValue ( ) ) ) ) VAR VAR (  TYPE_2 . assertEquals ( STRING_1 , 2 , result . size ( ) ) )  TYPE_2 . assertEquals ( STRING_1 , 2 , result . size ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN (  VAR_2 = ( VAR_1 instanceof java.lang.Boolean ) ? ( ( java.lang.Boolean ) ( VAR_1 ) ) . toString ( ) : java.lang.Boolean . toString ( true ) )  VAR_2 = ( VAR_1 instanceof java.lang.Boolean ) ? ( ( java.lang.Boolean ) ( VAR_1 ) ) . toString ( ) : java.lang.Boolean . toString ( true ) ) THEN THEN ( ELSE ELSE (  VAR_2 = java.lang.Boolean . toString ( false ) )  VAR_2 = java.lang.Boolean . toString ( false ) ) ELSE ELSE ) IF IF (  METHOD_2 ( VAR_2 ) )  METHOD_2 ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( TYPE_2 . getParameters ( ) . METHOD_5 ( ) , TYPE_2 . METHOD_6 ( ) , TYPE_2 . getParameters ( ) . METHOD_7 ( ) ) ) INIT = TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( TYPE_2 . getParameters ( ) . METHOD_5 ( ) , TYPE_2 . METHOD_6 ( ) , TYPE_2 . getParameters ( ) . METHOD_7 ( ) ) ) VAR VAR (  TYPE_2 . METHOD_8 ( ) . METHOD_9 ( VAR_1 ) )  TYPE_2 . METHOD_8 ( ) . METHOD_9 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( cmd ) . METHOD_2 ( ) )  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( cmd ) . METHOD_2 ( ) (  org.mockito.Mockito.doReturn ( METHOD_3 ( VAR_2 ) ) . when ( cmd ) . METHOD_4 ( ) )  org.mockito.Mockito.doReturn ( METHOD_3 ( VAR_2 ) ) . when ( cmd ) . METHOD_4 ( ) (  org.mockito.Mockito.doReturn ( METHOD_5 ( ) ) . when ( VAR_3 ) . get ( VAR_4 ) )  org.mockito.Mockito.doReturn ( METHOD_5 ( ) ) . when ( VAR_3 ) . get ( VAR_4 ) (  org.mockito.Mockito.doReturn ( METHOD_6 ( true ) ) . when ( VAR_5 ) . get ( TYPE_1 . any ( VAR_6 . Guid class ) ) )  org.mockito.Mockito.doReturn ( METHOD_6 ( true ) ) . when ( VAR_5 ) . get ( TYPE_1 . any ( VAR_6 . Guid class ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME map ) NAME map ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME template ) NAME template ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ( INIT = ( template != null ) ? template : new TYPE_1 ( ) ) INIT = ( template != null ) ? template : new TYPE_1 ( ) ) VAR VAR (  model . METHOD_1 ( VAR_1 ) )  model . METHOD_1 ( VAR_1 ) (  model . setId ( TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , true ) . toString ( ) ) )  model . setId ( TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , true ) . toString ( ) ) (  return model ; )  return model ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.Object> ) TYPE java.util.Map<java.lang.String,java.lang.Object> ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) INIT = VAR_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_1 ( VAR_2 ) ) INIT = new TYPE_1 ( VAR_2 ) ) VAR VAR (  return VAR_4 ; )  return VAR_4 ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_5 ) NAME VAR_5 ( BLOCK BLOCK (  throw new TYPE_4 ( VAR_5 ) ; )  throw new TYPE_4 ( VAR_5 ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_1 . METHOD_1 ( VAR_1 , VAR_2 ) ) INIT = TYPE_1 . METHOD_1 ( VAR_1 , VAR_2 ) ) VAR VAR ( IF IF ( COND ( ( VAR_3 . size ( ) ) + ( VAR_4 . size ( ) ) ) > ( VAR_5 < java.lang.Integer > METHOD_2 ( VAR_6 ) ) ) COND ( ( VAR_3 . size ( ) ) + ( VAR_4 . size ( ) ) ) > ( VAR_5 < java.lang.Integer > METHOD_2 ( VAR_6 ) ) ( THEN THEN (  throw new TYPE_2 ( ) ; )  throw new TYPE_2 ( ) ; ) THEN THEN ) IF IF (  VAR_4 . METHOD_3 ( VAR_3 ) )  VAR_4 . METHOD_3 ( VAR_3 ) (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_3 ( ) ) INIT = new TYPE_3 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_3 . METHOD_2 ( TYPE_4 . METHOD_3 ( VAR_2 ) ) )  VAR_3 . METHOD_2 ( TYPE_4 . METHOD_3 ( VAR_2 ) ) (  VAR_3 . METHOD_4 ( TYPE_4 . METHOD_5 ( VAR_2 ) ) )  VAR_3 . METHOD_4 ( TYPE_4 . METHOD_5 ( VAR_2 ) ) (  VAR_3 . METHOD_6 ( TYPE_4 . METHOD_7 ( VAR_2 ) ) )  VAR_3 . METHOD_6 ( TYPE_4 . METHOD_7 ( VAR_2 ) ) (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.compat.Guid> ) TYPE java.util.List<org.ovirt.engine.core.compat.Guid> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( ) ) INIT = new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.DiskImage ) TYPE org.ovirt.engine.core.common.businessentities.DiskImage ( NAME image ) NAME image ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK (  VAR_1 . add ( image . METHOD_2 ( ) ) )  VAR_1 . add ( image . METHOD_2 ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  TYPE_1 . METHOD_3 ( ) . METHOD_4 ( TYPE_1 . METHOD_5 ( ) , VAR_1 ) )  TYPE_1 . METHOD_3 ( ) . METHOD_4 ( TYPE_1 . METHOD_5 ( ) , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  cmd = org.mockito.Mockito . METHOD_2 ( METHOD_3 ( VAR_1 , 0 ) ) )  cmd = org.mockito.Mockito . METHOD_2 ( METHOD_3 ( VAR_1 , 0 ) ) (  METHOD_4 ( cmd ) )  METHOD_4 ( cmd ) (  METHOD_5 ( false , VAR_2 ) )  METHOD_5 ( false , VAR_2 ) (  TYPE_1 . METHOD_6 ( cmd . METHOD_7 ( ) ) )  TYPE_1 . METHOD_6 ( cmd . METHOD_7 ( ) ) (  cmd . METHOD_8 ( ) )  cmd . METHOD_8 ( ) (  TYPE_1 . assertEquals ( cmd . METHOD_9 ( ) , VAR_3 ) )  TYPE_1 . assertEquals ( cmd . METHOD_9 ( ) , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( 1 , ( - INT_1 ) , ( - INT_2 ) , INT_2 ) ) INIT = new TYPE_1 ( 1 , ( - INT_1 ) , ( - INT_2 ) , INT_2 ) ) VAR VAR (  TYPE_2 . assertEquals ( STRING_1 , 0 , VAR_2 ) )  TYPE_2 . assertEquals ( STRING_1 , 0 , VAR_2 ) (  TYPE_2 . assertEquals ( STRING_2 , INT_3 , VAR_3 ) )  TYPE_2 . assertEquals ( STRING_2 , INT_3 , VAR_3 ) (  TYPE_2 . assertEquals ( STRING_3 , INT_4 , VAR_4 ) )  TYPE_2 . assertEquals ( STRING_3 , INT_4 , VAR_4 ) (  TYPE_2 . assertEquals ( STRING_4 , INT_2 , VAR_5 ) )  TYPE_2 . assertEquals ( STRING_4 , INT_2 , VAR_5 ) (  TYPE_2 . assertEquals ( STRING_5 , 0 , VAR_6 ) )  TYPE_2 . assertEquals ( STRING_5 , 0 , VAR_6 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( TYPE_2 . METHOD_5 ( ) . METHOD_6 ( ) , null , true ) ) INIT = TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( TYPE_2 . METHOD_5 ( ) . METHOD_6 ( ) , null , true ) ) VAR VAR (  TYPE_2 . METHOD_7 ( ) . METHOD_8 ( TYPE_3 . getInstance ( ) . METHOD_9 ( VAR_1 ) ) )  TYPE_2 . METHOD_7 ( ) . METHOD_8 ( TYPE_3 . getInstance ( ) . METHOD_9 ( VAR_1 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( METHOD_3 ( ) ) )  METHOD_2 ( METHOD_3 ( ) ) (  METHOD_4 ( ) )  METHOD_4 ( ) (  VAR_1 . METHOD_5 ( ) )  VAR_1 . METHOD_5 ( ) ( TRY TRY ( BLOCK BLOCK (  resource . METHOD_6 ( getModel ( INT_1 ) ) )  resource . METHOD_6 ( getModel ( INT_1 ) ) (  METHOD_7 ( STRING_1 ) )  METHOD_7 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( BLOCK BLOCK (  METHOD_8 ( VAR_2 ) )  METHOD_8 ( VAR_2 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( cmd ) . METHOD_2 ( ) )  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( cmd ) . METHOD_2 ( ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  VAR_4 . METHOD_3 ( VAR_1 ) )  VAR_4 . METHOD_3 ( VAR_1 ) ( IF IF ( COND ! VAR_1 ) COND ! VAR_1 ( THEN THEN (  VAR_4 . METHOD_4 ( new TYPE_3 ( VAR_2 , STRING_1 ) ) )  VAR_4 . METHOD_4 ( new TYPE_3 ( VAR_2 , STRING_1 ) ) ) THEN THEN ) IF IF (  org.mockito.Mockito.when ( VAR_5 . METHOD_5 ( TYPE_4 . METHOD_6 ( VAR_6 ) , TYPE_4 . any ( VAR_7 class ) ) ) . thenReturn ( VAR_4 ) )  org.mockito.Mockito.when ( VAR_5 . METHOD_5 ( TYPE_4 . METHOD_6 ( VAR_6 ) , TYPE_4 . any ( VAR_7 class ) ) ) . thenReturn ( VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN java.util.List<org.ovirt.engine.core.common.businessentities.VM> ) RETURN java.util.List<org.ovirt.engine.core.common.businessentities.VM> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VM> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VM> ( NAME vms ) NAME vms ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_3 . METHOD_2 ( VAR_2 ) ) ) COND ! ( VAR_3 . METHOD_2 ( VAR_2 ) ) ( THEN THEN (  vms . add ( VAR_3 . METHOD_3 ( VAR_2 ) ) )  vms . add ( VAR_3 . METHOD_3 ( VAR_2 ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( BLOCK BLOCK (  METHOD_4 ( VAR_4 . getName ( ) , VAR_4 . METHOD_5 ( ) ) )  METHOD_4 ( VAR_4 . getName ( ) , VAR_4 . METHOD_5 ( ) ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return vms ; )  return vms ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static synchronized ) MODIFIER public static synchronized ( RETURN java.lang.String[] ) RETURN java.lang.String[] ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.StorageDomain ) TYPE TYPE_1.StorageDomain ( NAME storageDomain ) NAME storageDomain ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return TYPE_2 . METHOD_2 ( storageDomain ) ? new java.lang.String [ ] { STRING_1 , STRING_2 , STRING_3 , STRING_4 } : TYPE_2 . METHOD_3 ( storageDomain ) ? new java.lang.String [ ] { STRING_5 , STRING_4 } : TYPE_2 . METHOD_4 ( storageDomain ) ? new java.lang.String [ ] { STRING_1 , STRING_2 , STRING_5 , STRING_3 , STRING_6 } : new java.lang.String [ ] { STRING_1 , STRING_2 , STRING_5 , STRING_4 } ; )  return TYPE_2 . METHOD_2 ( storageDomain ) ? new java.lang.String [ ] { STRING_1 , STRING_2 , STRING_3 , STRING_4 } : TYPE_2 . METHOD_3 ( storageDomain ) ? new java.lang.String [ ] { STRING_5 , STRING_4 } : TYPE_2 . METHOD_4 ( storageDomain ) ? new java.lang.String [ ] { STRING_1 , STRING_2 , STRING_5 , STRING_3 , STRING_6 } : new java.lang.String [ ] { STRING_1 , STRING_2 , STRING_5 , STRING_4 } ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_2.VdcQueryReturnValue> ) TYPE java.util.List<TYPE_2.VdcQueryReturnValue> ( NAME VAR_1 ) NAME VAR_1 ( INIT = result . METHOD_2 ( ) ) INIT = result . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDSGroup> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDSGroup> ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( VAR_1 . get ( 0 ) . getReturnValue ( ) ) ) ) INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( VAR_1 . get ( 0 ) . getReturnValue ( ) ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VmTemplate> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VmTemplate> ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmTemplate > ) ( VAR_1 . get ( 1 ) . getReturnValue ( ) ) ) ) INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmTemplate > ) ( VAR_1 . get ( 1 ) . getReturnValue ( ) ) ) ) VAR VAR (  METHOD_3 ( VAR_2 ) )  METHOD_3 ( VAR_2 ) (  METHOD_4 ( VAR_3 ) )  METHOD_4 ( VAR_3 ) (  METHOD_5 ( ) )  METHOD_5 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( ) )  VAR_1 . METHOD_2 ( ) (  VAR_1 . add ( TYPE_1 . METHOD_3 ( 1 , VAR_2 ) ) )  VAR_1 . add ( TYPE_1 . METHOD_3 ( 1 , VAR_2 ) ) (  METHOD_4 ( ) )  METHOD_4 ( ) (  command . METHOD_5 ( ) )  command . METHOD_5 ( ) (  org.mockito.Mockito . METHOD_6 ( VAR_3 ) . METHOD_7 ( TYPE_2 . METHOD_8 ( VAR_4 ) ) )  org.mockito.Mockito . METHOD_6 ( VAR_3 ) . METHOD_7 ( TYPE_2 . METHOD_8 ( VAR_4 ) ) (  org.mockito.Mockito . METHOD_6 ( VAR_3 ) . METHOD_9 ( TYPE_2 . METHOD_8 ( VAR_1 ) , TYPE_2 . any ( VAR_5 . Guid class ) ) )  org.mockito.Mockito . METHOD_6 ( VAR_3 ) . METHOD_9 ( TYPE_2 . METHOD_8 ( VAR_1 ) , TYPE_2 . any ( VAR_5 . Guid class ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_2 . getStatus ( ) ) INIT = VAR_2 . getStatus ( ) ) VAR VAR ( IF IF ( COND ( VAR_3 == ( VAR_4 ) ) && ( org.ovirt.engine.core.common.businessentities.VM . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) ) COND ( VAR_3 == ( VAR_4 ) ) && ( org.ovirt.engine.core.common.businessentities.VM . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) ( THEN THEN (  VAR_5 . add ( VAR_1 . getId ( ) ) )  VAR_5 . add ( VAR_1 . getId ( ) ) (  VAR_6 . METHOD_4 ( STRING_1 , VAR_1 . getId ( ) ) )  VAR_6 . METHOD_4 ( STRING_1 , VAR_1 . getId ( ) ) (  VAR_2 . METHOD_5 ( null ) )  VAR_2 . METHOD_5 ( null ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  cmd = org.mockito.Mockito . METHOD_2 ( METHOD_3 ( METHOD_4 ( 2 , false ) ) ) )  cmd = org.mockito.Mockito . METHOD_2 ( METHOD_3 ( METHOD_4 ( 2 , false ) ) ) (  METHOD_5 ( cmd ) )  METHOD_5 ( cmd ) (  org.mockito.Mockito.doReturn ( getVdsGroup ( false ) ) . when ( VAR_1 ) . get ( org.mockito.Mockito . any ( VAR_2 . Guid class ) ) )  org.mockito.Mockito.doReturn ( getVdsGroup ( false ) ) . when ( VAR_1 ) . get ( org.mockito.Mockito . any ( VAR_2 . Guid class ) ) (  org.mockito.Mockito.doReturn ( getVdsGroup ( false ) ) . when ( VAR_1 ) . METHOD_6 ( org.mockito.Mockito . any ( VAR_2 . Guid class ) ) )  org.mockito.Mockito.doReturn ( getVdsGroup ( false ) ) . when ( VAR_1 ) . METHOD_6 ( org.mockito.Mockito . any ( VAR_2 . Guid class ) ) (  TYPE_1 . METHOD_7 ( cmd , VAR_3 ) )  TYPE_1 . METHOD_7 ( cmd , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VmTemplate ) TYPE org.ovirt.engine.core.common.businessentities.VmTemplate ( NAME template ) NAME template ) VAR VAR ( VAR VAR ( TYPE java.util.Map<org.ovirt.engine.core.compat.Guid,org.ovirt.engine.core.common.businessentities.DiskImage> ) TYPE java.util.Map<org.ovirt.engine.core.compat.Guid,org.ovirt.engine.core.common.businessentities.DiskImage> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.Map<org.ovirt.engine.core.compat.Guid,org.ovirt.engine.core.common.businessentities.StorageDomain> ) TYPE java.util.Map<org.ovirt.engine.core.compat.Guid,org.ovirt.engine.core.common.businessentities.StorageDomain> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> ( NAME VAR_4 ) NAME VAR_4 ( INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( template . getStoragePoolId ( ) ) ) INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( template . getStoragePoolId ( ) ) ) VAR VAR (  TYPE_1 . METHOD_1 ( template , VAR_4 , VAR_1 , VAR_2 , VAR_3 ) )  TYPE_1 . METHOD_1 ( template , VAR_4 , VAR_1 , VAR_2 , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( VAR_2 ) )  VAR_1 . METHOD_2 ( VAR_2 ) (  dao . METHOD_3 ( VAR_1 ) )  dao . METHOD_3 ( VAR_1 ) (  dao . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) )  dao . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME result ) NAME result ( INIT = dao . get ( VAR_1 . getId ( ) ) ) INIT = dao . get ( VAR_1 . getId ( ) ) ) VAR VAR (  TYPE_1 . assertEquals ( VAR_1 , result ) )  TYPE_1 . assertEquals ( VAR_1 , result ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1.ValidationResult ) RETURN TYPE_1.ValidationResult ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( vm ) ) INIT = METHOD_2 ( vm ) ) VAR VAR ( IF IF ( COND ( ( vm . METHOD_3 ( ) ) || ( ( vm . getStatus ( ) ) == ( VAR_2 ) ) ) || VAR_1 ) COND ( ( vm . METHOD_3 ( ) ) || ( ( vm . getStatus ( ) ) == ( VAR_2 ) ) ) || VAR_1 ( THEN THEN (  return new TYPE_1 . ValidationResult ( VAR_3 ) ; )  return new TYPE_1 . ValidationResult ( VAR_3 ) ; ) THEN THEN ) IF IF (  return VAR_4 ; )  return VAR_4 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  vm . METHOD_3 ( VAR_1 ) )  vm . METHOD_3 ( VAR_1 ) (  METHOD_4 ( TYPE_1 . METHOD_5 ( ) , true ) )  METHOD_4 ( TYPE_1 . METHOD_5 ( ) , true ) (  METHOD_6 ( ) )  METHOD_6 ( ) (  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( command ) . METHOD_7 ( ) )  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( command ) . METHOD_7 ( ) (  org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_8 ( ) )  org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_8 ( ) (  command . METHOD_9 ( ) )  command . METHOD_9 ( ) (  TYPE_2 . METHOD_10 ( command ) )  TYPE_2 . METHOD_10 ( command ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_1 ) ( VAR_2 ) ) ) INIT = ( ( TYPE_1 ) ( VAR_2 ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( ( TYPE_2 ) ( VAR_1 . METHOD_2 ( ) ) ) ) INIT = ( ( TYPE_2 ) ( VAR_1 . METHOD_2 ( ) ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME returnValue ) NAME returnValue ( INIT = VAR_4 ) INIT = VAR_4 ) VAR VAR ( IF IF ( COND ( returnValue == null ) || ( ! ( returnValue . getSucceeded ( ) ) ) ) COND ( returnValue == null ) || ( ! ( returnValue . getSucceeded ( ) ) ) ( THEN THEN (  VAR_2 = null )  VAR_2 = null (  VAR_1 . METHOD_3 ( ) )  VAR_1 . METHOD_3 ( ) ) THEN THEN ( ELSE ELSE (  METHOD_4 ( ) )  METHOD_4 ( ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) == null ) COND ( VAR_1 ) == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = model . METHOD_2 ( ) . METHOD_3 ( VAR_3 class ) . METHOD_4 ( ) ) INIT = model . METHOD_2 ( ) . METHOD_3 ( VAR_3 class ) . METHOD_4 ( ) ) VAR VAR ( IF IF ( COND VAR_2 == null ) COND VAR_2 == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  VAR_2 . METHOD_5 ( ) . METHOD_6 ( VAR_1 ) )  VAR_2 . METHOD_5 ( ) . METHOD_6 ( VAR_1 ) (  VAR_2 . METHOD_7 ( ) . METHOD_6 ( VAR_1 ) )  VAR_2 . METHOD_7 ( ) . METHOD_6 ( VAR_1 ) (  VAR_2 . METHOD_8 ( ) . METHOD_6 ( VAR_1 ) )  VAR_2 . METHOD_8 ( ) . METHOD_6 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.util.ArrayList<java.lang.String> ) TYPE java.util.ArrayList<java.lang.String> ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME result ) NAME result ( INIT = TYPE_2 . METHOD_1 ( VAR_1 , VAR_2 , VAR_4 ) ) INIT = TYPE_2 . METHOD_1 ( VAR_1 , VAR_2 , VAR_4 ) ) VAR VAR ( IF IF ( COND ! result ) COND ! result ( THEN THEN (  VAR_3 . add ( TYPE_3 . toString ( ) ) )  VAR_3 . add ( TYPE_3 . toString ( ) ) (  VAR_3 . add ( java.lang.String . METHOD_2 ( STRING_1 , TYPE_2 . METHOD_3 ( ) ) ) )  VAR_3 . add ( java.lang.String . METHOD_2 ( STRING_1 , TYPE_2 . METHOD_3 ( ) ) ) (  VAR_3 . add ( java.lang.String . METHOD_2 ( STRING_2 , TYPE_2 . METHOD_4 ( VAR_1 , VAR_4 ) ) ) )  VAR_3 . add ( java.lang.String . METHOD_2 ( STRING_2 , TYPE_2 . METHOD_4 ( VAR_1 , VAR_4 ) ) ) ) THEN THEN ) IF IF (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME type ) NAME type ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.ArrayList < TYPE_1 > ( ) ) INIT = new java.util.ArrayList < TYPE_1 > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME status ) NAME status ( INIT = VAR_3 . METHOD_2 ( ) ) INIT = VAR_3 . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND ( ( VAR_3 . METHOD_3 ( ) ) == type ) && ( ( ( VAR_4 ) == status ) || ( ( VAR_5 ) == status ) ) ) COND ( ( VAR_3 . METHOD_3 ( ) ) == type ) && ( ( ( VAR_4 ) == status ) || ( ( VAR_5 ) == status ) ) ( THEN THEN (  VAR_2 . add ( VAR_3 ) )  VAR_2 . add ( VAR_3 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( 1 ) )  METHOD_2 ( 1 ) (  resource . METHOD_3 ( METHOD_4 ( VAR_1 , VAR_2 class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 } , false , true , STRING_2 ) ) )  resource . METHOD_3 ( METHOD_4 ( VAR_1 , VAR_2 class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 } , false , true , STRING_2 ) ) ( TRY TRY ( BLOCK BLOCK (  resource . METHOD_5 ( TYPE_1 . getModel ( 0 ) ) )  resource . METHOD_5 ( TYPE_1 . getModel ( 0 ) ) (  METHOD_6 ( STRING_3 ) )  METHOD_6 ( STRING_3 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( BLOCK BLOCK (  METHOD_7 ( VAR_4 , STRING_2 , INT_1 ) )  METHOD_7 ( VAR_4 , STRING_2 , INT_1 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_2 ( ) )  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_2 ( ) (  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( command ) . METHOD_3 ( ) )  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( command ) . METHOD_3 ( ) (  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( command ) . METHOD_4 ( ) )  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( command ) . METHOD_4 ( ) (  org.mockito.Mockito.doReturn ( VAR_4 ) . when ( VAR_2 ) . METHOD_5 ( VAR_5 ) )  org.mockito.Mockito.doReturn ( VAR_4 ) . when ( VAR_2 ) . METHOD_5 ( VAR_5 ) (  org.mockito.Mockito.doReturn ( vds ) . when ( VAR_1 ) . get ( VAR_5 ) )  org.mockito.Mockito.doReturn ( vds ) . when ( VAR_1 ) . get ( VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = null ) INIT = null ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_2 = TYPE_3 . METHOD_1 ( VAR_1 ) )  VAR_2 = TYPE_3 . METHOD_1 ( VAR_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_3 ) NAME VAR_3 ( BLOCK BLOCK (  throw new TYPE_2 ( ( ( STRING_1 + ( VAR_1 . METHOD_2 ( ) ) ) + STRING_2 ) , VAR_3 ) ; )  throw new TYPE_2 ( ( ( STRING_1 + ( VAR_1 . METHOD_2 ( ) ) ) + STRING_2 ) , VAR_3 ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ( VAR VAR ( TYPE java.lang.Boolean ) TYPE java.lang.Boolean ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_2 . METHOD_3 ( VAR_5 ) ) INIT = VAR_2 . METHOD_3 ( VAR_5 ) ) VAR VAR ( IF IF ( COND ( VAR_4 != null ) && ( ! ( VAR_4 . METHOD_4 ( ) ) ) ) COND ( VAR_4 != null ) && ( ! ( VAR_4 . METHOD_4 ( ) ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  METHOD_5 ( VAR_2 ) )  METHOD_5 ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_6 ) NAME VAR_6 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_7 ) NAME VAR_7 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  this . VAR_1 = VAR_1 )  this . VAR_1 = VAR_1 (  this . VAR_7 = VAR_7 )  this . VAR_7 = VAR_7 (  METHOD_2 ( ) . METHOD_1 ( VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) )  METHOD_2 ( ) . METHOD_1 ( VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.uicommonweb.UICommand ) TYPE org.ovirt.engine.ui.uicommonweb.UICommand ( NAME command ) NAME command ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  super . METHOD_1 ( command ) )  super . METHOD_1 ( command ) ( IF IF ( COND TYPE_1 . METHOD_2 ( command . getName ( ) , STRING_1 ) ) COND TYPE_1 . METHOD_2 ( command . getName ( ) , STRING_1 ) ( THEN THEN (  METHOD_3 ( ) )  METHOD_3 ( ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND TYPE_1 . METHOD_2 ( command . getName ( ) , STRING_2 ) ) COND TYPE_1 . METHOD_2 ( command . getName ( ) , STRING_2 ) ( THEN THEN (  METHOD_4 ( ) )  METHOD_4 ( ) ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) )  METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) (  METHOD_4 ( METHOD_5 ( ) ) )  METHOD_4 ( METHOD_5 ( ) ) (  VAR_1 . METHOD_6 ( ) )  VAR_1 . METHOD_6 ( ) ( TRY TRY ( BLOCK BLOCK (  resource . METHOD_7 ( ) )  resource . METHOD_7 ( ) (  METHOD_8 ( STRING_1 ) )  METHOD_8 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( BLOCK BLOCK (  METHOD_9 ( VAR_2 . METHOD_10 ( ) ) )  METHOD_9 ( VAR_2 . METHOD_10 ( ) ) (  assertEquals ( INT_1 , VAR_2 . METHOD_10 ( ) . getStatus ( ) ) )  assertEquals ( INT_1 , VAR_2 . METHOD_10 ( ) . getStatus ( ) ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . get ( VAR_1 ) ) INIT = VAR_3 . get ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN ( IF IF ( COND ( VAR_4 . getSelectedItem ( ) ) == null ) COND ( VAR_4 . getSelectedItem ( ) ) == null ( THEN THEN (  VAR_2 . METHOD_2 ( ( ( org.ovirt.engine.core.common.businessentities.StorageDomain ) ( VAR_4 . getSelectedItem ( ) ) ) ) )  VAR_2 . METHOD_2 ( ( ( org.ovirt.engine.core.common.businessentities.StorageDomain ) ( VAR_4 . getSelectedItem ( ) ) ) ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( VAR_2 . METHOD_3 ( ) ) )  VAR_1 . METHOD_2 ( VAR_2 . METHOD_3 ( ) ) (  VAR_3 . METHOD_4 ( VAR_2 . METHOD_5 ( ) ) )  VAR_3 . METHOD_4 ( VAR_2 . METHOD_5 ( ) ) (  VAR_4 . METHOD_2 ( VAR_2 . METHOD_6 ( ) ) )  VAR_4 . METHOD_2 ( VAR_2 . METHOD_6 ( ) ) (  VAR_5 . METHOD_7 ( VAR_2 . METHOD_8 ( ) ) )  VAR_5 . METHOD_7 ( VAR_2 . METHOD_8 ( ) ) (  VAR_6 . METHOD_7 ( VAR_2 . METHOD_9 ( ) ) )  VAR_6 . METHOD_7 ( VAR_2 . METHOD_9 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME disk ) NAME disk ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME vmId ) NAME vmId ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( disk ) )  org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( disk ) (  TYPE_2 . METHOD_4 ( new TYPE_3 ( disk . getId ( ) , vmId ) , VAR_1 , VAR_2 , null , true , false ) )  TYPE_2 . METHOD_4 ( new TYPE_3 ( disk . getId ( ) , vmId ) , VAR_1 , VAR_2 , null , true , false ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME from ) NAME from ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME to ) NAME to ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR ( IF IF ( COND from . METHOD_2 ( ) ) COND from . METHOD_2 ( ) ( THEN THEN (  to . METHOD_3 ( from . METHOD_4 ( ) ) )  to . METHOD_3 ( from . METHOD_4 ( ) ) ) THEN THEN ) IF IF ( IF IF ( COND from . METHOD_5 ( ) ) COND from . METHOD_5 ( ) ( THEN THEN (  to . METHOD_6 ( TYPE_3 . METHOD_7 ( from . METHOD_8 ( ) ) ) )  to . METHOD_6 ( TYPE_3 . METHOD_7 ( from . METHOD_8 ( ) ) ) ) THEN THEN ) IF IF (  return to ; )  return to ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  dao . METHOD_2 ( VAR_1 ) )  dao . METHOD_2 ( VAR_1 ) (  VAR_1 . METHOD_3 ( STRING_1 ) )  VAR_1 . METHOD_3 ( STRING_1 ) (  dao . METHOD_4 ( VAR_1 ) )  dao . METHOD_4 ( VAR_1 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ( INIT = dao . get ( VAR_1 . getId ( ) , TYPE_2 . METHOD_5 ( ) ) ) INIT = dao . get ( VAR_1 . getId ( ) , TYPE_2 . METHOD_5 ( ) ) ) VAR VAR (  TYPE_3 . METHOD_6 ( result . equals ( VAR_1 ) ) )  TYPE_3 . METHOD_6 ( result . equals ( VAR_1 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . get ( VAR_1 ) ) INIT = VAR_3 . get ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN ( IF IF ( COND ( storage . getSelectedItem ( ) ) == null ) COND ( storage . getSelectedItem ( ) ) == null ( THEN THEN (  VAR_2 . METHOD_2 ( ( ( org.ovirt.engine.core.common.businessentities.StorageDomain ) ( storage . getSelectedItem ( ) ) ) ) )  VAR_2 . METHOD_2 ( ( ( org.ovirt.engine.core.common.businessentities.StorageDomain ) ( storage . getSelectedItem ( ) ) ) ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return METHOD_2 ( ) . addValue ( STRING_1 , VAR_1 . METHOD_3 ( ) ) . addValue ( STRING_2 , VAR_1 . METHOD_4 ( ) ) . addValue ( STRING_3 , VAR_1 . METHOD_5 ( ) ) . addValue ( STRING_4 , VAR_1 . METHOD_6 ( ) ) . addValue ( STRING_5 , VAR_1 . METHOD_7 ( ) ) . addValue ( STRING_6 , VAR_1 . METHOD_8 ( ) ) . addValue ( STRING_7 , VAR_1 . METHOD_9 ( ) ) ; )  return METHOD_2 ( ) . addValue ( STRING_1 , VAR_1 . METHOD_3 ( ) ) . addValue ( STRING_2 , VAR_1 . METHOD_4 ( ) ) . addValue ( STRING_3 , VAR_1 . METHOD_5 ( ) ) . addValue ( STRING_4 , VAR_1 . METHOD_6 ( ) ) . addValue ( STRING_5 , VAR_1 . METHOD_7 ( ) ) . addValue ( STRING_6 , VAR_1 . METHOD_8 ( ) ) . addValue ( STRING_7 , VAR_1 . METHOD_9 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME vds ) NAME vds ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return ( vds . METHOD_2 ( ) ) == ( VAR_1 ) ? 0 : ( ( VAR_2 < java.lang.Integer > METHOD_3 ( VAR_3 ) ) * ( VAR_2 < java.lang.Integer > METHOD_3 ( VAR_4 ) ) ) / ( vds . METHOD_4 ( ) ) ; )  return ( vds . METHOD_2 ( ) ) == ( VAR_1 ) ? 0 : ( ( VAR_2 < java.lang.Integer > METHOD_3 ( VAR_3 ) ) * ( VAR_2 < java.lang.Integer > METHOD_3 ( VAR_4 ) ) ) / ( vds . METHOD_4 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.when ( METHOD_2 ( ) . METHOD_3 ( ) ) . thenReturn ( null ) )  org.mockito.Mockito.when ( METHOD_2 ( ) . METHOD_3 ( ) ) . thenReturn ( null ) (  METHOD_4 ( ) . METHOD_5 ( ) )  METHOD_4 ( ) . METHOD_5 ( ) ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VmTemplate> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VmTemplate> ( NAME result ) NAME result ( INIT = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VmTemplate > ) ( METHOD_4 ( ) . METHOD_6 ( ) . getReturnValue ( ) ) ) ) INIT = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VmTemplate > ) ( METHOD_4 ( ) . METHOD_6 ( ) . getReturnValue ( ) ) ) ) VAR VAR (  TYPE_2 . assertEquals ( STRING_1 , 2 , result . size ( ) ) )  TYPE_2 . assertEquals ( STRING_1 , 2 , result . size ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) (  dao = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) )  dao = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) (  VAR_2 = new TYPE_1 ( ) )  VAR_2 = new TYPE_1 ( ) (  VAR_2 . setId ( VAR_3 ) )  VAR_2 . setId ( VAR_3 ) (  VAR_2 . METHOD_4 ( VAR_4 ) )  VAR_2 . METHOD_4 ( VAR_4 ) (  VAR_2 . METHOD_5 ( VAR_5 ) )  VAR_2 . METHOD_5 ( VAR_5 ) (  VAR_2 . METHOD_6 ( FLOAT_1 ) )  VAR_2 . METHOD_6 ( FLOAT_1 ) (  VAR_2 . METHOD_7 ( FLOAT_1 ) )  VAR_2 . METHOD_7 ( FLOAT_1 ) (  VAR_2 . METHOD_8 ( FLOAT_1 ) )  VAR_2 . METHOD_8 ( FLOAT_1 ) (  VAR_2 . METHOD_9 ( FLOAT_1 ) )  VAR_2 . METHOD_9 ( FLOAT_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ( NAME iface ) NAME iface ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  METHOD_3 ( iface , false , iface . METHOD_4 ( ) , iface . METHOD_5 ( ) , ( ( iface . METHOD_6 ( ) ) + 1 ) , iface . METHOD_7 ( ) , METHOD_8 ( ) ) )  METHOD_3 ( iface , false , iface . METHOD_4 ( ) , iface . METHOD_5 ( ) , ( ( iface . METHOD_6 ( ) ) + 1 ) , iface . METHOD_7 ( ) , METHOD_8 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StoragePool ) TYPE org.ovirt.engine.core.common.businessentities.StoragePool ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_2 ( ) . get ( VAR_3 ) ) INIT = VAR_2 . METHOD_2 ( ) . get ( VAR_3 ) ) VAR VAR (  TYPE_1 . METHOD_3 ( VAR_1 ) )  TYPE_1 . METHOD_3 ( VAR_1 ) ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ( INIT = VAR_1 . METHOD_4 ( ) ) INIT = VAR_1 . METHOD_4 ( ) ) VAR VAR (  TYPE_1 . METHOD_5 ( name . equals ( VAR_2 . METHOD_6 ( VAR_3 , VAR_4 . StoragePool ) ) ) )  TYPE_1 . METHOD_5 ( name . equals ( VAR_2 . METHOD_6 ( VAR_3 , VAR_4 . StoragePool ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN java.lang.String[] ) RETURN java.lang.String[] ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return new java.lang.String [ ] { java.lang.String . METHOD_2 ( STRING_1 , VAR_1 ) , java.lang.String . METHOD_2 ( STRING_2 , VAR_2 ) , java.lang.String . METHOD_2 ( STRING_3 , VAR_3 ) } ; )  return new java.lang.String [ ] { java.lang.String . METHOD_2 ( STRING_1 , VAR_1 ) , java.lang.String . METHOD_2 ( STRING_2 , VAR_2 ) , java.lang.String . METHOD_2 ( STRING_3 , VAR_3 ) } ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME list ) NAME list ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( IF IF ( COND METHOD_1 ( ) ) COND METHOD_1 ( ) ( THEN THEN (  VAR_1 = METHOD_2 ( METHOD_3 ( VAR_2 , METHOD_4 ( ) ) ) )  VAR_1 = METHOD_2 ( METHOD_3 ( VAR_2 , METHOD_4 ( ) ) ) ) THEN THEN ( ELSE ELSE (  VAR_1 = METHOD_2 ( METHOD_3 ( VAR_3 . Network ) ) )  VAR_1 = METHOD_2 ( METHOD_3 ( VAR_3 . Network ) ) ) ELSE ELSE ) IF IF ( FOR-EACH FOR-EACH ( TYPE TYPE_2.Network ) TYPE TYPE_2.Network ( NAME network ) NAME network ( IN VAR_1 . METHOD_5 ( ) ) IN VAR_1 . METHOD_5 ( ) ( BLOCK BLOCK (  network . METHOD_6 ( null ) )  network . METHOD_6 ( null ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1<TYPE_2> ) RETURN TYPE_1<TYPE_2> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1<TYPE_3> ) TYPE TYPE_1<TYPE_3> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME VAR_3 ) NAME VAR_3 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME user ) NAME user ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK (  VAR_3 . add ( TYPE_4 . METHOD_2 ( VAR_1 , user ) ) )  VAR_3 . add ( TYPE_4 . METHOD_2 ( VAR_1 , user ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_2 ) . METHOD_2 ( ) )  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_2 ) . METHOD_2 ( ) (  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_2 ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) ) )  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_2 ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) ) (  TYPE_2 . METHOD_5 ( cmd . METHOD_6 ( ) ) )  TYPE_2 . METHOD_5 ( cmd . METHOD_6 ( ) ) (  org.mockito.Mockito . METHOD_7 ( VAR_2 , org.mockito.Mockito . METHOD_8 ( VAR_3 ) ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) ) )  org.mockito.Mockito . METHOD_7 ( VAR_2 , org.mockito.Mockito . METHOD_8 ( VAR_3 ) ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) ) (  org.mockito.Mockito . METHOD_7 ( VAR_2 , org.mockito.Mockito . METHOD_9 ( ) ) . METHOD_10 ( TYPE_1 . METHOD_4 ( ) ) )  org.mockito.Mockito . METHOD_7 ( VAR_2 , org.mockito.Mockito . METHOD_9 ( ) ) . METHOD_10 ( TYPE_1 . METHOD_4 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( result . getReturnValue ( ) . getSucceeded ( ) ) ) COND ! ( result . getReturnValue ( ) . getSucceeded ( ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_2 ) ( result . METHOD_2 ( ) ) ) ) INIT = ( ( TYPE_2 ) ( result . METHOD_2 ( ) ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = result . getReturnValue ( ) ) INIT = result . getReturnValue ( ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME Guid ) NAME Guid ( INIT = ( ( org.ovirt.engine.core.compat.Guid ) ( VAR_2 . METHOD_3 ( ) ) ) ) INIT = ( ( org.ovirt.engine.core.compat.Guid ) ( VAR_2 . METHOD_3 ( ) ) ) ) VAR VAR (  VAR_1 . METHOD_4 ( Guid ) )  VAR_1 . METHOD_4 ( Guid ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( TYPE_3 . METHOD_2 ( VAR_2 . METHOD_3 ( ) ) , VAR_3 . METHOD_4 ( ) , VAR_3 . METHOD_5 ( ) , VAR_4 . METHOD_6 ( ) ) ) INIT = new TYPE_2 ( TYPE_3 . METHOD_2 ( VAR_2 . METHOD_3 ( ) ) , VAR_3 . METHOD_4 ( ) , VAR_3 . METHOD_5 ( ) , VAR_4 . METHOD_6 ( ) ) ) VAR VAR (  this . VAR_5 = VAR_1 )  this . VAR_5 = VAR_1 (  METHOD_7 ( VAR_1 ) )  METHOD_7 ( VAR_1 ) (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) ) INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . get ( METHOD_3 ( ) . getId ( ) ) ) INIT = VAR_1 . get ( METHOD_3 ( ) . getId ( ) ) ) VAR VAR (  VAR_2 . METHOD_4 ( METHOD_3 ( ) . METHOD_5 ( ) . METHOD_6 ( ) ) )  VAR_2 . METHOD_4 ( METHOD_3 ( ) . METHOD_5 ( ) . METHOD_6 ( ) ) (  VAR_1 . METHOD_7 ( VAR_2 ) )  VAR_1 . METHOD_7 ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ! ( METHOD_2 ( ) ) ) && ( ( ( METHOD_3 ( ) ) == null ) || ( ( TYPE_1 . METHOD_4 ( METHOD_3 ( ) ) ) == 0 ) ) ) INIT = ( ! ( METHOD_2 ( ) ) ) && ( ( ( METHOD_3 ( ) ) == null ) || ( ( TYPE_1 . METHOD_4 ( METHOD_3 ( ) ) ) == 0 ) ) ) VAR VAR (  METHOD_5 ( VAR_1 ) )  METHOD_5 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( parameters ) ) )  VAR_1 = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( parameters ) ) (  org.mockito.Mockito.when ( VAR_1 . getParameters ( ) ) . thenReturn ( parameters ) )  org.mockito.Mockito.when ( VAR_1 . getParameters ( ) ) . thenReturn ( parameters ) (  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( VAR_1 ) . METHOD_3 ( ) )  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( VAR_1 ) . METHOD_3 ( ) (  org.mockito.Mockito.when ( VAR_2 . get ( VAR_3 ) ) . thenReturn ( METHOD_4 ( VAR_3 ) ) )  org.mockito.Mockito.when ( VAR_2 . get ( VAR_3 ) ) . thenReturn ( METHOD_4 ( VAR_3 ) ) (  org.mockito.Mockito.when ( VAR_2 . get ( VAR_4 ) ) . thenReturn ( null ) )  org.mockito.Mockito.when ( VAR_2 . get ( VAR_4 ) ) . thenReturn ( null ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( VAR_2 . METHOD_3 ( STRING_1 ) ) ) INIT = TYPE_1 . METHOD_2 ( VAR_2 . METHOD_3 ( STRING_1 ) ) ) VAR VAR (  TYPE_2 . METHOD_4 ( STRING_2 , VAR_1 . METHOD_5 ( STRING_2 ) ) )  TYPE_2 . METHOD_4 ( STRING_2 , VAR_1 . METHOD_5 ( STRING_2 ) ) (  TYPE_2 . METHOD_4 ( STRING_3 , VAR_1 . METHOD_5 ( STRING_3 ) ) )  TYPE_2 . METHOD_4 ( STRING_3 , VAR_1 . METHOD_5 ( STRING_3 ) ) (  TYPE_2 . METHOD_4 ( ( ( VAR_2 . METHOD_3 ( STRING_4 ) . length ) == 0 ) ) )  TYPE_2 . METHOD_4 ( ( ( VAR_2 . METHOD_3 ( STRING_4 ) . length ) == 0 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.compat.Guid> ) TYPE java.util.List<org.ovirt.engine.core.compat.Guid> ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_1 . METHOD_2 ( VAR_1 ) ) INIT = TYPE_1 . METHOD_2 ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.compat.Guid> ) TYPE java.util.List<org.ovirt.engine.core.compat.Guid> ( NAME VAR_3 ) NAME VAR_3 ( INIT = new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( ) ) INIT = new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( ) ) VAR VAR (  VAR_3 . add ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( STRING_1 ) ) )  VAR_3 . add ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( STRING_1 ) ) (  TYPE_2 . assertEquals ( VAR_3 , VAR_2 ) )  TYPE_2 . assertEquals ( VAR_3 , VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) . METHOD_3 ( TYPE_1 . getParameters ( ) . getId ( ) , TYPE_1 . METHOD_4 ( ) , TYPE_1 . getParameters ( ) . METHOD_5 ( ) ) ) INIT = METHOD_2 ( ) . METHOD_3 ( TYPE_1 . getParameters ( ) . getId ( ) , TYPE_1 . METHOD_4 ( ) , TYPE_1 . getParameters ( ) . METHOD_5 ( ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_6 ( ) . METHOD_7 ( METHOD_8 ( ) ) . METHOD_9 ( TYPE_2 . METHOD_10 ( ) ) ) INIT = VAR_1 . METHOD_6 ( ) . METHOD_7 ( METHOD_8 ( ) ) . METHOD_9 ( TYPE_2 . METHOD_10 ( ) ) ) VAR VAR (  TYPE_1 . METHOD_11 ( ) . METHOD_12 ( VAR_2 ) )  TYPE_1 . METHOD_11 ( ) . METHOD_12 ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.String> ) TYPE java.util.Map<java.lang.String,java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 < > ( ) ) INIT = new TYPE_2 < > ( ) ) VAR VAR (  VAR_1 . put ( STRING_1 , STRING_2 ) )  VAR_1 . put ( STRING_1 , STRING_2 ) (  return new TYPE_1 ( new TYPE_3 ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) , VAR_2 ) , VAR_3 , STRING_3 , STRING_4 , 2 , new java.util.HashMap < java.lang.String , java.lang.Object > ( ) , true , false , false , STRING_5 , VAR_1 , null ) ; )  return new TYPE_1 ( new TYPE_3 ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) , VAR_2 ) , VAR_3 , STRING_3 , STRING_4 , 2 , new java.util.HashMap < java.lang.String , java.lang.Object > ( ) , true , false , false , STRING_5 , VAR_1 , null ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<TYPE_1> ) TYPE java.util.ArrayList<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_1 ( TYPE_2 . METHOD_2 ( ( ( java.util.ArrayList < TYPE_1 > ) ( result ) ) ) ) ) INIT = TYPE_2 . METHOD_1 ( TYPE_2 . METHOD_2 ( ( ( java.util.ArrayList < TYPE_1 > ) ( result ) ) ) ) ) VAR VAR (  VAR_1 . add ( 0 , null ) )  VAR_1 . add ( 0 , null ) (  METHOD_3 ( ) . setItems ( VAR_1 ) )  METHOD_3 ( ) . setItems ( VAR_1 ) (  METHOD_3 ( ) . setSelectedItem ( null ) )  METHOD_3 ( ) . setSelectedItem ( null ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( java.util.List < TYPE_1 > ) ( returnValue ) ) ) INIT = ( ( java.util.List < TYPE_1 > ) ( returnValue ) ) ) VAR VAR (  VAR_1 = ( VAR_1 != null ) ? VAR_1 : new java.util.ArrayList < TYPE_1 > ( ) )  VAR_1 = ( VAR_1 != null ) ? VAR_1 : new java.util.ArrayList < TYPE_1 > ( ) (  METHOD_1 ( ) . setItems ( VAR_1 ) )  METHOD_1 ( ) . setItems ( VAR_1 ) (  METHOD_1 ( ) . setSelectedItem ( TYPE_2 . METHOD_2 ( VAR_1 ) ) )  METHOD_1 ( ) . setSelectedItem ( TYPE_2 . METHOD_2 ( VAR_1 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( ) )  TYPE_1 . METHOD_2 ( ) ( IF IF ( COND ( TYPE_1 . getVm ( ) ) != null ) COND ( TYPE_1 . getVm ( ) ) != null ( THEN THEN (  TYPE_2 . METHOD_3 ( TYPE_1 . getVm ( ) . getId ( ) ) )  TYPE_2 . METHOD_3 ( TYPE_1 . getVm ( ) . getId ( ) ) (  TYPE_2 . METHOD_4 ( TYPE_1 . getVm ( ) ) )  TYPE_2 . METHOD_4 ( TYPE_1 . getVm ( ) ) ) THEN THEN ( ELSE ELSE (  TYPE_1 . METHOD_5 ( false ) )  TYPE_1 . METHOD_5 ( false ) (  log . METHOD_6 ( STRING_1 ) )  log . METHOD_6 ( STRING_1 ) ) ELSE ELSE ) IF IF (  TYPE_1 . METHOD_7 ( true ) )  TYPE_1 . METHOD_7 ( true ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( aQuery.converterCallback ) == null ) COND ( aQuery.converterCallback ) == null ( THEN THEN ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND source == null ) COND source == null ( THEN THEN (  return java.lang.Integer . valueOf ( 0 ) ; )  return java.lang.Integer . valueOf ( 0 ) ; ) THEN THEN ) IF IF (  return source ; )  return source ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return java.lang.Integer . valueOf ( 0 ) ; } return source ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return java.lang.Integer . valueOf ( 0 ) ; } return source ; } } ) THEN THEN ) IF IF (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ) TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( VAR_2 ) ) INIT = METHOD_2 ( VAR_2 ) ) VAR VAR (  VAR_1 . METHOD_3 ( VAR_3 ) )  VAR_1 . METHOD_3 ( VAR_3 ) ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ) TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_2 ( VAR_5 ) ) INIT = METHOD_2 ( VAR_5 ) ) VAR VAR (  VAR_4 . METHOD_3 ( VAR_3 ) )  VAR_4 . METHOD_3 ( VAR_3 ) (  VAR_4 . METHOD_4 ( VAR_6 ) )  VAR_4 . METHOD_4 ( VAR_6 ) (  METHOD_5 ( VAR_7 , VAR_8 ) )  METHOD_5 ( VAR_7 , VAR_8 ) (  METHOD_6 ( VAR_9 , org.ovirt.engine.core.compat.Guid . METHOD_7 ( ) , VAR_7 ) )  METHOD_6 ( VAR_9 , org.ovirt.engine.core.compat.Guid . METHOD_7 ( ) , VAR_7 ) (  TYPE_1 . METHOD_8 ( command , VAR_10 ) )  TYPE_1 . METHOD_8 ( command , VAR_10 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_4 < java.lang.Boolean > METHOD_2 ( VAR_5 ) ) COND VAR_4 < java.lang.Boolean > METHOD_2 ( VAR_5 ) ( THEN THEN (  VAR_6 . METHOD_3 ( STRING_1 ) )  VAR_6 . METHOD_3 ( STRING_1 ) ) THEN THEN ) IF IF ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME returnValue ) NAME returnValue ( INIT = true ) INIT = true ) VAR VAR ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  returnValue = METHOD_4 ( VAR_2 , VAR_3 ) )  returnValue = METHOD_4 ( VAR_2 , VAR_3 ) ) THEN THEN ( ELSE ELSE (  returnValue = METHOD_5 ( VAR_1 , VAR_3 ) )  returnValue = METHOD_5 ( VAR_1 , VAR_3 ) ) ELSE ELSE ) IF IF ( IF IF ( COND VAR_4 < java.lang.Boolean > METHOD_2 ( VAR_5 ) ) COND VAR_4 < java.lang.Boolean > METHOD_2 ( VAR_5 ) ( THEN THEN (  VAR_6 . METHOD_3 ( STRING_2 , returnValue ) )  VAR_6 . METHOD_3 ( STRING_2 , returnValue ) ) THEN THEN ) IF IF (  return returnValue ; )  return returnValue ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME getName ) NAME getName ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME item ) NAME item ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_3 ( ) ) INIT = new TYPE_3 ( ) ) VAR VAR (  VAR_1 . append ( super . getName ( item ) ) )  VAR_1 . append ( super . getName ( item ) ) (  VAR_1 . METHOD_1 ( STRING_1 ) )  VAR_1 . METHOD_1 ( STRING_1 ) (  VAR_1 . METHOD_1 ( item . METHOD_2 ( ) ) )  VAR_1 . METHOD_1 ( item . METHOD_2 ( ) ) (  VAR_1 . METHOD_1 ( STRING_2 ) )  VAR_1 . METHOD_1 ( STRING_2 ) (  return VAR_1 . METHOD_3 ( ) ; )  return VAR_1 . METHOD_3 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME add ) NAME add ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_1 ( VAR_1 ) )  METHOD_1 ( VAR_1 ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME parameters ) NAME parameters ( INIT = new TYPE_3 ( ) ) INIT = new TYPE_3 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME map ) NAME map ( INIT = map ( VAR_1 ) ) INIT = map ( VAR_1 ) ) VAR VAR (  parameters . METHOD_2 ( map ) )  parameters . METHOD_2 ( map ) (  return METHOD_3 ( VAR_2 , parameters , new TYPE_4 < org.ovirt.engine.core.compat.Guid > ( VAR_3 , VAR_4 . IdQueryParameters class ) ) ; )  return METHOD_3 ( VAR_2 , parameters , new TYPE_4 < org.ovirt.engine.core.compat.Guid > ( VAR_3 , VAR_4 . IdQueryParameters class ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_2 . METHOD_2 ( ) ) INIT = VAR_2 . METHOD_2 ( ) ) VAR VAR (  return ( ( ( ( VAR_3 != null ) && ( ( VAR_3 . getStatus ( ) ) != ( VAR_4 ) ) ) && ( ( VAR_3 . METHOD_3 ( ) ) != null ) ) && ( VAR_1 != null ) ) && ( ! ( TYPE_3 . equals ( VAR_1 . METHOD_3 ( ) , VAR_3 . METHOD_3 ( ) ) ) ) ; )  return ( ( ( ( VAR_3 != null ) && ( ( VAR_3 . getStatus ( ) ) != ( VAR_4 ) ) ) && ( ( VAR_3 . METHOD_3 ( ) ) != null ) ) && ( VAR_1 != null ) ) && ( ! ( TYPE_3 . equals ( VAR_1 . METHOD_3 ( ) , VAR_3 . METHOD_3 ( ) ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ) )  METHOD_2 ( new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = org.mockito.Mockito . METHOD_3 ( VAR_2 class ) ) INIT = org.mockito.Mockito . METHOD_3 ( VAR_2 class ) ) VAR VAR (  org.mockito.Mockito.when ( VAR_1 . METHOD_4 ( METHOD_5 ( ) . getStoragePoolId ( ) , VAR_3 ) ) . thenReturn ( VAR_4 ) )  org.mockito.Mockito.when ( VAR_1 . METHOD_4 ( METHOD_5 ( ) . getStoragePoolId ( ) , VAR_3 ) ) . thenReturn ( VAR_4 ) (  org.mockito.Mockito.when ( METHOD_6 ( ) . METHOD_7 ( ) ) . thenReturn ( VAR_1 ) )  org.mockito.Mockito.when ( METHOD_6 ( ) . METHOD_7 ( ) ) . thenReturn ( VAR_1 ) (  TYPE_2 . assertEquals ( STRING_1 , VAR_4 , METHOD_8 ( ) . METHOD_9 ( ) ) )  TYPE_2 . assertEquals ( STRING_1 , VAR_4 , METHOD_8 ( ) . METHOD_9 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) (  dao = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) )  dao = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) (  cluster = new org.ovirt.engine.core.compat.Guid ( STRING_1 ) )  cluster = new org.ovirt.engine.core.compat.Guid ( STRING_1 ) (  VAR_2 = new org.ovirt.engine.core.compat.Guid ( STRING_2 ) )  VAR_2 = new org.ovirt.engine.core.compat.Guid ( STRING_2 ) (  VAR_3 = new org.ovirt.engine.core.common.businessentities.network.Network ( ) )  VAR_3 = new org.ovirt.engine.core.common.businessentities.network.Network ( ) (  VAR_3 . METHOD_4 ( STRING_3 ) )  VAR_3 . METHOD_4 ( STRING_3 ) (  VAR_3 . METHOD_5 ( STRING_4 ) )  VAR_3 . METHOD_5 ( STRING_4 ) (  VAR_3 . METHOD_6 ( VAR_2 ) )  VAR_3 . METHOD_6 ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.when ( cluster . METHOD_2 ( ) ) . thenReturn ( org.mockito.Mockito . METHOD_3 ( VAR_1 . Version class ) ) )  org.mockito.Mockito.when ( cluster . METHOD_2 ( ) ) . thenReturn ( org.mockito.Mockito . METHOD_3 ( VAR_1 . Version class ) ) (  validator = org.mockito.Mockito . METHOD_4 ( new TYPE_1 ( VAR_2 , cluster , VAR_3 ) ) )  validator = org.mockito.Mockito . METHOD_4 ( new TYPE_1 ( VAR_2 , cluster , VAR_3 ) ) (  org.mockito.Mockito.doReturn ( false ) . when ( validator ) . METHOD_5 ( TYPE_2 . any ( VAR_4 class ) ) )  org.mockito.Mockito.doReturn ( false ) . when ( validator ) . METHOD_5 ( TYPE_2 . any ( VAR_4 class ) ) (  TYPE_3 . METHOD_6 ( validator . METHOD_7 ( TYPE_4 . instance ( ) . METHOD_8 ( VAR_4 class ) ) , TYPE_5 . METHOD_9 ( VAR_5 ) ) )  TYPE_3 . METHOD_6 ( validator . METHOD_7 ( TYPE_4 . instance ( ) . METHOD_8 ( VAR_4 class ) ) , TYPE_5 . METHOD_9 ( VAR_5 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  dao . METHOD_2 ( VAR_1 ) )  dao . METHOD_2 ( VAR_1 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ( INIT = dao . get ( VAR_1 . getId ( ) , TYPE_2 . METHOD_3 ( ) ) ) INIT = dao . get ( VAR_1 . getId ( ) , TYPE_2 . METHOD_3 ( ) ) ) VAR VAR (  TYPE_3 . METHOD_4 ( result . equals ( VAR_1 ) ) )  TYPE_3 . METHOD_4 ( result . equals ( VAR_1 ) ) (  dao . METHOD_5 ( VAR_1 . getId ( ) ) )  dao . METHOD_5 ( VAR_1 . getId ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME iface ) NAME iface ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) . get ( iface . getName ( ) ) ) INIT = METHOD_2 ( ) . get ( iface . getName ( ) ) ) VAR VAR ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF (  return ( ( ! ( TYPE_1 . equals ( iface . METHOD_3 ( ) , VAR_1 . METHOD_3 ( ) ) ) ) || ( ( iface . METHOD_4 ( ) ) != ( VAR_1 . METHOD_4 ( ) ) ) ) || ( METHOD_5 ( iface , VAR_1 ) ) ; )  return ( ( ! ( TYPE_1 . equals ( iface . METHOD_3 ( ) , VAR_1 . METHOD_3 ( ) ) ) ) || ( ( iface . METHOD_4 ( ) ) != ( VAR_1 . METHOD_4 ( ) ) ) ) || ( METHOD_5 ( iface , VAR_1 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.when ( METHOD_2 ( ) . METHOD_3 ( ) ) . thenReturn ( VAR_1 ) )  org.mockito.Mockito.when ( METHOD_2 ( ) . METHOD_3 ( ) ) . thenReturn ( VAR_1 ) (  VAR_2 = new java.util.ArrayList < TYPE_1 > ( ) )  VAR_2 = new java.util.ArrayList < TYPE_1 > ( ) (  org.mockito.Mockito.when ( METHOD_4 ( ) . METHOD_5 ( ) ) . thenReturn ( VAR_3 ) )  org.mockito.Mockito.when ( METHOD_4 ( ) . METHOD_5 ( ) ) . thenReturn ( VAR_3 ) (  org.mockito.Mockito.when ( METHOD_4 ( ) . getStoragePoolId ( ) ) . thenReturn ( VAR_4 ) )  org.mockito.Mockito.when ( METHOD_4 ( ) . getStoragePoolId ( ) ) . thenReturn ( VAR_4 ) (  org.mockito.Mockito.when ( VAR_1 . METHOD_6 ( VAR_3 , VAR_4 ) ) . thenReturn ( VAR_2 ) )  org.mockito.Mockito.when ( VAR_1 . METHOD_6 ( VAR_3 , VAR_4 ) ) . thenReturn ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) == null ) COND ( VAR_1 ) == null ( THEN THEN ( SYNCHRONIZED SYNCHRONIZED (  this )  this ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) == null ) COND ( VAR_1 ) == null ( THEN THEN (  VAR_1 = new java.util.ArrayList < TYPE_1 > ( 1 ) )  VAR_1 = new java.util.ArrayList < TYPE_1 > ( 1 ) ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( IN TYPE_2 . getInstance ( ) . METHOD_2 ( ) ) IN TYPE_2 . getInstance ( ) . METHOD_2 ( ) ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_2 . METHOD_3 ( ) ) INIT = VAR_2 . METHOD_3 ( ) ) VAR VAR ( IF IF ( COND VAR_3 instanceof TYPE_4 ) COND VAR_3 instanceof TYPE_4 ( THEN THEN (  VAR_1 . add ( 0 , VAR_2 ) )  VAR_1 . add ( 0 , VAR_2 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ( INIT = new org.ovirt.engine.core.compat.Guid ( STRING_1 ) ) INIT = new org.ovirt.engine.core.compat.Guid ( STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ( INIT = new org.ovirt.engine.core.compat.Guid ( STRING_2 ) ) INIT = new org.ovirt.engine.core.compat.Guid ( STRING_2 ) ) VAR VAR (  TYPE_1 . METHOD_2 ( ( ( VAR_1 . METHOD_3 ( VAR_2 ) ) < 0 ) ) )  TYPE_1 . METHOD_2 ( ( ( VAR_1 . METHOD_3 ( VAR_2 ) ) < 0 ) ) (  TYPE_1 . METHOD_2 ( ( ( VAR_1 . METHOD_3 ( VAR_1 ) ) == 0 ) ) )  TYPE_1 . METHOD_2 ( ( ( VAR_1 . METHOD_3 ( VAR_1 ) ) == 0 ) ) (  TYPE_1 . METHOD_2 ( ( ( VAR_2 . METHOD_3 ( VAR_1 ) ) > 0 ) ) )  TYPE_1 . METHOD_2 ( ( ( VAR_2 . METHOD_3 ( VAR_1 ) ) > 0 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<java.lang.String> ) RETURN TYPE_1<java.lang.String> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<java.lang.String> ) TYPE TYPE_1<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 < > ( ) ) INIT = new TYPE_2 < > ( ) ) VAR VAR (  VAR_1 . METHOD_2 ( ) )  VAR_1 . METHOD_2 ( ) ( FOR-EACH FOR-EACH ( TYPE TYPE_3<java.lang.String> ) TYPE TYPE_3<java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ( IN METHOD_3 ( ) ) IN METHOD_3 ( ) ( BLOCK BLOCK (  VAR_1 . add ( VAR_2 . getSelectedItem ( ) ) )  VAR_1 . add ( VAR_2 . getSelectedItem ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  org.mockito.Mockito.doReturn ( java.lang.Boolean . FALSE ) . when ( cmd ) . METHOD_3 ( VAR_1 ) )  org.mockito.Mockito.doReturn ( java.lang.Boolean . FALSE ) . when ( cmd ) . METHOD_3 ( VAR_1 ) (  org.mockito.Mockito.doReturn ( TYPE_1 . METHOD_4 ( ) ) . when ( cmd ) . METHOD_5 ( ) )  org.mockito.Mockito.doReturn ( TYPE_1 . METHOD_4 ( ) ) . when ( cmd ) . METHOD_5 ( ) (  TYPE_2 . METHOD_6 ( cmd . validate ( ) ) )  TYPE_2 . METHOD_6 ( cmd . validate ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = INT_1 ) INIT = INT_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = 0 ) INIT = 0 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_2 ( VAR_1 , VAR_2 ) ) INIT = METHOD_2 ( VAR_1 , VAR_2 ) ) VAR VAR (  TYPE_2 . METHOD_3 ( VAR_3 . METHOD_4 ( ) ) )  TYPE_2 . METHOD_3 ( VAR_3 . METHOD_4 ( ) ) (  TYPE_2 . METHOD_5 ( VAR_3 . getReturnValue ( ) . METHOD_6 ( ) . METHOD_7 ( TYPE_3 . toString ( ) ) ) )  TYPE_2 . METHOD_5 ( VAR_3 . getReturnValue ( ) . METHOD_6 ( ) . METHOD_7 ( TYPE_3 . toString ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME vmId ) NAME vmId ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( java.util.List < java.lang.String > ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ) INIT = ( ( java.util.List < java.lang.String > ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ) VAR VAR (  getModel ( ) . METHOD_2 ( ) . setEntity ( ( ! ( VAR_2 . isEmpty ( ) ) ) ) )  getModel ( ) . METHOD_2 ( ) . setEntity ( ( ! ( VAR_2 . isEmpty ( ) ) ) ) ) BLOCK BLOCK ) METHOD METHOD (  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) , new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.util.List < java.lang.String > VAR_2 = ( ( java.util.List < java.lang.String > ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ; getModel ( ) . METHOD_2 ( ) . setEntity ( ( ! ( VAR_2 . isEmpty ( ) ) ) ) ; } } ) ) )  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) , new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.util.List < java.lang.String > VAR_2 = ( ( java.util.List < java.lang.String > ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ; getModel ( ) . METHOD_2 ( ) . setEntity ( ( ! ( VAR_2 . isEmpty ( ) ) ) ) ; } } ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<TYPE_2>.TYPE_3 ) TYPE TYPE_1<TYPE_2>.TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_3 ( ) ) INIT = new TYPE_3 ( ) ) VAR VAR ( VAR VAR ( TYPE java.util.ArrayList<TYPE_4.VdcActionParametersBase> ) TYPE java.util.ArrayList<TYPE_4.VdcActionParametersBase> ( NAME parameters ) NAME parameters ( INIT = VAR_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( ) , METHOD_4 ( ) ) ) INIT = VAR_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( ) , METHOD_4 ( ) ) ) VAR VAR ( IF IF ( COND ! ( parameters . isEmpty ( ) ) ) COND ! ( parameters . isEmpty ( ) ) ( THEN THEN (  TYPE_5 . METHOD_5 ( parameters ) )  TYPE_5 . METHOD_5 ( parameters ) (  TYPE_1 . METHOD_6 ( ) . METHOD_7 ( VAR_2 , parameters ) )  TYPE_1 . METHOD_6 ( ) . METHOD_7 ( VAR_2 , parameters ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN ( VAR VAR ( TYPE org.ovirt.engine.ui.uicommonweb.UICommand ) TYPE org.ovirt.engine.ui.uicommonweb.UICommand ( NAME VAR_2 ) NAME VAR_2 ( INIT = new org.ovirt.engine.ui.uicommonweb.UICommand ( VAR_3 , this ) ) INIT = new org.ovirt.engine.ui.uicommonweb.UICommand ( VAR_3 , this ) ) VAR VAR (  VAR_2 . setTitle ( VAR_4 ) )  VAR_2 . setTitle ( VAR_4 ) (  VAR_2 . METHOD_2 ( VAR_1 ) )  VAR_2 . METHOD_2 ( VAR_1 ) (  METHOD_3 ( ) . add ( VAR_2 ) )  METHOD_3 ( ) . add ( VAR_2 ) ) THEN THEN ( ELSE ELSE (  METHOD_4 ( new org.ovirt.engine.ui.uicommonweb.models.EntityModel < java.lang.String > ( VAR_5 ) ) )  METHOD_4 ( new org.ovirt.engine.ui.uicommonweb.models.EntityModel < java.lang.String > ( VAR_5 ) ) ) ELSE ELSE ) IF IF (  METHOD_5 ( ) )  METHOD_5 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( ) ) ) . thenReturn ( new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ) )  org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( ) ) ) . thenReturn ( new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ) ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR (  VAR_2 . add ( TYPE_2 . METHOD_2 ( ) ) )  VAR_2 . add ( TYPE_2 . METHOD_2 ( ) ) (  org.mockito.Mockito.when ( VAR_1 . METHOD_3 ( TYPE_1 . METHOD_4 ( ) , TYPE_1 . METHOD_5 ( ) ) ) . thenReturn ( new java.util.ArrayList ( VAR_2 ) ) )  org.mockito.Mockito.when ( VAR_1 . METHOD_3 ( TYPE_1 . METHOD_4 ( ) , TYPE_1 . METHOD_5 ( ) ) ) . thenReturn ( new java.util.ArrayList ( VAR_2 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.doReturn ( METHOD_2 ( ) ) . when ( VAR_1 ) . METHOD_3 ( VAR_2 [ 1 ] ) )  org.mockito.Mockito.doReturn ( METHOD_2 ( ) ) . when ( VAR_1 ) . METHOD_3 ( VAR_2 [ 1 ] ) (  METHOD_4 ( ) )  METHOD_4 ( ) (  VAR_3 . METHOD_5 ( ) )  VAR_3 . METHOD_5 ( ) (  org.mockito.Mockito . METHOD_6 ( VAR_4 , org.mockito.Mockito . METHOD_7 ( 2 ) ) . METHOD_8 ( TYPE_1 . any ( ) , TYPE_1 . any ( ) , TYPE_1 . METHOD_9 ( ) ) )  org.mockito.Mockito . METHOD_6 ( VAR_4 , org.mockito.Mockito . METHOD_7 ( 2 ) ) . METHOD_8 ( TYPE_1 . any ( ) , TYPE_1 . any ( ) , TYPE_1 . METHOD_9 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) ( IF IF ( COND this . VAR_1 . get ( ) ) COND this . VAR_1 . get ( ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  METHOD_3 ( ) )  METHOD_3 ( ) ( IF IF ( COND this . VAR_1 . get ( ) ) COND this . VAR_1 . get ( ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  METHOD_4 ( ) )  METHOD_4 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StoragePool ) TYPE org.ovirt.engine.core.common.businessentities.StoragePool ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) . getSelectedItem ( ) ) INIT = METHOD_2 ( ) . getSelectedItem ( ) ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( getVm ( ) ) != null ) INIT = ( getVm ( ) ) != null ) VAR VAR ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  METHOD_3 ( VAR_1 ) )  METHOD_3 ( VAR_1 ) (  METHOD_4 ( VAR_1 ) )  METHOD_4 ( VAR_1 ) (  METHOD_5 ( ( VAR_2 ? getVm ( ) . METHOD_6 ( ) : null ) ) )  METHOD_5 ( ( VAR_2 ? getVm ( ) . METHOD_6 ( ) : null ) ) ( IF IF ( COND ( METHOD_7 ( ) . getEntity ( ) ) == ( VAR_3 ) ) COND ( METHOD_7 ( ) . getEntity ( ) ) == ( VAR_3 ) ( THEN THEN (  METHOD_8 ( VAR_1 ) )  METHOD_8 ( VAR_1 ) ) THEN THEN ( ELSE ELSE (  METHOD_9 ( VAR_1 ) )  METHOD_9 ( VAR_1 ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME value ) NAME value ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME VAR_1 ) NAME VAR_1 ( INIT = value . METHOD_2 ( STRING_1 ) ) INIT = value . METHOD_2 ( STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME list ) NAME list ( INIT = new java.util.ArrayList < java.lang.String > ( ) ) INIT = new java.util.ArrayList < java.lang.String > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME item ) NAME item ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  list . add ( item ) )  list . add ( item ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  METHOD_3 ( ) . setItems ( list ) )  METHOD_3 ( ) . setItems ( list ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 ( VAR_1 ) ) INIT = new TYPE_2 ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_3 ( VAR_2 ) ) INIT = new TYPE_3 ( VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_3 . METHOD_2 ( ) ) INIT = VAR_3 . METHOD_2 ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_2 . METHOD_3 ( ) )  VAR_2 . METHOD_3 ( ) (  VAR_3 . METHOD_3 ( ) )  VAR_3 . METHOD_3 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  return VAR_4 ; )  return VAR_4 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StoragePool ) TYPE org.ovirt.engine.core.common.businessentities.StoragePool ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( VAR_1 != null ) && ( ( VAR_1 . METHOD_2 ( ) ) == ( VAR_2 ) ) ) && ( ( VAR_1 . METHOD_3 ( ) ) == ( VAR_3 ) ) ) COND ( ( VAR_1 != null ) && ( ( VAR_1 . METHOD_2 ( ) ) == ( VAR_2 ) ) ) && ( ( VAR_1 . METHOD_3 ( ) ) == ( VAR_3 ) ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Version ) TYPE org.ovirt.engine.core.compat.Version ( NAME version ) NAME version ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 = METHOD_2 ( VAR_2 , VAR_3 , version ) )  VAR_1 = METHOD_2 ( VAR_2 , VAR_3 , version ) (  VAR_4 = METHOD_2 ( VAR_5 , VAR_6 , version ) )  VAR_4 = METHOD_2 ( VAR_5 , VAR_6 , version ) (  VAR_7 . add ( VAR_1 ) )  VAR_7 . add ( VAR_1 ) (  VAR_7 . add ( VAR_4 ) )  VAR_7 . add ( VAR_4 ) (  VAR_7 . add ( METHOD_2 ( VAR_8 , VAR_9 , version ) ) )  VAR_7 . add ( METHOD_2 ( VAR_8 , VAR_9 , version ) ) (  VAR_10 = METHOD_3 ( VAR_11 , VAR_12 ) )  VAR_10 = METHOD_3 ( VAR_11 , VAR_12 ) (  VAR_13 = METHOD_4 ( ) )  VAR_13 = METHOD_4 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2<?extendsTYPE_3> ) TYPE TYPE_2<?extendsTYPE_3> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_4 < TYPE_3 > ( TYPE_5 . METHOD_2 ( VAR_2 ) ) ) INIT = new TYPE_4 < TYPE_3 > ( TYPE_5 . METHOD_2 ( VAR_2 ) ) ) VAR VAR (  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_2 ) . METHOD_3 ( ) )  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_2 ) . METHOD_3 ( ) (  org.mockito.Mockito.when ( VAR_2 . METHOD_4 ( ) ) . thenReturn ( new TYPE_6 [ ] { VAR_3 } ) )  org.mockito.Mockito.when ( VAR_2 . METHOD_4 ( ) ) . thenReturn ( new TYPE_6 [ ] { VAR_3 } ) (  VAR_4 . METHOD_5 ( VAR_5 , new java.util.ArrayList < TYPE_3 > ( ) , STRING_1 , STRING_2 ) )  VAR_4 . METHOD_5 ( VAR_5 , new java.util.ArrayList < TYPE_3 > ( ) , STRING_1 , STRING_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) . METHOD_3 ( ( ( METHOD_4 ( ) . getSelectedItem ( ) . METHOD_5 ( ) ) && ( ( VAR_1 . METHOD_6 ( METHOD_7 ( ) . getSelectedItem ( ) . METHOD_8 ( ) ) ) >= 0 ) ) ) )  METHOD_2 ( ) . METHOD_3 ( ( ( METHOD_4 ( ) . getSelectedItem ( ) . METHOD_5 ( ) ) && ( ( VAR_1 . METHOD_6 ( METHOD_7 ( ) . getSelectedItem ( ) . METHOD_8 ( ) ) ) >= 0 ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) RETURN org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME entity ) NAME entity ( INIT = new org.ovirt.engine.core.common.businessentities . VdsNetworkInterface ( ) ) INIT = new org.ovirt.engine.core.common.businessentities . VdsNetworkInterface ( ) ) VAR VAR (  entity . setId ( VAR_1 ) )  entity . setId ( VAR_1 ) (  entity . METHOD_2 ( VAR_2 ) )  entity . METHOD_2 ( VAR_2 ) (  entity . METHOD_3 ( VAR_3 ) )  entity . METHOD_3 ( VAR_3 ) (  entity . METHOD_4 ( true ) )  entity . METHOD_4 ( true ) (  entity . METHOD_5 ( VAR_4 ) )  entity . METHOD_5 ( VAR_4 ) (  return TYPE_1 . METHOD_6 ( entity , VAR_1 ) ; )  return TYPE_1 . METHOD_6 ( entity , VAR_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( VAR_1 ) ) INIT = METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND ( VAR_2 != null ) && ( VAR_2 . METHOD_3 ( VAR_3 ) ) ) COND ( VAR_2 != null ) && ( VAR_2 . METHOD_3 ( VAR_3 ) ) ( THEN THEN ( IF IF ( COND ( VAR_2 . METHOD_4 ( ) ) == null ) COND ( VAR_2 . METHOD_4 ( ) ) == null ( THEN THEN (  VAR_4 . METHOD_5 ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) ) )  VAR_4 . METHOD_5 ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) ) (  return ; )  return ; ) THEN THEN ) IF IF (  VAR_2 . METHOD_6 ( ) )  VAR_2 . METHOD_6 ( ) (  VAR_4 . METHOD_7 ( ( ( STRING_1 + VAR_1 ) + STRING_3 ) ) )  VAR_4 . METHOD_7 ( ( ( STRING_1 + VAR_1 ) + STRING_3 ) ) (  METHOD_8 ( VAR_1 ) )  METHOD_8 ( VAR_1 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source != null ? new java.util.ArrayList < java.lang.String > ( ( ( java.util.ArrayList < java.lang.String > ) ( source ) ) ) : new java.util.ArrayList < java.lang.String > ( ) ; )  return source != null ? new java.util.ArrayList < java.lang.String > ( ( ( java.util.ArrayList < java.lang.String > ) ( source ) ) ) : new java.util.ArrayList < java.lang.String > ( ) ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? new java.util.ArrayList < java.lang.String > ( ( ( java.util.ArrayList < java.lang.String > ) ( source ) ) ) : new java.util.ArrayList < java.lang.String > ( ) ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? new java.util.ArrayList < java.lang.String > ( ( ( java.util.ArrayList < java.lang.String > ) ( source ) ) ) : new java.util.ArrayList < java.lang.String > ( ) ; } } (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new TYPE_1 ( ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new TYPE_1 ( ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME model ) NAME model ( INIT = ( ( TYPE_2 ) ( target ) ) ) INIT = ( ( TYPE_2 ) ( target ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( java.util.List < java.lang.String > ) ( returnValue ) ) ) INIT = ( ( java.util.List < java.lang.String > ) ( returnValue ) ) ) VAR VAR (  METHOD_3 ( model , VAR_2 ) )  METHOD_3 ( model , VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD (  TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( getModel ( ) , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_2 model = ( ( TYPE_2 ) ( target ) ) ; java.util.List < java.lang.String > VAR_2 = ( ( java.util.List < java.lang.String > ) ( returnValue ) ) ; METHOD_3 ( model , VAR_2 ) ; } } ) , VAR_1 ) )  TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( getModel ( ) , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_2 model = ( ( TYPE_2 ) ( target ) ) ; java.util.List < java.lang.String > VAR_2 = ( ( java.util.List < java.lang.String > ) ( returnValue ) ) ; METHOD_3 ( model , VAR_2 ) ; } } ) , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( VAR_2 . Guid class ) ) ) . thenReturn ( new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ) )  org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( VAR_2 . Guid class ) ) ) . thenReturn ( new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ) ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> ( NAME VAR_3 ) NAME VAR_3 ( INIT = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ( ) ) INIT = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ( ) ) VAR VAR (  VAR_3 . add ( TYPE_2 . METHOD_2 ( ) ) )  VAR_3 . add ( TYPE_2 . METHOD_2 ( ) ) (  org.mockito.Mockito.when ( VAR_1 . METHOD_3 ( TYPE_1 . METHOD_4 ( ) , TYPE_1 . METHOD_5 ( ) ) ) . thenReturn ( new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ( VAR_3 ) ) )  org.mockito.Mockito.when ( VAR_1 . METHOD_3 ( TYPE_1 . METHOD_4 ( ) , TYPE_1 . METHOD_5 ( ) ) ) . thenReturn ( new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ( VAR_3 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 < java.lang.String > getValue ( VAR_3 ) ) INIT = VAR_2 < java.lang.String > getValue ( VAR_3 ) ) VAR VAR ( IF IF ( COND ( VAR_1 . METHOD_2 ( ) . length ( ) ) == 0 ) COND ( VAR_1 . METHOD_2 ( ) . length ( ) ) == 0 ( THEN THEN (  VAR_4 . METHOD_3 ( ) )  VAR_4 . METHOD_3 ( ) ) THEN THEN ( ELSE ELSE (  VAR_4 . METHOD_4 ( VAR_5 , VAR_1 ) )  VAR_4 . METHOD_4 ( VAR_5 , VAR_1 ) ) ELSE ELSE ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_1 ) ( target ) ) ) INIT = ( ( TYPE_1 ) ( target ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( java.util.ArrayList < TYPE_2 > ) ( returnValue ) ) ) INIT = ( ( java.util.ArrayList < TYPE_2 > ) ( returnValue ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_3 ) NAME VAR_3 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK (  VAR_3 . add ( VAR_4 . getName ( ) ) )  VAR_3 . add ( VAR_4 . getName ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  VAR_1 . METHOD_1 ( ) . setItems ( VAR_3 ) )  VAR_1 . METHOD_1 ( ) . setItems ( VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME vds ) NAME vds ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = null ) INIT = null ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_1 = new TYPE_1 ( vds . METHOD_2 ( ) , STRING_1 , true ) )  VAR_1 = new TYPE_1 ( vds . METHOD_2 ( ) , STRING_1 , true ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_2 . METHOD_3 ( STRING_2 , vds . getId ( ) , vds . getName ( ) , vds . METHOD_2 ( ) , TYPE_3 . METHOD_4 ( e ) ) )  VAR_2 . METHOD_3 ( STRING_2 , vds . getId ( ) , vds . getName ( ) , vds . METHOD_2 ( ) , TYPE_3 . METHOD_4 ( e ) ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.Network ) TYPE org.ovirt.engine.core.common.businessentities.Network ( NAME network ) NAME network ( INIT = VAR_1 . METHOD_2 ( ) . get ( VAR_2 ) ) INIT = VAR_1 . METHOD_2 ( ) . get ( VAR_2 ) ) VAR VAR (  TYPE_1 . METHOD_3 ( network ) )  TYPE_1 . METHOD_3 ( network ) ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ( INIT = network . getName ( ) ) INIT = network . getName ( ) ) VAR VAR (  TYPE_1 . METHOD_4 ( name . equals ( VAR_1 . METHOD_5 ( VAR_2 , VAR_3 . Network ) ) ) )  TYPE_1 . METHOD_4 ( name . equals ( VAR_1 . METHOD_5 ( VAR_2 , VAR_3 . Network ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_2 ) ( VAR_1 . METHOD_2 ( ) ) ) ) INIT = ( ( TYPE_2 ) ( VAR_1 . METHOD_2 ( ) ) ) ) VAR VAR (  VAR_2 . getWindow ( ) . METHOD_3 ( ) )  VAR_2 . getWindow ( ) . METHOD_3 ( ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . getReturnValue ( ) ) INIT = VAR_1 . getReturnValue ( ) ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_3 . getSucceeded ( ) ) INIT = VAR_3 . getSucceeded ( ) ) VAR VAR ( IF IF ( COND ( VAR_3 != null ) && VAR_4 ) COND ( VAR_3 != null ) && VAR_4 ( THEN THEN (  VAR_2 . METHOD_4 ( ) )  VAR_2 . METHOD_4 ( ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME vmId ) NAME vmId ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND source == null ) COND source == null ( THEN THEN (  return new java.util.ArrayList < TYPE_1 > ( ) ; )  return new java.util.ArrayList < TYPE_1 > ( ) ; ) THEN THEN ) IF IF (  return source ; )  return source ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < TYPE_1 > ( ) ; } return source ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < TYPE_1 > ( ) ; } return source ; } } (  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1<java.lang.Object[]> ) RETURN TYPE_1<java.lang.Object[]> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  return TYPE_2 . METHOD_2 ( new java.lang.Object [ ] [ ] { new java.lang.Object [ ] { STRING_1 , false , false } , new java.lang.Object [ ] { STRING_2 , true , false } , new java.lang.Object [ ] { STRING_3 , true , true } } ) ; )  return TYPE_2 . METHOD_2 ( new java.lang.Object [ ] [ ] { new java.lang.Object [ ] { STRING_1 , false , false } , new java.lang.Object [ ] { STRING_2 , true , false } , new java.lang.Object [ ] { STRING_3 , true , true } } ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( STRING_1 , VAR_2 , STRING_2 , STRING_3 ) ) INIT = METHOD_2 ( STRING_1 , VAR_2 , STRING_2 , STRING_3 ) ) VAR VAR (  parameters . METHOD_3 ( VAR_1 ) )  parameters . METHOD_3 ( VAR_1 ) (  parameters . METHOD_4 ( VAR_3 ) )  parameters . METHOD_4 ( VAR_3 ) (  org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_5 ( VAR_1 ) )  org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_5 ( VAR_1 ) (  TYPE_2 . METHOD_6 ( command , VAR_4 ) )  TYPE_2 . METHOD_6 ( command , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_1 ( INT_1 ) ) INIT = new TYPE_1 ( INT_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_3 . METHOD_2 ( STRING_1 ) ) INIT = TYPE_3 . METHOD_2 ( STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_4 . METHOD_3 ( VAR_1 , true ) ) INIT = VAR_4 . METHOD_3 ( VAR_1 , true ) ) VAR VAR (  TYPE_5 . METHOD_4 ( ( STRING_2 + VAR_1 ) , VAR_5 . METHOD_5 ( ) ) )  TYPE_5 . METHOD_4 ( ( STRING_2 + VAR_1 ) , VAR_5 . METHOD_5 ( ) ) ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_6 ) NAME VAR_6 ( INIT = VAR_3 . METHOD_6 ( VAR_5 , true ) ) INIT = VAR_3 . METHOD_6 ( VAR_5 , true ) ) VAR VAR (  VAR_7 . METHOD_7 ( VAR_6 ) )  VAR_7 . METHOD_7 ( VAR_6 ) (  TYPE_5 . assertEquals ( VAR_2 , VAR_6 ) )  TYPE_5 . assertEquals ( VAR_2 , VAR_6 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE TYPE_2.VM ) TYPE TYPE_2.VM ( NAME entity ) NAME entity ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME ui ) NAME ui ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  model . METHOD_2 ( new TYPE_4 ( ) ) )  model . METHOD_2 ( new TYPE_4 ( ) ) ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_5 ( METHOD_3 ( model . getId ( ) ) ) ) INIT = new TYPE_5 ( METHOD_3 ( model . getId ( ) ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_6> ) TYPE java.util.List<TYPE_6> ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_4 ( entity ) ) INIT = VAR_1 . METHOD_4 ( entity ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK (  TYPE_7 . METHOD_5 ( ui , VAR_3 , VAR_1 . METHOD_6 ( ) ) )  TYPE_7 . METHOD_5 ( ui , VAR_3 , VAR_1 . METHOD_6 ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  model . METHOD_4 ( ) . METHOD_4 ( ) . METHOD_7 ( VAR_2 ) )  model . METHOD_4 ( ) . METHOD_4 ( ) . METHOD_7 ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND returnValue != null ) COND returnValue != null ( THEN THEN ( VAR VAR ( TYPE TYPE_1<java.lang.String> ) TYPE TYPE_1<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 < > ( ( ( TYPE_3 < java.lang.String > ) ( returnValue ) ) ) ) INIT = new TYPE_2 < > ( ( ( TYPE_3 < java.lang.String > ) ( returnValue ) ) ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_1 ( ) . getSelectedItem ( ) ) INIT = METHOD_1 ( ) . getSelectedItem ( ) ) VAR VAR (  METHOD_1 ( ) . setItems ( VAR_1 ) )  METHOD_1 ( ) . setItems ( VAR_1 ) (  METHOD_1 ( ) . setSelectedItem ( VAR_2 ) )  METHOD_1 ( ) . setSelectedItem ( VAR_2 ) (  METHOD_2 ( ) )  METHOD_2 ( ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  org.mockito.Mockito.doReturn ( false ) . when ( command ) . METHOD_3 ( TYPE_1 . any ( VAR_1 class ) , TYPE_1 . any ( VAR_2 . ArrayList class ) ) )  org.mockito.Mockito.doReturn ( false ) . when ( command ) . METHOD_3 ( TYPE_1 . any ( VAR_1 class ) , TYPE_1 . any ( VAR_2 . ArrayList class ) ) (  VAR_3 . METHOD_4 ( org.ovirt.engine.core.compat.Guid . METHOD_5 ( ) ) )  VAR_3 . METHOD_4 ( org.ovirt.engine.core.compat.Guid . METHOD_5 ( ) ) (  TYPE_2 . METHOD_6 ( STRING_1 , command . validate ( ) ) )  TYPE_2 . METHOD_6 ( STRING_1 , command . validate ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 = TYPE_1 . METHOD_2 ( ) )  VAR_1 = TYPE_1 . METHOD_2 ( ) (  VAR_2 = TYPE_1 . METHOD_3 ( ) )  VAR_2 = TYPE_1 . METHOD_3 ( ) (  VAR_3 = new TYPE_2 . DbFacade ( ) )  VAR_3 = new TYPE_2 . DbFacade ( ) (  VAR_3 . METHOD_4 ( TYPE_3 . METHOD_5 ( ) ) )  VAR_3 . METHOD_4 ( TYPE_3 . METHOD_5 ( ) ) (  VAR_3 . METHOD_6 ( VAR_3 . METHOD_7 ( ) . METHOD_8 ( VAR_1 ) ) )  VAR_3 . METHOD_6 ( VAR_3 . METHOD_7 ( ) . METHOD_8 ( VAR_1 ) ) (  TYPE_4 . METHOD_9 ( TYPE_1 . METHOD_10 ( ) , VAR_2 ) )  TYPE_4 . METHOD_9 ( TYPE_1 . METHOD_10 ( ) , VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME entity ) NAME entity ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2<java.lang.String,org.ovirt.engine.ui.uicommonweb.models.EntityModel> ) TYPE TYPE_2<java.lang.String,org.ovirt.engine.ui.uicommonweb.models.EntityModel> ( NAME TYPE_3 ) NAME TYPE_3 ( INIT = ( ( TYPE_2 < java.lang.String , org.ovirt.engine.ui.uicommonweb.models.EntityModel > ) ( VAR_1 . METHOD_2 ( ) . getSelectedItem ( ) ) ) ) INIT = ( ( TYPE_2 < java.lang.String , org.ovirt.engine.ui.uicommonweb.models.EntityModel > ) ( VAR_1 . METHOD_2 ( ) . getSelectedItem ( ) ) ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_3 . METHOD_3 ( ) ) INIT = TYPE_3 . METHOD_3 ( ) ) VAR VAR (  entity . METHOD_1 ( ( ( java.lang.String ) ( STRING_1 . equals ( VAR_2 ) ? TYPE_3 . getValue ( ) . getEntity ( ) : VAR_2 ) ) ) )  entity . METHOD_1 ( ( ( java.lang.String ) ( STRING_1 . equals ( VAR_2 ) ? TYPE_3 . getValue ( ) . getEntity ( ) : VAR_2 ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME obj ) NAME obj ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND obj instanceof org.ovirt.engine.core.common.businessentities.VM ) COND obj instanceof org.ovirt.engine.core.common.businessentities.VM ( THEN THEN (  return ( ( org.ovirt.engine.core.common.businessentities.VM ) ( obj ) ) . getName ( ) ; )  return ( ( org.ovirt.engine.core.common.businessentities.VM ) ( obj ) ) . getName ( ) ; ) THEN THEN ) IF IF ( IF IF ( COND obj instanceof TYPE_1 ) COND obj instanceof TYPE_1 ( THEN THEN (  return ( ( TYPE_1 ) ( obj ) ) . METHOD_2 ( ) ; )  return ( ( TYPE_1 ) ( obj ) ) . METHOD_2 ( ) ; ) THEN THEN ) IF IF (  throw new TYPE_2 ( ) ; )  throw new TYPE_2 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( new TYPE_1 ( vmId , VAR_1 , METHOD_3 ( ) ) ) )  METHOD_2 ( new TYPE_1 ( vmId , VAR_1 , METHOD_3 ( ) ) ) (  org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_4 ( ) )  org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_4 ( ) (  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( VAR_3 ) . METHOD_5 ( ) )  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( VAR_3 ) . METHOD_5 ( ) (  TYPE_2 . METHOD_6 ( command . METHOD_7 ( VAR_3 ) ) )  TYPE_2 . METHOD_6 ( command . METHOD_7 ( VAR_3 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME type ) NAME type ( IN TYPE_1 . METHOD_2 ( ) ) IN TYPE_1 . METHOD_2 ( ) ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_3 . getParameters ( ) . METHOD_3 ( ) . get ( type ) ) INIT = TYPE_3 . getParameters ( ) . METHOD_3 ( ) . get ( type ) ) VAR VAR ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  continue ; )  continue ; ) THEN THEN ) IF IF (  VAR_1 . METHOD_4 ( TYPE_3 . METHOD_5 ( ) ) )  VAR_1 . METHOD_4 ( TYPE_3 . METHOD_5 ( ) ) (  TYPE_3 . METHOD_6 ( ) . METHOD_7 ( VAR_2 , new TYPE_4 ( VAR_1 ) ) )  TYPE_3 . METHOD_6 ( ) . METHOD_7 ( VAR_2 , new TYPE_4 ( VAR_1 ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.Network> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.Network> ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.Network ) TYPE org.ovirt.engine.core.common.businessentities.Network ( NAME VAR_1 ) NAME VAR_1 ( INIT = null ) INIT = null ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.Network ) TYPE org.ovirt.engine.core.common.businessentities.Network ( NAME network ) NAME network ( IN result ) IN result ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 != null ) && ( ( network . getName ( ) . METHOD_2 ( VAR_1 . getName ( ) ) ) < 0 ) ) COND ( VAR_1 != null ) && ( ( network . getName ( ) . METHOD_2 ( VAR_1 . getName ( ) ) ) < 0 ) ( THEN THEN (  TYPE_1 . METHOD_3 ( java.lang.String . METHOD_4 ( STRING_1 , VAR_1 . getName ( ) , network . getName ( ) ) ) )  TYPE_1 . METHOD_3 ( java.lang.String . METHOD_4 ( STRING_1 , VAR_1 . getName ( ) , network . getName ( ) ) ) ) THEN THEN ) IF IF (  VAR_1 = network )  VAR_1 = network ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.Disk ) TYPE org.ovirt.engine.core.common.businessentities.Disk ( NAME disk ) NAME disk ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( TYPE_2 . METHOD_2 ( ) . getId ( ) , TYPE_3 . getId ( ) , disk . getId ( ) , VAR_2 . Disk ) ) INIT = new TYPE_1 ( TYPE_2 . METHOD_2 ( ) . getId ( ) , TYPE_3 . getId ( ) , disk . getId ( ) , VAR_2 . Disk ) ) VAR VAR (  TYPE_4 . METHOD_3 ( VAR_1 ) )  TYPE_4 . METHOD_3 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.List<TYPE_1.DiskImage> ) RETURN java.util.List<TYPE_1.DiskImage> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1.Disk> ) TYPE java.util.List<TYPE_1.Disk> ( NAME VAR_1 ) NAME VAR_1 ( INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( TYPE_2 . METHOD_4 ( ) ) ) INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( TYPE_2 . METHOD_4 ( ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_1.DiskImage> ) TYPE java.util.List<TYPE_1.DiskImage> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.ArrayList ( METHOD_5 ( VAR_1 ) ) ) INIT = new java.util.ArrayList ( METHOD_5 ( VAR_1 ) ) ) VAR VAR (  VAR_2 . METHOD_6 ( TYPE_3 . METHOD_7 ( VAR_1 , true ) ) )  VAR_2 . METHOD_6 ( TYPE_3 . METHOD_7 ( VAR_1 , true ) ) (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_4 ) NAME METHOD_4 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( result . getReturnValue ( ) ) == null ) || ( ! ( result . getReturnValue ( ) . getSucceeded ( ) ) ) ) COND ( ( result . getReturnValue ( ) ) == null ) || ( ! ( result . getReturnValue ( ) . getSucceeded ( ) ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  VAR_2 . METHOD_5 ( ) . METHOD_6 ( ) )  VAR_2 . METHOD_5 ( ) . METHOD_6 ( ) (  METHOD_7 ( ) )  METHOD_7 ( ) ) BLOCK BLOCK ) METHOD METHOD (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_3 ( action , new TYPE_1 ( VAR_1 ) , new TYPE_2 ( ) { public void METHOD_4 ( TYPE_3 result ) { if ( ( ( result . getReturnValue ( ) ) == null ) || ( ! ( result . getReturnValue ( ) . getSucceeded ( ) ) ) ) { return ; } VAR_2 . METHOD_5 ( ) . METHOD_6 ( ) ; METHOD_7 ( ) ; } } ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_3 ( action , new TYPE_1 ( VAR_1 ) , new TYPE_2 ( ) { public void METHOD_4 ( TYPE_3 result ) { if ( ( ( result . getReturnValue ( ) ) == null ) || ( ! ( result . getReturnValue ( ) . getSucceeded ( ) ) ) ) { return ; } VAR_2 . METHOD_5 ( ) . METHOD_6 ( ) ; METHOD_7 ( ) ; } } ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.ValidationResult ) TYPE TYPE_1.ValidationResult ( NAME item ) NAME item ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = item . METHOD_2 ( ) ) INIT = item . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( VAR_1 == null ) ? VAR_3 . Collections < java.lang.String > METHOD_3 ( ) : VAR_1 ) INIT = ( VAR_1 == null ) ? VAR_3 . Collections < java.lang.String > METHOD_3 ( ) : VAR_1 ) VAR VAR (  return ( ( VAR_4 . length ) == ( VAR_2 . size ( ) ) ) && ( VAR_2 . METHOD_4 ( TYPE_2 . METHOD_5 ( VAR_4 ) ) ) ; )  return ( ( VAR_4 . length ) == ( VAR_2 . size ( ) ) ) && ( VAR_2 . METHOD_4 ( TYPE_2 . METHOD_5 ( VAR_4 ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN org.ovirt.engine.core.common.businessentities.DiskImage ) RETURN org.ovirt.engine.core.common.businessentities.DiskImage ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.DiskImage ) TYPE org.ovirt.engine.core.common.businessentities.DiskImage ( NAME diskImage ) NAME diskImage ( INIT = new org.ovirt.engine.core.common.businessentities.DiskImage ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.DiskImage ( ) ) VAR VAR (  diskImage . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) )  diskImage . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) (  diskImage . METHOD_3 ( new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( TYPE_1 . METHOD_4 ( new org.ovirt.engine.core.compat.Guid ( ) ) ) ) )  diskImage . METHOD_3 ( new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( TYPE_1 . METHOD_4 ( new org.ovirt.engine.core.compat.Guid ( ) ) ) ) (  return diskImage ; )  return diskImage ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( VAR_1 . getValue ( ) ) ) INIT = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( VAR_1 . getValue ( ) ) ) VAR VAR ( IF IF ( COND VAR_3 != null ) COND VAR_3 != null ( THEN THEN (  VAR_3 . METHOD_4 ( VAR_2 ) )  VAR_3 . METHOD_4 ( VAR_2 ) (  TYPE_3 . METHOD_2 ( ) . METHOD_5 ( VAR_3 ) )  TYPE_3 . METHOD_2 ( ) . METHOD_5 ( VAR_3 ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_4 . METHOD_6 ( STRING_1 , VAR_1 , VAR_2 , e ) )  VAR_4 . METHOD_6 ( STRING_1 , VAR_1 , VAR_2 , e ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( TYPE_1 . any ( VAR_2 . Guid class ) ) ) . thenReturn ( VAR_3 ) )  org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( TYPE_1 . any ( VAR_2 . Guid class ) ) ) . thenReturn ( VAR_3 ) (  org.mockito.Mockito.when ( VAR_1 . METHOD_3 ( TYPE_1 . any ( VAR_2 . Guid class ) ) ) . thenReturn ( VAR_3 ) )  org.mockito.Mockito.when ( VAR_1 . METHOD_3 ( TYPE_1 . any ( VAR_2 . Guid class ) ) ) . thenReturn ( VAR_3 ) (  org.mockito.Mockito.when ( command . METHOD_4 ( ) ) . thenReturn ( VAR_1 ) )  org.mockito.Mockito.when ( command . METHOD_4 ( ) ) . thenReturn ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( source ) ) : null ; )  return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( source ) ) : null ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( source ) ) : null ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( source ) ) : null ; } } (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_5 , new TYPE_3 ( VAR_1 , VAR_3 , VAR_2 , VAR_4 ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_5 , new TYPE_3 ( VAR_1 , VAR_3 , VAR_2 , VAR_4 ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME event ) NAME event ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . getModel ( ) ) INIT = VAR_2 . getModel ( ) ) VAR VAR ( IF IF ( COND ( event . METHOD_2 ( ) ) == VAR_1 ) COND ( event . METHOD_2 ( ) ) == VAR_1 ( THEN THEN (  VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) )  VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) ) THEN THEN ( ELSE ELSE (  VAR_1 . METHOD_5 ( ) )  VAR_1 . METHOD_5 ( ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( STRING_1 ) )  VAR_1 . METHOD_2 ( STRING_1 ) ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDSGroup> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDSGroup> ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_3 ( ) . METHOD_4 ( ) ) INIT = METHOD_3 ( ) . METHOD_4 ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ) TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ( NAME cluster ) NAME cluster ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK ( IF IF ( COND cluster . METHOD_5 ( ) ) COND cluster . METHOD_5 ( ) ( THEN THEN ( TRY TRY ( BLOCK BLOCK (  METHOD_6 ( cluster ) )  METHOD_6 ( cluster ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_1 . METHOD_7 ( STRING_2 , cluster . METHOD_8 ( ) , e ) )  VAR_1 . METHOD_7 ( STRING_2 , cluster . METHOD_8 ( ) , e ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME command ) NAME command ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_2 ( ) )  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_2 ( ) (  org.mockito.Mockito.doReturn ( null ) . when ( VAR_1 ) . get ( VAR_2 ) )  org.mockito.Mockito.doReturn ( null ) . when ( VAR_1 ) . get ( VAR_2 ) (  org.mockito.Mockito.doReturn ( METHOD_3 ( ) ) . when ( VAR_1 ) . get ( VAR_3 ) )  org.mockito.Mockito.doReturn ( METHOD_3 ( ) ) . when ( VAR_1 ) . get ( VAR_3 ) (  org.mockito.Mockito.doReturn ( METHOD_4 ( ) ) . when ( VAR_1 ) . get ( VAR_4 ) )  org.mockito.Mockito.doReturn ( METHOD_4 ( ) ) . when ( VAR_1 ) . get ( VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_1 ) ) COND ! ( VAR_1 ) ( THEN THEN ( SYNCHRONIZED SYNCHRONIZED (  VAR_2 )  VAR_2 ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_1 ) ) COND ! ( VAR_1 ) ( THEN THEN ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_3 ) NAME VAR_3 ( INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( ) ) INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( IN VAR_3 ) IN VAR_3 ( BLOCK BLOCK (  VAR_5 . put ( VAR_4 . getId ( ) , VAR_4 ) )  VAR_5 . put ( VAR_4 . getId ( ) , VAR_4 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  VAR_1 = true )  VAR_1 = true ) THEN THEN ) IF IF ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_1 ( ) . getSelectedItem ( ) ) INIT = METHOD_1 ( ) . getSelectedItem ( ) ) VAR VAR (  METHOD_1 ( ) . setItems ( ( ( TYPE_1 < java.lang.String > ) ( returnValue ) ) ) )  METHOD_1 ( ) . setItems ( ( ( TYPE_1 < java.lang.String > ) ( returnValue ) ) ) (  METHOD_1 ( ) . setSelectedItem ( VAR_1 ) )  METHOD_1 ( ) . setSelectedItem ( VAR_1 ) (  METHOD_2 ( ) )  METHOD_2 ( ) (  METHOD_3 ( ) )  METHOD_3 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( ) ) INIT = TYPE_2 . METHOD_2 ( ) ) VAR VAR (  VAR_1 . METHOD_3 ( true ) )  VAR_1 . METHOD_3 ( true ) ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( TYPE_2 . getParameters ( ) . METHOD_4 ( ) ) && ( ( TYPE_2 . METHOD_5 ( ) . get ( TYPE_2 . METHOD_6 ( ) ) . METHOD_7 ( ) ) == ( VAR_3 ) ) ) INIT = ( TYPE_2 . getParameters ( ) . METHOD_4 ( ) ) && ( ( TYPE_2 . METHOD_5 ( ) . get ( TYPE_2 . METHOD_6 ( ) ) . METHOD_7 ( ) ) == ( VAR_3 ) ) ) VAR VAR (  TYPE_3 . METHOD_8 ( VAR_1 , VAR_2 ) )  TYPE_3 . METHOD_8 ( VAR_1 , VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN double ) RETURN double ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE double ) TYPE double ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 <= FLOAT_1 ) COND VAR_1 <= FLOAT_1 ( THEN THEN (  throw new TYPE_1 ( STRING_1 ) ; )  throw new TYPE_1 ( STRING_1 ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE double ) TYPE double ( NAME VAR_3 ) NAME VAR_3 ( INIT = super . METHOD_1 ( ) ) INIT = super . METHOD_1 ( ) ) VAR VAR ( IF IF ( COND ! VAR_2 ) COND ! VAR_2 ( THEN THEN ( WHILE WHILE ( COND VAR_3 == FLOAT_2 ) COND VAR_3 == FLOAT_2 ( BLOCK BLOCK (  VAR_3 = super . METHOD_1 ( ) )  VAR_3 = super . METHOD_1 ( ) ) BLOCK BLOCK ) WHILE WHILE ) THEN THEN ) IF IF (  return VAR_3 * VAR_1 ; )  return VAR_3 * VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ) INIT = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ) VAR VAR ( IF IF ( COND TYPE_2 . isEmpty ( VAR_1 ) ) COND TYPE_2 . isEmpty ( VAR_1 ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( IF IF ( COND ( TYPE_1 . METHOD_4 ( ) . METHOD_5 ( VAR_1 ) ) == 1 ) COND ( TYPE_1 . METHOD_4 ( ) . METHOD_5 ( VAR_1 ) ) == 1 ( THEN THEN (  METHOD_6 ( VAR_1 , TYPE_1 . METHOD_7 ( ) , true ) )  METHOD_6 ( VAR_1 , TYPE_1 . METHOD_7 ( ) , true ) ) THEN THEN ) IF IF (  TYPE_1 . METHOD_4 ( ) . METHOD_1 ( TYPE_1 . METHOD_8 ( ) ) )  TYPE_1 . METHOD_4 ( ) . METHOD_1 ( TYPE_1 . METHOD_8 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1<java.lang.String,java.lang.String> ) RETURN TYPE_1<java.lang.String,java.lang.String> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME url ) NAME url ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.ArrayList < > ( TYPE_3 . METHOD_3 ( url . METHOD_4 ( STRING_1 ) ) ) ) INIT = new java.util.ArrayList < > ( TYPE_3 . METHOD_3 ( url . METHOD_4 ( STRING_1 ) ) ) ) VAR VAR (  VAR_2 . METHOD_5 ( 0 ) )  VAR_2 . METHOD_5 ( 0 ) (  return TYPE_4 . METHOD_6 ( VAR_2 ) ; )  return TYPE_4 . METHOD_6 ( VAR_2 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ( INIT = ( ( TYPE_1 ) ( target ) ) ) INIT = ( ( TYPE_1 ) ( target ) ) ) VAR VAR (  model . METHOD_1 ( model , VAR_1 , ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( returnValue ) ) , vm . METHOD_2 ( ) . getValue ( ) ) )  model . METHOD_1 ( model , VAR_1 , ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( returnValue ) ) , vm . METHOD_2 ( ) . getValue ( ) ) (  METHOD_3 ( ) )  METHOD_3 ( ) (  METHOD_4 ( ) )  METHOD_4 ( ) (  METHOD_5 ( vm . getId ( ) ) )  METHOD_5 ( vm . getId ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain> ) RETURN java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.compat.Guid> ) TYPE java.util.List<org.ovirt.engine.core.compat.Guid> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain> ( NAME list ) NAME list ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ) TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME storageDomain ) NAME storageDomain ( INIT = TYPE_1 . METHOD_2 ( VAR_3 , VAR_2 ) ) INIT = TYPE_1 . METHOD_2 ( VAR_3 , VAR_2 ) ) VAR VAR ( IF IF ( COND storageDomain != null ) COND storageDomain != null ( THEN THEN (  list . add ( storageDomain ) )  list . add ( storageDomain ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return list ; )  return list ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( METHOD_2 ( ) , VAR_2 ) ) INIT = new TYPE_1 ( METHOD_2 ( ) , VAR_2 ) ) VAR VAR ( IF IF ( COND ( getParameters ( ) ) != null ) COND ( getParameters ( ) ) != null ( THEN THEN (  VAR_1 . METHOD_3 ( new java.util.ArrayList < TYPE_3 > ( ) ) )  VAR_1 . METHOD_3 ( new java.util.ArrayList < TYPE_3 > ( ) ) ( FOR-EACH FOR-EACH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( IN getParameters ( ) ) IN getParameters ( ) ( BLOCK BLOCK (  VAR_1 . getParameters ( ) . add ( VAR_3 . METHOD_1 ( ) ) )  VAR_1 . getParameters ( ) . add ( VAR_3 . METHOD_1 ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS> ) RETURN java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME i ) NAME i ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( IF IF ( COND i . METHOD_2 ( ) ) COND i . METHOD_2 ( ) ( THEN THEN (  VAR_2 . add ( i ) )  VAR_2 . add ( i ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.VdcQueryType ) TYPE TYPE_1.VdcQueryType ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( VAR_2 , VAR_3 ) )  METHOD_2 ( VAR_2 , VAR_3 ) ( VAR VAR ( TYPE TYPE_1.VdcQueryReturnValue ) TYPE TYPE_1.VdcQueryReturnValue ( NAME result ) NAME result ( INIT = VAR_4 . METHOD_1 ( VAR_1 , VAR_2 ) ) INIT = VAR_4 . METHOD_1 ( VAR_1 , VAR_2 ) ) VAR VAR (  return result . getSucceeded ( ) ? result . getReturnValue ( ) : null ; )  return result . getSucceeded ( ) ? result . getReturnValue ( ) : null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND TYPE_1 . METHOD_2 ( TYPE_2 . getVm ( ) . METHOD_3 ( ) ) ) COND TYPE_1 . METHOD_2 ( TYPE_2 . getVm ( ) . METHOD_3 ( ) ) ( THEN THEN ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_4 ( VAR_2 , new TYPE_4 ( METHOD_5 ( ) , TYPE_2 . METHOD_6 ( ) ) ) ) INIT = METHOD_4 ( VAR_2 , new TYPE_4 ( METHOD_5 ( ) , TYPE_2 . METHOD_6 ( ) ) ) ) VAR VAR ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN (  VAR_3 = ( ( java.lang.Integer ) ( VAR_1 . getReturnValue ( ) ) ) )  VAR_3 = ( ( java.lang.Integer ) ( VAR_1 . getReturnValue ( ) ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_4 = e . METHOD_7 ( ) )  VAR_4 = e . METHOD_7 ( ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ( INIT = dao . get ( VAR_1 ) ) INIT = dao . get ( VAR_1 ) ) VAR VAR (  TYPE_2 . METHOD_2 ( result ) )  TYPE_2 . METHOD_2 ( result ) (  TYPE_2 . assertEquals ( VAR_1 , result . getId ( ) ) )  TYPE_2 . assertEquals ( VAR_1 , result . getId ( ) ) (  TYPE_2 . assertEquals ( false , result . METHOD_3 ( ) ) )  TYPE_2 . assertEquals ( false , result . METHOD_3 ( ) ) (  TYPE_2 . METHOD_4 ( result . METHOD_5 ( ) ) )  TYPE_2 . METHOD_4 ( result . METHOD_5 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  super . METHOD_1 ( VAR_1 ) )  super . METHOD_1 ( VAR_1 ) ( IF IF ( COND ( VAR_1 != null ) && ( ( VAR_1 . length ( ) ) > 0 ) ) COND ( VAR_1 != null ) && ( ( VAR_1 . length ( ) ) > 0 ) ( THEN THEN (  table . METHOD_2 ( false ) )  table . METHOD_2 ( false ) ) THEN THEN ) IF IF (  VAR_2 . METHOD_3 ( VAR_1 ) )  VAR_2 . METHOD_3 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME returnValue ) NAME returnValue ( INIT = METHOD_2 ( VAR_2 , new TYPE_3 ( VAR_1 ) , METHOD_3 ( VAR_1 ) ) ) INIT = METHOD_2 ( VAR_2 , new TYPE_3 ( VAR_1 ) , METHOD_3 ( VAR_1 ) ) ) VAR VAR ( IF IF ( COND ! ( returnValue . getSucceeded ( ) ) ) COND ! ( returnValue . getSucceeded ( ) ) ( THEN THEN (  log . METHOD_4 ( STRING_1 , VAR_1 . getName ( ) ) )  log . METHOD_4 ( STRING_1 , VAR_1 . getName ( ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1<java.lang.Object[]> ) RETURN TYPE_1<java.lang.Object[]> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  return TYPE_2 . METHOD_2 ( new java.lang.Object [ ] [ ] { new java.lang.Object [ ] { false , TYPE_3 . METHOD_3 ( ) } , new java.lang.Object [ ] { false , TYPE_3 . METHOD_4 ( VAR_1 ) } , new java.lang.Object [ ] { true , TYPE_3 . METHOD_4 ( VAR_2 ) } , new java.lang.Object [ ] { true , TYPE_2 . METHOD_2 ( VAR_2 , VAR_1 ) } } ) ; )  return TYPE_2 . METHOD_2 ( new java.lang.Object [ ] [ ] { new java.lang.Object [ ] { false , TYPE_3 . METHOD_3 ( ) } , new java.lang.Object [ ] { false , TYPE_3 . METHOD_4 ( VAR_1 ) } , new java.lang.Object [ ] { true , TYPE_3 . METHOD_4 ( VAR_2 ) } , new java.lang.Object [ ] { true , TYPE_2 . METHOD_2 ( VAR_2 , VAR_1 ) } } ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) , null ) ) )  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) , null ) ) (  METHOD_3 ( ) )  METHOD_3 ( ) (  METHOD_4 ( true , null ) )  METHOD_4 ( true , null ) (  cmd . METHOD_1 ( ) )  cmd . METHOD_1 ( ) (  org.mockito.Mockito . METHOD_5 ( VAR_2 , org.mockito.Mockito . METHOD_6 ( 1 ) ) . METHOD_7 ( TYPE_3 . any ( VAR_3 . Guid class ) ) )  org.mockito.Mockito . METHOD_5 ( VAR_2 , org.mockito.Mockito . METHOD_6 ( 1 ) ) . METHOD_7 ( TYPE_3 . any ( VAR_3 . Guid class ) ) (  TYPE_4 . assertEquals ( cmd . METHOD_8 ( ) , VAR_4 ) )  TYPE_4 . assertEquals ( cmd . METHOD_8 ( ) , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_3 ) NAME VAR_3 ( INIT = new java.util.ArrayList < TYPE_1 > ( ) ) INIT = new java.util.ArrayList < TYPE_1 > ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME map ) NAME map ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  map . METHOD_2 ( VAR_1 ) )  map . METHOD_2 ( VAR_1 ) (  map . METHOD_3 ( VAR_2 ) )  map . METHOD_3 ( VAR_2 ) (  VAR_3 . add ( map ) )  VAR_3 . add ( map ) (  org.mockito.Mockito.when ( VAR_4 . METHOD_4 ( VAR_1 ) ) . thenReturn ( VAR_3 ) )  org.mockito.Mockito.when ( VAR_4 . METHOD_4 ( VAR_1 ) ) . thenReturn ( VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( METHOD_3 ( ) ) )  METHOD_2 ( METHOD_3 ( ) ) (  METHOD_4 ( VAR_1 , VAR_2 class , new java.lang.String [ ] { STRING_1 , STRING_2 } , new java.lang.Object [ ] { VAR_3 , TYPE_1 . toString ( ) } , getEntity ( 1 ) ) )  METHOD_4 ( VAR_1 , VAR_2 class , new java.lang.String [ ] { STRING_1 , STRING_2 } , new java.lang.Object [ ] { VAR_3 , TYPE_1 . toString ( ) } , getEntity ( 1 ) ) (  VAR_4 . METHOD_5 ( ) )  VAR_4 . METHOD_5 ( ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME image ) NAME image ( INIT = resource . get ( ) ) INIT = resource . get ( ) ) VAR VAR (  TYPE_3 . METHOD_6 ( image , 1 ) )  TYPE_3 . METHOD_6 ( image , 1 ) (  METHOD_7 ( image ) )  METHOD_7 ( image ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_1 ( getVm ( ) . getId ( ) , TYPE_1 . METHOD_2 ( getVm ( ) . METHOD_3 ( ) . METHOD_4 ( ) , false , false ) ) )  METHOD_1 ( getVm ( ) . getId ( ) , TYPE_1 . METHOD_2 ( getVm ( ) . METHOD_3 ( ) . METHOD_4 ( ) , false , false ) ) (  METHOD_5 ( getVm ( ) . getId ( ) ) )  METHOD_5 ( getVm ( ) . getId ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VdsNetworkInterface> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VdsNetworkInterface> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME parameters ) NAME parameters ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  parameters . METHOD_2 ( ) . add ( VAR_1 ) )  parameters . METHOD_2 ( ) . add ( VAR_1 ) ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME iface ) NAME iface ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK (  parameters . METHOD_2 ( ) . add ( METHOD_3 ( iface , VAR_1 . getName ( ) ) ) )  parameters . METHOD_2 ( ) . add ( METHOD_3 ( iface , VAR_1 . getName ( ) ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return parameters ; )  return parameters ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( ) . METHOD_3 ( STRING_1 , METHOD_4 ( ) . addValue ( STRING_2 , VAR_1 . METHOD_5 ( ) ) . addValue ( STRING_3 , VAR_1 . METHOD_6 ( ) ) . addValue ( STRING_4 , TYPE_2 . METHOD_7 ( VAR_1 . getStatus ( ) ) ) . addValue ( STRING_5 , VAR_1 . METHOD_8 ( ) ) . addValue ( STRING_6 , VAR_1 . METHOD_9 ( ) ) ) )  METHOD_2 ( ) . METHOD_3 ( STRING_1 , METHOD_4 ( ) . addValue ( STRING_2 , VAR_1 . METHOD_5 ( ) ) . addValue ( STRING_3 , VAR_1 . METHOD_6 ( ) ) . addValue ( STRING_4 , TYPE_2 . METHOD_7 ( VAR_1 . getStatus ( ) ) ) . addValue ( STRING_5 , VAR_1 . METHOD_8 ( ) ) . addValue ( STRING_6 , VAR_1 . METHOD_9 ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( METHOD_3 ( ) ) )  METHOD_2 ( METHOD_3 ( ) ) (  METHOD_4 ( 1 , false ) )  METHOD_4 ( 1 , false ) (  VAR_1 . METHOD_5 ( ) )  VAR_1 . METHOD_5 ( ) ( TRY TRY ( BLOCK BLOCK (  resource . METHOD_6 ( ) )  resource . METHOD_6 ( ) (  METHOD_7 ( STRING_1 ) )  METHOD_7 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( BLOCK BLOCK (  METHOD_8 ( VAR_2 . METHOD_9 ( ) ) )  METHOD_8 ( VAR_2 . METHOD_9 ( ) ) (  assertEquals ( INT_1 , VAR_2 . METHOD_9 ( ) . getStatus ( ) ) )  assertEquals ( INT_1 , VAR_2 . METHOD_9 ( ) . getStatus ( ) ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( METHOD_3 ( ) ) )  METHOD_2 ( METHOD_3 ( ) ) (  METHOD_4 ( ) )  METHOD_4 ( ) (  METHOD_5 ( 1 ) )  METHOD_5 ( 1 ) (  METHOD_6 ( 1 ) )  METHOD_6 ( 1 ) (  VAR_1 . METHOD_7 ( ) )  VAR_1 . METHOD_7 ( ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME nic ) NAME nic ( INIT = resource . get ( ) ) INIT = resource . get ( ) ) VAR VAR (  METHOD_8 ( nic , 1 ) )  METHOD_8 ( nic , 1 ) (  METHOD_9 ( nic ) )  METHOD_9 ( nic ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( VAR_1 , new TYPE_2 < org.ovirt.engine.core.compat.Guid > ( VAR_3 , VAR_4 class ) , VAR_5 , new TYPE_3 ( ) ) ) INIT = METHOD_2 ( VAR_1 , new TYPE_2 < org.ovirt.engine.core.compat.Guid > ( VAR_3 , VAR_4 class ) , VAR_5 , new TYPE_3 ( ) ) ) VAR VAR ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN (  TYPE_4 . METHOD_3 ( this , VAR_2 ) )  TYPE_4 . METHOD_3 ( this , VAR_2 ) ) THEN THEN ) IF IF (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> ) RETURN java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) == null ) COND ( VAR_1 ) == null ( THEN THEN (  VAR_1 = new java.util.ArrayList < > ( ) )  VAR_1 = new java.util.ArrayList < > ( ) ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ( IN TYPE_1 . getParameters ( ) . METHOD_2 ( ) ) IN TYPE_1 . getParameters ( ) . METHOD_2 ( ) ( BLOCK BLOCK ( IF IF ( COND VAR_2 == null ) COND VAR_2 == null ( THEN THEN (  continue ; )  continue ; ) THEN THEN ) IF IF (  VAR_1 . add ( METHOD_3 ( ) . METHOD_4 ( VAR_2 ) ) )  VAR_1 . add ( METHOD_3 ( ) . METHOD_4 ( VAR_2 ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1.ValidationResult ) RETURN TYPE_1.ValidationResult ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StoragePool ) TYPE org.ovirt.engine.core.common.businessentities.StoragePool ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_2 . isEmpty ( ) ) || ( vm . METHOD_2 ( ) ) ) COND ( VAR_2 . isEmpty ( ) ) || ( vm . METHOD_2 ( ) ) ( THEN THEN (  return VAR_3 ; )  return VAR_3 ; ) THEN THEN ) IF IF (  return new TYPE_2 ( VAR_1 ) . METHOD_3 ( ) ; )  return new TYPE_2 ( VAR_1 ) . METHOD_3 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1.Disk> ) TYPE java.util.List<TYPE_1.Disk> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < TYPE_1 . Disk > ( ) ) INIT = new java.util.ArrayList < TYPE_1 . Disk > ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1.DiskImage ) TYPE TYPE_1.DiskImage ( NAME diskImage ) NAME diskImage ( INIT = new TYPE_1 . DiskImage ( ) ) INIT = new TYPE_1 . DiskImage ( ) ) VAR VAR (  diskImage . METHOD_2 ( new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( TYPE_2 . METHOD_3 ( org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) ) ) ) )  diskImage . METHOD_2 ( new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( TYPE_2 . METHOD_3 ( org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) ) ) ) (  VAR_1 . add ( diskImage ) )  VAR_1 . add ( diskImage ) (  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( VAR_3 ) . METHOD_5 ( ) )  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( VAR_3 ) . METHOD_5 ( ) (  org.mockito.Mockito.when ( VAR_2 . METHOD_6 ( vmId ) ) . thenReturn ( VAR_1 ) )  org.mockito.Mockito.when ( VAR_2 . METHOD_6 ( vmId ) ) . thenReturn ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.List<java.lang.String> ) RETURN java.util.List<java.lang.String> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME vds ) NAME vds ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < java.lang.String > ( ) ) INIT = new java.util.ArrayList < java.lang.String > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME iface ) NAME iface ( IN METHOD_2 ( ) . METHOD_3 ( vds . getId ( ) ) ) IN METHOD_2 ( ) . METHOD_3 ( vds . getId ( ) ) ( BLOCK BLOCK ( IF IF ( COND ( iface . METHOD_4 ( ) ) != null ) COND ( iface . METHOD_4 ( ) ) != null ( THEN THEN (  VAR_1 . add ( iface . METHOD_4 ( ) ) )  VAR_1 . add ( iface . METHOD_4 ( ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( returnValue ) ) ) INIT = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( returnValue ) ) ) VAR VAR ( IF IF ( COND ( VAR_1 . size ( ) ) != 0 ) COND ( VAR_1 . size ( ) ) != 0 ( THEN THEN (  model . METHOD_2 ( ) . METHOD_3 ( STRING_1 ) )  model . METHOD_2 ( ) . METHOD_3 ( STRING_1 ) (  model . METHOD_2 ( ) . setIsChangable ( false ) )  model . METHOD_2 ( ) . setIsChangable ( false ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  METHOD_3 ( ) )  METHOD_3 ( ) (  cmd . getVm ( ) . METHOD_4 ( VAR_1 ) )  cmd . getVm ( ) . METHOD_4 ( VAR_1 ) (  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( VAR_3 ) . METHOD_5 ( ) )  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( VAR_3 ) . METHOD_5 ( ) ( VAR VAR ( TYPE java.util.List<TYPE_1.DiskImage> ) TYPE java.util.List<TYPE_1.DiskImage> ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_6 ( INT_1 ) ) INIT = METHOD_6 ( INT_1 ) ) VAR VAR (  org.mockito.Mockito.when ( VAR_5 . METHOD_7 ( VAR_4 ) ) . thenReturn ( new TYPE_2 . ValidationResult ( VAR_6 ) ) )  org.mockito.Mockito.when ( VAR_5 . METHOD_7 ( VAR_4 ) ) . thenReturn ( new TYPE_2 . ValidationResult ( VAR_6 ) ) (  TYPE_3 . METHOD_8 ( cmd , VAR_7 ) )  TYPE_3 . METHOD_8 ( cmd , VAR_7 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE TYPE_2<?extendsTYPE_3> ) TYPE TYPE_2<?extendsTYPE_3> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  model = METHOD_2 ( model ) )  model = METHOD_2 ( model ) (  model = TYPE_4 . METHOD_1 ( TYPE_5 . METHOD_3 ( ) , model , VAR_1 ) )  model = TYPE_4 . METHOD_1 ( TYPE_5 . METHOD_3 ( ) , model , VAR_1 ) (  model = METHOD_4 ( model , VAR_1 , VAR_2 ) )  model = METHOD_4 ( model , VAR_1 , VAR_2 ) (  return model ; )  return model ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return ( ( ( ( TYPE_1 ) ( VAR_1 ) ) . METHOD_2 ( ) . METHOD_3 ( ) ) + STRING_1 ) + ( ( ( TYPE_1 ) ( VAR_1 ) ) . METHOD_4 ( ) . METHOD_3 ( ) ) ; )  return ( ( ( ( TYPE_1 ) ( VAR_1 ) ) . METHOD_2 ( ) . METHOD_3 ( ) ) + STRING_1 ) + ( ( ( TYPE_1 ) ( VAR_1 ) ) . METHOD_4 ( ) . METHOD_3 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  METHOD_3 ( ) )  METHOD_3 ( ) (  METHOD_4 ( ) )  METHOD_4 ( ) (  METHOD_5 ( ) )  METHOD_5 ( ) (  METHOD_6 ( ) )  METHOD_6 ( ) (  METHOD_7 ( ) )  METHOD_7 ( ) (  METHOD_8 ( ) )  METHOD_8 ( ) (  METHOD_9 ( ) )  METHOD_9 ( ) (  METHOD_10 ( ) )  METHOD_10 ( ) (  METHOD_11 ( ) )  METHOD_11 ( ) ( IF IF ( COND ( VAR_1 ) != null ) COND ( VAR_1 ) != null ( THEN THEN (  VAR_2 . METHOD_12 ( VAR_1 ) )  VAR_2 . METHOD_12 ( VAR_1 ) ) THEN THEN ) IF IF ( IF IF ( COND VAR_3 ) COND VAR_3 ( THEN THEN (  VAR_2 . METHOD_13 ( VAR_4 . METHOD_14 ( ) ) )  VAR_2 . METHOD_13 ( VAR_4 . METHOD_14 ( ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<java.lang.Object> ) TYPE java.util.ArrayList<java.lang.Object> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < java.lang.Object > ( ) ) INIT = new java.util.ArrayList < java.lang.Object > ( ) ) VAR VAR ( VAR VAR ( TYPE java.util.ArrayList<TYPE_1> ) TYPE java.util.ArrayList<TYPE_1> ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . Linq < TYPE_1 > METHOD_2 ( getModel ( ) . METHOD_3 ( ) ) ) INIT = VAR_3 . Linq < TYPE_1 > METHOD_2 ( getModel ( ) . METHOD_3 ( ) ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK ( IF IF ( COND ( ( TYPE_2 ) ( model ) ) . METHOD_4 ( ) ) COND ( ( TYPE_2 ) ( model ) ) . METHOD_4 ( ) ( THEN THEN (  VAR_1 . add ( model ) )  VAR_1 . add ( model ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  getModel ( ) . METHOD_5 ( ) . setItems ( VAR_1 ) )  getModel ( ) . METHOD_5 ( ) . setItems ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  vm . METHOD_2 ( TYPE_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( 1 , TYPE_1 . METHOD_3 ( TYPE_2 . METHOD_5 ( 1 ) ) ) ) ) )  vm . METHOD_2 ( TYPE_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( 1 , TYPE_1 . METHOD_3 ( TYPE_2 . METHOD_5 ( 1 ) ) ) ) ) (  vm . METHOD_6 ( VAR_1 ) )  vm . METHOD_6 ( VAR_1 ) (  METHOD_7 ( TYPE_3 . METHOD_8 ( vm , vm . METHOD_9 ( ) ) . METHOD_10 ( ) ) )  METHOD_7 ( TYPE_3 . METHOD_8 ( vm , vm . METHOD_9 ( ) ) . METHOD_10 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<org.ovirt.engine.core.common.businessentities.VDS,TYPE_2> ) RETURN TYPE_1<org.ovirt.engine.core.common.businessentities.VDS,TYPE_2> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME returnValue ) NAME returnValue ( INIT = METHOD_2 ( METHOD_3 ( ) , new TYPE_3 ( VAR_1 . getId ( ) , entity . METHOD_4 ( ) , entity . METHOD_5 ( ) , entity . getName ( ) ) ) ) INIT = METHOD_2 ( METHOD_3 ( ) , new TYPE_3 ( VAR_1 . getId ( ) , entity . METHOD_4 ( ) , entity . METHOD_5 ( ) , entity . getName ( ) ) ) ) VAR VAR (  return new TYPE_1 < org.ovirt.engine.core.common.businessentities.VDS , TYPE_2 > ( VAR_1 , returnValue ) ; )  return new TYPE_1 < org.ovirt.engine.core.common.businessentities.VDS , TYPE_2 > ( VAR_1 , returnValue ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) ) ) )  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) ) ) (  METHOD_3 ( cmd ) )  METHOD_3 ( cmd ) (  METHOD_4 ( cmd , true ) )  METHOD_4 ( cmd , true ) (  cmd . METHOD_1 ( ) )  cmd . METHOD_1 ( ) (  TYPE_3 . assertEquals ( cmd . METHOD_5 ( ) , VAR_2 ) )  TYPE_3 . assertEquals ( cmd . METHOD_5 ( ) , VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( VAR_3 , VAR_4 ) ) INIT = new TYPE_1 ( VAR_3 , VAR_4 ) ) VAR VAR (  VAR_2 . METHOD_2 ( STRING_1 , VAR_5 ) )  VAR_2 . METHOD_2 ( STRING_1 , VAR_5 ) ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_6 ) NAME VAR_6 ( INIT = STRING_2 ) INIT = STRING_2 ) VAR VAR ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN (  VAR_6 += STRING_3 )  VAR_6 += STRING_3 (  VAR_2 . METHOD_2 ( VAR_7 , VAR_1 ) )  VAR_2 . METHOD_2 ( VAR_7 , VAR_1 ) ) THEN THEN ) IF IF (  VAR_2 . METHOD_2 ( STRING_4 , VAR_6 ) )  VAR_2 . METHOD_2 ( STRING_4 , VAR_6 ) ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_8 ) NAME VAR_8 ( INIT = METHOD_3 ( ) ) INIT = METHOD_3 ( ) ) VAR VAR ( IF IF ( COND VAR_8 != null ) COND VAR_8 != null ( THEN THEN (  VAR_2 . METHOD_2 ( VAR_9 , VAR_8 ) )  VAR_2 . METHOD_2 ( VAR_9 , VAR_8 ) ) THEN THEN ) IF IF (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN org.ovirt.engine.core.common.businessentities.VM ) RETURN org.ovirt.engine.core.common.businessentities.VM ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ( INIT = new org.ovirt.engine.core.common.businessentities.VM ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.VM ( ) ) VAR VAR (  vm . METHOD_2 ( VAR_1 ) )  vm . METHOD_2 ( VAR_1 ) (  vm . METHOD_3 ( org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) ) )  vm . METHOD_3 ( org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) ) (  TYPE_1 . METHOD_5 ( command , VAR_2 ) )  TYPE_1 . METHOD_5 ( command , VAR_2 ) (  TYPE_2 . when ( VAR_2 . get ( command . getParameters ( ) . METHOD_6 ( ) ) ) . thenReturn ( vm ) )  TYPE_2 . when ( VAR_2 . get ( command . getParameters ( ) . METHOD_6 ( ) ) ) . thenReturn ( vm ) (  return vm ; )  return vm ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.DiskImage ) TYPE org.ovirt.engine.core.common.businessentities.DiskImage ( NAME image ) NAME image ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  TYPE_2 . METHOD_2 ( image , VAR_1 , VAR_2 ) )  TYPE_2 . METHOD_2 ( image , VAR_1 , VAR_2 ) (  TYPE_2 . METHOD_3 ( image , image . METHOD_4 ( ) ) )  TYPE_2 . METHOD_3 ( image , image . METHOD_4 ( ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( BLOCK BLOCK (  VAR_4 . error ( STRING_1 , VAR_3 ) )  VAR_4 . error ( STRING_1 , VAR_3 ) (  throw new TYPE_4 ( VAR_5 , VAR_3 ) ; )  throw new TYPE_4 ( VAR_5 , VAR_3 ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2<TYPE_1> ) TYPE TYPE_2<TYPE_1> ( NAME cmd ) NAME cmd ( INIT = TYPE_3 . METHOD_2 ( VAR_1 ) ) INIT = TYPE_3 . METHOD_2 ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_4> ) TYPE java.util.List<TYPE_4> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.ArrayList < TYPE_4 > ( ) ) INIT = new java.util.ArrayList < TYPE_4 > ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_4 ( ) ) INIT = new TYPE_4 ( ) ) VAR VAR (  VAR_3 . METHOD_3 ( VAR_4 ) )  VAR_3 . METHOD_3 ( VAR_4 ) (  VAR_2 . add ( VAR_3 ) )  VAR_2 . add ( VAR_3 ) ( VAR VAR ( TYPE java.util.List<TYPE_4> ) TYPE java.util.List<TYPE_4> ( NAME VAR_5 ) NAME VAR_5 ( INIT = cmd . METHOD_4 ( VAR_2 ) ) INIT = cmd . METHOD_4 ( VAR_2 ) ) VAR VAR (  TYPE_5 . METHOD_5 ( VAR_5 . isEmpty ( ) ) )  TYPE_5 . METHOD_5 ( VAR_5 . isEmpty ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  cmd . METHOD_2 ( VAR_1 ) )  cmd . METHOD_2 ( VAR_1 ) (  METHOD_3 ( true , VAR_2 , false , null ) )  METHOD_3 ( true , VAR_2 , false , null ) (  TYPE_1 . METHOD_4 ( cmd . validate ( ) ) )  TYPE_1 . METHOD_4 ( cmd . validate ( ) ) (  cmd . METHOD_1 ( ) )  cmd . METHOD_1 ( ) (  org.mockito.Mockito . METHOD_5 ( cmd ) . METHOD_6 ( TYPE_2 . METHOD_7 ( VAR_2 ) , TYPE_2 . METHOD_8 ( ) , TYPE_2 . METHOD_7 ( false ) ) )  org.mockito.Mockito . METHOD_5 ( cmd ) . METHOD_6 ( TYPE_2 . METHOD_7 ( VAR_2 ) , TYPE_2 . METHOD_8 ( ) , TYPE_2 . METHOD_7 ( false ) ) (  org.mockito.Mockito . METHOD_5 ( cmd ) . METHOD_9 ( ) )  org.mockito.Mockito . METHOD_5 ( cmd ) . METHOD_9 ( ) (  TYPE_1 . assertEquals ( VAR_3 , cmd . METHOD_10 ( ) ) )  TYPE_1 . assertEquals ( VAR_3 , cmd . METHOD_10 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.Disk ) TYPE TYPE_1.Disk ( NAME disk ) NAME disk ( INIT = new TYPE_1 . Disk ( ) ) INIT = new TYPE_1 . Disk ( ) ) VAR VAR (  disk . setId ( VAR_1 ) )  disk . setId ( VAR_1 ) (  disk . METHOD_2 ( new TYPE_2 ( ) ) )  disk . METHOD_2 ( new TYPE_2 ( ) ) (  disk . getVm ( ) . setId ( VAR_2 ) )  disk . getVm ( ) . setId ( VAR_2 ) (  TYPE_3 . METHOD_3 ( METHOD_4 ( ) , disk ) )  TYPE_3 . METHOD_3 ( METHOD_4 ( ) , disk ) (  assertEquals ( VAR_3 , disk . METHOD_5 ( ) ) )  assertEquals ( VAR_3 , disk . METHOD_5 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( STRING_1 , VAR_2 , STRING_2 , STRING_3 ) ) INIT = METHOD_2 ( STRING_1 , VAR_2 , STRING_2 , STRING_3 ) ) VAR VAR (  VAR_1 . METHOD_3 ( org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) . toString ( ) ) )  VAR_1 . METHOD_3 ( org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) . toString ( ) ) (  parameters . METHOD_5 ( VAR_1 ) )  parameters . METHOD_5 ( VAR_1 ) (  parameters . METHOD_6 ( VAR_3 ) )  parameters . METHOD_6 ( VAR_3 ) (  org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_7 ( ) )  org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_7 ( ) (  org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_8 ( VAR_1 ) )  org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_8 ( VAR_1 ) (  TYPE_2 . METHOD_9 ( command , VAR_4 ) )  TYPE_2 . METHOD_9 ( command , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.VdcQueryReturnValue ) TYPE TYPE_1.VdcQueryReturnValue ( NAME returnValue ) NAME returnValue ( INIT = TYPE_2 . METHOD_2 ( VAR_1 . VdcQueryReturnValue class ) ) INIT = TYPE_2 . METHOD_2 ( VAR_1 . VdcQueryReturnValue class ) ) VAR VAR (  TYPE_2 . when ( VAR_2 . METHOD_3 ( TYPE_3 . any ( VAR_1 . VdcQueryType class ) , TYPE_3 . any ( VAR_3 class ) ) ) . thenReturn ( returnValue ) )  TYPE_2 . when ( VAR_2 . METHOD_3 ( TYPE_3 . any ( VAR_1 . VdcQueryType class ) , TYPE_3 . any ( VAR_3 class ) ) ) . thenReturn ( returnValue ) (  TYPE_2 . when ( returnValue . getReturnValue ( ) ) . thenReturn ( TYPE_4 . METHOD_4 ( ) ) )  TYPE_2 . when ( returnValue . getReturnValue ( ) ) . thenReturn ( TYPE_4 . METHOD_4 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN org.ovirt.engine.core.compat.Guid ) RETURN org.ovirt.engine.core.compat.Guid ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_2 ) == null ) COND ( VAR_2 ) == null ( THEN THEN ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_2 ( VAR_1 ) ) INIT = METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND ( VAR_3 == null ) || ( TYPE_2 . equals ( VAR_3 ) ) ) COND ( VAR_3 == null ) || ( TYPE_2 . equals ( VAR_3 ) ) ( THEN THEN (  VAR_3 = METHOD_3 ( VAR_1 ) )  VAR_3 = METHOD_3 ( VAR_1 ) ) THEN THEN ) IF IF (  VAR_2 = VAR_3 )  VAR_2 = VAR_3 ) THEN THEN ) IF IF (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  resource = new TYPE_1 ( VAR_1 [ 0 ] . toString ( ) , new TYPE_2 ( ) ) )  resource = new TYPE_1 ( VAR_1 [ 0 ] . toString ( ) , new TYPE_2 ( ) ) (  resource . METHOD_2 ( VAR_2 ) )  resource . METHOD_2 ( VAR_2 ) (  resource . METHOD_3 ( VAR_3 ) )  resource . METHOD_3 ( VAR_3 ) (  resource . METHOD_4 ( VAR_4 ) )  resource . METHOD_4 ( VAR_4 ) (  resource . METHOD_5 ( VAR_5 ) )  resource . METHOD_5 ( VAR_5 ) (  resource . METHOD_6 ( VAR_6 ) )  resource . METHOD_6 ( VAR_6 ) (  resource . METHOD_7 ( VAR_7 ) )  resource . METHOD_7 ( VAR_7 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.uicommonweb.UICommand ) TYPE org.ovirt.engine.ui.uicommonweb.UICommand ( NAME command ) NAME command ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  super . METHOD_1 ( command ) )  super . METHOD_1 ( command ) ( IF IF ( COND TYPE_1 . METHOD_2 ( command . getName ( ) , STRING_1 ) ) COND TYPE_1 . METHOD_2 ( command . getName ( ) , STRING_1 ) ( THEN THEN (  METHOD_3 ( ) )  METHOD_3 ( ) ) THEN THEN ) IF IF ( IF IF ( COND TYPE_1 . METHOD_2 ( command . getName ( ) , STRING_2 ) ) COND TYPE_1 . METHOD_2 ( command . getName ( ) , STRING_2 ) ( THEN THEN (  METHOD_4 ( ) )  METHOD_4 ( ) ) THEN THEN ) IF IF ( IF IF ( COND TYPE_1 . METHOD_2 ( command . getName ( ) , STRING_3 ) ) COND TYPE_1 . METHOD_2 ( command . getName ( ) , STRING_3 ) ( THEN THEN (  METHOD_5 ( ) )  METHOD_5 ( ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( ( java.lang.String ) ( TYPE_2 . METHOD_2 ( VAR_1 ) ) ) . METHOD_3 ( STRING_1 ) ) COND ( ( java.lang.String ) ( TYPE_2 . METHOD_2 ( VAR_1 ) ) ) . METHOD_3 ( STRING_1 ) ( THEN THEN (  return new TYPE_3 ( ) ; )  return new TYPE_3 ( ) ; ) THEN THEN ( ELSE ELSE (  throw new TYPE_4 ( ( STRING_2 + ( VAR_2 class ) ) ) ; )  throw new TYPE_4 ( ( STRING_2 + ( VAR_2 class ) ) ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  METHOD_3 ( ) )  METHOD_3 ( ) (  command . METHOD_4 ( ) )  command . METHOD_4 ( ) (  TYPE_1 . METHOD_5 ( command ) )  TYPE_1 . METHOD_5 ( command ) (  org.mockito.Mockito . METHOD_6 ( VAR_1 , org.mockito.Mockito . METHOD_7 ( 0 ) ) . METHOD_8 ( TYPE_2 . any ( VAR_2 . VM class ) ) )  org.mockito.Mockito . METHOD_6 ( VAR_1 , org.mockito.Mockito . METHOD_7 ( 0 ) ) . METHOD_8 ( TYPE_2 . any ( VAR_2 . VM class ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( cmd ) . METHOD_2 ( ) )  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( cmd ) . METHOD_2 ( ) (  VAR_2 = org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) )  VAR_2 = org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) (  VAR_3 = org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) )  VAR_3 = org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME vds ) NAME vds ( INIT = new org.ovirt.engine.core.common.businessentities.VDS ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.VDS ( ) ) VAR VAR (  vds . setId ( VAR_3 ) )  vds . setId ( VAR_3 ) (  vds . METHOD_4 ( VAR_2 ) )  vds . METHOD_4 ( VAR_2 ) (  cmd . METHOD_5 ( vds ) )  cmd . METHOD_5 ( vds ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME cluster ) NAME cluster ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND cluster . getId ( ) . equals ( this . cluster . getId ( ) ) ) COND cluster . getId ( ) . equals ( this . cluster . getId ( ) ) ( THEN THEN ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( cluster ) ) INIT = new TYPE_1 ( cluster ) ) VAR VAR (  VAR_1 . METHOD_2 ( true ) )  VAR_1 . METHOD_2 ( true ) (  VAR_1 . METHOD_3 ( ( ! ( ( java.lang.Boolean ) ( METHOD_4 ( ) . getEntity ( ) ) ) ) ) )  VAR_1 . METHOD_3 ( ( ! ( ( java.lang.Boolean ) ( METHOD_4 ( ) . getEntity ( ) ) ) ) ) (  VAR_1 . METHOD_5 ( false ) )  VAR_1 . METHOD_5 ( false ) (  return VAR_1 ; )  return VAR_1 ; ) THEN THEN ( ELSE ELSE (  return super . METHOD_1 ( cluster ) ; )  return super . METHOD_1 ( cluster ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<?extendsTYPE_2> ) TYPE TYPE_1<?extendsTYPE_2> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME sender ) NAME sender ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME args ) NAME args ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) != null ) COND ( METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) != null ( THEN THEN (  VAR_2 . METHOD_5 ( TYPE_3 . METHOD_6 ( METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) ) )  VAR_2 . METHOD_5 ( TYPE_3 . METHOD_6 ( METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) ) ) THEN THEN ( ELSE ELSE (  VAR_2 . METHOD_5 ( new java.util.ArrayList < java.lang.String > ( ) ) )  VAR_2 . METHOD_5 ( new java.util.ArrayList < java.lang.String > ( ) ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME log ) NAME log ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME obj ) NAME obj ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_4 . METHOD_2 ( obj ) ) INIT = TYPE_4 . METHOD_2 ( obj ) ) VAR VAR ( IF IF ( COND ( VAR_2 != null ) && ( TYPE_4 . METHOD_3 ( log , VAR_2 . METHOD_4 ( ) ) ) ) COND ( VAR_2 != null ) && ( TYPE_4 . METHOD_3 ( log , VAR_2 . METHOD_4 ( ) ) ) ( THEN THEN (  TYPE_4 . log ( log , VAR_2 . METHOD_4 ( ) , VAR_3 , TYPE_4 . METHOD_5 ( log , VAR_2 , obj ) , TYPE_5 . METHOD_6 ( VAR_1 ) , id ) )  TYPE_4 . log ( log , VAR_2 . METHOD_4 ( ) , VAR_3 , TYPE_4 . METHOD_5 ( log , VAR_2 , obj ) , TYPE_5 . METHOD_6 ( VAR_1 ) , id ) (  log . error ( STRING_1 , VAR_1 ) )  log . error ( STRING_1 , VAR_1 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME type ) NAME type ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<TYPE_1> ) TYPE java.util.ArrayList<TYPE_1> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME item ) NAME item ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( IF IF ( COND ( item . METHOD_2 ( ) . METHOD_3 ( ) ) == type ) COND ( item . METHOD_2 ( ) . METHOD_3 ( ) ) == type ( THEN THEN (  VAR_2 . add ( item ) )  VAR_2 . add ( item ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( true ) ) INIT = METHOD_2 ( true ) ) VAR VAR (  METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_1 ) , 1 , true , false , false , true , true ) )  METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_1 ) , 1 , true , false , false , true , true ) (  METHOD_5 ( TYPE_2 . METHOD_4 ( VAR_1 ) , TYPE_2 . METHOD_4 ( VAR_1 . getName ( ) ) ) )  METHOD_5 ( TYPE_2 . METHOD_4 ( VAR_1 ) , TYPE_2 . METHOD_4 ( VAR_1 . getName ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VmTemplate> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VmTemplate> ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_1 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) INIT = ( ( TYPE_1 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) VAR VAR (  TYPE_2 . METHOD_1 ( VAR_2 , new TYPE_3 ( ) ) )  TYPE_2 . METHOD_1 ( VAR_2 , new TYPE_3 ( ) ) (  setItems ( VAR_2 ) )  setItems ( VAR_2 ) (  METHOD_2 ( ( ( VAR_2 . size ( ) ) == 0 ) ) )  METHOD_2 ( ( ( VAR_2 . size ( ) ) == 0 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( java.util.ArrayList < TYPE_1 > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ) INIT = ( ( java.util.ArrayList < TYPE_1 > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ) VAR VAR (  VAR_2 = new java.util.HashMap < > ( ) )  VAR_2 = new java.util.HashMap < > ( ) ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  VAR_2 . put ( VAR_3 . getId ( ) , VAR_3 ) )  VAR_2 . put ( VAR_3 . getId ( ) , VAR_3 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF (  METHOD_1 ( ) )  METHOD_1 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME action ) NAME action ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME url ) NAME url ( INIT = ( ( this . VAR_1 . METHOD_2 ( ) ) + ( VAR_2 ) ) + STRING_1 ) INIT = ( ( this . VAR_1 . METHOD_2 ( ) ) + ( VAR_2 ) ) + STRING_1 ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_5> ) TYPE java.util.List<TYPE_5> ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_6 ( ) . METHOD_3 ( ) ) INIT = new TYPE_6 ( ) . METHOD_3 ( ) ) VAR VAR (  url = new TYPE_7 ( url ) . METHOD_3 ( ) )  url = new TYPE_7 ( url ) . METHOD_3 ( ) (  return METHOD_4 ( ) . action ( url , action , VAR_4 class , VAR_4 class , VAR_3 ) ; )  return METHOD_4 ( ) . action ( url , action , VAR_4 class , VAR_4 class , VAR_3 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) ( IF IF ( COND getModel ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) COND getModel ( ) . METHOD_3 ( ) . METHOD_4 ( ) ( THEN THEN (  getModel ( ) . METHOD_3 ( ) . setEntity ( ( VAR_1 == ( VAR_2 ) ) ) )  getModel ( ) . METHOD_3 ( ) . setEntity ( ( VAR_1 == ( VAR_2 ) ) ) ) THEN THEN ) IF IF (  super . METHOD_1 ( VAR_1 ) )  super . METHOD_1 ( VAR_1 ) (  METHOD_5 ( ) )  METHOD_5 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND source == null ) COND source == null ( THEN THEN (  return new java.util.ArrayList < TYPE_2 > ( ) ; )  return new java.util.ArrayList < TYPE_2 > ( ) ; ) THEN THEN ) IF IF (  return source ; )  return source ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < TYPE_2 > ( ) ; } return source ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < TYPE_2 > ( ) ; } return source ; } } ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME params ) NAME params ( INIT = new TYPE_3 ( ) ) INIT = new TYPE_3 ( ) ) VAR VAR (  params . METHOD_2 ( VAR_1 ) )  params . METHOD_2 ( VAR_1 ) (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , params , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , params , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( TYPE_1 . getVm ( ) ) )  VAR_1 . METHOD_2 ( TYPE_1 . getVm ( ) ) ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_3 ( ) ) INIT = METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_4 ( VAR_2 ) ) INIT = METHOD_4 ( VAR_2 ) ) VAR VAR (  METHOD_5 ( ) )  METHOD_5 ( ) ( IF IF ( COND ! VAR_3 ) COND ! VAR_3 ( THEN THEN (  log . error ( STRING_1 ) )  log . error ( STRING_1 ) (  METHOD_6 ( VAR_4 ) )  METHOD_6 ( VAR_4 ) ) THEN THEN ( ELSE ELSE (  TYPE_1 . METHOD_7 ( true ) )  TYPE_1 . METHOD_7 ( true ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME e ) NAME e ( BLOCK BLOCK (  log . error ( STRING_1 ) )  log . error ( STRING_1 ) (  METHOD_6 ( VAR_4 ) )  METHOD_6 ( VAR_4 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StoragePool ) TYPE org.ovirt.engine.core.common.businessentities.StoragePool ( NAME pool ) NAME pool ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) . getStoragePoolId ( ) ) INIT = METHOD_2 ( ) . getStoragePoolId ( ) ) VAR VAR ( IF IF ( COND pool != null ) COND pool != null ( THEN THEN (  pool . setId ( VAR_1 ) )  pool . setId ( VAR_1 ) ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = org.mockito.Mockito . METHOD_3 ( VAR_3 class ) ) INIT = org.mockito.Mockito . METHOD_3 ( VAR_3 class ) ) VAR VAR (  org.mockito.Mockito.when ( VAR_2 . get ( VAR_1 , METHOD_4 ( ) . METHOD_5 ( ) , METHOD_2 ( ) . METHOD_6 ( ) ) ) . thenReturn ( pool ) )  org.mockito.Mockito.when ( VAR_2 . get ( VAR_1 , METHOD_4 ( ) . METHOD_5 ( ) , METHOD_2 ( ) . METHOD_6 ( ) ) ) . thenReturn ( pool ) (  org.mockito.Mockito.when ( METHOD_7 ( ) . METHOD_8 ( ) . METHOD_9 ( ) ) . thenReturn ( VAR_2 ) )  org.mockito.Mockito.when ( METHOD_7 ( ) . METHOD_8 ( ) . METHOD_9 ( ) ) . thenReturn ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( true ) )  METHOD_2 ( true ) (  org.mockito.Mockito . METHOD_3 ( ) . when ( command ) . METHOD_4 ( ) )  org.mockito.Mockito . METHOD_3 ( ) . when ( command ) . METHOD_4 ( ) (  command . METHOD_5 ( ) )  command . METHOD_5 ( ) (  org.mockito.Mockito . METHOD_6 ( VAR_1 , org.mockito.Mockito . METHOD_7 ( 2 ) ) . log ( TYPE_1 . any ( VAR_2 class ) , TYPE_1 . any ( VAR_3 . AuditLogType class ) ) )  org.mockito.Mockito . METHOD_6 ( VAR_1 , org.mockito.Mockito . METHOD_7 ( 2 ) ) . log ( TYPE_1 . any ( VAR_2 class ) , TYPE_1 . any ( VAR_3 . AuditLogType class ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( VAR_3 , VAR_1 , VAR_4 ) )  VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( VAR_3 , VAR_1 , VAR_4 ) ( IF IF ( COND ( VAR_5 ) > 0 ) COND ( VAR_5 ) > 0 ( THEN THEN (  VAR_6 = METHOD_6 ( ) )  VAR_6 = METHOD_6 ( ) ) THEN THEN ) IF IF ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < ( ( VAR_2 . METHOD_7 ( ) ) - 1 ) ) COND i < ( ( VAR_2 . METHOD_7 ( ) ) - 1 ) ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK (  VAR_7 . add ( VAR_2 . METHOD_8 ( i ) . METHOD_9 ( ) ) )  VAR_7 . add ( VAR_2 . METHOD_8 ( i ) . METHOD_9 ( ) ) ) BLOCK BLOCK ) FOR FOR (  METHOD_10 ( ) )  METHOD_10 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.Network ) TYPE org.ovirt.engine.core.common.businessentities.Network ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( STRING_1 ) ) INIT = METHOD_2 ( STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME nic ) NAME nic ( INIT = METHOD_3 ( STRING_2 , null ) ) INIT = METHOD_3 ( STRING_2 , null ) ) VAR VAR (  METHOD_4 ( VAR_1 ) )  METHOD_4 ( VAR_1 ) (  METHOD_5 ( nic ) )  METHOD_5 ( nic ) (  nic . METHOD_6 ( VAR_1 . getName ( ) ) )  nic . METHOD_6 ( VAR_1 . getName ( ) ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_7 ( METHOD_8 ( nic ) ) ) INIT = METHOD_7 ( METHOD_8 ( nic ) ) ) VAR VAR (  METHOD_9 ( VAR_2 , VAR_1 ) )  METHOD_9 ( VAR_2 , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( VAR_2 . Guid class ) ) ) . thenReturn ( TYPE_2 . METHOD_3 ( ) ) )  org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( VAR_2 . Guid class ) ) ) . thenReturn ( TYPE_2 . METHOD_3 ( ) ) (  org.mockito.Mockito.when ( VAR_1 . METHOD_4 ( TYPE_1 . METHOD_5 ( ) ) ) . thenReturn ( TYPE_2 . METHOD_3 ( ) ) )  org.mockito.Mockito.when ( VAR_1 . METHOD_4 ( TYPE_1 . METHOD_5 ( ) ) ) . thenReturn ( TYPE_2 . METHOD_3 ( ) ) (  METHOD_6 ( ) )  METHOD_6 ( ) (  METHOD_7 ( ) )  METHOD_7 ( ) (  METHOD_8 ( ) )  METHOD_8 ( ) (  METHOD_9 ( ) )  METHOD_9 ( ) (  METHOD_10 ( VAR_3 ) )  METHOD_10 ( VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.Map<java.lang.String,java.lang.String> ) RETURN java.util.Map<java.lang.String,java.lang.String> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.HashMap<java.lang.String,java.lang.String> ) TYPE java.util.HashMap<java.lang.String,java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.HashMap < > ( ) ) INIT = new java.util.HashMap < > ( ) ) VAR VAR ( IF IF ( COND ( METHOD_2 ( ) ) != null ) COND ( METHOD_2 ( ) ) != null ( THEN THEN (  VAR_1 . put ( STRING_1 , METHOD_2 ( ) . METHOD_3 ( ) ) )  VAR_1 . put ( STRING_1 , METHOD_2 ( ) . METHOD_3 ( ) ) ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  METHOD_3 ( new TYPE_2 ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_2 , this . METHOD_5 ( ) ) . METHOD_4 ( VAR_3 , METHOD_6 ( ) ) . METHOD_7 ( VAR_1 ) . METHOD_8 ( ) ) )  METHOD_3 ( new TYPE_2 ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_2 , this . METHOD_5 ( ) ) . METHOD_4 ( VAR_3 , METHOD_6 ( ) ) . METHOD_7 ( VAR_1 ) . METHOD_8 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.Network ) TYPE org.ovirt.engine.core.common.businessentities.Network ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( STRING_1 ) ) INIT = METHOD_2 ( STRING_1 ) ) VAR VAR (  METHOD_3 ( VAR_1 ) )  METHOD_3 ( VAR_1 ) ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME nic ) NAME nic ( INIT = METHOD_4 ( STRING_2 , VAR_1 ) ) INIT = METHOD_4 ( STRING_2 , VAR_1 ) ) VAR VAR (  nic . METHOD_5 ( VAR_2 ) )  nic . METHOD_5 ( VAR_2 ) (  nic . METHOD_6 ( TYPE_1 . instance ( ) . METHOD_7 ( INT_1 ) ) )  nic . METHOD_6 ( TYPE_1 . instance ( ) . METHOD_7 ( INT_1 ) ) (  METHOD_8 ( nic ) )  METHOD_8 ( nic ) (  nic . METHOD_6 ( TYPE_1 . instance ( ) . METHOD_7 ( INT_1 ) ) )  nic . METHOD_6 ( TYPE_1 . instance ( ) . METHOD_7 ( INT_1 ) ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_9 ( METHOD_10 ( nic ) ) ) INIT = METHOD_9 ( METHOD_10 ( nic ) ) ) VAR VAR (  METHOD_11 ( VAR_3 , VAR_1 ) )  METHOD_11 ( VAR_3 , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1.VdcActionParametersBase> ) TYPE java.util.List<TYPE_1.VdcActionParametersBase> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . getParameters ( ) . METHOD_2 ( ) ) INIT = TYPE_2 . getParameters ( ) . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE TYPE_1.VdcActionParametersBase ) TYPE TYPE_1.VdcActionParametersBase ( NAME VAR_2 ) NAME VAR_2 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.DiskImage ) TYPE org.ovirt.engine.core.common.businessentities.DiskImage ( NAME diskImage ) NAME diskImage ( INIT = METHOD_3 ( ( ( TYPE_3 ) ( VAR_2 ) ) ) ) INIT = METHOD_3 ( ( ( TYPE_3 ) ( VAR_2 ) ) ) ) VAR VAR ( IF IF ( COND diskImage != null ) COND diskImage != null ( THEN THEN (  TYPE_4 . METHOD_4 ( diskImage , TYPE_2 . METHOD_5 ( ) ) )  TYPE_4 . METHOD_4 ( diskImage , TYPE_2 . METHOD_5 ( ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source ; )  return source ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } (  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = INT_1 ) INIT = INT_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = INT_2 ) INIT = INT_2 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_3 ) NAME VAR_3 ( INIT = org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) INIT = org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) VAR VAR (  METHOD_3 ( VAR_3 , VAR_4 ) )  METHOD_3 ( VAR_3 , VAR_4 ) (  METHOD_4 ( ) )  METHOD_4 ( ) ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ) TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME VAR_5 ) NAME VAR_5 ( INIT = METHOD_5 ( VAR_3 , VAR_1 , VAR_2 ) ) INIT = METHOD_5 ( VAR_3 , VAR_1 , VAR_2 ) ) VAR VAR (  METHOD_6 ( ) )  METHOD_6 ( ) (  TYPE_1 . METHOD_7 ( command . METHOD_8 ( ) ) )  TYPE_1 . METHOD_7 ( command . METHOD_8 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( METHOD_2 ( ) ) . METHOD_3 ( ) )  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( METHOD_2 ( ) ) . METHOD_3 ( ) (  org.mockito.Mockito.doReturn ( null ) . when ( VAR_2 ) . METHOD_4 ( VAR_1 ) )  org.mockito.Mockito.doReturn ( null ) . when ( VAR_2 ) . METHOD_4 ( VAR_1 ) (  METHOD_5 ( ) . METHOD_6 ( ) )  METHOD_5 ( ) . METHOD_6 ( ) ( VAR VAR ( TYPE TYPE_1.VdcQueryReturnValue ) TYPE TYPE_1.VdcQueryReturnValue ( NAME returnValue ) NAME returnValue ( INIT = ( ( TYPE_1 . VdcQueryReturnValue ) ( METHOD_5 ( ) . getReturnValue ( ) ) ) ) INIT = ( ( TYPE_1 . VdcQueryReturnValue ) ( METHOD_5 ( ) . getReturnValue ( ) ) ) ) VAR VAR (  TYPE_2 . assertEquals ( TYPE_3 , returnValue . METHOD_7 ( ) ) )  TYPE_2 . assertEquals ( TYPE_3 , returnValue . METHOD_7 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.network.Network ) TYPE org.ovirt.engine.core.common.businessentities.network.Network ( NAME network ) NAME network ( INIT = METHOD_2 ( null ) ) INIT = METHOD_2 ( null ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ( NAME iface ) NAME iface ( INIT = METHOD_3 ( STRING_1 , null , null , network . getName ( ) ) ) INIT = METHOD_3 ( STRING_1 , null , null , network . getName ( ) ) ) VAR VAR (  org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( VAR_2 . Guid class ) ) ) . thenReturn ( METHOD_4 ( ) ) )  org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( VAR_2 . Guid class ) ) ) . thenReturn ( METHOD_4 ( ) ) (  METHOD_5 ( network , iface , null , VAR_3 ) )  METHOD_5 ( network , iface , null , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain> ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( source ) ) ) INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( source ) ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ) TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME domain ) NAME domain ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( IF IF ( COND ( domain . METHOD_2 ( ) ) == ( VAR_2 ) ) COND ( domain . METHOD_2 ( ) ) == ( VAR_2 ) ( THEN THEN (  return domain ; )  return domain ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME type ) NAME type ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.Object> ) TYPE java.util.Map<java.lang.String,java.lang.Object> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.String> ) TYPE java.util.Map<java.lang.String,java.lang.String> ( NAME VAR_6 ) NAME VAR_6 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_7 ) NAME VAR_7 ( INIT = TYPE_5 . METHOD_1 ( id , type , VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_6 ) ) INIT = TYPE_5 . METHOD_1 ( id , type , VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_6 ) ) VAR VAR ( IF IF ( COND TYPE_6 . METHOD_2 ( VAR_5 ) ) COND TYPE_6 . METHOD_2 ( VAR_5 ) ( THEN THEN (  VAR_7 . METHOD_3 ( VAR_5 ) )  VAR_7 . METHOD_3 ( VAR_5 ) ) THEN THEN ) IF IF (  return VAR_7 ; )  return VAR_7 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.Object[] ) TYPE java.lang.Object[] ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( ) ) INIT = TYPE_1 . METHOD_2 ( ) ) VAR VAR (  VAR_1 [ 1 ] = null )  VAR_1 [ 1 ] = null ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.Object> ) TYPE java.util.Map<java.lang.String,java.lang.Object> ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_1 . METHOD_3 ( VAR_1 ) ) INIT = TYPE_1 . METHOD_3 ( VAR_1 ) ) VAR VAR (  TYPE_1 . METHOD_4 ( TYPE_1 . METHOD_5 ( ) , VAR_1 , VAR_2 ) )  TYPE_1 . METHOD_4 ( TYPE_1 . METHOD_5 ( ) , VAR_1 , VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  return new TYPE_2 ( METHOD_2 ( ) . getParameters ( ) . getStoragePoolId ( ) . getValue ( ) , METHOD_2 ( ) . getParameters ( ) . METHOD_3 ( ) , METHOD_2 ( ) . getParameters ( ) . METHOD_4 ( ) , org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_5 ( ) . get ( METHOD_2 ( ) . getParameters ( ) . METHOD_6 ( ) ) . METHOD_7 ( ) , METHOD_2 ( ) . getParameters ( ) . METHOD_8 ( ) , null ) ; )  return new TYPE_2 ( METHOD_2 ( ) . getParameters ( ) . getStoragePoolId ( ) . getValue ( ) , METHOD_2 ( ) . getParameters ( ) . METHOD_3 ( ) , METHOD_2 ( ) . getParameters ( ) . METHOD_4 ( ) , org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_5 ( ) . get ( METHOD_2 ( ) . getParameters ( ) . METHOD_6 ( ) ) . METHOD_7 ( ) , METHOD_2 ( ) . getParameters ( ) . METHOD_8 ( ) , null ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME context ) NAME context ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME event ) NAME event ) VAR VAR ( VAR VAR ( TYPE TYPE_6<TYPE_3> ) TYPE TYPE_6<TYPE_3> ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  super . METHOD_1 ( context , VAR_1 , model , VAR_2 , event , VAR_3 ) )  super . METHOD_1 ( context , VAR_1 , model , VAR_2 , event , VAR_3 ) ( IF IF ( COND ! ( TYPE_7 . equals ( event . METHOD_2 ( ) ) ) ) COND ! ( TYPE_7 . equals ( event . METHOD_2 ( ) ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  METHOD_3 ( model ) )  METHOD_3 ( model ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( ( TYPE_1 . getVm ( ) ) != null ) && ( ( TYPE_1 . getVm ( ) . METHOD_2 ( ) ) == ( VAR_1 ) ) ) COND ( ( TYPE_1 . getVm ( ) ) != null ) && ( ( TYPE_1 . getVm ( ) . METHOD_2 ( ) ) == ( VAR_1 ) ) ( THEN THEN ( TRY TRY ( BLOCK BLOCK (  TYPE_2 . getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_2 , new TYPE_3 ( TYPE_1 . METHOD_5 ( ) , TYPE_1 . METHOD_6 ( ) ) ) )  TYPE_2 . getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_2 , new TYPE_3 ( TYPE_1 . METHOD_5 ( ) , TYPE_1 . METHOD_6 ( ) ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_3 = e . METHOD_7 ( ) )  VAR_3 = e . METHOD_7 ( ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ! ( validate ( TYPE_1 . METHOD_2 ( TYPE_2 . getParameters ( ) . METHOD_3 ( ) , TYPE_2 . getParameters ( ) . METHOD_4 ( ) , TYPE_2 . getParameters ( ) . METHOD_5 ( ) , TYPE_2 . getVm ( ) . METHOD_6 ( ) , TYPE_2 . METHOD_7 ( ) . METHOD_8 ( ) ) ) ) ) COND ! ( validate ( TYPE_1 . METHOD_2 ( TYPE_2 . getParameters ( ) . METHOD_3 ( ) , TYPE_2 . getParameters ( ) . METHOD_4 ( ) , TYPE_2 . getParameters ( ) . METHOD_5 ( ) , TYPE_2 . getVm ( ) . METHOD_6 ( ) , TYPE_2 . METHOD_7 ( ) . METHOD_8 ( ) ) ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_2 ( ) )  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_2 ( ) (  org.mockito.Mockito.doReturn ( new TYPE_1 ( ) ) . when ( command ) . METHOD_3 ( ) )  org.mockito.Mockito.doReturn ( new TYPE_1 ( ) ) . when ( command ) . METHOD_3 ( ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  VAR_2 . METHOD_4 ( VAR_3 ) )  VAR_2 . METHOD_4 ( VAR_3 ) (  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( VAR_4 ) . get ( TYPE_3 . any ( VAR_5 . Guid class ) ) )  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( VAR_4 ) . get ( TYPE_3 . any ( VAR_5 . Guid class ) ) (  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( command ) . METHOD_5 ( ) )  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( command ) . METHOD_5 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_1 ) ( model ) ) ) INIT = ( ( TYPE_1 ) ( model ) ) ) VAR VAR (  VAR_2 . setItems ( ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) ) ) )  VAR_2 . setItems ( ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( TYPE_2 . METHOD_2 ( ) , VAR_2 ) ) INIT = new TYPE_1 ( TYPE_2 . METHOD_2 ( ) , VAR_2 ) ) VAR VAR ( IF IF ( COND ( TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) ) && ( VAR_1 . METHOD_4 ( ) ) ) COND ( TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) ) && ( VAR_1 . METHOD_4 ( ) ) ( THEN THEN ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME returnValue ) NAME returnValue ( INIT = VAR_1 . METHOD_5 ( ) ) INIT = VAR_1 . METHOD_5 ( ) ) VAR VAR (  VAR_3 = returnValue . getSucceeded ( ) )  VAR_3 = returnValue . getSucceeded ( ) (  VAR_4 = ( ( TYPE_4 ) ( returnValue . getReturnValue ( ) ) ) )  VAR_4 = ( ( TYPE_4 ) ( returnValue . getReturnValue ( ) ) ) (  VAR_5 = true )  VAR_5 = true ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source != null ? ( ( java.lang.String ) ( source ) ) : STRING_1 ; )  return source != null ? ( ( java.lang.String ) ( source ) ) : STRING_1 ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.String ) ( source ) ) : STRING_1 ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.String ) ( source ) ) : STRING_1 ; } } (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new TYPE_1 ( ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new TYPE_1 ( ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN org.ovirt.engine.core.compat.Guid ) RETURN org.ovirt.engine.core.compat.Guid ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) ) == null ) ? METHOD_3 ( ) : TYPE_1 . getParameters ( ) . METHOD_2 ( ) ) INIT = ( ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) ) == null ) ? METHOD_3 ( ) : TYPE_1 . getParameters ( ) . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDS> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDS> ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_1 . METHOD_4 ( ) . METHOD_5 ( VAR_1 , VAR_3 ) ) INIT = TYPE_1 . METHOD_4 ( ) . METHOD_5 ( VAR_1 , VAR_3 ) ) VAR VAR ( IF IF ( COND VAR_2 . isEmpty ( ) ) COND VAR_2 . isEmpty ( ) ( THEN THEN (  METHOD_6 ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) ) )  METHOD_6 ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) ) (  throw new TYPE_2 ( ) ; )  throw new TYPE_2 ( ) ; ) THEN THEN ) IF IF (  return VAR_2 . get ( 0 ) . getId ( ) ; )  return VAR_2 . get ( 0 ) . getId ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( VAR_3 , VAR_4 , new java.lang.String [ ] { VAR_5 } , new java.lang.Object [ ] { TYPE_1 . toString ( ) } , TYPE_2 . METHOD_3 ( ) , VAR_2 ) )  METHOD_2 ( VAR_3 , VAR_4 , new java.lang.String [ ] { VAR_5 } , new java.lang.Object [ ] { TYPE_1 . toString ( ) } , TYPE_2 . METHOD_3 ( ) , VAR_2 ) (  VAR_6 . METHOD_4 ( ) )  VAR_6 . METHOD_4 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.when ( host . METHOD_2 ( ) ) . thenReturn ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) )  org.mockito.Mockito.when ( host . METHOD_2 ( ) ) . thenReturn ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) (  org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( VAR_2 . Guid class ) ) ) . thenReturn ( null ) )  org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( VAR_2 . Guid class ) ) ) . thenReturn ( null ) (  org.mockito.Mockito.when ( VAR_3 . METHOD_4 ( ) ) . thenReturn ( VAR_1 ) )  org.mockito.Mockito.when ( VAR_3 . METHOD_4 ( ) ) . thenReturn ( VAR_1 ) (  validator = new TYPE_2 ( VAR_3 , VAR_4 , host , false , VAR_5 ) )  validator = new TYPE_2 ( VAR_3 , VAR_4 , host , false , VAR_5 ) (  TYPE_3 . METHOD_5 ( validator . METHOD_6 ( ) , TYPE_4 . METHOD_7 ( VAR_6 ) ) )  TYPE_3 . METHOD_5 ( validator . METHOD_6 ( ) , TYPE_4 . METHOD_7 ( VAR_6 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND returnValue != null ) COND returnValue != null ( THEN THEN ( VAR VAR ( TYPE TYPE_1<java.lang.String> ) TYPE TYPE_1<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 < > ( ( ( TYPE_3 < java.lang.String > ) ( returnValue ) ) ) ) INIT = new TYPE_2 < > ( ( ( TYPE_3 < java.lang.String > ) ( returnValue ) ) ) ) VAR VAR (  VAR_1 . add ( STRING_1 ) )  VAR_1 . add ( STRING_1 ) ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = getModel ( ) . METHOD_1 ( ) . getSelectedItem ( ) ) INIT = getModel ( ) . METHOD_1 ( ) . getSelectedItem ( ) ) VAR VAR (  getModel ( ) . METHOD_1 ( ) . setItems ( VAR_1 ) )  getModel ( ) . METHOD_1 ( ) . setItems ( VAR_1 ) (  getModel ( ) . METHOD_1 ( ) . setSelectedItem ( VAR_2 ) )  getModel ( ) . METHOD_1 ( ) . setSelectedItem ( VAR_2 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( METHOD_3 ( ) ) )  METHOD_2 ( METHOD_3 ( ) ) (  METHOD_4 ( 1 ) )  METHOD_4 ( 1 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_5 ( VAR_2 , VAR_3 class , new java.lang.String [ ] { STRING_1 , STRING_2 } , new java.lang.Object [ ] { VAR_4 , new TYPE_2 ( VAR_5 . Disk , VAR_6 ) } , true , true , false ) ) INIT = METHOD_5 ( VAR_2 , VAR_3 class , new java.lang.String [ ] { STRING_1 , STRING_2 } , new java.lang.Object [ ] { VAR_4 , new TYPE_2 ( VAR_5 . Disk , VAR_6 ) } , true , true , false ) ) VAR VAR (  METHOD_2 ( VAR_1 ) )  METHOD_2 ( VAR_1 ) (  VAR_7 . METHOD_6 ( ) )  VAR_7 . METHOD_6 ( ) (  METHOD_7 ( resource . METHOD_8 ( ) ) )  METHOD_7 ( resource . METHOD_8 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ) TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = null ) INIT = null ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( IN model . METHOD_2 ( ) . METHOD_3 ( ) ) IN model . METHOD_2 ( ) . METHOD_3 ( ) ( BLOCK BLOCK ( IF IF ( COND TYPE_3 . METHOD_4 ( VAR_3 . METHOD_5 ( ) , VAR_1 . METHOD_6 ( ) ) ) COND TYPE_3 . METHOD_4 ( VAR_3 . METHOD_5 ( ) , VAR_1 . METHOD_6 ( ) ) ( THEN THEN (  VAR_2 = VAR_3 )  VAR_2 = VAR_3 (  break ; )  break ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME storageDomain ) NAME storageDomain ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( storageDomain . METHOD_2 ( ) ) == null ) COND ( storageDomain . METHOD_2 ( ) ) == null ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ( INIT = storageDomain . getId ( ) ) INIT = storageDomain . getId ( ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ( INIT = storageDomain . METHOD_2 ( ) . getValue ( ) ) INIT = storageDomain . METHOD_2 ( ) . getValue ( ) ) VAR VAR (  return ( TYPE_2 . METHOD_3 ( ) . METHOD_4 ( ) . get ( new TYPE_3 ( VAR_1 , VAR_2 ) ) ) != null ; )  return ( TYPE_2 . METHOD_3 ( ) . METHOD_4 ( ) . get ( new TYPE_3 ( VAR_1 , VAR_2 ) ) ) != null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( STRING_1 , STRING_2 ) ) INIT = TYPE_1 . METHOD_2 ( STRING_1 , STRING_2 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 ( VAR_1 ) ) INIT = new TYPE_2 ( VAR_1 ) ) VAR VAR (  VAR_2 . METHOD_3 ( STRING_3 ) )  VAR_2 . METHOD_3 ( STRING_3 ) (  VAR_2 . METHOD_4 ( ) )  VAR_2 . METHOD_4 ( ) ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_3 . METHOD_5 ( VAR_1 . METHOD_6 ( ) ) ) INIT = TYPE_3 . METHOD_5 ( VAR_1 . METHOD_6 ( ) ) ) VAR VAR (  TYPE_4 . assertEquals ( STRING_4 , STRING_3 , VAR_3 ) )  TYPE_4 . assertEquals ( STRING_4 , STRING_3 , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
