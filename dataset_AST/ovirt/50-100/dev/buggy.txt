( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME model ) NAME model ( INIT = ( ( TYPE_2 ) ( getWindow ( ) ) ) ) INIT = ( ( TYPE_2 ) ( getWindow ( ) ) ) ) VAR VAR (  model . METHOD_2 ( ) )  model . METHOD_2 ( ) (  METHOD_3 ( ) )  METHOD_3 ( ) ( IF IF ( COND model . METHOD_4 ( ) ) COND model . METHOD_4 ( ) ( THEN THEN (  METHOD_5 ( returnValue . METHOD_6 ( ) ) )  METHOD_5 ( returnValue . METHOD_6 ( ) ) (  METHOD_7 ( ) )  METHOD_7 ( ) (  METHOD_8 ( ) . METHOD_9 ( ) )  METHOD_8 ( ) . METHOD_9 ( ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_2 ( ) ) INIT = TYPE_2 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.Object> ) TYPE java.util.Map<java.lang.String,java.lang.Object> ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_2 . METHOD_3 ( ) ) INIT = TYPE_2 . METHOD_3 ( ) ) VAR VAR (  VAR_3 . put ( VAR_4 , VAR_1 ) )  VAR_3 . put ( VAR_4 , VAR_1 ) ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.Object> ) TYPE java.util.Map<java.lang.String,java.lang.Object> ( NAME VAR_5 ) NAME VAR_5 ( INIT = TYPE_2 . METHOD_4 ( VAR_3 ) ) INIT = TYPE_2 . METHOD_4 ( VAR_3 ) ) VAR VAR (  TYPE_3 . METHOD_5 ( VAR_2 , VAR_5 , TYPE_2 . METHOD_6 ( ) ) )  TYPE_3 . METHOD_5 ( VAR_2 , VAR_5 , TYPE_2 . METHOD_6 ( ) ) (  TYPE_4 . assertEquals ( VAR_2 . METHOD_7 ( ) . get ( 0 ) . METHOD_8 ( ) , new TYPE_5 ( STRING_1 ) ) )  TYPE_4 . assertEquals ( VAR_2 . METHOD_7 ( ) . get ( 0 ) . METHOD_8 ( ) , new TYPE_5 ( STRING_1 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME command ) NAME command ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_2 ( ) )  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_2 ( ) (  org.mockito.Mockito.doReturn ( METHOD_3 ( VAR_2 ) ) . when ( command ) . METHOD_4 ( ) )  org.mockito.Mockito.doReturn ( METHOD_3 ( VAR_2 ) ) . when ( command ) . METHOD_4 ( ) (  org.mockito.Mockito.doReturn ( METHOD_5 ( VAR_3 ) ) . when ( VAR_1 ) . METHOD_6 ( VAR_3 ) )  org.mockito.Mockito.doReturn ( METHOD_5 ( VAR_3 ) ) . when ( VAR_1 ) . METHOD_6 ( VAR_3 ) (  org.mockito.Mockito.doReturn ( METHOD_7 ( VAR_4 ) ) . when ( VAR_1 ) . METHOD_6 ( VAR_4 ) )  org.mockito.Mockito.doReturn ( METHOD_7 ( VAR_4 ) ) . when ( VAR_1 ) . METHOD_6 ( VAR_4 ) (  org.mockito.Mockito.doReturn ( null ) . when ( VAR_1 ) . METHOD_6 ( null ) )  org.mockito.Mockito.doReturn ( null ) . when ( VAR_1 ) . METHOD_6 ( null ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return super . METHOD_1 ( VAR_1 ) . append ( STRING_1 , METHOD_2 ( ) ) . append ( STRING_2 , METHOD_3 ( ) ) . append ( STRING_3 , TYPE_2 . METHOD_4 ( METHOD_5 ( ) , STRING_4 ) ) . append ( STRING_5 , METHOD_6 ( ) ) . append ( STRING_6 , TYPE_2 . METHOD_4 ( METHOD_7 ( ) , STRING_4 ) ) . append ( STRING_7 , METHOD_8 ( ) ) . append ( STRING_8 , METHOD_9 ( ) ) ; )  return super . METHOD_1 ( VAR_1 ) . append ( STRING_1 , METHOD_2 ( ) ) . append ( STRING_2 , METHOD_3 ( ) ) . append ( STRING_3 , TYPE_2 . METHOD_4 ( METHOD_5 ( ) , STRING_4 ) ) . append ( STRING_5 , METHOD_6 ( ) ) . append ( STRING_6 , TYPE_2 . METHOD_4 ( METHOD_7 ( ) , STRING_4 ) ) . append ( STRING_7 , METHOD_8 ( ) ) . append ( STRING_8 , METHOD_9 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( METHOD_3 ( METHOD_4 ( ) , VAR_1 ) ) )  METHOD_2 ( METHOD_3 ( METHOD_4 ( ) , VAR_1 ) ) (  METHOD_5 ( ) )  METHOD_5 ( ) (  METHOD_6 ( 0 , 1 ) )  METHOD_6 ( 0 , 1 ) (  METHOD_7 ( ) )  METHOD_7 ( ) (  METHOD_8 ( 1 ) )  METHOD_8 ( 1 ) (  METHOD_9 ( ) )  METHOD_9 ( ) (  VAR_2 . METHOD_10 ( ) )  VAR_2 . METHOD_10 ( ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME response ) NAME response ( INIT = resource . get ( ) ) INIT = resource . get ( ) ) VAR VAR (  METHOD_11 ( response , 0 ) )  METHOD_11 ( response , 0 ) (  METHOD_12 ( response ) )  METHOD_12 ( response ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME sender ) NAME sender ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME args ) NAME args ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( ) )  VAR_1 . METHOD_2 ( ) ( IF IF ( COND ( METHOD_3 ( ) . getEntity ( ) ) != null ) COND ( METHOD_3 ( ) . getEntity ( ) ) != null ( THEN THEN (  METHOD_4 ( true ) )  METHOD_4 ( true ) (  VAR_2 . setEntity ( TYPE_2 . METHOD_5 ( METHOD_3 ( ) . getEntity ( ) ) ) )  VAR_2 . setEntity ( TYPE_2 . METHOD_5 ( METHOD_3 ( ) . getEntity ( ) ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected static ) MODIFIER protected static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_1 ( ) ) INIT = VAR_2 . METHOD_1 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_3 ( VAR_1 ) ) INIT = new TYPE_3 ( VAR_1 ) ) VAR VAR (  VAR_3 . METHOD_2 ( ) . METHOD_3 ( VAR_4 , VAR_5 ) )  VAR_3 . METHOD_2 ( ) . METHOD_3 ( VAR_4 , VAR_5 ) ( IF IF ( COND VAR_6 ) COND VAR_6 ( THEN THEN ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_7 ) NAME VAR_7 ( INIT = VAR_1 . METHOD_4 ( ) ) INIT = VAR_1 . METHOD_4 ( ) ) VAR VAR (  VAR_7 . METHOD_5 ( VAR_8 ) )  VAR_7 . METHOD_5 ( VAR_8 ) ) THEN THEN ) IF IF (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1.ValidationResult ) RETURN TYPE_1.ValidationResult ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME nic ) NAME nic ( IN vm . METHOD_2 ( ) ) IN vm . METHOD_2 ( ) ( BLOCK BLOCK ( IF IF ( COND ( nic . METHOD_3 ( ) ) == null ) COND ( nic . METHOD_3 ( ) ) == null ( THEN THEN (  return ! ( TYPE_3 . METHOD_4 ( vm . METHOD_5 ( ) ) ) ? new TYPE_1 . ValidationResult ( VAR_1 ) : VAR_2 ; )  return ! ( TYPE_3 . METHOD_4 ( vm . METHOD_5 ( ) ) ) ? new TYPE_1 . ValidationResult ( VAR_1 ) : VAR_2 ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME vmId ) NAME vmId ( INIT = VAR_1 . getId ( ) ) INIT = VAR_1 . getId ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME disk ) NAME disk ( IN TYPE_4 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) IN TYPE_4 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_3 ) NAME VAR_3 ( INIT = disk . getId ( ) ) INIT = disk . getId ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_4 . METHOD_4 ( vmId , VAR_3 , TYPE_4 . METHOD_5 ( VAR_1 , vmId ) ) ) INIT = TYPE_4 . METHOD_4 ( vmId , VAR_3 , TYPE_4 . METHOD_5 ( VAR_1 , vmId ) ) ) VAR VAR (  TYPE_4 . METHOD_6 ( VAR_1 , VAR_4 , VAR_3 , VAR_2 ) )  TYPE_4 . METHOD_6 ( VAR_1 , VAR_4 , VAR_3 , VAR_2 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME VAR_1 ) NAME VAR_1 ( INIT = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ) INIT = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ) VAR VAR (  VAR_1 . METHOD_2 ( this ) )  VAR_1 . METHOD_2 ( this ) ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_3 ( ( ( java.util.List < TYPE_1 > ) ( returnValue ) ) ) )  METHOD_3 ( ( ( java.util.List < TYPE_1 > ) ( returnValue ) ) ) ) BLOCK BLOCK ) METHOD METHOD (  VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { METHOD_3 ( ( ( java.util.List < TYPE_1 > ) ( returnValue ) ) ) ; } } )  VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { METHOD_3 ( ( ( java.util.List < TYPE_1 > ) ( returnValue ) ) ) ; } } (  TYPE_2 . getInstance ( ) . METHOD_4 ( VAR_1 ) )  TYPE_2 . getInstance ( ) . METHOD_4 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME params ) NAME params ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  params . METHOD_2 ( STRING_1 ) )  params . METHOD_2 ( STRING_1 ) (  cmd = org.mockito.Mockito . METHOD_3 ( new TYPE_2 ( params ) ) )  cmd = org.mockito.Mockito . METHOD_3 ( new TYPE_2 ( params ) ) (  TYPE_3 . METHOD_4 ( cmd . validate ( ) ) )  TYPE_3 . METHOD_4 ( cmd . validate ( ) ) (  params . METHOD_5 ( null ) )  params . METHOD_5 ( null ) (  params . METHOD_6 ( null ) )  params . METHOD_6 ( null ) (  TYPE_3 . METHOD_4 ( cmd . validate ( ) ) )  TYPE_3 . METHOD_4 ( cmd . validate ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME id ) NAME id ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_1 ) NAME VAR_1 ( INIT = id . METHOD_2 ( ) ) INIT = id . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND VAR_3 < ( VAR_1 . length ) ) COND VAR_3 < ( VAR_1 . length ) ( UPDATE UPDATE (  VAR_3 ++ )  VAR_3 ++ ) UPDATE UPDATE ( BLOCK BLOCK (  VAR_2 . append ( ( STRING_1 + ( java.lang.String . METHOD_3 ( STRING_2 , VAR_1 [ VAR_3 ] ) ) ) ) )  VAR_2 . append ( ( STRING_1 + ( java.lang.String . METHOD_3 ( STRING_2 , VAR_1 [ VAR_3 ] ) ) ) ) ) BLOCK BLOCK ) FOR FOR (  return VAR_2 . toString ( ) ; )  return VAR_2 . toString ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.AuditLogType ) TYPE TYPE_1.AuditLogType ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  VAR_2 . METHOD_2 ( STRING_1 , METHOD_3 ( ) . name ( ) . METHOD_4 ( ) ) )  VAR_2 . METHOD_2 ( STRING_1 , METHOD_3 ( ) . name ( ) . METHOD_4 ( ) ) (  VAR_2 . METHOD_2 ( STRING_2 , TYPE_3 . METHOD_5 ( ) . getName ( ) ) )  VAR_2 . METHOD_2 ( STRING_2 , TYPE_3 . METHOD_5 ( ) . getName ( ) ) (  VAR_2 . METHOD_6 ( TYPE_3 . METHOD_7 ( ) ) )  VAR_2 . METHOD_6 ( TYPE_3 . METHOD_7 ( ) ) (  VAR_3 . log ( VAR_2 , VAR_1 ) )  VAR_3 . log ( VAR_2 , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME sender ) NAME sender ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME args ) NAME args ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_2 . getModel ( ) . getSelectedItem ( ) ) == null ) COND ( VAR_2 . getModel ( ) . getSelectedItem ( ) ) == null ( THEN THEN (  METHOD_2 ( ) . METHOD_3 ( ) )  METHOD_2 ( ) . METHOD_3 ( ) (  return ; )  return ; ) THEN THEN ) IF IF (  METHOD_2 ( ) . METHOD_4 ( VAR_2 . getModel ( ) ) )  METHOD_2 ( ) . METHOD_4 ( VAR_2 . getModel ( ) ) (  METHOD_2 ( ) . METHOD_5 ( true ) )  METHOD_2 ( ) . METHOD_5 ( true ) (  METHOD_6 ( VAR_2 ) )  METHOD_6 ( VAR_2 ) (  METHOD_7 ( VAR_2 ) )  METHOD_7 ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( java.lang.String ) ( returnValue ) ) ) INIT = ( ( java.lang.String ) ( returnValue ) ) ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = ! ( VAR_1 . equals ( STRING_1 ) ) ) INIT = ! ( VAR_1 . equals ( STRING_1 ) ) ) VAR VAR (  METHOD_2 ( VAR_2 ) )  METHOD_2 ( VAR_2 ) (  METHOD_3 ( VAR_1 ) )  METHOD_3 ( VAR_1 ) (  METHOD_4 ( ) )  METHOD_4 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_2 ( ) ) INIT = VAR_2 . METHOD_2 ( ) ) VAR VAR (  VAR_1 . METHOD_3 ( VAR_3 ) )  VAR_1 . METHOD_3 ( VAR_3 ) ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.compat.Guid> ) TYPE java.util.List<org.ovirt.engine.core.compat.Guid> ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_5 . METHOD_4 ( VAR_6 ) ) INIT = VAR_5 . METHOD_4 ( VAR_6 ) ) VAR VAR (  TYPE_2 . assertEquals ( STRING_1 , 1 , VAR_4 . size ( ) ) )  TYPE_2 . assertEquals ( STRING_1 , 1 , VAR_4 . size ( ) ) (  TYPE_2 . METHOD_5 ( STRING_2 , VAR_4 . METHOD_6 ( VAR_3 ) ) )  TYPE_2 . METHOD_5 ( STRING_2 , VAR_4 . METHOD_6 ( VAR_3 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return ( VAR_1 . METHOD_2 ( ) ) < ( VAR_2 . METHOD_2 ( ) ) ? - 1 : ( VAR_1 . METHOD_2 ( ) ) == ( VAR_2 . METHOD_2 ( ) ) ? 0 : 1 ; )  return ( VAR_1 . METHOD_2 ( ) ) < ( VAR_2 . METHOD_2 ( ) ) ? - 1 : ( VAR_1 . METHOD_2 ( ) ) == ( VAR_2 . METHOD_2 ( ) ) ? 0 : 1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<java.util.List<TYPE_2>> ) RETURN TYPE_1<java.util.List<TYPE_2>> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<TYPE_3> ) TYPE java.util.List<TYPE_3> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_5 ( VAR_1 ) ) INIT = new TYPE_5 ( VAR_1 ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  this . VAR_4 . METHOD_2 ( VAR_3 , VAR_2 ) )  this . VAR_4 . METHOD_2 ( VAR_3 , VAR_2 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  this . METHOD_3 ( ) . METHOD_4 ( TYPE_6 . METHOD_5 ( VAR_1 ) ) )  this . METHOD_3 ( ) . METHOD_4 ( TYPE_6 . METHOD_5 ( VAR_1 ) ) (  METHOD_6 ( VAR_1 , VAR_2 ) )  METHOD_6 ( VAR_1 , VAR_2 ) (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( ) ) INIT = TYPE_1 . METHOD_2 ( ) ) VAR VAR (  VAR_2 . METHOD_3 ( STRING_1 , VAR_1 , TYPE_2 . name ( ) ) )  VAR_2 . METHOD_3 ( STRING_1 , VAR_1 , TYPE_2 . name ( ) ) (  METHOD_4 ( VAR_3 , new TYPE_3 ( VAR_1 , VAR_4 ) ) )  METHOD_4 ( VAR_3 , new TYPE_3 ( VAR_1 , VAR_4 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME equals ) NAME equals ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME other ) NAME other ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( other != null ) && ( other instanceof TYPE_1 ) ) COND ( other != null ) && ( other instanceof TYPE_1 ) ( THEN THEN ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_1 ) ( other ) ) ) INIT = ( ( TYPE_1 ) ( other ) ) ) VAR VAR (  return ( VAR_2 . equals ( VAR_1 . METHOD_1 ( ) ) ) && ( ( VAR_3 ) == ( VAR_1 . METHOD_2 ( ) ) ) ; )  return ( VAR_2 . equals ( VAR_1 . METHOD_1 ( ) ) ) && ( ( VAR_3 ) == ( VAR_1 . METHOD_2 ( ) ) ) ; ) THEN THEN ) IF IF (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  this . METHOD_2 ( true ) )  this . METHOD_2 ( true ) (  VAR_2 . METHOD_3 ( VAR_1 . size ( ) ) )  VAR_2 . METHOD_3 ( VAR_1 . size ( ) ) ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = 0 ) INIT = 0 ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  METHOD_4 ( VAR_3 , 0 , METHOD_5 ( VAR_4 ) ) )  METHOD_4 ( VAR_3 , 0 , METHOD_5 ( VAR_4 ) ) (  METHOD_4 ( VAR_3 , 1 , METHOD_6 ( VAR_4 ) ) )  METHOD_4 ( VAR_3 , 1 , METHOD_6 ( VAR_4 ) ) (  METHOD_4 ( VAR_3 , 2 , METHOD_7 ( VAR_4 ) ) )  METHOD_4 ( VAR_3 , 2 , METHOD_7 ( VAR_4 ) ) (  METHOD_4 ( VAR_3 , INT_1 , METHOD_8 ( VAR_4 ) ) )  METHOD_4 ( VAR_3 , INT_1 , METHOD_8 ( VAR_4 ) ) (  VAR_3 ++ )  VAR_3 ++ ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN org.ovirt.engine.core.compat.Guid ) RETURN org.ovirt.engine.core.compat.Guid ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_2 ) == null ) COND ( VAR_2 ) == null ( THEN THEN ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_2 . METHOD_2 ( VAR_1 ) ) INIT = TYPE_2 . METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND ( VAR_3 == null ) || ( TYPE_3 . equals ( VAR_3 ) ) ) COND ( VAR_3 == null ) || ( TYPE_3 . equals ( VAR_3 ) ) ( THEN THEN (  VAR_3 = TYPE_2 . METHOD_3 ( VAR_1 ) )  VAR_3 = TYPE_2 . METHOD_3 ( VAR_1 ) ) THEN THEN ) IF IF (  VAR_2 = VAR_3 )  VAR_2 = VAR_3 ) THEN THEN ) IF IF (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.Map<java.lang.String,java.lang.Object> ) RETURN java.util.Map<java.lang.String,java.lang.Object> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.Object> ) TYPE java.util.Map<java.lang.String,java.lang.Object> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.Object>> ) TYPE java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.Object>> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.HashMap < java.lang.String , java.util.Map < java.lang.String , java.lang.Object > > ( ) ) INIT = new java.util.HashMap < java.lang.String , java.util.Map < java.lang.String , java.lang.Object > > ( ) ) VAR VAR (  VAR_2 . put ( STRING_1 , VAR_1 ) )  VAR_2 . put ( STRING_1 , VAR_1 ) ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.Object> ) TYPE java.util.Map<java.lang.String,java.lang.Object> ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_1 . METHOD_2 ( VAR_2 ) ) INIT = TYPE_1 . METHOD_2 ( VAR_2 ) ) VAR VAR (  METHOD_3 ( ) )  METHOD_3 ( ) (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( ) )  VAR_1 . METHOD_2 ( ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ( INIT = METHOD_3 ( 0 ) ) INIT = METHOD_3 ( 0 ) ) VAR VAR (  model . METHOD_4 ( TYPE_2 . METHOD_5 ( VAR_2 [ 2 ] ) ) )  model . METHOD_4 ( TYPE_2 . METHOD_5 ( VAR_2 [ 2 ] ) ) (  model . METHOD_6 ( TYPE_2 . METHOD_7 ( ) ) )  model . METHOD_6 ( TYPE_2 . METHOD_7 ( ) ) ( TRY TRY ( BLOCK BLOCK (  METHOD_8 ( resource . METHOD_9 ( model ) , 0 ) )  METHOD_8 ( resource . METHOD_9 ( model ) , 0 ) (  METHOD_10 ( STRING_1 ) )  METHOD_10 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( BLOCK BLOCK (  METHOD_11 ( VAR_3 , VAR_4 ) )  METHOD_11 ( VAR_3 , VAR_4 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( VAR_1 . getId ( ) , VAR_3 , TYPE_2 . METHOD_2 ( VAR_4 , STRING_1 ) ) ) INIT = new TYPE_1 ( VAR_1 . getId ( ) , VAR_3 , TYPE_2 . METHOD_2 ( VAR_4 , STRING_1 ) ) ) VAR VAR (  VAR_2 . METHOD_3 ( true ) )  VAR_2 . METHOD_3 ( true ) (  TYPE_3 . getInstance ( ) . METHOD_4 ( VAR_5 , VAR_2 , TYPE_4 . METHOD_5 ( ) ) )  TYPE_3 . getInstance ( ) . METHOD_4 ( VAR_5 , VAR_2 , TYPE_4 . METHOD_5 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_1 ) ( result ) ) ) INIT = ( ( TYPE_1 ) ( result ) ) ) VAR VAR ( IF IF ( COND ( VAR_1 . METHOD_1 ( ) ) != null ) COND ( VAR_1 . METHOD_1 ( ) ) != null ( THEN THEN (  METHOD_2 ( VAR_1 . METHOD_1 ( ) ) )  METHOD_2 ( VAR_1 . METHOD_1 ( ) ) ) THEN THEN ( ELSE ELSE (  METHOD_2 ( new java.util.ArrayList < TYPE_2 > ( ) ) )  METHOD_2 ( new java.util.ArrayList < TYPE_2 > ( ) ) ) ELSE ELSE ) IF IF (  METHOD_3 ( ) )  METHOD_3 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1.Disk ) RETURN TYPE_1.Disk ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.Disk ) TYPE TYPE_1.Disk ( NAME model ) NAME model ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  model . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_1 class ) ) )  model . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_1 class ) ) (  model . METHOD_4 ( TYPE_2 . METHOD_3 ( VAR_2 class ) ) )  model . METHOD_4 ( TYPE_2 . METHOD_3 ( VAR_2 class ) ) (  model . METHOD_5 ( TYPE_3 . METHOD_6 ( TYPE_2 . METHOD_3 ( VAR_3 class ) ) ) )  model . METHOD_5 ( TYPE_3 . METHOD_6 ( TYPE_2 . METHOD_3 ( VAR_3 class ) ) ) (  model . METHOD_7 ( new TYPE_4 ( ) ) )  model . METHOD_7 ( new TYPE_4 ( ) ) (  return model ; )  return model ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( TYPE_3 . METHOD_3 ( ) , TYPE_3 . METHOD_3 ( ) ) ) INIT = TYPE_2 . METHOD_2 ( TYPE_3 . METHOD_3 ( ) , TYPE_3 . METHOD_3 ( ) ) ) VAR VAR (  org.mockito.Mockito.when ( VAR_2 . METHOD_4 ( TYPE_4 . any ( VAR_3 . Guid class ) ) ) . thenReturn ( VAR_1 ) )  org.mockito.Mockito.when ( VAR_2 . METHOD_4 ( TYPE_4 . any ( VAR_3 . Guid class ) ) ) . thenReturn ( VAR_1 ) (  VAR_4 . METHOD_1 ( org.ovirt.engine.core.compat.Guid . METHOD_5 ( ) ) )  VAR_4 . METHOD_1 ( org.ovirt.engine.core.compat.Guid . METHOD_5 ( ) ) ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME iface ) NAME iface ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  METHOD_6 ( iface ) )  METHOD_6 ( iface ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 = org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) )  VAR_1 = org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) (  org.mockito.Mockito.doReturn ( cluster ) . when ( VAR_2 ) . get ( TYPE_1 . any ( VAR_3 . Guid class ) ) )  org.mockito.Mockito.doReturn ( cluster ) . when ( VAR_2 ) . get ( TYPE_1 . any ( VAR_3 . Guid class ) ) (  org.mockito.Mockito.doReturn ( VAR_4 ) . when ( command ) . METHOD_3 ( ) )  org.mockito.Mockito.doReturn ( VAR_4 ) . when ( command ) . METHOD_3 ( ) (  org.mockito.Mockito.doReturn ( VAR_5 ) . when ( command ) . METHOD_4 ( ) )  org.mockito.Mockito.doReturn ( VAR_5 ) . when ( command ) . METHOD_4 ( ) (  org.mockito.Mockito.doReturn ( VAR_6 ) . when ( command ) . METHOD_5 ( ) )  org.mockito.Mockito.doReturn ( VAR_6 ) . when ( command ) . METHOD_5 ( ) (  org.mockito.Mockito.when ( VAR_5 . METHOD_6 ( VAR_1 ) ) . thenReturn ( METHOD_7 ( VAR_7 ) ) )  org.mockito.Mockito.when ( VAR_5 . METHOD_6 ( VAR_1 ) ) . thenReturn ( METHOD_7 ( VAR_7 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) INIT = ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) VAR VAR (  getModel ( ) . METHOD_1 ( ) . setItems ( VAR_1 ) )  getModel ( ) . METHOD_1 ( ) . setItems ( VAR_1 ) ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( IF IF ( COND VAR_2 . getId ( ) . equals ( VAR_3 ) ) COND VAR_2 . getId ( ) . equals ( VAR_3 ) ( THEN THEN (  getModel ( ) . METHOD_1 ( ) . setSelectedItem ( VAR_2 ) )  getModel ( ) . METHOD_1 ( ) . setSelectedItem ( VAR_2 ) (  break ; )  break ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  assertEquals ( STRING_1 , VAR_1 ) )  assertEquals ( STRING_1 , VAR_1 ) (  METHOD_2 ( VAR_4 , VAR_5 . METHOD_3 ( ) , new java.lang.String [ ] { VAR_6 } , new java.lang.Object [ ] { VAR_7 [ 1 ] } , METHOD_4 ( VAR_3 ) , VAR_2 ) )  METHOD_2 ( VAR_4 , VAR_5 . METHOD_3 ( ) , new java.lang.String [ ] { VAR_6 } , new java.lang.Object [ ] { VAR_7 [ 1 ] } , METHOD_4 ( VAR_3 ) , VAR_2 ) (  VAR_8 . METHOD_5 ( ) )  VAR_8 . METHOD_5 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_2 ( ) )  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_2 ( ) (  org.mockito.Mockito.doReturn ( true ) . when ( VAR_1 ) . METHOD_3 ( TYPE_1 . any ( VAR_2 . VM class ) , TYPE_1 . METHOD_4 ( VAR_3 . String class ) , TYPE_1 . any ( VAR_4 class ) , TYPE_1 . METHOD_4 ( VAR_2 . Disk class ) ) )  org.mockito.Mockito.doReturn ( true ) . when ( VAR_1 ) . METHOD_3 ( TYPE_1 . any ( VAR_2 . VM class ) , TYPE_1 . METHOD_4 ( VAR_3 . String class ) , TYPE_1 . any ( VAR_4 class ) , TYPE_1 . METHOD_4 ( VAR_2 . Disk class ) ) (  org.mockito.Mockito.doReturn ( false ) . when ( VAR_1 ) . METHOD_5 ( TYPE_1 . any ( VAR_2 . VM class ) ) )  org.mockito.Mockito.doReturn ( false ) . when ( VAR_1 ) . METHOD_5 ( TYPE_1 . any ( VAR_2 . VM class ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VM> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VM> ( NAME vms ) NAME vms ( INIT = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( TYPE_1 . getParameters ( ) . METHOD_5 ( ) ) ) INIT = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( TYPE_1 . getParameters ( ) . METHOD_5 ( ) ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ( IN vms ) IN vms ( BLOCK BLOCK (  TYPE_2 . METHOD_6 ( vm ) )  TYPE_2 . METHOD_6 ( vm ) (  TYPE_3 . METHOD_7 ( vm . METHOD_8 ( ) , new TYPE_4 ( ) ) )  TYPE_3 . METHOD_7 ( vm . METHOD_8 ( ) , new TYPE_4 ( ) ) (  TYPE_5 . METHOD_9 ( vm ) )  TYPE_5 . METHOD_9 ( vm ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  TYPE_1 . METHOD_10 ( ) . METHOD_11 ( vms ) )  TYPE_1 . METHOD_10 ( ) . METHOD_11 ( vms ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME result ) NAME result ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR ( IF IF ( COND ( TYPE_1 . METHOD_2 ( VAR_1 ) ) && ( TYPE_1 . METHOD_2 ( VAR_2 ) ) ) COND ( TYPE_1 . METHOD_2 ( VAR_1 ) ) && ( TYPE_1 . METHOD_2 ( VAR_2 ) ) ( THEN THEN ( IF IF ( COND VAR_3 . METHOD_3 ( VAR_1 ) ) COND VAR_3 . METHOD_3 ( VAR_1 ) ( THEN THEN ( VAR VAR ( TYPE java.util.HashMap<java.lang.String,java.lang.String> ) TYPE java.util.HashMap<java.lang.String,java.lang.String> ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_3 . get ( VAR_1 ) ) INIT = VAR_3 . get ( VAR_1 ) ) VAR VAR (  result = ( VAR_4 . METHOD_3 ( VAR_2 ) ) ? VAR_4 . get ( VAR_2 ) : VAR_2 )  result = ( VAR_4 . METHOD_3 ( VAR_2 ) ) ? VAR_4 . get ( VAR_2 ) : VAR_2 ) THEN THEN ( ELSE ELSE (  VAR_5 . METHOD_4 ( VAR_6 , VAR_1 ) )  VAR_5 . METHOD_4 ( VAR_6 , VAR_1 ) ) ELSE ELSE ) IF IF ) THEN THEN ) IF IF (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME result ) NAME result ) VAR VAR ( IF IF ( COND ( METHOD_2 ( ) . METHOD_3 ( ) ) == ( VAR_1 ) ) COND ( METHOD_2 ( ) . METHOD_3 ( ) ) == ( VAR_1 ) ( THEN THEN (  result = false )  result = false ) THEN THEN ( ELSE ELSE ( IF IF ( COND ! ( TYPE_1 . METHOD_4 ( ) ) ) COND ! ( TYPE_1 . METHOD_4 ( ) ) ( THEN THEN (  result = true )  result = true ) THEN THEN ( ELSE ELSE ( IF IF ( COND METHOD_2 ( ) . METHOD_5 ( ) ) COND METHOD_2 ( ) . METHOD_5 ( ) ( THEN THEN (  result = true )  result = true ) THEN THEN ( ELSE ELSE (  result = false )  result = false ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_1 ) ( target ) ) ) INIT = ( ( TYPE_1 ) ( target ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.ArrayList<TYPE_2> ) TYPE java.util.ArrayList<TYPE_2> ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( java.util.ArrayList < TYPE_2 > ) ( returnValue ) ) ) INIT = ( ( java.util.ArrayList < TYPE_2 > ) ( returnValue ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( ( VAR_2 . size ( ) ) > 0 ) ? VAR_2 . get ( 0 ) : null ) INIT = ( ( VAR_2 . size ( ) ) > 0 ) ? VAR_2 . get ( 0 ) : null ) VAR VAR (  VAR_1 . METHOD_2 ( VAR_3 ) )  VAR_1 . METHOD_2 ( VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE double ) TYPE double ( NAME VAR_1 ) NAME VAR_1 ( INIT = INT_1 * ( TYPE_1 . METHOD_2 ( INT_2 , 2 ) ) ) INIT = INT_1 * ( TYPE_1 . METHOD_2 ( INT_2 , 2 ) ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_3 ( ( ( long ) ( VAR_1 ) ) , VAR_3 , VAR_4 ) . METHOD_4 ( ) ) INIT = TYPE_2 . METHOD_3 ( ( ( long ) ( VAR_1 ) ) , VAR_3 , VAR_4 ) . METHOD_4 ( ) ) VAR VAR (  TYPE_3 . assertEquals ( VAR_2 , INT_1 ) )  TYPE_3 . assertEquals ( VAR_2 , INT_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ) TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . getId ( ) ) INIT = VAR_1 . getId ( ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . getStoragePoolId ( ) . getValue ( ) ) INIT = VAR_1 . getStoragePoolId ( ) . getValue ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME params ) NAME params ( INIT = new TYPE_1 ( VAR_2 , VAR_3 ) ) INIT = new TYPE_1 ( VAR_2 , VAR_3 ) ) VAR VAR (  params . METHOD_2 ( TYPE_2 . getParameters ( ) . METHOD_3 ( ) ) )  params . METHOD_2 ( TYPE_2 . getParameters ( ) . METHOD_3 ( ) ) (  return TYPE_2 . METHOD_4 ( ) . METHOD_5 ( VAR_4 , params ) . getSucceeded ( ) ; )  return TYPE_2 . METHOD_4 ( ) . METHOD_5 ( VAR_4 , params ) . getSucceeded ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.uicommonweb.models.EntityModel ) TYPE org.ovirt.engine.ui.uicommonweb.models.EntityModel ( NAME model ) NAME model ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  this . model = model )  this . model = model (  VAR_1 . METHOD_2 ( ) )  VAR_1 . METHOD_2 ( ) ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME item ) NAME item ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK ( IF IF ( COND ( item . METHOD_3 ( ) ) && ( item . METHOD_4 ( ) ) ) COND ( item . METHOD_3 ( ) ) && ( item . METHOD_4 ( ) ) ( THEN THEN (  VAR_1 . METHOD_5 ( item ) )  VAR_1 . METHOD_5 ( item ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  model . METHOD_6 ( ) . METHOD_7 ( VAR_3 ) )  model . METHOD_6 ( ) . METHOD_7 ( VAR_3 ) (  model . METHOD_6 ( ) . METHOD_8 ( VAR_3 ) )  model . METHOD_6 ( ) . METHOD_8 ( VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  command = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , VAR_2 , org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , null , null , false ) , null ) ) )  command = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , VAR_2 , org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , null , null , false ) , null ) ) (  METHOD_4 ( ) )  METHOD_4 ( ) (  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( cluster ) . METHOD_5 ( ) )  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( cluster ) . METHOD_5 ( ) (  org.mockito.Mockito.doReturn ( VAR_4 ) . when ( command ) . METHOD_6 ( ) )  org.mockito.Mockito.doReturn ( VAR_4 ) . when ( command ) . METHOD_6 ( ) (  org.mockito.Mockito.doReturn ( vds ) . when ( command ) . METHOD_7 ( ) )  org.mockito.Mockito.doReturn ( vds ) . when ( command ) . METHOD_7 ( ) (  TYPE_3 . METHOD_8 ( command . validate ( ) ) )  TYPE_3 . METHOD_8 ( command . validate ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN org.ovirt.engine.core.common.businessentities.VM ) RETURN org.ovirt.engine.core.common.businessentities.VM ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.RunVmCommand<TYPE_2> ) TYPE TYPE_1.RunVmCommand<TYPE_2> ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  METHOD_3 ( VAR_3 ) )  METHOD_3 ( VAR_3 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = command . getParameters ( ) ) INIT = command . getParameters ( ) ) VAR VAR (  VAR_4 . METHOD_4 ( VAR_1 ) )  VAR_4 . METHOD_4 ( VAR_1 ) (  VAR_4 . METHOD_5 ( VAR_2 ) )  VAR_4 . METHOD_5 ( VAR_2 ) (  VAR_3 . METHOD_6 ( ) )  VAR_3 . METHOD_6 ( ) ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ( INIT = VAR_5 . get ( command . getParameters ( ) . METHOD_7 ( ) ) ) INIT = VAR_5 . get ( command . getParameters ( ) . METHOD_7 ( ) ) ) VAR VAR (  return vm ; )  return vm ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ( STRING_1 + ( VAR_2 ) ) , VAR_3 . Network ) ) INIT = new TYPE_1 ( ( STRING_1 + ( VAR_2 ) ) , VAR_3 . Network ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2<TYPE_1> ) TYPE TYPE_2<TYPE_1> ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_2 ( VAR_1 ) ) INIT = METHOD_2 ( VAR_1 ) ) VAR VAR (  VAR_4 . METHOD_3 ( ) )  VAR_4 . METHOD_3 ( ) (  TYPE_3 . METHOD_4 ( ( ( VAR_5 ) == ( VAR_4 . METHOD_5 ( ) . getReturnValue ( ) ) ) ) )  TYPE_3 . METHOD_4 ( ( ( VAR_5 ) == ( VAR_4 . METHOD_5 ( ) . getReturnValue ( ) ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.Object> ) TYPE java.util.Map<java.lang.String,java.lang.Object> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.HashMap < > ( ) ) INIT = new java.util.HashMap < > ( ) ) VAR VAR ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.Object> ) TYPE java.util.Map<java.lang.String,java.lang.Object> ( NAME disk ) NAME disk ( INIT = new java.util.HashMap < > ( ) ) INIT = new java.util.HashMap < > ( ) ) VAR VAR (  disk . put ( VAR_2 , VAR_3 ) )  disk . put ( VAR_2 , VAR_3 ) (  VAR_1 . put ( STRING_1 , disk ) )  VAR_1 . put ( STRING_1 , disk ) (  VAR_1 . put ( STRING_2 , disk ) )  VAR_1 . put ( STRING_2 , disk ) ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.Object> ) TYPE java.util.Map<java.lang.String,java.lang.Object> ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_1 . METHOD_2 ( VAR_1 ) ) INIT = TYPE_1 . METHOD_2 ( VAR_1 ) ) VAR VAR (  TYPE_1 . METHOD_3 ( TYPE_1 . METHOD_4 ( ) , VAR_4 , false ) )  TYPE_1 . METHOD_3 ( TYPE_1 . METHOD_4 ( ) , VAR_4 , false ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.Disk ) TYPE TYPE_1.Disk ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  assertEquals ( VAR_2 [ VAR_1 ] . toString ( ) , model . getId ( ) ) )  assertEquals ( VAR_2 [ VAR_1 ] . toString ( ) , model . getId ( ) ) (  METHOD_2 ( model . METHOD_3 ( ) ) )  METHOD_2 ( model . METHOD_3 ( ) ) (  METHOD_2 ( ( ! ( model . METHOD_4 ( ) ) ) ) )  METHOD_2 ( ( ! ( model . METHOD_4 ( ) ) ) ) (  METHOD_2 ( model . METHOD_5 ( ) ) )  METHOD_2 ( model . METHOD_5 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_1 ( INT_1 ) ) INIT = new TYPE_1 ( INT_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_3 . METHOD_2 ( STRING_1 ) ) INIT = TYPE_3 . METHOD_2 ( STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_4 . METHOD_3 ( VAR_1 , true ) ) INIT = VAR_4 . METHOD_3 ( VAR_1 , true ) ) VAR VAR (  TYPE_5 . METHOD_4 ( ( STRING_2 + VAR_1 ) , VAR_5 . METHOD_5 ( ) ) )  TYPE_5 . METHOD_4 ( ( STRING_2 + VAR_1 ) , VAR_5 . METHOD_5 ( ) ) ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_6 ) NAME VAR_6 ( INIT = VAR_3 . METHOD_6 ( VAR_5 , true ) ) INIT = VAR_3 . METHOD_6 ( VAR_5 , true ) ) VAR VAR (  VAR_7 . METHOD_7 ( VAR_2 ) )  VAR_7 . METHOD_7 ( VAR_2 ) (  VAR_7 . METHOD_7 ( VAR_6 ) )  VAR_7 . METHOD_7 ( VAR_6 ) (  TYPE_5 . assertEquals ( VAR_2 , VAR_6 ) )  TYPE_5 . assertEquals ( VAR_2 , VAR_6 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.doReturn ( new TYPE_1 . ValidationResult ( VAR_1 ) ) . when ( VAR_2 ) . METHOD_2 ( TYPE_2 . METHOD_3 ( ) ) )  org.mockito.Mockito.doReturn ( new TYPE_1 . ValidationResult ( VAR_1 ) ) . when ( VAR_2 ) . METHOD_2 ( TYPE_2 . METHOD_3 ( ) ) (  TYPE_3 . METHOD_4 ( cmd . METHOD_5 ( ) ) )  TYPE_3 . METHOD_4 ( cmd . METHOD_5 ( ) ) (  org.mockito.Mockito . METHOD_6 ( VAR_2 ) . METHOD_2 ( TYPE_2 . METHOD_3 ( ) ) )  org.mockito.Mockito . METHOD_6 ( VAR_2 ) . METHOD_2 ( TYPE_2 . METHOD_3 ( ) ) (  org.mockito.Mockito . METHOD_6 ( VAR_2 , org.mockito.Mockito . METHOD_7 ( ) ) . METHOD_8 ( TYPE_2 . METHOD_3 ( ) ) )  org.mockito.Mockito . METHOD_6 ( VAR_2 , org.mockito.Mockito . METHOD_7 ( ) ) . METHOD_8 ( TYPE_2 . METHOD_3 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME iface ) NAME iface ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_1 . METHOD_2 ( iface . METHOD_3 ( ) . getValue ( ) ) )  VAR_1 . METHOD_2 ( iface . METHOD_3 ( ) . getValue ( ) ) (  VAR_1 . METHOD_4 ( STRING_1 , iface . METHOD_5 ( ) ) )  VAR_1 . METHOD_4 ( STRING_1 , iface . METHOD_5 ( ) ) (  VAR_1 . METHOD_4 ( STRING_2 , iface . getName ( ) ) )  VAR_1 . METHOD_4 ( STRING_2 , iface . getName ( ) ) (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( STRING_1 ) )  VAR_1 . METHOD_2 ( STRING_1 ) (  METHOD_3 ( ) )  METHOD_3 ( ) (  METHOD_4 ( ) )  METHOD_4 ( ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR ( IF IF ( COND VAR_3 < java.lang.Boolean > METHOD_5 ( VAR_4 ) ) COND VAR_3 < java.lang.Boolean > METHOD_5 ( VAR_4 ) ( THEN THEN (  VAR_1 . METHOD_2 ( STRING_2 ) )  VAR_1 . METHOD_2 ( STRING_2 ) (  VAR_2 . METHOD_6 ( ) )  VAR_2 . METHOD_6 ( ) ) THEN THEN ( ELSE ELSE (  VAR_2 . METHOD_7 ( ) )  VAR_2 . METHOD_7 ( ) (  VAR_1 . METHOD_2 ( STRING_3 ) )  VAR_1 . METHOD_2 ( STRING_3 ) ) ELSE ELSE ) IF IF (  VAR_1 . METHOD_2 ( STRING_4 ) )  VAR_1 . METHOD_2 ( STRING_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( VAR_2 , TYPE_1 . instance ( ) . METHOD_3 ( INT_1 ) ) )  VAR_1 . METHOD_2 ( VAR_2 , TYPE_1 . instance ( ) . METHOD_3 ( INT_1 ) ) (  org.mockito.Mockito.when ( cluster . METHOD_4 ( ) ) . thenReturn ( true ) )  org.mockito.Mockito.when ( cluster . METHOD_4 ( ) ) . thenReturn ( true ) (  validator = new TYPE_2 ( VAR_3 , VAR_4 , cluster , VAR_5 ) )  validator = new TYPE_2 ( VAR_3 , VAR_4 , cluster , VAR_5 ) (  TYPE_3 . METHOD_5 ( validator . METHOD_1 ( ) , TYPE_4 . METHOD_6 ( ) ) )  TYPE_3 . METHOD_5 ( validator . METHOD_1 ( ) , TYPE_4 . METHOD_6 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.List<org.ovirt.engine.core.common.businessentities.VM> ) RETURN java.util.List<org.ovirt.engine.core.common.businessentities.VM> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) == null ) COND ( VAR_1 ) == null ( THEN THEN (  VAR_1 = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ( ( org.ovirt.engine.core.compat.Guid ) ( TYPE_1 . getParameters ( ) . METHOD_4 ( ) ) ) ) )  VAR_1 = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ( ( org.ovirt.engine.core.compat.Guid ) ( TYPE_1 . getParameters ( ) . METHOD_4 ( ) ) ) ) ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StoragePool ) TYPE org.ovirt.engine.core.common.businessentities.StoragePool ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . METHOD_2 ( VAR_1 . getId ( ) ) ) INIT = VAR_3 . METHOD_2 ( VAR_1 . getId ( ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2<org.ovirt.engine.core.compat.Guid> ) TYPE TYPE_2<org.ovirt.engine.core.compat.Guid> ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_2 . METHOD_3 ( ) . map ( TYPE_3 : : METHOD_4 ) . METHOD_5 ( TYPE_4 . METHOD_6 ( ) ) ) INIT = VAR_2 . METHOD_3 ( ) . map ( TYPE_3 : : METHOD_4 ) . METHOD_5 ( TYPE_4 . METHOD_6 ( ) ) ) VAR VAR (  VAR_1 . METHOD_7 ( ( ( VAR_4 . size ( ) ) > 1 ? null : VAR_4 . METHOD_8 ( ) . METHOD_9 ( ) ) ) )  VAR_1 . METHOD_7 ( ( ( VAR_4 . size ( ) ) > 1 ? null : VAR_4 . METHOD_8 ( ) . METHOD_9 ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) ( VAR VAR ( TYPE TYPE_1<org.ovirt.engine.ui.uicommonweb.models.EntityModel> ) TYPE TYPE_1<org.ovirt.engine.ui.uicommonweb.models.EntityModel> ( NAME list ) NAME list ( INIT = new TYPE_1 < org.ovirt.engine.ui.uicommonweb.models.EntityModel > ( ) ) INIT = new TYPE_1 < org.ovirt.engine.ui.uicommonweb.models.EntityModel > ( ) ) VAR VAR (  list . add ( new TYPE_2 ( ) ) )  list . add ( new TYPE_2 ( ) ) (  list . add ( new TYPE_3 ( ) ) )  list . add ( new TYPE_3 ( ) ) (  list . add ( new TYPE_4 ( ) ) )  list . add ( new TYPE_4 ( ) ) (  list . add ( new TYPE_5 ( ) ) )  list . add ( new TYPE_5 ( ) ) (  list . add ( new TYPE_6 ( ) ) )  list . add ( new TYPE_6 ( ) ) (  METHOD_2 ( list ) )  METHOD_2 ( list ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ( INIT = true ) INIT = true ) VAR VAR ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ( INIT = getReturnValue ( ) . METHOD_2 ( ) ) INIT = getReturnValue ( ) . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE java.util.Map<org.ovirt.engine.core.compat.Guid,TYPE_1> ) TYPE java.util.Map<org.ovirt.engine.core.compat.Guid,TYPE_1> ( NAME VAR_3 ) NAME VAR_3 ( INIT = new java.util.HashMap < org.ovirt.engine.core.compat.Guid , TYPE_1 > ( ) ) INIT = new java.util.HashMap < org.ovirt.engine.core.compat.Guid , TYPE_1 > ( ) ) VAR VAR (  VAR_1 = METHOD_3 ( VAR_2 , VAR_3 ) )  VAR_1 = METHOD_3 ( VAR_2 , VAR_3 ) ( IF IF ( COND VAR_1 && ( getParameters ( ) . METHOD_4 ( ) ) ) COND VAR_1 && ( getParameters ( ) . METHOD_4 ( ) ) ( THEN THEN (  METHOD_5 ( ) )  METHOD_5 ( ) ) THEN THEN ) IF IF (  return VAR_1 && ( METHOD_6 ( VAR_1 , VAR_2 , VAR_3 ) ) ; )  return VAR_1 && ( METHOD_6 ( VAR_1 , VAR_2 , VAR_3 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.ArrayList<TYPE_1> ) TYPE java.util.ArrayList<TYPE_1> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_3 ( ) ) INIT = new TYPE_3 ( ) ) VAR VAR (  VAR_5 . put ( VAR_1 , VAR_4 ) )  VAR_5 . put ( VAR_1 , VAR_4 ) (  VAR_4 . METHOD_2 ( VAR_6 ) )  VAR_4 . METHOD_2 ( VAR_6 ) (  VAR_4 . METHOD_3 ( METHOD_4 ( ) ) )  VAR_4 . METHOD_3 ( METHOD_4 ( ) ) (  VAR_4 . METHOD_5 ( VAR_2 ) )  VAR_4 . METHOD_5 ( VAR_2 ) (  VAR_4 . METHOD_6 ( VAR_3 ) )  VAR_4 . METHOD_6 ( VAR_3 ) (  VAR_4 . METHOD_7 ( VAR_7 ) )  VAR_4 . METHOD_7 ( VAR_7 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( TYPE_1 . METHOD_2 ( ) ) != null ) COND ( TYPE_1 . METHOD_2 ( ) ) != null ( THEN THEN (  org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( TYPE_1 . METHOD_2 ( ) . METHOD_5 ( ) ) )  org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( TYPE_1 . METHOD_2 ( ) . METHOD_5 ( ) ) ( IF IF ( COND ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_6 ( ) . get ( TYPE_1 . METHOD_2 ( ) . METHOD_7 ( ) ) ) != null ) COND ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_6 ( ) . get ( TYPE_1 . METHOD_2 ( ) . METHOD_7 ( ) ) ) != null ( THEN THEN (  org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_6 ( ) . METHOD_4 ( TYPE_1 . METHOD_2 ( ) . METHOD_7 ( ) ) )  org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_6 ( ) . METHOD_4 ( TYPE_1 . METHOD_2 ( ) . METHOD_7 ( ) ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( source ) ) : null ; )  return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( source ) ) : null ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( source ) ) : null ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( source ) ) : null ; } } ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_3 . METHOD_2 ( VAR_2 ) )  VAR_3 . METHOD_2 ( VAR_2 ) ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN (  VAR_3 . METHOD_3 ( VAR_1 ) )  VAR_3 . METHOD_3 ( VAR_1 ) ) THEN THEN ) IF IF (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_4 , VAR_3 , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_4 , VAR_3 , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Version ) TYPE org.ovirt.engine.core.compat.Version ( NAME version ) NAME version ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME vds ) NAME vds ( INIT = VAR_1 . METHOD_3 ( ) ) INIT = VAR_1 . METHOD_3 ( ) ) VAR VAR ( IF IF ( COND ( ( ( TYPE_3 . METHOD_4 ( version ) ) && ( ( VAR_2 ) == ( vds . METHOD_5 ( ) ) ) ) && ( TYPE_3 . METHOD_6 ( version ) ) ) && ( TYPE_3 . METHOD_7 ( version ) ) ) COND ( ( ( TYPE_3 . METHOD_4 ( version ) ) && ( ( VAR_2 ) == ( vds . METHOD_5 ( ) ) ) ) && ( TYPE_3 . METHOD_6 ( version ) ) ) && ( TYPE_3 . METHOD_7 ( version ) ) ( THEN THEN (  return new TYPE_4 ( VAR_1 ) ; )  return new TYPE_4 ( VAR_1 ) ; ) THEN THEN ) IF IF (  return new TYPE_5 ( VAR_1 ) ; )  return new TYPE_5 ( VAR_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  VAR_1 . METHOD_2 ( VAR_2 ) )  VAR_1 . METHOD_2 ( VAR_2 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . METHOD_3 ( ) ) INIT = VAR_1 . METHOD_3 ( ) ) VAR VAR (  TYPE_3 . assertEquals ( VAR_2 , VAR_3 ) )  TYPE_3 . assertEquals ( VAR_2 , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  cmd . getParameters ( ) . getVm ( ) . METHOD_3 ( VAR_1 ) )  cmd . getParameters ( ) . getVm ( ) . METHOD_3 ( VAR_1 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME cluster ) NAME cluster ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  cluster . METHOD_4 ( VAR_1 ) )  cluster . METHOD_4 ( VAR_1 ) (  cluster . METHOD_5 ( TYPE_2 . METHOD_6 ( ) ) )  cluster . METHOD_5 ( TYPE_2 . METHOD_6 ( ) ) (  org.mockito.Mockito.doReturn ( cluster ) . when ( cmd ) . METHOD_7 ( ) )  org.mockito.Mockito.doReturn ( cluster ) . when ( cmd ) . METHOD_7 ( ) (  org.mockito.Mockito.doReturn ( true ) . when ( cmd ) . METHOD_8 ( TYPE_3 . METHOD_9 ( ) ) )  org.mockito.Mockito.doReturn ( true ) . when ( cmd ) . METHOD_8 ( TYPE_3 . METHOD_9 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<org.ovirt.engine.core.compat.Guid,java.lang.String> ) TYPE java.util.Map<org.ovirt.engine.core.compat.Guid,java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN (  VAR_2 . METHOD_3 ( TYPE_1 . METHOD_4 ( ) , null , new TYPE_2 < java.lang.String > ( VAR_1 . METHOD_5 ( ) ) ) )  VAR_2 . METHOD_3 ( TYPE_1 . METHOD_4 ( ) , null , new TYPE_2 < java.lang.String > ( VAR_1 . METHOD_5 ( ) ) ) ) THEN THEN ) IF IF (  VAR_3 . METHOD_6 ( TYPE_1 . METHOD_7 ( ) ) )  VAR_3 . METHOD_6 ( TYPE_1 . METHOD_7 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME equals ) NAME equals ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return ( ( VAR_1 != null ) && ( ( METHOD_1 ( ) ) == ( VAR_1 . METHOD_1 ( ) ) ) ) && ( map . equals ( ( ( TYPE_1 ) ( VAR_1 ) ) . map ) ) ; )  return ( ( VAR_1 != null ) && ( ( METHOD_1 ( ) ) == ( VAR_1 . METHOD_1 ( ) ) ) ) && ( map . equals ( ( ( TYPE_1 ) ( VAR_1 ) ) . map ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME context ) NAME context ( INIT = null ) INIT = null ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  context = new TYPE_3 ( ) )  context = new TYPE_3 ( ) (  TYPE_4 . METHOD_2 ( context ) . METHOD_3 ( VAR_3 , new TYPE_5 ( VAR_1 , VAR_2 ) ) )  TYPE_4 . METHOD_2 ( context ) . METHOD_3 ( VAR_3 , new TYPE_5 ( VAR_1 , VAR_2 ) ) ) BLOCK BLOCK ( FINALLY FINALLY ( TRY TRY ( BLOCK BLOCK (  context . METHOD_4 ( ) )  context . METHOD_4 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_4 . error ( ( STRING_1 + STRING_2 ) , e ) )  VAR_4 . error ( ( STRING_1 + STRING_2 ) , e ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.VdcQueryReturnValue ) TYPE TYPE_1.VdcQueryReturnValue ( NAME returnValue ) NAME returnValue ( INIT = ( ( TYPE_1 . VdcQueryReturnValue ) ( VAR_1 ) ) ) INIT = ( ( TYPE_1 . VdcQueryReturnValue ) ( VAR_1 ) ) ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_2 ) NAME VAR_2 ( INIT = returnValue . getReturnValue ( ) ) INIT = returnValue . getReturnValue ( ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > ) ( VAR_2 ) ) ) INIT = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > ) ( VAR_2 ) ) ) VAR VAR (  this . VAR_3 = VAR_3 )  this . VAR_3 = VAR_3 (  METHOD_2 ( ) )  METHOD_2 ( ) (  METHOD_3 ( ) )  METHOD_3 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( METHOD_3 ( ) ) )  org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( METHOD_3 ( ) ) (  org.mockito.Mockito.when ( host . METHOD_2 ( ) ) . thenReturn ( METHOD_3 ( ) ) )  org.mockito.Mockito.when ( host . METHOD_2 ( ) ) . thenReturn ( METHOD_3 ( ) ) (  org.mockito.Mockito.when ( VAR_2 . METHOD_4 ( TYPE_1 . METHOD_5 ( ) ) ) . thenReturn ( TYPE_2 . METHOD_6 ( org.mockito.Mockito . METHOD_7 ( VAR_3 . VDS class ) ) ) )  org.mockito.Mockito.when ( VAR_2 . METHOD_4 ( TYPE_1 . METHOD_5 ( ) ) ) . thenReturn ( TYPE_2 . METHOD_6 ( org.mockito.Mockito . METHOD_7 ( VAR_3 . VDS class ) ) ) (  TYPE_3 . METHOD_8 ( validator . METHOD_9 ( ) , TYPE_4 . METHOD_10 ( VAR_4 ) ) )  TYPE_3 . METHOD_8 ( validator . METHOD_9 ( ) , TYPE_4 . METHOD_10 ( VAR_4 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.uicommonweb.UICommand ) TYPE org.ovirt.engine.ui.uicommonweb.UICommand ( NAME command ) NAME command ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  super . METHOD_1 ( command ) )  super . METHOD_1 ( command ) ( IF IF ( COND TYPE_1 . METHOD_2 ( command . getName ( ) , TYPE_2 ) ) COND TYPE_1 . METHOD_2 ( command . getName ( ) , TYPE_2 ) ( THEN THEN (  METHOD_3 ( ) )  METHOD_3 ( ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND TYPE_1 . METHOD_2 ( command . getName ( ) , TYPE_3 ) ) COND TYPE_1 . METHOD_2 ( command . getName ( ) , TYPE_3 ) ( THEN THEN (  METHOD_4 ( ) )  METHOD_4 ( ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND METHOD_5 ( ) . equals ( command ) ) COND METHOD_5 ( ) . equals ( command ) ( THEN THEN (  METHOD_6 ( ) )  METHOD_6 ( ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND METHOD_7 ( ) . equals ( command ) ) COND METHOD_7 ( ) . equals ( command ) ( THEN THEN (  METHOD_8 ( ) )  METHOD_8 ( ) ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME sender ) NAME sender ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME args ) NAME args ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_3 ) ( args ) ) ) INIT = ( ( TYPE_3 ) ( args ) ) ) VAR VAR ( IF IF ( COND STRING_1 . equals ( VAR_3 ) ) COND STRING_1 . equals ( VAR_3 ) ( THEN THEN ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_5 . getModel ( ) . METHOD_2 ( ) ) INIT = VAR_5 . getModel ( ) . METHOD_2 ( ) ) VAR VAR (  METHOD_3 ( VAR_4 ) )  METHOD_3 ( VAR_4 ) ) THEN THEN ) IF IF (  TYPE_4 . METHOD_4 ( this , this ) )  TYPE_4 . METHOD_4 ( this , this ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  TYPE_1 . getInstance ( ) . METHOD_2 ( METHOD_3 ( ) . METHOD_4 ( ) ) . METHOD_5 ( METHOD_3 ( ) , METHOD_6 ( ) . get ( VAR_1 ) . getId ( ) ) )  TYPE_1 . getInstance ( ) . METHOD_2 ( METHOD_3 ( ) . METHOD_4 ( ) ) . METHOD_5 ( METHOD_3 ( ) , METHOD_6 ( ) . get ( VAR_1 ) . getId ( ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_2 . METHOD_7 ( STRING_1 , METHOD_6 ( ) . get ( VAR_1 ) . getName ( ) , METHOD_8 ( ) . METHOD_9 ( ) , e ) )  VAR_2 . METHOD_7 ( STRING_1 , METHOD_6 ( ) . get ( VAR_1 ) . getName ( ) , METHOD_8 ( ) . METHOD_9 ( ) , e ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.List<java.lang.Integer> ) RETURN java.util.List<java.lang.Integer> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.lang.Integer> ) TYPE java.util.List<java.lang.Integer> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.ArrayList < java.lang.Integer > ( ) ) INIT = new java.util.ArrayList < java.lang.Integer > ( ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 1 ) INIT = 1 ) VAR VAR ) INIT INIT ( COND i <= ( TYPE_1 . METHOD_3 ( VAR_3 , VAR_1 ) ) ) COND i <= ( TYPE_1 . METHOD_3 ( VAR_3 , VAR_1 ) ) ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK ( IF IF ( COND ( VAR_3 % i ) == 0 ) COND ( VAR_3 % i ) == 0 ( THEN THEN (  VAR_2 . add ( i ) )  VAR_2 . add ( i ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR FOR (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) RETURN org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ( VAR VAR ( TYPE java.lang.Boolean ) TYPE java.lang.Boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.Integer ) TYPE java.lang.Integer ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME iface ) NAME iface ( INIT = new org.ovirt.engine.core.common.businessentities . VdsNetworkInterface ( ) ) INIT = new org.ovirt.engine.core.common.businessentities . VdsNetworkInterface ( ) ) VAR VAR (  iface . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) )  iface . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) (  iface . METHOD_3 ( name ) )  iface . METHOD_3 ( name ) (  iface . METHOD_4 ( VAR_1 ) )  iface . METHOD_4 ( VAR_1 ) (  iface . METHOD_5 ( VAR_2 ) )  iface . METHOD_5 ( VAR_2 ) (  iface . METHOD_6 ( VAR_3 ) )  iface . METHOD_6 ( VAR_3 ) (  iface . METHOD_7 ( VAR_4 ) )  iface . METHOD_7 ( VAR_4 ) (  return iface ; )  return iface ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.VdcQueryReturnValue ) TYPE TYPE_1.VdcQueryReturnValue ( NAME returnValue ) NAME returnValue ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME model ) NAME model ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  model . METHOD_2 ( null ) )  model . METHOD_2 ( null ) ( IF IF ( COND ! ( returnValue . getSucceeded ( ) ) ) COND ! ( returnValue . getSucceeded ( ) ) ( THEN THEN (  model . METHOD_2 ( org.ovirt.engine.ui.frontend.Frontend . METHOD_3 ( ) . METHOD_4 ( returnValue . METHOD_5 ( ) ) ) )  model . METHOD_2 ( org.ovirt.engine.ui.frontend.Frontend . METHOD_3 ( ) . METHOD_4 ( returnValue . METHOD_5 ( ) ) ) (  METHOD_6 ( ) . setEntity ( false ) )  METHOD_6 ( ) . setEntity ( false ) (  return true ; )  return true ; ) THEN THEN ) IF IF (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN org.ovirt.engine.core.common.businessentities.StorageDomain ) RETURN org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME status ) NAME status ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ) TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME domain ) NAME domain ( INIT = METHOD_2 ( status , name , VAR_2 ) ) INIT = METHOD_2 ( status , name , VAR_2 ) ) VAR VAR (  domain . METHOD_3 ( VAR_1 ) )  domain . METHOD_3 ( VAR_1 ) (  org.mockito.Mockito.when ( VAR_3 . METHOD_4 ( TYPE_2 . any ( VAR_4 . Guid class ) ) ) . thenReturn ( TYPE_3 . METHOD_5 ( domain ) ) )  org.mockito.Mockito.when ( VAR_3 . METHOD_4 ( TYPE_2 . any ( VAR_4 . Guid class ) ) ) . thenReturn ( TYPE_3 . METHOD_5 ( domain ) ) (  cmd . METHOD_6 ( new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ) )  cmd . METHOD_6 ( new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ) (  return domain ; )  return domain ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  parameters . METHOD_2 ( TYPE_1 ) )  parameters . METHOD_2 ( TYPE_1 ) (  org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . METHOD_3 ( ) ) ) . thenReturn ( TYPE_1 ) )  org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . METHOD_3 ( ) ) ) . thenReturn ( TYPE_1 ) ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ) INIT = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ) VAR VAR (  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( command ) . METHOD_4 ( TYPE_1 . METHOD_3 ( ) ) )  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( command ) . METHOD_4 ( TYPE_1 . METHOD_3 ( ) ) (  TYPE_2 . METHOD_5 ( command ) )  TYPE_2 . METHOD_5 ( command ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_1 ) ( target ) ) ) INIT = ( ( TYPE_1 ) ( target ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VmTemplate> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VmTemplate> ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmTemplate > ) ( returnValue ) ) ) INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmTemplate > ) ( returnValue ) ) ) VAR VAR (  VAR_1 . METHOD_1 ( TYPE_2 . METHOD_2 ( VAR_2 , VAR_3 . METHOD_3 ( ) . METHOD_4 ( ) ) ) )  VAR_1 . METHOD_1 ( TYPE_2 . METHOD_2 ( VAR_2 , VAR_3 . METHOD_3 ( ) . METHOD_4 ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME vmId ) NAME vmId ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_3 ( ) ) INIT = new TYPE_3 ( ) ) VAR VAR (  VAR_3 . METHOD_2 ( true , vmId ) )  VAR_3 . METHOD_2 ( true , vmId ) ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_4 . getId ( ) ) == null ) COND ( VAR_4 . getId ( ) ) == null ( THEN THEN (  VAR_4 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) )  VAR_4 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ) THEN THEN ) IF IF (  VAR_4 . METHOD_4 ( vmId ) )  VAR_4 . METHOD_4 ( vmId ) (  VAR_3 . add ( VAR_4 , VAR_2 ) )  VAR_3 . add ( VAR_4 , VAR_2 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.lang.Integer> ) TYPE java.util.List<java.lang.Integer> ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( VAR_3 ) ) INIT = METHOD_2 ( VAR_3 ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<java.lang.Integer> ) TYPE java.util.List<java.lang.Integer> ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_2 ( VAR_5 ) ) INIT = METHOD_2 ( VAR_5 ) ) VAR VAR (  TYPE_1 . METHOD_3 ( VAR_2 ) )  TYPE_1 . METHOD_3 ( VAR_2 ) ( FOR-EACH FOR-EACH ( TYPE java.lang.Integer ) TYPE java.lang.Integer ( NAME VAR_6 ) NAME VAR_6 ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE java.lang.Integer ) TYPE java.lang.Integer ( NAME VAR_7 ) NAME VAR_7 ( IN VAR_4 ) IN VAR_4 ( BLOCK BLOCK ( IF IF ( COND ( VAR_6 * VAR_7 ) == VAR_1 ) COND ( VAR_6 * VAR_7 ) == VAR_1 ( THEN THEN (  getModel ( ) . METHOD_4 ( ) . setSelectedItem ( VAR_7 ) )  getModel ( ) . METHOD_4 ( ) . setSelectedItem ( VAR_7 ) (  getModel ( ) . METHOD_5 ( ) . setSelectedItem ( VAR_6 ) )  getModel ( ) . METHOD_5 ( ) . setSelectedItem ( VAR_6 ) (  return ; )  return ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME vm ) NAME vm ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = 1 ) INIT = 1 ) VAR VAR ) INIT INIT ( COND VAR_2 <= VAR_1 ) COND VAR_2 <= VAR_1 ( UPDATE UPDATE (  VAR_2 ++ )  VAR_2 ++ ) UPDATE UPDATE ( BLOCK BLOCK (  TYPE_2 . METHOD_2 ( new TYPE_3 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , vm . getId ( ) ) , VAR_3 , VAR_4 , TYPE_2 . METHOD_4 ( ) , true , false ) )  TYPE_2 . METHOD_2 ( new TYPE_3 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , vm . getId ( ) ) , VAR_3 , VAR_4 , TYPE_2 . METHOD_4 ( ) , true , false ) ) BLOCK BLOCK ) FOR FOR ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN org.ovirt.engine.core.common.businessentities.VM ) RETURN org.ovirt.engine.core.common.businessentities.VM ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.DiskImage ) TYPE TYPE_1.DiskImage ( NAME disk ) NAME disk ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( disk . METHOD_2 ( ) ) ) COND ! ( disk . METHOD_2 ( ) ) ( THEN THEN ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VM> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VM> ( NAME vms ) NAME vms ( INIT = TYPE_2 . METHOD_3 ( ) . METHOD_4 ( disk . getId ( ) , false ) ) INIT = TYPE_2 . METHOD_3 ( ) . METHOD_4 ( disk . getId ( ) , false ) ) VAR VAR ( IF IF ( COND ! ( vms . isEmpty ( ) ) ) COND ! ( vms . isEmpty ( ) ) ( THEN THEN (  return vms . get ( 0 ) ; )  return vms . get ( 0 ) ; ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME from ) NAME from ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME to ) NAME to ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR ( IF IF ( COND from . METHOD_2 ( ) ) COND from . METHOD_2 ( ) ( THEN THEN (  to . METHOD_3 ( from . METHOD_4 ( ) ) )  to . METHOD_3 ( from . METHOD_4 ( ) ) ) THEN THEN ) IF IF ( IF IF ( COND from . METHOD_5 ( ) ) COND from . METHOD_5 ( ) ( THEN THEN (  to . METHOD_6 ( from . METHOD_7 ( ) ) )  to . METHOD_6 ( from . METHOD_7 ( ) ) ) THEN THEN ) IF IF (  return to ; )  return to ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.doReturn ( true ) . when ( validator ) . METHOD_2 ( VAR_1 . getId ( ) ) )  org.mockito.Mockito.doReturn ( true ) . when ( validator ) . METHOD_2 ( VAR_1 . getId ( ) ) (  org.mockito.Mockito.doReturn ( true ) . when ( validator ) . METHOD_2 ( VAR_2 . getId ( ) ) )  org.mockito.Mockito.doReturn ( true ) . when ( validator ) . METHOD_2 ( VAR_2 . getId ( ) ) (  TYPE_1 . assertEquals ( validator . METHOD_3 ( ) , VAR_3 ) )  TYPE_1 . assertEquals ( validator . METHOD_3 ( ) , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( true ) )  METHOD_2 ( true ) (  METHOD_3 ( ) )  METHOD_3 ( ) (  VAR_1 . METHOD_4 ( STRING_1 , TYPE_1 . METHOD_5 ( ) . METHOD_6 ( ) . METHOD_7 ( ) , TYPE_1 . METHOD_5 ( ) . METHOD_8 ( ) , ( ( TYPE_1 . METHOD_9 ( ) ) != null ? TYPE_1 . METHOD_9 ( ) . METHOD_8 ( ) : STRING_2 ) ) )  VAR_1 . METHOD_4 ( STRING_1 , TYPE_1 . METHOD_5 ( ) . METHOD_6 ( ) . METHOD_7 ( ) , TYPE_1 . METHOD_5 ( ) . METHOD_8 ( ) , ( ( TYPE_1 . METHOD_9 ( ) ) != null ? TYPE_1 . METHOD_9 ( ) . METHOD_8 ( ) : STRING_2 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE TYPE_2.VM ) TYPE TYPE_2.VM ( NAME entity ) NAME entity ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3<java.lang.String> ) TYPE TYPE_3<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_4 . METHOD_2 ( VAR_2 , VAR_3 ) ) INIT = TYPE_4 . METHOD_2 ( VAR_2 , VAR_3 ) ) VAR VAR (  VAR_4 . METHOD_3 ( VAR_1 , model ) )  VAR_4 . METHOD_3 ( VAR_1 , model ) ( IF IF ( COND VAR_1 . METHOD_4 ( STRING_1 ) ) COND VAR_1 . METHOD_4 ( STRING_1 ) ( THEN THEN (  METHOD_5 ( model , entity , VAR_3 ) )  METHOD_5 ( model , entity , VAR_3 ) ) THEN THEN ) IF IF (  VAR_4 . METHOD_6 ( model ) )  VAR_4 . METHOD_6 ( model ) (  VAR_4 . METHOD_7 ( model ) )  VAR_4 . METHOD_7 ( model ) (  TYPE_5 . METHOD_8 ( model , this ) )  TYPE_5 . METHOD_8 ( model , this ) (  return model ; )  return model ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.when ( cluster . METHOD_2 ( ) ) . thenReturn ( org.mockito.Mockito . METHOD_3 ( VAR_1 . Version class ) ) )  org.mockito.Mockito.when ( cluster . METHOD_2 ( ) ) . thenReturn ( org.mockito.Mockito . METHOD_3 ( VAR_1 . Version class ) ) (  validator = org.mockito.Mockito . METHOD_4 ( new TYPE_1 ( VAR_2 , cluster , VAR_3 ) ) )  validator = org.mockito.Mockito . METHOD_4 ( new TYPE_1 ( VAR_2 , cluster , VAR_3 ) ) (  org.mockito.Mockito.doReturn ( true ) . when ( validator ) . METHOD_5 ( TYPE_2 . any ( VAR_4 class ) ) )  org.mockito.Mockito.doReturn ( true ) . when ( validator ) . METHOD_5 ( TYPE_2 . any ( VAR_4 class ) ) (  TYPE_3 . METHOD_6 ( validator . METHOD_1 ( TYPE_4 . instance ( ) . METHOD_7 ( VAR_4 class ) ) , TYPE_5 . METHOD_8 ( ) ) )  TYPE_3 . METHOD_6 ( validator . METHOD_1 ( TYPE_4 . instance ( ) . METHOD_7 ( VAR_4 class ) ) , TYPE_5 . METHOD_8 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ( INIT = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ) INIT = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ) VAR VAR (  aQuery . METHOD_2 ( this ) )  aQuery . METHOD_2 ( this ) ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( java.lang.String ) ( result ) ) ) INIT = ( ( java.lang.String ) ( result ) ) ) VAR VAR ( IF IF ( COND ( VAR_2 != null ) && ( ( VAR_2 . length ( ) ) > 0 ) ) COND ( VAR_2 != null ) && ( ( VAR_2 . length ( ) ) > 0 ) ( THEN THEN (  METHOD_3 ( ) . setEntity ( VAR_2 ) )  METHOD_3 ( ) . setEntity ( VAR_2 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD (  VAR_1 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object result ) { java.lang.String VAR_2 = ( ( java.lang.String ) ( result ) ) ; if ( ( VAR_2 != null ) && ( ( VAR_2 . length ( ) ) > 0 ) ) { METHOD_3 ( ) . setEntity ( VAR_2 ) ; } } } )  VAR_1 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object result ) { java.lang.String VAR_2 = ( ( java.lang.String ) ( result ) ) ; if ( ( VAR_2 != null ) && ( ( VAR_2 . length ( ) ) > 0 ) ) { METHOD_3 ( ) . setEntity ( VAR_2 ) ; } } } (  TYPE_1 . METHOD_4 ( aQuery ) )  TYPE_1 . METHOD_4 ( aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<java.lang.String> ) TYPE TYPE_1<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( INT_1 , null ) ) INIT = TYPE_2 . METHOD_2 ( INT_1 , null ) ) VAR VAR (  TYPE_3 . METHOD_3 ( ( ( VAR_1 . size ( ) ) == 2 ) ) )  TYPE_3 . METHOD_3 ( ( ( VAR_1 . size ( ) ) == 2 ) ) ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( IN TYPE_4 . METHOD_4 ( STRING_1 ) ) IN TYPE_4 . METHOD_4 ( STRING_1 ) ( BLOCK BLOCK (  TYPE_3 . METHOD_3 ( VAR_1 . METHOD_5 ( VAR_2 . METHOD_6 ( ) ) ) )  TYPE_3 . METHOD_3 ( VAR_1 . METHOD_5 ( VAR_2 . METHOD_6 ( ) ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( ( TYPE_2 . METHOD_2 ( ) ) != null ) && ( ( TYPE_2 . METHOD_3 ( ) ) != null ) ) && ( ! ( TYPE_2 . METHOD_2 ( ) . METHOD_4 ( ) . equals ( VAR_2 ) ) ) ) COND ( ( ( TYPE_2 . METHOD_2 ( ) ) != null ) && ( ( TYPE_2 . METHOD_3 ( ) ) != null ) ) && ( ! ( TYPE_2 . METHOD_2 ( ) . METHOD_4 ( ) . equals ( VAR_2 ) ) ) ( THEN THEN (  VAR_1 . add ( new TYPE_1 ( TYPE_2 . METHOD_3 ( ) , VAR_3 , VAR_4 ) ) )  VAR_1 . add ( new TYPE_1 ( TYPE_2 . METHOD_3 ( ) , VAR_3 , VAR_4 ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( java.util.List < TYPE_1 > ) ( returnValue ) ) ) INIT = ( ( java.util.List < TYPE_1 > ) ( returnValue ) ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  VAR_3 . METHOD_1 ( VAR_2 . getId ( ) . toString ( ) ) )  VAR_3 . METHOD_1 ( VAR_2 . getId ( ) . toString ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ( IF IF ( COND VAR_3 == null ) COND VAR_3 == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  METHOD_2 ( VAR_3 ) )  METHOD_2 ( VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME VAR_1 ) NAME VAR_1 ( INIT = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ) INIT = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ) VAR VAR ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_3 = ( ( java.util.Map < TYPE_1 < java.lang.Integer , org.ovirt.engine.core.compat . Version > , TYPE_2 < java.lang.String > > ) ( ( ( TYPE_3 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) )  VAR_3 = ( ( java.util.Map < TYPE_1 < java.lang.Integer , org.ovirt.engine.core.compat . Version > , TYPE_2 < java.lang.String > > ) ( ( ( TYPE_3 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD (  VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { VAR_3 = ( ( java.util.Map < TYPE_1 < java.lang.Integer , org.ovirt.engine.core.compat . Version > , TYPE_2 < java.lang.String > > ) ( ( ( TYPE_3 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ; } } )  VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { VAR_3 = ( ( java.util.Map < TYPE_1 < java.lang.Integer , org.ovirt.engine.core.compat . Version > , TYPE_2 < java.lang.String > > ) ( ( ( TYPE_3 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ; } } (  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_4 , new TYPE_4 ( VAR_5 ) , VAR_1 ) )  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_4 , new TYPE_4 ( VAR_5 ) , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME equals ) NAME equals ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME obj ) NAME obj ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( this ) == obj ) COND ( this ) == obj ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ( IF IF ( COND obj == null ) COND obj == null ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( IF IF ( COND ( METHOD_1 ( ) ) != ( obj . METHOD_1 ( ) ) ) COND ( METHOD_1 ( ) ) != ( obj . METHOD_1 ( ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME other ) NAME other ( INIT = ( ( TYPE_1 ) ( obj ) ) ) INIT = ( ( TYPE_1 ) ( obj ) ) ) VAR VAR (  return ( TYPE_2 . equals ( vmId , other . vmId ) ) && ( TYPE_2 . equals ( VAR_1 , VAR_2 ) ) ; )  return ( TYPE_2 . equals ( vmId , other . vmId ) ) && ( TYPE_2 . equals ( VAR_1 , VAR_2 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ( INIT = ( ( TYPE_1 ) ( target ) ) ) INIT = ( ( TYPE_1 ) ( target ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDSGroup> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDSGroup> ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( returnValue ) ) ) INIT = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( returnValue ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDSGroup> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDSGroup> ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_1 ( VAR_1 , vm . METHOD_2 ( ) ) ) INIT = TYPE_2 . METHOD_1 ( VAR_1 , vm . METHOD_2 ( ) ) ) VAR VAR (  model . METHOD_3 ( model , VAR_3 , VAR_2 , vm . METHOD_4 ( ) ) )  model . METHOD_3 ( model , VAR_3 , VAR_2 , vm . METHOD_4 ( ) ) (  METHOD_5 ( ) )  METHOD_5 ( ) (  METHOD_6 ( ) )  METHOD_6 ( ) (  METHOD_7 ( vm . getId ( ) ) )  METHOD_7 ( vm . getId ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ( INIT = org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) INIT = org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) VAR VAR (  VAR_2 . getParameters ( ) . METHOD_3 ( VAR_1 ) )  VAR_2 . getParameters ( ) . METHOD_3 ( VAR_1 ) (  org.mockito.Mockito.doReturn ( true ) . when ( VAR_2 ) . METHOD_4 ( VAR_1 ) )  org.mockito.Mockito.doReturn ( true ) . when ( VAR_2 ) . METHOD_4 ( VAR_1 ) (  VAR_2 . validate ( ) )  VAR_2 . validate ( ) (  org.mockito.Mockito . METHOD_5 ( VAR_2 , org.mockito.Mockito . METHOD_6 ( 1 ) ) . METHOD_4 ( VAR_1 ) )  org.mockito.Mockito . METHOD_5 ( VAR_2 , org.mockito.Mockito . METHOD_6 ( 1 ) ) . METHOD_4 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_2 ( ) . METHOD_3 ( STRING_1 , VAR_5 , METHOD_4 ( ) . addValue ( STRING_2 , VAR_1 ) . addValue ( STRING_3 , VAR_2 ) . addValue ( STRING_4 , VAR_3 ) ) ) INIT = METHOD_2 ( ) . METHOD_3 ( STRING_1 , VAR_5 , METHOD_4 ( ) . addValue ( STRING_2 , VAR_1 ) . addValue ( STRING_3 , VAR_2 ) . addValue ( STRING_4 , VAR_3 ) ) ) VAR VAR (  return VAR_4 ; )  return VAR_4 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( TYPE_1 . getVm ( ) ) != null ) COND ( TYPE_1 . getVm ( ) ) != null ( THEN THEN (  this . VAR_1 . METHOD_2 ( TYPE_1 . getVm ( ) . getId ( ) ) )  this . VAR_1 . METHOD_2 ( TYPE_1 . getVm ( ) . getId ( ) ) ) THEN THEN ) IF IF (  METHOD_3 ( ) )  METHOD_3 ( ) (  METHOD_4 ( ) )  METHOD_4 ( ) (  TYPE_1 . METHOD_5 ( true ) )  TYPE_1 . METHOD_5 ( true ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1.ValidationResult ) RETURN TYPE_1.ValidationResult ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2<TYPE_3> ) TYPE TYPE_2<TYPE_3> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.ValidationResult ) TYPE TYPE_1.ValidationResult ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 ) INIT = VAR_3 ) VAR VAR (  VAR_2 = ( METHOD_2 ( VAR_2 ) ) ? VAR_2 : METHOD_3 ( ) )  VAR_2 = ( METHOD_2 ( VAR_2 ) ) ? VAR_2 : METHOD_3 ( ) (  VAR_2 = ( METHOD_2 ( VAR_2 ) ) ? VAR_2 : METHOD_4 ( VAR_1 ) )  VAR_2 = ( METHOD_2 ( VAR_2 ) ) ? VAR_2 : METHOD_4 ( VAR_1 ) (  VAR_2 = ( METHOD_2 ( VAR_2 ) ) ? VAR_2 : METHOD_5 ( VAR_1 ) )  VAR_2 = ( METHOD_2 ( VAR_2 ) ) ? VAR_2 : METHOD_5 ( VAR_1 ) (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . getParameters ( ) . METHOD_2 ( ) . METHOD_3 ( VAR_1 < java.lang.Boolean > METHOD_4 ( VAR_2 ) ) )  TYPE_1 . getParameters ( ) . METHOD_2 ( ) . METHOD_3 ( VAR_1 < java.lang.Boolean > METHOD_4 ( VAR_2 ) ) (  org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_5 ( ) . METHOD_6 ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) ) )  org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_5 ( ) . METHOD_6 ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) ) (  TYPE_1 . METHOD_7 ( ) . METHOD_8 ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) ) )  TYPE_1 . METHOD_7 ( ) . METHOD_8 ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) ) (  METHOD_9 ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) . getId ( ) ) )  METHOD_9 ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) . getId ( ) ) (  TYPE_1 . METHOD_10 ( null ) )  TYPE_1 . METHOD_10 ( null ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ) ( source ) ) : null ; )  return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ) ( source ) ) : null ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ) ( source ) ) : null ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ) ( source ) ) : null ; } } (  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new TYPE_1 ( VAR_1 ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new TYPE_1 ( VAR_1 ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) INIT = ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) VAR VAR (  getModel ( ) . METHOD_1 ( ) . setEntity ( ( ! ( VAR_1 . isEmpty ( ) ) ) ) )  getModel ( ) . METHOD_1 ( ) . setEntity ( ( ! ( VAR_1 . isEmpty ( ) ) ) ) (  getModel ( ) . METHOD_2 ( ( VAR_1 . isEmpty ( ) ? new TYPE_1 ( ) : VAR_1 . get ( 0 ) ) ) )  getModel ( ) . METHOD_2 ( ( VAR_1 . isEmpty ( ) ? new TYPE_1 ( ) : VAR_1 . get ( 0 ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( null ) ) INIT = METHOD_2 ( null ) ) VAR VAR (  VAR_2 . add ( VAR_3 ) )  VAR_2 . add ( VAR_3 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_3 ( VAR_5 ) ) INIT = new TYPE_3 ( VAR_5 ) ) VAR VAR (  METHOD_3 ( 1 , VAR_4 ) )  METHOD_3 ( 1 , VAR_4 ) (  VAR_6 . METHOD_4 ( VAR_1 ) )  VAR_6 . METHOD_4 ( VAR_1 ) ( TRY TRY ( BLOCK BLOCK (  METHOD_5 ( ) )  METHOD_5 ( ) (  TYPE_4 . METHOD_6 ( STRING_1 ) )  TYPE_4 . METHOD_6 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_7 ) NAME VAR_7 ( BLOCK BLOCK (  METHOD_7 ( VAR_7 , VAR_8 , VAR_4 ) )  METHOD_7 ( VAR_7 , VAR_8 , VAR_4 ) ) BLOCK BLOCK ) CATCH CATCH ( FINALLY FINALLY (  VAR_2 . METHOD_8 ( ) )  VAR_2 . METHOD_8 ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( false ) )  TYPE_1 . METHOD_2 ( false ) ( IF IF ( COND ( TYPE_1 . getVm ( ) ) != null ) COND ( TYPE_1 . getVm ( ) ) != null ( THEN THEN (  TYPE_1 . getVm ( ) . METHOD_3 ( VAR_1 ) )  TYPE_1 . getVm ( ) . METHOD_3 ( VAR_1 ) (  TYPE_1 . getVm ( ) . METHOD_4 ( null ) )  TYPE_1 . getVm ( ) . METHOD_4 ( null ) (  org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_5 ( ) . METHOD_6 ( TYPE_1 . getVm ( ) . METHOD_7 ( ) ) )  org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_5 ( ) . METHOD_6 ( TYPE_1 . getVm ( ) . METHOD_7 ( ) ) ) THEN THEN ( ELSE ELSE (  VAR_2 . METHOD_8 ( STRING_1 ) )  VAR_2 . METHOD_8 ( STRING_1 ) ) ELSE ELSE ) IF IF (  METHOD_9 ( true ) )  METHOD_9 ( true ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1<java.util.List<org.ovirt.engine.core.compat.Guid>,org.ovirt.engine.core.compat.Guid> ) RETURN TYPE_1<java.util.List<org.ovirt.engine.core.compat.Guid>,org.ovirt.engine.core.compat.Guid> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ) TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ( NAME cluster ) NAME cluster ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDS> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDS> ( NAME hosts ) NAME hosts ( INIT = METHOD_2 ( ) . METHOD_3 ( new TYPE_3 [ ] { TYPE_3 . VDS , VAR_2 } ) ) INIT = METHOD_2 ( ) . METHOD_3 ( new TYPE_3 [ ] { TYPE_3 . VDS , VAR_2 } ) ) VAR VAR (  return VAR_1 . METHOD_4 ( cluster , hosts , cluster . METHOD_5 ( ) , new java.util.ArrayList < java.lang.String > ( ) ) ; )  return VAR_1 . METHOD_4 ( cluster , hosts , cluster . METHOD_5 ( ) , new java.util.ArrayList < java.lang.String > ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( METHOD_2 ( ) . getSelectedItem ( ) ) != null ) COND ( METHOD_2 ( ) . getSelectedItem ( ) ) != null ( THEN THEN ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_2 ) ( target ) ) ) INIT = ( ( TYPE_2 ) ( target ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS> ( NAME hosts ) NAME hosts ( INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ) ( returnValue ) ) ) INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ) ( returnValue ) ) ) VAR VAR (  VAR_1 . METHOD_4 ( hosts ) )  VAR_1 . METHOD_4 ( hosts ) ) BLOCK BLOCK ) METHOD METHOD (  TYPE_1 . METHOD_3 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_2 VAR_1 = ( ( TYPE_2 ) ( target ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > hosts = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ) ( returnValue ) ) ; VAR_1 . METHOD_4 ( hosts ) ; } } ) ) )  TYPE_1 . METHOD_3 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_2 VAR_1 = ( ( TYPE_2 ) ( target ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > hosts = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ) ( returnValue ) ) ; VAR_1 . METHOD_4 ( hosts ) ; } } ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) ( IF IF ( COND METHOD_2 ( ) ) COND METHOD_2 ( ) ( THEN THEN ( IF IF ( COND ( TYPE_1 . getParameters ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) != ( VAR_1 ) ) COND ( TYPE_1 . getParameters ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) != ( VAR_1 ) ( THEN THEN (  TYPE_1 . METHOD_5 ( ) . METHOD_6 ( true ) )  TYPE_1 . METHOD_5 ( ) . METHOD_6 ( true ) (  TYPE_1 . METHOD_7 ( ) . METHOD_8 ( TYPE_1 . METHOD_5 ( ) . METHOD_5 ( ) ) )  TYPE_1 . METHOD_7 ( ) . METHOD_8 ( TYPE_1 . METHOD_5 ( ) . METHOD_5 ( ) ) ) THEN THEN ) IF IF (  TYPE_1 . METHOD_9 ( true ) )  TYPE_1 . METHOD_9 ( true ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_2<TYPE_3>> ) TYPE java.util.List<TYPE_2<TYPE_3>> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_3> ) TYPE java.util.List<TYPE_3> ( NAME VAR_3 ) NAME VAR_3 ( INIT = new java.util.ArrayList ( VAR_1 . METHOD_2 ( ) ) ) INIT = new java.util.ArrayList ( VAR_1 . METHOD_2 ( ) ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_2<TYPE_3> ) TYPE TYPE_2<TYPE_3> ( NAME VAR_4 ) NAME VAR_4 ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK (  VAR_3 = TYPE_4 . METHOD_3 ( VAR_3 , VAR_4 ) )  VAR_3 = TYPE_4 . METHOD_3 ( VAR_3 , VAR_4 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return ! ( VAR_3 . isEmpty ( ) ) ; )  return ! ( VAR_3 . isEmpty ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 . METHOD_2 ( ) ) COND VAR_1 . METHOD_2 ( ) ( THEN THEN (  METHOD_3 ( ) . METHOD_4 ( TYPE_2 . METHOD_5 ( ) ) )  METHOD_3 ( ) . METHOD_4 ( TYPE_2 . METHOD_5 ( ) ) (  METHOD_3 ( ) . setIsChangable ( false ) )  METHOD_3 ( ) . setIsChangable ( false ) (  METHOD_3 ( ) . setEntity ( false ) )  METHOD_3 ( ) . setEntity ( false ) ) THEN THEN ( ELSE ELSE (  METHOD_3 ( ) . setIsChangable ( true ) )  METHOD_3 ( ) . setIsChangable ( true ) (  METHOD_3 ( ) . setEntity ( TYPE_3 . METHOD_6 ( VAR_2 ) ) )  METHOD_3 ( ) . setEntity ( TYPE_3 . METHOD_6 ( VAR_2 ) ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND METHOD_2 ( ) ) COND METHOD_2 ( ) ( THEN THEN ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( java.lang.String ) ( TYPE_1 . METHOD_3 ( VAR_2 . METHOD_4 ( ) ) ) ) ) INIT = ( ( java.lang.String ) ( TYPE_1 . METHOD_3 ( VAR_2 . METHOD_4 ( ) ) ) ) ) VAR VAR ( IF IF ( COND ! ( VAR_2 . METHOD_5 ( ) . METHOD_6 ( VAR_1 ) ) ) COND ! ( VAR_2 . METHOD_5 ( ) . METHOD_6 ( VAR_1 ) ) ( THEN THEN (  VAR_3 = VAR_2 . METHOD_7 ( ) )  VAR_3 = VAR_2 . METHOD_7 ( ) ) THEN THEN ) IF IF (  return VAR_2 . METHOD_5 ( ) . get ( VAR_1 ) ; )  return VAR_2 . METHOD_5 ( ) . get ( VAR_1 ) ; ) THEN THEN ( ELSE ELSE (  return VAR_2 . METHOD_5 ( ) . get ( VAR_3 ) ; )  return VAR_2 . METHOD_5 ( ) . get ( VAR_3 ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source != null ? source : new java.util.HashMap < org.ovirt.engine.core.common.businessentities.VmTemplate , java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > > ( ) ; )  return source != null ? source : new java.util.HashMap < org.ovirt.engine.core.common.businessentities.VmTemplate , java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > > ( ) ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : new java.util.HashMap < org.ovirt.engine.core.common.businessentities.VmTemplate , java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > > ( ) ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : new java.util.HashMap < org.ovirt.engine.core.common.businessentities.VmTemplate , java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > > ( ) ; } } ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_1 ( VAR_1 , VAR_2 ) ) INIT = new TYPE_1 ( VAR_1 , VAR_2 ) ) VAR VAR (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_4 , VAR_3 , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_4 , VAR_3 , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME validate ) NAME validate ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.ValidationResult ) TYPE TYPE_1.ValidationResult ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_1 . METHOD_1 ( ) ) ) COND ! ( VAR_1 . METHOD_1 ( ) ) ( THEN THEN (  addCanDoActionMessage ( VAR_1 . METHOD_2 ( ) ) )  addCanDoActionMessage ( VAR_1 . METHOD_2 ( ) ) ( IF IF ( COND ( VAR_1 . METHOD_3 ( ) ) != null ) COND ( VAR_1 . METHOD_3 ( ) ) != null ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( IN VAR_1 . METHOD_3 ( ) ) IN VAR_1 . METHOD_3 ( ) ( BLOCK BLOCK (  addCanDoActionMessage ( VAR_2 ) )  addCanDoActionMessage ( VAR_2 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return VAR_1 . METHOD_1 ( ) ; )  return VAR_1 . METHOD_1 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface,org.ovirt.engine.core.common.businessentities.VDS> ) TYPE TYPE_1<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface,org.ovirt.engine.core.common.businessentities.VDS> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface,org.ovirt.engine.core.common.businessentities.VDS> ) TYPE TYPE_1<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface,org.ovirt.engine.core.common.businessentities.VDS> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) ) ) INIT = VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) ) ) VAR VAR ( IF IF ( COND VAR_3 != 0 ) COND VAR_3 != 0 ( THEN THEN (  return VAR_3 ; )  return VAR_3 ; ) THEN THEN ) IF IF (  return VAR_1 . METHOD_2 ( ) . METHOD_5 ( ) . METHOD_4 ( VAR_2 . METHOD_2 ( ) . METHOD_5 ( ) ) ; )  return VAR_1 . METHOD_2 ( ) . METHOD_5 ( ) . METHOD_4 ( VAR_2 . METHOD_2 ( ) . METHOD_5 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME nic ) NAME nic ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VdsNetworkInterface> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VdsNetworkInterface> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME i ) NAME i ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK ( IF IF ( COND i . getName ( ) . equals ( VAR_1 ) ) COND i . getName ( ) . equals ( VAR_1 ) ( THEN THEN (  nic . METHOD_2 ( ) . add ( METHOD_3 ( i . getId ( ) . toString ( ) ) ) )  nic . METHOD_2 ( ) . add ( METHOD_3 ( i . getId ( ) . toString ( ) ) ) (  break ; )  break ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return nic ; )  return nic ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . getInstance ( ) . METHOD_2 ( VAR_3 , METHOD_3 ( VAR_1 ) , TYPE_3 . METHOD_4 ( TYPE_4 . METHOD_5 ( ) ) ) ) INIT = TYPE_2 . getInstance ( ) . METHOD_2 ( VAR_3 , METHOD_3 ( VAR_1 ) , TYPE_3 . METHOD_4 ( TYPE_4 . METHOD_5 ( ) ) ) ) VAR VAR ( IF IF ( COND VAR_2 . getSucceeded ( ) ) COND VAR_2 . getSucceeded ( ) ( THEN THEN (  TYPE_4 . getReturnValue ( ) . METHOD_6 ( ) . METHOD_7 ( VAR_2 . METHOD_8 ( ) ) )  TYPE_4 . getReturnValue ( ) . METHOD_6 ( ) . METHOD_7 ( VAR_2 . METHOD_8 ( ) ) ) THEN THEN ) IF IF (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1.ValidationResult ) RETURN TYPE_1.ValidationResult ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Version ) TYPE org.ovirt.engine.core.compat.Version ( NAME version ) NAME version ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( TYPE_3 . METHOD_2 ( version ) ) ) COND ! ( TYPE_3 . METHOD_2 ( version ) ) ( THEN THEN (  return VAR_2 ; )  return VAR_2 ; ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_1 . METHOD_3 ( ) ) == null ) COND ( VAR_1 . METHOD_3 ( ) ) == null ( THEN THEN (  return TYPE_4 . METHOD_4 ( VAR_1 ) ; )  return TYPE_4 . METHOD_4 ( VAR_1 ) ; ) THEN THEN ( ELSE ELSE (  return new TYPE_5 ( VAR_1 . METHOD_3 ( ) ) . METHOD_5 ( VAR_1 . METHOD_6 ( ) ) ; )  return new TYPE_5 ( VAR_1 . METHOD_3 ( ) ) . METHOD_5 ( VAR_1 . METHOD_6 ( ) ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<java.lang.String> ) RETURN java.util.List<java.lang.String> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME value ) NAME value ( INIT = get ( VAR_1 , VAR_2 ) ) INIT = get ( VAR_1 , VAR_2 ) ) VAR VAR ( IF IF ( COND ( value == null ) || ( value . isEmpty ( ) ) ) COND ( value == null ) || ( value . isEmpty ( ) ) ( THEN THEN (  return TYPE_2 . METHOD_2 ( ) ; )  return TYPE_2 . METHOD_2 ( ) ; ) THEN THEN ) IF IF (  return TYPE_3 . METHOD_3 ( value . METHOD_4 ( STRING_1 ) ) ; )  return TYPE_3 . METHOD_3 ( value . METHOD_4 ( STRING_1 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) . METHOD_3 ( getVm ( ) . METHOD_4 ( ) , getVm ( ) . getStatus ( ) ) )  METHOD_2 ( ) . METHOD_3 ( getVm ( ) . METHOD_4 ( ) , getVm ( ) . getStatus ( ) ) (  getVm ( ) . METHOD_5 ( VAR_1 ) )  getVm ( ) . METHOD_5 ( VAR_1 ) (  TYPE_1 . getInstance ( ) . METHOD_6 ( ) . METHOD_7 ( VAR_2 , new TYPE_2 ( METHOD_8 ( ) , getVm ( ) . METHOD_4 ( ) ) ) )  TYPE_1 . getInstance ( ) . METHOD_6 ( ) . METHOD_7 ( VAR_2 , new TYPE_2 ( METHOD_8 ( ) , getVm ( ) . METHOD_4 ( ) ) ) (  METHOD_2 ( ) . METHOD_9 ( ) )  METHOD_2 ( ) . METHOD_9 ( ) (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ( INIT = getEntity ( ) ) INIT = getEntity ( ) ) VAR VAR (  METHOD_2 ( org.ovirt.engine.ui.frontend.Frontend . METHOD_3 ( VAR_1 , new TYPE_1 ( vm . getId ( ) ) ) ) )  METHOD_2 ( org.ovirt.engine.ui.frontend.Frontend . METHOD_3 ( VAR_1 , new TYPE_1 ( vm . getId ( ) ) ) ) (  setItems ( METHOD_4 ( ) . METHOD_5 ( ) ) )  setItems ( METHOD_4 ( ) . METHOD_5 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ( INIT = org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) INIT = org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) VAR VAR (  METHOD_3 ( VAR_1 ) )  METHOD_3 ( VAR_1 ) (  METHOD_4 ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) )  METHOD_4 ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) (  METHOD_5 ( ) )  METHOD_5 ( ) (  METHOD_6 ( VAR_1 ) )  METHOD_6 ( VAR_1 ) (  METHOD_7 ( ) )  METHOD_7 ( ) (  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( command ) . METHOD_8 ( ) )  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( command ) . METHOD_8 ( ) (  TYPE_1 . METHOD_9 ( command . METHOD_10 ( ) ) )  TYPE_1 . METHOD_9 ( command . METHOD_10 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( ) )  VAR_1 . METHOD_2 ( ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_3 ( 0 ) ) INIT = METHOD_3 ( 0 ) ) VAR VAR (  VAR_2 . METHOD_4 ( TYPE_2 . METHOD_5 ( ) ) )  VAR_2 . METHOD_4 ( TYPE_2 . METHOD_5 ( ) ) (  VAR_2 . METHOD_6 ( TYPE_2 . METHOD_7 ( VAR_3 [ 2 ] ) ) )  VAR_2 . METHOD_6 ( TYPE_2 . METHOD_7 ( VAR_3 [ 2 ] ) ) ( TRY TRY ( BLOCK BLOCK (  VAR_4 . add ( VAR_2 ) )  VAR_4 . add ( VAR_2 ) (  METHOD_8 ( STRING_1 ) )  METHOD_8 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_5 ) NAME VAR_5 ( BLOCK BLOCK (  METHOD_9 ( VAR_5 , VAR_6 ) )  METHOD_9 ( VAR_5 , VAR_6 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  params = METHOD_2 ( ) )  params = METHOD_2 ( ) (  command = org.mockito.Mockito . METHOD_3 ( METHOD_4 ( ) ) )  command = org.mockito.Mockito . METHOD_3 ( METHOD_4 ( ) ) (  VAR_1 = new TYPE_1 ( ) )  VAR_1 = new TYPE_1 ( ) (  VAR_1 . setId ( params . METHOD_5 ( ) ) )  VAR_1 . setId ( params . METHOD_5 ( ) ) (  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( command ) . METHOD_6 ( ) )  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( command ) . METHOD_6 ( ) (  org.mockito.Mockito.when ( VAR_2 . get ( params . METHOD_5 ( ) ) ) . thenReturn ( VAR_1 ) )  org.mockito.Mockito.when ( VAR_2 . get ( params . METHOD_5 ( ) ) ) . thenReturn ( VAR_1 ) (  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( command ) . METHOD_7 ( ) )  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( command ) . METHOD_7 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  model . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_1 class ) . value ( ) ) )  model . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_1 class ) . value ( ) ) ( FOR-EACH FOR-EACH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( IN model . METHOD_4 ( ) . METHOD_4 ( ) ) IN model . METHOD_4 ( ) . METHOD_4 ( ) ( BLOCK BLOCK (  VAR_2 . METHOD_5 ( TYPE_2 . METHOD_3 ( VAR_3 class ) . value ( ) ) )  VAR_2 . METHOD_5 ( TYPE_2 . METHOD_3 ( VAR_3 class ) . value ( ) ) (  VAR_2 . METHOD_6 ( null ) )  VAR_2 . METHOD_6 ( null ) (  VAR_2 . METHOD_7 ( null ) )  VAR_2 . METHOD_7 ( null ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return model ; )  return model ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME sender ) NAME sender ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME args ) NAME args ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  ( ( TYPE_3 . ViewDef ) ( METHOD_2 ( ) ) ) . METHOD_3 ( ( ( org.ovirt.engine.core.common.businessentities.StoragePool ) ( model . METHOD_4 ( ) . getSelectedItem ( ) ) ) . METHOD_5 ( ) ) )  ( ( TYPE_3 . ViewDef ) ( METHOD_2 ( ) ) ) . METHOD_3 ( ( ( org.ovirt.engine.core.common.businessentities.StoragePool ) ( model . METHOD_4 ( ) . getSelectedItem ( ) ) ) . METHOD_5 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  org.mockito.Mockito.when ( VAR_2 . get ( TYPE_2 . any ( VAR_3 . Guid class ) ) ) . thenReturn ( VAR_1 ) )  org.mockito.Mockito.when ( VAR_2 . get ( TYPE_2 . any ( VAR_3 . Guid class ) ) ) . thenReturn ( VAR_1 ) (  TYPE_3 . METHOD_3 ( validator . METHOD_4 ( VAR_1 . getId ( ) ) , TYPE_4 . METHOD_5 ( ) ) )  TYPE_3 . METHOD_3 ( validator . METHOD_4 ( VAR_1 . getId ( ) ) , TYPE_4 . METHOD_5 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( METHOD_2 ( ) ) ) COND ! ( METHOD_2 ( ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( ! ( TYPE_1 . METHOD_3 ( this . VAR_1 , VAR_1 ) ) ) || ( ( this . VAR_2 ) != VAR_2 ) ) INIT = ( ! ( TYPE_1 . METHOD_3 ( this . VAR_1 , VAR_1 ) ) ) || ( ( this . VAR_2 ) != VAR_2 ) ) VAR VAR (  this . VAR_1 = VAR_1 )  this . VAR_1 = VAR_1 (  this . VAR_2 = VAR_2 )  this . VAR_2 = VAR_2 ( IF IF ( COND VAR_3 ) COND VAR_3 ( THEN THEN (  METHOD_4 ( ) )  METHOD_4 ( ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> ( NAME result ) NAME result ( INIT = dao . METHOD_2 ( VAR_1 ) ) INIT = dao . METHOD_2 ( VAR_1 ) ) VAR VAR (  TYPE_1 . METHOD_3 ( result ) )  TYPE_1 . METHOD_3 ( result ) (  TYPE_1 . METHOD_4 ( result . isEmpty ( ) ) )  TYPE_1 . METHOD_4 ( result . isEmpty ( ) ) (  TYPE_1 . assertEquals ( 1 , result . size ( ) ) )  TYPE_1 . assertEquals ( 1 , result . size ( ) ) (  TYPE_1 . assertEquals ( VAR_2 , result . get ( 0 ) . getId ( ) ) )  TYPE_1 . assertEquals ( VAR_2 , result . get ( 0 ) . getId ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  result . append ( ( TYPE_2 . isEmpty ( VAR_1 ) ? STRING_1 : VAR_1 ) ) )  result . append ( ( TYPE_2 . isEmpty ( VAR_1 ) ? STRING_1 : VAR_1 ) ) (  result . append ( ( ( result . length ( ) ) == 0 ? STRING_1 : STRING_2 ) ) )  result . append ( ( ( result . length ( ) ) == 0 ? STRING_1 : STRING_2 ) ) (  result . append ( ( TYPE_2 . isEmpty ( VAR_2 ) ? STRING_1 : VAR_2 ) ) )  result . append ( ( TYPE_2 . isEmpty ( VAR_2 ) ? STRING_1 : VAR_2 ) ) (  return result . toString ( ) ; )  return result . toString ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ( INIT = ( ( TYPE_1 ) ( target ) ) ) INIT = ( ( TYPE_1 ) ( target ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_3 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) INIT = ( ( TYPE_3 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) VAR VAR (  model . METHOD_1 ( ) . setItems ( VAR_1 ) )  model . METHOD_1 ( ) . setItems ( VAR_1 ) (  model . METHOD_1 ( ) . METHOD_2 ( VAR_1 . isEmpty ( ) ) )  model . METHOD_1 ( ) . METHOD_2 ( VAR_1 . isEmpty ( ) ) (  model . METHOD_3 ( ) )  model . METHOD_3 ( ) (  METHOD_4 ( ) )  METHOD_4 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( 0 ) )  METHOD_2 ( 0 ) (  METHOD_2 ( 0 ) )  METHOD_2 ( 0 ) (  METHOD_3 ( METHOD_4 ( ) ) )  METHOD_3 ( METHOD_4 ( ) ) (  VAR_1 . METHOD_5 ( ) )  VAR_1 . METHOD_5 ( ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ( INIT = TYPE_2 . getModel ( 1 , false ) ) INIT = TYPE_2 . getModel ( 1 , false ) ) VAR VAR (  model . setId ( TYPE_3 . toString ( ) ) )  model . setId ( TYPE_3 . toString ( ) ) ( TRY TRY ( BLOCK BLOCK (  resource . METHOD_6 ( model ) )  resource . METHOD_6 ( model ) (  METHOD_7 ( STRING_1 ) )  METHOD_7 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_2 ) NAME VAR_2 ( BLOCK BLOCK (  METHOD_8 ( VAR_2 ) )  METHOD_8 ( VAR_2 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.util.ArrayList<TYPE_1> ) RETURN java.util.ArrayList<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2[] ) TYPE TYPE_2[] ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<TYPE_1> ) TYPE java.util.ArrayList<TYPE_1> ( NAME result ) NAME result ( INIT = new java.util.ArrayList < TYPE_1 > ( VAR_1 . length ) ) INIT = new java.util.ArrayList < TYPE_1 > ( VAR_1 . length ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  result . add ( TYPE_3 . METHOD_2 ( VAR_2 ) ) )  result . add ( TYPE_3 . METHOD_2 ( VAR_2 ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ) INIT = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 ( VAR_1 ) ) INIT = new TYPE_2 ( VAR_1 ) ) VAR VAR (  VAR_2 . METHOD_4 ( new TYPE_3 ( VAR_3 . Disk , VAR_1 ) ) )  VAR_2 . METHOD_4 ( new TYPE_3 ( VAR_3 . Disk , VAR_1 ) ) (  VAR_2 . METHOD_5 ( VAR_2 ) )  VAR_2 . METHOD_5 ( VAR_2 ) (  VAR_2 . METHOD_6 ( VAR_4 ) )  VAR_2 . METHOD_6 ( VAR_4 ) ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME returnValue ) NAME returnValue ( INIT = METHOD_7 ( VAR_4 , VAR_2 ) ) INIT = METHOD_7 ( VAR_4 , VAR_2 ) ) VAR VAR ( IF IF ( COND returnValue . getSucceeded ( ) ) COND returnValue . getSucceeded ( ) ( THEN THEN (  METHOD_8 ( returnValue . METHOD_9 ( ) ) )  METHOD_8 ( returnValue . METHOD_9 ( ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( STRING_1 ) ) INIT = new TYPE_1 ( STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( STRING_2 ) ) INIT = new TYPE_1 ( STRING_2 ) ) VAR VAR (  TYPE_2 . METHOD_2 ( ( ( VAR_1 . METHOD_3 ( VAR_2 ) ) < 0 ) ) )  TYPE_2 . METHOD_2 ( ( ( VAR_1 . METHOD_3 ( VAR_2 ) ) < 0 ) ) (  TYPE_2 . METHOD_2 ( ( ( VAR_1 . METHOD_3 ( VAR_1 ) ) == 0 ) ) )  TYPE_2 . METHOD_2 ( ( ( VAR_1 . METHOD_3 ( VAR_1 ) ) == 0 ) ) (  TYPE_2 . METHOD_2 ( ( ( VAR_2 . METHOD_3 ( VAR_1 ) ) > 0 ) ) )  TYPE_2 . METHOD_2 ( ( ( VAR_2 . METHOD_3 ( VAR_1 ) ) > 0 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  command = METHOD_2 ( ) )  command = METHOD_2 ( ) (  org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_3 ( TYPE_1 . any ( VAR_1 . Guid class ) ) )  org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_3 ( TYPE_1 . any ( VAR_1 . Guid class ) ) (  org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_4 ( TYPE_1 . any ( VAR_1 . Version class ) ) )  org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_4 ( TYPE_1 . any ( VAR_1 . Version class ) ) (  org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_5 ( TYPE_1 . any ( VAR_1 . Guid class ) ) )  org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_5 ( TYPE_1 . any ( VAR_1 . Guid class ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( null ) ) ) )  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( null ) ) ) (  TYPE_3 . METHOD_3 ( cmd . validate ( ) ) )  TYPE_3 . METHOD_3 ( cmd . validate ( ) ) (  TYPE_3 . METHOD_4 ( cmd . getReturnValue ( ) . METHOD_5 ( ) . METHOD_6 ( TYPE_4 . toString ( ) ) ) )  TYPE_3 . METHOD_4 ( cmd . getReturnValue ( ) . METHOD_5 ( ) . METHOD_6 ( TYPE_4 . toString ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ) TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_3 ( VAR_4 ) ) INIT = METHOD_3 ( VAR_4 ) ) VAR VAR (  VAR_3 . METHOD_4 ( VAR_5 ) )  VAR_3 . METHOD_4 ( VAR_5 ) (  VAR_3 . METHOD_5 ( VAR_1 ) )  VAR_3 . METHOD_5 ( VAR_1 ) ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ) TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME VAR_6 ) NAME VAR_6 ( INIT = METHOD_3 ( VAR_7 ) ) INIT = METHOD_3 ( VAR_7 ) ) VAR VAR (  VAR_6 . METHOD_4 ( VAR_5 ) )  VAR_6 . METHOD_4 ( VAR_5 ) (  VAR_6 . METHOD_5 ( VAR_2 ) )  VAR_6 . METHOD_5 ( VAR_2 ) (  METHOD_6 ( VAR_8 , VAR_9 ) )  METHOD_6 ( VAR_8 , VAR_9 ) (  METHOD_7 ( VAR_10 , org.ovirt.engine.core.compat.Guid . METHOD_8 ( ) , VAR_8 ) )  METHOD_7 ( VAR_10 , org.ovirt.engine.core.compat.Guid . METHOD_8 ( ) , VAR_8 ) (  TYPE_2 . METHOD_9 ( command . validate ( ) ) )  TYPE_2 . METHOD_9 ( command . validate ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) , null ) ) )  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) , null ) ) (  METHOD_3 ( ) )  METHOD_3 ( ) (  METHOD_4 ( true , null ) )  METHOD_4 ( true , null ) (  cmd . METHOD_1 ( ) )  cmd . METHOD_1 ( ) (  org.mockito.Mockito . METHOD_5 ( VAR_2 , org.mockito.Mockito . METHOD_6 ( 1 ) ) . METHOD_7 ( TYPE_3 . any ( VAR_3 class ) ) )  org.mockito.Mockito . METHOD_5 ( VAR_2 , org.mockito.Mockito . METHOD_6 ( 1 ) ) . METHOD_7 ( TYPE_3 . any ( VAR_3 class ) ) (  TYPE_4 . assertEquals ( cmd . METHOD_8 ( ) , VAR_4 ) )  TYPE_4 . assertEquals ( cmd . METHOD_8 ( ) , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = INT_1 ) INIT = INT_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = INT_2 ) INIT = INT_2 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_3 ) NAME VAR_3 ( INIT = org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) INIT = org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) VAR VAR (  METHOD_3 ( VAR_3 , VAR_4 ) )  METHOD_3 ( VAR_3 , VAR_4 ) (  METHOD_4 ( ) )  METHOD_4 ( ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_5 ) NAME VAR_5 ( INIT = METHOD_5 ( VAR_3 , VAR_1 , VAR_2 ) ) INIT = METHOD_5 ( VAR_3 , VAR_1 , VAR_2 ) ) VAR VAR (  METHOD_6 ( ) )  METHOD_6 ( ) (  METHOD_7 ( VAR_5 , true ) )  METHOD_7 ( VAR_5 , true ) (  TYPE_2 . METHOD_8 ( command . METHOD_9 ( ) ) )  TYPE_2 . METHOD_8 ( command . METHOD_9 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_1 ( VAR_1 , VAR_2 , VAR_4 ) ) INIT = new TYPE_1 ( VAR_1 , VAR_2 , VAR_4 ) ) VAR VAR (  VAR_3 . METHOD_2 ( ( ! ( TYPE_3 . getReturnValue ( ) . METHOD_3 ( ) . isEmpty ( ) ) ) ) )  VAR_3 . METHOD_2 ( ( ! ( TYPE_3 . getReturnValue ( ) . METHOD_3 ( ) . isEmpty ( ) ) ) ) (  return METHOD_4 ( VAR_3 , TYPE_3 . METHOD_5 ( ) ) ; )  return METHOD_4 ( VAR_3 , TYPE_3 . METHOD_5 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME params ) NAME params ( INIT = new TYPE_1 ( vmId , VAR_1 ) ) INIT = new TYPE_1 ( vmId , VAR_1 ) ) VAR VAR (  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_2 < TYPE_1 > ( params ) ) )  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_2 < TYPE_1 > ( params ) ) (  org.mockito.Mockito . METHOD_3 ( ) . when ( cmd ) . METHOD_4 ( ) )  org.mockito.Mockito . METHOD_3 ( ) . when ( cmd ) . METHOD_4 ( ) (  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( cmd ) . METHOD_5 ( ) )  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( cmd ) . METHOD_5 ( ) (  TYPE_3 . METHOD_6 ( cmd , VAR_3 ) )  TYPE_3 . METHOD_6 ( cmd , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_3 = STRING_1 )  VAR_3 = STRING_1 ( VAR VAR ( TYPE java.util.ArrayList<java.lang.String> ) TYPE java.util.ArrayList<java.lang.String> ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_2 . METHOD_2 ( VAR_1 , VAR_2 ) ) INIT = TYPE_2 . METHOD_2 ( VAR_1 , VAR_2 ) ) VAR VAR (  METHOD_3 ( STRING_2 , ( ( VAR_4 . size ( ) ) == 1 ) ) )  METHOD_3 ( STRING_2 , ( ( VAR_4 . size ( ) ) == 1 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1.ValidationResult ) RETURN TYPE_1.ValidationResult ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . get ( VAR_1 ) ) INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . get ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_2 == null ) COND VAR_2 == null ( THEN THEN (  return new TYPE_1 . ValidationResult ( VAR_3 , java.lang.String . METHOD_3 ( STRING_1 , STRING_2 , VAR_1 . toString ( ) ) ) ; )  return new TYPE_1 . ValidationResult ( VAR_3 , java.lang.String . METHOD_3 ( STRING_1 , STRING_2 , VAR_1 . toString ( ) ) ) ; ) THEN THEN ) IF IF (  return VAR_4 ; )  return VAR_4 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME id ) NAME id ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source != null ? ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; )  return source != null ? ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; } } (  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_1 , new TYPE_2 ( id ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_1 , new TYPE_2 ( id ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME validate ) NAME validate ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . getParameters ( ) . METHOD_1 ( ) ) INIT = TYPE_1 . getParameters ( ) . METHOD_1 ( ) ) VAR VAR ( IF IF ( COND METHOD_2 ( ) ) COND METHOD_2 ( ) ( THEN THEN (  return METHOD_3 ( VAR_1 ) ; )  return METHOD_3 ( VAR_1 ) ; ) THEN THEN ( ELSE ELSE ( IF IF ( COND ( TYPE_1 . getParameters ( ) . METHOD_4 ( ) ) == ( VAR_2 ) ) COND ( TYPE_1 . getParameters ( ) . METHOD_4 ( ) ) == ( VAR_2 ) ( THEN THEN (  return METHOD_5 ( VAR_3 ) ; )  return METHOD_5 ( VAR_3 ) ; ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF (  return METHOD_6 ( ) ; )  return METHOD_6 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME vds ) NAME vds ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 . METHOD_2 ( ) ) == ( vds . METHOD_3 ( ) ) ) COND ( VAR_1 . METHOD_2 ( ) ) == ( vds . METHOD_3 ( ) ) ( THEN THEN ( VAR VAR ( TYPE java.lang.Integer ) TYPE java.lang.Integer ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 < java.lang.Integer > METHOD_4 ( VAR_4 ) ) INIT = VAR_3 < java.lang.Integer > METHOD_4 ( VAR_4 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_5 ) NAME VAR_5 ( INIT = new TYPE_2 ( VAR_1 ) ) INIT = new TYPE_2 ( VAR_1 ) ) VAR VAR (  VAR_5 . METHOD_5 ( VAR_2 ) )  VAR_5 . METHOD_5 ( VAR_2 ) ( IF IF ( COND VAR_5 . METHOD_6 ( TYPE_2 . METHOD_7 ( ) ) ) COND VAR_5 . METHOD_6 ( TYPE_2 . METHOD_7 ( ) ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( new TYPE_1 . DiskImage ( ) ) )  METHOD_2 ( new TYPE_1 . DiskImage ( ) ) (  METHOD_3 ( ) )  METHOD_3 ( ) (  METHOD_4 ( false ) )  METHOD_4 ( false ) (  METHOD_5 ( ) )  METHOD_5 ( ) (  METHOD_6 ( ) )  METHOD_6 ( ) (  METHOD_7 ( VAR_1 ) )  METHOD_7 ( VAR_1 ) (  TYPE_2 . METHOD_8 ( command . validate ( ) ) )  TYPE_2 . METHOD_8 ( command . validate ( ) ) (  TYPE_2 . METHOD_9 ( command . getReturnValue ( ) . METHOD_10 ( ) . METHOD_11 ( TYPE_3 . toString ( ) ) ) )  TYPE_2 . METHOD_9 ( command . getReturnValue ( ) . METHOD_10 ( ) . METHOD_11 ( TYPE_3 . toString ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( VAR_2 ) ) INIT = METHOD_2 ( VAR_2 ) ) VAR VAR (  VAR_3 . METHOD_3 ( ) )  VAR_3 . METHOD_3 ( ) (  VAR_3 . METHOD_3 ( ) )  VAR_3 . METHOD_3 ( ) (  TYPE_2 . METHOD_4 ( STRING_1 , VAR_3 . METHOD_5 ( VAR_4 , VAR_2 , false ) ) )  TYPE_2 . METHOD_4 ( STRING_1 , VAR_3 . METHOD_5 ( VAR_4 , VAR_2 , false ) ) (  TYPE_2 . METHOD_4 ( STRING_1 , VAR_3 . METHOD_6 ( VAR_4 , false ) ) )  TYPE_2 . METHOD_4 ( STRING_1 , VAR_3 . METHOD_6 ( VAR_4 , false ) ) (  org.mockito.Mockito . METHOD_7 ( VAR_1 ) . METHOD_8 ( TYPE_3 . METHOD_9 ( ) ) )  org.mockito.Mockito . METHOD_7 ( VAR_1 ) . METHOD_8 ( TYPE_3 . METHOD_9 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( cmd ) . METHOD_2 ( ) )  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( cmd ) . METHOD_2 ( ) (  org.mockito.Mockito.doReturn ( METHOD_3 ( VAR_2 ) ) . when ( cmd ) . METHOD_4 ( ) )  org.mockito.Mockito.doReturn ( METHOD_3 ( VAR_2 ) ) . when ( cmd ) . METHOD_4 ( ) (  org.mockito.Mockito.doReturn ( METHOD_5 ( VAR_3 ) ) . when ( VAR_1 ) . METHOD_6 ( VAR_3 ) )  org.mockito.Mockito.doReturn ( METHOD_5 ( VAR_3 ) ) . when ( VAR_1 ) . METHOD_6 ( VAR_3 ) (  org.mockito.Mockito.doReturn ( METHOD_7 ( VAR_4 ) ) . when ( VAR_5 ) . METHOD_6 ( VAR_4 ) )  org.mockito.Mockito.doReturn ( METHOD_7 ( VAR_4 ) ) . when ( VAR_5 ) . METHOD_6 ( VAR_4 ) (  org.mockito.Mockito.doReturn ( METHOD_7 ( VAR_6 ) ) . when ( VAR_5 ) . METHOD_6 ( VAR_6 ) )  org.mockito.Mockito.doReturn ( METHOD_7 ( VAR_6 ) ) . when ( VAR_5 ) . METHOD_6 ( VAR_6 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  METHOD_3 ( VAR_1 ) )  METHOD_3 ( VAR_1 ) (  METHOD_4 ( 1 , true ) )  METHOD_4 ( 1 , true ) (  VAR_2 . METHOD_5 ( ) )  VAR_2 . METHOD_5 ( ) ( TRY TRY ( BLOCK BLOCK (  resource . get ( ) )  resource . get ( ) (  METHOD_6 ( STRING_1 ) )  METHOD_6 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( BLOCK BLOCK (  METHOD_7 ( VAR_3 ) )  METHOD_7 ( VAR_3 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( TYPE_1 . METHOD_2 ( ) ) ? 0 : org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( TYPE_1 . METHOD_5 ( ) . getName ( ) , TYPE_2 . name ( ) ) ) INIT = ( TYPE_1 . METHOD_2 ( ) ) ? 0 : org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( TYPE_1 . METHOD_5 ( ) . getName ( ) , TYPE_2 . name ( ) ) ) VAR VAR ( IF IF ( COND VAR_1 > 0 ) COND VAR_1 > 0 ( THEN THEN (  addCanDoActionMessage ( VAR_2 ) )  addCanDoActionMessage ( VAR_2 ) (  TYPE_1 . METHOD_6 ( STRING_1 , VAR_1 ) )  TYPE_1 . METHOD_6 ( STRING_1 , VAR_1 ) (  return false ; )  return false ; ) THEN THEN ( ELSE ELSE (  return true ; )  return true ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME parameters ) NAME parameters ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  parameters . METHOD_3 ( TYPE_2 . getParameters ( ) . METHOD_4 ( ) ) )  parameters . METHOD_3 ( TYPE_2 . getParameters ( ) . METHOD_4 ( ) ) ( IF IF ( COND TYPE_2 . getParameters ( ) . METHOD_5 ( ) ) COND TYPE_2 . getParameters ( ) . METHOD_5 ( ) ( THEN THEN (  parameters . METHOD_6 ( VAR_1 ) )  parameters . METHOD_6 ( VAR_1 ) (  parameters . METHOD_7 ( TYPE_2 . METHOD_8 ( ) . get ( 0 ) . METHOD_9 ( ) ) )  parameters . METHOD_7 ( TYPE_2 . METHOD_8 ( ) . get ( 0 ) . METHOD_9 ( ) ) ) THEN THEN ) IF IF (  return parameters ; )  return parameters ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME sender ) NAME sender ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME args ) NAME args ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND STRING_1 . equals ( METHOD_2 ( ) . getEntity ( ) ) ) COND STRING_1 . equals ( METHOD_2 ( ) . getEntity ( ) ) ( THEN THEN (  METHOD_3 ( ) . setIsChangable ( false ) )  METHOD_3 ( ) . setIsChangable ( false ) (  METHOD_3 ( ) . setSelectedItem ( STRING_1 ) )  METHOD_3 ( ) . setSelectedItem ( STRING_1 ) ) THEN THEN ( ELSE ELSE (  METHOD_3 ( ) . setIsChangable ( true ) )  METHOD_3 ( ) . setIsChangable ( true ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME sender ) NAME sender ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME args ) NAME args ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND STRING_1 . equals ( ( ( TYPE_3 ) ( args ) ) . VAR_2 ) ) COND STRING_1 . equals ( ( ( TYPE_3 ) ( args ) ) . VAR_2 ) ( THEN THEN ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME value ) NAME value ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  METHOD_3 ( ) . METHOD_4 ( value ) )  METHOD_3 ( ) . METHOD_4 ( value ) (  METHOD_5 ( ) . setEntity ( ( value && ( ! ( TYPE_4 . METHOD_6 ( ( ( java.lang.String ) ( METHOD_3 ( ) . getSelectedItem ( ) ) ) ) ) ) ) ) )  METHOD_5 ( ) . setEntity ( ( value && ( ! ( TYPE_4 . METHOD_6 ( ( ( java.lang.String ) ( METHOD_3 ( ) . getSelectedItem ( ) ) ) ) ) ) ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( VAR_2 ) ) INIT = METHOD_2 ( VAR_2 ) ) VAR VAR ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE java.util.List<TYPE_1.DiskImage> ) TYPE java.util.List<TYPE_1.DiskImage> ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_3 ( VAR_1 ) ) INIT = METHOD_3 ( VAR_1 ) ) VAR VAR ( IF IF ( COND ! ( METHOD_4 ( VAR_3 ) ) ) COND ! ( METHOD_4 ( VAR_3 ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( IF IF ( COND ! ( VAR_3 . isEmpty ( ) ) ) COND ! ( VAR_3 . isEmpty ( ) ) ( THEN THEN (  return METHOD_5 ( VAR_4 , METHOD_6 ( VAR_3 ) , TYPE_2 . METHOD_7 ( ) ) . getSucceeded ( ) ; )  return METHOD_5 ( VAR_4 , METHOD_6 ( VAR_3 ) , TYPE_2 . METHOD_7 ( ) ) . getSucceeded ( ) ; ) THEN THEN ) IF IF (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ) TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ( NAME cluster ) NAME cluster ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDS> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDS> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND cluster . METHOD_2 ( ) ) COND cluster . METHOD_2 ( ) ( THEN THEN (  log . METHOD_3 ( STRING_1 , cluster . METHOD_4 ( ) ) )  log . METHOD_3 ( STRING_1 , cluster . METHOD_4 ( ) ) (  return ; )  return ; ) THEN THEN ) IF IF (  METHOD_5 ( cluster . getId ( ) ) )  METHOD_5 ( cluster . getId ( ) ) ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_6 ( cluster , VAR_1 , VAR_2 ) ) INIT = METHOD_6 ( cluster , VAR_1 , VAR_2 ) ) VAR VAR ( IF IF ( COND VAR_3 != null ) COND VAR_3 != null ( THEN THEN (  METHOD_7 ( VAR_2 , VAR_3 ) )  METHOD_7 ( VAR_2 , VAR_3 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ( FINALLY FINALLY (  METHOD_8 ( cluster . getId ( ) ) )  METHOD_8 ( cluster . getId ( ) ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME vmId ) NAME vmId ( INIT = new org.ovirt.engine.core.compat.Guid ( STRING_1 ) ) INIT = new org.ovirt.engine.core.compat.Guid ( STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ( INIT = new org.ovirt.engine.core.compat.Guid ( STRING_2 ) ) INIT = new org.ovirt.engine.core.compat.Guid ( STRING_2 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( VAR_1 , vmId ) ) INIT = METHOD_2 ( VAR_1 , vmId ) ) VAR VAR (  TYPE_2 . METHOD_3 ( ( ( VAR_2 . METHOD_4 ( VAR_2 ) ) == 0 ) ) )  TYPE_2 . METHOD_3 ( ( ( VAR_2 . METHOD_4 ( VAR_2 ) ) == 0 ) ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_2 ( VAR_1 , vmId ) ) INIT = METHOD_2 ( VAR_1 , vmId ) ) VAR VAR (  TYPE_2 . METHOD_3 ( ( ( VAR_2 . METHOD_4 ( VAR_3 ) ) == 0 ) ) )  TYPE_2 . METHOD_3 ( ( ( VAR_2 . METHOD_4 ( VAR_3 ) ) == 0 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.List<TYPE_1.DiskImage> ) RETURN java.util.List<TYPE_1.DiskImage> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.DiskImage ) TYPE TYPE_1.DiskImage ( NAME disk ) NAME disk ( INIT = new TYPE_1 . DiskImage ( ) ) INIT = new TYPE_1 . DiskImage ( ) ) VAR VAR (  disk . METHOD_2 ( VAR_1 ) )  disk . METHOD_2 ( VAR_1 ) (  disk . METHOD_3 ( new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( TYPE_2 . METHOD_4 ( VAR_2 ) ) ) )  disk . METHOD_3 ( new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( TYPE_2 . METHOD_4 ( VAR_2 ) ) ) ( VAR VAR ( TYPE java.util.List<TYPE_1.DiskImage> ) TYPE java.util.List<TYPE_1.DiskImage> ( NAME VAR_3 ) NAME VAR_3 ( INIT = new java.util.ArrayList < TYPE_1 . DiskImage > ( ) ) INIT = new java.util.ArrayList < TYPE_1 . DiskImage > ( ) ) VAR VAR (  VAR_3 . add ( disk ) )  VAR_3 . add ( disk ) (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( ( TYPE_1 . METHOD_2 ( ) ) != null ) && ( METHOD_3 ( TYPE_1 . METHOD_4 ( ) ) ) ) COND ( ( TYPE_1 . METHOD_2 ( ) ) != null ) && ( METHOD_3 ( TYPE_1 . METHOD_4 ( ) ) ) ( THEN THEN ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_5 ( ) . METHOD_6 ( ) ) INIT = TYPE_1 . METHOD_5 ( ) . METHOD_6 ( ) ) VAR VAR (  METHOD_7 ( ) )  METHOD_7 ( ) (  METHOD_8 ( ) )  METHOD_8 ( ) (  METHOD_9 ( ) )  METHOD_9 ( ) (  METHOD_10 ( ) )  METHOD_10 ( ) (  METHOD_11 ( ) )  METHOD_11 ( ) (  TYPE_1 . METHOD_12 ( true ) )  TYPE_1 . METHOD_12 ( true ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2<org.ovirt.engine.core.compat.Guid> ) TYPE TYPE_2<org.ovirt.engine.core.compat.Guid> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME user ) NAME user ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return ( VAR_2 . METHOD_2 ( VAR_1 . getId ( ) ) ) || ( ( TYPE_4 . METHOD_3 ( ) . METHOD_4 ( user . getId ( ) , VAR_3 , VAR_1 . getId ( ) , VAR_4 ) ) != null ) ; )  return ( VAR_2 . METHOD_2 ( VAR_1 . getId ( ) ) ) || ( ( TYPE_4 . METHOD_3 ( ) . METHOD_4 ( user . getId ( ) , VAR_3 , VAR_1 . getId ( ) , VAR_4 ) ) != null ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_4 . METHOD_2 ( ) . METHOD_3 ( VAR_1 . getValue ( ) ) ) INIT = TYPE_4 . METHOD_2 ( ) . METHOD_3 ( VAR_1 . getValue ( ) ) ) VAR VAR ( IF IF ( COND VAR_3 != null ) COND VAR_3 != null ( THEN THEN (  VAR_3 . METHOD_4 ( VAR_2 ) )  VAR_3 . METHOD_4 ( VAR_2 ) (  TYPE_4 . METHOD_2 ( ) . METHOD_5 ( VAR_3 ) )  TYPE_4 . METHOD_2 ( ) . METHOD_5 ( VAR_3 ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_4 . METHOD_6 ( STRING_1 , VAR_1 , VAR_2 , e ) )  VAR_4 . METHOD_6 ( STRING_1 , VAR_1 , VAR_2 , e ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME version ) NAME version ) VAR VAR ( VAR VAR ( TYPE TYPE_2[] ) TYPE TYPE_2[] ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND TYPE_3 . METHOD_2 ( version , VAR_2 ) ) COND TYPE_3 . METHOD_2 ( version , VAR_2 ) ( THEN THEN (  version . METHOD_3 ( new TYPE_4 ( ) ) )  version . METHOD_3 ( new TYPE_4 ( ) ) ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  version . METHOD_4 ( ) . METHOD_4 ( ) . add ( VAR_3 . value ( ) ) )  version . METHOD_4 ( ) . METHOD_4 ( ) . add ( VAR_3 . value ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( VAR_1 == ( TYPE_1 . VM ) ) ? true : false ) INIT = ( VAR_1 == ( TYPE_1 . VM ) ) ? true : false ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME tempVar ) NAME tempVar ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  tempVar . METHOD_3 ( METHOD_4 ( ) ) )  tempVar . METHOD_3 ( METHOD_4 ( ) ) (  tempVar . METHOD_5 ( VAR_1 ) )  tempVar . METHOD_5 ( VAR_1 ) (  tempVar . METHOD_6 ( VAR_2 ) )  tempVar . METHOD_6 ( VAR_2 ) (  METHOD_7 ( org.ovirt.engine.ui.frontend.Frontend . METHOD_8 ( VAR_3 , tempVar ) ) )  METHOD_7 ( org.ovirt.engine.ui.frontend.Frontend . METHOD_8 ( VAR_3 , tempVar ) ) (  setItems ( METHOD_9 ( ) . METHOD_10 ( ) ) )  setItems ( METHOD_9 ( ) . METHOD_10 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( METHOD_2 ( ) . getEntity ( ) ) == true ) COND ( METHOD_2 ( ) . getEntity ( ) ) == true ( THEN THEN (  return VAR_1 ; )  return VAR_1 ; ) THEN THEN ( ELSE ELSE ( IF IF ( COND ( METHOD_3 ( ) . getEntity ( ) ) == true ) COND ( METHOD_3 ( ) . getEntity ( ) ) == true ( THEN THEN (  return VAR_2 ; )  return VAR_2 ; ) THEN THEN ( ELSE ELSE ( IF IF ( COND ( METHOD_4 ( ) . getEntity ( ) ) == true ) COND ( METHOD_4 ( ) . getEntity ( ) ) == true ( THEN THEN (  return VAR_3 ; )  return VAR_3 ; ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = dao . get ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( VAR_2 ) ) ) INIT = dao . get ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( VAR_2 ) ) ) VAR VAR (  TYPE_2 . METHOD_3 ( VAR_1 ) )  TYPE_2 . METHOD_3 ( VAR_1 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_4 ( ) ) INIT = METHOD_4 ( ) ) VAR VAR (  VAR_1 = dao . get ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( VAR_2 ) ) )  VAR_1 = dao . get ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( VAR_2 ) ) (  TYPE_2 . METHOD_5 ( VAR_1 ) )  TYPE_2 . METHOD_5 ( VAR_1 ) (  TYPE_2 . assertEquals ( VAR_3 , VAR_1 ) )  TYPE_2 . assertEquals ( VAR_3 , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME status ) NAME status ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  this . VAR_2 = status )  this . VAR_2 = status ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_3 . METHOD_2 ( ) ) INIT = TYPE_3 . METHOD_2 ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  TYPE_4 . METHOD_3 ( METHOD_4 ( ) , METHOD_5 ( ) , VAR_2 ) )  TYPE_4 . METHOD_3 ( METHOD_4 ( ) , METHOD_5 ( ) , VAR_2 ) ) BLOCK BLOCK ( FINALLY FINALLY ( IF IF ( COND VAR_3 != null ) COND VAR_3 != null ( THEN THEN (  TYPE_3 . METHOD_6 ( VAR_3 ) )  TYPE_3 . METHOD_6 ( VAR_3 ) ) THEN THEN ) IF IF ) FINALLY FINALLY ) TRY TRY ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME returnValue ) NAME returnValue ( INIT = ( ( ( ( ( super . METHOD_1 ( ) ) && ( TYPE_1 . METHOD_2 ( ) ) ) && ( METHOD_3 ( VAR_1 ) ) ) && ( TYPE_1 . METHOD_4 ( ) ) ) && ( METHOD_5 ( ) ) ) && ( METHOD_6 ( ) ) ) INIT = ( ( ( ( ( super . METHOD_1 ( ) ) && ( TYPE_1 . METHOD_2 ( ) ) ) && ( METHOD_3 ( VAR_1 ) ) ) && ( TYPE_1 . METHOD_4 ( ) ) ) && ( METHOD_5 ( ) ) ) && ( METHOD_6 ( ) ) ) VAR VAR (  return returnValue ; )  return returnValue ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( VAR_1 ) )  METHOD_2 ( VAR_1 ) (  TYPE_1 . METHOD_3 ( cmd . METHOD_4 ( VAR_1 ) ) )  TYPE_1 . METHOD_3 ( cmd . METHOD_4 ( VAR_1 ) ) ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ( INIT = cmd . getReturnValue ( ) . METHOD_5 ( ) ) INIT = cmd . getReturnValue ( ) . METHOD_5 ( ) ) VAR VAR (  TYPE_1 . assertEquals ( VAR_2 . size ( ) , 2 ) )  TYPE_1 . assertEquals ( VAR_2 . size ( ) , 2 ) (  TYPE_1 . assertEquals ( VAR_2 . get ( 0 ) , TYPE_2 . toString ( ) ) )  TYPE_1 . assertEquals ( VAR_2 . get ( 0 ) , TYPE_2 . toString ( ) ) (  TYPE_1 . assertEquals ( VAR_2 . get ( 1 ) , java.lang.String . METHOD_6 ( STRING_1 , VAR_1 ) ) )  TYPE_1 . assertEquals ( VAR_2 . get ( 1 ) , java.lang.String . METHOD_6 ( STRING_1 , VAR_1 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN org.ovirt.engine.core.compat.Guid ) RETURN org.ovirt.engine.core.compat.Guid ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( model . METHOD_2 ( ) ) && ( model . METHOD_3 ( ) . METHOD_4 ( ) ) ) && ( model . METHOD_3 ( ) . METHOD_5 ( ) . METHOD_6 ( ) ) ) COND ( ( model . METHOD_2 ( ) ) && ( model . METHOD_3 ( ) . METHOD_4 ( ) ) ) && ( model . METHOD_3 ( ) . METHOD_5 ( ) . METHOD_6 ( ) ) ( THEN THEN (  return TYPE_2 . METHOD_7 ( model . METHOD_3 ( ) . METHOD_5 ( ) . getId ( ) ) ; )  return TYPE_2 . METHOD_7 ( model . METHOD_3 ( ) . METHOD_5 ( ) . getId ( ) ) ; ) THEN THEN ( ELSE ELSE (  return VAR_1 == null ? VAR_2 : VAR_1 ; )  return VAR_1 == null ? VAR_2 : VAR_1 ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.Object> ) TYPE java.util.Map<java.lang.String,java.lang.Object> ( NAME args ) NAME args ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( STRING_1 ) ) INIT = TYPE_2 . METHOD_2 ( STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( java.lang.String ) ( args . get ( STRING_2 ) ) ) ) INIT = ( ( java.lang.String ) ( args . get ( STRING_2 ) ) ) ) VAR VAR ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_3 ( VAR_2 ) ) INIT = new TYPE_3 ( VAR_2 ) ) VAR VAR (  VAR_3 . METHOD_3 ( new TYPE_4 ( ) ) )  VAR_3 . METHOD_3 ( new TYPE_4 ( ) ) (  VAR_1 . METHOD_4 ( VAR_3 ) )  VAR_1 . METHOD_4 ( VAR_3 ) ) THEN THEN ) IF IF (  TYPE_5 . METHOD_5 ( ( ( TYPE_6 ) ( args . get ( STRING_3 ) ) ) ) )  TYPE_5 . METHOD_5 ( ( ( TYPE_6 ) ( args . get ( STRING_3 ) ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( getModel ( ) . METHOD_2 ( ) ) != null ) COND ( getModel ( ) . METHOD_2 ( ) ) != null ( THEN THEN ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ) TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ( NAME cluster ) NAME cluster ( INIT = getModel ( ) . METHOD_2 ( ) ) INIT = getModel ( ) . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( cluster . METHOD_3 ( ) . METHOD_4 ( VAR_2 ) ) >= 0 ) && ( cluster . METHOD_5 ( ) . equals ( VAR_3 ) ) ) INIT = ( ( cluster . METHOD_3 ( ) . METHOD_4 ( VAR_2 ) ) >= 0 ) && ( cluster . METHOD_5 ( ) . equals ( VAR_3 ) ) ) VAR VAR (  getModel ( ) . METHOD_6 ( ) . METHOD_7 ( VAR_1 ) )  getModel ( ) . METHOD_6 ( ) . METHOD_7 ( VAR_1 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( VAR_1 ) )  METHOD_2 ( VAR_1 ) (  assertEquals ( 2 , VAR_1 . METHOD_3 ( ) . size ( ) ) )  assertEquals ( 2 , VAR_1 . METHOD_3 ( ) . size ( ) ) (  METHOD_4 ( VAR_1 . METHOD_3 ( ) . get ( 0 ) , 1 , INT_1 , false , STRING_1 , 0 , false , false , false ) )  METHOD_4 ( VAR_1 . METHOD_3 ( ) . get ( 0 ) , 1 , INT_1 , false , STRING_1 , 0 , false , false , false ) (  METHOD_4 ( VAR_1 . METHOD_3 ( ) . get ( 1 ) , INT_2 , INT_3 , true , STRING_2 , INT_4 , true , true , true ) )  METHOD_4 ( VAR_1 . METHOD_3 ( ) . get ( 1 ) , INT_2 , INT_3 , true , STRING_2 , INT_4 , true , true , true ) (  METHOD_5 ( VAR_1 ) )  METHOD_5 ( VAR_1 ) (  METHOD_6 ( VAR_1 ) )  METHOD_6 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_4 ( TYPE_5 . METHOD_2 ( ) ) ) INIT = new TYPE_4 ( TYPE_5 . METHOD_2 ( ) ) ) VAR VAR (  TYPE_6 . METHOD_3 ( VAR_2 , VAR_1 ) )  TYPE_6 . METHOD_3 ( VAR_2 , VAR_1 ) (  return new TYPE_1 ( VAR_2 , TYPE_6 . METHOD_4 ( VAR_1 ) , TYPE_6 . METHOD_5 ( VAR_2 . getId ( ) , VAR_1 ) ) ; )  return new TYPE_1 ( VAR_2 , TYPE_6 . METHOD_4 ( VAR_1 ) , TYPE_6 . METHOD_5 ( VAR_2 . getId ( ) , VAR_1 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME sender ) NAME sender ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME args ) NAME args ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN ( IF IF ( COND ( ( java.lang.Boolean ) ( ( ( org.ovirt.engine.ui.uicommonweb.models.EntityModel ) ( sender ) ) . getEntity ( ) ) ) ) COND ( ( java.lang.Boolean ) ( ( ( org.ovirt.engine.ui.uicommonweb.models.EntityModel ) ( sender ) ) . getEntity ( ) ) ) ( THEN THEN (  METHOD_2 ( ) . setEntity ( true ) )  METHOD_2 ( ) . setEntity ( true ) (  METHOD_2 ( ) . METHOD_3 ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_4 ( ) ) )  METHOD_2 ( ) . METHOD_3 ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_4 ( ) ) (  METHOD_2 ( ) . setIsChangable ( false ) )  METHOD_2 ( ) . setIsChangable ( false ) ) THEN THEN ( ELSE ELSE (  METHOD_2 ( ) . setIsChangable ( true ) )  METHOD_2 ( ) . setIsChangable ( true ) ) ELSE ELSE ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( false ) )  METHOD_2 ( false ) (  VAR_1 . METHOD_3 ( ) )  VAR_1 . METHOD_3 ( ) ( TRY TRY ( BLOCK BLOCK (  resource . METHOD_4 ( ) )  resource . METHOD_4 ( ) (  METHOD_5 ( STRING_1 ) )  METHOD_5 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( BLOCK BLOCK (  METHOD_6 ( VAR_2 . METHOD_7 ( ) ) )  METHOD_6 ( VAR_2 . METHOD_7 ( ) ) (  assertEquals ( VAR_2 . METHOD_7 ( ) . getStatus ( ) , INT_1 ) )  assertEquals ( VAR_2 . METHOD_7 ( ) . getStatus ( ) , INT_1 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME VAR_1 ) NAME VAR_1 ( INIT = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ) INIT = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ) VAR VAR ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_3 = ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) )  VAR_3 = ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) BLOCK BLOCK ) METHOD METHOD (  VAR_2 = new TYPE_1 ( ) { public void onSuccess ( java.lang.Object returnValue ) { VAR_3 = ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ; } } )  VAR_2 = new TYPE_1 ( ) { public void onSuccess ( java.lang.Object returnValue ) { VAR_3 = ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ; } } (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_4 , new TYPE_3 ( VAR_5 ) , VAR_1 ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_4 , new TYPE_3 ( VAR_5 ) , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND source != null ) COND source != null ( THEN THEN ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain> ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( source ) ) ) INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( source ) ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ) TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME domain ) NAME domain ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( IF IF ( COND ( domain . METHOD_2 ( ) ) == ( VAR_2 ) ) COND ( domain . METHOD_2 ( ) ) == ( VAR_2 ) ( THEN THEN (  return domain ; )  return domain ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ) VAR VAR ( VAR VAR ( TYPE TYPE_2.Disk ) TYPE TYPE_2.Disk ( NAME disk ) NAME disk ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_3 . setId ( new TYPE_3 ( vm . getId ( ) , disk . getId ( ) ) ) )  VAR_3 . setId ( new TYPE_3 ( vm . getId ( ) , disk . getId ( ) ) ) (  VAR_3 . METHOD_2 ( VAR_1 ) )  VAR_3 . METHOD_2 ( VAR_1 ) (  VAR_3 . METHOD_3 ( VAR_2 ) )  VAR_3 . METHOD_3 ( VAR_2 ) (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<TYPE_1> ) TYPE java.util.ArrayList<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( java.util.ArrayList < TYPE_1 > ) ( returnValue ) ) ) INIT = ( ( java.util.ArrayList < TYPE_1 > ) ( returnValue ) ) ) VAR VAR (  VAR_2 = new java.util.ArrayList < TYPE_1 > ( ) )  VAR_2 = new java.util.ArrayList < TYPE_1 > ( ) ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME domain ) NAME domain ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( IF IF ( COND TYPE_2 . METHOD_2 ( domain ) ) COND TYPE_2 . METHOD_2 ( domain ) ( THEN THEN (  VAR_2 . add ( domain ) )  VAR_2 . add ( domain ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  METHOD_3 ( ) . setItems ( VAR_2 ) )  METHOD_3 ( ) . setItems ( VAR_2 ) ( IF IF ( COND VAR_3 ) COND VAR_3 ( THEN THEN (  METHOD_4 ( ) )  METHOD_4 ( ) ) THEN THEN ( ELSE ELSE (  METHOD_5 ( ) )  METHOD_5 ( ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND validate ( false ) ) COND validate ( false ) ( THEN THEN (  VAR_1 . METHOD_1 ( ) )  VAR_1 . METHOD_1 ( ) (  ( ( TYPE_1 . DiskImage ) ( METHOD_2 ( ) . METHOD_3 ( ) ) ) . METHOD_4 ( METHOD_5 ( ) . getSelectedItem ( ) ) )  ( ( TYPE_1 . DiskImage ) ( METHOD_2 ( ) . METHOD_3 ( ) ) ) . METHOD_4 ( METHOD_5 ( ) . getSelectedItem ( ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  log . METHOD_2 ( STRING_1 , this . METHOD_3 ( ) . getName ( ) ) )  log . METHOD_2 ( STRING_1 , this . METHOD_3 ( ) . getName ( ) ) ( TRY TRY ( BLOCK BLOCK ( IF IF ( COND METHOD_4 ( ) ) COND METHOD_4 ( ) ( THEN THEN (  METHOD_5 ( ) )  METHOD_5 ( ) ) THEN THEN ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME e ) NAME e ( BLOCK BLOCK (  log . METHOD_6 ( STRING_2 , e ) )  log . METHOD_6 ( STRING_2 , e ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  METHOD_7 ( ) )  METHOD_7 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 ( VAR_3 ) . METHOD_2 ( ) . get ( VAR_1 ) ) INIT = new TYPE_2 ( VAR_3 ) . METHOD_2 ( ) . get ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN (  return VAR_2 ; )  return VAR_2 ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_3 ( VAR_1 ) ) INIT = METHOD_3 ( VAR_1 ) ) VAR VAR ( IF IF ( COND ( VAR_4 != null ) && ( ! ( METHOD_4 ( VAR_4 . getId ( ) ) ) ) ) COND ( VAR_4 != null ) && ( ! ( METHOD_4 ( VAR_4 . getId ( ) ) ) ) ( THEN THEN (  return VAR_4 ; )  return VAR_4 ; ) THEN THEN ) IF IF (  throw new TYPE_3 ( ( STRING_1 + VAR_1 ) ) ; )  throw new TYPE_3 ( ( STRING_1 + VAR_1 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.AuditLogType ) TYPE TYPE_1.AuditLogType ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_3 ( ) ) INIT = new TYPE_3 ( ) ) VAR VAR (  VAR_4 . METHOD_2 ( TYPE_4 . METHOD_3 ( ) . getId ( ) ) )  VAR_4 . METHOD_2 ( TYPE_4 . METHOD_3 ( ) . getId ( ) ) ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_5 ) NAME VAR_5 ( INIT = ( VAR_2 == null ) ? TYPE_4 . METHOD_4 ( ) . name ( ) : VAR_2 ) INIT = ( VAR_2 == null ) ? TYPE_4 . METHOD_4 ( ) . name ( ) : VAR_2 ) VAR VAR (  VAR_4 . METHOD_5 ( STRING_1 , VAR_5 ) )  VAR_4 . METHOD_5 ( STRING_1 , VAR_5 ) (  VAR_4 . METHOD_6 ( VAR_3 ) )  VAR_4 . METHOD_6 ( VAR_3 ) (  TYPE_5 . METHOD_7 ( VAR_4 , VAR_1 , VAR_6 ) )  TYPE_5 . METHOD_7 ( VAR_4 , VAR_1 , VAR_6 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME returnValue ) NAME returnValue ( INIT = null ) INIT = null ) VAR VAR ( IF IF ( COND VAR_1 . METHOD_2 ( name ) ) COND VAR_1 . METHOD_2 ( name ) ( THEN THEN ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( java.lang.String ) ( ( ( VAR_1 . METHOD_3 ( name ) ) instanceof java.lang.String ) ? VAR_1 . METHOD_3 ( name ) : null ) ) ) INIT = ( ( java.lang.String ) ( ( ( VAR_1 . METHOD_3 ( name ) ) instanceof java.lang.String ) ? VAR_1 . METHOD_3 ( name ) : null ) ) ) VAR VAR (  returnValue = ( VAR_2 == null ) ? null : TYPE_1 . METHOD_4 ( VAR_2 ) )  returnValue = ( VAR_2 == null ) ? null : TYPE_1 . METHOD_4 ( VAR_2 ) ) THEN THEN ) IF IF (  return returnValue ; )  return returnValue ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.util.List<TYPE_1.DiskImage> ) RETURN java.util.List<TYPE_1.DiskImage> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<TYPE_1.Disk> ) TYPE java.util.List<TYPE_1.Disk> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1.DiskImage> ) TYPE java.util.List<TYPE_1.DiskImage> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_3 . METHOD_2 ( VAR_1 ) ) INIT = TYPE_3 . METHOD_2 ( VAR_1 ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( IN VAR_3 ) IN VAR_3 ( BLOCK BLOCK (  VAR_2 . add ( TYPE_4 . METHOD_3 ( VAR_4 . getId ( ) ) ) )  VAR_2 . add ( TYPE_4 . METHOD_3 ( VAR_4 . getId ( ) ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1.DiskImage ) RETURN TYPE_1.DiskImage ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.DiskImage ) TYPE TYPE_1.DiskImage ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 . DiskImage ( ) ) INIT = new TYPE_1 . DiskImage ( ) ) VAR VAR (  VAR_2 . METHOD_2 ( true ) )  VAR_2 . METHOD_2 ( true ) (  VAR_2 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) )  VAR_2 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) (  VAR_2 . METHOD_4 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) )  VAR_2 . METHOD_4 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) (  VAR_2 . METHOD_5 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) )  VAR_2 . METHOD_5 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) (  VAR_2 . METHOD_6 ( VAR_3 ) )  VAR_2 . METHOD_6 ( VAR_3 ) (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN org.ovirt.engine.core.common.businessentities.VDS ) RETURN org.ovirt.engine.core.common.businessentities.VDS ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME VAR_2 ) NAME VAR_2 ( INIT = new org.ovirt.engine.core.common.businessentities.VDS ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.VDS ( ) ) VAR VAR (  VAR_2 . METHOD_2 ( STRING_1 ) )  VAR_2 . METHOD_2 ( STRING_1 ) (  VAR_2 . METHOD_3 ( STRING_2 ) )  VAR_2 . METHOD_3 ( STRING_2 ) (  VAR_2 . METHOD_4 ( new org.ovirt.engine.core.compat . Version ( STRING_3 ) ) )  VAR_2 . METHOD_4 ( new org.ovirt.engine.core.compat . Version ( STRING_3 ) ) (  VAR_2 . METHOD_5 ( org.ovirt.engine.core.compat.Guid . METHOD_6 ( ) ) )  VAR_2 . METHOD_5 ( org.ovirt.engine.core.compat.Guid . METHOD_6 ( ) ) (  VAR_2 . setId ( VAR_1 ) )  VAR_2 . setId ( VAR_1 ) (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.VdcQueryReturnValue ) TYPE TYPE_1.VdcQueryReturnValue ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( VAR_2 . VdcQueryReturnValue class ) ) INIT = TYPE_2 . METHOD_2 ( VAR_2 . VdcQueryReturnValue class ) ) VAR VAR (  TYPE_3 . METHOD_3 ( VAR_3 . RunQuery ( TYPE_3 . METHOD_4 ( VAR_4 ) , METHOD_5 ( ) ) ) . METHOD_6 ( VAR_1 ) )  TYPE_3 . METHOD_3 ( VAR_3 . RunQuery ( TYPE_3 . METHOD_4 ( VAR_4 ) , METHOD_5 ( ) ) ) . METHOD_6 ( VAR_1 ) (  TYPE_3 . METHOD_3 ( VAR_1 . getSucceeded ( ) ) . METHOD_6 ( true ) . METHOD_7 ( ) )  TYPE_3 . METHOD_3 ( VAR_1 . getSucceeded ( ) ) . METHOD_6 ( true ) . METHOD_7 ( ) (  TYPE_3 . METHOD_3 ( VAR_1 . getReturnValue ( ) ) . METHOD_6 ( METHOD_8 ( ) ) . METHOD_7 ( ) )  TYPE_3 . METHOD_3 ( VAR_1 . getReturnValue ( ) ) . METHOD_6 ( METHOD_8 ( ) ) . METHOD_7 ( ) (  TYPE_2 . METHOD_9 ( ) )  TYPE_2 . METHOD_9 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1.VdcQueryType ) TYPE TYPE_1.VdcQueryType ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 ) INIT = VAR_3 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME result ) NAME result ( INIT = VAR_4 . runQuery ( VAR_2 , VAR_5 , VAR_1 ) ) INIT = VAR_4 . runQuery ( VAR_2 , VAR_5 , VAR_1 ) ) VAR VAR (  TYPE_2 . assertEquals ( result , VAR_6 ) )  TYPE_2 . assertEquals ( result , VAR_6 ) (  org.mockito.Mockito . METHOD_2 ( VAR_5 ) . METHOD_3 ( VAR_1 ) )  org.mockito.Mockito . METHOD_2 ( VAR_5 ) . METHOD_3 ( VAR_1 ) (  org.mockito.Mockito . METHOD_2 ( VAR_5 ) . METHOD_4 ( VAR_1 ) )  org.mockito.Mockito . METHOD_2 ( VAR_5 ) . METHOD_4 ( VAR_1 ) (  org.mockito.Mockito . METHOD_2 ( VAR_5 ) . METHOD_5 ( VAR_4 . METHOD_6 ( ) ) )  org.mockito.Mockito . METHOD_2 ( VAR_5 ) . METHOD_5 ( VAR_4 . METHOD_6 ( ) ) (  org.mockito.Mockito . METHOD_2 ( VAR_7 ) . RunQuery ( VAR_2 , VAR_5 ) )  org.mockito.Mockito . METHOD_2 ( VAR_7 ) . RunQuery ( VAR_2 , VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_1 . METHOD_2 ( true ) )  VAR_1 . METHOD_2 ( true ) ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR (  VAR_1 . METHOD_3 ( VAR_2 ) )  VAR_1 . METHOD_3 ( VAR_2 ) ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_2 . METHOD_4 ( ) ) INIT = TYPE_2 . METHOD_4 ( ) ) VAR VAR (  VAR_3 += INT_1 )  VAR_3 += INT_1 ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_3 ( VAR_3 ) ) INIT = new TYPE_3 ( VAR_3 ) ) VAR VAR (  VAR_1 . METHOD_5 ( VAR_4 ) )  VAR_1 . METHOD_5 ( VAR_4 ) (  VAR_1 . METHOD_6 ( ) )  VAR_1 . METHOD_6 ( ) ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME result ) NAME result ( INIT = VAR_1 . METHOD_6 ( ) ) INIT = VAR_1 . METHOD_6 ( ) ) VAR VAR (  TYPE_4 . METHOD_7 ( result ) )  TYPE_4 . METHOD_7 ( result ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN org.ovirt.engine.core.common.businessentities.StorageDomain ) RETURN org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME status ) NAME status ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ) TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( status , name , VAR_2 ) ) INIT = METHOD_2 ( status , name , VAR_2 ) ) VAR VAR (  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( cmd ) . METHOD_3 ( ) )  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( cmd ) . METHOD_3 ( ) (  org.mockito.Mockito.when ( VAR_3 . METHOD_4 ( TYPE_2 . any ( VAR_4 . Guid class ) ) ) . thenReturn ( TYPE_3 . METHOD_5 ( VAR_1 ) ) )  org.mockito.Mockito.when ( VAR_3 . METHOD_4 ( TYPE_2 . any ( VAR_4 . Guid class ) ) ) . thenReturn ( TYPE_3 . METHOD_5 ( VAR_1 ) ) (  cmd . METHOD_6 ( new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ) )  cmd . METHOD_6 ( new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ) (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.when ( METHOD_2 ( ) . METHOD_3 ( ) ) . thenReturn ( VAR_1 ) )  org.mockito.Mockito.when ( METHOD_2 ( ) . METHOD_3 ( ) ) . thenReturn ( VAR_1 ) (  VAR_2 = new java.util.ArrayList < > ( ) )  VAR_2 = new java.util.ArrayList < > ( ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_2 . add ( VAR_3 ) )  VAR_2 . add ( VAR_3 ) (  org.mockito.Mockito.when ( METHOD_4 ( ) . getId ( ) ) . thenReturn ( VAR_4 ) )  org.mockito.Mockito.when ( METHOD_4 ( ) . getId ( ) ) . thenReturn ( VAR_4 ) (  org.mockito.Mockito.when ( VAR_1 . METHOD_5 ( VAR_4 ) ) . thenReturn ( VAR_2 ) )  org.mockito.Mockito.when ( VAR_1 . METHOD_5 ( VAR_4 ) ) . thenReturn ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_1 . add ( VAR_2 , java.lang.Boolean . toString ( TYPE_2 . getParameters ( ) . METHOD_2 ( ) ) ) )  VAR_1 . add ( VAR_2 , java.lang.Boolean . toString ( TYPE_2 . getParameters ( ) . METHOD_2 ( ) ) ) ( IF IF ( COND TYPE_2 . getParameters ( ) . METHOD_2 ( ) ) COND TYPE_2 . getParameters ( ) . METHOD_2 ( ) ( THEN THEN (  VAR_1 . add ( VAR_3 , TYPE_2 . getParameters ( ) . METHOD_3 ( ) ) )  VAR_1 . add ( VAR_3 , TYPE_2 . getParameters ( ) . METHOD_3 ( ) ) ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( METHOD_3 ( ) ) )  METHOD_2 ( METHOD_3 ( ) ) (  METHOD_4 ( 1 ) )  METHOD_4 ( 1 ) (  VAR_1 . METHOD_5 ( ) )  VAR_1 . METHOD_5 ( ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ( INIT = getModel ( 1 ) ) INIT = getModel ( 1 ) ) VAR VAR (  model . setId ( VAR_2 [ 1 ] . toString ( ) ) )  model . setId ( VAR_2 [ 1 ] . toString ( ) ) ( TRY TRY ( BLOCK BLOCK (  resource . METHOD_6 ( model ) )  resource . METHOD_6 ( model ) (  METHOD_7 ( STRING_1 ) )  METHOD_7 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( BLOCK BLOCK (  METHOD_8 ( VAR_3 ) )  METHOD_8 ( VAR_3 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( METHOD_3 ( ) ) )  METHOD_2 ( METHOD_3 ( ) ) (  METHOD_4 ( 0 , true ) )  METHOD_4 ( 0 , true ) (  VAR_1 . METHOD_5 ( ) )  VAR_1 . METHOD_5 ( ) ( TRY TRY ( BLOCK BLOCK (  resource . METHOD_6 ( TYPE_1 . getModel ( 0 ) ) )  resource . METHOD_6 ( TYPE_1 . getModel ( 0 ) ) (  METHOD_7 ( STRING_1 ) )  METHOD_7 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( BLOCK BLOCK (  METHOD_8 ( VAR_2 ) )  METHOD_8 ( VAR_2 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN org.ovirt.engine.core.common.businessentities.VM ) RETURN org.ovirt.engine.core.common.businessentities.VM ( NAME getVm ) NAME getVm ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ( INIT = super . getVm ( ) ) INIT = super . getVm ( ) ) VAR VAR ( IF IF ( COND vm == null ) COND vm == null ( THEN THEN (  vm = TYPE_1 . METHOD_1 ( ) . METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) . get ( 0 ) )  vm = TYPE_1 . METHOD_1 ( ) . METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) . get ( 0 ) (  METHOD_4 ( vm ) )  METHOD_4 ( vm ) (  METHOD_5 ( vm . getId ( ) ) )  METHOD_5 ( vm . getId ( ) ) ) THEN THEN ) IF IF (  return vm ; )  return vm ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN org.ovirt.engine.core.common.businessentities.VM ) RETURN org.ovirt.engine.core.common.businessentities.VM ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME result ) NAME result ( INIT = null ) INIT = null ) VAR VAR ( VAR VAR ( TYPE TYPE_1.VdcQueryReturnValue ) TYPE TYPE_1.VdcQueryReturnValue ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . getInstance ( ) . METHOD_2 ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_3 . getId ( ) ) ) ) INIT = TYPE_2 . getInstance ( ) . METHOD_2 ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_3 . getId ( ) ) ) ) VAR VAR ( IF IF ( COND VAR_1 . getSucceeded ( ) ) COND VAR_1 . getSucceeded ( ) ( THEN THEN (  result = VAR_1 . getReturnValue ( ) )  result = VAR_1 . getReturnValue ( ) ) THEN THEN ) IF IF (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<TYPE_1> ) TYPE java.util.ArrayList<TYPE_1> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.ArrayList < TYPE_1 > ( VAR_1 . size ( ) ) ) INIT = new java.util.ArrayList < TYPE_1 > ( VAR_1 . size ( ) ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_2 ( VAR_3 ) ) INIT = METHOD_2 ( VAR_3 ) ) VAR VAR (  VAR_2 . add ( VAR_4 ) )  VAR_2 . add ( VAR_4 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( VAR_1 ) )  METHOD_2 ( VAR_1 ) (  METHOD_3 ( VAR_1 , VAR_2 , true ) )  METHOD_3 ( VAR_1 , VAR_2 , true ) (  METHOD_4 ( METHOD_5 ( ) ) )  METHOD_4 ( METHOD_5 ( ) ) (  VAR_3 . METHOD_6 ( ) )  VAR_3 . METHOD_6 ( ) ( TRY TRY ( BLOCK BLOCK (  resource . get ( ) )  resource . get ( ) (  METHOD_7 ( STRING_1 ) )  METHOD_7 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( BLOCK BLOCK (  METHOD_8 ( VAR_4 ) )  METHOD_8 ( VAR_4 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.Network ) TYPE TYPE_1.Network ( NAME network ) NAME network ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return ( ( ( network != null ) && ( network . METHOD_2 ( ) ) ) && ( network . METHOD_3 ( ) . METHOD_4 ( ) ) ) && ( ! ( network . METHOD_3 ( ) . METHOD_5 ( ) ) ) ; )  return ( ( ( network != null ) && ( network . METHOD_2 ( ) ) ) && ( network . METHOD_3 ( ) . METHOD_4 ( ) ) ) && ( ! ( network . METHOD_3 ( ) . METHOD_5 ( ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( VAR_1 , new TYPE_1 . DiskImage ( ) ) )  METHOD_2 ( VAR_1 , new TYPE_1 . DiskImage ( ) ) (  METHOD_3 ( ) )  METHOD_3 ( ) (  METHOD_4 ( ) )  METHOD_4 ( ) (  METHOD_5 ( false ) )  METHOD_5 ( false ) (  METHOD_6 ( ) )  METHOD_6 ( ) (  METHOD_7 ( VAR_2 ) )  METHOD_7 ( VAR_2 ) (  org.mockito.Mockito.when ( VAR_3 . METHOD_8 ( TYPE_2 . any ( VAR_4 . Guid class ) ) ) . thenReturn ( new TYPE_3 . ValidationResult ( VAR_5 ) ) )  org.mockito.Mockito.when ( VAR_3 . METHOD_8 ( TYPE_2 . any ( VAR_4 . Guid class ) ) ) . thenReturn ( new TYPE_3 . ValidationResult ( VAR_5 ) ) (  TYPE_4 . METHOD_9 ( command , VAR_6 ) )  TYPE_4 . METHOD_9 ( command , VAR_6 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME vmId ) NAME vmId ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ( INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . get ( vmId ) ) INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . get ( vmId ) ) VAR VAR ( IF IF ( COND vm != null ) COND vm != null ( THEN THEN (  return ( org.ovirt.engine.core.common.businessentities.VM . METHOD_3 ( vm . METHOD_4 ( ) ) ) || ( ( vm . METHOD_4 ( ) ) == ( VAR_1 ) ) ; )  return ( org.ovirt.engine.core.common.businessentities.VM . METHOD_3 ( vm . METHOD_4 ( ) ) ) || ( ( vm . METHOD_4 ( ) ) == ( VAR_1 ) ) ; ) THEN THEN ) IF IF (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  METHOD_3 ( ) )  METHOD_3 ( ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = org.mockito.Mockito . METHOD_4 ( VAR_2 class ) ) INIT = org.mockito.Mockito . METHOD_4 ( VAR_2 class ) ) VAR VAR (  org.mockito.Mockito.when ( VAR_1 . get ( TYPE_2 . any ( VAR_3 . Guid class ) ) ) . thenReturn ( TYPE_3 . METHOD_5 ( ) ) )  org.mockito.Mockito.when ( VAR_1 . get ( TYPE_2 . any ( VAR_3 . Guid class ) ) ) . thenReturn ( TYPE_3 . METHOD_5 ( ) ) (  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( cmd ) . METHOD_6 ( ) )  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( cmd ) . METHOD_6 ( ) (  TYPE_4 . METHOD_7 ( cmd . METHOD_8 ( ) ) )  TYPE_4 . METHOD_7 ( cmd . METHOD_8 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<TYPE_2> ) RETURN TYPE_1<TYPE_2> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < TYPE_2 > ( ) ) INIT = new java.util.ArrayList < TYPE_2 > ( ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_5<?>> ) TYPE java.util.List<TYPE_5<?>> ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_6 . METHOD_2 ( VAR_3 ) ) INIT = TYPE_6 . METHOD_2 ( VAR_3 ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( IN VAR_5 ) IN VAR_5 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_5<?> ) TYPE TYPE_5<?> ( NAME resource ) NAME resource ( INIT = METHOD_3 ( VAR_4 , VAR_2 ) ) INIT = METHOD_3 ( VAR_4 , VAR_2 ) ) VAR VAR (  VAR_1 . METHOD_4 ( METHOD_5 ( resource , VAR_4 , new java.util.HashMap < java.lang.String , TYPE_7 > ( ) ) ) )  VAR_1 . METHOD_4 ( METHOD_5 ( resource , VAR_4 , new java.util.HashMap < java.lang.String , TYPE_7 > ( ) ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND METHOD_2 ( ) ) COND METHOD_2 ( ) ( THEN THEN ( IF IF ( COND ( getParameters ( ) . METHOD_3 ( ) ) == ( VAR_1 ) ) COND ( getParameters ( ) . METHOD_3 ( ) ) == ( VAR_1 ) ( THEN THEN (  return METHOD_4 ( ) . METHOD_5 ( ) ; )  return METHOD_4 ( ) . METHOD_5 ( ) ; ) THEN THEN ) IF IF (  return METHOD_4 ( ) . METHOD_6 ( ) ; )  return METHOD_4 ( ) . METHOD_6 ( ) ; ) THEN THEN ) IF IF (  return METHOD_5 ( ) ; )  return METHOD_5 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 . METHOD_2 ( ) ) == ( VAR_2 ) ) COND ( VAR_1 . METHOD_2 ( ) ) == ( VAR_2 ) ( THEN THEN (  return VAR_3 . METHOD_3 ( ) ; )  return VAR_3 . METHOD_3 ( ) ; ) THEN THEN ( ELSE ELSE ( IF IF ( COND ( VAR_1 . METHOD_2 ( ) ) == ( VAR_4 ) ) COND ( VAR_1 . METHOD_2 ( ) ) == ( VAR_4 ) ( THEN THEN (  return VAR_3 . METHOD_4 ( ) ; )  return VAR_3 . METHOD_4 ( ) ; ) THEN THEN ( ELSE ELSE ( IF IF ( COND ( VAR_1 . METHOD_2 ( ) ) == ( VAR_5 ) ) COND ( VAR_1 . METHOD_2 ( ) ) == ( VAR_5 ) ( THEN THEN (  return VAR_3 . METHOD_5 ( ) ; )  return VAR_3 . METHOD_5 ( ) ; ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF (  return VAR_3 . METHOD_6 ( ) ; )  return VAR_3 . METHOD_6 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<?extendsTYPE_2,?> ) RETURN TYPE_1<?extendsTYPE_2,?> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.uicommonweb.UICommand ) TYPE org.ovirt.engine.ui.uicommonweb.UICommand ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_2 instanceof TYPE_4 ) COND VAR_2 instanceof TYPE_4 ( THEN THEN (  return VAR_3 . get ( ) ; )  return VAR_3 . get ( ) ; ) THEN THEN ( ELSE ELSE ( IF IF ( COND VAR_2 instanceof TYPE_5 ) COND VAR_2 instanceof TYPE_5 ( THEN THEN (  return VAR_4 . get ( ) ; )  return VAR_4 . get ( ) ; ) THEN THEN ( ELSE ELSE ( IF IF ( COND VAR_1 == ( getModel ( ) . METHOD_2 ( ) ) ) COND VAR_1 == ( getModel ( ) . METHOD_2 ( ) ) ( THEN THEN (  return VAR_5 . get ( ) ; )  return VAR_5 . get ( ) ; ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF (  return super . METHOD_1 ( source , VAR_1 , VAR_2 ) ; )  return super . METHOD_1 ( source , VAR_1 , VAR_2 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK (  VAR_3 . put ( VAR_4 , VAR_5 ) )  VAR_3 . put ( VAR_4 , VAR_5 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  METHOD_2 ( ) )  METHOD_2 ( ) ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK (  METHOD_3 ( ) . put ( VAR_4 , VAR_6 ) )  METHOD_3 ( ) . put ( VAR_4 , VAR_6 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK (  VAR_7 . put ( VAR_4 , VAR_8 ) )  VAR_7 . put ( VAR_4 , VAR_8 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  METHOD_4 ( ) )  METHOD_4 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( 1 , true ) )  METHOD_2 ( 1 , true ) (  VAR_1 . METHOD_3 ( ) )  VAR_1 . METHOD_3 ( ) ( TRY TRY ( BLOCK BLOCK (  resource . METHOD_4 ( ) )  resource . METHOD_4 ( ) (  METHOD_5 ( STRING_1 ) )  METHOD_5 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( BLOCK BLOCK (  METHOD_6 ( VAR_2 . METHOD_7 ( ) ) )  METHOD_6 ( VAR_2 . METHOD_7 ( ) ) (  assertEquals ( VAR_2 . METHOD_7 ( ) . getStatus ( ) , INT_1 ) )  assertEquals ( VAR_2 . METHOD_7 ( ) . getStatus ( ) , INT_1 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = super . METHOD_1 ( ) ) INIT = super . METHOD_1 ( ) ) VAR VAR ( IF IF ( COND ( ( ( TYPE_2 . getParameters ( ) . METHOD_2 ( ) ) != null ) && ( ( TYPE_2 . getVm ( ) ) != null ) ) && ( TYPE_2 . getParameters ( ) . METHOD_2 ( ) . METHOD_3 ( ) ) ) COND ( ( ( TYPE_2 . getParameters ( ) . METHOD_2 ( ) ) != null ) && ( ( TYPE_2 . getVm ( ) ) != null ) ) && ( TYPE_2 . getParameters ( ) . METHOD_2 ( ) . METHOD_3 ( ) ) ( THEN THEN (  VAR_1 . add ( new TYPE_1 ( TYPE_2 . getVm ( ) . METHOD_4 ( ) , VAR_2 . StoragePool , VAR_3 ) ) )  VAR_1 . add ( new TYPE_1 ( TYPE_2 . getVm ( ) . METHOD_4 ( ) , VAR_2 . StoragePool , VAR_3 ) ) ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( super . METHOD_1 ( ) ) == null ) COND ( super . METHOD_1 ( ) ) == null ( THEN THEN (  super . METHOD_2 ( new TYPE_1 ( ) ) )  super . METHOD_2 ( new TYPE_1 ( ) ) ) THEN THEN ) IF IF (  super . METHOD_1 ( ) . METHOD_3 ( TYPE_2 . getParameters ( ) . METHOD_1 ( ) ) )  super . METHOD_1 ( ) . METHOD_3 ( TYPE_2 . getParameters ( ) . METHOD_1 ( ) ) (  return super . METHOD_1 ( ) ; )  return super . METHOD_1 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME client ) NAME client ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_3 ( INT_1 ) ) INIT = new TYPE_3 ( INT_1 ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME command ) NAME command ( INIT = VAR_2 < java.lang.String > METHOD_2 ( VAR_3 ) ) INIT = VAR_2 < java.lang.String > METHOD_2 ( VAR_3 ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  client . METHOD_3 ( command , null , VAR_1 , null ) )  client . METHOD_3 ( command , null , VAR_1 , null ) (  return new java.lang.String ( VAR_1 . METHOD_4 ( ) , STRING_1 ) ; )  return new java.lang.String ( VAR_1 . METHOD_4 ( ) , STRING_1 ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ( BLOCK BLOCK (  log . METHOD_5 ( STRING_2 , command , client . METHOD_6 ( ) , e ) )  log . METHOD_5 ( STRING_2 , command , client . METHOD_6 ( ) , e ) (  throw new TYPE_4 ( e ) ; )  throw new TYPE_4 ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME equals ) NAME equals ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME obj ) NAME obj ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( this ) == obj ) COND ( this ) == obj ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ( IF IF ( COND obj == null ) COND obj == null ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( IF IF ( COND ( METHOD_1 ( ) ) != ( obj . METHOD_1 ( ) ) ) COND ( METHOD_1 ( ) ) != ( obj . METHOD_1 ( ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME other ) NAME other ( INIT = ( ( TYPE_1 ) ( obj ) ) ) INIT = ( ( TYPE_1 ) ( obj ) ) ) VAR VAR (  return ( TYPE_2 . equals ( VAR_1 , VAR_2 ) ) && ( TYPE_2 . equals ( vmId , other . vmId ) ) ; )  return ( TYPE_2 . equals ( VAR_1 , VAR_2 ) ) && ( TYPE_2 . equals ( vmId , other . vmId ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.compat.Guid> ) TYPE java.util.List<org.ovirt.engine.core.compat.Guid> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_3 . METHOD_2 ( ) . METHOD_3 ( ) )  VAR_3 . METHOD_2 ( ) . METHOD_3 ( ) ( TRY TRY ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_4 . METHOD_4 ( VAR_1 ) ) ) COND ! ( VAR_4 . METHOD_4 ( VAR_1 ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( SYNCHRONIZED SYNCHRONIZED (  VAR_4 . get ( VAR_1 ) )  VAR_4 . get ( VAR_1 ) ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<org.ovirt.engine.core.compat.Guid,TYPE_1> ) TYPE java.util.Map<org.ovirt.engine.core.compat.Guid,TYPE_1> ( NAME map ) NAME map ( INIT = VAR_4 . get ( VAR_1 ) ) INIT = VAR_4 . get ( VAR_1 ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_5 ) NAME VAR_5 ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK (  map . METHOD_5 ( VAR_5 ) )  map . METHOD_5 ( VAR_5 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ( FINALLY FINALLY (  VAR_3 . METHOD_2 ( ) . METHOD_6 ( ) )  VAR_3 . METHOD_2 ( ) . METHOD_6 ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) (  dao = VAR_1 . METHOD_2 ( ) )  dao = VAR_1 . METHOD_2 ( ) (  VAR_2 = VAR_1 . METHOD_3 ( ) )  VAR_2 = VAR_1 . METHOD_3 ( ) (  VAR_3 = VAR_1 . METHOD_4 ( ) )  VAR_3 = VAR_1 . METHOD_4 ( ) (  VAR_4 = VAR_2 . get ( VAR_5 ) )  VAR_4 = VAR_2 . get ( VAR_5 ) (  VAR_6 = new TYPE_1 ( ) )  VAR_6 = new TYPE_1 ( ) (  VAR_6 . METHOD_5 ( STRING_1 ) )  VAR_6 . METHOD_5 ( STRING_1 ) (  VAR_6 . METHOD_6 ( VAR_4 . METHOD_7 ( ) ) )  VAR_6 . METHOD_6 ( VAR_4 . METHOD_7 ( ) ) (  VAR_6 . METHOD_8 ( VAR_7 ) )  VAR_6 . METHOD_8 ( VAR_7 ) (  VAR_8 = new TYPE_2 ( ) )  VAR_8 = new TYPE_2 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME VAR_2 ) NAME VAR_2 ( INIT = new org.ovirt.engine.core.common.businessentities.VM ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.VM ( ) ) VAR VAR (  VAR_2 . METHOD_2 ( VAR_3 ) )  VAR_2 . METHOD_2 ( VAR_3 ) (  VAR_1 . METHOD_3 ( VAR_2 ) )  VAR_1 . METHOD_3 ( VAR_2 ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_1 . METHOD_4 ( ) ) INIT = VAR_1 . METHOD_4 ( ) ) VAR VAR (  TYPE_4 . assertEquals ( VAR_3 , VAR_4 . getId ( ) ) )  TYPE_4 . assertEquals ( VAR_3 , VAR_4 . getId ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) (  TYPE_1 . setTitle ( VAR_1 . METHOD_2 ( ) ) )  TYPE_1 . setTitle ( VAR_1 . METHOD_2 ( ) ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . instance ( ) ) INIT = TYPE_2 . instance ( ) ) VAR VAR ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN (  METHOD_3 ( VAR_2 ) )  METHOD_3 ( VAR_2 ) ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_3 . instance ( ) ) INIT = TYPE_3 . instance ( ) ) VAR VAR ( IF IF ( COND VAR_3 != null ) COND VAR_3 != null ( THEN THEN (  VAR_4 . METHOD_4 ( VAR_3 . METHOD_5 ( ) ) )  VAR_4 . METHOD_4 ( VAR_3 . METHOD_5 ( ) ) (  VAR_4 . METHOD_6 ( VAR_3 . METHOD_7 ( ) ) )  VAR_4 . METHOD_6 ( VAR_3 . METHOD_7 ( ) ) ) THEN THEN ) IF IF (  VAR_5 . METHOD_8 ( ) )  VAR_5 . METHOD_8 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<?> ) TYPE TYPE_1<?> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1<?> ) TYPE TYPE_1<?> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME VAR_3 ) NAME VAR_3 ( INIT = vms . get ( VAR_1 . METHOD_2 ( ) ) ) INIT = vms . get ( VAR_1 . METHOD_2 ( ) ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME VAR_4 ) NAME VAR_4 ( INIT = vms . get ( VAR_2 . METHOD_2 ( ) ) ) INIT = vms . get ( VAR_2 . METHOD_2 ( ) ) ) VAR VAR (  return VAR_5 . METHOD_3 ( VAR_3 , VAR_4 ) ; )  return VAR_5 . METHOD_3 ( VAR_3 , VAR_4 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME vds ) NAME vds ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 . METHOD_2 ( VAR_2 ) ) INIT = VAR_4 . METHOD_2 ( VAR_2 ) ) VAR VAR ( IF IF ( COND ( ! ( VAR_3 . isEmpty ( ) ) ) && ( ! ( METHOD_3 ( vds , VAR_3 , false ) ) ) ) COND ( ! ( VAR_3 . isEmpty ( ) ) ) && ( ! ( METHOD_3 ( vds , VAR_3 , false ) ) ) ( THEN THEN (  VAR_5 . error ( STRING_1 , vds . getName ( ) ) )  VAR_5 . error ( STRING_1 , vds . getName ( ) ) (  METHOD_4 ( VAR_1 , vds . getId ( ) , VAR_6 ) )  METHOD_4 ( VAR_1 , vds . getId ( ) , VAR_6 ) (  return false ; )  return false ; ) THEN THEN ) IF IF (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = dao . METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( STRING_1 ) ) ) INIT = dao . METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( STRING_1 ) ) ) VAR VAR (  TYPE_2 . assertEquals ( VAR_1 . size ( ) , 2 ) )  TYPE_2 . assertEquals ( VAR_1 . size ( ) , 2 ) (  TYPE_2 . METHOD_4 ( ( ( VAR_1 . get ( 0 ) . METHOD_5 ( ) . equals ( STRING_2 ) ) || ( VAR_1 . get ( 0 ) . METHOD_5 ( ) . equals ( STRING_3 ) ) ) ) )  TYPE_2 . METHOD_4 ( ( ( VAR_1 . get ( 0 ) . METHOD_5 ( ) . equals ( STRING_2 ) ) || ( VAR_1 . get ( 0 ) . METHOD_5 ( ) . equals ( STRING_3 ) ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( RESOURCES RESOURCES ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_3 . METHOD_2 ( VAR_1 , VAR_3 ) ) INIT = TYPE_3 . METHOD_2 ( VAR_1 , VAR_3 ) ) VAR VAR ) RESOURCES RESOURCES ( BLOCK BLOCK (  VAR_4 = new TYPE_4 ( VAR_4 ) )  VAR_4 = new TYPE_4 ( VAR_4 ) (  VAR_4 . METHOD_3 ( VAR_2 ) )  VAR_4 . METHOD_3 ( VAR_2 ) (  log . METHOD_4 ( ( STRING_1 + VAR_1 ) ) )  log . METHOD_4 ( ( STRING_1 + VAR_1 ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME e ) NAME e ( BLOCK BLOCK (  log . error ( ( STRING_2 + VAR_1 ) ) )  log . error ( ( STRING_2 + VAR_1 ) ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME add ) NAME add ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME cluster ) NAME cluster ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_1 ( cluster , STRING_1 , STRING_2 ) )  METHOD_1 ( cluster , STRING_1 , STRING_2 ) (  METHOD_2 ( VAR_1 class , cluster ) )  METHOD_2 ( VAR_1 class , cluster ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME pool ) NAME pool ( INIT = TYPE_4 . METHOD_3 ( cluster , this ) ) INIT = TYPE_4 . METHOD_3 ( cluster , this ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ) TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ( NAME entity ) NAME entity ( INIT = map ( cluster , map ( pool ) ) ) INIT = map ( cluster , map ( pool ) ) ) VAR VAR (  return METHOD_4 ( VAR_2 , new TYPE_5 ( entity ) , new TYPE_6 < org.ovirt.engine.core.compat.Guid > ( VAR_3 , VAR_4 class ) ) ; )  return METHOD_4 ( VAR_2 , new TYPE_5 ( entity ) , new TYPE_6 < org.ovirt.engine.core.compat.Guid > ( VAR_3 , VAR_4 class ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<TYPE_1<org.ovirt.engine.core.compat.Guid,java.lang.Integer>> ) RETURN java.util.List<TYPE_1<org.ovirt.engine.core.compat.Guid,java.lang.Integer>> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDS> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDS> ( NAME hosts ) NAME hosts ) VAR VAR ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.Object> ) TYPE java.util.Map<java.lang.String,java.lang.Object> ( NAME parameters ) NAME parameters ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1<org.ovirt.engine.core.compat.Guid,java.lang.Integer>> ) TYPE java.util.List<TYPE_1<org.ovirt.engine.core.compat.Guid,java.lang.Integer>> ( NAME list ) NAME list ( INIT = new java.util.ArrayList < TYPE_1 < org.ovirt.engine.core.compat.Guid , java.lang.Integer > > ( ) ) INIT = new java.util.ArrayList < TYPE_1 < org.ovirt.engine.core.compat.Guid , java.lang.Integer > > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME host ) NAME host ( IN hosts ) IN hosts ( BLOCK BLOCK (  list . add ( new TYPE_1 < org.ovirt.engine.core.compat.Guid , java.lang.Integer > ( host . getId ( ) , 1 ) ) )  list . add ( new TYPE_1 < org.ovirt.engine.core.compat.Guid , java.lang.Integer > ( host . getId ( ) , 1 ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return list ; )  return list ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( VAR_2 , VAR_3 , VAR_4 ) )  VAR_1 . METHOD_2 ( VAR_2 , VAR_3 , VAR_4 ) (  TYPE_1 . METHOD_3 ( STRING_1 , VAR_1 . METHOD_4 ( VAR_3 ) ) )  TYPE_1 . METHOD_3 ( STRING_1 , VAR_1 . METHOD_4 ( VAR_3 ) ) (  TYPE_1 . assertEquals ( STRING_2 , VAR_4 , VAR_1 . METHOD_4 ( VAR_2 , VAR_3 ) ) )  TYPE_1 . assertEquals ( STRING_2 , VAR_4 , VAR_1 . METHOD_4 ( VAR_2 , VAR_3 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.ValidationResult ) TYPE TYPE_1.ValidationResult ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  org.mockito.Mockito.doReturn ( TYPE_2 . METHOD_2 ( ) ) . when ( VAR_2 ) . METHOD_3 ( ) )  org.mockito.Mockito.doReturn ( TYPE_2 . METHOD_2 ( ) ) . when ( VAR_2 ) . METHOD_3 ( ) (  org.mockito.Mockito.doReturn ( TYPE_2 . METHOD_4 ( ) ) . when ( VAR_2 ) . METHOD_5 ( ) )  org.mockito.Mockito.doReturn ( TYPE_2 . METHOD_4 ( ) ) . when ( VAR_2 ) . METHOD_5 ( ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = org.mockito.Mockito . METHOD_6 ( VAR_4 class ) ) INIT = org.mockito.Mockito . METHOD_6 ( VAR_4 class ) ) VAR VAR (  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( VAR_2 ) . METHOD_7 ( TYPE_4 . METHOD_8 ( ) ) )  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( VAR_2 ) . METHOD_7 ( TYPE_4 . METHOD_8 ( ) ) (  org.mockito.Mockito.when ( VAR_3 . METHOD_9 ( TYPE_4 . METHOD_8 ( ) ) ) . thenReturn ( VAR_1 ) )  org.mockito.Mockito.when ( VAR_3 . METHOD_9 ( TYPE_4 . METHOD_8 ( ) ) ) . thenReturn ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME vds ) NAME vds ( INIT = new org.ovirt.engine.core.common.businessentities.VDS ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.VDS ( ) ) VAR VAR (  vds . METHOD_2 ( new org.ovirt.engine.core.compat . Version ( STRING_1 ) ) )  vds . METHOD_2 ( new org.ovirt.engine.core.compat . Version ( STRING_1 ) ) (  command . METHOD_3 ( VAR_1 ) )  command . METHOD_3 ( VAR_1 ) (  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( command ) . METHOD_4 ( ) )  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( command ) . METHOD_4 ( ) (  org.mockito.Mockito.when ( VAR_2 . get ( VAR_1 ) ) . thenReturn ( vds ) )  org.mockito.Mockito.when ( VAR_2 . get ( VAR_1 ) ) . thenReturn ( vds ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source ; )  return source ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) . METHOD_2 ( ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) . METHOD_2 ( ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  cmd = org.mockito.Mockito . METHOD_2 ( METHOD_3 ( VAR_1 , 0 ) ) )  cmd = org.mockito.Mockito . METHOD_2 ( METHOD_3 ( VAR_1 , 0 ) ) (  METHOD_4 ( cmd ) )  METHOD_4 ( cmd ) (  METHOD_5 ( true , null ) )  METHOD_5 ( true , null ) (  TYPE_1 . METHOD_6 ( cmd . validate ( ) ) )  TYPE_1 . METHOD_6 ( cmd . validate ( ) ) (  cmd . METHOD_1 ( ) )  cmd . METHOD_1 ( ) (  org.mockito.Mockito . METHOD_7 ( cmd ) . METHOD_8 ( ) )  org.mockito.Mockito . METHOD_7 ( cmd ) . METHOD_8 ( ) (  org.mockito.Mockito . METHOD_7 ( cmd ) . METHOD_9 ( VAR_2 ) )  org.mockito.Mockito . METHOD_7 ( cmd ) . METHOD_9 ( VAR_2 ) (  org.mockito.Mockito . METHOD_7 ( cmd ) . METHOD_10 ( VAR_2 ) )  org.mockito.Mockito . METHOD_7 ( cmd ) . METHOD_10 ( VAR_2 ) (  TYPE_1 . assertEquals ( VAR_3 , cmd . METHOD_11 ( ) ) )  TYPE_1 . assertEquals ( VAR_3 , cmd . METHOD_11 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN org.ovirt.engine.core.common.businessentities.VDS ) RETURN org.ovirt.engine.core.common.businessentities.VDS ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDS> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDS> ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( ) . METHOD_3 ( VAR_1 , VAR_3 ) ) INIT = METHOD_2 ( ) . METHOD_3 ( VAR_1 , VAR_3 ) ) VAR VAR ( IF IF ( COND ( VAR_2 == null ) || ( VAR_2 . isEmpty ( ) ) ) COND ( VAR_2 == null ) || ( VAR_2 . isEmpty ( ) ) ( THEN THEN (  throw new TYPE_1 ( VAR_4 ) ; )  throw new TYPE_1 ( VAR_4 ) ; ) THEN THEN ) IF IF (  return TYPE_2 . instance ( ) . METHOD_4 ( VAR_2 ) ; )  return TYPE_2 . instance ( ) . METHOD_4 ( VAR_2 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( STRING_1 ) )  VAR_1 . METHOD_2 ( STRING_1 ) ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_3 ( ) ) INIT = VAR_1 . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_2 . METHOD_4 ( STRING_2 ) ) INIT = VAR_2 . METHOD_4 ( STRING_2 ) ) VAR VAR ( IF IF ( COND VAR_3 > 0 ) COND VAR_3 > 0 ( THEN THEN (  VAR_2 = ( VAR_2 . METHOD_5 ( 0 , VAR_3 ) ) + STRING_1 )  VAR_2 = ( VAR_2 . METHOD_5 ( 0 , VAR_3 ) ) + STRING_1 (  VAR_1 . METHOD_6 ( VAR_2 ) )  VAR_1 . METHOD_6 ( VAR_2 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_2 = new TYPE_1 ( ) )  VAR_2 = new TYPE_1 ( ) (  VAR_2 . setId ( new TYPE_2 ( ) ) )  VAR_2 . setId ( new TYPE_2 ( ) ) (  VAR_2 . METHOD_2 ( VAR_1 ) )  VAR_2 . METHOD_2 ( VAR_1 ) (  org.mockito.Mockito.when ( VAR_3 . get ( TYPE_3 . any ( VAR_4 class ) ) ) . thenReturn ( VAR_2 ) )  org.mockito.Mockito.when ( VAR_3 . get ( TYPE_3 . any ( VAR_4 class ) ) ) . thenReturn ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME VAR_1 ) NAME VAR_1 ( INIT = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ) INIT = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ) VAR VAR ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_3 = ( ( java.util.HashMap < java.lang.Integer , java.lang.String > ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) )  VAR_3 = ( ( java.util.HashMap < java.lang.Integer , java.lang.String > ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) (  TYPE_2 . METHOD_2 ( ) )  TYPE_2 . METHOD_2 ( ) ) BLOCK BLOCK ) METHOD METHOD (  VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { VAR_3 = ( ( java.util.HashMap < java.lang.Integer , java.lang.String > ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ; TYPE_2 . METHOD_2 ( ) ; } } )  VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { VAR_3 = ( ( java.util.HashMap < java.lang.Integer , java.lang.String > ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ; TYPE_2 . METHOD_2 ( ) ; } } (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_4 , new TYPE_3 ( VAR_5 ) , VAR_1 ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_4 , new TYPE_3 ( VAR_5 ) , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ) VAR VAR ( VAR VAR ( TYPE java.util.ArrayList<java.lang.String> ) TYPE java.util.ArrayList<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.Integer ) TYPE java.lang.Integer ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 < java.lang.Integer > METHOD_2 ( VAR_4 ) ) INIT = VAR_3 < java.lang.Integer > METHOD_2 ( VAR_4 ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1<TYPE_2,java.lang.Integer> ) TYPE TYPE_1<TYPE_2,java.lang.Integer> ( NAME e ) NAME e ( IN METHOD_3 ( vm ) . METHOD_4 ( ) ) IN METHOD_3 ( vm ) . METHOD_4 ( ) ( BLOCK BLOCK ( IF IF ( COND ! ( METHOD_5 ( e . METHOD_6 ( ) , ( VAR_2 * ( e . getValue ( ) ) ) , VAR_1 ) ) ) COND ! ( METHOD_5 ( e . METHOD_6 ( ) , ( VAR_2 * ( e . getValue ( ) ) ) , VAR_1 ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME vmId ) NAME vmId ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND source != null ) COND source != null ( THEN THEN (  return ( ( ( java.util.List < java.lang.String > ) ( source ) ) . size ( ) ) > 0 ; )  return ( ( ( java.util.List < java.lang.String > ) ( source ) ) . size ( ) ) > 0 ; ) THEN THEN ) IF IF (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return ( ( ( java.util.List < java.lang.String > ) ( source ) ) . size ( ) ) > 0 ; } return false ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return ( ( ( java.util.List < java.lang.String > ) ( source ) ) . size ( ) ) > 0 ; } return false ; } } (  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.Map<java.lang.String,TYPE_1<?>> ) RETURN java.util.Map<java.lang.String,TYPE_1<?>> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.Map<java.lang.String,TYPE_1<?>> ) TYPE java.util.Map<java.lang.String,TYPE_1<?>> ( NAME map ) NAME map ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  map . put ( STRING_1 , VAR_1 class ) )  map . put ( STRING_1 , VAR_1 class ) (  map . put ( STRING_2 , VAR_2 class ) )  map . put ( STRING_2 , VAR_2 class ) (  map . put ( STRING_3 , VAR_3 class ) )  map . put ( STRING_3 , VAR_3 class ) (  map . put ( STRING_4 , VAR_4 class ) )  map . put ( STRING_4 , VAR_4 class ) (  map . put ( STRING_5 , VAR_5 class ) )  map . put ( STRING_5 , VAR_5 class ) (  return map ; )  return map ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND source != null ) COND source != null ( THEN THEN ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain> ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( source ) ) ) INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( source ) ) ) VAR VAR (  return VAR_1 . isEmpty ( ) ; )  return VAR_1 . isEmpty ( ) ; ) THEN THEN ) IF IF (  return source ; )  return source ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > VAR_1 = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( source ) ) ; return VAR_1 . isEmpty ( ) ; } return source ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > VAR_1 = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( source ) ) ; return VAR_1 . isEmpty ( ) ; } return source ; } } (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new TYPE_1 ( ( STRING_1 + name ) , VAR_3 . StorageDomain ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new TYPE_1 ( ( STRING_1 + name ) , VAR_3 . StorageDomain ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND source == null ) COND source == null ( THEN THEN (  return new java.util.ArrayList < TYPE_1 > ( ) ; )  return new java.util.ArrayList < TYPE_1 > ( ) ; ) THEN THEN ) IF IF (  TYPE_2 . METHOD_2 ( ( ( java.util.List < TYPE_1 > ) ( source ) ) , new TYPE_3 ( ) ) )  TYPE_2 . METHOD_2 ( ( ( java.util.List < TYPE_1 > ) ( source ) ) , new TYPE_3 ( ) ) (  return source ; )  return source ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < TYPE_1 > ( ) ; } TYPE_2 . METHOD_2 ( ( ( java.util.List < TYPE_1 > ) ( source ) ) , new TYPE_3 ( ) ) ; return source ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < TYPE_1 > ( ) ; } TYPE_2 . METHOD_2 ( ( ( java.util.List < TYPE_1 > ) ( source ) ) , new TYPE_3 ( ) ) ; return source ; } } (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new TYPE_4 ( ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new TYPE_4 ( ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 . METHOD_2 ( ) ) COND VAR_1 . METHOD_2 ( ) ( THEN THEN ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_3 ( ) ) INIT = METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.network ) TYPE org.ovirt.engine.core.common.businessentities.network ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_4 ( VAR_3 , ( VAR_1 . METHOD_5 ( ) . METHOD_6 ( ) ? METHOD_7 ( VAR_1 . METHOD_5 ( ) . getId ( ) ) : null ) , VAR_1 . METHOD_5 ( ) . getName ( ) ) ) INIT = METHOD_4 ( VAR_3 , ( VAR_1 . METHOD_5 ( ) . METHOD_6 ( ) ? METHOD_7 ( VAR_1 . METHOD_5 ( ) . getId ( ) ) : null ) , VAR_1 . METHOD_5 ( ) . getName ( ) ) ) VAR VAR ( IF IF ( COND VAR_4 != null ) COND VAR_4 != null ( THEN THEN (  VAR_2 . METHOD_8 ( VAR_4 . METHOD_9 ( ) ) )  VAR_2 . METHOD_8 ( VAR_4 . METHOD_9 ( ) ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.compat.Guid> ) TYPE java.util.List<org.ovirt.engine.core.compat.Guid> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME parameters ) NAME parameters ( INIT = new TYPE_1 ( false , VAR_2 ) ) INIT = new TYPE_1 ( false , VAR_2 ) ) VAR VAR (  parameters . METHOD_2 ( new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( VAR_1 ) ) )  parameters . METHOD_2 ( new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( VAR_1 ) ) (  TYPE_2 . getInstance ( ) . METHOD_3 ( VAR_3 , parameters , TYPE_3 . METHOD_4 ( ) ) )  TYPE_2 . getInstance ( ) . METHOD_3 ( VAR_3 , parameters , TYPE_3 . METHOD_4 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME iface ) NAME iface ( INIT = TYPE_2 . METHOD_2 ( ) ) INIT = TYPE_2 . METHOD_2 ( ) ) VAR VAR (  VAR_1 . METHOD_3 ( iface , VAR_2 ) )  VAR_1 . METHOD_3 ( iface , VAR_2 ) (  METHOD_4 ( VAR_3 , iface ) )  METHOD_4 ( VAR_3 , iface ) (  TYPE_3 . assertEquals ( VAR_4 . getValue ( ) . METHOD_5 ( ) , VAR_2 ) )  TYPE_3 . assertEquals ( VAR_4 . getValue ( ) . METHOD_5 ( ) , VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( VAR_1 , false ) )  METHOD_2 ( VAR_1 , false ) (  VAR_2 . METHOD_3 ( ) )  VAR_2 . METHOD_3 ( ) ( TRY TRY ( BLOCK BLOCK (  resource . METHOD_4 ( ) )  resource . METHOD_4 ( ) (  METHOD_5 ( STRING_1 ) )  METHOD_5 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( BLOCK BLOCK (  METHOD_6 ( VAR_3 . METHOD_7 ( ) ) )  METHOD_6 ( VAR_3 . METHOD_7 ( ) ) (  assertEquals ( INT_1 , VAR_3 . METHOD_7 ( ) . getStatus ( ) ) )  assertEquals ( INT_1 , VAR_3 . METHOD_7 ( ) . getStatus ( ) ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) ) ) )  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) ) ) (  METHOD_3 ( ) )  METHOD_3 ( ) (  METHOD_4 ( true , null ) )  METHOD_4 ( true , null ) (  cmd . METHOD_1 ( ) )  cmd . METHOD_1 ( ) (  org.mockito.Mockito . METHOD_5 ( VAR_2 , org.mockito.Mockito . METHOD_6 ( 1 ) ) . METHOD_7 ( TYPE_3 . any ( VAR_3 . Guid class ) ) )  org.mockito.Mockito . METHOD_5 ( VAR_2 , org.mockito.Mockito . METHOD_6 ( 1 ) ) . METHOD_7 ( TYPE_3 . any ( VAR_3 . Guid class ) ) (  TYPE_4 . assertEquals ( cmd . METHOD_8 ( ) , VAR_4 ) )  TYPE_4 . assertEquals ( cmd . METHOD_8 ( ) , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.Network ) TYPE TYPE_1.Network ( NAME network ) NAME network ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return ( ( ( network != null ) && ( network . METHOD_2 ( ) ) ) && ( network . METHOD_3 ( ) . METHOD_4 ( ) ) ) && ( ! ( network . METHOD_3 ( ) . METHOD_5 ( ) ) ) ; )  return ( ( ( network != null ) && ( network . METHOD_2 ( ) ) ) && ( network . METHOD_3 ( ) . METHOD_4 ( ) ) ) && ( ! ( network . METHOD_3 ( ) . METHOD_5 ( ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  dao . METHOD_2 ( VAR_1 , VAR_2 ) )  dao . METHOD_2 ( VAR_1 , VAR_2 ) ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_3 ) NAME VAR_3 ( INIT = dao . METHOD_3 ( VAR_1 ) ) INIT = dao . METHOD_3 ( VAR_1 ) ) VAR VAR (  TYPE_2 . METHOD_4 ( ( ( VAR_3 . size ( ) ) == 1 ) ) )  TYPE_2 . METHOD_4 ( ( ( VAR_3 . size ( ) ) == 1 ) ) (  TYPE_2 . METHOD_4 ( VAR_3 . METHOD_5 ( VAR_4 ) ) )  TYPE_2 . METHOD_4 ( VAR_3 . METHOD_5 ( VAR_4 ) ) (  TYPE_2 . METHOD_6 ( VAR_3 . METHOD_5 ( VAR_5 ) ) )  TYPE_2 . METHOD_6 ( VAR_3 . METHOD_5 ( VAR_5 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_3 ) NAME VAR_3 ( INIT = new java.util.ArrayList < TYPE_1 > ( ) ) INIT = new java.util.ArrayList < TYPE_1 > ( ) ) VAR VAR (  VAR_3 . add ( METHOD_2 ( VAR_1 ) ) )  VAR_3 . add ( METHOD_2 ( VAR_1 ) ) (  VAR_3 . add ( METHOD_3 ( VAR_2 ) ) )  VAR_3 . add ( METHOD_3 ( VAR_2 ) ) (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND returnValue != null ) COND returnValue != null ( THEN THEN ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StoragePool ) TYPE org.ovirt.engine.core.common.businessentities.StoragePool ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( org.ovirt.engine.core.common.businessentities.StoragePool ) ( returnValue ) ) ) INIT = ( ( org.ovirt.engine.core.common.businessentities.StoragePool ) ( returnValue ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.ArrayList ( TYPE_1 . METHOD_1 ( new org.ovirt.engine.core.common.businessentities.StoragePool [ ] { VAR_1 } ) ) ) INIT = new java.util.ArrayList ( TYPE_1 . METHOD_1 ( new org.ovirt.engine.core.common.businessentities.StoragePool [ ] { VAR_1 } ) ) ) VAR VAR (  METHOD_2 ( VAR_2 ) )  METHOD_2 ( VAR_2 ) ) THEN THEN ( ELSE ELSE (  getModel ( ) . METHOD_3 ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_4 ( ) ) )  getModel ( ) . METHOD_3 ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_4 ( ) ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1.DiskImage ) TYPE TYPE_1.DiskImage ( NAME diskImage ) NAME diskImage ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ) TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 . METHOD_2 ( VAR_3 ) ) COND VAR_1 . METHOD_2 ( VAR_3 ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  return super . METHOD_1 ( VAR_1 , diskImage , VAR_2 , VAR_3 ) ; )  return super . METHOD_1 ( VAR_1 , diskImage , VAR_2 , VAR_3 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.uicommonweb.UICommand ) TYPE org.ovirt.engine.ui.uicommonweb.UICommand ( NAME command ) NAME command ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND STRING_1 . equals ( command . getName ( ) ) ) COND STRING_1 . equals ( command . getName ( ) ) ( THEN THEN (  METHOD_2 ( ) )  METHOD_2 ( ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND STRING_2 . equals ( command . getName ( ) ) ) COND STRING_2 . equals ( command . getName ( ) ) ( THEN THEN (  METHOD_3 ( ) )  METHOD_3 ( ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND STRING_3 . equals ( command . getName ( ) ) ) COND STRING_3 . equals ( command . getName ( ) ) ( THEN THEN (  METHOD_4 ( ) )  METHOD_4 ( ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND STRING_4 . equals ( command . getName ( ) ) ) COND STRING_4 . equals ( command . getName ( ) ) ( THEN THEN (  METHOD_5 ( ) )  METHOD_5 ( ) ) THEN THEN ( ELSE ELSE (  super . METHOD_1 ( command ) )  super . METHOD_1 ( command ) ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( STRING_1 , STRING_2 , STRING_3 ) ) INIT = TYPE_2 . METHOD_2 ( STRING_1 , STRING_2 , STRING_3 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3<java.lang.String,java.lang.String> ) TYPE TYPE_3<java.lang.String,java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . METHOD_3 ( org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) , VAR_1 ) ) INIT = VAR_3 . METHOD_3 ( org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) , VAR_1 ) ) VAR VAR (  TYPE_2 . METHOD_5 ( VAR_2 , VAR_1 . METHOD_6 ( ) , VAR_1 . METHOD_7 ( ) ) )  TYPE_2 . METHOD_5 ( VAR_2 , VAR_1 . METHOD_6 ( ) , VAR_1 . METHOD_7 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1<TYPE_2> ) RETURN TYPE_1<TYPE_2> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME params ) NAME params ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME result ) NAME result ( INIT = super . METHOD_1 ( params ) ) INIT = super . METHOD_1 ( params ) ) VAR VAR (  VAR_1 = org.mockito.Mockito . METHOD_2 ( VAR_2 class ) )  VAR_1 = org.mockito.Mockito . METHOD_2 ( VAR_2 class ) (  org.mockito.Mockito.when ( result . METHOD_3 ( ) ) . thenReturn ( VAR_1 ) )  org.mockito.Mockito.when ( result . METHOD_3 ( ) ) . thenReturn ( VAR_1 ) (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME client ) NAME client ( INIT = new TYPE_1 ( new TYPE_2 ( ) ) ) INIT = new TYPE_1 ( new TYPE_2 ( ) ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 < java.lang.Integer > METHOD_2 ( VAR_4 ) ) INIT = VAR_3 < java.lang.Integer > METHOD_2 ( VAR_4 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_5 ) NAME VAR_5 ( INIT = new TYPE_4 ( VAR_2 , false ) ) INIT = new TYPE_4 ( VAR_2 , false ) ) VAR VAR ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME parameters ) NAME parameters ( INIT = client . METHOD_3 ( ) ) INIT = client . METHOD_3 ( ) ) VAR VAR (  parameters . METHOD_4 ( VAR_6 , VAR_5 ) )  parameters . METHOD_4 ( VAR_6 , VAR_5 ) (  return client ; )  return client ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1<TYPE_2.DiskImage> ) TYPE TYPE_1<TYPE_2.DiskImage> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3<org.ovirt.engine.core.common.businessentities.StorageDomain> ) TYPE TYPE_3<org.ovirt.engine.core.common.businessentities.StorageDomain> ( NAME VAR_3 ) NAME VAR_3 ( INIT = null ) INIT = null ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_3<org.ovirt.engine.core.common.businessentities.StorageDomain> ) TYPE TYPE_3<org.ovirt.engine.core.common.businessentities.StorageDomain> ( NAME VAR_4 ) NAME VAR_4 ( IN METHOD_2 ( VAR_2 ) ) IN METHOD_2 ( VAR_2 ) ( BLOCK BLOCK (  VAR_3 = ( VAR_3 == null ) ? VAR_4 . METHOD_3 ( ) : VAR_3 . METHOD_4 ( VAR_4 . METHOD_3 ( ) ) )  VAR_3 = ( VAR_3 == null ) ? VAR_4 . METHOD_3 ( ) : VAR_3 . METHOD_4 ( VAR_4 . METHOD_3 ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  TYPE_4 . METHOD_5 ( VAR_1 , VAR_3 ) )  TYPE_4 . METHOD_5 ( VAR_1 , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME vds ) NAME vds ( INIT = new org.ovirt.engine.core.common.businessentities.VDS ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.VDS ( ) ) VAR VAR (  vds . setId ( VAR_1 ) )  vds . setId ( VAR_1 ) (  vds . METHOD_2 ( INT_1 ) )  vds . METHOD_2 ( INT_1 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME host ) NAME host ( INIT = TYPE_2 . map ( vds , ( ( TYPE_1 ) ( null ) ) ) ) INIT = TYPE_2 . map ( vds , ( ( TYPE_1 ) ( null ) ) ) ) VAR VAR (  METHOD_3 ( host . METHOD_4 ( ) ) )  METHOD_3 ( host . METHOD_4 ( ) ) (  assertEquals ( new TYPE_3 ( host . METHOD_4 ( ) ) , new TYPE_3 ( INT_2 ) ) )  assertEquals ( new TYPE_3 ( host . METHOD_4 ( ) ) , new TYPE_3 ( INT_2 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = dao . METHOD_2 ( VAR_2 ) ) INIT = dao . METHOD_2 ( VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  VAR_3 . METHOD_3 ( new org.ovirt.engine.core.compat.Guid ( STRING_1 ) ) )  VAR_3 . METHOD_3 ( new org.ovirt.engine.core.compat.Guid ( STRING_1 ) ) (  TYPE_3 . METHOD_4 ( VAR_1 ) )  TYPE_3 . METHOD_4 ( VAR_1 ) (  TYPE_3 . assertEquals ( VAR_4 , VAR_1 . getStatus ( ) ) )  TYPE_3 . assertEquals ( VAR_4 , VAR_1 . getStatus ( ) ) (  dao . METHOD_5 ( VAR_1 . getId ( ) , VAR_5 ) )  dao . METHOD_5 ( VAR_1 . getId ( ) , VAR_5 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_6 ) NAME VAR_6 ( INIT = dao . METHOD_2 ( VAR_2 ) ) INIT = dao . METHOD_2 ( VAR_2 ) ) VAR VAR (  TYPE_3 . assertEquals ( VAR_5 , VAR_6 . METHOD_6 ( ) . METHOD_7 ( ) ) )  TYPE_3 . assertEquals ( VAR_5 , VAR_6 . METHOD_6 ( ) . METHOD_7 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  VAR_1 . add ( STRING_1 ) )  VAR_1 . add ( STRING_1 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( null ) ) INIT = METHOD_2 ( null ) ) VAR VAR (  METHOD_3 ( VAR_3 . length ) )  METHOD_3 ( VAR_3 . length ) (  METHOD_4 ( STRING_2 ) )  METHOD_4 ( STRING_2 ) (  VAR_4 . METHOD_5 ( VAR_2 ) )  VAR_4 . METHOD_5 ( VAR_2 ) ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME hosts ) NAME hosts ( INIT = METHOD_6 ( ) ) INIT = METHOD_6 ( ) ) VAR VAR (  METHOD_7 ( hosts . get ( 0 ) . METHOD_8 ( ) ) )  METHOD_7 ( hosts . get ( 0 ) . METHOD_8 ( ) ) (  METHOD_9 ( hosts ) )  METHOD_9 ( hosts ) ) BLOCK BLOCK ( FINALLY FINALLY (  VAR_1 . METHOD_10 ( ) )  VAR_1 . METHOD_10 ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.network> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.network> ( NAME result ) NAME result ( INIT = dao . METHOD_2 ( VAR_1 ) ) INIT = dao . METHOD_2 ( VAR_1 ) ) VAR VAR (  TYPE_1 . METHOD_3 ( result ) )  TYPE_1 . METHOD_3 ( result ) ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.network ) TYPE org.ovirt.engine.core.common.businessentities.network ( NAME VAR_2 ) NAME VAR_2 ( IN result ) IN result ( BLOCK BLOCK (  TYPE_2 . assertEquals ( VAR_1 , VAR_2 . METHOD_4 ( ) ) )  TYPE_2 . assertEquals ( VAR_1 , VAR_2 . METHOD_4 ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( METHOD_3 ( ) ) )  METHOD_2 ( METHOD_3 ( ) ) (  METHOD_4 ( 1 , METHOD_5 ( ) ) )  METHOD_4 ( 1 , METHOD_5 ( ) ) (  VAR_1 . METHOD_6 ( ) )  VAR_1 . METHOD_6 ( ) ( TRY TRY ( BLOCK BLOCK (  resource . get ( ) )  resource . get ( ) (  METHOD_7 ( STRING_1 ) )  METHOD_7 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( BLOCK BLOCK (  METHOD_8 ( VAR_2 ) )  METHOD_8 ( VAR_2 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ( INIT = ( ( TYPE_1 ) ( target ) ) ) INIT = ( ( TYPE_1 ) ( target ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2.VdcQueryReturnValue ) TYPE TYPE_2.VdcQueryReturnValue ( NAME response ) NAME response ( INIT = ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) ) INIT = ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) ) VAR VAR ( IF IF ( COND response . getSucceeded ( ) ) COND response . getSucceeded ( ) ( THEN THEN (  model . METHOD_2 ( ( ( java.util.ArrayList < TYPE_3 > ) ( response . getReturnValue ( ) ) ) , false ) )  model . METHOD_2 ( ( ( java.util.ArrayList < TYPE_3 > ) ( response . getReturnValue ( ) ) ) , false ) (  model . METHOD_3 ( STRING_1 ) )  model . METHOD_3 ( STRING_1 ) ) THEN THEN ( ELSE ELSE (  model . METHOD_3 ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_4 ( ) ) )  model . METHOD_3 ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_4 ( ) ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = dao . METHOD_2 ( VAR_2 ) . get ( 0 ) ) INIT = dao . METHOD_2 ( VAR_2 ) . get ( 0 ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . METHOD_3 ( ) ) INIT = VAR_1 . METHOD_3 ( ) ) VAR VAR ( IF IF ( COND VAR_3 . equals ( VAR_4 ) ) COND VAR_3 . equals ( VAR_4 ) ( THEN THEN (  TYPE_2 . METHOD_4 ( STRING_1 ) )  TYPE_2 . METHOD_4 ( STRING_1 ) ) THEN THEN ) IF IF (  dao . METHOD_5 ( VAR_5 , VAR_6 , VAR_4 ) )  dao . METHOD_5 ( VAR_5 , VAR_6 , VAR_4 ) (  VAR_1 = dao . METHOD_2 ( VAR_2 ) . get ( 0 ) )  VAR_1 = dao . METHOD_2 ( VAR_2 ) . get ( 0 ) (  VAR_3 = VAR_1 . METHOD_3 ( ) )  VAR_3 = VAR_1 . METHOD_3 ( ) (  TYPE_2 . assertEquals ( STRING_2 , VAR_3 , VAR_4 ) )  TYPE_2 . assertEquals ( STRING_2 , VAR_3 , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME source ) NAME source ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return ( TYPE_2 . METHOD_2 ( source . METHOD_3 ( ) , target . METHOD_3 ( ) ) ) && ( ( ( TYPE_2 . METHOD_4 ( target . METHOD_5 ( ) ) ) || ( TYPE_2 . METHOD_2 ( target . METHOD_5 ( ) , STRING_1 ) ) ) || ( source . METHOD_5 ( ) . METHOD_6 ( ) . METHOD_7 ( target . METHOD_5 ( ) ) ) ) ; )  return ( TYPE_2 . METHOD_2 ( source . METHOD_3 ( ) , target . METHOD_3 ( ) ) ) && ( ( ( TYPE_2 . METHOD_4 ( target . METHOD_5 ( ) ) ) || ( TYPE_2 . METHOD_2 ( target . METHOD_5 ( ) , STRING_1 ) ) ) || ( source . METHOD_5 ( ) . METHOD_6 ( ) . METHOD_7 ( target . METHOD_5 ( ) ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME id ) NAME id ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source != null ? ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; )  return source != null ? ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; } } (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.doReturn ( new TYPE_1 . ValidationResult ( VAR_1 ) ) . when ( VAR_2 ) . METHOD_2 ( TYPE_2 . any ( VAR_3 . Guid class ) ) )  org.mockito.Mockito.doReturn ( new TYPE_1 . ValidationResult ( VAR_1 ) ) . when ( VAR_2 ) . METHOD_2 ( TYPE_2 . any ( VAR_3 . Guid class ) ) (  org.mockito.Mockito.doReturn ( TYPE_3 . METHOD_3 ( ) ) . when ( cmd ) . METHOD_4 ( ) )  org.mockito.Mockito.doReturn ( TYPE_3 . METHOD_3 ( ) ) . when ( cmd ) . METHOD_4 ( ) (  TYPE_4 . METHOD_5 ( cmd . validate ( ) ) )  TYPE_4 . METHOD_5 ( cmd . validate ( ) ) (  TYPE_4 . METHOD_6 ( cmd . getReturnValue ( ) . METHOD_7 ( ) . METHOD_8 ( TYPE_5 . name ( ) ) ) )  TYPE_4 . METHOD_6 ( cmd . getReturnValue ( ) . METHOD_7 ( ) . METHOD_8 ( TYPE_5 . name ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . getParameters ( ) . METHOD_2 ( TYPE_1 . getVm ( ) . getId ( ) ) )  TYPE_1 . getParameters ( ) . METHOD_2 ( TYPE_1 . getVm ( ) . getId ( ) ) ( IF IF ( COND ( ( TYPE_1 . getVm ( ) . METHOD_3 ( ) ) == ( VAR_1 ) ) || ( ! ( TYPE_2 . METHOD_4 ( TYPE_1 . getVm ( ) . METHOD_5 ( ) ) ) ) ) COND ( ( TYPE_1 . getVm ( ) . METHOD_3 ( ) ) == ( VAR_1 ) ) || ( ! ( TYPE_2 . METHOD_4 ( TYPE_1 . getVm ( ) . METHOD_5 ( ) ) ) ) ( THEN THEN (  METHOD_6 ( true ) )  METHOD_6 ( true ) (  METHOD_7 ( METHOD_8 ( ) ) )  METHOD_7 ( METHOD_8 ( ) ) ) THEN THEN ( ELSE ELSE (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) ) ELSE ELSE ) IF IF (  METHOD_9 ( ) )  METHOD_9 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.String> ) TYPE java.util.Map<java.lang.String,java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 < > ( ) ) INIT = new TYPE_2 < > ( ) ) VAR VAR (  VAR_1 . put ( STRING_1 , STRING_2 ) )  VAR_1 . put ( STRING_1 , STRING_2 ) (  return new TYPE_1 ( new TYPE_3 ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) , VAR_2 ) , VAR_3 , STRING_3 , STRING_4 , 2 , new java.util.HashMap < java.lang.String , java.lang.Object > ( ) , true , false , false , STRING_5 , VAR_1 ) ; )  return new TYPE_1 ( new TYPE_3 ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) , VAR_2 ) , VAR_3 , STRING_3 , STRING_4 , 2 , new java.util.HashMap < java.lang.String , java.lang.Object > ( ) , true , false , false , STRING_5 , VAR_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = STRING_2 ) INIT = STRING_2 ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_1 . METHOD_2 ( VAR_1 ) ) INIT = TYPE_1 . METHOD_2 ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_4 ) NAME VAR_4 ( INIT = ( TYPE_1 . METHOD_2 ( VAR_1 ) ) + ( VAR_5 ) ) INIT = ( TYPE_1 . METHOD_2 ( VAR_1 ) ) + ( VAR_5 ) ) VAR VAR (  METHOD_3 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) )  METHOD_3 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( ) )  TYPE_1 . METHOD_2 ( ) ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND returnValue != null ) COND returnValue != null ( THEN THEN (  VAR_1 . METHOD_3 ( ( ( java.util.HashMap < TYPE_2 < TYPE_3 , java.lang.String > , java.lang.Object > ) ( returnValue ) ) ) )  VAR_1 . METHOD_3 ( ( ( java.util.HashMap < TYPE_2 < TYPE_3 , java.lang.String > , java.lang.Object > ) ( returnValue ) ) ) ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object returnValue , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( returnValue != null ) { VAR_1 . METHOD_3 ( ( ( java.util.HashMap < TYPE_2 < TYPE_3 , java.lang.String > , java.lang.Object > ) ( returnValue ) ) ) ; } return VAR_1 ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object returnValue , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( returnValue != null ) { VAR_1 . METHOD_3 ( ( ( java.util.HashMap < TYPE_2 < TYPE_3 , java.lang.String > , java.lang.Object > ) ( returnValue ) ) ) ; } return VAR_1 ; } } (  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new TYPE_4 ( ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new TYPE_4 ( ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( 1 ) )  METHOD_2 ( 1 ) (  METHOD_3 ( ) )  METHOD_3 ( ) (  METHOD_4 ( 1 ) )  METHOD_4 ( 1 ) (  METHOD_5 ( 1 ) )  METHOD_5 ( 1 ) (  METHOD_6 ( 1 ) )  METHOD_6 ( 1 ) (  METHOD_7 ( METHOD_8 ( VAR_1 , VAR_2 class , new java.lang.String [ ] { STRING_1 , STRING_2 } , new java.lang.Object [ ] { VAR_3 , VAR_4 } , true , true ) ) )  METHOD_7 ( METHOD_8 ( VAR_1 , VAR_2 class , new java.lang.String [ ] { STRING_1 , STRING_2 } , new java.lang.Object [ ] { VAR_3 , VAR_4 } , true , true ) ) (  METHOD_9 ( resource . METHOD_10 ( ) ) )  METHOD_9 ( resource . METHOD_10 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN org.ovirt.engine.core.compat.Guid ) RETURN org.ovirt.engine.core.compat.Guid ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME vds ) NAME vds ( INIT = VAR_1 . get ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) ) ) INIT = VAR_1 . get ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) ) ) VAR VAR ( IF IF ( COND vds == null ) COND vds == null ( THEN THEN (  throw new TYPE_2 ( java.lang.String . METHOD_3 ( STRING_1 , TYPE_1 . getParameters ( ) . METHOD_2 ( ) ) ) ; )  throw new TYPE_2 ( java.lang.String . METHOD_3 ( STRING_1 , TYPE_1 . getParameters ( ) . METHOD_2 ( ) ) ) ; ) THEN THEN ) IF IF ( IF IF ( COND ( vds . getStatus ( ) ) != ( VAR_2 ) ) COND ( vds . getStatus ( ) ) != ( VAR_2 ) ( THEN THEN (  METHOD_4 ( vds . getName ( ) ) )  METHOD_4 ( vds . getName ( ) ) (  throw new TYPE_2 ( ) ; )  throw new TYPE_2 ( ) ; ) THEN THEN ) IF IF (  return vds . getId ( ) ; )  return vds . getId ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<TYPE_1<org.ovirt.engine.core.compat.Guid,java.lang.Integer>> ) RETURN java.util.List<TYPE_1<org.ovirt.engine.core.compat.Guid,java.lang.Integer>> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDS> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDS> ( NAME hosts ) NAME hosts ) VAR VAR ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.Object> ) TYPE java.util.Map<java.lang.String,java.lang.Object> ( NAME parameters ) NAME parameters ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1<org.ovirt.engine.core.compat.Guid,java.lang.Integer>> ) TYPE java.util.List<TYPE_1<org.ovirt.engine.core.compat.Guid,java.lang.Integer>> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < TYPE_1 < org.ovirt.engine.core.compat.Guid , java.lang.Integer > > ( ) ) INIT = new java.util.ArrayList < TYPE_1 < org.ovirt.engine.core.compat.Guid , java.lang.Integer > > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME vds ) NAME vds ( IN hosts ) IN hosts ( BLOCK BLOCK (  VAR_1 . add ( new TYPE_1 < org.ovirt.engine.core.compat.Guid , java.lang.Integer > ( vds . getId ( ) , ( INT_1 - ( vds . METHOD_2 ( ) ) ) ) ) )  VAR_1 . add ( new TYPE_1 < org.ovirt.engine.core.compat.Guid , java.lang.Integer > ( vds . getId ( ) , ( INT_1 - ( vds . METHOD_2 ( ) ) ) ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( METHOD_3 ( ) ) )  METHOD_2 ( METHOD_3 ( ) ) (  METHOD_4 ( 1 , true , getEntity ( 0 ) ) )  METHOD_4 ( 1 , true , getEntity ( 0 ) ) (  VAR_1 . METHOD_5 ( ) )  VAR_1 . METHOD_5 ( ) ( TRY TRY ( BLOCK BLOCK (  resource . METHOD_6 ( TYPE_1 . getModel ( 0 ) ) )  resource . METHOD_6 ( TYPE_1 . getModel ( 0 ) ) (  METHOD_7 ( STRING_1 ) )  METHOD_7 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( BLOCK BLOCK (  METHOD_8 ( VAR_2 ) )  METHOD_8 ( VAR_2 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.when ( VAR_1 . get ( VAR_2 ) ) . thenReturn ( getVdsGroup ( ) ) )  org.mockito.Mockito.when ( VAR_1 . get ( VAR_2 ) ) . thenReturn ( getVdsGroup ( ) ) (  org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( VAR_2 ) ) . thenReturn ( getVdsGroup ( ) ) )  org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( VAR_2 ) ) . thenReturn ( getVdsGroup ( ) ) (  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( cmd ) . METHOD_3 ( ) )  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( cmd ) . METHOD_3 ( ) (  org.mockito.Mockito.when ( cmd . METHOD_4 ( ) ) . thenReturn ( VAR_3 ) )  org.mockito.Mockito.when ( cmd . METHOD_4 ( ) ) . thenReturn ( VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source != null ? ( ( java.lang.Boolean ) ( source ) ) . METHOD_2 ( ) : false ; )  return source != null ? ( ( java.lang.Boolean ) ( source ) ) . METHOD_2 ( ) : false ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Boolean ) ( source ) ) . METHOD_2 ( ) : false ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Boolean ) ( source ) ) . METHOD_2 ( ) : false ; } } (  TYPE_1 . METHOD_3 ( new TYPE_2 ( VAR_1 , TYPE_1 . METHOD_4 ( ) ) , aQuery ) )  TYPE_1 . METHOD_3 ( new TYPE_2 ( VAR_1 , TYPE_1 . METHOD_4 ( ) ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  return ( ( ( ( METHOD_2 ( ) ) || ( METHOD_3 ( ) ) ) || ( getVm ( ) . METHOD_4 ( ) ) ) || ( ! ( METHOD_5 ( ) . METHOD_6 ( ) ) ) ) && ( METHOD_7 ( ) ) ; )  return ( ( ( ( METHOD_2 ( ) ) || ( METHOD_3 ( ) ) ) || ( getVm ( ) . METHOD_4 ( ) ) ) || ( ! ( METHOD_5 ( ) . METHOD_6 ( ) ) ) ) && ( METHOD_7 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( VAR_1 , true ) )  METHOD_2 ( VAR_1 , true ) (  TYPE_2 . METHOD_3 ( VAR_1 . METHOD_4 ( ) , VAR_1 . METHOD_5 ( ) ) )  TYPE_2 . METHOD_3 ( VAR_1 . METHOD_4 ( ) , VAR_1 . METHOD_5 ( ) ) (  TYPE_2 . METHOD_6 ( ( ( VAR_1 . METHOD_5 ( ) . METHOD_7 ( ) . getStatus ( ) ) == ( VAR_2 ) ) ) )  TYPE_2 . METHOD_6 ( ( ( VAR_1 . METHOD_5 ( ) . METHOD_7 ( ) . getStatus ( ) ) == ( VAR_2 ) ) ) (  TYPE_3 . METHOD_8 ( VAR_3 . METHOD_9 ( ) ) )  TYPE_3 . METHOD_8 ( VAR_3 . METHOD_9 ( ) ) (  org.mockito.Mockito . METHOD_10 ( VAR_4 , org.mockito.Mockito . METHOD_11 ( ) ) . METHOD_12 ( VAR_1 . METHOD_4 ( ) , VAR_5 ) )  org.mockito.Mockito . METHOD_10 ( VAR_4 , org.mockito.Mockito . METHOD_11 ( ) ) . METHOD_12 ( VAR_1 . METHOD_4 ( ) , VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.List<org.ovirt.engine.core.common.businessentities.VDS> ) RETURN java.util.List<org.ovirt.engine.core.common.businessentities.VDS> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS> ( NAME hosts ) NAME hosts ( INIT = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( VAR_1 . size ( ) ) ) INIT = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( VAR_1 . size ( ) ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME host ) NAME host ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME vds ) NAME vds ( INIT = new org.ovirt.engine.core.common.businessentities.VDS ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.VDS ( ) ) VAR VAR (  vds . METHOD_2 ( host . getName ( ) ) )  vds . METHOD_2 ( host . getName ( ) ) (  vds . METHOD_3 ( host . METHOD_4 ( ) ) )  vds . METHOD_3 ( host . METHOD_4 ( ) ) (  hosts . add ( vds ) )  hosts . add ( vds ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return hosts ; )  return hosts ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME disk ) NAME disk ( INIT = VAR_1 . get ( VAR_2 ) ) INIT = VAR_1 . get ( VAR_2 ) ) VAR VAR (  TYPE_2 . METHOD_2 ( disk ) )  TYPE_2 . METHOD_2 ( disk ) ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ( INIT = disk . METHOD_3 ( ) ) INIT = disk . METHOD_3 ( ) ) VAR VAR (  TYPE_2 . METHOD_4 ( name . equals ( VAR_3 . METHOD_5 ( VAR_2 , VAR_4 . Disk ) ) ) )  TYPE_2 . METHOD_4 ( name . equals ( VAR_3 . METHOD_5 ( VAR_2 , VAR_4 . Disk ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = new java.lang.Integer ( VAR_1 . METHOD_2 ( ) ) . toString ( ) ) INIT = new java.lang.Integer ( VAR_1 . METHOD_2 ( ) ) . toString ( ) ) VAR VAR ( IF IF ( COND ( ! ( TYPE_3 . isEmpty ( VAR_3 ) ) ) && ( ! ( VAR_3 . equals ( STRING_1 ) ) ) ) COND ( ! ( TYPE_3 . isEmpty ( VAR_3 ) ) ) && ( ! ( VAR_3 . equals ( STRING_1 ) ) ) ( THEN THEN (  VAR_2 . add ( VAR_4 , VAR_3 ) )  VAR_2 . add ( VAR_4 , VAR_3 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME vmId ) NAME vmId ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! VAR_1 ) COND ! VAR_1 ( THEN THEN ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_2 ) NAME VAR_2 ( INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( vmId , VAR_3 , TYPE_2 . getName ( ) ) ) INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( vmId , VAR_3 , TYPE_2 . getName ( ) ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK (  VAR_5 . METHOD_4 ( VAR_4 . getId ( ) ) )  VAR_5 . METHOD_4 ( VAR_4 . getId ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ( ELSE ELSE (  TYPE_3 . METHOD_5 ( vmId ) )  TYPE_3 . METHOD_5 ( vmId ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( VAR_2 , VAR_3 ) )  VAR_1 . METHOD_2 ( VAR_2 , VAR_3 ) (  org.mockito.Mockito.when ( host . getName ( ) ) . thenReturn ( TYPE_1 . instance ( ) . METHOD_3 ( ( ( VAR_3 ) * 2 ) ) ) )  org.mockito.Mockito.when ( host . getName ( ) ) . thenReturn ( TYPE_1 . instance ( ) . METHOD_3 ( ( ( VAR_3 ) * 2 ) ) ) (  TYPE_2 . METHOD_4 ( validator . METHOD_5 ( ) , TYPE_3 . METHOD_6 ( VAR_4 ) ) )  TYPE_2 . METHOD_4 ( validator . METHOD_5 ( ) , TYPE_3 . METHOD_6 ( VAR_4 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( getWindow ( ) ) != null ) COND ( getWindow ( ) ) != null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ( INIT = TYPE_2 . METHOD_2 ( getEntity ( ) . METHOD_3 ( ) , getEntity ( ) , getEntity ( ) . METHOD_4 ( ) , ( ( java.util.ArrayList < TYPE_3 > ) ( METHOD_5 ( ) ) ) , ( ( TYPE_3 ) ( getSelectedItem ( ) ) ) , this ) ) INIT = TYPE_2 . METHOD_2 ( getEntity ( ) . METHOD_3 ( ) , getEntity ( ) , getEntity ( ) . METHOD_4 ( ) , ( ( java.util.ArrayList < TYPE_3 > ) ( METHOD_5 ( ) ) ) , ( ( TYPE_3 ) ( getSelectedItem ( ) ) ) , this ) ) VAR VAR (  METHOD_6 ( model ) )  METHOD_6 ( model ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME equals ) NAME equals ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME obj ) NAME obj ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( this ) == obj ) COND ( this ) == obj ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ( IF IF ( COND obj == null ) COND obj == null ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( IF IF ( COND ( METHOD_1 ( ) ) != ( obj . METHOD_1 ( ) ) ) COND ( METHOD_1 ( ) ) != ( obj . METHOD_1 ( ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME other ) NAME other ( INIT = ( ( TYPE_1 ) ( obj ) ) ) INIT = ( ( TYPE_1 ) ( obj ) ) ) VAR VAR (  return ( TYPE_2 . equals ( VAR_1 , VAR_2 ) ) && ( TYPE_2 . equals ( VAR_3 , VAR_4 ) ) ; )  return ( TYPE_2 . equals ( VAR_1 , VAR_2 ) ) && ( TYPE_2 . equals ( VAR_3 , VAR_4 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND org.ovirt.engine.core.compat.Guid . METHOD_2 ( object . getId ( ) ) ) COND org.ovirt.engine.core.compat.Guid . METHOD_2 ( object . getId ( ) ) ( THEN THEN (  object . setId ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) )  object . setId ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ) THEN THEN ) IF IF ( IF IF ( COND TYPE_1 . isEmpty ( object . METHOD_4 ( ) ) ) COND TYPE_1 . isEmpty ( object . METHOD_4 ( ) ) ( THEN THEN (  object . METHOD_5 ( TYPE_2 . instance ( ) . METHOD_6 ( INT_1 ) ) )  object . METHOD_5 ( TYPE_2 . instance ( ) . METHOD_6 ( INT_1 ) ) ) THEN THEN ) IF IF ( IF IF ( COND ( object . METHOD_7 ( ) ) == null ) COND ( object . METHOD_7 ( ) ) == null ( THEN THEN (  object . METHOD_8 ( VAR_1 ) )  object . METHOD_8 ( VAR_1 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<java.lang.String,TYPE_1> ) TYPE java.util.Map<java.lang.String,TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.HashMap < java.lang.String , TYPE_1 > ( ) ) INIT = new java.util.HashMap < java.lang.String , TYPE_1 > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.network.Network ) TYPE org.ovirt.engine.core.common.businessentities.network.Network ( NAME network ) NAME network ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK (  VAR_1 . put ( network . METHOD_2 ( ) , new TYPE_1 ( network , this ) ) )  VAR_1 . put ( network . METHOD_2 ( ) , new TYPE_1 ( network , this ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  METHOD_3 ( VAR_1 ) )  METHOD_3 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME context ) NAME context ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME value ) NAME value ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . append ( METHOD_2 ( ) . id ( TYPE_4 . METHOD_3 ( TYPE_5 . METHOD_4 ( ) , TYPE_5 . METHOD_5 ( ) , context ) ) ) )  VAR_1 . append ( METHOD_2 ( ) . id ( TYPE_4 . METHOD_3 ( TYPE_5 . METHOD_4 ( ) , TYPE_5 . METHOD_5 ( ) , context ) ) ) ( FOR-EACH FOR-EACH ( TYPE TYPE_6<TYPE_2,?> ) TYPE TYPE_6<TYPE_2,?> ( NAME VAR_2 ) NAME VAR_2 ( IN VAR_3 ) IN VAR_3 ( BLOCK BLOCK (  METHOD_1 ( context , value , VAR_1 , VAR_2 ) )  METHOD_1 ( context , value , VAR_1 , VAR_2 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  VAR_1 . METHOD_6 ( STRING_1 ) )  VAR_1 . METHOD_6 ( STRING_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.Disk ) TYPE org.ovirt.engine.core.common.businessentities.Disk ( NAME disk ) NAME disk ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) , TYPE_3 . getId ( ) , disk . getId ( ) , VAR_2 . Disk ) ) INIT = new TYPE_1 ( TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) , TYPE_3 . getId ( ) , disk . getId ( ) , VAR_2 . Disk ) ) VAR VAR (  TYPE_4 . METHOD_4 ( VAR_1 ) )  TYPE_4 . METHOD_4 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN java.lang.Object[] ) RETURN java.lang.Object[] ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( METHOD_2 ( ) ) == null ) COND ( METHOD_2 ( ) ) == null ( THEN THEN (  return new java.lang.Object [ 0 ] ; )  return new java.lang.Object [ 0 ] ; ) THEN THEN ( ELSE ELSE ( VAR VAR ( TYPE java.util.ArrayList<java.lang.Object> ) TYPE java.util.ArrayList<java.lang.Object> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < java.lang.Object > ( ) ) INIT = new java.util.ArrayList < java.lang.Object > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME a ) NAME a ( IN VAR_2 . Linq < TYPE_1 > METHOD_3 ( METHOD_2 ( ) ) ) IN VAR_2 . Linq < TYPE_1 > METHOD_3 ( METHOD_2 ( ) ) ( BLOCK BLOCK (  VAR_1 . add ( a . getId ( ) ) )  VAR_1 . add ( a . getId ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_1 . METHOD_4 ( new java.lang.Object [ ] { } ) ; )  return VAR_1 . METHOD_4 ( new java.lang.Object [ ] { } ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( STRING_1 ) ) INIT = TYPE_1 . METHOD_2 ( STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_1 . METHOD_2 ( STRING_2 ) ) INIT = TYPE_1 . METHOD_2 ( STRING_2 ) ) VAR VAR (  TYPE_2 . METHOD_3 ( ( ( VAR_1 . METHOD_4 ( VAR_2 ) ) < 0 ) ) )  TYPE_2 . METHOD_3 ( ( ( VAR_1 . METHOD_4 ( VAR_2 ) ) < 0 ) ) (  TYPE_2 . METHOD_3 ( ( ( VAR_1 . METHOD_4 ( VAR_1 ) ) == 0 ) ) )  TYPE_2 . METHOD_3 ( ( ( VAR_1 . METHOD_4 ( VAR_1 ) ) == 0 ) ) (  TYPE_2 . METHOD_3 ( ( ( VAR_2 . METHOD_4 ( VAR_1 ) ) > 0 ) ) )  TYPE_2 . METHOD_3 ( ( ( VAR_2 . METHOD_4 ( VAR_1 ) ) > 0 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME TYPE_2 ) NAME TYPE_2 ( IN VAR_3 ) IN VAR_3 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_4 . METHOD_2 ( TYPE_2 . toString ( ) ) )  VAR_4 . METHOD_2 ( TYPE_2 . toString ( ) ) (  VAR_2 . add ( VAR_4 ) )  VAR_2 . add ( VAR_4 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_5 ) NAME VAR_5 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_5 . METHOD_2 ( VAR_6 ) )  VAR_5 . METHOD_2 ( VAR_6 ) (  VAR_2 . add ( VAR_5 ) )  VAR_2 . add ( VAR_5 ) ) THEN THEN ) IF IF (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = dao . METHOD_2 ( STRING_1 , VAR_2 ) ) INIT = dao . METHOD_2 ( STRING_1 , VAR_2 ) ) VAR VAR (  TYPE_2 . assertEquals ( dao . METHOD_3 ( VAR_3 ) . METHOD_4 ( ) . equals ( VAR_1 . METHOD_4 ( ) ) , true ) )  TYPE_2 . assertEquals ( dao . METHOD_3 ( VAR_3 ) . METHOD_4 ( ) . equals ( VAR_1 . METHOD_4 ( ) ) , true ) (  TYPE_2 . assertEquals ( dao . METHOD_3 ( VAR_3 ) . getId ( ) . equals ( VAR_1 . getId ( ) ) , true ) )  TYPE_2 . assertEquals ( dao . METHOD_3 ( VAR_3 ) . getId ( ) . equals ( VAR_1 . getId ( ) ) , true ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<TYPE_1> ) TYPE java.util.ArrayList<TYPE_1> ( NAME list ) NAME list ( INIT = ( ( TYPE_2 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) INIT = ( ( TYPE_2 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) VAR VAR ( VAR VAR ( TYPE java.util.ArrayList<TYPE_1> ) TYPE java.util.ArrayList<TYPE_1> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( IN list ) IN list ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_3 . METHOD_1 ( ) . equals ( VAR_4 . METHOD_2 ( ) ) ) ) COND ! ( VAR_3 . METHOD_1 ( ) . equals ( VAR_4 . METHOD_2 ( ) ) ) ( THEN THEN (  VAR_2 . add ( VAR_3 ) )  VAR_2 . add ( VAR_3 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  setItems ( VAR_2 ) )  setItems ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.Disk ) TYPE TYPE_1.Disk ( NAME model ) NAME model ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  model . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_4 ( ) . get ( 0 ) . METHOD_5 ( null ) )  model . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_4 ( ) . get ( 0 ) . METHOD_5 ( null ) (  METHOD_6 ( METHOD_7 ( ) ) )  METHOD_6 ( METHOD_7 ( ) ) (  VAR_1 . METHOD_8 ( ) )  VAR_1 . METHOD_8 ( ) ( TRY TRY ( BLOCK BLOCK (  VAR_2 . add ( model ) )  VAR_2 . add ( model ) (  METHOD_9 ( STRING_1 ) )  METHOD_9 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( BLOCK BLOCK (  METHOD_10 ( VAR_3 , STRING_2 , STRING_3 , STRING_4 ) )  METHOD_10 ( VAR_3 , STRING_2 , STRING_3 , STRING_4 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_1 ) ( model ) ) ) INIT = ( ( TYPE_1 ) ( model ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.String> ) TYPE java.util.Map<java.lang.String,java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( java.util.Map < java.lang.String , java.lang.String > ) ( result ) ) ) INIT = ( ( java.util.Map < java.lang.String , java.lang.String > ) ( result ) ) ) VAR VAR ( IF IF ( COND ! ( VAR_2 . isEmpty ( ) ) ) COND ! ( VAR_2 . isEmpty ( ) ) ( THEN THEN (  VAR_1 . METHOD_1 ( true ) )  VAR_1 . METHOD_1 ( true ) (  VAR_1 . METHOD_2 ( true ) )  VAR_1 . METHOD_2 ( true ) ) THEN THEN ( ELSE ELSE (  METHOD_1 ( false ) )  METHOD_1 ( false ) (  METHOD_2 ( false ) )  METHOD_2 ( false ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR (  VAR_1 . add ( STRING_1 ) )  VAR_1 . add ( STRING_1 ) (  TYPE_1 . METHOD_2 ( VAR_2 ) )  TYPE_1 . METHOD_2 ( VAR_2 ) (  TYPE_1 . METHOD_3 ( VAR_2 . METHOD_4 ( VAR_3 ) ) . METHOD_5 ( VAR_1 ) )  TYPE_1 . METHOD_3 ( VAR_2 . METHOD_4 ( VAR_3 ) ) . METHOD_5 ( VAR_1 ) (  METHOD_6 ( 1 ) )  METHOD_6 ( 1 ) (  METHOD_7 ( METHOD_8 ( ) ) )  METHOD_7 ( METHOD_8 ( ) ) (  VAR_4 . METHOD_9 ( ) )  VAR_4 . METHOD_9 ( ) ( VAR VAR ( TYPE java.util.List<TYPE_2.Network> ) TYPE java.util.List<TYPE_2.Network> ( NAME VAR_5 ) NAME VAR_5 ( INIT = METHOD_10 ( ) ) INIT = METHOD_10 ( ) ) VAR VAR (  TYPE_3 . METHOD_11 ( VAR_5 , new TYPE_4 ( ) ) )  TYPE_3 . METHOD_11 ( VAR_5 , new TYPE_4 ( ) ) (  METHOD_12 ( VAR_5 ) )  METHOD_12 ( VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME entity ) NAME entity ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3<java.lang.String> ) TYPE TYPE_3<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_4 . METHOD_2 ( VAR_2 , VAR_3 ) ) INIT = TYPE_4 . METHOD_2 ( VAR_2 , VAR_3 ) ) VAR VAR (  TYPE_5 . METHOD_3 ( this , model , entity ) )  TYPE_5 . METHOD_3 ( this , model , entity ) ( IF IF ( COND VAR_1 . METHOD_4 ( STRING_1 ) ) COND VAR_1 . METHOD_4 ( STRING_1 ) ( THEN THEN (  TYPE_5 . METHOD_5 ( this , model , entity ) )  TYPE_5 . METHOD_5 ( this , model , entity ) ) THEN THEN ) IF IF (  return model ; )  return model ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ( INIT = false ) INIT = false ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) INIT = ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) VAR VAR ( IF IF ( COND ( ( VAR_2 . size ( ) ) == 1 ) && ( ( VAR_2 . get ( 0 ) . METHOD_1 ( ) ) == ( VAR_3 ) ) ) COND ( ( VAR_2 . size ( ) ) == 1 ) && ( ( VAR_2 . get ( 0 ) . METHOD_1 ( ) ) == ( VAR_3 ) ) ( THEN THEN (  VAR_1 = true )  VAR_1 = true ) THEN THEN ) IF IF (  METHOD_2 ( ) . setEntity ( VAR_1 ) )  METHOD_2 ( ) . setEntity ( VAR_1 ) (  METHOD_3 ( ) . setEntity ( ( ! VAR_1 ) ) )  METHOD_3 ( ) . setEntity ( ( ! VAR_1 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  org.mockito.Mockito.when ( VAR_2 . METHOD_2 ( vm . getId ( ) , VAR_1 . METHOD_3 ( ) ) ) . thenReturn ( TYPE_2 . METHOD_4 ( VAR_1 ) ) )  org.mockito.Mockito.when ( VAR_2 . METHOD_2 ( vm . getId ( ) , VAR_1 . METHOD_3 ( ) ) ) . thenReturn ( TYPE_2 . METHOD_4 ( VAR_1 ) ) (  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( VAR_3 ) . METHOD_5 ( ) )  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( VAR_3 ) . METHOD_5 ( ) (  TYPE_3 . METHOD_6 ( ) )  TYPE_3 . METHOD_6 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.Map<java.lang.String,java.lang.String> ) RETURN java.util.Map<java.lang.String,java.lang.String> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Version ) TYPE org.ovirt.engine.core.compat.Version ( NAME version ) NAME version ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME type ) NAME type ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( TYPE_2 . METHOD_2 ( version ) ) ) COND ! ( TYPE_2 . METHOD_2 ( version ) ) ( THEN THEN (  return new java.util.HashMap < > ( ) ; )  return new java.util.HashMap < > ( ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.String> ) TYPE java.util.Map<java.lang.String,java.lang.String> ( NAME map ) NAME map ( INIT = VAR_1 . get ( version ) . get ( type ) ) INIT = VAR_1 . get ( version ) . get ( type ) ) VAR VAR ( IF IF ( COND map == null ) COND map == null ( THEN THEN (  map = new java.util.HashMap < > ( ) )  map = new java.util.HashMap < > ( ) ) THEN THEN ( ELSE ELSE (  map = new java.util.HashMap < > ( map ) )  map = new java.util.HashMap < > ( map ) ) ELSE ELSE ) IF IF (  return map ; )  return map ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_1 . METHOD_2 ( null ) )  VAR_1 . METHOD_2 ( null ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  VAR_2 . setId ( VAR_3 ) )  VAR_2 . setId ( VAR_3 ) (  VAR_1 . METHOD_3 ( VAR_2 ) )  VAR_1 . METHOD_3 ( VAR_2 ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_1 . getStoragePoolId ( ) ) INIT = VAR_1 . getStoragePoolId ( ) ) VAR VAR (  TYPE_4 . assertEquals ( VAR_3 , VAR_4 ) )  TYPE_4 . assertEquals ( VAR_3 , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME type ) NAME type ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR ( IF IF ( COND id != null ) COND id != null ( THEN THEN (  VAR_2 . METHOD_2 ( id . toString ( ) ) )  VAR_2 . METHOD_2 ( id . toString ( ) ) ) THEN THEN ) IF IF (  VAR_2 . METHOD_3 ( VAR_1 ) )  VAR_2 . METHOD_3 ( VAR_1 ) (  VAR_2 . METHOD_4 ( type ) )  VAR_2 . METHOD_4 ( type ) (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.Object[] ) TYPE java.lang.Object[] ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( ) ) INIT = TYPE_1 . METHOD_2 ( ) ) VAR VAR (  VAR_1 [ 1 ] = null )  VAR_1 [ 1 ] = null ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.Object> ) TYPE java.util.Map<java.lang.String,java.lang.Object> ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_1 . METHOD_3 ( VAR_1 ) ) INIT = TYPE_1 . METHOD_3 ( VAR_1 ) ) VAR VAR (  TYPE_1 . METHOD_4 ( METHOD_5 ( ) , VAR_1 , VAR_2 ) )  TYPE_1 . METHOD_4 ( METHOD_5 ( ) , VAR_1 , VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME nic ) NAME nic ) VAR VAR ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME VAR_2 ) NAME VAR_2 ( INIT = nic . METHOD_2 ( ) ) INIT = nic . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND ( VAR_2 . size ( ) ) > 0 ) COND ( VAR_2 . size ( ) ) > 0 ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( IN new java.util.ArrayList < TYPE_2 > ( VAR_2 ) ) IN new java.util.ArrayList < TYPE_2 > ( VAR_2 ) ( BLOCK BLOCK (  TYPE_3 . METHOD_3 ( VAR_3 , null , VAR_1 ) . METHOD_4 ( ) )  TYPE_3 . METHOD_3 ( VAR_3 , null , VAR_1 ) . METHOD_4 ( ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( VAR_2 ) )  VAR_1 . METHOD_2 ( VAR_2 ) (  VAR_1 . METHOD_3 ( VAR_3 ) )  VAR_1 . METHOD_3 ( VAR_3 ) ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StoragePool ) TYPE org.ovirt.engine.core.common.businessentities.StoragePool ( NAME VAR_4 ) NAME VAR_4 ( INIT = new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ) VAR VAR (  VAR_4 . METHOD_4 ( VAR_5 ) )  VAR_4 . METHOD_4 ( VAR_5 ) (  org.mockito.Mockito.when ( VAR_6 . get ( TYPE_1 . any ( VAR_7 . Guid class ) ) ) . thenReturn ( VAR_4 ) )  org.mockito.Mockito.when ( VAR_6 . get ( TYPE_1 . any ( VAR_7 . Guid class ) ) ) . thenReturn ( VAR_4 ) (  TYPE_2 . METHOD_5 ( validator . METHOD_6 ( ) , TYPE_3 . METHOD_7 ( VAR_8 ) ) )  TYPE_2 . METHOD_5 ( validator . METHOD_6 ( ) , TYPE_3 . METHOD_7 ( VAR_8 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  VAR_3 . METHOD_2 ( VAR_1 ) )  VAR_3 . METHOD_2 ( VAR_1 ) (  VAR_3 . METHOD_3 ( VAR_4 . Network ) )  VAR_3 . METHOD_3 ( VAR_4 . Network ) (  VAR_3 . METHOD_4 ( TYPE_3 . getParameters ( ) . METHOD_5 ( ) . getId ( ) ) )  VAR_3 . METHOD_4 ( TYPE_3 . getParameters ( ) . METHOD_5 ( ) . getId ( ) ) (  VAR_3 . METHOD_6 ( VAR_2 . getId ( ) ) )  VAR_3 . METHOD_6 ( VAR_2 . getId ( ) ) (  TYPE_4 . METHOD_7 ( VAR_3 ) )  TYPE_4 . METHOD_7 ( VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME validation ) NAME validation ( INIT = new TYPE_1 ( METHOD_2 ( VAR_1 ) , VAR_2 , VAR_4 ) ) INIT = new TYPE_1 ( METHOD_2 ( VAR_1 ) , VAR_2 , VAR_4 ) ) VAR VAR (  TYPE_2 . METHOD_3 ( validation . METHOD_4 ( null ) . METHOD_5 ( ) , TYPE_3 . METHOD_6 ( TYPE_4 . METHOD_7 ( VAR_3 ) ) ) )  TYPE_2 . METHOD_3 ( validation . METHOD_4 ( null ) . METHOD_5 ( ) , TYPE_3 . METHOD_6 ( TYPE_4 . METHOD_7 ( VAR_3 ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_3 ( STRING_1 ) . METHOD_2 ( STRING_2 , new java.util.ArrayList < > ( TYPE_4 . METHOD_3 ( VAR_1 ) ) ) . METHOD_4 ( ) ) INIT = new TYPE_3 ( STRING_1 ) . METHOD_2 ( STRING_2 , new java.util.ArrayList < > ( TYPE_4 . METHOD_3 ( VAR_1 ) ) ) . METHOD_4 ( ) ) VAR VAR ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.Object> ) TYPE java.util.Map<java.lang.String,java.lang.Object> ( NAME response ) NAME response ( INIT = new TYPE_5 ( this . client , VAR_2 ) . METHOD_5 ( STRING_2 ) . METHOD_6 ( java.lang.Object [ ] . class ) ) INIT = new TYPE_5 ( this . client , VAR_2 ) . METHOD_5 ( STRING_2 ) . METHOD_6 ( java.lang.Object [ ] . class ) ) VAR VAR (  return new TYPE_1 ( response ) ; )  return new TYPE_1 ( response ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( METHOD_3 ( ) , new java.lang.String [ 0 ] ) )  TYPE_1 . METHOD_2 ( METHOD_3 ( ) , new java.lang.String [ 0 ] ) (  TYPE_1 . assertEquals ( VAR_1 . METHOD_4 ( ) , 0 ) )  TYPE_1 . assertEquals ( VAR_1 . METHOD_4 ( ) , 0 ) (  TYPE_1 . assertEquals ( VAR_1 . size ( ) , 0 ) )  TYPE_1 . assertEquals ( VAR_1 . size ( ) , 0 ) (  TYPE_1 . METHOD_5 ( VAR_1 . isEmpty ( ) ) )  TYPE_1 . METHOD_5 ( VAR_1 . isEmpty ( ) ) (  TYPE_1 . METHOD_6 ( VAR_1 . METHOD_7 ( ) ) )  TYPE_1 . METHOD_6 ( VAR_1 . METHOD_7 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ( INIT = ( ( TYPE_1 ) ( target ) ) ) INIT = ( ( TYPE_1 ) ( target ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME cluster ) NAME cluster ( INIT = ( ( TYPE_2 ) ( returnValue ) ) ) INIT = ( ( TYPE_2 ) ( returnValue ) ) ) VAR VAR ( IF IF ( COND cluster != null ) COND cluster != null ( THEN THEN (  VAR_1 . add ( cluster ) )  VAR_1 . add ( cluster ) ) THEN THEN ) IF IF (  TYPE_3 . METHOD_1 ( VAR_1 , new TYPE_4 ( ) ) )  TYPE_3 . METHOD_1 ( VAR_1 , new TYPE_4 ( ) ) (  model . METHOD_2 ( model , VAR_2 , VAR_1 , vm . METHOD_3 ( ) ) )  model . METHOD_2 ( model , VAR_2 , VAR_1 , vm . METHOD_3 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( VAR_1 , new TYPE_1 ( TYPE_2 . getVm ( ) . getId ( ) ) , TYPE_3 . METHOD_3 ( TYPE_2 . METHOD_4 ( ) , TYPE_2 . METHOD_5 ( ) ) ) )  METHOD_2 ( VAR_1 , new TYPE_1 ( TYPE_2 . getVm ( ) . getId ( ) ) , TYPE_3 . METHOD_3 ( TYPE_2 . METHOD_4 ( ) , TYPE_2 . METHOD_5 ( ) ) ) (  TYPE_2 . METHOD_6 ( null ) )  TYPE_2 . METHOD_6 ( null ) (  TYPE_2 . METHOD_7 ( true ) )  TYPE_2 . METHOD_7 ( true ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.String> ) TYPE java.util.Map<java.lang.String,java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) . METHOD_3 ( METHOD_4 ( ) , VAR_2 , TYPE_1 . getParameters ( ) . METHOD_5 ( ) ) ) INIT = METHOD_2 ( ) . METHOD_3 ( METHOD_4 ( ) , VAR_2 , TYPE_1 . getParameters ( ) . METHOD_5 ( ) ) ) VAR VAR ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN (  TYPE_1 . getVm ( ) . METHOD_6 ( ) . put ( VAR_3 , VAR_1 ) )  TYPE_1 . getVm ( ) . METHOD_6 ( ) . put ( VAR_3 , VAR_1 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<TYPE_1> ) TYPE java.util.ArrayList<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( java.util.ArrayList < TYPE_1 > ) ( returnValue ) ) ) INIT = ( ( java.util.ArrayList < TYPE_1 > ) ( returnValue ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME pool ) NAME pool ( INIT = VAR_1 . get ( 0 ) ) INIT = VAR_1 . get ( 0 ) ) VAR VAR ( IF IF ( COND pool != null ) COND pool != null ( THEN THEN (  TYPE_2 . METHOD_1 ( ( ( org.ovirt.engine.ui.frontend.AsyncQuery ) ( model ) ) , pool . getId ( ) ) )  TYPE_2 . METHOD_1 ( ( ( org.ovirt.engine.ui.frontend.AsyncQuery ) ( model ) ) , pool . getId ( ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME getValue ) NAME getValue ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.network ) TYPE org.ovirt.engine.core.common.businessentities.network ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SWITCH SWITCH ( NAME VAR_1 . getStatus ( ) ) NAME VAR_1 . getStatus ( ) ( CASE VAR_2 ( BLOCK BLOCK (  return METHOD_1 ( ) . METHOD_2 ( ) ; )  return METHOD_1 ( ) . METHOD_2 ( ) ; ) BLOCK BLOCK ) CASE VAR_2 ( CASE VAR_3 ( BLOCK BLOCK (  return METHOD_1 ( ) . METHOD_3 ( ) ; )  return METHOD_1 ( ) . METHOD_3 ( ) ; ) BLOCK BLOCK ) CASE VAR_3 ( DEFAULT DEFAULT ( BLOCK BLOCK (  return METHOD_1 ( ) . METHOD_3 ( ) ; )  return METHOD_1 ( ) . METHOD_3 ( ) ; ) BLOCK BLOCK ) DEFAULT DEFAULT ) SWITCH SWITCH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( METHOD_2 ( ) ) == ( VAR_1 ) ) COND ( METHOD_2 ( ) ) == ( VAR_1 ) ( THEN THEN (  TYPE_1 . METHOD_3 ( ) )  TYPE_1 . METHOD_3 ( ) ( IF IF ( COND TYPE_1 . getParameters ( ) . METHOD_4 ( ) ) COND TYPE_1 . getParameters ( ) . METHOD_4 ( ) ( THEN THEN (  TYPE_1 . METHOD_5 ( ) . METHOD_6 ( new TYPE_2 ( TYPE_1 . getParameters ( ) . METHOD_7 ( ) , TYPE_1 . getParameters ( ) . METHOD_8 ( ) ) ) )  TYPE_1 . METHOD_5 ( ) . METHOD_6 ( new TYPE_2 ( TYPE_1 . getParameters ( ) . METHOD_7 ( ) , TYPE_1 . getParameters ( ) . METHOD_8 ( ) ) ) ) THEN THEN ) IF IF (  METHOD_9 ( ) )  METHOD_9 ( ) ) THEN THEN ( ELSE ELSE (  TYPE_1 . METHOD_10 ( ) )  TYPE_1 . METHOD_10 ( ) ) ELSE ELSE ) IF IF (  TYPE_1 . METHOD_11 ( true ) )  TYPE_1 . METHOD_11 ( true ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ( INIT = new org.ovirt.engine.core.common.businessentities.VM ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.VM ( ) ) VAR VAR (  vm . METHOD_2 ( VAR_1 ) )  vm . METHOD_2 ( VAR_1 ) (  org.mockito.Mockito.doReturn ( false ) . when ( VAR_2 ) . METHOD_3 ( TYPE_1 . any ( VAR_3 . VM class ) ) )  org.mockito.Mockito.doReturn ( false ) . when ( VAR_2 ) . METHOD_3 ( TYPE_1 . any ( VAR_3 . VM class ) ) (  TYPE_2 . METHOD_4 ( VAR_2 . METHOD_5 ( vm ) , true , null ) )  TYPE_2 . METHOD_4 ( VAR_2 . METHOD_5 ( vm ) , true , null ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.StoragePool > ) ( returnValue ) ) ) INIT = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.StoragePool > ) ( returnValue ) ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StoragePool ) TYPE org.ovirt.engine.core.common.businessentities.StoragePool ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_1 ( VAR_1 ) ) INIT = METHOD_1 ( VAR_1 ) ) VAR VAR (  TYPE_1 . METHOD_2 ( VAR_1 , new TYPE_2 ( ) ) )  TYPE_1 . METHOD_2 ( VAR_1 , new TYPE_2 ( ) ) (  VAR_1 . add ( 0 , null ) )  VAR_1 . add ( 0 , null ) (  METHOD_3 ( ) . setItems ( VAR_1 ) )  METHOD_3 ( ) . setItems ( VAR_1 ) (  METHOD_3 ( ) . setSelectedItem ( VAR_2 ) )  METHOD_3 ( ) . setSelectedItem ( VAR_2 ) ( IF IF ( COND ( METHOD_3 ( ) . getSelectedItem ( ) ) == null ) COND ( METHOD_3 ( ) . getSelectedItem ( ) ) == null ( THEN THEN (  METHOD_4 ( ) . METHOD_5 ( ) )  METHOD_4 ( ) . METHOD_5 ( ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  parameters . METHOD_2 ( TYPE_1 ) )  parameters . METHOD_2 ( TYPE_1 ) (  parameters . METHOD_3 ( null ) )  parameters . METHOD_3 ( null ) (  org.mockito.Mockito . METHOD_4 ( ) . when ( VAR_1 ) . METHOD_5 ( TYPE_1 . METHOD_6 ( ) ) )  org.mockito.Mockito . METHOD_4 ( ) . when ( VAR_1 ) . METHOD_5 ( TYPE_1 . METHOD_6 ( ) ) (  command . METHOD_7 ( ) )  command . METHOD_7 ( ) (  org.mockito.Mockito . METHOD_8 ( command , org.mockito.Mockito . METHOD_9 ( ) ) . METHOD_10 ( ) )  org.mockito.Mockito . METHOD_8 ( command , org.mockito.Mockito . METHOD_9 ( ) ) . METHOD_10 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . getReturnValue ( ) . METHOD_2 ( ) ) INIT = TYPE_1 . getReturnValue ( ) . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( TYPE_1 . getParameters ( ) . METHOD_3 ( ) ) * ( TYPE_1 . METHOD_4 ( ) . METHOD_5 ( TYPE_1 . METHOD_6 ( ) ) . size ( ) ) ) INIT = ( TYPE_1 . getParameters ( ) . METHOD_3 ( ) ) * ( TYPE_1 . METHOD_4 ( ) . METHOD_5 ( TYPE_1 . METHOD_6 ( ) ) . size ( ) ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_1 . getParameters ( ) . METHOD_7 ( ) . METHOD_8 ( ) ) INIT = TYPE_1 . getParameters ( ) . METHOD_7 ( ) . METHOD_8 ( ) ) VAR VAR (  return TYPE_2 . METHOD_9 ( VAR_1 , VAR_2 , VAR_3 , TYPE_1 . METHOD_10 ( ) ) ; )  return TYPE_2 . METHOD_9 ( VAR_1 , VAR_2 , VAR_3 , TYPE_1 . METHOD_10 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ( INIT = ( ( TYPE_1 ) ( target ) ) ) INIT = ( ( TYPE_1 ) ( target ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.ArrayList<TYPE_2> ) TYPE java.util.ArrayList<TYPE_2> ( NAME list ) NAME list ( INIT = new java.util.ArrayList < TYPE_2 > ( ) ) INIT = new java.util.ArrayList < TYPE_2 > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME a ) NAME a ( IN ( ( java.util.ArrayList < TYPE_2 > ) ( returnValue ) ) ) IN ( ( java.util.ArrayList < TYPE_2 > ) ( returnValue ) ) ( BLOCK BLOCK ( IF IF ( COND ( a . METHOD_2 ( ) ) == ( VAR_1 ) ) COND ( a . METHOD_2 ( ) ) == ( VAR_1 ) ( THEN THEN (  list . add ( a ) )  list . add ( a ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  model . METHOD_3 ( model , list ) )  model . METHOD_3 ( model , list ) (  METHOD_4 ( ) . METHOD_5 ( this , VAR_2 ) )  METHOD_4 ( ) . METHOD_5 ( this , VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2.Network ) TYPE TYPE_2.Network ( NAME network ) NAME network ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.network ) TYPE org.ovirt.engine.core.common.businessentities.network ( NAME entity ) NAME entity ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND METHOD_2 ( network ) ) COND METHOD_2 ( network ) ( THEN THEN (  entity . METHOD_3 ( METHOD_4 ( network ) ) )  entity . METHOD_3 ( METHOD_4 ( network ) ) ) THEN THEN ) IF IF (  return new TYPE_1 ( entity . METHOD_5 ( ) . getValue ( ) , entity ) ; )  return new TYPE_1 ( entity . METHOD_5 ( ) . getValue ( ) , entity ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source != null ? ( ( java.lang.String ) ( source ) ) : STRING_1 ; )  return source != null ? ( ( java.lang.String ) ( source ) ) : STRING_1 ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.String ) ( source ) ) : STRING_1 ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.String ) ( source ) ) : STRING_1 ; } } (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new TYPE_1 ( VAR_1 ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new TYPE_1 ( VAR_1 ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_1 ) ( target ) ) ) INIT = ( ( TYPE_1 ) ( target ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.String> ) TYPE java.util.Map<java.lang.String,java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( java.util.Map < java.lang.String , java.lang.String > ) ( returnValue ) ) ) INIT = ( ( java.util.Map < java.lang.String , java.lang.String > ) ( returnValue ) ) ) VAR VAR (  VAR_2 . put ( null , STRING_1 ) )  VAR_2 . put ( null , STRING_1 ) (  VAR_3 . put ( VAR_4 , VAR_2 . METHOD_2 ( ) ) )  VAR_3 . put ( VAR_4 , VAR_2 . METHOD_2 ( ) ) (  VAR_1 . METHOD_3 ( VAR_5 ) )  VAR_1 . METHOD_3 ( VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME getValue ) NAME getValue ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StoragePool ) TYPE org.ovirt.engine.core.common.businessentities.StoragePool ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_1 ( VAR_1 . METHOD_2 ( ) ) )  METHOD_1 ( VAR_1 . METHOD_2 ( ) ) ( SWITCH SWITCH ( NAME VAR_1 . METHOD_2 ( ) ) NAME VAR_1 . METHOD_2 ( ) ( CASE VAR_2 ( BLOCK BLOCK (  return METHOD_3 ( ) . METHOD_4 ( ) ; )  return METHOD_3 ( ) . METHOD_4 ( ) ; ) BLOCK BLOCK ) CASE VAR_2 ( CASE VAR_3 ( BLOCK BLOCK (  return METHOD_3 ( ) . METHOD_5 ( ) ; )  return METHOD_3 ( ) . METHOD_5 ( ) ; ) BLOCK BLOCK ) CASE VAR_3 ( CASE VAR_4 ( BLOCK BLOCK (  return METHOD_3 ( ) . METHOD_6 ( ) ; )  return METHOD_3 ( ) . METHOD_6 ( ) ; ) BLOCK BLOCK ) CASE VAR_4 ( CASE VAR_5 ( BLOCK BLOCK (  return METHOD_3 ( ) . METHOD_6 ( ) ; )  return METHOD_3 ( ) . METHOD_6 ( ) ; ) BLOCK BLOCK ) CASE VAR_5 ( CASE VAR_6 ( BLOCK BLOCK (  return METHOD_3 ( ) . METHOD_6 ( ) ; )  return METHOD_3 ( ) . METHOD_6 ( ) ; ) BLOCK BLOCK ) CASE VAR_6 ( CASE VAR_7 ( BLOCK BLOCK (  return METHOD_3 ( ) . METHOD_7 ( ) ; )  return METHOD_3 ( ) . METHOD_7 ( ) ; ) BLOCK BLOCK ) CASE VAR_7 ( DEFAULT DEFAULT ( BLOCK BLOCK (  break ; )  break ; ) BLOCK BLOCK ) DEFAULT DEFAULT ) SWITCH SWITCH (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.uicommonweb.UICommand ) TYPE org.ovirt.engine.ui.uicommonweb.UICommand ( NAME command ) NAME command ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  super . METHOD_1 ( command ) )  super . METHOD_1 ( command ) ( IF IF ( COND command == ( METHOD_2 ( ) ) ) COND command == ( METHOD_2 ( ) ) ( THEN THEN (  METHOD_3 ( ) )  METHOD_3 ( ) (  METHOD_4 ( ) )  METHOD_4 ( ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND command == ( METHOD_5 ( ) ) ) COND command == ( METHOD_5 ( ) ) ( THEN THEN (  METHOD_6 ( ) )  METHOD_6 ( ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND TYPE_1 . METHOD_7 ( command . getName ( ) , STRING_1 ) ) COND TYPE_1 . METHOD_7 ( command . getName ( ) , STRING_1 ) ( THEN THEN (  METHOD_8 ( ) )  METHOD_8 ( ) ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME equals ) NAME equals ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME obj ) NAME obj ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME returnValue ) NAME returnValue ( INIT = super . equals ( obj ) ) INIT = super . equals ( obj ) ) VAR VAR ( IF IF ( COND ( ( ! returnValue ) && ( obj != null ) ) && ( obj instanceof TYPE_1 ) ) COND ( ( ! returnValue ) && ( obj != null ) ) && ( obj instanceof TYPE_1 ) ( THEN THEN (  returnValue = ( ! ( TYPE_2 . METHOD_1 ( METHOD_2 ( ) , STRING_1 ) ) ) && ( TYPE_2 . METHOD_1 ( METHOD_2 ( ) , ( ( TYPE_1 ) ( obj ) ) . METHOD_2 ( ) ) ) )  returnValue = ( ! ( TYPE_2 . METHOD_1 ( METHOD_2 ( ) , STRING_1 ) ) ) && ( TYPE_2 . METHOD_1 ( METHOD_2 ( ) , ( ( TYPE_1 ) ( obj ) ) . METHOD_2 ( ) ) ) ) THEN THEN ) IF IF (  return returnValue ; )  return returnValue ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS> ( NAME hosts ) NAME hosts ( INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ) ( result ) ) ) INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ) ( result ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1<org.ovirt.engine.core.common.businessentities.VDS> ) TYPE TYPE_1<org.ovirt.engine.core.common.businessentities.VDS> ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_1 ( ) ) INIT = METHOD_1 ( ) ) VAR VAR (  hosts . add ( 0 , null ) )  hosts . add ( 0 , null ) (  VAR_1 . setItems ( hosts ) )  VAR_1 . setItems ( hosts ) (  VAR_1 . setIsChangable ( true ) )  VAR_1 . setIsChangable ( true ) (  METHOD_2 ( true ) )  METHOD_2 ( true ) (  METHOD_3 ( ) . setIsChangable ( true ) )  METHOD_3 ( ) . setIsChangable ( true ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME getValue ) NAME getValue ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME item ) NAME item ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ( INIT = item . METHOD_1 ( ) ) INIT = item . METHOD_1 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ( INIT = null ) INIT = null ) VAR VAR ( IF IF ( COND ( vm != null ) && ( vm . METHOD_2 ( ) ) ) COND ( vm != null ) && ( vm . METHOD_2 ( ) ) ( THEN THEN (  VAR_1 = VAR_2 . METHOD_3 ( ) )  VAR_1 = VAR_2 . METHOD_3 ( ) ) THEN THEN ) IF IF (  return new TYPE_1 ( METHOD_4 ( item ) , VAR_1 , VAR_3 , VAR_4 ) ; )  return new TYPE_1 ( METHOD_4 ( item ) , VAR_1 , VAR_3 , VAR_4 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME sender ) NAME sender ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME args ) NAME args ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_3 ) ( args ) ) ) INIT = ( ( TYPE_3 ) ( args ) ) ) VAR VAR ( IF IF ( COND STRING_1 . equals ( VAR_3 ) ) COND STRING_1 . equals ( VAR_3 ) ( THEN THEN ( IF IF ( COND ( VAR_4 . getModel ( ) . METHOD_2 ( ) ) != null ) COND ( VAR_4 . getModel ( ) . METHOD_2 ( ) ) != null ( THEN THEN (  METHOD_3 ( ) . METHOD_4 ( VAR_5 ) )  METHOD_3 ( ) . METHOD_4 ( VAR_5 ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  return TYPE_1 . METHOD_2 ( TYPE_2 . getVm ( ) , TYPE_2 . getReturnValue ( ) . METHOD_3 ( ) , TYPE_2 . getVm ( ) . getStoragePoolId ( ) , VAR_1 , METHOD_4 ( ) , METHOD_4 ( ) , METHOD_4 ( ) , METHOD_4 ( ) , true , true , true , true , null ) ; )  return TYPE_1 . METHOD_2 ( TYPE_2 . getVm ( ) , TYPE_2 . getReturnValue ( ) . METHOD_3 ( ) , TYPE_2 . getVm ( ) . getStoragePoolId ( ) , VAR_1 , METHOD_4 ( ) , METHOD_4 ( ) , METHOD_4 ( ) , METHOD_4 ( ) , true , true , true , true , null ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  return TYPE_2 . METHOD_2 ( new TYPE_1 ( ( ( TYPE_3 . getVdsGroup ( ) . METHOD_3 ( ) ) == null ? null : TYPE_3 . getVdsGroup ( ) . METHOD_3 ( ) . getValue ( ) ) , VAR_1 . StoragePool , TYPE_3 . METHOD_4 ( ) . METHOD_5 ( ) ) ) ; )  return TYPE_2 . METHOD_2 ( new TYPE_1 ( ( ( TYPE_3 . getVdsGroup ( ) . METHOD_3 ( ) ) == null ? null : TYPE_3 . getVdsGroup ( ) . METHOD_3 ( ) . getValue ( ) ) , VAR_1 . StoragePool , TYPE_3 . METHOD_4 ( ) . METHOD_5 ( ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) )  VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.Object> ) TYPE java.util.Map<java.lang.String,java.lang.Object> ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_2 . METHOD_4 ( VAR_2 , VAR_4 ) ) INIT = TYPE_2 . METHOD_4 ( VAR_2 , VAR_4 ) ) VAR VAR (  TYPE_3 . METHOD_5 ( VAR_3 ) . isEmpty ( ) )  TYPE_3 . METHOD_5 ( VAR_3 ) . isEmpty ( ) ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.Object> ) TYPE java.util.Map<java.lang.String,java.lang.Object> ( NAME VAR_5 ) NAME VAR_5 ( INIT = TYPE_2 . METHOD_6 ( VAR_6 , VAR_2 ) ) INIT = TYPE_2 . METHOD_6 ( VAR_6 , VAR_2 ) ) VAR VAR (  TYPE_3 . METHOD_5 ( VAR_5 ) . METHOD_7 ( VAR_7 , VAR_8 ) )  TYPE_3 . METHOD_5 ( VAR_5 ) . METHOD_7 ( VAR_7 , VAR_8 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME returnValue ) NAME returnValue ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  returnValue . METHOD_2 ( true ) )  returnValue . METHOD_2 ( true ) (  returnValue . METHOD_3 ( VAR_1 ) )  returnValue . METHOD_3 ( VAR_1 ) (  org.mockito.Mockito.doReturn ( returnValue ) . when ( METHOD_4 ( ) ) . METHOD_5 ( TYPE_2 . METHOD_6 ( VAR_2 ) , TYPE_2 . any ( VAR_3 class ) ) )  org.mockito.Mockito.doReturn ( returnValue ) . when ( METHOD_4 ( ) ) . METHOD_5 ( TYPE_2 . METHOD_6 ( VAR_2 ) , TYPE_2 . any ( VAR_3 class ) ) (  org.mockito.Mockito.doReturn ( VAR_4 ) . when ( METHOD_4 ( ) ) . METHOD_7 ( ) )  org.mockito.Mockito.doReturn ( VAR_4 ) . when ( METHOD_4 ( ) ) . METHOD_7 ( ) (  org.mockito.Mockito.when ( VAR_4 . METHOD_8 ( VAR_5 ) ) . thenReturn ( METHOD_9 ( VAR_6 ) ) )  org.mockito.Mockito.when ( VAR_4 . METHOD_8 ( VAR_5 ) ) . thenReturn ( METHOD_9 ( VAR_6 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_1 ( false ) ) INIT = new TYPE_1 ( false ) ) VAR VAR (  VAR_3 . METHOD_2 ( TYPE_2 . METHOD_3 ( ) . getStoragePoolId ( ) ) )  VAR_3 . METHOD_2 ( TYPE_2 . METHOD_3 ( ) . getStoragePoolId ( ) ) (  VAR_3 . METHOD_4 ( VAR_1 ) )  VAR_3 . METHOD_4 ( VAR_1 ) (  VAR_3 . METHOD_5 ( VAR_2 ) )  VAR_3 . METHOD_5 ( VAR_2 ) (  VAR_3 . METHOD_6 ( VAR_4 ) )  VAR_3 . METHOD_6 ( VAR_4 ) (  METHOD_7 ( VAR_5 , VAR_3 , TYPE_2 . METHOD_8 ( ) ) )  METHOD_7 ( VAR_5 , VAR_3 , TYPE_2 . METHOD_8 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME equals ) NAME equals ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( this ) == VAR_1 ) COND ( this ) == VAR_1 ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ( IF IF ( COND ! ( VAR_1 instanceof TYPE_1 ) ) COND ! ( VAR_1 instanceof TYPE_1 ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_1 ) ( VAR_1 ) ) ) INIT = ( ( TYPE_1 ) ( VAR_1 ) ) ) VAR VAR (  return TYPE_2 . equals ( METHOD_1 ( ) , VAR_2 . METHOD_1 ( ) ) ; )  return TYPE_2 . equals ( METHOD_1 ( ) , VAR_2 . METHOD_1 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = null ) INIT = null ) VAR VAR ( IF IF ( COND args . METHOD_2 ( VAR_2 ) ) COND args . METHOD_2 ( VAR_2 ) ( THEN THEN ( TRY TRY ( BLOCK BLOCK (  VAR_1 = METHOD_3 ( args . get ( VAR_2 ) ) )  VAR_1 = METHOD_3 ( args . get ( VAR_2 ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_1 ( VAR_3 , e . METHOD_4 ( ) ) ; )  throw new TYPE_1 ( VAR_3 , e . METHOD_4 ( ) ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  throw new TYPE_1 ( VAR_4 ) ; )  throw new TYPE_1 ( VAR_4 ) ; ) THEN THEN ) IF IF ) THEN THEN ( ELSE ELSE (  VAR_1 = METHOD_5 ( STRING_1 , true ) )  VAR_1 = METHOD_5 ( STRING_1 , true ) ) ELSE ELSE ) IF IF (  METHOD_6 ( VAR_1 ) )  METHOD_6 ( VAR_1 ) (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<java.lang.String> ) RETURN TYPE_1<java.lang.String> ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<java.lang.String> ) TYPE TYPE_1<java.lang.String> ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_2 < java.lang.String > ( new TYPE_3 ( ) ) ) INIT = new TYPE_2 < java.lang.String > ( new TYPE_3 ( ) ) ) VAR VAR (  VAR_4 . METHOD_2 ( ( ( TYPE_4 < java.lang.String > ) ( returnValue ) ) ) )  VAR_4 . METHOD_2 ( ( ( TYPE_4 < java.lang.String > ) ( returnValue ) ) ) (  return VAR_4 ; )  return VAR_4 ; ) BLOCK BLOCK ) METHOD METHOD (  VAR_2 . converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter < TYPE_1 < java.lang.String > > ( ) { public TYPE_1 < java.lang.String > Convert ( java.lang.Object returnValue , org.ovirt.engine.ui.frontend.AsyncQuery VAR_3 ) { TYPE_1 < java.lang.String > VAR_4 = new TYPE_2 < java.lang.String > ( new TYPE_3 ( ) ) ; VAR_4 . METHOD_2 ( ( ( TYPE_4 < java.lang.String > ) ( returnValue ) ) ) ; return VAR_4 ; } } )  VAR_2 . converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter < TYPE_1 < java.lang.String > > ( ) { public TYPE_1 < java.lang.String > Convert ( java.lang.Object returnValue , org.ovirt.engine.ui.frontend.AsyncQuery VAR_3 ) { TYPE_1 < java.lang.String > VAR_4 = new TYPE_2 < java.lang.String > ( new TYPE_3 ( ) ) ; VAR_4 . METHOD_2 ( ( ( TYPE_4 < java.lang.String > ) ( returnValue ) ) ) ; return VAR_4 ; } } (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_5 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , VAR_2 ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_5 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_2 ( ) )  super . METHOD_2 ( ) ( IF IF ( COND ( TYPE_1 . getVm ( ) ) != null ) COND ( TYPE_1 . getVm ( ) ) != null ( THEN THEN (  METHOD_3 ( TYPE_1 . getVm ( ) . METHOD_4 ( ) , TYPE_1 . METHOD_5 ( ) ) )  METHOD_3 ( TYPE_1 . getVm ( ) . METHOD_4 ( ) , TYPE_1 . METHOD_5 ( ) ) ) THEN THEN ) IF IF (  METHOD_6 ( ) )  METHOD_6 ( ) (  TYPE_1 . METHOD_7 ( true ) )  TYPE_1 . METHOD_7 ( true ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_2 . METHOD_2 ( ) ) && ( VAR_1 == ( VAR_3 ) ) ) COND ( VAR_2 . METHOD_2 ( ) ) && ( VAR_1 == ( VAR_3 ) ) ( THEN THEN (  METHOD_3 ( ) . METHOD_4 ( TYPE_3 . METHOD_5 ( ) ) )  METHOD_3 ( ) . METHOD_4 ( TYPE_3 . METHOD_5 ( ) ) (  METHOD_3 ( ) . setIsChangable ( false ) )  METHOD_3 ( ) . setIsChangable ( false ) (  METHOD_3 ( ) . setEntity ( false ) )  METHOD_3 ( ) . setEntity ( false ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND METHOD_3 ( ) . METHOD_6 ( ) ) COND METHOD_3 ( ) . METHOD_6 ( ) ( THEN THEN (  METHOD_3 ( ) . setIsChangable ( METHOD_7 ( ) ) )  METHOD_3 ( ) . setIsChangable ( METHOD_7 ( ) ) ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  super . METHOD_1 ( VAR_1 , VAR_2 ) )  super . METHOD_1 ( VAR_1 , VAR_2 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( ( TYPE_1 ) ( VAR_2 ) ) ) INIT = ( ( TYPE_1 ) ( VAR_2 ) ) ) VAR VAR ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN (  VAR_3 . METHOD_2 ( false ) )  VAR_3 . METHOD_2 ( false ) (  VAR_3 . setItems ( null ) )  VAR_3 . setItems ( null ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = ( ( TYPE_2 ) ( ( VAR_2 instanceof TYPE_2 ) ? VAR_2 : null ) ) ) INIT = ( ( TYPE_2 ) ( ( VAR_2 instanceof TYPE_2 ) ? VAR_2 : null ) ) ) VAR VAR ( IF IF ( COND VAR_4 != null ) COND VAR_4 != null ( THEN THEN (  VAR_4 . METHOD_3 ( null ) )  VAR_4 . METHOD_3 ( null ) ) THEN THEN ) IF IF (  VAR_3 . METHOD_4 ( ) )  VAR_3 . METHOD_4 ( ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.Network ) TYPE org.ovirt.engine.core.common.businessentities.Network ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( STRING_1 ) ) INIT = METHOD_2 ( STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME nic ) NAME nic ( INIT = METHOD_3 ( STRING_2 , VAR_1 ) ) INIT = METHOD_3 ( STRING_2 , VAR_1 ) ) VAR VAR (  nic . METHOD_4 ( ( ! ( VAR_1 . METHOD_5 ( ) ) ) ) )  nic . METHOD_4 ( ( ! ( VAR_1 . METHOD_5 ( ) ) ) ) (  METHOD_6 ( VAR_1 ) )  METHOD_6 ( VAR_1 ) (  METHOD_7 ( nic ) )  METHOD_7 ( nic ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_8 ( METHOD_9 ( nic ) ) ) INIT = METHOD_8 ( METHOD_9 ( nic ) ) ) VAR VAR (  METHOD_10 ( VAR_2 , VAR_1 ) )  METHOD_10 ( VAR_2 , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<java.lang.String> ) RETURN TYPE_1<java.lang.String> ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<java.lang.String> ) TYPE TYPE_1<java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 < java.lang.String > ( new TYPE_3 ( ) ) ) INIT = new TYPE_2 < java.lang.String > ( new TYPE_3 ( ) ) ) VAR VAR (  VAR_2 . METHOD_1 ( ( ( TYPE_4 < java.lang.String > ) ( returnValue ) ) ) )  VAR_2 . METHOD_1 ( ( ( TYPE_4 < java.lang.String > ) ( returnValue ) ) ) (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  VAR_1 . METHOD_2 ( VAR_2 ) )  VAR_1 . METHOD_2 ( VAR_2 ) (  VAR_3 = new TYPE_3 ( VAR_4 . METHOD_3 ( ) , TYPE_4 . METHOD_4 ( ) ) )  VAR_3 = new TYPE_3 ( VAR_4 . METHOD_3 ( ) , TYPE_4 . METHOD_4 ( ) ) (  METHOD_5 ( ) . add ( VAR_3 . METHOD_6 ( this ) ) )  METHOD_5 ( ) . add ( VAR_3 . METHOD_6 ( this ) ) (  VAR_1 . add ( VAR_3 ) )  VAR_1 . add ( VAR_3 ) (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ) INIT = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ) VAR VAR (  TYPE_1 . METHOD_4 ( ) . METHOD_5 ( VAR_1 ) )  TYPE_1 . METHOD_4 ( ) . METHOD_5 ( VAR_1 ) (  log . METHOD_6 ( STRING_1 , VAR_1 ) )  log . METHOD_6 ( STRING_1 , VAR_1 ) ( IF IF ( COND org.ovirt.engine.core.compat.Guid . METHOD_7 ( TYPE_1 . getParameters ( ) . METHOD_8 ( ) ) ) COND org.ovirt.engine.core.compat.Guid . METHOD_7 ( TYPE_1 . getParameters ( ) . METHOD_8 ( ) ) ( THEN THEN (  log . METHOD_6 ( STRING_2 ) )  log . METHOD_6 ( STRING_2 ) ) THEN THEN ( ELSE ELSE (  TYPE_1 . METHOD_9 ( ) )  TYPE_1 . METHOD_9 ( ) ) ELSE ELSE ) IF IF (  TYPE_1 . METHOD_10 ( true ) )  TYPE_1 . METHOD_10 ( true ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME vds ) NAME vds ( INIT = new org.ovirt.engine.core.common.businessentities.VDS ( ) ) INIT = new org.ovirt.engine.core.common.businessentities.VDS ( ) ) VAR VAR (  vds . setId ( VAR_1 ) )  vds . setId ( VAR_1 ) (  vds . METHOD_2 ( INT_1 ) )  vds . METHOD_2 ( INT_1 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME host ) NAME host ( INIT = TYPE_2 . map ( vds , ( ( TYPE_1 ) ( null ) ) ) ) INIT = TYPE_2 . map ( vds , ( ( TYPE_1 ) ( null ) ) ) ) VAR VAR (  METHOD_3 ( host . METHOD_4 ( ) ) )  METHOD_3 ( host . METHOD_4 ( ) ) (  assertEquals ( TYPE_3 . valueOf ( host . METHOD_4 ( ) ) , TYPE_3 . valueOf ( INT_2 ) ) )  assertEquals ( TYPE_3 . valueOf ( host . METHOD_4 ( ) ) , TYPE_3 . valueOf ( INT_2 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_3 ( ) ) INIT = new TYPE_3 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_5 ) NAME VAR_5 ( INIT = new TYPE_4 ( ) ) INIT = new TYPE_4 ( ) ) VAR VAR (  VAR_5 . METHOD_2 ( VAR_2 ) )  VAR_5 . METHOD_2 ( VAR_2 ) (  VAR_5 . METHOD_3 ( VAR_3 ) )  VAR_5 . METHOD_3 ( VAR_3 ) (  VAR_4 . METHOD_4 ( ) . add ( VAR_5 ) )  VAR_4 . METHOD_4 ( ) . add ( VAR_5 ) (  VAR_4 . METHOD_5 ( VAR_1 ) )  VAR_4 . METHOD_5 ( VAR_1 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_6 ) NAME VAR_6 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_6 . METHOD_6 ( VAR_4 ) )  VAR_6 . METHOD_6 ( VAR_4 ) (  return VAR_6 ; )  return VAR_6 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND source == null ) COND source == null ( THEN THEN (  return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ( ) ; )  return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ( ) ; ) THEN THEN ) IF IF (  return source ; )  return source ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ( ) ; } return source ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ( ) ; } return source ; } } (  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_1 , new TYPE_1 ( STRING_1 , VAR_2 . StoragePool ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_1 , new TYPE_1 ( STRING_1 , VAR_2 . StoragePool ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) ) INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_2 . METHOD_3 ( VAR_1 ) ) INIT = VAR_2 . METHOD_3 ( VAR_1 ) ) VAR VAR ( IF IF ( COND ( VAR_3 == null ) || ( ( VAR_3 != null ) && ( VAR_3 . getId ( ) . equals ( METHOD_4 ( ) . getId ( ) ) ) ) ) COND ( VAR_3 == null ) || ( ( VAR_3 != null ) && ( VAR_3 . getId ( ) . equals ( METHOD_4 ( ) . getId ( ) ) ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<?extendsTYPE_2,?> ) RETURN TYPE_1<?extendsTYPE_2,?> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.uicommonweb.UICommand ) TYPE org.ovirt.engine.ui.uicommonweb.UICommand ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 == ( getModel ( ) . METHOD_2 ( ) ) ) || ( VAR_1 . getName ( ) . equals ( VAR_2 ) ) ) COND ( VAR_1 == ( getModel ( ) . METHOD_2 ( ) ) ) || ( VAR_1 . getName ( ) . equals ( VAR_2 ) ) ( THEN THEN (  return VAR_3 . get ( ) ; )  return VAR_3 . get ( ) ; ) THEN THEN ( ELSE ELSE (  return super . METHOD_1 ( source , VAR_1 ) ; )  return super . METHOD_1 ( source , VAR_1 ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( IN ( ( TYPE_2 < TYPE_1 > ) ( METHOD_2 ( ) ) ) ) IN ( ( TYPE_2 < TYPE_1 > ) ( METHOD_2 ( ) ) ) ( BLOCK BLOCK ( IF IF ( COND ( ! ( VAR_1 . METHOD_3 ( ) . getEntity ( ) ) ) && ( ( VAR_1 . METHOD_4 ( ) ) != null ) ) COND ( ! ( VAR_1 . METHOD_3 ( ) . getEntity ( ) ) ) && ( ( VAR_1 . METHOD_4 ( ) ) != null ) ( THEN THEN (  METHOD_5 ( new TYPE_3 ( STRING_1 ) ) )  METHOD_5 ( new TYPE_3 ( STRING_1 ) ) (  return false ; )  return false ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ! ( TYPE_1 . METHOD_2 ( ) ) ) COND ! ( TYPE_1 . METHOD_2 ( ) ) ( THEN THEN (  TYPE_2 . METHOD_3 ( TYPE_1 . METHOD_4 ( ) , METHOD_5 ( ) . get ( 0 ) . METHOD_6 ( ) . get ( 0 ) . getValue ( ) , TYPE_1 . METHOD_7 ( ) . METHOD_8 ( ) , TYPE_1 . METHOD_9 ( ) ) )  TYPE_2 . METHOD_3 ( TYPE_1 . METHOD_4 ( ) , METHOD_5 ( ) . get ( 0 ) . METHOD_6 ( ) . get ( 0 ) . getValue ( ) , TYPE_1 . METHOD_7 ( ) . METHOD_8 ( ) , TYPE_1 . METHOD_9 ( ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  cmd = org.mockito.Mockito . METHOD_2 ( METHOD_3 ( VAR_1 , 0 ) ) )  cmd = org.mockito.Mockito . METHOD_2 ( METHOD_3 ( VAR_1 , 0 ) ) (  METHOD_4 ( cmd ) )  METHOD_4 ( cmd ) (  METHOD_5 ( true , null ) )  METHOD_5 ( true , null ) (  TYPE_1 . METHOD_6 ( cmd . METHOD_7 ( ) ) )  TYPE_1 . METHOD_6 ( cmd . METHOD_7 ( ) ) (  cmd . METHOD_1 ( ) )  cmd . METHOD_1 ( ) (  org.mockito.Mockito . METHOD_8 ( cmd ) . METHOD_9 ( ) )  org.mockito.Mockito . METHOD_8 ( cmd ) . METHOD_9 ( ) (  org.mockito.Mockito . METHOD_8 ( cmd ) . METHOD_10 ( VAR_2 ) )  org.mockito.Mockito . METHOD_8 ( cmd ) . METHOD_10 ( VAR_2 ) (  org.mockito.Mockito . METHOD_8 ( cmd ) . METHOD_11 ( VAR_2 ) )  org.mockito.Mockito . METHOD_8 ( cmd ) . METHOD_11 ( VAR_2 ) (  TYPE_1 . assertEquals ( cmd . METHOD_12 ( ) , VAR_3 ) )  TYPE_1 . assertEquals ( cmd . METHOD_12 ( ) , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME cluster ) NAME cluster ( INIT = METHOD_2 ( true , VAR_1 ) ) INIT = METHOD_2 ( true , VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2<org.ovirt.engine.core.compat.Guid> ) TYPE TYPE_2<org.ovirt.engine.core.compat.Guid> ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_3 . METHOD_3 ( VAR_3 , VAR_4 ) ) INIT = TYPE_3 . METHOD_3 ( VAR_3 , VAR_4 ) ) VAR VAR (  TYPE_4 . METHOD_4 ( STRING_1 , ( ( VAR_5 . METHOD_5 ( cluster , VAR_2 ) . size ( ) ) == 2 ) ) )  TYPE_4 . METHOD_4 ( STRING_1 , ( ( VAR_5 . METHOD_5 ( cluster , VAR_2 ) . size ( ) ) == 2 ) ) (  TYPE_4 . METHOD_4 ( TYPE_3 . METHOD_3 ( STRING_2 , STRING_3 ) . equals ( VAR_5 . METHOD_5 ( cluster , VAR_2 ) ) ) )  TYPE_4 . METHOD_4 ( TYPE_3 . METHOD_3 ( STRING_2 , STRING_3 ) . equals ( VAR_5 . METHOD_5 ( cluster , VAR_2 ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( VAR_1 ) )  METHOD_2 ( VAR_1 ) (  TYPE_2 . METHOD_3 ( VAR_2 . METHOD_4 ( ) ) )  TYPE_2 . METHOD_3 ( VAR_2 . METHOD_4 ( ) ) (  TYPE_3 . METHOD_5 ( ( ( VAR_1 . METHOD_6 ( ) ) != null ) ) )  TYPE_3 . METHOD_5 ( ( ( VAR_1 . METHOD_6 ( ) ) != null ) ) (  TYPE_3 . METHOD_5 ( ( ( VAR_1 . METHOD_7 ( ) ) == null ) ) )  TYPE_3 . METHOD_5 ( ( ( VAR_1 . METHOD_7 ( ) ) == null ) ) (  org.mockito.Mockito . METHOD_8 ( VAR_3 ) . METHOD_9 ( VAR_4 . METHOD_10 ( ) ) )  org.mockito.Mockito . METHOD_8 ( VAR_3 ) . METHOD_9 ( VAR_4 . METHOD_10 ( ) ) (  TYPE_2 . METHOD_3 ( ( ( VAR_4 . getValue ( ) . size ( ) ) == 0 ) ) )  TYPE_2 . METHOD_3 ( ( ( VAR_4 . getValue ( ) . size ( ) ) == 0 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( TYPE_2 . getVm ( ) . METHOD_2 ( ) ) != null ) COND ( TYPE_2 . getVm ( ) . METHOD_2 ( ) ) != null ( THEN THEN (  TYPE_3 . getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_2 , new TYPE_4 ( TYPE_2 . getVm ( ) . METHOD_2 ( ) , VAR_1 ) ) )  TYPE_3 . getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_2 , new TYPE_4 ( TYPE_2 . getVm ( ) . METHOD_2 ( ) , VAR_1 ) ) ) THEN THEN ( ELSE ELSE (  TYPE_2 . METHOD_5 ( ) . METHOD_6 ( VAR_1 ) )  TYPE_2 . METHOD_5 ( ) . METHOD_6 ( VAR_1 ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME entity ) NAME entity ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2<TYPE_3,TYPE_1> ) TYPE TYPE_2<TYPE_3,TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_2 < TYPE_3 , TYPE_1 > ) ( ( ( TYPE_4 ) ( resource ) ) . METHOD_3 ( ) ) ) ) INIT = ( ( TYPE_2 < TYPE_3 , TYPE_1 > ) ( ( ( TYPE_4 ) ( resource ) ) . METHOD_3 ( ) ) ) ) VAR VAR (  METHOD_4 ( VAR_1 ) )  METHOD_4 ( VAR_1 ) (  METHOD_5 ( VAR_1 . METHOD_6 ( ) , entity ) )  METHOD_5 ( VAR_1 . METHOD_6 ( ) , entity ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN java.util.HashMap<org.ovirt.engine.core.common.businessentities.VmTemplate,TYPE_1> ) RETURN java.util.HashMap<org.ovirt.engine.core.common.businessentities.VmTemplate,TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.HashMap<org.ovirt.engine.core.common.businessentities.VmTemplate,TYPE_1> ) TYPE java.util.HashMap<org.ovirt.engine.core.common.businessentities.VmTemplate,TYPE_1> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.HashMap < org.ovirt.engine.core.common.businessentities.VmTemplate , TYPE_1 > ( ) ) INIT = new java.util.HashMap < org.ovirt.engine.core.common.businessentities.VmTemplate , TYPE_1 > ( ) ) VAR VAR ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  return VAR_2 ; )  return VAR_2 ; ) THEN THEN ) IF IF ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < ( VAR_3 . length ) ) COND i < ( VAR_3 . length ) ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK (  VAR_2 . put ( METHOD_2 ( i ) , new TYPE_1 ( ) ) )  VAR_2 . put ( METHOD_2 ( i ) , new TYPE_1 ( ) ) ) BLOCK BLOCK ) FOR FOR (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  VAR_1 = new TYPE_1 ( ) )  VAR_1 = new TYPE_1 ( ) ) THEN THEN ) IF IF (  METHOD_2 ( ) . setEntity ( TYPE_2 . METHOD_3 ( VAR_1 . METHOD_2 ( ) ) ) )  METHOD_2 ( ) . setEntity ( TYPE_2 . METHOD_3 ( VAR_1 . METHOD_2 ( ) ) ) (  METHOD_4 ( ) . setEntity ( TYPE_2 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ) )  METHOD_4 ( ) . setEntity ( TYPE_2 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ) (  METHOD_5 ( ) . setEntity ( TYPE_2 . METHOD_3 ( VAR_1 . METHOD_5 ( ) ) ) )  METHOD_5 ( ) . setEntity ( TYPE_2 . METHOD_3 ( VAR_1 . METHOD_5 ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . getParameters ( ) . METHOD_2 ( ) ) INIT = TYPE_2 . getParameters ( ) . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . METHOD_3 ( ) ) INIT = VAR_3 . METHOD_3 ( ) ) VAR VAR (  return ( ( VAR_1 . METHOD_4 ( ) ) || ( ( VAR_1 . METHOD_5 ( ) ) && ( ! ( VAR_2 . METHOD_5 ( ) ) ) ) ) || ( ! ( TYPE_3 . equals ( VAR_1 . METHOD_6 ( ) , VAR_2 . METHOD_6 ( ) ) ) ) ; )  return ( ( VAR_1 . METHOD_4 ( ) ) || ( ( VAR_1 . METHOD_5 ( ) ) && ( ! ( VAR_2 . METHOD_5 ( ) ) ) ) ) || ( ! ( TYPE_3 . equals ( VAR_1 . METHOD_6 ( ) , VAR_2 . METHOD_6 ( ) ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME storageDomain ) NAME storageDomain ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME returnValue ) NAME returnValue ( INIT = false ) INIT = false ) VAR VAR ( IF IF ( COND storageDomain != null ) COND storageDomain != null ( THEN THEN (  returnValue = METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( storageDomain . getId ( ) ) . isEmpty ( ) )  returnValue = METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( storageDomain . getId ( ) ) . isEmpty ( ) ( IF IF ( COND ! returnValue ) COND ! returnValue ( THEN THEN (  addCanDoActionMessage ( VAR_1 ) )  addCanDoActionMessage ( VAR_1 ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return returnValue ; )  return returnValue ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<TYPE_1.VdcActionParametersBase> ) TYPE java.util.ArrayList<TYPE_1.VdcActionParametersBase> ( NAME parameters ) NAME parameters ( INIT = new java.util.ArrayList < TYPE_1 . VdcActionParametersBase > ( ) ) INIT = new java.util.ArrayList < TYPE_1 . VdcActionParametersBase > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ( IN VAR_2 . METHOD_2 ( ) ) IN VAR_2 . METHOD_2 ( ) ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2<TYPE_3> ) TYPE TYPE_2<TYPE_3> ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_2 < TYPE_3 > ( ) ) INIT = new TYPE_2 < TYPE_3 > ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( INIT = ( ( TYPE_3 ) ( VAR_1 ) ) ) INIT = ( ( TYPE_3 ) ( VAR_1 ) ) ) VAR VAR (  VAR_3 . METHOD_3 ( VAR_4 ) )  VAR_3 . METHOD_3 ( VAR_4 ) (  parameters . add ( VAR_3 ) )  parameters . add ( VAR_3 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_4 ( VAR_5 , parameters ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_4 ( VAR_5 , parameters ) (  METHOD_5 ( ) )  METHOD_5 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Version ) TYPE org.ovirt.engine.core.compat.Version ( NAME version ) NAME version ) VAR VAR ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_5 . METHOD_2 ( ) . get ( VAR_1 ) . get ( version ) . METHOD_3 ( new TYPE_4 ( VAR_4 , VAR_3 ) ) ) ) COND ! ( VAR_5 . METHOD_2 ( ) . get ( VAR_1 ) . get ( version ) . METHOD_3 ( new TYPE_4 ( VAR_4 , VAR_3 ) ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME value ) NAME value ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  value . METHOD_2 ( false ) )  value . METHOD_2 ( false ) (  value . METHOD_3 ( new TYPE_2 ( STRING_1 ) ) )  value . METHOD_3 ( new TYPE_2 ( STRING_1 ) ) (  org.mockito.Mockito.when ( VAR_1 . METHOD_4 ( TYPE_3 . any ( VAR_2 class ) , TYPE_3 . any ( VAR_3 class ) ) ) . thenReturn ( value ) )  org.mockito.Mockito.when ( VAR_1 . METHOD_4 ( TYPE_3 . any ( VAR_2 class ) , TYPE_3 . any ( VAR_3 class ) ) ) . thenReturn ( value ) (  VAR_4 . METHOD_5 ( ) )  VAR_4 . METHOD_5 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1<TYPE_2> ) RETURN TYPE_1<TYPE_2> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME result ) NAME result ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_3 . METHOD_2 ( VAR_2 ) ) INIT = TYPE_3 . METHOD_2 ( VAR_2 ) ) VAR VAR ( IF IF ( COND VAR_3 != null ) COND VAR_3 != null ( THEN THEN (  result . add ( VAR_3 ) )  result . add ( VAR_3 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( vm . getId ( ) , TYPE_2 . getName ( ) , TYPE_2 . getName ( ) ) ) INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( vm . getId ( ) , TYPE_2 . getName ( ) , TYPE_2 . getName ( ) ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_3 ( ) ) INIT = new TYPE_3 ( ) ) VAR VAR (  VAR_3 . add ( VAR_4 , VAR_2 . METHOD_4 ( ) ) )  VAR_3 . add ( VAR_4 , VAR_2 . METHOD_4 ( ) ) (  VAR_3 . add ( VAR_5 , VAR_2 . METHOD_4 ( ) ) )  VAR_3 . add ( VAR_5 , VAR_2 . METHOD_4 ( ) ) (  METHOD_5 ( VAR_3 , VAR_2 , null ) )  METHOD_5 ( VAR_3 , VAR_2 , null ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( ( getSelectedItem ( ) ) == null ) || ( ( getWindow ( ) ) != null ) ) COND ( ( getSelectedItem ( ) ) == null ) || ( ( getWindow ( ) ) != null ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  TYPE_1 . METHOD_2 ( this , VAR_1 , getEntity ( ) . getId ( ) , ( ( TYPE_2 . DiskImage ) ( getSelectedItem ( ) ) ) ) )  TYPE_1 . METHOD_2 ( this , VAR_1 , getEntity ( ) . getId ( ) , ( ( TYPE_2 . DiskImage ) ( getSelectedItem ( ) ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ) TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ( NAME cluster ) NAME cluster ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.Integer ) TYPE java.lang.Integer ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_3 ( ) . getSelectedItem ( ) ) INIT = METHOD_3 ( ) . getSelectedItem ( ) ) VAR VAR ( IF IF ( COND ( cluster == null ) || ( VAR_1 == null ) ) COND ( cluster == null ) || ( VAR_1 == null ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_4 ( VAR_1 , cluster . METHOD_5 ( ) ) ) INIT = TYPE_2 . METHOD_4 ( VAR_1 , cluster . METHOD_5 ( ) ) ) VAR VAR (  METHOD_6 ( VAR_2 ) )  METHOD_6 ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( METHOD_2 ( ) ) != null ) COND ( METHOD_2 ( ) ) != null ( THEN THEN ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VmTemplate> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VmTemplate> ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . Linq < org.ovirt.engine.core.common.businessentities.VmTemplate > METHOD_3 ( METHOD_2 ( ) ) ) INIT = VAR_2 . Linq < org.ovirt.engine.core.common.businessentities.VmTemplate > METHOD_3 ( METHOD_2 ( ) ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.VmTemplate ) TYPE org.ovirt.engine.core.common.businessentities.VmTemplate ( NAME template ) NAME template ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( IF IF ( COND ( template != null ) && ( template . getId ( ) . equals ( VAR_3 ) ) ) COND ( template != null ) && ( template . getId ( ) . equals ( VAR_3 ) ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.List<org.ovirt.engine.core.common.businessentities.VDS> ) RETURN java.util.List<org.ovirt.engine.core.common.businessentities.VDS> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  METHOD_2 ( VAR_2 , VAR_1 ) )  METHOD_2 ( VAR_2 , VAR_1 ) ( VAR VAR ( TYPE TYPE_2[] ) TYPE TYPE_2[] ( NAME hosts ) NAME hosts ( INIT = VAR_3 . METHOD_3 ( VAR_1 . METHOD_4 ( ) , TYPE_2 [ ] . class ) ) INIT = VAR_3 . METHOD_3 ( VAR_1 . METHOD_4 ( ) , TYPE_2 [ ] . class ) ) VAR VAR (  return map ( TYPE_3 . METHOD_5 ( hosts ) ) ; )  return map ( TYPE_3 . METHOD_5 ( hosts ) ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME e ) NAME e ( BLOCK BLOCK (  METHOD_6 ( e ) )  METHOD_6 ( e ) ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME e ) NAME e ( BLOCK BLOCK (  METHOD_6 ( e ) )  METHOD_6 ( e ) ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME e ) NAME e ( BLOCK BLOCK (  METHOD_6 ( e ) )  METHOD_6 ( e ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1.AuditLogType ) RETURN TYPE_1.AuditLogType ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.AuditLogType ) TYPE TYPE_1.AuditLogType ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( TYPE_2 . METHOD_2 ( ) ) ? VAR_2 : VAR_3 ) INIT = ( TYPE_2 . METHOD_2 ( ) ) ? VAR_2 : VAR_3 ) VAR VAR (  return TYPE_2 . getSucceeded ( ) ? ( TYPE_2 . METHOD_3 ( ) ) == ( VAR_4 ) ? VAR_5 : VAR_1 : VAR_6 ? VAR_7 : ( TYPE_2 . METHOD_4 ( ) . METHOD_5 ( ) ) == ( VAR_8 ) ? VAR_9 : VAR_10 ; )  return TYPE_2 . getSucceeded ( ) ? ( TYPE_2 . METHOD_3 ( ) ) == ( VAR_4 ) ? VAR_5 : VAR_1 : VAR_6 ? VAR_7 : ( TYPE_2 . METHOD_4 ( ) . METHOD_5 ( ) ) == ( VAR_8 ) ? VAR_9 : VAR_10 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_1 ) ( model ) ) ) INIT = ( ( TYPE_1 ) ( model ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.String> ) TYPE java.util.Map<java.lang.String,java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( java.util.Map < java.lang.String , java.lang.String > ) ( result ) ) ) INIT = ( ( java.util.Map < java.lang.String , java.lang.String > ) ( result ) ) ) VAR VAR ( IF IF ( COND ! ( VAR_2 . isEmpty ( ) ) ) COND ! ( VAR_2 . isEmpty ( ) ) ( THEN THEN (  VAR_1 . METHOD_2 ( true ) )  VAR_1 . METHOD_2 ( true ) (  VAR_1 . METHOD_3 ( true ) )  VAR_1 . METHOD_3 ( true ) ) THEN THEN ( ELSE ELSE (  METHOD_2 ( false ) )  METHOD_2 ( false ) (  METHOD_3 ( false ) )  METHOD_3 ( false ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME nic ) NAME nic ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_2 || VAR_3 ) COND VAR_2 || VAR_3 ( THEN THEN ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_6 ) NAME VAR_6 ( INIT = ( VAR_2 ) ? VAR_4 : VAR_1 . METHOD_2 ( ) ) INIT = ( VAR_2 ) ? VAR_4 : VAR_1 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_7 ) NAME VAR_7 ( INIT = METHOD_3 ( VAR_1 , VAR_5 , VAR_3 , VAR_2 , VAR_6 , nic . METHOD_4 ( ) ) ) INIT = METHOD_3 ( VAR_1 , VAR_5 , VAR_3 , VAR_2 , VAR_6 , nic . METHOD_4 ( ) ) ) VAR VAR (  return METHOD_5 ( ) . METHOD_6 ( ) . METHOD_7 ( VAR_7 ) . METHOD_8 ( ) ; )  return METHOD_5 ( ) . METHOD_6 ( ) . METHOD_7 ( VAR_7 ) . METHOD_8 ( ) ; ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = null ) INIT = null ) VAR VAR ( IF IF ( COND TYPE_2 . METHOD_2 ( VAR_1 , STRING_1 ) ) COND TYPE_2 . METHOD_2 ( VAR_1 , STRING_1 ) ( THEN THEN (  VAR_2 = new TYPE_3 ( VAR_3 class ) )  VAR_2 = new TYPE_3 ( VAR_3 class ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND TYPE_2 . METHOD_2 ( VAR_1 , STRING_2 ) ) COND TYPE_2 . METHOD_2 ( VAR_1 , STRING_2 ) ( THEN THEN (  VAR_2 = new TYPE_4 ( VAR_4 class ) )  VAR_2 = new TYPE_4 ( VAR_4 class ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND TYPE_2 . METHOD_2 ( VAR_1 , STRING_3 ) ) COND TYPE_2 . METHOD_2 ( VAR_1 , STRING_3 ) ( THEN THEN (  VAR_2 = new TYPE_3 ( VAR_5 class ) )  VAR_2 = new TYPE_3 ( VAR_5 class ) ) THEN THEN ( ELSE ELSE ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND source == null ) COND source == null ( THEN THEN (  return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ( ) ; )  return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ( ) ; ) THEN THEN ) IF IF (  return source ; )  return source ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ( ) ; } return source ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ( ) ; } return source ; } } (  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2<TYPE_3> ) TYPE TYPE_2<TYPE_3> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2<TYPE_4> ) TYPE TYPE_2<TYPE_4> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_2<TYPE_5<?>> ) TYPE TYPE_2<TYPE_5<?>> ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE float ) TYPE float ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_6 ) NAME VAR_6 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_7 ) NAME VAR_7 ) VAR VAR ( VAR VAR ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME VAR_8 ) NAME VAR_8 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_9 ) NAME VAR_9 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return new TYPE_1 ( VAR_10 , VAR_11 , VAR_12 , VAR_1 , VAR_2 , VAR_3 , VAR_13 , VAR_4 , VAR_5 , VAR_6 , VAR_7 , VAR_8 ) ; )  return new TYPE_1 ( VAR_10 , VAR_11 , VAR_12 , VAR_1 , VAR_2 , VAR_3 , VAR_13 , VAR_4 , VAR_5 , VAR_6 , VAR_7 , VAR_8 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public synchronized ) MODIFIER public synchronized ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_2 . METHOD_2 ( VAR_1 . getId ( ) ) ) ) COND ! ( VAR_2 . METHOD_2 ( VAR_1 . getId ( ) ) ) ( THEN THEN (  VAR_2 . put ( VAR_1 . getId ( ) , VAR_1 ) )  VAR_2 . put ( VAR_1 . getId ( ) , VAR_1 ) ) THEN THEN ) IF IF (  METHOD_3 ( VAR_1 ) )  METHOD_3 ( VAR_1 ) (  VAR_3 . METHOD_4 ( STRING_1 , VAR_1 . getId ( ) ) )  VAR_3 . METHOD_4 ( STRING_1 , VAR_1 . getId ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME getValue ) NAME getValue ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_1 ( VAR_1 . METHOD_2 ( ) ) )  METHOD_1 ( VAR_1 . METHOD_2 ( ) ) ( SWITCH SWITCH ( NAME VAR_1 . METHOD_2 ( ) ) NAME VAR_1 . METHOD_2 ( ) ( CASE VAR_2 ( BLOCK BLOCK (  return METHOD_3 ( ) . METHOD_4 ( ) ; )  return METHOD_3 ( ) . METHOD_4 ( ) ; ) BLOCK BLOCK ) CASE VAR_2 ( CASE VAR_3 ( BLOCK BLOCK (  return METHOD_3 ( ) . METHOD_5 ( ) ; )  return METHOD_3 ( ) . METHOD_5 ( ) ; ) BLOCK BLOCK ) CASE VAR_3 ( DEFAULT DEFAULT ( BLOCK BLOCK (  return METHOD_3 ( ) . METHOD_5 ( ) ; )  return METHOD_3 ( ) . METHOD_5 ( ) ; ) BLOCK BLOCK ) DEFAULT DEFAULT ) SWITCH SWITCH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ( INIT = getEntity ( ) ) INIT = getEntity ( ) ) VAR VAR ( IF IF ( COND TYPE_1 . equals ( vm . getStatus ( ) ) ) COND TYPE_1 . equals ( vm . getStatus ( ) ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE java.util.ArrayList<TYPE_2> ) TYPE java.util.ArrayList<TYPE_2> ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( METHOD_2 ( ) ) != null ) ? VAR_2 . Linq < TYPE_2 > METHOD_3 ( METHOD_2 ( ) ) : new java.util.ArrayList < TYPE_2 > ( ) ) INIT = ( ( METHOD_2 ( ) ) != null ) ? VAR_2 . Linq < TYPE_2 > METHOD_3 ( METHOD_2 ( ) ) : new java.util.ArrayList < TYPE_2 > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME nic ) NAME nic ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( IF IF ( COND nic . METHOD_4 ( ) ) COND nic . METHOD_4 ( ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( STRING_1 , VAR_2 , VAR_3 , INT_1 , 0 ) ) INIT = METHOD_2 ( STRING_1 , VAR_2 , VAR_3 , INT_1 , 0 ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_4 ) NAME VAR_4 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_1 ) INIT = VAR_1 ) VAR VAR (  VAR_4 . add ( VAR_5 ) )  VAR_4 . add ( VAR_5 ) (  org.mockito.Mockito.when ( VAR_6 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ) . thenReturn ( VAR_4 ) )  org.mockito.Mockito.when ( VAR_6 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ) . thenReturn ( VAR_4 ) ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_7 ) NAME VAR_7 ( INIT = command . METHOD_5 ( VAR_1 , null ) ) INIT = command . METHOD_5 ( VAR_1 , null ) ) VAR VAR (  TYPE_2 . METHOD_6 ( VAR_7 ) )  TYPE_2 . METHOD_6 ( VAR_7 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) != null ) COND ( VAR_1 ) != null ( THEN THEN (  VAR_1 = new TYPE_1 ( ( ( java.lang.String ) ( TYPE_2 . getInstance ( ) . METHOD_2 ( VAR_2 ) ) ) , METHOD_3 ( ) . METHOD_4 ( ) ) )  VAR_1 = new TYPE_1 ( ( ( java.lang.String ) ( TYPE_2 . getInstance ( ) . METHOD_2 ( VAR_2 ) ) ) , METHOD_3 ( ) . METHOD_4 ( ) ) ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( java.lang.Boolean ) ( METHOD_2 ( ) . getEntity ( ) ) ) ) INIT = ( ( java.lang.Boolean ) ( METHOD_2 ( ) . getEntity ( ) ) ) ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( METHOD_3 ( ) . getSelectedItem ( ) ) == null ) INIT = ( METHOD_3 ( ) . getSelectedItem ( ) ) == null ) VAR VAR ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  METHOD_4 ( ) . setIsChangable ( false ) )  METHOD_4 ( ) . setIsChangable ( false ) (  return ; )  return ; ) THEN THEN ) IF IF ( IF IF ( COND ! ( VAR_3 ) ) COND ! ( VAR_3 ) ( THEN THEN (  METHOD_4 ( ) . setIsChangable ( false ) )  METHOD_4 ( ) . setIsChangable ( false ) (  return ; )  return ; ) THEN THEN ) IF IF (  METHOD_4 ( ) . setIsChangable ( true ) )  METHOD_4 ( ) . setIsChangable ( true ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) , null ) ) )  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) , null ) ) (  METHOD_3 ( cmd ) )  METHOD_3 ( cmd ) (  METHOD_4 ( cmd , false ) )  METHOD_4 ( cmd , false ) (  cmd . METHOD_5 ( ) )  cmd . METHOD_5 ( ) (  TYPE_3 . METHOD_6 ( cmd . getReturnValue ( ) . getSucceeded ( ) ) )  TYPE_3 . METHOD_6 ( cmd . getReturnValue ( ) . getSucceeded ( ) ) (  TYPE_3 . assertEquals ( cmd . METHOD_7 ( ) , VAR_2 ) )  TYPE_3 . assertEquals ( cmd . METHOD_7 ( ) , VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN org.ovirt.engine.core.compat.Guid ) RETURN org.ovirt.engine.core.compat.Guid ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_2 . METHOD_2 ( VAR_5 , METHOD_3 ( ) ) ) INIT = TYPE_2 . METHOD_2 ( VAR_5 , METHOD_3 ( ) ) ) VAR VAR (  return super . METHOD_1 ( VAR_1 , VAR_2 . METHOD_4 ( ) , TYPE_3 . getParameters ( ) . METHOD_5 ( ) , VAR_4 , VAR_6 , VAR_3 ) ; )  return super . METHOD_1 ( VAR_1 , VAR_2 . METHOD_4 ( ) , TYPE_3 . getParameters ( ) . METHOD_5 ( ) , VAR_4 , VAR_6 , VAR_3 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Version ) TYPE org.ovirt.engine.core.compat.Version ( NAME version ) NAME version ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source != null ? ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; )  return source != null ? ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; } } (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new TYPE_2 ( version ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new TYPE_2 ( version ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2<?> ) TYPE TYPE_2<?> ( NAME command ) NAME command ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_2 ) NAME VAR_2 ( INIT = command . METHOD_2 ( ) ) INIT = command . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ( INIT = TYPE_5 . METHOD_3 ( VAR_3 . log ) . METHOD_4 ( command , ( VAR_1 != null ? VAR_1 . METHOD_5 ( ) : null ) ) ) INIT = TYPE_5 . METHOD_3 ( VAR_3 . log ) . METHOD_4 ( command , ( VAR_1 != null ? VAR_1 . METHOD_5 ( ) : null ) ) ) VAR VAR (  METHOD_6 ( command , result ) )  METHOD_6 ( command , result ) (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ( INIT = ( ( TYPE_1 ) ( target ) ) ) INIT = ( ( TYPE_1 ) ( target ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDSGroup> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDSGroup> ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( returnValue ) ) ) INIT = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( returnValue ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDSGroup> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDSGroup> ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_1 ( VAR_1 , vm . METHOD_2 ( ) ) ) INIT = TYPE_2 . METHOD_1 ( VAR_1 , vm . METHOD_2 ( ) ) ) VAR VAR (  model . METHOD_3 ( model , VAR_3 , VAR_2 , vm . METHOD_4 ( ) ) )  model . METHOD_3 ( model , VAR_3 , VAR_2 , vm . METHOD_4 ( ) ) (  METHOD_5 ( ) )  METHOD_5 ( ) (  METHOD_6 ( ) )  METHOD_6 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2<org.ovirt.engine.core.compat.Guid,TYPE_2<java.lang.Boolean,java.lang.Integer>> ) TYPE TYPE_2<org.ovirt.engine.core.compat.Guid,TYPE_2<java.lang.Boolean,java.lang.Integer>> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return METHOD_2 ( ) . addValue ( STRING_1 , org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) . addValue ( STRING_2 , VAR_2 ) . addValue ( STRING_3 , VAR_1 . METHOD_4 ( ) ) . addValue ( STRING_4 , VAR_1 . METHOD_5 ( ) . METHOD_5 ( ) ) . addValue ( STRING_5 , VAR_1 . METHOD_5 ( ) . METHOD_4 ( ) ) ; )  return METHOD_2 ( ) . addValue ( STRING_1 , org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) . addValue ( STRING_2 , VAR_2 ) . addValue ( STRING_3 , VAR_1 . METHOD_4 ( ) ) . addValue ( STRING_4 , VAR_1 . METHOD_5 ( ) . METHOD_5 ( ) ) . addValue ( STRING_5 , VAR_1 . METHOD_5 ( ) . METHOD_4 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( TYPE_2 . getVm ( ) . METHOD_2 ( ) ) != null ) COND ( TYPE_2 . getVm ( ) . METHOD_2 ( ) ) != null ( THEN THEN (  TYPE_3 . getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_2 , new TYPE_4 ( TYPE_2 . getVm ( ) . METHOD_2 ( ) . getValue ( ) , VAR_1 ) ) )  TYPE_3 . getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_2 , new TYPE_4 ( TYPE_2 . getVm ( ) . METHOD_2 ( ) . getValue ( ) , VAR_1 ) ) ) THEN THEN ( ELSE ELSE (  org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_5 ( ) . METHOD_6 ( VAR_1 ) )  org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_5 ( ) . METHOD_6 ( VAR_1 ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_1 ( STRING_1 ) ) INIT = TYPE_2 . METHOD_1 ( STRING_1 ) ) VAR VAR (  METHOD_2 ( VAR_1 ) )  METHOD_2 ( VAR_1 ) (  METHOD_2 ( VAR_1 . METHOD_3 ( ) ) )  METHOD_2 ( VAR_1 . METHOD_3 ( ) ) (  assertEquals ( 1 , VAR_1 . METHOD_3 ( ) . size ( ) ) )  assertEquals ( 1 , VAR_1 . METHOD_3 ( ) . size ( ) ) (  assertEquals ( 0 , VAR_1 . METHOD_3 ( ) . get ( 0 ) . METHOD_4 ( ) ) )  assertEquals ( 0 , VAR_1 . METHOD_3 ( ) . get ( 0 ) . METHOD_4 ( ) ) (  assertEquals ( STRING_2 , VAR_1 . METHOD_3 ( ) . get ( 0 ) . METHOD_5 ( ) ) )  assertEquals ( STRING_2 , VAR_1 . METHOD_3 ( ) . get ( 0 ) . METHOD_5 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( STRING_1 ) ) INIT = new TYPE_1 ( STRING_1 ) ) VAR VAR (  VAR_1 . append ( STRING_2 ) )  VAR_1 . append ( STRING_2 ) (  VAR_1 . append ( STRING_3 ) )  VAR_1 . append ( STRING_3 ) (  VAR_1 . append ( STRING_4 ) )  VAR_1 . append ( STRING_4 ) ( VAR VAR ( TYPE java.util.Map<java.lang.String,TYPE_2> ) TYPE java.util.Map<java.lang.String,TYPE_2> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_3 ( ) . METHOD_2 ( VAR_1 . toString ( ) , VAR_3 . HashMap class ) ) INIT = new TYPE_3 ( ) . METHOD_2 ( VAR_1 . toString ( ) , VAR_3 . HashMap class ) ) VAR VAR (  TYPE_4 . METHOD_3 ( VAR_2 ) )  TYPE_4 . METHOD_3 ( VAR_2 ) (  TYPE_4 . assertEquals ( VAR_2 . get ( STRING_5 ) , VAR_4 ) )  TYPE_4 . assertEquals ( VAR_2 . get ( STRING_5 ) , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source ; )  return source ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } (  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new TYPE_2 ( VAR_1 ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new TYPE_2 ( VAR_1 ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME id ) NAME id ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( RESOURCES RESOURCES ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( this . VAR_2 ) ) INIT = new TYPE_2 ( this . VAR_2 ) ) VAR VAR ) RESOURCES RESOURCES ( BLOCK BLOCK (  this . VAR_3 . METHOD_2 ( id ) )  this . VAR_3 . METHOD_2 ( id ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( INIT = this . map . METHOD_2 ( id ) ) INIT = this . map . METHOD_2 ( id ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_5 ) NAME VAR_5 ( INIT = this . VAR_6 . get ( VAR_4 . METHOD_3 ( ) . METHOD_4 ( ) ) ) INIT = this . VAR_6 . get ( VAR_4 . METHOD_3 ( ) . METHOD_4 ( ) ) ) VAR VAR (  VAR_5 . METHOD_2 ( id ) )  VAR_5 . METHOD_2 ( id ) ) BLOCK BLOCK ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME e ) NAME e ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SWITCH SWITCH ( NAME VAR_1 . getStatus ( ) ) NAME VAR_1 . getStatus ( ) ( CASE VAR_2 ( BLOCK BLOCK (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_2 ( CASE VAR_3 ( BLOCK BLOCK (  VAR_4 . METHOD_2 ( STRING_1 , VAR_1 . getId ( ) , VAR_1 . METHOD_3 ( ) , e . METHOD_4 ( ) ) )  VAR_4 . METHOD_2 ( STRING_1 , VAR_1 . getId ( ) , VAR_1 . METHOD_3 ( ) , e . METHOD_4 ( ) ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_3 ( DEFAULT DEFAULT ( BLOCK BLOCK (  VAR_4 . METHOD_5 ( STRING_1 , VAR_1 . getId ( ) , VAR_1 . METHOD_3 ( ) , e . METHOD_4 ( ) ) )  VAR_4 . METHOD_5 ( STRING_1 , VAR_1 . getId ( ) , VAR_1 . METHOD_3 ( ) , e . METHOD_4 ( ) ) ) BLOCK BLOCK ) DEFAULT DEFAULT ) SWITCH SWITCH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.util.ArrayList<TYPE_1> ) RETURN java.util.ArrayList<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.ArrayList<TYPE_1> ) TYPE java.util.ArrayList<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME status ) NAME status ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<TYPE_1> ) TYPE java.util.ArrayList<TYPE_1> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.ArrayList < TYPE_1 > ( ) ) INIT = new java.util.ArrayList < TYPE_1 > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME i ) NAME i ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( IF IF ( COND ( i . METHOD_2 ( ) ) == status ) COND ( i . METHOD_2 ( ) ) == status ( THEN THEN (  VAR_2 . add ( i ) )  VAR_2 . add ( i ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_1 ) ( TYPE_2 . METHOD_2 ( ) ) ) ) INIT = ( ( TYPE_1 ) ( TYPE_2 . METHOD_2 ( ) ) ) ) VAR VAR (  TYPE_2 . METHOD_3 ( ) . METHOD_4 ( VAR_1 , ( ( int ) ( METHOD_5 ( ) ) ) ) )  TYPE_2 . METHOD_3 ( ) . METHOD_4 ( VAR_1 , ( ( int ) ( METHOD_5 ( ) ) ) ) (  METHOD_6 ( TYPE_2 . getParameters ( ) . METHOD_7 ( ) , true ) )  METHOD_6 ( TYPE_2 . getParameters ( ) . METHOD_7 ( ) , true ) (  TYPE_2 . getReturnValue ( ) . METHOD_8 ( VAR_1 . getId ( ) ) )  TYPE_2 . getReturnValue ( ) . METHOD_8 ( VAR_1 . getId ( ) ) (  TYPE_2 . METHOD_9 ( true ) )  TYPE_2 . METHOD_9 ( true ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<java.lang.Boolean,java.lang.String> ) TYPE TYPE_1<java.lang.Boolean,java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 < java.lang.Boolean , java.lang.String > ( true , STRING_1 ) ) INIT = new TYPE_1 < java.lang.Boolean , java.lang.String > ( true , STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1<java.lang.Boolean,java.lang.String> ) TYPE TYPE_1<java.lang.Boolean,java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 < java.lang.Boolean , java.lang.String > ( true , STRING_1 ) ) INIT = new TYPE_1 < java.lang.Boolean , java.lang.String > ( true , STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1<java.lang.Boolean,java.lang.String> ) TYPE TYPE_1<java.lang.Boolean,java.lang.String> ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_1 < java.lang.Boolean , java.lang.String > ( false , STRING_1 ) ) INIT = new TYPE_1 < java.lang.Boolean , java.lang.String > ( false , STRING_1 ) ) VAR VAR (  TYPE_2 . METHOD_2 ( VAR_1 . equals ( VAR_2 ) ) )  TYPE_2 . METHOD_2 ( VAR_1 . equals ( VAR_2 ) ) (  TYPE_2 . METHOD_3 ( VAR_1 . equals ( VAR_3 ) ) )  TYPE_2 . METHOD_3 ( VAR_1 . equals ( VAR_3 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME id ) NAME id ( INIT = TYPE_1 . getParameters ( ) . getId ( ) ) INIT = TYPE_1 . getParameters ( ) . getId ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( IN org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( id ) ) IN org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( id ) ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME tempVar ) NAME tempVar ( INIT = new TYPE_3 ( VAR_1 ) ) INIT = new TYPE_3 ( VAR_1 ) ) VAR VAR (  tempVar . METHOD_4 ( false ) )  tempVar . METHOD_4 ( false ) (  TYPE_4 . getInstance ( ) . METHOD_5 ( VAR_2 , tempVar , TYPE_5 . METHOD_6 ( TYPE_1 . METHOD_7 ( ) ) ) )  TYPE_4 . getInstance ( ) . METHOD_5 ( VAR_2 , tempVar , TYPE_5 . METHOD_6 ( TYPE_1 . METHOD_7 ( ) ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  TYPE_1 . METHOD_8 ( ) . METHOD_9 ( id ) )  TYPE_1 . METHOD_8 ( ) . METHOD_9 ( id ) (  TYPE_1 . METHOD_10 ( true ) )  TYPE_1 . METHOD_10 ( true ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source != null ? ( ( java.lang.Integer ) ( source ) ) . METHOD_2 ( ) : 1 ; )  return source != null ? ( ( java.lang.Integer ) ( source ) ) . METHOD_2 ( ) : 1 ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . METHOD_2 ( ) : 1 ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . METHOD_2 ( ) : 1 ; } } (  TYPE_1 . METHOD_3 ( new TYPE_2 ( VAR_1 , TYPE_1 . METHOD_4 ( ) ) , aQuery ) )  TYPE_1 . METHOD_3 ( new TYPE_2 ( VAR_1 , TYPE_1 . METHOD_4 ( ) ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < java.lang.String > ( ) ) INIT = new java.util.ArrayList < java.lang.String > ( ) ) VAR VAR (  VAR_1 . add ( STRING_1 ) )  VAR_1 . add ( STRING_1 ) (  TYPE_1 . METHOD_2 ( VAR_2 ) )  TYPE_1 . METHOD_2 ( VAR_2 ) (  TYPE_2 . METHOD_3 ( VAR_2 . METHOD_4 ( VAR_3 ) ) . METHOD_5 ( VAR_1 ) )  TYPE_2 . METHOD_3 ( VAR_2 . METHOD_4 ( VAR_3 ) ) . METHOD_5 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface ( NAME iface ) NAME iface ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  METHOD_3 ( iface , false , iface . METHOD_4 ( ) , ( ! ( iface . METHOD_5 ( ) ) ) , 0 , TYPE_1 . instance ( ) . METHOD_6 ( ) , METHOD_7 ( ) ) )  METHOD_3 ( iface , false , iface . METHOD_4 ( ) , ( ! ( iface . METHOD_5 ( ) ) ) , 0 , TYPE_1 . instance ( ) . METHOD_6 ( ) , METHOD_7 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<TYPE_1.VdcActionParametersBase> ) TYPE java.util.ArrayList<TYPE_1.VdcActionParametersBase> ( NAME list ) NAME list ( INIT = new java.util.ArrayList < TYPE_1 . VdcActionParametersBase > ( ) ) INIT = new java.util.ArrayList < TYPE_1 . VdcActionParametersBase > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME item ) NAME item ( IN METHOD_2 ( ) ) IN METHOD_2 ( ) ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDS ) TYPE org.ovirt.engine.core.common.businessentities.VDS ( NAME vds ) NAME vds ( INIT = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( item ) ) ) INIT = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( item ) ) ) VAR VAR (  list . add ( new TYPE_2 ( vds . getId ( ) ) ) )  list . add ( new TYPE_2 ( vds . getId ( ) ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_4 ) NAME METHOD_4 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ) BLOCK BLOCK ) METHOD METHOD (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_3 ( VAR_1 , list , new TYPE_3 ( ) { public void METHOD_4 ( TYPE_4 result ) { } } , null ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_3 ( VAR_1 , list , new TYPE_3 ( ) { public void METHOD_4 ( TYPE_4 result ) { } } , null ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_1 . METHOD_2 ( VAR_2 ) )  VAR_1 . METHOD_2 ( VAR_2 ) (  org.mockito.Mockito.when ( VAR_3 . get ( TYPE_2 . any ( VAR_4 . Guid class ) ) ) . thenReturn ( TYPE_3 . METHOD_3 ( ) ) )  org.mockito.Mockito.when ( VAR_3 . get ( TYPE_2 . any ( VAR_4 . Guid class ) ) ) . thenReturn ( TYPE_3 . METHOD_3 ( ) ) (  org.mockito.Mockito.when ( VAR_5 . METHOD_4 ( TYPE_2 . any ( VAR_4 . Guid class ) ) ) . thenReturn ( TYPE_4 . METHOD_5 ( VAR_1 ) ) )  org.mockito.Mockito.when ( VAR_5 . METHOD_4 ( TYPE_2 . any ( VAR_4 . Guid class ) ) ) . thenReturn ( TYPE_4 . METHOD_5 ( VAR_1 ) ) (  TYPE_5 . METHOD_6 ( cmd ) )  TYPE_5 . METHOD_6 ( cmd ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( command ) . METHOD_2 ( ) )  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( command ) . METHOD_2 ( ) ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME storageDomain ) NAME storageDomain ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  org.mockito.Mockito.when ( VAR_2 . METHOD_3 ( storageDomain . getId ( ) , VAR_3 ) ) . thenReturn ( storageDomain ) )  org.mockito.Mockito.when ( VAR_2 . METHOD_3 ( storageDomain . getId ( ) , VAR_3 ) ) . thenReturn ( storageDomain ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME vds ) NAME vds ( INIT = VAR_1 . METHOD_2 ( ) . get ( VAR_2 ) ) INIT = VAR_1 . METHOD_2 ( ) . get ( VAR_2 ) ) VAR VAR (  TYPE_2 . METHOD_3 ( vds ) )  TYPE_2 . METHOD_3 ( vds ) ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ( INIT = vds . METHOD_4 ( ) ) INIT = vds . METHOD_4 ( ) ) VAR VAR (  TYPE_2 . METHOD_5 ( name . equals ( VAR_1 . METHOD_6 ( VAR_2 , VAR_3 . VDS ) ) ) )  TYPE_2 . METHOD_5 ( name . equals ( VAR_1 . METHOD_6 ( VAR_2 , VAR_3 . VDS ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 ) )  METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 ) ( IF IF ( COND VAR_8 . METHOD_3 ( ) . getValue ( ) ) COND VAR_8 . METHOD_3 ( ) . getValue ( ) ( THEN THEN (  METHOD_4 ( VAR_9 ) )  METHOD_4 ( VAR_9 ) (  METHOD_5 ( ) )  METHOD_5 ( ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND VAR_10 . METHOD_3 ( ) . getValue ( ) ) COND VAR_10 . METHOD_3 ( ) . getValue ( ) ( THEN THEN (  METHOD_4 ( VAR_11 ) )  METHOD_4 ( VAR_11 ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND VAR_12 . METHOD_3 ( ) . getValue ( ) ) COND VAR_12 . METHOD_3 ( ) . getValue ( ) ( THEN THEN (  METHOD_4 ( VAR_13 ) )  METHOD_4 ( VAR_13 ) ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_2 . METHOD_2 ( VAR_1 ) ) ) COND ! ( VAR_2 . METHOD_2 ( VAR_1 ) ) ( THEN THEN ( VAR VAR ( TYPE org.ovirt.engine.ui.uicommonweb.models.EntityModel ) TYPE org.ovirt.engine.ui.uicommonweb.models.EntityModel ( NAME VAR_3 ) NAME VAR_3 ( INIT = new org.ovirt.engine.ui.uicommonweb.models.EntityModel ( ) ) INIT = new org.ovirt.engine.ui.uicommonweb.models.EntityModel ( ) ) VAR VAR (  VAR_3 . setEntity ( VAR_1 ) )  VAR_3 . setEntity ( VAR_1 ) ( VAR VAR ( TYPE TYPE_1<java.lang.String,org.ovirt.engine.ui.uicommonweb.models.EntityModel> ) TYPE TYPE_1<java.lang.String,org.ovirt.engine.ui.uicommonweb.models.EntityModel> ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_2 < java.lang.String , org.ovirt.engine.ui.uicommonweb.models.EntityModel > ( STRING_1 , VAR_3 ) ) INIT = new TYPE_2 < java.lang.String , org.ovirt.engine.ui.uicommonweb.models.EntityModel > ( STRING_1 , VAR_3 ) ) VAR VAR (  VAR_5 . add ( VAR_4 ) )  VAR_5 . add ( VAR_4 ) (  VAR_2 . put ( VAR_1 , VAR_4 ) )  VAR_2 . put ( VAR_1 , VAR_4 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source != null ? ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; )  return source != null ? ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; } } ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( STRING_1 , VAR_2 . StorageDomain ) ) INIT = new TYPE_2 ( STRING_1 , VAR_2 . StorageDomain ) ) VAR VAR (  VAR_1 . METHOD_2 ( INT_1 ) )  VAR_1 . METHOD_2 ( INT_1 ) (  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_3 , VAR_1 , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_3 , VAR_1 , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  parameters = new TYPE_1 ( TYPE_2 . METHOD_2 ( ) ) )  parameters = new TYPE_1 ( TYPE_2 . METHOD_2 ( ) ) (  command = org.mockito.Mockito . METHOD_3 ( new TYPE_3 ( parameters , null ) ) )  command = org.mockito.Mockito . METHOD_3 ( new TYPE_3 ( parameters , null ) ) (  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_4 ( ) )  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_4 ( ) (  org.mockito.Mockito . METHOD_5 ( ) . when ( command ) . METHOD_6 ( ) )  org.mockito.Mockito . METHOD_5 ( ) . when ( command ) . METHOD_6 ( ) (  org.mockito.Mockito . METHOD_5 ( ) . when ( command ) . METHOD_7 ( ) )  org.mockito.Mockito . METHOD_5 ( ) . when ( command ) . METHOD_7 ( ) (  org.mockito.Mockito . METHOD_5 ( ) . when ( command ) . METHOD_8 ( TYPE_4 . METHOD_9 ( VAR_2 class ) ) )  org.mockito.Mockito . METHOD_5 ( ) . when ( command ) . METHOD_8 ( TYPE_4 . METHOD_9 ( VAR_2 class ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN java.util.List<java.lang.String> ) RETURN java.util.List<java.lang.String> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME object ) NAME object ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = super . METHOD_1 ( object ) ) INIT = super . METHOD_1 ( object ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( ) . METHOD_3 ( ) . getName ( ) ) INIT = METHOD_2 ( ) . METHOD_3 ( ) . getName ( ) ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < ( VAR_1 . size ( ) ) ) COND i < ( VAR_1 . size ( ) ) ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK ( IF IF ( COND VAR_1 . get ( i ) . equals ( VAR_2 ) ) COND VAR_1 . get ( i ) . equals ( VAR_2 ) ( THEN THEN (  VAR_1 . METHOD_4 ( i ) )  VAR_1 . METHOD_4 ( i ) (  break ; )  break ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR FOR (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME command ) NAME command ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME dao ) NAME dao ( INIT = org.mockito.Mockito . METHOD_2 ( VAR_2 class ) ) INIT = org.mockito.Mockito . METHOD_2 ( VAR_2 class ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME domain ) NAME domain ( INIT = new TYPE_4 ( ) ) INIT = new TYPE_4 ( ) ) VAR VAR (  domain . METHOD_3 ( VAR_1 ) )  domain . METHOD_3 ( VAR_1 ) (  org.mockito.Mockito.when ( dao . get ( TYPE_5 . any ( VAR_3 . Guid class ) ) ) . thenReturn ( domain ) )  org.mockito.Mockito.when ( dao . get ( TYPE_5 . any ( VAR_3 . Guid class ) ) ) . thenReturn ( domain ) (  org.mockito.Mockito.doReturn ( dao ) . when ( command ) . METHOD_4 ( ) )  org.mockito.Mockito.doReturn ( dao ) . when ( command ) . METHOD_4 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( VAR_2 ) )  VAR_1 . METHOD_2 ( VAR_2 ) (  VAR_3 . METHOD_3 ( ) )  VAR_3 . METHOD_3 ( ) (  org.mockito.Mockito . METHOD_4 ( VAR_3 ) . METHOD_5 ( VAR_4 ) )  org.mockito.Mockito . METHOD_4 ( VAR_3 ) . METHOD_5 ( VAR_4 ) (  org.mockito.Mockito . METHOD_4 ( VAR_3 , org.mockito.Mockito . METHOD_6 ( 1 ) ) . METHOD_5 ( TYPE_1 . any ( VAR_5 . VM class ) ) )  org.mockito.Mockito . METHOD_4 ( VAR_3 , org.mockito.Mockito . METHOD_6 ( 1 ) ) . METHOD_5 ( TYPE_1 . any ( VAR_5 . VM class ) ) (  org.mockito.Mockito . METHOD_4 ( VAR_3 , org.mockito.Mockito . METHOD_6 ( 0 ) ) . METHOD_5 ( TYPE_1 . METHOD_7 ( VAR_6 ) ) )  org.mockito.Mockito . METHOD_4 ( VAR_3 , org.mockito.Mockito . METHOD_6 ( 0 ) ) . METHOD_5 ( TYPE_1 . METHOD_7 ( VAR_6 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_1 ) ( model ) ) ) INIT = ( ( TYPE_1 ) ( model ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.HashMap<java.lang.Boolean,org.ovirt.engine.core.common.businessentities.VmTemplate> ) TYPE java.util.HashMap<java.lang.Boolean,org.ovirt.engine.core.common.businessentities.VmTemplate> ( NAME map ) NAME map ( INIT = ( ( java.util.HashMap < java.lang.Boolean , org.ovirt.engine.core.common.businessentities.VmTemplate > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) ) ) INIT = ( ( java.util.HashMap < java.lang.Boolean , org.ovirt.engine.core.common.businessentities.VmTemplate > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VmTemplate> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VmTemplate> ( NAME VAR_3 ) NAME VAR_3 ( INIT = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmTemplate > ( ) ) INIT = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmTemplate > ( ) ) VAR VAR (  VAR_3 . add ( map . get ( true ) ) )  VAR_3 . add ( map . get ( true ) ) (  VAR_2 . setItems ( VAR_3 ) )  VAR_2 . setItems ( VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1.AsyncQuery ) RETURN TYPE_1.AsyncQuery ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.AsyncQuery ) TYPE TYPE_1.AsyncQuery ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 . AsyncQuery ( ) ) INIT = new TYPE_1 . AsyncQuery ( ) ) VAR VAR ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( ( ( TYPE_3 ) ( ( ( TYPE_4 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ) )  METHOD_2 ( ( ( TYPE_3 ) ( ( ( TYPE_4 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ) ) BLOCK BLOCK ) METHOD METHOD (  VAR_2 = new TYPE_2 ( ) { public void onSuccess ( java.lang.Object returnValue ) { METHOD_2 ( ( ( TYPE_3 ) ( ( ( TYPE_4 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ) ; } } )  VAR_2 = new TYPE_2 ( ) { public void onSuccess ( java.lang.Object returnValue ) { METHOD_2 ( ( ( TYPE_3 ) ( ( ( TYPE_4 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ) ; } } (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME status ) NAME status ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( VAR_1 . METHOD_2 ( ) ) != null ) && ( ( VAR_1 . METHOD_2 ( ) . getStatus ( ) ) == status ) ) COND ( ( VAR_1 . METHOD_2 ( ) ) != null ) && ( ( VAR_1 . METHOD_2 ( ) . getStatus ( ) ) == status ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.uicommonweb.UICommand ) TYPE org.ovirt.engine.ui.uicommonweb.UICommand ( NAME command ) NAME command ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  super . METHOD_1 ( command ) )  super . METHOD_1 ( command ) ( IF IF ( COND command == ( METHOD_2 ( ) ) ) COND command == ( METHOD_2 ( ) ) ( THEN THEN (  METHOD_3 ( ) )  METHOD_3 ( ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND command == ( METHOD_4 ( ) ) ) COND command == ( METHOD_4 ( ) ) ( THEN THEN (  METHOD_5 ( ) )  METHOD_5 ( ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND TYPE_1 . METHOD_6 ( command . getName ( ) , STRING_1 ) ) COND TYPE_1 . METHOD_6 ( command . getName ( ) , STRING_1 ) ( THEN THEN (  METHOD_7 ( ) )  METHOD_7 ( ) ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = org.mockito.Mockito . METHOD_2 ( VAR_2 class ) ) INIT = org.mockito.Mockito . METHOD_2 ( VAR_2 class ) ) VAR VAR (  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( validator ) . METHOD_3 ( TYPE_2 . any ( VAR_3 class ) ) )  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( validator ) . METHOD_3 ( TYPE_2 . any ( VAR_3 class ) ) (  TYPE_3 . METHOD_4 ( validator . METHOD_5 ( TYPE_2 . METHOD_6 ( ) , TYPE_2 . any ( ) ) . METHOD_7 ( ) ) )  TYPE_3 . METHOD_4 ( validator . METHOD_5 ( TYPE_2 . METHOD_6 ( ) , TYPE_2 . any ( ) ) . METHOD_7 ( ) ) (  org.mockito.Mockito . METHOD_8 ( VAR_1 , org.mockito.Mockito . METHOD_9 ( VAR_4 ) ) . METHOD_10 ( TYPE_2 . any ( ) , TYPE_2 . any ( ) ) )  org.mockito.Mockito . METHOD_8 ( VAR_1 , org.mockito.Mockito . METHOD_9 ( VAR_4 ) ) . METHOD_10 ( TYPE_2 . any ( ) , TYPE_2 . any ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND VAR_1 . METHOD_2 ( ) ) COND VAR_1 . METHOD_2 ( ) ( THEN THEN ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_3 ( ) ) INIT = METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_2 . METHOD_4 ( ) ) INIT = TYPE_2 . METHOD_4 ( ) ) VAR VAR ( IF IF ( COND VAR_2 . METHOD_5 ( ) ) COND VAR_2 . METHOD_5 ( ) ( THEN THEN (  METHOD_6 ( VAR_3 ) . METHOD_7 ( VAR_2 . METHOD_8 ( ) ) )  METHOD_6 ( VAR_3 ) . METHOD_7 ( VAR_2 . METHOD_8 ( ) ) (  METHOD_9 ( VAR_2 . METHOD_10 ( ) . METHOD_11 ( ) . map ( TYPE_3 : : METHOD_12 ) , VAR_3 ) )  METHOD_9 ( VAR_2 . METHOD_10 ( ) . METHOD_11 ( ) . map ( TYPE_3 : : METHOD_12 ) , VAR_3 ) ) THEN THEN ( ELSE ELSE (  VAR_4 . METHOD_13 ( STRING_1 , VAR_1 . METHOD_14 ( ) ) )  VAR_4 . METHOD_13 ( STRING_1 , VAR_1 . METHOD_14 ( ) ) ) ELSE ELSE ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME object ) NAME object ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  super . METHOD_1 ( object ) )  super . METHOD_1 ( object ) (  VAR_1 . METHOD_1 ( object . METHOD_2 ( ) ) )  VAR_1 . METHOD_1 ( object . METHOD_2 ( ) ) (  VAR_2 . METHOD_3 ( true ) )  VAR_2 . METHOD_3 ( true ) (  VAR_3 . METHOD_3 ( false ) )  VAR_3 . METHOD_3 ( false ) (  VAR_1 . METHOD_3 ( true ) )  VAR_1 . METHOD_3 ( true ) (  VAR_4 . METHOD_3 ( false ) )  VAR_4 . METHOD_3 ( false ) (  VAR_5 . METHOD_3 ( false ) )  VAR_5 . METHOD_3 ( false ) (  VAR_6 . METHOD_4 ( VAR_7 ) )  VAR_6 . METHOD_4 ( VAR_7 ) (  VAR_6 . METHOD_5 ( ) . METHOD_6 ( ) . METHOD_7 ( VAR_8 ) )  VAR_6 . METHOD_5 ( ) . METHOD_6 ( ) . METHOD_7 ( VAR_8 ) (  METHOD_8 ( ) . METHOD_9 ( INT_1 , INT_2 ) )  METHOD_8 ( ) . METHOD_9 ( INT_1 , INT_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_2 ) ( getWindow ( ) ) ) ) INIT = ( ( TYPE_2 ) ( getWindow ( ) ) ) ) VAR VAR (  VAR_1 . METHOD_2 ( ) . METHOD_3 ( ( ( org.ovirt.engine.core.compat.Guid ) ( returnValue . METHOD_4 ( ) ) ) ) )  VAR_1 . METHOD_2 ( ) . METHOD_3 ( ( ( org.ovirt.engine.core.compat.Guid ) ( returnValue . METHOD_4 ( ) ) ) ) (  METHOD_5 ( VAR_1 ) )  METHOD_5 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  TYPE_1 . when ( VAR_1 . get ( TYPE_2 . any ( VAR_2 . Guid class ) ) ) . thenReturn ( TYPE_3 . METHOD_3 ( ) ) )  TYPE_1 . when ( VAR_1 . get ( TYPE_2 . any ( VAR_2 . Guid class ) ) ) . thenReturn ( TYPE_3 . METHOD_3 ( ) ) (  TYPE_1 . when ( VAR_1 . METHOD_4 ( TYPE_2 . METHOD_5 ( ) ) ) . thenReturn ( TYPE_3 . METHOD_3 ( ) ) )  TYPE_1 . when ( VAR_1 . METHOD_4 ( TYPE_2 . METHOD_5 ( ) ) ) . thenReturn ( TYPE_3 . METHOD_3 ( ) ) (  TYPE_3 . METHOD_6 ( ) )  TYPE_3 . METHOD_6 ( ) (  TYPE_3 . METHOD_7 ( ) )  TYPE_3 . METHOD_7 ( ) (  METHOD_8 ( ) )  METHOD_8 ( ) (  METHOD_9 ( ) )  METHOD_9 ( ) (  METHOD_10 ( VAR_3 ) )  METHOD_10 ( VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  VAR_1 . METHOD_3 ( org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) ) )  VAR_1 . METHOD_3 ( org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) ) (  org.mockito.Mockito.when ( VAR_2 . METHOD_5 ( TYPE_1 . any ( VAR_3 . Guid class ) ) ) . thenReturn ( null ) )  org.mockito.Mockito.when ( VAR_2 . METHOD_5 ( TYPE_1 . any ( VAR_3 . Guid class ) ) ) . thenReturn ( null ) (  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( command ) . METHOD_6 ( ) )  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( command ) . METHOD_6 ( ) (  TYPE_2 . METHOD_7 ( command . METHOD_8 ( VAR_1 . METHOD_9 ( ) ) ) )  TYPE_2 . METHOD_7 ( command . METHOD_8 ( VAR_1 . METHOD_9 ( ) ) ) (  TYPE_3 . METHOD_10 ( STRING_1 , command , VAR_4 ) )  TYPE_3 . METHOD_10 ( STRING_1 , command , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( cmd ) . METHOD_2 ( ) )  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( cmd ) . METHOD_2 ( ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  VAR_4 . METHOD_3 ( VAR_1 ) )  VAR_4 . METHOD_3 ( VAR_1 ) ( IF IF ( COND ! VAR_1 ) COND ! VAR_1 ( THEN THEN (  VAR_4 . METHOD_4 ( new TYPE_3 ( VAR_2 , STRING_1 ) ) )  VAR_4 . METHOD_4 ( new TYPE_3 ( VAR_2 , STRING_1 ) ) ) THEN THEN ) IF IF (  org.mockito.Mockito.when ( VAR_5 . METHOD_5 ( TYPE_4 . METHOD_6 ( VAR_6 ) , TYPE_4 . any ( ) ) ) . thenReturn ( VAR_4 ) )  org.mockito.Mockito.when ( VAR_5 . METHOD_5 ( TYPE_4 . METHOD_6 ( VAR_6 ) , TYPE_4 . any ( ) ) ) . thenReturn ( VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.doReturn ( METHOD_2 ( ) ) . when ( VAR_1 ) . METHOD_3 ( VAR_2 [ 1 ] ) )  org.mockito.Mockito.doReturn ( METHOD_2 ( ) ) . when ( VAR_1 ) . METHOD_3 ( VAR_2 [ 1 ] ) (  METHOD_4 ( ) )  METHOD_4 ( ) (  VAR_3 . METHOD_5 ( ) )  VAR_3 . METHOD_5 ( ) (  org.mockito.Mockito . METHOD_6 ( VAR_4 , org.mockito.Mockito . METHOD_7 ( 2 ) ) . METHOD_8 ( TYPE_1 . any ( VAR_5 class ) , TYPE_1 . any ( VAR_6 class ) , TYPE_1 . METHOD_9 ( ) ) )  org.mockito.Mockito . METHOD_6 ( VAR_4 , org.mockito.Mockito . METHOD_7 ( 2 ) ) . METHOD_8 ( TYPE_1 . any ( VAR_5 class ) , TYPE_1 . any ( VAR_6 class ) , TYPE_1 . METHOD_9 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( VAR_1 ) . METHOD_2 ( ) )  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( VAR_1 ) . METHOD_2 ( ) (  org.mockito.Mockito.doReturn ( METHOD_3 ( ) ) . when ( VAR_2 ) . METHOD_4 ( ) )  org.mockito.Mockito.doReturn ( METHOD_3 ( ) ) . when ( VAR_2 ) . METHOD_4 ( ) (  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( VAR_1 ) . METHOD_5 ( ) )  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( VAR_1 ) . METHOD_5 ( ) (  org.mockito.Mockito.doReturn ( METHOD_6 ( VAR_4 , VAR_5 ) ) . when ( VAR_3 ) . get ( VAR_4 ) )  org.mockito.Mockito.doReturn ( METHOD_6 ( VAR_4 , VAR_5 ) ) . when ( VAR_3 ) . get ( VAR_4 ) (  org.mockito.Mockito.doReturn ( METHOD_6 ( VAR_6 , VAR_5 ) ) . when ( VAR_3 ) . get ( VAR_6 ) )  org.mockito.Mockito.doReturn ( METHOD_6 ( VAR_6 , VAR_5 ) ) . when ( VAR_3 ) . get ( VAR_6 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.List<org.ovirt.engine.core.compat.Guid> ) RETURN java.util.List<org.ovirt.engine.core.compat.Guid> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( result == null ) || ( ! ( result instanceof java.lang.Object [ ] ) ) ) COND ( result == null ) || ( ! ( result instanceof java.lang.Object [ ] ) ) ( THEN THEN (  VAR_1 . error ( STRING_1 ) )  VAR_1 . error ( STRING_1 ) (  return null ; )  return null ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.compat.Guid> ) TYPE java.util.List<org.ovirt.engine.core.compat.Guid> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 < org.ovirt.engine.core.compat.Guid > ( ) ) INIT = new TYPE_1 < org.ovirt.engine.core.compat.Guid > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_3 ) NAME VAR_3 ( IN ( ( java.lang.Object [ ] ) ( result ) ) ) IN ( ( java.lang.Object [ ] ) ( result ) ) ( BLOCK BLOCK (  VAR_2 . add ( new org.ovirt.engine.core.compat.Guid ( VAR_3 . toString ( ) ) ) )  VAR_2 . add ( new org.ovirt.engine.core.compat.Guid ( VAR_3 . toString ( ) ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME map ) NAME map ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME template ) NAME template ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME type ) NAME type ( INIT = TYPE_3 . valueOf ( VAR_1 . METHOD_1 ( ) ) ) INIT = TYPE_3 . valueOf ( VAR_1 . METHOD_1 ( ) ) ) VAR VAR ( IF IF ( COND template != null ) COND template != null ( THEN THEN (  return template ; )  return template ; ) THEN THEN ) IF IF ( SWITCH SWITCH ( NAME type ) NAME type ( CASE VAR_2 ( BLOCK BLOCK (  return new TYPE_1 ( VAR_3 ) ; )  return new TYPE_1 ( VAR_3 ) ; ) BLOCK BLOCK ) CASE VAR_2 ( CASE VAR_4 ( BLOCK BLOCK (  return new TYPE_1 ( VAR_5 ) ; )  return new TYPE_1 ( VAR_5 ) ; ) BLOCK BLOCK ) CASE VAR_4 ( DEFAULT DEFAULT ( BLOCK BLOCK (  return template ; )  return template ; ) BLOCK BLOCK ) DEFAULT DEFAULT ) SWITCH SWITCH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) ( VAR VAR ( TYPE java.util.ArrayList<TYPE_1.VdcQueryType> ) TYPE java.util.ArrayList<TYPE_1.VdcQueryType> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < TYPE_1 . VdcQueryType > ( ) ) INIT = new java.util.ArrayList < TYPE_1 . VdcQueryType > ( ) ) VAR VAR (  VAR_1 . add ( VAR_2 ) )  VAR_1 . add ( VAR_2 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  VAR_3 . METHOD_2 ( VAR_4 ) )  VAR_3 . METHOD_2 ( VAR_4 ) ( VAR VAR ( TYPE java.util.ArrayList<TYPE_3> ) TYPE java.util.ArrayList<TYPE_3> ( NAME VAR_5 ) NAME VAR_5 ( INIT = new java.util.ArrayList < TYPE_3 > ( TYPE_4 . METHOD_3 ( new TYPE_3 [ ] { VAR_3 } ) ) ) INIT = new java.util.ArrayList < TYPE_3 > ( TYPE_4 . METHOD_3 ( new TYPE_3 [ ] { VAR_3 } ) ) ) VAR VAR (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_4 ( VAR_1 , VAR_5 , this , getModel ( ) . METHOD_5 ( ) ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_4 ( VAR_1 , VAR_5 , this , getModel ( ) . METHOD_5 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME model ) NAME model ( INIT = new TYPE_1 ( this , VAR_1 ) ) INIT = new TYPE_1 ( this , VAR_1 ) ) VAR VAR (  model . setTitle ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_2 ( ) ) )  model . setTitle ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_2 ( ) ) (  model . METHOD_3 ( STRING_1 ) )  model . METHOD_3 ( STRING_1 ) (  model . METHOD_4 ( VAR_2 ) )  model . METHOD_4 ( VAR_2 ) (  METHOD_5 ( model ) )  METHOD_5 ( model ) (  model . setEntity ( ( ( TYPE_2 ) ( getSelectedItem ( ) ) ) ) )  model . setEntity ( ( ( TYPE_2 ) ( getSelectedItem ( ) ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( 1 ) )  METHOD_2 ( 1 ) (  METHOD_3 ( METHOD_4 ( VAR_1 , VAR_2 class , new java.lang.String [ ] { STRING_1 , STRING_2 } , new java.lang.Object [ ] { VAR_3 [ 0 ] , java.lang.Boolean . FALSE } , VAR_3 [ 0 ] ) ) )  METHOD_3 ( METHOD_4 ( VAR_1 , VAR_2 class , new java.lang.String [ ] { STRING_1 , STRING_2 } , new java.lang.Object [ ] { VAR_3 [ 0 ] , java.lang.Boolean . FALSE } , VAR_3 [ 0 ] ) ) (  METHOD_5 ( resource . METHOD_6 ( new TYPE_1 ( ) ) ) )  METHOD_5 ( resource . METHOD_6 ( new TYPE_1 ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME result ) NAME result ( INIT = dao . METHOD_2 ( java.lang.String . METHOD_3 ( STRING_1 , VAR_1 ) ) ) INIT = dao . METHOD_2 ( java.lang.String . METHOD_3 ( STRING_1 , VAR_1 ) ) ) VAR VAR (  TYPE_2 . METHOD_4 ( result . isEmpty ( ) ) )  TYPE_2 . METHOD_4 ( result . isEmpty ( ) ) (  TYPE_2 . assertEquals ( VAR_1 , result . get ( 0 ) . METHOD_5 ( ) . getId ( ) ) )  TYPE_2 . assertEquals ( VAR_1 , result . get ( 0 ) . METHOD_5 ( ) . getId ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME vmId ) NAME vmId ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return TYPE_2 . METHOD_2 ( new TYPE_3 ( VAR_1 , vmId ) , VAR_5 , ( VAR_3 ? VAR_6 : VAR_7 ) , VAR_8 , VAR_2 , false , VAR_4 , null , false ) ; )  return TYPE_2 . METHOD_2 ( new TYPE_3 ( VAR_1 , vmId ) , VAR_5 , ( VAR_3 ? VAR_6 : VAR_7 ) , VAR_8 , VAR_2 , false , VAR_4 , null , false ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ( INIT = true ) INIT = true ) VAR VAR ( IF IF ( COND VAR_2 . isEmpty ( ) ) COND VAR_2 . isEmpty ( ) ( THEN THEN (  VAR_1 = METHOD_2 ( ) )  VAR_1 = METHOD_2 ( ) ) THEN THEN ( ELSE ELSE (  VAR_1 = METHOD_3 ( ) )  VAR_1 = METHOD_3 ( ) ) ELSE ELSE ) IF IF ( IF IF ( COND VAR_1 && ( ( METHOD_4 ( ) . size ( ) ) != ( VAR_2 . size ( ) ) ) ) COND VAR_1 && ( ( METHOD_4 ( ) . size ( ) ) != ( VAR_2 . size ( ) ) ) ( THEN THEN (  log . error ( STRING_1 , VAR_3 . getId ( ) ) )  log . error ( STRING_1 , VAR_3 . getId ( ) ) (  METHOD_5 ( VAR_4 ) )  METHOD_5 ( VAR_4 ) (  VAR_1 = false )  VAR_1 = false ) THEN THEN ) IF IF (  return VAR_1 && ( METHOD_6 ( ) ) ; )  return VAR_1 && ( METHOD_6 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  params = new TYPE_1 ( quota ) )  params = new TYPE_1 ( quota ) (  command = org.mockito.Mockito . METHOD_3 ( new TYPE_2 ( params ) ) )  command = org.mockito.Mockito . METHOD_3 ( new TYPE_2 ( params ) ) (  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_4 ( ) )  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_4 ( ) (  org.mockito.Mockito . METHOD_5 ( ) . when ( command ) . METHOD_6 ( ) )  org.mockito.Mockito . METHOD_5 ( ) . when ( command ) . METHOD_6 ( ) (  org.mockito.Mockito . METHOD_5 ( ) . when ( command ) . METHOD_7 ( ) )  org.mockito.Mockito . METHOD_5 ( ) . when ( command ) . METHOD_7 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_1 . METHOD_2 ( VAR_2 ) )  VAR_1 . METHOD_2 ( VAR_2 ) (  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( command ) . METHOD_3 ( ) )  org.mockito.Mockito.doReturn ( VAR_3 ) . when ( command ) . METHOD_3 ( ) (  org.mockito.Mockito.when ( VAR_3 . METHOD_4 ( TYPE_2 . any ( VAR_4 . Guid class ) , TYPE_2 . any ( VAR_4 . Guid class ) ) ) . thenReturn ( VAR_1 ) )  org.mockito.Mockito.when ( VAR_3 . METHOD_4 ( TYPE_2 . any ( VAR_4 . Guid class ) , TYPE_2 . any ( VAR_4 . Guid class ) ) ) . thenReturn ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME value ) NAME value ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_2 . METHOD_2 ( VAR_1 , VAR_2 , value ) ) INIT = TYPE_2 . METHOD_2 ( VAR_1 , VAR_2 , value ) ) VAR VAR (  TYPE_3 . METHOD_3 ( VAR_4 . toString ( ) , TYPE_4 . METHOD_4 ( TYPE_5 . METHOD_5 ( VAR_3 ) ) ) )  TYPE_3 . METHOD_3 ( VAR_4 . toString ( ) , TYPE_4 . METHOD_4 ( TYPE_5 . METHOD_5 ( VAR_3 ) ) ) (  return VAR_4 ; )  return VAR_4 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.Integer ) TYPE java.lang.Integer ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 < java.lang.Integer > METHOD_2 ( VAR_3 ) ) INIT = VAR_2 < java.lang.Integer > METHOD_2 ( VAR_3 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_3 ( ) . addValue ( STRING_1 , VAR_1 . METHOD_4 ( ) ) ) INIT = METHOD_3 ( ) . addValue ( STRING_1 , VAR_1 . METHOD_4 ( ) ) ) VAR VAR (  return METHOD_5 ( ) . METHOD_6 ( STRING_2 , VAR_5 . instance , VAR_4 ) ; )  return METHOD_5 ( ) . METHOD_6 ( STRING_2 , VAR_5 . instance , VAR_4 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN org.ovirt.engine.core.compat.Guid ) RETURN org.ovirt.engine.core.compat.Guid ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) == null ) COND ( VAR_1 ) == null ( THEN THEN ( VAR VAR ( TYPE java.util.List<TYPE_1.DiskImage> ) TYPE java.util.List<TYPE_1.DiskImage> ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_2 ( TYPE_3 . getVm ( ) . METHOD_3 ( ) , VAR_3 ) ) INIT = TYPE_2 . METHOD_2 ( TYPE_3 . getVm ( ) . METHOD_3 ( ) , VAR_3 ) ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ) TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME storageDomain ) NAME storageDomain ( INIT = TYPE_4 . METHOD_4 ( TYPE_3 . getStoragePoolId ( ) , VAR_2 ) ) INIT = TYPE_4 . METHOD_4 ( TYPE_3 . getStoragePoolId ( ) , VAR_2 ) ) VAR VAR ( IF IF ( COND storageDomain != null ) COND storageDomain != null ( THEN THEN (  VAR_1 = storageDomain . getId ( ) )  VAR_1 = storageDomain . getId ( ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME model ) NAME model ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME result ) NAME result ( INIT = new java.util.ArrayList < > ( ( model != null ? model . size ( ) : 0 ) ) ) INIT = new java.util.ArrayList < > ( ( model != null ? model . size ( ) : 0 ) ) ) VAR VAR ( IF IF ( COND model != null ) COND model != null ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( IN model ) IN model ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME source ) NAME source ( INIT = TYPE_2 . METHOD_2 ( VAR_1 ) ) INIT = TYPE_2 . METHOD_2 ( VAR_1 ) ) VAR VAR (  result . add ( TYPE_3 . map ( source , null ) ) )  result . add ( TYPE_3 . map ( source , null ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_2 ) NAME VAR_2 ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME vmId ) NAME vmId ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( ) . METHOD_3 ( vmId ) ) INIT = METHOD_2 ( ) . METHOD_3 ( vmId ) ) VAR VAR ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME iface ) NAME iface ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  METHOD_4 ( ) . METHOD_5 ( iface . METHOD_6 ( ) ) )  METHOD_4 ( ) . METHOD_5 ( iface . METHOD_6 ( ) ) ) THEN THEN ) IF IF (  METHOD_2 ( ) . METHOD_7 ( iface . getId ( ) ) )  METHOD_2 ( ) . METHOD_7 ( iface . getId ( ) ) (  METHOD_8 ( ) . METHOD_7 ( iface . getId ( ) ) )  METHOD_8 ( ) . METHOD_7 ( iface . getId ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.DiskImage ) TYPE TYPE_1.DiskImage ( NAME image ) NAME image ( INIT = TYPE_2 . METHOD_2 ( ) ) INIT = TYPE_2 . METHOD_2 ( ) ) VAR VAR (  image . METHOD_3 ( VAR_1 ) )  image . METHOD_3 ( VAR_1 ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME parameters ) NAME parameters ( INIT = TYPE_2 . METHOD_4 ( ) ) INIT = TYPE_2 . METHOD_4 ( ) ) VAR VAR (  parameters . METHOD_5 ( image ) )  parameters . METHOD_5 ( image ) ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ( INIT = org.ovirt.engine.core.compat.Guid . METHOD_6 ( ) ) INIT = org.ovirt.engine.core.compat.Guid . METHOD_6 ( ) ) VAR VAR (  METHOD_7 ( VAR_2 , parameters ) )  METHOD_7 ( VAR_2 , parameters ) (  METHOD_8 ( ) )  METHOD_8 ( ) (  METHOD_9 ( VAR_2 , VAR_3 ) )  METHOD_9 ( VAR_2 , VAR_3 ) (  METHOD_10 ( ) )  METHOD_10 ( ) (  METHOD_11 ( ) )  METHOD_11 ( ) (  METHOD_12 ( ) )  METHOD_12 ( ) (  METHOD_13 ( ) )  METHOD_13 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME parameters ) NAME parameters ( INIT = new TYPE_2 ( VAR_2 , VAR_3 ) ) INIT = new TYPE_2 ( VAR_2 , VAR_3 ) ) VAR VAR (  parameters . METHOD_2 ( VAR_1 ) )  parameters . METHOD_2 ( VAR_1 ) ( VAR VAR ( TYPE TYPE_3.VdcQueryReturnValue ) TYPE TYPE_3.VdcQueryReturnValue ( NAME result ) NAME result ( INIT = VAR_4 . METHOD_3 ( VAR_5 , parameters ) ) INIT = VAR_4 . METHOD_3 ( VAR_5 , parameters ) ) VAR VAR (  return TYPE_1 . from ( ( ( java.lang.Integer ) ( result . getReturnValue ( ) ) ) ) ; )  return TYPE_1 . from ( ( ( java.lang.Integer ) ( result . getReturnValue ( ) ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_3 . METHOD_2 ( VAR_1 . METHOD_3 ( STRING_1 ) ) ) INIT = TYPE_3 . METHOD_2 ( VAR_1 . METHOD_3 ( STRING_1 ) ) ) VAR VAR (  TYPE_4 . METHOD_4 ( STRING_2 , VAR_2 . METHOD_5 ( STRING_2 ) ) )  TYPE_4 . METHOD_4 ( STRING_2 , VAR_2 . METHOD_5 ( STRING_2 ) ) (  TYPE_4 . METHOD_4 ( STRING_3 , VAR_2 . METHOD_5 ( STRING_3 ) ) )  TYPE_4 . METHOD_4 ( STRING_3 , VAR_2 . METHOD_5 ( STRING_3 ) ) (  TYPE_4 . METHOD_4 ( STRING_4 , ( ! ( VAR_2 . METHOD_5 ( STRING_4 ) ) ) ) )  TYPE_4 . METHOD_4 ( STRING_4 , ( ! ( VAR_2 . METHOD_5 ( STRING_4 ) ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_2 . METHOD_2 ( VAR_1 . getId ( ) ) ) COND VAR_2 . METHOD_2 ( VAR_1 . getId ( ) ) ( THEN THEN (  throw new TYPE_3 ( VAR_3 ) ; )  throw new TYPE_3 ( VAR_3 ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_4 ( METHOD_3 ( VAR_1 ) , VAR_1 . METHOD_4 ( ) ) ) INIT = new TYPE_4 ( METHOD_3 ( VAR_1 ) , VAR_1 . METHOD_4 ( ) ) ) VAR VAR (  VAR_4 . METHOD_5 ( ) )  VAR_4 . METHOD_5 ( ) (  VAR_2 . put ( VAR_1 . getId ( ) , VAR_4 ) )  VAR_2 . put ( VAR_1 . getId ( ) , VAR_4 ) (  return VAR_4 ; )  return VAR_4 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1<java.lang.String> ) TYPE TYPE_1<java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_1<java.lang.String> ) TYPE TYPE_1<java.lang.String> ( NAME value ) NAME value ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND TYPE_2 . METHOD_2 ( VAR_1 , STRING_1 ) ) COND TYPE_2 . METHOD_2 ( VAR_1 , STRING_1 ) ( THEN THEN ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_3 ( TYPE_3 . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_5 , CHAR_1 ) ) ) ) INIT = new TYPE_3 ( TYPE_3 . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_5 , CHAR_1 ) ) ) ) VAR VAR (  VAR_5 = TYPE_4 . METHOD_5 ( STRING_2 , VAR_4 ) )  VAR_5 = TYPE_4 . METHOD_5 ( STRING_2 , VAR_4 ) ) THEN THEN ( ELSE ELSE (  super . METHOD_1 ( VAR_1 , VAR_2 , value , VAR_3 ) )  super . METHOD_1 ( VAR_1 , VAR_2 , value , VAR_3 ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME VAR_1 ) NAME VAR_1 ( INIT = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ) INIT = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ) VAR VAR (  VAR_1 . METHOD_2 ( true ) )  VAR_1 . METHOD_2 ( true ) ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_1 . METHOD_3 ( ) )  TYPE_1 . METHOD_3 ( ) ) BLOCK BLOCK ) METHOD METHOD (  VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object VAR_3 ) { TYPE_1 . METHOD_3 ( ) ; } } )  VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object VAR_3 ) { TYPE_1 . METHOD_3 ( ) ; } } (  frontend . METHOD_4 ( frontend . METHOD_5 ( ) , VAR_1 ) )  frontend . METHOD_4 ( frontend . METHOD_5 ( ) , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( STRING_1 ) ) INIT = METHOD_2 ( STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( STRING_2 ) ) INIT = METHOD_2 ( STRING_2 ) ) VAR VAR (  VAR_2 . METHOD_3 ( STRING_3 ) )  VAR_2 . METHOD_3 ( STRING_3 ) (  cmd = org.mockito.Mockito . METHOD_4 ( new TYPE_2 ( new TYPE_3 ( VAR_3 , STRING_4 , STRING_5 , VAR_4 , null , null , TYPE_4 . METHOD_5 ( VAR_1 , VAR_2 ) ) , null ) ) )  cmd = org.mockito.Mockito . METHOD_4 ( new TYPE_2 ( new TYPE_3 ( VAR_3 , STRING_4 , STRING_5 , VAR_4 , null , null , TYPE_4 . METHOD_5 ( VAR_1 , VAR_2 ) ) , null ) ) (  METHOD_6 ( VAR_5 ) )  METHOD_6 ( VAR_5 ) (  TYPE_5 . METHOD_7 ( cmd . validate ( ) ) )  TYPE_5 . METHOD_7 ( cmd . validate ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static synchronized ) MODIFIER public static synchronized ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME getInstance ) NAME getInstance ( BLOCK BLOCK ( IF IF ( COND ( TYPE_1 . instance ) == null ) COND ( TYPE_1 . instance ) == null ( THEN THEN (  TYPE_1 . instance = new TYPE_1 ( ) )  TYPE_1 . instance = new TYPE_1 ( ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND ( TYPE_1 . instance ) == null ) COND ( TYPE_1 . instance ) == null ( THEN THEN ( SYNCHRONIZED SYNCHRONIZED (  VAR_1 class )  VAR_1 class ( BLOCK BLOCK ( IF IF ( COND ( TYPE_1 . instance ) == null ) COND ( TYPE_1 . instance ) == null ( THEN THEN (  TYPE_1 . instance = new TYPE_1 ( ) )  TYPE_1 . instance = new TYPE_1 ( ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF (  return TYPE_1 . instance ; )  return TYPE_1 . instance ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME iface ) NAME iface ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  METHOD_3 ( iface , false , iface . METHOD_4 ( ) , iface . METHOD_5 ( ) , iface . METHOD_6 ( ) , ( ( iface . METHOD_7 ( ) ) + 1 ) ) )  METHOD_3 ( iface , false , iface . METHOD_4 ( ) , iface . METHOD_5 ( ) , iface . METHOD_6 ( ) , ( ( iface . METHOD_7 ( ) ) + 1 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) ) ) )  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) ) ) (  METHOD_3 ( cmd ) )  METHOD_3 ( cmd ) (  METHOD_4 ( cmd , false ) )  METHOD_4 ( cmd , false ) (  cmd . METHOD_5 ( ) )  cmd . METHOD_5 ( ) (  TYPE_3 . METHOD_6 ( cmd . getReturnValue ( ) . getSucceeded ( ) ) )  TYPE_3 . METHOD_6 ( cmd . getReturnValue ( ) . getSucceeded ( ) ) (  TYPE_3 . assertEquals ( cmd . METHOD_7 ( ) , VAR_2 ) )  TYPE_3 . assertEquals ( cmd . METHOD_7 ( ) , VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND source != null ) COND source != null ( THEN THEN ( VAR VAR ( TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDSGroup> ) TYPE java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDSGroup> ( NAME list ) NAME list ( INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( source ) ) ) INIT = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( source ) ) ) VAR VAR (  TYPE_1 . METHOD_2 ( list , new TYPE_2 ( ) ) )  TYPE_1 . METHOD_2 ( list , new TYPE_2 ( ) ) (  return list ; )  return list ; ) THEN THEN ) IF IF (  return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ( ) ; )  return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ( ) ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > list = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( source ) ) ; TYPE_1 . METHOD_2 ( list , new TYPE_2 ( ) ) ; return list ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ( ) ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > list = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( source ) ) ; TYPE_1 . METHOD_2 ( list , new TYPE_2 ( ) ) ; return list ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ( ) ; } } (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new TYPE_3 ( ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new TYPE_3 ( ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( VAR_2 ) / ( VAR_3 < java.lang.Integer > METHOD_2 ( VAR_4 ) ) ) INIT = ( VAR_2 ) / ( VAR_3 < java.lang.Integer > METHOD_2 ( VAR_4 ) ) ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < VAR_1 ) COND i < VAR_1 ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK ( IF IF ( COND METHOD_3 ( ) ) COND METHOD_3 ( ) ( THEN THEN (  VAR_5 . METHOD_4 ( STRING_1 , host . getName ( ) , host . getId ( ) ) )  VAR_5 . METHOD_4 ( STRING_1 , host . getName ( ) , host . getId ( ) ) (  return true ; )  return true ; ) THEN THEN ( ELSE ELSE (  METHOD_5 ( ) )  METHOD_5 ( ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) FOR FOR (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<org.ovirt.engine.core.common.businessentities.VDS> ) RETURN java.util.List<org.ovirt.engine.core.common.businessentities.VDS> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME status ) NAME status ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDS> ) TYPE java.util.List<org.ovirt.engine.core.common.businessentities.VDS> ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( ) . METHOD_3 ( STRING_1 , VAR_3 . instance , METHOD_4 ( ) . addValue ( STRING_2 , VAR_1 ) . addValue ( STRING_3 , status . getValue ( ) ) ) ) INIT = METHOD_2 ( ) . METHOD_3 ( STRING_1 , VAR_3 . instance , METHOD_4 ( ) . addValue ( STRING_2 , VAR_1 ) . addValue ( STRING_3 , status . getValue ( ) ) ) ) VAR VAR (  return METHOD_5 ( VAR_2 ) ; )  return METHOD_5 ( VAR_2 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( VAR_2 . Guid class ) ) ) . thenReturn ( TYPE_2 . METHOD_3 ( ) ) )  org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( VAR_2 . Guid class ) ) ) . thenReturn ( TYPE_2 . METHOD_3 ( ) ) (  org.mockito.Mockito.when ( VAR_1 . METHOD_4 ( TYPE_1 . METHOD_5 ( ) ) ) . thenReturn ( TYPE_2 . METHOD_3 ( ) ) )  org.mockito.Mockito.when ( VAR_1 . METHOD_4 ( TYPE_1 . METHOD_5 ( ) ) ) . thenReturn ( TYPE_2 . METHOD_3 ( ) ) (  VAR_3 . METHOD_6 ( VAR_4 , VAR_5 , java.lang.Boolean . TRUE ) )  VAR_3 . METHOD_6 ( VAR_4 , VAR_5 , java.lang.Boolean . TRUE ) (  METHOD_7 ( ) )  METHOD_7 ( ) (  METHOD_8 ( ) )  METHOD_8 ( ) (  METHOD_9 ( ) )  METHOD_9 ( ) (  METHOD_10 ( ) )  METHOD_10 ( ) (  METHOD_11 ( VAR_6 ) )  METHOD_11 ( VAR_6 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( INT_1 , 2 , 2 , 2 , 2 ) ) INIT = METHOD_2 ( INT_1 , 2 , 2 , 2 , 2 ) ) VAR VAR (  TYPE_2 . assertEquals ( INT_1 , VAR_1 . size ( ) ) )  TYPE_2 . assertEquals ( INT_1 , VAR_1 . size ( ) ) (  TYPE_2 . METHOD_3 ( VAR_1 . METHOD_4 ( VAR_2 . METHOD_5 ( nic ) ) ) )  TYPE_2 . METHOD_3 ( VAR_1 . METHOD_4 ( VAR_2 . METHOD_5 ( nic ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < java.lang.String > ( ) ) INIT = new java.util.ArrayList < java.lang.String > ( ) ) VAR VAR (  VAR_1 . add ( STRING_1 ) )  VAR_1 . add ( STRING_1 ) (  TYPE_1 . METHOD_2 ( VAR_2 ) )  TYPE_1 . METHOD_2 ( VAR_2 ) (  TYPE_1 . METHOD_3 ( VAR_2 . METHOD_4 ( STRING_2 ) ) . METHOD_5 ( VAR_1 ) )  TYPE_1 . METHOD_3 ( VAR_2 . METHOD_4 ( STRING_2 ) ) . METHOD_5 ( VAR_1 ) (  resource . METHOD_6 ( METHOD_7 ( ) ) )  resource . METHOD_6 ( METHOD_7 ( ) ) (  METHOD_8 ( true ) )  METHOD_8 ( true ) (  VAR_3 . METHOD_9 ( ) )  VAR_3 . METHOD_9 ( ) (  resource . get ( ) )  resource . get ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<TYPE_2>.VAR_1 ) TYPE TYPE_1<TYPE_2>.VAR_1 ( NAME context ) NAME context ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  log . error ( STRING_1 , METHOD_2 ( ) ) )  log . error ( STRING_1 , METHOD_2 ( ) ) (  METHOD_3 ( context . entity ) )  METHOD_3 ( context . entity ) ( IF IF ( COND org.ovirt.engine.core.compat.Guid . METHOD_4 ( TYPE_1 . getParameters ( ) . METHOD_5 ( ) ) ) COND org.ovirt.engine.core.compat.Guid . METHOD_4 ( TYPE_1 . getParameters ( ) . METHOD_5 ( ) ) ( THEN THEN (  METHOD_6 ( ( ( TYPE_1 . getParameters ( ) . METHOD_7 ( ) ) == ( VAR_2 ) ? VAR_3 : VAR_4 ) ) )  METHOD_6 ( ( ( TYPE_1 . getParameters ( ) . METHOD_7 ( ) ) == ( VAR_2 ) ? VAR_3 : VAR_4 ) ) ) THEN THEN ) IF IF (  METHOD_8 ( VAR_5 ) )  METHOD_8 ( VAR_5 ) (  METHOD_9 ( VAR_5 ) )  METHOD_9 ( VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . getParameters ( ) . METHOD_2 ( ) ) INIT = TYPE_2 . getParameters ( ) . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND VAR_2 == null ) COND VAR_2 == null ( THEN THEN (  return ! ( TYPE_3 . METHOD_3 ( TYPE_2 . getParameters ( ) . METHOD_4 ( ) , TYPE_2 . getReturnValue ( ) . METHOD_5 ( ) ) ) ; )  return ! ( TYPE_3 . METHOD_3 ( TYPE_2 . getParameters ( ) . METHOD_4 ( ) , TYPE_2 . getReturnValue ( ) . METHOD_5 ( ) ) ) ; ) THEN THEN ( ELSE ELSE (  return ! ( TYPE_3 . METHOD_6 ( TYPE_2 . getParameters ( ) . METHOD_4 ( ) , TYPE_2 . getReturnValue ( ) . METHOD_5 ( ) , VAR_2 ) ) ; )  return ! ( TYPE_3 . METHOD_6 ( TYPE_2 . getParameters ( ) . METHOD_4 ( ) , TYPE_2 . getReturnValue ( ) . METHOD_5 ( ) , VAR_2 ) ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND org.ovirt.engine.ui.frontend.Frontend . METHOD_2 ( VAR_1 ) ) COND org.ovirt.engine.ui.frontend.Frontend . METHOD_2 ( VAR_1 ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  VAR_2 . log ( VAR_3 , ( STRING_1 + VAR_1 ) , VAR_1 ) )  VAR_2 . log ( VAR_3 , ( STRING_1 + VAR_1 ) , VAR_1 ) (  org.ovirt.engine.ui.frontend.Frontend . METHOD_3 ( ) . METHOD_4 ( null ) )  org.ovirt.engine.ui.frontend.Frontend . METHOD_3 ( ) . METHOD_4 ( null ) (  org.ovirt.engine.ui.frontend.Frontend . METHOD_5 ( VAR_1 ) )  org.ovirt.engine.ui.frontend.Frontend . METHOD_5 ( VAR_1 ) ( IF IF ( COND VAR_4 . METHOD_6 ( ) ) COND VAR_4 . METHOD_6 ( ) ( THEN THEN (  org.ovirt.engine.ui.frontend.Frontend . METHOD_7 ( null ) )  org.ovirt.engine.ui.frontend.Frontend . METHOD_7 ( null ) (  VAR_5 . METHOD_8 ( VAR_4 . getModel ( ) , null ) )  VAR_5 . METHOD_8 ( VAR_4 . getModel ( ) , null ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME cmd ) NAME cmd ( INIT = VAR_1 . METHOD_2 ( ) . get ( METHOD_3 ( ) ) ) INIT = VAR_1 . METHOD_2 ( ) . get ( METHOD_3 ( ) ) ) VAR VAR (  TYPE_2 . METHOD_4 ( cmd ) )  TYPE_2 . METHOD_4 ( cmd ) (  VAR_1 . METHOD_2 ( ) . METHOD_5 ( METHOD_3 ( ) ) )  VAR_1 . METHOD_2 ( ) . METHOD_5 ( METHOD_3 ( ) ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_2 ( ) . get ( METHOD_3 ( ) ) ) INIT = VAR_1 . METHOD_2 ( ) . get ( METHOD_3 ( ) ) ) VAR VAR (  TYPE_2 . METHOD_6 ( VAR_2 ) )  TYPE_2 . METHOD_6 ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME status ) NAME status ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  assertEquals ( status , VAR_1 . METHOD_2 ( ) . getStatus ( ) ) )  assertEquals ( status , VAR_1 . METHOD_2 ( ) . getStatus ( ) ) (  METHOD_3 ( ( ( VAR_1 . METHOD_2 ( ) . getEntity ( ) ) instanceof TYPE_2 ) ) )  METHOD_3 ( ( ( VAR_1 . METHOD_2 ( ) . getEntity ( ) ) instanceof TYPE_2 ) ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = ( ( TYPE_2 ) ( VAR_1 . METHOD_2 ( ) . getEntity ( ) ) ) ) INIT = ( ( TYPE_2 ) ( VAR_1 . METHOD_2 ( ) . getEntity ( ) ) ) ) VAR VAR (  assertEquals ( VAR_2 , VAR_4 . METHOD_4 ( ) ) )  assertEquals ( VAR_2 , VAR_4 . METHOD_4 ( ) ) (  assertEquals ( VAR_3 , VAR_4 . METHOD_5 ( ) ) )  assertEquals ( VAR_3 , VAR_4 . METHOD_5 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME aQuery ) NAME aQuery ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME Convert ) NAME Convert ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE org.ovirt.engine.ui.frontend.AsyncQuery ) TYPE org.ovirt.engine.ui.frontend.AsyncQuery ( NAME _asyncQuery ) NAME _asyncQuery ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return source != null ? ( ( org.ovirt.engine.core.common.businessentities.VM ) ( source ) ) : null ; )  return source != null ? ( ( org.ovirt.engine.core.common.businessentities.VM ) ( source ) ) : null ; ) BLOCK BLOCK ) METHOD METHOD (  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( org.ovirt.engine.core.common.businessentities.VM ) ( source ) ) : null ; } } )  aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( org.ovirt.engine.core.common.businessentities.VM ) ( source ) ) : null ; } } (  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new TYPE_1 ( VAR_1 ) , aQuery ) )  org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new TYPE_1 ( VAR_1 ) , aQuery ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) , null ) ) )  cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) , null ) ) (  METHOD_3 ( ) )  METHOD_3 ( ) (  org.mockito.Mockito . METHOD_4 ( ) . when ( VAR_2 ) . METHOD_5 ( METHOD_6 ( ) , true ) )  org.mockito.Mockito . METHOD_4 ( ) . when ( VAR_2 ) . METHOD_5 ( METHOD_6 ( ) , true ) (  cmd . METHOD_1 ( ) )  cmd . METHOD_1 ( ) (  TYPE_3 . assertEquals ( VAR_3 , cmd . METHOD_7 ( ) ) )  TYPE_3 . assertEquals ( VAR_3 , cmd . METHOD_7 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( getEntity ( ) ) != null ) COND ( getEntity ( ) ) != null ( THEN THEN ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ( INIT = ( ( TYPE_1 ) ( getEntity ( ) ) ) . getVm ( ) ) INIT = ( ( TYPE_1 ) ( getEntity ( ) ) ) . getVm ( ) ) VAR VAR (  setItems ( vm . METHOD_2 ( ) ) )  setItems ( vm . METHOD_2 ( ) ) ) THEN THEN ( ELSE ELSE (  setItems ( null ) )  setItems ( null ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.Network ) TYPE TYPE_1.Network ( NAME model ) NAME model ( INIT = new TYPE_1 . Network ( ) ) INIT = new TYPE_1 . Network ( ) ) VAR VAR (  model . setId ( VAR_1 [ 0 ] . toString ( ) ) )  model . setId ( VAR_1 [ 0 ] . toString ( ) ) (  model . METHOD_2 ( VAR_2 [ 0 ] ) )  model . METHOD_2 ( VAR_2 [ 0 ] ) (  METHOD_3 ( METHOD_4 ( ) ) )  METHOD_3 ( METHOD_4 ( ) ) (  VAR_3 . METHOD_5 ( ) )  VAR_3 . METHOD_5 ( ) ( TRY TRY ( BLOCK BLOCK (  ( ( TYPE_2 ) ( VAR_4 ) ) . add ( model ) )  ( ( TYPE_2 ) ( VAR_4 ) ) . add ( model ) (  METHOD_6 ( STRING_1 ) )  METHOD_6 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_5 ) NAME VAR_5 ( BLOCK BLOCK (  METHOD_7 ( VAR_5 , STRING_2 , STRING_3 , STRING_4 ) )  METHOD_7 ( VAR_5 , STRING_2 , STRING_3 , STRING_4 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1<java.lang.String> ) RETURN TYPE_1<java.lang.String> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<java.lang.String> ) TYPE TYPE_1<java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_3 < > ( ) ) INIT = new TYPE_3 < > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_4 ) IN VAR_4 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_1 . METHOD_2 ( VAR_3 ) ) INIT = VAR_1 . METHOD_2 ( VAR_3 ) ) VAR VAR ( IF IF ( COND VAR_5 != null ) COND VAR_5 != null ( THEN THEN (  VAR_2 . METHOD_3 ( VAR_5 ) )  VAR_2 . METHOD_3 ( VAR_5 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ) TYPE org.ovirt.engine.core.common.businessentities.VdsNetworkInterface ( NAME iface ) NAME iface ( IN METHOD_2 ( ) . METHOD_3 ( ) ) IN METHOD_2 ( ) . METHOD_3 ( ) ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = iface . METHOD_4 ( ) ) INIT = iface . METHOD_4 ( ) ) VAR VAR ( IF IF ( COND ( TYPE_1 . METHOD_5 ( VAR_1 ) ) && ( ! ( VAR_2 . METHOD_6 ( VAR_1 ) ) ) ) COND ( TYPE_1 . METHOD_5 ( VAR_1 ) ) && ( ! ( VAR_2 . METHOD_6 ( VAR_1 ) ) ) ( THEN THEN (  VAR_3 . add ( METHOD_2 ( ) . get ( VAR_1 ) ) )  VAR_3 . add ( METHOD_2 ( ) . get ( VAR_1 ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND VAR_2 == ( VAR_3 ) ) COND VAR_2 == ( VAR_3 ) ( THEN THEN (  METHOD_3 ( VAR_1 ) )  METHOD_3 ( VAR_1 ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND VAR_2 == ( VAR_4 ) ) COND VAR_2 == ( VAR_4 ) ( THEN THEN (  METHOD_4 ( VAR_1 . METHOD_5 ( ) ) )  METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF (  VAR_5 . error ( STRING_1 , VAR_1 . METHOD_6 ( ) , VAR_1 . METHOD_5 ( ) ) )  VAR_5 . error ( STRING_1 , VAR_1 . METHOD_6 ( ) , VAR_1 . METHOD_5 ( ) ) (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( false ) )  org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( false ) (  METHOD_3 ( VAR_2 ) )  METHOD_3 ( VAR_2 ) (  org.mockito.Mockito.when ( host . METHOD_4 ( ) ) . thenReturn ( VAR_3 ) )  org.mockito.Mockito.when ( host . METHOD_4 ( ) ) . thenReturn ( VAR_3 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_1 ( VAR_5 ) ) INIT = new TYPE_1 ( VAR_5 ) ) VAR VAR (  TYPE_2 . METHOD_5 ( validator . METHOD_6 ( VAR_4 ) , TYPE_3 . METHOD_7 ( ) ) )  TYPE_2 . METHOD_5 ( validator . METHOD_6 ( VAR_4 ) , TYPE_3 . METHOD_7 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  return super . METHOD_1 ( ) . METHOD_2 ( VAR_1 , TYPE_2 . METHOD_3 ( ) ) . METHOD_4 ( METHOD_5 ( ) , TYPE_2 . METHOD_3 ( ) ) . METHOD_6 ( VAR_2 , TYPE_2 . METHOD_3 ( ) ) . METHOD_2 ( VAR_3 , TYPE_2 . METHOD_7 ( ) . METHOD_8 ( ) ) . METHOD_6 ( VAR_4 , TYPE_2 . METHOD_3 ( ) ) ; )  return super . METHOD_1 ( ) . METHOD_2 ( VAR_1 , TYPE_2 . METHOD_3 ( ) ) . METHOD_4 ( METHOD_5 ( ) , TYPE_2 . METHOD_3 ( ) ) . METHOD_6 ( VAR_2 , TYPE_2 . METHOD_3 ( ) ) . METHOD_2 ( VAR_3 , TYPE_2 . METHOD_7 ( ) . METHOD_8 ( ) ) . METHOD_6 ( VAR_4 , TYPE_2 . METHOD_3 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.DiskImage ) TYPE TYPE_1.DiskImage ( NAME image ) NAME image ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  TYPE_3 . METHOD_2 ( image , VAR_1 , VAR_2 ) )  TYPE_3 . METHOD_2 ( image , VAR_1 , VAR_2 ) (  TYPE_3 . METHOD_3 ( image ) )  TYPE_3 . METHOD_3 ( image ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_3 ) NAME VAR_3 ( BLOCK BLOCK (  VAR_4 . error ( STRING_1 , VAR_3 . METHOD_4 ( ) ) )  VAR_4 . error ( STRING_1 , VAR_3 . METHOD_4 ( ) ) (  VAR_4 . METHOD_5 ( STRING_2 , VAR_3 ) )  VAR_4 . METHOD_5 ( STRING_2 , VAR_3 ) (  throw new TYPE_5 ( VAR_5 , VAR_3 ) ; )  throw new TYPE_5 ( VAR_5 , VAR_3 ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ) TYPE org.ovirt.engine.core.common.businessentities.StorageDomain ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( true ) ) INIT = METHOD_2 ( true ) ) VAR VAR (  VAR_1 . METHOD_3 ( VAR_2 ) )  VAR_1 . METHOD_3 ( VAR_2 ) (  VAR_1 . setId ( VAR_3 ) )  VAR_1 . setId ( VAR_3 ) (  cmd . METHOD_4 ( ) )  cmd . METHOD_4 ( ) (  TYPE_1 . METHOD_5 ( STRING_1 , cmd , VAR_4 ) )  TYPE_1 . METHOD_5 ( STRING_1 , cmd , VAR_4 ) (  org.mockito.Mockito . METHOD_6 ( VAR_5 , org.mockito.Mockito . METHOD_7 ( 1 ) ) . METHOD_8 ( TYPE_2 . METHOD_9 ( VAR_6 ) , TYPE_2 . any ( VAR_7 class ) ) )  org.mockito.Mockito . METHOD_6 ( VAR_5 , org.mockito.Mockito . METHOD_7 ( 1 ) ) . METHOD_8 ( TYPE_2 . METHOD_9 ( VAR_6 ) , TYPE_2 . any ( VAR_7 class ) ) (  org.mockito.Mockito . METHOD_6 ( cmd , org.mockito.Mockito . METHOD_7 ( 0 ) ) . METHOD_10 ( ) )  org.mockito.Mockito . METHOD_6 ( cmd , org.mockito.Mockito . METHOD_7 ( 0 ) ) . METHOD_10 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  METHOD_3 ( ) )  METHOD_3 ( ) (  org.mockito.Mockito.doReturn ( true ) . when ( cmd ) . METHOD_4 ( ) )  org.mockito.Mockito.doReturn ( true ) . when ( cmd ) . METHOD_4 ( ) (  org.mockito.Mockito.doReturn ( TYPE_1 . METHOD_5 ( ) ) . when ( cmd ) . METHOD_6 ( ) )  org.mockito.Mockito.doReturn ( TYPE_1 . METHOD_5 ( ) ) . when ( cmd ) . METHOD_6 ( ) (  TYPE_2 . METHOD_7 ( cmd . validate ( ) ) )  TYPE_2 . METHOD_7 ( cmd . validate ( ) ) (  TYPE_2 . METHOD_7 ( cmd . getReturnValue ( ) . METHOD_8 ( ) . isEmpty ( ) ) )  TYPE_2 . METHOD_7 ( cmd . getReturnValue ( ) . METHOD_8 ( ) . isEmpty ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.Network ) TYPE org.ovirt.engine.core.common.businessentities.Network ( NAME VAR_1 ) NAME VAR_1 ( INIT = new org.ovirt.engine.core.common.businessentities . Network ( ) ) INIT = new org.ovirt.engine.core.common.businessentities . Network ( ) ) VAR VAR (  VAR_1 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) )  VAR_1 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) (  VAR_1 . METHOD_3 ( VAR_2 < java.lang.String > METHOD_4 ( VAR_3 ) ) )  VAR_1 . METHOD_3 ( VAR_2 < java.lang.String > METHOD_4 ( VAR_3 ) ) (  VAR_1 . METHOD_5 ( VAR_4 ) )  VAR_1 . METHOD_5 ( VAR_4 ) (  VAR_1 . METHOD_6 ( TYPE_1 . METHOD_7 ( ) . getId ( ) ) )  VAR_1 . METHOD_6 ( TYPE_1 . METHOD_7 ( ) . getId ( ) ) (  VAR_1 . METHOD_8 ( true ) )  VAR_1 . METHOD_8 ( true ) (  METHOD_9 ( ) . METHOD_10 ( VAR_1 ) )  METHOD_9 ( ) . METHOD_10 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = command . METHOD_2 ( ) . METHOD_3 ( ) ) INIT = command . METHOD_2 ( ) . METHOD_3 ( ) ) VAR VAR (  org.mockito.Mockito.doReturn ( new TYPE_2 ( VAR_1 , VAR_1 . getId ( ) ) ) . when ( command ) . METHOD_4 ( TYPE_3 . any ( VAR_2 class ) ) )  org.mockito.Mockito.doReturn ( new TYPE_2 ( VAR_1 , VAR_1 . getId ( ) ) ) . when ( command ) . METHOD_4 ( TYPE_3 . any ( VAR_2 class ) ) (  TYPE_4 . METHOD_5 ( command ) )  TYPE_4 . METHOD_5 ( command ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME context ) NAME context ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME event ) NAME event ) VAR VAR ( VAR VAR ( TYPE TYPE_6<TYPE_3> ) TYPE TYPE_6<TYPE_3> ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_3 ) NAME METHOD_3 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME value ) NAME value ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND value != null ) COND value != null ( THEN THEN (  model . setSelectedItem ( VAR_6 . get ( value ) ) )  model . setSelectedItem ( VAR_6 . get ( value ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD (  VAR_4 . METHOD_1 ( context , VAR_1 , VAR_5 . METHOD_2 ( ( ( TYPE_7 ) ( model . getSelectedItem ( ) ) ) ) , event , new TYPE_6 < java.lang.String > ( ) { public void METHOD_3 ( java.lang.String value ) { if ( value != null ) { model . setSelectedItem ( VAR_6 . get ( value ) ) ; } } } ) )  VAR_4 . METHOD_1 ( context , VAR_1 , VAR_5 . METHOD_2 ( ( ( TYPE_7 ) ( model . getSelectedItem ( ) ) ) ) , event , new TYPE_6 < java.lang.String > ( ) { public void METHOD_3 ( java.lang.String value ) { if ( value != null ) { model . setSelectedItem ( VAR_6 . get ( value ) ) ; } } } ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return super . METHOD_1 ( VAR_1 ) . append ( STRING_1 , METHOD_2 ( ) ) . append ( STRING_2 , METHOD_3 ( ) ) . append ( STRING_3 , METHOD_4 ( ) ) . append ( STRING_4 , METHOD_5 ( ) ) . append ( STRING_5 , METHOD_6 ( ) ) ; )  return super . METHOD_1 ( VAR_1 ) . append ( STRING_1 , METHOD_2 ( ) ) . append ( STRING_2 , METHOD_3 ( ) ) . append ( STRING_3 , METHOD_4 ( ) ) . append ( STRING_4 , METHOD_5 ( ) ) . append ( STRING_5 , METHOD_6 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VM ) TYPE org.ovirt.engine.core.common.businessentities.VM ( NAME vm ) NAME vm ( INIT = getEntity ( ) ) INIT = getEntity ( ) ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( vm != null ) && ( ( ( ( vm . METHOD_2 ( ) ) == ( VAR_2 ) ) || ( ( ( vm . METHOD_2 ( ) ) == ( VAR_3 ) ) | ( ( vm . METHOD_2 ( ) ) == ( VAR_4 ) ) ) ) || ( ( vm . METHOD_2 ( ) ) == ( VAR_5 ) ) ) ) INIT = ( vm != null ) && ( ( ( ( vm . METHOD_2 ( ) ) == ( VAR_2 ) ) || ( ( ( vm . METHOD_2 ( ) ) == ( VAR_3 ) ) | ( ( vm . METHOD_2 ( ) ) == ( VAR_4 ) ) ) ) || ( ( vm . METHOD_2 ( ) ) == ( VAR_5 ) ) ) ) VAR VAR (  return ( VAR_6 ) && VAR_1 ; )  return ( VAR_6 ) && VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.network ) TYPE org.ovirt.engine.core.common.businessentities.network ( NAME VAR_1 ) NAME VAR_1 ( INIT = new org.ovirt.engine.core.common.businessentities . network ( ) ) INIT = new org.ovirt.engine.core.common.businessentities . network ( ) ) VAR VAR (  VAR_1 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) )  VAR_1 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) (  VAR_1 . METHOD_3 ( VAR_2 < java.lang.String > METHOD_4 ( VAR_3 ) ) )  VAR_1 . METHOD_3 ( VAR_2 < java.lang.String > METHOD_4 ( VAR_3 ) ) (  VAR_1 . METHOD_5 ( VAR_4 ) )  VAR_1 . METHOD_5 ( VAR_4 ) (  VAR_1 . METHOD_6 ( TYPE_1 . METHOD_7 ( ) . getId ( ) ) )  VAR_1 . METHOD_6 ( TYPE_1 . METHOD_7 ( ) . getId ( ) ) (  VAR_1 . METHOD_8 ( true ) )  VAR_1 . METHOD_8 ( true ) (  METHOD_9 ( ) . METHOD_10 ( VAR_1 ) )  METHOD_9 ( ) . METHOD_10 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_2 ) . METHOD_2 ( TYPE_3 . METHOD_3 ( VAR_3 . Integer class ) ) )  org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_2 ) . METHOD_2 ( TYPE_3 . METHOD_3 ( VAR_3 . Integer class ) ) (  org.mockito.Mockito.doReturn ( VAR_4 ) . when ( VAR_2 ) . METHOD_4 ( TYPE_4 . METHOD_5 ( VAR_5 class ) ) )  org.mockito.Mockito.doReturn ( VAR_4 ) . when ( VAR_2 ) . METHOD_4 ( TYPE_4 . METHOD_5 ( VAR_5 class ) ) (  VAR_2 . METHOD_6 ( VAR_6 , VAR_7 ) )  VAR_2 . METHOD_6 ( VAR_6 , VAR_7 ) (  org.mockito.Mockito . METHOD_7 ( VAR_6 ) . METHOD_8 ( VAR_8 , VAR_1 ) )  org.mockito.Mockito . METHOD_7 ( VAR_6 ) . METHOD_8 ( VAR_8 , VAR_1 ) (  org.mockito.Mockito . METHOD_7 ( VAR_6 ) . METHOD_8 ( VAR_9 , VAR_4 ) )  org.mockito.Mockito . METHOD_7 ( VAR_6 ) . METHOD_8 ( VAR_9 , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  command = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , new TYPE_3 ( TYPE_4 . METHOD_4 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ) , null , null ) ) ) )  command = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , new TYPE_3 ( TYPE_4 . METHOD_4 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ) , null , null ) ) ) (  org.mockito.Mockito.doReturn ( vds ) . when ( command ) . METHOD_5 ( ) )  org.mockito.Mockito.doReturn ( vds ) . when ( command ) . METHOD_5 ( ) (  org.mockito.Mockito.doReturn ( null ) . when ( command ) . METHOD_6 ( ) )  org.mockito.Mockito.doReturn ( null ) . when ( command ) . METHOD_6 ( ) (  TYPE_5 . METHOD_7 ( command . validate ( ) ) )  TYPE_5 . METHOD_7 ( command . validate ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( new TYPE_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , VAR_1 ) , VAR_2 , VAR_3 , VAR_4 . Collections < java.lang.String , java.lang.Object > METHOD_4 ( VAR_5 , STRING_1 ) , true , true , null ) )  TYPE_1 . METHOD_2 ( new TYPE_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , VAR_1 ) , VAR_2 , VAR_3 , VAR_4 . Collections < java.lang.String , java.lang.Object > METHOD_4 ( VAR_5 , STRING_1 ) , true , true , null ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( this . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( STRING_1 ) . METHOD_5 ( ) . METHOD_6 ( ) ) ) INIT = new TYPE_2 ( this . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( STRING_1 ) . METHOD_5 ( ) . METHOD_6 ( ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 ( VAR_1 . METHOD_7 ( ) , STRING_2 ) ) INIT = new TYPE_2 ( VAR_1 . METHOD_7 ( ) , STRING_2 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_3 ( VAR_2 . METHOD_8 ( ) , VAR_1 , 1 ) ) INIT = new TYPE_3 ( VAR_2 . METHOD_8 ( ) , VAR_1 , 1 ) ) VAR VAR (  TYPE_4 . METHOD_9 ( STRING_3 , VAR_3 . METHOD_10 ( ) ) )  TYPE_4 . METHOD_9 ( STRING_3 , VAR_3 . METHOD_10 ( ) ) (  TYPE_4 . METHOD_11 ( STRING_4 , VAR_3 . METHOD_12 ( ) ) )  TYPE_4 . METHOD_11 ( STRING_4 , VAR_3 . METHOD_12 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME target ) NAME target ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME returnValue ) NAME returnValue ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.Object[] ) TYPE java.lang.Object[] ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( java.lang.Object [ ] ) ( target ) ) ) INIT = ( ( java.lang.Object [ ] ) ( target ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_1 ) ( VAR_1 [ 0 ] ) ) ) INIT = ( ( TYPE_1 ) ( VAR_1 [ 0 ] ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( ( TYPE_2 ) ( VAR_1 [ 1 ] ) ) ) INIT = ( ( TYPE_2 ) ( VAR_1 [ 1 ] ) ) ) VAR VAR (  VAR_2 . METHOD_2 ( VAR_3 , ( returnValue == null ) ) )  VAR_2 . METHOD_2 ( VAR_3 , ( returnValue == null ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) (  dao = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) )  dao = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) (  VAR_2 = dao . get ( STRING_1 ) )  VAR_2 = dao . get ( STRING_1 ) (  VAR_3 = dao . get ( TYPE_1 . toString ( ) ) )  VAR_3 = dao . get ( TYPE_1 . toString ( ) ) (  VAR_4 = new TYPE_2 ( ) )  VAR_4 = new TYPE_2 ( ) (  VAR_4 . METHOD_4 ( STRING_2 ) )  VAR_4 . METHOD_4 ( STRING_2 ) (  VAR_4 . METHOD_5 ( VAR_5 ) )  VAR_4 . METHOD_5 ( VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1.VdcActionParametersBase ) RETURN TYPE_1.VdcActionParametersBase ( NAME getParameters ) NAME getParameters ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME model ) NAME model ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME entity ) NAME entity ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME parameters ) NAME parameters ( INIT = new TYPE_4 ( ) ) INIT = new TYPE_4 ( ) ) VAR VAR (  parameters . METHOD_1 ( TYPE_5 . map ( TYPE_6 . METHOD_2 ( model . METHOD_3 ( ) ) ) ) )  parameters . METHOD_1 ( TYPE_5 . map ( TYPE_6 . METHOD_2 ( model . METHOD_3 ( ) ) ) ) (  parameters . METHOD_4 ( TYPE_5 . map ( TYPE_7 . METHOD_2 ( model . getModel ( ) ) ) ) )  parameters . METHOD_4 ( TYPE_5 . map ( TYPE_7 . METHOD_2 ( model . getModel ( ) ) ) ) (  parameters . setId ( vmId ) )  parameters . setId ( vmId ) (  parameters . METHOD_5 ( true ) )  parameters . METHOD_5 ( true ) (  return parameters ; )  return parameters ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME obj ) NAME obj ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  obj . put ( STRING_1 , VAR_1 . getId ( ) . toString ( ) ) )  obj . put ( STRING_1 , VAR_1 . getId ( ) . toString ( ) ) (  obj . put ( STRING_2 , VAR_1 . METHOD_3 ( ) ) )  obj . put ( STRING_2 , VAR_1 . METHOD_3 ( ) ) (  obj . put ( STRING_3 , VAR_1 . METHOD_4 ( ) ) )  obj . put ( STRING_3 , VAR_1 . METHOD_4 ( ) ) (  obj . put ( STRING_4 , VAR_1 . METHOD_5 ( ) ) )  obj . put ( STRING_4 , VAR_1 . METHOD_5 ( ) ) (  obj . put ( STRING_5 , VAR_2 ) )  obj . put ( STRING_5 , VAR_2 ) (  obj . put ( STRING_6 , VAR_3 ) )  obj . put ( STRING_6 , VAR_3 ) (  return obj ; )  return obj ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_2 . add ( new TYPE_2 < TYPE_1 , java.lang.Integer > ( VAR_1 , 1 ) ) )  VAR_2 . add ( new TYPE_2 < TYPE_1 , java.lang.Integer > ( VAR_1 , 1 ) ) ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < ( VAR_3 . size ( ) ) ) COND i < ( VAR_3 . size ( ) ) ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK ( IF IF ( COND VAR_3 . get ( i ) . getId ( ) . equals ( VAR_1 . getId ( ) ) ) COND VAR_3 . get ( i ) . getId ( ) . equals ( VAR_1 . getId ( ) ) ( THEN THEN (  VAR_3 . METHOD_2 ( VAR_1 ) )  VAR_3 . METHOD_2 ( VAR_1 ) (  break ; )  break ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR FOR (  METHOD_3 ( null ) )  METHOD_3 ( null ) (  METHOD_4 ( ) . METHOD_5 ( this , VAR_4 ) )  METHOD_4 ( ) . METHOD_5 ( this , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.ui.uicommonweb.UICommand ) TYPE org.ovirt.engine.ui.uicommonweb.UICommand ( NAME command ) NAME command ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  super . METHOD_1 ( command ) )  super . METHOD_1 ( command ) ( IF IF ( COND TYPE_1 . METHOD_2 ( command . getName ( ) , TYPE_2 ) ) COND TYPE_1 . METHOD_2 ( command . getName ( ) , TYPE_2 ) ( THEN THEN (  METHOD_3 ( ) )  METHOD_3 ( ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND TYPE_1 . METHOD_2 ( command . getName ( ) , TYPE_3 ) ) COND TYPE_1 . METHOD_2 ( command . getName ( ) , TYPE_3 ) ( THEN THEN (  METHOD_4 ( ) )  METHOD_4 ( ) ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2.VdcBllMessages ) TYPE TYPE_2.VdcBllMessages ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_2.VdcBllMessages> ) TYPE java.util.List<TYPE_2.VdcBllMessages> ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . validate ( ) ) INIT = VAR_1 . validate ( ) ) VAR VAR (  TYPE_3 . METHOD_2 ( TYPE_4 . METHOD_3 ( STRING_1 , VAR_2 , VAR_3 ) , VAR_3 . METHOD_4 ( VAR_2 ) ) )  TYPE_3 . METHOD_2 ( TYPE_4 . METHOD_3 ( STRING_1 , VAR_2 , VAR_3 ) , VAR_3 . METHOD_4 ( VAR_2 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  getWindow ( ) . METHOD_3 ( ) )  getWindow ( ) . METHOD_3 ( ) ( IF IF ( COND ( VAR_1 ) != null ) COND ( VAR_1 ) != null ( THEN THEN ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_5 ) NAME METHOD_5 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_4 ) NAME VAR_4 ( INIT = ( ( TYPE_4 ) ( result . METHOD_6 ( ) ) ) ) INIT = ( ( TYPE_4 ) ( result . METHOD_6 ( ) ) ) ) VAR VAR (  METHOD_7 ( VAR_5 , VAR_6 ) )  METHOD_7 ( VAR_5 , VAR_6 ) (  VAR_5 = null )  VAR_5 = null ) BLOCK BLOCK ) METHOD METHOD (  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_4 ( VAR_2 , new TYPE_1 ( VAR_1 , VAR_3 ) , new TYPE_2 ( ) { public void METHOD_5 ( TYPE_3 result ) { TYPE_4 VAR_4 = ( ( TYPE_4 ) ( result . METHOD_6 ( ) ) ) ; METHOD_7 ( VAR_5 , VAR_6 ) ; VAR_5 = null ; } } , this ) )  org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_4 ( VAR_2 , new TYPE_1 ( VAR_1 , VAR_3 ) , new TYPE_2 ( ) { public void METHOD_5 ( TYPE_3 result ) { TYPE_4 VAR_4 = ( ( TYPE_4 ) ( result . METHOD_6 ( ) ) ) ; METHOD_7 ( VAR_5 , VAR_6 ) ; VAR_5 = null ; } } , this ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_3 ) NAME VAR_3 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_4 ) NAME VAR_4 ( IN TYPE_3 . METHOD_2 ( VAR_1 , VAR_2 ) ) IN TYPE_3 . METHOD_2 ( VAR_1 , VAR_2 ) ( BLOCK BLOCK (  VAR_3 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_1 , TYPE_4 . METHOD_5 ( VAR_4 , VAR_5 ) , true ) ) )  VAR_3 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_1 , TYPE_4 . METHOD_5 ( VAR_4 , VAR_5 ) , true ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME cluster ) NAME cluster ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  cluster . setId ( VAR_2 [ VAR_1 ] ) )  cluster . setId ( VAR_2 [ VAR_1 ] ) (  cluster . METHOD_2 ( STRING_1 ) )  cluster . METHOD_2 ( STRING_1 ) (  cluster . METHOD_3 ( true ) )  cluster . METHOD_3 ( true ) (  cluster . METHOD_4 ( false ) )  cluster . METHOD_4 ( false ) (  cluster . METHOD_5 ( VAR_3 ) )  cluster . METHOD_5 ( VAR_3 ) (  return cluster ; )  return cluster ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME addValue ) NAME addValue ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME value ) NAME value ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_2 ) NAME VAR_2 ( INIT = value ) INIT = value ) VAR VAR ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN ( IF IF ( COND VAR_2 . METHOD_1 ( ) . METHOD_2 ( ) ) COND VAR_2 . METHOD_1 ( ) . METHOD_2 ( ) ( THEN THEN (  VAR_2 = TYPE_2 . METHOD_3 ( VAR_2 ) )  VAR_2 = TYPE_2 . METHOD_3 ( VAR_2 ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND ( VAR_2 instanceof TYPE_3 ) || ( VAR_2 instanceof org.ovirt.engine.core.compat . Version ) ) COND ( VAR_2 instanceof TYPE_3 ) || ( VAR_2 instanceof org.ovirt.engine.core.compat . Version ) ( THEN THEN (  VAR_2 = value . toString ( ) )  VAR_2 = value . toString ( ) ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ) THEN THEN ) IF IF (  return super . addValue ( ( ( VAR_3 . METHOD_4 ( ) ) + VAR_1 ) , VAR_2 ) ; )  return super . addValue ( ( ( VAR_3 . METHOD_4 ( ) ) + VAR_1 ) , VAR_2 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( parameters , null ) ) )  VAR_1 = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( parameters , null ) ) (  org.mockito.Mockito.when ( VAR_1 . getParameters ( ) ) . thenReturn ( parameters ) )  org.mockito.Mockito.when ( VAR_1 . getParameters ( ) ) . thenReturn ( parameters ) (  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( VAR_1 ) . METHOD_3 ( ) )  org.mockito.Mockito.doReturn ( VAR_2 ) . when ( VAR_1 ) . METHOD_3 ( ) (  org.mockito.Mockito.when ( VAR_2 . get ( VAR_3 ) ) . thenReturn ( METHOD_4 ( VAR_3 ) ) )  org.mockito.Mockito.when ( VAR_2 . get ( VAR_3 ) ) . thenReturn ( METHOD_4 ( VAR_3 ) ) (  org.mockito.Mockito.when ( VAR_2 . get ( VAR_4 ) ) . thenReturn ( null ) )  org.mockito.Mockito.when ( VAR_2 . get ( VAR_4 ) ) . thenReturn ( null ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . get ( VAR_1 ) ) INIT = VAR_3 . get ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN ( IF IF ( COND ( storage . getSelectedItem ( ) ) == null ) COND ( storage . getSelectedItem ( ) ) == null ( THEN THEN (  VAR_2 . METHOD_2 ( ( ( TYPE_2 ) ( storage . getSelectedItem ( ) ) ) ) )  VAR_2 . METHOD_2 ( ( ( TYPE_2 ) ( storage . getSelectedItem ( ) ) ) ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected static ) MODIFIER protected static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.ovirt.engine.core.compat.Guid ) TYPE org.ovirt.engine.core.compat.Guid ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.ArrayList<java.lang.String> ) TYPE java.util.ArrayList<java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ) TYPE org.ovirt.engine.core.common.businessentities.VDSGroup ( NAME VAR_3 ) NAME VAR_3 ( INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . get ( VAR_1 ) ) INIT = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . get ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_3 != null ) INIT = VAR_3 != null ) VAR VAR ( IF IF ( COND ! VAR_4 ) COND ! VAR_4 ( THEN THEN (  VAR_2 . add ( TYPE_1 . toString ( ) ) )  VAR_2 . add ( TYPE_1 . toString ( ) ) ) THEN THEN ) IF IF (  return VAR_4 ; )  return VAR_4 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 = false )  VAR_1 = false (  VAR_2 = false )  VAR_2 = false (  VAR_3 = false )  VAR_3 = false (  VAR_4 = false )  VAR_4 = false (  VAR_5 = false )  VAR_5 = false (  VAR_6 = STRING_1 )  VAR_6 = STRING_1 (  VAR_7 = STRING_1 )  VAR_7 = STRING_1 (  VAR_8 = false )  VAR_8 = false (  VAR_9 = new java.util.HashMap < java.lang.String , TYPE_1 > ( ) )  VAR_9 = new java.util.HashMap < java.lang.String , TYPE_1 > ( ) (  VAR_10 = new java.util.HashMap < java.lang.String , TYPE_2 > ( ) )  VAR_10 = new java.util.HashMap < java.lang.String , TYPE_2 > ( ) (  VAR_11 = new TYPE_3 < TYPE_4 > ( STRING_2 , VAR_12 class ) )  VAR_11 = new TYPE_3 < TYPE_4 > ( STRING_2 , VAR_12 class ) (  VAR_13 = 0 )  VAR_13 = 0 ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.ArrayList<TYPE_1.Disk> ) TYPE java.util.ArrayList<TYPE_1.Disk> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 . isEmpty ( ) ) COND VAR_1 . isEmpty ( ) ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1.Disk ) TYPE TYPE_1.Disk ( NAME disk ) NAME disk ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  VAR_2 . add ( disk . METHOD_2 ( ) ) )  VAR_2 . add ( disk . METHOD_2 ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return java.lang.String . METHOD_3 ( STRING_1 , VAR_2 ) ; )  return java.lang.String . METHOD_3 ( STRING_1 , VAR_2 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  VAR_2 . add ( VAR_3 , TYPE_3 . getName ( ) ) )  VAR_2 . add ( VAR_3 , TYPE_3 . getName ( ) ) (  VAR_2 . add ( VAR_4 , VAR_1 . METHOD_2 ( ) . getName ( ) ) )  VAR_2 . add ( VAR_4 , VAR_1 . METHOD_2 ( ) . getName ( ) ) (  VAR_2 . add ( VAR_5 , TYPE_4 . METHOD_3 ( ) ) )  VAR_2 . add ( VAR_5 , TYPE_4 . METHOD_3 ( ) ) (  VAR_2 . add ( VAR_6 , java.lang.String.valueOf ( org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) ) ) )  VAR_2 . add ( VAR_6 , java.lang.String.valueOf ( org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) ) ) (  VAR_7 . add ( VAR_2 ) )  VAR_7 . add ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = dao . METHOD_2 ( VAR_2 , VAR_3 , TYPE_2 . METHOD_3 ( VAR_4 ) ) ) INIT = dao . METHOD_2 ( VAR_2 , VAR_3 , TYPE_2 . METHOD_3 ( VAR_4 ) ) ) VAR VAR (  TYPE_3 . METHOD_4 ( VAR_1 ) )  TYPE_3 . METHOD_4 ( VAR_1 ) (  TYPE_3 . METHOD_5 ( VAR_1 . METHOD_6 ( VAR_5 ) ) )  TYPE_3 . METHOD_5 ( VAR_1 . METHOD_6 ( VAR_5 ) ) ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_6 ) NAME VAR_6 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  TYPE_3 . METHOD_7 ( VAR_4 , VAR_6 . METHOD_8 ( ) ) )  TYPE_3 . METHOD_7 ( VAR_4 , VAR_6 . METHOD_8 ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
