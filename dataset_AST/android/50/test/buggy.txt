( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  java.lang.System.out.println ( STRING_1 ) )  java.lang.System.out.println ( STRING_1 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  TYPE_2 . METHOD_2 ( VAR_1 , INT_1 ) )  TYPE_2 . METHOD_2 ( VAR_1 , INT_1 ) (  java.lang.System.out.println ( TYPE_2 . METHOD_3 ( INT_1 ) ) )  java.lang.System.out.println ( TYPE_2 . METHOD_3 ( INT_1 ) ) (  java.lang.System.out.println ( TYPE_2 . METHOD_4 ( VAR_1 ) ) )  java.lang.System.out.println ( TYPE_2 . METHOD_4 ( VAR_1 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE android.bluetooth.BluetoothDevice ) TYPE android.bluetooth.BluetoothDevice ( NAME device ) NAME device ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  android.util.Log.v ( TYPE_1 . TAG , STRING_1 ) )  android.util.Log.v ( TYPE_1 . TAG , STRING_1 ) ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME service ) NAME service ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( IF IF ( COND service == null ) COND service == null ( THEN THEN (  return VAR_2 ; )  return VAR_2 ; ) THEN THEN ) IF IF (  return service . METHOD_1 ( device ) ; )  return service . METHOD_1 ( device ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  VAR_3 )  VAR_3 ( BLOCK BLOCK ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN (  VAR_3 . METHOD_2 ( VAR_1 , VAR_2 ) )  VAR_3 . METHOD_2 ( VAR_1 , VAR_2 ) ) THEN THEN ( ELSE ELSE (  VAR_3 . METHOD_3 ( VAR_1 ) )  VAR_3 . METHOD_3 ( VAR_1 ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN long ) RETURN long ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_1 ) ) COND ! ( VAR_1 ) ( THEN THEN (  throw new TYPE_1 ( STRING_1 ) ; )  throw new TYPE_1 ( STRING_1 ) ; ) THEN THEN ) IF IF (  return METHOD_1 ( METHOD_2 ( METHOD_3 ( i , VAR_2 ) ) ) ; )  return METHOD_1 ( METHOD_2 ( METHOD_3 ( i , VAR_2 ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN long ) RETURN long ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE long ) TYPE long ( NAME arg ) NAME arg ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  throw new TYPE_1 ( ) ; )  throw new TYPE_1 ( ) ; ) THEN THEN ) IF IF (  return arg > > 0 ; )  return arg > > 0 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE TYPE_1<java.lang.String> ) TYPE TYPE_1<java.lang.String> ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME d ) NAME d ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME f ) NAME f ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( d ) )  VAR_1 . METHOD_2 ( d ) ( VAR VAR ( TYPE int ) TYPE int ( NAME ret ) NAME ret ( INIT = VAR_1 . get ( f ) ) INIT = VAR_1 . get ( f ) ) VAR VAR (  return ret ; )  return ret ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Class<?>[] ) TYPE java.lang.Class<?>[] ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_2 ) ; )  return TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_2 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1[] ) RETURN TYPE_1[] ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME parent ) NAME parent ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME count ) NAME count ( INIT = parent . METHOD_2 ( ) ) INIT = parent . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1[] ) TYPE TYPE_1[] ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 [ count ] ) INIT = new TYPE_1 [ count ] ) VAR VAR (  parent . METHOD_3 ( VAR_1 , true ) )  parent . METHOD_3 ( VAR_1 , true ) (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  this )  this ( BLOCK BLOCK ( IF IF ( COND null != VAR_1 ) COND null != VAR_1 ( THEN THEN (  VAR_2 = VAR_1 )  VAR_2 = VAR_1 ) THEN THEN ) IF IF ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN long ) RETURN long ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_1 ) ) COND ! ( VAR_1 ) ( THEN THEN (  METHOD_2 ( ) )  METHOD_2 ( ) ) THEN THEN ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  return length ; )  return length ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  throw new java.lang.NullPointerException ( ) ; )  throw new java.lang.NullPointerException ( ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_3 . METHOD_2 ( ) ) INIT = TYPE_3 . METHOD_2 ( ) ) VAR VAR (  METHOD_3 ( ) )  METHOD_3 ( ) (  VAR_3 = VAR_1 )  VAR_3 = VAR_1 ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  return ( ( TYPE_1 ) ( super . METHOD_1 ( ) ) ) ; )  return ( ( TYPE_1 ) ( super . METHOD_1 ( ) ) ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_3 ( e ) ; )  throw new TYPE_3 ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_1 ( ) ) INIT = TYPE_1 . METHOD_1 ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( METHOD_2 ( ) . METHOD_3 ( ) . toString ( ) ) + STRING_1 ) INIT = ( METHOD_2 ( ) . METHOD_3 ( ) . toString ( ) ) + STRING_1 ) VAR VAR (  VAR_1 . METHOD_4 ( VAR_2 ) )  VAR_1 . METHOD_4 ( VAR_2 ) (  VAR_1 . METHOD_5 ( ) )  VAR_1 . METHOD_5 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return VAR_2 [ VAR_1 ] ; )  return VAR_2 [ VAR_1 ] ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1.File ) RETURN TYPE_1.File ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME info ) NAME info ( INIT = VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) INIT = VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) VAR VAR (  return info == null ? null : info . METHOD_5 ( ) ; )  return info == null ? null : info . METHOD_5 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER synchronized ) MODIFIER synchronized ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  return METHOD_3 ( mContext , VAR_1 ) ; )  return METHOD_3 ( mContext , VAR_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME address ) NAME address ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( METHOD_2 ( address , VAR_1 , VAR_2 ) ) ) COND ! ( METHOD_2 ( address , VAR_1 , VAR_2 ) ) ( THEN THEN (  android.util.Log.e ( VAR_3 . TAG , STRING_1 ) )  android.util.Log.e ( VAR_3 . TAG , STRING_1 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN float ) RETURN float ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME index ) NAME index ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  throw new TYPE_1 ( ) ; )  throw new TYPE_1 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME p ) NAME p ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  super . METHOD_1 ( p ) )  super . METHOD_1 ( p ) (  VAR_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( p ) ) )  VAR_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( p ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<android.bluetooth.BluetoothDevice> ) RETURN java.util.List<android.bluetooth.BluetoothDevice> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  return VAR_1 . METHOD_2 ( ) ; )  return VAR_1 . METHOD_2 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2[] ) TYPE TYPE_2[] ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_6 ) NAME VAR_6 ) VAR VAR ) PARAMS PARAMS ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE android.renderscript.Allocation[] ) TYPE android.renderscript.Allocation[] ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE android.renderscript.Allocation ) TYPE android.renderscript.Allocation ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME v ) NAME v ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , v , new TYPE_2 ( ) ) )  METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , v , new TYPE_2 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.io.File[] ) RETURN java.io.File[] ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  return new java.io.File [ ] { TYPE_1 . METHOD_2 ( STRING_1 ) , TYPE_1 . METHOD_2 ( STRING_2 ) } ; )  return new java.io.File [ ] { TYPE_1 . METHOD_2 ( STRING_1 ) , TYPE_1 . METHOD_2 ( STRING_2 ) } ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE char ) TYPE char ( NAME c ) NAME c ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return ( c == CHAR_1 ) || ( c == CHAR_2 ) ; )  return ( c == CHAR_1 ) || ( c == CHAR_2 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( VAR_1 , VAR_2 ) )  METHOD_2 ( VAR_1 , VAR_2 ) (  METHOD_3 ( ) )  METHOD_3 ( ) ( IF IF ( COND ( VAR_3 ) != null ) COND ( VAR_3 ) != null ( THEN THEN (  VAR_3 . METHOD_4 ( null ) )  VAR_3 . METHOD_4 ( null ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SWITCH SWITCH ( NAME VAR_1 ) NAME VAR_1 ( CASE VAR_2 ( BLOCK BLOCK (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) CASE VAR_2 ( CASE VAR_4 ( BLOCK BLOCK (  return VAR_5 ; )  return VAR_5 ; ) BLOCK BLOCK ) CASE VAR_4 ( CASE VAR_6 ( BLOCK BLOCK (  return VAR_7 ; )  return VAR_7 ; ) BLOCK BLOCK ) CASE VAR_6 ( DEFAULT DEFAULT ( BLOCK BLOCK (  throw new java.lang.IllegalArgumentException ( ( STRING_1 + VAR_1 ) ) ; )  throw new java.lang.IllegalArgumentException ( ( STRING_1 + VAR_1 ) ) ; ) BLOCK BLOCK ) DEFAULT DEFAULT ) SWITCH SWITCH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME data ) NAME data ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME offset ) NAME offset ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME length ) NAME length ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . println ( new java.lang.String ( TYPE_1 . METHOD_2 ( data , offset , ( offset + length ) ) ) ) )  VAR_1 . println ( new java.lang.String ( TYPE_1 . METHOD_2 ( data , offset , ( offset + length ) ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( new java.util.ArrayList < TYPE_1 > ( ) ) )  VAR_1 . METHOD_2 ( new java.util.ArrayList < TYPE_1 > ( ) ) (  TYPE_2 . METHOD_3 ( VAR_2 ) )  TYPE_2 . METHOD_3 ( VAR_2 ) (  org.mockito.Mockito.verify ( VAR_3 ) . METHOD_4 ( VAR_4 , false ) )  org.mockito.Mockito.verify ( VAR_3 ) . METHOD_4 ( VAR_4 , false ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  java.lang.System.out.println ( ( STRING_1 + VAR_1 ) ) )  java.lang.System.out.println ( ( STRING_1 + VAR_1 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME key ) NAME key ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  VAR_1 )  VAR_1 ( BLOCK BLOCK (  return VAR_1 . get ( key ) ; )  return VAR_1 . get ( key ) ; ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER native ) MODIFIER native ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME b ) NAME b ) VAR VAR ) PARAMS PARAMS ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME run ) NAME run ( BLOCK BLOCK (  return 0 ; )  return 0 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN long ) RETURN long ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE long ) TYPE long ( NAME arg ) NAME arg ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  throw new TYPE_1 ( ) ; )  throw new TYPE_1 ( ) ; ) THEN THEN ) IF IF (  return INT_1 - ( INT_2 - arg ) ; )  return INT_1 - ( INT_2 - arg ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( VAR_2 ) )  VAR_1 . METHOD_2 ( VAR_2 ) (  super . METHOD_1 ( VAR_1 ) )  super . METHOD_1 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  assertNotNull ( VAR_1 ) )  assertNotNull ( VAR_1 ) (  assertEquals ( 1 , VAR_1 . size ( ) ) )  assertEquals ( 1 , VAR_1 . size ( ) ) (  assertNotNull ( VAR_1 . get ( 0 ) ) )  assertNotNull ( VAR_1 . get ( 0 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( VAR_1 ) ) INIT = new TYPE_1 ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME s ) NAME s ( INIT = VAR_2 . getName ( VAR_3 ) ) INIT = VAR_2 . getName ( VAR_3 ) ) VAR VAR (  assertEquals ( STRING_2 , s ) )  assertEquals ( STRING_2 , s ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static native ) MODIFIER public static native ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME fd ) NAME fd ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ) PARAMS PARAMS ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return ( STRING_1 + ( TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) ) + STRING_1 ; )  return ( STRING_1 + ( TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) ) + STRING_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.android.jack.ir.ast.JDefinedClassOrInterface ) TYPE com.android.jack.ir.ast.JDefinedClassOrInterface ( NAME method ) NAME method ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( ) )  VAR_1 . METHOD_2 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME type ) NAME type ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE float[] ) TYPE float[] ( NAME f ) NAME f ( INIT = new float [ ] { } ) INIT = new float [ ] { } ) VAR VAR (  VAR_1 = new TYPE_1 ( this , type , i , f , VAR_2 ) )  VAR_1 = new TYPE_1 ( this , type , i , f , VAR_2 ) (  METHOD_2 ( VAR_1 ) )  METHOD_2 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND METHOD_2 ( STRING_1 ) ) COND METHOD_2 ( STRING_1 ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  METHOD_3 ( STRING_2 ) )  METHOD_3 ( STRING_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME index ) NAME index ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_2 . METHOD_2 ( index , VAR_1 ) )  VAR_2 . METHOD_2 ( index , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN double ) RETURN double ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE double ) TYPE double ( NAME arg ) NAME arg ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  throw new TYPE_1 ( ) ; )  throw new TYPE_1 ( ) ; ) THEN THEN ) IF IF (  return arg / ( - FLOAT_1 ) ; )  return arg / ( - FLOAT_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static native ) MODIFIER public static native ( RETURN byte[] ) RETURN byte[] ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME input ) NAME input ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  input = input . METHOD_2 ( STRING_1 , STRING_2 ) )  input = input . METHOD_2 ( STRING_1 , STRING_2 ) (  return TYPE_1 . METHOD_3 ( input ) ; )  return TYPE_1 . METHOD_3 ( input ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_2 ( e.getMessage ( ) ) ; )  throw new TYPE_2 ( e.getMessage ( ) ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME context ) NAME context ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  android.util.Log.d ( STRING_1 , STRING_2 ) )  android.util.Log.d ( STRING_1 , STRING_2 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( VAR_1 , context ) ) INIT = new TYPE_1 ( VAR_1 , context ) ) VAR VAR (  VAR_2 . start ( ) )  VAR_2 . start ( ) (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( VAR_2 , STRING_1 ) )  TYPE_1 . METHOD_2 ( VAR_2 , STRING_1 ) (  METHOD_3 ( VAR_1 , METHOD_4 ( VAR_1 , true ) , TYPE_2 . METHOD_5 ( VAR_1 ) ) )  METHOD_3 ( VAR_1 , METHOD_4 ( VAR_1 , true ) , TYPE_2 . METHOD_5 ( VAR_1 ) ) (  TYPE_1 . METHOD_6 ( VAR_2 ) )  TYPE_1 . METHOD_6 ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_4 . METHOD_2 ( new TYPE_3 ( VAR_1 , VAR_2 , VAR_3 ) ) )  VAR_4 . METHOD_2 ( new TYPE_3 ( VAR_1 , VAR_2 , VAR_3 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  callback . METHOD_2 ( ) )  callback . METHOD_2 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME e ) NAME e ( BLOCK BLOCK (  METHOD_3 ( uid , VAR_1 ) )  METHOD_3 ( uid , VAR_1 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN byte ) RETURN byte ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  return ( ( byte ) ( METHOD_2 ( ) ) ) ; )  return ( ( byte ) ( METHOD_2 ( ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( TYPE_3 . METHOD_3 ( VAR_1 ) ) )  METHOD_2 ( TYPE_3 . METHOD_3 ( VAR_1 ) ) (  METHOD_4 ( ) )  METHOD_4 ( ) (  VAR_2 = true )  VAR_2 = true ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , 0 ) )  METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , 0 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  this )  this ( BLOCK BLOCK (  VAR_1 = TYPE_1 . METHOD_2 ( address , VAR_2 ) )  VAR_1 = TYPE_1 . METHOD_2 ( address , VAR_2 ) ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER synchronized ) MODIFIER synchronized ( RETURN long ) RETURN long ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int[] ) TYPE int[] ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  return METHOD_3 ( mContext , VAR_1 , VAR_2 , VAR_3 ) ; )  return METHOD_3 ( mContext , VAR_1 , VAR_2 , VAR_3 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE char[] ) TYPE char[] ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( 0 , count , VAR_1 , VAR_2 ) )  METHOD_2 ( 0 , count , VAR_1 , VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  VAR_1 . METHOD_1 ( ) )  VAR_1 . METHOD_1 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR (  VAR_3 = super . METHOD_1 ( VAR_4 . METHOD_2 ( VAR_1 ) , VAR_2 ) )  VAR_3 = super . METHOD_1 ( VAR_4 . METHOD_2 ( VAR_1 ) , VAR_2 ) (  return VAR_3 == null ? null : METHOD_3 ( VAR_3 ) ; )  return VAR_3 == null ? null : METHOD_3 ( VAR_3 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 ) INIT = VAR_2 ) VAR VAR ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN ( TRY TRY ( BLOCK BLOCK (  VAR_1 . METHOD_1 ( ) )  VAR_1 . METHOD_1 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK (  TYPE_2 . METHOD_2 ( STRING_1 , e ) )  TYPE_2 . METHOD_2 ( STRING_1 , e ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_2 ) ( VAR_2 . METHOD_1 ( ) ) ) ) INIT = ( ( TYPE_2 ) ( VAR_2 . METHOD_1 ( ) ) ) ) VAR VAR (  METHOD_2 ( VAR_1 ) )  METHOD_2 ( VAR_1 ) (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ) COND TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ( THEN THEN (  VAR_1 = VAR_2 )  VAR_1 = VAR_2 ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR (  return ( ( VAR_2 . get ( 0 ) . METHOD_3 ( ) ) + STRING_1 ) + ( METHOD_4 ( VAR_1 ) ) ; )  return ( ( VAR_2 . get ( 0 ) . METHOD_3 ( ) ) + STRING_1 ) + ( METHOD_4 ( VAR_1 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME length ) NAME length ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ( INIT = false ) INIT = false ) VAR VAR ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  return ( count ) > > > 1 ; )  return ( count ) > > > 1 ; ) THEN THEN ( ELSE ELSE (  return count ; )  return count ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME r ) NAME r ( INIT = METHOD_2 ( VAR_1 , false , false ) ) INIT = METHOD_2 ( VAR_1 , false , false ) ) VAR VAR (  return new TYPE_1 ( r . METHOD_3 ( ) ) ; )  return new TYPE_1 ( r . METHOD_3 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( ) ) INIT = TYPE_2 . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  throw new android.os.RemoteException ( STRING_1 ) ; )  throw new android.os.RemoteException ( STRING_1 ) ; ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Integer ) TYPE java.lang.Integer ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME of ) NAME of ( PARAMS PARAMS ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return new TYPE_1 ( VAR_1 , VAR_2 ) ; )  return new TYPE_1 ( VAR_1 , VAR_2 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  this )  this ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( true ) )  VAR_1 . METHOD_2 ( true ) (  VAR_1 . METHOD_3 ( ) )  VAR_1 . METHOD_3 ( ) ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.io.File ) RETURN java.io.File ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  return TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( STRING_1 ) , VAR_1 ) ; )  return TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( STRING_1 ) , VAR_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  TYPE_2 . METHOD_3 ( VAR_2 , VAR_1 . getName ( ) , null ) )  TYPE_2 . METHOD_3 ( VAR_2 , VAR_1 . getName ( ) , null ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME value ) NAME value ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME b ) NAME b ( INIT = TYPE_2 . METHOD_2 ( 4 ) ) INIT = TYPE_2 . METHOD_2 ( 4 ) ) VAR VAR (  b . METHOD_3 ( value ) )  b . METHOD_3 ( value ) (  VAR_1 . METHOD_4 ( b . METHOD_5 ( ) ) )  VAR_1 . METHOD_4 ( b . METHOD_5 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME x ) NAME x ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  METHOD_1 ( ( ( TYPE_3 ) ( x ) ) , VAR_1 ) )  METHOD_1 ( ( ( TYPE_3 ) ( x ) ) , VAR_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Throwable ) TYPE java.lang.Throwable ( NAME e ) NAME e ( BLOCK BLOCK (  throw METHOD_2 ( x , e ) ; )  throw METHOD_2 ( x , e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1[] ) TYPE TYPE_1[] ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME session ) NAME session ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return METHOD_2 ( VAR_1 , VAR_2 , session . METHOD_3 ( ) , false ) ; )  return METHOD_2 ( VAR_1 , VAR_2 , session . METHOD_3 ( ) , false ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME key ) NAME key ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND key == ( VAR_1 ) ) COND key == ( VAR_1 ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( SYNCHRONIZED SYNCHRONIZED (  VAR_2 )  VAR_2 ( BLOCK BLOCK (  VAR_3 . METHOD_2 ( key ) )  VAR_3 . METHOD_2 ( key ) (  VAR_4 . METHOD_2 ( key ) )  VAR_4 . METHOD_2 ( key ) ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME response ) NAME response ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  return VAR_2 . METHOD_2 ( response ) ; )  return VAR_2 . METHOD_2 ( response ) ; ) THEN THEN ( ELSE ELSE (  return METHOD_3 ( ( ( ( STRING_1 + id ) + STRING_2 ) + response ) ) ; )  return METHOD_3 ( ( ( ( STRING_1 + id ) + STRING_2 ) + response ) ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME key ) NAME key ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME value ) NAME value ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  this . VAR_1 . METHOD_2 ( key , value ) )  this . VAR_1 . METHOD_2 ( key , value ) (  return this ; )  return this ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return METHOD_2 ( VAR_1 ) . METHOD_3 ( ) ; )  return METHOD_2 ( VAR_1 ) . METHOD_3 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME location ) NAME location ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME c ) NAME c ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( IF IF ( COND location . equals ( c . METHOD_2 ( ) ) ) COND location . equals ( c . METHOD_2 ( ) ) ( THEN THEN (  return c ; )  return c ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME x ) NAME x ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME y ) NAME y ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return x < y ; )  return x < y ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE android.os.Bundle ) TYPE android.os.Bundle ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_2 . METHOD_2 ( VAR_1 ) )  VAR_2 . METHOD_2 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_1 ( new java.util.HashMap < > ( ) , true , true ) )  TYPE_1 . METHOD_1 ( new java.util.HashMap < > ( ) , true , true ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) != null ) COND ( VAR_1 ) != null ( THEN THEN (  VAR_1 . METHOD_2 ( ) )  VAR_1 . METHOD_2 ( ) ) THEN THEN ) IF IF (  VAR_2 . METHOD_2 ( ) )  VAR_2 . METHOD_2 ( ) (  VAR_3 . METHOD_2 ( ) )  VAR_3 . METHOD_2 ( ) (  VAR_4 . METHOD_2 ( ) )  VAR_4 . METHOD_2 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.junit.Assert.assertEquals ( VAR_1 , VAR_2 . METHOD_2 ( null ) ) )  org.junit.Assert.assertEquals ( VAR_1 , VAR_2 . METHOD_2 ( null ) ) (  TYPE_1 . METHOD_3 ( VAR_2 . METHOD_4 ( ) , TYPE_2 . METHOD_5 ( VAR_3 class ) ) )  TYPE_1 . METHOD_3 ( VAR_2 . METHOD_4 ( ) , TYPE_2 . METHOD_5 ( VAR_3 class ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME location ) NAME location ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME data ) NAME data ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_3 . METHOD_2 ( this , VAR_1 , VAR_4 ) ) COND VAR_3 . METHOD_2 ( this , VAR_1 , VAR_4 ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  super . METHOD_1 ( VAR_1 , location , VAR_2 , data ) )  super . METHOD_1 ( VAR_1 , location , VAR_2 , data ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( TYPE_1 . METHOD_2 ( ) ) == ( this . VAR_1 ) ) COND ( TYPE_1 . METHOD_2 ( ) ) == ( this . VAR_1 ) ( THEN THEN (  TYPE_1 . METHOD_3 ( null ) )  TYPE_1 . METHOD_3 ( null ) ) THEN THEN ) IF IF (  VAR_1 . METHOD_1 ( ) )  VAR_1 . METHOD_1 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  android.util.Log.d ( TYPE_1 . TAG , STRING_1 ) )  android.util.Log.d ( TYPE_1 . TAG , STRING_1 ) ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME service ) NAME service ( INIT = METHOD_2 ( VAR_2 ) ) INIT = METHOD_2 ( VAR_2 ) ) VAR VAR ( IF IF ( COND service == null ) COND service == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  service . METHOD_1 ( ) )  service . METHOD_1 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME info ) NAME info ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_2 . METHOD_2 ( VAR_1 ) )  VAR_2 . METHOD_2 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_2 ( 3 ) ) INIT = TYPE_2 . METHOD_2 ( 3 ) ) VAR VAR (  assertTrue ( VAR_1 . METHOD_3 ( ) ) )  assertTrue ( VAR_1 . METHOD_3 ( ) ) (  assertFalse ( VAR_2 . METHOD_3 ( ) ) )  assertFalse ( VAR_2 . METHOD_3 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( INT_1 , INT_2 ) )  METHOD_2 ( INT_1 , INT_2 ) (  METHOD_3 ( VAR_1 ) )  METHOD_3 ( VAR_1 ) (  METHOD_4 ( ) )  METHOD_4 ( ) (  METHOD_5 ( ) )  METHOD_5 ( ) (  METHOD_6 ( ) )  METHOD_6 ( ) (  TYPE_1 . METHOD_7 ( this ) )  TYPE_1 . METHOD_7 ( this ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME v ) NAME v ( INIT = VAR_1 . METHOD_2 ( ) . VAR_3 ) INIT = VAR_1 . METHOD_2 ( ) . VAR_3 ) VAR VAR (  return TYPE_1 . METHOD_1 ( VAR_1 , v , VAR_2 ) ; )  return TYPE_1 . METHOD_1 ( VAR_1 , v , VAR_2 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return METHOD_2 ( ) ; )  return METHOD_2 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN TYPE_1[] ) RETURN TYPE_1[] ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME index ) NAME index ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 [ index ] ) INIT = VAR_2 [ index ] ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_3 . METHOD_2 ( VAR_1 ) ) INIT = TYPE_3 . METHOD_2 ( VAR_1 ) ) VAR VAR (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME line ) NAME line ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND line != null ) COND line != null ( THEN THEN (  METHOD_2 ( line ) )  METHOD_2 ( line ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME x ) NAME x ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_1 ( ( ( TYPE_3 ) ( x ) ) , VAR_1 ) )  METHOD_1 ( ( ( TYPE_3 ) ( x ) ) , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<java.lang.String> ) RETURN java.util.List<java.lang.String> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  return TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 , VAR_8 , VAR_9 , VAR_10 ) ; )  return TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 , VAR_8 , VAR_9 , VAR_10 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( false , true , true , true ) )  METHOD_2 ( false , true , true , true ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.io.File ) RETURN java.io.File ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR (  VAR_1 = TYPE_2 . METHOD_2 ( ) )  VAR_1 = TYPE_2 . METHOD_2 ( ) (  return new java.io.File ( VAR_1 , ( name + ( VAR_2 ) ) ) ; )  return new java.io.File ( VAR_1 , ( name + ( VAR_2 ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME c ) NAME c ( INIT = new TYPE_1 ( 5 ) ) INIT = new TYPE_1 ( 5 ) ) VAR VAR (  c . METHOD_2 ( STRING_1 , null ) )  c . METHOD_2 ( STRING_1 , null ) (  METHOD_3 ( ) )  METHOD_3 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.NullPointerException ) TYPE java.lang.NullPointerException ( NAME VAR_1 ) NAME VAR_1 ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME locale ) NAME locale ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return TYPE_2 . METHOD_1 ( locale , this , count ) ; )  return TYPE_2 . METHOD_1 ( locale , this , count ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_2 ) != null ) COND ( VAR_2 ) != null ( THEN THEN (  VAR_2 . METHOD_2 ( ) )  VAR_2 . METHOD_2 ( ) ) THEN THEN ) IF IF (  VAR_1 . METHOD_1 ( ) )  VAR_1 . METHOD_1 ( ) (  METHOD_3 ( VAR_1 ) )  METHOD_3 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME version ) NAME version ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_3 ) == false ) COND ( VAR_3 ) == false ( THEN THEN (  throw new java.lang.RuntimeException ( ( ( VAR_4 . TAG ) + STRING_1 ) ) ; )  throw new java.lang.RuntimeException ( ( ( VAR_4 . TAG ) + STRING_1 ) ) ; ) THEN THEN ) IF IF (  return METHOD_2 ( VAR_1 , VAR_2 , version ) ; )  return METHOD_2 ( VAR_1 , VAR_2 , version ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN float ) RETURN float ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE float ) TYPE float ( NAME a ) NAME a ) VAR VAR ( VAR VAR ( TYPE float ) TYPE float ( NAME b ) NAME b ) VAR VAR ( VAR VAR ( TYPE float ) TYPE float ( NAME c ) NAME c ) VAR VAR (  a = Main . METHOD_2 ( FLOAT_1 ) )  a = Main . METHOD_2 ( FLOAT_1 ) (  b = Main . METHOD_2 ( FLOAT_2 ) )  b = Main . METHOD_2 ( FLOAT_2 ) (  c = a - b )  c = a - b (  return c ; )  return c ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ( IN VAR_5 ) IN VAR_5 ( BLOCK BLOCK (  VAR_3 . METHOD_2 ( VAR_1 , VAR_4 , VAR_2 ) )  VAR_3 . METHOD_2 ( VAR_1 , VAR_4 , VAR_2 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = field . METHOD_2 ( VAR_2 class ) ) INIT = field . METHOD_2 ( VAR_2 class ) ) VAR VAR (  return TYPE_3 . METHOD_3 ( VAR_1 ) ; )  return TYPE_3 . METHOD_3 ( VAR_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( true , true , true , true ) )  METHOD_2 ( true , true , true , true ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 != null ) && ( ( VAR_1 . length ) == 0 ) ) COND ( VAR_1 != null ) && ( ( VAR_1 . length ) == 0 ) ( THEN THEN (  throw new java.lang.IllegalArgumentException ( STRING_1 ) ; )  throw new java.lang.IllegalArgumentException ( STRING_1 ) ; ) THEN THEN ) IF IF (  VAR_2 = VAR_1 )  VAR_2 = VAR_1 ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME error ) NAME error ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.Throwable ) TYPE java.lang.Throwable ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_1 . log ( VAR_3 , VAR_2 ) )  TYPE_1 . log ( VAR_3 , VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  throw new java.lang.NullPointerException ( STRING_1 ) ; )  throw new java.lang.NullPointerException ( STRING_1 ) ; ) THEN THEN ) IF IF (  VAR_2 . METHOD_1 ( VAR_1 . getName ( ) , VAR_1 ) )  VAR_2 . METHOD_1 ( VAR_1 . getName ( ) , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME context ) NAME context ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME location ) NAME location ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME data ) NAME data ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  throw new TYPE_4 ( STRING_1 ) ; )  throw new TYPE_4 ( STRING_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE int[] ) TYPE int[] ( NAME a ) NAME a ( INIT = null ) INIT = null ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( a ) ) INIT = new TYPE_1 ( a ) ) VAR VAR (  METHOD_2 ( ) )  METHOD_2 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.NullPointerException ) TYPE java.lang.NullPointerException ( NAME VAR_2 ) NAME VAR_2 ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME method ) NAME method ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_4 ) > 0 ) COND ( VAR_4 ) > 0 ( THEN THEN (  VAR_3 . METHOD_2 ( VAR_1 , method , VAR_2 , VAR_5 ) )  VAR_3 . METHOD_2 ( VAR_1 , method , VAR_2 , VAR_5 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  this . VAR_2 = VAR_1 )  this . VAR_2 = VAR_1 ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( ( VAR_1 ) == 0 ) && ( ( VAR_2 ) == true ) ) COND ( ( VAR_1 ) == 0 ) && ( ( VAR_2 ) == true ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ( ELSE ELSE (  return false ; )  return false ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  METHOD_3 ( ) . METHOD_4 ( true ) )  METHOD_3 ( ) . METHOD_4 ( true ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_1 ( e ) ; )  throw new TYPE_1 ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  VAR_3 )  VAR_3 ( BLOCK BLOCK (  METHOD_2 ( VAR_1 , VAR_2 , true ) )  METHOD_2 ( VAR_1 , VAR_2 , true ) ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  return ( ( ( VAR_1 ) && ( ( VAR_2 ) != null ) ) && ( VAR_2 . METHOD_2 ( ) ) ) && ( ( METHOD_3 ( ) ) != ( VAR_3 ) ) ; )  return ( ( ( VAR_1 ) && ( ( VAR_2 ) != null ) ) && ( VAR_2 . METHOD_2 ( ) ) ) && ( ( METHOD_3 ( ) ) != ( VAR_3 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_1 ( VAR_2 ) )  METHOD_1 ( VAR_2 ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME field ) NAME field ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND field != null ) COND field != null ( THEN THEN (  METHOD_1 ( field ) )  METHOD_1 ( field ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE byte ) TYPE byte ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_2 . METHOD_1 ( VAR_1 ) )  VAR_2 . METHOD_1 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME node ) NAME node ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( node . METHOD_2 ( VAR_1 class ) ) != null ) COND ( node . METHOD_2 ( VAR_1 class ) ) != null ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  METHOD_3 ( node ) )  METHOD_3 ( node ) (  return super . METHOD_1 ( node ) ; )  return super . METHOD_1 ( node ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return new TYPE_1 ( VAR_1 , null , null , null , null , null ) ; )  return new TYPE_1 ( VAR_1 , null , null , null , null , null ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  return TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; )  return TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME test ) NAME test ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.Object[] ) TYPE java.lang.Object[] ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.lang.Object [ 2 ] ) INIT = new java.lang.Object [ 2 ] ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 [ 0 ] ) INIT = VAR_1 [ 0 ] ) VAR VAR (  VAR_2 . METHOD_1 ( ) )  VAR_2 . METHOD_1 ( ) (  VAR_1 [ 1 ] = VAR_2 )  VAR_1 [ 1 ] = VAR_2 ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME toString ) NAME toString ( BLOCK BLOCK (  return ( ( STRING_1 + ( VAR_1 ) ) + STRING_2 ) + ( VAR_2 ) ; )  return ( ( STRING_1 + ( VAR_1 ) ) + STRING_2 ) + ( VAR_2 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK (  METHOD_1 ( ) )  METHOD_1 ( ) (  TYPE_1 . METHOD_2 ( INT_1 ) )  TYPE_1 . METHOD_2 ( INT_1 ) (  TYPE_2 . d ( VAR_1 . TAG , STRING_1 ) )  TYPE_2 . d ( VAR_1 . TAG , STRING_1 ) (  TYPE_3 . METHOD_3 ( STRING_2 ) )  TYPE_3 . METHOD_3 ( STRING_2 ) (  VAR_2 . METHOD_4 ( VAR_3 , INT_2 ) )  VAR_2 . METHOD_4 ( VAR_3 , INT_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME callback ) NAME callback ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  throw new TYPE_3 ( ) ; )  throw new TYPE_3 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_2 ) == null ) COND ( VAR_2 ) == null ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF (  return VAR_2 . get ( VAR_1 ) . VAR_3 ; )  return VAR_2 . get ( VAR_1 ) . VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME value ) NAME value ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_2 . METHOD_2 ( name ) )  TYPE_2 . METHOD_2 ( name ) (  METHOD_3 ( value ) . VAR_1 . append ( name ) . append ( CHAR_1 ) . append ( value ) )  METHOD_3 ( value ) . VAR_1 . append ( name ) . append ( CHAR_1 ) . append ( value ) (  return this ; )  return this ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER synchronized ) MODIFIER synchronized ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  METHOD_3 ( mContext , id , VAR_1 , VAR_2 ) )  METHOD_3 ( mContext , id , VAR_1 , VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  this )  this ( BLOCK BLOCK (  VAR_2 = VAR_1 )  VAR_2 = VAR_1 ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static final ) MODIFIER public static final ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME provider ) NAME provider ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND provider == null ) COND provider == null ( THEN THEN (  throw new java.lang.IllegalArgumentException ( STRING_1 ) ; )  throw new java.lang.IllegalArgumentException ( STRING_1 ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME c ) NAME c ( INIT = TYPE_1 . METHOD_2 ( VAR_1 , provider ) ) INIT = TYPE_1 . METHOD_2 ( VAR_1 , provider ) ) VAR VAR (  return c ; )  return c ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = INT_1 ) INIT = INT_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME result ) NAME result ( INIT = 1 ) INIT = 1 ) VAR VAR (  result = ( VAR_1 * result ) + ( ( VAR_2 ) == null ? 0 : VAR_2 . METHOD_1 ( ) ) )  result = ( VAR_1 * result ) + ( ( VAR_2 ) == null ? 0 : VAR_2 . METHOD_1 ( ) ) (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( TYPE_1 . METHOD_3 ( ) [ 1 ] ) )  METHOD_2 ( TYPE_1 . METHOD_3 ( ) [ 1 ] ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  this . VAR_2 = VAR_1 )  this . VAR_2 = VAR_1 ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SWITCH SWITCH ( NAME VAR_2 . type ) NAME VAR_2 . type ( CASE VAR_3 ( BLOCK BLOCK (  return false ; )  return false ; ) BLOCK BLOCK ) CASE VAR_3 ( CASE VAR_4 ( BLOCK BLOCK (  return false ; )  return false ; ) BLOCK BLOCK ) CASE VAR_4 ( CASE VAR_5 ( BLOCK BLOCK (  return false ; )  return false ; ) BLOCK BLOCK ) CASE VAR_5 ( CASE VAR_6 ( BLOCK BLOCK (  return false ; )  return false ; ) BLOCK BLOCK ) CASE VAR_6 ( CASE VAR_7 ( BLOCK BLOCK (  return false ; )  return false ; ) BLOCK BLOCK ) CASE VAR_7 ( CASE VAR_8 ( BLOCK BLOCK (  return false ; )  return false ; ) BLOCK BLOCK ) CASE VAR_8 ( CASE VAR_9 ( BLOCK BLOCK (  return false ; )  return false ; ) BLOCK BLOCK ) CASE VAR_9 ( DEFAULT DEFAULT ( BLOCK BLOCK (  return true ; )  return true ; ) BLOCK BLOCK ) DEFAULT DEFAULT ) SWITCH SWITCH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( ) )  TYPE_1 . METHOD_2 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN long ) RETURN long ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE long ) TYPE long ( NAME result ) NAME result ( INIT = VAR_2 ) INIT = VAR_2 ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND VAR_3 < VAR_1 ) COND VAR_3 < VAR_1 ( UPDATE UPDATE (  ++ VAR_3 )  ++ VAR_3 ) UPDATE UPDATE ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( VAR_2 , VAR_2 ) )  TYPE_1 . METHOD_2 ( VAR_2 , VAR_2 ) ) BLOCK BLOCK ) FOR FOR (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( VAR_1 ) )  TYPE_1 . METHOD_2 ( VAR_1 ) ) BLOCK BLOCK ( FINALLY FINALLY (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME x ) NAME x ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME y ) NAME y ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  throw new TYPE_1 ( ) ; )  throw new TYPE_1 ( ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = x - y ) INIT = x - y ) VAR VAR (  return y + VAR_2 ; )  return y + VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return VAR_3 ? ( ( TYPE_1 ) ( new TYPE_4 ( VAR_1 , VAR_2 ) ) ) : ( ( TYPE_1 ) ( new TYPE_5 ( VAR_1 , VAR_2 ) ) ) ; )  return VAR_3 ? ( ( TYPE_1 ) ( new TYPE_4 ( VAR_1 , VAR_2 ) ) ) : ( ( TYPE_1 ) ( new TYPE_5 ( VAR_1 , VAR_2 ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return VAR_2 . METHOD_2 ( VAR_1 ) ; )  return VAR_2 . METHOD_2 ( VAR_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  return VAR_1 . METHOD_1 ( ) ; )  return VAR_1 . METHOD_1 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN long ) RETURN long ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME element ) NAME element ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return element . METHOD_1 ( VAR_1 ) ; )  return element . METHOD_1 ( VAR_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  throw new TYPE_1 ( ) ; )  throw new TYPE_1 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( address ) != 0 ) COND ( address ) != 0 ( THEN THEN ( TRY TRY ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( address , size ) )  VAR_1 . METHOD_2 ( address , size ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( BLOCK BLOCK (  throw new TYPE_2 ( VAR_2 ) ; )  throw new TYPE_2 ( VAR_2 ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  address = 0 )  address = 0 ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  return TYPE_1 . METHOD_1 ( this ) ; )  return TYPE_1 . METHOD_1 ( this ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME type ) NAME type ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  throw new TYPE_1 ( STRING_1 ) ; )  throw new TYPE_1 ( STRING_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME info ) NAME info ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME msg ) NAME msg ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( TYPE_1 . METHOD_1 ( ) ) < ( VAR_1 ) ) COND ( TYPE_1 . METHOD_1 ( ) ) < ( VAR_1 ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  log ( TYPE_1 , msg ) )  log ( TYPE_1 , msg ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME args ) NAME args ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  java.lang.System.out.println ( java.lang.String.format ( VAR_1 , args ) ) )  java.lang.System.out.println ( java.lang.String.format ( VAR_1 , args ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME a ) NAME a ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  this . METHOD_2 ( ) )  this . METHOD_2 ( ) (  TYPE_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( a , a . length , this . VAR_1 ) ) )  TYPE_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( a , a . length , this . VAR_1 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( ) )  VAR_1 . METHOD_2 ( ) (  VAR_2 . METHOD_3 ( ) )  VAR_2 . METHOD_3 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME t ) NAME t ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return METHOD_1 ( t , i ) ; )  return METHOD_1 ( t , i ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER native ) MODIFIER native ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME input ) NAME input ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME output ) NAME output ) VAR VAR ( VAR VAR ( TYPE float[] ) TYPE float[] ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  return METHOD_2 ( VAR_1 , STRING_1 ) ; )  return METHOD_2 ( VAR_1 , STRING_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME call ) NAME call ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_1 ( VAR_2 , VAR_3 ) ) INIT = TYPE_2 . METHOD_1 ( VAR_2 , VAR_3 ) ) VAR VAR (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public final ) MODIFIER public final ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) == null ) COND ( VAR_1 ) == null ( THEN THEN (  VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) )  VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) (  METHOD_2 ( ) )  METHOD_2 ( ) ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_2 . METHOD_1 ( VAR_1 , VAR_3 ) )  VAR_2 . METHOD_1 ( VAR_1 , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN double ) RETURN double ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_1 ) ) COND ! ( VAR_1 ) ( THEN THEN (  throw new TYPE_1 ( STRING_1 ) ; )  throw new TYPE_1 ( STRING_1 ) ; ) THEN THEN ) IF IF (  return METHOD_1 ( METHOD_2 ( METHOD_3 ( VAR_2 ) ) ) ; )  return METHOD_1 ( METHOD_2 ( METHOD_3 ( VAR_2 ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME w ) NAME w ( INIT = VAR_3 . METHOD_1 ( VAR_1 , VAR_2 ) ) INIT = VAR_3 . METHOD_1 ( VAR_1 , VAR_2 ) ) VAR VAR ( IF IF ( COND w != null ) COND w != null ( THEN THEN (  return w . METHOD_2 ( ) . METHOD_3 ( ) ; )  return w . METHOD_2 ( ) . METHOD_3 ( ) ; ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME type ) NAME type ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME arg ) NAME arg ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME size ) NAME size ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_2 = TYPE_1 . METHOD_2 ( in , type , arg ) )  VAR_2 = TYPE_1 . METHOD_2 ( in , type , arg ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME value ) NAME value ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME VAR_1 ) NAME VAR_1 ( IN VAR_2 . values ( ) ) IN VAR_2 . values ( ) ( BLOCK BLOCK ( IF IF ( COND VAR_1 . METHOD_2 ( value ) ) COND VAR_1 . METHOD_2 ( value ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public synchronized ) MODIFIER public synchronized ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  throw new TYPE_1 ( ) ; )  throw new TYPE_1 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public final ) MODIFIER public final ( RETURN TYPE_1<?> ) RETURN TYPE_1<?> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<TYPE_2> ) RETURN TYPE_1<TYPE_2> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return TYPE_4 . METHOD_2 ( null ) ; )  return TYPE_4 . METHOD_2 ( null ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER native ) MODIFIER native ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME input ) NAME input ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME output ) NAME output ) VAR VAR ( VAR VAR ( TYPE float[] ) TYPE float[] ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME args ) NAME args ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME t ) NAME t ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  t . METHOD_2 ( VAR_1 , VAR_1 , true ) )  t . METHOD_2 ( VAR_1 , VAR_1 , true ) (  args.out = TYPE_3 . METHOD_3 ( args . in , t ) )  args.out = TYPE_3 . METHOD_3 ( args . in , t ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 = true )  VAR_1 = true ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  return y ; )  return y ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME state ) NAME state ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  VAR_2 . METHOD_2 ( VAR_3 , state ) )  VAR_2 . METHOD_2 ( VAR_3 , state ) ) THEN THEN ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME VAR_4 ) NAME VAR_4 ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( WHILE WHILE ( COND ( VAR_1 . METHOD_2 ( ) ) == 0 ) COND ( VAR_1 . METHOD_2 ( ) ) == 0 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  TYPE_2 . METHOD_3 ( INT_1 ) )  TYPE_2 . METHOD_3 ( INT_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) WHILE WHILE ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME ret ) NAME ret ( INIT = false ) INIT = false ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( ) ) INIT = TYPE_1 . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND ( VAR_1 != null ) && ( ( VAR_1 . METHOD_3 ( ) ) == true ) ) COND ( VAR_1 != null ) && ( ( VAR_1 . METHOD_3 ( ) ) == true ) ( THEN THEN (  ret = true )  ret = true ) THEN THEN ) IF IF (  return ret ; )  return ret ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public final ) MODIFIER public final ( RETURN boolean ) RETURN boolean ( NAME equals ) NAME equals ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return super . equals ( VAR_1 ) ; )  return super . equals ( VAR_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static final ) MODIFIER private static final ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.StringBuilder ) TYPE java.lang.StringBuilder ( NAME sb ) NAME sb ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME item ) NAME item ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME valid ) NAME valid ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME value ) NAME value ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  sb.append ( item ) . append ( CHAR_1 ) )  sb.append ( item ) . append ( CHAR_1 ) ( IF IF ( COND valid ) COND valid ( THEN THEN (  sb.append ( value ) )  sb.append ( value ) ) THEN THEN ( ELSE ELSE (  sb.append ( CHAR_2 ) )  sb.append ( CHAR_2 ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME c ) NAME c ( INIT = TYPE_2 . METHOD_2 ( ) ) INIT = TYPE_2 . METHOD_2 ( ) ) VAR VAR (  c . METHOD_3 ( null , VAR_1 , STRING_1 ) )  c . METHOD_3 ( null , VAR_1 , STRING_1 ) (  METHOD_4 ( ) )  METHOD_4 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.NullPointerException ) TYPE java.lang.NullPointerException ( NAME VAR_2 ) NAME VAR_2 ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . METHOD_2 ( VAR_1 ) ) INIT = VAR_3 . METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_2 == null ) COND VAR_2 == null ( THEN THEN (  return STRING_1 ; )  return STRING_1 ; ) THEN THEN ) IF IF (  return VAR_4 . toString ( ) ; )  return VAR_4 . toString ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK (  VAR_1 . METHOD_1 ( 1 , METHOD_2 ( 1 ) ) )  VAR_1 . METHOD_1 ( 1 , METHOD_2 ( 1 ) ) (  VAR_1 . METHOD_1 ( 2 , METHOD_2 ( 2 ) ) )  VAR_1 . METHOD_1 ( 2 , METHOD_2 ( 2 ) ) (  VAR_1 . METHOD_3 ( 2 ) )  VAR_1 . METHOD_3 ( 2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1[] ) TYPE TYPE_1[] ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 [ VAR_2 ] ) INIT = new TYPE_1 [ VAR_2 ] ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_2 ( TYPE_3 . METHOD_2 ( VAR_1 ) ) ) INIT = new TYPE_2 ( TYPE_3 . METHOD_2 ( VAR_1 ) ) ) VAR VAR (  METHOD_3 ( ) )  METHOD_3 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.NullPointerException ) TYPE java.lang.NullPointerException ( NAME VAR_4 ) NAME VAR_4 ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME id ) NAME id ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  return VAR_2 . METHOD_2 ( ) ; )  return VAR_2 . METHOD_2 ( ) ; ) THEN THEN ( ELSE ELSE (  return METHOD_3 ( ( ( STRING_1 + id ) + STRING_2 ) ) ; )  return METHOD_3 ( ( ( STRING_1 + id ) + STRING_2 ) ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_1 ) ( VAR_3 ) ) ) INIT = ( ( TYPE_1 ) ( VAR_3 ) ) ) VAR VAR ( IF IF ( COND VAR_2 == null ) COND VAR_2 == null ( THEN THEN (  VAR_2 = new TYPE_1 ( VAR_4 , VAR_5 , VAR_6 ) )  VAR_2 = new TYPE_1 ( VAR_4 , VAR_5 , VAR_6 ) (  VAR_3 = VAR_2 )  VAR_3 = VAR_2 ) THEN THEN ) IF IF (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME path ) NAME path ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( new TYPE_2 ( java.lang.String . METHOD_3 ( VAR_2 ) , VAR_2 ) ) )  VAR_1 . METHOD_2 ( new TYPE_2 ( java.lang.String . METHOD_3 ( VAR_2 ) , VAR_2 ) ) (  VAR_1 . METHOD_4 ( path . METHOD_5 ( ) ) )  VAR_1 . METHOD_4 ( path . METHOD_5 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) == null ) COND ( VAR_1 ) == null ( THEN THEN ( TRY TRY ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK (  return TYPE_2 . METHOD_3 ( ) ; )  return TYPE_2 . METHOD_3 ( ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) THEN THEN ) IF IF (  return TYPE_3 . METHOD_4 ( VAR_1 ) ; )  return TYPE_3 . METHOD_4 ( VAR_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . METHOD_3 ( VAR_4 ) ) INIT = VAR_3 . METHOD_3 ( VAR_4 ) ) VAR VAR (  org.mockito.Mockito.verify ( VAR_5 ) . METHOD_4 ( org.mockito.Matchers.eq ( VAR_1 ) ) )  org.mockito.Mockito.verify ( VAR_5 ) . METHOD_4 ( org.mockito.Matchers.eq ( VAR_1 ) ) (  assertEquals ( VAR_2 , true ) )  assertEquals ( VAR_2 , true ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER synchronized ) MODIFIER synchronized ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME count ) NAME count ) VAR VAR ( VAR VAR ( TYPE float[] ) TYPE float[] ( NAME d ) NAME d ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  METHOD_3 ( mContext , id , VAR_1 , VAR_2 , count , d , VAR_3 ) )  METHOD_3 ( mContext , id , VAR_1 , VAR_2 , count , d , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME x ) NAME x ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME y ) NAME y ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  throw new TYPE_1 ( ) ; )  throw new TYPE_1 ( ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = x + y ) INIT = x + y ) VAR VAR (  return VAR_2 - y ; )  return VAR_2 - y ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME context ) NAME context ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return TYPE_2 . METHOD_2 ( context . METHOD_3 ( ) . METHOD_4 ( ) , 0 , 11 , 0 ) ; )  return TYPE_2 . METHOD_2 ( context . METHOD_3 ( ) . METHOD_4 ( ) , 0 , 11 , 0 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN float ) RETURN float ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE float ) TYPE float ( NAME a ) NAME a ) VAR VAR ( VAR VAR ( TYPE float ) TYPE float ( NAME b ) NAME b ) VAR VAR ( VAR VAR ( TYPE float ) TYPE float ( NAME c ) NAME c ) VAR VAR (  a = Main . METHOD_2 ( FLOAT_1 ) )  a = Main . METHOD_2 ( FLOAT_1 ) (  b = Main . METHOD_2 ( FLOAT_2 ) )  b = Main . METHOD_2 ( FLOAT_2 ) (  c = a % b )  c = a % b (  return c ; )  return c ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return METHOD_3 ( METHOD_4 ( VAR_1 ) , VAR_1 , null ) ; )  return METHOD_3 ( METHOD_4 ( VAR_1 ) , VAR_1 , null ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . METHOD_2 ( VAR_1 ) ) INIT = VAR_3 . METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_2 == null ) COND VAR_2 == null ( THEN THEN (  return 0 ; )  return 0 ; ) THEN THEN ) IF IF (  return VAR_4 . METHOD_3 ( ) ; )  return VAR_4 . METHOD_3 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( fd ) )  TYPE_1 . METHOD_2 ( fd ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME VAR_1 ) NAME VAR_1 ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  this )  this ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) != null ) COND ( VAR_1 ) != null ( THEN THEN (  VAR_1 . METHOD_2 ( ) )  VAR_1 . METHOD_2 ( ) (  VAR_1 = null )  VAR_1 = null (  VAR_2 = VAR_3 . METHOD_3 ( ) )  VAR_2 = VAR_3 . METHOD_3 ( ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED (  METHOD_4 ( ) )  METHOD_4 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return new TYPE_2 ( METHOD_3 ( ) , METHOD_4 ( ) , VAR_1 , METHOD_5 ( ) , METHOD_6 ( ) , METHOD_7 ( ) ) ; )  return new TYPE_2 ( METHOD_3 ( ) , METHOD_4 ( ) , VAR_1 , METHOD_5 ( ) , METHOD_6 ( ) , METHOD_7 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME get ) NAME get ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME listener ) NAME listener ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return get ( VAR_1 , listener , 0 , 0 , VAR_2 ) ; )  return get ( VAR_1 , listener , 0 , 0 , VAR_2 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = ! ( VAR_1 instanceof TYPE_2 ) ) INIT = ! ( VAR_1 instanceof TYPE_2 ) ) VAR VAR ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  METHOD_2 ( ) )  METHOD_2 ( ) (  METHOD_3 ( ) )  METHOD_3 ( ) ) THEN THEN ( ELSE ELSE (  METHOD_4 ( ) )  METHOD_4 ( ) ) ELSE ELSE ) IF IF (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static native ) MODIFIER private static native ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 = new TYPE_1 ( mRS , VAR_2 , VAR_3 ) )  VAR_1 = new TYPE_1 ( mRS , VAR_2 , VAR_3 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_2 ( mRS , INPUTSIZE ) ) INIT = new TYPE_2 ( mRS , INPUTSIZE ) ) VAR VAR (  VAR_5 = VAR_4 . METHOD_2 ( ) )  VAR_5 = VAR_4 . METHOD_2 ( ) (  METHOD_3 ( INT_1 , 0 ) )  METHOD_3 ( INT_1 , 0 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME app ) NAME app ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_2 ) != null ) COND ( VAR_2 ) != null ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME p ) NAME p ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK ( IF IF ( COND VAR_1 . equals ( p ) ) COND VAR_1 . equals ( p ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected final ) MODIFIER protected final ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_2 ) ( VAR_1 . METHOD_2 ( METHOD_3 ( ) ) ) ) ) INIT = ( ( TYPE_2 ) ( VAR_1 . METHOD_2 ( METHOD_3 ( ) ) ) ) ) VAR VAR (  return VAR_2 . METHOD_1 ( ) ; )  return VAR_2 . METHOD_1 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER final ) MODIFIER final ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  this )  this ( BLOCK BLOCK (  METHOD_2 ( VAR_1 ) )  METHOD_2 ( VAR_1 ) (  METHOD_3 ( VAR_1 ) )  METHOD_3 ( VAR_1 ) ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  return VAR_1 ? VAR_2 : 0 ; )  return VAR_1 ? VAR_2 : 0 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME key ) NAME key ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_2 = TYPE_3 . METHOD_2 ( key ) )  VAR_2 = TYPE_3 . METHOD_2 ( key ) ( IF IF ( COND ( VAR_2 ) == null ) COND ( VAR_2 ) == null ( THEN THEN (  throw new TYPE_4 ( STRING_1 ) ; )  throw new TYPE_4 ( STRING_1 ) ; ) THEN THEN ) IF IF (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN long ) RETURN long ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_1 ) NAME VAR_1 ( INIT = Main . METHOD_2 ( ( - 9 ) ) ) INIT = Main . METHOD_2 ( ( - 9 ) ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = Main . METHOD_3 ( 2 ) ) INIT = Main . METHOD_3 ( 2 ) ) VAR VAR (  return VAR_1 > > > VAR_2 ; )  return VAR_1 > > > VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_1 ( ) )  VAR_1 . METHOD_1 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( this ) == ( VAR_2 ) ) COND ( this ) == ( VAR_2 ) ( THEN THEN (  return VAR_3 ; )  return VAR_3 ; ) THEN THEN ) IF IF (  return new TYPE_1 ( this ) ; )  return new TYPE_1 ( this ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER synchronized ) MODIFIER synchronized ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME count ) NAME count ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME d ) NAME d ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  METHOD_3 ( mContext , id , VAR_1 , VAR_2 , count , d , VAR_3 , VAR_5 ) )  METHOD_3 ( mContext , id , VAR_1 , VAR_2 , count , d , VAR_3 , VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME state ) NAME state ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return ( ( state . state ) == ( VAR_1 ) ) || ( ( state . state ) == ( VAR_2 ) ) ; )  return ( ( state . state ) == ( VAR_1 ) ) || ( ( state . state ) == ( VAR_2 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  errln ( STRING_1 ) )  errln ( STRING_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME context ) NAME context ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_2 . METHOD_2 ( context ) )  TYPE_2 . METHOD_2 ( context ) (  return super . METHOD_1 ( context ) ; )  return super . METHOD_1 ( context ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME item ) NAME item ) VAR VAR ) PARAMS PARAMS ) METHOD METHOD
( METHOD METHOD ( MODIFIER synchronized ) MODIFIER synchronized ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME address ) NAME address ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME state ) NAME state ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_2 . METHOD_1 ( address . METHOD_2 ( ) , state ) )  VAR_2 . METHOD_1 ( address . METHOD_2 ( ) , state ) (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Integer ) TYPE java.lang.Integer ( NAME subId ) NAME subId ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( subId ) )  VAR_1 . METHOD_2 ( subId ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN long ) RETURN long ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  return this . METHOD_1 ( ) . VAR_1 ; )  return this . METHOD_1 ( ) . VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME type ) NAME type ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ) METHOD METHOD
( METHOD METHOD ( MODIFIER final ) MODIFIER final ( RETURN byte ) RETURN byte ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME offset ) NAME offset ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return VAR_1 . METHOD_2 ( ( offset + ( address ) ) ) ; )  return VAR_1 . METHOD_2 ( ( offset + ( address ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME context ) NAME context ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( TYPE_2 . METHOD_2 ( context ) ) && ( ( VAR_1 ) != null ) ) COND ( TYPE_2 . METHOD_2 ( context ) ) && ( ( VAR_1 ) != null ) ( THEN THEN (  context . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) )  context . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME key ) NAME key ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  assertEquals ( STRING_1 , key . METHOD_2 ( ) , ( - INT_1 ) ) )  assertEquals ( STRING_1 , key . METHOD_2 ( ) , ( - INT_1 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  android.util.Log.d ( VAR_3 . TAG , STRING_1 ) )  android.util.Log.d ( VAR_3 . TAG , STRING_1 ) ) THEN THEN ) IF IF ( VAR VAR ( TYPE android.content.Intent ) TYPE android.content.Intent ( NAME VAR_4 ) NAME VAR_4 ( INIT = new android.content.Intent ( VAR_5 ) ) INIT = new android.content.Intent ( VAR_5 ) ) VAR VAR (  METHOD_2 ( VAR_4 ) )  METHOD_2 ( VAR_4 ) ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  METHOD_3 ( ) )  METHOD_3 ( ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( false , false , false ) )  METHOD_2 ( false , false , false ) (  METHOD_3 ( 0 , false , true ) )  METHOD_3 ( 0 , false , true ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME args ) NAME args ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME t ) NAME t ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  t . METHOD_2 ( 3 , INT_1 , false ) )  t . METHOD_2 ( 3 , INT_1 , false ) (  args.out = TYPE_3 . METHOD_3 ( VAR_1 , t ) )  args.out = TYPE_3 . METHOD_3 ( VAR_1 , t ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( ) )  VAR_1 . METHOD_2 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ( FINALLY FINALLY (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND TYPE_1 . METHOD_2 ( VAR_1 ) ) COND TYPE_1 . METHOD_2 ( VAR_1 ) ( THEN THEN ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME d ) NAME d ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_3 = VAR_2 )  VAR_3 = VAR_2 (  return d ; )  return d ; ) THEN THEN ( ELSE ELSE (  return null ; )  return null ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 = VAR_2 . METHOD_2 ( ) )  VAR_1 = VAR_2 . METHOD_2 ( ) (  METHOD_3 ( VAR_3 ) )  METHOD_3 ( VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( null , STRING_1 ) )  TYPE_1 . METHOD_2 ( null , STRING_1 ) (  TYPE_1 . METHOD_2 ( STRING_2 , STRING_3 ) )  TYPE_1 . METHOD_2 ( STRING_2 , STRING_3 ) (  TYPE_1 . METHOD_2 ( STRING_4 , STRING_5 ) )  TYPE_1 . METHOD_2 ( STRING_4 , STRING_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND METHOD_2 ( ) ) COND METHOD_2 ( ) ( THEN THEN ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_3 ( null ) ) INIT = VAR_2 . METHOD_3 ( null ) ) VAR VAR (  VAR_1 . METHOD_4 ( ) )  VAR_1 . METHOD_4 ( ) (  VAR_1 . METHOD_5 ( ) )  VAR_1 . METHOD_5 ( ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME key ) NAME key ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  METHOD_2 ( ) )  METHOD_2 ( ) ) THEN THEN ) IF IF (  return TYPE_1 . METHOD_3 ( VAR_2 , 0 , VAR_3 , key ) ; )  return TYPE_1 . METHOD_3 ( VAR_2 , 0 , VAR_3 , key ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME path ) NAME path ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( mRS ) != null ) COND ( mRS ) != null ( THEN THEN (  mRS = null )  mRS = null (  METHOD_2 ( ) )  METHOD_2 ( ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER synchronized ) MODIFIER synchronized ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE float ) TYPE float ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  METHOD_3 ( mContext , id , VAR_1 , VAR_2 ) )  METHOD_3 ( mContext , id , VAR_1 , VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) (  METHOD_2 ( false ) )  METHOD_2 ( false ) (  METHOD_3 ( false ) )  METHOD_3 ( false ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( VAR_2 , VAR_3 , VAR_4 ) ) INIT = new TYPE_1 ( VAR_2 , VAR_3 , VAR_4 ) ) VAR VAR (  METHOD_4 ( VAR_1 ) )  METHOD_4 ( VAR_1 ) (  METHOD_5 ( ) )  METHOD_5 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE float[] ) TYPE float[] ( NAME d ) NAME d ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  mRS . METHOD_3 ( ) )  mRS . METHOD_3 ( ) (  mRS . METHOD_4 ( METHOD_5 ( mRS ) , d ) )  mRS . METHOD_4 ( METHOD_5 ( mRS ) , d ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  android.util.Log.e ( VAR_2 . TAG , ( STRING_1 + VAR_1 ) ) )  android.util.Log.e ( VAR_2 . TAG , ( STRING_1 + VAR_1 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME run ) NAME run ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  new TYPE_2 ( VAR_1 ) . METHOD_1 ( VAR_2 ) . METHOD_2 ( VAR_3 class ) . METHOD_2 ( VAR_4 class ) . METHOD_3 ( ) )  new TYPE_2 ( VAR_1 ) . METHOD_1 ( VAR_2 ) . METHOD_2 ( VAR_3 class ) . METHOD_2 ( VAR_4 class ) . METHOD_3 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME args ) NAME args ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 = 3 )  VAR_1 = 3 (  VAR_2 = 16 )  VAR_2 = 16 (  args.out = ( ( float ) ( TYPE_2 . METHOD_2 ( FLOAT_1 , args . in ) ) ) )  args.out = ( ( float ) ( TYPE_2 . METHOD_2 ( FLOAT_1 , args . in ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME start ) NAME start ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return VAR_2 . get ( java.lang.Integer . METHOD_2 ( VAR_1 ) ) ; )  return VAR_2 . get ( java.lang.Integer . METHOD_2 ( VAR_1 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK (  VAR_1 . METHOD_1 ( this , status ) )  VAR_1 . METHOD_1 ( this , status ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  return TYPE_3 . METHOD_2 ( ) . METHOD_1 ( VAR_1 , VAR_2 ) ; )  return TYPE_3 . METHOD_2 ( ) . METHOD_1 ( VAR_1 , VAR_2 ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME e ) NAME e ( BLOCK BLOCK (  throw new java.lang.RuntimeException ( STRING_1 , e ) ; )  throw new java.lang.RuntimeException ( STRING_1 , e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME e ) NAME e ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( e.getMessage ( ) ) )  METHOD_2 ( e.getMessage ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object[] ) TYPE java.lang.Object[] ( NAME a ) NAME a ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  TYPE_1 . METHOD_2 ( a ) )  TYPE_1 . METHOD_2 ( a ) ) THEN THEN ( ELSE ELSE (  TYPE_2 . METHOD_1 ( a ) )  TYPE_2 . METHOD_1 ( a ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . METHOD_2 ( VAR_1 ) ) INIT = VAR_3 . METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_2 == null ) COND VAR_2 == null ( THEN THEN (  return 0 ; )  return 0 ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_1 ( VAR_2 ) ) INIT = new TYPE_1 ( VAR_2 ) ) VAR VAR (  return VAR_3 . METHOD_3 ( VAR_4 ) ; )  return VAR_3 . METHOD_3 ( VAR_4 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) == null ) COND ( VAR_1 ) == null ( THEN THEN (  TYPE_1 . METHOD_2 ( ) )  TYPE_1 . METHOD_2 ( ) ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME value ) NAME value ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  return VAR_1 . METHOD_3 ( ( ( TYPE_2 ) ( VAR_2 [ VAR_3 ] ) ) , value ) ; )  return VAR_1 . METHOD_3 ( ( ( TYPE_2 ) ( VAR_2 [ VAR_3 ] ) ) , value ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<java.lang.String> ) RETURN TYPE_1<java.lang.String> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE short[] ) TYPE short[] ( NAME a ) NAME a ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_1 . METHOD_1 ( a ) )  TYPE_1 . METHOD_1 ( a ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = Main . METHOD_2 ( 1 ) ) INIT = Main . METHOD_2 ( 1 ) ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_2 ) NAME VAR_2 ( INIT = Main . METHOD_3 ( INT_1 ) ) INIT = Main . METHOD_3 ( INT_1 ) ) VAR VAR (  return VAR_1 < < VAR_2 ; )  return VAR_1 < < VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  VAR_3 . METHOD_2 ( VAR_4 , VAR_1 ) )  VAR_3 . METHOD_2 ( VAR_4 , VAR_1 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME VAR_5 ) NAME VAR_5 ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER final ) MODIFIER final ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME offset ) NAME offset ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME value ) NAME value ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( ( offset + ( address ) ) , value ) )  VAR_1 . METHOD_2 ( ( offset + ( address ) ) , value ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static native ) MODIFIER public static native ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE long ) TYPE long ( NAME ret ) NAME ret ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ) PARAMS PARAMS ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String[] ) RETURN java.lang.String[] ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  return VAR_2 . METHOD_1 ( VAR_1 ) ; )  return VAR_2 . METHOD_1 ( VAR_1 ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME e ) NAME e ( BLOCK BLOCK (  android.util.Log.w ( VAR_3 . TAG , STRING_1 , e ) )  android.util.Log.w ( VAR_3 . TAG , STRING_1 , e ) (  return null ; )  return null ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_2 . METHOD_2 ( VAR_1 ) )  VAR_2 . METHOD_2 ( VAR_1 ) (  VAR_3 . METHOD_3 ( VAR_4 ) )  VAR_3 . METHOD_3 ( VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . i ( STRING_1 , null ) )  TYPE_1 . i ( STRING_1 , null ) (  VAR_1 = null )  VAR_1 = null (  VAR_2 . METHOD_2 ( ) )  VAR_2 . METHOD_2 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( STRING_1 ) )  METHOD_2 ( STRING_1 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 ) INIT = VAR_2 ) VAR VAR ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  METHOD_3 ( STRING_2 ) )  METHOD_3 ( STRING_2 ) (  return ; )  return ; ) THEN THEN ) IF IF (  VAR_1 . METHOD_4 ( ) )  VAR_1 . METHOD_4 ( ) (  VAR_1 . METHOD_5 ( ) )  VAR_1 . METHOD_5 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME url ) NAME url ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  throw new TYPE_1 ( ) ; )  throw new TYPE_1 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER synchronized ) MODIFIER synchronized ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  METHOD_3 ( mContext , id , VAR_1 , VAR_2 ) )  METHOD_3 ( mContext , id , VAR_1 , VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  throw new TYPE_1 ( ) ; )  throw new TYPE_1 ( ) ; ) THEN THEN ) IF IF (  return ( i > INT_1 ) == ( Main . METHOD_2 ( ) ) ? INT_2 : INT_3 ; )  return ( i > INT_1 ) == ( Main . METHOD_2 ( ) ) ? INT_2 : INT_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN long ) RETURN long ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE long ) TYPE long ( NAME arg ) NAME arg ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  throw new TYPE_1 ( ) ; )  throw new TYPE_1 ( ) ; ) THEN THEN ) IF IF (  return arg - 0 ; )  return arg - 0 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_2 . METHOD_1 ( null ) )  TYPE_2 . METHOD_1 ( null ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME index ) NAME index ) VAR VAR ( VAR VAR ( TYPE short ) TYPE short ( NAME value ) NAME value ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  throw new TYPE_1 ( ) ; )  throw new TYPE_1 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  return ( VAR_1 ) instanceof TYPE_1 ; )  return ( VAR_1 ) instanceof TYPE_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( mRS , VAR_2 , VAR_3 ) ) INIT = new TYPE_1 ( mRS , VAR_2 , VAR_3 ) ) VAR VAR (  VAR_1 . METHOD_2 ( 16 ) )  VAR_1 . METHOD_2 ( 16 ) (  METHOD_3 ( ) )  METHOD_3 ( ) (  METHOD_4 ( ) )  METHOD_4 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN byte ) RETURN byte ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE short ) TYPE short ( NAME value ) NAME value ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  throw new TYPE_1 ( ) ; )  throw new TYPE_1 ( ) ; ) THEN THEN ) IF IF (  return ( ( byte ) ( ( char ) ( value ) ) ) ; )  return ( ( byte ) ( ( char ) ( value ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) ( TRY TRY ( BLOCK BLOCK (  VAR_1 . METHOD_1 ( VAR_2 ) )  VAR_1 . METHOD_1 ( VAR_2 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_1 ( STRING_1 , e , VAR_3 ) ; )  throw new TYPE_1 ( STRING_1 , e , VAR_3 ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE android.bluetooth.BluetoothDevice ) TYPE android.bluetooth.BluetoothDevice ( NAME device ) NAME device ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  log ( ( STRING_1 + device ) ) )  log ( ( STRING_1 + device ) ) (  VAR_2 . METHOD_2 ( device , VAR_1 ) )  VAR_2 . METHOD_2 ( device , VAR_1 ) (  METHOD_3 ( device , VAR_1 ) )  METHOD_3 ( device , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  VAR_3 . METHOD_1 ( TYPE_2 . METHOD_2 ( VAR_1 ) , VAR_2 ) )  VAR_3 . METHOD_1 ( TYPE_2 . METHOD_2 ( VAR_1 ) , VAR_2 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME ex ) NAME ex ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( i < 0 ) || ( i >= ( VAR_1 ) ) ) COND ( i < 0 ) || ( i >= ( VAR_1 ) ) ( THEN THEN (  throw new TYPE_1 ( ( STRING_1 + i ) ) ; )  throw new TYPE_1 ( ( STRING_1 + i ) ) ; ) THEN THEN ) IF IF (  VAR_2 = i )  VAR_2 = i ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME toString ) NAME toString ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SWITCH SWITCH ( NAME VAR_1 ) NAME VAR_1 ( CASE VAR_2 ( BLOCK BLOCK (  return STRING_1 ; )  return STRING_1 ; ) BLOCK BLOCK ) CASE VAR_2 ( CASE VAR_3 ( BLOCK BLOCK (  return STRING_2 ; )  return STRING_2 ; ) BLOCK BLOCK ) CASE VAR_3 ( CASE VAR_4 ( BLOCK BLOCK (  return STRING_3 ; )  return STRING_3 ; ) BLOCK BLOCK ) CASE VAR_4 ( DEFAULT DEFAULT ( BLOCK BLOCK (  throw new java.lang.IllegalArgumentException ( ( STRING_4 + VAR_1 ) ) ; )  throw new java.lang.IllegalArgumentException ( ( STRING_4 + VAR_1 ) ) ; ) BLOCK BLOCK ) DEFAULT DEFAULT ) SWITCH SWITCH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( VAR_1 , null , null , 0 , false , null ) )  TYPE_1 . METHOD_2 ( VAR_1 , null , null , 0 , false , null ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public native ) MODIFIER public native ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME value ) NAME value ) VAR VAR ) PARAMS PARAMS ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME type ) NAME type ( INIT = new TYPE_1 ( STRING_1 ) ) INIT = new TYPE_1 ( STRING_1 ) ) VAR VAR (  assertFalse ( type . METHOD_2 ( ) ) )  assertFalse ( type . METHOD_2 ( ) ) (  assertFalse ( type . METHOD_3 ( ) ) )  assertFalse ( type . METHOD_3 ( ) ) (  assertFalse ( type . METHOD_4 ( ) ) )  assertFalse ( type . METHOD_4 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME response ) NAME response ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( ( ( ( STRING_1 + ( TYPE_1 . METHOD_3 ( response ) ) ) + STRING_2 ) + VAR_1 ) ) )  METHOD_2 ( ( ( ( STRING_1 + ( TYPE_1 . METHOD_3 ( response ) ) ) + STRING_2 ) + VAR_1 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  this . VAR_1 = VAR_2 . METHOD_2 ( ) )  this . VAR_1 = VAR_2 . METHOD_2 ( ) (  VAR_1 . METHOD_3 ( new TYPE_1 ( STRING_1 , 0 ) ) )  VAR_1 . METHOD_3 ( new TYPE_1 ( STRING_1 , 0 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME element ) NAME element ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND element == null ) COND element == null ( THEN THEN (  return TYPE_1 . text ( STRING_1 ) ; )  return TYPE_1 . text ( STRING_1 ) ; ) THEN THEN ( ELSE ELSE (  return TYPE_3 . METHOD_1 ( element ) ; )  return TYPE_3 . METHOD_1 ( element ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_2 . d ( VAR_2 . TAG , STRING_1 ) )  TYPE_2 . d ( VAR_2 . TAG , STRING_1 ) (  VAR_3 = true )  VAR_3 = true (  METHOD_2 ( VAR_4 ) )  METHOD_2 ( VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME value ) NAME value ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 = value )  VAR_1 = value ( IF IF ( COND value instanceof TYPE_1 ) COND value instanceof TYPE_1 ( THEN THEN (  ( ( TYPE_1 ) ( value ) ) . METHOD_2 ( VAR_2 ) )  ( ( TYPE_1 ) ( value ) ) . METHOD_2 ( VAR_2 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static native ) MODIFIER public static native ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ) VAR VAR ) PARAMS PARAMS ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  return name . METHOD_2 ( ) ; )  return name . METHOD_2 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( STRING_1 ) )  TYPE_1 . METHOD_2 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.IllegalArgumentException ) TYPE java.lang.IllegalArgumentException ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER native ) MODIFIER native ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_2 . log ( VAR_3 , STRING_1 , VAR_1 ) )  VAR_2 . log ( VAR_3 , STRING_1 , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  this )  this ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) != null ) COND ( VAR_1 ) != null ( THEN THEN (  VAR_1 . METHOD_1 ( ) )  VAR_1 . METHOD_1 ( ) (  VAR_1 = null )  VAR_1 = null (  VAR_2 = VAR_3 . METHOD_2 ( ) )  VAR_2 = VAR_3 . METHOD_2 ( ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME in ) NAME in ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return TYPE_2 . METHOD_2 ( in ) ; )  return TYPE_2 . METHOD_2 ( in ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER synchronized ) MODIFIER synchronized ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; )  return METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  return print ( true ) ; )  return print ( true ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( ) ) INIT = TYPE_1 . METHOD_2 ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  METHOD_3 ( VAR_1 , null ) )  METHOD_3 ( VAR_1 , null ) (  TYPE_2 . fail ( ) )  TYPE_2 . fail ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( TYPE_1 . METHOD_2 ( ) ) == ( this ) ) COND ( TYPE_1 . METHOD_2 ( ) ) == ( this ) ( THEN THEN (  TYPE_1 . METHOD_3 ( null ) )  TYPE_1 . METHOD_3 ( null ) ) THEN THEN ) IF IF (  VAR_1 . METHOD_4 ( ) . METHOD_1 ( ) )  VAR_1 . METHOD_4 ( ) . METHOD_1 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  java.lang.System.out.println ( ( STRING_1 + ( VAR_1 . METHOD_2 ( ) ) ) ) )  java.lang.System.out.println ( ( STRING_1 + ( VAR_1 . METHOD_2 ( ) ) ) ) (  assertTrue ( STRING_2 . equals ( VAR_1 . METHOD_2 ( ) ) ) )  assertTrue ( STRING_2 . equals ( VAR_1 . METHOD_2 ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  throw new TYPE_3 ( ) ; )  throw new TYPE_3 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  s = new TYPE_1 ( STRING_1 ) . METHOD_2 ( STRING_2 ) )  s = new TYPE_1 ( STRING_1 ) . METHOD_2 ( STRING_2 ) ( TRY TRY ( BLOCK BLOCK (  s . METHOD_3 ( ) )  s . METHOD_3 ( ) (  fail ( STRING_3 ) )  fail ( STRING_3 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_2 ( CHAR_1 ) ) INIT = VAR_1 . METHOD_2 ( CHAR_1 ) ) VAR VAR ( IF IF ( COND VAR_2 < 0 ) COND VAR_2 < 0 ( THEN THEN (  return STRING_1 ; )  return STRING_1 ; ) THEN THEN ( ELSE ELSE (  return VAR_1 . METHOD_3 ( 0 , VAR_2 ) ; )  return VAR_1 . METHOD_3 ( 0 , VAR_2 ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  this . VAR_2 = VAR_1 )  this . VAR_2 = VAR_1 (  return this ; )  return this ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE android.os.Bundle ) TYPE android.os.Bundle ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return METHOD_2 ( VAR_1 , VAR_3 , VAR_4 ) ; )  return METHOD_2 ( VAR_1 , VAR_3 , VAR_4 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( VAR_1 , null , new java.io.File ( VAR_2 , STRING_1 ) , false ) )  TYPE_1 . METHOD_2 ( VAR_1 , null , new java.io.File ( VAR_2 , STRING_1 ) , false ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  VAR_3 )  VAR_3 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  return METHOD_3 ( VAR_4 ) . METHOD_1 ( VAR_5 , VAR_6 , VAR_1 , VAR_2 ) ; )  return METHOD_3 ( VAR_4 ) . METHOD_1 ( VAR_5 , VAR_6 , VAR_1 , VAR_2 ) ; ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( VAR_1 ) )  TYPE_1 . METHOD_2 ( VAR_1 ) (  TYPE_2 . fail ( ) )  TYPE_2 . fail ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.NullPointerException ) TYPE java.lang.NullPointerException ( NAME expected ) NAME expected ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  TYPE_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) )  TYPE_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  assertEquals ( VAR_1 . METHOD_2 ( ) , STRING_1 ) )  assertEquals ( VAR_1 . METHOD_2 ( ) , STRING_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME parent ) NAME parent ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return new TYPE_1 ( TYPE_1 . METHOD_2 ( VAR_1 ) , VAR_2 , parent ) ; )  return new TYPE_1 ( TYPE_1 . METHOD_2 ( VAR_1 ) , VAR_2 , parent ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME append ) NAME append ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return new TYPE_4 ( VAR_2 . METHOD_1 ( VAR_1 . METHOD_2 ( ) , append ) , new TYPE_5 ( ) ) ; )  return new TYPE_4 ( VAR_2 . METHOD_1 ( VAR_1 . METHOD_2 ( ) , append ) , new TYPE_5 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( STRING_1 , 11 , STRING_2 , 3 ) )  METHOD_2 ( STRING_1 , 11 , STRING_2 , 3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME arg1 ) NAME arg1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  throw new TYPE_1 ( ) ; )  throw new TYPE_1 ( ) ; ) THEN THEN ) IF IF (  return ( - arg1 ) - VAR_1 ; )  return ( - arg1 ) - VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME v ) NAME v ( INIT = VAR_1 . METHOD_2 ( ) . VAR_3 ) INIT = VAR_1 . METHOD_2 ( ) . VAR_3 ) VAR VAR (  return TYPE_1 . METHOD_1 ( VAR_1 , v , VAR_2 , VAR_4 ) ; )  return TYPE_1 . METHOD_1 ( VAR_1 , v , VAR_2 , VAR_4 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME args ) NAME args ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( args [ 1 ] ) )  TYPE_1 . METHOD_2 ( args [ 1 ] ) (  Main . METHOD_3 ( ) )  Main . METHOD_3 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER synchronized ) MODIFIER synchronized ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME s ) NAME s ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  METHOD_3 ( mContext , VAR_1 , VAR_2 , s ) )  METHOD_3 ( mContext , VAR_1 , VAR_2 , s ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE android.os.Message ) TYPE android.os.Message ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  VAR_3 )  VAR_3 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  METHOD_3 ( VAR_4 ) . METHOD_1 ( VAR_5 , VAR_6 , VAR_1 , VAR_2 ) )  METHOD_3 ( VAR_4 ) . METHOD_1 ( VAR_5 , VAR_6 , VAR_1 , VAR_2 ) ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN (  return TYPE_3 . METHOD_3 ( TYPE_4 . METHOD_4 ( VAR_1 ) , METHOD_5 ( ) , false , false ) ; )  return TYPE_3 . METHOD_3 ( TYPE_4 . METHOD_4 ( VAR_1 ) , METHOD_5 ( ) , false , false ) ; ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  return ( VAR_1 . METHOD_1 ( ) ) - 2 ; )  return ( VAR_1 . METHOD_1 ( ) ) - 2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME listener ) NAME listener ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static native ) MODIFIER public static native ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK (  METHOD_1 ( ) )  METHOD_1 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE android.content.Intent ) TYPE android.content.Intent ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME VAR_6 ) NAME VAR_6 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return new TYPE_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; )  return new TYPE_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public final ) MODIFIER public final ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  return this . location ; )  return this . location ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1<TYPE_2> ) RETURN TYPE_1<TYPE_2> ( NAME data ) NAME data ( BLOCK BLOCK (  return TYPE_3 . METHOD_1 ( VAR_1 , VAR_2 ) ; )  return TYPE_3 . METHOD_1 ( VAR_1 , VAR_2 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR (  return ( VAR_3 != null ) && ( VAR_2 . equals ( VAR_3 . METHOD_3 ( ) ) ) ; )  return ( VAR_3 != null ) && ( VAR_2 . equals ( VAR_3 . METHOD_3 ( ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < VAR_1 ) COND i < VAR_1 ( UPDATE UPDATE (  ++ i )  ++ i ) UPDATE UPDATE ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( s . value , TYPE_2 . toString ( ) ) )  TYPE_1 . METHOD_2 ( s . value , TYPE_2 . toString ( ) ) ) BLOCK BLOCK ) FOR FOR ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME type ) NAME type ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  this . VAR_1 = VAR_1 )  this . VAR_1 = VAR_1 (  this . VAR_2 = VAR_2 )  this . VAR_2 = VAR_2 (  this . VAR_3 = type )  this . VAR_3 = type ( IF IF ( COND VAR_4 . METHOD_1 ( VAR_1 ) ) COND VAR_4 . METHOD_1 ( VAR_1 ) ( THEN THEN (  METHOD_2 ( ) )  METHOD_2 ( ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME x ) NAME x ( INIT = VAR_1 [ VAR_2 ] ) INIT = VAR_1 [ VAR_2 ] ) VAR VAR ( IF IF ( COND x == null ) COND x == null ( THEN THEN (  throw new TYPE_2 ( ) ; )  throw new TYPE_2 ( ) ; ) THEN THEN ) IF IF (  return x ; )  return x ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME id ) NAME id ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( mContext ) != 0 ) COND ( mContext ) != 0 ( THEN THEN (  METHOD_2 ( mContext , id ) )  METHOD_2 ( mContext , id ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  return VAR_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( ( ( VAR_1 . METHOD_4 ( ) ) - 1 ) , ( ( VAR_1 . METHOD_5 ( ) ) + 1 ) ) ) ; )  return VAR_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( ( ( VAR_1 . METHOD_4 ( ) ) - 1 ) , ( ( VAR_1 . METHOD_5 ( ) ) + 1 ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME a ) NAME a ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME m ) NAME m ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME r ) NAME r ( INIT = TYPE_1 . METHOD_2 ( ) ) INIT = TYPE_1 . METHOD_2 ( ) ) VAR VAR (  TYPE_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 ) ) )  TYPE_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 ) ) (  return r ; )  return r ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_2 . METHOD_1 ( VAR_1 ) )  VAR_2 . METHOD_1 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME element ) NAME element ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . METHOD_1 ( element ) )  VAR_1 . METHOD_1 ( element ) ( IF IF ( COND element . METHOD_2 ( ) ) COND element . METHOD_2 ( ) ( THEN THEN (  VAR_2 = true )  VAR_2 = true ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static native ) MODIFIER public static native ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME options ) NAME options ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( STRING_1 , options ) )  METHOD_2 ( STRING_1 , options ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) (  TYPE_1 . METHOD_2 ( new TYPE_2 ( TYPE_3 . METHOD_3 ( ) ) ) )  TYPE_1 . METHOD_2 ( new TYPE_2 ( TYPE_3 . METHOD_3 ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return ( VAR_1 + ( TYPE_1 . METHOD_2 ( METHOD_3 ( ) . METHOD_4 ( ) ) ) ) + VAR_2 ; )  return ( VAR_1 + ( TYPE_1 . METHOD_2 ( METHOD_3 ( ) . METHOD_4 ( ) ) ) ) + VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  mRS . METHOD_2 ( ) )  mRS . METHOD_2 ( ) ( VAR VAR ( TYPE int ) TYPE int ( NAME id ) NAME id ( INIT = mRS . METHOD_3 ( VAR_1 , VAR_2 ) ) INIT = mRS . METHOD_3 ( VAR_1 , VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_1 ( id , mRS ) ) INIT = new TYPE_1 ( id , mRS ) ) VAR VAR (  VAR_4 = VAR_1 )  VAR_4 = VAR_1 (  VAR_5 = VAR_6 )  VAR_5 = VAR_6 (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_2 ) ( VAR_1 . METHOD_1 ( METHOD_2 ( ) ) ) ) ) INIT = ( ( TYPE_2 ) ( VAR_1 . METHOD_1 ( METHOD_2 ( ) ) ) ) ) VAR VAR (  VAR_2 . METHOD_3 ( METHOD_4 ( ) ) )  VAR_2 . METHOD_3 ( METHOD_4 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_2 . METHOD_2 ( VAR_1 , VAR_3 ) )  VAR_2 . METHOD_2 ( VAR_1 , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_2 = METHOD_2 ( VAR_2 , VAR_1 ) )  VAR_2 = METHOD_2 ( VAR_2 , VAR_1 ) (  return VAR_3 . get ( VAR_2 ) ; )  return VAR_3 . get ( VAR_2 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_2 . METHOD_2 ( TYPE_2 . METHOD_3 ( false ) ) )  VAR_2 . METHOD_2 ( TYPE_2 . METHOD_3 ( false ) ) (  return super . METHOD_1 ( VAR_1 ) ; )  return super . METHOD_1 ( VAR_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME index ) NAME index ( INIT = VAR_2 . METHOD_2 ( VAR_1 ) ) INIT = VAR_2 . METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND index != ( - 1 ) ) COND index != ( - 1 ) ( THEN THEN (  VAR_2 . METHOD_3 ( index ) )  VAR_2 . METHOD_3 ( index ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 . METHOD_2 ( this ) ) COND VAR_1 . METHOD_2 ( this ) ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( IN METHOD_3 ( true ) ) IN METHOD_3 ( true ) ( BLOCK BLOCK (  VAR_1 . METHOD_4 ( VAR_2 ) )  VAR_1 . METHOD_4 ( VAR_2 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF (  VAR_1 . METHOD_5 ( this ) )  VAR_1 . METHOD_5 ( this ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  listener . METHOD_2 ( ) )  listener . METHOD_2 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME e ) NAME e ( BLOCK BLOCK (  METHOD_3 ( uid , VAR_1 ) )  METHOD_3 ( uid , VAR_1 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME type ) NAME type ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME arg ) NAME arg ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME size ) NAME size ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < size ) COND i < size ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK (  in . METHOD_2 ( ) )  in . METHOD_2 ( ) ) BLOCK BLOCK ) FOR FOR ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int[] ) TYPE int[] ( NAME input ) NAME input ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = 0 ) INIT = 0 ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND VAR_2 < ( input . length ) ) COND VAR_2 < ( input . length ) ( UPDATE UPDATE (  ++ VAR_2 )  ++ VAR_2 ) UPDATE UPDATE ( BLOCK BLOCK (  VAR_1 += input [ VAR_2 ] )  VAR_1 += input [ VAR_2 ] ) BLOCK BLOCK ) FOR FOR (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 = TYPE_1 . METHOD_2 ( new TYPE_2 ( STRING_1 , STRING_2 ) ) )  VAR_1 = TYPE_1 . METHOD_2 ( new TYPE_2 ( STRING_1 , STRING_2 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN long ) RETURN long ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_1 ) NAME VAR_1 ( INIT = Main . METHOD_2 ( INT_1 ) ) INIT = Main . METHOD_2 ( INT_1 ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = Main . METHOD_3 ( 3 ) ) INIT = Main . METHOD_3 ( 3 ) ) VAR VAR (  return VAR_1 & VAR_2 ; )  return VAR_1 & VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  TYPE_1 . METHOD_1 ( ) )  TYPE_1 . METHOD_1 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  assertFalse ( STRING_1 . equals ( VAR_1 . METHOD_2 ( ) ) ) )  assertFalse ( STRING_1 . equals ( VAR_1 . METHOD_2 ( ) ) ) (  assertEquals ( STRING_1 , VAR_2 . METHOD_2 ( ) ) )  assertEquals ( STRING_1 , VAR_2 . METHOD_2 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE android.os.Bundle ) TYPE android.os.Bundle ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  super . METHOD_1 ( VAR_1 ) )  super . METHOD_1 ( VAR_1 ) (  METHOD_2 ( ) )  METHOD_2 ( ) (  TYPE_1 . METHOD_3 ( this ) )  TYPE_1 . METHOD_3 ( this ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.android.jack.ir.ast.JMethod ) TYPE com.android.jack.ir.ast.JMethod ( NAME type ) NAME type ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( INT_1 , VAR_1 ) )  TYPE_1 . METHOD_2 ( INT_1 , VAR_1 ) (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return TYPE_1 . METHOD_1 ( VAR_1 , 0 , VAR_1 . length ) ; )  return TYPE_1 . METHOD_1 ( VAR_1 , 0 , VAR_1 . length ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<TYPE_2> ) RETURN TYPE_1<TYPE_2> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME element ) NAME element ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_5 . METHOD_2 ( element ) ) INIT = TYPE_5 . METHOD_2 ( element ) ) VAR VAR (  return VAR_2 . METHOD_3 ( VAR_1 ) ? VAR_2 . get ( VAR_1 ) . METHOD_1 ( ) : VAR_3 < TYPE_2 > of ( ) ; )  return VAR_2 . METHOD_3 ( VAR_1 ) ? VAR_2 . get ( VAR_1 ) . METHOD_1 ( ) : VAR_3 < TYPE_2 > of ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_2 . METHOD_2 ( VAR_1 ) )  VAR_2 . METHOD_2 ( VAR_1 ) (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME listener ) NAME listener ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return super . METHOD_1 ( VAR_1 , listener ) ; )  return super . METHOD_1 ( VAR_1 , listener ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( true , true ) )  METHOD_2 ( true , true ) (  METHOD_2 ( true , false ) )  METHOD_2 ( true , false ) (  METHOD_2 ( false , true ) )  METHOD_2 ( false , true ) ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  METHOD_2 ( false , false ) )  METHOD_2 ( false , false ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  return VAR_2 . METHOD_3 ( VAR_1 ) ; )  return VAR_2 . METHOD_3 ( VAR_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<java.io.File> ) RETURN TYPE_1<java.io.File> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  return VAR_1 . METHOD_2 ( METHOD_3 ( ) ) . METHOD_4 ( METHOD_3 ( ) . METHOD_5 ( ) ) ; )  return VAR_1 . METHOD_2 ( METHOD_3 ( ) ) . METHOD_4 ( METHOD_3 ( ) . METHOD_5 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public final ) MODIFIER public final ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  return ( VAR_1 ) != null ? VAR_1 : VAR_2 . METHOD_2 ( ) ; )  return ( VAR_1 ) != null ? VAR_1 : VAR_2 . METHOD_2 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN long[] ) RETURN long[] ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE long[] ) TYPE long[] ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_2 < 0 ) COND VAR_2 < 0 ( THEN THEN (  throw new TYPE_1 ( ) ; )  throw new TYPE_1 ( ) ; ) THEN THEN ) IF IF (  return TYPE_2 . METHOD_2 ( VAR_1 , 0 , VAR_2 ) ; )  return TYPE_2 . METHOD_2 ( VAR_1 , 0 , VAR_2 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_1 = METHOD_2 ( true , null ) )  VAR_1 = METHOD_2 ( true , null ) (  TYPE_1 . fail ( ) )  TYPE_1 . fail ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1[] ) RETURN TYPE_1[] ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) == null ) COND ( VAR_1 ) == null ( THEN THEN (  throw new TYPE_2 ( STRING_1 ) ; )  throw new TYPE_2 ( STRING_1 ) ; ) THEN THEN ) IF IF (  return new TYPE_1 [ ] { new TYPE_3 ( VAR_1 , VAR_2 ) } ; )  return new TYPE_1 [ ] { new TYPE_3 ( VAR_1 , VAR_2 ) } ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public native ) MODIFIER public native ( RETURN float ) RETURN float ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME f ) NAME f ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 . METHOD_2 ( f ) ) COND VAR_1 . METHOD_2 ( f ) ( THEN THEN (  METHOD_1 ( f . METHOD_3 ( ) ) )  METHOD_1 ( f . METHOD_3 ( ) ) (  METHOD_1 ( f . METHOD_4 ( ) ) )  METHOD_1 ( f . METHOD_4 ( ) ) (  METHOD_5 ( f ) )  METHOD_5 ( f ) (  VAR_1 . METHOD_6 ( f ) )  VAR_1 . METHOD_6 ( f ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_2 ) == null ) COND ( VAR_2 ) == null ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  return VAR_2 . METHOD_2 ( VAR_3 ) ; )  return VAR_2 . METHOD_2 ( VAR_3 ) ; ) THEN THEN ( ELSE ELSE (  return VAR_2 . METHOD_2 ( null ) ; )  return VAR_2 . METHOD_2 ( null ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  METHOD_1 ( ) )  METHOD_1 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Throwable ) TYPE java.lang.Throwable ( NAME t ) NAME t ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  t . METHOD_2 ( VAR_1 ) )  t . METHOD_2 ( VAR_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Throwable ) TYPE java.lang.Throwable ( NAME VAR_2 ) NAME VAR_2 ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  TYPE_1 . METHOD_3 ( 1 ) )  TYPE_1 . METHOD_3 ( 1 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME format ) NAME format ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( ) . METHOD_1 ( VAR_1 , VAR_2 , format , VAR_3 , VAR_4 , VAR_5 ) )  METHOD_2 ( ) . METHOD_1 ( VAR_1 , VAR_2 , format , VAR_3 , VAR_4 , VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME input ) NAME input ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  return TYPE_1 . METHOD_2 ( input ) ; )  return TYPE_1 . METHOD_2 ( input ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_2 ( e.getMessage ( ) ) ; )  throw new TYPE_2 ( e.getMessage ( ) ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN boolean ) RETURN boolean ( NAME run ) NAME run ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME args ) NAME args ) VAR VAR ) PARAMS PARAMS ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static synchronized ) MODIFIER private static synchronized ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  android.util.Log.d ( TYPE_1 . TAG , ( STRING_1 + ( VAR_3 ) ) ) )  android.util.Log.d ( TYPE_1 . TAG , ( STRING_1 + ( VAR_3 ) ) ) ) THEN THEN ) IF IF (  VAR_3 = VAR_1 )  VAR_3 = VAR_1 ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK (  METHOD_1 ( ) )  METHOD_1 ( ) (  TYPE_1 . METHOD_2 ( context ) )  TYPE_1 . METHOD_2 ( context ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) . get ( 2 , VAR_2 ) ) INIT = METHOD_2 ( ) . get ( 2 , VAR_2 ) ) VAR VAR ( IF IF ( COND ( VAR_1 == null ) || ( ( VAR_1 . length ) == 0 ) ) COND ( VAR_1 == null ) || ( ( VAR_1 . length ) == 0 ) ( THEN THEN (  fail ( STRING_1 ) )  fail ( STRING_1 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_2 = VAR_1 )  VAR_2 = VAR_1 ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  this )  this ( BLOCK BLOCK ( IF IF ( COND ( this . VAR_1 ) != null ) COND ( this . VAR_1 ) != null ( THEN THEN (  this . VAR_1 . METHOD_1 ( ) )  this . VAR_1 . METHOD_1 ( ) ) THEN THEN ) IF IF (  this . VAR_1 = VAR_1 )  this . VAR_1 = VAR_1 ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  return METHOD_3 ( VAR_2 ) . METHOD_1 ( VAR_3 ) ; )  return METHOD_3 ( VAR_2 ) . METHOD_1 ( VAR_3 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME x ) NAME x ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return x != false ? INT_1 : INT_2 ; )  return x != false ? INT_1 : INT_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int[][] ) TYPE int[][] ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int[][] ) TYPE int[][] ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return METHOD_1 ( VAR_1 , VAR_2 , TYPE_2 . METHOD_2 ( ) ) ; )  return METHOD_1 ( VAR_1 , VAR_2 , TYPE_2 . METHOD_2 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public synchronized ) MODIFIER public synchronized ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  this . VAR_1 = VAR_2 )  this . VAR_1 = VAR_2 ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME args ) NAME args ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( args [ 1 ] ) )  TYPE_1 . METHOD_2 ( args [ 1 ] ) (  Main . METHOD_3 ( new TYPE_2 ( ) ) )  Main . METHOD_3 ( new TYPE_2 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . METHOD_1 ( VAR_1 ) ) INIT = VAR_3 . METHOD_1 ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_2 == null ) COND VAR_2 == null ( THEN THEN (  METHOD_2 ( STRING_1 ) )  METHOD_2 ( STRING_1 ) ) THEN THEN ) IF IF (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  VAR_2 . METHOD_2 ( ) )  VAR_2 . METHOD_2 ( ) ) THEN THEN ) IF IF (  VAR_3 . METHOD_1 ( false ) )  VAR_3 . METHOD_1 ( false ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( VAR_1 , 0 , 0 , TYPE_1 . METHOD_3 ( ) ) )  METHOD_2 ( VAR_1 , 0 , 0 , TYPE_1 . METHOD_3 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN float ) RETURN float ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE float ) TYPE float ( NAME arg ) NAME arg ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  throw new TYPE_1 ( ) ; )  throw new TYPE_1 ( ) ; ) THEN THEN ) IF IF (  return arg / FLOAT_1 ; )  return arg / FLOAT_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  VAR_3 . METHOD_2 ( VAR_1 , VAR_2 ) )  VAR_3 . METHOD_2 ( VAR_1 , VAR_2 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER synchronized ) MODIFIER synchronized ( RETURN long ) RETURN long ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int[] ) TYPE int[] ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int[] ) TYPE int[] ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int[] ) TYPE int[] ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  return METHOD_3 ( mContext , VAR_1 , VAR_2 , VAR_3 ) ; )  return METHOD_3 ( mContext , VAR_1 , VAR_2 , VAR_3 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME callback ) NAME callback ) VAR VAR ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_6 ) NAME VAR_6 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , 0 , callback , VAR_6 ) )  METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , 0 , callback , VAR_6 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 = new TYPE_1 ( mRS , VAR_2 , VAR_3 ) )  VAR_1 = new TYPE_1 ( mRS , VAR_2 , VAR_3 ) (  METHOD_2 ( INT_1 , 4 ) )  METHOD_2 ( INT_1 , 4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME key ) NAME key ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( TYPE_2 . METHOD_3 ( key ) ) ) INIT = METHOD_2 ( TYPE_2 . METHOD_3 ( key ) ) ) VAR VAR (  METHOD_4 ( VAR_1 ) . METHOD_1 ( key , VAR_1 , VAR_2 ) )  METHOD_4 ( VAR_1 ) . METHOD_1 ( key , VAR_1 , VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME c ) NAME c ( INIT = new TYPE_1 ( 5 ) ) INIT = new TYPE_1 ( 5 ) ) VAR VAR (  c . get ( null ) )  c . get ( null ) (  METHOD_2 ( ) )  METHOD_2 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.NullPointerException ) TYPE java.lang.NullPointerException ( NAME VAR_1 ) NAME VAR_1 ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN long ) RETURN long ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE long ) TYPE long ( NAME arg1 ) NAME arg1 ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  throw new TYPE_1 ( ) ; )  throw new TYPE_1 ( ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_3 ) NAME VAR_3 ( INIT = - VAR_1 ) INIT = - VAR_1 ) VAR VAR (  return ( arg1 + VAR_3 ) | ( arg1 + VAR_3 ) ; )  return ( arg1 + VAR_3 ) | ( arg1 + VAR_3 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static native ) MODIFIER public static native ( RETURN byte[][] ) RETURN byte[][] ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  throw new TYPE_1 ( ) ; )  throw new TYPE_1 ( ) ; ) THEN THEN ) IF IF (  return ( i > INT_1 ) != ( Main . METHOD_2 ( ) ) ? INT_2 : INT_3 ; )  return ( i > INT_1 ) != ( Main . METHOD_2 ( ) ) ? INT_2 : INT_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public final ) MODIFIER public final ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME uri ) NAME uri ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME provider ) NAME provider ( INIT = METHOD_2 ( uri ) ) INIT = METHOD_2 ( uri ) ) VAR VAR ( IF IF ( COND provider != null ) COND provider != null ( THEN THEN (  return new TYPE_1 ( this , provider ) ; )  return new TYPE_1 ( this , provider ) ; ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME fd ) NAME fd ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME flags ) NAME flags ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_2 . METHOD_1 ( VAR_1 , fd , VAR_2 , flags ) )  TYPE_2 . METHOD_1 ( VAR_1 , fd , VAR_2 , flags ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int[] ) RETURN int[] ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  return VAR_1 . METHOD_2 ( ) ; )  return VAR_1 . METHOD_2 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME arg ) NAME arg ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  throw new TYPE_1 ( ) ; )  throw new TYPE_1 ( ) ; ) THEN THEN ) IF IF (  return arg * 9 ; )  return arg * 9 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<java.lang.Throwable> ) TYPE java.util.List<java.lang.Throwable> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( METHOD_3 ( ) , VAR_1 ) )  TYPE_1 . METHOD_2 ( METHOD_3 ( ) , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public synchronized ) MODIFIER public synchronized ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( true ) ) INIT = METHOD_2 ( true ) ) VAR VAR (  VAR_3 = VAR_1 )  VAR_3 = VAR_1 ( IF IF ( COND VAR_2 != ( METHOD_2 ( true ) ) ) COND VAR_2 != ( METHOD_2 ( true ) ) ( THEN THEN (  METHOD_3 ( ( ! VAR_2 ) , VAR_4 ) )  METHOD_3 ( ( ! VAR_2 ) , VAR_4 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  super . METHOD_1 ( VAR_1 ) )  super . METHOD_1 ( VAR_1 ) (  VAR_1 . METHOD_2 ( 0 , VAR_2 , 1 , VAR_3 ) )  VAR_1 . METHOD_2 ( 0 , VAR_2 , 1 , VAR_3 ) (  VAR_1 . METHOD_2 ( 0 , VAR_4 , 2 , VAR_5 ) )  VAR_1 . METHOD_2 ( 0 , VAR_4 , 2 , VAR_5 ) (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN long ) RETURN long ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( ) )  VAR_1 . METHOD_2 ( ) (  return TYPE_1 . METHOD_3 ( ) ; )  return TYPE_1 . METHOD_3 ( ) ; ) BLOCK BLOCK ( FINALLY FINALLY (  VAR_1 . METHOD_4 ( ) )  VAR_1 . METHOD_4 ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME value ) NAME value ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . METHOD_3 ( VAR_1 , value , true ) ) INIT = VAR_3 . METHOD_3 ( VAR_1 , value , true ) ) VAR VAR (  VAR_3 . METHOD_4 ( ) )  VAR_3 . METHOD_4 ( ) (  return VAR_2 != null ; )  return VAR_2 != null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( METHOD_3 ( ) ) )  VAR_1 . METHOD_2 ( METHOD_3 ( ) ) ( IF IF ( COND ( ( VAR_2 ) == ( VAR_3 ) ) && ( VAR_4 ) ) COND ( ( VAR_2 ) == ( VAR_3 ) ) && ( VAR_4 ) ( THEN THEN (  VAR_1 . METHOD_4 ( TYPE_1 . METHOD_5 ( ) ) )  VAR_1 . METHOD_4 ( TYPE_1 . METHOD_5 ( ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  throw new java.lang.NullPointerException ( STRING_1 ) ; )  throw new java.lang.NullPointerException ( STRING_1 ) ; ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_2 ) != null ) COND ( VAR_2 ) != null ( THEN THEN (  throw new TYPE_2 ( STRING_2 ) ; )  throw new TYPE_2 ( STRING_2 ) ; ) THEN THEN ) IF IF (  VAR_2 = new TYPE_3 ( VAR_1 ) )  VAR_2 = new TYPE_3 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) ( TRY TRY ( BLOCK BLOCK (  METHOD_3 ( ) . METHOD_1 ( VAR_1 ) )  METHOD_3 ( ) . METHOD_1 ( VAR_1 ) (  return true ; )  return true ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME e ) NAME e ( BLOCK BLOCK (  return false ; )  return false ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private final ) MODIFIER private final ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( VAR_1 ) ) INIT = METHOD_2 ( VAR_1 ) ) VAR VAR (  return VAR_2 >= 0 ? VAR_3 . get ( VAR_2 ) : null ; )  return VAR_2 >= 0 ? VAR_3 . get ( VAR_2 ) : null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( STRING_1 , VAR_1 . METHOD_3 ( ) ) )  METHOD_2 ( STRING_1 , VAR_1 . METHOD_3 ( ) ) (  assertEquals ( STRING_1 , VAR_2 . METHOD_3 ( ) ) )  assertEquals ( STRING_1 , VAR_2 . METHOD_3 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  TYPE_1 . METHOD_1 ( VAR_1 ) )  TYPE_1 . METHOD_1 ( VAR_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_2 . println ( STRING_1 ) )  VAR_2 . println ( STRING_1 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public native ) MODIFIER public native ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE char ) TYPE char ( NAME c ) NAME c ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return ( ( TYPE_1 . METHOD_2 ( c ) ) || ( METHOD_3 ( c ) ) ) && ( c != CHAR_1 ) ; )  return ( ( TYPE_1 . METHOD_2 ( c ) ) || ( METHOD_3 ( c ) ) ) && ( c != CHAR_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
