( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_2 ( ) ) INIT = TYPE_2 . METHOD_2 ( ) ) VAR VAR (  VAR_1 . METHOD_3 ( VAR_2 , 0 , VAR_2 . length ) )  VAR_1 . METHOD_3 ( VAR_2 , 0 , VAR_2 . length ) (  org.junit.Assert.assertEquals ( STRING_1 , VAR_1 . METHOD_4 ( ) . get ( STRING_2 ) ) )  org.junit.Assert.assertEquals ( STRING_1 , VAR_1 . METHOD_4 ( ) . get ( STRING_2 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME options ) NAME options ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.ArrayList < java.lang.String > ( ) ) INIT = new java.util.ArrayList < java.lang.String > ( ) ) VAR VAR (  VAR_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) ) )  VAR_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) ) (  options . METHOD_5 ( VAR_2 ) )  options . METHOD_5 ( VAR_2 ) (  options . METHOD_6 ( ( ( ( TYPE_3 . METHOD_7 ( ) ) + ( VAR_3 ) ) + ( VAR_1 . METHOD_8 ( ) ) ) ) )  options . METHOD_6 ( ( ( ( TYPE_3 . METHOD_7 ( ) ) + ( VAR_3 ) ) + ( VAR_1 . METHOD_8 ( ) ) ) ) (  options . METHOD_9 ( VAR_1 . METHOD_10 ( ) ) )  options . METHOD_9 ( VAR_1 . METHOD_10 ( ) ) (  return options ; )  return options ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_1 . d ( VAR_2 . TAG , ( STRING_1 + VAR_1 ) ) )  TYPE_1 . d ( VAR_2 . TAG , ( STRING_1 + VAR_1 ) ) ( IF IF ( COND VAR_3 . METHOD_2 ( ) ) COND VAR_3 . METHOD_2 ( ) ( THEN THEN (  VAR_3 . METHOD_3 ( status , VAR_4 ) )  VAR_3 . METHOD_3 ( status , VAR_4 ) ) THEN THEN ( ELSE ELSE (  VAR_3 . METHOD_3 ( status , VAR_5 ) )  VAR_3 . METHOD_3 ( status , VAR_5 ) ) ELSE ELSE ) IF IF (  METHOD_4 ( ) )  METHOD_4 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME type ) NAME type ) VAR VAR ( IF IF ( COND ( VAR_1 . equals ( STRING_1 ) ) || ( VAR_1 . equals ( STRING_2 ) ) ) COND ( VAR_1 . equals ( STRING_1 ) ) || ( VAR_1 . equals ( STRING_2 ) ) ( THEN THEN (  type = STRING_3 )  type = STRING_3 ) THEN THEN ( ELSE ELSE ( IF IF ( COND VAR_1 . METHOD_2 ( STRING_4 ) ) COND VAR_1 . METHOD_2 ( STRING_4 ) ( THEN THEN (  type = STRING_4 )  type = STRING_4 ) THEN THEN ( ELSE ELSE (  type = VAR_1 )  type = VAR_1 ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF (  return type ; )  return type ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_2 ) != ( this ) ) COND ( VAR_2 ) != ( this ) ( THEN THEN (  throw new TYPE_2 ( ) ; )  throw new TYPE_2 ( ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = this . VAR_3 ) INIT = this . VAR_3 ) VAR VAR ( IF IF ( COND ! ( VAR_3 . METHOD_2 ( ) ) ) COND ! ( VAR_3 . METHOD_2 ( ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_4 ) NAME VAR_4 ( INIT = false ) INIT = false ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_4 = VAR_1 . METHOD_3 ( ) )  VAR_4 = VAR_1 . METHOD_3 ( ) ) BLOCK BLOCK ( FINALLY FINALLY ( IF IF ( COND ! VAR_4 ) COND ! VAR_4 ( THEN THEN (  VAR_3 . METHOD_4 ( ) )  VAR_3 . METHOD_4 ( ) ) THEN THEN ) IF IF ) FINALLY FINALLY ) TRY TRY (  return VAR_4 ; )  return VAR_4 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( null , STRING_1 , VAR_2 . TAG , null , null , null , null , false , ( - 1 ) , false , ( - 1 ) ) )  VAR_1 . METHOD_2 ( null , STRING_1 , VAR_2 . TAG , null , null , null , null , false , ( - 1 ) , false , ( - 1 ) ) (  verify ( VAR_3 , METHOD_3 ( 0 ) ) . METHOD_4 ( METHOD_5 ( ) , METHOD_5 ( ) , METHOD_6 ( ) , METHOD_6 ( ) , METHOD_7 ( VAR_4 class ) ) )  verify ( VAR_3 , METHOD_3 ( 0 ) ) . METHOD_4 ( METHOD_5 ( ) , METHOD_5 ( ) , METHOD_6 ( ) , METHOD_6 ( ) , METHOD_7 ( VAR_4 class ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME config ) NAME config ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int[] ) TYPE int[] ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_2 ( VAR_1 , config , VAR_2 , VAR_3 ) ) INIT = METHOD_2 ( VAR_1 , config , VAR_2 , VAR_3 ) ) VAR VAR ( IF IF ( COND VAR_4 == 0 ) COND VAR_4 == 0 ( THEN THEN (  return VAR_5 ; )  return VAR_5 ; ) THEN THEN ) IF IF (  return new TYPE_4 ( VAR_4 ) ; )  return new TYPE_4 ( VAR_4 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( VAR_2 , new TYPE_2 ( STRING_1 ) , VAR_3 , new TYPE_2 ( STRING_2 ) , VAR_4 ) { protected void METHOD_2 ( ) { } } ) INIT = new TYPE_1 ( VAR_2 , new TYPE_2 ( STRING_1 ) , VAR_3 , new TYPE_2 ( STRING_2 ) , VAR_4 ) { protected void METHOD_2 ( ) { } } ) VAR VAR ( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_2 ) NAME METHOD_2 ( BLOCK BLOCK ) BLOCK BLOCK ) METHOD METHOD (  VAR_1 . METHOD_3 ( VAR_5 , new TYPE_2 ( STRING_3 ) , STRING_4 ) )  VAR_1 . METHOD_3 ( VAR_5 , new TYPE_2 ( STRING_3 ) , STRING_4 ) (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2<TYPE_3> ) TYPE TYPE_2<TYPE_3> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( VAR_1 . METHOD_2 ( ) ) + VAR_2 ) INIT = ( VAR_1 . METHOD_2 ( ) ) + VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_1 . METHOD_3 ( VAR_3 ) ) INIT = VAR_1 . METHOD_3 ( VAR_3 ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME id ) NAME id ( INIT = ( ( STRING_1 + VAR_3 ) + STRING_2 ) + ( METHOD_4 ( VAR_4 . METHOD_5 ( ) ) ) ) INIT = ( ( STRING_1 + VAR_3 ) + STRING_2 ) + ( METHOD_4 ( VAR_4 . METHOD_5 ( ) ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_6 ) NAME VAR_6 ( INIT = METHOD_6 ( id , id , METHOD_7 ( VAR_4 . METHOD_5 ( ) ) , null ) ) INIT = METHOD_6 ( id , id , METHOD_7 ( VAR_4 . METHOD_5 ( ) ) , null ) ) VAR VAR (  VAR_6 . METHOD_8 ( ) )  VAR_6 . METHOD_8 ( ) (  return VAR_6 ; )  return VAR_6 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_4 ) NAME VAR_4 ( INIT = ( VAR_3 == ( VAR_5 ) ) || ( ( VAR_2 & ( VAR_6 ) ) != 0 ) ) INIT = ( VAR_3 == ( VAR_5 ) ) || ( ( VAR_2 & ( VAR_6 ) ) != 0 ) ) VAR VAR (  VAR_7 . METHOD_2 ( ( VAR_4 ? ( VAR_8 ) | ( VAR_9 ) : ( VAR_8 ) & ( ~ ( VAR_9 ) ) ) ) )  VAR_7 . METHOD_2 ( ( VAR_4 ? ( VAR_8 ) | ( VAR_9 ) : ( VAR_8 ) & ( ~ ( VAR_9 ) ) ) ) ( IF IF ( COND ( VAR_10 ) != null ) COND ( VAR_10 ) != null ( THEN THEN (  VAR_10 . METHOD_1 ( ( VAR_2 > 0 ) ) )  VAR_10 . METHOD_1 ( ( VAR_2 > 0 ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return new TYPE_1 ( 1 , 2 , VAR_1 , new TYPE_2 ( ) , VAR_2 , STRING_1 , STRING_2 , VAR_3 , null , new TYPE_3 ( 1 , 2 , 3 , 4 , 5 , 6 ) ) ; )  return new TYPE_1 ( 1 , 2 , VAR_1 , new TYPE_2 ( ) , VAR_2 , STRING_1 , STRING_2 , VAR_3 , null , new TYPE_3 ( 1 , 2 , 3 , 4 , 5 , 6 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( ) , TYPE_2 . METHOD_4 ( VAR_2 class ) ) )  VAR_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( ) , TYPE_2 . METHOD_4 ( VAR_2 class ) ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_1 . METHOD_5 ( new TYPE_4 ( STRING_1 , STRING_2 ) , STRING_3 ) ) INIT = TYPE_1 . METHOD_5 ( new TYPE_4 ( STRING_1 , STRING_2 ) , STRING_3 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_6 ( VAR_3 , STRING_4 ) . METHOD_6 ( VAR_5 ) . build ( ) ) INIT = new TYPE_6 ( VAR_3 , STRING_4 ) . METHOD_6 ( VAR_5 ) . build ( ) ) VAR VAR (  VAR_6 . METHOD_7 ( VAR_4 ) )  VAR_6 . METHOD_7 ( VAR_4 ) ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_7 ) NAME VAR_7 ( INIT = VAR_6 . METHOD_8 ( VAR_3 ) ) INIT = VAR_6 . METHOD_8 ( VAR_3 ) ) VAR VAR (  assertEquals ( VAR_8 , VAR_7 . METHOD_9 ( ) ) )  assertEquals ( VAR_8 , VAR_7 . METHOD_9 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER synchronized ) MODIFIER synchronized ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int[] ) TYPE int[] ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int[] ) TYPE int[] ( NAME src ) NAME src ) VAR VAR ( VAR VAR ( TYPE int[] ) TYPE int[] ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int[] ) TYPE int[] ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE int[] ) TYPE int[] ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  return METHOD_3 ( mContext , VAR_1 , src , VAR_2 , VAR_3 , VAR_4 ) ; )  return METHOD_3 ( mContext , VAR_1 , src , VAR_2 , VAR_3 , VAR_4 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  METHOD_3 ( ) )  METHOD_3 ( ) (  METHOD_4 ( VAR_1 , false , STRING_1 ) )  METHOD_4 ( VAR_1 , false , STRING_1 ) ( IF IF ( COND ( VAR_2 . get ( VAR_1 ) ) != null ) COND ( VAR_2 . get ( VAR_1 ) ) != null ( THEN THEN (  throw new java.lang.IllegalArgumentException ( STRING_2 ) ; )  throw new java.lang.IllegalArgumentException ( STRING_2 ) ; ) THEN THEN ) IF IF (  VAR_2 . METHOD_5 ( VAR_1 , new java.lang.Integer ( VAR_3 ) ) )  VAR_2 . METHOD_5 ( VAR_1 , new java.lang.Integer ( VAR_3 ) ) (  super . METHOD_1 ( VAR_1 ) )  super . METHOD_1 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  assertEquals ( 1 , TYPE_1 . METHOD_1 ( 100 , INT_1 , 100 , INT_1 ) ) )  assertEquals ( 1 , TYPE_1 . METHOD_1 ( 100 , INT_1 , 100 , INT_1 ) ) (  assertEquals ( 2 , TYPE_1 . METHOD_1 ( INT_2 , INT_3 , INT_4 , INT_5 ) ) )  assertEquals ( 2 , TYPE_1 . METHOD_1 ( INT_2 , INT_3 , INT_4 , INT_5 ) ) (  assertEquals ( 1 , TYPE_1 . METHOD_1 ( INT_6 , INT_7 , INT_8 , INT_9 ) ) )  assertEquals ( 1 , TYPE_1 . METHOD_1 ( INT_6 , INT_7 , INT_8 , INT_9 ) ) (  assertEquals ( 4 , TYPE_1 . METHOD_1 ( 100 , INT_10 , INT_11 , INT_12 ) ) )  assertEquals ( 4 , TYPE_1 . METHOD_1 ( 100 , INT_10 , INT_11 , INT_12 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME location ) NAME location ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME data ) NAME data ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( VAR_3 ) != null ) && ( VAR_4 . METHOD_2 ( this , VAR_1 , VAR_3 ) ) ) COND ( ( VAR_3 ) != null ) && ( VAR_4 . METHOD_2 ( this , VAR_1 , VAR_3 ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  super . METHOD_1 ( VAR_1 , location , VAR_2 , data ) )  super . METHOD_1 ( VAR_1 , location , VAR_2 , data ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME test ) NAME test ) VAR VAR ( VAR VAR ( TYPE java.lang.Object[] ) TYPE java.lang.Object[] ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  assertFalse ( STRING_1 , ( ( VAR_1 . length ) == 0 ) ) )  assertFalse ( STRING_1 , ( ( VAR_1 . length ) == 0 ) ) (  TYPE_2 . METHOD_1 ( test , VAR_1 , TYPE_2 . METHOD_2 ( test , VAR_1 [ 0 ] ) ) )  TYPE_2 . METHOD_1 ( test , VAR_1 , TYPE_2 . METHOD_2 ( test , VAR_1 [ 0 ] ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( TYPE_1 . METHOD_2 ( VAR_1 ) ) || ( TYPE_1 . METHOD_2 ( VAR_2 ) ) ) COND ( TYPE_1 . METHOD_2 ( VAR_1 ) ) || ( TYPE_1 . METHOD_2 ( VAR_2 ) ) ( THEN THEN (  return METHOD_3 ( VAR_1 , VAR_2 ) ; )  return METHOD_3 ( VAR_1 , VAR_2 ) ; ) THEN THEN ( ELSE ELSE (  return TYPE_2 . METHOD_4 ( VAR_1 , VAR_2 ) ; )  return TYPE_2 . METHOD_4 ( VAR_1 , VAR_2 ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME project ) NAME project ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME value ) NAME value ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME text ) NAME text ( INIT = TYPE_3 . METHOD_2 ( name , value ) ) INIT = TYPE_3 . METHOD_2 ( name , value ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_3 . METHOD_3 ( project , text ) ) INIT = TYPE_3 . METHOD_3 ( project , text ) ) VAR VAR (  return VAR_1 . METHOD_4 ( ) . get ( 0 ) ; )  return VAR_1 . METHOD_4 ( ) . get ( 0 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_2 ) != ( this ) ) COND ( VAR_2 ) != ( this ) ( THEN THEN (  throw new TYPE_2 ( ) ; )  throw new TYPE_2 ( ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = this . VAR_3 ) INIT = this . VAR_3 ) VAR VAR (  VAR_3 . METHOD_2 ( ) )  VAR_3 . METHOD_2 ( ) ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_4 ) NAME VAR_4 ( INIT = false ) INIT = false ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_4 = VAR_1 . METHOD_3 ( ) )  VAR_4 = VAR_1 . METHOD_3 ( ) ) BLOCK BLOCK ( FINALLY FINALLY ( IF IF ( COND ! VAR_4 ) COND ! VAR_4 ( THEN THEN (  VAR_3 . METHOD_4 ( ) )  VAR_3 . METHOD_4 ( ) ) THEN THEN ) IF IF ) FINALLY FINALLY ) TRY TRY (  return VAR_4 ; )  return VAR_4 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME path ) NAME path ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( null == path ) || ( path . equals ( STRING_1 ) ) ) && ( ( null == VAR_1 ) || ( VAR_1 . equals ( STRING_1 ) ) ) ) COND ( ( null == path ) || ( path . equals ( STRING_1 ) ) ) && ( ( null == VAR_1 ) || ( VAR_1 . equals ( STRING_1 ) ) ) ( THEN THEN (  throw new java.lang.IllegalArgumentException ( STRING_2 ) ; )  throw new java.lang.IllegalArgumentException ( STRING_2 ) ; ) THEN THEN ( ELSE ELSE ( IF IF ( COND ( METHOD_2 ( ) ) == ( VAR_2 ) ) COND ( METHOD_2 ( ) ) == ( VAR_2 ) ( THEN THEN (  throw new TYPE_1 ( STRING_3 ) ; )  throw new TYPE_1 ( STRING_3 ) ; ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF (  return METHOD_3 ( VAR_3 , path , VAR_1 ) ; )  return METHOD_3 ( VAR_3 , path , VAR_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME version ) NAME version ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_1 , VAR_5 ) ) )  TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_1 , VAR_5 ) ) (  TYPE_1 . METHOD_4 ( ( ( this . VAR_4 ) == null ) ) )  TYPE_1 . METHOD_4 ( ( ( this . VAR_4 ) == null ) ) (  this . VAR_4 = TYPE_3 . METHOD_5 ( VAR_4 ) )  this . VAR_4 = TYPE_3 . METHOD_5 ( VAR_4 ) (  VAR_6 = name )  VAR_6 = name ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_2 = VAR_1 )  VAR_2 = VAR_1 (  VAR_3 = null )  VAR_3 = null ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN ( TRY TRY ( BLOCK BLOCK (  VAR_3 = TYPE_1 . METHOD_2 ( VAR_1 ) )  VAR_3 = TYPE_1 . METHOD_2 ( VAR_1 ) (  VAR_4 = VAR_3 . METHOD_3 ( locale ) )  VAR_4 = VAR_3 . METHOD_3 ( locale ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.IllegalArgumentException ) TYPE java.lang.IllegalArgumentException ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) THEN THEN ) IF IF (  VAR_5 = null )  VAR_5 = null ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( STRING_1 ) )  TYPE_1 . METHOD_2 ( STRING_1 ) ( IF IF ( COND TYPE_2 . get ( VAR_1 ) . METHOD_3 ( STRING_2 , false ) ) COND TYPE_2 . get ( VAR_1 ) . METHOD_3 ( STRING_2 , false ) ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( IN VAR_3 . METHOD_4 ( ) ) IN VAR_3 . METHOD_4 ( ) ( BLOCK BLOCK (  VAR_2 . METHOD_1 ( VAR_1 ) )  VAR_2 . METHOD_1 ( VAR_1 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ( ELSE ELSE (  TYPE_1 . i ( STRING_1 , STRING_3 ) )  TYPE_1 . i ( STRING_1 , STRING_3 ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( VAR_1 < 0 ) || ( VAR_2 > ( count ) ) ) || ( VAR_1 > VAR_2 ) ) COND ( ( VAR_1 < 0 ) || ( VAR_2 > ( count ) ) ) || ( VAR_1 > VAR_2 ) ( THEN THEN (  throw new TYPE_1 ( ) ; )  throw new TYPE_1 ( ) ; ) THEN THEN ) IF IF (  return TYPE_2 . METHOD_1 ( this , VAR_1 , VAR_2 ) ; )  return TYPE_2 . METHOD_1 ( this , VAR_1 , VAR_2 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE android.bluetooth.BluetoothDevice ) TYPE android.bluetooth.BluetoothDevice ( NAME device ) NAME device ) VAR VAR ( VAR VAR ( TYPE byte ) TYPE byte ( NAME error ) NAME error ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  android.util.Log.v ( VAR_2 . TAG , ( ( ( STRING_1 + device ) + STRING_2 ) + error ) ) )  android.util.Log.v ( VAR_2 . TAG , ( ( ( STRING_1 + device ) + STRING_2 ) + error ) ) ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME service ) NAME service ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( IF IF ( COND service == null ) COND service == null ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  return service . METHOD_1 ( device , error ) ; )  return service . METHOD_1 ( device , error ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.io.File> ) TYPE java.util.List<java.io.File> ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_3 ( VAR_1 . size ( ) ) ) INIT = TYPE_2 . METHOD_3 ( VAR_1 . size ( ) ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  VAR_2 . METHOD_4 ( new TYPE_1 ( VAR_3 , true , true , null ) ) )  VAR_2 . METHOD_4 ( new TYPE_1 ( VAR_3 , true , true , null ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME address ) NAME address ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( VAR_2 , STRING_1 ) )  METHOD_2 ( VAR_2 , STRING_1 ) ( VAR VAR ( TYPE java.lang.Integer ) TYPE java.lang.Integer ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 . METHOD_3 ( VAR_1 , address ) ) INIT = VAR_4 . METHOD_3 ( VAR_1 , address ) ) VAR VAR ( IF IF ( COND VAR_3 == null ) COND VAR_3 == null ( THEN THEN (  android.util.Log.d ( VAR_5 . TAG , ( STRING_2 + address ) ) )  android.util.Log.d ( VAR_5 . TAG , ( STRING_2 + address ) ) (  return ; )  return ; ) THEN THEN ) IF IF ( IF IF ( COND VAR_6 ) COND VAR_6 ( THEN THEN (  android.util.Log.d ( VAR_5 . TAG , ( ( ( STRING_3 + address ) + STRING_4 ) + VAR_3 ) ) )  android.util.Log.d ( VAR_5 . TAG , ( ( ( STRING_3 + address ) + STRING_4 ) + VAR_3 ) ) ) THEN THEN ) IF IF (  METHOD_4 ( VAR_1 , address ) )  METHOD_4 ( VAR_1 , address ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE android.os.Bundle ) TYPE android.os.Bundle ( NAME args ) NAME args ( INIT = new android.os.Bundle ( ) ) INIT = new android.os.Bundle ( ) ) VAR VAR (  args . METHOD_2 ( STRING_1 , VAR_1 ) )  args . METHOD_2 ( STRING_1 , VAR_1 ) (  TYPE_2 . METHOD_3 ( TYPE_3 . METHOD_4 ( args ) . toString ( ) ) )  TYPE_2 . METHOD_3 ( TYPE_3 . METHOD_4 ( args ) . toString ( ) ) (  org.mockito.Mockito.verify ( VAR_2 ) . METHOD_5 ( VAR_3 ) )  org.mockito.Mockito.verify ( VAR_2 ) . METHOD_5 ( VAR_3 ) (  TYPE_4 . METHOD_6 ( VAR_2 ) )  TYPE_4 . METHOD_6 ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.lang.String[] ) RETURN java.lang.String[] ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  return new java.lang.String [ ] { STRING_1 , STRING_2 , STRING_3 , STRING_4 , STRING_5 , STRING_6 , STRING_7 , STRING_8 , STRING_9 , STRING_10 , STRING_11 , STRING_12 , STRING_13 , STRING_14 , STRING_15 , STRING_16 , STRING_17 , STRING_18 , STRING_19 , STRING_20 , STRING_21 , STRING_22 , STRING_23 , STRING_24 , STRING_25 , STRING_26 , STRING_27 , STRING_28 , STRING_29 , STRING_30 , STRING_31 , STRING_32 , STRING_33 , STRING_34 , VAR_1 } ; )  return new java.lang.String [ ] { STRING_1 , STRING_2 , STRING_3 , STRING_4 , STRING_5 , STRING_6 , STRING_7 , STRING_8 , STRING_9 , STRING_10 , STRING_11 , STRING_12 , STRING_13 , STRING_14 , STRING_15 , STRING_16 , STRING_17 , STRING_18 , STRING_19 , STRING_20 , STRING_21 , STRING_22 , STRING_23 , STRING_24 , STRING_25 , STRING_26 , STRING_27 , STRING_28 , STRING_29 , STRING_30 , STRING_31 , STRING_32 , STRING_33 , STRING_34 , VAR_1 } ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME d ) NAME d ( INIT = METHOD_2 ( VAR_1 , name , VAR_2 ) ) INIT = METHOD_2 ( VAR_1 , name , VAR_2 ) ) VAR VAR ( IF IF ( COND d == null ) COND d == null ( THEN THEN (  return VAR_4 ; )  return VAR_4 ; ) THEN THEN ( ELSE ELSE (  return ( d . METHOD_3 ( ) ) == VAR_3 ? VAR_5 : VAR_6 ; )  return ( d . METHOD_3 ( ) ) == VAR_3 ? VAR_5 : VAR_6 ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME msg ) NAME msg ( INIT = TYPE_2 . METHOD_2 ( VAR_1 ) ) INIT = TYPE_2 . METHOD_2 ( VAR_1 ) ) VAR VAR (  TYPE_3 . d ( TYPE_2 . TAG , msg . toString ( ) ) )  TYPE_3 . d ( TYPE_2 . TAG , msg . toString ( ) ) (  assertEquals ( STRING_1 , 0 , msg . METHOD_3 ( ) ) )  assertEquals ( STRING_1 , 0 , msg . METHOD_3 ( ) ) (  assertEquals ( STRING_2 , 0 , msg . METHOD_4 ( ) ) )  assertEquals ( STRING_2 , 0 , msg . METHOD_4 ( ) ) (  assertEquals ( STRING_3 , INT_1 , msg . METHOD_5 ( ) ) )  assertEquals ( STRING_3 , INT_1 , msg . METHOD_5 ( ) ) (  assertEquals ( STRING_4 , VAR_2 , msg . METHOD_6 ( ) . METHOD_7 ( ) ) )  assertEquals ( STRING_4 , VAR_2 , msg . METHOD_6 ( ) . METHOD_7 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_1 ) ) COND ! ( VAR_1 ) ( THEN THEN (  throw new TYPE_2 ( STRING_1 ) ; )  throw new TYPE_2 ( STRING_1 ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE int ) TYPE int ( NAME pos ) NAME pos ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_3 ( ) ) INIT = METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( pos <= VAR_2 ) ? VAR_2 - pos : 0 ) INIT = ( pos <= VAR_2 ) ? VAR_2 - pos : 0 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ( INIT = pos + ( offset ) ) INIT = pos + ( offset ) ) VAR VAR (  return new TYPE_3 ( VAR_5 , ( - 1 ) , 0 , VAR_3 , VAR_3 , VAR_4 , VAR_6 ) ; )  return new TYPE_3 ( VAR_5 , ( - 1 ) , 0 , VAR_3 , VAR_3 , VAR_4 , VAR_6 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME x ) NAME x ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME info ) NAME info ( INIT = METHOD_2 ( x ) ) INIT = METHOD_2 ( x ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_3 ( info , VAR_3 ) ) INIT = METHOD_3 ( info , VAR_3 ) ) VAR VAR (  METHOD_4 ( VAR_2 ) )  METHOD_4 ( VAR_2 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Throwable ) TYPE java.lang.Throwable ( NAME e ) NAME e ( BLOCK BLOCK (  throw METHOD_5 ( x , e ) ; )  throw METHOD_5 ( x , e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME m ) NAME m ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME v ) NAME v ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME value ) NAME value ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = false ) INIT = false ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( v == null ) ? ( ( int ) ( m . METHOD_2 ( ) ) ) : ( ( int ) ( m . METHOD_2 ( v ) ) ) ) INIT = ( v == null ) ? ( ( int ) ( m . METHOD_2 ( ) ) ) : ( ( int ) ( m . METHOD_2 ( v ) ) ) ) VAR VAR (  TYPE_3 . assertTrue ( ( VAR_3 == value ) ) )  TYPE_3 . assertTrue ( ( VAR_3 == value ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_2 = true )  VAR_2 = true ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  TYPE_3 . assertEquals ( VAR_2 , VAR_1 ) )  TYPE_3 . assertEquals ( VAR_2 , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME session ) NAME session ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  VAR_3 )  VAR_3 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_2 ( session , VAR_1 ) ) INIT = METHOD_2 ( session , VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_4 == null ) COND VAR_4 == null ( THEN THEN (  VAR_2 . METHOD_3 ( ) )  VAR_2 . METHOD_3 ( ) (  return ; )  return ; ) THEN THEN ) IF IF (  VAR_2 . set ( VAR_5 ) )  VAR_2 . set ( VAR_5 ) ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( STRING_1 ) ) INIT = new TYPE_1 ( STRING_1 ) ) VAR VAR ( IF IF ( COND ! ( TYPE_2 . METHOD_2 ( VAR_1 ) ) ) COND ! ( TYPE_2 . METHOD_2 ( VAR_1 ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_3 . METHOD_3 ( VAR_1 ) ) INIT = TYPE_3 . METHOD_3 ( VAR_1 ) ) VAR VAR (  assertEquals ( CHAR_1 , new TYPE_4 ( VAR_1 ) . METHOD_4 ( ) ) )  assertEquals ( CHAR_1 , new TYPE_4 ( VAR_1 ) . METHOD_4 ( ) ) (  assertEquals ( STRING_2 , VAR_2 . format ( INT_1 ) ) )  assertEquals ( STRING_2 , VAR_2 . format ( INT_1 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME path ) NAME path ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND path . METHOD_2 ( STRING_1 ) ) COND path . METHOD_2 ( STRING_1 ) ( THEN THEN ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_3 ( path ) ) INIT = TYPE_1 . METHOD_3 ( path ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_4 ( VAR_1 ) ) INIT = TYPE_2 . METHOD_4 ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 . get ( VAR_2 ) ) INIT = VAR_4 . get ( VAR_2 ) ) VAR VAR ( IF IF ( COND VAR_3 != null ) COND VAR_3 != null ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_5 ) NAME VAR_5 ( IN VAR_3 ) IN VAR_3 ( BLOCK BLOCK ( IF IF ( COND VAR_1 . METHOD_2 ( VAR_5 ) ) COND VAR_1 . METHOD_2 ( VAR_5 ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF (  return false ; )  return false ; ) THEN THEN ( ELSE ELSE (  return true ; )  return true ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_3 ) NAME METHOD_3 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_4 ( METHOD_5 ( ) ) ) INIT = METHOD_4 ( METHOD_5 ( ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_6 ( VAR_2 , STRING_3 ) ) INIT = METHOD_6 ( VAR_2 , STRING_3 ) ) VAR VAR (  VAR_1 . METHOD_7 ( VAR_3 ) )  VAR_1 . METHOD_7 ( VAR_3 ) (  VAR_1 . METHOD_7 ( new TYPE_2 ( 0 ) ) )  VAR_1 . METHOD_7 ( new TYPE_2 ( 0 ) ) (  VAR_1 . METHOD_7 ( new TYPE_2 ( 1 ) ) )  VAR_1 . METHOD_7 ( new TYPE_2 ( 1 ) ) ) BLOCK BLOCK ) METHOD METHOD (  METHOD_2 ( STRING_1 , STRING_2 , new TYPE_1 ( ) { public void METHOD_3 ( java.util.List < TYPE_2 > VAR_1 ) { long VAR_2 = METHOD_4 ( METHOD_5 ( ) ) ; TYPE_2 VAR_3 = METHOD_6 ( VAR_2 , STRING_3 ) ; VAR_1 . METHOD_7 ( VAR_3 ) ; VAR_1 . METHOD_7 ( new TYPE_2 ( 0 ) ) ; VAR_1 . METHOD_7 ( new TYPE_2 ( 1 ) ) ; } } ) )  METHOD_2 ( STRING_1 , STRING_2 , new TYPE_1 ( ) { public void METHOD_3 ( java.util.List < TYPE_2 > VAR_1 ) { long VAR_2 = METHOD_4 ( METHOD_5 ( ) ) ; TYPE_2 VAR_3 = METHOD_6 ( VAR_2 , STRING_3 ) ; VAR_1 . METHOD_7 ( VAR_3 ) ; VAR_1 . METHOD_7 ( new TYPE_2 ( 0 ) ) ; VAR_1 . METHOD_7 ( new TYPE_2 ( 1 ) ) ; } } ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  return ( ( VAR_1 ) != null ) && ( ! ( ( ( ( VAR_1 . state ) == ( VAR_2 ) ) || ( ( VAR_1 . state ) == ( VAR_3 ) ) ) || ( ( VAR_1 . state ) == ( VAR_4 ) ) ) ) ; )  return ( ( VAR_1 ) != null ) && ( ! ( ( ( ( VAR_1 . state ) == ( VAR_2 ) ) || ( ( VAR_1 . state ) == ( VAR_3 ) ) ) || ( ( VAR_1 . state ) == ( VAR_4 ) ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.io.File ( VAR_2 ) ) INIT = new java.io.File ( VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_1 ( new TYPE_2 ( VAR_1 , false ) ) ) INIT = new TYPE_1 ( new TYPE_2 ( VAR_1 , false ) ) ) VAR VAR (  TYPE_3 . METHOD_2 ( VAR_3 , METHOD_3 ( ) ) )  TYPE_3 . METHOD_2 ( VAR_3 , METHOD_3 ( ) ) (  VAR_3 . METHOD_4 ( ) )  VAR_3 . METHOD_4 ( ) (  VAR_3 . METHOD_5 ( ) )  VAR_3 . METHOD_5 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ( BLOCK BLOCK (  android.util.Log.e ( VAR_4 , ( STRING_1 + ( e.getMessage ( ) ) ) ) )  android.util.Log.e ( VAR_4 , ( STRING_1 + ( e.getMessage ( ) ) ) ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SWITCH SWITCH ( NAME VAR_1 ) NAME VAR_1 ( CASE VAR_2 ( BLOCK BLOCK (  return VAR_5 ; )  return VAR_5 ; ) BLOCK BLOCK ) CASE VAR_2 ( CASE VAR_3 ( BLOCK BLOCK (  return VAR_5 ; )  return VAR_5 ; ) BLOCK BLOCK ) CASE VAR_3 ( CASE VAR_4 ( BLOCK BLOCK (  return VAR_5 ; )  return VAR_5 ; ) BLOCK BLOCK ) CASE VAR_4 ( CASE VAR_6 ( BLOCK BLOCK (  return VAR_12 ; )  return VAR_12 ; ) BLOCK BLOCK ) CASE VAR_6 ( CASE VAR_7 ( BLOCK BLOCK (  return VAR_12 ; )  return VAR_12 ; ) BLOCK BLOCK ) CASE VAR_7 ( CASE VAR_8 ( BLOCK BLOCK (  return VAR_12 ; )  return VAR_12 ; ) BLOCK BLOCK ) CASE VAR_8 ( CASE VAR_9 ( BLOCK BLOCK (  return VAR_12 ; )  return VAR_12 ; ) BLOCK BLOCK ) CASE VAR_9 ( CASE VAR_10 ( BLOCK BLOCK (  return VAR_12 ; )  return VAR_12 ; ) BLOCK BLOCK ) CASE VAR_10 ( CASE VAR_11 ( BLOCK BLOCK (  return VAR_12 ; )  return VAR_12 ; ) BLOCK BLOCK ) CASE VAR_11 ( CASE VAR_13 ( BLOCK BLOCK (  return VAR_5 ; )  return VAR_5 ; ) BLOCK BLOCK ) CASE VAR_13 ( CASE VAR_14 ( BLOCK BLOCK (  return VAR_5 ; )  return VAR_5 ; ) BLOCK BLOCK ) CASE VAR_14 ( CASE VAR_15 ( BLOCK BLOCK (  return VAR_5 ; )  return VAR_5 ; ) BLOCK BLOCK ) CASE VAR_15 ( CASE VAR_16 ( BLOCK BLOCK ( IF IF ( COND ( TYPE_1 . METHOD_2 ( ) ) == ( VAR_17 ) ) COND ( TYPE_1 . METHOD_2 ( ) ) == ( VAR_17 ) ( THEN THEN (  return VAR_5 ; )  return VAR_5 ; ) THEN THEN ( ELSE ELSE (  return VAR_12 ; )  return VAR_12 ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) CASE VAR_16 ( DEFAULT DEFAULT ( BLOCK BLOCK (  return VAR_12 ; )  return VAR_12 ; ) BLOCK BLOCK ) DEFAULT DEFAULT ) SWITCH SWITCH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( ( ( ( VAR_1 ) != ( VAR_2 ) ) || ( ( VAR_3 ) != ( VAR_2 ) ) ) || ( ( VAR_4 ) != ( VAR_5 ) ) ) || ( ( VAR_6 ) != ( VAR_5 ) ) ) COND ( ( ( ( VAR_1 ) != ( VAR_2 ) ) || ( ( VAR_3 ) != ( VAR_2 ) ) ) || ( ( VAR_4 ) != ( VAR_5 ) ) ) || ( ( VAR_6 ) != ( VAR_5 ) ) ( THEN THEN (  throw new TYPE_1 ( VAR_7 ) ; )  throw new TYPE_1 ( VAR_7 ) ; ) THEN THEN ) IF IF (  VAR_2 = null )  VAR_2 = null (  VAR_5 = null )  VAR_5 = null ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME match ) NAME match ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( ) ) INIT = TYPE_2 . METHOD_2 ( ) ) VAR VAR (  VAR_1 . METHOD_3 ( ( match = TYPE_3 . METHOD_4 ( ) ) ) )  VAR_1 . METHOD_3 ( ( match = TYPE_3 . METHOD_4 ( ) ) ) (  VAR_1 . METHOD_3 ( TYPE_3 . METHOD_5 ( INT_1 ) ) )  VAR_1 . METHOD_3 ( TYPE_3 . METHOD_5 ( INT_1 ) ) (  VAR_1 . METHOD_3 ( TYPE_3 . METHOD_5 ( INT_2 ) ) )  VAR_1 . METHOD_3 ( TYPE_3 . METHOD_5 ( INT_2 ) ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ( INIT = TYPE_3 . METHOD_6 ( VAR_1 , INT_3 , STRING_1 ) ) INIT = TYPE_3 . METHOD_6 ( VAR_1 , INT_3 , STRING_1 ) ) VAR VAR (  assertEquals ( match , result ) )  assertEquals ( match , result ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static final ) MODIFIER public static final ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME start ) NAME start ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME uid ) NAME uid ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE int[] ) TYPE int[] ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_6 ) NAME VAR_6 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_7 ) NAME VAR_7 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_8 ) NAME VAR_8 ) VAR VAR ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME VAR_9 ) NAME VAR_9 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  return TYPE_2 . METHOD_1 ( VAR_1 , VAR_2 , uid , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 , VAR_8 , VAR_9 ) ; )  return TYPE_2 . METHOD_1 ( VAR_1 , VAR_2 , uid , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 , VAR_8 , VAR_9 ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME ex ) NAME ex ( BLOCK BLOCK (  android.util.Log.e ( VAR_10 , STRING_1 ) )  android.util.Log.e ( VAR_10 , STRING_1 ) (  throw new java.lang.RuntimeException ( STRING_1 , ex ) ; )  throw new java.lang.RuntimeException ( STRING_1 , ex ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME item ) NAME item ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_2 . METHOD_2 ( this , STRING_1 , VAR_1 ) . METHOD_3 ( ) )  TYPE_2 . METHOD_2 ( this , STRING_1 , VAR_1 ) . METHOD_3 ( ) ( IF IF ( COND ( item . METHOD_4 ( ) ) == ( VAR_2 ) ) COND ( item . METHOD_4 ( ) ) == ( VAR_2 ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ( ELSE ELSE ( IF IF ( COND ( item . METHOD_4 ( ) ) == ( VAR_3 ) ) COND ( item . METHOD_4 ( ) ) == ( VAR_3 ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ( ELSE ELSE (  return super . METHOD_1 ( item ) ; )  return super . METHOD_1 ( item ) ; ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME args ) NAME args ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME options ) NAME options ( INIT = TYPE_1 . METHOD_2 ( args ) ) INIT = TYPE_1 . METHOD_2 ( args ) ) VAR VAR (  TYPE_2 . METHOD_3 ( VAR_1 , options . METHOD_4 ( ) ) )  TYPE_2 . METHOD_3 ( VAR_1 , options . METHOD_4 ( ) ) ( IF IF ( COND options == null ) COND options == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 ( options ) ) INIT = new TYPE_2 ( options ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME error ) NAME error ( INIT = VAR_2 . run ( ) ) INIT = VAR_2 . run ( ) ) VAR VAR (  TYPE_3 . METHOD_5 ( error ) )  TYPE_3 . METHOD_5 ( error ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME parent ) NAME parent ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME path ) NAME path ( INIT = METHOD_2 ( parent , ( ( TYPE_2 ) ( VAR_1 . METHOD_3 ( ) ) ) ) . append ( VAR_1 . getName ( ) ) ) INIT = METHOD_2 ( parent , ( ( TYPE_2 ) ( VAR_1 . METHOD_3 ( ) ) ) ) . append ( VAR_1 . getName ( ) ) ) VAR VAR (  return new TYPE_1 ( path . toString ( ) , CHAR_1 ) ; )  return new TYPE_1 ( path . toString ( ) , CHAR_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME config ) NAME config ( INIT = TYPE_2 . METHOD_3 ( VAR_2 ) ) INIT = TYPE_2 . METHOD_3 ( VAR_2 ) ) VAR VAR ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK ( IF IF ( COND VAR_1 instanceof TYPE_4 ) COND VAR_1 instanceof TYPE_4 ( THEN THEN (  config . METHOD_5 ( ( ( TYPE_4 ) ( VAR_1 ) ) . METHOD_6 ( ) , true ) )  config . METHOD_5 ( ( ( TYPE_4 ) ( VAR_1 ) ) . METHOD_6 ( ) , true ) ) THEN THEN ( ELSE ELSE (  config . METHOD_5 ( ( ( TYPE_5 ) ( VAR_1 ) ) , true ) )  config . METHOD_5 ( ( ( TYPE_5 ) ( VAR_1 ) ) , true ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD (  TYPE_3 . METHOD_3 ( ) . METHOD_4 ( VAR_2 , config , new java.lang.Runnable ( ) { public void run ( ) { if ( VAR_1 instanceof TYPE_4 ) { config . METHOD_5 ( ( ( TYPE_4 ) ( VAR_1 ) ) . METHOD_6 ( ) , true ) ; } else { config . METHOD_5 ( ( ( TYPE_5 ) ( VAR_1 ) ) , true ) ; } } } ) )  TYPE_3 . METHOD_3 ( ) . METHOD_4 ( VAR_2 , config , new java.lang.Runnable ( ) { public void run ( ) { if ( VAR_1 instanceof TYPE_4 ) { config . METHOD_5 ( ( ( TYPE_4 ) ( VAR_1 ) ) . METHOD_6 ( ) , true ) ; } else { config . METHOD_5 ( ( ( TYPE_5 ) ( VAR_1 ) ) , true ) ; } } } ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  VAR_2 = VAR_1 . METHOD_1 ( VAR_3 , new TYPE_2 ( ) ) )  VAR_2 = VAR_1 . METHOD_1 ( VAR_3 , new TYPE_2 ( ) ) (  return true ; )  return true ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK (  TYPE_4 . METHOD_2 ( VAR_4 , ( STRING_1 + ( e . METHOD_3 ( ) ) ) , VAR_5 ) . METHOD_4 ( ) )  TYPE_4 . METHOD_2 ( VAR_4 , ( STRING_1 + ( e . METHOD_3 ( ) ) ) , VAR_5 ) . METHOD_4 ( ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME offset ) NAME offset ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 [ offset ] = ( ( byte ) ( i > > 8 ) ) )  VAR_1 [ offset ] = ( ( byte ) ( i > > 8 ) ) (  VAR_1 [ ( offset + 1 ) ] = ( ( byte ) ( i ) ) )  VAR_1 [ ( offset + 1 ) ] = ( ( byte ) ( i ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME get ) NAME get ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME key ) NAME key ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = TYPE_2 . METHOD_1 ( VAR_2 , 0 , VAR_3 , key ) ) INIT = TYPE_2 . METHOD_1 ( VAR_2 , 0 , VAR_3 , key ) ) VAR VAR ( IF IF ( COND ( ( i < 0 ) || ( ( VAR_4 [ i ] ) == ( VAR_5 ) ) ) || ( ( VAR_4 [ i ] . get ( ) ) == null ) ) COND ( ( i < 0 ) || ( ( VAR_4 [ i ] ) == ( VAR_5 ) ) ) || ( ( VAR_4 [ i ] . get ( ) ) == null ) ( THEN THEN (  return VAR_1 ; )  return VAR_1 ; ) THEN THEN ( ELSE ELSE (  return ( ( TYPE_1 ) ( VAR_4 [ i ] . get ( ) ) ) ; )  return ( ( TYPE_1 ) ( VAR_4 [ i ] . get ( ) ) ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME status ) NAME status ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  android.util.Log.d ( VAR_3 . TAG , STRING_1 ) )  android.util.Log.d ( VAR_3 . TAG , STRING_1 ) ) THEN THEN ) IF IF ( IF IF ( COND ( status == ( VAR_4 ) ) && ( ( VAR_5 . METHOD_2 ( VAR_6 ) ) != null ) ) COND ( status == ( VAR_4 ) ) && ( ( VAR_5 . METHOD_2 ( VAR_6 ) ) != null ) ( THEN THEN (  METHOD_3 ( ) )  METHOD_3 ( ) (  METHOD_4 ( INT_1 ) )  METHOD_4 ( INT_1 ) (  METHOD_5 ( VAR_7 ) )  METHOD_5 ( VAR_7 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ! ( options . METHOD_2 ( ) ) ) COND ! ( options . METHOD_2 ( ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME session ) NAME session ( INIT = TYPE_2 . METHOD_3 ( ) ) INIT = TYPE_2 . METHOD_3 ( ) ) VAR VAR (  return ( ( ( VAR_1 ) == null ) || ( ! ( VAR_2 . METHOD_4 ( session . METHOD_5 ( ) ) ) ) ) || ( ! ( VAR_2 . METHOD_6 ( session . METHOD_5 ( ) ) ) ) ; )  return ( ( ( VAR_1 ) == null ) || ( ! ( VAR_2 . METHOD_4 ( session . METHOD_5 ( ) ) ) ) ) || ( ! ( VAR_2 . METHOD_6 ( session . METHOD_5 ( ) ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE android.os.Message ) TYPE android.os.Message ( NAME msg ) NAME msg ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( ( ( ( ( ( STRING_1 + ( VAR_1 ) ) + STRING_2 ) + ( msg.obj ) ) + STRING_3 ) + ( VAR_2 . get ( ) ) ) ) )  METHOD_2 ( ( ( ( ( ( STRING_1 + ( VAR_1 ) ) + STRING_2 ) + ( msg.obj ) ) + STRING_3 ) + ( VAR_2 . get ( ) ) ) ) ( IF IF ( COND ( ( VAR_1 ) == ( VAR_3 ) ) && ( ( ( long ) ( msg.obj ) ) == ( VAR_2 . get ( ) ) ) ) COND ( ( VAR_1 ) == ( VAR_3 ) ) && ( ( ( long ) ( msg.obj ) ) == ( VAR_2 . get ( ) ) ) ( THEN THEN (  METHOD_3 ( ) )  METHOD_3 ( ) (  METHOD_4 ( ) )  METHOD_4 ( ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_1 ) ) COND ! ( VAR_1 ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  VAR_1 = false )  VAR_1 = false (  VAR_2 = false )  VAR_2 = false (  TYPE_1 . METHOD_2 ( ) )  TYPE_1 . METHOD_2 ( ) (  VAR_3 . METHOD_3 ( VAR_4 ) )  VAR_3 . METHOD_3 ( VAR_4 ) (  VAR_5 . METHOD_4 ( VAR_6 ) )  VAR_5 . METHOD_4 ( VAR_6 ) (  VAR_7 . METHOD_5 ( null ) )  VAR_7 . METHOD_5 ( null ) (  VAR_8 . METHOD_6 ( ) )  VAR_8 . METHOD_6 ( ) (  METHOD_7 ( ) )  METHOD_7 ( ) (  VAR_9 . METHOD_6 ( ) )  VAR_9 . METHOD_6 ( ) ( IF IF ( COND ( VAR_10 ) != null ) COND ( VAR_10 ) != null ( THEN THEN (  VAR_10 . METHOD_8 ( true ) )  VAR_10 . METHOD_8 ( true ) (  VAR_10 = null )  VAR_10 = null ) THEN THEN ) IF IF (  METHOD_9 ( ) )  METHOD_9 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.lang.String [ ] { STRING_1 } ) INIT = new java.lang.String [ ] { STRING_1 } ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_2 ( ) . METHOD_3 ( VAR_1 , null , null ) ) INIT = TYPE_2 . METHOD_2 ( ) . METHOD_3 ( VAR_1 , null , null ) ) VAR VAR (  VAR_2 . METHOD_4 ( ) )  VAR_2 . METHOD_4 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK (  fail ( STRING_2 ) )  fail ( STRING_2 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( PARAMS PARAMS ( VAR VAR ( TYPE com.android.jack.ir.ast.JDefinedClassOrInterface ) TYPE com.android.jack.ir.ast.JDefinedClassOrInterface ( NAME type ) NAME type ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND type instanceof TYPE_1 ) COND type instanceof TYPE_1 ( THEN THEN ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( type . METHOD_1 ( ) ) ) INIT = new TYPE_2 ( type . METHOD_1 ( ) ) ) VAR VAR (  VAR_1 . append ( new TYPE_3 ( ( ( TYPE_1 ) ( type ) ) ) ) )  VAR_1 . append ( new TYPE_3 ( ( ( TYPE_1 ) ( type ) ) ) ) (  VAR_1 . METHOD_2 ( ) )  VAR_1 . METHOD_2 ( ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( IN TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ) IN TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ( BLOCK BLOCK ( IF IF ( COND VAR_1 . equals ( STRING_1 ) ) COND VAR_1 . equals ( STRING_1 ) ( THEN THEN (  continue ; )  continue ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_1 . METHOD_4 ( VAR_1 ) ) INIT = TYPE_1 . METHOD_4 ( VAR_1 ) ) VAR VAR (  assertNotNull ( VAR_2 . METHOD_5 ( ) ) )  assertNotNull ( VAR_2 . METHOD_5 ( ) ) ( IF IF ( COND VAR_2 . METHOD_6 ( ) ) COND VAR_2 . METHOD_6 ( ) ( THEN THEN ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_2 . METHOD_7 ( ) ) INIT = VAR_2 . METHOD_7 ( ) ) VAR VAR (  assertNotNull ( VAR_3 ) )  assertNotNull ( VAR_3 ) (  assertNotNull ( VAR_3 . METHOD_8 ( ) ) )  assertNotNull ( VAR_3 . METHOD_8 ( ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SWITCH SWITCH ( NAME VAR_1 . METHOD_2 ( ) ) NAME VAR_1 . METHOD_2 ( ) ( CASE VAR_2 ( BLOCK BLOCK (  return false ; )  return false ; ) BLOCK BLOCK ) CASE VAR_2 ( CASE VAR_3 ( BLOCK BLOCK (  return false ; )  return false ; ) BLOCK BLOCK ) CASE VAR_3 ( CASE VAR_4 ( BLOCK BLOCK (  return false ; )  return false ; ) BLOCK BLOCK ) CASE VAR_4 ( CASE VAR_5 ( BLOCK BLOCK (  return false ; )  return false ; ) BLOCK BLOCK ) CASE VAR_5 ( CASE VAR_6 ( BLOCK BLOCK (  return false ; )  return false ; ) BLOCK BLOCK ) CASE VAR_6 ( CASE VAR_7 ( BLOCK BLOCK (  return false ; )  return false ; ) BLOCK BLOCK ) CASE VAR_7 ( CASE VAR_8 ( BLOCK BLOCK (  return false ; )  return false ; ) BLOCK BLOCK ) CASE VAR_8 ( CASE VAR_9 ( BLOCK BLOCK (  return false ; )  return false ; ) BLOCK BLOCK ) CASE VAR_9 ( CASE VAR_10 ( BLOCK BLOCK (  return false ; )  return false ; ) BLOCK BLOCK ) CASE VAR_10 ( CASE VAR_11 ( BLOCK BLOCK (  return false ; )  return false ; ) BLOCK BLOCK ) CASE VAR_11 ) SWITCH SWITCH (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME subId ) NAME subId ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( TYPE_1 . METHOD_2 ( VAR_2 , VAR_1 , STRING_1 ) ) ) COND ! ( TYPE_1 . METHOD_2 ( VAR_2 , VAR_1 , STRING_1 ) ) ( THEN THEN (  return - 1 ; )  return - 1 ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_3 ( subId ) ) INIT = METHOD_3 ( subId ) ) VAR VAR ( IF IF ( COND VAR_3 != null ) COND VAR_3 != null ( THEN THEN (  return VAR_3 . METHOD_4 ( ) ; )  return VAR_3 . METHOD_4 ( ) ; ) THEN THEN ( ELSE ELSE (  return - 1 ; )  return - 1 ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  VAR_2 )  VAR_2 ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( IF IF ( COND ( VAR_2 . METHOD_3 ( ) ) != VAR_1 ) COND ( VAR_2 . METHOD_3 ( ) ) != VAR_1 ( THEN THEN (  VAR_2 . METHOD_4 ( VAR_1 ) )  VAR_2 . METHOD_4 ( VAR_1 ) ( IF IF ( COND VAR_3 != ( METHOD_2 ( ) ) ) COND VAR_3 != ( METHOD_2 ( ) ) ( THEN THEN ( IF IF ( COND ! VAR_3 ) COND ! VAR_3 ( THEN THEN (  METHOD_5 ( ) )  METHOD_5 ( ) (  METHOD_6 ( VAR_4 ) )  METHOD_6 ( VAR_4 ) ) THEN THEN ( ELSE ELSE (  METHOD_7 ( VAR_5 ) )  METHOD_7 ( VAR_5 ) ) ELSE ELSE ) IF IF ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.lang.Class ) RETURN java.lang.Class ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE Main ) TYPE Main ( NAME m ) NAME m ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( Main . METHOD_2 ( STRING_1 ) ) ) COND ! ( Main . METHOD_2 ( STRING_1 ) ) ( THEN THEN (  return VAR_2 class ; )  return VAR_2 class ; ) THEN THEN ) IF IF (  Main . METHOD_3 ( STRING_1 ) )  Main . METHOD_3 ( STRING_1 ) ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  Main . METHOD_4 ( STRING_1 ) )  Main . METHOD_4 ( STRING_1 ) ) THEN THEN ) IF IF ( VAR VAR ( TYPE Main ) TYPE Main ( NAME VAR_3 ) NAME VAR_3 ( INIT = m . METHOD_5 ( ) ) INIT = m . METHOD_5 ( ) ) VAR VAR ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN ( WHILE WHILE ( COND ! ( Main . METHOD_6 ( STRING_1 ) ) ) COND ! ( Main . METHOD_6 ( STRING_1 ) ) ( BLOCK BLOCK ) BLOCK BLOCK ) WHILE WHILE ) THEN THEN ) IF IF (  return VAR_3 == null ? null : VAR_3 . METHOD_7 ( ) ; )  return VAR_3 == null ? null : VAR_3 . METHOD_7 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN byte[] ) RETURN byte[] ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 ( VAR_3 ) ) INIT = new TYPE_2 ( VAR_3 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_3 ( VAR_2 , VAR_5 , VAR_6 , VAR_7 , VAR_8 ) ) INIT = new TYPE_3 ( VAR_2 , VAR_5 , VAR_6 , VAR_7 , VAR_8 ) ) VAR VAR (  VAR_1 . METHOD_2 ( VAR_4 , 0 ) )  VAR_1 . METHOD_2 ( VAR_4 , 0 ) (  return VAR_2 . METHOD_3 ( ) ; )  return VAR_2 . METHOD_3 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return ( ( ( ( ( VAR_1 . METHOD_2 ( ) ) && ( ( ( TYPE_2 . METHOD_3 ( VAR_1 ) ) & ( VAR_2 ) ) != 0 ) ) && ( ! ( VAR_1 . METHOD_4 ( ) ) ) ) && ( ! ( VAR_1 . METHOD_5 ( ) ) ) ) && ( VAR_1 . METHOD_6 ( ) ) ) && ( VAR_1 . METHOD_7 ( ) . METHOD_8 ( ) ) ; )  return ( ( ( ( ( VAR_1 . METHOD_2 ( ) ) && ( ( ( TYPE_2 . METHOD_3 ( VAR_1 ) ) & ( VAR_2 ) ) != 0 ) ) && ( ! ( VAR_1 . METHOD_4 ( ) ) ) ) && ( ! ( VAR_1 . METHOD_5 ( ) ) ) ) && ( VAR_1 . METHOD_6 ( ) ) ) && ( VAR_1 . METHOD_7 ( ) . METHOD_8 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = null ) INIT = null ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_4 = METHOD_2 ( VAR_1 ) )  VAR_4 = METHOD_2 ( VAR_1 ) (  VAR_2 . METHOD_3 ( VAR_4 , VAR_3 ) )  VAR_2 . METHOD_3 ( VAR_4 , VAR_3 ) (  return true ; )  return true ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME VAR_5 ) NAME VAR_5 ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ( FINALLY FINALLY ( IF IF ( COND VAR_4 != null ) COND VAR_4 != null ( THEN THEN ( TRY TRY ( BLOCK BLOCK (  VAR_4 . METHOD_4 ( ) )  VAR_4 . METHOD_4 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) THEN THEN ) IF IF ) FINALLY FINALLY ) TRY TRY (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME path ) NAME path ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME action ) NAME action ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( null == path ) || ( path . equals ( STRING_1 ) ) ) || ( ! ( TYPE_2 . METHOD_2 ( action ) ) ) ) COND ( ( null == path ) || ( path . equals ( STRING_1 ) ) ) || ( ! ( TYPE_2 . METHOD_2 ( action ) ) ) ( THEN THEN (  throw new java.lang.IllegalArgumentException ( STRING_2 ) ; )  throw new java.lang.IllegalArgumentException ( STRING_2 ) ; ) THEN THEN ( ELSE ELSE ( IF IF ( COND ( METHOD_3 ( ) ) == ( VAR_1 ) ) COND ( METHOD_3 ( ) ) == ( VAR_1 ) ( THEN THEN (  throw new TYPE_3 ( STRING_3 ) ; )  throw new TYPE_3 ( STRING_3 ) ; ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF (  return METHOD_4 ( VAR_2 , path , action ) ; )  return METHOD_4 ( VAR_2 , path , action ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( STRING_1 ) )  VAR_1 . METHOD_2 ( STRING_1 ) (  VAR_1 . METHOD_3 ( ) )  VAR_1 . METHOD_3 ( ) (  VAR_1 . METHOD_2 ( STRING_2 ) )  VAR_1 . METHOD_2 ( STRING_2 ) (  VAR_1 . METHOD_3 ( ) )  VAR_1 . METHOD_3 ( ) (  VAR_1 . METHOD_4 ( ) )  VAR_1 . METHOD_4 ( ) ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_2 . METHOD_5 ( ) ) INIT = VAR_2 . METHOD_5 ( ) ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_4 ) NAME VAR_4 ( INIT = new byte [ VAR_3 ] ) INIT = new byte [ VAR_3 ] ) VAR VAR (  VAR_2 . METHOD_6 ( VAR_4 ) )  VAR_2 . METHOD_6 ( VAR_4 ) (  return new java.lang.String ( VAR_4 , VAR_5 ) ; )  return new java.lang.String ( VAR_4 , VAR_5 ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME VAR_6 ) NAME VAR_6 ( BLOCK BLOCK (  throw new TYPE_3 ( VAR_6 ) ; )  throw new TYPE_3 ( VAR_6 ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( ) . size ( ) ) INIT = TYPE_1 . METHOD_2 ( ) . size ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_3 ( STRING_1 ) ) INIT = new TYPE_3 ( STRING_1 ) ) VAR VAR (  TYPE_1 . METHOD_3 ( VAR_2 ) )  TYPE_1 . METHOD_3 ( VAR_2 ) (  assertEquals ( ( VAR_1 + 1 ) , TYPE_1 . METHOD_2 ( ) . size ( ) ) )  assertEquals ( ( VAR_1 + 1 ) , TYPE_1 . METHOD_2 ( ) . size ( ) ) (  TYPE_1 . METHOD_4 ( VAR_2 ) )  TYPE_1 . METHOD_4 ( VAR_2 ) (  assertEquals ( VAR_1 , TYPE_1 . METHOD_2 ( ) . size ( ) ) )  assertEquals ( VAR_1 , TYPE_1 . METHOD_2 ( ) . size ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public final ) MODIFIER public final ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME x ) NAME x ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  throw new TYPE_2 ( ) ; )  throw new TYPE_2 ( ) ; ) THEN THEN ) IF IF ( IF IF ( COND ! ( VAR_2 ) ) COND ! ( VAR_2 ) ( THEN THEN (  throw new TYPE_3 ( STRING_1 ) ; )  throw new TYPE_3 ( STRING_1 ) ; ) THEN THEN ) IF IF (  METHOD_1 ( METHOD_2 ( METHOD_3 ( i , VAR_3 ) ) , x ) )  METHOD_1 ( METHOD_2 ( METHOD_3 ( i , VAR_3 ) ) , x ) (  return this ; )  return this ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public final ) MODIFIER public final ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME msg ) NAME msg ( INIT = STRING_1 + name ) INIT = STRING_1 + name ) VAR VAR (  android.util.Log.w ( com.android.server.am.ActivityManagerService.TAG , msg ) )  android.util.Log.w ( com.android.server.am.ActivityManagerService.TAG , msg ) (  throw new TYPE_3 ( msg ) ; )  throw new TYPE_3 ( msg ) ; ) THEN THEN ) IF IF (  return METHOD_2 ( VAR_1 , name ) ; )  return METHOD_2 ( VAR_1 , name ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME event ) NAME event ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_2 . METHOD_2 ( STRING_1 , STRING_2 ) )  TYPE_2 . METHOD_2 ( STRING_1 , STRING_2 ) ( IF IF ( COND ( VAR_1 ) != null ) COND ( VAR_1 ) != null ( THEN THEN (  VAR_2 = VAR_1 )  VAR_2 = VAR_1 (  VAR_3 = VAR_4 )  VAR_3 = VAR_4 (  VAR_5 = VAR_6 )  VAR_5 = VAR_6 ) THEN THEN ) IF IF (  VAR_1 = null )  VAR_1 = null (  VAR_4 = null )  VAR_4 = null (  VAR_6 = null )  VAR_6 = null (  METHOD_3 ( event ) )  METHOD_3 ( event ) ( IF IF ( COND ( VAR_7 ) != ( VAR_8 ) ) COND ( VAR_7 ) != ( VAR_8 ) ( THEN THEN (  METHOD_4 ( event ) )  METHOD_4 ( event ) ) THEN THEN ( ELSE ELSE (  METHOD_5 ( ) )  METHOD_5 ( ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 = new TYPE_1 ( VAR_2 ) )  VAR_1 = new TYPE_1 ( VAR_2 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_2 ( VAR_2 ) ) INIT = new TYPE_2 ( VAR_2 ) ) VAR VAR (  VAR_1 . METHOD_2 ( VAR_3 ) )  VAR_1 . METHOD_2 ( VAR_3 ) (  TYPE_3 . METHOD_3 ( VAR_3 , VAR_1 . METHOD_4 ( ) ) )  TYPE_3 . METHOD_3 ( VAR_3 , VAR_1 . METHOD_4 ( ) ) (  VAR_1 . METHOD_2 ( null ) )  VAR_1 . METHOD_2 ( null ) (  TYPE_3 . METHOD_5 ( VAR_1 . METHOD_4 ( ) ) )  TYPE_3 . METHOD_5 ( VAR_1 . METHOD_4 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  android.util.Log . i ( VAR_1 . TAG , STRING_1 ) )  android.util.Log . i ( VAR_1 . TAG , STRING_1 ) ( VAR VAR ( TYPE TYPE_1<java.lang.Integer,java.lang.Integer> ) TYPE TYPE_1<java.lang.Integer,java.lang.Integer> ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( IF IF ( COND ( ( VAR_3 ) >= INT_1 ) && ( ( VAR_4 ) >= INT_2 ) ) COND ( ( VAR_3 ) >= INT_1 ) && ( ( VAR_4 ) >= INT_2 ) ( THEN THEN (  METHOD_3 ( INT_1 , INT_2 , true , false ) )  METHOD_3 ( INT_1 , INT_2 , true , false ) ) THEN THEN ( ELSE ELSE (  android.util.Log.w ( VAR_1 . TAG , STRING_2 ) )  android.util.Log.w ( VAR_1 . TAG , STRING_2 ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( ) ) INIT = TYPE_2 . METHOD_2 ( ) ) VAR VAR (  METHOD_3 ( VAR_1 , STRING_1 , STRING_2 , STRING_3 , STRING_4 , STRING_5 , STRING_6 , STRING_7 , STRING_8 , STRING_9 , STRING_10 , STRING_11 , STRING_12 , STRING_13 , STRING_14 , STRING_15 , STRING_16 , STRING_17 , STRING_18 , STRING_19 , STRING_20 , STRING_21 , STRING_22 , STRING_23 , STRING_24 , STRING_25 , STRING_26 , STRING_27 ) )  METHOD_3 ( VAR_1 , STRING_1 , STRING_2 , STRING_3 , STRING_4 , STRING_5 , STRING_6 , STRING_7 , STRING_8 , STRING_9 , STRING_10 , STRING_11 , STRING_12 , STRING_13 , STRING_14 , STRING_15 , STRING_16 , STRING_17 , STRING_18 , STRING_19 , STRING_20 , STRING_21 , STRING_22 , STRING_23 , STRING_24 , STRING_25 , STRING_26 , STRING_27 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  server . METHOD_2 ( new TYPE_1 ( ) . METHOD_3 ( METHOD_4 ( STRING_1 . METHOD_5 ( STRING_2 ) ) ) . METHOD_6 ( STRING_3 ) ) )  server . METHOD_2 ( new TYPE_1 ( ) . METHOD_3 ( METHOD_4 ( STRING_1 . METHOD_5 ( STRING_2 ) ) ) . METHOD_6 ( STRING_3 ) ) (  server . METHOD_7 ( ) )  server . METHOD_7 ( ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_2 ) ( server . METHOD_8 ( STRING_4 ) . METHOD_9 ( ) ) ) ) INIT = ( ( TYPE_2 ) ( server . METHOD_8 ( STRING_4 ) . METHOD_9 ( ) ) ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  assertEquals ( INT_1 , VAR_1 . METHOD_10 ( ) ) )  assertEquals ( INT_1 , VAR_1 . METHOD_10 ( ) ) ) BLOCK BLOCK ( FINALLY FINALLY (  VAR_1 . METHOD_11 ( ) )  VAR_1 . METHOD_11 ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME packageName ) NAME packageName ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( VAR_2 , new TYPE_2 ( STRING_1 ) , VAR_3 , new TYPE_2 ( STRING_2 ) , VAR_4 ) { public java.lang.String METHOD_2 ( ) { return packageName ; } protected void METHOD_3 ( ) { } } ) INIT = new TYPE_1 ( VAR_2 , new TYPE_2 ( STRING_1 ) , VAR_3 , new TYPE_2 ( STRING_2 ) , VAR_4 ) { public java.lang.String METHOD_2 ( ) { return packageName ; } protected void METHOD_3 ( ) { } } ) VAR VAR ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_2 ) NAME METHOD_2 ( BLOCK BLOCK (  return packageName ; )  return packageName ; ) BLOCK BLOCK ) METHOD METHOD ( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_3 ) NAME METHOD_3 ( BLOCK BLOCK ) BLOCK BLOCK ) METHOD METHOD (  VAR_1 . METHOD_4 ( VAR_5 , new TYPE_2 ( STRING_3 ) , STRING_4 ) )  VAR_1 . METHOD_4 ( VAR_5 , new TYPE_2 ( STRING_3 ) , STRING_4 ) (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( VAR_2 , VAR_3 ) ) INIT = TYPE_2 . METHOD_2 ( VAR_2 , VAR_3 ) ) VAR VAR ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.String> ) TYPE java.util.Map<java.lang.String,java.lang.String> ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_1 . METHOD_3 ( ) ) INIT = VAR_1 . METHOD_3 ( ) ) VAR VAR (  assertEquals ( 3 , VAR_4 . size ( ) ) )  assertEquals ( 3 , VAR_4 . size ( ) ) (  assertEquals ( STRING_1 , VAR_4 . get ( STRING_2 ) ) )  assertEquals ( STRING_1 , VAR_4 . get ( STRING_2 ) ) (  assertEquals ( STRING_3 , VAR_4 . get ( STRING_4 ) ) )  assertEquals ( STRING_3 , VAR_4 . get ( STRING_4 ) ) (  assertEquals ( STRING_5 , VAR_4 . get ( STRING_6 ) ) )  assertEquals ( STRING_5 , VAR_4 . get ( STRING_6 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN java.util.Set<java.lang.Integer> ) RETURN java.util.Set<java.lang.Integer> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.util.List<java.lang.String>> ) TYPE java.util.List<java.util.List<java.lang.String>> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( ) ) INIT = TYPE_1 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE java.util.Set<java.lang.Integer> ) TYPE java.util.Set<java.lang.Integer> ( NAME retval ) NAME retval ( INIT = new TYPE_2 < java.lang.Integer > ( ) ) INIT = new TYPE_2 < java.lang.Integer > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME i ) NAME i ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = java.lang.Integer . METHOD_3 ( i . get ( 2 ) ) ) INIT = java.lang.Integer . METHOD_3 ( i . get ( 2 ) ) ) VAR VAR ( IF IF ( COND VAR_2 != 0 ) COND VAR_2 != 0 ( THEN THEN (  retval . METHOD_4 ( VAR_2 ) )  retval . METHOD_4 ( VAR_2 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return retval ; )  return retval ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME v ) NAME v ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND TYPE_2 . METHOD_2 ( ) ) COND TYPE_2 . METHOD_2 ( ) ( THEN THEN (  VAR_1 . METHOD_1 ( new TYPE_1 ( v . x , v . y , VAR_2 , v . w ) ) )  VAR_1 . METHOD_1 ( new TYPE_1 ( v . x , v . y , VAR_2 , v . w ) ) (  return ; )  return ; ) THEN THEN ) IF IF (  METHOD_1 ( v . x ) )  METHOD_1 ( v . x ) (  METHOD_1 ( v . y ) )  METHOD_1 ( v . y ) (  METHOD_1 ( VAR_2 ) )  METHOD_1 ( VAR_2 ) (  METHOD_1 ( v . w ) )  METHOD_1 ( v . w ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  TYPE_1 . d ( VAR_3 . TAG , ( ( VAR_1 ? STRING_1 : STRING_2 ) + STRING_3 ) ) )  TYPE_1 . d ( VAR_3 . TAG , ( ( VAR_1 ? STRING_1 : STRING_2 ) + STRING_3 ) ) ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_4 ) != null ) COND ( VAR_4 ) != null ( THEN THEN (  VAR_4 . METHOD_2 ( VAR_1 ) )  VAR_4 . METHOD_2 ( VAR_1 ) ) THEN THEN ) IF IF ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  METHOD_3 ( true ) )  METHOD_3 ( true ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN long ) RETURN long ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME pm ) NAME pm ( INIT = TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) ) INIT = TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ( INIT = pm . METHOD_4 ( TYPE_2 . METHOD_2 ( ) . METHOD_5 ( ) , 0 ) ) INIT = pm . METHOD_4 ( TYPE_2 . METHOD_2 ( ) . METHOD_5 ( ) , 0 ) ) VAR VAR (  return ( VAR_2 ) ^ ( ( ( long ) ( VAR_3 ) ) < < INT_1 ) ; )  return ( VAR_2 ) ^ ( ( ( long ) ( VAR_3 ) ) < < INT_1 ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new java.lang.RuntimeException ( e ) ; )  throw new java.lang.RuntimeException ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME log ) NAME log ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( IN VAR_3 ) IN VAR_3 ( BLOCK BLOCK ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME f ) NAME f ( INIT = new java.io.File ( VAR_1 , VAR_2 ) ) INIT = new java.io.File ( VAR_1 , VAR_2 ) ) VAR VAR ( IF IF ( COND ! ( f . METHOD_2 ( ) ) ) COND ! ( f . METHOD_2 ( ) ) ( THEN THEN (  log . METHOD_3 ( null , STRING_1 , VAR_1 . getName ( ) , VAR_2 ) )  log . METHOD_3 ( null , STRING_1 , VAR_1 . getName ( ) , VAR_2 ) (  return false ; )  return false ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . toString ( ) ) INIT = VAR_2 . toString ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_3 = TYPE_1 . METHOD_2 ( VAR_1 ) )  VAR_3 = TYPE_1 . METHOD_2 ( VAR_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME e ) NAME e ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  VAR_3 = TYPE_1 . METHOD_2 ( VAR_1 , VAR_4 ) )  VAR_3 = TYPE_1 . METHOD_2 ( VAR_1 , VAR_4 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_5 ) NAME VAR_5 ( BLOCK BLOCK (  VAR_3 = null )  VAR_3 = null (  return ; )  return ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  VAR_3 . METHOD_3 ( VAR_6 . METHOD_4 ( ) ) )  VAR_3 . METHOD_3 ( VAR_6 . METHOD_4 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<java.io.File> ) TYPE java.util.List<java.io.File> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_2 = new java.lang.StringBuilder ( ) )  VAR_2 = new java.lang.StringBuilder ( ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME result ) NAME result ( INIT = VAR_3 . METHOD_3 ( VAR_1 ) ) INIT = VAR_3 . METHOD_3 ( VAR_1 ) ) VAR VAR ( IF IF ( COND ( VAR_4 ) != CHAR_1 ) COND ( VAR_4 ) != CHAR_1 ( THEN THEN (  result = result . METHOD_4 ( VAR_4 , CHAR_1 ) )  result = result . METHOD_4 ( VAR_4 , CHAR_1 ) ) THEN THEN ) IF IF ( FOR-EACH FOR-EACH ( TYPE java.io.File ) TYPE java.io.File ( NAME f ) NAME f ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  METHOD_5 ( f ) )  METHOD_5 ( f ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME source ) NAME source ( INIT = new TYPE_1 ( VAR_1 , ( ( VAR_3 ) | ( VAR_4 ) ) ) ) INIT = new TYPE_1 ( VAR_1 , ( ( VAR_3 ) | ( VAR_4 ) ) ) ) VAR VAR (  source . METHOD_2 ( new TYPE_4 [ ] { TYPE_5 . METHOD_3 ( ) , TYPE_6 . METHOD_3 ( ) } ) )  source . METHOD_2 ( new TYPE_4 [ ] { TYPE_5 . METHOD_3 ( ) , TYPE_6 . METHOD_3 ( ) } ) (  source . METHOD_4 ( VAR_2 ) )  source . METHOD_4 ( VAR_2 ) (  return source ; )  return source ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public synchronized ) MODIFIER public synchronized ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME v ) NAME v ( INIT = ( ( TYPE_1 < TYPE_2 > ) ( super . METHOD_1 ( ) ) ) ) INIT = ( ( TYPE_1 < TYPE_2 > ) ( super . METHOD_1 ( ) ) ) ) VAR VAR (  VAR_1 = TYPE_3 . METHOD_2 ( VAR_2 , VAR_3 ) )  VAR_1 = TYPE_3 . METHOD_2 ( VAR_2 , VAR_3 ) (  VAR_4 = 0 )  VAR_4 = 0 (  return v ; )  return v ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_5 ( ) ; )  throw new TYPE_5 ( ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME key ) NAME key ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  return ( VAR_2 . METHOD_2 ( VAR_1 , key ) ) == ( VAR_3 ) ; )  return ( VAR_2 . METHOD_2 ( VAR_1 , key ) ) == ( VAR_3 ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME e ) NAME e ( BLOCK BLOCK (  android.util.Log.w ( VAR_4 . TAG , STRING_1 , e ) )  android.util.Log.w ( VAR_4 . TAG , STRING_1 , e ) (  return false ; )  return false ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_2 instanceof TYPE_3 ) COND VAR_2 instanceof TYPE_3 ( THEN THEN ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( INIT = ( ( TYPE_3 ) ( VAR_2 ) ) ) INIT = ( ( TYPE_3 ) ( VAR_2 ) ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_4 . METHOD_3 ( ) ) INIT = VAR_4 . METHOD_3 ( ) ) VAR VAR (  return TYPE_4 . METHOD_4 ( VAR_1 , VAR_5 ) ; )  return TYPE_4 . METHOD_4 ( VAR_1 , VAR_5 ) ; ) THEN THEN ) IF IF (  return STRING_1 ; )  return STRING_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME offset ) NAME offset ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME length ) NAME length ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < length ) COND i < length ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK (  assertEquals ( VAR_1 . get ( i ) , VAR_2 [ ( offset + i ) ] ) )  assertEquals ( VAR_1 . get ( i ) , VAR_2 [ ( offset + i ) ] ) ) BLOCK BLOCK ) FOR FOR ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 ) INIT = VAR_4 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_5 ) NAME VAR_5 ( INIT = ( ( int ) ( TYPE_2 . METHOD_2 ( VAR_6 . METHOD_3 ( ) ) ) ) ) INIT = ( ( int ) ( TYPE_2 . METHOD_2 ( VAR_6 . METHOD_3 ( ) ) ) ) ) VAR VAR ( IF IF ( COND VAR_7 . METHOD_4 ( ) ) COND VAR_7 . METHOD_4 ( ) ( THEN THEN (  METHOD_5 ( VAR_3 , VAR_2 , VAR_5 ) )  METHOD_5 ( VAR_3 , VAR_2 , VAR_5 ) ) THEN THEN ( ELSE ELSE (  METHOD_6 ( VAR_4 , VAR_2 ) )  METHOD_6 ( VAR_4 , VAR_2 ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME provider ) NAME provider ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME key ) NAME key ( INIT = new TYPE_2 ( VAR_1 , STRING_1 ) ) INIT = new TYPE_2 ( VAR_1 , STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME c ) NAME c ( INIT = TYPE_3 . METHOD_2 ( STRING_2 , provider ) ) INIT = TYPE_3 . METHOD_2 ( STRING_2 , provider ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_5 ( VAR_3 ) ) INIT = new TYPE_5 ( VAR_3 ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  c . METHOD_3 ( VAR_4 , key , VAR_2 ) )  c . METHOD_3 ( VAR_4 , key , VAR_2 ) (  fail ( ( STRING_3 + provider ) ) )  fail ( ( STRING_3 + provider ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME expected ) NAME expected ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME version ) NAME version ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME d ) NAME d ( INIT = TYPE_5 . METHOD_2 ( version , VAR_1 , VAR_2 ) . METHOD_3 ( ) ) INIT = TYPE_5 . METHOD_2 ( version , VAR_1 , VAR_2 ) . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME r ) NAME r ( INIT = new TYPE_6 ( d , VAR_3 ) ) INIT = new TYPE_6 ( d , VAR_3 ) ) VAR VAR (  VAR_4 . METHOD_4 ( d . METHOD_5 ( ) , r ) )  VAR_4 . METHOD_4 ( d . METHOD_5 ( ) , r ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME session ) NAME session ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_5 ) NAME VAR_5 ( INIT = TYPE_4 . METHOD_2 ( ) ) INIT = TYPE_4 . METHOD_2 ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  VAR_6 )  VAR_6 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME w ) NAME w ( INIT = METHOD_3 ( session , VAR_1 ) ) INIT = METHOD_3 ( session , VAR_1 ) ) VAR VAR ( IF IF ( COND w != null ) COND w != null ( THEN THEN (  VAR_7 = false )  VAR_7 = false (  VAR_8 . set ( VAR_3 ) )  VAR_8 . set ( VAR_3 ) (  VAR_9 . set ( VAR_4 ) )  VAR_9 . set ( VAR_4 ) (  VAR_10 = VAR_2 )  VAR_10 = VAR_2 (  VAR_11 = true )  VAR_11 = true (  METHOD_4 ( ) )  METHOD_4 ( ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ( FINALLY FINALLY (  TYPE_4 . METHOD_5 ( VAR_5 ) )  TYPE_4 . METHOD_5 ( VAR_5 ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( false ) )  when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( false ) (  when ( VAR_2 . METHOD_2 ( ) ) . thenReturn ( false ) )  when ( VAR_2 . METHOD_2 ( ) ) . thenReturn ( false ) (  VAR_3 . METHOD_3 ( ) )  VAR_3 . METHOD_3 ( ) (  verify ( VAR_1 , METHOD_4 ( ) ) . METHOD_5 ( ) )  verify ( VAR_1 , METHOD_4 ( ) ) . METHOD_5 ( ) (  verify ( VAR_2 , METHOD_4 ( ) ) . METHOD_5 ( ) )  verify ( VAR_2 , METHOD_4 ( ) ) . METHOD_5 ( ) (  assertTrue ( VAR_3 . METHOD_6 ( ) . METHOD_7 ( ) ) )  assertTrue ( VAR_3 . METHOD_6 ( ) . METHOD_7 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1<TYPE_2> ) RETURN TYPE_1<TYPE_2> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME v ) NAME v ( INIT = new TYPE_1 < TYPE_2 > ( ) ) INIT = new TYPE_1 < TYPE_2 > ( ) ) VAR VAR (  v . METHOD_2 ( new TYPE_2 ( 0 , 3 , VAR_1 ) ) )  v . METHOD_2 ( new TYPE_2 ( 0 , 3 , VAR_1 ) ) (  v . METHOD_2 ( new TYPE_2 ( 3 , 4 , VAR_2 ) ) )  v . METHOD_2 ( new TYPE_2 ( 3 , 4 , VAR_2 ) ) (  v . METHOD_2 ( new TYPE_2 ( 4 , 6 , VAR_3 ) ) )  v . METHOD_2 ( new TYPE_2 ( 4 , 6 , VAR_3 ) ) (  v . METHOD_2 ( new TYPE_2 ( 7 , 9 , VAR_4 ) ) )  v . METHOD_2 ( new TYPE_2 ( 7 , 9 , VAR_4 ) ) (  return v ; )  return v ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME format ) NAME format ( INIT = TYPE_1 . METHOD_2 ( VAR_1 , VAR_1 , VAR_2 ) ) INIT = TYPE_1 . METHOD_2 ( VAR_1 , VAR_1 , VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( INIT = format . format ( VAR_3 ) ) INIT = format . format ( VAR_3 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_5 ) NAME VAR_5 ( INIT = new TYPE_3 ( STRING_1 ) ) INIT = new TYPE_3 ( STRING_1 ) ) VAR VAR (  assertTrue ( STRING_2 , VAR_5 . format ( VAR_3 ) . equals ( VAR_4 ) ) )  assertTrue ( STRING_2 , VAR_5 . format ( VAR_3 ) . equals ( VAR_4 ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ( BLOCK BLOCK (  fail ( ( STRING_3 + ( e.toString ( ) ) ) ) )  fail ( ( STRING_3 + ( e.toString ( ) ) ) ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) && ( ( METHOD_2 ( ) . VAR_2 ) > 0 ) ) COND ( VAR_1 ) && ( ( METHOD_2 ( ) . VAR_2 ) > 0 ) ( THEN THEN (  VAR_1 = false )  VAR_1 = false ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 . METHOD_3 ( ) . METHOD_4 ( ) ) INIT = VAR_4 . METHOD_3 ( ) . METHOD_4 ( ) ) VAR VAR ( IF IF ( COND VAR_3 . METHOD_5 ( ) ) COND VAR_3 . METHOD_5 ( ) ( THEN THEN (  METHOD_6 ( true , true ) )  METHOD_6 ( true , true ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 < 0 ) COND VAR_1 < 0 ( THEN THEN (  throw new TYPE_1 ( this , VAR_1 ) ; )  throw new TYPE_1 ( this , VAR_1 ) ; ) THEN THEN ) IF IF ( IF IF ( COND VAR_2 > ( count ) ) COND VAR_2 > ( count ) ( THEN THEN (  throw new TYPE_1 ( this , VAR_2 ) ; )  throw new TYPE_1 ( this , VAR_2 ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_2 - VAR_1 ) INIT = VAR_2 - VAR_1 ) VAR VAR ( IF IF ( COND VAR_3 < 0 ) COND VAR_3 < 0 ( THEN THEN (  throw new TYPE_1 ( VAR_3 ) ; )  throw new TYPE_1 ( VAR_3 ) ; ) THEN THEN ) IF IF (  return ( VAR_1 == 0 ) && ( VAR_2 == ( count ) ) ? this : METHOD_2 ( VAR_1 , VAR_3 ) ; )  return ( VAR_1 == 0 ) && ( VAR_2 == ( count ) ) ? this : METHOD_2 ( VAR_1 , VAR_3 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_2 ( VAR_2 , VAR_3 , true ) ) INIT = METHOD_2 ( VAR_2 , VAR_3 , true ) ) VAR VAR ( IF IF ( COND ( VAR_4 & ( VAR_5 ) ) != 0 ) COND ( VAR_4 & ( VAR_5 ) ) != 0 ( THEN THEN ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_6 ) NAME VAR_6 ( INIT = METHOD_3 ( VAR_1 , VAR_2 , VAR_3 ) ) INIT = METHOD_3 ( VAR_1 , VAR_2 , VAR_3 ) ) VAR VAR ( IF IF ( COND VAR_6 == 0 ) COND VAR_6 == 0 ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE char[][] ) TYPE char[][] ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < ( VAR_1 . length ) ) COND i < ( VAR_1 . length ) ( UPDATE UPDATE (  ++ i )  ++ i ) UPDATE UPDATE ( BLOCK BLOCK (  VAR_1 [ i ] = new char [ INT_1 * INT_2 ] )  VAR_1 [ i ] = new char [ INT_1 * INT_2 ] ) BLOCK BLOCK ) FOR FOR ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( BLOCK BLOCK (  VAR_3 = true )  VAR_3 = true ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_2 . METHOD_2 ( VAR_2 ) )  TYPE_2 . METHOD_2 ( VAR_2 ) ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 ) INIT = VAR_4 ) VAR VAR ( IF IF ( COND VAR_5 . METHOD_3 ( VAR_1 ) ) COND VAR_5 . METHOD_3 ( VAR_1 ) ( THEN THEN (  METHOD_4 ( VAR_3 , VAR_6 ) )  METHOD_4 ( VAR_3 , VAR_6 ) (  return ; )  return ; ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_5 . size ( ) ) >= ( METHOD_5 ( ) ) ) COND ( VAR_5 . size ( ) ) >= ( METHOD_5 ( ) ) ( THEN THEN (  METHOD_4 ( VAR_3 , VAR_7 ) )  METHOD_4 ( VAR_3 , VAR_7 ) (  return ; )  return ; ) THEN THEN ) IF IF ( IF IF ( COND ! ( VAR_8 . METHOD_6 ( VAR_1 ) ) ) COND ! ( VAR_8 . METHOD_6 ( VAR_1 ) ) ( THEN THEN (  METHOD_4 ( VAR_3 , VAR_9 ) )  METHOD_4 ( VAR_3 , VAR_9 ) (  return ; )  return ; ) THEN THEN ) IF IF (  VAR_5 . METHOD_7 ( VAR_1 ) )  VAR_5 . METHOD_7 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME res ) NAME res ( INIT = VAR_3 ) INIT = VAR_3 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ( INIT = res . METHOD_2 ( ) . VAR_4 ) INIT = res . METHOD_2 ( ) . VAR_4 ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  METHOD_3 ( res , VAR_4 , VAR_1 , VAR_2 ) )  METHOD_3 ( res , VAR_4 , VAR_1 , VAR_2 ) ) BLOCK BLOCK ( FINALLY FINALLY (  TYPE_3 . METHOD_4 ( res , VAR_4 ) )  TYPE_3 . METHOD_4 ( res , VAR_4 ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = null ) INIT = null ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_3> ) TYPE java.util.List<TYPE_3> ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_4 . METHOD_2 ( VAR_1 ) ) INIT = TYPE_4 . METHOD_2 ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_6 . METHOD_3 ( ) ) INIT = TYPE_6 . METHOD_3 ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME path ) NAME path ( IN VAR_3 ) IN VAR_3 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_7 ) TYPE TYPE_7 ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_4 . METHOD_4 ( ) . METHOD_5 ( path ) ) INIT = VAR_4 . METHOD_4 ( ) . METHOD_5 ( path ) ) VAR VAR ( IF IF ( COND VAR_5 != null ) COND VAR_5 != null ( THEN THEN (  VAR_2 = VAR_1 . METHOD_6 ( VAR_5 ) )  VAR_2 = VAR_1 . METHOD_6 ( VAR_5 ) ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN (  break ; )  break ; ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_1 ( VAR_1 ) )  METHOD_1 ( VAR_1 ) ( IF IF ( COND ! ( VAR_2 . METHOD_2 ( VAR_4 ) ) ) COND ! ( VAR_2 . METHOD_2 ( VAR_4 ) ) ( THEN THEN (  METHOD_3 ( VAR_1 ) )  METHOD_3 ( VAR_1 ) ) THEN THEN ) IF IF (  METHOD_4 ( VAR_1 , VAR_2 ) )  METHOD_4 ( VAR_1 , VAR_2 ) (  METHOD_5 ( VAR_1 , VAR_3 ) )  METHOD_5 ( VAR_1 , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN java.util.List<TYPE_1<?superTYPE_2>> ) RETURN java.util.List<TYPE_1<?superTYPE_2>> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<TYPE_1<?superTYPE_2>> ) TYPE java.util.ArrayList<TYPE_1<?superTYPE_2>> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.ArrayList ( VAR_1 . length ) ) INIT = new java.util.ArrayList ( VAR_1 . length ) ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < ( VAR_1 . length ) ) COND i < ( VAR_1 . length ) ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK (  VAR_2 . METHOD_2 ( VAR_1 [ i ] . VAR_3 ) )  VAR_2 . METHOD_2 ( VAR_1 [ i ] . VAR_3 ) ) BLOCK BLOCK ) FOR FOR (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN byte[] ) RETURN byte[] ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  return VAR_3 . METHOD_2 ( VAR_2 ) ; )  return VAR_3 . METHOD_2 ( VAR_2 ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_2 ( ( STRING_1 + ( e . METHOD_3 ( ) ) ) ) ; )  throw new TYPE_2 ( ( STRING_1 + ( e . METHOD_3 ( ) ) ) ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND METHOD_2 ( ) ) COND METHOD_2 ( ) ( THEN THEN ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  android.util.Log.d ( VAR_2 . TAG , STRING_1 ) )  android.util.Log.d ( VAR_2 . TAG , STRING_1 ) ) THEN THEN ) IF IF (  return true ; )  return true ; ) THEN THEN ) IF IF ( TRY TRY ( BLOCK BLOCK (  return VAR_3 . METHOD_1 ( TYPE_1 . METHOD_3 ( ) ) ; )  return VAR_3 . METHOD_1 ( TYPE_1 . METHOD_3 ( ) ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME e ) NAME e ( BLOCK BLOCK (  android.util.Log.e ( VAR_2 . TAG , STRING_2 , e ) )  android.util.Log.e ( VAR_2 . TAG , STRING_2 , e ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_4 ( ) ) )  TYPE_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_4 ( ) ) (  VAR_1 . METHOD_5 ( TYPE_1 . METHOD_6 ( ) ) )  VAR_1 . METHOD_5 ( TYPE_1 . METHOD_6 ( ) ) (  VAR_1 . METHOD_7 ( TYPE_1 . METHOD_4 ( ) ) )  VAR_1 . METHOD_7 ( TYPE_1 . METHOD_4 ( ) ) (  METHOD_8 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_4 ( ) ) )  METHOD_8 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_4 ( ) ) (  METHOD_9 ( TYPE_1 . METHOD_6 ( ) , TYPE_1 . METHOD_10 ( ) ) )  METHOD_9 ( TYPE_1 . METHOD_6 ( ) , TYPE_1 . METHOD_10 ( ) ) (  METHOD_11 ( TYPE_1 . METHOD_10 ( ) ) )  METHOD_11 ( TYPE_1 . METHOD_10 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME context ) NAME context ) VAR VAR ( VAR VAR ( TYPE android.content.Intent ) TYPE android.content.Intent ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME action ) NAME action ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND action . equals ( VAR_2 ) ) COND action . equals ( VAR_2 ) ( THEN THEN (  METHOD_3 ( ) )  METHOD_3 ( ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND ( action . equals ( VAR_3 ) ) || ( action . equals ( VAR_4 ) ) ) COND ( action . equals ( VAR_3 ) ) || ( action . equals ( VAR_4 ) ) ( THEN THEN (  METHOD_4 ( ) )  METHOD_4 ( ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND action . equals ( VAR_5 ) ) COND action . equals ( VAR_5 ) ( THEN THEN (  METHOD_5 ( VAR_1 ) )  METHOD_5 ( VAR_1 ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND action . equals ( VAR_6 ) ) COND action . equals ( VAR_6 ) ( THEN THEN (  METHOD_6 ( VAR_1 ) )  METHOD_6 ( VAR_1 ) ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_3 . start ( VAR_1 , new TYPE_4 ( VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) , VAR_3 ) . METHOD_4 ( TYPE_5 . METHOD_5 ( VAR_2 . METHOD_6 ( ) , VAR_2 . METHOD_7 ( ) ) ) . METHOD_8 ( ( ( ( VAR_2 . METHOD_9 ( ) ) & ( VAR_4 ) ) == ( VAR_4 ) ) ) ) )  TYPE_3 . start ( VAR_1 , new TYPE_4 ( VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) , VAR_3 ) . METHOD_4 ( TYPE_5 . METHOD_5 ( VAR_2 . METHOD_6 ( ) , VAR_2 . METHOD_7 ( ) ) ) . METHOD_8 ( ( ( ( VAR_2 . METHOD_9 ( ) ) & ( VAR_4 ) ) == ( VAR_4 ) ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( VAR_1 ) ) INIT = METHOD_2 ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ( INIT = false ) INIT = false ) VAR VAR ( IF IF ( COND METHOD_3 ( VAR_2 ) ) COND METHOD_3 ( VAR_2 ) ( THEN THEN ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_5 . METHOD_4 ( ) ) INIT = VAR_5 . METHOD_4 ( ) ) VAR VAR (  VAR_4 = METHOD_5 ( VAR_4 , VAR_6 ) )  VAR_4 = METHOD_5 ( VAR_4 , VAR_6 ) ( TRY TRY ( BLOCK BLOCK (  VAR_7 = java.lang.Integer . METHOD_6 ( VAR_4 , VAR_1 ) )  VAR_7 = java.lang.Integer . METHOD_6 ( VAR_4 , VAR_1 ) (  VAR_3 = true )  VAR_3 = true ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_8 = false )  VAR_8 = false ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) THEN THEN ) IF IF (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( STRING_1 ) ) INIT = TYPE_1 . METHOD_2 ( STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE android.content.Intent ) TYPE android.content.Intent ( NAME VAR_2 ) NAME VAR_2 ( INIT = new android.content.Intent ( VAR_3 , VAR_1 ) ) INIT = new android.content.Intent ( VAR_3 , VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME result ) NAME result ( INIT = METHOD_3 ( VAR_2 , true ) ) INIT = METHOD_3 ( VAR_2 , true ) ) VAR VAR (  assertEquals ( VAR_4 , result ) )  assertEquals ( VAR_4 , result ) (  METHOD_4 ( ) )  METHOD_4 ( ) (  METHOD_5 ( ) )  METHOD_5 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( METHOD_2 ( ) ) ) COND ! ( METHOD_2 ( ) ) ( THEN THEN (  TYPE_3 . METHOD_3 ( VAR_3 ) )  TYPE_3 . METHOD_3 ( VAR_3 ) (  return ; )  return ; ) THEN THEN ) IF IF ( TRY TRY ( BLOCK BLOCK (  METHOD_4 ( ) . METHOD_1 ( VAR_1 , VAR_2 , mContext . METHOD_5 ( ) , VAR_3 ) )  METHOD_4 ( ) . METHOD_1 ( VAR_1 , VAR_2 , mContext . METHOD_5 ( ) , VAR_3 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME e ) NAME e ( BLOCK BLOCK (  throw e . METHOD_6 ( ) ; )  throw e . METHOD_6 ( ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_3 ) == VAR_1 ) COND ( VAR_3 ) == VAR_1 ( THEN THEN (  VAR_3 = ( ( TYPE_3 ) ( VAR_2 ) ) )  VAR_3 = ( ( TYPE_3 ) ( VAR_2 ) ) (  return ; )  return ; ) THEN THEN ) IF IF ( FOR-EACH FOR-EACH ( TYPE TYPE_4<TYPE_5,TYPE_6> ) TYPE TYPE_4<TYPE_5,TYPE_6> ( NAME VAR_4 ) NAME VAR_4 ( IN VAR_5 . METHOD_2 ( ) ) IN VAR_5 . METHOD_2 ( ) ( BLOCK BLOCK ( IF IF ( COND ( VAR_4 . METHOD_3 ( ) ) == VAR_1 ) COND ( VAR_4 . METHOD_3 ( ) ) == VAR_1 ( THEN THEN (  VAR_5 . METHOD_4 ( VAR_4 . METHOD_5 ( ) , ( ( TYPE_6 ) ( VAR_2 ) ) ) )  VAR_5 . METHOD_4 ( VAR_4 . METHOD_5 ( ) , ( ( TYPE_6 ) ( VAR_2 ) ) ) (  return ; )  return ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  super . METHOD_1 ( VAR_1 , VAR_2 ) )  super . METHOD_1 ( VAR_1 , VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_6 ) NAME VAR_6 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_7 ) NAME VAR_7 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_8 ) NAME VAR_8 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 , INT_1 , VAR_9 , VAR_9 , VAR_9 , VAR_9 , 0 , VAR_8 ) )  METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 , INT_1 , VAR_9 , VAR_9 , VAR_9 , VAR_9 , 0 , VAR_8 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME test ) NAME test ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME result ) NAME result ( INIT = new java.util.ArrayList ( TYPE_1 . METHOD_1 ( ) . VAR_1 ) ) INIT = new java.util.ArrayList ( TYPE_1 . METHOD_1 ( ) . VAR_1 ) ) VAR VAR ( IF IF ( COND ( result . size ( ) ) == 0 ) COND ( result . size ( ) ) == 0 ( THEN THEN (  status = VAR_2 )  status = VAR_2 ) THEN THEN ( ELSE ELSE (  METHOD_2 ( ) )  METHOD_2 ( ) (  status = VAR_3 )  status = VAR_3 ) ELSE ELSE ) IF IF (  METHOD_3 ( ) )  METHOD_3 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<android.bluetooth.BluetoothDevice> ) RETURN java.util.List<android.bluetooth.BluetoothDevice> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  android.util.Log.v ( TYPE_1 . TAG , STRING_1 ) )  android.util.Log.v ( TYPE_1 . TAG , STRING_1 ) ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME service ) NAME service ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( IF IF ( COND service == null ) COND service == null ( THEN THEN (  return new java.util.ArrayList < android.bluetooth.BluetoothDevice > ( 0 ) ; )  return new java.util.ArrayList < android.bluetooth.BluetoothDevice > ( 0 ) ; ) THEN THEN ) IF IF (  return service . METHOD_1 ( ) ; )  return service . METHOD_1 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<TYPE_2> ) RETURN TYPE_1<TYPE_2> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME context ) NAME context ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = this . VAR_2 . METHOD_2 ( context , value ) ) INIT = this . VAR_2 . METHOD_2 ( context , value ) ) VAR VAR ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN (  return new TYPE_5 < TYPE_2 > ( VAR_1 ) ; )  return new TYPE_5 < TYPE_2 > ( VAR_1 ) ; ) THEN THEN ( ELSE ELSE (  return new TYPE_6 ( value ) ; )  return new TYPE_6 ( value ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_2 . METHOD_2 ( ) )  TYPE_2 . METHOD_2 ( ) (  TYPE_3 . METHOD_3 ( STRING_1 ) )  TYPE_3 . METHOD_3 ( STRING_1 ) ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_5 . METHOD_4 ( VAR_1 ) ) INIT = TYPE_5 . METHOD_4 ( VAR_1 ) ) VAR VAR (  VAR_2 . METHOD_5 ( ) . METHOD_6 ( VAR_3 , true ) . METHOD_7 ( ) )  VAR_2 . METHOD_5 ( ) . METHOD_6 ( VAR_3 , true ) . METHOD_7 ( ) ( IF IF ( COND ( VAR_4 ) != null ) COND ( VAR_4 ) != null ( THEN THEN (  VAR_4 . METHOD_8 ( ) )  VAR_4 . METHOD_8 ( ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Throwable ) TYPE java.lang.Throwable ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Throwable ) TYPE java.lang.Throwable ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_2 == VAR_1 ) COND VAR_2 == VAR_1 ( THEN THEN (  throw new java.lang.IllegalArgumentException ( STRING_1 , VAR_2 ) ; )  throw new java.lang.IllegalArgumentException ( STRING_1 , VAR_2 ) ; ) THEN THEN ) IF IF ( IF IF ( COND VAR_2 == null ) COND VAR_2 == null ( THEN THEN (  throw new java.lang.NullPointerException ( STRING_2 ) ; )  throw new java.lang.NullPointerException ( STRING_2 ) ; ) THEN THEN ) IF IF ( SYNCHRONIZED SYNCHRONIZED (  this )  this ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.lang.Throwable> ) TYPE java.util.List<java.lang.Throwable> ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 . get ( VAR_1 ) ) INIT = VAR_4 . get ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_3 == null ) COND VAR_3 == null ( THEN THEN (  VAR_3 = new java.util.ArrayList < > ( 1 ) )  VAR_3 = new java.util.ArrayList < > ( 1 ) (  VAR_4 . METHOD_2 ( VAR_1 , VAR_3 ) )  VAR_4 . METHOD_2 ( VAR_1 , VAR_3 ) ) THEN THEN ) IF IF (  VAR_3 . METHOD_3 ( VAR_2 ) )  VAR_3 . METHOD_3 ( VAR_2 ) ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME get ) NAME get ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  throw new java.lang.NullPointerException ( STRING_1 ) ; )  throw new java.lang.NullPointerException ( STRING_1 ) ; ) THEN THEN ) IF IF (  METHOD_1 ( ) )  METHOD_1 ( ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME type ) NAME type ( INIT = ( ( TYPE_4 ) ( VAR_1 ) ) . METHOD_2 ( ) ) INIT = ( ( TYPE_4 ) ( VAR_1 ) ) . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ( INIT = VAR_2 . get ( type ) ) INIT = VAR_2 . get ( type ) ) VAR VAR ( IF IF ( COND result == null ) COND result == null ( THEN THEN (  throw new java.lang.IllegalArgumentException ( ( STRING_2 + VAR_1 ) ) ; )  throw new java.lang.IllegalArgumentException ( ( STRING_2 + VAR_1 ) ) ; ) THEN THEN ) IF IF (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . set ( 0 ) )  VAR_1 . set ( 0 ) (  VAR_2 . METHOD_2 ( ) )  VAR_2 . METHOD_2 ( ) ( IF IF ( COND ( VAR_3 ) != 0 ) COND ( VAR_3 ) != 0 ( THEN THEN ( VAR VAR ( TYPE int[] ) TYPE int[] ( NAME VAR_4 ) NAME VAR_4 ( INIT = new int [ ] { VAR_3 } ) INIT = new int [ ] { VAR_3 } ) VAR VAR (  TYPE_1 . METHOD_3 ( 1 , VAR_4 , 0 ) )  TYPE_1 . METHOD_3 ( 1 , VAR_4 , 0 ) ) THEN THEN ) IF IF (  TYPE_1 . METHOD_4 ( ) )  TYPE_1 . METHOD_4 ( ) ( IF IF ( COND ( VAR_5 ) != null ) COND ( VAR_5 ) != null ( THEN THEN (  VAR_5 . METHOD_5 ( ) )  VAR_5 . METHOD_5 ( ) (  VAR_5 = null )  VAR_5 = null ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_6 ) != null ) COND ( VAR_6 ) != null ( THEN THEN (  VAR_6 . METHOD_5 ( ) )  VAR_6 . METHOD_5 ( ) (  VAR_6 = null )  VAR_6 = null ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME expected ) NAME expected ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME result ) NAME result ( INIT = TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_1 ) ) ) INIT = TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_1 ) ) ) VAR VAR (  java.lang.System.out.println ( ( STRING_1 + ( expected . length ) ) ) )  java.lang.System.out.println ( ( STRING_1 + ( expected . length ) ) ) ( IF IF ( COND ( expected . length ) == 0 ) COND ( expected . length ) == 0 ( THEN THEN (  METHOD_4 ( result ) )  METHOD_4 ( result ) ) THEN THEN ( ELSE ELSE (  assertNotNull ( VAR_1 , result ) )  assertNotNull ( VAR_1 , result ) (  assertEquals ( VAR_1 , TYPE_3 . METHOD_5 ( expected ) , TYPE_3 . METHOD_5 ( result ) ) )  assertEquals ( VAR_1 , TYPE_3 . METHOD_5 ( expected ) , TYPE_3 . METHOD_5 ( result ) ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( new TYPE_2 ( STRING_1 ) , TYPE_3 . METHOD_2 ( ) . METHOD_3 ( ) , TYPE_4 . of ( ) , TYPE_4 . of ( STRING_2 ) ) ) INIT = new TYPE_1 ( new TYPE_2 ( STRING_1 ) , TYPE_3 . METHOD_2 ( ) . METHOD_3 ( ) , TYPE_4 . of ( ) , TYPE_4 . of ( STRING_2 ) ) ) VAR VAR (  TYPE_5 . METHOD_4 ( VAR_1 . METHOD_5 ( VAR_2 , STRING_2 , STRING_3 , STRING_4 , true ) ) . METHOD_6 ( ) )  TYPE_5 . METHOD_4 ( VAR_1 . METHOD_5 ( VAR_2 , STRING_2 , STRING_3 , STRING_4 , true ) ) . METHOD_6 ( ) (  TYPE_5 . METHOD_4 ( VAR_1 . METHOD_5 ( VAR_3 , STRING_5 , STRING_3 , STRING_4 , false ) ) . METHOD_6 ( ) )  TYPE_5 . METHOD_4 ( VAR_1 . METHOD_5 ( VAR_3 , STRING_5 , STRING_3 , STRING_4 , false ) ) . METHOD_6 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . size ( ) ) INIT = VAR_2 . size ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( null , new java.lang.Object ( ) ) )  TYPE_1 . METHOD_2 ( null , new java.lang.Object ( ) ) (  fail ( STRING_1 ) )  fail ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.NullPointerException ) TYPE java.lang.NullPointerException ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND VAR_3 < VAR_1 ) COND VAR_3 < VAR_1 ( UPDATE UPDATE (  VAR_3 ++ )  VAR_3 ++ ) UPDATE UPDATE ( BLOCK BLOCK (  assertEquals ( STRING_2 , VAR_2 . get ( VAR_3 ) , VAR_2 . get ( TYPE_1 . METHOD_2 ( VAR_2 , VAR_2 . get ( VAR_3 ) ) ) ) )  assertEquals ( STRING_2 , VAR_2 . get ( VAR_3 ) , VAR_2 . get ( TYPE_1 . METHOD_2 ( VAR_2 , VAR_2 . get ( VAR_3 ) ) ) ) ) BLOCK BLOCK ) FOR FOR ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.Set<TYPE_1> ) TYPE java.util.Set<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Class<?> ) TYPE java.lang.Class<?> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_2 . METHOD_2 ( ) ) IN VAR_2 . METHOD_2 ( ) ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_3 . METHOD_3 ( ) ) INIT = VAR_3 . METHOD_3 ( ) ) VAR VAR ( IF IF ( COND ( ! ( TYPE_2 . METHOD_4 ( VAR_4 ) ) ) && ( TYPE_2 . METHOD_5 ( VAR_4 ) ) ) COND ( ! ( TYPE_2 . METHOD_4 ( VAR_4 ) ) ) && ( TYPE_2 . METHOD_5 ( VAR_4 ) ) ( THEN THEN (  VAR_1 . METHOD_6 ( VAR_3 ) )  VAR_1 . METHOD_6 ( VAR_3 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( ) ) INIT = TYPE_1 . METHOD_2 ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 ( ( ( int ) ( FLOAT_1 * INT_1 ) ) , STRING_1 ) ) INIT = new TYPE_2 ( ( ( int ) ( FLOAT_1 * INT_1 ) ) , STRING_1 ) ) VAR VAR (  TYPE_1 . METHOD_3 ( VAR_2 ) )  TYPE_1 . METHOD_3 ( VAR_2 ) (  VAR_2 = TYPE_1 . METHOD_2 ( ) )  VAR_2 = TYPE_1 . METHOD_2 ( ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME f ) NAME f ( INIT = new TYPE_3 ( ) ) INIT = new TYPE_3 ( ) ) VAR VAR ( IF IF ( COND ! ( f . METHOD_4 ( ) . equals ( VAR_2 ) ) ) COND ! ( f . METHOD_4 ( ) . equals ( VAR_2 ) ) ( THEN THEN (  errln ( STRING_2 ) )  errln ( STRING_2 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ( FINALLY FINALLY (  TYPE_1 . METHOD_3 ( VAR_1 ) )  TYPE_1 . METHOD_3 ( VAR_1 ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME packageName ) NAME packageName ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME p ) NAME p ) VAR VAR ( SYNCHRONIZED SYNCHRONIZED (  VAR_2 )  VAR_2 ( BLOCK BLOCK (  p = VAR_2 . get ( packageName ) )  p = VAR_2 . get ( packageName ) ( IF IF ( COND p == null ) COND p == null ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  VAR_3 = TYPE_2 . METHOD_2 ( ) )  VAR_3 = TYPE_2 . METHOD_2 ( ) ) THEN THEN ) IF IF (  VAR_4 . METHOD_3 ( ) )  VAR_4 . METHOD_3 ( ) ( IF IF ( COND ! ( VAR_5 ) ) COND ! ( VAR_5 ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ( SYNCHRONIZED SYNCHRONIZED (  VAR_6 )  VAR_6 ( BLOCK BLOCK (  return ( METHOD_4 ( p , false , false , true ) ) == ( VAR_7 ) ; )  return ( METHOD_4 ( p , false , false , true ) ) == ( VAR_7 ) ; ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( VAR_2 , VAR_3 ) ) INIT = new TYPE_1 ( VAR_2 , VAR_3 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  assertTrue ( VAR_1 . METHOD_2 ( VAR_4 ) ) )  assertTrue ( VAR_1 . METHOD_2 ( VAR_4 ) ) (  assertEquals ( CHAR_1 , VAR_5 ) )  assertEquals ( CHAR_1 , VAR_5 ) (  assertEquals ( 0 , VAR_4 . number ) )  assertEquals ( 0 , VAR_4 . number ) (  assertEquals ( CHAR_2 , VAR_6 [ 0 ] ) )  assertEquals ( CHAR_2 , VAR_6 [ 0 ] ) (  assertEquals ( CHAR_1 , VAR_6 [ 1 ] ) )  assertEquals ( CHAR_1 , VAR_6 [ 1 ] ) (  assertEquals ( 0 , VAR_6 [ 2 ] ) )  assertEquals ( 0 , VAR_6 [ 2 ] ) (  assertEquals ( 0 , VAR_6 [ 3 ] ) )  assertEquals ( 0 , VAR_6 [ 3 ] ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . start ) INIT = VAR_1 . start ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_2 . start ) INIT = VAR_2 . start ) VAR VAR ( IF IF ( COND ( VAR_3 - VAR_4 ) > 0 ) COND ( VAR_3 - VAR_4 ) > 0 ( THEN THEN (  return 1 ; )  return 1 ; ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_3 - VAR_4 ) < 0 ) COND ( VAR_3 - VAR_4 ) < 0 ( THEN THEN (  return - 1 ; )  return - 1 ; ) THEN THEN ) IF IF (  return 0 ; )  return 0 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  log ( ( STRING_1 + ( VAR_2 ? STRING_2 : STRING_3 ) ) ) )  log ( ( STRING_1 + ( VAR_2 ? STRING_2 : STRING_3 ) ) ) ) THEN THEN ) IF IF (  VAR_3 . METHOD_2 ( VAR_4 ) )  VAR_3 . METHOD_2 ( VAR_4 ) (  VAR_3 . METHOD_3 ( VAR_4 ) )  VAR_3 . METHOD_3 ( VAR_4 ) (  VAR_3 . METHOD_4 ( VAR_4 ) )  VAR_3 . METHOD_4 ( VAR_4 ) (  VAR_5 . METHOD_1 ( ) )  VAR_5 . METHOD_1 ( ) (  VAR_6 . METHOD_1 ( VAR_4 ) )  VAR_6 . METHOD_1 ( VAR_4 ) (  VAR_7 . METHOD_1 ( ) )  VAR_7 . METHOD_1 ( ) (  VAR_8 . METHOD_1 ( ) )  VAR_8 . METHOD_1 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME context ) NAME context ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_3> ) TYPE java.util.List<TYPE_3> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ( INIT = false ) INIT = false ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_4 ) NAME VAR_4 ( INIT = false ) INIT = false ) VAR VAR (  VAR_2 . METHOD_2 ( new TYPE_4 ( context , TYPE_5 . METHOD_3 ( context , VAR_1 . METHOD_4 ( ) , TYPE_6 . METHOD_5 ( VAR_1 ) , VAR_3 , VAR_4 ) , VAR_5 , VAR_6 ) ) )  VAR_2 . METHOD_2 ( new TYPE_4 ( context , TYPE_5 . METHOD_3 ( context , VAR_1 . METHOD_4 ( ) , TYPE_6 . METHOD_5 ( VAR_1 ) , VAR_3 , VAR_4 ) , VAR_5 , VAR_6 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME data ) NAME data ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_3 . METHOD_2 ( VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ) INIT = TYPE_3 . METHOD_2 ( VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ) VAR VAR (  org.junit.Assert.assertEquals ( VAR_7 , TYPE_4 . METHOD_1 ( VAR_8 , VAR_2 , VAR_9 ) ) )  org.junit.Assert.assertEquals ( VAR_7 , TYPE_4 . METHOD_1 ( VAR_8 , VAR_2 , VAR_9 ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  throw new TYPE_2 ( STRING_1 ) ; )  throw new TYPE_2 ( STRING_1 ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE java.util.ArrayList<TYPE_3> ) TYPE java.util.ArrayList<TYPE_3> ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_2 ( VAR_1 , null ) ) INIT = METHOD_2 ( VAR_1 , null ) ) VAR VAR ( IF IF ( COND VAR_3 == null ) COND VAR_3 == null ( THEN THEN (  throw METHOD_3 ( this . VAR_4 , VAR_1 ) ; )  throw METHOD_3 ( this . VAR_4 , VAR_1 ) ; ) THEN THEN ) IF IF (  return new TYPE_1 ( VAR_3 . get ( 0 ) . METHOD_4 ( VAR_2 ) , VAR_3 . get ( 0 ) . METHOD_5 ( ) ) ; )  return new TYPE_1 ( VAR_3 . get ( 0 ) . METHOD_4 ( VAR_2 ) , VAR_3 . get ( 0 ) . METHOD_5 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.io.File> ) TYPE java.util.List<java.io.File> ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_3 ( VAR_1 . size ( ) ) ) INIT = TYPE_2 . METHOD_3 ( VAR_1 . size ( ) ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  VAR_2 . METHOD_4 ( new TYPE_1 ( VAR_3 ) ) )  VAR_2 . METHOD_4 ( new TYPE_1 ( VAR_3 ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( true ) )  VAR_1 . METHOD_2 ( true ) (  VAR_1 . METHOD_3 ( null ) )  VAR_1 . METHOD_3 ( null ) (  VAR_1 . METHOD_4 ( ) )  VAR_1 . METHOD_4 ( ) ( TRY TRY ( BLOCK BLOCK (  VAR_1 . METHOD_5 ( ) . METHOD_6 ( ) )  VAR_1 . METHOD_5 ( ) . METHOD_6 ( ) (  fail ( STRING_1 ) )  fail ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME expected ) NAME expected ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME context ) NAME context ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME msg ) NAME msg ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME pm ) NAME pm ( INIT = context . METHOD_2 ( ) ) INIT = context . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ( INIT = pm . METHOD_3 ( context . METHOD_4 ( ) , 0 ) ) INIT = pm . METHOD_3 ( context . METHOD_4 ( ) , 0 ) ) VAR VAR (  msg = STRING_2 )  msg = STRING_2 ( IF IF ( COND ( VAR_2 ) > 0 ) COND ( VAR_2 ) > 0 ( THEN THEN (  msg = java.lang.Integer . toString ( VAR_2 ) )  msg = java.lang.Integer . toString ( VAR_2 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME e ) NAME e ( BLOCK BLOCK (  TYPE_5 . d ( VAR_3 . TAG , msg ) )  TYPE_5 . d ( VAR_3 . TAG , msg ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  return msg ; )  return msg ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.lang.String[][] ) RETURN java.lang.String[][] ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String[][] ) TYPE java.lang.String[][] ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < ( VAR_1 . length ) ) COND i < ( VAR_1 . length ) ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 [ i ] ) != null ) COND ( VAR_1 [ i ] ) != null ( THEN THEN ( IF IF ( COND VAR_1 [ i ] [ 0 ] . METHOD_2 ( VAR_2 ) ) COND VAR_1 [ i ] [ 0 ] . METHOD_2 ( VAR_2 ) ( THEN THEN (  VAR_1 [ i ] = null )  VAR_1 [ i ] = null ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR FOR (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE short ) TYPE short ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SWITCH SWITCH ( NAME VAR_1 ) NAME VAR_1 ( CASE VAR_2 ( BLOCK BLOCK ( IF IF ( COND ( TYPE_1 . METHOD_2 ( METHOD_3 ( ) ) ) && ( ( VAR_3 ) != null ) ) COND ( TYPE_1 . METHOD_2 ( METHOD_3 ( ) ) ) && ( ( VAR_3 ) != null ) ( THEN THEN (  METHOD_4 ( VAR_4 ) )  METHOD_4 ( VAR_4 ) ) THEN THEN ) IF IF (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_2 ( DEFAULT DEFAULT ( BLOCK BLOCK (  super . METHOD_1 ( VAR_1 ) )  super . METHOD_1 ( VAR_1 ) ) BLOCK BLOCK ) DEFAULT DEFAULT ) SWITCH SWITCH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  VAR_3 )  VAR_3 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_3 . get ( VAR_1 ) ) INIT = VAR_3 . get ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_4 == null ) COND VAR_4 == null ( THEN THEN (  return VAR_2 ; )  return VAR_2 ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_3 . get ( VAR_2 ) ) INIT = VAR_3 . get ( VAR_2 ) ) VAR VAR ( IF IF ( COND VAR_5 != VAR_4 ) COND VAR_5 != VAR_4 ( THEN THEN (  return VAR_2 ; )  return VAR_2 ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_6 ) NAME VAR_6 ( INIT = VAR_5 . get ( VAR_1 , ( - 1 ) ) ) INIT = VAR_5 . get ( VAR_1 , ( - 1 ) ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_7 ) NAME VAR_7 ( INIT = VAR_5 . get ( VAR_2 , ( - 1 ) ) ) INIT = VAR_5 . get ( VAR_2 , ( - 1 ) ) ) VAR VAR (  return VAR_6 > VAR_7 ? VAR_1 : VAR_2 ; )  return VAR_6 > VAR_7 ? VAR_1 : VAR_2 ; ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME path ) NAME path ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_6 ) NAME VAR_6 ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_7 ) NAME VAR_7 ) VAR VAR ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_8 ) NAME VAR_8 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_9 ) NAME VAR_9 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME VAR_10 ) NAME VAR_10 ( INIT = new TYPE_6 ( source , VAR_1 , VAR_2 , path , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 , VAR_8 , VAR_9 ) ) INIT = new TYPE_6 ( source , VAR_1 , VAR_2 , path , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 , VAR_8 , VAR_9 ) ) VAR VAR (  return VAR_10 ; )  return VAR_10 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME session ) NAME session ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME context ) NAME context ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME fd ) NAME fd ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME callback ) NAME callback ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_4 . METHOD_2 ( VAR_1 ) ) INIT = TYPE_4 . METHOD_2 ( VAR_1 ) ) VAR VAR (  assertEquals ( STRING_1 , new java.lang.String ( VAR_3 ) ) )  assertEquals ( STRING_1 , new java.lang.String ( VAR_3 ) ) (  assertTrue ( STRING_2 , ( 0 != ( ( TYPE_4 . METHOD_3 ( VAR_1 ) ) & ( VAR_4 ) ) ) ) )  assertTrue ( STRING_2 , ( 0 != ( ( TYPE_4 . METHOD_3 ( VAR_1 ) ) & ( VAR_4 ) ) ) ) (  super . METHOD_1 ( session , VAR_1 , context , VAR_2 , fd , callback ) )  super . METHOD_1 ( session , VAR_1 , context , VAR_2 , fd , callback ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( IN VAR_3 ) IN VAR_3 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME id ) NAME id ( INIT = METHOD_2 ( VAR_4 ) ) INIT = METHOD_2 ( VAR_4 ) ) VAR VAR ( IF IF ( COND ( VAR_2 . start ) == VAR_1 ) COND ( VAR_2 . start ) == VAR_1 ( THEN THEN (  VAR_5 . METHOD_3 ( id ) )  VAR_5 . METHOD_3 ( id ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND ( VAR_6 ) == VAR_1 ) COND ( VAR_6 ) == VAR_1 ( THEN THEN (  VAR_5 . METHOD_5 ( id ) )  VAR_5 . METHOD_5 ( id ) ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER synchronized ) MODIFIER synchronized ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_5> ) TYPE java.util.List<TYPE_5> ( NAME VAR_5 ) NAME VAR_5 ( INIT = METHOD_3 ( VAR_1 ) ) INIT = METHOD_3 ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_6 ) NAME VAR_6 ( INIT = new TYPE_5 ( VAR_2 , new TYPE_6 ( VAR_4 . METHOD_4 ( ) . METHOD_5 ( ) , VAR_1 . METHOD_6 ( ) ) , VAR_1 . METHOD_7 ( ) , VAR_3 ) ) INIT = new TYPE_5 ( VAR_2 , new TYPE_6 ( VAR_4 . METHOD_4 ( ) . METHOD_5 ( ) , VAR_1 . METHOD_6 ( ) ) , VAR_1 . METHOD_7 ( ) , VAR_3 ) ) VAR VAR (  VAR_5 . METHOD_8 ( VAR_6 ) )  VAR_5 . METHOD_8 ( VAR_6 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_3 ) == 0 ) COND ( VAR_3 ) == 0 ( THEN THEN (  throw new java.lang.RuntimeException ( STRING_1 ) ; )  throw new java.lang.RuntimeException ( STRING_1 ) ; ) THEN THEN ) IF IF (  VAR_4 = VAR_2 )  VAR_4 = VAR_2 ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN ( VAR VAR ( TYPE int ) TYPE int ( NAME ret ) NAME ret ( INIT = VAR_1 . METHOD_2 ( VAR_5 . METHOD_3 ( ) ) ) INIT = VAR_1 . METHOD_2 ( VAR_5 . METHOD_3 ( ) ) ) VAR VAR ( IF IF ( COND ret != ( VAR_6 ) ) COND ret != ( VAR_6 ) ( THEN THEN (  android.util.Log.e ( VAR_7 . TAG , ( STRING_2 + ret ) ) )  android.util.Log.e ( VAR_7 . TAG , ( STRING_2 + ret ) ) (  return false ; )  return false ; ) THEN THEN ) IF IF ) THEN THEN ( ELSE ELSE (  VAR_2 . METHOD_4 ( VAR_5 . METHOD_3 ( ) ) )  VAR_2 . METHOD_4 ( VAR_5 . METHOD_3 ( ) ) ) ELSE ELSE ) IF IF (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( VAR_2 , 1 ) ) INIT = TYPE_2 . METHOD_2 ( VAR_2 , 1 ) ) VAR VAR (  assertEquals ( VAR_3 , VAR_4 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ) )  assertEquals ( VAR_3 , VAR_4 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ) (  METHOD_5 ( VAR_1 ) )  METHOD_5 ( VAR_1 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_5 ) NAME VAR_5 ( INIT = TYPE_2 . METHOD_6 ( VAR_6 , 1 ) . METHOD_7 ( STRING_1 ) . METHOD_8 ( ) ) INIT = TYPE_2 . METHOD_6 ( VAR_6 , 1 ) . METHOD_7 ( STRING_1 ) . METHOD_8 ( ) ) VAR VAR (  assertEquals ( VAR_7 , VAR_4 . METHOD_3 ( VAR_5 . METHOD_4 ( ) ) ) )  assertEquals ( VAR_7 , VAR_4 . METHOD_3 ( VAR_5 . METHOD_4 ( ) ) ) (  METHOD_5 ( VAR_1 ) )  METHOD_5 ( VAR_1 ) (  METHOD_9 ( ) )  METHOD_9 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1<TYPE_2> ) RETURN TYPE_1<TYPE_2> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_3 . METHOD_2 ( METHOD_3 ( ) . values ( ) , TYPE_4 . METHOD_4 ( ) ) ) INIT = TYPE_3 . METHOD_2 ( METHOD_3 ( ) . values ( ) , TYPE_4 . METHOD_4 ( ) ) ) VAR VAR ( IF IF ( COND ! ( VAR_2 ) ) COND ! ( VAR_2 ) ( THEN THEN (  throw new TYPE_5 ( STRING_1 , METHOD_5 ( ) , java.lang.String . METHOD_6 ( STRING_2 , METHOD_7 ( ) ) ) ; )  throw new TYPE_5 ( STRING_1 , METHOD_5 ( ) , java.lang.String . METHOD_6 ( STRING_2 , METHOD_7 ( ) ) ) ; ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME project ) NAME project ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND TYPE_3 . METHOD_2 ( ) . METHOD_3 ( ) ) COND TYPE_3 . METHOD_2 ( ) . METHOD_3 ( ) ( THEN THEN ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_4 . METHOD_4 ( TYPE_5 . METHOD_5 ( project ) , null , true ) ) INIT = TYPE_4 . METHOD_4 ( TYPE_5 . METHOD_5 ( project ) , null , true ) ) VAR VAR ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  TYPE_6 . METHOD_6 ( VAR_1 , STRING_1 , ( STRING_2 + ( ( ( STRING_3 + STRING_4 ) + STRING_5 ) + STRING_6 ) ) ) )  TYPE_6 . METHOD_6 ( VAR_1 , STRING_1 , ( STRING_2 + ( ( ( STRING_3 + STRING_4 ) + STRING_5 ) + STRING_6 ) ) ) (  return false ; )  return false ; ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME assertEquals ) NAME assertEquals ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME expected ) NAME expected ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_2 == null ? expected != null : ! ( VAR_2 . equals ( expected ) ) ) COND VAR_2 == null ? expected != null : ! ( VAR_2 . equals ( expected ) ) ( THEN THEN (  TYPE_1 . fail ( VAR_1 , ( ( ( STRING_1 + expected ) + STRING_2 ) + VAR_2 ) ) )  TYPE_1 . fail ( VAR_1 , ( ( ( STRING_1 + expected ) + STRING_2 ) + VAR_2 ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1[] ) RETURN TYPE_1[] ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( IF IF ( COND ( VAR_2 ) != null ) COND ( VAR_2 ) != null ( THEN THEN (  return VAR_2 . METHOD_1 ( VAR_1 ) ; )  return VAR_2 . METHOD_1 ( VAR_1 ) ; ) THEN THEN ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  METHOD_2 ( ) )  METHOD_2 ( ) ( SYNCHRONIZED SYNCHRONIZED (  VAR_3 )  VAR_3 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3[] ) TYPE TYPE_3[] ( NAME VAR_4 ) NAME VAR_4 ( INIT = null ) INIT = null ) VAR VAR ( IF IF ( COND METHOD_3 ( ) ) COND METHOD_3 ( ) ( THEN THEN (  VAR_4 = TYPE_4 . METHOD_4 ( VAR_5 , VAR_1 ) )  VAR_4 = TYPE_4 . METHOD_4 ( VAR_5 , VAR_1 ) ) THEN THEN ) IF IF ( IF IF ( COND VAR_4 != null ) COND VAR_4 != null ( THEN THEN (  return VAR_4 ; )  return VAR_4 ; ) THEN THEN ( ELSE ELSE (  return new TYPE_5 [ 0 ] ; )  return new TYPE_5 [ 0 ] ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME start ) NAME start ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_1 . METHOD_1 ( VAR_2 ) )  VAR_1 . METHOD_1 ( VAR_2 ) (  VAR_1 . METHOD_1 ( VAR_3 ) )  VAR_1 . METHOD_1 ( VAR_3 ) ( TRY TRY ( BLOCK BLOCK (  METHOD_2 ( VAR_4 , VAR_1 ) )  METHOD_2 ( VAR_4 , VAR_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ( BLOCK BLOCK (  android.util.Log.w ( TYPE_2 . TAG , STRING_1 , e ) )  android.util.Log.w ( TYPE_2 . TAG , STRING_1 , e ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  VAR_5 = new TYPE_3 ( this ) )  VAR_5 = new TYPE_3 ( this ) (  TYPE_2 . METHOD_3 ( this ) )  TYPE_2 . METHOD_3 ( this ) (  VAR_5 . start ( ) )  VAR_5 . start ( ) (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME path ) NAME path ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME flags ) NAME flags ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_3 . METHOD_2 ( ) . METHOD_3 ( ) )  TYPE_3 . METHOD_2 ( ) . METHOD_3 ( ) ( IF IF ( COND ( VAR_1 & ( VAR_2 ) ) != ( VAR_3 ) ) COND ( VAR_1 & ( VAR_2 ) ) != ( VAR_3 ) ( THEN THEN (  TYPE_3 . METHOD_2 ( ) . METHOD_4 ( ) )  TYPE_3 . METHOD_2 ( ) . METHOD_4 ( ) ) THEN THEN ) IF IF (  return os . METHOD_1 ( path , flags , VAR_1 ) ; )  return os . METHOD_1 ( path , flags , VAR_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME s ) NAME s ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.StringBuilder ) TYPE java.lang.StringBuilder ( NAME result ) NAME result ( INIT = new java.lang.StringBuilder ( ) ) INIT = new java.lang.StringBuilder ( ) ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < ( s . length ( ) ) ) COND i < ( s . length ( ) ) ( UPDATE UPDATE (  ++ i )  ++ i ) UPDATE UPDATE ( BLOCK BLOCK ( IF IF ( COND i != 0 ) COND i != 0 ( THEN THEN (  result . append ( CHAR_1 ) )  result . append ( CHAR_1 ) ) THEN THEN ) IF IF (  result . append ( TYPE_2 . METHOD_1 ( s . METHOD_2 ( i ) ) ) )  result . append ( TYPE_2 . METHOD_1 ( s . METHOD_2 ( i ) ) ) ) BLOCK BLOCK ) FOR FOR (  return result . toString ( ) ; )  return result . toString ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN byte[] ) RETURN byte[] ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 != null ) INIT = VAR_1 != null ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME result ) NAME result ( INIT = METHOD_2 ( VAR_3 , VAR_2 , null ) ) INIT = METHOD_2 ( VAR_3 , VAR_2 , null ) ) VAR VAR ( IF IF ( COND VAR_3 ) COND VAR_3 ( THEN THEN (  result . METHOD_3 ( VAR_1 ) )  result . METHOD_3 ( VAR_1 ) ) THEN THEN ) IF IF (  return result . METHOD_4 ( ) ; )  return result . METHOD_4 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND VAR_1 . METHOD_2 ( ) ) COND VAR_1 . METHOD_2 ( ) ( THEN THEN (  METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( VAR_1 ) )  METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( VAR_1 ) ) THEN THEN ) IF IF ( IF IF ( COND ( ( VAR_2 . METHOD_6 ( VAR_3 ) ) || ( VAR_2 . METHOD_6 ( VAR_4 ) ) ) || ( VAR_2 . METHOD_6 ( VAR_5 ) ) ) COND ( ( VAR_2 . METHOD_6 ( VAR_3 ) ) || ( VAR_2 . METHOD_6 ( VAR_4 ) ) ) || ( VAR_2 . METHOD_6 ( VAR_5 ) ) ( THEN THEN (  VAR_2 . METHOD_7 ( ) )  VAR_2 . METHOD_7 ( ) ) THEN THEN ) IF IF (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE java.lang.Exception[] ) TYPE java.lang.Exception[] ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_2 . METHOD_2 ( VAR_1 , VAR_3 ) ) INIT = VAR_2 . METHOD_2 ( VAR_1 , VAR_3 ) ) VAR VAR ( IF IF ( COND VAR_5 != null ) COND VAR_5 != null ( THEN THEN (  VAR_5 . METHOD_3 ( INT_1 ) )  VAR_5 . METHOD_3 ( INT_1 ) (  VAR_5 = new TYPE_4 ( VAR_5 ) . METHOD_4 ( VAR_6 ) )  VAR_5 = new TYPE_4 ( VAR_5 ) . METHOD_4 ( VAR_6 ) ) THEN THEN ) IF IF (  return VAR_5 ; )  return VAR_5 ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ( BLOCK BLOCK ( IF IF ( COND VAR_4 != null ) COND VAR_4 != null ( THEN THEN (  VAR_4 [ 0 ] = e )  VAR_4 [ 0 ] = e ) THEN THEN ) IF IF ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME x ) NAME x ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( VAR_3 ) ) INIT = METHOD_2 ( VAR_3 ) ) VAR VAR ( IF IF ( COND VAR_2 == null ) COND VAR_2 == null ( THEN THEN (  METHOD_3 ( null ) )  METHOD_3 ( null ) (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME info ) NAME info ( INIT = METHOD_4 ( x ) ) INIT = METHOD_4 ( x ) ) VAR VAR (  METHOD_3 ( new TYPE_5 ( info , METHOD_5 ( info , VAR_4 ) , VAR_2 ) ) )  METHOD_3 ( new TYPE_5 ( info , METHOD_5 ( info , VAR_4 ) , VAR_2 ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Throwable ) TYPE java.lang.Throwable ( NAME e ) NAME e ( BLOCK BLOCK (  throw METHOD_6 ( x , e ) ; )  throw METHOD_6 ( x , e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN int[] ) RETURN int[] ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int[] ) TYPE int[] ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME offset ) NAME offset ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME value ) NAME value ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_2 ) INIT = VAR_2 ) VAR VAR ( IF IF ( COND ( offset + 1 ) == VAR_4 ) COND ( offset + 1 ) == VAR_4 ( THEN THEN (  VAR_4 += VAR_3 )  VAR_4 += VAR_3 ( VAR VAR ( TYPE int[] ) TYPE int[] ( NAME VAR_5 ) NAME VAR_5 ( INIT = new int [ VAR_4 ] ) INIT = new int [ VAR_4 ] ) VAR VAR (  TYPE_1 . METHOD_2 ( VAR_1 , 0 , VAR_5 , 0 , offset ) )  TYPE_1 . METHOD_2 ( VAR_1 , 0 , VAR_5 , 0 , offset ) (  VAR_1 = VAR_5 )  VAR_1 = VAR_5 ) THEN THEN ) IF IF (  VAR_1 [ offset ] = value )  VAR_1 [ offset ] = value (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public final ) MODIFIER public final ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME x ) NAME x ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  throw new TYPE_2 ( ) ; )  throw new TYPE_2 ( ) ; ) THEN THEN ) IF IF ( IF IF ( COND ! ( VAR_2 ) ) COND ! ( VAR_2 ) ( THEN THEN (  throw new TYPE_3 ( STRING_1 ) ; )  throw new TYPE_3 ( STRING_1 ) ; ) THEN THEN ) IF IF (  METHOD_1 ( METHOD_2 ( METHOD_3 ( VAR_3 ) ) , x ) )  METHOD_1 ( METHOD_2 ( METHOD_3 ( VAR_3 ) ) , x ) (  return this ; )  return this ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_2 ) == null ) COND ( VAR_2 ) == null ( THEN THEN (  VAR_2 = VAR_1 . METHOD_2 ( ) . METHOD_1 ( TYPE_3 . METHOD_3 ( VAR_3 ) ) )  VAR_2 = VAR_1 . METHOD_2 ( ) . METHOD_1 ( TYPE_3 . METHOD_3 ( VAR_3 ) ) ( IF IF ( COND ( VAR_2 ) == null ) COND ( VAR_2 ) == null ( THEN THEN (  VAR_1 . METHOD_4 ( ) . METHOD_5 ( VAR_4 , ( ( STRING_1 + ( VAR_3 ) ) + STRING_2 ) ) )  VAR_1 . METHOD_4 ( ) . METHOD_5 ( VAR_4 , ( ( STRING_1 + ( VAR_3 ) ) + STRING_2 ) ) (  throw new TYPE_2 ( ) ; )  throw new TYPE_2 ( ) ; ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SWITCH SWITCH ( NAME VAR_1 ) NAME VAR_1 ( CASE VAR_2 ( BLOCK BLOCK ( IF IF ( COND ( VAR_3 ) == null ) COND ( VAR_3 ) == null ( THEN THEN (  VAR_3 = TYPE_1 . METHOD_2 ( VAR_1 ) )  VAR_3 = TYPE_1 . METHOD_2 ( VAR_1 ) ) THEN THEN ) IF IF (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) CASE VAR_2 ( CASE VAR_4 ( BLOCK BLOCK ( IF IF ( COND ( VAR_5 ) == null ) COND ( VAR_5 ) == null ( THEN THEN (  VAR_5 = TYPE_1 . METHOD_2 ( VAR_1 ) )  VAR_5 = TYPE_1 . METHOD_2 ( VAR_1 ) ) THEN THEN ) IF IF (  return VAR_5 ; )  return VAR_5 ; ) BLOCK BLOCK ) CASE VAR_4 ( DEFAULT DEFAULT ( BLOCK BLOCK ) BLOCK BLOCK ) DEFAULT DEFAULT ) SWITCH SWITCH (  return TYPE_1 . METHOD_1 ( ) ; )  return TYPE_1 . METHOD_1 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( VAR_2 class ) ) INIT = METHOD_2 ( VAR_2 class ) ) VAR VAR (  when ( VAR_1 . METHOD_3 ( ) ) . thenReturn ( 1 ) )  when ( VAR_1 . METHOD_3 ( ) ) . thenReturn ( 1 ) (  when ( VAR_1 . METHOD_4 ( ) ) . thenReturn ( false ) )  when ( VAR_1 . METHOD_4 ( ) ) . thenReturn ( false ) (  when ( VAR_1 . METHOD_5 ( ) ) . thenReturn ( false ) )  when ( VAR_1 . METHOD_5 ( ) ) . thenReturn ( false ) (  when ( VAR_1 . METHOD_6 ( ) ) . thenReturn ( true ) )  when ( VAR_1 . METHOD_6 ( ) ) . thenReturn ( true ) (  when ( VAR_1 . METHOD_7 ( ) ) . thenReturn ( false ) )  when ( VAR_1 . METHOD_7 ( ) ) . thenReturn ( false ) (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.Class<?> ) TYPE java.lang.Class<?> ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE TYPE_3<java.lang.String> ) TYPE TYPE_3<java.lang.String> ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_6 ) NAME VAR_6 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_7 ) NAME VAR_7 ) VAR VAR ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME args ) NAME args ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND METHOD_2 ( VAR_3 ) ) COND METHOD_2 ( VAR_3 ) ( THEN THEN ( VAR VAR ( TYPE java.util.List<TYPE_5> ) TYPE java.util.List<TYPE_5> ( NAME VAR_8 ) NAME VAR_8 ( INIT = TYPE_6 . METHOD_3 ( VAR_3 , VAR_2 , args ) ) INIT = TYPE_6 . METHOD_3 ( VAR_3 , VAR_2 , args ) ) VAR VAR (  return new TYPE_7 ( VAR_1 , VAR_4 , VAR_5 , VAR_6 , VAR_8 ) ; )  return new TYPE_7 ( VAR_1 , VAR_4 , VAR_5 , VAR_6 , VAR_8 ) ; ) THEN THEN ( ELSE ELSE (  return null ; )  return null ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN long ) RETURN long ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE android.os.AsyncResult ) TYPE android.os.AsyncResult ( NAME ar ) NAME ar ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME response ) NAME response ( INIT = ( ( TYPE_1 ) ( ar . result ) ) ) INIT = ( ( TYPE_1 ) ( ar . result ) ) ) VAR VAR ( IF IF ( COND ( response . METHOD_2 ( ) ) < 0 ) COND ( response . METHOD_2 ( ) ) < 0 ( THEN THEN ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  log ( STRING_1 ) )  log ( STRING_1 ) ) THEN THEN ) IF IF (  return VAR_2 ; )  return VAR_2 ; ) THEN THEN ( ELSE ELSE ( IF IF ( COND ( response . METHOD_2 ( ) ) == ( VAR_3 ) ) COND ( response . METHOD_2 ( ) ) == ( VAR_3 ) ( THEN THEN ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  log ( STRING_2 ) )  log ( STRING_2 ) ) THEN THEN ) IF IF (  return VAR_4 ; )  return VAR_4 ; ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF (  return ( ( long ) ( response . METHOD_2 ( ) ) ) ; )  return ( ( long ) ( response . METHOD_2 ( ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  assertFalse ( VAR_1 . METHOD_2 ( VAR_2 ) ) )  assertFalse ( VAR_1 . METHOD_2 ( VAR_2 ) ) (  VAR_1 . METHOD_3 ( VAR_3 ) )  VAR_1 . METHOD_3 ( VAR_3 ) (  assertFalse ( VAR_1 . METHOD_2 ( VAR_2 ) ) )  assertFalse ( VAR_1 . METHOD_2 ( VAR_2 ) ) (  VAR_1 . METHOD_4 ( VAR_2 , VAR_4 ) )  VAR_1 . METHOD_4 ( VAR_2 , VAR_4 ) (  assertTrue ( VAR_1 . METHOD_2 ( VAR_2 ) ) )  assertTrue ( VAR_1 . METHOD_2 ( VAR_2 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME server ) NAME server ( INIT = new TYPE_1 ( 0 ) ) INIT = new TYPE_1 ( 0 ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = server . METHOD_2 ( ) ) INIT = server . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 ( TYPE_3 . METHOD_3 ( ) , VAR_1 , true ) ) INIT = new TYPE_2 ( TYPE_3 . METHOD_3 ( ) , VAR_1 , true ) ) VAR VAR (  assertEquals ( STRING_1 , VAR_1 , VAR_2 . METHOD_4 ( ) ) )  assertEquals ( STRING_1 , VAR_1 , VAR_2 . METHOD_4 ( ) ) (  VAR_2 = new TYPE_2 ( TYPE_3 . METHOD_3 ( ) , VAR_1 , false ) )  VAR_2 = new TYPE_2 ( TYPE_3 . METHOD_3 ( ) , VAR_1 , false ) (  VAR_2 . METHOD_5 ( ) )  VAR_2 . METHOD_5 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  this )  this ( BLOCK BLOCK ( IF IF ( COND ( ( VAR_3 ) == 0 ) && ( ! ( VAR_4 ) ) ) COND ( ( VAR_3 ) == 0 ) && ( ! ( VAR_4 ) ) ( THEN THEN (  METHOD_2 ( VAR_1 , VAR_5 , VAR_2 , INT_1 , VAR_6 ) )  METHOD_2 ( VAR_1 , VAR_5 , VAR_2 , INT_1 , VAR_6 ) (  VAR_7 . METHOD_3 ( android.os.Message . METHOD_4 ( VAR_7 , 1 , this ) , VAR_2 ) )  VAR_7 . METHOD_3 ( android.os.Message . METHOD_4 ( VAR_7 , 1 , this ) , VAR_2 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  this )  this ( BLOCK BLOCK ( IF IF ( COND ( VAR_2 ) == null ) COND ( VAR_2 ) == null ( THEN THEN (  VAR_2 = VAR_3 . get ( VAR_4 ) )  VAR_2 = VAR_3 . get ( VAR_4 ) ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_2 . METHOD_2 ( VAR_1 , null , VAR_5 ) ) < 0 ) COND ( VAR_2 . METHOD_2 ( VAR_1 , null , VAR_5 ) ) < 0 ( THEN THEN (  VAR_2 . METHOD_3 ( VAR_4 . METHOD_4 ( ) ) )  VAR_2 . METHOD_3 ( VAR_4 . METHOD_4 ( ) ) (  VAR_2 . METHOD_2 ( VAR_1 , null , VAR_5 ) )  VAR_2 . METHOD_2 ( VAR_1 , null , VAR_5 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE short ) TYPE short ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE short ) TYPE short ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_5 ) ) COND ! ( VAR_5 ) ( THEN THEN (  this . VAR_5 = true )  this . VAR_5 = true ( IF IF ( COND VAR_1 == ( VAR_6 ) ) COND VAR_1 == ( VAR_6 ) ( THEN THEN (  METHOD_2 ( ) )  METHOD_2 ( ) (  this . VAR_7 = true )  this . VAR_7 = true ) THEN THEN ) IF IF (  METHOD_3 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) )  METHOD_3 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) (  VAR_8 . METHOD_4 ( ) )  VAR_8 . METHOD_4 ( ) ( IF IF ( COND VAR_1 != ( VAR_6 ) ) COND VAR_1 != ( VAR_6 ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  throw new java.io.IOException ( VAR_9 ) ; )  throw new java.io.IOException ( VAR_9 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME call ) NAME call ( INIT = TYPE_2 . METHOD_2 ( VAR_1 class ) ) INIT = TYPE_2 . METHOD_2 ( VAR_1 class ) ) VAR VAR (  TYPE_2 . when ( call . METHOD_3 ( ) ) . thenReturn ( VAR_2 ) )  TYPE_2 . when ( call . METHOD_3 ( ) ) . thenReturn ( VAR_2 ) (  TYPE_2 . when ( VAR_3 . METHOD_4 ( ) ) . thenReturn ( call ) )  TYPE_2 . when ( VAR_3 . METHOD_4 ( ) ) . thenReturn ( call ) (  TYPE_3 . assertTrue ( VAR_4 . METHOD_5 ( ) ) )  TYPE_3 . assertTrue ( VAR_4 . METHOD_5 ( ) ) (  org.mockito.Mockito.verify ( call ) . METHOD_6 ( false , null ) )  org.mockito.Mockito.verify ( call ) . METHOD_6 ( false , null ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME context ) NAME context ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_2 . METHOD_2 ( TYPE_3 . TAG ) )  TYPE_2 . METHOD_2 ( TYPE_3 . TAG ) (  TYPE_2 . METHOD_3 ( context ) )  TYPE_2 . METHOD_3 ( context ) (  TYPE_2 . METHOD_4 ( ) )  TYPE_2 . METHOD_4 ( ) ( FOR-EACH FOR-EACH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME p ) NAME p ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  TYPE_2 . METHOD_5 ( p ) )  TYPE_2 . METHOD_5 ( p ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  TYPE_2 . METHOD_6 ( TYPE_3 : : METHOD_7 ) )  TYPE_2 . METHOD_6 ( TYPE_3 : : METHOD_7 ) (  TYPE_2 . METHOD_8 ( TYPE_5 : : METHOD_9 ) )  TYPE_2 . METHOD_8 ( TYPE_5 : : METHOD_9 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME target ) NAME target ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.StringBuilder ) TYPE java.lang.StringBuilder ( NAME result ) NAME result ( INIT = new java.lang.StringBuilder ( VAR_1 . getName ( ) ) ) INIT = new java.lang.StringBuilder ( VAR_1 . getName ( ) ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( IN VAR_3 ) IN VAR_3 ( BLOCK BLOCK ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_2 . METHOD_2 ( target ) ) INIT = VAR_2 . METHOD_2 ( target ) ) VAR VAR ( IF IF ( COND ( VAR_4 != null ) && ( ( VAR_4 . length ( ) ) > 0 ) ) COND ( VAR_4 != null ) && ( ( VAR_4 . length ( ) ) > 0 ) ( THEN THEN (  result . append ( VAR_5 ) )  result . append ( VAR_5 ) (  result . append ( VAR_4 ) )  result . append ( VAR_4 ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return result . toString ( ) ; )  return result . toString ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = STRING_1 + ( ( ( ( ( ( ( ( STRING_2 + STRING_3 ) + STRING_4 ) + STRING_5 ) + STRING_6 ) + STRING_7 ) + STRING_7 ) + STRING_8 ) + STRING_9 ) ) INIT = STRING_1 + ( ( ( ( ( ( ( ( STRING_2 + STRING_3 ) + STRING_4 ) + STRING_5 ) + STRING_6 ) + STRING_7 ) + STRING_7 ) + STRING_8 ) + STRING_9 ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME expected ) NAME expected ( INIT = STRING_10 + ( STRING_11 + STRING_12 ) ) INIT = STRING_10 + ( STRING_11 + STRING_12 ) ) VAR VAR (  assertEquals ( expected , METHOD_2 ( VAR_1 ) ) )  assertEquals ( expected , METHOD_2 ( VAR_1 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE android.content.Intent ) TYPE android.content.Intent ( NAME VAR_4 ) NAME VAR_4 ( INIT = new android.content.Intent ( VAR_5 ) ) INIT = new android.content.Intent ( VAR_5 ) ) VAR VAR (  VAR_4 . METHOD_2 ( STRING_1 , TYPE_2 . METHOD_3 ( VAR_6 , VAR_2 , VAR_3 ) ) )  VAR_4 . METHOD_2 ( STRING_1 , TYPE_2 . METHOD_3 ( VAR_6 , VAR_2 , VAR_3 ) ) (  VAR_1 . METHOD_4 ( VAR_4 , VAR_7 , VAR_8 , VAR_9 , null , null , VAR_10 , null , null ) )  VAR_1 . METHOD_4 ( VAR_4 , VAR_7 , VAR_8 , VAR_9 , null , null , VAR_10 , null , null ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public final ) MODIFIER public final ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME format ) NAME format ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  VAR_3 )  VAR_3 ( BLOCK BLOCK ( IF IF ( COND ( VAR_4 ) == null ) COND ( VAR_4 ) == null ( THEN THEN (  throw new TYPE_1 ( STRING_1 ) ; )  throw new TYPE_1 ( STRING_1 ) ; ) THEN THEN ) IF IF ( TRY TRY ( BLOCK BLOCK (  VAR_4 . METHOD_1 ( VAR_1 , format , VAR_2 ) )  VAR_4 . METHOD_1 ( VAR_1 , format , VAR_2 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME e ) NAME e ( BLOCK BLOCK (  android.util.Log.e ( VAR_5 , ( STRING_2 + ( e.getMessage ( ) ) ) ) )  android.util.Log.e ( VAR_5 , ( STRING_2 + ( e.getMessage ( ) ) ) ) (  METHOD_2 ( VAR_1 , 0 , VAR_6 ) )  METHOD_2 ( VAR_1 , 0 , VAR_6 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  server . METHOD_2 ( new TYPE_1 ( ) . METHOD_3 ( INT_1 ) . METHOD_4 ( STRING_1 ) ) )  server . METHOD_2 ( new TYPE_1 ( ) . METHOD_3 ( INT_1 ) . METHOD_4 ( STRING_1 ) ) (  server . METHOD_5 ( ) )  server . METHOD_5 ( ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_2 ) ( server . METHOD_6 ( STRING_2 ) . METHOD_7 ( ) ) ) ) INIT = ( ( TYPE_2 ) ( server . METHOD_6 ( STRING_2 ) . METHOD_7 ( ) ) ) ) VAR VAR (  assertEquals ( STRING_1 , METHOD_8 ( VAR_1 . METHOD_9 ( ) , VAR_2 ) ) )  assertEquals ( STRING_1 , METHOD_8 ( VAR_1 . METHOD_9 ( ) , VAR_2 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND STRING_1 . METHOD_2 ( VAR_1 ) ) COND STRING_1 . METHOD_2 ( VAR_1 ) ( THEN THEN (  return STRING_2 ; )  return STRING_2 ; ) THEN THEN ( ELSE ELSE ( IF IF ( COND STRING_3 . METHOD_2 ( VAR_1 ) ) COND STRING_3 . METHOD_2 ( VAR_1 ) ( THEN THEN (  return STRING_4 ; )  return STRING_4 ; ) THEN THEN ( ELSE ELSE ( IF IF ( COND STRING_5 . METHOD_2 ( VAR_1 ) ) COND STRING_5 . METHOD_2 ( VAR_1 ) ( THEN THEN (  return STRING_6 ; )  return STRING_6 ; ) THEN THEN ( ELSE ELSE (  throw new java.lang.IllegalArgumentException ( ( STRING_7 + VAR_1 ) ) ; )  throw new java.lang.IllegalArgumentException ( ( STRING_7 + VAR_1 ) ) ; ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1[] ) RETURN TYPE_1[] ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME n ) NAME n ( INIT = 0 ) INIT = 0 ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE java.util.ArrayList<TYPE_1> ) TYPE java.util.ArrayList<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( IN VAR_2 . values ( ) ) IN VAR_2 . values ( ) ( BLOCK BLOCK (  n += VAR_1 . size ( ) )  n += VAR_1 . size ( ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ( VAR VAR ( TYPE TYPE_1[] ) TYPE TYPE_1[] ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_1 [ n ] ) INIT = new TYPE_1 [ n ] ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE java.util.ArrayList<TYPE_1> ) TYPE java.util.ArrayList<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( IN VAR_2 . values ( ) ) IN VAR_2 . values ( ) ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME source ) NAME source ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  VAR_3 [ ( i ++ ) ] = source )  VAR_3 [ ( i ++ ) ] = source ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( ) ) INIT = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( ) ) VAR VAR ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_4 ( ) ) INIT = VAR_1 . METHOD_4 ( ) ) VAR VAR ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN (  return VAR_2 . METHOD_5 ( ) ; )  return VAR_2 . METHOD_5 ( ) ; ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN TYPE_1<TYPE_2>.VAR_1 ) RETURN TYPE_1<TYPE_2>.VAR_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME id ) NAME id ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3<TYPE_1<TYPE_2>.VAR_1> ) TYPE TYPE_3<TYPE_1<TYPE_2>.VAR_1> ( NAME i ) NAME i ( INIT = VAR_2 . METHOD_2 ( ) ) INIT = VAR_2 . METHOD_2 ( ) ) VAR VAR ( WHILE WHILE ( COND i . METHOD_3 ( ) ) COND i . METHOD_3 ( ) ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<TYPE_2>.VAR_1 ) TYPE TYPE_1<TYPE_2>.VAR_1 ( NAME entry ) NAME entry ( INIT = i . METHOD_4 ( ) ) INIT = i . METHOD_4 ( ) ) VAR VAR ( IF IF ( COND ( entry . id ) == id ) COND ( entry . id ) == id ( THEN THEN (  return entry ; )  return entry ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) WHILE WHILE (  android.util.Log.e ( TYPE_1 . TAG , ( STRING_1 + id ) ) )  android.util.Log.e ( TYPE_1 . TAG , ( STRING_1 + id ) ) (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public final ) MODIFIER public final ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( STRING_1 , STRING_2 ) ) INIT = new TYPE_1 ( STRING_1 , STRING_2 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 ( VAR_1 ) ) INIT = new TYPE_2 ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_3 ( STRING_3 , VAR_2 , 10 , 12 , INT_1 , INT_2 ) ) INIT = new TYPE_3 ( STRING_3 , VAR_2 , 10 , 12 , INT_1 , INT_2 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_4 ( VAR_3 ) ) INIT = new TYPE_4 ( VAR_3 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_5 ) NAME VAR_5 ( INIT = m . METHOD_2 ( VAR_4 ) ) INIT = m . METHOD_2 ( VAR_4 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_6 ) NAME VAR_6 ( INIT = m . METHOD_2 ( VAR_4 ) ) INIT = m . METHOD_2 ( VAR_4 ) ) VAR VAR (  METHOD_3 ( VAR_6 , VAR_5 ) )  METHOD_3 ( VAR_6 , VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME address ) NAME address ) VAR VAR ( VAR VAR ( TYPE byte ) TYPE byte ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int[] ) TYPE int[] ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_3 ) COND VAR_3 ( THEN THEN (  android.util.Log.v ( VAR_4 . TAG , ( STRING_1 + VAR_1 ) ) )  android.util.Log.v ( VAR_4 . TAG , ( STRING_1 + VAR_1 ) ) ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_5 ) NAME VAR_5 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_6 ) NAME VAR_6 ( INIT = VAR_7 ) INIT = VAR_7 ) VAR VAR (  new TYPE_3 ( address , VAR_1 , VAR_2 ) )  new TYPE_3 ( address , VAR_1 , VAR_2 ) ( VAR VAR ( TYPE android.os.Message ) TYPE android.os.Message ( NAME msg ) NAME msg ( INIT = VAR_8 . METHOD_2 ( VAR_9 ) ) INIT = VAR_8 . METHOD_2 ( VAR_9 ) ) VAR VAR (  msg.obj = VAR_6 )  msg.obj = VAR_6 (  VAR_8 . METHOD_3 ( msg ) )  VAR_8 . METHOD_3 ( msg ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME address ) NAME address ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME flags ) NAME flags ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_3 . equals ( VAR_1 ) ) COND VAR_3 . equals ( VAR_1 ) ( THEN THEN ( IF IF ( COND VAR_4 ) COND VAR_4 ( THEN THEN (  log ( ( ( ( ( ( ( ( STRING_1 + address ) + STRING_2 ) + VAR_1 ) + STRING_3 ) + flags ) + STRING_4 ) + VAR_2 ) ) )  log ( ( ( ( ( ( ( ( STRING_1 + address ) + STRING_2 ) + VAR_1 ) + STRING_3 ) + flags ) + STRING_4 ) + VAR_2 ) ) ) THEN THEN ) IF IF (  VAR_5 . METHOD_2 ( VAR_6 , new TYPE_1 ( address ) ) )  VAR_5 . METHOD_2 ( VAR_6 , new TYPE_1 ( address ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private synchronized ) MODIFIER private synchronized ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( ( STRING_1 + ( VAR_2 . size ( ) ) ) ) )  VAR_1 . METHOD_2 ( ( STRING_1 + ( VAR_2 . size ( ) ) ) ) ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < ( VAR_3 ) ) COND i < ( VAR_3 ) ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK (  METHOD_3 ( new TYPE_2 < TYPE_3 > ( VAR_4 , null ) ) )  METHOD_3 ( new TYPE_2 < TYPE_3 > ( VAR_4 , null ) ) ) BLOCK BLOCK ) FOR FOR ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 && ( VAR_4 == 0 ) ) COND VAR_1 && ( VAR_4 == 0 ) ( THEN THEN (  return - 1 ; )  return - 1 ; ) THEN THEN ) IF IF ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN (  VAR_2 . METHOD_2 ( VAR_4 ) )  VAR_2 . METHOD_2 ( VAR_4 ) (  VAR_2 . METHOD_3 ( VAR_3 . METHOD_4 ( ) ) )  VAR_2 . METHOD_3 ( VAR_3 . METHOD_4 ( ) ) (  VAR_2 . METHOD_5 ( VAR_3 . METHOD_6 ( ) ) )  VAR_2 . METHOD_5 ( VAR_3 . METHOD_6 ( ) ) ) THEN THEN ) IF IF (  return VAR_4 ; )  return VAR_4 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  log ( ( STRING_1 + ( VAR_1 . METHOD_2 ( ) ) ) ) )  log ( ( STRING_1 + ( VAR_1 . METHOD_2 ( ) ) ) ) (  log ( STRING_2 ) )  log ( STRING_2 ) (  METHOD_3 ( ) )  METHOD_3 ( ) (  VAR_2 . METHOD_4 ( METHOD_5 ( ) ) )  VAR_2 . METHOD_4 ( METHOD_5 ( ) ) (  VAR_3 . set ( false ) )  VAR_3 . set ( false ) (  ( ( TYPE_1 ) ( VAR_1 ) ) . METHOD_6 ( ) )  ( ( TYPE_1 ) ( VAR_1 ) ) . METHOD_6 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME toString ) NAME toString ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME sb ) NAME sb ( INIT = new TYPE_1 ( 100 ) ) INIT = new TYPE_1 ( 100 ) ) VAR VAR (  sb.append ( METHOD_1 ( ) . getName ( ) ) )  sb.append ( METHOD_1 ( ) . getName ( ) ) (  sb.append ( CHAR_1 ) )  sb.append ( CHAR_1 ) (  sb.append ( TYPE_2 . METHOD_2 ( METHOD_3 ( ) ) ) )  sb.append ( TYPE_2 . METHOD_2 ( METHOD_3 ( ) ) ) (  sb.append ( CHAR_2 ) )  sb.append ( CHAR_2 ) (  sb.append ( method ) )  sb.append ( method ) ( IF IF ( COND ( VAR_1 ) != null ) COND ( VAR_1 ) != null ( THEN THEN (  sb.append ( CHAR_2 ) )  sb.append ( CHAR_2 ) (  sb.append ( VAR_1 ) )  sb.append ( VAR_1 ) ) THEN THEN ) IF IF (  sb.append ( CHAR_3 ) )  sb.append ( CHAR_3 ) (  return sb . toString ( ) ; )  return sb . toString ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_2 . METHOD_2 ( ) . METHOD_3 ( VAR_2 ) )  TYPE_2 . METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME parent ) NAME parent ( INIT = VAR_3 . METHOD_4 ( ) ) INIT = VAR_3 . METHOD_4 ( ) ) VAR VAR ( IF IF ( COND ! ( parent instanceof TYPE_3 ) ) COND ! ( parent instanceof TYPE_3 ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_5 . METHOD_5 ( VAR_3 , VAR_5 class ) ) INIT = TYPE_5 . METHOD_5 ( VAR_3 , VAR_5 class ) ) VAR VAR ( IF IF ( COND VAR_4 == null ) COND VAR_4 == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  METHOD_6 ( ( ( TYPE_3 ) ( parent ) ) , VAR_4 ) )  METHOD_6 ( ( ( TYPE_3 ) ( parent ) ) , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_3 ) COND VAR_3 ( THEN THEN (  java.lang.System.out.println ( java.lang.String.format ( STRING_1 , VAR_1 ) ) )  java.lang.System.out.println ( java.lang.String.format ( STRING_1 , VAR_1 ) ) ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_4<TYPE_1,TYPE_5> ) TYPE TYPE_4<TYPE_1,TYPE_5> ( NAME result ) NAME result ( INIT = TYPE_6 . METHOD_2 ( VAR_1 , VAR_2 , null ) ) INIT = TYPE_6 . METHOD_2 ( VAR_1 , VAR_2 , null ) ) VAR VAR (  return result . METHOD_3 ( ) ; )  return result . METHOD_3 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_1 ) ( TYPE_2 . METHOD_2 ( new TYPE_3 ( STRING_1 , STRING_2 , STRING_3 ) ) ) ) ) INIT = ( ( TYPE_1 ) ( TYPE_2 . METHOD_2 ( new TYPE_3 ( STRING_1 , STRING_2 , STRING_3 ) ) ) ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME text ) NAME text ( INIT = STRING_4 ) INIT = STRING_4 ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_3 ( text ) ) INIT = VAR_1 . METHOD_3 ( text ) ) VAR VAR (  VAR_2 . METHOD_4 ( 1 ) )  VAR_2 . METHOD_4 ( 1 ) (  assertEquals ( 1 , VAR_2 . METHOD_5 ( ) ) )  assertEquals ( 1 , VAR_2 . METHOD_5 ( ) ) (  VAR_2 . METHOD_6 ( STRING_5 ) )  VAR_2 . METHOD_6 ( STRING_5 ) (  VAR_2 . METHOD_4 ( 1 ) )  VAR_2 . METHOD_4 ( 1 ) (  assertEquals ( 0 , VAR_2 . METHOD_5 ( ) ) )  assertEquals ( 0 , VAR_2 . METHOD_5 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND STRING_1 . equals ( VAR_1 ) ) COND STRING_1 . equals ( VAR_1 ) ( THEN THEN (  VAR_1 = STRING_2 )  VAR_1 = STRING_2 ) THEN THEN ( ELSE ELSE ( IF IF ( COND STRING_3 . equals ( VAR_1 ) ) COND STRING_3 . equals ( VAR_1 ) ( THEN THEN (  VAR_1 = STRING_4 )  VAR_1 = STRING_4 ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_2 ( VAR_1 ) ) INIT = TYPE_2 . METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_2 == 0 ) COND VAR_2 == 0 ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF (  TYPE_2 . METHOD_3 ( VAR_2 , VAR_3 ) )  TYPE_2 . METHOD_3 ( VAR_2 , VAR_3 ) (  TYPE_2 . METHOD_4 ( VAR_2 , VAR_4 ) )  TYPE_2 . METHOD_4 ( VAR_2 , VAR_4 ) (  return new TYPE_1 ( VAR_2 ) ; )  return new TYPE_1 ( VAR_2 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = INT_1 ) INIT = INT_1 ) VAR VAR ( VAR VAR ( TYPE android.os.Bundle ) TYPE android.os.Bundle ( NAME args ) NAME args ( INIT = new android.os.Bundle ( ) ) INIT = new android.os.Bundle ( ) ) VAR VAR (  args . METHOD_2 ( STRING_1 , VAR_1 ) )  args . METHOD_2 ( STRING_1 , VAR_1 ) (  args . METHOD_2 ( STRING_2 , VAR_2 ) )  args . METHOD_2 ( STRING_2 , VAR_2 ) (  TYPE_2 . METHOD_3 ( TYPE_3 . METHOD_4 ( args ) . toString ( ) ) )  TYPE_2 . METHOD_3 ( TYPE_3 . METHOD_4 ( args ) . toString ( ) ) (  org.mockito.Mockito.verify ( VAR_3 ) . METHOD_5 ( VAR_1 , VAR_4 , false ) )  org.mockito.Mockito.verify ( VAR_3 ) . METHOD_5 ( VAR_1 , VAR_4 , false ) (  TYPE_4 . METHOD_6 ( VAR_3 ) )  TYPE_4 . METHOD_6 ( VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE double ) TYPE double ( NAME number ) NAME number ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_6 ) == ( VAR_7 ) ) COND ( VAR_6 ) == ( VAR_7 ) ( THEN THEN (  return METHOD_1 ( VAR_8 . METHOD_2 ( METHOD_3 ( number ) ) , result , VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; )  return METHOD_1 ( VAR_8 . METHOD_2 ( METHOD_3 ( number ) ) , result , VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; ) THEN THEN ( ELSE ELSE (  return METHOD_1 ( result , VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; )  return METHOD_1 ( result , VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME subId ) NAME subId ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( subId ) ) INIT = METHOD_2 ( subId ) ) VAR VAR ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN ( IF IF ( COND ! ( TYPE_2 . METHOD_3 ( mContext , VAR_1 , STRING_1 ) ) ) COND ! ( TYPE_2 . METHOD_3 ( mContext , VAR_1 , STRING_1 ) ) ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF (  return VAR_2 . METHOD_4 ( ) ; )  return VAR_2 . METHOD_4 ( ) ; ) THEN THEN ( ELSE ELSE (  loge ( ( STRING_2 + subId ) ) )  loge ( ( STRING_2 + subId ) ) (  return null ; )  return null ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE char ) TYPE char ( NAME x ) NAME x ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  throw new TYPE_2 ( ) ; )  throw new TYPE_2 ( ) ; ) THEN THEN ) IF IF ( IF IF ( COND ! ( VAR_2 ) ) COND ! ( VAR_2 ) ( THEN THEN (  throw new TYPE_3 ( STRING_1 ) ; )  throw new TYPE_3 ( STRING_1 ) ; ) THEN THEN ) IF IF (  METHOD_1 ( METHOD_2 ( METHOD_3 ( VAR_3 ) ) , x ) )  METHOD_1 ( METHOD_2 ( METHOD_3 ( VAR_3 ) ) , x ) (  return this ; )  return this ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME context ) NAME context ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ( INIT = context . METHOD_2 ( VAR_2 class ) ) INIT = context . METHOD_2 ( VAR_2 class ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_3 = VAR_1 . METHOD_3 ( ) )  VAR_3 = VAR_1 . METHOD_3 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME e ) NAME e ( BLOCK BLOCK (  throw TYPE_5 . METHOD_4 ( ( STRING_1 + e ) ) ; )  throw TYPE_5 . METHOD_4 ( ( STRING_1 + e ) ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( IN VAR_3 ) IN VAR_3 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_1 . METHOD_5 ( VAR_4 ) ) INIT = VAR_1 . METHOD_5 ( VAR_4 ) ) VAR VAR ( IF IF ( COND VAR_5 . METHOD_6 ( VAR_6 ) ) COND VAR_5 . METHOD_6 ( VAR_6 ) ( THEN THEN (  return VAR_4 ; )  return VAR_4 ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  throw TYPE_5 . METHOD_4 ( STRING_2 ) ; )  throw TYPE_5 . METHOD_4 ( STRING_2 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.io.File ( VAR_1 ) ) INIT = new java.io.File ( VAR_1 ) ) VAR VAR (  TYPE_1 . METHOD_2 ( VAR_2 , new TYPE_2 ( VAR_2 ) , VAR_3 ) )  TYPE_1 . METHOD_2 ( VAR_2 , new TYPE_2 ( VAR_2 ) , VAR_3 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK (  return false ; )  return false ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME a ) NAME a ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME b ) NAME b ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND a != b ) COND a != b ( THEN THEN (  assertEquals ( a . METHOD_2 ( ) . METHOD_3 ( ) , b . METHOD_2 ( ) . METHOD_3 ( ) ) )  assertEquals ( a . METHOD_2 ( ) . METHOD_3 ( ) , b . METHOD_2 ( ) . METHOD_3 ( ) ) (  assertEquals ( a . METHOD_2 ( ) . METHOD_4 ( ) , b . METHOD_2 ( ) . METHOD_4 ( ) ) )  assertEquals ( a . METHOD_2 ( ) . METHOD_4 ( ) , b . METHOD_2 ( ) . METHOD_4 ( ) ) (  assertEquals ( a . METHOD_5 ( ) , b . METHOD_5 ( ) ) )  assertEquals ( a . METHOD_5 ( ) , b . METHOD_5 ( ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  android.util.Log.v ( VAR_2 . TAG , STRING_1 ) )  android.util.Log.v ( VAR_2 . TAG , STRING_1 ) ) THEN THEN ) IF IF (  METHOD_2 ( ) )  METHOD_2 ( ) ( IF IF ( COND ( VAR_3 ) != null ) COND ( VAR_3 ) != null ( THEN THEN (  VAR_3 . METHOD_3 ( ) )  VAR_3 . METHOD_3 ( ) ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_4 ) != null ) COND ( VAR_4 ) != null ( THEN THEN (  VAR_4 . METHOD_3 ( ) )  VAR_4 . METHOD_3 ( ) ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_5 ) != null ) COND ( VAR_5 ) != null ( THEN THEN (  VAR_5 . METHOD_4 ( null ) )  VAR_5 . METHOD_4 ( null ) ) THEN THEN ) IF IF (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( 1 ) ) INIT = new TYPE_1 ( 1 ) ) VAR VAR ( VAR VAR ( TYPE java.lang.Integer[] ) TYPE java.lang.Integer[] ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.lang.Integer [ VAR_3 ] ) INIT = new java.lang.Integer [ VAR_3 ] ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < ( VAR_3 ) ) COND i < ( VAR_3 ) ( UPDATE UPDATE (  ++ i )  ++ i ) UPDATE UPDATE ( BLOCK BLOCK (  VAR_2 [ i ] = new java.lang.Integer ( i ) )  VAR_2 [ i ] = new java.lang.Integer ( i ) ) BLOCK BLOCK ) FOR FOR (  VAR_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_2 ) ) )  VAR_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_2 ) ) (  METHOD_4 ( ) )  METHOD_4 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME parent ) NAME parent ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME path ) NAME path ( INIT = TYPE_5 . METHOD_2 ( parent , ( ( TYPE_2 ) ( VAR_1 . METHOD_3 ( ) ) ) ) . append ( VAR_1 . getName ( ) ) ) INIT = TYPE_5 . METHOD_2 ( parent , ( ( TYPE_2 ) ( VAR_1 . METHOD_3 ( ) ) ) ) . append ( VAR_1 . getName ( ) ) ) VAR VAR (  return new TYPE_1 ( path . toString ( ) , CHAR_1 ) ; )  return new TYPE_1 ( path . toString ( ) , CHAR_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME v ) NAME v ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  TYPE_3 . METHOD_2 ( v , TYPE_4 . METHOD_1 ( ) ) )  TYPE_3 . METHOD_2 ( v , TYPE_4 . METHOD_1 ( ) ) (  TYPE_3 . METHOD_2 ( v , TYPE_5 . METHOD_1 ( ) ) )  TYPE_3 . METHOD_2 ( v , TYPE_5 . METHOD_1 ( ) ) (  TYPE_3 . METHOD_2 ( v , TYPE_6 . METHOD_1 ( ) ) )  TYPE_3 . METHOD_2 ( v , TYPE_6 . METHOD_1 ( ) ) (  TYPE_3 . METHOD_2 ( v , TYPE_7 . METHOD_1 ( ) ) )  TYPE_3 . METHOD_2 ( v , TYPE_7 . METHOD_1 ( ) ) (  return v . METHOD_3 ( ) ; )  return v . METHOD_3 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  this )  this ( BLOCK BLOCK ( IF IF ( COND ( ! ( METHOD_2 ( VAR_2 , VAR_1 , TYPE_2 . METHOD_3 ( ) ) ) ) || ( METHOD_4 ( ) ) ) COND ( ! ( METHOD_2 ( VAR_2 , VAR_1 , TYPE_2 . METHOD_3 ( ) ) ) ) || ( METHOD_4 ( ) ) ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_5 ( ) ) INIT = METHOD_5 ( ) ) VAR VAR (  return ( VAR_4 ) != null ? VAR_4 . METHOD_6 ( ) : null ; )  return ( VAR_4 ) != null ? VAR_4 . METHOD_6 ( ) : null ; ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME context ) NAME context ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_2 . METHOD_2 ( VAR_1 ) )  TYPE_2 . METHOD_2 ( VAR_1 ) ( IF IF ( COND TYPE_3 . METHOD_3 ( context ) ) COND TYPE_3 . METHOD_3 ( context ) ( THEN THEN (  return VAR_2 . METHOD_4 ( VAR_3 ) ; )  return VAR_2 . METHOD_4 ( VAR_3 ) ; ) THEN THEN ( ELSE ELSE (  return TYPE_3 . METHOD_5 ( context ) . METHOD_4 ( VAR_3 , 0 ) ; )  return TYPE_3 . METHOD_5 ( context ) . METHOD_4 ( VAR_3 , 0 ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME count ) NAME count ( INIT = VAR_1 . METHOD_2 ( ) . get ( ) ) INIT = VAR_1 . METHOD_2 ( ) . get ( ) ) VAR VAR ( IF IF ( COND count == 0 ) COND count == 0 ( THEN THEN ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . get ( getElement ( ) ) ) INIT = VAR_3 . get ( getElement ( ) ) ) VAR VAR ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN (  count = VAR_2 . get ( ) )  count = VAR_2 . get ( ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return count ; )  return count ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME number ) NAME number ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.StringBuilder ) TYPE java.lang.StringBuilder ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.lang.StringBuilder ( ) ) INIT = new java.lang.StringBuilder ( ) ) VAR VAR ( IF IF ( COND number . METHOD_2 ( ) ) COND number . METHOD_2 ( ) ( THEN THEN ( VAR VAR ( TYPE char[] ) TYPE char[] ( NAME VAR_2 ) NAME VAR_2 ( INIT = new char [ number . METHOD_3 ( ) ] ) INIT = new char [ number . METHOD_3 ( ) ] ) VAR VAR (  TYPE_2 . METHOD_4 ( VAR_2 , CHAR_1 ) )  TYPE_2 . METHOD_4 ( VAR_2 , CHAR_1 ) (  VAR_1 . append ( new java.lang.String ( VAR_2 ) ) )  VAR_1 . append ( new java.lang.String ( VAR_2 ) ) ) THEN THEN ) IF IF (  VAR_1 . append ( number . METHOD_5 ( ) ) )  VAR_1 . append ( number . METHOD_5 ( ) ) (  return VAR_1 . toString ( ) ; )  return VAR_1 . toString ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME m ) NAME m ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME v ) NAME v ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME value ) NAME value ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = false ) INIT = false ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( IF IF ( COND v == null ) COND v == null ( THEN THEN (  m . METHOD_2 ( value ) )  m . METHOD_2 ( value ) ) THEN THEN ( ELSE ELSE (  m . METHOD_2 ( v , value ) )  m . METHOD_2 ( v , value ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_2 = true )  VAR_2 = true ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  TYPE_4 . METHOD_3 ( VAR_2 , VAR_1 ) )  TYPE_4 . METHOD_3 ( VAR_2 , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME request ) NAME request ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = request . METHOD_2 ( STRING_1 ) ) INIT = request . METHOD_2 ( STRING_1 ) ) VAR VAR (  VAR_1 . METHOD_3 ( new TYPE_1 ( VAR_3 , VAR_2 . METHOD_4 ( ) , ( STRING_2 + VAR_2 ) ) ) )  VAR_1 . METHOD_3 ( new TYPE_1 ( VAR_3 , VAR_2 . METHOD_4 ( ) , ( STRING_2 + VAR_2 ) ) ) ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME time ) NAME time ( INIT = request . METHOD_2 ( STRING_3 ) ) INIT = request . METHOD_2 ( STRING_3 ) ) VAR VAR (  VAR_1 . METHOD_3 ( new TYPE_1 ( VAR_4 , ( ( ( STRING_2 + VAR_2 ) + STRING_4 ) + time ) ) ) )  VAR_1 . METHOD_3 ( new TYPE_1 ( VAR_4 , ( ( ( STRING_2 + VAR_2 ) + STRING_4 ) + time ) ) ) (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( STRING_1 , VAR_2 . METHOD_3 ( ) , VAR_3 ) ) INIT = METHOD_2 ( STRING_1 , VAR_2 . METHOD_3 ( ) , VAR_3 ) ) VAR VAR (  TYPE_2 . when ( VAR_4 . METHOD_4 ( ) ) . thenReturn ( VAR_5 ) )  TYPE_2 . when ( VAR_4 . METHOD_4 ( ) ) . thenReturn ( VAR_5 ) (  TYPE_2 . when ( VAR_4 . METHOD_5 ( ) ) . thenReturn ( VAR_6 ) )  TYPE_2 . when ( VAR_4 . METHOD_5 ( ) ) . thenReturn ( VAR_6 ) (  VAR_3 . METHOD_6 ( VAR_7 , VAR_8 ) )  VAR_3 . METHOD_6 ( VAR_7 , VAR_8 ) (  assertEquals ( VAR_9 , VAR_10 . METHOD_7 ( VAR_11 ) . METHOD_8 ( ) ) )  assertEquals ( VAR_9 , VAR_10 . METHOD_7 ( VAR_11 ) . METHOD_8 ( ) ) (  assertEquals ( VAR_9 , VAR_12 . METHOD_7 ( VAR_11 ) . METHOD_8 ( ) ) )  assertEquals ( VAR_9 , VAR_12 . METHOD_7 ( VAR_11 ) . METHOD_8 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( null , STRING_1 , VAR_2 . TAG , null , null , null , null , false ) )  VAR_1 . METHOD_2 ( null , STRING_1 , VAR_2 . TAG , null , null , null , null , false ) (  verify ( VAR_3 , METHOD_3 ( 0 ) ) . METHOD_4 ( METHOD_5 ( ) , METHOD_5 ( ) , METHOD_6 ( ) , METHOD_6 ( ) , METHOD_7 ( VAR_4 class ) ) )  verify ( VAR_3 , METHOD_3 ( 0 ) ) . METHOD_4 ( METHOD_5 ( ) , METHOD_5 ( ) , METHOD_6 ( ) , METHOD_6 ( ) , METHOD_7 ( VAR_4 class ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( STRING_1 , null , VAR_1 , TYPE_1 . METHOD_3 ( ) , VAR_2 ) )  METHOD_2 ( STRING_1 , null , VAR_1 , TYPE_1 . METHOD_3 ( ) , VAR_2 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME call ) NAME call ( INIT = VAR_3 . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( ) . METHOD_7 ( ) ) INIT = VAR_3 . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( ) . METHOD_7 ( ) ) VAR VAR (  assertEquals ( VAR_2 , call . METHOD_9 ( ) ) )  assertEquals ( VAR_2 , call . METHOD_9 ( ) ) (  call . METHOD_10 ( VAR_4 . METHOD_11 ( ) ) )  call . METHOD_10 ( VAR_4 . METHOD_11 ( ) ) (  assertEquals ( VAR_5 , call . METHOD_9 ( ) ) )  assertEquals ( VAR_5 , call . METHOD_9 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE float ) TYPE float ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE float ) TYPE float ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE float ) TYPE float ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE float ) TYPE float ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME d ) NAME d ( INIT = VAR_6 . METHOD_2 ( VAR_1 ) ) INIT = VAR_6 . METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND d == null ) COND d == null ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  d . METHOD_3 ( TYPE_1 . METHOD_4 ( VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ) )  d . METHOD_3 ( TYPE_1 . METHOD_4 ( VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ) (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME content ) NAME content ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME f ) NAME f ( INIT = java.io.File . METHOD_2 ( STRING_1 , STRING_2 ) ) INIT = java.io.File . METHOD_2 ( STRING_1 , STRING_2 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( f ) ) INIT = new TYPE_1 ( f ) ) VAR VAR (  VAR_1 . METHOD_3 ( content ) )  VAR_1 . METHOD_3 ( content ) (  VAR_1 . METHOD_4 ( ) )  VAR_1 . METHOD_4 ( ) (  return f . METHOD_5 ( ) ; )  return f . METHOD_5 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_2 . METHOD_2 ( ) ) COND VAR_2 . METHOD_2 ( ) ( THEN THEN (  METHOD_3 ( VAR_3 , false , 0 ) )  METHOD_3 ( VAR_3 , false , 0 ) ) THEN THEN ( ELSE ELSE (  METHOD_4 ( VAR_3 , false ) )  METHOD_4 ( VAR_3 , false ) ( TRY TRY ( BLOCK BLOCK (  VAR_4 . METHOD_5 ( VAR_5 , VAR_3 , false ) )  VAR_4 . METHOD_5 ( VAR_5 , VAR_3 , false ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME e ) NAME e ( BLOCK BLOCK (  android.util.Log.d ( VAR_6 . TAG , STRING_1 , e ) )  android.util.Log.d ( VAR_6 . TAG , STRING_1 , e ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE float ) TYPE float ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE float ) TYPE float ( NAME t ) NAME t ) VAR VAR ( VAR VAR ( TYPE float ) TYPE float ( NAME r ) NAME r ) VAR VAR ( VAR VAR ( TYPE float ) TYPE float ( NAME b ) NAME b ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_6 . METHOD_2 ( VAR_1 ) ) INIT = VAR_6 . METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_5 == null ) COND VAR_5 == null ( THEN THEN (  return 0 ; )  return 0 ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_7 ) NAME VAR_7 ( INIT = TYPE_2 . METHOD_2 ( VAR_3 ) ) INIT = TYPE_2 . METHOD_2 ( VAR_3 ) ) VAR VAR ( IF IF ( COND VAR_7 == null ) COND VAR_7 == null ( THEN THEN (  return 0 ; )  return 0 ; ) THEN THEN ) IF IF (  return VAR_5 . METHOD_3 ( new TYPE_3 ( VAR_2 , t , r , b ) , VAR_7 , VAR_4 ) ; )  return VAR_5 . METHOD_3 ( new TYPE_3 ( VAR_2 , t , r , b ) , VAR_7 , VAR_4 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_3 ( ) ) INIT = METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 . METHOD_4 ( VAR_5 ) ) INIT = VAR_4 . METHOD_4 ( VAR_5 ) ) VAR VAR (  org.mockito.Mockito.verify ( VAR_6 ) . METHOD_5 ( org.mockito.Matchers.eq ( VAR_1 ) ) )  org.mockito.Mockito.verify ( VAR_6 ) . METHOD_5 ( org.mockito.Matchers.eq ( VAR_1 ) ) (  org.mockito.Mockito.verify ( VAR_6 ) . METHOD_6 ( org.mockito.Matchers.eq ( VAR_2 ) ) )  org.mockito.Mockito.verify ( VAR_6 ) . METHOD_6 ( org.mockito.Matchers.eq ( VAR_2 ) ) (  assertEquals ( VAR_3 , true ) )  assertEquals ( VAR_3 , true ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE android.os.Message ) TYPE android.os.Message ( NAME msg ) NAME msg ( INIT = VAR_5 . METHOD_2 ( VAR_6 ) ) INIT = VAR_5 . METHOD_2 ( VAR_6 ) ) VAR VAR (  msg.arg1 = VAR_7 )  msg.arg1 = VAR_7 (  VAR_8 = VAR_1 )  VAR_8 = VAR_1 (  msg.obj = VAR_3 )  msg.obj = VAR_3 (  msg . METHOD_3 ( ) . METHOD_4 ( VAR_9 , VAR_2 ) )  msg . METHOD_3 ( ) . METHOD_4 ( VAR_9 , VAR_2 ) (  msg . METHOD_3 ( ) . METHOD_4 ( VAR_10 , VAR_4 ) )  msg . METHOD_3 ( ) . METHOD_4 ( VAR_10 , VAR_4 ) (  VAR_5 . METHOD_5 ( msg ) )  VAR_5 . METHOD_5 ( msg ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME text ) NAME text ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME start ) NAME start ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE float ) TYPE float ( NAME x ) NAME x ) VAR VAR ( VAR VAR ( TYPE float ) TYPE float ( NAME y ) NAME y ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME flags ) NAME flags ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME count ) NAME count ( INIT = VAR_2 - start ) INIT = VAR_2 - start ) VAR VAR ( VAR VAR ( TYPE char[] ) TYPE char[] ( NAME VAR_6 ) NAME VAR_6 ( INIT = TYPE_1 . METHOD_2 ( count ) ) INIT = TYPE_1 . METHOD_2 ( count ) ) VAR VAR (  TYPE_2 . METHOD_3 ( text , start , VAR_2 , VAR_6 , 0 ) )  TYPE_2 . METHOD_3 ( text , start , VAR_2 , VAR_6 , 0 ) (  TYPE_3 . METHOD_4 ( VAR_1 , VAR_6 , 0 , count , x , y , flags , VAR_5 ) )  TYPE_3 . METHOD_4 ( VAR_1 , VAR_6 , 0 , count , x , y , flags , VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME field ) NAME field ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME value ) NAME value ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME entry ) NAME entry ( INIT = VAR_4 . get ( field ) ) INIT = VAR_4 . get ( field ) ) VAR VAR ( IF IF ( COND entry == null ) COND entry == null ( THEN THEN (  entry = new TYPE_3 ( TYPE_4 . METHOD_2 ( ) , VAR_1 , source , VAR_2 , VAR_3 , true ) )  entry = new TYPE_3 ( TYPE_4 . METHOD_2 ( ) , VAR_1 , source , VAR_2 , VAR_3 , true ) (  VAR_4 . METHOD_3 ( field , entry ) )  VAR_4 . METHOD_3 ( field , entry ) (  METHOD_4 ( field ) )  METHOD_4 ( field ) ) THEN THEN ) IF IF (  entry . METHOD_5 ( VAR_1 , value ) )  entry . METHOD_5 ( VAR_1 , value ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME w ) NAME w ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME h ) NAME h ) VAR VAR ( VAR VAR ( TYPE short[] ) TYPE short[] ( NAME data ) NAME data ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  mRS . METHOD_2 ( ) )  mRS . METHOD_2 ( ) (  METHOD_3 ( VAR_1 , VAR_2 , w , h ) )  METHOD_3 ( VAR_1 , VAR_2 , w , h ) (  mRS . METHOD_4 ( METHOD_5 ( ) , VAR_1 , VAR_2 , VAR_3 , VAR_4 , w , h , data , ( ( data . length ) * 2 ) ) )  mRS . METHOD_4 ( METHOD_5 ( ) , VAR_1 , VAR_2 , VAR_3 , VAR_4 , w , h , data , ( ( data . length ) * 2 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( VAR_2 ) )  METHOD_2 ( VAR_2 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME config ) NAME config ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_4 = VAR_1 )  VAR_4 = VAR_1 (  assertTrue ( VAR_5 . METHOD_3 ( config , VAR_3 ) ) )  assertTrue ( VAR_5 . METHOD_3 ( config , VAR_3 ) ) (  METHOD_4 ( VAR_2 , VAR_3 , 1 ) )  METHOD_4 ( VAR_2 , VAR_3 , 1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_1 ) ) COND ! ( VAR_1 ) ( THEN THEN (  throw new TYPE_2 ( STRING_1 ) ; )  throw new TYPE_2 ( STRING_1 ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = this . METHOD_2 ( ) ) INIT = this . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = this . METHOD_3 ( ) ) INIT = this . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ( INIT = ( VAR_2 <= VAR_3 ) ? VAR_3 - VAR_2 : 0 ) INIT = ( VAR_2 <= VAR_3 ) ? VAR_3 - VAR_2 : 0 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME size ) NAME size ( INIT = VAR_4 > > 1 ) INIT = VAR_4 > > 1 ) VAR VAR (  return ( ( TYPE_1 ) ( new TYPE_3 ( this , ( - 1 ) , 0 , size , size , VAR_2 , METHOD_4 ( ) ) ) ) ; )  return ( ( TYPE_1 ) ( new TYPE_3 ( this , ( - 1 ) , 0 , size , size , VAR_2 , METHOD_4 ( ) ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<android.bluetooth.BluetoothDevice> ) RETURN java.util.List<android.bluetooth.BluetoothDevice> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int[] ) TYPE int[] ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  android.util.Log.v ( VAR_3 . TAG , ( STRING_1 + ( TYPE_1 . toString ( VAR_1 ) ) ) ) )  android.util.Log.v ( VAR_3 . TAG , ( STRING_1 + ( TYPE_1 . toString ( VAR_1 ) ) ) ) ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME service ) NAME service ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( IF IF ( COND service == null ) COND service == null ( THEN THEN (  return new java.util.ArrayList < android.bluetooth.BluetoothDevice > ( 0 ) ; )  return new java.util.ArrayList < android.bluetooth.BluetoothDevice > ( 0 ) ; ) THEN THEN ) IF IF (  return service . METHOD_1 ( VAR_1 ) ; )  return service . METHOD_1 ( VAR_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 . METHOD_2 ( this ) ) COND VAR_1 . METHOD_2 ( this ) ( THEN THEN (  VAR_1 . METHOD_3 ( VAR_2 ) )  VAR_1 . METHOD_3 ( VAR_2 ) ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_4 . values ( ) ) IN VAR_4 . values ( ) ( BLOCK BLOCK ( IF IF ( COND VAR_3 == null ) COND VAR_3 == null ( THEN THEN (  throw new java.lang.RuntimeException ( STRING_1 ) ; )  throw new java.lang.RuntimeException ( STRING_1 ) ; ) THEN THEN ) IF IF (  VAR_1 . METHOD_3 ( VAR_3 ) )  VAR_1 . METHOD_3 ( VAR_3 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF (  VAR_1 . METHOD_4 ( this ) )  VAR_1 . METHOD_4 ( this ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( PARAMS PARAMS ( VAR VAR ( TYPE com.android.jack.ir.ast.JMethod ) TYPE com.android.jack.ir.ast.JMethod ( NAME method ) NAME method ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( ( method . METHOD_1 ( ) . METHOD_2 ( ) ) || ( method . METHOD_3 ( ) ) ) || ( method . METHOD_4 ( ) ) ) || ( ! ( VAR_1 . METHOD_5 ( this . METHOD_6 ( ) , method ) ) ) ) COND ( ( ( method . METHOD_1 ( ) . METHOD_2 ( ) ) || ( method . METHOD_3 ( ) ) ) || ( method . METHOD_4 ( ) ) ) || ( ! ( VAR_1 . METHOD_5 ( this . METHOD_6 ( ) , method ) ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME s ) NAME s ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  s . METHOD_5 ( method ) )  s . METHOD_5 ( method ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 . size ( ) ) == 0 ) COND ( VAR_1 . size ( ) ) == 0 ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_2<java.lang.String,TYPE_3> ) TYPE TYPE_2<java.lang.String,TYPE_3> ( NAME entry ) NAME entry ( IN VAR_1 . METHOD_2 ( ) ) IN VAR_1 . METHOD_2 ( ) ( BLOCK BLOCK (  VAR_2 . METHOD_3 ( entry . METHOD_4 ( ) . METHOD_5 ( ) ) )  VAR_2 . METHOD_3 ( entry . METHOD_4 ( ) . METHOD_5 ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME session ) NAME session ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME s ) NAME s ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME c ) NAME c ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME fd ) NAME fd ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME callback ) NAME callback ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_4 . METHOD_2 ( s , fd , callback , VAR_2 , 0 , VAR_2 . length , 0 ) )  TYPE_4 . METHOD_2 ( s , fd , callback , VAR_2 , 0 , VAR_2 . length , 0 ) (  super . METHOD_1 ( session , s , c , VAR_1 , fd , callback ) )  super . METHOD_1 ( session , s , c , VAR_1 , fd , callback ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) . get ( 2 , VAR_2 ) ) INIT = METHOD_2 ( ) . get ( 2 , VAR_2 ) ) VAR VAR ( IF IF ( COND ( VAR_1 == null ) || ( ( VAR_1 . length ) == 0 ) ) COND ( VAR_1 == null ) || ( ( VAR_1 . length ) == 0 ) ( THEN THEN (  fail ( STRING_1 ) )  fail ( STRING_1 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) == null ) COND ( VAR_1 ) == null ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND ! ( VAR_2 instanceof TYPE_2 ) ) COND ! ( VAR_2 instanceof TYPE_2 ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( ( TYPE_2 ) ( VAR_2 ) ) ) INIT = ( ( TYPE_2 ) ( VAR_2 ) ) ) VAR VAR (  return ( VAR_3 . METHOD_3 ( ) ) && ( VAR_3 . METHOD_1 ( ) ) ; )  return ( VAR_3 . METHOD_3 ( ) ) && ( VAR_3 . METHOD_1 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( STRING_1 ) )  METHOD_2 ( STRING_1 ) (  TYPE_2 . METHOD_3 ( ( STRING_1 + STRING_2 ) ) )  TYPE_2 . METHOD_3 ( ( STRING_1 + STRING_2 ) ) ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  throw new java.lang.NullPointerException ( STRING_3 ) ; )  throw new java.lang.NullPointerException ( STRING_3 ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME error ) NAME error ( INIT = METHOD_4 ( VAR_1 , VAR_2 ) ) INIT = METHOD_4 ( VAR_1 , VAR_2 ) ) VAR VAR ( IF IF ( COND error != null ) COND error != null ( THEN THEN (  throw new TYPE_3 ( error ) ; )  throw new TYPE_3 ( error ) ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_2 . METHOD_2 ( ) )  VAR_2 . METHOD_2 ( ) (  VAR_1 . METHOD_3 ( VAR_3 . METHOD_4 ( ) ) )  VAR_1 . METHOD_3 ( VAR_3 . METHOD_4 ( ) ) ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_2 . METHOD_5 ( ) ) INIT = VAR_2 . METHOD_5 ( ) ) VAR VAR (  METHOD_6 ( VAR_5 , VAR_3 , VAR_4 ) )  METHOD_6 ( VAR_5 , VAR_3 , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME text ) NAME text ( INIT = VAR_2 . METHOD_2 ( ) ) INIT = VAR_2 . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND ! ( VAR_3 . equals ( text ) ) ) COND ! ( VAR_3 . equals ( text ) ) ( THEN THEN (  VAR_4 = true )  VAR_4 = true ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_5 ) NAME VAR_5 ( INIT = METHOD_3 ( VAR_1 , text ) ) INIT = METHOD_3 ( VAR_1 , text ) ) VAR VAR ( IF IF ( COND ! VAR_5 ) COND ! VAR_5 ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ) BLOCK BLOCK ( FINALLY FINALLY (  VAR_4 = false )  VAR_4 = false ) FINALLY FINALLY ) TRY TRY (  VAR_3 = text )  VAR_3 = text ) THEN THEN ) IF IF (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( VAR_2 ) + 1 ) INIT = ( VAR_2 ) + 1 ) VAR VAR (  when ( VAR_3 . METHOD_2 ( VAR_1 ) ) . thenReturn ( false ) )  when ( VAR_3 . METHOD_2 ( VAR_1 ) ) . thenReturn ( false ) (  VAR_4 . METHOD_3 ( VAR_1 ) )  VAR_4 . METHOD_3 ( VAR_1 ) (  VAR_5 . verify ( VAR_6 , METHOD_4 ( ) ) . METHOD_5 ( METHOD_6 ( VAR_7 class ) ) )  VAR_5 . verify ( VAR_6 , METHOD_4 ( ) ) . METHOD_5 ( METHOD_6 ( VAR_7 class ) ) (  VAR_5 . verify ( VAR_6 , METHOD_4 ( ) ) . METHOD_7 ( METHOD_8 ( ) , METHOD_6 ( VAR_8 class ) ) )  VAR_5 . verify ( VAR_6 , METHOD_4 ( ) ) . METHOD_7 ( METHOD_8 ( ) , METHOD_6 ( VAR_8 class ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME x ) NAME x ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME info ) NAME info ( INIT = METHOD_2 ( x ) ) INIT = METHOD_2 ( x ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_3 ( VAR_3 ) ) INIT = METHOD_3 ( VAR_3 ) ) VAR VAR (  METHOD_4 ( new TYPE_5 ( info , VAR_2 ) ) )  METHOD_4 ( new TYPE_5 ( info , VAR_2 ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Throwable ) TYPE java.lang.Throwable ( NAME e ) NAME e ( BLOCK BLOCK (  throw METHOD_5 ( x , e ) ; )  throw METHOD_5 ( x , e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME netId ) NAME netId ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.String> ) TYPE java.util.Map<java.lang.String,java.lang.String> ( NAME values ) NAME values ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( values ) ) INIT = TYPE_1 . METHOD_2 ( values ) ) VAR VAR ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  return METHOD_3 ( netId , name , ( ( STRING_1 + VAR_1 ) + STRING_1 ) ) ; )  return METHOD_3 ( netId , name , ( ( STRING_1 + VAR_1 ) + STRING_1 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.StringBuilder ) TYPE java.lang.StringBuilder ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.lang.StringBuilder ( ) ) INIT = new java.lang.StringBuilder ( ) ) VAR VAR ( IF IF ( COND ( VAR_2 ) != null ) COND ( VAR_2 ) != null ( THEN THEN (  VAR_1 . append ( VAR_2 ) . append ( CHAR_1 ) )  VAR_1 . append ( VAR_2 ) . append ( CHAR_1 ) ) THEN THEN ) IF IF (  METHOD_2 ( VAR_1 ) )  METHOD_2 ( VAR_1 ) ( IF IF ( COND ( ( VAR_3 ) != null ) && ( ! ( VAR_3 . METHOD_3 ( ) ) ) ) COND ( ( VAR_3 ) != null ) && ( ! ( VAR_3 . METHOD_3 ( ) ) ) ( THEN THEN (  VAR_1 . append ( CHAR_2 ) . append ( VAR_3 . METHOD_4 ( ) ) )  VAR_1 . append ( CHAR_2 ) . append ( VAR_3 . METHOD_4 ( ) ) ) THEN THEN ) IF IF (  return VAR_1 . toString ( ) ; )  return VAR_1 . toString ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public synchronized ) MODIFIER public synchronized ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  VAR_1 = true )  VAR_1 = true ( IF IF ( COND ( VAR_2 ) == null ) COND ( VAR_2 ) == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( TRY TRY ( BLOCK BLOCK (  VAR_3 = new TYPE_1 ( path . METHOD_2 ( ) ) )  VAR_3 = new TYPE_1 ( path . METHOD_2 ( ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME VAR_4 ) NAME VAR_4 ( BLOCK BLOCK (  TYPE_2 . METHOD_3 ( ( STRING_1 + ( path ) ) , VAR_4 ) )  TYPE_2 . METHOD_3 ( ( STRING_1 + ( path ) ) , VAR_4 ) (  VAR_3 = null )  VAR_3 = null ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER synchronized ) MODIFIER synchronized ( RETURN long ) RETURN long ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int[] ) TYPE int[] ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int[] ) TYPE int[] ( NAME src ) NAME src ) VAR VAR ( VAR VAR ( TYPE int[] ) TYPE int[] ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int[] ) TYPE int[] ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE int[] ) TYPE int[] ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  return METHOD_3 ( mContext , VAR_1 , src , VAR_2 , VAR_3 , VAR_4 ) ; )  return METHOD_3 ( mContext , VAR_1 , src , VAR_2 , VAR_3 , VAR_4 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_2 ( ) . get ( VAR_1 ) ) INIT = TYPE_2 . METHOD_2 ( ) . get ( VAR_1 ) ) VAR VAR (  assertNotNull ( VAR_2 ) )  assertNotNull ( VAR_2 ) ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME p ) NAME p ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK (  assertTrue ( ( ( STRING_2 + p ) + STRING_3 ) , p . METHOD_3 ( ) ) )  assertTrue ( ( ( STRING_2 + p ) + STRING_3 ) , p . METHOD_3 ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( STRING_1 ) )  TYPE_1 . METHOD_2 ( STRING_1 ) ( IF IF ( COND ( METHOD_3 ( ) ) != null ) COND ( METHOD_3 ( ) ) != null ( THEN THEN (  ( ( TYPE_2 ) ( METHOD_3 ( ) ) ) . METHOD_4 ( ( ( ( VAR_1 ) == null ) || ( VAR_1 . METHOD_5 ( ) ) ) ) )  ( ( TYPE_2 ) ( METHOD_3 ( ) ) ) . METHOD_4 ( ( ( ( VAR_1 ) == null ) || ( VAR_1 . METHOD_5 ( ) ) ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME listener ) NAME listener ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  VAR_1 )  VAR_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_2 . METHOD_2 ( listener ) ) == false ) COND ( VAR_2 . METHOD_2 ( listener ) ) == false ( THEN THEN (  VAR_2 . METHOD_3 ( listener ) )  VAR_2 . METHOD_3 ( listener ) ( IF IF ( COND ( VAR_3 ) != null ) COND ( VAR_3 ) != null ( THEN THEN ( TRY TRY ( BLOCK BLOCK (  listener . METHOD_4 ( VAR_3 ) )  listener . METHOD_4 ( VAR_3 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ( BLOCK BLOCK (  TYPE_2 . e ( VAR_4 , e ) )  TYPE_2 . e ( VAR_4 , e ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN byte ) RETURN byte ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE byte ) TYPE byte ( NAME in ) NAME in ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND METHOD_2 ( ) ) COND METHOD_2 ( ) ( THEN THEN (  throw new TYPE_1 ( STRING_1 ) ; )  throw new TYPE_1 ( STRING_1 ) ; ) THEN THEN ) IF IF ( IF IF ( COND ( index ) == 0 ) COND ( index ) == 0 ( THEN THEN (  METHOD_3 ( VAR_1 ) )  METHOD_3 ( VAR_1 ) (  METHOD_4 ( ) )  METHOD_4 ( ) ) THEN THEN ) IF IF ( VAR VAR ( TYPE byte ) TYPE byte ( NAME out ) NAME out ( INIT = ( ( byte ) ( ( VAR_1 [ index ] ) ^ in ) ) ) INIT = ( ( byte ) ( ( VAR_1 [ index ] ) ^ in ) ) ) VAR VAR (  index = ( ( index ) + 1 ) & INT_1 )  index = ( ( index ) + 1 ) & INT_1 (  return out ; )  return out ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME type ) NAME type ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  mContext . METHOD_2 ( VAR_2 , STRING_1 ) )  mContext . METHOD_2 ( VAR_2 , STRING_1 ) (  METHOD_3 ( ) )  METHOD_3 ( ) ( IF IF ( COND VAR_3 ) COND VAR_3 ( THEN THEN (  TYPE_1 . i ( TYPE_2 . TAG , STRING_2 ) )  TYPE_1 . i ( TYPE_2 . TAG , STRING_2 ) ) THEN THEN ) IF IF ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME event ) NAME event ( INIT = VAR_4 . METHOD_4 ( STRING_3 , STRING_4 , VAR_5 [ type ] , new TYPE_4 ( METHOD_5 ( VAR_1 ) ) ) ) INIT = VAR_4 . METHOD_4 ( STRING_3 , STRING_4 , VAR_5 [ type ] , new TYPE_4 ( METHOD_5 ( VAR_1 ) ) ) ) VAR VAR (  return java.lang.Integer.parseInt ( event . getMessage ( ) ) ; )  return java.lang.Integer.parseInt ( event . getMessage ( ) ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME e ) NAME e ( BLOCK BLOCK (  return e . METHOD_6 ( ) ; )  return e . METHOD_6 ( ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_3> ) TYPE java.util.List<TYPE_3> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_3> ) TYPE java.util.List<TYPE_3> ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME parent ) NAME parent ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_4 = VAR_5 < TYPE_3 > METHOD_2 ( ) . METHOD_3 ( VAR_3 ) . METHOD_4 ( VAR_4 ) . build ( ) )  VAR_4 = VAR_5 < TYPE_3 > METHOD_2 ( ) . METHOD_3 ( VAR_3 ) . METHOD_4 ( VAR_4 ) . build ( ) ( IF IF ( COND ! ( VAR_2 . METHOD_5 ( ) ) ) COND ! ( VAR_2 . METHOD_5 ( ) ) ( THEN THEN (  parent = TYPE_4 . METHOD_6 ( VAR_2 , VAR_1 , parent ) )  parent = TYPE_4 . METHOD_6 ( VAR_2 , VAR_1 , parent ) ) THEN THEN ) IF IF (  return TYPE_4 . METHOD_6 ( VAR_4 , VAR_1 , parent ) ; )  return TYPE_4 . METHOD_6 ( VAR_4 , VAR_1 , parent ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME args ) NAME args ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME t ) NAME t ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  t . METHOD_2 ( 16 , INT_1 , false ) )  t . METHOD_2 ( 16 , INT_1 , false ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME in ) NAME in ( INIT = t . METHOD_3 ( args . in ) ) INIT = t . METHOD_3 ( args . in ) ) VAR VAR (  args.out = t . METHOD_3 ( TYPE_4 . METHOD_4 ( in . METHOD_5 ( ) ) , TYPE_4 . METHOD_4 ( in . METHOD_6 ( ) ) , TYPE_4 . METHOD_4 ( in . METHOD_7 ( ) ) ) )  args.out = t . METHOD_3 ( TYPE_4 . METHOD_4 ( in . METHOD_5 ( ) ) , TYPE_4 . METHOD_4 ( in . METHOD_6 ( ) ) , TYPE_4 . METHOD_4 ( in . METHOD_7 ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  TYPE_2 . log ( ( STRING_1 + VAR_1 ) ) )  TYPE_2 . log ( ( STRING_1 + VAR_1 ) ) ) THEN THEN ) IF IF (  METHOD_2 ( VAR_1 ) )  METHOD_2 ( VAR_1 ) (  METHOD_3 ( VAR_1 , VAR_3 ) )  METHOD_3 ( VAR_1 , VAR_3 ) ( IF IF ( COND TYPE_2 . METHOD_4 ( mContext ) ) COND TYPE_2 . METHOD_4 ( mContext ) ( THEN THEN (  TYPE_2 . log ( STRING_2 ) )  TYPE_2 . log ( STRING_2 ) ) THEN THEN ( ELSE ELSE (  TYPE_2 . log ( STRING_3 ) )  TYPE_2 . log ( STRING_3 ) (  METHOD_5 ( VAR_1 ) )  METHOD_5 ( VAR_1 ) ) ELSE ELSE ) IF IF ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  TYPE_2 . log ( ( STRING_4 + VAR_1 ) ) )  TYPE_2 . log ( ( STRING_4 + VAR_1 ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . get ( VAR_2 ) ) INIT = TYPE_1 . get ( VAR_2 ) ) VAR VAR ( IF IF ( COND ( ( ! ( TYPE_1 . METHOD_2 ( VAR_3 , false ) ) ) || ( VAR_1 == null ) ) || ( VAR_1 . METHOD_3 ( ) ) ) COND ( ( ! ( TYPE_1 . METHOD_2 ( VAR_3 , false ) ) ) || ( VAR_1 == null ) ) || ( VAR_1 . METHOD_3 ( ) ) ( THEN THEN (  TYPE_2 . METHOD_4 ( VAR_4 ) )  TYPE_2 . METHOD_4 ( VAR_4 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER synchronized ) MODIFIER synchronized ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) ( IF IF ( COND VAR_4 == null ) COND VAR_4 == null ( THEN THEN (  METHOD_3 ( mContext , id , VAR_1 , VAR_2 , VAR_3 ) )  METHOD_3 ( mContext , id , VAR_1 , VAR_2 , VAR_3 ) ) THEN THEN ( ELSE ELSE (  METHOD_3 ( mContext , id , VAR_1 , VAR_2 , VAR_3 , VAR_4 ) )  METHOD_3 ( mContext , id , VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME listener ) NAME listener ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) != null ) COND ( VAR_1 ) != null ( THEN THEN (  android.util.Log.w ( VAR_2 , STRING_1 ) )  android.util.Log.w ( VAR_2 , STRING_1 ) (  return ; )  return ; ) THEN THEN ) IF IF (  VAR_1 = ( listener != null ) ? listener : new TYPE_1 ( ) )  VAR_1 = ( listener != null ) ? listener : new TYPE_1 ( ) (  VAR_1 . METHOD_2 ( VAR_3 , VAR_4 , VAR_5 ) )  VAR_1 . METHOD_2 ( VAR_3 , VAR_4 , VAR_5 ) ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_6 ) NAME VAR_6 ( INIT = TYPE_2 . METHOD_3 ( VAR_3 , STRING_2 ) ) INIT = TYPE_2 . METHOD_3 ( VAR_3 , STRING_2 ) ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME result ) NAME result ( INIT = VAR_7 . METHOD_1 ( VAR_1 , VAR_3 , VAR_4 , VAR_5 ) ) INIT = VAR_7 . METHOD_1 ( VAR_1 , VAR_3 , VAR_4 , VAR_5 ) ) VAR VAR (  TYPE_3 . assertTrue ( VAR_6 , result ) )  TYPE_3 . assertTrue ( VAR_6 , result ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME x ) NAME x ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME info ) NAME info ( INIT = METHOD_2 ( x ) ) INIT = METHOD_2 ( x ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_4 ) ( VAR_3 ) ) ) INIT = ( ( TYPE_4 ) ( VAR_3 ) ) ) VAR VAR (  METHOD_3 ( METHOD_4 ( info , VAR_2 , true , VAR_1 ) ) )  METHOD_3 ( METHOD_4 ( info , VAR_2 , true , VAR_1 ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME e ) NAME e ( BLOCK BLOCK (  throw METHOD_5 ( x , e ) ; )  throw METHOD_5 ( x , e ) ; ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE java.lang.RuntimeException ) TYPE java.lang.RuntimeException ( NAME e ) NAME e ( BLOCK BLOCK (  throw METHOD_5 ( x , e ) ; )  throw METHOD_5 ( x , e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  METHOD_3 ( ) )  METHOD_3 ( ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_4 ( 100 ) ) INIT = TYPE_2 . METHOD_4 ( 100 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_4 ( 100 ) ) INIT = TYPE_2 . METHOD_4 ( 100 ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_3 . METHOD_5 ( VAR_1 , new TYPE_2 [ ] { VAR_2 } ) )  VAR_3 . METHOD_5 ( VAR_1 , new TYPE_2 [ ] { VAR_2 } ) (  fail ( STRING_1 ) )  fail ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME ex ) NAME ex ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( STRING_1 , STRING_2 ) ) INIT = TYPE_1 . METHOD_2 ( STRING_1 , STRING_2 ) ) VAR VAR (  METHOD_3 ( VAR_1 , true , STRING_3 ) )  METHOD_3 ( VAR_1 , true , STRING_3 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 ( VAR_1 ) ) INIT = new TYPE_2 ( VAR_1 ) ) VAR VAR (  METHOD_4 ( VAR_2 , VAR_3 , STRING_4 ) )  METHOD_4 ( VAR_2 , VAR_3 , STRING_4 ) (  METHOD_4 ( VAR_2 , VAR_4 , STRING_5 ) )  METHOD_4 ( VAR_2 , VAR_4 , STRING_5 ) (  METHOD_4 ( VAR_2 , VAR_5 , STRING_6 ) )  METHOD_4 ( VAR_2 , VAR_5 , STRING_6 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME data ) NAME data ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2[] ) TYPE TYPE_2[] ( NAME VAR_1 ) NAME VAR_1 ( INIT = null ) INIT = null ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = 0 ) INIT = 0 ) VAR VAR ( IF IF ( COND data == null ) COND data == null ( THEN THEN (  return VAR_3 ; )  return VAR_3 ; ) THEN THEN ) IF IF ( SWITCH SWITCH ( NAME VAR_4 ) NAME VAR_4 ( CASE VAR_5 ( BLOCK BLOCK (  VAR_6 . METHOD_2 ( ( ( TYPE_2 ) ( data ) ) ) )  VAR_6 . METHOD_2 ( ( ( TYPE_2 ) ( data ) ) ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_5 ( CASE VAR_7 ( BLOCK BLOCK (  VAR_1 = ( ( TYPE_2 [ ] ) ( data ) ) )  VAR_1 = ( ( TYPE_2 [ ] ) ( data ) ) ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_8 ) NAME VAR_8 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  VAR_6 . METHOD_2 ( VAR_8 ) )  VAR_6 . METHOD_2 ( VAR_8 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_7 ) SWITCH SWITCH (  return VAR_9 ; )  return VAR_9 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME path ) NAME path ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( ) )  VAR_1 . METHOD_2 ( ) ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . METHOD_3 ( VAR_2 , path ) ) INIT = VAR_1 . METHOD_3 ( VAR_2 , path ) ) VAR VAR ( IF IF ( COND VAR_3 == 0 ) COND VAR_3 == 0 ( THEN THEN (  throw new android.renderscript.RSRuntimeException ( ( STRING_1 + path ) ) ; )  throw new android.renderscript.RSRuntimeException ( ( STRING_1 + path ) ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_1 ( VAR_3 , VAR_1 , null ) ) INIT = new TYPE_1 ( VAR_3 , VAR_1 , null ) ) VAR VAR (  VAR_4 . METHOD_4 ( ) )  VAR_4 . METHOD_4 ( ) (  return VAR_4 ; )  return VAR_4 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.Integer[] ) TYPE java.lang.Integer[] ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.lang.Integer [ VAR_3 ] ) INIT = new java.lang.Integer [ VAR_3 ] ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < ( ( VAR_3 ) - 1 ) ) COND i < ( ( VAR_3 ) - 1 ) ( UPDATE UPDATE (  ++ i )  ++ i ) UPDATE UPDATE ( BLOCK BLOCK (  VAR_2 [ i ] = new java.lang.Integer ( i ) )  VAR_2 [ i ] = new java.lang.Integer ( i ) ) BLOCK BLOCK ) FOR FOR (  VAR_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_2 ) ) )  VAR_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_2 ) ) (  METHOD_4 ( ) )  METHOD_4 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.NullPointerException ) TYPE java.lang.NullPointerException ( NAME VAR_4 ) NAME VAR_4 ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_3 . METHOD_2 ( VAR_1 , VAR_2 ) )  VAR_3 . METHOD_2 ( VAR_1 , VAR_2 ) ( SWITCH SWITCH ( NAME VAR_1 ) NAME VAR_1 ( CASE VAR_4 ( BLOCK BLOCK (  VAR_5 . METHOD_3 ( VAR_6 ) )  VAR_5 . METHOD_3 ( VAR_6 ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_4 ( CASE VAR_7 ( BLOCK BLOCK (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_7 ( CASE VAR_8 ( BLOCK BLOCK (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_8 ( DEFAULT DEFAULT ( BLOCK BLOCK (  VAR_5 . METHOD_3 ( VAR_9 ) )  VAR_5 . METHOD_3 ( VAR_9 ) ) BLOCK BLOCK ) DEFAULT DEFAULT ) SWITCH SWITCH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 = false )  VAR_1 = false ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = true ) INIT = true ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_4 . METHOD_2 ( ) ) IN VAR_4 . METHOD_2 ( ) ( BLOCK BLOCK (  VAR_2 &= VAR_3 . METHOD_3 ( true ) )  VAR_2 &= VAR_3 . METHOD_3 ( true ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( IF IF ( COND ! ( VAR_5 . METHOD_4 ( VAR_6 . METHOD_5 ( ) , VAR_6 . METHOD_6 ( ) , VAR_6 . METHOD_7 ( ) . METHOD_8 ( ) ) ) ) COND ! ( VAR_5 . METHOD_4 ( VAR_6 . METHOD_5 ( ) , VAR_6 . METHOD_6 ( ) , VAR_6 . METHOD_7 ( ) . METHOD_8 ( ) ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  VAR_1 = ( VAR_7 . METHOD_9 ( true ) ) == false )  VAR_1 = ( VAR_7 . METHOD_9 ( true ) ) == false ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME s ) NAME s ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 = ( ( byte [ ] ) ( s . METHOD_2 ( ) ) ) )  VAR_1 = ( ( byte [ ] ) ( s . METHOD_2 ( ) ) ) (  VAR_2 = ( ( byte [ ] ) ( s . METHOD_2 ( ) ) ) )  VAR_2 = ( ( byte [ ] ) ( s . METHOD_2 ( ) ) ) (  VAR_3 = ( ( java.lang.String ) ( s . METHOD_2 ( ) ) ) )  VAR_3 = ( ( java.lang.String ) ( s . METHOD_2 ( ) ) ) (  VAR_4 = ( ( java.lang.String ) ( s . METHOD_2 ( ) ) ) )  VAR_4 = ( ( java.lang.String ) ( s . METHOD_2 ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME error ) NAME error ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND error == null ) COND error == null ( THEN THEN (  METHOD_1 ( null , null ) )  METHOD_1 ( null , null ) ) THEN THEN ( ELSE ELSE ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_2 ) ) INIT = METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_2 ) ) VAR VAR (  VAR_1 . METHOD_5 ( 0 , 0 , VAR_1 . METHOD_6 ( ) , VAR_1 . METHOD_7 ( ) ) )  VAR_1 . METHOD_5 ( 0 , 0 , VAR_1 . METHOD_6 ( ) , VAR_1 . METHOD_7 ( ) ) (  METHOD_1 ( error , VAR_1 ) )  METHOD_1 ( error , VAR_1 ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( VAR_1 != null ) ? VAR_1 : VAR_2 ) INIT = ( VAR_1 != null ) ? VAR_1 : VAR_2 ) VAR VAR ( IF IF ( COND ( VAR_1 != null ) && ( VAR_2 != null ) ) COND ( VAR_1 != null ) && ( VAR_2 != null ) ( THEN THEN (  VAR_3 += STRING_1 + VAR_2 )  VAR_3 += STRING_1 + VAR_2 ) THEN THEN ) IF IF (  VAR_3 = TYPE_1 . METHOD_2 ( VAR_3 ) )  VAR_3 = TYPE_1 . METHOD_2 ( VAR_3 ) (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME context ) NAME context ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( TYPE_2 . METHOD_2 ( ) ) ) COND ! ( TYPE_2 . METHOD_2 ( ) ) ( THEN THEN ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_3 . METHOD_3 ( context , VAR_1 ) ) INIT = TYPE_3 . METHOD_3 ( context , VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN (  TYPE_4 . i ( TYPE_3 . TAG , ( STRING_1 + ( VAR_2 . METHOD_4 ( ) ) ) ) )  TYPE_4 . i ( TYPE_3 . TAG , ( STRING_1 + ( VAR_2 . METHOD_4 ( ) ) ) ) ) THEN THEN ( ELSE ELSE (  VAR_2 = new java.io.File ( VAR_3 , VAR_1 ) )  VAR_2 = new java.io.File ( VAR_3 , VAR_1 ) ) ELSE ELSE ) IF IF (  TYPE_2 . METHOD_5 ( VAR_2 . METHOD_4 ( ) ) )  TYPE_2 . METHOD_5 ( VAR_2 . METHOD_4 ( ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( ) . addFeature ( VAR_2 ) . addFeature ( VAR_3 ) . build ( ) ) INIT = new TYPE_2 ( ) . addFeature ( VAR_2 ) . addFeature ( VAR_3 ) . build ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_2 ( ) . addFeature ( VAR_3 ) . addFeature ( VAR_2 ) . build ( ) ) INIT = new TYPE_2 ( ) . addFeature ( VAR_3 ) . addFeature ( VAR_2 ) . build ( ) ) VAR VAR (  TYPE_3 . assertEquals ( VAR_1 , VAR_4 ) )  TYPE_3 . assertEquals ( VAR_1 , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME toString ) NAME toString ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME b ) NAME b ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < ( METHOD_1 ( ) ) ) COND i < ( METHOD_1 ( ) ) ( UPDATE UPDATE (  ++ i )  ++ i ) UPDATE UPDATE ( BLOCK BLOCK (  b . append ( METHOD_2 ( i ) ) )  b . append ( METHOD_2 ( i ) ) ) BLOCK BLOCK ) FOR FOR (  b . append ( CHAR_1 ) )  b . append ( CHAR_1 ) ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < ( METHOD_3 ( ) ) ) COND i < ( METHOD_3 ( ) ) ( UPDATE UPDATE (  ++ i )  ++ i ) UPDATE UPDATE ( BLOCK BLOCK (  b . append ( METHOD_4 ( i ) . toString ( ) ) )  b . append ( METHOD_4 ( i ) . toString ( ) ) ) BLOCK BLOCK ) FOR FOR (  return b . toString ( ) ; )  return b . toString ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME type ) NAME type ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 . METHOD_2 ( ) ) COND VAR_1 . METHOD_2 ( ) ( THEN THEN ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_3 ( VAR_3 ) ) INIT = VAR_1 . METHOD_3 ( VAR_3 ) ) VAR VAR ( IF IF ( COND VAR_2 . METHOD_2 ( ) ) COND VAR_2 . METHOD_2 ( ) ( THEN THEN ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.String> ) TYPE java.util.Map<java.lang.String,java.lang.String> ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_5 . METHOD_4 ( VAR_2 , null ) ) INIT = TYPE_5 . METHOD_4 ( VAR_2 , null ) ) VAR VAR ( IF IF ( COND VAR_4 != null ) COND VAR_4 != null ( THEN THEN (  return new TYPE_1 ( VAR_1 , VAR_4 , type ) ; )  return new TYPE_1 ( VAR_1 , VAR_4 , type ) ; ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND STRING_1 . equals ( VAR_1 ) ) COND STRING_1 . equals ( VAR_1 ) ( THEN THEN (  VAR_1 = STRING_2 )  VAR_1 = STRING_2 ) THEN THEN ( ELSE ELSE ( IF IF ( COND STRING_3 . equals ( VAR_1 ) ) COND STRING_3 . equals ( VAR_1 ) ( THEN THEN (  VAR_1 = STRING_4 )  VAR_1 = STRING_4 ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_2 ( VAR_1 ) ) INIT = TYPE_2 . METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_2 == 0 ) COND VAR_2 == 0 ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_3 ( VAR_2 ) ) INIT = new TYPE_3 ( VAR_2 ) ) VAR VAR (  TYPE_2 . METHOD_3 ( VAR_3 , VAR_4 ) )  TYPE_2 . METHOD_3 ( VAR_3 , VAR_4 ) (  TYPE_2 . METHOD_4 ( VAR_3 , VAR_5 ) )  TYPE_2 . METHOD_4 ( VAR_3 , VAR_5 ) (  return new TYPE_1 ( VAR_3 ) ; )  return new TYPE_1 ( VAR_3 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 = VAR_2 )  VAR_1 = VAR_2 (  VAR_3 = VAR_4 )  VAR_3 = VAR_4 ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_5 ) NAME VAR_5 ( INIT = METHOD_2 ( STRING_1 , VAR_6 . METHOD_3 ( ) , VAR_7 ) ) INIT = METHOD_2 ( STRING_1 , VAR_6 . METHOD_3 ( ) , VAR_7 ) ) VAR VAR (  assertEquals ( VAR_8 , VAR_9 . METHOD_4 ( VAR_10 ) . METHOD_5 ( ) ) )  assertEquals ( VAR_8 , VAR_9 . METHOD_4 ( VAR_10 ) . METHOD_5 ( ) ) (  VAR_11 . METHOD_6 ( VAR_10 ) )  VAR_11 . METHOD_6 ( VAR_10 ) (  org.mockito.Mockito.verify ( VAR_7 . METHOD_7 ( ) , TYPE_2 . METHOD_8 ( VAR_12 ) ) . METHOD_6 ( org.mockito.Matchers.eq ( VAR_13 ) , org.mockito.Matchers . METHOD_9 ( ) ) )  org.mockito.Mockito.verify ( VAR_7 . METHOD_7 ( ) , TYPE_2 . METHOD_8 ( VAR_12 ) ) . METHOD_6 ( org.mockito.Matchers.eq ( VAR_13 ) , org.mockito.Matchers . METHOD_9 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME line ) NAME line ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.lang.String [ 5 ] ) INIT = new java.lang.String [ 5 ] ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  TYPE_2 . METHOD_2 ( line , CHAR_1 , VAR_1 , VAR_2 ) )  TYPE_2 . METHOD_2 ( line , CHAR_1 , VAR_1 , VAR_2 ) (  METHOD_3 ( VAR_1 , line ) )  METHOD_3 ( VAR_1 , line ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = STRING_1 + ( ( ( ( ( STRING_2 + STRING_3 ) + STRING_4 ) + STRING_5 ) + STRING_6 ) + STRING_7 ) ) INIT = STRING_1 + ( ( ( ( ( STRING_2 + STRING_3 ) + STRING_4 ) + STRING_5 ) + STRING_6 ) + STRING_7 ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME expected ) NAME expected ( INIT = STRING_8 + ( STRING_9 + STRING_10 ) ) INIT = STRING_8 + ( STRING_9 + STRING_10 ) ) VAR VAR (  assertEquals ( expected , METHOD_2 ( VAR_1 ) ) )  assertEquals ( expected , METHOD_2 ( VAR_1 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME call ) NAME call ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_1 ( VAR_2 ) ) INIT = TYPE_2 . METHOD_1 ( VAR_2 ) ) VAR VAR ( SYNCHRONIZED SYNCHRONIZED (  VAR_3 )  VAR_3 ( BLOCK BLOCK ( IF IF ( COND VAR_3 . METHOD_2 ( VAR_1 ) ) COND VAR_3 . METHOD_2 ( VAR_1 ) ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF (  VAR_3 . METHOD_3 ( VAR_1 ) )  VAR_3 . METHOD_3 ( VAR_1 ) ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ( VAR VAR ( TYPE TYPE_3.File ) TYPE TYPE_3.File ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_2 . METHOD_4 ( VAR_5 , VAR_2 ) ) INIT = TYPE_2 . METHOD_4 ( VAR_5 , VAR_2 ) ) VAR VAR ( IF IF ( COND VAR_6 ) COND VAR_6 ( THEN THEN (  VAR_4 . METHOD_5 ( ) )  VAR_4 . METHOD_5 ( ) ) THEN THEN ) IF IF (  VAR_7 . METHOD_6 ( VAR_2 , VAR_4 , VAR_6 , options , VAR_8 ) )  VAR_7 . METHOD_6 ( VAR_2 , VAR_4 , VAR_6 , options , VAR_8 ) (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  this )  this ( BLOCK BLOCK ( IF IF ( COND ( ! ( METHOD_2 ( VAR_2 , VAR_1 , TYPE_1 . METHOD_3 ( ) ) ) ) || ( METHOD_4 ( ) ) ) COND ( ! ( METHOD_2 ( VAR_2 , VAR_1 , TYPE_1 . METHOD_3 ( ) ) ) ) || ( METHOD_4 ( ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_5 ( ) ) INIT = METHOD_5 ( ) ) VAR VAR ( IF IF ( COND ( VAR_4 ) != null ) COND ( VAR_4 ) != null ( THEN THEN ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME text ) NAME text ( INIT = VAR_4 . METHOD_6 ( 0 ) . METHOD_7 ( ) ) INIT = VAR_4 . METHOD_6 ( 0 ) . METHOD_7 ( ) ) VAR VAR (  return ( text != null ) && ( ( text . length ( ) ) > 0 ) ; )  return ( text != null ) && ( ( text . length ( ) ) > 0 ) ; ) THEN THEN ) IF IF (  return false ; )  return false ; ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( new TYPE_2 ( STRING_1 ) , TYPE_3 . METHOD_2 ( ) . METHOD_3 ( ) , null , TYPE_4 . of ( ) , TYPE_4 . of ( STRING_2 ) , TYPE_4 . of ( ) , TYPE_4 . of ( ) ) ) INIT = new TYPE_1 ( new TYPE_2 ( STRING_1 ) , TYPE_3 . METHOD_2 ( ) . METHOD_3 ( ) , null , TYPE_4 . of ( ) , TYPE_4 . of ( STRING_2 ) , TYPE_4 . of ( ) , TYPE_4 . of ( ) ) ) VAR VAR (  TYPE_5 . METHOD_4 ( VAR_1 . METHOD_5 ( VAR_2 , STRING_2 , STRING_3 , STRING_4 , true ) ) . METHOD_6 ( VAR_3 class ) )  TYPE_5 . METHOD_4 ( VAR_1 . METHOD_5 ( VAR_2 , STRING_2 , STRING_3 , STRING_4 , true ) ) . METHOD_6 ( VAR_3 class ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  throw new java.lang.NullPointerException ( STRING_1 ) ; )  throw new java.lang.NullPointerException ( STRING_1 ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( SYNCHRONIZED SYNCHRONIZED (  VAR_3 )  VAR_3 ( BLOCK BLOCK (  VAR_2 = TYPE_2 . METHOD_2 ( VAR_1 ) )  VAR_2 = TYPE_2 . METHOD_2 ( VAR_1 ) ( IF IF ( COND VAR_2 == 0 ) COND VAR_2 == 0 ( THEN THEN (  throw new java.lang.IllegalArgumentException ( ( STRING_2 + VAR_1 ) ) ; )  throw new java.lang.IllegalArgumentException ( ( STRING_2 + VAR_1 ) ) ; ) THEN THEN ) IF IF (  TYPE_2 . METHOD_3 ( VAR_2 ) )  TYPE_2 . METHOD_3 ( VAR_2 ) ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED (  return new TYPE_1 ( VAR_2 ) ; )  return new TYPE_1 ( VAR_2 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_3 . METHOD_2 ( TYPE_4 . METHOD_3 ( VAR_1 ) ) ) INIT = TYPE_3 . METHOD_2 ( TYPE_4 . METHOD_3 ( VAR_1 ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1[] ) TYPE TYPE_1[] ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_2 . METHOD_4 ( VAR_3 , true ) ) INIT = VAR_2 . METHOD_4 ( VAR_3 , true ) ) VAR VAR ( IF IF ( COND ( VAR_4 . length ) == 1 ) COND ( VAR_4 . length ) == 1 ( THEN THEN (  return VAR_4 [ 0 ] ; )  return VAR_4 [ 0 ] ; ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_2 ) == null ) COND ( VAR_2 ) == null ( THEN THEN (  VAR_2 = new java.util.HashMap < TYPE_2 , TYPE_1 > ( ) )  VAR_2 = new java.util.HashMap < TYPE_2 , TYPE_1 > ( ) ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_2 . get ( VAR_1 ) ) INIT = VAR_2 . get ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_3 == null ) COND VAR_3 == null ( THEN THEN (  VAR_3 = new TYPE_1 ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) , TYPE_3 . METHOD_4 ( ) ) )  VAR_3 = new TYPE_1 ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) , TYPE_3 . METHOD_4 ( ) ) (  VAR_3 . METHOD_5 ( ) )  VAR_3 . METHOD_5 ( ) (  VAR_2 . METHOD_6 ( VAR_1 , VAR_3 ) )  VAR_2 . METHOD_6 ( VAR_1 , VAR_3 ) ) THEN THEN ) IF IF (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME call ) NAME call ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) == null ) COND ( VAR_1 ) == null ( THEN THEN (  VAR_1 = VAR_2 . METHOD_2 ( VAR_3 , TYPE_3 . METHOD_3 ( ( ( TYPE_4 ) ( VAR_4 ) ) ) , VAR_5 ) )  VAR_1 = VAR_2 . METHOD_2 ( VAR_3 , TYPE_3 . METHOD_3 ( ( ( TYPE_4 ) ( VAR_4 ) ) ) , VAR_5 ) ) THEN THEN ) IF IF ( IF IF ( COND ( call . METHOD_4 ( ) . METHOD_5 ( VAR_2 ) ) && ( call . METHOD_6 ( ) . equals ( VAR_1 ) ) ) COND ( call . METHOD_4 ( ) . METHOD_5 ( VAR_2 ) ) && ( call . METHOD_6 ( ) . equals ( VAR_1 ) ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  throw new java.lang.NullPointerException ( STRING_1 ) ; )  throw new java.lang.NullPointerException ( STRING_1 ) ; ) THEN THEN ) IF IF (  METHOD_2 ( ) )  METHOD_2 ( ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ( INIT = VAR_2 . get ( VAR_1 ) ) INIT = VAR_2 . get ( VAR_1 ) ) VAR VAR ( IF IF ( COND result == null ) COND result == null ( THEN THEN (  result = new TYPE_1 ( VAR_1 ) )  result = new TYPE_1 ( VAR_1 ) (  VAR_2 . METHOD_3 ( VAR_1 , result ) )  VAR_2 . METHOD_3 ( VAR_1 , result ) ) THEN THEN ) IF IF (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME session ) NAME session ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME s ) NAME s ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME c ) NAME c ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME fd ) NAME fd ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME callback ) NAME callback ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE byte[][] ) TYPE byte[][] ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_4 . METHOD_2 ( s ) ) INIT = TYPE_4 . METHOD_2 ( s ) ) VAR VAR (  TYPE_5 . METHOD_3 ( TYPE_5 . METHOD_4 ( ) , VAR_2 ) )  TYPE_5 . METHOD_3 ( TYPE_5 . METHOD_4 ( ) , VAR_2 ) (  super . METHOD_1 ( session , s , c , VAR_1 , fd , callback ) )  super . METHOD_1 ( session , s , c , VAR_1 , fd , callback ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME rr ) NAME rr ( INIT = VAR_3 . METHOD_2 ( VAR_1 ) ) INIT = VAR_3 . METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND rr != null ) COND rr != null ( THEN THEN ( VAR VAR ( TYPE java.util.ArrayList<java.lang.Integer> ) TYPE java.util.ArrayList<java.lang.Integer> ( NAME ret ) NAME ret ( INIT = null ) INIT = null ) VAR VAR ( IF IF ( COND ( VAR_1 . error ) == ( VAR_4 ) ) COND ( VAR_1 . error ) == ( VAR_4 ) ( THEN THEN (  ret = TYPE_4 . METHOD_3 ( VAR_2 , VAR_3 ) )  ret = TYPE_4 . METHOD_3 ( VAR_2 , VAR_3 ) (  TYPE_5 . METHOD_4 ( VAR_5 , ret ) )  TYPE_5 . METHOD_4 ( VAR_5 , ret ) ) THEN THEN ) IF IF (  VAR_3 . METHOD_5 ( rr , VAR_1 , ret ) )  VAR_3 . METHOD_5 ( rr , VAR_1 , ret ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE java.util.ArrayList<java.lang.Integer> ) TYPE java.util.ArrayList<java.lang.Integer> ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME listener ) NAME listener ) VAR VAR ( VAR VAR ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME VAR_6 ) NAME VAR_6 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return new TYPE_1 ( VAR_7 . METHOD_2 ( ) , VAR_1 , VAR_4 , VAR_5 , listener , VAR_6 ) ; )  return new TYPE_1 ( VAR_7 . METHOD_2 ( ) , VAR_1 , VAR_4 , VAR_5 , listener , VAR_6 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  this . VAR_2 = VAR_1 )  this . VAR_2 = VAR_1 ( IF IF ( COND VAR_1 instanceof TYPE_3 ) COND VAR_1 instanceof TYPE_3 ( THEN THEN ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( ( TYPE_3 ) ( VAR_1 ) ) ) INIT = ( ( TYPE_3 ) ( VAR_1 ) ) ) VAR VAR (  VAR_3 . METHOD_2 ( this ) )  VAR_3 . METHOD_2 ( this ) (  METHOD_3 ( VAR_4 , VAR_3 . METHOD_4 ( ) ) )  METHOD_3 ( VAR_4 , VAR_3 . METHOD_4 ( ) ) (  METHOD_3 ( STRING_1 , STRING_2 ) )  METHOD_3 ( STRING_1 , STRING_2 ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND VAR_1 instanceof TYPE_4 ) COND VAR_1 instanceof TYPE_4 ( THEN THEN (  METHOD_3 ( VAR_4 , java.lang.String.format ( STRING_3 , METHOD_5 ( ) ) ) )  METHOD_3 ( VAR_4 , java.lang.String.format ( STRING_3 , METHOD_5 ( ) ) ) (  METHOD_3 ( VAR_5 , STRING_4 ) )  METHOD_3 ( VAR_5 , STRING_4 ) ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String[][] ) TYPE java.lang.String[][] ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  throw new java.lang.NullPointerException ( STRING_1 ) ; )  throw new java.lang.NullPointerException ( STRING_1 ) ; ) THEN THEN ) IF IF ( FOR-EACH FOR-EACH ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME VAR_2 ) NAME VAR_2 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_2 . length ) < 5 ) COND ( VAR_2 . length ) < 5 ( THEN THEN (  throw new java.lang.IllegalArgumentException ( ( ( TYPE_1 . toString ( VAR_2 ) ) + STRING_2 ) ) ; )  throw new java.lang.IllegalArgumentException ( ( ( TYPE_1 . toString ( VAR_2 ) ) + STRING_2 ) ) ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  this . VAR_1 = TYPE_2 . METHOD_2 ( VAR_1 ) )  this . VAR_1 = TYPE_2 . METHOD_2 ( VAR_1 ) (  this . VAR_3 = true )  this . VAR_3 = true ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = java.lang.Integer . METHOD_3 ( VAR_1 ) ) INIT = java.lang.Integer . METHOD_3 ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE android.content.Intent ) TYPE android.content.Intent ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_4 ( VAR_4 ) ) INIT = METHOD_4 ( VAR_4 ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_6 . METHOD_5 ( VAR_2 ) ) INIT = VAR_6 . METHOD_5 ( VAR_2 ) ) VAR VAR ( IF IF ( COND VAR_5 != null ) COND VAR_5 != null ( THEN THEN (  VAR_5 . METHOD_6 ( VAR_3 ) )  VAR_5 . METHOD_6 ( VAR_3 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME sb ) NAME sb ( INIT = new TYPE_1 ( 100 ) ) INIT = new TYPE_1 ( 100 ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . length ) INIT = VAR_2 . length ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < VAR_1 ) COND i < VAR_1 ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK (  sb.append ( STRING_1 ) )  sb.append ( STRING_1 ) (  sb.append ( VAR_3 . get ( i ) ) )  sb.append ( VAR_3 . get ( i ) ) (  sb.append ( STRING_2 ) )  sb.append ( STRING_2 ) (  sb.append ( VAR_2 [ i ] ) )  sb.append ( VAR_2 [ i ] ) ) BLOCK BLOCK ) FOR FOR (  return sb . toString ( ) ; )  return sb . toString ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME start ) NAME start ( BLOCK BLOCK (  android.util.Log.e ( TYPE_1 . TAG , STRING_1 ) )  android.util.Log.e ( TYPE_1 . TAG , STRING_1 ) (  TYPE_1 . METHOD_1 ( this ) )  TYPE_1 . METHOD_1 ( this ) ( IF IF ( COND ( VAR_1 ) == null ) COND ( VAR_1 ) == null ( THEN THEN (  VAR_1 = TYPE_2 . METHOD_2 ( this ) )  VAR_1 = TYPE_2 . METHOD_2 ( this ) ) THEN THEN ) IF IF (  VAR_2 = TYPE_3 . METHOD_3 ( ) )  VAR_2 = TYPE_3 . METHOD_3 ( ) (  VAR_3 = false )  VAR_3 = false ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_4 ( ) ) INIT = new TYPE_4 ( ) ) VAR VAR (  VAR_4 . METHOD_4 ( VAR_5 ) )  VAR_4 . METHOD_4 ( VAR_5 ) (  VAR_4 . METHOD_4 ( VAR_6 ) )  VAR_4 . METHOD_4 ( VAR_6 ) (  METHOD_5 ( VAR_7 , VAR_4 ) )  METHOD_5 ( VAR_7 , VAR_4 ) (  METHOD_6 ( ) )  METHOD_6 ( ) (  return ! ( VAR_3 ) ; )  return ! ( VAR_3 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_2 ( VAR_3 , 0 , VAR_4 ) ) INIT = VAR_2 . METHOD_2 ( VAR_3 , 0 , VAR_4 ) ) VAR VAR ( IF IF ( COND ( VAR_1 . METHOD_3 ( ) ) == ( VAR_5 ) ) COND ( VAR_1 . METHOD_3 ( ) ) == ( VAR_5 ) ( THEN THEN (  METHOD_4 ( ) )  METHOD_4 ( ) (  return true ; )  return true ; ) THEN THEN ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.Class<?> ) TYPE java.lang.Class<?> ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_2 . METHOD_3 ( ) ) INIT = VAR_2 . METHOD_3 ( ) ) VAR VAR ( IF IF ( COND VAR_4 == 0 ? VAR_3 != ( void . class ) : VAR_3 != ( VAR_2 . METHOD_4 ( 0 ) ) ) COND VAR_4 == 0 ? VAR_3 != ( void . class ) : VAR_3 != ( VAR_2 . METHOD_4 ( 0 ) ) ( THEN THEN (  throw TYPE_2 . METHOD_5 ( STRING_1 , VAR_1 , VAR_2 ) ; )  throw TYPE_2 . METHOD_5 ( STRING_1 , VAR_1 , VAR_2 ) ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_2 ( STRING_1 ) ) INIT = VAR_1 . METHOD_2 ( STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_3 ) NAME VAR_3 ( INIT = null ) INIT = null ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME field ) NAME field ( IN VAR_2 . METHOD_3 ( ) ) IN VAR_2 . METHOD_3 ( ) ( BLOCK BLOCK ( IF IF ( COND STRING_2 . equals ( field . name ) ) COND STRING_2 . equals ( field . name ) ( THEN THEN (  VAR_3 = VAR_4 . METHOD_4 ( ) )  VAR_3 = VAR_4 . METHOD_4 ( ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_3 . METHOD_5 ( name ) ; )  return VAR_3 . METHOD_5 ( name ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME test ) NAME test ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( TYPE_3 . METHOD_2 ( ( ( STRING_1 + test ) + STRING_2 ) ) ) ) INIT = new TYPE_2 ( TYPE_3 . METHOD_2 ( ( ( STRING_1 + test ) + STRING_2 ) ) ) ) VAR VAR (  VAR_1 . METHOD_3 ( new TYPE_4 ( VAR_1 . METHOD_4 ( ) , VAR_1 . METHOD_5 ( ) ) ) )  VAR_1 . METHOD_3 ( new TYPE_4 ( VAR_1 . METHOD_4 ( ) , VAR_1 . METHOD_5 ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( VAR_4 ) == null ) && ( VAR_1 == ( VAR_5 ) ) ) COND ( ( VAR_4 ) == null ) && ( VAR_1 == ( VAR_5 ) ) ( THEN THEN (  TYPE_1 . METHOD_2 ( VAR_2 . equals ( VAR_6 ) , STRING_1 , VAR_2 , VAR_6 ) )  TYPE_1 . METHOD_2 ( VAR_2 . equals ( VAR_6 ) , STRING_1 , VAR_2 , VAR_6 ) (  VAR_4 = TYPE_2 . METHOD_3 ( VAR_2 , name , VAR_3 ) )  VAR_4 = TYPE_2 . METHOD_3 ( VAR_2 , name , VAR_3 ) ) THEN THEN ) IF IF (  super . METHOD_1 ( VAR_1 , VAR_2 , name , VAR_3 ) )  super . METHOD_1 ( VAR_1 , VAR_2 , name , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( ( TYPE_4 ) ( VAR_1 ) ) ) INIT = ( ( TYPE_4 ) ( VAR_1 ) ) ) VAR VAR (  return TYPE_5 . METHOD_1 ( VAR_1 , e ) ; )  return TYPE_5 . METHOD_1 ( VAR_1 , e ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE int ) TYPE int ( NAME id ) NAME id ( INIT = VAR_1 . METHOD_2 ( 8 , e . METHOD_3 ( VAR_1 ) ) ) INIT = VAR_1 . METHOD_2 ( 8 , e . METHOD_3 ( VAR_1 ) ) ) VAR VAR ( IF IF ( COND ! ( e . METHOD_4 ( TYPE_3 . METHOD_5 ( VAR_1 ) ) ) ) COND ! ( e . METHOD_4 ( TYPE_3 . METHOD_5 ( VAR_1 ) ) ) ( THEN THEN (  throw new TYPE_6 ( STRING_1 ) ; )  throw new TYPE_6 ( STRING_1 ) ; ) THEN THEN ) IF IF (  return new TYPE_1 ( id , VAR_1 , e ) ; )  return new TYPE_1 ( id , VAR_1 , e ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_1 ( VAR_2 ) ) INIT = TYPE_1 . METHOD_1 ( VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME s ) NAME s ( INIT = new TYPE_2 ( VAR_1 ) ) INIT = new TYPE_2 ( VAR_1 ) ) VAR VAR (  VAR_1 . METHOD_2 ( VAR_3 ) )  VAR_1 . METHOD_2 ( VAR_3 ) (  s . METHOD_3 ( ) )  s . METHOD_3 ( ) (  VAR_1 . METHOD_4 ( ) )  VAR_1 . METHOD_4 ( ) (  METHOD_5 ( ) )  METHOD_5 ( ) (  VAR_1 . METHOD_6 ( ) )  VAR_1 . METHOD_6 ( ) (  METHOD_7 ( ) )  METHOD_7 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_2 = VAR_1 )  VAR_2 = VAR_1 ( IF IF ( COND VAR_1 == false ) COND VAR_1 == false ( THEN THEN (  VAR_3 . METHOD_2 ( ) )  VAR_3 . METHOD_2 ( ) ) THEN THEN ) IF IF ( TRY TRY ( BLOCK BLOCK (  TYPE_1 . METHOD_3 ( this , VAR_1 ) )  TYPE_1 . METHOD_3 ( this , VAR_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME VAR_4 ) NAME VAR_4 ( BLOCK BLOCK (  VAR_4 . METHOD_4 ( ) )  VAR_4 . METHOD_4 ( ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  METHOD_5 ( VAR_5 ) )  METHOD_5 ( VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME context ) NAME context ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME node ) NAME node ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME pos ) NAME pos ( INIT = ( ( TYPE_4 ) ( METHOD_2 ( node , 0 , 0 ) ) ) ) INIT = ( ( TYPE_4 ) ( METHOD_2 ( node , 0 , 0 ) ) ) ) VAR VAR ( IF IF ( COND pos != null ) COND pos != null ( THEN THEN (  return TYPE_1 . METHOD_3 ( VAR_1 , pos , ( ( TYPE_4 ) ( pos . METHOD_4 ( ) ) ) ) ; )  return TYPE_1 . METHOD_3 ( VAR_1 , pos , ( ( TYPE_4 ) ( pos . METHOD_4 ( ) ) ) ) ; ) THEN THEN ) IF IF (  return TYPE_1 . METHOD_3 ( VAR_1 ) ; )  return TYPE_1 . METHOD_3 ( VAR_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME out ) NAME out ) VAR VAR ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME args ) NAME args ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 instanceof TYPE_3 ) COND VAR_1 instanceof TYPE_3 ( THEN THEN ( TRY TRY ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( out , args ) )  VAR_1 . METHOD_2 ( out , args ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_4 ( ) ) INIT = new TYPE_4 ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_1 . METHOD_3 ( VAR_3 . METHOD_4 ( ) . METHOD_5 ( ) , args ) )  VAR_1 . METHOD_3 ( VAR_3 . METHOD_4 ( ) . METHOD_5 ( ) , args ) (  VAR_3 . METHOD_6 ( out , VAR_2 ) )  VAR_3 . METHOD_6 ( out , VAR_2 ) ) BLOCK BLOCK ( FINALLY FINALLY (  VAR_3 . METHOD_7 ( ) )  VAR_3 . METHOD_7 ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private synchronized ) MODIFIER private synchronized ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME packageName ) NAME packageName ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME info ) NAME info ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( IF IF ( COND VAR_2 . equals ( packageName ) ) COND VAR_2 . equals ( packageName ) ( THEN THEN ( IF IF ( COND VAR_3 ) COND VAR_3 ( THEN THEN (  android.util.Log.v ( VAR_4 . TAG , ( ( STRING_1 + packageName ) + STRING_2 ) ) )  android.util.Log.v ( VAR_4 . TAG , ( ( STRING_1 + packageName ) + STRING_2 ) ) ) THEN THEN ) IF IF (  return true ; )  return true ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ( IF IF ( COND VAR_3 ) COND VAR_3 ( THEN THEN (  android.util.Log.v ( VAR_4 . TAG , ( ( STRING_1 + packageName ) + STRING_3 ) ) )  android.util.Log.v ( VAR_4 . TAG , ( ( STRING_1 + packageName ) + STRING_3 ) ) ) THEN THEN ) IF IF (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( ) ) )  TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( ) ) ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_4 ( ) . METHOD_5 ( ) ) INIT = METHOD_4 ( ) . METHOD_5 ( ) ) VAR VAR ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.io.File ( VAR_1 . METHOD_6 ( ) . METHOD_7 ( METHOD_4 ( ) . METHOD_8 ( ) , VAR_3 ) ) ) INIT = new java.io.File ( VAR_1 . METHOD_6 ( ) . METHOD_7 ( METHOD_4 ( ) . METHOD_8 ( ) , VAR_3 ) ) ) VAR VAR (  assertTrue ( VAR_2 . METHOD_9 ( ) ) )  assertTrue ( VAR_2 . METHOD_9 ( ) ) (  TYPE_1 . METHOD_10 ( VAR_2 ) )  TYPE_1 . METHOD_10 ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_5 . METHOD_2 ( VAR_1 ) ) INIT = VAR_5 . METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_4 == null ) COND VAR_4 == null ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_6 ) NAME VAR_6 ( INIT = TYPE_2 . METHOD_2 ( VAR_2 ) ) INIT = TYPE_2 . METHOD_2 ( VAR_2 ) ) VAR VAR ( IF IF ( COND VAR_6 == null ) COND VAR_6 == null ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF (  return VAR_7 . METHOD_3 ( VAR_6 . METHOD_4 ( ) , VAR_3 ) ; )  return VAR_7 . METHOD_3 ( VAR_6 . METHOD_4 ( ) , VAR_3 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE android.bluetooth.BluetoothDevice ) TYPE android.bluetooth.BluetoothDevice ( NAME device ) NAME device ) VAR VAR ( VAR VAR ( TYPE byte ) TYPE byte ( NAME type ) NAME type ) VAR VAR ( VAR VAR ( TYPE byte ) TYPE byte ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME data ) NAME data ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  android.util.Log.v ( VAR_2 . TAG , ( ( ( ( ( STRING_1 + device ) + STRING_2 ) + type ) + STRING_3 ) + id ) ) )  android.util.Log.v ( VAR_2 . TAG , ( ( ( ( ( STRING_1 + device ) + STRING_2 ) + type ) + STRING_3 ) + id ) ) ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME service ) NAME service ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( IF IF ( COND service == null ) COND service == null ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  return service . METHOD_1 ( device , type , id , data ) ; )  return service . METHOD_1 ( device , type , id , data ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public final ) MODIFIER public final ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  this )  this ( BLOCK BLOCK ( IF IF ( COND METHOD_2 ( ) ) COND METHOD_2 ( ) ( THEN THEN (  throw new TYPE_1 ( STRING_1 ) ; )  throw new TYPE_1 ( STRING_1 ) ; ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_1 ) == ( VAR_2 ) ) COND ( VAR_1 ) == ( VAR_2 ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  METHOD_3 ( ) )  METHOD_3 ( ) (  METHOD_4 ( ) . METHOD_5 ( ) )  METHOD_4 ( ) . METHOD_5 ( ) ( IF IF ( COND ( VAR_3 ) != null ) COND ( VAR_3 ) != null ( THEN THEN (  VAR_3 . METHOD_6 ( this , 0 ) )  VAR_3 . METHOD_6 ( this , 0 ) ) THEN THEN ) IF IF (  VAR_3 = null )  VAR_3 = null (  VAR_1 = VAR_2 )  VAR_1 = VAR_2 ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) (  TYPE_1 . d ( VAR_1 , ( ( ( ( STRING_1 + ( VAR_2 ) ) + STRING_2 ) + ( VAR_3 ) ) + STRING_3 ) ) )  TYPE_1 . d ( VAR_1 , ( ( ( ( STRING_1 + ( VAR_2 ) ) + STRING_2 ) + ( VAR_3 ) ) + STRING_3 ) ) ( IF IF ( COND ( ! ( VAR_2 ) ) && ( ! ( VAR_4 . METHOD_2 ( VAR_3 ) ) ) ) COND ( ! ( VAR_2 ) ) && ( ! ( VAR_4 . METHOD_2 ( VAR_3 ) ) ) ( THEN THEN (  TYPE_1 . d ( VAR_1 , STRING_4 ) )  TYPE_1 . d ( VAR_1 , STRING_4 ) (  METHOD_3 ( VAR_5 ) )  METHOD_3 ( VAR_5 ) ) THEN THEN ) IF IF (  METHOD_4 ( ) )  METHOD_4 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 < 0 ) || ( VAR_1 > ( VAR_3 ) ) ) COND ( VAR_1 < 0 ) || ( VAR_1 > ( VAR_3 ) ) ( THEN THEN (  throw new java.lang.IllegalArgumentException ( ( ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + ( VAR_3 ) ) + STRING_3 ) ) ; )  throw new java.lang.IllegalArgumentException ( ( ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + ( VAR_3 ) ) + STRING_3 ) ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_5 [ VAR_1 ] ) INIT = VAR_5 [ VAR_1 ] ) VAR VAR (  return ( METHOD_2 ( ( VAR_4 + VAR_2 ) ) ) - ( METHOD_2 ( VAR_4 ) ) ; )  return ( METHOD_2 ( ( VAR_4 + VAR_2 ) ) ) - ( METHOD_2 ( VAR_4 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( METHOD_2 ( ) ) == false ) COND ( METHOD_2 ( ) ) == false ( THEN THEN (  android.util.Log.e ( android.bluetooth.BluetoothDevice . TAG , STRING_1 ) )  android.util.Log.e ( android.bluetooth.BluetoothDevice . TAG , STRING_1 ) (  throw new java.io.IOException ( ) ; )  throw new java.io.IOException ( ) ; ) THEN THEN ) IF IF (  return new TYPE_1 ( VAR_2 , ( - 1 ) , true , true , this , ( - 1 ) , new TYPE_3 ( VAR_1 ) ) ; )  return new TYPE_1 ( VAR_2 , ( - 1 ) , true , true , this , ( - 1 ) , new TYPE_3 ( VAR_1 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK (  TYPE_1 . METHOD_1 ( VAR_1 class ) )  TYPE_1 . METHOD_1 ( VAR_1 class ) (  TYPE_2 . METHOD_2 ( ) )  TYPE_2 . METHOD_2 ( ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_3 ( 1 ) ) INIT = new TYPE_3 ( 1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME t ) NAME t ( INIT = new TYPE_4 ( ) { public void run ( ) { try { TYPE_2 . METHOD_3 ( ) ; } catch ( java.lang.Exception e ) { throw new java.lang.RuntimeException ( e ) ; } VAR_2 . METHOD_4 ( ) ; } } ) INIT = new TYPE_4 ( ) { public void run ( ) { try { TYPE_2 . METHOD_3 ( ) ; } catch ( java.lang.Exception e ) { throw new java.lang.RuntimeException ( e ) ; } VAR_2 . METHOD_4 ( ) ; } } ) VAR VAR ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  TYPE_2 . METHOD_3 ( ) )  TYPE_2 . METHOD_3 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ( BLOCK BLOCK (  throw new java.lang.RuntimeException ( e ) ; )  throw new java.lang.RuntimeException ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  VAR_2 . METHOD_4 ( ) )  VAR_2 . METHOD_4 ( ) ) BLOCK BLOCK ) METHOD METHOD (  t . start ( ) )  t . start ( ) (  VAR_2 . METHOD_5 ( ) )  VAR_2 . METHOD_5 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_2 ( VAR_3 class ) ) INIT = TYPE_2 . METHOD_2 ( VAR_3 class ) ) VAR VAR (  TYPE_2 . when ( VAR_2 . getName ( ) ) . thenReturn ( name ) )  TYPE_2 . when ( VAR_2 . getName ( ) ) . thenReturn ( name ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_4 . METHOD_3 ( VAR_1 ) ) INIT = TYPE_4 . METHOD_3 ( VAR_1 ) ) VAR VAR (  TYPE_2 . when ( VAR_2 . METHOD_4 ( ) ) . thenReturn ( VAR_4 ) )  TYPE_2 . when ( VAR_2 . METHOD_4 ( ) ) . thenReturn ( VAR_4 ) (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ! ( METHOD_2 ( ) ) ) COND ! ( METHOD_2 ( ) ) ( THEN THEN (  TYPE_1 . METHOD_3 ( VAR_1 , STRING_1 ) )  TYPE_1 . METHOD_3 ( VAR_1 , STRING_1 ) (  return ; )  return ; ) THEN THEN ) IF IF (  METHOD_4 ( VAR_2 , VAR_3 ) )  METHOD_4 ( VAR_2 , VAR_3 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_5 ( VAR_2 , VAR_3 ) ) INIT = METHOD_5 ( VAR_2 , VAR_3 ) ) VAR VAR (  METHOD_6 ( VAR_2 , VAR_5 ) )  METHOD_6 ( VAR_2 , VAR_5 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_6 ) NAME VAR_6 ( INIT = METHOD_5 ( VAR_2 , VAR_5 ) ) INIT = METHOD_5 ( VAR_2 , VAR_5 ) ) VAR VAR (  TYPE_3 . METHOD_7 ( VAR_6 , VAR_4 ) )  TYPE_3 . METHOD_7 ( VAR_6 , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_5 . METHOD_2 ( VAR_2 . METHOD_3 ( ) ) ) INIT = TYPE_5 . METHOD_2 ( VAR_2 . METHOD_3 ( ) ) ) VAR VAR ( IF IF ( COND ( VAR_5 ) == null ) COND ( VAR_5 ) == null ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF (  return TYPE_5 . METHOD_4 ( VAR_2 , VAR_4 , VAR_3 ) ; )  return TYPE_5 . METHOD_4 ( VAR_2 , VAR_4 , VAR_3 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME x ) NAME x ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  throw new TYPE_2 ( ) ; )  throw new TYPE_2 ( ) ; ) THEN THEN ) IF IF ( IF IF ( COND ! ( VAR_2 ) ) COND ! ( VAR_2 ) ( THEN THEN (  throw new TYPE_3 ( STRING_1 ) ; )  throw new TYPE_3 ( STRING_1 ) ; ) THEN THEN ) IF IF (  METHOD_1 ( METHOD_2 ( METHOD_3 ( i , VAR_3 ) ) , x ) )  METHOD_1 ( METHOD_2 ( METHOD_3 ( i , VAR_3 ) ) , x ) (  return this ; )  return this ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.StringBuilder ) TYPE java.lang.StringBuilder ( NAME output ) NAME output ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  METHOD_3 ( output ) )  METHOD_3 ( output ) (  METHOD_4 ( output ) )  METHOD_4 ( output ) (  VAR_1 . METHOD_5 ( VAR_2 , 1 ) )  VAR_1 . METHOD_5 ( VAR_2 , 1 ) (  VAR_1 . METHOD_6 ( VAR_3 ) )  VAR_1 . METHOD_6 ( VAR_3 ) (  VAR_1 . METHOD_7 ( VAR_4 , VAR_3 , VAR_5 ) )  VAR_1 . METHOD_7 ( VAR_4 , VAR_3 , VAR_5 ) (  VAR_1 . METHOD_8 ( VAR_3 , VAR_6 ) )  VAR_1 . METHOD_8 ( VAR_3 , VAR_6 ) (  VAR_1 . METHOD_9 ( 0 , VAR_6 ) )  VAR_1 . METHOD_9 ( 0 , VAR_6 ) (  METHOD_10 ( output . toString ( ) ) )  METHOD_10 ( output . toString ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME sb ) NAME sb ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE char[] ) TYPE char[] ( NAME VAR_1 ) NAME VAR_1 ( INIT = sb . METHOD_2 ( ) ) INIT = sb . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME n ) NAME n ( INIT = count ) INIT = count ) VAR VAR ( IF IF ( COND n != ( sb . length ( ) ) ) COND n != ( sb . length ( ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < n ) COND i < n ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK ( IF IF ( COND ( METHOD_3 ( i ) ) != ( VAR_1 [ i ] ) ) COND ( METHOD_3 ( i ) ) != ( VAR_1 [ i ] ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR FOR (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( TYPE_2 . version ) == null ) COND ( TYPE_2 . version ) == null ( THEN THEN ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME is ) NAME is ( INIT = VAR_1 class . METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ) INIT = VAR_1 class . METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ) VAR VAR ( IF IF ( COND is != null ) COND is != null ( THEN THEN (  TYPE_2 . version = new TYPE_1 ( is ) )  TYPE_2 . version = new TYPE_1 ( is ) ) THEN THEN ( ELSE ELSE (  VAR_3 . log ( VAR_4 , ( STRING_1 + ( VAR_2 ) ) ) )  VAR_3 . log ( VAR_4 , ( STRING_1 + ( VAR_2 ) ) ) (  throw new TYPE_4 ( ) ; )  throw new TYPE_4 ( ) ; ) ELSE ELSE ) IF IF ) THEN THEN ) IF IF (  return TYPE_2 . version ; )  return TYPE_2 . version ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME location ) NAME location ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME data ) NAME data ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( VAR_3 ) != null ) && ( VAR_4 . METHOD_2 ( VAR_1 , VAR_3 ) ) ) COND ( ( VAR_3 ) != null ) && ( VAR_4 . METHOD_2 ( VAR_1 , VAR_3 ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  super . METHOD_1 ( VAR_1 , location , VAR_2 , data ) )  super . METHOD_1 ( VAR_1 , location , VAR_2 , data ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME server ) NAME server ( INIT = new TYPE_1 ( 0 ) ) INIT = new TYPE_1 ( 0 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( TYPE_3 . METHOD_2 ( ) , server . METHOD_3 ( ) ) ) INIT = new TYPE_2 ( TYPE_3 . METHOD_2 ( ) , server . METHOD_3 ( ) ) ) VAR VAR (  assertEquals ( STRING_1 , server . METHOD_3 ( ) , VAR_1 . METHOD_4 ( ) ) )  assertEquals ( STRING_1 , server . METHOD_3 ( ) , VAR_1 . METHOD_4 ( ) ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( 0 ) ) INIT = new TYPE_1 ( 0 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME s ) NAME s ( INIT = new TYPE_2 ( STRING_2 , VAR_2 . METHOD_3 ( ) ) ) INIT = new TYPE_2 ( STRING_2 , VAR_2 . METHOD_3 ( ) ) ) VAR VAR (  VAR_2 . METHOD_5 ( ) )  VAR_2 . METHOD_5 ( ) (  s . METHOD_5 ( ) )  s . METHOD_5 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.StringBuilder ) TYPE java.lang.StringBuilder ( NAME sb ) NAME sb ( INIT = new java.lang.StringBuilder ( ) ) INIT = new java.lang.StringBuilder ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME m ) NAME m ( IN METHOD_2 ( ) ) IN METHOD_2 ( ) ( BLOCK BLOCK (  sb.append ( m . toString ( ) ) )  sb.append ( m . toString ( ) ) (  sb.append ( CHAR_1 ) )  sb.append ( CHAR_1 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  VAR_1 . METHOD_3 ( new java.lang.Object [ ] { sb . toString ( ) } , new TYPE_3 [ ] { TYPE_4 . METHOD_4 ( ) } ) )  VAR_1 . METHOD_3 ( new java.lang.Object [ ] { sb . toString ( ) } , new TYPE_3 [ ] { TYPE_4 . METHOD_4 ( ) } ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1[] ) RETURN TYPE_1[] ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.ArrayList<TYPE_2> ) TYPE java.util.ArrayList<TYPE_2> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK ( IF IF ( COND VAR_3 instanceof TYPE_3 ) COND VAR_3 instanceof TYPE_3 ( THEN THEN ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( INIT = ( ( TYPE_3 ) ( VAR_3 ) ) ) INIT = ( ( TYPE_3 ) ( VAR_3 ) ) ) VAR VAR ( IF IF ( COND VAR_1 . equals ( VAR_4 . METHOD_2 ( ) ) ) COND VAR_1 . equals ( VAR_4 . METHOD_2 ( ) ) ( THEN THEN (  return VAR_4 . METHOD_3 ( ) ; )  return VAR_4 . METHOD_3 ( ) ; ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.Map<TYPE_1,TYPE_2> ) TYPE java.util.Map<TYPE_1,TYPE_2> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME t ) NAME t ( INIT = VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) INIT = VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) VAR VAR ) INIT INIT ( COND t . METHOD_4 ( ) ) COND t . METHOD_4 ( ) ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME entry ) NAME entry ( INIT = ( ( TYPE_4 ) ( t . METHOD_5 ( ) ) ) ) INIT = ( ( TYPE_4 ) ( t . METHOD_5 ( ) ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME s ) NAME s ( INIT = ( ( TYPE_2 ) ( entry . METHOD_6 ( ) ) ) ) INIT = ( ( TYPE_2 ) ( entry . METHOD_6 ( ) ) ) ) VAR VAR ( IF IF ( COND ( s . METHOD_7 ( ) ) == false ) COND ( s . METHOD_7 ( ) ) == false ( THEN THEN (  t . METHOD_8 ( ) )  t . METHOD_8 ( ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR FOR ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_4 ( this , VAR_1 , VAR_2 ) ) INIT = new TYPE_4 ( this , VAR_1 , VAR_2 ) ) VAR VAR ( SYNCHRONIZED SYNCHRONIZED (  VAR_4 )  VAR_4 ( BLOCK BLOCK ( IF IF ( COND ( VAR_5 ) != null ) COND ( VAR_5 ) != null ( THEN THEN (  VAR_5 . METHOD_2 ( new TYPE_5 < TYPE_4 > ( VAR_3 ) ) )  VAR_5 . METHOD_2 ( new TYPE_5 < TYPE_4 > ( VAR_3 ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED (  TYPE_6 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) )  TYPE_6 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE short[] ) TYPE short[] ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_4 . METHOD_2 ( VAR_1 , VAR_2 . METHOD_3 ( ) , VAR_3 ) ) INIT = TYPE_4 . METHOD_2 ( VAR_1 , VAR_2 . METHOD_3 ( ) , VAR_3 ) ) VAR VAR (  return new TYPE_1 ( VAR_4 , VAR_2 ) ; )  return new TYPE_1 ( VAR_4 , VAR_2 ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.RuntimeException ) TYPE java.lang.RuntimeException ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_5 ( VAR_5 ) ; )  throw new TYPE_5 ( VAR_5 ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) ( IF IF ( COND ( VAR_1 ) > INT_1 ) COND ( VAR_1 ) > INT_1 ( THEN THEN ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_2 . METHOD_2 ( ) )  VAR_2 . METHOD_2 ( ) (  VAR_3 = new TYPE_2 ( VAR_2 ) )  VAR_3 = new TYPE_2 ( VAR_2 ) ) THEN THEN ( ELSE ELSE ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_3 ( ) ) INIT = new TYPE_3 ( ) ) VAR VAR (  VAR_2 . METHOD_2 ( ) )  VAR_2 . METHOD_2 ( ) (  VAR_3 = new TYPE_2 ( VAR_2 ) )  VAR_3 = new TYPE_2 ( VAR_2 ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE android.os.Message ) TYPE android.os.Message ( NAME msg ) NAME msg ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SWITCH SWITCH ( NAME VAR_1 ) NAME VAR_1 ( CASE VAR_2 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_2 ( CASE VAR_3 ( BLOCK BLOCK (  METHOD_3 ( ) )  METHOD_3 ( ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_3 ( CASE VAR_4 ( BLOCK BLOCK (  METHOD_4 ( msg.arg1 , ( ( android.os.AsyncResult ) ( msg.obj ) ) ) )  METHOD_4 ( msg.arg1 , ( ( android.os.AsyncResult ) ( msg.obj ) ) ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_4 ( CASE VAR_5 ( BLOCK BLOCK (  METHOD_5 ( ( ( android.os.AsyncResult ) ( msg.obj ) ) ) )  METHOD_5 ( ( ( android.os.AsyncResult ) ( msg.obj ) ) ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_5 ( CASE VAR_6 ( BLOCK BLOCK ( IF IF ( COND VAR_7 ) COND VAR_7 ( THEN THEN (  android.util.Log.d ( VAR_8 , STRING_1 ) )  android.util.Log.d ( VAR_8 , STRING_1 ) ) THEN THEN ) IF IF (  METHOD_6 ( ) )  METHOD_6 ( ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_6 ( DEFAULT DEFAULT ( BLOCK BLOCK ) BLOCK BLOCK ) DEFAULT DEFAULT ) SWITCH SWITCH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( VAR_2 ) == null ) || ( ( VAR_2 . get ( VAR_1 ) ) == null ) ) COND ( ( VAR_2 ) == null ) || ( ( VAR_2 . get ( VAR_1 ) ) == null ) ( THEN THEN ( VAR VAR ( TYPE int ) TYPE int ( NAME state ) NAME state ( INIT = VAR_1 . METHOD_2 ( VAR_3 ) ) INIT = VAR_1 . METHOD_2 ( VAR_3 ) ) VAR VAR (  VAR_2 . METHOD_3 ( VAR_1 , state ) )  VAR_2 . METHOD_3 ( VAR_1 , state ) ) THEN THEN ) IF IF (  return VAR_2 . get ( VAR_1 ) ; )  return VAR_2 . get ( VAR_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.android.jack.ir.ast.JDefinedClassOrInterface ) TYPE com.android.jack.ir.ast.JDefinedClassOrInterface ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 . METHOD_2 ( ) ) COND VAR_1 . METHOD_2 ( ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( IF IF ( COND VAR_1 instanceof TYPE_1 ) COND VAR_1 instanceof TYPE_1 ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_3 . METHOD_3 ( ) ) INIT = TYPE_3 . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 . getName ( VAR_1 ) ) INIT = VAR_4 . getName ( VAR_1 ) ) VAR VAR (  return VAR_2 . METHOD_4 ( VAR_3 ) ; )  return VAR_2 . METHOD_4 ( VAR_3 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( ( VAR_1 ) == null ) || ( ! ( VAR_2 . METHOD_2 ( ) ) ) ) COND ( ( VAR_1 ) == null ) || ( ! ( VAR_2 . METHOD_2 ( ) ) ) ( THEN THEN (  METHOD_3 ( ) )  METHOD_3 ( ) ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_2 . METHOD_4 ( ) ) INIT = VAR_2 . METHOD_4 ( ) ) VAR VAR ( IF IF ( COND VAR_3 == null ) COND VAR_3 == null ( THEN THEN (  throw new TYPE_2 ( STRING_1 , VAR_4 ) ; )  throw new TYPE_2 ( STRING_1 , VAR_4 ) ; ) THEN THEN ) IF IF (  VAR_1 = new TYPE_4 ( VAR_3 ) )  VAR_1 = new TYPE_4 ( VAR_3 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_2 ( STRING_1 , e , VAR_5 ) ; )  throw new TYPE_2 ( STRING_1 , e , VAR_5 ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME expected ) NAME expected ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  assertEquals ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) , java.lang.Integer . toString ( expected ) , VAR_1 . METHOD_2 ( ( ( VAR_1 . METHOD_3 ( CHAR_1 ) ) + 1 ) ) ) )  assertEquals ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) , java.lang.Integer . toString ( expected ) , VAR_1 . METHOD_2 ( ( ( VAR_1 . METHOD_3 ( CHAR_1 ) ) + 1 ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 ( name ) ) INIT = new TYPE_2 ( name ) ) VAR VAR (  VAR_1 . METHOD_2 ( VAR_2 ) )  VAR_1 . METHOD_2 ( VAR_2 ) ( IF IF ( COND ! ( VAR_2 . METHOD_3 ( ) ) ) COND ! ( VAR_2 . METHOD_3 ( ) ) ( THEN THEN (  VAR_1 . METHOD_4 ( CHAR_1 ) )  VAR_1 . METHOD_4 ( CHAR_1 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME callback ) NAME callback ) VAR VAR ( SYNCHRONIZED SYNCHRONIZED (  VAR_2 )  VAR_2 ( BLOCK BLOCK (  callback = VAR_2 . get ( VAR_1 ) )  callback = VAR_2 . get ( VAR_1 ) ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ( IF IF ( COND callback == null ) COND callback == null ( THEN THEN (  android.util.Log.e ( VAR_3 . TAG , ( ( STRING_1 + name ) + STRING_2 ) ) )  android.util.Log.e ( VAR_3 . TAG , ( ( STRING_1 + name ) + STRING_2 ) ) ) THEN THEN ) IF IF (  return callback ; )  return callback ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  android.util.Log . i ( TYPE_2 . TAG , ( STRING_1 + VAR_1 ) ) )  android.util.Log . i ( TYPE_2 . TAG , ( STRING_1 + VAR_1 ) ) ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME w ) NAME w ( INIT = VAR_3 ) INIT = VAR_3 ) VAR VAR ( IF IF ( COND w != null ) COND w != null ( THEN THEN (  w . METHOD_2 ( ) )  w . METHOD_2 ( ) (  METHOD_3 ( ) )  METHOD_3 ( ) ) THEN THEN ( ELSE ELSE (  android.util.Log.w ( TYPE_2 . TAG , STRING_2 ) )  android.util.Log.w ( TYPE_2 . TAG , STRING_2 ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<java.lang.String> ) RETURN java.util.List<java.lang.String> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE int ) TYPE int ( NAME subId ) NAME subId ( IN VAR_3 . METHOD_2 ( ) ) IN VAR_3 . METHOD_2 ( ) ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_5 . METHOD_3 ( subId ) ) INIT = VAR_5 . METHOD_3 ( subId ) ) VAR VAR ( IF IF ( COND VAR_1 . METHOD_4 ( VAR_4 ) ) COND VAR_1 . METHOD_4 ( VAR_4 ) ( THEN THEN (  VAR_2 . METHOD_5 ( VAR_4 ) )  VAR_2 . METHOD_5 ( VAR_4 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_2 . METHOD_6 ( ) ? null : VAR_2 ; )  return VAR_2 . METHOD_6 ( ) ? null : VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER synchronized ) MODIFIER synchronized ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME w ) NAME w ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME h ) NAME h ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ( VAR VAR ( TYPE short[] ) TYPE short[] ( NAME d ) NAME d ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_6 ) NAME VAR_6 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  METHOD_3 ( mContext , id , VAR_1 , VAR_2 , VAR_3 , VAR_4 , w , h , VAR_5 , d , VAR_6 ) )  METHOD_3 ( mContext , id , VAR_1 , VAR_2 , VAR_3 , VAR_4 , w , h , VAR_5 , d , VAR_6 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME state ) NAME state ) VAR VAR ( VAR VAR ( TYPE android.bluetooth.BluetoothDevice ) TYPE android.bluetooth.BluetoothDevice ( NAME device ) NAME device ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SWITCH SWITCH ( NAME state ) NAME state ( CASE VAR_1 ( BLOCK BLOCK ( IF IF ( COND VAR_2 . equals ( device ) ) COND VAR_2 . equals ( device ) ( THEN THEN (  METHOD_2 ( VAR_3 , device ) )  METHOD_2 ( VAR_3 , device ) (  METHOD_3 ( VAR_2 , VAR_4 , VAR_5 ) )  METHOD_3 ( VAR_2 , VAR_4 , VAR_5 ) (  transitionTo ( VAR_6 ) )  transitionTo ( VAR_6 ) ) THEN THEN ( ELSE ELSE (  android.util.Log.e ( VAR_7 . TAG , ( STRING_1 + device ) ) )  android.util.Log.e ( VAR_7 . TAG , ( STRING_1 + device ) ) ) ELSE ELSE ) IF IF (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_1 ( DEFAULT DEFAULT ( BLOCK BLOCK (  android.util.Log.e ( VAR_7 . TAG , ( ( ( STRING_2 + device ) + STRING_3 ) + state ) ) )  android.util.Log.e ( VAR_7 . TAG , ( ( ( STRING_2 + device ) + STRING_3 ) + state ) ) (  break ; )  break ; ) BLOCK BLOCK ) DEFAULT DEFAULT ) SWITCH SWITCH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME p ) NAME p ( INIT = new TYPE_1 ( STRING_1 ) ) INIT = new TYPE_1 ( STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME ar ) NAME ar ( INIT = new TYPE_2 ( p . METHOD_2 ( ) [ 0 ] , null ) ) INIT = new TYPE_2 ( p . METHOD_2 ( ) [ 0 ] , null ) ) VAR VAR (  assertFalse ( VAR_1 . METHOD_3 ( ar , VAR_2 , false , VAR_3 , VAR_4 ) ) )  assertFalse ( VAR_1 . METHOD_3 ( ar , VAR_2 , false , VAR_3 , VAR_4 ) ) (  assertTrue ( ( ( VAR_4 . METHOD_4 ( ) . METHOD_5 ( STRING_2 ) ) != ( - 1 ) ) ) )  assertTrue ( ( ( VAR_4 . METHOD_4 ( ) . METHOD_5 ( STRING_2 ) ) != ( - 1 ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  VAR_1 . METHOD_1 ( ) )  VAR_1 . METHOD_1 ( ) (  METHOD_2 ( VAR_2 ) )  METHOD_2 ( VAR_2 ) (  METHOD_3 ( ) )  METHOD_3 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE java.lang.Throwable ) TYPE java.lang.Throwable ( NAME t ) NAME t ( BLOCK BLOCK (  METHOD_4 ( t ) )  METHOD_4 ( t ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  throw new java.lang.RuntimeException ( ) ; )  throw new java.lang.RuntimeException ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( PARAMS PARAMS ( VAR VAR ( TYPE com.android.jack.ir.ast.JDefinedClassOrInterface ) TYPE com.android.jack.ir.ast.JDefinedClassOrInterface ( NAME type ) NAME type ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( METHOD_1 ( ) . METHOD_2 ( this . METHOD_3 ( ) , type ) ) ) COND ! ( METHOD_1 ( ) . METHOD_2 ( this . METHOD_3 ( ) , type ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . get ( VAR_2 ) ) INIT = TYPE_2 . get ( VAR_2 ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_1 . METHOD_4 ( type ) )  VAR_1 . METHOD_4 ( type ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK (  TYPE_4 . METHOD_5 ( ) . METHOD_6 ( ) . METHOD_7 ( VAR_3 , e ) )  TYPE_4 . METHOD_5 ( ) . METHOD_6 ( ) . METHOD_7 ( VAR_3 , e ) (  throw new TYPE_5 ( e ) ; )  throw new TYPE_5 ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME packageName ) NAME packageName ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( VAR_2 , new TYPE_2 ( STRING_1 ) , VAR_3 , new TYPE_2 ( STRING_2 ) , VAR_4 ) { public java.lang.String METHOD_2 ( ) { return packageName ; } } ) INIT = new TYPE_1 ( VAR_2 , new TYPE_2 ( STRING_1 ) , VAR_3 , new TYPE_2 ( STRING_2 ) , VAR_4 ) { public java.lang.String METHOD_2 ( ) { return packageName ; } } ) VAR VAR ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_2 ) NAME METHOD_2 ( BLOCK BLOCK (  return packageName ; )  return packageName ; ) BLOCK BLOCK ) METHOD METHOD (  VAR_1 . METHOD_3 ( VAR_5 , new TYPE_2 ( STRING_3 ) , STRING_4 ) )  VAR_1 . METHOD_3 ( VAR_5 , new TYPE_2 ( STRING_3 ) , STRING_4 ) (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME session ) NAME session ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME context ) NAME context ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME fd ) NAME fd ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME callback ) NAME callback ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_3 ) COND VAR_3 ( THEN THEN ( TRY TRY ( BLOCK BLOCK (  VAR_4 = TYPE_4 . METHOD_2 ( VAR_1 ) )  VAR_4 = TYPE_4 . METHOD_2 ( VAR_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_5 = e )  VAR_5 = e ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) THEN THEN ) IF IF (  super . METHOD_1 ( session , VAR_1 , context , VAR_2 , fd , callback ) )  super . METHOD_1 ( session , VAR_1 , context , VAR_2 , fd , callback ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 . METHOD_2 ( VAR_1 ) ) INIT = VAR_4 . METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_3 == null ) COND VAR_3 == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_5 ) NAME VAR_5 ( INIT = TYPE_2 . METHOD_2 ( VAR_2 ) ) INIT = TYPE_2 . METHOD_2 ( VAR_2 ) ) VAR VAR ( IF IF ( COND VAR_5 == null ) COND VAR_5 == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_6 ) NAME VAR_6 ( INIT = VAR_3 . METHOD_3 ( ) . METHOD_4 ( ) ) INIT = VAR_3 . METHOD_3 ( ) . METHOD_4 ( ) ) VAR VAR (  VAR_5 . set ( TYPE_2 . METHOD_5 ( VAR_6 ) ) )  VAR_5 . set ( TYPE_2 . METHOD_5 ( VAR_6 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_3 ) COND VAR_3 ( THEN THEN ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_4 ) NAME VAR_4 ( INIT = ( ( TYPE_4 ) ( VAR_1 ) ) ) INIT = ( ( TYPE_4 ) ( VAR_1 ) ) ) VAR VAR (  return TYPE_5 . METHOD_2 ( VAR_4 , VAR_2 ) ; )  return TYPE_5 . METHOD_2 ( VAR_4 , VAR_2 ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_6 ) INIT = VAR_6 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_7 ) NAME VAR_7 ( INIT = false ) INIT = false ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_8 ) NAME VAR_8 ( INIT = 1 ) INIT = 1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME id ) NAME id ( INIT = VAR_1 . METHOD_3 ( VAR_9 , VAR_10 , VAR_7 , VAR_8 ) ) INIT = VAR_1 . METHOD_3 ( VAR_9 , VAR_10 , VAR_7 , VAR_8 ) ) VAR VAR (  return new TYPE_1 ( id , VAR_1 , VAR_2 , VAR_5 , VAR_7 , VAR_8 ) ; )  return new TYPE_1 ( id , VAR_1 , VAR_2 , VAR_5 , VAR_7 , VAR_8 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME context ) NAME context ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_2 ) < ( VAR_3 ) ) COND ( VAR_2 ) < ( VAR_3 ) ( THEN THEN (  return VAR_4 ; )  return VAR_4 ; ) THEN THEN ) IF IF ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  TYPE_3 . i ( STRING_1 , STRING_2 ) )  TYPE_3 . i ( STRING_1 , STRING_2 ) (  VAR_1 = TYPE_4 . METHOD_2 ( context ) )  VAR_1 = TYPE_4 . METHOD_2 ( context ) ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  TYPE_3 . i ( STRING_1 , STRING_3 ) )  TYPE_3 . i ( STRING_1 , STRING_3 ) (  return VAR_4 ; )  return VAR_4 ; ) THEN THEN ) IF IF ) THEN THEN ) IF IF ( IF IF ( COND context . METHOD_3 ( VAR_5 class ) . METHOD_4 ( VAR_1 ) ) COND context . METHOD_3 ( VAR_5 class ) . METHOD_4 ( VAR_1 ) ( THEN THEN (  return VAR_6 ; )  return VAR_6 ; ) THEN THEN ) IF IF (  return 0 ; )  return 0 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME t ) NAME t ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  t . METHOD_2 ( VAR_1 ) )  t . METHOD_2 ( VAR_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( BLOCK BLOCK (  METHOD_3 ( VAR_2 ) )  METHOD_3 ( VAR_2 ) ) BLOCK BLOCK ) CATCH CATCH ( FINALLY FINALLY ( IF IF ( COND ( t . METHOD_4 ( ) ) != ( VAR_3 ) ) COND ( t . METHOD_4 ( ) ) != ( VAR_3 ) ( THEN THEN (  t . METHOD_5 ( ) )  t . METHOD_5 ( ) (  fail ( STRING_1 ) )  fail ( STRING_1 ) ) THEN THEN ) IF IF ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2<TYPE_3> ) TYPE TYPE_2<TYPE_3> ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_2 ( VAR_3 , false ) ) INIT = VAR_1 . METHOD_2 ( VAR_3 , false ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK ( IF IF ( COND ( ( VAR_4 . METHOD_3 ( ) ) == 1 ) && ( VAR_4 . METHOD_4 ( 0 ) . getName ( ) . equals ( VAR_5 ) ) ) COND ( ( VAR_4 . METHOD_3 ( ) ) == 1 ) && ( VAR_4 . METHOD_4 ( 0 ) . getName ( ) . equals ( VAR_5 ) ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.Map<java.lang.String,java.lang.String> ) RETURN java.util.Map<java.lang.String,java.lang.String> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME config ) NAME config ( INIT = this ) INIT = this ) VAR VAR ( IF IF ( COND VAR_1 . METHOD_2 ( ) ) COND VAR_1 . METHOD_2 ( ) ( THEN THEN (  config = METHOD_3 ( ) )  config = METHOD_3 ( ) (  TYPE_2 . METHOD_4 ( ( config != null ) ) )  TYPE_2 . METHOD_4 ( ( config != null ) ) ) THEN THEN ) IF IF ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.String> ) TYPE java.util.Map<java.lang.String,java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . METHOD_5 ( ) ) INIT = VAR_3 . METHOD_5 ( ) ) VAR VAR (  return VAR_2 != null ? VAR_2 : VAR_4 < java.lang.String , )  return VAR_2 != null ? VAR_2 : VAR_4 < java.lang.String , (  java.lang.String > of ( ) )  java.lang.String > of ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.Throwable ) TYPE java.lang.Throwable ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( STRING_1 , null , false ) ) INIT = new TYPE_1 ( STRING_1 , null , false ) ) VAR VAR (  METHOD_2 ( VAR_1 ) )  METHOD_2 ( VAR_1 ) (  VAR_1 . METHOD_3 ( new java.lang.Throwable ( ) ) )  VAR_1 . METHOD_3 ( new java.lang.Throwable ( ) ) (  METHOD_2 ( VAR_1 ) )  METHOD_2 ( VAR_1 ) (  VAR_1 . METHOD_3 ( new java.lang.Throwable ( ) ) )  VAR_1 . METHOD_3 ( new java.lang.Throwable ( ) ) (  METHOD_2 ( VAR_1 ) )  METHOD_2 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME obj ) NAME obj ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( obj instanceof TYPE_2 ) ) COND ! ( obj instanceof TYPE_2 ) ( THEN THEN (  throw new java.lang.IllegalArgumentException ( ) ; )  throw new java.lang.IllegalArgumentException ( ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME number ) NAME number ( INIT = ( ( TYPE_2 ) ( obj ) ) ) INIT = ( ( TYPE_2 ) ( obj ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( number . METHOD_3 ( ) , null ) ) INIT = METHOD_2 ( number . METHOD_3 ( ) , null ) ) VAR VAR (  return super . METHOD_1 ( VAR_1 . METHOD_4 ( ) , VAR_1 . METHOD_5 ( ) ) ; )  return super . METHOD_1 ( VAR_1 . METHOD_4 ( ) , VAR_1 . METHOD_5 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE android.bluetooth.BluetoothDevice ) TYPE android.bluetooth.BluetoothDevice ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME config ) NAME config ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_3 = config )  VAR_3 = config (  TYPE_2 . d ( ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + VAR_2 ) ) )  TYPE_2 . d ( ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + VAR_2 ) ) ( VAR VAR ( TYPE android.os.Bundle ) TYPE android.os.Bundle ( NAME result ) NAME result ( INIT = new android.os.Bundle ( ) ) INIT = new android.os.Bundle ( ) ) VAR VAR (  result . METHOD_2 ( STRING_3 , VAR_2 ) )  result . METHOD_2 ( STRING_3 , VAR_2 ) (  VAR_4 . METHOD_3 ( STRING_4 , result ) )  VAR_4 . METHOD_3 ( STRING_4 , result ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_2 ) == VAR_1 ) COND ( VAR_2 ) == VAR_1 ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( IF IF ( COND VAR_1 && ( ! ( VAR_3 . METHOD_2 ( ) ) ) ) COND VAR_1 && ( ! ( VAR_3 . METHOD_2 ( ) ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ( ELSE ELSE ( IF IF ( COND ( ! VAR_1 ) && ( ! ( VAR_3 . METHOD_3 ( ) ) ) ) COND ( ! VAR_1 ) && ( ! ( VAR_3 . METHOD_3 ( ) ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF (  VAR_2 = VAR_1 )  VAR_2 = VAR_1 (  VAR_4 . METHOD_4 ( ) )  VAR_4 . METHOD_4 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.List<java.lang.String> ) TYPE TYPE_1.List<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1.List<java.lang.String> ) TYPE TYPE_1.List<java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( IF IF ( COND VAR_3 . METHOD_2 ( VAR_4 ) ) COND VAR_3 . METHOD_2 ( VAR_4 ) ( THEN THEN (  VAR_1 . METHOD_3 ( VAR_4 ) )  VAR_1 . METHOD_3 ( VAR_4 ) (  return true ; )  return true ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_5 ) NAME VAR_5 ( INIT = TYPE_2 . METHOD_4 ( VAR_3 ) ) INIT = TYPE_2 . METHOD_4 ( VAR_3 ) ) VAR VAR ( IF IF ( COND VAR_2 . METHOD_5 ( VAR_5 ) ) COND VAR_2 . METHOD_5 ( VAR_5 ) ( THEN THEN (  VAR_2 . METHOD_3 ( VAR_5 ) )  VAR_2 . METHOD_3 ( VAR_5 ) (  return true ; )  return true ; ) THEN THEN ) IF IF (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME session ) NAME session ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME path ) NAME path ( INIT = new TYPE_4 ( VAR_2 , VAR_3 ) ) INIT = new TYPE_4 ( VAR_2 , VAR_3 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_5 ( path , VAR_1 ) ) INIT = new TYPE_5 ( path , VAR_1 ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_5 ) NAME VAR_5 ( IN session . METHOD_2 ( ) ) IN session . METHOD_2 ( ) ( BLOCK BLOCK ( IF IF ( COND VAR_5 . METHOD_3 ( ) . equals ( path ) ) COND VAR_5 . METHOD_3 ( ) . equals ( path ) ( THEN THEN (  throw new TYPE_3 ( VAR_4 . METHOD_4 ( ) , VAR_5 . METHOD_4 ( ) ) ; )  throw new TYPE_3 ( VAR_4 . METHOD_4 ( ) , VAR_5 . METHOD_4 ( ) ) ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  session . METHOD_5 ( VAR_4 ) )  session . METHOD_5 ( VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( VAR_1 ) ) INIT = METHOD_2 ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ( INIT = false ) INIT = false ) VAR VAR ( IF IF ( COND METHOD_3 ( VAR_2 ) ) COND METHOD_3 ( VAR_2 ) ( THEN THEN ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_5 . METHOD_4 ( ) ) INIT = VAR_5 . METHOD_4 ( ) ) VAR VAR (  VAR_4 = METHOD_5 ( VAR_4 , VAR_6 ) )  VAR_4 = METHOD_5 ( VAR_4 , VAR_6 ) ( TRY TRY ( BLOCK BLOCK (  VAR_7 = new TYPE_2 ( VAR_4 , VAR_1 ) )  VAR_7 = new TYPE_2 ( VAR_4 , VAR_1 ) (  VAR_3 = true )  VAR_3 = true ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_8 = false )  VAR_8 = false ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) THEN THEN ) IF IF (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Class<?> ) TYPE java.lang.Class<?> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ( INIT = METHOD_2 ( name ) ) INIT = METHOD_2 ( name ) ) VAR VAR ( IF IF ( COND result == null ) COND result == null ( THEN THEN ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_1 ( name , VAR_1 , VAR_2 ) ) INIT = new TYPE_1 ( name , VAR_1 , VAR_2 ) ) VAR VAR ( DO-WHILE DO-WHILE ( COND result == null ) COND result == null ( BLOCK BLOCK ( IF IF ( COND METHOD_3 ( VAR_3 ) ) COND METHOD_3 ( VAR_3 ) ( THEN THEN (  return VAR_3 ; )  return VAR_3 ; ) THEN THEN ) IF IF (  result = METHOD_2 ( name ) )  result = METHOD_2 ( name ) ) BLOCK BLOCK ) DO-WHILE DO-WHILE ) THEN THEN ) IF IF (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_1 . METHOD_2 ( VAR_2 ) ) INIT = VAR_1 . METHOD_2 ( VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_4 . METHOD_3 ( ) ) INIT = VAR_4 . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_6 ) NAME VAR_6 ( INIT = new TYPE_1 ( VAR_5 ) ) INIT = new TYPE_1 ( VAR_5 ) ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_7 ) NAME VAR_7 ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND VAR_7 < VAR_5 ) COND VAR_7 < VAR_5 ( UPDATE UPDATE (  VAR_7 ++ )  VAR_7 ++ ) UPDATE UPDATE ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_8 ) NAME VAR_8 ( INIT = METHOD_4 ( VAR_1 , VAR_4 . METHOD_3 ( ) , VAR_3 ) ) INIT = METHOD_4 ( VAR_1 , VAR_4 . METHOD_3 ( ) , VAR_3 ) ) VAR VAR (  VAR_8 . METHOD_5 ( ) )  VAR_8 . METHOD_5 ( ) (  VAR_6 . set ( VAR_7 , VAR_8 ) )  VAR_6 . set ( VAR_7 , VAR_8 ) ) BLOCK BLOCK ) FOR FOR (  return VAR_6 ; )  return VAR_6 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 > 0 ) COND VAR_1 > 0 ( THEN THEN ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_1 . METHOD_2 ( ) ) INIT = TYPE_1 . METHOD_2 ( ) ) VAR VAR ( DO-WHILE DO-WHILE ( COND VAR_1 > 0 ) COND VAR_1 > 0 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  this . METHOD_3 ( VAR_1 ) )  this . METHOD_3 ( VAR_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ( IF IF ( COND VAR_3 ) COND VAR_3 ( THEN THEN (  break ; )  break ; ) THEN THEN ) IF IF (  VAR_1 = ( VAR_1 - ( TYPE_1 . METHOD_2 ( ) ) ) - VAR_2 )  VAR_1 = ( VAR_1 - ( TYPE_1 . METHOD_2 ( ) ) ) - VAR_2 ) BLOCK BLOCK ) DO-WHILE DO-WHILE ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME a ) NAME a ) VAR VAR ( VAR VAR ( TYPE java.lang.Integer ) TYPE java.lang.Integer ( NAME b ) NAME b ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND a && ( ( b . METHOD_2 ( ) ) == INT_1 ) ) COND a && ( ( b . METHOD_2 ( ) ) == INT_1 ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  Main . fail ( ( ( ( STRING_1 + a ) + STRING_2 ) + b ) ) )  Main . fail ( ( ( ( STRING_1 + a ) + STRING_2 ) + b ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( 1 , 1 , VAR_2 , 1 ) ) INIT = new TYPE_1 ( 1 , 1 , VAR_2 , 1 ) ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR (  VAR_3 [ 0 ] = CHAR_1 )  VAR_3 [ 0 ] = CHAR_1 ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_3 . METHOD_3 ( VAR_3 ) ) INIT = TYPE_3 . METHOD_3 ( VAR_3 ) ) VAR VAR (  assertEquals ( VAR_5 , VAR_6 . METHOD_4 ( VAR_4 . METHOD_5 ( ) ) ) )  assertEquals ( VAR_5 , VAR_6 . METHOD_4 ( VAR_4 . METHOD_5 ( ) ) ) (  METHOD_6 ( ) )  METHOD_6 ( ) (  METHOD_7 ( ) )  METHOD_7 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) INIT = VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) VAR VAR ( IF IF ( COND ( VAR_1 != null ) && ( ( VAR_1 . METHOD_5 ( ) ) != 0 ) ) COND ( VAR_1 != null ) && ( ( VAR_1 . METHOD_5 ( ) ) != 0 ) ( THEN THEN ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . METHOD_6 ( mContext ) ) INIT = VAR_1 . METHOD_6 ( mContext ) ) VAR VAR ( IF IF ( COND VAR_3 != null ) COND VAR_3 != null ( THEN THEN (  return VAR_3 ; )  return VAR_3 ; ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return METHOD_7 ( VAR_2 ) ; )  return METHOD_7 ( VAR_2 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return name . METHOD_2 ( STRING_1 ) ? new TYPE_2 ( VAR_1 , name . METHOD_3 ( 0 , ( ( name . METHOD_4 ( CHAR_1 ) ) - 1 ) ) , name . METHOD_3 ( ( ( name . METHOD_4 ( CHAR_1 ) ) + 1 ) ) ) : new TYPE_3 ( name ) ; )  return name . METHOD_2 ( STRING_1 ) ? new TYPE_2 ( VAR_1 , name . METHOD_3 ( 0 , ( ( name . METHOD_4 ( CHAR_1 ) ) - 1 ) ) , name . METHOD_3 ( ( ( name . METHOD_4 ( CHAR_1 ) ) + 1 ) ) ) : new TYPE_3 ( name ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = this . VAR_2 ) INIT = this . VAR_2 ) VAR VAR (  VAR_2 . METHOD_2 ( ) )  VAR_2 . METHOD_2 ( ) ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.Object[] ) TYPE java.lang.Object[] ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 ) INIT = VAR_4 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME n ) NAME n ( INIT = size ) INIT = size ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < n ) COND i < n ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK ( IF IF ( COND VAR_1 == ( VAR_3 [ i ] ) ) COND VAR_1 == ( VAR_3 [ i ] ) ( THEN THEN (  METHOD_3 ( i ) )  METHOD_3 ( i ) (  break ; )  break ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR FOR ) BLOCK BLOCK ( FINALLY FINALLY (  VAR_2 . METHOD_4 ( ) )  VAR_2 . METHOD_4 ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  return VAR_5 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; )  return VAR_5 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_6 ) NAME VAR_6 ( BLOCK BLOCK (  VAR_5 . fail ( VAR_6 . METHOD_2 ( ) ) )  VAR_5 . fail ( VAR_6 . METHOD_2 ( ) ) (  throw VAR_6 ; )  throw VAR_6 ; ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_5 . fail ( VAR_7 ) )  VAR_5 . fail ( VAR_7 ) (  throw e ; )  throw e ; ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE java.lang.RuntimeException ) TYPE java.lang.RuntimeException ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_5 . fail ( VAR_7 ) )  VAR_5 . fail ( VAR_7 ) (  throw new TYPE_1 ( VAR_7 ) ; )  throw new TYPE_1 ( VAR_7 ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME service ) NAME service ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  return service . METHOD_3 ( METHOD_4 ( ) ) ; )  return service . METHOD_3 ( METHOD_4 ( ) ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME ex ) NAME ex ( BLOCK BLOCK (  ex . METHOD_5 ( ) )  ex . METHOD_5 ( ) ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE java.lang.NullPointerException ) TYPE java.lang.NullPointerException ( NAME ex ) NAME ex ( BLOCK BLOCK (  throw new TYPE_2 ( STRING_1 ) ; )  throw new TYPE_2 ( STRING_1 ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( STRING_1 ) )  VAR_1 . METHOD_2 ( STRING_1 ) (  VAR_1 . METHOD_2 ( STRING_2 ) )  VAR_1 . METHOD_2 ( STRING_2 ) (  VAR_1 . METHOD_2 ( STRING_3 ) )  VAR_1 . METHOD_2 ( STRING_3 ) (  VAR_1 . METHOD_2 ( STRING_4 ) )  VAR_1 . METHOD_2 ( STRING_4 ) (  VAR_1 . METHOD_2 ( STRING_5 ) )  VAR_1 . METHOD_2 ( STRING_5 ) (  METHOD_3 ( TYPE_1 . METHOD_4 ( ) , true ) )  METHOD_3 ( TYPE_1 . METHOD_4 ( ) , true ) (  VAR_1 . METHOD_2 ( CHAR_1 ) )  VAR_1 . METHOD_2 ( CHAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME number ) NAME number ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_6 ) == ( VAR_7 ) ) COND ( VAR_6 ) == ( VAR_7 ) ( THEN THEN (  return METHOD_1 ( VAR_8 . METHOD_2 ( METHOD_3 ( number ) ) , result , VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; )  return METHOD_1 ( VAR_8 . METHOD_2 ( METHOD_3 ( number ) ) , result , VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; ) THEN THEN ( ELSE ELSE (  return METHOD_1 ( result , VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; )  return METHOD_1 ( result , VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN com.android.jack.ir.ast.JMethod ) RETURN com.android.jack.ir.ast.JMethod ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE com.android.jack.ir.ast.JMethod ) TYPE com.android.jack.ir.ast.JMethod ( NAME m ) NAME m ( IN VAR_1 . METHOD_2 ( ) ) IN VAR_1 . METHOD_2 ( ) ( BLOCK BLOCK ( IF IF ( COND ( ( m . METHOD_3 ( ) ) == VAR_2 ) && ( ( m . METHOD_4 ( ) ) == VAR_3 ) ) COND ( ( m . METHOD_3 ( ) ) == VAR_2 ) && ( ( m . METHOD_4 ( ) ) == VAR_3 ) ( THEN THEN (  return m ; )  return m ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER final ) MODIFIER final ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  this )  this ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_3 ) ) COND ! ( VAR_3 ) ( THEN THEN (  throw new java.lang.RuntimeException ( STRING_1 ) ; )  throw new java.lang.RuntimeException ( STRING_1 ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_2 ( VAR_1 , VAR_2 ) ) INIT = METHOD_2 ( VAR_1 , VAR_2 ) ) VAR VAR ( IF IF ( COND VAR_4 != 0 ) COND VAR_4 != 0 ( THEN THEN ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME res ) NAME res ( INIT = new TYPE_1 ( this , VAR_4 ) ) INIT = new TYPE_1 ( this , VAR_4 ) ) VAR VAR (  METHOD_3 ( res . METHOD_4 ( ) ) )  METHOD_3 ( res . METHOD_4 ( ) ) (  return res ; )  return res ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED (  throw new TYPE_2 ( ( STRING_2 + VAR_2 ) ) ; )  throw new TYPE_2 ( ( STRING_2 + VAR_2 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME f ) NAME f ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 . METHOD_2 ( f ) ) COND VAR_1 . METHOD_2 ( f ) ( THEN THEN (  METHOD_1 ( f . METHOD_3 ( ) ) )  METHOD_1 ( f . METHOD_3 ( ) ) (  METHOD_1 ( f . METHOD_4 ( ) ) )  METHOD_1 ( f . METHOD_4 ( ) ) (  METHOD_5 ( f ) )  METHOD_5 ( f ) (  VAR_1 . METHOD_6 ( f ) )  VAR_1 . METHOD_6 ( f ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME context ) NAME context ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME method ) NAME method ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME call ) NAME call ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 ) INIT = VAR_3 ) VAR VAR ( IF IF ( COND ( VAR_2 . equals ( STRING_1 ) ) && ( ( context . METHOD_2 ( ) . METHOD_3 ( ) ) >= 8 ) ) COND ( VAR_2 . equals ( STRING_1 ) ) && ( ( context . METHOD_2 ( ) . METHOD_3 ( ) ) >= 8 ) ( THEN THEN ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( INIT = java.lang.String.format ( ( STRING_2 + STRING_3 ) , call . name ) ) INIT = java.lang.String.format ( ( STRING_2 + STRING_3 ) , call . name ) ) VAR VAR (  context . METHOD_4 ( VAR_5 , method , context . METHOD_5 ( call ) , VAR_4 , null ) )  context . METHOD_4 ( VAR_5 , method , context . METHOD_5 ( call ) , VAR_4 , null ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME session ) NAME session ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME s ) NAME s ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME c ) NAME c ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME fd ) NAME fd ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME callback ) NAME callback ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE long ) TYPE long ( NAME time ) NAME time ( INIT = TYPE_4 . METHOD_2 ( session ) ) INIT = TYPE_4 . METHOD_2 ( session ) ) VAR VAR (  assertTrue ( ( time != 0 ) ) )  assertTrue ( ( time != 0 ) ) (  assertTrue ( ( time < ( TYPE_5 . METHOD_3 ( ) ) ) ) )  assertTrue ( ( time < ( TYPE_5 . METHOD_3 ( ) ) ) ) (  super . METHOD_1 ( session , s , c , VAR_1 , fd , callback ) )  super . METHOD_1 ( session , s , c , VAR_1 , fd , callback ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( STRING_1 ) ) INIT = TYPE_1 . METHOD_2 ( STRING_1 ) ) VAR VAR (  METHOD_3 ( VAR_1 , STRING_2 , 0 , CHAR_1 , 6 , INT_1 ) )  METHOD_3 ( VAR_1 , STRING_2 , 0 , CHAR_1 , 6 , INT_1 ) (  METHOD_4 ( VAR_1 , STRING_3 , INT_2 , INT_3 , 0 , CHAR_1 , 6 , INT_1 ) )  METHOD_4 ( VAR_1 , STRING_3 , INT_2 , INT_3 , 0 , CHAR_1 , 6 , INT_1 ) (  METHOD_4 ( VAR_1 , STRING_4 , INT_3 , INT_2 , 0 , CHAR_1 , 6 , INT_1 ) )  METHOD_4 ( VAR_1 , STRING_4 , INT_3 , INT_2 , 0 , CHAR_1 , 6 , INT_1 ) (  METHOD_4 ( VAR_1 , STRING_2 , 0 , CHAR_1 , 6 , INT_1 ) )  METHOD_4 ( VAR_1 , STRING_2 , 0 , CHAR_1 , 6 , INT_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( 5 ) ) INIT = new TYPE_1 ( 5 ) ) VAR VAR (  METHOD_2 ( 1 , VAR_1 ) )  METHOD_2 ( 1 , VAR_1 ) (  METHOD_2 ( INT_1 , VAR_1 ) )  METHOD_2 ( INT_1 , VAR_1 ) (  METHOD_2 ( INT_2 , VAR_1 ) )  METHOD_2 ( INT_2 , VAR_1 ) (  METHOD_2 ( INT_3 , VAR_1 ) )  METHOD_2 ( INT_3 , VAR_1 ) (  METHOD_2 ( INT_4 , VAR_1 ) )  METHOD_2 ( INT_4 , VAR_1 ) (  TYPE_2 . METHOD_3 ( ) )  TYPE_2 . METHOD_3 ( ) (  VAR_1 . METHOD_4 ( ) )  VAR_1 . METHOD_4 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ! ( TYPE_1 . METHOD_2 ( ) ) ) COND ! ( TYPE_1 . METHOD_2 ( ) ) ( THEN THEN (  android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) )  android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) (  return 0 ; )  return 0 ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME service ) NAME service ( INIT = METHOD_3 ( ) ) INIT = METHOD_3 ( ) ) VAR VAR ( IF IF ( COND service == null ) COND service == null ( THEN THEN (  return 0 ; )  return 0 ; ) THEN THEN ) IF IF (  return service . METHOD_1 ( ) ; )  return service . METHOD_1 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME text ) NAME text ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME start ) NAME start ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE float[] ) TYPE float[] ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return TYPE_1 . METHOD_1 ( VAR_1 , text . METHOD_2 ( ) , start , ( VAR_2 - start ) , VAR_3 , VAR_4 ) ; )  return TYPE_1 . METHOD_1 ( VAR_1 , text . METHOD_2 ( ) , start , ( VAR_2 - start ) , VAR_3 , VAR_4 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME node ) NAME node ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = node . METHOD_2 ( ) ) INIT = node . METHOD_2 ( ) ) VAR VAR (  TYPE_2 . METHOD_3 ( mContext , VAR_1 , node . METHOD_4 ( ) . METHOD_5 ( ) , 0 , VAR_1 . length ( ) ) )  TYPE_2 . METHOD_3 ( mContext , VAR_1 , node . METHOD_4 ( ) . METHOD_5 ( ) , 0 , VAR_1 . length ( ) ) (  return super . METHOD_1 ( node ) ; )  return super . METHOD_1 ( node ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = java.lang.Integer . METHOD_3 ( VAR_1 ) ) INIT = java.lang.Integer . METHOD_3 ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_4 ( ) ) INIT = METHOD_4 ( ) ) VAR VAR ( IF IF ( COND VAR_3 == null ) COND VAR_3 == null ( THEN THEN (  VAR_4 . println ( STRING_1 ) )  VAR_4 . println ( STRING_1 ) (  return ; )  return ; ) THEN THEN ) IF IF ( TRY TRY ( BLOCK BLOCK (  VAR_5 . METHOD_5 ( VAR_2 , VAR_3 ) )  VAR_5 . METHOD_5 ( VAR_2 , VAR_3 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public synchronized ) MODIFIER public synchronized ( RETURN void ) RETURN void ( NAME run ) NAME run ( PARAMS PARAMS ( VAR VAR ( TYPE com.android.jack.ir.ast.JMethod ) TYPE com.android.jack.ir.ast.JMethod ( NAME method ) NAME method ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( method . METHOD_1 ( ) ) || ( method . METHOD_2 ( ) ) ) COND ( method . METHOD_1 ( ) ) || ( method . METHOD_2 ( ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME session ) NAME session ( INIT = TYPE_2 . METHOD_3 ( ) ) INIT = TYPE_2 . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ( INIT = session . METHOD_4 ( VAR_2 class ) ) INIT = session . METHOD_4 ( VAR_2 class ) ) VAR VAR ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_3 ( ) ) INIT = new TYPE_3 ( ) ) VAR VAR (  VAR_1 = session . METHOD_5 ( VAR_3 ) )  VAR_1 = session . METHOD_5 ( VAR_3 ) ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_4 ( VAR_1 ) ) INIT = new TYPE_4 ( VAR_1 ) ) VAR VAR (  VAR_4 . METHOD_6 ( method ) )  VAR_4 . METHOD_6 ( method ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_6 ) NAME VAR_6 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_7 ) NAME VAR_7 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_2 . METHOD_2 ( VAR_1 , ( ( int ) ( VAR_8 ) ) , ( ( int ) ( VAR_9 ) ) , ( ( int ) ( VAR_2 . METHOD_3 ( ) ) ) , ( ( int ) ( VAR_2 . METHOD_4 ( ) ) ) , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 ) )  TYPE_2 . METHOD_2 ( VAR_1 , ( ( int ) ( VAR_8 ) ) , ( ( int ) ( VAR_9 ) ) , ( ( int ) ( VAR_2 . METHOD_3 ( ) ) ) , ( ( int ) ( VAR_2 . METHOD_4 ( ) ) ) , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME value ) NAME value ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  throw new TYPE_1 ( ) ; )  throw new TYPE_1 ( ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = INT_1 ) INIT = INT_1 ) VAR VAR (  return ( ( ( ( value < < ( VAR_1 | INT_2 ) ) + ( value > > ( VAR_1 ^ INT_3 ) ) ) + ( value > > > ( VAR_1 + INT_4 ) ) ) + ( value < < ( VAR_1 - VAR_3 ) ) ) + ( value > > ( ( byte ) ( VAR_1 ) ) ) ; )  return ( ( ( ( value < < ( VAR_1 | INT_2 ) ) + ( value > > ( VAR_1 ^ INT_3 ) ) ) + ( value > > > ( VAR_1 + INT_4 ) ) ) + ( value < < ( VAR_1 - VAR_3 ) ) ) + ( value > > ( ( byte ) ( VAR_1 ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) == null ) COND ( VAR_1 ) == null ( THEN THEN (  return new TYPE_2 ( VAR_2 . in ) ; )  return new TYPE_2 ( VAR_2 . in ) ; ) THEN THEN ( ELSE ELSE (  METHOD_2 ( ) )  METHOD_2 ( ) ( TRY TRY ( BLOCK BLOCK (  return new TYPE_3 ( VAR_1 ) ; )  return new TYPE_3 ( VAR_1 ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_5 ( e ) ; )  throw new TYPE_5 ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static final ) MODIFIER public static final ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME provider ) NAME provider ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( provider == null ) || ( ( provider . length ( ) ) == 0 ) ) COND ( provider == null ) || ( ( provider . length ( ) ) == 0 ) ( THEN THEN (  throw new java.lang.IllegalArgumentException ( STRING_1 ) ; )  throw new java.lang.IllegalArgumentException ( STRING_1 ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME p ) NAME p ( INIT = TYPE_6 . METHOD_2 ( provider ) ) INIT = TYPE_6 . METHOD_2 ( provider ) ) VAR VAR ( IF IF ( COND p == null ) COND p == null ( THEN THEN (  throw new TYPE_3 ( ( STRING_2 + provider ) ) ; )  throw new TYPE_3 ( ( STRING_2 + provider ) ) ; ) THEN THEN ) IF IF (  return TYPE_1 . METHOD_3 ( VAR_1 , p ) ; )  return TYPE_1 . METHOD_3 ( VAR_1 , p ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME provider ) NAME provider ( INIT = new TYPE_1 ( STRING_1 ) ) INIT = new TYPE_1 ( STRING_1 ) ) VAR VAR (  assertNotNull ( TYPE_2 . METHOD_2 ( provider . getName ( ) ) ) )  assertNotNull ( TYPE_2 . METHOD_2 ( provider . getName ( ) ) ) (  TYPE_2 . METHOD_3 ( provider ) )  TYPE_2 . METHOD_3 ( provider ) (  assertNotNull ( TYPE_2 . METHOD_2 ( provider . getName ( ) ) ) )  assertNotNull ( TYPE_2 . METHOD_2 ( provider . getName ( ) ) ) (  TYPE_2 . METHOD_4 ( provider . getName ( ) ) )  TYPE_2 . METHOD_4 ( provider . getName ( ) ) (  METHOD_5 ( TYPE_2 . METHOD_2 ( provider . getName ( ) ) ) )  METHOD_5 ( TYPE_2 . METHOD_2 ( provider . getName ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( IF IF ( COND ! VAR_1 ) COND ! VAR_1 ( THEN THEN (  server . METHOD_1 ( ( 1 * INT_1 ) ) )  server . METHOD_1 ( ( 1 * INT_1 ) ) ) THEN THEN ) IF IF (  server . METHOD_2 ( VAR_1 ) )  server . METHOD_2 ( VAR_1 ) (  server . METHOD_3 ( ) )  server . METHOD_3 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_2 [ 0 ] = e )  VAR_2 [ 0 ] = e ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_3 [ 0 ] = e )  VAR_3 [ 0 ] = e ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE java.lang.RuntimeException ) TYPE java.lang.RuntimeException ( NAME e ) NAME e ( BLOCK BLOCK (  throw e ; )  throw e ; ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ( BLOCK BLOCK (  throw new java.lang.RuntimeException ( e ) ; )  throw new java.lang.RuntimeException ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.List<java.lang.String> ) RETURN java.util.List<java.lang.String> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.StringBuilder ) TYPE java.lang.StringBuilder ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( ( FLOAT_1 - FLOAT_2 ) ) )  METHOD_2 ( ( FLOAT_1 - FLOAT_2 ) ) ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.ArrayList < java.lang.String > ( ) ) INIT = new java.util.ArrayList < java.lang.String > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME s ) NAME s ( IN VAR_3 . METHOD_3 ( VAR_1 ) ) IN VAR_3 . METHOD_3 ( VAR_1 ) ( BLOCK BLOCK ( IF IF ( COND ( s != null ) && ( ! ( s . METHOD_4 ( ) ) ) ) COND ( s != null ) && ( ! ( s . METHOD_4 ( ) ) ) ( THEN THEN (  VAR_2 . METHOD_5 ( s . METHOD_6 ( ) ) )  VAR_2 . METHOD_5 ( s . METHOD_6 ( ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String[][] ) TYPE java.lang.String[][] ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.Set<java.lang.String> ) TYPE java.util.Set<java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME count ) NAME count ( INIT = 0 ) INIT = 0 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_2 ( VAR_3 ) ) INIT = new TYPE_2 ( VAR_3 ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME test ) NAME test ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( IF IF ( COND ( test [ 1 ] . METHOD_2 ( STRING_1 ) ) && ( METHOD_3 ( STRING_2 , STRING_3 ) ) ) COND ( test [ 1 ] . METHOD_2 ( STRING_1 ) ) && ( METHOD_3 ( STRING_2 , STRING_3 ) ) ( THEN THEN (  continue ; )  continue ; ) THEN THEN ) IF IF (  METHOD_1 ( ( ++ count ) , VAR_4 , test [ 0 ] , test [ 1 ] , VAR_2 ) )  METHOD_1 ( ( ++ count ) , VAR_4 , test [ 0 ] , test [ 1 ] , VAR_2 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER synchronized ) MODIFIER synchronized ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_3> ) TYPE java.util.List<TYPE_3> ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_2 ( VAR_1 ) ) INIT = METHOD_2 ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_3 ( VAR_5 , new TYPE_4 ( VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) , VAR_2 . METHOD_5 ( ) ) , VAR_1 . METHOD_6 ( ) , VAR_6 ) ) INIT = new TYPE_3 ( VAR_5 , new TYPE_4 ( VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) , VAR_2 . METHOD_5 ( ) ) , VAR_1 . METHOD_6 ( ) , VAR_6 ) ) VAR VAR (  VAR_3 . METHOD_7 ( VAR_4 ) )  VAR_3 . METHOD_7 ( VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE android.content.Intent ) TYPE android.content.Intent ( NAME VAR_1 ) NAME VAR_1 ( INIT = new android.content.Intent ( VAR_2 ) ) INIT = new android.content.Intent ( VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_2 ( 0 , 0 , VAR_4 , STRING_1 ) ) INIT = METHOD_2 ( 0 , 0 , VAR_4 , STRING_1 ) ) VAR VAR (  VAR_1 . METHOD_3 ( STRING_2 , TYPE_1 . METHOD_4 ( VAR_3 ) ) )  VAR_1 . METHOD_3 ( STRING_2 , TYPE_1 . METHOD_4 ( VAR_3 ) ) (  METHOD_5 ( ) . METHOD_6 ( VAR_1 , STRING_3 ) )  METHOD_5 ( ) . METHOD_6 ( VAR_1 , STRING_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = 0 ) INIT = 0 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME context ) NAME context ( INIT = mContext ) INIT = mContext ) VAR VAR ( IF IF ( COND VAR_2 >= 0 ) COND VAR_2 >= 0 ( THEN THEN ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_2 ( VAR_1 ) ) INIT = METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_4 != null ) COND VAR_4 != null ( THEN THEN (  context = VAR_4 . context )  context = VAR_4 . context (  VAR_3 = VAR_5 . METHOD_3 ( VAR_2 , 0 ) )  VAR_3 = VAR_5 . METHOD_3 ( VAR_2 , 0 ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF ( IF IF ( COND VAR_3 != 0 ) COND VAR_3 != 0 ( THEN THEN (  return TYPE_5 . METHOD_1 ( context , VAR_3 ) ; )  return TYPE_5 . METHOD_1 ( context , VAR_3 ) ; ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME m ) NAME m ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME v ) NAME v ) VAR VAR ( VAR VAR ( TYPE short ) TYPE short ( NAME value ) NAME value ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = false ) INIT = false ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE short ) TYPE short ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( v == null ) ? ( ( short ) ( m . METHOD_2 ( ) ) ) : ( ( short ) ( m . METHOD_2 ( v ) ) ) ) INIT = ( v == null ) ? ( ( short ) ( m . METHOD_2 ( ) ) ) : ( ( short ) ( m . METHOD_2 ( v ) ) ) ) VAR VAR (  TYPE_3 . assertTrue ( ( VAR_3 == value ) ) )  TYPE_3 . assertTrue ( ( VAR_3 == value ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_2 = true )  VAR_2 = true ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  TYPE_3 . METHOD_3 ( VAR_2 , VAR_1 ) )  TYPE_3 . METHOD_3 ( VAR_2 , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE android.content.Intent ) TYPE android.content.Intent ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME flags ) NAME flags ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_3 ) COND VAR_3 ( THEN THEN (  android.util.Log.d ( VAR_4 . TAG , ( STRING_1 + VAR_1 ) ) )  android.util.Log.d ( VAR_4 . TAG , ( STRING_1 + VAR_1 ) ) ) THEN THEN ) IF IF ( IF IF ( COND VAR_1 . METHOD_2 ( VAR_5 , false ) ) COND VAR_1 . METHOD_2 ( VAR_5 , false ) ( THEN THEN (  METHOD_3 ( ) )  METHOD_3 ( ) (  return 0 ; )  return 0 ; ) THEN THEN ( ELSE ELSE ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_6 ) NAME VAR_6 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_6 . METHOD_4 ( VAR_7 ) )  VAR_6 . METHOD_4 ( VAR_7 ) (  VAR_6 . METHOD_4 ( VAR_8 ) )  VAR_6 . METHOD_4 ( VAR_8 ) (  METHOD_5 ( VAR_9 , VAR_6 ) )  METHOD_5 ( VAR_9 , VAR_6 ) (  return VAR_10 ; )  return VAR_10 ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME session ) NAME session ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME s ) NAME s ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME c ) NAME c ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME fd ) NAME fd ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME callback ) NAME callback ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_4 . METHOD_2 ( s , fd , callback , new byte [ 1 ] , 0 , 1 , 0 ) )  TYPE_4 . METHOD_2 ( s , fd , callback , new byte [ 1 ] , 0 , 1 , 0 ) (  super . METHOD_1 ( session , s , c , VAR_1 , fd , callback ) )  super . METHOD_1 ( session , s , c , VAR_1 , fd , callback ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 . METHOD_2 ( VAR_1 ) ) INIT = VAR_4 . METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_3 == null ) COND VAR_3 == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  VAR_5 = TYPE_2 . METHOD_2 ( VAR_2 ) )  VAR_5 = TYPE_2 . METHOD_2 ( VAR_2 ) ( IF IF ( COND ( ( VAR_5 ) != null ) && ( ( VAR_5 . METHOD_3 ( ) ) == false ) ) COND ( ( VAR_5 ) != null ) && ( ( VAR_5 . METHOD_3 ( ) ) == false ) ( THEN THEN (  TYPE_3 . METHOD_4 ( ) . METHOD_5 ( VAR_6 , VAR_5 . METHOD_6 ( ) , null , null ) )  TYPE_3 . METHOD_4 ( ) . METHOD_5 ( VAR_6 , VAR_5 . METHOD_6 ( ) , null , null ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME flags ) NAME flags ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( this . VAR_2 ) )  VAR_1 . METHOD_2 ( this . VAR_2 ) (  VAR_1 . METHOD_2 ( this . VAR_3 ) )  VAR_1 . METHOD_2 ( this . VAR_3 ) (  VAR_1 . METHOD_2 ( this . VAR_4 ) )  VAR_1 . METHOD_2 ( this . VAR_4 ) (  VAR_1 . METHOD_2 ( this . VAR_5 ) )  VAR_1 . METHOD_2 ( this . VAR_5 ) (  VAR_1 . METHOD_2 ( this . VAR_6 ) )  VAR_1 . METHOD_2 ( this . VAR_6 ) (  VAR_1 . METHOD_2 ( this . VAR_7 ) )  VAR_1 . METHOD_2 ( this . VAR_7 ) (  VAR_1 . METHOD_3 ( this . VAR_8 ) )  VAR_1 . METHOD_3 ( this . VAR_8 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME uid ) NAME uid ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_2 ( i ) ) INIT = VAR_2 . METHOD_2 ( i ) ) VAR VAR ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN (  VAR_1 . METHOD_3 ( ) )  VAR_1 . METHOD_3 ( ) ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_2 . size ( ) ) == 0 ) COND ( VAR_2 . size ( ) ) == 0 ( THEN THEN (  VAR_3 . METHOD_4 ( ) )  VAR_3 . METHOD_4 ( ) ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_3 . METHOD_5 ( ) ) INIT = TYPE_3 . METHOD_5 ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_5 . METHOD_6 ( uid ) )  VAR_5 . METHOD_6 ( uid ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ( FINALLY FINALLY (  TYPE_3 . METHOD_7 ( VAR_4 ) )  TYPE_3 . METHOD_7 ( VAR_4 ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME s ) NAME s ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < ( s . length ) ) COND i < ( s . length ) ( UPDATE UPDATE (  ++ i )  ++ i ) UPDATE UPDATE ( BLOCK BLOCK ( IF IF ( COND i != 0 ) COND i != 0 ( THEN THEN (  result . append ( CHAR_1 ) )  result . append ( CHAR_1 ) ) THEN THEN ) IF IF (  result . append ( TYPE_2 . METHOD_1 ( s [ i ] ) ) )  result . append ( TYPE_2 . METHOD_1 ( s [ i ] ) ) ) BLOCK BLOCK ) FOR FOR (  return result . toString ( ) ; )  return result . toString ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME args ) NAME args ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME result ) NAME result ( INIT = VAR_1 . METHOD_2 ( TYPE_3 . suite ( VAR_2 class , VAR_3 class , VAR_4 class , VAR_5 class , VAR_6 class ) ) ) INIT = VAR_1 . METHOD_2 ( TYPE_3 . suite ( VAR_2 class , VAR_3 class , VAR_4 class , VAR_5 class , VAR_6 class ) ) ) VAR VAR ( IF IF ( COND result . METHOD_3 ( ) ) COND result . METHOD_3 ( ) ( THEN THEN (  TYPE_4 . METHOD_4 ( 0 ) )  TYPE_4 . METHOD_4 ( 0 ) ) THEN THEN ( ELSE ELSE (  TYPE_4 . METHOD_4 ( 1 ) )  TYPE_4 . METHOD_4 ( 1 ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME out ) NAME out ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . METHOD_2 ( ) ) INIT = VAR_3 . METHOD_2 ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_2 . METHOD_3 ( out ) )  VAR_2 . METHOD_3 ( out ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.RuntimeException ) TYPE java.lang.RuntimeException ( NAME ex ) NAME ex ( BLOCK BLOCK (  throw TYPE_4 . METHOD_4 ( ex , ( ( STRING_1 + STRING_2 ) + ( VAR_4 . METHOD_5 ( ) ) ) ) ; )  throw TYPE_4 . METHOD_4 ( ex , ( ( STRING_1 + STRING_2 ) + ( VAR_4 . METHOD_5 ( ) ) ) ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = super . METHOD_1 ( VAR_1 ) ) INIT = super . METHOD_1 ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_2 != 0 ) COND VAR_2 != 0 ( THEN THEN (  return VAR_2 ; )  return VAR_2 ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( ( TYPE_2 ) ( VAR_1 ) ) ) INIT = ( ( TYPE_2 ) ( VAR_1 ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_3 . METHOD_2 ( ) ) INIT = VAR_3 . METHOD_2 ( ) ) VAR VAR (  return VAR_4 . METHOD_3 ( VAR_5 ) ; )  return VAR_4 . METHOD_3 ( VAR_5 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME item ) NAME item ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = super . METHOD_1 ( VAR_1 , VAR_2 , item ) ) INIT = super . METHOD_1 ( VAR_1 , VAR_2 , item ) ) VAR VAR ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_1 . METHOD_2 ( VAR_5 ) ) INIT = VAR_1 . METHOD_2 ( VAR_5 ) ) VAR VAR (  VAR_4 . METHOD_3 ( TYPE_6 . toString ( VAR_2 . METHOD_4 ( ) ) ) )  VAR_4 . METHOD_3 ( TYPE_6 . toString ( VAR_2 . METHOD_4 ( ) ) ) (  VAR_3 . METHOD_5 ( ) . METHOD_6 ( VAR_4 ) )  VAR_3 . METHOD_5 ( ) . METHOD_6 ( VAR_4 ) (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME src ) NAME src ) VAR VAR ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( IF IF ( COND ( src . METHOD_2 ( ) ) != null ) COND ( src . METHOD_2 ( ) ) != null ( THEN THEN (  TYPE_1 . METHOD_3 ( src , VAR_1 ) )  TYPE_1 . METHOD_3 ( src , VAR_1 ) ) THEN THEN ) IF IF (  TYPE_1 . METHOD_4 ( src ) )  TYPE_1 . METHOD_4 ( src ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK (  TYPE_2 . e ( STRING_1 ) )  TYPE_2 . e ( STRING_1 ) (  TYPE_2 . e ( e ) )  TYPE_2 . e ( e ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . when ( VAR_1 . METHOD_2 ( org.mockito.Matchers . METHOD_3 ( VAR_2 class ) ) ) . thenReturn ( VAR_3 ) )  TYPE_1 . when ( VAR_1 . METHOD_2 ( org.mockito.Matchers . METHOD_3 ( VAR_2 class ) ) ) . thenReturn ( VAR_3 ) (  TYPE_1 . when ( VAR_1 . METHOD_4 ( VAR_3 ) ) . thenReturn ( METHOD_5 ( VAR_3 ) . build ( ) ) )  TYPE_1 . when ( VAR_1 . METHOD_4 ( VAR_3 ) ) . thenReturn ( METHOD_5 ( VAR_3 ) . build ( ) ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_5 . METHOD_2 ( ) ) INIT = VAR_5 . METHOD_2 ( ) ) VAR VAR (  assertEquals ( VAR_3 , VAR_4 ) )  assertEquals ( VAR_3 , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME offset ) NAME offset ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.StringBuilder ) TYPE java.lang.StringBuilder ( NAME sb ) NAME sb ( INIT = new java.lang.StringBuilder ( ) ) INIT = new java.lang.StringBuilder ( ) ) VAR VAR (  sb.append ( CHAR_1 ) . append ( VAR_2 ) . append ( CHAR_2 ) )  sb.append ( CHAR_1 ) . append ( VAR_2 ) . append ( CHAR_2 ) (  sb.append ( VAR_3 ) . append ( CHAR_3 ) . append ( CHAR_4 ) )  sb.append ( VAR_3 ) . append ( CHAR_3 ) . append ( CHAR_4 ) (  sb.append ( VAR_4 ) . append ( CHAR_4 ) )  sb.append ( VAR_4 ) . append ( CHAR_4 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_5 ) NAME VAR_5 ( INIT = new TYPE_2 ( offset , sb . toString ( ) ) ) INIT = new TYPE_2 ( offset , sb . toString ( ) ) ) VAR VAR (  VAR_1 . addChild ( VAR_5 ) )  VAR_1 . addChild ( VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ! ( TYPE_1 . METHOD_2 ( METHOD_3 ( ) ) ) ) COND ! ( TYPE_1 . METHOD_2 ( METHOD_3 ( ) ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( IF IF ( COND ! ( VAR_1 . METHOD_4 ( ) ) ) COND ! ( VAR_1 . METHOD_4 ( ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_5 ( ) ) INIT = VAR_1 . METHOD_5 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME callback ) NAME callback ( INIT = METHOD_6 ( ) ) INIT = METHOD_6 ( ) ) VAR VAR (  assertFalse ( VAR_1 . METHOD_5 ( ) ) )  assertFalse ( VAR_1 . METHOD_5 ( ) ) (  METHOD_7 ( callback , VAR_2 ) )  METHOD_7 ( callback , VAR_2 ) (  assertEquals ( VAR_2 , VAR_1 . METHOD_5 ( ) ) )  assertEquals ( VAR_2 , VAR_1 . METHOD_5 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( VAR_2 , null ) ) INIT = METHOD_2 ( VAR_2 , null ) ) VAR VAR ( IF IF ( COND VAR_1 . METHOD_3 ( ) ) COND VAR_1 . METHOD_3 ( ) ( THEN THEN ( VAR VAR ( TYPE TYPE_1<TYPE_3> ) TYPE TYPE_1<TYPE_3> ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . get ( ) . METHOD_4 ( TYPE_4 . METHOD_5 ( STRING_1 ) ) ) INIT = VAR_1 . get ( ) . METHOD_4 ( TYPE_4 . METHOD_5 ( STRING_1 ) ) ) VAR VAR ( IF IF ( COND VAR_3 . METHOD_3 ( ) ) COND VAR_3 . METHOD_3 ( ) ( THEN THEN (  return java.lang.Integer.parseInt ( VAR_3 . get ( ) . METHOD_6 ( ) ) ; )  return java.lang.Integer.parseInt ( VAR_3 . get ( ) . METHOD_6 ( ) ) ; ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return VAR_4 ; )  return VAR_4 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( ( ( VAR_2 ) != null ) ) )  VAR_1 . METHOD_2 ( ( ( VAR_2 ) != null ) ) (  VAR_3 . METHOD_2 ( ( ( VAR_2 ) != null ) ) )  VAR_3 . METHOD_2 ( ( ( VAR_2 ) != null ) ) ( IF IF ( COND ( VAR_2 ) != null ) COND ( VAR_2 ) != null ( THEN THEN (  VAR_3 . METHOD_3 ( VAR_2 . METHOD_4 ( ) . METHOD_5 ( ) ) )  VAR_3 . METHOD_3 ( VAR_2 . METHOD_4 ( ) . METHOD_5 ( ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME packageName ) NAME packageName ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME userId ) NAME userId ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME flags ) NAME flags ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( METHOD_2 ( ) ) ) COND ! ( METHOD_2 ( ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( TRY TRY ( BLOCK BLOCK (  VAR_5 . METHOD_1 ( VAR_1 , packageName , userId , flags , VAR_2 , VAR_3 , VAR_4 ) )  VAR_5 . METHOD_1 ( VAR_1 , packageName , userId , flags , VAR_2 , VAR_3 , VAR_4 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ( BLOCK BLOCK (  throw TYPE_1 . from ( e ) ; )  throw TYPE_1 . from ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_2 . METHOD_2 ( VAR_1 , true ) )  VAR_2 . METHOD_2 ( VAR_1 , true ) (  VAR_2 . METHOD_3 ( VAR_3 ) )  VAR_2 . METHOD_3 ( VAR_3 ) (  VAR_2 . METHOD_4 ( new TYPE_2 ( VAR_4 , VAR_5 , VAR_6 , mContext ) ) )  VAR_2 . METHOD_4 ( new TYPE_2 ( VAR_4 , VAR_5 , VAR_6 , mContext ) ) (  VAR_2 . METHOD_5 ( VAR_7 ) )  VAR_2 . METHOD_5 ( VAR_7 ) (  VAR_8 . METHOD_6 ( ) )  VAR_8 . METHOD_6 ( ) (  VAR_9 . METHOD_6 ( ) )  VAR_9 . METHOD_6 ( ) ( FOR-EACH FOR-EACH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_10 ) NAME VAR_10 ( IN VAR_11 . values ( ) ) IN VAR_11 . values ( ) ( BLOCK BLOCK (  VAR_10 . METHOD_6 ( ) )  VAR_10 . METHOD_6 ( ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_2 ) ) ) COND ! ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_2 ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  VAR_3 . append ( new TYPE_2 ( VAR_1 . METHOD_5 ( ) , METHOD_6 ( VAR_1 . METHOD_7 ( ) ) ) ) )  VAR_3 . append ( new TYPE_2 ( VAR_1 . METHOD_5 ( ) , METHOD_6 ( VAR_1 . METHOD_7 ( ) ) ) ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_8 ( VAR_1 . METHOD_7 ( ) , VAR_1 ) ) INIT = METHOD_8 ( VAR_1 . METHOD_7 ( ) , VAR_1 ) ) VAR VAR (  VAR_3 . append ( new TYPE_4 ( VAR_1 , VAR_4 ) ) )  VAR_3 . append ( new TYPE_4 ( VAR_1 , VAR_4 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1[] ) TYPE TYPE_1[] ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 ) INIT = VAR_3 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_2 . length ) INIT = VAR_2 . length ) VAR VAR ( IF IF ( COND VAR_4 == ( VAR_5 ) ) COND VAR_4 == ( VAR_5 ) ( THEN THEN (  VAR_6 = VAR_7 )  VAR_6 = VAR_7 (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1[] ) TYPE TYPE_1[] ( NAME VAR_8 ) NAME VAR_8 ( INIT = new TYPE_1 [ VAR_1 ] ) INIT = new TYPE_1 [ VAR_1 ] ) VAR VAR (  METHOD_2 ( VAR_8 , METHOD_3 ( VAR_1 ) ) )  METHOD_2 ( VAR_8 , METHOD_3 ( VAR_1 ) ) (  VAR_3 = VAR_8 )  VAR_3 = VAR_8 (  VAR_6 = ( ( int ) ( TYPE_2 . METHOD_4 ( ( VAR_1 * ( VAR_9 ) ) , ( ( VAR_5 ) + 1 ) ) ) ) )  VAR_6 = ( ( int ) ( TYPE_2 . METHOD_4 ( ( VAR_1 * ( VAR_9 ) ) , ( ( VAR_5 ) + 1 ) ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK (  TYPE_1 . METHOD_1 ( VAR_1 class ) )  TYPE_1 . METHOD_1 ( VAR_1 class ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME t ) NAME t ( INIT = new TYPE_2 ( STRING_1 ) { public void run ( ) { try { TYPE_3 . METHOD_2 ( ) ; } catch ( java.lang.Exception e ) { throw new java.lang.RuntimeException ( e ) ; } } } ) INIT = new TYPE_2 ( STRING_1 ) { public void run ( ) { try { TYPE_3 . METHOD_2 ( ) ; } catch ( java.lang.Exception e ) { throw new java.lang.RuntimeException ( e ) ; } } } ) VAR VAR ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  TYPE_3 . METHOD_2 ( ) )  TYPE_3 . METHOD_2 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ( BLOCK BLOCK (  throw new java.lang.RuntimeException ( e ) ; )  throw new java.lang.RuntimeException ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD (  t . start ( ) )  t . start ( ) (  t . METHOD_3 ( ) )  t . METHOD_3 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( VAR_2 . METHOD_3 ( ) , VAR_2 . METHOD_4 ( ) , VAR_3 ) ) INIT = TYPE_1 . METHOD_2 ( VAR_2 . METHOD_3 ( ) , VAR_2 . METHOD_4 ( ) , VAR_3 ) ) VAR VAR ( VAR VAR ( TYPE android.renderscript.Allocation ) TYPE android.renderscript.Allocation ( NAME VAR_4 ) NAME VAR_4 ( INIT = android.renderscript.Allocation . METHOD_5 ( VAR_5 , VAR_1 ) ) INIT = android.renderscript.Allocation . METHOD_5 ( VAR_5 , VAR_1 ) ) VAR VAR (  VAR_6 . METHOD_6 ( VAR_4 ) )  VAR_6 . METHOD_6 ( VAR_4 ) (  VAR_4 . METHOD_7 ( VAR_1 ) )  VAR_4 . METHOD_7 ( VAR_1 ) (  TYPE_2 . METHOD_8 ( VAR_1 , STRING_1 , name , VAR_5 . METHOD_9 ( ) ) )  TYPE_2 . METHOD_8 ( VAR_1 , STRING_1 , name , VAR_5 . METHOD_9 ( ) ) (  VAR_4 . METHOD_10 ( ) )  VAR_4 . METHOD_10 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( i < 0 ) || ( i > ( ( VAR_1 ) - 1 ) ) ) COND ( i < 0 ) || ( i > ( ( VAR_1 ) - 1 ) ) ( THEN THEN (  return 0 ; )  return 0 ; ) THEN THEN ) IF IF (  return ( ( value [ ( i > > > 5 ) ] ) & ( VAR_2 [ ( i & INT_1 ) ] ) ) != 0 ? 1 : 0 ; )  return ( ( value [ ( i > > > 5 ) ] ) & ( VAR_2 [ ( i & INT_1 ) ] ) ) != 0 ? 1 : 0 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) (  METHOD_2 ( ) )  METHOD_2 ( ) (  METHOD_3 ( ) )  METHOD_3 ( ) ( IF IF ( COND ( VAR_1 ) == null ) COND ( VAR_1 ) == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_2 ) != null ) COND ( VAR_2 ) != null ( THEN THEN (  VAR_1 . METHOD_4 ( VAR_2 ) )  VAR_1 . METHOD_4 ( VAR_2 ) ) THEN THEN ) IF IF (  VAR_1 . METHOD_5 ( ) )  VAR_1 . METHOD_5 ( ) (  VAR_1 . METHOD_6 ( ) )  VAR_1 . METHOD_6 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 = TYPE_1 . METHOD_2 ( STRING_1 ) )  VAR_1 = TYPE_1 . METHOD_2 ( STRING_1 ) (  VAR_2 = TYPE_1 . METHOD_2 ( STRING_2 ) )  VAR_2 = TYPE_1 . METHOD_2 ( STRING_2 ) (  VAR_3 = TYPE_1 . METHOD_3 ( STRING_3 ) )  VAR_3 = TYPE_1 . METHOD_3 ( STRING_3 ) ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_2 . METHOD_4 ( STRING_4 , STRING_5 ) ) INIT = TYPE_2 . METHOD_4 ( STRING_4 , STRING_5 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_5 ) NAME VAR_5 ( INIT = TYPE_2 . METHOD_5 ( VAR_6 class ) ) INIT = TYPE_2 . METHOD_5 ( VAR_6 class ) ) VAR VAR (  VAR_5 . METHOD_6 ( VAR_7 ) )  VAR_5 . METHOD_6 ( VAR_7 ) (  VAR_5 . METHOD_7 ( null , VAR_4 , true , VAR_1 ) )  VAR_5 . METHOD_7 ( null , VAR_4 , true , VAR_1 ) (  VAR_8 = VAR_4 )  VAR_8 = VAR_4 ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE android.os.Message ) TYPE android.os.Message ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( VAR_1 , this ) )  METHOD_2 ( VAR_1 , this ) ( SWITCH SWITCH ( NAME VAR_2 ) NAME VAR_2 ( CASE VAR_3 ( BLOCK BLOCK (  transitionTo ( VAR_4 ) )  transitionTo ( VAR_4 ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_3 ( CASE VAR_5 ( BLOCK BLOCK (  VAR_16 = VAR_17 )  VAR_16 = VAR_17 (  METHOD_3 ( VAR_1 ) )  METHOD_3 ( VAR_1 ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_5 ( CASE VAR_6 ( BLOCK BLOCK (  VAR_16 = VAR_17 )  VAR_16 = VAR_17 (  METHOD_3 ( VAR_1 ) )  METHOD_3 ( VAR_1 ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_6 ( CASE VAR_7 ( BLOCK BLOCK (  VAR_16 = VAR_17 )  VAR_16 = VAR_17 (  METHOD_3 ( VAR_1 ) )  METHOD_3 ( VAR_1 ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_7 ( CASE VAR_8 ( BLOCK BLOCK (  VAR_16 = VAR_17 )  VAR_16 = VAR_17 (  METHOD_3 ( VAR_1 ) )  METHOD_3 ( VAR_1 ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_8 ( CASE VAR_9 ( BLOCK BLOCK (  VAR_16 = VAR_17 )  VAR_16 = VAR_17 (  METHOD_3 ( VAR_1 ) )  METHOD_3 ( VAR_1 ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_9 ( CASE VAR_10 ( BLOCK BLOCK (  VAR_16 = VAR_17 )  VAR_16 = VAR_17 (  METHOD_3 ( VAR_1 ) )  METHOD_3 ( VAR_1 ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_10 ( CASE VAR_11 ( BLOCK BLOCK (  VAR_16 = VAR_17 )  VAR_16 = VAR_17 (  METHOD_3 ( VAR_1 ) )  METHOD_3 ( VAR_1 ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_11 ( CASE VAR_12 ( BLOCK BLOCK (  VAR_16 = VAR_17 )  VAR_16 = VAR_17 (  METHOD_3 ( VAR_1 ) )  METHOD_3 ( VAR_1 ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_12 ( CASE VAR_13 ( BLOCK BLOCK (  VAR_16 = VAR_17 )  VAR_16 = VAR_17 (  METHOD_3 ( VAR_1 ) )  METHOD_3 ( VAR_1 ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_13 ( CASE VAR_14 ( BLOCK BLOCK (  VAR_16 = VAR_17 )  VAR_16 = VAR_17 (  METHOD_3 ( VAR_1 ) )  METHOD_3 ( VAR_1 ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_14 ( CASE VAR_15 ( BLOCK BLOCK (  VAR_16 = VAR_17 )  VAR_16 = VAR_17 (  METHOD_3 ( VAR_1 ) )  METHOD_3 ( VAR_1 ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_15 ( DEFAULT DEFAULT ( BLOCK BLOCK (  return VAR_18 ; )  return VAR_18 ; ) BLOCK BLOCK ) DEFAULT DEFAULT ) SWITCH SWITCH (  return VAR_19 ; )  return VAR_19 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private synchronized ) MODIFIER private synchronized ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME packageName ) NAME packageName ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  android.util.Log.d ( VAR_2 . TAG , ( STRING_1 + packageName ) ) )  android.util.Log.d ( VAR_2 . TAG , ( STRING_1 + packageName ) ) ) THEN THEN ) IF IF ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_2 ( packageName ) ) INIT = METHOD_2 ( packageName ) ) VAR VAR ( IF IF ( COND VAR_3 != ( - 1 ) ) COND VAR_3 != ( - 1 ) ( THEN THEN (  VAR_4 . METHOD_3 ( VAR_3 ) )  VAR_4 . METHOD_3 ( VAR_3 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_1 ) NAME VAR_1 ( INIT = 0 ) INIT = 0 ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 ) INIT = VAR_3 ) VAR VAR (  VAR_4 = VAR_5 . METHOD_2 ( VAR_1 , VAR_2 , true ) )  VAR_4 = VAR_5 . METHOD_2 ( VAR_1 , VAR_2 , true ) (  assertTrue ( VAR_4 . METHOD_3 ( ) ) )  assertTrue ( VAR_4 . METHOD_3 ( ) ) (  assertTrue ( VAR_4 . METHOD_4 ( ) ) )  assertTrue ( VAR_4 . METHOD_4 ( ) ) (  assertEquals ( VAR_1 , VAR_4 . METHOD_5 ( ) ) )  assertEquals ( VAR_1 , VAR_4 . METHOD_5 ( ) ) (  assertEquals ( VAR_2 , VAR_4 . size ( ) ) )  assertEquals ( VAR_2 , VAR_4 . size ( ) ) (  METHOD_6 ( VAR_5 , VAR_4 . METHOD_7 ( ) ) )  METHOD_6 ( VAR_5 , VAR_4 . METHOD_7 ( ) ) (  METHOD_6 ( VAR_5 , VAR_4 . METHOD_8 ( ) ) )  METHOD_6 ( VAR_5 , VAR_4 . METHOD_8 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . when ( VAR_1 . METHOD_2 ( org.mockito.Matchers . METHOD_3 ( VAR_2 class ) ) ) . thenReturn ( METHOD_4 ( VAR_3 , VAR_4 ) ) )  TYPE_1 . when ( VAR_1 . METHOD_2 ( org.mockito.Matchers . METHOD_3 ( VAR_2 class ) ) ) . thenReturn ( METHOD_4 ( VAR_3 , VAR_4 ) ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_5 ) NAME VAR_5 ( INIT = METHOD_5 ( VAR_6 , false , true , INT_1 , INT_2 , VAR_7 , VAR_3 , VAR_8 , VAR_9 , VAR_10 , TYPE_3 . of ( VAR_4 ) ) ) INIT = METHOD_5 ( VAR_6 , false , true , INT_1 , INT_2 , VAR_7 , VAR_3 , VAR_8 , VAR_9 , VAR_10 , TYPE_3 . of ( VAR_4 ) ) ) VAR VAR (  VAR_11 . METHOD_6 ( VAR_5 , VAR_12 , VAR_13 ) )  VAR_11 . METHOD_6 ( VAR_5 , VAR_12 , VAR_13 ) ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_14 ) NAME VAR_14 ( INIT = METHOD_7 ( VAR_4 ) ) INIT = METHOD_7 ( VAR_4 ) ) VAR VAR (  assertEquals ( VAR_14 . METHOD_8 ( VAR_15 ) , VAR_16 ) )  assertEquals ( VAR_14 . METHOD_8 ( VAR_15 ) , VAR_16 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_2 . METHOD_2 ( VAR_2 ) )  TYPE_2 . METHOD_2 ( VAR_2 ) ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 ) INIT = VAR_4 ) VAR VAR ( IF IF ( COND VAR_5 . METHOD_3 ( VAR_1 ) ) COND VAR_5 . METHOD_3 ( VAR_1 ) ( THEN THEN (  METHOD_4 ( VAR_3 , VAR_6 ) )  METHOD_4 ( VAR_3 , VAR_6 ) (  return ; )  return ; ) THEN THEN ) IF IF ( IF IF ( COND ! ( VAR_7 . METHOD_5 ( VAR_1 ) ) ) COND ! ( VAR_7 . METHOD_5 ( VAR_1 ) ) ( THEN THEN (  METHOD_4 ( VAR_3 , VAR_8 ) )  METHOD_4 ( VAR_3 , VAR_8 ) (  return ; )  return ; ) THEN THEN ) IF IF (  VAR_5 . METHOD_6 ( VAR_1 ) )  VAR_5 . METHOD_6 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( ) ) INIT = TYPE_2 . METHOD_2 ( ) ) VAR VAR (  VAR_1 . METHOD_3 ( TYPE_3 . METHOD_4 ( INT_1 , STRING_1 ) ) )  VAR_1 . METHOD_3 ( TYPE_3 . METHOD_4 ( INT_1 , STRING_1 ) ) (  VAR_1 . METHOD_3 ( TYPE_3 . METHOD_4 ( INT_2 , STRING_2 ) ) )  VAR_1 . METHOD_3 ( TYPE_3 . METHOD_4 ( INT_2 , STRING_2 ) ) (  VAR_1 . METHOD_3 ( TYPE_3 . METHOD_4 ( INT_1 , STRING_3 ) ) )  VAR_1 . METHOD_3 ( TYPE_3 . METHOD_4 ( INT_1 , STRING_3 ) ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ( INIT = TYPE_3 . METHOD_5 ( VAR_1 , INT_2 , STRING_1 ) ) INIT = TYPE_3 . METHOD_5 ( VAR_1 , INT_2 , STRING_1 ) ) VAR VAR (  METHOD_6 ( result ) )  METHOD_6 ( result ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) (  server = new TYPE_1 ( ) )  server = new TYPE_1 ( ) ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( STRING_1 ) ) INIT = TYPE_2 . METHOD_2 ( STRING_1 ) ) VAR VAR (  VAR_2 = new java.io.File ( VAR_1 , ( STRING_2 + ( TYPE_3 . METHOD_3 ( ) ) ) ) )  VAR_2 = new java.io.File ( VAR_1 , ( STRING_2 + ( TYPE_3 . METHOD_3 ( ) ) ) ) (  VAR_2 . METHOD_4 ( ) )  VAR_2 . METHOD_4 ( ) (  TYPE_4 . METHOD_5 ( VAR_2 . METHOD_6 ( ) , INT_1 ) )  TYPE_4 . METHOD_5 ( VAR_2 . METHOD_6 ( ) , INT_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE float ) TYPE float ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE float ) TYPE float ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE float ) TYPE float ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE float ) TYPE float ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ( VAR VAR ( TYPE float ) TYPE float ( NAME VAR_6 ) NAME VAR_6 ) VAR VAR ( VAR VAR ( TYPE float ) TYPE float ( NAME VAR_7 ) NAME VAR_7 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_8 ) NAME VAR_8 ( INIT = VAR_9 . METHOD_2 ( VAR_1 ) ) INIT = VAR_9 . METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_8 == null ) COND VAR_8 == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  VAR_8 . METHOD_3 ( VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 ) )  VAR_8 . METHOD_3 ( VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 < 0 ) COND VAR_1 < 0 ( THEN THEN (  throw new java.lang.IllegalArgumentException ( STRING_1 ) ; )  throw new java.lang.IllegalArgumentException ( STRING_1 ) ; ) THEN THEN ) IF IF ( IF IF ( COND VAR_1 == ( VAR_2 ) ) COND VAR_1 == ( VAR_2 ) ( THEN THEN (  return new TYPE_1 ( this ) ; )  return new TYPE_1 ( this ) ; ) THEN THEN ) IF IF (  return new TYPE_1 ( VAR_3 . METHOD_2 ( ( VAR_1 - ( VAR_2 ) ) ) , VAR_1 ) ; )  return new TYPE_1 ( VAR_3 . METHOD_2 ( ( VAR_1 - ( VAR_2 ) ) ) , VAR_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int[] ) TYPE int[] ( NAME VAR_4 ) NAME VAR_4 ( INIT = new int [ 2 ] ) INIT = new int [ 2 ] ) VAR VAR (  VAR_1 . METHOD_2 ( VAR_2 , false , VAR_4 ) )  VAR_1 . METHOD_2 ( VAR_2 , false , VAR_4 ) ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_4 [ 0 ] ) INIT = VAR_4 [ 0 ] ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_6 ) NAME VAR_6 ( INIT = VAR_4 [ 1 ] ) INIT = VAR_4 [ 1 ] ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_7 ) NAME VAR_7 ( INIT = null ) INIT = null ) VAR VAR ( IF IF ( COND VAR_3 ) COND VAR_3 ( THEN THEN (  VAR_7 = TYPE_3 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) )  VAR_7 = TYPE_3 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ) THEN THEN ) IF IF (  return TYPE_1 . METHOD_5 ( VAR_5 , VAR_6 , VAR_2 , VAR_7 ) ; )  return TYPE_1 . METHOD_5 ( VAR_5 , VAR_6 , VAR_2 , VAR_7 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1<java.lang.Object[]> ) RETURN TYPE_1<java.lang.Object[]> ( NAME data ) NAME data ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.lang.Object[]> ) TYPE java.util.List<java.lang.Object[]> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_4 ( new java.io.File ( VAR_3 ) ) ) INIT = new TYPE_4 ( new java.io.File ( VAR_3 ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_5> ) TYPE java.util.List<TYPE_5> ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_2 . METHOD_1 ( ) ) INIT = VAR_2 . METHOD_1 ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_5 ) NAME VAR_5 ( IN VAR_4 ) IN VAR_4 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( new java.lang.Object [ ] { VAR_5 . getName ( ) , VAR_5 } ) )  VAR_1 . METHOD_2 ( new java.lang.Object [ ] { VAR_5 . getName ( ) , VAR_5 } ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME subId ) NAME subId ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( TYPE_1 . METHOD_2 ( VAR_2 , VAR_1 , STRING_1 ) ) ) COND ! ( TYPE_1 . METHOD_2 ( VAR_2 , VAR_1 , STRING_1 ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_3 ( subId ) ) INIT = METHOD_3 ( subId ) ) VAR VAR ( IF IF ( COND VAR_3 != null ) COND VAR_3 != null ( THEN THEN (  return ( VAR_3 . METHOD_4 ( ) ) == ( VAR_4 ) ; )  return ( VAR_3 . METHOD_4 ( ) ) == ( VAR_4 ) ; ) THEN THEN ( ELSE ELSE (  return false ; )  return false ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) INIT = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 . get ( VAR_2 . METHOD_4 ( ) ) ) INIT = VAR_4 . get ( VAR_2 . METHOD_4 ( ) ) ) VAR VAR (  return VAR_3 != null ? TYPE_4 . METHOD_5 ( VAR_3 ) : METHOD_6 ( VAR_1 ) ; )  return VAR_3 != null ? TYPE_4 . METHOD_5 ( VAR_3 ) : METHOD_6 ( VAR_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  assertEquals ( ( VAR_1 * INT_1 ) , VAR_3 . METHOD_2 ( ( VAR_2 * INT_1 ) ) ) )  assertEquals ( ( VAR_1 * INT_1 ) , VAR_3 . METHOD_2 ( ( VAR_2 * INT_1 ) ) ) (  assertFalse ( VAR_3 . METHOD_3 ( new TYPE_2 ( ( VAR_2 * INT_1 ) ) ) ) )  assertFalse ( VAR_3 . METHOD_3 ( new TYPE_2 ( ( VAR_2 * INT_1 ) ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME f ) NAME f ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + ( VAR_1 . METHOD_2 ( ) . getName ( ) ) ) + STRING_3 ) + ( f . getName ( ) ) ) INIT = ( ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + ( VAR_1 . METHOD_2 ( ) . getName ( ) ) ) + STRING_3 ) + ( f . getName ( ) ) ) VAR VAR (  return new TYPE_1 ( VAR_2 ) ; )  return new TYPE_1 ( VAR_2 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_2 ( ) ) INIT = VAR_2 . METHOD_2 ( ) ) VAR VAR (  TYPE_2 . METHOD_3 ( VAR_1 , STRING_1 ) )  TYPE_2 . METHOD_3 ( VAR_1 , STRING_1 ) (  TYPE_3 . METHOD_4 ( VAR_1 , STRING_2 ) )  TYPE_3 . METHOD_4 ( VAR_1 , STRING_2 ) (  assertTrue ( VAR_2 . METHOD_5 ( ) . METHOD_6 ( new TYPE_4 ( ) . METHOD_7 ( VAR_3 ) ) . METHOD_8 ( ) ) )  assertTrue ( VAR_2 . METHOD_5 ( ) . METHOD_6 ( new TYPE_4 ( ) . METHOD_7 ( VAR_3 ) ) . METHOD_8 ( ) ) (  TYPE_2 . METHOD_9 ( VAR_1 , STRING_2 , null ) )  TYPE_2 . METHOD_9 ( VAR_1 , STRING_2 , null ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME context ) NAME context ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME pm ) NAME pm ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_4 ( context , pm , VAR_1 ) ) INIT = new TYPE_4 ( context , pm , VAR_1 ) ) VAR VAR (  VAR_2 . start ( ) )  VAR_2 . start ( ) ( SYNCHRONIZED SYNCHRONIZED (  VAR_2 )  VAR_2 ( BLOCK BLOCK ( WHILE WHILE ( COND ( VAR_3 ) == null ) COND ( VAR_3 ) == null ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  VAR_2 . METHOD_2 ( ) )  VAR_2 . METHOD_2 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) WHILE WHILE ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ( INIT = VAR_1 . getName ( ) ) INIT = VAR_1 . getName ( ) ) VAR VAR ( IF IF ( COND name == null ) COND name == null ( THEN THEN (  throw new java.lang.NullPointerException ( ) ; )  throw new java.lang.NullPointerException ( ) ; ) THEN THEN ) IF IF (  METHOD_2 ( ) )  METHOD_2 ( ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_3 ( ) ) INIT = METHOD_3 ( ) ) VAR VAR ( IF IF ( COND VAR_2 . METHOD_4 ( VAR_1 ) ) COND VAR_2 . METHOD_4 ( VAR_1 ) ( THEN THEN (  METHOD_5 ( VAR_1 , name , ( name + STRING_1 ) ) )  METHOD_5 ( VAR_1 , name , ( name + STRING_1 ) ) (  return true ; )  return true ; ) THEN THEN ( ELSE ELSE (  return false ; )  return false ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . get ( VAR_4 , STRING_1 ) ) INIT = VAR_1 . get ( VAR_4 , STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_5 ) NAME VAR_5 ( INIT = TYPE_2 . METHOD_2 ( ) ) INIT = TYPE_2 . METHOD_2 ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_6 ) NAME VAR_6 ( IN VAR_3 . METHOD_3 ( VAR_7 ) ) IN VAR_3 . METHOD_3 ( VAR_7 ) ( BLOCK BLOCK (  VAR_5 . METHOD_4 ( VAR_6 ) )  VAR_5 . METHOD_4 ( VAR_6 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  VAR_5 . METHOD_5 ( VAR_2 ) )  VAR_5 . METHOD_5 ( VAR_2 ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_8 ) NAME VAR_8 ( INIT = TYPE_3 . on ( VAR_7 ) ) INIT = TYPE_3 . on ( VAR_7 ) ) VAR VAR (  VAR_1 . METHOD_6 ( VAR_4 , VAR_8 . METHOD_7 ( VAR_5 ) ) )  VAR_1 . METHOD_6 ( VAR_4 , VAR_8 . METHOD_7 ( VAR_5 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_1 ) ( METHOD_2 ( VAR_3 ) ) ) ) INIT = ( ( TYPE_1 ) ( METHOD_2 ( VAR_3 ) ) ) ) VAR VAR ( IF IF ( COND ( VAR_2 . METHOD_1 ( VAR_1 ) ) != ( VAR_4 ) ) COND ( VAR_2 . METHOD_1 ( VAR_1 ) ) != ( VAR_4 ) ( THEN THEN (  VAR_5 . METHOD_3 ( false ) )  VAR_5 . METHOD_3 ( false ) (  VAR_5 . METHOD_4 ( VAR_6 ) )  VAR_5 . METHOD_4 ( VAR_6 ) (  return ; )  return ; ) THEN THEN ) IF IF (  VAR_5 . METHOD_4 ( STRING_1 ) )  VAR_5 . METHOD_4 ( STRING_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME event ) NAME event ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME data ) NAME data ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  VAR_4 )  VAR_4 ( BLOCK BLOCK (  android.util.Log.d ( VAR_5 . TAG , STRING_1 ) )  android.util.Log.d ( VAR_5 . TAG , STRING_1 ) (  assertTrue ( ( VAR_1 == ( VAR_6 ) ) ) )  assertTrue ( ( VAR_1 == ( VAR_6 ) ) ) (  assertTrue ( ( event == 2 ) ) )  assertTrue ( ( event == 2 ) ) (  assertTrue ( ( VAR_3 == INT_1 ) ) )  assertTrue ( ( VAR_3 == INT_1 ) ) (  assertTrue ( ( VAR_2 == null ) ) )  assertTrue ( ( VAR_2 == null ) ) (  assertTrue ( ( data == null ) ) )  assertTrue ( ( data == null ) ) (  VAR_7 = true )  VAR_7 = true (  VAR_4 . METHOD_2 ( ) )  VAR_4 . METHOD_2 ( ) ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ( INIT = false ) INIT = false ) VAR VAR ( SYNCHRONIZED SYNCHRONIZED (  this )  this ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_2 ) ) COND ! ( VAR_2 ) ( THEN THEN (  VAR_1 = true )  VAR_1 = true (  VAR_2 = true )  VAR_2 = true ) THEN THEN ) IF IF ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 . METHOD_2 ( ) ) INIT = VAR_4 . METHOD_2 ( ) ) VAR VAR (  VAR_3 . METHOD_3 ( ) )  VAR_3 . METHOD_3 ( ) ( IF IF ( COND mRS . METHOD_4 ( ) ) COND mRS . METHOD_4 ( ) ( THEN THEN (  mRS . METHOD_5 ( VAR_5 ) )  mRS . METHOD_5 ( VAR_5 ) ) THEN THEN ) IF IF (  VAR_3 . METHOD_6 ( ) )  VAR_3 . METHOD_6 ( ) (  mRS = null )  mRS = null (  VAR_5 = 0 )  VAR_5 = 0 ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME session ) NAME session ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME s ) NAME s ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME c ) NAME c ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME fd ) NAME fd ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME callback ) NAME callback ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_4 . METHOD_2 ( s , fd , callback , new byte [ 1 ] , 0 , 1 , 0 ) )  TYPE_4 . METHOD_2 ( s , fd , callback , new byte [ 1 ] , 0 , 1 , 0 ) (  fail ( ) )  fail ( ) (  super . METHOD_1 ( session , s , c , VAR_1 , fd , callback ) )  super . METHOD_1 ( session , s , c , VAR_1 , fd , callback ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( VAR_1 ) ? VAR_3 . METHOD_2 ( ) : VAR_3 . METHOD_3 ( ) ) INIT = ( VAR_1 ) ? VAR_3 . METHOD_2 ( ) : VAR_3 . METHOD_3 ( ) ) VAR VAR ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  METHOD_4 ( ( VAR_1 ? VAR_4 : VAR_5 ) ) )  METHOD_4 ( ( VAR_1 ? VAR_4 : VAR_5 ) ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND VAR_6 ) COND VAR_6 ( THEN THEN (  android.util.Log.v ( VAR_7 . TAG , ( ( STRING_1 + STRING_2 ) + VAR_1 ) ) )  android.util.Log.v ( VAR_7 . TAG , ( ( STRING_1 + STRING_2 ) + VAR_1 ) ) ) THEN THEN ) IF IF (  METHOD_5 ( ) )  METHOD_5 ( ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_2 . METHOD_2 ( STRING_1 ) )  TYPE_2 . METHOD_2 ( STRING_1 ) ( IF IF ( COND TYPE_3 . get ( VAR_1 ) . METHOD_3 ( STRING_2 , false ) ) COND TYPE_3 . get ( VAR_1 ) . METHOD_3 ( STRING_2 , false ) ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_2 ) NAME VAR_2 ( IN VAR_3 . METHOD_4 ( ) ) IN VAR_3 . METHOD_4 ( ) ( BLOCK BLOCK (  VAR_2 . METHOD_1 ( VAR_1 , this ) )  VAR_2 . METHOD_1 ( VAR_1 , this ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ( ELSE ELSE (  TYPE_2 . i ( STRING_1 , STRING_3 ) )  TYPE_2 . i ( STRING_1 , STRING_3 ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME x ) NAME x ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME info ) NAME info ( INIT = METHOD_2 ( x ) ) INIT = METHOD_2 ( x ) ) VAR VAR (  METHOD_3 ( TYPE_4 . METHOD_4 ( info , VAR_2 . METHOD_5 ( ) ) ) )  METHOD_3 ( TYPE_4 . METHOD_4 ( info , VAR_2 . METHOD_5 ( ) ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Throwable ) TYPE java.lang.Throwable ( NAME e ) NAME e ( BLOCK BLOCK (  throw METHOD_6 ( x , e ) ; )  throw METHOD_6 ( x , e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1<java.lang.String> ) RETURN TYPE_1<java.lang.String> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME project ) NAME project ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_3 . METHOD_2 ( ) ) INIT = TYPE_3 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME target ) NAME target ( INIT = VAR_1 . METHOD_3 ( project ) ) INIT = VAR_1 . METHOD_3 ( project ) ) VAR VAR ( IF IF ( COND target != null ) COND target != null ( THEN THEN ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_4 ( target ) ) INIT = VAR_1 . METHOD_4 ( target ) ) VAR VAR ( VAR VAR ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_2 . METHOD_5 ( ) ) INIT = VAR_2 . METHOD_5 ( ) ) VAR VAR (  return VAR_3 . METHOD_6 ( ) ; )  return VAR_3 . METHOD_6 ( ) ; ) THEN THEN ) IF IF (  return TYPE_7 . METHOD_7 ( ) ; )  return TYPE_7 . METHOD_7 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.Map ) TYPE java.util.Map ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) INIT = VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) VAR VAR ( WHILE WHILE ( COND VAR_2 . METHOD_4 ( ) ) COND VAR_2 . METHOD_4 ( ) ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME entry ) NAME entry ( INIT = ( ( TYPE_2 ) ( VAR_2 . METHOD_5 ( ) ) ) ) INIT = ( ( TYPE_2 ) ( VAR_2 . METHOD_5 ( ) ) ) ) VAR VAR (  METHOD_6 ( ( ( TYPE_3 ) ( entry . METHOD_7 ( ) ) ) , ( ( TYPE_4 ) ( entry . METHOD_8 ( ) ) ) ) )  METHOD_6 ( ( ( TYPE_3 ) ( entry . METHOD_7 ( ) ) ) , ( ( TYPE_4 ) ( entry . METHOD_8 ( ) ) ) ) ) BLOCK BLOCK ) WHILE WHILE ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_1 ( VAR_2 ) ) INIT = TYPE_1 . METHOD_1 ( VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME s ) NAME s ( INIT = new TYPE_2 ( VAR_1 ) ) INIT = new TYPE_2 ( VAR_1 ) ) VAR VAR (  VAR_1 . METHOD_2 ( VAR_3 ) )  VAR_1 . METHOD_2 ( VAR_3 ) (  METHOD_3 ( s ) )  METHOD_3 ( s ) (  s . METHOD_4 ( ) )  s . METHOD_4 ( ) (  VAR_1 . METHOD_5 ( ) )  VAR_1 . METHOD_5 ( ) (  METHOD_6 ( ) )  METHOD_6 ( ) (  VAR_1 . METHOD_7 ( ) )  VAR_1 . METHOD_7 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME status ) NAME status ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  android.util.Log.d ( VAR_3 . TAG , ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + status ) ) )  android.util.Log.d ( VAR_3 . TAG , ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + status ) ) ) THEN THEN ) IF IF (  VAR_4 . METHOD_2 ( VAR_1 , status ) )  VAR_4 . METHOD_2 ( VAR_1 , status ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME app ) NAME app ( INIT = VAR_5 . METHOD_3 ( VAR_1 ) ) INIT = VAR_5 . METHOD_3 ( VAR_1 ) ) VAR VAR ( IF IF ( COND app != null ) COND app != null ( THEN THEN ( IF IF ( COND status == 0 ) COND status == 0 ( THEN THEN (  VAR_6 . METHOD_4 ( VAR_7 , true , null ) )  VAR_6 . METHOD_4 ( VAR_7 , true , null ) ) THEN THEN ( ELSE ELSE (  VAR_6 . METHOD_4 ( VAR_8 , true , null ) )  VAR_6 . METHOD_4 ( VAR_8 , true , null ) ) ELSE ELSE ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME key ) NAME key ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME value ) NAME value ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  return ( VAR_1 . METHOD_2 ( key , value , ( - 1 ) ) ) == ( VAR_2 ) ; )  return ( VAR_1 . METHOD_2 ( key , value , ( - 1 ) ) ) == ( VAR_2 ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME e ) NAME e ( BLOCK BLOCK (  android.util.Log.w ( VAR_3 . TAG , STRING_1 , e ) )  android.util.Log.w ( VAR_3 . TAG , STRING_1 , e ) (  return false ; )  return false ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND TYPE_1 . METHOD_2 ( VAR_1 , TYPE_2 . METHOD_3 ( ) ) ) COND TYPE_1 . METHOD_2 ( VAR_1 , TYPE_2 . METHOD_3 ( ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  TYPE_3 . METHOD_4 ( TYPE_4 . METHOD_5 ( VAR_1 ) ) . METHOD_6 ( TYPE_1 . METHOD_7 ( ) ) . METHOD_6 ( TYPE_1 . METHOD_8 ( VAR_2 ) ) . METHOD_6 ( TYPE_1 . METHOD_9 ( ) ) )  TYPE_3 . METHOD_4 ( TYPE_4 . METHOD_5 ( VAR_1 ) ) . METHOD_6 ( TYPE_1 . METHOD_7 ( ) ) . METHOD_6 ( TYPE_1 . METHOD_8 ( VAR_2 ) ) . METHOD_6 ( TYPE_1 . METHOD_9 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME action ) NAME action ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_3 . METHOD_1 ( VAR_2 , true ) ) INIT = TYPE_3 . METHOD_1 ( VAR_2 , true ) ) VAR VAR ( IF IF ( COND ! ( VAR_1 . METHOD_2 ( ) ) ) COND ! ( VAR_1 . METHOD_2 ( ) ) ( THEN THEN (  TYPE_4 . METHOD_3 ( VAR_1 , null , null , false , true ) )  TYPE_4 . METHOD_3 ( VAR_1 , null , null , false , true ) ) THEN THEN ( ELSE ELSE (  TYPE_5 . METHOD_4 ( TYPE_6 . METHOD_5 ( ) . METHOD_6 ( ) , STRING_1 , STRING_2 ) )  TYPE_5 . METHOD_4 ( TYPE_6 . METHOD_5 ( ) . METHOD_6 ( ) , STRING_1 , STRING_2 ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME session ) NAME session ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME s ) NAME s ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME c ) NAME c ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME fd ) NAME fd ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME callback ) NAME callback ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_4 . METHOD_2 ( s ) )  TYPE_4 . METHOD_2 ( s ) (  TYPE_4 . METHOD_3 ( s , fd , callback , new byte [ ] { INT_1 } , 0 , 1 , 0 ) )  TYPE_4 . METHOD_3 ( s , fd , callback , new byte [ ] { INT_1 } , 0 , 1 , 0 ) (  super . METHOD_1 ( session , s , c , VAR_1 , fd , callback ) )  super . METHOD_1 ( session , s , c , VAR_1 , fd , callback ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE float ) TYPE float ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 ) INIT = VAR_2 ) VAR VAR (  VAR_1 -= FLOAT_1 * ( VAR_3 ) )  VAR_1 -= FLOAT_1 * ( VAR_3 ) ( SYNCHRONIZED SYNCHRONIZED (  VAR_4 )  VAR_4 ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_4 . size ( ) ) INIT = VAR_4 . size ( ) ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < VAR_5 ) COND i < VAR_5 ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_6 ) NAME VAR_6 ( INIT = VAR_4 . get ( i ) ) INIT = VAR_4 . get ( i ) ) VAR VAR (  VAR_1 -= ( VAR_6 . METHOD_2 ( ) ) + ( FLOAT_1 * ( VAR_3 ) ) )  VAR_1 -= ( VAR_6 . METHOD_2 ( ) ) + ( FLOAT_1 * ( VAR_3 ) ) (  VAR_6 . METHOD_3 ( VAR_1 ) )  VAR_6 . METHOD_3 ( VAR_1 ) ) BLOCK BLOCK ) FOR FOR ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( ) )  VAR_1 . METHOD_2 ( ) ( SYNCHRONIZED SYNCHRONIZED (  VAR_2 )  VAR_2 ( BLOCK BLOCK (  VAR_2 . METHOD_3 ( ) )  VAR_2 . METHOD_3 ( ) (  VAR_3 = 0 )  VAR_3 = 0 ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ( IF IF ( COND ( VAR_4 ) == null ) COND ( VAR_4 ) == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_4 . METHOD_4 ( ) . METHOD_5 ( ) ) INIT = VAR_4 . METHOD_4 ( ) . METHOD_5 ( ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_6 ) NAME VAR_6 ( INIT = TYPE_2 . METHOD_6 ( ) ) INIT = TYPE_2 . METHOD_6 ( ) ) VAR VAR (  METHOD_7 ( VAR_5 , VAR_6 ) )  METHOD_7 ( VAR_5 , VAR_6 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_1 ) ) COND ! ( VAR_1 ) ( THEN THEN ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_3 ) NAME METHOD_3 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return VAR_3 . getName ( ) . METHOD_4 ( VAR_4 . getName ( ) ) ; )  return VAR_3 . getName ( ) . METHOD_4 ( VAR_4 . getName ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD (  TYPE_2 . METHOD_2 ( VAR_2 , new TYPE_3 < TYPE_1 > ( ) { public int METHOD_3 ( TYPE_1 VAR_3 , TYPE_1 VAR_4 ) { return VAR_3 . getName ( ) . METHOD_4 ( VAR_4 . getName ( ) ) ; } } ) )  TYPE_2 . METHOD_2 ( VAR_2 , new TYPE_3 < TYPE_1 > ( ) { public int METHOD_3 ( TYPE_1 VAR_3 , TYPE_1 VAR_4 ) { return VAR_3 . getName ( ) . METHOD_4 ( VAR_4 . getName ( ) ) ; } } ) (  VAR_1 = true )  VAR_1 = true ) THEN THEN ) IF IF (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( VAR_2 ) ) INIT = METHOD_2 ( VAR_2 ) ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < ( VAR_3 ) ) COND i < ( VAR_3 ) ( UPDATE UPDATE (  ++ i )  ++ i ) UPDATE UPDATE ( BLOCK BLOCK (  assertEquals ( new TYPE_3 ( i ) , ( ( TYPE_3 ) ( VAR_1 . METHOD_3 ( 0 , VAR_4 ) ) ) ) )  assertEquals ( new TYPE_3 ( i ) , ( ( TYPE_3 ) ( VAR_1 . METHOD_3 ( 0 , VAR_4 ) ) ) ) ) BLOCK BLOCK ) FOR FOR (  METHOD_4 ( VAR_1 . METHOD_3 ( 0 , VAR_4 ) ) )  METHOD_4 ( VAR_1 . METHOD_3 ( 0 , VAR_4 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( VAR_2 ) ) INIT = new TYPE_1 ( VAR_2 ) ) VAR VAR ( WHILE WHILE ( COND ! ( VAR_1 . METHOD_2 ( VAR_2 , VAR_3 ) ) ) COND ! ( VAR_1 . METHOD_2 ( VAR_2 , VAR_3 ) ) ( BLOCK BLOCK ) BLOCK BLOCK ) WHILE WHILE ( WHILE WHILE ( COND ! ( VAR_1 . METHOD_2 ( VAR_3 , VAR_4 ) ) ) COND ! ( VAR_1 . METHOD_2 ( VAR_3 , VAR_4 ) ) ( BLOCK BLOCK ) BLOCK BLOCK ) WHILE WHILE (  METHOD_3 ( VAR_4 , VAR_1 . get ( ) ) )  METHOD_3 ( VAR_4 , VAR_1 . get ( ) ) ( WHILE WHILE ( COND ! ( VAR_1 . METHOD_2 ( VAR_4 , VAR_5 ) ) ) COND ! ( VAR_1 . METHOD_2 ( VAR_4 , VAR_5 ) ) ( BLOCK BLOCK ) BLOCK BLOCK ) WHILE WHILE (  METHOD_3 ( VAR_5 , VAR_1 . get ( ) ) )  METHOD_3 ( VAR_5 , VAR_1 . get ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_3 ) != null ) COND ( VAR_3 ) != null ( THEN THEN (  VAR_3 . METHOD_2 ( ) )  VAR_3 . METHOD_2 ( ) ) THEN THEN ) IF IF ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_1 . getMessage ( ) ) INIT = VAR_1 . getMessage ( ) ) VAR VAR ( IF IF ( COND VAR_4 == null ) COND VAR_4 == null ( THEN THEN (  VAR_4 = STRING_1 + ( VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) ) )  VAR_4 = STRING_1 + ( VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) ) ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_5 ) != null ) COND ( VAR_5 ) != null ( THEN THEN (  TYPE_1 . METHOD_5 ( VAR_5 , VAR_6 , VAR_4 , VAR_2 , VAR_7 ) )  TYPE_1 . METHOD_5 ( VAR_5 , VAR_6 , VAR_4 , VAR_2 , VAR_7 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_3 . METHOD_2 ( TYPE_2 . METHOD_3 ( ) , VAR_1 ) )  VAR_3 . METHOD_2 ( TYPE_2 . METHOD_3 ( ) , VAR_1 ) ( IF IF ( COND ! ( METHOD_4 ( VAR_1 , STRING_1 ) ) ) COND ! ( METHOD_4 ( VAR_1 , STRING_1 ) ) ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE int ) TYPE int ( NAME subId ) NAME subId ( INIT = TYPE_3 . METHOD_5 ( VAR_2 ) ) INIT = TYPE_3 . METHOD_5 ( VAR_2 ) ) VAR VAR (  return TYPE_4 . METHOD_6 ( VAR_4 . METHOD_7 ( ) , subId ) . METHOD_8 ( ) ; )  return TYPE_4 . METHOD_6 ( VAR_4 . METHOD_7 ( ) , subId ) . METHOD_8 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_5> ) TYPE java.util.List<TYPE_5> ( NAME VAR_3 ) NAME VAR_3 ( INIT = new java.util.ArrayList < TYPE_5 > ( ) ) INIT = new java.util.ArrayList < TYPE_5 > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME value ) NAME value ( IN values ) IN values ( BLOCK BLOCK (  VAR_3 . METHOD_2 ( value . METHOD_1 ( VAR_1 ) ) )  VAR_3 . METHOD_2 ( value . METHOD_1 ( VAR_1 ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ( VAR VAR ( TYPE TYPE_7 ) TYPE TYPE_7 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_2 . METHOD_1 ( VAR_1 ) ) INIT = VAR_2 . METHOD_1 ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_5 ) NAME VAR_5 ( INIT = new TYPE_1 ( VAR_4 , VAR_3 ) ) INIT = new TYPE_1 ( VAR_4 , VAR_3 ) ) VAR VAR (  return VAR_5 ; )  return VAR_5 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<?> ) TYPE TYPE_1<?> ( NAME parent ) NAME parent ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME id ) NAME id ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_3 ) COND VAR_3 ( THEN THEN (  android.util.Log.v ( VAR_4 . TAG , ( STRING_1 + ( VAR_5 ) ) ) )  android.util.Log.v ( VAR_4 . TAG , ( STRING_1 + ( VAR_5 ) ) ) ) THEN THEN ) IF IF ( IF IF ( COND ! ( VAR_5 ) ) COND ! ( VAR_5 ) ( THEN THEN (  VAR_6 . METHOD_2 ( VAR_2 ) )  VAR_6 . METHOD_2 ( VAR_2 ) (  METHOD_3 ( ) )  METHOD_3 ( ) (  METHOD_4 ( ) )  METHOD_4 ( ) ) THEN THEN ) IF IF (  VAR_5 = false )  VAR_5 = false ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_2 ( ) ) INIT = TYPE_2 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( ( byte [ ] ) ( VAR_2 . METHOD_3 ( byte . class , VAR_1 ) ) ) ) INIT = ( ( byte [ ] ) ( VAR_2 . METHOD_3 ( byte . class , VAR_1 ) ) ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME address ) NAME address ( INIT = ( ( int ) ( VAR_2 . METHOD_4 ( VAR_3 ) ) ) ) INIT = ( ( int ) ( VAR_2 . METHOD_4 ( VAR_3 ) ) ) ) VAR VAR (  return new TYPE_3 ( VAR_3 , address , VAR_1 ) ; )  return new TYPE_3 ( VAR_3 , address , VAR_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) == ( VAR_2 ) ) COND ( VAR_1 ) == ( VAR_2 ) ( THEN THEN ( IF IF ( COND ( VAR_3 ) != null ) COND ( VAR_3 ) != null ( THEN THEN (  VAR_3 . METHOD_1 ( this ) )  VAR_3 . METHOD_1 ( this ) ) THEN THEN ( ELSE ELSE (  TYPE_1 . e ( this , new java.lang.NullPointerException ( ) , STRING_1 , METHOD_2 ( ) ) )  TYPE_1 . e ( this , new java.lang.NullPointerException ( ) , STRING_1 , METHOD_2 ( ) ) ) ELSE ELSE ) IF IF (  TYPE_1 . METHOD_3 ( this , VAR_4 ) )  TYPE_1 . METHOD_3 ( this , VAR_4 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE android.bluetooth.BluetoothDevice ) TYPE android.bluetooth.BluetoothDevice ( NAME device ) NAME device ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  android.util.Log.v ( TYPE_1 . TAG , STRING_1 ) )  android.util.Log.v ( TYPE_1 . TAG , STRING_1 ) ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME service ) NAME service ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( IF IF ( COND service == null ) COND service == null ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  return service . METHOD_1 ( device ) ; )  return service . METHOD_1 ( device ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 . METHOD_2 ( VAR_1 ) ) INIT = VAR_4 . METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_3 == null ) COND VAR_3 == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_4 . METHOD_2 ( VAR_2 ) ) INIT = VAR_4 . METHOD_2 ( VAR_2 ) ) VAR VAR ( IF IF ( COND VAR_5 == null ) COND VAR_5 == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3[] ) TYPE TYPE_3[] ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 ) INIT = VAR_4 ) VAR VAR ( IF IF ( COND METHOD_2 ( VAR_3 ) ) COND METHOD_2 ( VAR_3 ) ( THEN THEN ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_6 ) INIT = VAR_6 ) VAR VAR ( IF IF ( COND VAR_5 == null ) COND VAR_5 == null ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_7 ) NAME VAR_7 ( INIT = new java.lang.String ( VAR_6 . METHOD_3 ( ) ) ) INIT = new java.lang.String ( VAR_6 . METHOD_3 ( ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME item ) NAME item ( INIT = TYPE_6 . METHOD_4 ( VAR_7 , TYPE_7 . METHOD_5 ( VAR_1 ) ) ) INIT = TYPE_6 . METHOD_4 ( VAR_7 , TYPE_7 . METHOD_5 ( VAR_1 ) ) ) VAR VAR (  METHOD_6 ( VAR_7 , item ) )  METHOD_6 ( VAR_7 , item ) (  METHOD_7 ( VAR_3 , item ) )  METHOD_7 ( VAR_3 , item ) ) THEN THEN ) IF IF (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( IF IF ( COND VAR_1 . equals ( STRING_1 ) ) COND VAR_1 . equals ( STRING_1 ) ( THEN THEN (  VAR_2 . METHOD_3 ( ) )  VAR_2 . METHOD_3 ( ) ) THEN THEN ( ELSE ELSE ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = java.lang.Integer . METHOD_4 ( VAR_1 ) ) INIT = java.lang.Integer . METHOD_4 ( VAR_1 ) ) VAR VAR (  VAR_2 . METHOD_5 ( VAR_3 ) )  VAR_2 . METHOD_5 ( VAR_3 ) ) ELSE ELSE ) IF IF (  VAR_4 . println ( ( ( STRING_2 + ( VAR_2 . METHOD_6 ( ) ? STRING_3 : STRING_4 ) ) + STRING_5 ) ) )  VAR_4 . println ( ( ( STRING_2 + ( VAR_2 . METHOD_6 ( ) ? STRING_3 : STRING_4 ) ) + STRING_5 ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ( VAR VAR ( TYPE java.util.List<?extendsTYPE_2> ) TYPE java.util.List<?extendsTYPE_2> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  VAR_3 )  VAR_3 ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME id ) NAME id ( IN VAR_3 ) IN VAR_3 ( BLOCK BLOCK ( IF IF ( COND id . equals ( name , VAR_1 ) ) COND id . equals ( name , VAR_1 ) ( THEN THEN (  return id ; )  return id ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  mRS . METHOD_2 ( ) )  mRS . METHOD_2 ( ) ( VAR VAR ( TYPE int ) TYPE int ( NAME id ) NAME id ( INIT = mRS . METHOD_3 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ) INIT = mRS . METHOD_3 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_7 ) NAME VAR_7 ( INIT = new TYPE_1 ( id , mRS ) ) INIT = new TYPE_1 ( id , mRS ) ) VAR VAR (  VAR_8 = VAR_9 )  VAR_8 = VAR_9 (  VAR_10 = VAR_11 )  VAR_10 = VAR_11 (  VAR_12 = VAR_13 )  VAR_12 = VAR_13 (  VAR_14 = VAR_15 )  VAR_14 = VAR_15 (  VAR_16 = VAR_17 )  VAR_16 = VAR_17 (  VAR_18 = VAR_6 )  VAR_18 = VAR_6 (  return VAR_7 ; )  return VAR_7 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME c ) NAME c ( INIT = TYPE_1 . METHOD_2 ( ) ) INIT = TYPE_1 . METHOD_2 ( ) ) VAR VAR (  assertTrue ( ( c != ( VAR_1 ) ) ) )  assertTrue ( ( c != ( VAR_1 ) ) ) ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_1 . METHOD_2 ( ) ) INIT = TYPE_1 . METHOD_2 ( ) ) VAR VAR (  assertTrue ( ( c != VAR_2 ) ) )  assertTrue ( ( c != VAR_2 ) ) (  TYPE_1 . METHOD_3 ( c ) )  TYPE_1 . METHOD_3 ( c ) (  TYPE_1 . METHOD_3 ( VAR_2 ) )  TYPE_1 . METHOD_3 ( VAR_2 ) (  TYPE_2 . METHOD_4 ( ) )  TYPE_2 . METHOD_4 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) != null ) COND ( VAR_1 ) != null ( THEN THEN (  METHOD_2 ( ) . METHOD_3 ( VAR_1 ) )  METHOD_2 ( ) . METHOD_3 ( VAR_1 ) ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_2 ) != null ) COND ( VAR_2 ) != null ( THEN THEN (  VAR_2 . METHOD_4 ( ) )  VAR_2 . METHOD_4 ( ) ) THEN THEN ) IF IF (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE short ) TYPE short ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME status ) NAME status ) VAR VAR ( VAR VAR ( TYPE short ) TYPE short ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  android.util.Log.v ( TYPE_2 . TAG , ( ( ( ( ( STRING_1 + id ) + STRING_2 ) + ( TYPE_2 . METHOD_2 ( status ) ) ) + STRING_3 ) + VAR_1 ) ) )  android.util.Log.v ( TYPE_2 . TAG , ( ( ( ( ( STRING_1 + id ) + STRING_2 ) + ( TYPE_2 . METHOD_2 ( status ) ) ) + STRING_3 ) + VAR_1 ) ) ) THEN THEN ) IF IF ( IF IF ( COND ( status . status ) == ( VAR_3 ) ) COND ( status . status ) == ( VAR_3 ) ( THEN THEN (  VAR_4 . METHOD_3 ( id , false , VAR_1 ) )  VAR_4 . METHOD_3 ( id , false , VAR_1 ) ) THEN THEN ( ELSE ELSE (  VAR_4 . METHOD_4 ( id , false , status . status ) )  VAR_4 . METHOD_4 ( id , false , status . status ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME locale ) NAME locale ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( locale . METHOD_2 ( ) . length ( ) ) == 0 ) COND ( locale . METHOD_2 ( ) . length ( ) ) == 0 ( THEN THEN (  return VAR_1 ; )  return VAR_1 ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . get ( locale ) ) INIT = TYPE_2 . get ( locale ) ) VAR VAR ( IF IF ( COND VAR_3 . equals ( VAR_1 ) ) COND VAR_3 . equals ( VAR_1 ) ( THEN THEN (  return VAR_4 ; )  return VAR_4 ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_5 ) NAME VAR_5 ( INIT = TYPE_3 . METHOD_3 ( locale . toString ( ) , VAR_1 ) ) INIT = TYPE_3 . METHOD_3 ( locale . toString ( ) , VAR_1 ) ) VAR VAR (  return VAR_5 != null ? VAR_5 : VAR_1 ; )  return VAR_5 != null ? VAR_5 : VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( VAR_2 ) )  VAR_1 . METHOD_2 ( VAR_2 ) ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 ) INIT = VAR_4 ) VAR VAR ( IF IF ( COND ( VAR_2 ) == ( VAR_5 ) ) COND ( VAR_2 ) == ( VAR_5 ) ( THEN THEN (  VAR_3 = VAR_6 )  VAR_3 = VAR_6 ) THEN THEN ( ELSE ELSE ( IF IF ( COND ( VAR_2 ) == ( VAR_7 ) ) COND ( VAR_2 ) == ( VAR_7 ) ( THEN THEN (  VAR_3 = VAR_8 )  VAR_3 = VAR_8 ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF (  METHOD_3 ( this , VAR_3 ) )  METHOD_3 ( this , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME server ) NAME server ( INIT = new TYPE_1 ( 0 ) ) INIT = new TYPE_1 ( 0 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( TYPE_3 . METHOD_2 ( ) , server . METHOD_3 ( ) ) ) INIT = new TYPE_2 ( TYPE_3 . METHOD_2 ( ) , server . METHOD_3 ( ) ) ) VAR VAR (  METHOD_4 ( STRING_1 , 0 , VAR_1 . METHOD_3 ( ) ) )  METHOD_4 ( STRING_1 , 0 , VAR_1 . METHOD_3 ( ) ) (  VAR_1 . METHOD_5 ( ) )  VAR_1 . METHOD_5 ( ) (  server . METHOD_5 ( ) )  server . METHOD_5 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE short ) TYPE short ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME status ) NAME status ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  android.util.Log.v ( TYPE_2 . TAG , ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + ( TYPE_2 . METHOD_2 ( status ) ) ) ) )  android.util.Log.v ( TYPE_2 . TAG , ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + ( TYPE_2 . METHOD_2 ( status ) ) ) ) ) THEN THEN ) IF IF (  VAR_3 . METHOD_3 ( VAR_1 , status . status , false ) )  VAR_3 . METHOD_3 ( VAR_1 , status . status , false ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_1 ) ( super . METHOD_1 ( ) ) ) ) INIT = ( ( TYPE_1 ) ( super . METHOD_1 ( ) ) ) ) VAR VAR (  VAR_2 = ( ( TYPE_2 ) ( VAR_3 . METHOD_1 ( ) ) ) )  VAR_2 = ( ( TYPE_2 ) ( VAR_3 . METHOD_1 ( ) ) ) (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_4 ( e ) ; )  throw new TYPE_4 ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_3 ( METHOD_2 ( ) . METHOD_3 ( ) ) ) INIT = new TYPE_3 ( METHOD_2 ( ) . METHOD_3 ( ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_3 . METHOD_4 ( VAR_2 . METHOD_5 ( ) , VAR_1 , 10 ) ) INIT = VAR_3 . METHOD_4 ( VAR_2 . METHOD_5 ( ) , VAR_1 , 10 ) ) VAR VAR (  TYPE_5 . assertTrue ( VAR_4 . METHOD_6 ( ) , VAR_4 . METHOD_7 ( ) ) )  TYPE_5 . assertTrue ( VAR_4 . METHOD_6 ( ) , VAR_4 . METHOD_7 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_4 ) IN VAR_4 ( BLOCK BLOCK ( IF IF ( COND ( VAR_3 . METHOD_2 ( ) ) == VAR_1 ) COND ( VAR_3 . METHOD_2 ( ) ) == VAR_1 ( THEN THEN (  VAR_2 . METHOD_3 ( VAR_3 ) )  VAR_2 . METHOD_3 ( VAR_3 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME method ) NAME method ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME offset ) NAME offset ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE byte ) TYPE byte ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_5 ) INIT = VAR_5 ) VAR VAR ( SWITCH SWITCH ( NAME VAR_4 ) NAME VAR_4 ( CASE VAR_6 ( BLOCK BLOCK (  VAR_20 = true )  VAR_20 = true ) BLOCK BLOCK ) CASE VAR_6 ( CASE VAR_7 ( BLOCK BLOCK (  VAR_20 = true )  VAR_20 = true ) BLOCK BLOCK ) CASE VAR_7 ( CASE VAR_8 ( BLOCK BLOCK (  VAR_20 = true )  VAR_20 = true ) BLOCK BLOCK ) CASE VAR_8 ( CASE VAR_9 ( BLOCK BLOCK (  VAR_20 = true )  VAR_20 = true ) BLOCK BLOCK ) CASE VAR_9 ( CASE VAR_10 ( BLOCK BLOCK (  VAR_20 = true )  VAR_20 = true ) BLOCK BLOCK ) CASE VAR_10 ( CASE VAR_11 ( BLOCK BLOCK (  VAR_20 = true )  VAR_20 = true ) BLOCK BLOCK ) CASE VAR_11 ( CASE VAR_12 ( BLOCK BLOCK (  VAR_20 = true )  VAR_20 = true ) BLOCK BLOCK ) CASE VAR_12 ( CASE VAR_13 ( BLOCK BLOCK (  VAR_20 = true )  VAR_20 = true ) BLOCK BLOCK ) CASE VAR_13 ( CASE VAR_14 ( BLOCK BLOCK (  VAR_20 = true )  VAR_20 = true ) BLOCK BLOCK ) CASE VAR_14 ( CASE VAR_15 ( BLOCK BLOCK (  VAR_20 = true )  VAR_20 = true ) BLOCK BLOCK ) CASE VAR_15 ( CASE VAR_16 ( BLOCK BLOCK (  VAR_20 = true )  VAR_20 = true ) BLOCK BLOCK ) CASE VAR_16 ( CASE VAR_17 ( BLOCK BLOCK (  VAR_20 = true )  VAR_20 = true ) BLOCK BLOCK ) CASE VAR_17 ( CASE VAR_18 ( BLOCK BLOCK (  VAR_20 = true )  VAR_20 = true ) BLOCK BLOCK ) CASE VAR_18 ( CASE VAR_19 ( BLOCK BLOCK (  VAR_20 = true )  VAR_20 = true ) BLOCK BLOCK ) CASE VAR_19 ) SWITCH SWITCH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  this )  this ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME index ) NAME index ( INIT = METHOD_2 ( VAR_1 , false ) ) INIT = METHOD_2 ( VAR_1 , false ) ) VAR VAR ( IF IF ( COND index >= 0 ) COND index >= 0 ( THEN THEN ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME r ) NAME r ( INIT = ( ( TYPE_3 ) ( VAR_2 . get ( index ) ) ) ) INIT = ( ( TYPE_3 ) ( VAR_2 . get ( index ) ) ) ) VAR VAR (  return VAR_3 . METHOD_3 ( ) ; )  return VAR_3 . METHOD_3 ( ) ; ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER synchronized ) MODIFIER synchronized ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME call ) NAME call ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_1 = VAR_2 . get ( call . METHOD_2 ( ) ) ) INIT = VAR_1 = VAR_2 . get ( call . METHOD_2 ( ) ) ) VAR VAR ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN (  VAR_1 . METHOD_3 ( ) )  VAR_1 . METHOD_3 ( ) (  METHOD_4 ( ) )  METHOD_4 ( ) (  return VAR_1 ; )  return VAR_1 ; ) THEN THEN ( ELSE ELSE (  android.util.Log.e ( VAR_3 , ( ( STRING_1 + call ) + STRING_2 ) ) )  android.util.Log.e ( VAR_3 , ( ( STRING_1 + call ) + STRING_2 ) ) (  return null ; )  return null ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND METHOD_2 ( ) ) COND METHOD_2 ( ) ( THEN THEN (  return STRING_1 ; )  return STRING_1 ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE java.lang.StringBuilder ) TYPE java.lang.StringBuilder ( NAME result ) NAME result ( INIT = new java.lang.StringBuilder ( ) ) INIT = new java.lang.StringBuilder ( ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME index ) NAME index ( INIT = 0 ) INIT = 0 ) VAR VAR ( WHILE WHILE ( COND index < ( VAR_1 ) ) COND index < ( VAR_1 ) ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 [ ( index ++ ) ] ) INIT = VAR_3 [ ( index ++ ) ] ) VAR VAR ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN ( IF IF ( COND ( result . length ( ) ) > 0 ) COND ( result . length ( ) ) > 0 ( THEN THEN (  result . append ( CHAR_1 ) )  result . append ( CHAR_1 ) ) THEN THEN ) IF IF (  result . append ( VAR_2 . METHOD_3 ( ) ) )  result . append ( VAR_2 . METHOD_3 ( ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) WHILE WHILE (  return result . toString ( ) ; )  return result . toString ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME context ) NAME context ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND TYPE_2 . METHOD_2 ( context ) ) COND TYPE_2 . METHOD_2 ( context ) ( THEN THEN (  TYPE_2 . METHOD_3 ( context , VAR_1 , true ) )  TYPE_2 . METHOD_3 ( context , VAR_1 , true ) ) THEN THEN ( ELSE ELSE (  TYPE_2 . METHOD_4 ( context ) . METHOD_5 ( ) . METHOD_6 ( VAR_1 , true ) . METHOD_7 ( ) )  TYPE_2 . METHOD_4 ( context ) . METHOD_5 ( ) . METHOD_6 ( VAR_1 , true ) . METHOD_7 ( ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . println ( ( ( ( ( ( ( STRING_1 + ( VAR_2 . METHOD_2 ( ) ) ) + STRING_2 ) + ( VAR_2 . METHOD_3 ( ) ) ) + STRING_3 ) + ( VAR_2 . METHOD_4 ( ) . METHOD_5 ( ) ) ) + CHAR_1 ) ) )  VAR_1 . println ( ( ( ( ( ( ( STRING_1 + ( VAR_2 . METHOD_2 ( ) ) ) + STRING_2 ) + ( VAR_2 . METHOD_3 ( ) ) ) + STRING_3 ) + ( VAR_2 . METHOD_4 ( ) . METHOD_5 ( ) ) ) + CHAR_1 ) ) (  VAR_1 . println ( ( ( STRING_4 + ( VAR_2 . METHOD_6 ( ) ) ) + CHAR_1 ) ) )  VAR_1 . println ( ( ( STRING_4 + ( VAR_2 . METHOD_6 ( ) ) ) + CHAR_1 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME m ) NAME m ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME v ) NAME v ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME value ) NAME value ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = false ) INIT = false ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( v == null ) ? ( ( int ) ( m . METHOD_2 ( ) ) ) : ( ( int ) ( m . METHOD_2 ( v ) ) ) ) INIT = ( v == null ) ? ( ( int ) ( m . METHOD_2 ( ) ) ) : ( ( int ) ( m . METHOD_2 ( v ) ) ) ) VAR VAR (  TYPE_3 . assertTrue ( ( VAR_3 == value ) ) )  TYPE_3 . assertTrue ( ( VAR_3 == value ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_2 = true )  VAR_2 = true ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  TYPE_3 . METHOD_3 ( VAR_2 , VAR_1 ) )  TYPE_3 . METHOD_3 ( VAR_2 , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE char ) TYPE char ( NAME c ) NAME c ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( TYPE_1 . METHOD_2 ( c ) ) ) COND ! ( TYPE_1 . METHOD_2 ( c ) ) ( THEN THEN (  TYPE_2 . e ( VAR_1 , ( ( STRING_1 + c ) + STRING_2 ) ) )  TYPE_2 . e ( VAR_1 , ( ( STRING_1 + c ) + STRING_2 ) ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND ( VAR_2 . METHOD_3 ( ) ) == ( VAR_3 ) ) COND ( VAR_2 . METHOD_3 ( ) ) == ( VAR_3 ) ( THEN THEN (  VAR_2 . METHOD_1 ( c , null ) )  VAR_2 . METHOD_1 ( c , null ) ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) == ( METHOD_2 ( ) ) ) COND ( VAR_1 ) == ( METHOD_2 ( ) ) ( THEN THEN (  throw new TYPE_1 ( STRING_1 ) ; )  throw new TYPE_1 ( STRING_1 ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE int ) TYPE int ( NAME result ) NAME result ( INIT = VAR_2 ) INIT = VAR_2 ) VAR VAR ( IF IF ( COND null != ( VAR_3 ) ) COND null != ( VAR_3 ) ( THEN THEN ( VAR VAR ( TYPE android.os.Message ) TYPE android.os.Message ( NAME msg ) NAME msg ( INIT = VAR_3 . METHOD_3 ( VAR_4 ) ) INIT = VAR_3 . METHOD_3 ( VAR_4 ) ) VAR VAR (  result = ( VAR_3 . METHOD_4 ( msg ) ) ? VAR_5 : result )  result = ( VAR_3 . METHOD_4 ( msg ) ) ? VAR_5 : result ) THEN THEN ) IF IF (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public synchronized ) MODIFIER public synchronized ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_3 ) COND VAR_3 ( THEN THEN (  android.util.Log.d ( VAR_4 . TAG , ( STRING_1 + VAR_1 ) ) )  android.util.Log.d ( VAR_4 . TAG , ( STRING_1 + VAR_1 ) ) ) THEN THEN ) IF IF ( IF IF ( COND TYPE_1 . METHOD_2 ( VAR_1 ) ) COND TYPE_1 . METHOD_2 ( VAR_1 ) ( THEN THEN ( IF IF ( COND VAR_3 ) COND VAR_3 ( THEN THEN (  android.util.Log.d ( VAR_4 . TAG , STRING_2 ) )  android.util.Log.d ( VAR_4 . TAG , STRING_2 ) ) THEN THEN ) IF IF (  return false ; )  return false ; ) THEN THEN ) IF IF ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  VAR_5 = VAR_1 )  VAR_5 = VAR_1 ) THEN THEN ) IF IF (  VAR_6 = VAR_1 . METHOD_3 ( ) )  VAR_6 = VAR_1 . METHOD_3 ( ) ( IF IF ( COND VAR_7 ) COND VAR_7 ( THEN THEN (  METHOD_4 ( ) )  METHOD_4 ( ) ) THEN THEN ) IF IF (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1[] ) TYPE TYPE_1[] ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1[] ) TYPE TYPE_1[] ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < ( VAR_2 . length ) ) COND i < ( VAR_2 . length ) ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK ( IF IF ( COND ( VAR_2 [ i ] ) == null ) COND ( VAR_2 [ i ] ) == null ( THEN THEN (  throw new java.lang.NullPointerException ( ( ( STRING_1 + i ) + STRING_2 ) ) ; )  throw new java.lang.NullPointerException ( ( ( STRING_1 + i ) + STRING_2 ) ) ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR FOR (  VAR_3 = VAR_2 )  VAR_3 = VAR_2 ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( VAR_1 . METHOD_3 ( ) ) )  METHOD_2 ( VAR_1 . METHOD_3 ( ) ) (  METHOD_2 ( VAR_1 . METHOD_4 ( ) ) )  METHOD_2 ( VAR_1 . METHOD_4 ( ) ) (  METHOD_2 ( VAR_1 . METHOD_5 ( TYPE_1 . METHOD_6 ( ) ) ) )  METHOD_2 ( VAR_1 . METHOD_5 ( TYPE_1 . METHOD_6 ( ) ) ) (  TYPE_2 . METHOD_7 ( VAR_1 . METHOD_8 ( ) ) )  TYPE_2 . METHOD_7 ( VAR_1 . METHOD_8 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR ( VAR VAR ( TYPE android.content.Intent ) TYPE android.content.Intent ( NAME VAR_2 ) NAME VAR_2 ( INIT = new android.content.Intent ( VAR_3 , TYPE_1 . METHOD_2 ( VAR_1 ) ) ) INIT = new android.content.Intent ( VAR_3 , TYPE_1 . METHOD_2 ( VAR_1 ) ) ) VAR VAR (  VAR_2 . METHOD_3 ( VAR_4 , true ) )  VAR_2 . METHOD_3 ( VAR_4 , true ) ( VAR VAR ( TYPE int ) TYPE int ( NAME result ) NAME result ( INIT = METHOD_4 ( VAR_2 , true ) ) INIT = METHOD_4 ( VAR_2 , true ) ) VAR VAR (  assertEquals ( VAR_5 , result ) )  assertEquals ( VAR_5 , result ) (  org.mockito.Mockito.verify ( VAR_6 ) . METHOD_5 ( org.mockito.Matchers.eq ( VAR_7 ) , org.mockito.Matchers.eq ( TYPE_1 . METHOD_2 ( VAR_1 ) ) , TYPE_2 . METHOD_6 ( VAR_8 class ) , org.mockito.Matchers.eq ( true ) , org.mockito.Matchers.eq ( VAR_9 ) ) )  org.mockito.Mockito.verify ( VAR_6 ) . METHOD_5 ( org.mockito.Matchers.eq ( VAR_7 ) , org.mockito.Matchers.eq ( TYPE_1 . METHOD_2 ( VAR_1 ) ) , TYPE_2 . METHOD_6 ( VAR_8 class ) , org.mockito.Matchers.eq ( true ) , org.mockito.Matchers.eq ( VAR_9 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( VAR_3 class ) ) INIT = METHOD_2 ( VAR_3 class ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_3 ( VAR_1 ) ) INIT = METHOD_3 ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_5 ) NAME VAR_5 ( INIT = METHOD_2 ( VAR_6 class ) ) INIT = METHOD_2 ( VAR_6 class ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_7 ) NAME VAR_7 ( INIT = METHOD_4 ( ) ) INIT = METHOD_4 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_8 ) NAME VAR_8 ( INIT = METHOD_5 ( ) ) INIT = METHOD_5 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME VAR_9 ) NAME VAR_9 ( INIT = METHOD_6 ( VAR_5 , VAR_10 ) ) INIT = METHOD_6 ( VAR_5 , VAR_10 ) ) VAR VAR (  METHOD_7 ( VAR_7 , VAR_4 , VAR_5 , VAR_2 ) )  METHOD_7 ( VAR_7 , VAR_4 , VAR_5 , VAR_2 ) (  METHOD_8 ( VAR_9 , VAR_5 , VAR_8 ) )  METHOD_8 ( VAR_9 , VAR_5 , VAR_8 ) (  METHOD_9 ( VAR_2 ) )  METHOD_9 ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE long[] ) TYPE long[] ( NAME values ) NAME values ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_3 . METHOD_2 ( VAR_1 ) ) INIT = TYPE_3 . METHOD_2 ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_4> ) TYPE java.util.List<TYPE_4> ( NAME VAR_4 ) NAME VAR_4 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE long ) TYPE long ( NAME value ) NAME value ( IN values ) IN values ( BLOCK BLOCK (  VAR_4 . METHOD_3 ( value ) )  VAR_4 . METHOD_3 ( value ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_4 ) ; )  return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_4 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ( INIT = true ) INIT = true ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . METHOD_2 ( ) ) INIT = VAR_3 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME type ) NAME type ( INIT = ( VAR_2 != ( - 1 ) ) ? VAR_4 . get ( VAR_2 ) : null ) INIT = ( VAR_2 != ( - 1 ) ) ? VAR_4 . get ( VAR_2 ) : null ) VAR VAR ( IF IF ( COND type == null ) COND type == null ( THEN THEN (  METHOD_3 ( STRING_1 ) )  METHOD_3 ( STRING_1 ) (  VAR_1 = false )  VAR_1 = false ) THEN THEN ( ELSE ELSE (  METHOD_3 ( null ) )  METHOD_3 ( null ) ) ELSE ELSE ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_5 ) NAME VAR_5 ( INIT = ( ( TYPE_1 ) ( METHOD_4 ( ) ) ) ) INIT = ( ( TYPE_1 ) ( METHOD_4 ( ) ) ) ) VAR VAR (  VAR_5 . METHOD_5 ( type ) )  VAR_5 . METHOD_5 ( type ) (  METHOD_6 ( VAR_1 ) )  METHOD_6 ( VAR_1 ) (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( ) ) INIT = TYPE_1 . METHOD_2 ( ) ) VAR VAR (  TYPE_1 . METHOD_3 ( VAR_1 , null , STRING_1 ) )  TYPE_1 . METHOD_3 ( VAR_1 , null , STRING_1 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 ( new java.io.File ( VAR_1 , STRING_1 ) ) ) INIT = new TYPE_2 ( new java.io.File ( VAR_1 , STRING_1 ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_3 ( VAR_2 ) ) INIT = new TYPE_3 ( VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_4 ) NAME VAR_4 ( INIT = new byte [ INT_1 ] ) INIT = new byte [ INT_1 ] ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_3 . METHOD_4 ( ) )  VAR_3 . METHOD_4 ( ) (  fail ( STRING_2 ) )  fail ( STRING_2 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME VAR_5 ) NAME VAR_5 ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( VAR_1 ) )  TYPE_1 . METHOD_2 ( VAR_1 ) (  assertEquals ( VAR_2 , TYPE_2 . METHOD_3 ( VAR_1 ) ) )  assertEquals ( VAR_2 , TYPE_2 . METHOD_3 ( VAR_1 ) ) ( IF IF ( COND ! ( VAR_3 ) ) COND ! ( VAR_3 ) ( THEN THEN ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_4 ) NAME VAR_4 ( INIT = new java.util.ArrayList < java.lang.String > ( ) ) INIT = new java.util.ArrayList < java.lang.String > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_5 ) NAME VAR_5 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( IF IF ( COND ! ( TYPE_1 . METHOD_4 ( VAR_5 ) ) ) COND ! ( TYPE_1 . METHOD_4 ( VAR_5 ) ) ( THEN THEN (  VAR_4 . METHOD_5 ( VAR_5 ) )  VAR_4 . METHOD_5 ( VAR_5 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  assertEquals ( VAR_6 , VAR_4 ) )  assertEquals ( VAR_6 , VAR_4 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME context ) NAME context ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME packageName ) NAME packageName ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND TYPE_3 . METHOD_2 ( packageName ) ) COND TYPE_3 . METHOD_2 ( packageName ) ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_4<TYPE_1> ) TYPE TYPE_4<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_5 . METHOD_3 ( context ) ) INIT = TYPE_5 . METHOD_3 ( context ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME app ) NAME app ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( IF IF ( COND packageName . equals ( VAR_2 ) ) COND packageName . equals ( VAR_2 ) ( THEN THEN (  return app ; )  return app ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( VAR_2 class ) ) INIT = TYPE_2 . METHOD_2 ( VAR_2 class ) ) VAR VAR (  TYPE_3 . METHOD_3 ( VAR_1 , STRING_1 ) )  TYPE_3 . METHOD_3 ( VAR_1 , STRING_1 ) (  TYPE_2 . METHOD_4 ( VAR_1 ) )  TYPE_2 . METHOD_4 ( VAR_1 ) ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_4 ( VAR_1 ) ) INIT = new TYPE_4 ( VAR_1 ) ) VAR VAR (  TYPE_5 . METHOD_5 ( VAR_3 . METHOD_6 ( STRING_2 ) . get ( ) ) )  TYPE_5 . METHOD_5 ( VAR_3 . METHOD_6 ( STRING_2 ) . get ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( ) ) INIT = TYPE_2 . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_2 . METHOD_1 ( ) ) INIT = VAR_2 . METHOD_1 ( ) ) VAR VAR ( IF IF ( COND VAR_3 != null ) COND VAR_3 != null ( THEN THEN (  return VAR_3 ; )  return VAR_3 ; ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_4 ) != null ) COND ( VAR_4 ) != null ( THEN THEN (  return VAR_1 . METHOD_6 ( VAR_4 . METHOD_7 ( ) ) ; )  return VAR_1 . METHOD_6 ( VAR_4 . METHOD_7 ( ) ) ; ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME result ) NAME result ( INIT = false ) INIT = false ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_2 = VAR_1 . METHOD_2 ( VAR_3 ) )  VAR_2 = VAR_1 . METHOD_2 ( VAR_3 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME e ) NAME e ( BLOCK BLOCK (  return result ; )  return result ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  TYPE_2 . METHOD_3 ( VAR_4 , VAR_2 , VAR_2 . length , TYPE_3 . METHOD_4 ( ) ) )  TYPE_2 . METHOD_3 ( VAR_4 , VAR_2 , VAR_2 . length , TYPE_3 . METHOD_4 ( ) ) (  result = true )  result = true ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ( BLOCK BLOCK (  return false ; )  return false ; ) BLOCK BLOCK ) CATCH CATCH ( FINALLY FINALLY ( IF IF ( COND result == false ) COND result == false ( THEN THEN (  TYPE_4 . METHOD_5 ( VAR_5 ) )  TYPE_4 . METHOD_5 ( VAR_5 ) ) THEN THEN ) IF IF ) FINALLY FINALLY ) TRY TRY (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int[] ) RETURN int[] ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int[] ) TYPE int[] ( NAME src ) NAME src ) VAR VAR ( VAR VAR ( TYPE int[] ) TYPE int[] ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return new int [ ] { TYPE_1 . METHOD_2 ( src [ 0 ] , VAR_1 [ 0 ] ) , TYPE_1 . METHOD_2 ( src [ 1 ] , VAR_1 [ 1 ] ) , TYPE_1 . METHOD_2 ( src [ 2 ] , VAR_1 [ 2 ] ) , TYPE_1 . METHOD_3 ( INT_1 , ( ( src [ 3 ] ) + ( VAR_1 [ 3 ] ) ) ) } ; )  return new int [ ] { TYPE_1 . METHOD_2 ( src [ 0 ] , VAR_1 [ 0 ] ) , TYPE_1 . METHOD_2 ( src [ 1 ] , VAR_1 [ 1 ] ) , TYPE_1 . METHOD_2 ( src [ 2 ] , VAR_1 [ 2 ] ) , TYPE_1 . METHOD_3 ( INT_1 , ( ( src [ 3 ] ) + ( VAR_1 [ 3 ] ) ) ) } ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_1 == ( VAR_5 ) ) INIT = VAR_1 == ( VAR_5 ) ) VAR VAR (  VAR_6 . METHOD_2 ( VAR_2 , name , VAR_3 , VAR_4 ) )  VAR_6 . METHOD_2 ( VAR_2 , name , VAR_3 , VAR_4 ) (  VAR_7 . METHOD_1 ( VAR_1 , VAR_2 , name , VAR_3 ) )  VAR_7 . METHOD_1 ( VAR_1 , VAR_2 , name , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SWITCH SWITCH ( NAME VAR_1 ) NAME VAR_1 ( CASE VAR_3 ( BLOCK BLOCK (  VAR_4 = VAR_5 )  VAR_4 = VAR_5 (  METHOD_2 ( VAR_4 , METHOD_3 ( VAR_6 ) ) )  METHOD_2 ( VAR_4 , METHOD_3 ( VAR_6 ) ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_3 ( CASE VAR_7 ( BLOCK BLOCK (  android.util.Log.v ( VAR_8 . TAG , STRING_1 ) )  android.util.Log.v ( VAR_8 . TAG , STRING_1 ) (  VAR_9 = VAR_5 )  VAR_9 = VAR_5 (  METHOD_4 ( ) )  METHOD_4 ( ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_7 ( CASE VAR_10 ( BLOCK BLOCK (  VAR_11 = VAR_5 )  VAR_11 = VAR_5 (  METHOD_5 ( true ) )  METHOD_5 ( true ) (  VAR_12 = ( ( long ) ( VAR_2 ) ) * INT_1 )  VAR_12 = ( ( long ) ( VAR_2 ) ) * INT_1 (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_10 ) SWITCH SWITCH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  assertEquals ( VAR_1 . METHOD_2 ( ) . length , VAR_2 . METHOD_3 ( ) ) )  assertEquals ( VAR_1 . METHOD_2 ( ) . length , VAR_2 . METHOD_3 ( ) ) (  assertEquals ( VAR_3 . length , VAR_4 . METHOD_3 ( ) ) )  assertEquals ( VAR_3 . length , VAR_4 . METHOD_3 ( ) ) (  assertEquals ( VAR_5 . length , VAR_6 . METHOD_3 ( ) ) )  assertEquals ( VAR_5 . length , VAR_6 . METHOD_3 ( ) ) (  assertNotNull ( VAR_7 . METHOD_3 ( ) ) )  assertNotNull ( VAR_7 . METHOD_3 ( ) ) (  assertNotNull ( VAR_8 . METHOD_3 ( ) ) )  assertNotNull ( VAR_8 . METHOD_3 ( ) ) (  VAR_2 . METHOD_4 ( ) . METHOD_5 ( ) )  VAR_2 . METHOD_4 ( ) . METHOD_5 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE float ) TYPE float ( NAME x ) NAME x ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  throw new TYPE_2 ( ) ; )  throw new TYPE_2 ( ) ; ) THEN THEN ) IF IF ( IF IF ( COND ! ( VAR_2 ) ) COND ! ( VAR_2 ) ( THEN THEN (  throw new TYPE_3 ( STRING_1 ) ; )  throw new TYPE_3 ( STRING_1 ) ; ) THEN THEN ) IF IF (  METHOD_1 ( METHOD_2 ( METHOD_3 ( VAR_3 ) ) , x ) )  METHOD_1 ( METHOD_2 ( METHOD_3 ( VAR_3 ) ) , x ) (  return this ; )  return this ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME context ) NAME context ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_2 . METHOD_2 ( context , STRING_1 , VAR_2 ) . METHOD_3 ( ) )  TYPE_2 . METHOD_2 ( context , STRING_1 , VAR_2 ) . METHOD_3 ( ) ( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_4 ) RETURN TYPE_4 ( NAME METHOD_4 ) NAME METHOD_4 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_5 . METHOD_5 ( context , VAR_1 , VAR_4 ) )  TYPE_5 . METHOD_5 ( context , VAR_1 , VAR_4 ) (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD (  new TYPE_3 < TYPE_4 , TYPE_4 , TYPE_4 > ( ) { protected TYPE_4 METHOD_4 ( TYPE_4 ... VAR_3 ) { TYPE_5 . METHOD_5 ( context , VAR_1 , VAR_4 ) ; return null ; } } . METHOD_6 ( ) )  new TYPE_3 < TYPE_4 , TYPE_4 , TYPE_4 > ( ) { protected TYPE_4 METHOD_4 ( TYPE_4 ... VAR_3 ) { TYPE_5 . METHOD_5 ( context , VAR_1 , VAR_4 ) ; return null ; } } . METHOD_6 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.lang.String[] ) RETURN java.lang.String[] ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  return new java.lang.String [ ] { STRING_1 , STRING_2 , STRING_3 , STRING_4 , STRING_5 , STRING_6 , STRING_7 , STRING_8 , STRING_9 , STRING_10 , STRING_11 , STRING_12 , STRING_13 , STRING_14 , STRING_15 , STRING_16 , STRING_17 , STRING_18 , STRING_19 , STRING_20 , STRING_21 , STRING_22 , STRING_23 , STRING_24 , STRING_25 , STRING_26 , STRING_27 , VAR_1 } ; )  return new java.lang.String [ ] { STRING_1 , STRING_2 , STRING_3 , STRING_4 , STRING_5 , STRING_6 , STRING_7 , STRING_8 , STRING_9 , STRING_10 , STRING_11 , STRING_12 , STRING_13 , STRING_14 , STRING_15 , STRING_16 , STRING_17 , STRING_18 , STRING_19 , STRING_20 , STRING_21 , STRING_22 , STRING_23 , STRING_24 , STRING_25 , STRING_26 , STRING_27 , VAR_1 } ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  return new TYPE_1 ( name , name , VAR_1 , STRING_1 , STRING_1 , new TYPE_2 [ 0 ] , new TYPE_2 [ 0 ] , new TYPE_3 [ 1 ] , false ) ; )  return new TYPE_1 ( name , name , VAR_1 , STRING_1 , STRING_1 , new TYPE_2 [ 0 ] , new TYPE_2 [ 0 ] , new TYPE_3 [ 1 ] , false ) ; ) THEN THEN ( ELSE ELSE (  return new TYPE_1 ( name , VAR_1 ) ; )  return new TYPE_1 ( name , VAR_1 ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_1 . METHOD_2 ( VAR_1 ) ) INIT = TYPE_1 . METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_4 == null ) COND VAR_4 == null ( THEN THEN (  return 0 ; )  return 0 ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_5 ) NAME VAR_5 ( INIT = new TYPE_2 ( VAR_4 . METHOD_3 ( ) , TYPE_3 . METHOD_4 ( VAR_2 ) , TYPE_3 . METHOD_4 ( VAR_3 ) ) ) INIT = new TYPE_2 ( VAR_4 . METHOD_3 ( ) , TYPE_3 . METHOD_4 ( VAR_2 ) , TYPE_3 . METHOD_4 ( VAR_3 ) ) ) VAR VAR (  return VAR_6 . METHOD_5 ( VAR_5 ) ; )  return VAR_6 . METHOD_5 ( VAR_5 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME status ) NAME status ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_2 = new java.util.ArrayList < TYPE_5 > ( ) )  VAR_2 = new java.util.ArrayList < TYPE_5 > ( ) ( TRY TRY ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( STRING_1 , 5 ) )  VAR_1 . METHOD_2 ( STRING_1 , 5 ) (  VAR_3 . METHOD_3 ( ) )  VAR_3 . METHOD_3 ( ) (  VAR_4 . METHOD_3 ( ) )  VAR_4 . METHOD_3 ( ) ( VAR VAR ( TYPE java.util.List<TYPE_5> ) TYPE java.util.List<TYPE_5> ( NAME VAR_5 ) NAME VAR_5 ( INIT = METHOD_4 ( ) ) INIT = METHOD_4 ( ) ) VAR VAR (  VAR_2 . METHOD_5 ( VAR_5 ) )  VAR_2 . METHOD_5 ( VAR_5 ) (  VAR_1 . METHOD_6 ( 1 ) )  VAR_1 . METHOD_6 ( 1 ) ) BLOCK BLOCK ( FINALLY FINALLY (  VAR_1 . METHOD_7 ( ) )  VAR_1 . METHOD_7 ( ) ) FINALLY FINALLY ) TRY TRY (  return status ; )  return status ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER synchronized ) MODIFIER synchronized ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  log ( STRING_1 ) )  log ( STRING_1 ) ( IF IF ( COND ! ( METHOD_2 ( ) ) ) COND ! ( METHOD_2 ( ) ) ( THEN THEN (  android.util.Log.w ( VAR_1 . TAG , STRING_2 ) )  android.util.Log.w ( VAR_1 . TAG , STRING_2 ) (  return false ; )  return false ; ) THEN THEN ) IF IF (  METHOD_3 ( new TYPE_1 ( 0 , 0 , VAR_2 , STRING_3 , 0 ) , true ) )  METHOD_3 ( new TYPE_1 ( 0 , 0 , VAR_2 , STRING_3 , 0 ) , true ) (  METHOD_4 ( false ) )  METHOD_4 ( false ) (  log ( STRING_4 ) )  log ( STRING_4 ) (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME key ) NAME key ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND key . METHOD_2 ( STRING_1 ) ) COND key . METHOD_2 ( STRING_1 ) ( THEN THEN ) THEN THEN ( ELSE ELSE ( IF IF ( COND key . METHOD_2 ( STRING_2 ) ) COND key . METHOD_2 ( STRING_2 ) ( THEN THEN ( IF IF ( COND ! ( VAR_2 . METHOD_3 ( VAR_3 ) ) ) COND ! ( VAR_2 . METHOD_3 ( VAR_3 ) ) ( THEN THEN (  return VAR_4 ; )  return VAR_4 ; ) THEN THEN ) IF IF ) THEN THEN ( ELSE ELSE (  type = key . toString ( ) )  type = key . toString ( ) (  return VAR_5 ; )  return VAR_5 ; ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<TYPE_1> ) TYPE java.util.ArrayList<TYPE_1> ( NAME VAR_3 ) NAME VAR_3 ( INIT = new java.util.ArrayList < TYPE_1 > ( ) ) INIT = new java.util.ArrayList < TYPE_1 > ( ) ) VAR VAR ( SYNCHRONIZED SYNCHRONIZED (  VAR_4 )  VAR_4 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_5 ) NAME VAR_5 ( INIT = METHOD_2 ( VAR_1 , VAR_2 , STRING_1 ) ) INIT = METHOD_2 ( VAR_1 , VAR_2 , STRING_1 ) ) VAR VAR ( IF IF ( COND VAR_5 != null ) COND VAR_5 != null ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE TYPE_4<android.os.Bundle,TYPE_5> ) TYPE TYPE_4<android.os.Bundle,TYPE_5> ( NAME item ) NAME item ( IN VAR_6 ) IN VAR_6 ( BLOCK BLOCK (  VAR_3 . METHOD_3 ( new TYPE_1 ( VAR_1 , VAR_2 , VAR_7 , VAR_8 ) ) )  VAR_3 . METHOD_3 ( new TYPE_1 ( VAR_1 , VAR_2 , VAR_7 , VAR_8 ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_3 . METHOD_2 ( VAR_4 , new TYPE_2 ( VAR_5 ) ) )  VAR_3 . METHOD_2 ( VAR_4 , new TYPE_2 ( VAR_5 ) ) ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  VAR_1 = ! ( METHOD_3 ( ) ) )  VAR_1 = ! ( METHOD_3 ( ) ) ) THEN THEN ) IF IF ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  VAR_6 . METHOD_4 ( ) )  VAR_6 . METHOD_4 ( ) ) THEN THEN ( ELSE ELSE (  METHOD_5 ( ) )  METHOD_5 ( ) (  VAR_6 . METHOD_6 ( ) )  VAR_6 . METHOD_6 ( ) ) ELSE ELSE ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN long ) RETURN long ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_5 ) NAME VAR_5 ( INIT = METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ) INIT = METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ) VAR VAR ( IF IF ( COND VAR_5 == ( VAR_6 ) ) COND VAR_5 == ( VAR_6 ) ( THEN THEN (  return - 1 ; )  return - 1 ; ) THEN THEN ( ELSE ELSE ( IF IF ( COND VAR_5 == ( - 1 ) ) COND VAR_5 == ( - 1 ) ( THEN THEN (  VAR_5 = METHOD_3 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) )  VAR_5 = METHOD_3 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ( IF IF ( COND VAR_5 == ( VAR_6 ) ) COND VAR_5 == ( VAR_6 ) ( THEN THEN (  return - 1 ; )  return - 1 ; ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF (  return VAR_5 ; )  return VAR_5 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN android.content.Intent ) RETURN android.content.Intent ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_2 ) == null ) COND ( VAR_2 ) == null ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_2 . get ( VAR_1 ) ) INIT = VAR_2 . get ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE android.content.Intent ) TYPE android.content.Intent ( NAME VAR_4 ) NAME VAR_4 ( INIT = new android.content.Intent ( ( ( VAR_5 ) != null ? VAR_5 : VAR_6 ) ) ) INIT = new android.content.Intent ( ( ( VAR_5 ) != null ? VAR_5 : VAR_6 ) ) ) VAR VAR (  VAR_4 . METHOD_2 ( ( ( VAR_7 ) | ( VAR_8 ) ) ) )  VAR_4 . METHOD_2 ( ( ( VAR_7 ) | ( VAR_8 ) ) ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_9 ) NAME VAR_9 ( INIT = VAR_10 ) INIT = VAR_10 ) VAR VAR (  VAR_4 . METHOD_3 ( new TYPE_3 ( VAR_11 . packageName , VAR_9 . name ) ) )  VAR_4 . METHOD_3 ( new TYPE_3 ( VAR_11 . packageName , VAR_9 . name ) ) (  return VAR_4 ; )  return VAR_4 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_6 ) NAME VAR_6 ) VAR VAR ( IF IF ( COND VAR_3 != null ) COND VAR_3 != null ( THEN THEN (  VAR_3 . METHOD_2 ( ) )  VAR_3 . METHOD_2 ( ) (  VAR_5 = VAR_7 )  VAR_5 = VAR_7 ) THEN THEN ( ELSE ELSE (  VAR_5 = 0 )  VAR_5 = 0 ) ELSE ELSE ) IF IF ( IF IF ( COND VAR_4 != null ) COND VAR_4 != null ( THEN THEN (  VAR_4 . METHOD_2 ( ) )  VAR_4 . METHOD_2 ( ) (  VAR_6 = VAR_8 )  VAR_6 = VAR_8 ) THEN THEN ( ELSE ELSE (  VAR_6 = 0 )  VAR_6 = 0 ) ELSE ELSE ) IF IF (  TYPE_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_5 , VAR_6 , VAR_9 , VAR_10 ) ) )  TYPE_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_5 , VAR_6 , VAR_9 , VAR_10 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_1 ( VAR_2 ) ) INIT = TYPE_1 . METHOD_1 ( VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME s ) NAME s ( INIT = new TYPE_2 ( VAR_1 ) ) INIT = new TYPE_2 ( VAR_1 ) ) VAR VAR (  VAR_1 . METHOD_2 ( VAR_3 ) )  VAR_1 . METHOD_2 ( VAR_3 ) (  s . METHOD_3 ( ) )  s . METHOD_3 ( ) (  VAR_1 . METHOD_4 ( ) )  VAR_1 . METHOD_4 ( ) (  METHOD_5 ( ) )  METHOD_5 ( ) (  VAR_1 . METHOD_6 ( ) )  VAR_1 . METHOD_6 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 . METHOD_2 ( ) ) COND VAR_1 . METHOD_2 ( ) ( THEN THEN (  throw new TYPE_1 ( STRING_1 , VAR_1 ) ; )  throw new TYPE_1 ( STRING_1 , VAR_1 ) ; ) THEN THEN ) IF IF ( IF IF ( COND VAR_1 . METHOD_3 ( ) ) COND VAR_1 . METHOD_3 ( ) ( THEN THEN ( IF IF ( COND ( VAR_1 . METHOD_4 ( ) ) == false ) COND ( VAR_1 . METHOD_4 ( ) ) == false ( THEN THEN (  throw new TYPE_1 ( STRING_2 , VAR_1 ) ; )  throw new TYPE_1 ( STRING_2 , VAR_1 ) ; ) THEN THEN ) IF IF ) THEN THEN ( ELSE ELSE (  throw new TYPE_2 ( java.lang.String.format ( STRING_3 , VAR_1 ) ) ; )  throw new TYPE_2 ( java.lang.String.format ( STRING_3 , VAR_1 ) ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME context ) NAME context ( INIT = TYPE_2 . METHOD_2 ( VAR_1 class ) ) INIT = TYPE_2 . METHOD_2 ( VAR_1 class ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_2 ( VAR_3 class ) ) INIT = TYPE_2 . METHOD_2 ( VAR_3 class ) ) VAR VAR (  TYPE_2 . when ( context . METHOD_3 ( ) ) . thenReturn ( VAR_4 ) )  TYPE_2 . when ( context . METHOD_3 ( ) ) . thenReturn ( VAR_4 ) (  TYPE_2 . when ( context . METHOD_4 ( VAR_5 ) ) . thenReturn ( VAR_6 ) )  TYPE_2 . when ( context . METHOD_4 ( VAR_5 ) ) . thenReturn ( VAR_6 ) (  return context ; )  return context ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE short ) TYPE short ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE short ) TYPE short ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( ) . METHOD_3 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) )  METHOD_2 ( ) . METHOD_3 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME error ) NAME error ( INIT = new byte [ 2 ] ) INIT = new byte [ 2 ] ) VAR VAR (  error [ 0 ] = ( ( byte ) ( VAR_1 ) ) )  error [ 0 ] = ( ( byte ) ( VAR_1 ) ) (  error [ 1 ] = ( ( byte ) ( VAR_2 ) ) )  error [ 1 ] = ( ( byte ) ( VAR_2 ) ) (  METHOD_4 ( VAR_5 , error , 0 , 2 ) )  METHOD_4 ( VAR_5 , error , 0 , 2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_2 . METHOD_2 ( VAR_1 ) ) INIT = TYPE_2 . METHOD_2 ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_1 . METHOD_3 ( 0 , VAR_3 ) ) INIT = VAR_1 . METHOD_3 ( 0 , VAR_3 ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_5 ) NAME VAR_5 ( INIT = null ) INIT = null ) VAR VAR ( IF IF ( COND VAR_3 < ( VAR_1 . length ( ) ) ) COND VAR_3 < ( VAR_1 . length ( ) ) ( THEN THEN (  VAR_5 = VAR_1 . METHOD_3 ( VAR_3 , VAR_1 . length ( ) ) )  VAR_5 = VAR_1 . METHOD_3 ( VAR_3 , VAR_1 . length ( ) ) ) THEN THEN ) IF IF (  return new TYPE_1 ( VAR_4 , VAR_5 , VAR_2 ) ; )  return new TYPE_1 ( VAR_4 , VAR_5 , VAR_2 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( ! ( METHOD_2 ( ) ) ) || ( ! ( METHOD_3 ( ) ) ) ) COND ( ! ( METHOD_2 ( ) ) ) || ( ! ( METHOD_3 ( ) ) ) ( THEN THEN (  TYPE_1 . METHOD_4 ( VAR_1 , STRING_1 ) )  TYPE_1 . METHOD_4 ( VAR_1 , STRING_1 ) (  return ; )  return ; ) THEN THEN ) IF IF (  METHOD_5 ( VAR_2 , VAR_3 ) )  METHOD_5 ( VAR_2 , VAR_3 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_6 ( VAR_2 ) ) INIT = METHOD_6 ( VAR_2 ) ) VAR VAR (  METHOD_7 ( VAR_2 , VAR_5 ) )  METHOD_7 ( VAR_2 , VAR_5 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_6 ) NAME VAR_6 ( INIT = METHOD_6 ( VAR_2 ) ) INIT = METHOD_6 ( VAR_2 ) ) VAR VAR (  TYPE_3 . METHOD_8 ( VAR_4 , VAR_6 ) )  TYPE_3 . METHOD_8 ( VAR_4 , VAR_6 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME toString ) NAME toString ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME b ) NAME b ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  return ( ( VAR_1 ) == ( VAR_2 ) ? TYPE_2 . METHOD_1 ( b , VAR_1 , false ) : TYPE_2 . METHOD_1 ( TYPE_2 . METHOD_1 ( b , VAR_1 , false ) . append ( CHAR_1 ) , VAR_2 , false ) ) . toString ( ) ; )  return ( ( VAR_1 ) == ( VAR_2 ) ? TYPE_2 . METHOD_1 ( b , VAR_1 , false ) : TYPE_2 . METHOD_1 ( TYPE_2 . METHOD_1 ( b , VAR_1 , false ) . append ( CHAR_1 ) , VAR_2 , false ) ) . toString ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_1 = METHOD_2 ( ) . get ( 2 , VAR_2 ) )  VAR_1 = METHOD_2 ( ) . get ( 2 , VAR_2 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME expected ) NAME expected ( BLOCK BLOCK (  return ; )  return ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ( IF IF ( COND ( VAR_1 != null ) && ( ( VAR_1 . length ) > 0 ) ) COND ( VAR_1 != null ) && ( ( VAR_1 . length ) > 0 ) ( THEN THEN (  fail ( ( ( ( STRING_1 + ( VAR_1 . length ) ) + STRING_2 ) + ( new java.lang.String ( VAR_1 , STRING_3 ) ) ) ) )  fail ( ( ( ( STRING_1 + ( VAR_1 . length ) ) + STRING_2 ) + ( new java.lang.String ( VAR_1 , STRING_3 ) ) ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public final ) MODIFIER public final ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE char ) TYPE char ( NAME x ) NAME x ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  throw new TYPE_2 ( ) ; )  throw new TYPE_2 ( ) ; ) THEN THEN ) IF IF ( IF IF ( COND ! ( VAR_2 ) ) COND ! ( VAR_2 ) ( THEN THEN (  throw new TYPE_3 ( STRING_1 ) ; )  throw new TYPE_3 ( STRING_1 ) ; ) THEN THEN ) IF IF (  METHOD_1 ( METHOD_2 ( METHOD_3 ( VAR_3 ) ) , x ) )  METHOD_1 ( METHOD_2 ( METHOD_3 ( VAR_3 ) ) , x ) (  return this ; )  return this ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < ( VAR_2 ) ) COND i < ( VAR_2 ) ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 [ i ] ) INIT = VAR_4 [ i ] ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_6 [ i ] ) INIT = VAR_6 [ i ] ) VAR VAR ( IF IF ( COND ( ( VAR_3 != null ) && ( VAR_5 != null ) ) && ( ( VAR_3 . METHOD_1 ( VAR_5 ) ) == false ) ) COND ( ( VAR_3 != null ) && ( VAR_5 != null ) ) && ( ( VAR_3 . METHOD_1 ( VAR_5 ) ) == false ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR FOR (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.Map<java.lang.String,TYPE_1> ) RETURN java.util.Map<java.lang.String,TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( IF IF ( COND VAR_3 ) COND VAR_3 ( THEN THEN (  VAR_2 = VAR_1 )  VAR_2 = VAR_1 ) THEN THEN ( ELSE ELSE (  VAR_2 = METHOD_2 ( VAR_1 ) )  VAR_2 = METHOD_2 ( VAR_1 ) ) ELSE ELSE ) IF IF ( VAR VAR ( TYPE java.util.Map<java.lang.String,TYPE_1> ) TYPE java.util.Map<java.lang.String,TYPE_1> ( NAME VAR_4 ) NAME VAR_4 ( INIT = new java.util.HashMap < > ( ) ) INIT = new java.util.HashMap < > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME config ) NAME config ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK (  VAR_4 . METHOD_3 ( config . METHOD_4 ( true ) , config ) )  VAR_4 . METHOD_3 ( config . METHOD_4 ( true ) , config ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_4 ; )  return VAR_4 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME method ) NAME method ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = method . METHOD_2 ( ) ) INIT = method . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = method . METHOD_3 ( ) . METHOD_4 ( STRING_1 , STRING_2 ) ) INIT = method . METHOD_3 ( ) . METHOD_4 ( STRING_1 , STRING_2 ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( VAR_2 + STRING_2 ) + VAR_1 ) INIT = ( VAR_2 + STRING_2 ) + VAR_1 ) VAR VAR (  TYPE_2 . METHOD_5 ( VAR_3 , null ) )  TYPE_2 . METHOD_5 ( VAR_3 , null ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.io.File ( STRING_1 ) ) INIT = new java.io.File ( STRING_1 ) ) VAR VAR (  assertTrue ( VAR_1 . METHOD_2 ( ) ) )  assertTrue ( VAR_1 . METHOD_2 ( ) ) (  assertTrue ( VAR_1 . METHOD_3 ( ) ) )  assertTrue ( VAR_1 . METHOD_3 ( ) ) (  assertFalse ( VAR_1 . METHOD_4 ( ) ) )  assertFalse ( VAR_1 . METHOD_4 ( ) ) (  assertTrue ( VAR_1 . METHOD_5 ( ) ) )  assertTrue ( VAR_1 . METHOD_5 ( ) ) (  TYPE_1 . METHOD_6 ( VAR_1 , STRING_2 ) )  TYPE_1 . METHOD_6 ( VAR_1 , STRING_2 ) (  TYPE_1 . METHOD_7 ( VAR_1 , STRING_2 ) )  TYPE_1 . METHOD_7 ( VAR_1 , STRING_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME args ) NAME args ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  TYPE_3 . METHOD_2 ( VAR_2 class . METHOD_3 ( ) , new java.lang.Class < ? > [ ] { VAR_3 class , VAR_4 class } , VAR_1 ) )  TYPE_3 . METHOD_2 ( VAR_2 class . METHOD_3 ( ) , new java.lang.Class < ? > [ ] { VAR_3 class , VAR_4 class } , VAR_1 ) (  VAR_5 . println ( STRING_1 ) )  VAR_5 . println ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.IllegalArgumentException ) TYPE java.lang.IllegalArgumentException ( NAME VAR_6 ) NAME VAR_6 ( BLOCK BLOCK (  java.lang.System.out.println ( STRING_2 ) )  java.lang.System.out.println ( STRING_2 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME address ) NAME address ( INIT = VAR_2 . METHOD_2 ( VAR_1 ) ) INIT = VAR_2 . METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND address != null ) COND address != null ( THEN THEN (  VAR_2 . METHOD_3 ( ) . METHOD_4 ( address . METHOD_5 ( ) , VAR_3 , VAR_4 ) )  VAR_2 . METHOD_3 ( ) . METHOD_4 ( address . METHOD_5 ( ) , VAR_3 , VAR_4 ) (  VAR_2 . METHOD_6 ( address , STRING_1 , null ) )  VAR_2 . METHOD_6 ( address , STRING_1 , null ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_3 . METHOD_1 ( STRING_1 ) ) INIT = TYPE_3 . METHOD_1 ( STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_1 ( VAR_2 . METHOD_2 ( ) , VAR_1 , VAR_4 , VAR_5 , VAR_6 ) ) INIT = new TYPE_1 ( VAR_2 . METHOD_2 ( ) , VAR_1 , VAR_4 , VAR_5 , VAR_6 ) ) VAR VAR (  VAR_1 . METHOD_3 ( new TYPE_4 ( VAR_3 ) ) )  VAR_1 . METHOD_3 ( new TYPE_4 ( VAR_3 ) ) (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_5 ( e ) ; )  throw new TYPE_5 ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<TYPE_2> ) RETURN TYPE_1<TYPE_2> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3[] ) TYPE TYPE_3[] ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_1 ( ) ) INIT = VAR_2 . METHOD_1 ( ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME count ) NAME count ( INIT = VAR_1 . length ) INIT = VAR_1 . length ) VAR VAR ( IF IF ( COND count > 0 ) COND count > 0 ( THEN THEN ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME result ) NAME result ( INIT = TYPE_4 . METHOD_2 ( count ) ) INIT = TYPE_4 . METHOD_2 ( count ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  result . METHOD_3 ( new TYPE_5 ( VAR_3 ) ) )  result . METHOD_3 ( new TYPE_5 ( VAR_3 ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return result ; )  return result ; ) THEN THEN ) IF IF (  return TYPE_6 . METHOD_4 ( ) ; )  return TYPE_6 . METHOD_4 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( name ) ) INIT = TYPE_2 . METHOD_2 ( name ) ) VAR VAR ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  VAR_1 = TYPE_3 . METHOD_2 ( name ) )  VAR_1 = TYPE_3 . METHOD_2 ( name ) ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  VAR_1 = TYPE_4 . METHOD_2 ( name ) )  VAR_1 = TYPE_4 . METHOD_2 ( name ) ) THEN THEN ) IF IF ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  VAR_1 = TYPE_5 . METHOD_2 ( name ) )  VAR_1 = TYPE_5 . METHOD_2 ( name ) ) THEN THEN ) IF IF ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  VAR_1 = TYPE_6 . METHOD_2 ( name ) )  VAR_1 = TYPE_6 . METHOD_2 ( name ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_2 ( VAR_1 ) ) INIT = METHOD_2 ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_5 ) NAME VAR_5 ( INIT = METHOD_3 ( VAR_2 , VAR_4 . METHOD_4 ( ) ) ) INIT = METHOD_3 ( VAR_2 , VAR_4 . METHOD_4 ( ) ) ) VAR VAR (  assertTrue ( java.lang.String.format ( STRING_1 , VAR_2 ) , ( VAR_5 > 0 ) ) )  assertTrue ( java.lang.String.format ( STRING_1 , VAR_2 ) , ( VAR_5 > 0 ) ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME call ) NAME call ( INIT = VAR_4 . METHOD_5 ( VAR_5 ) ) INIT = VAR_4 . METHOD_5 ( VAR_5 ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_6 ) NAME VAR_6 ( INIT = call . format ( new TYPE_3 ( VAR_4 . METHOD_6 ( ) ) ) ) INIT = call . format ( new TYPE_3 ( VAR_4 . METHOD_6 ( ) ) ) ) VAR VAR (  assertEquals ( VAR_3 , VAR_6 ) )  assertEquals ( VAR_3 , VAR_6 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME project ) NAME project ) VAR VAR ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_3 ) NAME VAR_3 ( INIT = project . METHOD_2 ( VAR_1 ) ) INIT = project . METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND ( VAR_3 . METHOD_3 ( ) ) == false ) COND ( VAR_3 . METHOD_3 ( ) ) == false ( THEN THEN ( VAR VAR ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_6 ( source ) ) INIT = new TYPE_6 ( source ) ) VAR VAR (  VAR_3 . METHOD_4 ( VAR_4 , false , new TYPE_7 ( VAR_2 , 10 ) ) )  VAR_3 . METHOD_4 ( VAR_4 , false , new TYPE_7 ( VAR_2 , 10 ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME version ) NAME version ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_5 ) == false ) COND ( VAR_5 ) == false ( THEN THEN (  throw new java.lang.RuntimeException ( ( ( VAR_6 . TAG ) + STRING_1 ) ) ; )  throw new java.lang.RuntimeException ( ( ( VAR_6 . TAG ) + STRING_1 ) ) ; ) THEN THEN ) IF IF (  return METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , version , VAR_4 ) ; )  return METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , version , VAR_4 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( null ) )  TYPE_1 . METHOD_2 ( null ) (  TYPE_2 . METHOD_2 ( null ) )  TYPE_2 . METHOD_2 ( null ) (  TYPE_3 . METHOD_3 ( STRING_1 ) )  TYPE_3 . METHOD_3 ( STRING_1 ) (  TYPE_3 . METHOD_3 ( STRING_2 ) )  TYPE_3 . METHOD_3 ( STRING_2 ) (  TYPE_3 . METHOD_3 ( STRING_3 ) )  TYPE_3 . METHOD_3 ( STRING_3 ) (  TYPE_3 . METHOD_3 ( STRING_4 ) )  TYPE_3 . METHOD_3 ( STRING_4 ) (  TYPE_3 . METHOD_3 ( STRING_5 ) )  TYPE_3 . METHOD_3 ( STRING_5 ) (  TYPE_3 . METHOD_3 ( STRING_6 ) )  TYPE_3 . METHOD_3 ( STRING_6 ) (  server . METHOD_4 ( ) )  server . METHOD_4 ( ) ( IF IF ( COND ( VAR_1 ) != null ) COND ( VAR_1 ) != null ( THEN THEN (  VAR_1 . METHOD_5 ( ) . METHOD_6 ( ) )  VAR_1 . METHOD_5 ( ) . METHOD_6 ( ) ) THEN THEN ) IF IF (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_2 ( STRING_1 , STRING_2 ) ) INIT = TYPE_2 . METHOD_2 ( STRING_1 , STRING_2 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_3 . METHOD_3 ( TYPE_3 . getName ( ) , VAR_2 . METHOD_4 ( ) ) )  VAR_3 . METHOD_3 ( TYPE_3 . getName ( ) , VAR_2 . METHOD_4 ( ) ) (  VAR_3 . METHOD_3 ( TYPE_4 . getName ( ) , STRING_3 ) )  VAR_3 . METHOD_3 ( TYPE_4 . getName ( ) , STRING_3 ) (  VAR_3 . METHOD_3 ( TYPE_5 . getName ( ) , STRING_3 ) )  VAR_3 . METHOD_3 ( TYPE_5 . getName ( ) , STRING_3 ) (  VAR_3 . METHOD_3 ( TYPE_6 . getName ( ) , VAR_1 . METHOD_5 ( ) ) )  VAR_3 . METHOD_3 ( TYPE_6 . getName ( ) , VAR_1 . METHOD_5 ( ) ) (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( null == VAR_1 ) || ( VAR_1 . equals ( STRING_1 ) ) ) COND ( null == VAR_1 ) || ( VAR_1 . equals ( STRING_1 ) ) ( THEN THEN (  throw new java.lang.IllegalArgumentException ( ( ( STRING_2 + VAR_1 ) + STRING_3 ) ) ; )  throw new java.lang.IllegalArgumentException ( ( ( STRING_2 + VAR_1 ) + STRING_3 ) ) ; ) THEN THEN ( ELSE ELSE ( IF IF ( COND ( VAR_2 ) == ( METHOD_2 ( ) ) ) COND ( VAR_2 ) == ( METHOD_2 ( ) ) ( THEN THEN (  throw new TYPE_1 ( STRING_4 ) ; )  throw new TYPE_1 ( STRING_4 ) ; ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF (  METHOD_3 ( VAR_3 , VAR_1 ) )  METHOD_3 ( VAR_3 , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.lang.Class<?> ) RETURN java.lang.Class<?> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) == null ) COND ( VAR_1 ) == null ( THEN THEN ( VAR VAR ( TYPE TYPE_2[] ) TYPE TYPE_2[] ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  VAR_1 = new TYPE_3 ( VAR_2 , this ) )  VAR_1 = new TYPE_3 ( VAR_2 , this ) ) THEN THEN ) IF IF ( TRY TRY ( BLOCK BLOCK (  VAR_3 = true )  VAR_3 = true (  return VAR_1 . METHOD_3 ( name ) ; )  return VAR_1 . METHOD_3 ( name ) ; ) BLOCK BLOCK ( FINALLY FINALLY (  VAR_3 = false )  VAR_3 = false ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME value ) NAME value ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( ) )  VAR_1 . METHOD_2 ( ) (  TYPE_1 . METHOD_3 ( id ) )  TYPE_1 . METHOD_3 ( id ) (  TYPE_1 . METHOD_4 ( ) . METHOD_5 ( TYPE_1 . METHOD_6 ( id , VAR_2 ) , value ) )  TYPE_1 . METHOD_4 ( ) . METHOD_5 ( TYPE_1 . METHOD_6 ( id , VAR_2 ) , value ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Throwable ) TYPE java.lang.Throwable ( NAME e ) NAME e ( BLOCK BLOCK (  throw TYPE_2 . METHOD_7 ( e ) ; )  throw TYPE_2 . METHOD_7 ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ( FINALLY FINALLY (  VAR_1 . METHOD_8 ( ) )  VAR_1 . METHOD_8 ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME e ) NAME e ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_2 . METHOD_2 ( STRING_1 , STRING_2 ) )  TYPE_2 . METHOD_2 ( STRING_1 , STRING_2 ) ( IF IF ( COND TYPE_3 . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) ) COND TYPE_3 . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) ( THEN THEN (  e . data = METHOD_5 ( ) )  e . data = METHOD_5 ( ) (  return ; )  return ; ) THEN THEN ) IF IF ( IF IF ( COND TYPE_4 . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) ) COND TYPE_4 . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) ( THEN THEN (  TYPE_2 . METHOD_2 ( STRING_1 , STRING_3 ) )  TYPE_2 . METHOD_2 ( STRING_1 , STRING_3 ) (  e . data = VAR_2 )  e . data = VAR_2 (  return ; )  return ; ) THEN THEN ) IF IF (  VAR_3 = VAR_4 )  VAR_3 = VAR_4 (  VAR_5 = false )  VAR_5 = false ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME address ) NAME address ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_2 . METHOD_1 ( fd , address , VAR_1 ) )  TYPE_2 . METHOD_1 ( fd , address , VAR_1 ) (  this . address = address )  this . address = address ( IF IF ( COND VAR_1 != 0 ) COND VAR_1 != 0 ( THEN THEN (  this . VAR_2 = VAR_1 )  this . VAR_2 = VAR_1 ) THEN THEN ( ELSE ELSE (  this . VAR_2 = TYPE_2 . METHOD_2 ( fd ) )  this . VAR_2 = TYPE_2 . METHOD_2 ( fd ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_2 . METHOD_2 ( ) ) ) COND ! ( VAR_2 . METHOD_2 ( ) ) ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_5 ) NAME VAR_5 ( INIT = TYPE_5 . METHOD_3 ( VAR_2 ) ) INIT = TYPE_5 . METHOD_3 ( VAR_2 ) ) VAR VAR (  return new TYPE_1 ( VAR_1 , VAR_5 . METHOD_4 ( VAR_3 , VAR_4 ) ) ; )  return new TYPE_1 ( VAR_1 , VAR_5 . METHOD_4 ( VAR_3 , VAR_4 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  VAR_2 . METHOD_3 ( ) )  VAR_2 . METHOD_3 ( ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND ! ( METHOD_4 ( ) ) ) COND ! ( METHOD_4 ( ) ) ( THEN THEN (  VAR_1 . METHOD_5 ( false , 0 ) )  VAR_1 . METHOD_5 ( false , 0 ) (  VAR_2 . METHOD_3 ( ) )  VAR_2 . METHOD_3 ( ) ) THEN THEN ( ELSE ELSE ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 . METHOD_6 ( ) ) INIT = VAR_4 . METHOD_6 ( ) ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_5 ) NAME VAR_5 ( INIT = ( TYPE_2 . METHOD_7 ( ) ) - VAR_3 ) INIT = ( TYPE_2 . METHOD_7 ( ) ) - VAR_3 ) VAR VAR (  VAR_1 . METHOD_5 ( true , VAR_5 ) )  VAR_1 . METHOD_5 ( true , VAR_5 ) ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( METHOD_2 ( ) ) == false ) COND ( METHOD_2 ( ) ) == false ( THEN THEN (  android.util.Log.e ( android.bluetooth.BluetoothDevice . TAG , STRING_1 ) )  android.util.Log.e ( android.bluetooth.BluetoothDevice . TAG , STRING_1 ) (  throw new java.io.IOException ( ) ; )  throw new java.io.IOException ( ) ; ) THEN THEN ) IF IF (  return new TYPE_1 ( VAR_1 , ( - 1 ) , true , true , this , ( - 1 ) , null ) ; )  return new TYPE_1 ( VAR_1 , ( - 1 ) , true , true , this , ( - 1 ) , null ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( 1 , STRING_1 ) )  TYPE_1 . METHOD_2 ( 1 , STRING_1 ) (  TYPE_1 . METHOD_2 ( INT_1 , STRING_2 ) )  TYPE_1 . METHOD_2 ( INT_1 , STRING_2 ) (  TYPE_1 . METHOD_2 ( 1 , STRING_3 ) )  TYPE_1 . METHOD_2 ( 1 , STRING_3 ) (  TYPE_1 . METHOD_2 ( ( ( short ) ( INT_2 ) ) , STRING_4 ) )  TYPE_1 . METHOD_2 ( ( ( short ) ( INT_2 ) ) , STRING_4 ) (  TYPE_1 . METHOD_2 ( ( ( byte ) ( INT_3 ) ) , STRING_5 ) )  TYPE_1 . METHOD_2 ( ( ( byte ) ( INT_3 ) ) , STRING_5 ) (  TYPE_1 . METHOD_2 ( FLOAT_1 , STRING_6 ) )  TYPE_1 . METHOD_2 ( FLOAT_1 , STRING_6 ) (  TYPE_1 . METHOD_2 ( ( - FLOAT_2 ) , STRING_7 ) )  TYPE_1 . METHOD_2 ( ( - FLOAT_2 ) , STRING_7 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME x ) NAME x ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( VAR_3 ) ) INIT = METHOD_2 ( VAR_3 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_2 ( VAR_5 ) ) INIT = METHOD_2 ( VAR_5 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_6 ) NAME VAR_6 ( INIT = new TYPE_5 ( METHOD_3 ( x ) , VAR_4 , VAR_2 ) ) INIT = new TYPE_5 ( METHOD_3 ( x ) , VAR_4 , VAR_2 ) ) VAR VAR (  METHOD_4 ( VAR_6 ) )  METHOD_4 ( VAR_6 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Throwable ) TYPE java.lang.Throwable ( NAME e ) NAME e ( BLOCK BLOCK (  throw METHOD_5 ( x , e ) ; )  throw METHOD_5 ( x , e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND TYPE_1 . METHOD_2 ( VAR_1 ) ) COND TYPE_1 . METHOD_2 ( VAR_1 ) ( THEN THEN ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = 7 - ( VAR_2 / 8 ) ) INIT = 7 - ( VAR_2 / 8 ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_2 % 8 ) INIT = VAR_2 % 8 ) VAR VAR ( IF IF ( COND VAR_3 < ( VAR_1 . length ) ) COND VAR_3 < ( VAR_1 . length ) ( THEN THEN (  return ( ( VAR_1 [ VAR_3 ] ) & ( 1 < < VAR_4 ) ) > 0 ; )  return ( ( VAR_1 [ VAR_3 ] ) & ( 1 < < VAR_4 ) ) > 0 ; ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME key ) NAME key ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME value ) NAME value ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3<TYPE_1,TYPE_2> ) TYPE TYPE_3<TYPE_1,TYPE_2> ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 ) INIT = VAR_4 ) VAR VAR ( IF IF ( COND VAR_3 != ( VAR_5 ) ) COND VAR_3 != ( VAR_5 ) ( THEN THEN ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_6 ) NAME VAR_6 ) VAR VAR (  ( size ) ++ )  ( size ) ++ ( TRY TRY ( BLOCK BLOCK (  VAR_6 = METHOD_2 ( VAR_3 ) )  VAR_6 = METHOD_2 ( VAR_3 ) ) BLOCK BLOCK ( FINALLY FINALLY (  ( size ) -- )  ( size ) -- ) FINALLY FINALLY ) TRY TRY ( IF IF ( COND VAR_6 ) COND VAR_6 ( THEN THEN (  METHOD_3 ( VAR_3 . key ) )  METHOD_3 ( VAR_3 . key ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  super . METHOD_1 ( VAR_1 , key , value , VAR_2 ) )  super . METHOD_1 ( VAR_1 , key , value , VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN char ) RETURN char ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE char ) TYPE char ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME length ) NAME length ( INIT = VAR_1 . length ( ) ) INIT = VAR_1 . length ( ) ) VAR VAR ( IF IF ( COND length == 1 ) COND length == 1 ( THEN THEN (  return VAR_1 . METHOD_2 ( 0 ) ; )  return VAR_1 . METHOD_2 ( 0 ) ; ) THEN THEN ) IF IF ( IF IF ( COND length == 2 ) COND length == 2 ( THEN THEN ( VAR VAR ( TYPE char ) TYPE char ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . METHOD_2 ( 0 ) ) INIT = VAR_1 . METHOD_2 ( 0 ) ) VAR VAR ( IF IF ( COND ( ( VAR_3 == CHAR_1 ) || ( VAR_3 == CHAR_2 ) ) || ( VAR_3 == CHAR_3 ) ) COND ( ( VAR_3 == CHAR_1 ) || ( VAR_3 == CHAR_2 ) ) || ( VAR_3 == CHAR_3 ) ( THEN THEN ) THEN THEN ) IF IF (  return VAR_1 . METHOD_2 ( 1 ) ; )  return VAR_1 . METHOD_2 ( 1 ) ; ) THEN THEN ) IF IF (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE TYPE_3[] ) TYPE TYPE_3[] ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , id , new android.content.Intent ( VAR_1 , VAR_5 class ) . METHOD_3 ( VAR_6 , id ) . METHOD_3 ( VAR_7 , VAR_2 ) . METHOD_3 ( VAR_8 , VAR_3 ) . METHOD_3 ( VAR_9 , VAR_4 ) , null ) ; )  return TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , id , new android.content.Intent ( VAR_1 , VAR_5 class ) . METHOD_3 ( VAR_6 , id ) . METHOD_3 ( VAR_7 , VAR_2 ) . METHOD_3 ( VAR_8 , VAR_3 ) . METHOD_3 ( VAR_9 , VAR_4 ) , null ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME expected ) NAME expected ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME p ) NAME p ( INIT = new TYPE_2 ( null , expected , STRING_1 , STRING_2 , ( - 1 ) , null , null , null , VAR_1 , VAR_2 , VAR_3 ) ) INIT = new TYPE_2 ( null , expected , STRING_1 , STRING_2 , ( - 1 ) , null , null , null , VAR_1 , VAR_2 , VAR_3 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  p . METHOD_3 ( VAR_4 ) )  p . METHOD_3 ( VAR_4 ) (  assertEquals ( expected , VAR_4 ) )  assertEquals ( expected , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_2 ) == ( VAR_3 ) ) COND ( VAR_2 ) == ( VAR_3 ) ( THEN THEN ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_5 . get ( STRING_1 , VAR_1 ) ) INIT = VAR_5 . get ( STRING_1 , VAR_1 ) ) VAR VAR ( IF IF ( COND ! ( VAR_4 . equals ( VAR_1 ) ) ) COND ! ( VAR_4 . equals ( VAR_1 ) ) ( THEN THEN (  return VAR_4 ; )  return VAR_4 ; ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return VAR_5 . get ( STRING_2 , VAR_1 ) ; )  return VAR_5 . get ( STRING_2 , VAR_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ( INIT = false ) INIT = false ) VAR VAR ( IF IF ( COND ! ( VAR_2 . equals ( VAR_3 ) ) ) COND ! ( VAR_2 . equals ( VAR_3 ) ) ( THEN THEN ( TRY TRY ( BLOCK BLOCK (  VAR_4 . METHOD_1 ( ) )  VAR_4 . METHOD_1 ( ) (  VAR_1 = true )  VAR_1 = true ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.NullPointerException ) TYPE java.lang.NullPointerException ( NAME ex ) NAME ex ( BLOCK BLOCK (  loge ( ( ( STRING_1 + ex ) + STRING_2 ) ) )  loge ( ( ( STRING_1 + ex ) + STRING_2 ) ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE java.lang.Class<?> ) TYPE java.lang.Class<?> ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE TYPE_3<java.lang.String> ) TYPE TYPE_3<java.lang.String> ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_6 ) NAME VAR_6 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_7 ) NAME VAR_7 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_8 ) NAME VAR_8 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND METHOD_2 ( VAR_4 ) ) COND METHOD_2 ( VAR_4 ) ( THEN THEN (  return new TYPE_5 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 ) ; )  return new TYPE_5 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 ) ; ) THEN THEN ( ELSE ELSE (  return null ; )  return null ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME x ) NAME x ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  throw new TYPE_2 ( ) ; )  throw new TYPE_2 ( ) ; ) THEN THEN ) IF IF ( IF IF ( COND ! ( VAR_2 ) ) COND ! ( VAR_2 ) ( THEN THEN (  throw new TYPE_3 ( STRING_1 ) ; )  throw new TYPE_3 ( STRING_1 ) ; ) THEN THEN ) IF IF (  METHOD_1 ( METHOD_2 ( METHOD_3 ( VAR_3 ) ) , x ) )  METHOD_1 ( METHOD_2 ( METHOD_3 ( VAR_3 ) ) , x ) (  return this ; )  return this ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 != null ) && ( VAR_2 != ( VAR_3 ) ) ) COND ( VAR_1 != null ) && ( VAR_2 != ( VAR_3 ) ) ( THEN THEN (  VAR_4 . METHOD_1 ( VAR_1 , ( VAR_2 + 1 ) ) )  VAR_4 . METHOD_1 ( VAR_1 , ( VAR_2 + 1 ) ) ) THEN THEN ( ELSE ELSE (  VAR_4 . METHOD_2 ( ) )  VAR_4 . METHOD_2 ( ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME x ) NAME x ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME info ) NAME info ( INIT = METHOD_2 ( x ) ) INIT = METHOD_2 ( x ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_3 ( VAR_3 ) ) INIT = METHOD_3 ( VAR_3 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_4 ) NAME VAR_4 ( INIT = ( ( TYPE_5 ) ( METHOD_4 ( ) . get ( VAR_5 ) ) ) ) INIT = ( ( TYPE_5 ) ( METHOD_4 ( ) . get ( VAR_5 ) ) ) ) VAR VAR (  METHOD_5 ( new TYPE_6 ( info , VAR_4 , VAR_2 ) ) )  METHOD_5 ( new TYPE_6 ( info , VAR_4 , VAR_2 ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Throwable ) TYPE java.lang.Throwable ( NAME e ) NAME e ( BLOCK BLOCK (  throw METHOD_6 ( x , e ) ; )  throw METHOD_6 ( x , e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME key ) NAME key ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_4 = VAR_2 . METHOD_2 ( VAR_5 class ) )  VAR_4 = VAR_2 . METHOD_2 ( VAR_5 class ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_7 ) TYPE TYPE_7 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_4 ( e ) ; )  throw new TYPE_4 ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  METHOD_1 ( VAR_1 , key , VAR_4 , VAR_3 ) )  METHOD_1 ( VAR_1 , key , VAR_4 , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.Integer[] ) TYPE java.lang.Integer[] ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.lang.Integer [ VAR_2 ] ) INIT = new java.lang.Integer [ VAR_2 ] ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < ( ( VAR_2 ) - 1 ) ) COND i < ( ( VAR_2 ) - 1 ) ( UPDATE UPDATE (  ++ i )  ++ i ) UPDATE UPDATE ( BLOCK BLOCK (  VAR_1 [ i ] = new java.lang.Integer ( i ) )  VAR_1 [ i ] = new java.lang.Integer ( i ) ) BLOCK BLOCK ) FOR FOR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_1 ( TYPE_2 . METHOD_2 ( VAR_1 ) ) ) INIT = new TYPE_1 ( TYPE_2 . METHOD_2 ( VAR_1 ) ) ) VAR VAR (  METHOD_3 ( ) )  METHOD_3 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.NullPointerException ) TYPE java.lang.NullPointerException ( NAME VAR_4 ) NAME VAR_4 ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public final ) MODIFIER public final ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_2 ) != ( VAR_3 ) ) COND ( VAR_2 ) != ( VAR_3 ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( IF IF ( COND VAR_1 . METHOD_2 ( this ) ) COND VAR_1 . METHOD_2 ( this ) ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME value ) NAME value ( IN METHOD_3 ( ) ) IN METHOD_3 ( ) ( BLOCK BLOCK ( IF IF ( COND value instanceof TYPE_2 ) COND value instanceof TYPE_2 ( THEN THEN (  ( ( TYPE_2 ) ( value ) ) . METHOD_1 ( VAR_1 ) )  ( ( TYPE_2 ) ( value ) ) . METHOD_1 ( VAR_1 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  VAR_1 . METHOD_4 ( this ) )  VAR_1 . METHOD_4 ( this ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  VAR_2 = VAR_1 . METHOD_1 ( VAR_3 , new TYPE_2 ( ) , null ) )  VAR_2 = VAR_1 . METHOD_1 ( VAR_3 , new TYPE_2 ( ) , null ) (  return true ; )  return true ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK (  TYPE_4 . METHOD_2 ( VAR_4 , ( STRING_1 + ( e . METHOD_3 ( ) ) ) , VAR_5 ) . METHOD_4 ( ) )  TYPE_4 . METHOD_2 ( VAR_4 , ( STRING_1 + ( e . METHOD_3 ( ) ) ) , VAR_5 ) . METHOD_4 ( ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME a ) NAME a ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME b ) NAME b ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int[] ) TYPE int[] ( NAME values ) NAME values ( INIT = new int [ ] { a , b } ) INIT = new int [ ] { a , b } ) VAR VAR (  VAR_1 . println ( ( ( STRING_1 + ( TYPE_1 . toString ( values ) ) ) + STRING_2 ) ) )  VAR_1 . println ( ( ( STRING_1 + ( TYPE_1 . toString ( values ) ) ) + STRING_2 ) ) (  return a > b ? a : b ; )  return a > b ? a : b ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_6 ) NAME VAR_6 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_7 ) NAME VAR_7 ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_8 ) NAME VAR_8 ) VAR VAR ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_9 ) NAME VAR_9 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_10 ) NAME VAR_10 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return new TYPE_6 ( source , VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 , VAR_8 , VAR_9 , VAR_10 ) ; )  return new TYPE_6 ( source , VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 , VAR_8 , VAR_9 , VAR_10 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . get ( VAR_4 , STRING_1 ) ) INIT = VAR_1 . get ( VAR_4 , STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2<java.lang.String> ) TYPE TYPE_2<java.lang.String> ( NAME VAR_5 ) NAME VAR_5 ( INIT = new TYPE_3 < java.lang.String > ( ) ) INIT = new TYPE_3 < java.lang.String > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_6 ) NAME VAR_6 ( IN VAR_3 . METHOD_2 ( VAR_7 ) ) IN VAR_3 . METHOD_2 ( VAR_7 ) ( BLOCK BLOCK (  VAR_5 . METHOD_3 ( VAR_6 ) )  VAR_5 . METHOD_3 ( VAR_6 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  VAR_5 . METHOD_4 ( VAR_2 ) )  VAR_5 . METHOD_4 ( VAR_2 ) ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_8 ) NAME VAR_8 ( INIT = TYPE_4 . on ( VAR_7 ) ) INIT = TYPE_4 . on ( VAR_7 ) ) VAR VAR (  VAR_1 . METHOD_5 ( VAR_4 , VAR_8 . METHOD_6 ( VAR_5 ) ) )  VAR_1 . METHOD_5 ( VAR_4 , VAR_8 . METHOD_6 ( VAR_5 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( VAR_2 , false ) )  VAR_1 . METHOD_2 ( VAR_2 , false ) (  VAR_1 . METHOD_3 ( true ) )  VAR_1 . METHOD_3 ( true ) (  VAR_1 . METHOD_3 ( false ) )  VAR_1 . METHOD_3 ( false ) (  org.junit.Assert.assertEquals ( VAR_2 , VAR_1 . METHOD_4 ( ) ) )  org.junit.Assert.assertEquals ( VAR_2 , VAR_1 . METHOD_4 ( ) ) (  VAR_1 . METHOD_5 ( ) )  VAR_1 . METHOD_5 ( ) (  org.junit.Assert.assertEquals ( VAR_2 , VAR_1 . METHOD_4 ( ) ) )  org.junit.Assert.assertEquals ( VAR_2 , VAR_1 . METHOD_4 ( ) ) (  VAR_1 . METHOD_3 ( true ) )  VAR_1 . METHOD_3 ( true ) (  org.mockito.Mockito.verify ( VAR_3 , TYPE_1 . METHOD_6 ( 2 ) ) . METHOD_2 ( TYPE_1 . METHOD_7 ( ) ) )  org.mockito.Mockito.verify ( VAR_3 , TYPE_1 . METHOD_6 ( 2 ) ) . METHOD_2 ( TYPE_1 . METHOD_7 ( ) ) (  org.junit.Assert.assertEquals ( VAR_4 , VAR_1 . METHOD_4 ( ) ) )  org.junit.Assert.assertEquals ( VAR_4 , VAR_1 . METHOD_4 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME args ) NAME args ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.Class<?> ) TYPE java.lang.Class<?> ( NAME c ) NAME c ( INIT = java.lang.Class . METHOD_2 ( STRING_1 ) ) INIT = java.lang.Class . METHOD_2 ( STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME m ) NAME m ( INIT = c . METHOD_3 ( STRING_2 , ( ( java.lang.Class [ ] ) ( null ) ) ) ) INIT = c . METHOD_3 ( STRING_2 , ( ( java.lang.Class [ ] ) ( null ) ) ) ) VAR VAR ( VAR VAR ( TYPE java.lang.Integer ) TYPE java.lang.Integer ( NAME result ) NAME result ( INIT = ( ( java.lang.Integer ) ( m . invoke ( null ) ) ) ) INIT = ( ( java.lang.Integer ) ( m . invoke ( null ) ) ) ) VAR VAR ( IF IF ( COND result != 5 ) COND result != 5 ( THEN THEN (  throw new TYPE_2 ( ( STRING_3 + result ) ) ; )  throw new TYPE_2 ( ( STRING_3 + result ) ) ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE android.bluetooth.BluetoothDevice ) TYPE android.bluetooth.BluetoothDevice ( NAME device ) NAME device ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  android.util.Log.v ( TYPE_1 . TAG , STRING_1 ) )  android.util.Log.v ( TYPE_1 . TAG , STRING_1 ) ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME service ) NAME service ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( IF IF ( COND service == null ) COND service == null ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  return ( ( service . METHOD_3 ( ) ) == ( VAR_2 ) ) && ( service . METHOD_4 ( ) . equals ( device ) ) ; )  return ( ( service . METHOD_3 ( ) ) == ( VAR_2 ) ) && ( service . METHOD_4 ( ) . equals ( device ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE android.renderscript.Allocation ) TYPE android.renderscript.Allocation ( NAME a ) NAME a ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  android.util.Log.e ( STRING_1 , ( STRING_2 + a ) ) )  android.util.Log.e ( STRING_1 , ( STRING_2 + a ) ) (  VAR_1 . METHOD_2 ( ) )  VAR_1 . METHOD_2 ( ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( 0 , VAR_1 , a ) ) INIT = new TYPE_1 ( 0 , VAR_1 , a ) ) VAR VAR (  VAR_3 = true )  VAR_3 = true (  VAR_4 = true )  VAR_4 = true (  VAR_5 = false )  VAR_5 = false (  VAR_6 = true )  VAR_6 = true (  VAR_2 . METHOD_3 ( 0 ) )  VAR_2 . METHOD_3 ( 0 ) (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME path ) NAME path ( INIT = METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ) INIT = METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  return new TYPE_4 ( path ) ; )  return new TYPE_4 ( path ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME e ) NAME e ( BLOCK BLOCK (  TYPE_6 . METHOD_6 ( path , VAR_1 . METHOD_7 ( ) , VAR_4 ) )  TYPE_6 . METHOD_6 ( path , VAR_1 . METHOD_7 ( ) , VAR_4 ) (  throw new TYPE_7 ( e ) ; )  throw new TYPE_7 ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN byte[] ) RETURN byte[] ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME line ) NAME line ( IN VAR_1 . METHOD_2 ( STRING_1 ) ) IN VAR_1 . METHOD_2 ( STRING_1 ) ( BLOCK BLOCK (  TYPE_3 . METHOD_3 ( line , VAR_2 ) )  TYPE_3 . METHOD_3 ( line , VAR_2 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_2 . METHOD_4 ( ) ; )  return VAR_2 . METHOD_4 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME response ) NAME response ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_2 . METHOD_2 ( VAR_1 , response ) )  VAR_2 . METHOD_2 ( VAR_1 , response ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME request ) NAME request ( INIT = VAR_3 . METHOD_3 ( VAR_1 ) ) INIT = VAR_3 . METHOD_3 ( VAR_1 ) ) VAR VAR ( IF IF ( COND request != null ) COND request != null ( THEN THEN (  VAR_4 = response )  VAR_4 = response (  METHOD_4 ( VAR_1 , request , null ) )  METHOD_4 ( VAR_1 , request , null ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( STRING_1 ) )  TYPE_1 . METHOD_2 ( STRING_1 ) (  VAR_1 . METHOD_3 ( null ) )  VAR_1 . METHOD_3 ( null ) (  METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( VAR_2 ) )  METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( VAR_2 ) (  METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( VAR_3 ) )  METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( VAR_3 ) (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE android.bluetooth.BluetoothDevice ) TYPE android.bluetooth.BluetoothDevice ( NAME device ) NAME device ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( TYPE_1 . METHOD_2 ( VAR_1 ) ) ) COND ! ( TYPE_1 . METHOD_2 ( VAR_1 ) ) ( THEN THEN (  android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) )  android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) (  return null ; )  return null ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME service ) NAME service ( INIT = METHOD_3 ( ) ) INIT = METHOD_3 ( ) ) VAR VAR ( IF IF ( COND service == null ) COND service == null ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF (  return service . METHOD_1 ( device ) ; )  return service . METHOD_1 ( device ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( 100 , 100 , VAR_2 ) ) INIT = new TYPE_1 ( 100 , 100 , VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR (  VAR_3 . METHOD_3 ( new TYPE_3 ( - INT_1 , true ) ) )  VAR_3 . METHOD_3 ( new TYPE_3 ( - INT_1 , true ) ) (  VAR_3 . METHOD_4 ( 0 , 0 , VAR_1 . METHOD_5 ( ) , VAR_1 . METHOD_6 ( ) ) )  VAR_3 . METHOD_4 ( 0 , 0 , VAR_1 . METHOD_5 ( ) , VAR_1 . METHOD_6 ( ) ) (  VAR_3 . METHOD_7 ( ) )  VAR_3 . METHOD_7 ( ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_4 . METHOD_8 ( VAR_1 , - INT_1 ) ) INIT = TYPE_4 . METHOD_8 ( VAR_1 , - INT_1 ) ) VAR VAR (  METHOD_9 ( VAR_4 ) )  METHOD_9 ( VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_6 . get ( VAR_1 ) ) INIT = VAR_6 . get ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_5 != null ) COND VAR_5 != null ( THEN THEN (  return VAR_5 ; )  return VAR_5 ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE int ) TYPE int ( NAME id ) NAME id ( INIT = mRS . METHOD_2 ( METHOD_3 ( mRS ) , VAR_1 , VAR_2 ) ) INIT = mRS . METHOD_2 ( METHOD_3 ( mRS ) , VAR_1 , VAR_2 ) ) VAR VAR ( IF IF ( COND id == 0 ) COND id == 0 ( THEN THEN (  throw new TYPE_3 ( STRING_1 ) ; )  throw new TYPE_3 ( STRING_1 ) ; ) THEN THEN ) IF IF (  VAR_5 = new TYPE_1 ( id , mRS , this , VAR_1 , VAR_2 ) )  VAR_5 = new TYPE_1 ( id , mRS , this , VAR_1 , VAR_2 ) (  VAR_6 . METHOD_4 ( VAR_1 , VAR_5 ) )  VAR_6 . METHOD_4 ( VAR_1 , VAR_5 ) (  return VAR_5 ; )  return VAR_5 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<TYPE_1> ) TYPE java.util.ArrayList<TYPE_1> ( NAME v ) NAME v ( INIT = ( ( java.util.ArrayList < TYPE_1 > ) ( super . METHOD_1 ( ) ) ) ) INIT = ( ( java.util.ArrayList < TYPE_1 > ) ( super . METHOD_1 ( ) ) ) ) VAR VAR (  VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 , size ) )  VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 , size ) (  VAR_3 = 0 )  VAR_3 = 0 (  return v ; )  return v ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_4 ( ) ; )  throw new TYPE_4 ( ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE Main ) TYPE Main ( NAME m ) NAME m ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( Main . METHOD_2 ( STRING_1 ) ) ) COND ! ( Main . METHOD_2 ( STRING_1 ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  Main . METHOD_3 ( ) )  Main . METHOD_3 ( ) ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN ( WHILE WHILE ( COND ! ( Main . METHOD_4 ( STRING_1 ) ) ) COND ! ( Main . METHOD_4 ( STRING_1 ) ) ( BLOCK BLOCK ) BLOCK BLOCK ) WHILE WHILE ) THEN THEN ) IF IF ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < ( VAR_1 ? INT_1 : 1 ) ) COND i < ( VAR_1 ? INT_1 : 1 ) ( UPDATE UPDATE (  ++ i )  ++ i ) UPDATE UPDATE ( BLOCK BLOCK (  m . METHOD_5 ( ) )  m . METHOD_5 ( ) ) BLOCK BLOCK ) FOR FOR ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.io.File[] ) TYPE java.io.File[] ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_2 ( ) . METHOD_3 ( ( VAR_3 ) - > TYPE_3 . METHOD_4 ( VAR_3 . METHOD_5 ( ) ) ) ) INIT = VAR_1 . METHOD_2 ( ) . METHOD_3 ( ( VAR_3 ) - > TYPE_3 . METHOD_4 ( VAR_3 . METHOD_5 ( ) ) ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE java.io.File ) TYPE java.io.File ( NAME source ) NAME source ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK (  METHOD_6 ( source . METHOD_5 ( ) , VAR_4 ) )  METHOD_6 ( source . METHOD_5 ( ) , VAR_4 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_5 ) NAME VAR_5 ( INIT = new java.io.File ( VAR_1 . METHOD_2 ( ) , VAR_6 ) ) INIT = new java.io.File ( VAR_1 . METHOD_2 ( ) , VAR_6 ) ) VAR VAR ( IF IF ( COND VAR_5 . METHOD_7 ( ) ) COND VAR_5 . METHOD_7 ( ) ( THEN THEN (  METHOD_8 ( VAR_5 . METHOD_5 ( ) ) )  METHOD_8 ( VAR_5 . METHOD_5 ( ) ) ) THEN THEN ) IF IF (  return this ; )  return this ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.io.File[] ) TYPE java.io.File[] ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.io.File[] ) TYPE java.io.File[] ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ( VAR VAR ( TYPE float ) TYPE float ( NAME VAR_6 ) NAME VAR_6 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_7 ) NAME VAR_7 ) VAR VAR ( VAR VAR ( TYPE TYPE_2[] ) TYPE TYPE_2[] ( NAME VAR_8 ) NAME VAR_8 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_3 . METHOD_1 ( new TYPE_4 ( ) , VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 , VAR_8 ) )  TYPE_3 . METHOD_1 ( new TYPE_4 ( ) , VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 , VAR_8 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( ) ) INIT = TYPE_1 . METHOD_2 ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_1 . METHOD_3 ( STRING_1 ) ) INIT = TYPE_1 . METHOD_3 ( STRING_1 ) ) VAR VAR (  TYPE_1 . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , null , true ) )  TYPE_1 . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , null , true ) ) BLOCK BLOCK ( FINALLY FINALLY (  TYPE_1 . METHOD_5 ( VAR_1 ) )  TYPE_1 . METHOD_5 ( VAR_1 ) ) FINALLY FINALLY ) TRY TRY (  TYPE_2 . METHOD_6 ( ) )  TYPE_2 . METHOD_6 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.io.File ) RETURN java.io.File ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_3 ) NAME VAR_3 ( INIT = java.io.File . METHOD_2 ( VAR_2 , STRING_1 ) ) INIT = java.io.File . METHOD_2 ( VAR_2 , STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = null ) INIT = null ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_4 = new TYPE_1 ( VAR_3 ) )  VAR_4 = new TYPE_1 ( VAR_3 ) (  VAR_4 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) )  VAR_4 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) (  VAR_4 . METHOD_5 ( ) )  VAR_4 . METHOD_5 ( ) ) BLOCK BLOCK ( FINALLY FINALLY (  TYPE_2 . METHOD_6 ( VAR_4 ) )  TYPE_2 . METHOD_6 ( VAR_4 ) ) FINALLY FINALLY ) TRY TRY (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public final ) MODIFIER public final ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ) VAR VAR ( VAR VAR ( TYPE byte ) TYPE byte ( NAME x ) NAME x ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  throw new TYPE_2 ( ) ; )  throw new TYPE_2 ( ) ; ) THEN THEN ) IF IF ( IF IF ( COND ! ( VAR_2 ) ) COND ! ( VAR_2 ) ( THEN THEN (  throw new TYPE_3 ( STRING_1 ) ; )  throw new TYPE_3 ( STRING_1 ) ; ) THEN THEN ) IF IF (  METHOD_1 ( METHOD_2 ( METHOD_3 ( i ) ) , x ) )  METHOD_1 ( METHOD_2 ( METHOD_3 ( i ) ) , x ) (  return this ; )  return this ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( ) ) INIT = TYPE_1 . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME target ) NAME target ( INIT = VAR_1 . METHOD_3 ( VAR_2 . METHOD_4 ( ) ) ) INIT = VAR_1 . METHOD_3 ( VAR_2 . METHOD_4 ( ) ) ) VAR VAR ( IF IF ( COND target != null ) COND target != null ( THEN THEN (  VAR_3 . METHOD_1 ( target ) )  VAR_3 . METHOD_1 ( target ) (  VAR_4 . METHOD_5 ( ) )  VAR_4 . METHOD_5 ( ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME context ) NAME context ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = context . METHOD_2 ( VAR_3 class ) . METHOD_3 ( VAR_1 ) ) INIT = context . METHOD_2 ( VAR_3 class ) . METHOD_3 ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_5 . METHOD_4 ( context , TYPE_5 . METHOD_5 ( VAR_1 ) , VAR_2 . METHOD_6 ( ) ) ) INIT = TYPE_5 . METHOD_4 ( context , TYPE_5 . METHOD_5 ( VAR_1 ) , VAR_2 . METHOD_6 ( ) ) ) VAR VAR (  TYPE_5 . METHOD_7 ( context , VAR_4 , VAR_1 ) )  TYPE_5 . METHOD_7 ( context , VAR_4 , VAR_1 ) (  context . METHOD_2 ( VAR_5 class ) . METHOD_8 ( VAR_4 ) )  context . METHOD_2 ( VAR_5 class ) . METHOD_8 ( VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE java.lang.Class<?> ) TYPE java.lang.Class<?> ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE TYPE_3<java.lang.String> ) TYPE TYPE_3<java.lang.String> ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_6 ) NAME VAR_6 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_7 ) NAME VAR_7 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_8 ) NAME VAR_8 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_9 ) NAME VAR_9 ( IN VAR_10 ) IN VAR_10 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_11 ) NAME VAR_11 ( INIT = VAR_9 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 , VAR_8 ) ) INIT = VAR_9 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 , VAR_8 ) ) VAR VAR ( IF IF ( COND VAR_11 != null ) COND VAR_11 != null ( THEN THEN (  return VAR_11 ; )  return VAR_11 ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME key ) NAME key ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND key != null ) COND key != null ( THEN THEN (  VAR_3 . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) )  VAR_3 . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) ) THEN THEN ) IF IF ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( IN VAR_1 . METHOD_5 ( ) ) IN VAR_1 . METHOD_5 ( ) ( BLOCK BLOCK (  METHOD_1 ( VAR_4 , key ) )  METHOD_1 ( VAR_4 , key ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_3> ) TYPE java.util.List<TYPE_3> ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_4 ) NAME VAR_4 ( IN VAR_1 . METHOD_2 ( ) ) IN VAR_1 . METHOD_2 ( ) ( BLOCK BLOCK ( IF IF ( COND VAR_4 . METHOD_3 ( ) ) COND VAR_4 . METHOD_3 ( ) ( THEN THEN (  METHOD_1 ( ( ( TYPE_1 ) ( VAR_4 ) ) , VAR_2 , VAR_3 ) )  METHOD_1 ( ( ( TYPE_1 ) ( VAR_4 ) ) , VAR_2 , VAR_3 ) ) THEN THEN ( ELSE ELSE ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_5 ) NAME VAR_5 ( INIT = ( ( TYPE_3 ) ( VAR_4 ) ) ) INIT = ( ( TYPE_3 ) ( VAR_4 ) ) ) VAR VAR ( IF IF ( COND VAR_2 . METHOD_4 ( VAR_5 ) ) COND VAR_2 . METHOD_4 ( VAR_5 ) ( THEN THEN (  VAR_3 . METHOD_5 ( VAR_5 ) )  VAR_3 . METHOD_5 ( VAR_5 ) ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( VAR_1 ) )  METHOD_2 ( VAR_1 ) (  VAR_2 . METHOD_3 ( STRING_1 , STRING_2 , VAR_3 . TAG , null , null , null , null , false , ( - 1 ) , false , ( - 1 ) ) )  VAR_2 . METHOD_3 ( STRING_1 , STRING_2 , VAR_3 . TAG , null , null , null , null , false , ( - 1 ) , false , ( - 1 ) ) (  org.mockito.Mockito.verify ( VAR_4 ) . METHOD_4 ( ( ( byte [ ] ) ( org.mockito.Matchers . METHOD_5 ( ) ) ) , TYPE_1 . eq ( 0 ) , TYPE_1 . eq ( 0 ) , org.mockito.Matchers . METHOD_5 ( VAR_5 class ) ) )  org.mockito.Mockito.verify ( VAR_4 ) . METHOD_4 ( ( ( byte [ ] ) ( org.mockito.Matchers . METHOD_5 ( ) ) ) , TYPE_1 . eq ( 0 ) , TYPE_1 . eq ( 0 ) , org.mockito.Matchers . METHOD_5 ( VAR_5 class ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  VAR_2 )  VAR_2 ( BLOCK BLOCK ( IF IF ( COND ( ( ( VAR_3 ) == null ) || ( VAR_1 == null ) ) || ( ( VAR_4 . METHOD_2 ( ) ) != ( VAR_1 . METHOD_2 ( ) ) ) ) COND ( ( ( VAR_3 ) == null ) || ( VAR_1 == null ) ) || ( ( VAR_4 . METHOD_2 ( ) ) != ( VAR_1 . METHOD_2 ( ) ) ) ( THEN THEN (  android.util.Slog.w ( VAR_5 . TAG , ( STRING_1 + VAR_1 ) ) )  android.util.Slog.w ( VAR_5 . TAG , ( STRING_1 + VAR_1 ) ) (  return ; )  return ; ) THEN THEN ) IF IF (  VAR_6 . METHOD_3 ( VAR_7 ) )  VAR_6 . METHOD_3 ( VAR_7 ) ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME path ) NAME path ( INIT = METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ) INIT = METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ) VAR VAR ( IF IF ( COND ( ! ( path . METHOD_1 ( ) ) ) || ( path . METHOD_6 ( ) ) ) COND ( ! ( path . METHOD_1 ( ) ) ) || ( path . METHOD_6 ( ) ) ( THEN THEN (  throw new TYPE_2 ( VAR_1 . METHOD_7 ( ) ) ; )  throw new TYPE_2 ( VAR_1 . METHOD_7 ( ) ) ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME start ) NAME start ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND start == null ) COND start == null ( THEN THEN (  throw new java.lang.NullPointerException ( STRING_1 ) ; )  throw new java.lang.NullPointerException ( STRING_1 ) ; ) THEN THEN ) IF IF ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  throw new java.lang.NullPointerException ( STRING_2 ) ; )  throw new java.lang.NullPointerException ( STRING_2 ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_2 . METHOD_2 ( start ) . METHOD_3 ( ) ) INIT = VAR_2 . METHOD_2 ( start ) . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_2 . METHOD_4 ( VAR_1 ) . METHOD_3 ( ) ) INIT = VAR_2 . METHOD_4 ( VAR_1 ) . METHOD_3 ( ) ) VAR VAR (  return ( VAR_4 - VAR_3 ) <= ( VAR_5 ) ; )  return ( VAR_4 - VAR_3 ) <= ( VAR_5 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2<TYPE_3> ) TYPE TYPE_2<TYPE_3> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( VAR_1 , ( ( VAR_3 ) - 1 ) ) ) INIT = METHOD_2 ( VAR_1 , ( ( VAR_3 ) - 1 ) ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( INIT = STRING_1 + ( METHOD_3 ( VAR_2 . METHOD_4 ( ) ) ) ) INIT = STRING_1 + ( METHOD_3 ( VAR_2 . METHOD_4 ( ) ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_5 ) NAME VAR_5 ( INIT = METHOD_5 ( VAR_4 , VAR_4 , VAR_2 . METHOD_4 ( ) , null ) ) INIT = METHOD_5 ( VAR_4 , VAR_4 , VAR_2 . METHOD_4 ( ) , null ) ) VAR VAR (  return VAR_5 ; )  return VAR_5 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME VAR_2 ) NAME VAR_2 ( INIT = mContext . METHOD_2 ( ) . METHOD_3 ( VAR_1 ) ) INIT = mContext . METHOD_2 ( ) . METHOD_3 ( VAR_1 ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = mContext . METHOD_2 ( ) . METHOD_4 ( name , 0 ) ) INIT = mContext . METHOD_2 ( ) . METHOD_4 ( name , 0 ) ) VAR VAR ( IF IF ( COND ( ( VAR_4 . flags ) & ( VAR_5 ) ) != 0 ) COND ( ( VAR_4 . flags ) & ( VAR_5 ) ) != 0 ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME e ) NAME e ( BLOCK BLOCK (  return false ; )  return false ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  assertTrue ( STRING_1 , ( ( VAR_1 . METHOD_2 ( ) . length ) > 0 ) ) )  assertTrue ( STRING_1 , ( ( VAR_1 . METHOD_2 ( ) . length ) > 0 ) ) ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME target ) NAME target ( IN VAR_1 . METHOD_2 ( ) ) IN VAR_1 . METHOD_2 ( ) ( BLOCK BLOCK ( IF IF ( COND ! ( METHOD_1 ( target ) ) ) COND ! ( METHOD_1 ( target ) ) ( THEN THEN (  continue ; )  continue ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME status ) NAME status ( INIT = new TYPE_4 ( target ) . run ( new TYPE_5 ( ) ) ) INIT = new TYPE_4 ( target ) . run ( new TYPE_5 ( ) ) ) VAR VAR ( IF IF ( COND ( status . METHOD_3 ( ) ) != ( VAR_2 ) ) COND ( status . METHOD_3 ( ) ) != ( VAR_2 ) ( THEN THEN (  fail ( STRING_2 ) )  fail ( STRING_2 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME pkg ) NAME pkg ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( VAR_1 ) != null ) && ( ( VAR_1 . METHOD_2 ( pkg ) ) == ( VAR_2 ) ) ) COND ( ( VAR_1 ) != null ) && ( ( VAR_1 . METHOD_2 ( pkg ) ) == ( VAR_2 ) ) ( THEN THEN (  return ( VAR_1 . METHOD_3 ( ) ) == ( pkg . METHOD_3 ( ) ) ; )  return ( VAR_1 . METHOD_3 ( ) ) == ( pkg . METHOD_3 ( ) ) ; ) THEN THEN ) IF IF (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME from ) NAME from ) VAR VAR ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME to ) NAME to ) VAR VAR ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.String> ) TYPE java.util.Map<java.lang.String,java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.lang.String [ ] { VAR_3 , STRING_1 , STRING_2 , from . METHOD_2 ( ) , STRING_3 , to . METHOD_2 ( ) } ) INIT = new java.lang.String [ ] { VAR_3 , STRING_1 , STRING_2 , from . METHOD_2 ( ) , STRING_3 , to . METHOD_2 ( ) } ) VAR VAR (  VAR_4 . METHOD_3 ( VAR_2 , VAR_1 ) )  VAR_4 . METHOD_3 ( VAR_2 , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object[] ) RETURN java.lang.Object[] ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.Object[] ) TYPE java.lang.Object[] ( NAME a ) NAME a ( INIT = c . METHOD_1 ( ) ) INIT = c . METHOD_1 ( ) ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < ( a . length ) ) COND i < ( a . length ) ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK (  a [ i ] = new TYPE_1 < > ( ( ( TYPE_2 < TYPE_3 , TYPE_4 > ) ( a [ i ] ) ) ) )  a [ i ] = new TYPE_1 < > ( ( ( TYPE_2 < TYPE_3 , TYPE_4 > ) ( a [ i ] ) ) ) ) BLOCK BLOCK ) FOR FOR (  return a ; )  return a ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( METHOD_2 ( ) ) == false ) COND ( METHOD_2 ( ) ) == false ( THEN THEN (  android.util.Log.e ( android.bluetooth.BluetoothDevice . TAG , STRING_1 ) )  android.util.Log.e ( android.bluetooth.BluetoothDevice . TAG , STRING_1 ) (  throw new java.io.IOException ( ) ; )  throw new java.io.IOException ( ) ; ) THEN THEN ) IF IF (  return new TYPE_1 ( VAR_2 , ( - 1 ) , false , false , this , VAR_1 , null ) ; )  return new TYPE_1 ( VAR_2 , ( - 1 ) , false , false , this , VAR_1 , null ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = ( VAR_1 . size ( ) ) - 1 ) INIT = ( VAR_1 . size ( ) ) - 1 ) VAR VAR ) INIT INIT ( COND i >= 0 ) COND i >= 0 ( UPDATE UPDATE (  i -- )  i -- ) UPDATE UPDATE ( BLOCK BLOCK (  android.util.Log.v ( VAR_2 . TAG , ( ( ( STRING_1 + i ) + STRING_2 ) + ( VAR_1 . get ( i ) ) ) ) )  android.util.Log.v ( VAR_2 . TAG , ( ( ( STRING_1 + i ) + STRING_2 ) + ( VAR_1 . get ( i ) ) ) ) ) BLOCK BLOCK ) FOR FOR ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME line ) NAME line ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME options ) NAME options ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.lang.String [ 5 ] ) INIT = new java.lang.String [ 5 ] ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  TYPE_2 . METHOD_2 ( line , CHAR_1 , VAR_1 , VAR_2 ) )  TYPE_2 . METHOD_2 ( line , CHAR_1 , VAR_1 , VAR_2 ) (  METHOD_3 ( VAR_1 , line , options ) )  METHOD_3 ( VAR_1 , line , options ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME log ) NAME log ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Throwable ) TYPE java.lang.Throwable ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME format ) NAME format ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME args ) NAME args ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN (  VAR_1 . METHOD_1 ( ) )  VAR_1 . METHOD_1 ( ) ) THEN THEN ) IF IF ( VAR VAR ( TYPE java.lang.StringBuilder ) TYPE java.lang.StringBuilder ( NAME sb ) NAME sb ( INIT = new java.lang.StringBuilder ( ) ) INIT = new java.lang.StringBuilder ( ) ) VAR VAR ( IF IF ( COND format != null ) COND format != null ( THEN THEN (  sb.append ( java.lang.String.format ( format , args ) ) )  sb.append ( java.lang.String.format ( format , args ) ) ) THEN THEN ) IF IF ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN (  sb.append ( VAR_1 . toString ( ) ) )  sb.append ( VAR_1 . toString ( ) ) ) THEN THEN ) IF IF (  VAR_2 . println ( sb ) )  VAR_2 . println ( sb ) ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN (  fail ( VAR_1 . toString ( ) ) )  fail ( VAR_1 . toString ( ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN android.bluetooth.BluetoothDevice[] ) RETURN android.bluetooth.BluetoothDevice[] ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE android.bluetooth.BluetoothDevice[] ) TYPE android.bluetooth.BluetoothDevice[] ( NAME VAR_1 ) NAME VAR_1 ( INIT = new android.bluetooth.BluetoothDevice [ 0 ] ) INIT = new android.bluetooth.BluetoothDevice [ 0 ] ) VAR VAR ( SYNCHRONIZED SYNCHRONIZED (  VAR_2 )  VAR_2 ( BLOCK BLOCK ( IF IF ( COND VAR_3 . METHOD_2 ( ) ) COND VAR_3 . METHOD_2 ( ) ( THEN THEN (  return new android.bluetooth.BluetoothDevice [ 0 ] ; )  return new android.bluetooth.BluetoothDevice [ 0 ] ; ) THEN THEN ) IF IF ( TRY TRY ( BLOCK BLOCK (  VAR_1 = VAR_3 . METHOD_3 ( VAR_1 ) )  VAR_1 = VAR_3 . METHOD_3 ( VAR_1 ) (  METHOD_4 ( ( STRING_1 + ( VAR_1 . length ) ) ) )  METHOD_4 ( ( STRING_1 + ( VAR_1 . length ) ) ) (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( BLOCK BLOCK (  METHOD_5 ( STRING_2 ) )  METHOD_5 ( STRING_2 ) (  return new android.bluetooth.BluetoothDevice [ 0 ] ; )  return new android.bluetooth.BluetoothDevice [ 0 ] ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE android.content.Intent ) TYPE android.content.Intent ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE android.os.Bundle ) TYPE android.os.Bundle ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( METHOD_2 ( ) ) ) COND ! ( METHOD_2 ( ) ) ( THEN THEN ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . METHOD_3 ( VAR_4 ) ) INIT = VAR_1 . METHOD_3 ( VAR_4 ) ) VAR VAR ( IF IF ( COND VAR_3 != null ) COND VAR_3 != null ( THEN THEN (  TYPE_2 . METHOD_4 ( VAR_3 ) )  TYPE_2 . METHOD_4 ( VAR_3 ) ) THEN THEN ) IF IF (  return ; )  return ; ) THEN THEN ) IF IF ( TRY TRY ( BLOCK BLOCK (  TYPE_2 . METHOD_5 ( ) . METHOD_1 ( VAR_1 , VAR_2 ) )  TYPE_2 . METHOD_5 ( ) . METHOD_1 ( VAR_1 , VAR_2 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME e ) NAME e ( BLOCK BLOCK (  throw e . METHOD_6 ( ) ; )  throw e . METHOD_6 ( ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1.List<TYPE_2> ) RETURN TYPE_1.List<TYPE_2> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.List<TYPE_3> ) TYPE TYPE_1.List<TYPE_3> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.List<TYPE_2> ) TYPE TYPE_1.List<TYPE_2> ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_4 . METHOD_2 ( VAR_1 . size ( ) ) ) INIT = TYPE_4 . METHOD_2 ( VAR_1 . size ( ) ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  VAR_2 . METHOD_3 ( new TYPE_2 ( VAR_3 ) ) )  VAR_2 . METHOD_3 ( new TYPE_2 ( VAR_3 ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME service ) NAME service ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  return service . METHOD_3 ( METHOD_4 ( ) ) ; )  return service . METHOD_3 ( METHOD_4 ( ) ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME ex ) NAME ex ( BLOCK BLOCK (  ex . METHOD_5 ( ) )  ex . METHOD_5 ( ) ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE java.lang.NullPointerException ) TYPE java.lang.NullPointerException ( NAME ex ) NAME ex ( BLOCK BLOCK (  throw new TYPE_3 ( STRING_1 ) ; )  throw new TYPE_3 ( STRING_1 ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  android.util.Log . i ( VAR_3 . TAG , STRING_1 ) )  android.util.Log . i ( VAR_3 . TAG , STRING_1 ) ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_1 . METHOD_2 ( ) ) == ( VAR_4 ) ) COND ( VAR_1 . METHOD_2 ( ) ) == ( VAR_4 ) ( THEN THEN (  VAR_5 . set ( true ) )  VAR_5 . set ( true ) ) THEN THEN ( ELSE ELSE (  VAR_6 . set ( true ) )  VAR_6 . set ( true ) ) ELSE ELSE ) IF IF (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME type ) NAME type ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND type == null ) COND type == null ( THEN THEN (  throw new java.lang.NullPointerException ( STRING_1 ) ; )  throw new java.lang.NullPointerException ( STRING_1 ) ; ) THEN THEN ) IF IF (  METHOD_2 ( ) )  METHOD_2 ( ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME item ) NAME item ( INIT = VAR_1 . get ( type ) ) INIT = VAR_1 . get ( type ) ) VAR VAR ( IF IF ( COND item == null ) COND item == null ( THEN THEN (  throw new java.lang.IllegalArgumentException ( ( STRING_2 + type ) ) ; )  throw new java.lang.IllegalArgumentException ( ( STRING_2 + type ) ) ; ) THEN THEN ) IF IF (  return item . METHOD_3 ( ) ; )  return item . METHOD_3 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME w ) NAME w ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME h ) NAME h ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME data ) NAME data ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  mRS . METHOD_2 ( ) )  mRS . METHOD_2 ( ) (  METHOD_3 ( VAR_1 , VAR_2 , w , h ) )  METHOD_3 ( VAR_1 , VAR_2 , w , h ) (  mRS . METHOD_4 ( METHOD_5 ( ) , VAR_1 , VAR_2 , VAR_3 , VAR_4 , w , h , data , data . length ) )  mRS . METHOD_4 ( METHOD_5 ( ) , VAR_1 , VAR_2 , VAR_3 , VAR_4 , w , h , data , data . length ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE long ) TYPE long ( NAME value ) NAME value ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( value == INT_1 ) || ( value == INT_2 ) ) COND ( value == INT_1 ) || ( value == INT_2 ) ( THEN THEN (  VAR_1 . METHOD_2 ( ( ( VAR_2 ) + ( ( int ) ( value ) ) ) ) )  VAR_1 . METHOD_2 ( ( ( VAR_2 ) + ( ( int ) ( value ) ) ) ) ) THEN THEN ( ELSE ELSE (  VAR_1 . METHOD_3 ( new TYPE_1 ( value ) ) )  VAR_1 . METHOD_3 ( new TYPE_1 ( value ) ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER synchronized ) MODIFIER synchronized ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE android.bluetooth.BluetoothDevice ) TYPE android.bluetooth.BluetoothDevice ( NAME device ) NAME device ) VAR VAR ( VAR VAR ( TYPE byte ) TYPE byte ( NAME type ) NAME type ) VAR VAR ( VAR VAR ( TYPE byte ) TYPE byte ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME data ) NAME data ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  android.util.Log.v ( VAR_2 . TAG , ( ( ( ( ( STRING_1 + device ) + STRING_2 ) + type ) + STRING_3 ) + id ) ) )  android.util.Log.v ( VAR_2 . TAG , ( ( ( ( ( STRING_1 + device ) + STRING_2 ) + type ) + STRING_3 ) + id ) ) ) THEN THEN ) IF IF ( IF IF ( COND ! ( METHOD_2 ( device ) ) ) COND ! ( METHOD_2 ( device ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  return METHOD_3 ( type , id , data ) ; )  return METHOD_3 ( type , id , data ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( VAR_1 ) ) INIT = METHOD_2 ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ( INIT = false ) INIT = false ) VAR VAR ( IF IF ( COND METHOD_3 ( VAR_2 ) ) COND METHOD_3 ( VAR_2 ) ( THEN THEN ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_5 . METHOD_4 ( ) ) INIT = VAR_5 . METHOD_4 ( ) ) VAR VAR (  VAR_4 = METHOD_5 ( VAR_4 , VAR_6 ) )  VAR_4 = METHOD_5 ( VAR_4 , VAR_6 ) ( TRY TRY ( BLOCK BLOCK (  VAR_7 = TYPE_2 . METHOD_6 ( VAR_4 , VAR_1 ) )  VAR_7 = TYPE_2 . METHOD_6 ( VAR_4 , VAR_1 ) (  VAR_3 = true )  VAR_3 = true ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_8 = false )  VAR_8 = false ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) THEN THEN ) IF IF (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<TYPE_2> ) RETURN TYPE_1<TYPE_2> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.android.jack.ir.ast.JDefinedClassOrInterface ) TYPE com.android.jack.ir.ast.JDefinedClassOrInterface ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<TYPE_2> ) TYPE java.util.ArrayList<TYPE_2> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE com.android.jack.ir.ast.JMethod ) TYPE com.android.jack.ir.ast.JMethod ( NAME method ) NAME method ( IN VAR_1 . METHOD_2 ( ) ) IN VAR_1 . METHOD_2 ( ) ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = method . METHOD_3 ( ) ) INIT = method . METHOD_3 ( ) ) VAR VAR ( IF IF ( COND VAR_3 instanceof TYPE_4 ) COND VAR_3 instanceof TYPE_4 ( THEN THEN (  VAR_2 . METHOD_4 ( ( ( TYPE_4 ) ( VAR_3 ) ) . METHOD_5 ( ) ) )  VAR_2 . METHOD_4 ( ( ( TYPE_4 ) ( VAR_3 ) ) . METHOD_5 ( ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_2 . METHOD_6 ( ) ; )  return VAR_2 . METHOD_6 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_3 ) < ( TYPE_1 . METHOD_2 ( ) ) ) COND ( VAR_3 ) < ( TYPE_1 . METHOD_2 ( ) ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_3 ( VAR_5 , VAR_1 , VAR_2 , ( - 1 ) ) ) INIT = METHOD_3 ( VAR_5 , VAR_1 , VAR_2 , ( - 1 ) ) ) VAR VAR ( IF IF ( COND VAR_4 == ( VAR_6 ) ) COND VAR_4 == ( VAR_6 ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF (  android.util.Log.w ( com.android.server.am.ActivityManagerService.TAG , ( ( ( name + STRING_1 ) + VAR_2 ) + STRING_2 ) ) )  android.util.Log.w ( com.android.server.am.ActivityManagerService.TAG , ( ( ( name + STRING_1 ) + VAR_2 ) + STRING_2 ) ) (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME flags ) NAME flags ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME userId ) NAME userId ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_3 . METHOD_2 ( userId ) ) ) COND ! ( VAR_3 . METHOD_2 ( userId ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  METHOD_3 ( VAR_1 . METHOD_4 ( ) , VAR_1 . METHOD_5 ( ) , VAR_2 , flags , userId ) )  METHOD_3 ( VAR_1 . METHOD_4 ( ) , VAR_1 . METHOD_5 ( ) , VAR_2 , flags , userId ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME method ) NAME method ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = 0 ) INIT = 0 ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_1 . METHOD_2 ( ) ) IN VAR_1 . METHOD_2 ( ) ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  METHOD_3 ( ( ( ( STRING_1 + VAR_2 ) + STRING_2 ) + ( method . METHOD_4 ( ) ) ) , VAR_3 ) )  METHOD_3 ( ( ( ( STRING_1 + VAR_2 ) + STRING_2 ) + ( method . METHOD_4 ( ) ) ) , VAR_3 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new java.lang.RuntimeException ( e ) ; )  throw new java.lang.RuntimeException ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  android.util.Log.d ( VAR_2 . TAG , STRING_1 ) )  android.util.Log.d ( VAR_2 . TAG , STRING_1 ) ) THEN THEN ) IF IF ( VAR VAR ( TYPE int ) TYPE int ( NAME action ) NAME action ( INIT = VAR_3 ) INIT = VAR_3 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME c ) NAME c ( INIT = METHOD_2 ( VAR_4 , VAR_5 , VAR_6 ) ) INIT = METHOD_2 ( VAR_4 , VAR_5 , VAR_6 ) ) VAR VAR ( IF IF ( COND c != null ) COND c != null ( THEN THEN ( IF IF ( COND TYPE_2 . METHOD_3 ( METHOD_4 ( VAR_7 ) , action , 0 ) ) COND TYPE_2 . METHOD_3 ( METHOD_4 ( VAR_7 ) , action , 0 ) ( THEN THEN (  METHOD_5 ( VAR_8 , action ) )  METHOD_5 ( VAR_8 , action ) (  METHOD_6 ( VAR_9 , VAR_10 ) )  METHOD_6 ( VAR_9 , VAR_10 ) ) THEN THEN ( ELSE ELSE (  android.util.Log.e ( VAR_2 . TAG , STRING_2 ) )  android.util.Log.e ( VAR_2 . TAG , STRING_2 ) ) ELSE ELSE ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( ) . build ( ) ) INIT = new TYPE_2 ( ) . build ( ) ) VAR VAR (  VAR_2 . METHOD_2 ( STRING_1 , VAR_3 , TYPE_3 . METHOD_3 ( null ) ) )  VAR_2 . METHOD_2 ( STRING_1 , VAR_3 , TYPE_3 . METHOD_3 ( null ) ) (  VAR_2 . METHOD_2 ( STRING_2 , VAR_4 , TYPE_3 . METHOD_3 ( VAR_5 ) ) )  VAR_2 . METHOD_2 ( STRING_2 , VAR_4 , TYPE_3 . METHOD_3 ( VAR_5 ) ) (  VAR_2 . METHOD_2 ( STRING_3 , VAR_6 , TYPE_3 . METHOD_3 ( 0 ) ) )  VAR_2 . METHOD_2 ( STRING_3 , VAR_6 , TYPE_3 . METHOD_3 ( 0 ) ) (  VAR_2 . METHOD_2 ( STRING_4 , VAR_7 , TYPE_3 . METHOD_3 ( 0 ) ) )  VAR_2 . METHOD_2 ( STRING_4 , VAR_7 , TYPE_3 . METHOD_3 ( 0 ) ) (  VAR_2 . METHOD_2 ( STRING_5 , VAR_8 , TYPE_3 . METHOD_3 ( true ) ) )  VAR_2 . METHOD_2 ( STRING_5 , VAR_8 , TYPE_3 . METHOD_3 ( true ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_1 ) NAME VAR_1 ( INIT = 100 ) INIT = 100 ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_2 ) NAME VAR_2 ( INIT = INT_1 ) INIT = INT_1 ) VAR VAR (  VAR_3 = VAR_4 . METHOD_2 ( VAR_1 , VAR_2 , true ) )  VAR_3 = VAR_4 . METHOD_2 ( VAR_1 , VAR_2 , true ) (  assertTrue ( VAR_3 . METHOD_3 ( ) ) )  assertTrue ( VAR_3 . METHOD_3 ( ) ) (  assertTrue ( VAR_3 . METHOD_4 ( ) ) )  assertTrue ( VAR_3 . METHOD_4 ( ) ) (  METHOD_5 ( VAR_4 , VAR_3 . METHOD_6 ( ) ) )  METHOD_5 ( VAR_4 , VAR_3 . METHOD_6 ( ) ) (  METHOD_5 ( VAR_4 , VAR_3 . METHOD_7 ( ) ) )  METHOD_5 ( VAR_4 , VAR_3 . METHOD_7 ( ) ) (  assertEquals ( VAR_1 , VAR_3 . METHOD_8 ( ) ) )  assertEquals ( VAR_1 , VAR_3 . METHOD_8 ( ) ) (  assertEquals ( VAR_2 , VAR_3 . size ( ) ) )  assertEquals ( VAR_2 , VAR_3 . size ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  VAR_1 )  VAR_1 ( BLOCK BLOCK ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  ( VAR_3 ) ++ )  ( VAR_3 ) ++ ( SYNCHRONIZED SYNCHRONIZED (  VAR_4 )  VAR_4 ( BLOCK BLOCK (  VAR_4 . METHOD_2 ( ) )  VAR_4 . METHOD_2 ( ) ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED (  VAR_5 = null )  VAR_5 = null ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME p ) NAME p ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  TYPE_2 . METHOD_3 ( p ) )  TYPE_2 . METHOD_3 ( p ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  VAR_2 = false )  VAR_2 = false ) THEN THEN ) IF IF (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) || ( TYPE_1 . METHOD_2 ( VAR_2 ) ) ) COND ( VAR_1 ) || ( TYPE_1 . METHOD_2 ( VAR_2 ) ) ( THEN THEN (  VAR_3 . METHOD_3 ( VAR_4 ) )  VAR_3 . METHOD_3 ( VAR_4 ) (  VAR_5 . METHOD_3 ( VAR_4 ) )  VAR_5 . METHOD_3 ( VAR_4 ) (  return ; )  return ; ) THEN THEN ) IF IF (  VAR_3 . METHOD_4 ( context . METHOD_5 ( VAR_6 , VAR_2 ) ) )  VAR_3 . METHOD_4 ( context . METHOD_5 ( VAR_6 , VAR_2 ) ) (  VAR_3 . METHOD_3 ( VAR_7 ) )  VAR_3 . METHOD_3 ( VAR_7 ) ( IF IF ( COND VAR_8 ) COND VAR_8 ( THEN THEN (  VAR_5 . METHOD_3 ( VAR_7 ) )  VAR_5 . METHOD_3 ( VAR_7 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( VAR_2 ) )  VAR_1 . METHOD_2 ( VAR_2 ) (  VAR_1 . METHOD_3 ( ) )  VAR_1 . METHOD_3 ( ) (  METHOD_4 ( ) )  METHOD_4 ( ) ( IF IF ( COND VAR_3 . get ( VAR_2 ) . METHOD_5 ( ) ) COND VAR_3 . get ( VAR_2 ) . METHOD_5 ( ) ( THEN THEN (  METHOD_6 ( VAR_4 ) )  METHOD_6 ( VAR_4 ) ) THEN THEN ( ELSE ELSE (  METHOD_6 ( VAR_5 ) )  METHOD_6 ( VAR_5 ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME type ) NAME type ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( TYPE_3 . METHOD_2 ( VAR_5 ) ) ) COND ! ( TYPE_3 . METHOD_2 ( VAR_5 ) ) ( THEN THEN (  android.util.Log.w ( TYPE_4 . TAG , STRING_1 ) )  android.util.Log.w ( TYPE_4 . TAG , STRING_1 ) (  return null ; )  return null ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME service ) NAME service ( INIT = METHOD_3 ( ) ) INIT = METHOD_3 ( ) ) VAR VAR ( IF IF ( COND service == null ) COND service == null ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF (  return service . METHOD_1 ( type , VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; )  return service . METHOD_1 ( type , VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME is ) NAME is ( INIT = new TYPE_1 ( VAR_1 . METHOD_1 ( ) ) ) INIT = new TYPE_1 ( VAR_1 . METHOD_1 ( ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 ( is ) ) INIT = new TYPE_2 ( is ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( WHILE WHILE ( COND true ) COND true ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME line ) NAME line ( INIT = VAR_2 . METHOD_2 ( ) ) INIT = VAR_2 . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND line != null ) COND line != null ( THEN THEN (  VAR_3 . METHOD_3 ( STRING_1 , line ) )  VAR_3 . METHOD_3 ( STRING_1 , line ) ) THEN THEN ( ELSE ELSE (  break ; )  break ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) WHILE WHILE ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME e ) NAME e ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_2 ) ( e . item ) ) . METHOD_2 ( ) ) INIT = ( ( TYPE_2 ) ( e . item ) ) . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND VAR_1 instanceof TYPE_3 ) COND VAR_1 instanceof TYPE_3 ( THEN THEN (  VAR_2 . METHOD_3 ( ( ( TYPE_3 ) ( VAR_1 ) ) , null ) )  VAR_2 . METHOD_3 ( ( ( TYPE_3 ) ( VAR_1 ) ) , null ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND VAR_1 instanceof TYPE_4 ) COND VAR_1 instanceof TYPE_4 ( THEN THEN (  VAR_2 . METHOD_3 ( ( ( TYPE_4 ) ( VAR_1 ) ) . METHOD_4 ( ) , ( ( TYPE_4 ) ( VAR_1 ) ) ) )  VAR_2 . METHOD_3 ( ( ( TYPE_4 ) ( VAR_1 ) ) . METHOD_4 ( ) , ( ( TYPE_4 ) ( VAR_1 ) ) ) ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.String> ) TYPE java.util.Map<java.lang.String,java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  ( VAR_3 ) -- )  ( VAR_3 ) -- ( IF IF ( COND ( VAR_3 ) > 0 ) COND ( VAR_3 ) > 0 ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  METHOD_2 ( VAR_1 ) )  METHOD_2 ( VAR_1 ) (  TYPE_1 . METHOD_3 ( VAR_4 . METHOD_4 ( ) , VAR_5 ) )  TYPE_1 . METHOD_3 ( VAR_4 . METHOD_4 ( ) , VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( ) ) INIT = TYPE_2 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3<java.lang.String,TYPE_4> ) TYPE TYPE_3<java.lang.String,TYPE_4> ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_3 ( ) ) INIT = VAR_1 . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_4> ) TYPE java.util.List<TYPE_4> ( NAME values ) NAME values ( INIT = VAR_2 . get ( STRING_1 ) ) INIT = VAR_2 . get ( STRING_1 ) ) VAR VAR (  assertEquals ( 2 , values . size ( ) ) )  assertEquals ( 2 , values . size ( ) ) ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_3 ) NAME VAR_3 ( INIT = values . get ( 1 ) ) INIT = values . get ( 1 ) ) VAR VAR (  assertNotNull ( VAR_3 . METHOD_4 ( ) ) )  assertNotNull ( VAR_3 . METHOD_4 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  android.util.Log.e ( TYPE_1 . TAG , ( STRING_1 + ( VAR_1 ) ) ) )  android.util.Log.e ( TYPE_1 . TAG , ( STRING_1 + ( VAR_1 ) ) ) ( SYNCHRONIZED SYNCHRONIZED (  VAR_2 )  VAR_2 ( BLOCK BLOCK ( IF IF ( COND METHOD_3 ( ) ) COND METHOD_3 ( ) ( THEN THEN (  VAR_1 = TYPE_1 . METHOD_4 ( ) )  VAR_1 = TYPE_1 . METHOD_4 ( ) (  VAR_3 = null )  VAR_3 = null ( IF IF ( COND TYPE_1 . METHOD_5 ( VAR_4 , VAR_1 ) ) COND TYPE_1 . METHOD_5 ( VAR_4 , VAR_1 ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return false ; )  return false ; ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public final ) MODIFIER public final ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  this )  this ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_3 ) ) COND ! ( VAR_3 ) ( THEN THEN (  throw new java.lang.RuntimeException ( STRING_1 ) ; )  throw new java.lang.RuntimeException ( STRING_1 ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_2 ( VAR_1 , VAR_2 ) ) INIT = METHOD_2 ( VAR_1 , VAR_2 ) ) VAR VAR ( IF IF ( COND VAR_4 != 0 ) COND VAR_4 != 0 ( THEN THEN ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME res ) NAME res ( INIT = new TYPE_2 ( VAR_4 ) ) INIT = new TYPE_2 ( VAR_4 ) ) VAR VAR (  METHOD_3 ( res . METHOD_4 ( ) ) )  METHOD_3 ( res . METHOD_4 ( ) ) (  return res ; )  return res ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED (  throw new TYPE_3 ( ( STRING_2 + VAR_1 ) ) ; )  throw new TYPE_3 ( ( STRING_2 + VAR_1 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_3 . METHOD_2 ( STRING_1 ) )  TYPE_3 . METHOD_2 ( STRING_1 ) ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_4 . from ( VAR_1 . METHOD_3 ( ) ) ) INIT = TYPE_4 . from ( VAR_1 . METHOD_3 ( ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_3 . METHOD_4 ( VAR_5 , VAR_1 , false ) ) INIT = VAR_3 . METHOD_4 ( VAR_5 , VAR_1 , false ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_6 ) NAME VAR_6 ( INIT = new TYPE_1 ( VAR_4 , VAR_7 , this ) ) INIT = new TYPE_1 ( VAR_4 , VAR_7 , this ) ) VAR VAR (  VAR_8 . METHOD_5 ( VAR_6 ) )  VAR_8 . METHOD_5 ( VAR_6 ) (  return VAR_6 ; )  return VAR_6 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND name . METHOD_3 ( STRING_1 ) ) COND name . METHOD_3 ( STRING_1 ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF (  return ( ( VAR_1 ) != null ) && ( VAR_1 . METHOD_4 ( name ) ) ; )  return ( ( VAR_1 ) != null ) && ( VAR_1 . METHOD_4 ( name ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_2 ( ) ) INIT = TYPE_2 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_3 ( STRING_1 ) ) INIT = new TYPE_3 ( STRING_1 ) ) VAR VAR (  VAR_3 . METHOD_3 ( VAR_2 ) )  VAR_3 . METHOD_3 ( VAR_2 ) (  VAR_3 . METHOD_4 ( VAR_1 ) )  VAR_3 . METHOD_4 ( VAR_1 ) ( VAR VAR ( TYPE java.util.List<TYPE_4> ) TYPE java.util.List<TYPE_4> ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_3 . METHOD_5 ( ) . get ( STRING_2 ) ) INIT = VAR_3 . METHOD_5 ( ) . get ( STRING_2 ) ) VAR VAR (  assertEquals ( 1 , VAR_4 . size ( ) ) )  assertEquals ( 1 , VAR_4 . size ( ) ) (  assertTrue ( VAR_4 . get ( 0 ) . METHOD_6 ( ) ) )  assertTrue ( VAR_4 . get ( 0 ) . METHOD_6 ( ) ) (  METHOD_7 ( VAR_1 ) )  METHOD_7 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME format ) NAME format ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_6 ) NAME VAR_6 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_7 ) NAME VAR_7 ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_8 ) NAME VAR_8 ) VAR VAR ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_9 ) NAME VAR_9 ) VAR VAR ( VAR VAR ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME VAR_10 ) NAME VAR_10 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_11 ) NAME VAR_11 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_12 ) NAME VAR_12 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_13 ) NAME VAR_13 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_14 ) NAME VAR_14 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_7 . e ( VAR_15 . TAG , STRING_1 ) )  TYPE_7 . e ( VAR_15 . TAG , STRING_1 ) (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME packageName ) NAME packageName ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( STRING_1 ) )  TYPE_1 . METHOD_2 ( STRING_1 ) ( IF IF ( COND ! ( VAR_1 ) ) COND ! ( VAR_1 ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME p ) NAME p ) VAR VAR ( SYNCHRONIZED SYNCHRONIZED (  VAR_2 )  VAR_2 ( BLOCK BLOCK (  p = VAR_2 . get ( packageName ) )  p = VAR_2 . get ( packageName ) ( IF IF ( COND ( p == null ) || ( VAR_3 ) ) COND ( p == null ) || ( VAR_3 ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ( SYNCHRONIZED SYNCHRONIZED (  VAR_4 )  VAR_4 ( BLOCK BLOCK (  return ( METHOD_3 ( p , false , false ) ) == ( VAR_5 ) ; )  return ( METHOD_3 ( p , false , false ) ) == ( VAR_5 ) ; ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME out ) NAME out ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND out . METHOD_2 ( ) ) COND out . METHOD_2 ( ) ( THEN THEN (  out . METHOD_3 ( ( ( ( out . METHOD_3 ( ) ) + ( data [ VAR_1 ] ) ) - ( out . METHOD_4 ( ) ) ) ) )  out . METHOD_3 ( ( ( ( out . METHOD_3 ( ) ) + ( data [ VAR_1 ] ) ) - ( out . METHOD_4 ( ) ) ) ) ) THEN THEN ( ELSE ELSE (  out . METHOD_5 ( output , 0 , data [ VAR_1 ] ) )  out . METHOD_5 ( output , 0 , data [ VAR_1 ] ) ) ELSE ELSE ) IF IF (  output = null )  output = null ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int[] ) TYPE int[] ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2[] ) TYPE TYPE_2[] ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_2 [ VAR_1 . length ] ) INIT = new TYPE_2 [ VAR_1 . length ] ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < ( VAR_1 . length ) ) COND i < ( VAR_1 . length ) ( UPDATE UPDATE (  ++ i )  ++ i ) UPDATE UPDATE ( BLOCK BLOCK (  VAR_3 [ i ] = TYPE_3 . METHOD_2 ( VAR_1 [ i ] ) )  VAR_3 [ i ] = TYPE_3 . METHOD_2 ( VAR_1 [ i ] ) ) BLOCK BLOCK ) FOR FOR (  return new TYPE_1 ( 0 , 0 , VAR_2 , VAR_3 ) ; )  return new TYPE_1 ( 0 , 0 , VAR_2 , VAR_3 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE android.content.Intent ) TYPE android.content.Intent ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE android.os.Bundle ) TYPE android.os.Bundle ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( METHOD_2 ( ) ) ) COND ! ( METHOD_2 ( ) ) ( THEN THEN ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . METHOD_3 ( VAR_4 ) ) INIT = VAR_1 . METHOD_3 ( VAR_4 ) ) VAR VAR ( IF IF ( COND VAR_3 != null ) COND VAR_3 != null ( THEN THEN (  TYPE_2 . METHOD_4 ( VAR_3 ) )  TYPE_2 . METHOD_4 ( VAR_3 ) ) THEN THEN ) IF IF (  return ; )  return ; ) THEN THEN ) IF IF ( TRY TRY ( BLOCK BLOCK (  METHOD_5 ( ) . METHOD_1 ( VAR_1 , VAR_2 ) )  METHOD_5 ( ) . METHOD_1 ( VAR_1 , VAR_2 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME e ) NAME e ( BLOCK BLOCK (  throw e . METHOD_6 ( ) ; )  throw e . METHOD_6 ( ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME match ) NAME match ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( ) ) INIT = TYPE_2 . METHOD_2 ( ) ) VAR VAR (  VAR_1 . METHOD_3 ( ( match = TYPE_3 . METHOD_4 ( ) ) ) )  VAR_1 . METHOD_3 ( ( match = TYPE_3 . METHOD_4 ( ) ) ) (  VAR_1 . METHOD_3 ( TYPE_3 . METHOD_5 ( STRING_1 ) ) )  VAR_1 . METHOD_3 ( TYPE_3 . METHOD_5 ( STRING_1 ) ) (  VAR_1 . METHOD_3 ( TYPE_3 . METHOD_5 ( STRING_2 ) ) )  VAR_1 . METHOD_3 ( TYPE_3 . METHOD_5 ( STRING_2 ) ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ( INIT = TYPE_3 . METHOD_6 ( VAR_1 , INT_1 , STRING_3 ) ) INIT = TYPE_3 . METHOD_6 ( VAR_1 , INT_1 , STRING_3 ) ) VAR VAR (  assertEquals ( match , result ) )  assertEquals ( match , result ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME entry ) NAME entry ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  org.junit.Assert.assertEquals ( VAR_1 , VAR_3 ) )  org.junit.Assert.assertEquals ( VAR_1 , VAR_3 ) (  org.junit.Assert.assertEquals ( VAR_4 , VAR_5 ) )  org.junit.Assert.assertEquals ( VAR_4 , VAR_5 ) (  org.junit.Assert.assertEquals ( VAR_6 , VAR_7 ) )  org.junit.Assert.assertEquals ( VAR_6 , VAR_7 ) (  org.junit.Assert.assertEquals ( VAR_8 , entry . set ) )  org.junit.Assert.assertEquals ( VAR_8 , entry . set ) (  org.junit.Assert.assertEquals ( VAR_9 , VAR_10 ) )  org.junit.Assert.assertEquals ( VAR_9 , VAR_10 ) (  org.junit.Assert.assertEquals ( VAR_11 , entry . uid ) )  org.junit.Assert.assertEquals ( VAR_11 , entry . uid ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2<TYPE_3> ) TYPE TYPE_2<TYPE_3> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( VAR_1 , ( ( VAR_3 ) - 1 ) ) ) INIT = METHOD_2 ( VAR_1 , ( ( VAR_3 ) - 1 ) ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( INIT = STRING_1 + ( METHOD_3 ( VAR_2 . METHOD_4 ( ) ) ) ) INIT = STRING_1 + ( METHOD_3 ( VAR_2 . METHOD_4 ( ) ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_5 ) NAME VAR_5 ( INIT = METHOD_5 ( VAR_4 , VAR_4 , VAR_2 . METHOD_4 ( ) , null ) ) INIT = METHOD_5 ( VAR_4 , VAR_4 , VAR_2 . METHOD_4 ( ) , null ) ) VAR VAR (  VAR_5 . METHOD_6 ( ) )  VAR_5 . METHOD_6 ( ) (  return VAR_5 ; )  return VAR_5 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  VAR_3 = VAR_1 . METHOD_2 ( ) )  VAR_3 = VAR_1 . METHOD_2 ( ) (  VAR_4 = VAR_1 . METHOD_3 ( ) )  VAR_4 = VAR_1 . METHOD_3 ( ) (  VAR_5 = VAR_1 . METHOD_4 ( ) )  VAR_5 = VAR_1 . METHOD_4 ( ) (  VAR_6 = VAR_1 . METHOD_5 ( ) )  VAR_6 = VAR_1 . METHOD_5 ( ) (  VAR_7 = VAR_1 . METHOD_6 ( ) )  VAR_7 = VAR_1 . METHOD_6 ( ) (  VAR_8 = VAR_1 . METHOD_7 ( ) )  VAR_8 = VAR_1 . METHOD_7 ( ) (  VAR_9 = VAR_1 . METHOD_8 ( ) )  VAR_9 = VAR_1 . METHOD_8 ( ) (  VAR_10 = VAR_1 . METHOD_9 ( ) )  VAR_10 = VAR_1 . METHOD_9 ( ) (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( VAR_1 ) ) INIT = new TYPE_1 ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_2 ( VAR_2 ) ) INIT = new TYPE_2 ( VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME line ) NAME line ) VAR VAR ( WHILE WHILE ( COND ( line = VAR_3 . METHOD_2 ( ) ) != null ) COND ( line = VAR_3 . METHOD_2 ( ) ) != null ( BLOCK BLOCK ( IF IF ( COND ( line . METHOD_3 ( STRING_1 ) ) || ( line . METHOD_3 ( STRING_2 ) ) ) COND ( line . METHOD_3 ( STRING_1 ) ) || ( line . METHOD_3 ( STRING_2 ) ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) WHILE WHILE (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME pkg ) NAME pkg ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( METHOD_2 ( ) ) ) COND ! ( METHOD_2 ( ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( IF IF ( COND pkg . equals ( VAR_1 . METHOD_3 ( ) ) ) COND pkg . equals ( VAR_1 . METHOD_3 ( ) ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME project ) NAME project ( IN VAR_1 . METHOD_4 ( ) ) IN VAR_1 . METHOD_4 ( ) ( BLOCK BLOCK ( IF IF ( COND pkg . equals ( project . METHOD_3 ( ) ) ) COND pkg . equals ( project . METHOD_3 ( ) ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  assertTrue ( VAR_1 . METHOD_2 ( STRING_1 ) ) )  assertTrue ( VAR_1 . METHOD_2 ( STRING_1 ) ) (  assertTrue ( VAR_1 . METHOD_2 ( STRING_2 ) ) )  assertTrue ( VAR_1 . METHOD_2 ( STRING_2 ) ) (  assertTrue ( VAR_1 . METHOD_2 ( STRING_3 ) ) )  assertTrue ( VAR_1 . METHOD_2 ( STRING_3 ) ) (  assertTrue ( VAR_1 . METHOD_2 ( STRING_4 ) ) )  assertTrue ( VAR_1 . METHOD_2 ( STRING_4 ) ) (  assertTrue ( VAR_1 . METHOD_2 ( STRING_5 ) ) )  assertTrue ( VAR_1 . METHOD_2 ( STRING_5 ) ) (  assertFalse ( VAR_1 . METHOD_2 ( STRING_6 ) ) )  assertFalse ( VAR_1 . METHOD_2 ( STRING_6 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  assertFalse ( STRING_1 , VAR_1 . METHOD_2 ( ) ) )  assertFalse ( STRING_1 , VAR_1 . METHOD_2 ( ) ) (  VAR_1 . METHOD_3 ( ) )  VAR_1 . METHOD_3 ( ) (  assertTrue ( STRING_1 , VAR_1 . METHOD_2 ( ) ) )  assertTrue ( STRING_1 , VAR_1 . METHOD_2 ( ) ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 ( TYPE_3 . METHOD_4 ( ) , TYPE_4 . METHOD_5 ( ) ) ) INIT = new TYPE_2 ( TYPE_3 . METHOD_4 ( ) , TYPE_4 . METHOD_5 ( ) ) ) VAR VAR (  VAR_1 = new TYPE_1 ( VAR_2 ) )  VAR_1 = new TYPE_1 ( VAR_2 ) (  assertFalse ( STRING_2 , VAR_1 . METHOD_2 ( ) ) )  assertFalse ( STRING_2 , VAR_1 . METHOD_2 ( ) ) (  VAR_1 . METHOD_3 ( ) )  VAR_1 . METHOD_3 ( ) (  assertTrue ( STRING_2 , VAR_1 . METHOD_2 ( ) ) )  assertTrue ( STRING_2 , VAR_1 . METHOD_2 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE android.content.Intent ) TYPE android.content.Intent ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  log ( STRING_1 ) )  log ( STRING_1 ) ) THEN THEN ) IF IF ( IF IF ( COND ( ( VAR_3 ) != null ) && ( ( VAR_4 ) == null ) ) COND ( ( VAR_3 ) != null ) && ( ( VAR_4 ) == null ) ( THEN THEN (  throw new TYPE_2 ( ( STRING_2 + ( VAR_5 ) ) ) ; )  throw new TYPE_2 ( ( STRING_2 + ( VAR_5 ) ) ) ; ) THEN THEN ) IF IF (  return VAR_4 ; )  return VAR_4 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.Map ) TYPE java.util.Map ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  this . VAR_2 . METHOD_2 ( METHOD_3 ( ) . METHOD_4 ( VAR_2 ) ) )  this . VAR_2 . METHOD_2 ( METHOD_3 ( ) . METHOD_4 ( VAR_2 ) ) (  this . VAR_3 . METHOD_2 ( VAR_1 ) )  this . VAR_3 . METHOD_2 ( VAR_1 ) (  this . VAR_4 . METHOD_2 ( java.lang.Integer . METHOD_5 ( VAR_5 . size ( ) ) ) )  this . VAR_4 . METHOD_2 ( java.lang.Integer . METHOD_5 ( VAR_5 . size ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_3 ( VAR_2 ) ) INIT = new TYPE_3 ( VAR_2 ) ) VAR VAR (  VAR_3 . METHOD_2 ( VAR_1 ) )  VAR_3 . METHOD_2 ( VAR_1 ) (  VAR_3 . METHOD_3 ( ) )  VAR_3 . METHOD_3 ( ) ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_4 ( VAR_2 . METHOD_4 ( ) ) ) INIT = new TYPE_4 ( VAR_2 . METHOD_4 ( ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_5 ) NAME VAR_5 ( INIT = new TYPE_5 ( VAR_4 ) ) INIT = new TYPE_5 ( VAR_4 ) ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_6 ) NAME VAR_6 ( INIT = VAR_5 . METHOD_5 ( ) ) INIT = VAR_5 . METHOD_5 ( ) ) VAR VAR (  VAR_7 = VAR_6 )  VAR_7 = VAR_6 (  VAR_5 . METHOD_3 ( ) )  VAR_5 . METHOD_3 ( ) (  return VAR_6 ; )  return VAR_6 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_1 ) NAME VAR_1 ( INIT = new byte [ INT_1 ] ) INIT = new byte [ INT_1 ] ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < ( VAR_1 . length ) ) COND i < ( VAR_1 . length ) ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK (  VAR_1 [ i ] = ( ( byte ) ( i ) ) )  VAR_1 [ i ] = ( ( byte ) ( i ) ) ) BLOCK BLOCK ) FOR FOR (  assertEquals ( new TYPE_1 < java.lang.String > ( TYPE_2 . METHOD_2 ( STRING_1 , STRING_2 , STRING_3 , STRING_4 , STRING_5 , STRING_6 , STRING_7 ) ) , TYPE_3 . METHOD_3 ( VAR_1 ) ) )  assertEquals ( new TYPE_1 < java.lang.String > ( TYPE_2 . METHOD_2 ( STRING_1 , STRING_2 , STRING_3 , STRING_4 , STRING_5 , STRING_6 , STRING_7 ) ) , TYPE_3 . METHOD_3 ( VAR_1 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( ) ) INIT = TYPE_1 . METHOD_2 ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  TYPE_2 . METHOD_3 ( ) . METHOD_4 ( ) )  TYPE_2 . METHOD_3 ( ) . METHOD_4 ( ) ( VAR VAR ( TYPE int ) TYPE int ( NAME count ) NAME count ( INIT = VAR_1 . METHOD_5 ( ) ) INIT = VAR_1 . METHOD_5 ( ) ) VAR VAR (  assertEquals ( 0 , count ) )  assertEquals ( 0 , count ) (  assertTrue ( TYPE_2 . METHOD_3 ( ) . METHOD_6 ( ) ) )  assertTrue ( TYPE_2 . METHOD_3 ( ) . METHOD_6 ( ) ) ) BLOCK BLOCK ( FINALLY FINALLY (  VAR_1 . METHOD_7 ( ) )  VAR_1 . METHOD_7 ( ) (  assertTrue ( TYPE_2 . METHOD_8 ( ) ) )  assertTrue ( TYPE_2 . METHOD_8 ( ) ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_2 ( VAR_3 ) . build ( ) ) INIT = VAR_2 . METHOD_2 ( VAR_3 ) . build ( ) ) VAR VAR (  assertEquals ( VAR_3 , VAR_1 . METHOD_3 ( ) ) )  assertEquals ( VAR_3 , VAR_1 . METHOD_3 ( ) ) (  assertTrue ( STRING_1 , VAR_1 . METHOD_4 ( VAR_4 ) ) )  assertTrue ( STRING_1 , VAR_1 . METHOD_4 ( VAR_4 ) ) (  VAR_1 = VAR_2 . METHOD_2 ( STRING_2 ) . build ( ) )  VAR_1 = VAR_2 . METHOD_2 ( STRING_2 ) . build ( ) (  assertFalse ( STRING_1 , VAR_1 . METHOD_4 ( VAR_4 ) ) )  assertFalse ( STRING_1 , VAR_1 . METHOD_4 ( VAR_4 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME m ) NAME m ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME v ) NAME v ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME value ) NAME value ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = false ) INIT = false ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( v == null ) ? ( ( boolean ) ( m . METHOD_2 ( ) ) ) : ( ( boolean ) ( m . METHOD_2 ( v ) ) ) ) INIT = ( v == null ) ? ( ( boolean ) ( m . METHOD_2 ( ) ) ) : ( ( boolean ) ( m . METHOD_2 ( v ) ) ) ) VAR VAR (  TYPE_3 . assertTrue ( ( VAR_3 == value ) ) )  TYPE_3 . assertTrue ( ( VAR_3 == value ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_2 = true )  VAR_2 = true ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  TYPE_3 . assertEquals ( VAR_2 , VAR_1 ) )  TYPE_3 . assertEquals ( VAR_2 , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME project ) NAME project ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 = null )  VAR_1 = null (  VAR_2 = null )  VAR_2 = null ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = project . METHOD_2 ( ) ) INIT = project . METHOD_2 ( ) ) VAR VAR (  VAR_4 = new TYPE_3 < TYPE_4 , java.util.List < TYPE_5 > > ( VAR_5 class ) )  VAR_4 = new TYPE_3 < TYPE_4 , java.util.List < TYPE_5 > > ( VAR_5 class ) (  VAR_6 = VAR_7 . METHOD_3 ( VAR_8 , VAR_3 , VAR_9 , VAR_4 ) )  VAR_6 = VAR_7 . METHOD_3 ( VAR_8 , VAR_3 , VAR_9 , VAR_4 ) (  METHOD_4 ( ) )  METHOD_4 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.Class<?> ) TYPE java.lang.Class<?> ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE TYPE_3<java.lang.String> ) TYPE TYPE_3<java.lang.String> ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_6 ) NAME VAR_6 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_7 ) NAME VAR_7 ) VAR VAR ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME args ) NAME args ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND METHOD_2 ( VAR_3 ) ) COND METHOD_2 ( VAR_3 ) ( THEN THEN (  return new TYPE_5 ( VAR_1 , VAR_4 , VAR_5 , VAR_6 , VAR_3 , VAR_2 , args ) ; )  return new TYPE_5 ( VAR_1 , VAR_4 , VAR_5 , VAR_6 , VAR_3 , VAR_2 , args ) ; ) THEN THEN ( ELSE ELSE (  return null ; )  return null ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( TYPE_1 . METHOD_2 ( VAR_2 ) ) ) COND ! ( TYPE_1 . METHOD_2 ( VAR_2 ) ) ( THEN THEN (  android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) )  android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) (  return VAR_3 ; )  return VAR_3 ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME service ) NAME service ( INIT = METHOD_3 ( ) ) INIT = METHOD_3 ( ) ) VAR VAR ( IF IF ( COND service == null ) COND service == null ( THEN THEN (  return VAR_3 ; )  return VAR_3 ; ) THEN THEN ) IF IF (  return service . METHOD_1 ( VAR_1 ) ; )  return service . METHOD_1 ( VAR_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( METHOD_2 ( ) ) ) COND ! ( METHOD_2 ( ) ) ( THEN THEN (  TYPE_3 . METHOD_3 ( VAR_2 ) )  TYPE_3 . METHOD_3 ( VAR_2 ) (  return ; )  return ; ) THEN THEN ) IF IF ( TRY TRY ( BLOCK BLOCK (  TYPE_3 . METHOD_4 ( ) . METHOD_1 ( VAR_1 , mContext . METHOD_5 ( ) , VAR_2 ) )  TYPE_3 . METHOD_4 ( ) . METHOD_1 ( VAR_1 , mContext . METHOD_5 ( ) , VAR_2 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME e ) NAME e ( BLOCK BLOCK (  throw e . METHOD_6 ( ) ; )  throw e . METHOD_6 ( ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR (  TYPE_1 . when ( VAR_2 . METHOD_2 ( org.mockito.Matchers.eq ( VAR_1 ) ) ) . thenReturn ( true ) )  TYPE_1 . when ( VAR_2 . METHOD_2 ( org.mockito.Matchers.eq ( VAR_1 ) ) ) . thenReturn ( true ) (  METHOD_3 ( ) )  METHOD_3 ( ) (  assertFalse ( VAR_3 . METHOD_4 ( VAR_1 ) ) )  assertFalse ( VAR_3 . METHOD_4 ( VAR_1 ) ) (  org.mockito.Mockito.verify ( VAR_2 , TYPE_1 . METHOD_5 ( ) ) . METHOD_2 ( org.mockito.Matchers.eq ( VAR_1 ) ) )  org.mockito.Mockito.verify ( VAR_2 , TYPE_1 . METHOD_5 ( ) ) . METHOD_2 ( org.mockito.Matchers.eq ( VAR_1 ) ) (  METHOD_6 ( 4 , false , false ) )  METHOD_6 ( 4 , false , false ) (  assertTrue ( VAR_3 . METHOD_4 ( VAR_1 ) ) )  assertTrue ( VAR_3 . METHOD_4 ( VAR_1 ) ) (  org.mockito.Mockito.verify ( VAR_2 ) . METHOD_2 ( org.mockito.Matchers.eq ( VAR_1 ) ) )  org.mockito.Mockito.verify ( VAR_2 ) . METHOD_2 ( org.mockito.Matchers.eq ( VAR_1 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2<java.lang.String> ) TYPE TYPE_2<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3<TYPE_4> ) TYPE TYPE_3<TYPE_4> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME type ) NAME type ) VAR VAR ( VAR VAR ( TYPE TYPE_7<java.lang.String> ) TYPE TYPE_7<java.lang.String> ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_10 ) TYPE TYPE_10 ( NAME VAR_6 ) NAME VAR_6 ( INIT = new TYPE_10 ( ) ) INIT = new TYPE_10 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_11 ) TYPE TYPE_11 ( NAME VAR_7 ) NAME VAR_7 ( INIT = VAR_6 . METHOD_2 ( VAR_4 ) ) INIT = VAR_6 . METHOD_2 ( VAR_4 ) ) VAR VAR (  return VAR_7 != null ? new TYPE_1 ( VAR_6 , VAR_3 , VAR_1 , VAR_2 , VAR_7 . METHOD_3 ( ) , type , VAR_5 ) : null ; )  return VAR_7 != null ? new TYPE_1 ( VAR_6 , VAR_3 , VAR_1 , VAR_2 , VAR_7 . METHOD_3 ( ) , type , VAR_5 ) : null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 == null ) || ( VAR_2 == null ) ) COND ( VAR_1 == null ) || ( VAR_2 == null ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_2 . METHOD_2 ( ) ) INIT = VAR_2 . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND VAR_3 . equals ( VAR_4 ) ) COND VAR_3 . equals ( VAR_4 ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ( IF IF ( COND ! ( VAR_3 . METHOD_3 ( STRING_1 ) ) ) COND ! ( VAR_3 . METHOD_3 ( STRING_1 ) ) ( THEN THEN (  VAR_3 += STRING_1 )  VAR_3 += STRING_1 ) THEN THEN ) IF IF (  return VAR_4 . METHOD_4 ( VAR_3 ) ; )  return VAR_4 . METHOD_4 ( VAR_3 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  assertTrue ( STRING_1 , TYPE_1 . METHOD_2 ( CHAR_1 ) ) )  assertTrue ( STRING_1 , TYPE_1 . METHOD_2 ( CHAR_1 ) ) (  assertTrue ( STRING_2 , TYPE_1 . METHOD_2 ( CHAR_2 ) ) )  assertTrue ( STRING_2 , TYPE_1 . METHOD_2 ( CHAR_2 ) ) (  assertTrue ( STRING_3 , TYPE_1 . METHOD_2 ( CHAR_3 ) ) )  assertTrue ( STRING_3 , TYPE_1 . METHOD_2 ( CHAR_3 ) ) (  assertTrue ( STRING_4 , ( ! ( TYPE_1 . METHOD_2 ( CHAR_4 ) ) ) ) )  assertTrue ( STRING_4 , ( ! ( TYPE_1 . METHOD_2 ( CHAR_4 ) ) ) ) (  assertTrue ( STRING_5 , ( ! ( TYPE_1 . METHOD_2 ( CHAR_5 ) ) ) ) )  assertTrue ( STRING_5 , ( ! ( TYPE_1 . METHOD_2 ( CHAR_5 ) ) ) ) (  assertTrue ( STRING_6 , ( ! ( TYPE_1 . METHOD_2 ( CHAR_6 ) ) ) ) )  assertTrue ( STRING_6 , ( ! ( TYPE_1 . METHOD_2 ( CHAR_6 ) ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( VAR_2 , false ) )  VAR_1 . METHOD_2 ( VAR_2 , false ) (  org.junit.Assert.assertEquals ( null , VAR_1 . METHOD_3 ( ) ) )  org.junit.Assert.assertEquals ( null , VAR_1 . METHOD_3 ( ) ) (  VAR_1 . METHOD_4 ( true ) )  VAR_1 . METHOD_4 ( true ) (  VAR_1 . METHOD_4 ( false ) )  VAR_1 . METHOD_4 ( false ) (  org.mockito.Mockito.verify ( VAR_3 ) . METHOD_2 ( TYPE_1 . METHOD_5 ( ) ) )  org.mockito.Mockito.verify ( VAR_3 ) . METHOD_2 ( TYPE_1 . METHOD_5 ( ) ) (  org.junit.Assert.assertEquals ( VAR_2 , VAR_1 . METHOD_3 ( ) ) )  org.junit.Assert.assertEquals ( VAR_2 , VAR_1 . METHOD_3 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) (  VAR_1 = java.io.File . METHOD_2 ( STRING_1 , null ) )  VAR_1 = java.io.File . METHOD_2 ( STRING_1 , null ) (  VAR_2 = new java.io.File ( ( ( TYPE_1 . METHOD_3 ( STRING_2 ) ) + STRING_3 ) ) )  VAR_2 = new java.io.File ( ( ( TYPE_1 . METHOD_3 ( STRING_2 ) ) + STRING_3 ) ) ( IF IF ( COND ! ( VAR_2 . METHOD_4 ( ) ) ) COND ! ( VAR_2 . METHOD_4 ( ) ) ( THEN THEN (  VAR_2 . METHOD_5 ( ) )  VAR_2 . METHOD_5 ( ) ) THEN THEN ) IF IF (  VAR_3 = TYPE_1 . METHOD_3 ( STRING_4 ) . equals ( STRING_5 ) )  VAR_3 = TYPE_1 . METHOD_3 ( STRING_4 ) . equals ( STRING_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 == null ) || ( VAR_1 . METHOD_2 ( ) ) ) COND ( VAR_1 == null ) || ( VAR_1 . METHOD_2 ( ) ) ( THEN THEN (  METHOD_3 ( ) )  METHOD_3 ( ) (  return this ; )  return this ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_3 . METHOD_4 ( VAR_1 , true ) ) INIT = TYPE_3 . METHOD_4 ( VAR_1 , true ) ) VAR VAR ( IF IF ( COND VAR_2 == null ) COND VAR_2 == null ( THEN THEN (  throw new TYPE_4 ( ( STRING_1 + VAR_1 ) ) ; )  throw new TYPE_4 ( ( STRING_1 + VAR_1 ) ) ; ) THEN THEN ) IF IF (  METHOD_5 ( VAR_2 ) )  METHOD_5 ( VAR_2 ) (  return this ; )  return this ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 . METHOD_2 ( VAR_1 ) ) INIT = VAR_4 . METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_3 == null ) COND VAR_3 == null ( THEN THEN (  return VAR_2 ; )  return VAR_2 ; ) THEN THEN ) IF IF (  VAR_5 = TYPE_2 . METHOD_2 ( VAR_2 ) )  VAR_5 = TYPE_2 . METHOD_2 ( VAR_2 ) ( IF IF ( COND ( ( VAR_5 ) != null ) && ( ( VAR_5 . METHOD_3 ( ) ) == false ) ) COND ( ( VAR_5 ) != null ) && ( ( VAR_5 . METHOD_3 ( ) ) == false ) ( THEN THEN (  TYPE_3 . METHOD_4 ( ) . METHOD_5 ( VAR_6 , VAR_5 . METHOD_6 ( ) , null , null ) )  TYPE_3 . METHOD_4 ( ) . METHOD_5 ( VAR_6 , VAR_5 . METHOD_6 ( ) , null , null ) ) THEN THEN ) IF IF (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Integer ) TYPE java.lang.Integer ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Integer ) TYPE java.lang.Integer ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_2 . d ( ( STRING_1 + VAR_1 ) ) )  TYPE_2 . d ( ( STRING_1 + VAR_1 ) ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_5 ) NAME VAR_5 ( INIT = new TYPE_3 ( VAR_1 . METHOD_2 ( ) , VAR_2 . METHOD_2 ( ) , VAR_3 , VAR_4 ) ) INIT = new TYPE_3 ( VAR_1 . METHOD_2 ( ) , VAR_2 . METHOD_2 ( ) , VAR_3 , VAR_4 ) ) VAR VAR (  VAR_5 . start ( ) )  VAR_5 . start ( ) (  VAR_6 = VAR_5 )  VAR_6 = VAR_5 ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME e ) NAME e ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME node ) NAME node ( INIT = ( ( VAR_1 . METHOD_2 ( ) ) != null ) ? VAR_1 . METHOD_2 ( ) : VAR_1 ) INIT = ( ( VAR_1 . METHOD_2 ( ) ) != null ) ? VAR_1 . METHOD_2 ( ) : VAR_1 ) VAR VAR (  node . METHOD_3 ( VAR_2 ) )  node . METHOD_3 ( VAR_2 ) (  VAR_1 . METHOD_3 ( VAR_3 ) )  VAR_1 . METHOD_3 ( VAR_3 ) (  TYPE_3 . METHOD_4 ( ) . METHOD_5 ( VAR_4 ) )  TYPE_3 . METHOD_4 ( ) . METHOD_5 ( VAR_4 ) ( IF IF ( COND ( VAR_5 ) != null ) COND ( VAR_5 ) != null ( THEN THEN (  VAR_5 . METHOD_6 ( ) )  VAR_5 . METHOD_6 ( ) (  VAR_5 = null )  VAR_5 = null ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public final ) MODIFIER public final ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  m . METHOD_2 ( ) )  m . METHOD_2 ( ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME s ) NAME s ( INIT = m . METHOD_3 ( ) ) INIT = m . METHOD_3 ( ) ) VAR VAR (  assertFalse ( s . METHOD_4 ( ) ) )  assertFalse ( s . METHOD_4 ( ) ) (  assertFalse ( s . METHOD_5 ( ) ) )  assertFalse ( s . METHOD_5 ( ) ) (  assertFalse ( s . METHOD_6 ( ) ) )  assertFalse ( s . METHOD_6 ( ) ) (  assertTrue ( s . METHOD_7 ( ) ) )  assertTrue ( s . METHOD_7 ( ) ) (  assertTrue ( s . METHOD_8 ( ) ) )  assertTrue ( s . METHOD_8 ( ) ) (  assertEquals ( ( - 1 ) , s . METHOD_9 ( ) ) )  assertEquals ( ( - 1 ) , s . METHOD_9 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.StringBuilder ) TYPE java.lang.StringBuilder ( NAME sb ) NAME sb ( INIT = new java.lang.StringBuilder ( ) ) INIT = new java.lang.StringBuilder ( ) ) VAR VAR (  sb.append ( VAR_2 ) . append ( VAR_3 ) . append ( VAR_1 . METHOD_2 ( ) ) . append ( VAR_3 ) . append ( VAR_1 . METHOD_3 ( ) ) . append ( VAR_3 ) . append ( VAR_1 . METHOD_4 ( ) ) . append ( VAR_3 ) . append ( VAR_1 . METHOD_5 ( VAR_4 ) ) )  sb.append ( VAR_2 ) . append ( VAR_3 ) . append ( VAR_1 . METHOD_2 ( ) ) . append ( VAR_3 ) . append ( VAR_1 . METHOD_3 ( ) ) . append ( VAR_3 ) . append ( VAR_1 . METHOD_4 ( ) ) . append ( VAR_3 ) . append ( VAR_1 . METHOD_5 ( VAR_4 ) ) (  return sb . toString ( ) ; )  return sb . toString ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME format ) NAME format ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME expected ) NAME expected ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN (  VAR_3 = VAR_1 + STRING_2 )  VAR_3 = VAR_1 + STRING_2 ) THEN THEN ) IF IF (  return ( ( ( ( VAR_3 + STRING_3 ) + expected ) + STRING_4 ) + VAR_2 ) + STRING_5 ; )  return ( ( ( ( VAR_3 + STRING_3 ) + expected ) + STRING_4 ) + VAR_2 ) + STRING_5 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE byte ) TYPE byte ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_2 . METHOD_2 ( STRING_1 ) ) INIT = TYPE_2 . METHOD_2 ( STRING_1 ) ) VAR VAR (  VAR_4 . METHOD_3 ( VAR_5 , VAR_2 ) )  VAR_4 . METHOD_3 ( VAR_5 , VAR_2 ) ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_6 ) NAME VAR_6 ( INIT = VAR_4 . METHOD_4 ( VAR_7 ) ) INIT = VAR_4 . METHOD_4 ( VAR_7 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_8 ) NAME VAR_8 ( INIT = TYPE_2 . METHOD_2 ( STRING_2 ) ) INIT = TYPE_2 . METHOD_2 ( STRING_2 ) ) VAR VAR (  VAR_8 . METHOD_3 ( VAR_9 , VAR_3 ) )  VAR_8 . METHOD_3 ( VAR_9 , VAR_3 ) ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_10 ) NAME VAR_10 ( INIT = VAR_8 . METHOD_4 ( VAR_6 ) ) INIT = VAR_8 . METHOD_4 ( VAR_6 ) ) VAR VAR (  METHOD_5 ( VAR_1 , VAR_7 , VAR_10 ) )  METHOD_5 ( VAR_1 , VAR_7 , VAR_10 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_1 ( VAR_2 ) ) INIT = TYPE_1 . METHOD_1 ( VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME s ) NAME s ( INIT = new TYPE_2 ( VAR_1 , VAR_3 , VAR_4 ) ) INIT = new TYPE_2 ( VAR_1 , VAR_3 , VAR_4 ) ) VAR VAR (  VAR_1 . METHOD_2 ( VAR_5 ) )  VAR_1 . METHOD_2 ( VAR_5 ) ( IF IF ( COND ! ( METHOD_3 ( s ) ) ) COND ! ( METHOD_3 ( s ) ) ( THEN THEN (  result = - 1 )  result = - 1 ) THEN THEN ( ELSE ELSE (  s . METHOD_4 ( ) )  s . METHOD_4 ( ) (  VAR_1 . METHOD_5 ( ) )  VAR_1 . METHOD_5 ( ) (  METHOD_6 ( ) )  METHOD_6 ( ) ) ELSE ELSE ) IF IF (  VAR_1 . METHOD_7 ( ) )  VAR_1 . METHOD_7 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Integer ) TYPE java.lang.Integer ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_1 . d ( ( STRING_1 + VAR_1 ) ) )  TYPE_1 . d ( ( STRING_1 + VAR_1 ) ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_3 ( VAR_1 , VAR_2 . METHOD_2 ( ) ) ) INIT = new TYPE_3 ( VAR_1 , VAR_2 . METHOD_2 ( ) ) ) VAR VAR (  VAR_4 . start ( ) )  VAR_4 . start ( ) (  VAR_5 = VAR_4 )  VAR_5 = VAR_4 ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_1 ( VAR_2 ) ) INIT = TYPE_1 . METHOD_1 ( VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME s ) NAME s ( INIT = new TYPE_2 ( VAR_1 , VAR_3 , VAR_4 ) ) INIT = new TYPE_2 ( VAR_1 , VAR_3 , VAR_4 ) ) VAR VAR (  VAR_1 . METHOD_2 ( VAR_5 ) )  VAR_1 . METHOD_2 ( VAR_5 ) (  s . METHOD_3 ( 0 , 0 ) )  s . METHOD_3 ( 0 , 0 ) (  VAR_1 . METHOD_4 ( ) )  VAR_1 . METHOD_4 ( ) (  METHOD_5 ( ) )  METHOD_5 ( ) (  VAR_1 . METHOD_6 ( ) )  VAR_1 . METHOD_6 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 ) INIT = VAR_4 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_5 ) NAME VAR_5 ( INIT = false ) INIT = false ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_6 ) NAME VAR_6 ( INIT = 1 ) INIT = 1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME id ) NAME id ( INIT = VAR_1 . METHOD_2 ( VAR_7 , VAR_8 , VAR_5 , VAR_6 ) ) INIT = VAR_1 . METHOD_2 ( VAR_7 , VAR_8 , VAR_5 , VAR_6 ) ) VAR VAR (  return new TYPE_1 ( id , VAR_1 , VAR_2 , VAR_3 , VAR_5 , VAR_6 ) ; )  return new TYPE_1 ( id , VAR_1 , VAR_2 , VAR_3 , VAR_5 , VAR_6 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 ( VAR_1 ) ) INIT = new TYPE_2 ( VAR_1 ) ) VAR VAR (  VAR_1 . start ( ) )  VAR_1 . start ( ) (  VAR_2 . start ( ) )  VAR_2 . start ( ) ( TRY TRY ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( ) )  VAR_1 . METHOD_2 ( ) (  VAR_2 . METHOD_2 ( ) )  VAR_2 . METHOD_2 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_3 . println ( STRING_1 ) )  VAR_3 . println ( STRING_1 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME test ) NAME test ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_1 ( METHOD_2 ( ) , VAR_2 ) ) INIT = TYPE_1 . METHOD_1 ( METHOD_2 ( ) , VAR_2 ) ) VAR VAR ( IF IF ( COND ( VAR_1 == null ) || ( ! ( VAR_1 . METHOD_3 ( VAR_3 ) ) ) ) COND ( VAR_1 == null ) || ( ! ( VAR_1 . METHOD_3 ( VAR_3 ) ) ) ( THEN THEN (  status = VAR_4 )  status = VAR_4 ) THEN THEN ( ELSE ELSE (  status = VAR_5 )  status = VAR_5 ) ELSE ELSE ) IF IF (  METHOD_4 ( ) )  METHOD_4 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME node ) NAME node ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = node . METHOD_2 ( ) ) INIT = node . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( VAR_2 . METHOD_3 ( CHAR_1 ) ) != ( - 1 ) ) INIT = ( VAR_2 . METHOD_3 ( CHAR_1 ) ) != ( - 1 ) ) VAR VAR ( IF IF ( COND VAR_3 && ( ! ( METHOD_4 ( ) ) ) ) COND VAR_3 && ( ! ( METHOD_4 ( ) ) ) ( THEN THEN (  VAR_4 . append ( VAR_5 ) )  VAR_4 . append ( VAR_5 ) ) THEN THEN ) IF IF (  VAR_4 . append ( STRING_1 ) )  VAR_4 . append ( STRING_1 ) (  VAR_4 . append ( VAR_2 ) )  VAR_4 . append ( VAR_2 ) (  VAR_4 . append ( STRING_2 ) )  VAR_4 . append ( STRING_2 ) ( IF IF ( COND VAR_3 ) COND VAR_3 ( THEN THEN (  VAR_4 . append ( VAR_5 ) )  VAR_4 . append ( VAR_5 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Runnable ) TYPE java.lang.Runnable ( NAME r ) NAME r ) VAR VAR ( VAR VAR ( TYPE TYPE_1<java.lang.String> ) TYPE TYPE_1<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( STRING_1 ) )  VAR_1 . METHOD_2 ( STRING_1 ) (  METHOD_3 ( VAR_1 ) )  METHOD_3 ( VAR_1 ) (  VAR_1 . METHOD_2 ( STRING_2 ) )  VAR_1 . METHOD_2 ( STRING_2 ) (  Main . METHOD_4 ( r ) )  Main . METHOD_4 ( r ) (  VAR_1 . METHOD_2 ( STRING_3 ) )  VAR_1 . METHOD_2 ( STRING_3 ) (  METHOD_5 ( VAR_1 ) )  METHOD_5 ( VAR_1 ) (  VAR_1 . METHOD_2 ( STRING_4 ) )  VAR_1 . METHOD_2 ( STRING_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE float ) TYPE float ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE float ) TYPE float ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME d ) NAME d ( INIT = VAR_4 . METHOD_2 ( VAR_1 ) ) INIT = VAR_4 . METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND d == null ) COND d == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  VAR_5 [ 0 ] = VAR_2 )  VAR_5 [ 0 ] = VAR_2 (  VAR_5 [ 1 ] = 0 )  VAR_5 [ 1 ] = 0 (  VAR_5 [ 2 ] = 0 )  VAR_5 [ 2 ] = 0 (  VAR_5 [ 3 ] = 0 )  VAR_5 [ 3 ] = 0 (  VAR_5 [ 4 ] = VAR_3 )  VAR_5 [ 4 ] = VAR_3 (  VAR_5 [ 5 ] = 0 )  VAR_5 [ 5 ] = 0 (  VAR_5 [ 6 ] = 0 )  VAR_5 [ 6 ] = 0 (  VAR_5 [ 7 ] = 0 )  VAR_5 [ 7 ] = 0 (  VAR_5 [ 8 ] = 1 )  VAR_5 [ 8 ] = 1 ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_6 ) NAME VAR_6 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_7 ) NAME VAR_7 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_8 ) NAME VAR_8 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_9 ) NAME VAR_9 ( INIT = new TYPE_2 ( VAR_8 , VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 ) ) INIT = new TYPE_2 ( VAR_8 , VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_9 . METHOD_2 ( ) )  VAR_9 . METHOD_2 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK (  throw new java.lang.RuntimeException ( e ) ; )  throw new java.lang.RuntimeException ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 , VAR_1 , VAR_8 , VAR_9 ) ) INIT = new TYPE_1 ( VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 , VAR_1 , VAR_8 , VAR_9 ) ) VAR VAR (  org.junit.Assert.assertEquals ( VAR_10 , VAR_2 . METHOD_2 ( ) ) )  org.junit.Assert.assertEquals ( VAR_10 , VAR_2 . METHOD_2 ( ) ) (  org.junit.Assert.assertEquals ( INT_1 , VAR_2 . METHOD_3 ( ) ) )  org.junit.Assert.assertEquals ( INT_1 , VAR_2 . METHOD_3 ( ) ) (  org.junit.Assert.assertEquals ( VAR_7 , VAR_2 . METHOD_4 ( ) ) )  org.junit.Assert.assertEquals ( VAR_7 , VAR_2 . METHOD_4 ( ) ) (  org.junit.Assert.assertEquals ( VAR_1 , VAR_2 . METHOD_5 ( ) ) )  org.junit.Assert.assertEquals ( VAR_1 , VAR_2 . METHOD_5 ( ) ) (  org.junit.Assert.assertEquals ( ( ( VAR_7 ) + VAR_1 ) , VAR_2 . METHOD_6 ( ) ) )  org.junit.Assert.assertEquals ( ( ( VAR_7 ) + VAR_1 ) , VAR_2 . METHOD_6 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_2 ( ) . getName ( ) ) INIT = VAR_1 . METHOD_2 ( ) . getName ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_3 ( ) . METHOD_4 ( VAR_2 ) ) INIT = METHOD_3 ( ) . METHOD_4 ( VAR_2 ) ) VAR VAR ( IF IF ( COND VAR_3 != null ) COND VAR_3 != null ( THEN THEN ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_5 ( VAR_3 ) ) INIT = METHOD_5 ( VAR_3 ) ) VAR VAR ( IF IF ( COND VAR_4 != null ) COND VAR_4 != null ( THEN THEN ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_4 . METHOD_6 ( VAR_1 . getName ( ) ) ) INIT = VAR_4 . METHOD_6 ( VAR_1 . getName ( ) ) ) VAR VAR ( IF IF ( COND VAR_5 != null ) COND VAR_5 != null ( THEN THEN (  return VAR_5 ; )  return VAR_5 ; ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME context ) NAME context ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME element ) NAME element ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND element . METHOD_2 ( VAR_1 , VAR_2 ) ) COND element . METHOD_2 ( VAR_1 , VAR_2 ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( IF IF ( COND ( context . METHOD_3 ( ) . METHOD_4 ( ) ) < 11 ) COND ( context . METHOD_3 ( ) . METHOD_4 ( ) ) < 11 ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( IF IF ( COND TYPE_3 . equals ( element . METHOD_5 ( VAR_1 , VAR_3 ) ) ) COND TYPE_3 . equals ( element . METHOD_5 ( VAR_1 , VAR_3 ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR (  context . METHOD_6 ( VAR_5 , element , context . METHOD_7 ( element ) , VAR_4 , null ) )  context . METHOD_6 ( VAR_5 , element , context . METHOD_7 ( element ) , VAR_4 , null ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE android.bluetooth.BluetoothDevice ) TYPE android.bluetooth.BluetoothDevice ( NAME device ) NAME device ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( VAR_1 , STRING_1 ) )  METHOD_2 ( VAR_1 , STRING_1 ) ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . METHOD_3 ( device ) ) INIT = VAR_3 . METHOD_3 ( device ) ) VAR VAR ( IF IF ( COND ( VAR_2 != ( VAR_4 ) ) && ( VAR_2 != ( VAR_5 ) ) ) COND ( VAR_2 != ( VAR_4 ) ) && ( VAR_2 != ( VAR_5 ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  VAR_3 . METHOD_4 ( VAR_6 ) )  VAR_3 . METHOD_4 ( VAR_6 ) (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME is ) NAME is ( INIT = new TYPE_1 ( VAR_1 . METHOD_1 ( ) ) ) INIT = new TYPE_1 ( VAR_1 . METHOD_1 ( ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 ( is ) ) INIT = new TYPE_2 ( is ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME project ) NAME project ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( WHILE WHILE ( COND true ) COND true ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME line ) NAME line ( INIT = VAR_2 . METHOD_3 ( ) ) INIT = VAR_2 . METHOD_3 ( ) ) VAR VAR ( IF IF ( COND line != null ) COND line != null ( THEN THEN (  TYPE_4 . METHOD_4 ( VAR_3 , project , line ) )  TYPE_4 . METHOD_4 ( VAR_3 , project , line ) ) THEN THEN ( ELSE ELSE (  break ; )  break ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) WHILE WHILE ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_3 . METHOD_2 ( VAR_4 , VAR_5 ) )  VAR_3 . METHOD_2 ( VAR_4 , VAR_5 ) (  VAR_6 . METHOD_3 ( VAR_7 ) )  VAR_6 . METHOD_3 ( VAR_7 ) (  VAR_6 . METHOD_4 ( VAR_8 ) )  VAR_6 . METHOD_4 ( VAR_8 ) (  VAR_6 . METHOD_5 ( ) )  VAR_6 . METHOD_5 ( ) ( IF IF ( COND VAR_2 == 0 ) COND VAR_2 == 0 ( THEN THEN (  VAR_6 . METHOD_6 ( ) )  VAR_6 . METHOD_6 ( ) ) THEN THEN ( ELSE ELSE (  METHOD_7 ( VAR_1 , VAR_2 ) )  METHOD_7 ( VAR_1 , VAR_2 ) ) ELSE ELSE ) IF IF (  VAR_3 . METHOD_8 ( VAR_4 , ( ( VAR_5 ) + 1 ) ) )  VAR_3 . METHOD_8 ( VAR_4 , ( ( VAR_5 ) + 1 ) ) (  VAR_6 . METHOD_9 ( ) )  VAR_6 . METHOD_9 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME flags ) NAME flags ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( IF IF ( COND ( VAR_5 ) != null ) COND ( VAR_5 ) != null ( THEN THEN (  return VAR_5 . METHOD_1 ( VAR_1 , flags , VAR_2 , VAR_3 , VAR_4 ) ; )  return VAR_5 . METHOD_1 ( VAR_1 , flags , VAR_2 , VAR_3 , VAR_4 ) ; ) THEN THEN ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  METHOD_2 ( ) )  METHOD_2 ( ) ( SYNCHRONIZED SYNCHRONIZED (  VAR_6 )  VAR_6 ( BLOCK BLOCK ( IF IF ( COND METHOD_3 ( ) ) COND METHOD_3 ( ) ( THEN THEN (  return TYPE_2 . METHOD_4 ( VAR_7 , VAR_1 , flags , VAR_2 , VAR_3 , VAR_4 ) ; )  return TYPE_2 . METHOD_4 ( VAR_7 , VAR_1 , flags , VAR_2 , VAR_3 , VAR_4 ) ; ) THEN THEN ( ELSE ELSE (  return false ; )  return false ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER final ) MODIFIER final ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( ( ( pos ) != ( VAR_1 ) ) || ( ( METHOD_2 ( ) ) != ( - 1 ) ) ) && ( ( VAR_2 [ pos ] ) == CHAR_1 ) ) COND ( ( ( pos ) != ( VAR_1 ) ) || ( ( METHOD_2 ( ) ) != ( - 1 ) ) ) && ( ( VAR_2 [ pos ] ) == CHAR_1 ) ( THEN THEN (  ( pos ) ++ )  ( pos ) ++ ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME telephony ) NAME telephony ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( IF IF ( COND telephony == null ) COND telephony == null ( THEN THEN (  TYPE_2 . e ( VAR_1 . TAG , STRING_1 ) )  TYPE_2 . e ( VAR_1 . TAG , STRING_1 ) (  throw new java.lang.RuntimeException ( STRING_1 ) ; )  throw new java.lang.RuntimeException ( STRING_1 ) ; ) THEN THEN ) IF IF ( TRY TRY ( BLOCK BLOCK (  telephony . METHOD_3 ( VAR_2 , VAR_3 ) )  telephony . METHOD_3 ( VAR_2 , VAR_3 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME ex ) NAME ex ( BLOCK BLOCK (  TYPE_2 . e ( VAR_1 . TAG , STRING_2 , ex ) )  TYPE_2 . e ( VAR_1 . TAG , STRING_2 , ex ) (  ex . METHOD_4 ( ) )  ex . METHOD_4 ( ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME event ) NAME event ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<TYPE_2,TYPE_3> ) TYPE java.util.Map<TYPE_2,TYPE_3> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_4 . METHOD_2 ( project ) ) INIT = TYPE_4 . METHOD_2 ( project ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( IN new java.util.ArrayList < TYPE_2 > ( VAR_1 . METHOD_3 ( ) ) ) IN new java.util.ArrayList < TYPE_2 > ( VAR_1 . METHOD_3 ( ) ) ( BLOCK BLOCK ( IF IF ( COND METHOD_4 ( VAR_2 ) ) COND METHOD_4 ( VAR_2 ) ( THEN THEN (  VAR_1 . METHOD_5 ( VAR_2 ) )  VAR_1 . METHOD_5 ( VAR_2 ) (  TYPE_5 . METHOD_6 ( VAR_3 ) . METHOD_7 ( VAR_2 ) )  TYPE_5 . METHOD_6 ( VAR_3 ) . METHOD_7 ( VAR_2 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  android.util.Log.d ( VAR_2 . TAG , STRING_1 ) )  android.util.Log.d ( VAR_2 . TAG , STRING_1 ) ) THEN THEN ) IF IF ( VAR VAR ( TYPE android.content.Intent ) TYPE android.content.Intent ( NAME VAR_3 ) NAME VAR_3 ( INIT = new android.content.Intent ( VAR_4 ) ) INIT = new android.content.Intent ( VAR_4 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_5 ) NAME VAR_5 ( INIT = TYPE_1 . METHOD_2 ( this , 0 , VAR_3 , 0 ) ) INIT = TYPE_1 . METHOD_2 ( this , 0 , VAR_3 , 0 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_6 ) NAME VAR_6 ( INIT = ( ( TYPE_2 ) ( this . METHOD_3 ( VAR_7 ) ) ) ) INIT = ( ( TYPE_2 ) ( this . METHOD_3 ( VAR_7 ) ) ) ) VAR VAR (  VAR_5 . METHOD_4 ( ) )  VAR_5 . METHOD_4 ( ) (  VAR_6 . METHOD_4 ( VAR_5 ) )  VAR_6 . METHOD_4 ( VAR_5 ) (  VAR_8 = false )  VAR_8 = false ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE android.os.Bundle ) TYPE android.os.Bundle ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  super . METHOD_1 ( VAR_1 ) )  super . METHOD_1 ( VAR_1 ) (  METHOD_2 ( VAR_2 ) )  METHOD_2 ( VAR_2 ) (  METHOD_3 ( ) )  METHOD_3 ( ) (  METHOD_4 ( VAR_3 , VAR_4 , ( - 1 ) ) )  METHOD_4 ( VAR_3 , VAR_4 , ( - 1 ) ) (  METHOD_5 ( ) . METHOD_6 ( false ) )  METHOD_5 ( ) . METHOD_6 ( false ) (  VAR_5 = new TYPE_1 ( this , METHOD_7 ( ) ) )  VAR_5 = new TYPE_1 ( this , METHOD_7 ( ) ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_6 ) NAME VAR_6 ( INIT = ( ( TYPE_2 ) ( METHOD_8 ( VAR_7 ) ) ) ) INIT = ( ( TYPE_2 ) ( METHOD_8 ( VAR_7 ) ) ) ) VAR VAR (  VAR_6 . METHOD_9 ( VAR_5 ) )  VAR_6 . METHOD_9 ( VAR_5 ) (  VAR_8 = 0 )  VAR_8 = 0 (  VAR_9 = new TYPE_3 ( ) )  VAR_9 = new TYPE_3 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  TYPE_1 . METHOD_1 ( project , VAR_1 , VAR_2 , callback , false , true , false ) )  TYPE_1 . METHOD_1 ( project , VAR_1 , VAR_2 , callback , false , true , false ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.IllegalArgumentException ) TYPE java.lang.IllegalArgumentException ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_3 . set ( new TYPE_2 ( e.getMessage ( ) , TYPE_3 . METHOD_2 ( STRING_1 , VAR_4 ) ) ) )  VAR_3 . set ( new TYPE_2 ( e.getMessage ( ) , TYPE_3 . METHOD_2 ( STRING_1 , VAR_4 ) ) ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ! ( METHOD_2 ( ) ) ) COND ! ( METHOD_2 ( ) ) ( THEN THEN (  TYPE_1 . METHOD_3 ( TYPE_2 . TAG , STRING_1 ) )  TYPE_1 . METHOD_3 ( TYPE_2 . TAG , STRING_1 ) (  return ; )  return ; ) THEN THEN ) IF IF (  assertTrue ( TYPE_2 . METHOD_4 ( VAR_1 ) ) )  assertTrue ( TYPE_2 . METHOD_4 ( VAR_1 ) ) (  METHOD_5 ( VAR_2 , INT_1 , INT_2 , 1 ) )  METHOD_5 ( VAR_2 , INT_1 , INT_2 , 1 ) ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_2 . METHOD_6 ( VAR_1 ) ) INIT = TYPE_2 . METHOD_6 ( VAR_1 ) ) VAR VAR ( IF IF ( COND ! VAR_3 ) COND ! VAR_3 ( THEN THEN (  TYPE_1 . METHOD_3 ( TYPE_2 . TAG , STRING_2 ) )  TYPE_1 . METHOD_3 ( TYPE_2 . TAG , STRING_2 ) (  return ; )  return ; ) THEN THEN ) IF IF (  METHOD_5 ( VAR_2 , INT_1 , INT_2 , 4 ) )  METHOD_5 ( VAR_2 , INT_1 , INT_2 , 4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME in ) NAME in ( INIT = null ) INIT = null ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  in = new TYPE_1 ( new TYPE_2 ( VAR_1 ) ) )  in = new TYPE_1 ( new TYPE_2 ( VAR_1 ) ) (  return in . METHOD_2 ( ) . METHOD_3 ( ) ; )  return in . METHOD_2 ( ) . METHOD_3 ( ) ; ) BLOCK BLOCK ( FINALLY FINALLY ( IF IF ( COND in != null ) COND in != null ( THEN THEN (  in . METHOD_4 ( ) )  in . METHOD_4 ( ) ) THEN THEN ) IF IF ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( PARAMS PARAMS ( VAR VAR ( TYPE com.android.jack.ir.ast.JMethod ) TYPE com.android.jack.ir.ast.JMethod ( NAME method ) NAME method ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( ( method . METHOD_1 ( ) . METHOD_2 ( ) ) || ( method . METHOD_3 ( ) ) ) || ( method . METHOD_4 ( ) ) ) || ( ! ( VAR_1 . METHOD_5 ( this . METHOD_6 ( ) , method ) ) ) ) COND ( ( ( method . METHOD_1 ( ) . METHOD_2 ( ) ) || ( method . METHOD_3 ( ) ) ) || ( method . METHOD_4 ( ) ) ) || ( ! ( VAR_1 . METHOD_5 ( this . METHOD_6 ( ) , method ) ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( method ) ) INIT = new TYPE_1 ( method ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_2 ( VAR_2 ) ) INIT = new TYPE_2 ( VAR_2 ) ) VAR VAR (  VAR_3 . METHOD_5 ( method ) )  VAR_3 . METHOD_5 ( method ) (  VAR_2 . METHOD_7 ( ) )  VAR_2 . METHOD_7 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME method ) NAME method ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( method . METHOD_2 ( ) . METHOD_3 ( ) ) > 0 ) COND ( method . METHOD_2 ( ) . METHOD_3 ( ) ) > 0 ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = method . METHOD_4 ( ) ) INIT = method . METHOD_4 ( ) ) VAR VAR ( IF IF ( COND ! ( VAR_1 . METHOD_5 ( VAR_2 ) ) ) COND ! ( VAR_1 . METHOD_5 ( VAR_2 ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  android.util.Log.v ( TAG , STRING_1 ) )  android.util.Log.v ( TAG , STRING_1 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_2 ( ) ) INIT = VAR_2 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME device ) NAME device ( INIT = TYPE_2 . METHOD_3 ( VAR_1 ) ) INIT = TYPE_2 . METHOD_3 ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = device . METHOD_4 ( ( STRING_2 + ( VAR_4 ) ) ) ) INIT = device . METHOD_4 ( ( STRING_2 + ( VAR_4 ) ) ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_3 . METHOD_5 ( STRING_3 ) ) INIT = VAR_3 . METHOD_5 ( STRING_3 ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_6 ) NAME VAR_6 ( IN VAR_5 ) IN VAR_5 ( BLOCK BLOCK ( IF IF ( COND VAR_6 . METHOD_6 ( STRING_4 ) ) COND VAR_6 . METHOD_6 ( STRING_4 ) ( THEN THEN (  device . METHOD_4 ( java.lang.String.format ( STRING_5 , VAR_4 , VAR_6 ) ) )  device . METHOD_4 ( java.lang.String.format ( STRING_5 , VAR_4 , VAR_6 ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 = new java.io.File ( TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) , STRING_1 ) )  VAR_1 = new java.io.File ( TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) , STRING_1 ) ( IF IF ( COND VAR_1 . METHOD_4 ( ) ) COND VAR_1 . METHOD_4 ( ) ( THEN THEN (  TYPE_2 . METHOD_5 ( VAR_1 ) )  TYPE_2 . METHOD_5 ( VAR_1 ) ) THEN THEN ) IF IF (  VAR_2 = new TYPE_3 ( VAR_1 ) )  VAR_2 = new TYPE_3 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . println ( STRING_1 ) )  VAR_1 . println ( STRING_1 ) (  VAR_2 . METHOD_2 ( VAR_3 ) )  VAR_2 . METHOD_2 ( VAR_3 ) ( IF IF ( COND ! ( METHOD_3 ( ) ) ) COND ! ( METHOD_3 ( ) ) ( THEN THEN (  VAR_2 . METHOD_4 ( VAR_4 ) )  VAR_2 . METHOD_4 ( VAR_4 ) (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_5 ) NAME VAR_5 ( INIT = STRING_2 ) INIT = STRING_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_6 ) NAME VAR_6 ( INIT = METHOD_5 ( VAR_5 , true , false ) ) INIT = METHOD_5 ( VAR_5 , true , false ) ) VAR VAR (  METHOD_6 ( VAR_6 ) )  METHOD_6 ( VAR_6 ) (  VAR_1 . println ( STRING_3 ) )  VAR_1 . println ( STRING_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ! ( TYPE_1 . METHOD_2 ( VAR_1 ) ) ) COND ! ( TYPE_1 . METHOD_2 ( VAR_1 ) ) ( THEN THEN (  android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) )  android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME service ) NAME service ( INIT = METHOD_3 ( ) ) INIT = METHOD_3 ( ) ) VAR VAR ( IF IF ( COND service == null ) COND service == null ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  return service . METHOD_1 ( ) ; )  return service . METHOD_1 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( VAR_2 ) ) INIT = METHOD_2 ( VAR_2 ) ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < ( VAR_3 ) ) COND i < ( VAR_3 ) ( UPDATE UPDATE (  ++ i )  ++ i ) UPDATE UPDATE ( BLOCK BLOCK (  assertEquals ( new TYPE_2 ( i ) , ( ( TYPE_2 ) ( VAR_1 . METHOD_3 ( ) ) ) ) )  assertEquals ( new TYPE_2 ( i ) , ( ( TYPE_2 ) ( VAR_1 . METHOD_3 ( ) ) ) ) ) BLOCK BLOCK ) FOR FOR ( TRY TRY ( BLOCK BLOCK (  VAR_1 . METHOD_3 ( ) )  VAR_1 . METHOD_3 ( ) (  METHOD_4 ( ) )  METHOD_4 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2<TYPE_3> ) TYPE TYPE_2<TYPE_3> ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_2 ( VAR_3 ) ) INIT = VAR_1 . METHOD_2 ( VAR_3 ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK ( IF IF ( COND ( ( VAR_4 . METHOD_3 ( ) ) == 1 ) && ( VAR_4 . METHOD_4 ( 0 ) . getName ( ) . equals ( VAR_5 ) ) ) COND ( ( VAR_4 . METHOD_3 ( ) ) == 1 ) && ( VAR_4 . METHOD_4 ( 0 ) . getName ( ) . equals ( VAR_5 ) ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  this . VAR_1 = VAR_1 )  this . VAR_1 = VAR_1 ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN (  this . VAR_2 = VAR_2 )  this . VAR_2 = VAR_2 ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( ( TYPE_2 ) ( VAR_4 . get ( TYPE_3 . METHOD_2 ( VAR_1 ) ) ) ) ) INIT = ( ( TYPE_2 ) ( VAR_4 . get ( TYPE_3 . METHOD_2 ( VAR_1 ) ) ) ) ) VAR VAR ( IF IF ( COND VAR_3 != null ) COND VAR_3 != null ( THEN THEN ( TRY TRY ( BLOCK BLOCK (  METHOD_1 ( VAR_3 , VAR_2 ) )  METHOD_1 ( VAR_3 , VAR_2 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_5 ( STRING_1 ) ; )  throw new TYPE_5 ( STRING_1 ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) THEN THEN ( ELSE ELSE (  throw new TYPE_5 ( STRING_2 ) ; )  throw new TYPE_5 ( STRING_2 ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( VAR_3 , new TYPE_2 ( STRING_1 ) , VAR_4 , new TYPE_2 ( STRING_2 ) , VAR_5 ) { public java.lang.String METHOD_2 ( ) { return VAR_1 ; } protected void METHOD_3 ( ) { } } ) INIT = new TYPE_1 ( VAR_3 , new TYPE_2 ( STRING_1 ) , VAR_4 , new TYPE_2 ( STRING_2 ) , VAR_5 ) { public java.lang.String METHOD_2 ( ) { return VAR_1 ; } protected void METHOD_3 ( ) { } } ) VAR VAR ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_2 ) NAME METHOD_2 ( BLOCK BLOCK (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD ( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_3 ) NAME METHOD_3 ( BLOCK BLOCK ) BLOCK BLOCK ) METHOD METHOD (  VAR_2 . METHOD_4 ( VAR_6 , new TYPE_2 ( STRING_3 ) , STRING_4 ) )  VAR_2 . METHOD_4 ( VAR_6 , new TYPE_2 ( STRING_3 ) , STRING_4 ) (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME config ) NAME config ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME status ) NAME status ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  log ( ( ( ( STRING_1 + config ) + STRING_2 ) + status ) ) )  log ( ( ( ( STRING_1 + config ) + STRING_2 ) + status ) ) ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME callback ) NAME callback ( INIT = VAR_2 . get ( config ) . VAR_3 ) INIT = VAR_2 . get ( config ) . VAR_3 ) VAR VAR ( IF IF ( COND callback == null ) COND callback == null ( THEN THEN (  android.util.Log.e ( VAR_4 . TAG , STRING_3 ) )  android.util.Log.e ( VAR_4 . TAG , STRING_3 ) ) THEN THEN ) IF IF ( TRY TRY ( BLOCK BLOCK (  callback . METHOD_2 ( config , status ) )  callback . METHOD_2 ( config , status ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME e ) NAME e ( BLOCK BLOCK (  android.util.Log.e ( VAR_4 . TAG , ( STRING_4 + e ) ) )  android.util.Log.e ( VAR_4 . TAG , ( STRING_4 + e ) ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME provider ) NAME provider ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME size ) NAME size ( INIT = VAR_2 . size ( ) ) INIT = VAR_2 . size ( ) ) VAR VAR ( IF IF ( COND ( VAR_1 < 1 ) || ( VAR_1 > size ) ) COND ( VAR_1 < 1 ) || ( VAR_1 > size ) ( THEN THEN (  VAR_1 = size + 1 )  VAR_1 = size + 1 ) THEN THEN ) IF IF (  VAR_2 . METHOD_2 ( ( VAR_1 - 1 ) , provider ) )  VAR_2 . METHOD_2 ( ( VAR_1 - 1 ) , provider ) (  VAR_3 . METHOD_3 ( provider . getName ( ) , provider ) )  VAR_3 . METHOD_3 ( provider . getName ( ) , provider ) (  TYPE_2 . METHOD_4 ( ) )  TYPE_2 . METHOD_4 ( ) (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ! ( METHOD_2 ( true ) ) ) COND ! ( METHOD_2 ( true ) ) ( THEN THEN (  VAR_1 = VAR_2 )  VAR_1 = VAR_2 (  transitionTo ( VAR_3 ) )  transitionTo ( VAR_3 ) (  return ; )  return ; ) THEN THEN ) IF IF ( TRY TRY ( BLOCK BLOCK (  VAR_4 . METHOD_3 ( VAR_5 ) )  VAR_4 . METHOD_3 ( VAR_5 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ( BLOCK BLOCK (  android.util.Log.e ( VAR_6 . TAG , ( STRING_1 + ( e.toString ( ) ) ) ) )  android.util.Log.e ( VAR_6 . TAG , ( STRING_1 + ( e.toString ( ) ) ) ) (  VAR_1 = VAR_7 )  VAR_1 = VAR_7 (  transitionTo ( VAR_3 ) )  transitionTo ( VAR_3 ) (  return ; )  return ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ( IF IF ( COND ! ( VAR_8 . start ( ) ) ) COND ! ( VAR_8 . start ( ) ) ( THEN THEN (  android.util.Log.e ( VAR_6 . TAG , STRING_2 ) )  android.util.Log.e ( VAR_6 . TAG , STRING_2 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME request ) NAME request ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR (  return new TYPE_5 ( VAR_2 , new TYPE_6 ( VAR_2 , VAR_1 , new TYPE_7 ( VAR_2 ) ) , METHOD_3 ( VAR_2 , request ) , null ) ; )  return new TYPE_5 ( VAR_2 , new TYPE_6 ( VAR_2 , VAR_1 , new TYPE_7 ( VAR_2 ) ) , METHOD_3 ( VAR_2 , request ) , null ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME provider ) NAME provider ( INIT = TYPE_1 . provider ( ) ) INIT = TYPE_1 . provider ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = provider . METHOD_2 ( 2 , TYPE_3 . METHOD_3 ( ) ) ) INIT = provider . METHOD_2 ( 2 , TYPE_3 . METHOD_3 ( ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_4 . METHOD_4 ( VAR_1 ) ) INIT = TYPE_4 . METHOD_4 ( VAR_1 ) ) VAR VAR (  METHOD_5 ( VAR_2 . METHOD_6 ( ) ) )  METHOD_5 ( VAR_2 . METHOD_6 ( ) ) (  VAR_2 . METHOD_7 ( new TYPE_5 ( 0 ) ) )  VAR_2 . METHOD_7 ( new TYPE_5 ( 0 ) ) (  assertNotNull ( VAR_2 . METHOD_6 ( ) ) )  assertNotNull ( VAR_2 . METHOD_6 ( ) ) (  VAR_2 . METHOD_8 ( ) )  VAR_2 . METHOD_8 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int[] ) TYPE int[] ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  android.util.Log.d ( VAR_2 , ( STRING_1 + ( ( VAR_1 [ 0 ] ) != 0 ? STRING_2 : STRING_3 ) ) ) )  android.util.Log.d ( VAR_2 , ( STRING_1 + ( ( VAR_1 [ 0 ] ) != 0 ? STRING_2 : STRING_3 ) ) ) (  this . VAR_3 . METHOD_2 ( ( ( VAR_1 [ 0 ] ) != 0 ) ) )  this . VAR_3 . METHOD_2 ( ( ( VAR_1 [ 0 ] ) != 0 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected static final ) MODIFIER protected static final ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME obj ) NAME obj ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1[] ) TYPE TYPE_1[] ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 ) INIT = VAR_2 ) VAR VAR ( SYNCHRONIZED SYNCHRONIZED (  VAR_1 )  VAR_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME p ) NAME p ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < ( VAR_3 ) ) COND i < ( VAR_3 ) ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK (  p = VAR_1 [ i ] )  p = VAR_1 [ i ] ( IF IF ( COND p != null ) COND p != null ( THEN THEN (  VAR_1 [ i ] = null )  VAR_1 [ i ] = null ( IF IF ( COND VAR_4 ) COND VAR_4 ( THEN THEN (  VAR_5 = new java.lang.RuntimeException ( ) )  VAR_5 = new java.lang.RuntimeException ( ) ) THEN THEN ) IF IF (  p . METHOD_2 ( obj ) )  p . METHOD_2 ( obj ) (  return p ; )  return p ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR FOR ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED (  return new TYPE_1 ( obj ) ; )  return new TYPE_1 ( obj ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME m ) NAME m ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME v ) NAME v ) VAR VAR ( VAR VAR ( TYPE short ) TYPE short ( NAME value ) NAME value ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = false ) INIT = false ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE short ) TYPE short ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( v == null ) ? ( ( short ) ( m . METHOD_2 ( ) ) ) : ( ( short ) ( m . METHOD_2 ( v ) ) ) ) INIT = ( v == null ) ? ( ( short ) ( m . METHOD_2 ( ) ) ) : ( ( short ) ( m . METHOD_2 ( v ) ) ) ) VAR VAR (  TYPE_3 . assertTrue ( ( VAR_3 == value ) ) )  TYPE_3 . assertTrue ( ( VAR_3 == value ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_2 = true )  VAR_2 = true ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  TYPE_3 . assertEquals ( VAR_2 , VAR_1 ) )  TYPE_3 . assertEquals ( VAR_2 , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  android.util.Log . i ( VAR_1 . TAG , STRING_1 ) )  android.util.Log . i ( VAR_1 . TAG , STRING_1 ) ( VAR VAR ( TYPE TYPE_1<java.lang.Integer,java.lang.Integer> ) TYPE TYPE_1<java.lang.Integer,java.lang.Integer> ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( IF IF ( COND ( ( VAR_3 ) >= INT_1 ) && ( ( VAR_4 ) >= INT_2 ) ) COND ( ( VAR_3 ) >= INT_1 ) && ( ( VAR_4 ) >= INT_2 ) ( THEN THEN (  METHOD_3 ( INT_1 , INT_2 , false , false ) )  METHOD_3 ( INT_1 , INT_2 , false , false ) ) THEN THEN ( ELSE ELSE (  android.util.Log.w ( VAR_1 . TAG , STRING_2 ) )  android.util.Log.w ( VAR_1 . TAG , STRING_2 ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static final ) MODIFIER private static final ( RETURN long ) RETURN long ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  return VAR_1 . time ; )  return VAR_1 . time ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( ( TYPE_1 ) ( VAR_1 . METHOD_2 ( ) ) ) ) INIT = ( ( TYPE_1 ) ( VAR_1 . METHOD_2 ( ) ) ) ) VAR VAR (  VAR_3 . METHOD_3 ( true ) )  VAR_3 . METHOD_3 ( true ) (  return VAR_3 . METHOD_4 ( ) ; )  return VAR_3 . METHOD_4 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME context ) NAME context ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME location ) NAME location ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME data ) NAME data ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 == ( VAR_4 ) ) COND VAR_1 == ( VAR_4 ) ( THEN THEN (  assertNotNull ( VAR_3 , TYPE_5 . METHOD_2 ( VAR_1 , VAR_3 , VAR_5 ) ) )  assertNotNull ( VAR_3 , TYPE_5 . METHOD_2 ( VAR_1 , VAR_3 , VAR_5 ) ) (  assertNotNull ( VAR_3 , TYPE_5 . METHOD_3 ( VAR_1 , VAR_3 , VAR_5 ) ) )  assertNotNull ( VAR_3 , TYPE_5 . METHOD_3 ( VAR_1 , VAR_3 , VAR_5 ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( IF IF ( COND VAR_1 == ( VAR_3 ) ) COND VAR_1 == ( VAR_3 ) ( THEN THEN (  VAR_2 = VAR_4 )  VAR_2 = VAR_4 ) THEN THEN ( ELSE ELSE (  VAR_2 = VAR_5 )  VAR_2 = VAR_5 ( IF IF ( COND VAR_1 == ( VAR_6 ) ) COND VAR_1 == ( VAR_6 ) ( THEN THEN (  VAR_2 -= VAR_7 )  VAR_2 -= VAR_7 ) THEN THEN ( ELSE ELSE ( IF IF ( COND VAR_1 != ( VAR_8 ) ) COND VAR_1 != ( VAR_8 ) ( THEN THEN (  VAR_2 -= VAR_9 )  VAR_2 -= VAR_9 ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME pos ) NAME pos ( INIT = METHOD_2 ( true ) ) INIT = METHOD_2 ( true ) ) VAR VAR ( IF IF ( COND pos >= 0 ) COND pos >= 0 ( THEN THEN (  VAR_2 = VAR_3 )  VAR_2 = VAR_3 ( IF IF ( COND VAR_4 ) COND VAR_4 ( THEN THEN (  android.util.Log.v ( TYPE_2 . TAG , ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + pos ) ) )  android.util.Log.v ( TYPE_2 . TAG , ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + pos ) ) ) THEN THEN ) IF IF (  VAR_5 . METHOD_3 ( pos , VAR_1 ) )  VAR_5 . METHOD_3 ( pos , VAR_1 ) (  METHOD_4 ( ( pos + 1 ) ) )  METHOD_4 ( ( pos + 1 ) ) (  return ; )  return ; ) THEN THEN ) IF IF (  VAR_2 = null )  VAR_2 = null (  METHOD_5 ( VAR_1 , true ) )  METHOD_5 ( VAR_1 , true ) (  METHOD_4 ( pos ) )  METHOD_4 ( pos ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME info ) NAME info ( INIT = new TYPE_2 ( VAR_1 , VAR_2 ) ) INIT = new TYPE_2 ( VAR_1 , VAR_2 ) ) VAR VAR (  VAR_3 = VAR_4 )  VAR_3 = VAR_4 (  VAR_5 = VAR_6 )  VAR_5 = VAR_6 (  VAR_7 = VAR_8 )  VAR_7 = VAR_8 (  VAR_9 = VAR_10 )  VAR_9 = VAR_10 ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_11 ) NAME VAR_11 ( INIT = VAR_12 ) INIT = VAR_12 ) VAR VAR (  VAR_13 = VAR_14 . METHOD_2 ( ) . METHOD_3 ( VAR_11 ) )  VAR_13 = VAR_14 . METHOD_2 ( ) . METHOD_3 ( VAR_11 ) (  VAR_15 = TYPE_3 . METHOD_4 ( VAR_13 , VAR_14 . METHOD_2 ( ) . METHOD_3 ( VAR_16 ) ) )  VAR_15 = TYPE_3 . METHOD_4 ( VAR_13 , VAR_14 . METHOD_2 ( ) . METHOD_3 ( VAR_16 ) ) (  VAR_17 = TYPE_3 . METHOD_4 ( VAR_13 , VAR_14 . METHOD_2 ( ) . METHOD_3 ( VAR_18 ) ) )  VAR_17 = TYPE_3 . METHOD_4 ( VAR_13 , VAR_14 . METHOD_2 ( ) . METHOD_3 ( VAR_18 ) ) (  METHOD_5 ( VAR_19 ) )  METHOD_5 ( VAR_19 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( ) , TYPE_2 . METHOD_4 ( ) ) ) INIT = TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( ) , TYPE_2 . METHOD_4 ( ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME p ) NAME p ( INIT = TYPE_3 . METHOD_2 ( VAR_1 , new TYPE_4 ( ) { void METHOD_5 ( TYPE_5 VAR_2 , TYPE_5 server ) { server . METHOD_6 ( true ) ; } } ) ) INIT = TYPE_3 . METHOD_2 ( VAR_1 , new TYPE_4 ( ) { void METHOD_5 ( TYPE_5 VAR_2 , TYPE_5 server ) { server . METHOD_6 ( true ) ; } } ) ) VAR VAR ( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_5 ) NAME METHOD_5 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME server ) NAME server ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  server . METHOD_6 ( true ) )  server . METHOD_6 ( true ) ) BLOCK BLOCK ) METHOD METHOD (  METHOD_7 ( p ) )  METHOD_7 ( p ) (  VAR_1 . METHOD_8 ( ) )  VAR_1 . METHOD_8 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME test ) NAME test ( BLOCK BLOCK (  METHOD_1 ( ( ( FLOAT_1 - ( cts ) ) - ( VAR_1 ) ) ) )  METHOD_1 ( ( ( FLOAT_1 - ( cts ) ) - ( VAR_1 ) ) ) ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME result ) NAME result ( INIT = new java.util.ArrayList ( TYPE_1 . METHOD_2 ( ) . VAR_2 ) ) INIT = new java.util.ArrayList ( TYPE_1 . METHOD_2 ( ) . VAR_2 ) ) VAR VAR ( IF IF ( COND ( ( result . size ( ) ) > 0 ) && ( result . METHOD_3 ( VAR_3 ) ) ) COND ( ( result . size ( ) ) > 0 ) && ( result . METHOD_3 ( VAR_3 ) ) ( THEN THEN (  status = VAR_4 )  status = VAR_4 ) THEN THEN ( ELSE ELSE (  METHOD_4 ( ) )  METHOD_4 ( ) (  status = VAR_5 )  status = VAR_5 ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_4 ) IN VAR_4 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_3 . METHOD_2 ( ) ) INIT = VAR_3 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_6 ) NAME VAR_6 ( INIT = VAR_1 . equals ( VAR_5 ) ) INIT = VAR_1 . equals ( VAR_5 ) ) VAR VAR ( IF IF ( COND VAR_6 ) COND VAR_6 ( THEN THEN (  TYPE_2 . log ( ( VAR_1 + STRING_1 ) ) )  TYPE_2 . log ( ( VAR_1 + STRING_1 ) ) ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_5 == null ) || VAR_6 ) COND ( VAR_5 == null ) || VAR_6 ( THEN THEN ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  VAR_3 . METHOD_3 ( ) )  VAR_3 . METHOD_3 ( ) ) THEN THEN ) IF IF (  VAR_3 . METHOD_4 ( ) )  VAR_3 . METHOD_4 ( ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME device ) NAME device ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = device . METHOD_2 ( new TYPE_3 ( ) . METHOD_3 ( STRING_1 ) ) ) INIT = device . METHOD_2 ( new TYPE_3 ( ) . METHOD_3 ( STRING_1 ) ) ) VAR VAR (  VAR_3 . METHOD_4 ( VAR_1 ) )  VAR_3 . METHOD_4 ( VAR_1 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = device . METHOD_2 ( new TYPE_3 ( ) . METHOD_5 ( VAR_2 ) ) ) INIT = device . METHOD_2 ( new TYPE_3 ( ) . METHOD_5 ( VAR_2 ) ) ) VAR VAR (  VAR_4 . METHOD_6 ( INT_1 ) )  VAR_4 . METHOD_6 ( INT_1 ) (  TYPE_4 . assertTrue ( VAR_4 . METHOD_7 ( ) ) )  TYPE_4 . assertTrue ( VAR_4 . METHOD_7 ( ) ) (  METHOD_8 ( device , VAR_1 . length ( ) ) )  METHOD_8 ( device , VAR_1 . length ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 = false )  VAR_1 = false ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = true ) INIT = true ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_4 . METHOD_2 ( ) ) IN VAR_4 . METHOD_2 ( ) ( BLOCK BLOCK (  VAR_2 &= VAR_3 . METHOD_3 ( true ) )  VAR_2 &= VAR_3 . METHOD_3 ( true ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( IF IF ( COND ! ( VAR_5 . METHOD_4 ( VAR_6 . METHOD_5 ( ) , VAR_6 . METHOD_6 ( ) , VAR_6 . METHOD_7 ( ) . METHOD_8 ( ) ) ) ) COND ! ( VAR_5 . METHOD_4 ( VAR_6 . METHOD_5 ( ) , VAR_6 . METHOD_6 ( ) , VAR_6 . METHOD_7 ( ) . METHOD_8 ( ) ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  VAR_1 = ! ( VAR_7 . METHOD_9 ( ) ) )  VAR_1 = ! ( VAR_7 . METHOD_9 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.Object[] ) TYPE java.lang.Object[] ( NAME options ) NAME options ( INIT = new java.lang.Object [ ] { VAR_3 } ) INIT = new java.lang.Object [ ] { VAR_3 } ) VAR VAR (  TYPE_1 . METHOD_2 ( null , VAR_1 , VAR_2 , VAR_4 , VAR_5 , null , options , options [ 0 ] ) )  TYPE_1 . METHOD_2 ( null , VAR_1 , VAR_2 , VAR_4 , VAR_5 , null , options , options [ 0 ] ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( ) . METHOD_2 ( INT_1 ) . build ( ) ) INIT = new TYPE_2 ( ) . METHOD_2 ( INT_1 ) . build ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR (  VAR_3 . METHOD_3 ( VAR_4 , VAR_2 , VAR_5 , VAR_1 ) )  VAR_3 . METHOD_3 ( VAR_4 , VAR_2 , VAR_5 , VAR_1 ) (  org.mockito.Mockito.verify ( VAR_6 ) . METHOD_3 ( org.mockito.Matchers . METHOD_4 ( ) , org.mockito.Matchers . METHOD_4 ( ) , org.mockito.Matchers . METHOD_4 ( ) , org.mockito.Matchers.eq ( VAR_2 ) , org.mockito.Matchers.eq ( VAR_5 ) , org.mockito.Matchers.eq ( VAR_1 ) ) )  org.mockito.Mockito.verify ( VAR_6 ) . METHOD_3 ( org.mockito.Matchers . METHOD_4 ( ) , org.mockito.Matchers . METHOD_4 ( ) , org.mockito.Matchers . METHOD_4 ( ) , org.mockito.Matchers.eq ( VAR_2 ) , org.mockito.Matchers.eq ( VAR_5 ) , org.mockito.Matchers.eq ( VAR_1 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public final ) MODIFIER public final ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( STRING_1 , STRING_2 ) ) INIT = new TYPE_1 ( STRING_1 , STRING_2 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 ( VAR_1 ) ) INIT = new TYPE_2 ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_3 ( STRING_3 , VAR_2 , 10 , 12 , INT_1 , INT_2 ) ) INIT = new TYPE_3 ( STRING_3 , VAR_2 , 10 , 12 , INT_1 , INT_2 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_4 . METHOD_2 ( VAR_3 ) . METHOD_3 ( ) ) INIT = TYPE_4 . METHOD_2 ( VAR_3 ) . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_5 ) NAME VAR_5 ( INIT = m . METHOD_2 ( VAR_4 ) ) INIT = m . METHOD_2 ( VAR_4 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_6 ) NAME VAR_6 ( INIT = m . METHOD_2 ( VAR_4 ) ) INIT = m . METHOD_2 ( VAR_4 ) ) VAR VAR (  METHOD_4 ( VAR_6 , VAR_5 ) )  METHOD_4 ( VAR_6 , VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_4 ) NAME VAR_4 ( INIT = new java.io.File ( VAR_5 , VAR_6 ) ) INIT = new java.io.File ( VAR_5 , VAR_6 ) ) VAR VAR (  VAR_4 = new java.io.File ( VAR_4 , VAR_1 ) )  VAR_4 = new java.io.File ( VAR_4 , VAR_1 ) ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN (  VAR_4 = new java.io.File ( VAR_4 , VAR_2 ) )  VAR_4 = new java.io.File ( VAR_4 , VAR_2 ) ) THEN THEN ) IF IF (  VAR_4 = new java.io.File ( VAR_4 , VAR_3 ) )  VAR_4 = new java.io.File ( VAR_4 , VAR_3 ) (  METHOD_2 ( VAR_4 , VAR_2 , VAR_3 ) )  METHOD_2 ( VAR_4 , VAR_2 , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( i < 0 ) || ( i > ( ( VAR_1 ) - 1 ) ) ) COND ( i < 0 ) || ( i > ( ( VAR_1 ) - 1 ) ) ( THEN THEN (  throw new java.lang.RuntimeException ( ) ; )  throw new java.lang.RuntimeException ( ) ; ) THEN THEN ) IF IF ( IF IF ( COND i > ( ( VAR_1 ) - 1 ) ) COND i > ( ( VAR_1 ) - 1 ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  value [ ( i > > > 5 ) ] ^= VAR_2 [ ( i & INT_1 ) ] )  value [ ( i > > > 5 ) ] ^= VAR_2 [ ( i & INT_1 ) ] ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . i ( STRING_1 , STRING_2 , VAR_1 . size ( ) , VAR_2 ) )  TYPE_1 . i ( STRING_1 , STRING_2 , VAR_1 . size ( ) , VAR_2 ) ( IF IF ( COND ! ( VAR_1 . METHOD_2 ( ) ) ) COND ! ( VAR_1 . METHOD_2 ( ) ) ( THEN THEN ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = STRING_3 ) INIT = STRING_3 ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE int ) TYPE int ( NAME id ) NAME id ( IN VAR_1 . METHOD_3 ( ) ) IN VAR_1 . METHOD_3 ( ) ( BLOCK BLOCK (  VAR_3 = ( VAR_3 + id ) + STRING_4 )  VAR_3 = ( VAR_3 + id ) + STRING_4 ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  TYPE_1 . i ( STRING_1 , ( STRING_5 + VAR_3 ) ) )  TYPE_1 . i ( STRING_1 , ( STRING_5 + VAR_3 ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List ) TYPE java.util.List ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 . size ( ) ) > INT_1 ) COND ( VAR_1 . size ( ) ) > INT_1 ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < 10 ) COND i < 10 ( UPDATE UPDATE (  ++ i )  ++ i ) UPDATE UPDATE ( BLOCK BLOCK (  result . append ( ( ( char ) ( VAR_2 . METHOD_2 ( INT_2 ) ) ) ) )  result . append ( ( ( char ) ( VAR_2 . METHOD_2 ( INT_2 ) ) ) ) ) BLOCK BLOCK ) FOR FOR (  VAR_1 . METHOD_3 ( result . toString ( ) ) )  VAR_1 . METHOD_3 ( result . toString ( ) ) (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME w ) NAME w ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME h ) NAME h ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME d ) NAME d ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME data ) NAME data ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  mRS . METHOD_2 ( ) )  mRS . METHOD_2 ( ) (  METHOD_3 ( VAR_1 , VAR_2 , VAR_3 , w , h , d ) )  METHOD_3 ( VAR_1 , VAR_2 , VAR_3 , w , h , d ) (  mRS . METHOD_4 ( METHOD_5 ( ) , VAR_1 , VAR_2 , VAR_3 , VAR_4 , w , h , d , data , data . length ) )  mRS . METHOD_4 ( METHOD_5 ( ) , VAR_1 , VAR_2 , VAR_3 , VAR_4 , w , h , d , data , data . length ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_1 ) ) COND ! ( VAR_1 ) ( THEN THEN (  METHOD_2 ( ) )  METHOD_2 ( ) ) THEN THEN ) IF IF ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ( INIT = ( ( TYPE_1 ) ( super . METHOD_1 ( ) ) ) ) INIT = ( ( TYPE_1 ) ( super . METHOD_1 ( ) ) ) ) VAR VAR (  VAR_2 = VAR_3 . METHOD_1 ( ) )  VAR_2 = VAR_3 . METHOD_1 ( ) (  result . METHOD_3 ( ) )  result . METHOD_3 ( ) (  return result ; )  return result ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_3 ( ) ; )  throw new TYPE_3 ( ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME context ) NAME context ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND context . METHOD_2 ( ) . METHOD_3 ( VAR_2 , VAR_1 ) ) COND context . METHOD_2 ( ) . METHOD_3 ( VAR_2 , VAR_1 ) ( THEN THEN (  VAR_3 = true )  VAR_3 = true (  return ; )  return ; ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_4 ) == null ) COND ( VAR_4 ) == null ( THEN THEN (  VAR_4 = new java.util.ArrayList < TYPE_2 > ( ) )  VAR_4 = new java.util.ArrayList < TYPE_2 > ( ) ) THEN THEN ) IF IF (  VAR_4 . METHOD_4 ( VAR_1 ) )  VAR_4 . METHOD_4 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_1 ( VAR_3 , 0 , VAR_4 ) ) INIT = VAR_2 . METHOD_1 ( VAR_3 , 0 , VAR_4 ) ) VAR VAR ( IF IF ( COND VAR_1 < 0 ) COND VAR_1 < 0 ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF (  return new java.lang.String ( VAR_3 , 0 , VAR_1 ) ; )  return new java.lang.String ( VAR_3 , 0 , VAR_1 ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK (  TYPE_1 . w ( this , STRING_1 , e ) )  TYPE_1 . w ( this , STRING_1 , e ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) (  VAR_1 = true )  VAR_1 = true (  METHOD_2 ( true ) )  METHOD_2 ( true ) (  METHOD_3 ( ) )  METHOD_3 ( ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( VAR_3 , VAR_4 , VAR_5 , null , VAR_6 . METHOD_4 ( ) ) ) INIT = new TYPE_1 ( VAR_3 , VAR_4 , VAR_5 , null , VAR_6 . METHOD_4 ( ) ) ) VAR VAR (  METHOD_5 ( VAR_2 ) )  METHOD_5 ( VAR_2 ) (  METHOD_6 ( ) )  METHOD_6 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME e ) NAME e ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME callback ) NAME callback ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME event ) NAME event ( INIT = METHOD_2 ( VAR_1 , callback ) ) INIT = METHOD_2 ( VAR_1 , callback ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME id ) NAME id ) VAR VAR ( IF IF ( COND e instanceof TYPE_4 ) COND e instanceof TYPE_4 ( THEN THEN (  id = TYPE_5 . METHOD_3 ( VAR_3 , ( ( TYPE_4 ) ( e ) ) , VAR_2 ) )  id = TYPE_5 . METHOD_3 ( VAR_3 , ( ( TYPE_4 ) ( e ) ) , VAR_2 ) ) THEN THEN ( ELSE ELSE (  id = TYPE_5 . METHOD_4 ( VAR_3 , ( ( TYPE_6 ) ( e ) ) ) )  id = TYPE_5 . METHOD_4 ( VAR_3 , ( ( TYPE_6 ) ( e ) ) ) ) ELSE ELSE ) IF IF (  VAR_4 . METHOD_5 ( id , event ) )  VAR_4 . METHOD_5 ( id , event ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 . METHOD_2 ( this ) ) COND VAR_1 . METHOD_2 ( this ) ( THEN THEN ( IF IF ( COND VAR_1 . METHOD_3 ( ) ) COND VAR_1 . METHOD_3 ( ) ( THEN THEN (  VAR_2 . METHOD_4 ( this ) )  VAR_2 . METHOD_4 ( this ) (  VAR_2 . METHOD_5 ( this ) )  VAR_2 . METHOD_5 ( this ) (  VAR_2 . METHOD_6 ( this ) )  VAR_2 . METHOD_6 ( this ) ) THEN THEN ) IF IF (  VAR_1 . METHOD_7 ( VAR_3 ) )  VAR_1 . METHOD_7 ( VAR_3 ) (  VAR_1 . METHOD_7 ( VAR_4 ) )  VAR_1 . METHOD_7 ( VAR_4 ) (  VAR_5 . METHOD_1 ( VAR_1 ) )  VAR_5 . METHOD_1 ( VAR_1 ) ) THEN THEN ) IF IF (  VAR_1 . METHOD_8 ( this ) )  VAR_1 . METHOD_8 ( this ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME context ) NAME context ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = context . METHOD_2 ( VAR_3 class ) ) INIT = context . METHOD_2 ( VAR_3 class ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( IN VAR_2 . METHOD_3 ( ) ) IN VAR_2 . METHOD_3 ( ) ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_2 . METHOD_4 ( VAR_4 ) ) INIT = VAR_2 . METHOD_4 ( VAR_4 ) ) VAR VAR ( IF IF ( COND ( VAR_5 . METHOD_5 ( VAR_6 ) ) && ( ! ( VAR_4 . equals ( VAR_1 ) ) ) ) COND ( VAR_5 . METHOD_5 ( VAR_6 ) ) && ( ! ( VAR_4 . equals ( VAR_1 ) ) ) ( THEN THEN (  return VAR_4 ; )  return VAR_4 ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  new TYPE_1 ( STRING_1 ) )  new TYPE_1 ( STRING_1 ) (  fail ( ( STRING_2 + STRING_3 ) ) )  fail ( ( STRING_2 + STRING_3 ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME e ) NAME e ( BLOCK BLOCK (  assertEquals ( STRING_4 , e . METHOD_2 ( ) . getName ( ) ) )  assertEquals ( STRING_4 , e . METHOD_2 ( ) . getName ( ) ) (  assertEquals ( 0 , e . METHOD_3 ( ) ) )  assertEquals ( 0 , e . METHOD_3 ( ) ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  assertEquals ( VAR_1 , VAR_2 . METHOD_2 ( VAR_3 ) ) )  assertEquals ( VAR_1 , VAR_2 . METHOD_2 ( VAR_3 ) ) (  assertEquals ( VAR_1 , VAR_2 . METHOD_3 ( VAR_3 , VAR_4 ) ) )  assertEquals ( VAR_1 , VAR_2 . METHOD_3 ( VAR_3 , VAR_4 ) ) (  assertEquals ( null , VAR_2 . METHOD_3 ( VAR_3 , VAR_5 ) ) )  assertEquals ( null , VAR_2 . METHOD_3 ( VAR_3 , VAR_5 ) ) (  assertNotNull ( VAR_2 . METHOD_3 ( VAR_6 , VAR_4 ) ) )  assertNotNull ( VAR_2 . METHOD_3 ( VAR_6 , VAR_4 ) ) (  assertNotNull ( VAR_2 . METHOD_3 ( VAR_6 , VAR_5 ) ) )  assertNotNull ( VAR_2 . METHOD_3 ( VAR_6 , VAR_5 ) ) (  METHOD_4 ( VAR_2 . METHOD_3 ( VAR_7 , VAR_5 ) ) )  METHOD_4 ( VAR_2 . METHOD_3 ( VAR_7 , VAR_5 ) ) (  assertEquals ( null , VAR_2 . METHOD_2 ( VAR_8 ) ) )  assertEquals ( null , VAR_2 . METHOD_2 ( VAR_8 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME w ) NAME w ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME h ) NAME h ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME d ) NAME d ) VAR VAR ( VAR VAR ( TYPE float[] ) TYPE float[] ( NAME data ) NAME data ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  mRS . METHOD_2 ( ) )  mRS . METHOD_2 ( ) (  METHOD_3 ( VAR_1 , VAR_2 , VAR_3 , w , h , d ) )  METHOD_3 ( VAR_1 , VAR_2 , VAR_3 , w , h , d ) (  mRS . METHOD_4 ( METHOD_5 ( ) , VAR_1 , VAR_2 , VAR_3 , VAR_4 , w , h , d , data , ( ( data . length ) * 4 ) ) )  mRS . METHOD_4 ( METHOD_5 ( ) , VAR_1 , VAR_2 , VAR_3 , VAR_4 , w , h , d , data , ( ( data . length ) * 4 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE android.bluetooth.BluetoothDevice ) TYPE android.bluetooth.BluetoothDevice ( NAME device ) NAME device ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME call ) NAME call ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME service ) NAME service ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( IF IF ( COND service == null ) COND service == null ( THEN THEN (  android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) )  android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) (  return false ; )  return false ; ) THEN THEN ) IF IF (  return service . METHOD_1 ( device , call . METHOD_3 ( ) ) ; )  return service . METHOD_1 ( device , call . METHOD_3 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME method ) NAME method ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME location ) NAME location ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME data ) NAME data ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( method != null ) && ( VAR_4 . METHOD_2 ( VAR_1 , VAR_5 , method , VAR_2 ) ) ) COND ( method != null ) && ( VAR_4 . METHOD_2 ( VAR_1 , VAR_5 , method , VAR_2 ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  METHOD_1 ( VAR_1 , location , VAR_3 , data ) )  METHOD_1 ( VAR_1 , location , VAR_3 , data ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME type ) NAME type ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  type = VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) )  type = VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.NullPointerException ) TYPE java.lang.NullPointerException ( NAME ex ) NAME ex ( BLOCK BLOCK (  throw new java.lang.NullPointerException ( STRING_1 ) ; )  throw new java.lang.NullPointerException ( STRING_1 ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  METHOD_4 ( ) )  METHOD_4 ( ) ( IF IF ( COND ( VAR_2 . get ( type ) ) != null ) COND ( VAR_2 . get ( type ) ) != null ( THEN THEN (  throw new java.lang.IllegalArgumentException ( ( STRING_2 + type ) ) ; )  throw new java.lang.IllegalArgumentException ( ( STRING_2 + type ) ) ; ) THEN THEN ) IF IF (  VAR_2 . METHOD_5 ( type , VAR_1 ) )  VAR_2 . METHOD_5 ( type , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( SYNCHRONIZED SYNCHRONIZED (  this )  this ( BLOCK BLOCK (  VAR_1 = VAR_2 )  VAR_1 = VAR_2 (  VAR_2 = null )  VAR_2 = null ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  throw new TYPE_2 ( STRING_1 ) ; )  throw new TYPE_2 ( STRING_1 ) ; ) THEN THEN ) IF IF (  VAR_1 . METHOD_2 ( ) )  VAR_1 . METHOD_2 ( ) ( WHILE WHILE ( COND true ) COND true ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  VAR_1 . METHOD_3 ( ) )  VAR_1 . METHOD_3 ( ) (  return ; )  return ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) WHILE WHILE ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_4 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) INIT = TYPE_4 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_4 . METHOD_4 ( VAR_1 ) ) INIT = TYPE_4 . METHOD_4 ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_5 ( new TYPE_6 ( VAR_3 ) ) ) INIT = new TYPE_5 ( new TYPE_6 ( VAR_3 ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_5 ) NAME VAR_5 ( INIT = new TYPE_1 ( VAR_2 , new TYPE_6 ( VAR_1 . METHOD_5 ( ) ) , VAR_4 ) ) INIT = new TYPE_1 ( VAR_2 , new TYPE_6 ( VAR_1 . METHOD_5 ( ) ) , VAR_4 ) ) VAR VAR (  return VAR_5 ; )  return VAR_5 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( VAR_1 ) ) INIT = METHOD_2 ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME f ) NAME f ( INIT = VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) ) INIT = VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) ) VAR VAR ( IF IF ( COND f . METHOD_5 ( ) ) COND f . METHOD_5 ( ) ( THEN THEN ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_6 ( VAR_1 ) ) INIT = METHOD_6 ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_3 == null ) COND VAR_3 == null ( THEN THEN (  VAR_3 = new TYPE_2 ( VAR_1 ) )  VAR_3 = new TYPE_2 ( VAR_1 ) (  METHOD_7 ( VAR_3 ) )  METHOD_7 ( VAR_3 ) ) THEN THEN ) IF IF (  METHOD_8 ( VAR_3 , f ) )  METHOD_8 ( VAR_3 , f ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_1 ( ) . METHOD_2 ( VAR_2 ) . METHOD_3 ( STRING_1 ) ) INIT = new TYPE_1 ( ) . METHOD_2 ( VAR_2 ) . METHOD_3 ( STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_3 . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( VAR_1 , VAR_3 ) ) INIT = TYPE_3 . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( VAR_1 , VAR_3 ) ) VAR VAR (  return VAR_4 . METHOD_7 ( ) ; )  return VAR_4 . METHOD_7 ( ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK (  throw new java.lang.RuntimeException ( e ) ; )  throw new java.lang.RuntimeException ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE android.bluetooth.BluetoothDevice ) TYPE android.bluetooth.BluetoothDevice ( NAME device ) NAME device ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( TYPE_1 . METHOD_2 ( VAR_2 ) ) ) COND ! ( TYPE_1 . METHOD_2 ( VAR_2 ) ) ( THEN THEN (  android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) )  android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME service ) NAME service ( INIT = METHOD_3 ( ) ) INIT = METHOD_3 ( ) ) VAR VAR ( IF IF ( COND service == null ) COND service == null ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  return service . METHOD_1 ( device , VAR_1 , null ) ; )  return service . METHOD_1 ( device , VAR_1 , null ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_2 . get ( id ) . state = VAR_3 )  VAR_2 . get ( id ) . state = VAR_3 (  VAR_2 . get ( id ) . VAR_1 = new TYPE_1 ( VAR_1 ) )  VAR_2 . get ( id ) . VAR_1 = new TYPE_1 ( VAR_1 ) ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME a ) NAME a ( IN VAR_4 ) IN VAR_4 ( BLOCK BLOCK (  a . METHOD_2 ( id , VAR_2 . get ( id ) . VAR_1 ) )  a . METHOD_2 ( id , VAR_2 . get ( id ) . VAR_1 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.Set<TYPE_1> ) TYPE java.util.Set<TYPE_1> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = null ) INIT = null ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME project ) NAME project ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_4 ) NAME VAR_4 ( INIT = project . METHOD_2 ( ) ) INIT = project . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND TYPE_2 . METHOD_3 ( VAR_4 , VAR_1 ) ) COND TYPE_2 . METHOD_3 ( VAR_4 , VAR_1 ) ( THEN THEN (  VAR_3 = project )  VAR_3 = project (  break ; )  break ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( VAR_1 . METHOD_3 ( new TYPE_2 ( time ) ) ) ? VAR_1 . METHOD_4 ( ) : 0 ) INIT = ( VAR_1 . METHOD_3 ( new TYPE_2 ( time ) ) ) ? VAR_1 . METHOD_4 ( ) : 0 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . METHOD_5 ( ) ) INIT = VAR_1 . METHOD_5 ( ) ) VAR VAR (  VAR_4 [ VAR_5 ] = VAR_2 )  VAR_4 [ VAR_5 ] = VAR_2 (  VAR_4 [ VAR_6 ] = VAR_3 )  VAR_4 [ VAR_6 ] = VAR_3 (  METHOD_6 ( VAR_3 ) )  METHOD_6 ( VAR_3 ) ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < ( VAR_7 ) ) COND i < ( VAR_7 ) ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK (  VAR_8 [ i ] = true )  VAR_8 [ i ] = true ) BLOCK BLOCK ) FOR FOR ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 = VAR_2 )  VAR_1 = VAR_2 ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_2 ( STRING_1 , VAR_4 . METHOD_3 ( ) , VAR_5 ) ) INIT = METHOD_2 ( STRING_1 , VAR_4 . METHOD_3 ( ) , VAR_5 ) ) VAR VAR (  assertEquals ( VAR_6 , VAR_7 . METHOD_4 ( VAR_8 ) . METHOD_5 ( ) ) )  assertEquals ( VAR_6 , VAR_7 . METHOD_4 ( VAR_8 ) . METHOD_5 ( ) ) (  VAR_9 . METHOD_6 ( VAR_8 ) )  VAR_9 . METHOD_6 ( VAR_8 ) (  TYPE_2 . METHOD_7 ( VAR_10 ) )  TYPE_2 . METHOD_7 ( VAR_10 ) (  org.mockito.Mockito.verify ( VAR_5 . METHOD_8 ( ) , TYPE_3 . METHOD_9 ( ) ) . METHOD_6 ( org.mockito.Matchers.eq ( VAR_11 ) , org.mockito.Matchers . METHOD_10 ( ) ) )  org.mockito.Mockito.verify ( VAR_5 . METHOD_8 ( ) , TYPE_3 . METHOD_9 ( ) ) . METHOD_6 ( org.mockito.Matchers.eq ( VAR_11 ) , org.mockito.Matchers . METHOD_10 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = INT_1 ) INIT = INT_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_1 . METHOD_2 ( 10 ) ) INIT = TYPE_1 . METHOD_2 ( 10 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_1 . METHOD_2 ( 10 ) ) INIT = TYPE_1 . METHOD_2 ( 10 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_5 ) NAME VAR_5 ( INIT = METHOD_3 ( VAR_1 , VAR_2 ) ) INIT = METHOD_3 ( VAR_1 , VAR_2 ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME result ) NAME result ( INIT = VAR_5 . METHOD_4 ( VAR_3 , VAR_4 ) ) INIT = VAR_5 . METHOD_4 ( VAR_3 , VAR_4 ) ) VAR VAR ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME expected ) NAME expected ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE android.bluetooth.BluetoothDevice ) TYPE android.bluetooth.BluetoothDevice ( NAME device ) NAME device ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( TYPE_1 . METHOD_2 ( ) ) ) COND ! ( TYPE_1 . METHOD_2 ( ) ) ( THEN THEN (  android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) )  android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME service ) NAME service ( INIT = METHOD_3 ( ) ) INIT = METHOD_3 ( ) ) VAR VAR ( IF IF ( COND service == null ) COND service == null ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  return service . METHOD_1 ( device , name ) ; )  return service . METHOD_1 ( device , name ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( IN VAR_3 ) IN VAR_3 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME id ) NAME id ( INIT = METHOD_2 ( VAR_4 ) ) INIT = METHOD_2 ( VAR_4 ) ) VAR VAR ( IF IF ( COND ( VAR_2 . start ) == VAR_1 ) COND ( VAR_2 . start ) == VAR_1 ( THEN THEN (  VAR_5 . METHOD_4 ( id ) )  VAR_5 . METHOD_4 ( id ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND ( VAR_6 ) == VAR_1 ) COND ( VAR_6 ) == VAR_1 ( THEN THEN (  VAR_5 . METHOD_5 ( id ) )  VAR_5 . METHOD_5 ( id ) ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.Object[] ) TYPE java.lang.Object[] ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( IF IF ( COND ( ( VAR_1 . length ) == 1 ) && ( ( VAR_1 [ 0 ] ) instanceof TYPE_1 ) ) COND ( ( VAR_1 . length ) == 1 ) && ( ( VAR_1 [ 0 ] ) instanceof TYPE_1 ) ( THEN THEN ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME item ) NAME item ( INIT = ( ( TYPE_1 ) ( VAR_1 [ 0 ] ) ) ) INIT = ( ( TYPE_1 ) ( VAR_1 [ 0 ] ) ) ) VAR VAR (  VAR_2 = TYPE_2 . METHOD_3 ( VAR_3 , item , ( ( VAR_4 ) && ( VAR_5 . METHOD_4 ( ) ) ) ) )  VAR_2 = TYPE_2 . METHOD_3 ( VAR_3 , item , ( ( VAR_4 ) && ( VAR_5 . METHOD_4 ( ) ) ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE android.bluetooth.BluetoothDevice ) TYPE android.bluetooth.BluetoothDevice ( NAME device ) NAME device ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  android.util.Log.v ( VAR_1 . TAG , ( STRING_1 + device ) ) )  android.util.Log.v ( VAR_1 . TAG , ( STRING_1 + device ) ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME service ) NAME service ( INIT = VAR_2 ) INIT = VAR_2 ) VAR VAR ( IF IF ( COND service != null ) COND service != null ( THEN THEN ( TRY TRY ( BLOCK BLOCK (  return service . METHOD_1 ( device ) ; )  return service . METHOD_1 ( device ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME e ) NAME e ( BLOCK BLOCK (  android.util.Log.e ( VAR_1 . TAG , e.toString ( ) ) )  android.util.Log.e ( VAR_1 . TAG , e.toString ( ) ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) THEN THEN ( ELSE ELSE (  android.util.Log.w ( VAR_1 . TAG , STRING_2 ) )  android.util.Log.w ( VAR_1 . TAG , STRING_2 ) ) ELSE ELSE ) IF IF (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME n ) NAME n ( INIT = VAR_2 . length ) INIT = VAR_2 . length ) VAR VAR ) INIT INIT ( COND i < n ) COND i < n ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK ( IF IF ( COND VAR_2 [ i ] . equals ( VAR_1 ) ) COND VAR_2 [ i ] . equals ( VAR_1 ) ( THEN THEN (  return VAR_3 [ i ] ; )  return VAR_3 [ i ] ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR FOR (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME context ) NAME context ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( TYPE_2 . METHOD_2 ( context ) ) ) COND ! ( TYPE_2 . METHOD_2 ( context ) ) ( THEN THEN (  TYPE_3 . i ( STRING_1 , STRING_2 ) )  TYPE_3 . i ( STRING_1 , STRING_2 ) (  return false ; )  return false ; ) THEN THEN ) IF IF ( IF IF ( COND ! ( TYPE_4 . METHOD_3 ( ) ) ) COND ! ( TYPE_4 . METHOD_3 ( ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  return ( TYPE_5 . METHOD_4 ( VAR_1 ) ) || ( TYPE_6 . METHOD_5 ( VAR_2 ) ) ; )  return ( TYPE_5 . METHOD_4 ( VAR_1 ) ) || ( TYPE_6 . METHOD_5 ( VAR_2 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME subId ) NAME subId ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_2 ( subId ) ) INIT = METHOD_2 ( subId ) ) VAR VAR ( IF IF ( COND VAR_3 != null ) COND VAR_3 != null ( THEN THEN ( IF IF ( COND ! ( TYPE_3 . METHOD_3 ( mContext , VAR_1 , STRING_1 ) ) ) COND ! ( TYPE_3 . METHOD_3 ( mContext , VAR_1 , STRING_1 ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  VAR_3 . METHOD_1 ( VAR_2 ) )  VAR_3 . METHOD_1 ( VAR_2 ) ) THEN THEN ( ELSE ELSE (  loge ( ( STRING_2 + subId ) ) )  loge ( ( STRING_2 + subId ) ) (  return ; )  return ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME n ) NAME n ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = n . METHOD_2 ( ) ) INIT = n . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_1 ( VAR_2 , VAR_1 ) ) INIT = new TYPE_1 ( VAR_2 , VAR_1 ) ) VAR VAR ( WHILE WHILE ( COND ( VAR_3 . equals ( VAR_4 ) ) || ( ( VAR_3 . METHOD_3 ( n ) ) >= 0 ) ) COND ( VAR_3 . equals ( VAR_4 ) ) || ( ( VAR_3 . METHOD_3 ( n ) ) >= 0 ) ( BLOCK BLOCK (  VAR_3 = new TYPE_1 ( VAR_2 , VAR_1 ) )  VAR_3 = new TYPE_1 ( VAR_2 , VAR_1 ) ) BLOCK BLOCK ) WHILE WHILE (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( ) )  VAR_1 . METHOD_2 ( ) (  VAR_1 . METHOD_3 ( 0 ) )  VAR_1 . METHOD_3 ( 0 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 ( VAR_3 , VAR_4 ) . METHOD_4 ( true ) . build ( ) ) INIT = new TYPE_2 ( VAR_3 , VAR_4 ) . METHOD_4 ( true ) . build ( ) ) VAR VAR (  VAR_5 . METHOD_5 ( VAR_2 ) )  VAR_5 . METHOD_5 ( VAR_2 ) (  METHOD_6 ( VAR_6 ) )  METHOD_6 ( VAR_6 ) ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_7 ) NAME VAR_7 ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_7 = VAR_1 . METHOD_7 ( ) )  VAR_7 = VAR_1 . METHOD_7 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_7 = false )  VAR_7 = false ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  VAR_8 = VAR_7 )  VAR_8 = VAR_7 (  METHOD_8 ( new TYPE_4 ( VAR_3 , VAR_7 ) ) )  METHOD_8 ( new TYPE_4 ( VAR_3 , VAR_7 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME entry ) NAME entry ( INIT = VAR_2 . METHOD_2 ( TYPE_4 . METHOD_3 ( VAR_1 ) ) ) INIT = VAR_2 . METHOD_2 ( TYPE_4 . METHOD_3 ( VAR_1 ) ) ) VAR VAR ( IF IF ( COND entry == null ) COND entry == null ( THEN THEN (  throw new TYPE_5 ( VAR_1 . toString ( ) ) ; )  throw new TYPE_5 ( VAR_1 . toString ( ) ) ; ) THEN THEN ) IF IF (  return new TYPE_6 ( VAR_1 , VAR_2 , entry ) ; )  return new TYPE_6 ( VAR_1 , VAR_2 , entry ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME pkg ) NAME pkg ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  this )  this ( BLOCK BLOCK ( IF IF ( COND ( ! ( METHOD_2 ( VAR_1 , pkg , TYPE_2 . METHOD_3 ( ) ) ) ) || ( METHOD_4 ( ) ) ) COND ( ! ( METHOD_2 ( VAR_1 , pkg , TYPE_2 . METHOD_3 ( ) ) ) ) || ( METHOD_4 ( ) ) ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF (  METHOD_5 ( TYPE_2 . METHOD_3 ( ) , pkg ) )  METHOD_5 ( TYPE_2 . METHOD_3 ( ) , pkg ) (  return METHOD_6 ( ) . VAR_2 ; )  return METHOD_6 ( ) . VAR_2 ; ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME context ) NAME context ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_4 . METHOD_2 ( VAR_3 , VAR_4 , VAR_5 ) ) INIT = TYPE_4 . METHOD_2 ( VAR_3 , VAR_4 , VAR_5 ) ) VAR VAR ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_6 ) NAME VAR_6 ( INIT = TYPE_4 . METHOD_3 ( VAR_7 , VAR_8 , VAR_9 , VAR_10 ) ) INIT = TYPE_4 . METHOD_3 ( VAR_7 , VAR_8 , VAR_9 , VAR_10 ) ) VAR VAR ( IF IF ( COND VAR_6 == null ) COND VAR_6 == null ( THEN THEN ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_11 ) NAME VAR_11 ( INIT = java.lang.String.format ( STRING_1 , VAR_1 . name ) ) INIT = java.lang.String.format ( STRING_1 , VAR_1 . name ) ) VAR VAR (  context . METHOD_4 ( VAR_12 , VAR_2 , null , context . METHOD_5 ( VAR_2 , VAR_1 ) , VAR_11 , null ) )  context . METHOD_4 ( VAR_12 , VAR_2 , null , context . METHOD_5 ( VAR_2 , VAR_1 ) , VAR_11 , null ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  server . METHOD_2 ( new TYPE_1 ( ) . METHOD_3 ( STRING_1 ) . METHOD_4 ( STRING_2 ) ) )  server . METHOD_2 ( new TYPE_1 ( ) . METHOD_3 ( STRING_1 ) . METHOD_4 ( STRING_2 ) ) (  server . METHOD_5 ( ) )  server . METHOD_5 ( ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = server . METHOD_6 ( STRING_3 ) . METHOD_7 ( ) ) INIT = server . METHOD_6 ( STRING_3 ) . METHOD_7 ( ) ) VAR VAR (  VAR_1 . METHOD_8 ( STRING_4 , STRING_5 ) )  VAR_1 . METHOD_8 ( STRING_4 , STRING_5 ) (  assertEquals ( STRING_1 , METHOD_9 ( VAR_1 . METHOD_10 ( ) , VAR_2 ) ) )  assertEquals ( STRING_1 , METHOD_9 ( VAR_1 . METHOD_10 ( ) , VAR_2 ) ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME request ) NAME request ( INIT = server . METHOD_11 ( ) ) INIT = server . METHOD_11 ( ) ) VAR VAR (  METHOD_12 ( request . METHOD_13 ( ) , STRING_6 ) )  METHOD_12 ( request . METHOD_13 ( ) , STRING_6 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME event ) NAME event ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( METHOD_2 ( ) ) ) COND ! ( METHOD_2 ( ) ) ( THEN THEN ( IF IF ( COND ( event . METHOD_3 ( ) ) == ( VAR_1 ) ) COND ( event . METHOD_3 ( ) ) == ( VAR_1 ) ( THEN THEN (  VAR_2 . METHOD_4 ( event . METHOD_5 ( ) , event ) )  VAR_2 . METHOD_4 ( event . METHOD_5 ( ) , event ) ) THEN THEN ( ELSE ELSE (  VAR_2 . METHOD_6 ( event . METHOD_5 ( ) , event ) )  VAR_2 . METHOD_6 ( event . METHOD_5 ( ) , event ) ) ELSE ELSE ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_2 ) == 1 ) COND ( VAR_2 ) == 1 ( THEN THEN (  return VAR_1 ; )  return VAR_1 ; ) THEN THEN ( ELSE ELSE ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_1 . METHOD_2 ( VAR_4 . METHOD_3 ( ) ) ) INIT = TYPE_1 . METHOD_2 ( VAR_4 . METHOD_3 ( ) ) ) VAR VAR ( IF IF ( COND ( VAR_5 ) == ( VAR_6 ) ) COND ( VAR_5 ) == ( VAR_6 ) ( THEN THEN (  return VAR_3 + VAR_1 ; )  return VAR_3 + VAR_1 ; ) THEN THEN ( ELSE ELSE ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_7 ) NAME VAR_7 ( INIT = ( VAR_1 + VAR_3 ) + ( VAR_2 ) ) INIT = ( VAR_1 + VAR_3 ) + ( VAR_2 ) ) VAR VAR (  return VAR_7 - ( VAR_7 % ( VAR_2 ) ) ; )  return VAR_7 - ( VAR_7 % ( VAR_2 ) ) ; ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_2 = new TYPE_2 ( this , VAR_1 , VAR_3 ) )  VAR_2 = new TYPE_2 ( this , VAR_1 , VAR_3 ) (  VAR_2 . METHOD_2 ( ) )  VAR_2 . METHOD_2 ( ) ( IF IF ( COND VAR_4 ) COND VAR_4 ( THEN THEN (  android.util.Log.d ( VAR_5 . TAG , ( ( ( STRING_1 + ( VAR_2 . toString ( ) ) ) + STRING_2 ) + ( VAR_1 . toString ( ) ) ) ) )  android.util.Log.d ( VAR_5 . TAG , ( ( ( STRING_1 + ( VAR_2 . toString ( ) ) ) + STRING_2 ) + ( VAR_1 . toString ( ) ) ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE android.bluetooth.BluetoothDevice ) TYPE android.bluetooth.BluetoothDevice ( NAME device ) NAME device ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( TYPE_1 . METHOD_2 ( VAR_1 ) ) ) COND ! ( TYPE_1 . METHOD_2 ( VAR_1 ) ) ( THEN THEN (  android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) )  android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME service ) NAME service ( INIT = METHOD_3 ( ) ) INIT = METHOD_3 ( ) ) VAR VAR ( IF IF ( COND service == null ) COND service == null ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  return service . METHOD_1 ( device ) ; )  return service . METHOD_1 ( device ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_1 ) ) COND ! ( VAR_1 ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1[] ) TYPE TYPE_1[] ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 [ ] { VAR_3 , VAR_4 } ) INIT = new TYPE_1 [ ] { VAR_3 , VAR_4 } ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_5 ) NAME VAR_5 ( INIT = TYPE_2 . METHOD_2 ( STRING_1 ) ) INIT = TYPE_2 . METHOD_2 ( STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME result ) NAME result ( INIT = VAR_6 . METHOD_3 ( VAR_2 , null , VAR_5 ) ) INIT = VAR_6 . METHOD_3 ( VAR_2 , null , VAR_5 ) ) VAR VAR (  assertEquals ( 1 , result . METHOD_4 ( ) . size ( ) ) )  assertEquals ( 1 , result . METHOD_4 ( ) . size ( ) ) (  assertEquals ( 0 , result . METHOD_5 ( ) . size ( ) ) )  assertEquals ( 0 , result . METHOD_5 ( ) . size ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 = TYPE_3 . METHOD_2 ( VAR_1 ) )  VAR_1 = TYPE_3 . METHOD_2 ( VAR_1 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . get ( VAR_1 ) ) INIT = VAR_3 . get ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN (  return VAR_2 ; )  return VAR_2 ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_5 [ VAR_1 . METHOD_3 ( ) ] ) INIT = VAR_5 [ VAR_1 . METHOD_3 ( ) ] ) VAR VAR ( IF IF ( COND VAR_4 != null ) COND VAR_4 != null ( THEN THEN (  VAR_2 = VAR_3 . get ( VAR_4 ) )  VAR_2 = VAR_3 . get ( VAR_4 ) ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN (  return VAR_2 ; )  return VAR_2 ; ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  throw new TYPE_4 ( ( STRING_1 + VAR_1 ) , null , null ) ; )  throw new TYPE_4 ( ( STRING_1 + VAR_1 ) , null , null ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_3 . METHOD_2 ( VAR_1 ) )  VAR_3 . METHOD_2 ( VAR_1 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_3 ( VAR_2 ) ) INIT = METHOD_3 ( VAR_2 ) ) VAR VAR (  VAR_3 . METHOD_4 ( VAR_5 , ( STRING_1 + ( VAR_4 . toString ( ) ) ) ) )  VAR_3 . METHOD_4 ( VAR_5 , ( STRING_1 + ( VAR_4 . toString ( ) ) ) ) (  VAR_3 . METHOD_5 ( VAR_4 ) )  VAR_3 . METHOD_5 ( VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME info ) NAME info ( INIT = new TYPE_1 ( id , STRING_1 , VAR_1 , STRING_1 , STRING_1 , 0 , 0 , STRING_1 , 0 , null , 0 , 0 , STRING_1 , VAR_2 ) ) INIT = new TYPE_1 ( id , STRING_1 , VAR_1 , STRING_1 , STRING_1 , 0 , 0 , STRING_1 , 0 , null , 0 , 0 , STRING_1 , VAR_2 ) ) VAR VAR (  VAR_3 . METHOD_2 ( id , new TYPE_2 ( mContext , VAR_4 , VAR_5 , VAR_6 , VAR_7 , this , info , VAR_8 , VAR_9 . METHOD_3 ( ) ) ) )  VAR_3 . METHOD_2 ( id , new TYPE_2 ( mContext , VAR_4 , VAR_5 , VAR_6 , VAR_7 , this , info , VAR_8 , VAR_9 . METHOD_3 ( ) ) ) (  return info ; )  return info ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( STRING_1 ) ) INIT = TYPE_1 . METHOD_2 ( STRING_1 ) ) VAR VAR (  METHOD_3 ( VAR_1 , STRING_2 , CHAR_1 , 0 , INT_1 , 6 ) )  METHOD_3 ( VAR_1 , STRING_2 , CHAR_1 , 0 , INT_1 , 6 ) (  METHOD_4 ( VAR_1 , STRING_3 , INT_2 , INT_3 , CHAR_1 , 0 , INT_1 , 6 ) )  METHOD_4 ( VAR_1 , STRING_3 , INT_2 , INT_3 , CHAR_1 , 0 , INT_1 , 6 ) (  METHOD_4 ( VAR_1 , STRING_4 , INT_3 , INT_2 , CHAR_1 , 0 , INT_1 , 6 ) )  METHOD_4 ( VAR_1 , STRING_4 , INT_3 , INT_2 , CHAR_1 , 0 , INT_1 , 6 ) (  METHOD_4 ( VAR_1 , STRING_2 , CHAR_1 , 0 , INT_1 , 6 ) )  METHOD_4 ( VAR_1 , STRING_2 , CHAR_1 , 0 , INT_1 , 6 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME context ) NAME context ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND ( VAR_2 != null ) && ( VAR_2 . equals ( VAR_3 ) ) ) COND ( VAR_2 != null ) && ( VAR_2 . equals ( VAR_3 ) ) ( THEN THEN ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR (  context . METHOD_3 ( VAR_5 , VAR_1 , context . METHOD_4 ( VAR_1 ) , VAR_4 , null ) )  context . METHOD_3 ( VAR_5 , VAR_1 , context . METHOD_4 ( VAR_1 ) , VAR_4 , null ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME r ) NAME r ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_3 . get ( ) ) ) COND ! ( VAR_3 . get ( ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE int ) TYPE int ( NAME y ) NAME y ( INIT = r . y ) INIT = r . y ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ( INIT = ( ( TYPE_4 ) ( VAR_1 ) ) . METHOD_2 ( ) . METHOD_3 ( ) ) INIT = ( ( TYPE_4 ) ( VAR_1 ) ) . METHOD_2 ( ) . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_6 . METHOD_4 ( ) ) INIT = VAR_6 . METHOD_4 ( ) ) VAR VAR (  TYPE_5 . METHOD_5 ( VAR_2 , 0 , VAR_4 , 0 , y , VAR_5 ) )  TYPE_5 . METHOD_5 ( VAR_2 , 0 , VAR_4 , 0 , y , VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( VAR_2 . METHOD_2 ( ) ) ) INIT = new TYPE_1 ( VAR_2 . METHOD_2 ( ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME status ) NAME status ( INIT = VAR_1 . METHOD_3 ( ) ) INIT = VAR_1 . METHOD_3 ( ) ) VAR VAR ( IF IF ( COND status . METHOD_4 ( ) ) COND status . METHOD_4 ( ) ( THEN THEN (  VAR_3 . METHOD_5 ( STRING_1 ) )  VAR_3 . METHOD_5 ( STRING_1 ) (  METHOD_6 ( VAR_4 ) . METHOD_7 ( true ) )  METHOD_6 ( VAR_4 ) . METHOD_7 ( true ) ) THEN THEN ( ELSE ELSE (  VAR_3 . METHOD_5 ( status . METHOD_8 ( ) ) )  VAR_3 . METHOD_5 ( status . METHOD_8 ( ) ) (  VAR_3 . METHOD_9 ( ) )  VAR_3 . METHOD_9 ( ) (  METHOD_6 ( VAR_4 ) . METHOD_7 ( false ) )  METHOD_6 ( VAR_4 ) . METHOD_7 ( false ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE float ) TYPE float ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME d ) NAME d ( INIT = VAR_3 . METHOD_2 ( VAR_1 ) ) INIT = VAR_3 . METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND d == null ) COND d == null ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE double ) TYPE double ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_2 . METHOD_3 ( VAR_2 ) ) INIT = TYPE_2 . METHOD_3 ( VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE float ) TYPE float ( NAME VAR_5 ) NAME VAR_5 ( INIT = ( ( float ) ( TYPE_2 . METHOD_4 ( VAR_4 ) ) ) ) INIT = ( ( float ) ( TYPE_2 . METHOD_4 ( VAR_4 ) ) ) ) VAR VAR ( VAR VAR ( TYPE float ) TYPE float ( NAME VAR_6 ) NAME VAR_6 ( INIT = ( ( float ) ( TYPE_2 . METHOD_5 ( VAR_4 ) ) ) ) INIT = ( ( float ) ( TYPE_2 . METHOD_5 ( VAR_4 ) ) ) ) VAR VAR (  d . METHOD_6 ( TYPE_1 . METHOD_7 ( VAR_5 , VAR_6 ) ) )  d . METHOD_6 ( TYPE_1 . METHOD_7 ( VAR_5 , VAR_6 ) ) (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME server ) NAME server ( INIT = new TYPE_1 ( 0 ) ) INIT = new TYPE_1 ( 0 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( TYPE_3 . METHOD_2 ( ) , server . METHOD_3 ( ) ) ) INIT = new TYPE_2 ( TYPE_3 . METHOD_2 ( ) , server . METHOD_3 ( ) ) ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = ! ( VAR_1 . METHOD_4 ( ) ) ) INIT = ! ( VAR_1 . METHOD_4 ( ) ) ) VAR VAR (  VAR_1 . METHOD_5 ( VAR_2 ) )  VAR_1 . METHOD_5 ( VAR_2 ) (  assertTrue ( ( STRING_1 + ( VAR_1 . METHOD_4 ( ) ) ) , ( ( VAR_1 . METHOD_4 ( ) ) == VAR_2 ) ) )  assertTrue ( ( STRING_1 + ( VAR_1 . METHOD_4 ( ) ) ) , ( ( VAR_1 . METHOD_4 ( ) ) == VAR_2 ) ) (  VAR_1 . METHOD_6 ( ) )  VAR_1 . METHOD_6 ( ) (  server . METHOD_6 ( ) )  server . METHOD_6 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( ( VAR_1 + ( name ) ) , VAR_3 , VAR_4 ) ) INIT = new TYPE_1 ( ( VAR_1 + ( name ) ) , VAR_3 , VAR_4 ) ) VAR VAR (  VAR_5 . METHOD_2 ( VAR_6 . METHOD_3 ( ) ) )  VAR_5 . METHOD_2 ( VAR_6 . METHOD_3 ( ) ) (  VAR_7 . METHOD_2 ( VAR_8 . METHOD_3 ( ) ) )  VAR_7 . METHOD_2 ( VAR_8 . METHOD_3 ( ) ) (  VAR_9 . METHOD_2 ( VAR_10 . METHOD_3 ( ) ) )  VAR_9 . METHOD_2 ( VAR_10 . METHOD_3 ( ) ) (  VAR_11 . METHOD_2 ( VAR_12 . METHOD_3 ( ) ) )  VAR_11 . METHOD_2 ( VAR_12 . METHOD_3 ( ) ) (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ! ( METHOD_2 ( ) ) ) COND ! ( METHOD_2 ( ) ) ( THEN THEN (  TYPE_1 . METHOD_3 ( VAR_1 , STRING_1 ) )  TYPE_1 . METHOD_3 ( VAR_1 , STRING_1 ) (  return ; )  return ; ) THEN THEN ) IF IF (  METHOD_4 ( VAR_2 , VAR_3 ) )  METHOD_4 ( VAR_2 , VAR_3 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_5 ( VAR_2 , VAR_3 ) ) INIT = METHOD_5 ( VAR_2 , VAR_3 ) ) VAR VAR (  METHOD_6 ( VAR_2 , VAR_5 ) )  METHOD_6 ( VAR_2 , VAR_5 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_6 ) NAME VAR_6 ( INIT = METHOD_5 ( VAR_2 , VAR_5 ) ) INIT = METHOD_5 ( VAR_2 , VAR_5 ) ) VAR VAR (  TYPE_3 . METHOD_7 ( VAR_4 , VAR_6 ) )  TYPE_3 . METHOD_7 ( VAR_4 , VAR_6 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  when ( VAR_1 . METHOD_2 ( METHOD_3 ( ) , METHOD_3 ( ) , METHOD_4 ( ) , METHOD_4 ( ) , METHOD_4 ( ) ) ) . thenReturn ( null ) )  when ( VAR_1 . METHOD_2 ( METHOD_3 ( ) , METHOD_3 ( ) , METHOD_4 ( ) , METHOD_4 ( ) , METHOD_4 ( ) ) ) . thenReturn ( null ) (  VAR_2 . METHOD_5 ( false ) )  VAR_2 . METHOD_5 ( false ) (  VAR_2 . METHOD_6 ( VAR_3 ) )  VAR_2 . METHOD_6 ( VAR_3 ) (  VAR_4 . METHOD_7 ( VAR_5 ) )  VAR_4 . METHOD_7 ( VAR_5 ) (  VAR_6 . METHOD_8 ( ) )  VAR_6 . METHOD_8 ( ) (  verify ( VAR_7 ) . METHOD_9 ( ) )  verify ( VAR_7 ) . METHOD_9 ( ) (  verify ( VAR_7 , METHOD_10 ( ) ) . METHOD_11 ( ) )  verify ( VAR_7 , METHOD_10 ( ) ) . METHOD_11 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME x ) NAME x ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME y ) NAME y ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( ( VAR_3 != null ? VAR_3 : METHOD_3 ( ) ) ) )  VAR_1 . METHOD_2 ( ( VAR_3 != null ? VAR_3 : METHOD_3 ( ) ) ) (  VAR_1 . METHOD_4 ( VAR_5 . METHOD_5 ( ) ) )  VAR_1 . METHOD_4 ( VAR_5 . METHOD_5 ( ) ) (  VAR_1 . METHOD_6 ( VAR_5 . METHOD_5 ( ) ) )  VAR_1 . METHOD_6 ( VAR_5 . METHOD_5 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) INIT = TYPE_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) VAR VAR ( IF IF ( COND VAR_2 == null ) COND VAR_2 == null ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF (  return new TYPE_1 ( VAR_2 , VAR_1 . METHOD_4 ( ) , VAR_1 . METHOD_5 ( ) ) ; )  return new TYPE_1 ( VAR_2 , VAR_1 . METHOD_4 ( ) , VAR_1 . METHOD_5 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME call ) NAME call ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 && ( ( call . METHOD_2 ( ) ) != null ) ) && ( ! ( call . METHOD_3 ( VAR_3 ) ) ) ) COND ( VAR_1 && ( ( call . METHOD_2 ( ) ) != null ) ) && ( ! ( call . METHOD_3 ( VAR_3 ) ) ) ( THEN THEN ( VAR VAR ( TYPE int ) TYPE int ( NAME subId ) NAME subId ( INIT = VAR_4 . METHOD_4 ( ) . METHOD_5 ( call . METHOD_6 ( ) ) ) INIT = VAR_4 . METHOD_4 ( ) . METHOD_5 ( call . METHOD_6 ( ) ) ) VAR VAR (  METHOD_7 ( call . METHOD_8 ( ) , call . METHOD_2 ( ) . METHOD_9 ( ) , VAR_2 , subId ) )  METHOD_7 ( call . METHOD_8 ( ) , call . METHOD_2 ( ) . METHOD_9 ( ) , VAR_2 , subId ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME context ) NAME context ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME s ) NAME s ( INIT = TYPE_2 . METHOD_2 ( context ) ) INIT = TYPE_2 . METHOD_2 ( context ) ) VAR VAR (  TYPE_2 . METHOD_3 ( s , new java.lang.String [ ] { STRING_1 } ) )  TYPE_2 . METHOD_3 ( s , new java.lang.String [ ] { STRING_1 } ) ( IF IF ( COND ( VAR_1 ) != null ) COND ( VAR_1 ) != null ( THEN THEN (  TYPE_2 . METHOD_4 ( s , VAR_1 ) )  TYPE_2 . METHOD_4 ( s , VAR_1 ) ) THEN THEN ) IF IF (  return s ; )  return s ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME set ) NAME set ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME key ) NAME key ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( key . length ( ) ) > ( VAR_2 ) ) COND ( key . length ( ) ) > ( VAR_2 ) ( THEN THEN (  throw new java.lang.IllegalArgumentException ( ( STRING_1 + ( VAR_2 ) ) ) ; )  throw new java.lang.IllegalArgumentException ( ( STRING_1 + ( VAR_2 ) ) ) ; ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_1 != null ) && ( ( VAR_1 . length ( ) ) > ( VAR_3 ) ) ) COND ( VAR_1 != null ) && ( ( VAR_1 . length ( ) ) > ( VAR_3 ) ) ( THEN THEN (  throw new java.lang.IllegalArgumentException ( ( STRING_2 + ( VAR_3 ) ) ) ; )  throw new java.lang.IllegalArgumentException ( ( STRING_2 + ( VAR_3 ) ) ) ; ) THEN THEN ) IF IF ( IF IF ( COND VAR_4 ) COND VAR_4 ( THEN THEN (  TYPE_1 . METHOD_1 ( key ) )  TYPE_1 . METHOD_1 ( key ) ) THEN THEN ) IF IF (  TYPE_1 . METHOD_2 ( key , VAR_1 ) )  TYPE_1 . METHOD_2 ( key , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME fd ) NAME fd ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME pw ) NAME pw ) VAR VAR ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME args ) NAME args ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  super . METHOD_1 ( fd , pw , args ) )  super . METHOD_1 ( fd , pw , args ) (  pw.println ( ( STRING_1 + ( VAR_1 ) ) ) )  pw.println ( ( STRING_1 + ( VAR_1 ) ) ) (  pw.println ( ( STRING_2 + ( VAR_2 ) ) ) )  pw.println ( ( STRING_2 + ( VAR_2 ) ) ) (  pw.println ( ( STRING_3 + ( VAR_3 ) ) ) )  pw.println ( ( STRING_3 + ( VAR_3 ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.Integer[] ) TYPE java.lang.Integer[] ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.lang.Integer [ VAR_3 ] ) INIT = new java.lang.Integer [ VAR_3 ] ) VAR VAR (  VAR_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_2 ) ) )  VAR_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_2 ) ) (  METHOD_4 ( ) )  METHOD_4 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.NullPointerException ) TYPE java.lang.NullPointerException ( NAME VAR_4 ) NAME VAR_4 ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  METHOD_2 ( STRING_1 ) )  METHOD_2 ( STRING_1 ) ) THEN THEN ) IF IF ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME config ) NAME config ( IN METHOD_3 ( ) ) IN METHOD_3 ( ) ( BLOCK BLOCK ( IF IF ( COND TYPE_2 . METHOD_4 ( config ) ) COND TYPE_2 . METHOD_4 ( config ) ( THEN THEN ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_5 ( VAR_3 , VAR_4 . METHOD_6 ( ) ) ) INIT = TYPE_2 . METHOD_5 ( VAR_3 , VAR_4 . METHOD_6 ( ) ) ) VAR VAR (  VAR_4 . METHOD_7 ( VAR_2 ) )  VAR_4 . METHOD_7 ( VAR_2 ) (  VAR_4 . METHOD_8 ( STRING_2 ) )  VAR_4 . METHOD_8 ( STRING_2 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME value ) NAME value ( INIT = ( ( TYPE_2 ) ( VAR_1 ) ) ) INIT = ( ( TYPE_2 ) ( VAR_1 ) ) ) VAR VAR ( IF IF ( COND ( value . value ) != null ) COND ( value . value ) != null ( THEN THEN (  this . value = value . value )  this . value = value . value ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_2 . METHOD_2 ( ) ) INIT = VAR_2 . METHOD_2 ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_5 ) NAME VAR_5 ( IN VAR_1 . METHOD_3 ( ) ) IN VAR_1 . METHOD_3 ( ) ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_6 ) NAME VAR_6 ( INIT = VAR_4 . METHOD_4 ( VAR_5 . METHOD_5 ( ) ) ) INIT = VAR_4 . METHOD_4 ( VAR_5 . METHOD_5 ( ) ) ) VAR VAR (  VAR_6 . METHOD_6 ( VAR_5 . METHOD_7 ( ) ) )  VAR_6 . METHOD_6 ( VAR_5 . METHOD_7 ( ) ) (  VAR_3 . append ( new TYPE_3 ( VAR_5 , VAR_6 ) ) )  VAR_3 . append ( new TYPE_3 ( VAR_5 , VAR_6 ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK ( WHILE WHILE ( COND ! ( VAR_1 . METHOD_1 ( ) ) ) COND ! ( VAR_1 . METHOD_1 ( ) ) ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( VAR_2 ) )  TYPE_1 . METHOD_2 ( VAR_2 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME e ) NAME e ( BLOCK BLOCK (  return ; )  return ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) WHILE WHILE ( TRY TRY ( BLOCK BLOCK (  VAR_1 . METHOD_3 ( VAR_3 , VAR_4 , 0 ) )  VAR_1 . METHOD_3 ( VAR_3 , VAR_4 , 0 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ( BLOCK BLOCK (  TYPE_3 . e ( STRING_1 , e ) )  TYPE_3 . e ( STRING_1 , e ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ! ( METHOD_2 ( ) ) ) COND ! ( METHOD_2 ( ) ) ( THEN THEN (  TYPE_1 . METHOD_3 ( VAR_1 , STRING_1 ) )  TYPE_1 . METHOD_3 ( VAR_1 , STRING_1 ) (  return ; )  return ; ) THEN THEN ) IF IF (  METHOD_4 ( VAR_2 ) )  METHOD_4 ( VAR_2 ) (  METHOD_5 ( ) )  METHOD_5 ( ) (  VAR_3 . METHOD_6 ( VAR_4 , new java.lang.String [ ] { VAR_5 , VAR_6 } ) )  VAR_3 . METHOD_6 ( VAR_4 , new java.lang.String [ ] { VAR_5 , VAR_6 } ) (  VAR_3 . METHOD_7 ( STRING_2 , VAR_7 ) )  VAR_3 . METHOD_7 ( STRING_2 , VAR_7 ) (  VAR_3 . METHOD_7 ( STRING_3 , VAR_8 ) )  VAR_3 . METHOD_7 ( STRING_3 , VAR_8 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE char[] ) TYPE char[] ( NAME VAR_1 ) NAME VAR_1 ( INIT = new char [ 10 ] ) INIT = new char [ 10 ] ) VAR VAR (  STRING_1 . METHOD_2 ( 0 , 10 , VAR_1 , 0 ) )  STRING_1 . METHOD_2 ( 0 , 10 , VAR_1 , 0 ) (  pw = new TYPE_1 ( ) )  pw = new TYPE_1 ( ) (  VAR_2 = new TYPE_2 ( ( VAR_3 = new TYPE_3 ( pw ) ) , STRING_2 ) )  VAR_2 = new TYPE_2 ( ( VAR_3 = new TYPE_3 ( pw ) ) , STRING_2 ) (  VAR_2 . start ( ) )  VAR_2 . start ( ) (  pw . METHOD_3 ( VAR_1 ) )  pw . METHOD_3 ( VAR_1 ) (  pw . METHOD_4 ( ) )  pw . METHOD_4 ( ) (  VAR_2 . METHOD_5 ( INT_1 ) )  VAR_2 . METHOD_5 ( INT_1 ) (  assertEquals ( STRING_3 , STRING_1 , new java.lang.String ( VAR_4 ) ) )  assertEquals ( STRING_3 , STRING_1 , new java.lang.String ( VAR_4 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME text ) NAME text ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME start ) NAME start ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE float ) TYPE float ( NAME x ) NAME x ) VAR VAR ( VAR VAR ( TYPE float ) TYPE float ( NAME y ) NAME y ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME flags ) NAME flags ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME count ) NAME count ( INIT = VAR_2 - start ) INIT = VAR_2 - start ) VAR VAR ( VAR VAR ( TYPE char[] ) TYPE char[] ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_1 . METHOD_2 ( count ) ) INIT = TYPE_1 . METHOD_2 ( count ) ) VAR VAR (  TYPE_2 . METHOD_3 ( text , start , VAR_2 , VAR_4 , 0 ) )  TYPE_2 . METHOD_3 ( text , start , VAR_2 , VAR_4 , 0 ) (  TYPE_3 . METHOD_1 ( VAR_1 , VAR_4 , 0 , count , x , y , flags , VAR_3 ) )  TYPE_3 . METHOD_1 ( VAR_1 , VAR_4 , 0 , count , x , y , flags , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME size ) NAME size ( INIT = ( INT_1 * INT_2 ) * INT_2 ) INIT = ( INT_1 * INT_2 ) * INT_2 ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < ( VAR_1 . length ) ) COND i < ( VAR_1 . length ) ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  VAR_1 [ i ] = new char [ size ] )  VAR_1 [ i ] = new char [ size ] (  i ++ )  i ++ ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( BLOCK BLOCK (  size = size / 2 )  size = size / 2 ( IF IF ( COND size == 0 ) COND size == 0 ( THEN THEN (  break ; )  break ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) FOR FOR (  VAR_1 [ 0 ] = new char [ INT_3 ] )  VAR_1 [ 0 ] = new char [ INT_3 ] ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 . get ( ) ) INIT = VAR_4 . get ( ) ) VAR VAR ( IF IF ( COND VAR_3 == null ) COND VAR_3 == null ( THEN THEN (  android.util.Log.e ( VAR_5 . TAG , STRING_1 ) )  android.util.Log.e ( VAR_5 . TAG , STRING_1 ) (  return STRING_2 ; )  return STRING_2 ; ) THEN THEN ) IF IF ( IF IF ( COND VAR_6 ) COND VAR_6 ( THEN THEN (  android.util.Log.e ( VAR_5 . TAG , STRING_3 ) )  android.util.Log.e ( VAR_5 . TAG , STRING_3 ) (  return STRING_2 ; )  return STRING_2 ; ) THEN THEN ) IF IF (  return VAR_3 . METHOD_2 ( VAR_7 , VAR_1 , VAR_2 , null ) ; )  return VAR_3 . METHOD_2 ( VAR_7 , VAR_1 , VAR_2 , null ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . METHOD_3 ( VAR_4 ) ) INIT = VAR_3 . METHOD_3 ( VAR_4 ) ) VAR VAR (  org.mockito.Mockito.verify ( VAR_5 ) . METHOD_4 ( org.mockito.Matchers.eq ( VAR_1 ) , org.mockito.Matchers.eq ( false ) , TYPE_2 . METHOD_5 ( VAR_6 . String class ) ) )  org.mockito.Mockito.verify ( VAR_5 ) . METHOD_4 ( org.mockito.Matchers.eq ( VAR_1 ) , org.mockito.Matchers.eq ( false ) , TYPE_2 . METHOD_5 ( VAR_6 . String class ) ) (  assertEquals ( VAR_2 , true ) )  assertEquals ( VAR_2 , true ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_1 ) NAME VAR_1 ( INIT = 100 ) INIT = 100 ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_2 ) NAME VAR_2 ( INIT = INT_1 ) INIT = INT_1 ) VAR VAR (  VAR_3 = VAR_4 . METHOD_2 ( VAR_1 , VAR_2 , false ) )  VAR_3 = VAR_4 . METHOD_2 ( VAR_1 , VAR_2 , false ) (  assertTrue ( VAR_3 . METHOD_3 ( ) ) )  assertTrue ( VAR_3 . METHOD_3 ( ) ) (  assertFalse ( VAR_3 . METHOD_4 ( ) ) )  assertFalse ( VAR_3 . METHOD_4 ( ) ) (  METHOD_5 ( VAR_4 , VAR_3 . METHOD_6 ( ) ) )  METHOD_5 ( VAR_4 , VAR_3 . METHOD_6 ( ) ) (  METHOD_5 ( VAR_4 , VAR_3 . METHOD_7 ( ) ) )  METHOD_5 ( VAR_4 , VAR_3 . METHOD_7 ( ) ) (  assertEquals ( VAR_1 , VAR_3 . METHOD_8 ( ) ) )  assertEquals ( VAR_1 , VAR_3 . METHOD_8 ( ) ) (  assertEquals ( VAR_2 , VAR_3 . size ( ) ) )  assertEquals ( VAR_2 , VAR_3 . size ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private final ) MODIFIER private final ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME count ) NAME count ( INIT = VAR_2 . size ( ) ) INIT = VAR_2 . size ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME r ) NAME r ( INIT = null ) INIT = null ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME index ) NAME index ( INIT = - 1 ) INIT = - 1 ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = count - 1 ) INIT = count - 1 ) VAR VAR ) INIT INIT ( COND i >= 0 ) COND i >= 0 ( UPDATE UPDATE (  i -- )  i -- ) UPDATE UPDATE ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_2 . get ( i ) ) INIT = VAR_2 . get ( i ) ) VAR VAR ( IF IF ( COND VAR_3 == VAR_1 ) COND VAR_3 == VAR_1 ( THEN THEN (  r = ( ( TYPE_2 ) ( VAR_3 ) ) )  r = ( ( TYPE_2 ) ( VAR_3 ) ) (  index = i )  index = i (  break ; )  break ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR FOR (  return index ; )  return index ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( false ) )  VAR_1 . METHOD_2 ( false ) (  VAR_1 . METHOD_3 ( null ) )  VAR_1 . METHOD_3 ( null ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_4 ( ) ) INIT = VAR_1 . METHOD_4 ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_2 . METHOD_5 ( ) )  VAR_2 . METHOD_5 ( ) (  fail ( STRING_1 ) )  fail ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME expected ) NAME expected ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  VAR_1 . METHOD_6 ( ) )  VAR_1 . METHOD_6 ( ) ( TRY TRY ( BLOCK BLOCK (  VAR_2 . METHOD_5 ( ) )  VAR_2 . METHOD_5 ( ) (  fail ( STRING_2 ) )  fail ( STRING_2 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME expected ) NAME expected ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME m ) NAME m ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME v ) NAME v ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME value ) NAME value ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = false ) INIT = false ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( v == null ) ? ( ( boolean ) ( m . METHOD_2 ( ) ) ) : ( ( boolean ) ( m . METHOD_2 ( v ) ) ) ) INIT = ( v == null ) ? ( ( boolean ) ( m . METHOD_2 ( ) ) ) : ( ( boolean ) ( m . METHOD_2 ( v ) ) ) ) VAR VAR (  TYPE_3 . assertTrue ( ( VAR_3 == value ) ) )  TYPE_3 . assertTrue ( ( VAR_3 == value ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_2 = true )  VAR_2 = true ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  TYPE_3 . METHOD_3 ( VAR_2 , VAR_1 ) )  TYPE_3 . METHOD_3 ( VAR_2 , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME subId ) NAME subId ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( TYPE_1 . METHOD_2 ( VAR_2 , VAR_1 , STRING_1 ) ) ) COND ! ( TYPE_1 . METHOD_2 ( VAR_2 , VAR_1 , STRING_1 ) ) ( THEN THEN (  return VAR_3 ; )  return VAR_3 ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_3 ( subId ) ) INIT = METHOD_3 ( subId ) ) VAR VAR ( IF IF ( COND VAR_4 != null ) COND VAR_4 != null ( THEN THEN (  return VAR_4 . METHOD_4 ( ) . METHOD_5 ( ) ; )  return VAR_4 . METHOD_4 ( ) . METHOD_5 ( ) ; ) THEN THEN ( ELSE ELSE (  return VAR_3 ; )  return VAR_3 ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME get ) NAME get ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME index ) NAME index ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = size ( ) ) INIT = size ( ) ) VAR VAR (  TYPE_2 . METHOD_1 ( index , VAR_1 ) )  TYPE_2 . METHOD_1 ( index , VAR_1 ) ( VAR VAR ( TYPE int ) TYPE int ( NAME start ) NAME start ( INIT = index * ( size ) ) INIT = index * ( size ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_3 . METHOD_2 ( ( start + ( size ) ) , VAR_3 . size ( ) ) ) INIT = TYPE_3 . METHOD_2 ( ( start + ( size ) ) , VAR_3 . size ( ) ) ) VAR VAR (  return VAR_3 . METHOD_3 ( start , VAR_2 ) ; )  return VAR_3 . METHOD_3 ( start , VAR_2 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME x ) NAME x ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  assertEquals ( x , VAR_2 . METHOD_2 ( VAR_1 ) ) )  assertEquals ( x , VAR_2 . METHOD_2 ( VAR_1 ) ) (  assertEquals ( TYPE_2 . METHOD_3 ( VAR_1 ) . METHOD_4 ( ) , VAR_2 . METHOD_5 ( VAR_1 ) . METHOD_6 ( ) ) )  assertEquals ( TYPE_2 . METHOD_3 ( VAR_1 ) . METHOD_4 ( ) , VAR_2 . METHOD_5 ( VAR_1 ) . METHOD_6 ( ) ) (  assertTrue ( VAR_2 . METHOD_7 ( VAR_1 ) ) )  assertTrue ( VAR_2 . METHOD_7 ( VAR_1 ) ) (  assertEquals ( x , VAR_2 . METHOD_8 ( x ) ) )  assertEquals ( x , VAR_2 . METHOD_8 ( x ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  VAR_1 )  VAR_1 ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME userId ) NAME userId ( INIT = TYPE_1 . METHOD_2 ( ) ) INIT = TYPE_1 . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND ( VAR_2 ) != userId ) COND ( VAR_2 ) != userId ( THEN THEN ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_2 ) INIT = VAR_2 ) VAR VAR (  VAR_2 = userId )  VAR_2 = userId ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_5 . get ( VAR_3 ) ) INIT = VAR_5 . get ( VAR_3 ) ) VAR VAR ( IF IF ( COND VAR_4 != null ) COND VAR_4 != null ( THEN THEN (  VAR_4 . METHOD_3 ( ) )  VAR_4 . METHOD_3 ( ) ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_6 ) NAME VAR_6 ( INIT = METHOD_4 ( userId ) ) INIT = METHOD_4 ( userId ) ) VAR VAR (  VAR_6 . METHOD_5 ( ) )  VAR_6 . METHOD_5 ( ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( VAR_2 , VAR_3 ) ) INIT = new TYPE_1 ( VAR_2 , VAR_3 ) ) VAR VAR (  VAR_1 . METHOD_2 ( VAR_4 ) )  VAR_1 . METHOD_2 ( VAR_4 ) (  VAR_1 . METHOD_3 ( false ) )  VAR_1 . METHOD_3 ( false ) (  VAR_1 . METHOD_4 ( false ) )  VAR_1 . METHOD_4 ( false ) (  VAR_1 . METHOD_5 ( false ) )  VAR_1 . METHOD_5 ( false ) (  VAR_1 . METHOD_6 ( FLOAT_1 ) )  VAR_1 . METHOD_6 ( FLOAT_1 ) (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_6 ) NAME VAR_6 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_3 == null ) || ( VAR_2 == null ) ) COND ( VAR_3 == null ) || ( VAR_2 == null ) ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_7 ) NAME VAR_7 ( INIT = new TYPE_3 ( ) ) INIT = new TYPE_3 ( ) ) VAR VAR (  VAR_8 = VAR_3 )  VAR_8 = VAR_3 (  VAR_9 = VAR_5 )  VAR_9 = VAR_5 (  return TYPE_4 . METHOD_2 ( VAR_2 , VAR_4 , VAR_7 , VAR_6 ) ; )  return TYPE_4 . METHOD_2 ( VAR_2 , VAR_4 , VAR_7 , VAR_6 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE double[] ) TYPE double[] ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( double [ ] ) ( VAR_2 . METHOD_2 ( ) ) ) ) INIT = ( ( double [ ] ) ( VAR_2 . METHOD_2 ( ) ) ) ) VAR VAR ( VAR VAR ( TYPE double[] ) TYPE double[] ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 . METHOD_3 ( ) ) INIT = VAR_4 . METHOD_3 ( ) ) VAR VAR (  assertTrue ( STRING_1 , VAR_3 . equals ( VAR_2 ) ) )  assertTrue ( STRING_1 , VAR_3 . equals ( VAR_2 ) ) (  VAR_3 [ 0 ] = FLOAT_1 )  VAR_3 [ 0 ] = FLOAT_1 (  assertTrue ( STRING_2 , ( ! ( VAR_3 . equals ( VAR_1 ) ) ) ) )  assertTrue ( STRING_2 , ( ! ( VAR_3 . equals ( VAR_1 ) ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.StringBuilder ) TYPE java.lang.StringBuilder ( NAME b ) NAME b ( INIT = new java.lang.StringBuilder ( ) ) INIT = new java.lang.StringBuilder ( ) ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < 10 ) COND i < 10 ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME d ) NAME d ( INIT = b . toString ( ) . METHOD_2 ( STRING_1 , 1 ) ) INIT = b . toString ( ) . METHOD_2 ( STRING_1 , 1 ) ) VAR VAR ) BLOCK BLOCK ) FOR FOR (  return b . length ( ) ; )  return b . length ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  super . METHOD_1 ( VAR_1 ) )  super . METHOD_1 ( VAR_1 ) ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = false ) INIT = false ) VAR VAR ( IF IF ( COND ( ( VAR_3 ) == ( VAR_4 ) ) && ( VAR_5 ) ) COND ( ( VAR_3 ) == ( VAR_4 ) ) && ( VAR_5 ) ( THEN THEN (  VAR_2 = true )  VAR_2 = true ) THEN THEN ) IF IF (  VAR_1 . METHOD_2 ( VAR_6 ) . METHOD_3 ( VAR_2 ) )  VAR_1 . METHOD_2 ( VAR_6 ) . METHOD_3 ( VAR_2 ) (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME from ) NAME from ) VAR VAR ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME to ) NAME to ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_3 ( ) . METHOD_2 ( VAR_2 ) . METHOD_3 ( STRING_1 , STRING_2 , from . METHOD_4 ( ) , STRING_3 , to . METHOD_4 ( ) ) . METHOD_5 ( ) ) INIT = new TYPE_3 ( ) . METHOD_2 ( VAR_2 ) . METHOD_3 ( STRING_1 , STRING_2 , from . METHOD_4 ( ) , STRING_3 , to . METHOD_4 ( ) ) . METHOD_5 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME result ) NAME result ( INIT = VAR_3 . METHOD_6 ( VAR_1 , VAR_4 ) ) INIT = VAR_3 . METHOD_6 ( VAR_1 , VAR_4 ) ) VAR VAR (  result . METHOD_7 ( ) . METHOD_8 ( ) )  result . METHOD_7 ( ) . METHOD_8 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_1 ( e ) ; )  throw new TYPE_1 ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ! ( METHOD_2 ( ) ) ) COND ! ( METHOD_2 ( ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  METHOD_3 ( STRING_1 ) )  METHOD_3 ( STRING_1 ) (  METHOD_4 ( ) )  METHOD_4 ( ) (  METHOD_3 ( STRING_2 ) )  METHOD_3 ( STRING_2 ) (  VAR_1 . METHOD_5 ( VAR_2 ) )  VAR_1 . METHOD_5 ( VAR_2 ) (  VAR_1 . METHOD_6 ( VAR_2 , null ) )  VAR_1 . METHOD_6 ( VAR_2 , null ) (  assertEquals ( STRING_3 , VAR_3 , VAR_1 . METHOD_7 ( ) . METHOD_8 ( ) ) )  assertEquals ( STRING_3 , VAR_3 , VAR_1 . METHOD_7 ( ) . METHOD_8 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_2 ( ) ) INIT = VAR_2 . METHOD_2 ( ) ) VAR VAR (  TYPE_2 . METHOD_3 ( VAR_1 , STRING_1 ) )  TYPE_2 . METHOD_3 ( VAR_1 , STRING_1 ) (  assertTrue ( METHOD_4 ( VAR_1 , STRING_1 ) ) )  assertTrue ( METHOD_4 ( VAR_1 , STRING_1 ) ) (  TYPE_2 . METHOD_5 ( VAR_1 , STRING_1 ) )  TYPE_2 . METHOD_5 ( VAR_1 , STRING_1 ) (  assertFalse ( METHOD_4 ( VAR_1 , STRING_1 ) ) )  assertFalse ( METHOD_4 ( VAR_1 , STRING_1 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.Allocation ) TYPE TYPE_1.Allocation ( NAME in ) NAME in ) VAR VAR ( VAR VAR ( TYPE TYPE_1.Allocation ) TYPE TYPE_1.Allocation ( NAME out ) NAME out ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_2 ( VAR_4 ) ) INIT = METHOD_2 ( VAR_4 ) ) VAR VAR ( IF IF ( COND ( VAR_3 != null ) && ( VAR_5 ) ) COND ( VAR_3 != null ) && ( VAR_5 ) ( THEN THEN ( VAR VAR ( TYPE TYPE_1.Allocation ) TYPE TYPE_1.Allocation ( NAME VAR_6 ) NAME VAR_6 ( INIT = in ) INIT = in ) VAR VAR ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  VAR_6 = TYPE_4 . METHOD_3 ( TYPE_5 . METHOD_4 ( ) , in . METHOD_5 ( ) ) )  VAR_6 = TYPE_4 . METHOD_3 ( TYPE_5 . METHOD_4 ( ) , in . METHOD_5 ( ) ) (  VAR_6 . METHOD_6 ( out ) )  VAR_6 . METHOD_6 ( out ) ) THEN THEN ) IF IF (  VAR_2 . METHOD_7 ( VAR_3 , VAR_6 , out ) )  VAR_2 . METHOD_7 ( VAR_3 , VAR_6 , out ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  VAR_1 )  VAR_1 ( BLOCK BLOCK ( IF IF ( COND ( fd ) != null ) COND ( fd ) != null ( THEN THEN ( IF IF ( COND ! ( VAR_2 ) ) COND ! ( VAR_2 ) ( THEN THEN (  TYPE_1 . METHOD_2 ( ) )  TYPE_1 . METHOD_2 ( ) ) THEN THEN ) IF IF ( IF IF ( COND VAR_3 ) COND VAR_3 ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  VAR_3 = true )  VAR_3 = true (  METHOD_3 ( ) )  METHOD_3 ( ) (  fd = null )  fd = null (  return ; )  return ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  android.util.Slog.v ( VAR_2 . TAG , ( STRING_1 + ( VAR_3 ) ) ) )  android.util.Slog.v ( VAR_2 . TAG , ( STRING_1 + ( VAR_3 ) ) ) ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_3 ) == null ) COND ( VAR_3 ) == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  METHOD_2 ( ) )  METHOD_2 ( ) (  VAR_4 . METHOD_3 ( VAR_3 , METHOD_4 ( ) ) )  VAR_4 . METHOD_3 ( VAR_3 , METHOD_4 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.ArrayList<TYPE_1> ) RETURN java.util.ArrayList<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME VAR_1 ) NAME VAR_1 ( INIT = null ) INIT = null ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_4 . METHOD_2 ( ) ) INIT = TYPE_4 . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN (  VAR_1 = VAR_2 . METHOD_3 ( METHOD_4 ( ) , TYPE_5 . METHOD_5 ( ) ) )  VAR_1 = VAR_2 . METHOD_3 ( METHOD_4 ( ) , TYPE_5 . METHOD_5 ( ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME ex ) NAME ex ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  return METHOD_6 ( VAR_1 ) ; )  return METHOD_6 ( VAR_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  < java.lang.String > c = java.lang.String : : )  < java.lang.String > c = java.lang.String : : (  org.junit.Assert.assertEquals ( 2 , c . METHOD_3 ( ) . METHOD_4 ( ) . length ) )  org.junit.Assert.assertEquals ( 2 , c . METHOD_3 ( ) . METHOD_4 ( ) . length ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME m ) NAME m ( INIT = c . METHOD_3 ( ) . METHOD_5 ( STRING_1 , VAR_1 . Object class ) ) INIT = c . METHOD_3 ( ) . METHOD_5 ( STRING_1 , VAR_1 . Object class ) ) VAR VAR (  org.junit.Assert.assertEquals ( boolean . class , m . METHOD_6 ( ) ) )  org.junit.Assert.assertEquals ( boolean . class , m . METHOD_6 ( ) ) (  TYPE_3 . assertFalse ( m . METHOD_7 ( ) ) )  TYPE_3 . assertFalse ( m . METHOD_7 ( ) ) (  TYPE_3 . assertFalse ( m . METHOD_8 ( ) ) )  TYPE_3 . assertFalse ( m . METHOD_8 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( ) )  VAR_1 . METHOD_2 ( ) (  VAR_1 . METHOD_3 ( STRING_1 , STRING_2 ) )  VAR_1 . METHOD_3 ( STRING_1 , STRING_2 ) ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME packageName ) NAME packageName ( INIT = STRING_3 ) INIT = STRING_3 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( packageName . METHOD_4 ( CHAR_1 , CHAR_2 ) ) + STRING_4 ) INIT = ( packageName . METHOD_4 ( CHAR_1 , CHAR_2 ) ) + STRING_4 ) VAR VAR ( VAR VAR ( TYPE java.util.Map<java.lang.String,TYPE_1> ) TYPE java.util.Map<java.lang.String,TYPE_1> ( NAME input ) NAME input ( INIT = TYPE_2 . METHOD_5 ( ) ) INIT = TYPE_2 . METHOD_5 ( ) ) VAR VAR (  input . METHOD_3 ( STRING_5 , new TYPE_1 ( true ) . METHOD_6 ( STRING_6 , true ) ) )  input . METHOD_3 ( STRING_5 , new TYPE_1 ( true ) . METHOD_6 ( STRING_6 , true ) ) (  METHOD_7 ( packageName , input ) )  METHOD_7 ( packageName , input ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return TYPE_3 . METHOD_2 ( ) . METHOD_3 ( VAR_1 . getName ( ) ) . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) . METHOD_6 ( VAR_1 . METHOD_7 ( ) ) . METHOD_8 ( VAR_1 . METHOD_9 ( ) ) . METHOD_10 ( VAR_1 . METHOD_11 ( ) ) . METHOD_12 ( VAR_1 . METHOD_13 ( ) ) . METHOD_14 ( VAR_1 . METHOD_15 ( ) ) . METHOD_16 ( VAR_1 . METHOD_17 ( ) ) ; )  return TYPE_3 . METHOD_2 ( ) . METHOD_3 ( VAR_1 . getName ( ) ) . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) . METHOD_6 ( VAR_1 . METHOD_7 ( ) ) . METHOD_8 ( VAR_1 . METHOD_9 ( ) ) . METHOD_10 ( VAR_1 . METHOD_11 ( ) ) . METHOD_12 ( VAR_1 . METHOD_13 ( ) ) . METHOD_14 ( VAR_1 . METHOD_15 ( ) ) . METHOD_16 ( VAR_1 . METHOD_17 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 . METHOD_2 ( VAR_1 ) ) INIT = VAR_4 . METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_3 == null ) COND VAR_3 == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_5 ) NAME VAR_5 ( INIT = TYPE_2 . METHOD_2 ( VAR_2 ) ) INIT = TYPE_2 . METHOD_2 ( VAR_2 ) ) VAR VAR ( IF IF ( COND VAR_5 == null ) COND VAR_5 == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_6 ) NAME VAR_6 ( INIT = VAR_3 . METHOD_3 ( ) ) INIT = VAR_3 . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_7 ) NAME VAR_7 ( INIT = VAR_6 . METHOD_4 ( ) ) INIT = VAR_6 . METHOD_4 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_8 ) NAME VAR_8 ( INIT = VAR_5 . METHOD_5 ( ) ) INIT = VAR_5 . METHOD_5 ( ) ) VAR VAR (  VAR_7 . METHOD_6 ( VAR_8 ) )  VAR_7 . METHOD_6 ( VAR_8 ) (  VAR_6 . METHOD_7 ( VAR_7 ) )  VAR_6 . METHOD_7 ( VAR_7 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME c ) NAME c ( INIT = TYPE_1 . METHOD_2 ( ) ) INIT = TYPE_1 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2[] ) TYPE TYPE_2[] ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_3 . METHOD_3 ( c , null ) ) INIT = TYPE_3 . METHOD_3 ( c , null ) ) VAR VAR (  METHOD_4 ( VAR_1 [ 0 ] , VAR_1 [ 1 ] ) )  METHOD_4 ( VAR_1 [ 0 ] , VAR_1 [ 1 ] ) (  c . METHOD_5 ( ) )  c . METHOD_5 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME equals ) NAME equals ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME obj ) NAME obj ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_1 ) ( obj ) ) ) INIT = ( ( TYPE_1 ) ( obj ) ) ) VAR VAR (  return ( ( ( VAR_2 . equals ( VAR_3 ) ) && ( VAR_4 . equals ( VAR_5 ) ) ) && ( VAR_6 . equals ( VAR_7 ) ) ) && ( VAR_8 . equals ( VAR_9 ) ) ; )  return ( ( ( VAR_2 . equals ( VAR_3 ) ) && ( VAR_4 . equals ( VAR_5 ) ) ) && ( VAR_6 . equals ( VAR_7 ) ) ) && ( VAR_8 . equals ( VAR_9 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( ! ( METHOD_2 ( ) ) ) || ( ! ( METHOD_3 ( ) ) ) ) COND ( ! ( METHOD_2 ( ) ) ) || ( ! ( METHOD_3 ( ) ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  METHOD_4 ( VAR_1 ) )  METHOD_4 ( VAR_1 ) (  METHOD_5 ( VAR_2 ) )  METHOD_5 ( VAR_2 ) (  VAR_3 . METHOD_6 ( STRING_1 , VAR_4 ) )  VAR_3 . METHOD_6 ( STRING_1 , VAR_4 ) (  VAR_3 . METHOD_6 ( STRING_2 , VAR_5 ) )  VAR_3 . METHOD_6 ( STRING_2 , VAR_5 ) (  METHOD_7 ( ) )  METHOD_7 ( ) (  METHOD_8 ( ) )  METHOD_8 ( ) (  METHOD_9 ( ) )  METHOD_9 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_2 ) != null ) COND ( VAR_2 ) != null ( THEN THEN (  METHOD_2 ( VAR_2 . METHOD_3 ( ) , VAR_2 . METHOD_4 ( VAR_3 ) ) )  METHOD_2 ( VAR_2 . METHOD_3 ( ) , VAR_2 . METHOD_4 ( VAR_3 ) ) ) THEN THEN ) IF IF (  VAR_4 . METHOD_5 ( ) )  VAR_4 . METHOD_5 ( ) (  VAR_5 = null )  VAR_5 = null (  VAR_6 = false )  VAR_6 = false (  VAR_7 = false )  VAR_7 = false (  VAR_8 . METHOD_6 ( false ) )  VAR_8 . METHOD_6 ( false ) (  VAR_9 . METHOD_7 ( false ) )  VAR_9 . METHOD_7 ( false ) (  METHOD_8 ( ) )  METHOD_8 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( TYPE_3 . METHOD_3 ( ) ) ) INIT = TYPE_2 . METHOD_2 ( TYPE_3 . METHOD_3 ( ) ) ) VAR VAR (  VAR_1 . METHOD_4 ( TYPE_4 . METHOD_5 ( new TYPE_5 ( ) ) ) )  VAR_1 . METHOD_4 ( TYPE_4 . METHOD_5 ( new TYPE_5 ( ) ) ) (  VAR_1 . METHOD_4 ( TYPE_4 . METHOD_5 ( new TYPE_6 ( VAR_2 , VAR_3 ) ) ) )  VAR_1 . METHOD_4 ( TYPE_4 . METHOD_5 ( new TYPE_6 ( VAR_2 , VAR_3 ) ) ) (  VAR_1 . METHOD_4 ( TYPE_4 . METHOD_5 ( new TYPE_7 ( ) ) ) )  VAR_1 . METHOD_4 ( TYPE_4 . METHOD_5 ( new TYPE_7 ( ) ) ) (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static synchronized ) MODIFIER public static synchronized ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( VAR_2 ) != null ) && ( ! ( VAR_1 . equals ( VAR_3 ) ) ) ) COND ( ( VAR_2 ) != null ) && ( ! ( VAR_1 . equals ( VAR_3 ) ) ) ( THEN THEN (  throw new TYPE_2 ( STRING_1 ) ; )  throw new TYPE_2 ( STRING_1 ) ; ) THEN THEN ) IF IF (  return VAR_2 = new TYPE_3 ( VAR_1 ) ; )  return VAR_2 = new TYPE_3 ( VAR_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected static ) MODIFIER protected static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME b ) NAME b ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  VAR_4 )  VAR_4 ( BLOCK BLOCK (  VAR_4 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) )  VAR_4 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_5 ) NAME VAR_5 ( INIT = TYPE_4 . get ( VAR_4 ) ) INIT = TYPE_4 . get ( VAR_4 ) ) VAR VAR ( IF IF ( COND VAR_5 != null ) COND VAR_5 != null ( THEN THEN (  return VAR_5 ; )  return VAR_5 ; ) THEN THEN ) IF IF (  TYPE_4 . METHOD_3 ( ( ( TYPE_5 ) ( VAR_4 . METHOD_4 ( ) ) ) , b ) )  TYPE_4 . METHOD_3 ( ( ( TYPE_5 ) ( VAR_4 . METHOD_4 ( ) ) ) , b ) (  return b ; )  return b ; ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( PARAMS PARAMS ( VAR VAR ( TYPE com.android.jack.ir.ast.JMethod ) TYPE com.android.jack.ir.ast.JMethod ( NAME method ) NAME method ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE com.android.jack.ir.ast.JDefinedClassOrInterface ) TYPE com.android.jack.ir.ast.JDefinedClassOrInterface ( NAME VAR_1 ) NAME VAR_1 ( INIT = method . METHOD_1 ( ) ) INIT = method . METHOD_1 ( ) ) VAR VAR ( IF IF ( COND ( ( ( VAR_1 . METHOD_2 ( ) ) || ( method . METHOD_3 ( ) ) ) || ( method . METHOD_4 ( ) ) ) || ( ! ( VAR_2 . METHOD_5 ( this . METHOD_6 ( ) , method ) ) ) ) COND ( ( ( VAR_1 . METHOD_2 ( ) ) || ( method . METHOD_3 ( ) ) ) || ( method . METHOD_4 ( ) ) ) || ( ! ( VAR_2 . METHOD_5 ( this . METHOD_6 ( ) , method ) ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_3 . METHOD_5 ( method ) )  VAR_3 . METHOD_5 ( method ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return ( ( ( ( ( VAR_1 . METHOD_2 ( STRING_1 ) ) == false ) && ( ( VAR_1 . METHOD_2 ( STRING_2 ) ) == false ) ) && ( ( VAR_1 . METHOD_2 ( STRING_3 ) ) == false ) ) && ( ( VAR_1 . METHOD_2 ( STRING_4 ) ) == false ) ) && ( ( VAR_1 . METHOD_3 ( STRING_5 ) ) == false ) ; )  return ( ( ( ( ( VAR_1 . METHOD_2 ( STRING_1 ) ) == false ) && ( ( VAR_1 . METHOD_2 ( STRING_2 ) ) == false ) ) && ( ( VAR_1 . METHOD_2 ( STRING_3 ) ) == false ) ) && ( ( VAR_1 . METHOD_2 ( STRING_4 ) ) == false ) ) && ( ( VAR_1 . METHOD_3 ( STRING_5 ) ) == false ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME index ) NAME index ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = index - 1 ) INIT = index - 1 ) VAR VAR ( IF IF ( COND ( i < 0 ) || ( i >= ( count ) ) ) COND ( i < 0 ) || ( i >= ( count ) ) ( THEN THEN (  throw new TYPE_1 ( index ) ; )  throw new TYPE_1 ( index ) ; ) THEN THEN ) IF IF (  return TYPE_2 . METHOD_1 ( this , index ) ; )  return TYPE_2 . METHOD_1 ( this , index ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME info ) NAME info ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return new TYPE_1 ( info , new TYPE_3 ( info , null , VAR_1 , VAR_3 , TYPE_4 . METHOD_2 ( ) , false ) ) ; )  return new TYPE_1 ( info , new TYPE_3 ( info , null , VAR_1 , VAR_3 , TYPE_4 . METHOD_2 ( ) , false ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME status ) NAME status ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME test ) NAME test ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( IF IF ( COND status == ( VAR_3 ) ) COND status == ( VAR_3 ) ( THEN THEN (  VAR_2 = VAR_4 )  VAR_2 = VAR_4 ) THEN THEN ( ELSE ELSE (  VAR_2 = VAR_5 )  VAR_2 = VAR_5 ) ELSE ELSE ) IF IF ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_6 ) NAME VAR_6 ( INIT = new TYPE_3 ( new TYPE_4 ( test ) , VAR_2 , VAR_1 , null ) ) INIT = new TYPE_3 ( new TYPE_4 ( test ) , VAR_2 , VAR_1 , null ) ) VAR VAR (  VAR_7 . METHOD_2 ( ) . METHOD_3 ( VAR_6 ) )  VAR_7 . METHOD_2 ( ) . METHOD_3 ( VAR_6 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.util.List<?extendsTYPE_2> ) TYPE java.util.List<?extendsTYPE_2> ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  super . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 ) )  super . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 ) (  VAR_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( INT_1 ) ) )  VAR_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( INT_1 ) ) (  VAR_1 . METHOD_2 ( METHOD_4 ( VAR_2 , VAR_3 ) ) )  VAR_1 . METHOD_2 ( METHOD_4 ( VAR_2 , VAR_3 ) ) ( IF IF ( COND ( VAR_3 . size ( ) ) > 0 ) COND ( VAR_3 . size ( ) ) > 0 ( THEN THEN (  VAR_1 . METHOD_2 ( METHOD_5 ( VAR_3 , VAR_4 ) ) )  VAR_1 . METHOD_2 ( METHOD_5 ( VAR_3 , VAR_4 ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( VAR_2 ) == null ) || ( ( VAR_2 . length ) < VAR_1 ) ) COND ( ( VAR_2 ) == null ) || ( ( VAR_2 . length ) < VAR_1 ) ( THEN THEN ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_3 ) NAME VAR_3 ( INIT = new byte [ VAR_1 ] ) INIT = new byte [ VAR_1 ] ) VAR VAR (  TYPE_1 . METHOD_2 ( VAR_2 , 0 , VAR_3 , 0 , size ) )  TYPE_1 . METHOD_2 ( VAR_2 , 0 , VAR_3 , 0 , size ) (  VAR_2 = VAR_3 )  VAR_2 = VAR_3 ) THEN THEN ) IF IF (  return this ; )  return this ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME f ) NAME f ( INIT = new java.io.File ( VAR_2 , VAR_1 ) ) INIT = new java.io.File ( VAR_2 , VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = f . METHOD_2 ( ) ) INIT = f . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND ( f . METHOD_3 ( ) ) && ( ( VAR_3 . METHOD_4 ( ( ( VAR_3 . length ( ) ) - 1 ) ) ) != ( VAR_4 ) ) ) COND ( f . METHOD_3 ( ) ) && ( ( VAR_3 . METHOD_4 ( ( ( VAR_3 . length ( ) ) - 1 ) ) ) != ( VAR_4 ) ) ( THEN THEN (  VAR_3 += VAR_4 )  VAR_3 += VAR_4 ) THEN THEN ) IF IF (  VAR_5 . METHOD_5 ( id , VAR_3 ) )  VAR_5 . METHOD_5 ( id , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE float ) TYPE float ( NAME x ) NAME x ) VAR VAR ( VAR VAR ( TYPE float ) TYPE float ( NAME y ) NAME y ) VAR VAR ( VAR VAR ( TYPE float ) TYPE float ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE float ) TYPE float ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  VAR_4 )  VAR_4 ( BLOCK BLOCK ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_5 ) NAME VAR_5 ( INIT = TYPE_2 . METHOD_2 ( ) ) INIT = TYPE_2 . METHOD_2 ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  METHOD_3 ( METHOD_4 ( this , VAR_1 ) , x , y , VAR_2 , VAR_3 ) )  METHOD_3 ( METHOD_4 ( this , VAR_1 ) , x , y , VAR_2 , VAR_3 ) ) BLOCK BLOCK ( FINALLY FINALLY (  TYPE_2 . METHOD_5 ( VAR_5 ) )  TYPE_2 . METHOD_5 ( VAR_5 ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE float ) TYPE float ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE float ) TYPE float ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE float ) TYPE float ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE float ) TYPE float ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME d ) NAME d ( INIT = VAR_6 . METHOD_2 ( VAR_1 ) ) INIT = VAR_6 . METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND d == null ) COND d == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  VAR_7 = TYPE_1 . METHOD_3 ( VAR_2 , VAR_3 , VAR_4 , VAR_5 ) )  VAR_7 = TYPE_1 . METHOD_3 ( VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME context ) NAME context ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  android.util.Log.v ( TYPE_2 . TAG , STRING_1 ) )  android.util.Log.v ( TYPE_2 . TAG , STRING_1 ) ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_2 ) != null ) COND ( VAR_2 ) != null ( THEN THEN (  android.util.Log.w ( TYPE_2 . TAG , STRING_2 ) )  android.util.Log.w ( TYPE_2 . TAG , STRING_2 ) ) THEN THEN ) IF IF (  VAR_2 = new TYPE_2 ( context ) )  VAR_2 = new TYPE_2 ( context ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER synchronized ) MODIFIER synchronized ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE long ) TYPE long ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME d ) NAME d ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_6 ) NAME VAR_6 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_7 ) NAME VAR_7 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  METHOD_3 ( mContext , id , VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , d , VAR_6 , VAR_8 ) )  METHOD_3 ( mContext , id , VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , d , VAR_6 , VAR_8 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int[] ) TYPE int[] ( NAME x ) NAME x ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME r ) NAME r ( INIT = 0 ) INIT = 0 ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < 4 ) COND i < 4 ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK (  r += x [ i ] )  r += x [ i ] ) BLOCK BLOCK ) FOR FOR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = r ) INIT = r ) VAR VAR ) INIT INIT ( COND i < 16 ) COND i < 16 ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK (  r += i )  r += i ) BLOCK BLOCK ) FOR FOR (  return r ; )  return r ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME e ) NAME e ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME msg ) NAME msg ) VAR VAR ( VAR VAR ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_1 . log ( ( ( VAR_1 ) + msg ) ) )  TYPE_1 . log ( ( ( VAR_1 ) + msg ) ) ( IF IF ( COND ! ( VAR_2 ) ) COND ! ( VAR_2 ) ( THEN THEN (  TYPE_2 . println ( ( ( VAR_1 ) + msg ) ) )  TYPE_2 . println ( ( ( VAR_1 ) + msg ) ) ( IF IF ( COND e != null ) COND e != null ( THEN THEN (  TYPE_2 . println ( e.getMessage ( ) ) )  TYPE_2 . println ( e.getMessage ( ) ) ) THEN THEN ) IF IF (  return ; )  return ; ) THEN THEN ) IF IF (  VAR_3 . println ( ( ( VAR_1 ) + msg ) ) )  VAR_3 . println ( ( ( VAR_1 ) + msg ) ) ( IF IF ( COND e != null ) COND e != null ( THEN THEN (  e . METHOD_1 ( ) )  e . METHOD_1 ( ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected final ) MODIFIER protected final ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME h ) NAME h ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME TYPE_3 ) NAME TYPE_3 ( INIT = new TYPE_2 ( 1 ) ) INIT = new TYPE_2 ( 1 ) ) VAR VAR (  h . METHOD_2 ( TYPE_3 : : METHOD_3 ) )  h . METHOD_2 ( TYPE_3 : : METHOD_3 ) ( WHILE WHILE ( COND ( TYPE_3 . METHOD_4 ( ) ) > 0 ) COND ( TYPE_3 . METHOD_4 ( ) ) > 0 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  TYPE_3 . METHOD_5 ( VAR_1 , VAR_2 ) )  TYPE_3 . METHOD_5 ( VAR_1 , VAR_2 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) WHILE WHILE ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME node ) NAME node ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_1 ) ) COND ! ( VAR_1 ) ( THEN THEN (  return new TYPE_1 ( ) ; )  return new TYPE_1 ( ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME parent ) NAME parent ( INIT = METHOD_3 ( ) ) INIT = METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( WHILE WHILE ( COND parent != null ) COND parent != null ( BLOCK BLOCK (  VAR_3 = parent . METHOD_2 ( ) )  VAR_3 = parent . METHOD_2 ( ) ( IF IF ( COND ! ( VAR_2 . METHOD_4 ( VAR_3 ) ) ) COND ! ( VAR_2 . METHOD_4 ( VAR_3 ) ) ( THEN THEN (  return new TYPE_1 ( ) ; )  return new TYPE_1 ( ) ; ) THEN THEN ) IF IF (  parent = parent . METHOD_3 ( ) )  parent = parent . METHOD_3 ( ) ) BLOCK BLOCK ) WHILE WHILE (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( WHILE WHILE ( COND ! ( VAR_2 . equals ( STRING_1 ) ) ) COND ! ( VAR_2 . equals ( STRING_1 ) ) ( BLOCK BLOCK ( IF IF ( COND VAR_1 . equals ( VAR_2 ) ) COND VAR_1 . equals ( VAR_2 ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF (  VAR_2 = METHOD_2 ( VAR_2 ) )  VAR_2 = METHOD_2 ( VAR_2 ) ( IF IF ( COND VAR_2 == null ) COND VAR_2 == null ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) WHILE WHILE (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( false , false , false ) )  METHOD_2 ( false , false , false ) (  METHOD_3 ( false ) )  METHOD_3 ( false ) (  TYPE_1 . when ( VAR_1 . METHOD_4 ( org.mockito.Matchers . METHOD_5 ( VAR_2 class ) ) ) . thenReturn ( false ) )  TYPE_1 . when ( VAR_1 . METHOD_4 ( org.mockito.Matchers . METHOD_5 ( VAR_2 class ) ) ) . thenReturn ( false ) (  assertFalse ( VAR_3 . METHOD_6 ( new TYPE_2 ( ) , false ) ) )  assertFalse ( VAR_3 . METHOD_6 ( new TYPE_2 ( ) , false ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( PARAMS PARAMS ( VAR VAR ( TYPE com.android.jack.ir.ast.JMethod ) TYPE com.android.jack.ir.ast.JMethod ( NAME method ) NAME method ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE com.android.jack.ir.ast.JDefinedClassOrInterface ) TYPE com.android.jack.ir.ast.JDefinedClassOrInterface ( NAME VAR_1 ) NAME VAR_1 ( INIT = method . METHOD_1 ( ) ) INIT = method . METHOD_1 ( ) ) VAR VAR ( IF IF ( COND ( ( method . METHOD_2 ( ) ) || ( method . METHOD_3 ( ) ) ) || ( ! ( VAR_2 . METHOD_4 ( this . METHOD_5 ( ) , method ) ) ) ) COND ( ( method . METHOD_2 ( ) ) || ( method . METHOD_3 ( ) ) ) || ( ! ( VAR_2 . METHOD_4 ( this . METHOD_5 ( ) , method ) ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_1 ( method ) ) INIT = new TYPE_1 ( method ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_2 ( VAR_3 , VAR_1 . METHOD_6 ( ) ) ) INIT = new TYPE_2 ( VAR_3 , VAR_1 . METHOD_6 ( ) ) ) VAR VAR (  VAR_4 . METHOD_4 ( method ) )  VAR_4 . METHOD_4 ( method ) (  VAR_3 . METHOD_7 ( ) )  VAR_3 . METHOD_7 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  VAR_2 . METHOD_2 ( ) )  VAR_2 . METHOD_2 ( ) (  TYPE_1 . METHOD_3 ( id ) )  TYPE_1 . METHOD_3 ( id ) (  TYPE_1 . METHOD_4 ( ) . METHOD_5 ( TYPE_1 . METHOD_6 ( id , VAR_3 ) , VAR_1 ) )  TYPE_1 . METHOD_4 ( ) . METHOD_5 ( TYPE_1 . METHOD_6 ( id , VAR_3 ) , VAR_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Throwable ) TYPE java.lang.Throwable ( NAME e ) NAME e ( BLOCK BLOCK (  throw TYPE_2 . METHOD_7 ( e ) ; )  throw TYPE_2 . METHOD_7 ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ( FINALLY FINALLY (  VAR_2 . METHOD_8 ( ) )  VAR_2 . METHOD_8 ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public final ) MODIFIER public final ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME format ) NAME format ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  VAR_3 )  VAR_3 ( BLOCK BLOCK ( IF IF ( COND ( VAR_4 ) == null ) COND ( VAR_4 ) == null ( THEN THEN (  throw new TYPE_1 ( STRING_1 ) ; )  throw new TYPE_1 ( STRING_1 ) ; ) THEN THEN ) IF IF ( TRY TRY ( BLOCK BLOCK (  VAR_4 . METHOD_1 ( VAR_1 , format , VAR_2 ) )  VAR_4 . METHOD_1 ( VAR_1 , format , VAR_2 ) (  METHOD_2 ( VAR_1 , 0 , VAR_5 ) )  METHOD_2 ( VAR_1 , 0 , VAR_5 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME e ) NAME e ( BLOCK BLOCK (  android.util.Log.e ( VAR_6 , ( STRING_2 + ( e.getMessage ( ) ) ) ) )  android.util.Log.e ( VAR_6 , ( STRING_2 + ( e.getMessage ( ) ) ) ) (  METHOD_2 ( VAR_1 , 0 , VAR_7 ) )  METHOD_2 ( VAR_1 , 0 , VAR_7 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME getName ) NAME getName ( PARAMS PARAMS ( VAR VAR ( TYPE android.bluetooth.BluetoothDevice ) TYPE android.bluetooth.BluetoothDevice ( NAME device ) NAME device ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_1 ( device ) ) INIT = METHOD_1 ( device ) ) VAR VAR ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN (  return VAR_1 . getName ( ) ; )  return VAR_1 . getName ( ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ( INIT = device . METHOD_2 ( ) ) INIT = device . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND name != null ) COND name != null ( THEN THEN (  return name ; )  return name ; ) THEN THEN ) IF IF (  return device . METHOD_3 ( ) ; )  return device . METHOD_3 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1<TYPE_2> ) RETURN TYPE_1<TYPE_2> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.android.jack.ir.ast.JDefinedClassOrInterface ) TYPE com.android.jack.ir.ast.JDefinedClassOrInterface ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.ArrayList < TYPE_2 > ( ) ) INIT = new java.util.ArrayList < TYPE_2 > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE com.android.jack.ir.ast.JDefinedClassOrInterface ) TYPE com.android.jack.ir.ast.JDefinedClassOrInterface ( NAME type ) NAME type ( IN VAR_3 ) IN VAR_3 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 . METHOD_2 ( type ) ) || ( type . METHOD_2 ( VAR_1 ) ) ) COND ( VAR_1 . METHOD_2 ( type ) ) || ( type . METHOD_2 ( VAR_1 ) ) ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME field ) NAME field ( IN type . METHOD_3 ( ) ) IN type . METHOD_3 ( ) ( BLOCK BLOCK (  VAR_2 . METHOD_4 ( field . METHOD_5 ( ) ) )  VAR_2 . METHOD_4 ( field . METHOD_5 ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( VAR_2 class ) ) INIT = TYPE_2 . METHOD_2 ( VAR_2 class ) ) VAR VAR (  TYPE_3 . METHOD_3 ( VAR_1 , VAR_3 ) )  TYPE_3 . METHOD_3 ( VAR_1 , VAR_3 ) (  TYPE_2 . METHOD_4 ( VAR_1 ) )  TYPE_2 . METHOD_4 ( VAR_1 ) ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_4 ( VAR_1 ) ) INIT = new TYPE_4 ( VAR_1 ) ) VAR VAR (  TYPE_5 . METHOD_5 ( VAR_4 . METHOD_6 ( STRING_1 ) . get ( ) ) )  TYPE_5 . METHOD_5 ( VAR_4 . METHOD_6 ( STRING_1 ) . get ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME url ) NAME url ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 . METHOD_2 ( ) ) INIT = VAR_4 . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND VAR_2 && ( ( VAR_5 ) != null ) ) COND VAR_2 && ( ( VAR_5 ) != null ) ( THEN THEN (  VAR_5 . METHOD_3 ( false ) )  VAR_5 . METHOD_3 ( false ) (  VAR_5 = null )  VAR_5 = null ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_5 ) == null ) COND ( VAR_5 ) == null ( THEN THEN (  VAR_5 = new TYPE_3 ( this , VAR_3 , VAR_1 ) )  VAR_5 = new TYPE_3 ( this , VAR_3 , VAR_1 ) (  VAR_5 . METHOD_4 ( url ) )  VAR_5 . METHOD_4 ( url ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_3 . METHOD_2 ( ) ) INIT = TYPE_3 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE long ) TYPE long ( NAME time ) NAME time ( INIT = TYPE_4 . METHOD_3 ( ) ) INIT = TYPE_4 . METHOD_3 ( ) ) VAR VAR (  VAR_3 = TYPE_5 . METHOD_4 ( VAR_4 ) . METHOD_5 ( ) )  VAR_3 = TYPE_5 . METHOD_4 ( VAR_4 ) . METHOD_5 ( ) (  TYPE_6 . METHOD_6 ( STRING_1 , ( ( TYPE_4 . METHOD_3 ( ) ) - time ) , VAR_5 ) )  TYPE_6 . METHOD_6 ( STRING_1 , ( ( TYPE_4 . METHOD_3 ( ) ) - time ) , VAR_5 ) ) BLOCK BLOCK ( FINALLY FINALLY (  TYPE_3 . METHOD_7 ( VAR_2 ) )  TYPE_3 . METHOD_7 ( VAR_2 ) ) FINALLY FINALLY ) TRY TRY (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.ArrayList<TYPE_2> ) TYPE java.util.ArrayList<TYPE_2> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME rr ) NAME rr ( INIT = VAR_3 . METHOD_2 ( VAR_1 ) ) INIT = VAR_3 . METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND rr != null ) COND rr != null ( THEN THEN ( VAR VAR ( TYPE java.util.ArrayList<TYPE_4> ) TYPE java.util.ArrayList<TYPE_4> ( NAME ret ) NAME ret ( INIT = null ) INIT = null ) VAR VAR ( IF IF ( COND ( VAR_1 . error ) == ( VAR_4 ) ) COND ( VAR_1 . error ) == ( VAR_4 ) ( THEN THEN (  ret = TYPE_5 . METHOD_3 ( VAR_2 ) )  ret = TYPE_5 . METHOD_3 ( VAR_2 ) (  TYPE_6 . METHOD_4 ( VAR_5 , ret ) )  TYPE_6 . METHOD_4 ( VAR_5 , ret ) ) THEN THEN ) IF IF (  VAR_3 . METHOD_5 ( rr , VAR_1 , ret ) )  VAR_3 . METHOD_5 ( rr , VAR_1 , ret ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 . METHOD_2 ( VAR_1 ) ) INIT = VAR_4 . METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_3 == null ) COND VAR_3 == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_4 . METHOD_2 ( VAR_2 ) ) INIT = VAR_4 . METHOD_2 ( VAR_2 ) ) VAR VAR ( IF IF ( COND VAR_5 == null ) COND VAR_5 == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  VAR_3 . set ( VAR_5 ) )  VAR_3 . set ( VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME test ) NAME test ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_2 ) ) COND ! ( VAR_2 ) ( THEN THEN (  VAR_3 = test . METHOD_2 ( ) )  VAR_3 = test . METHOD_2 ( ) (  VAR_3 . run ( VAR_4 , test , VAR_1 ) )  VAR_3 . run ( VAR_4 , test , VAR_1 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME e ) NAME e ( BLOCK BLOCK (  METHOD_3 ( ) )  METHOD_3 ( ) (  throw e ; )  throw e ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME expected ) NAME expected ) VAR VAR ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Set<TYPE_2> ) TYPE java.util.Set<TYPE_2> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_3 ( expected ) ) INIT = new TYPE_3 ( expected ) ) VAR VAR ( VAR VAR ( TYPE java.util.Set<TYPE_2> ) TYPE java.util.Set<TYPE_2> ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_3 ( VAR_1 ) ) INIT = new TYPE_3 ( VAR_1 ) ) VAR VAR (  assertEquals ( VAR_1 . size ( ) , VAR_3 . size ( ) ) )  assertEquals ( VAR_1 . size ( ) , VAR_3 . size ( ) ) (  assertEquals ( VAR_2 , VAR_3 ) )  assertEquals ( VAR_2 , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_1 . METHOD_2 ( s ) )  VAR_1 . METHOD_2 ( s ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME e ) NAME e ( INIT = TYPE_3 . METHOD_3 ( VAR_1 ) ) INIT = TYPE_3 . METHOD_3 ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME count ) NAME count ( INIT = 0 ) INIT = 0 ) VAR VAR ( WHILE WHILE ( COND e . METHOD_4 ( ) ) COND e . METHOD_4 ( ) ( BLOCK BLOCK (  assertTrue ( STRING_1 , ( ( e . METHOD_5 ( ) ) == ( VAR_2 [ ( count ++ ) ] ) ) ) )  assertTrue ( STRING_1 , ( ( e . METHOD_5 ( ) ) == ( VAR_2 [ ( count ++ ) ] ) ) ) ) BLOCK BLOCK ) WHILE WHILE (  assertTrue ( ( STRING_2 + count ) , ( count == ( VAR_2 . length ) ) ) )  assertTrue ( ( STRING_2 + count ) , ( count == ( VAR_2 . length ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) ) INIT = VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) ) VAR VAR (  assertFalse ( TYPE_1 . METHOD_4 ( VAR_1 ) ) )  assertFalse ( TYPE_1 . METHOD_4 ( VAR_1 ) ) (  assertFalse ( TYPE_1 . METHOD_5 ( VAR_1 ) ) )  assertFalse ( TYPE_1 . METHOD_5 ( VAR_1 ) ) (  assertFalse ( TYPE_1 . METHOD_6 ( VAR_1 ) ) )  assertFalse ( TYPE_1 . METHOD_6 ( VAR_1 ) ) (  assertFalse ( TYPE_1 . METHOD_7 ( VAR_1 ) ) )  assertFalse ( TYPE_1 . METHOD_7 ( VAR_1 ) ) (  assertTrue ( TYPE_1 . METHOD_8 ( VAR_1 ) ) )  assertTrue ( TYPE_1 . METHOD_8 ( VAR_1 ) ) (  assertFalse ( TYPE_1 . METHOD_9 ( VAR_1 ) ) )  assertFalse ( TYPE_1 . METHOD_9 ( VAR_1 ) ) (  assertFalse ( TYPE_1 . METHOD_10 ( VAR_1 ) ) )  assertFalse ( TYPE_1 . METHOD_10 ( VAR_1 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE android.bluetooth.BluetoothDevice ) TYPE android.bluetooth.BluetoothDevice ( NAME device ) NAME device ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME state ) NAME state ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE android.content.Intent ) TYPE android.content.Intent ( NAME VAR_2 ) NAME VAR_2 ( INIT = new android.content.Intent ( VAR_3 ) ) INIT = new android.content.Intent ( VAR_3 ) ) VAR VAR (  VAR_2 . METHOD_2 ( VAR_4 , VAR_1 ) )  VAR_2 . METHOD_2 ( VAR_4 , VAR_1 ) (  VAR_2 . METHOD_2 ( VAR_5 , state ) )  VAR_2 . METHOD_2 ( VAR_5 , state ) (  VAR_2 . METHOD_2 ( VAR_6 , device ) )  VAR_2 . METHOD_2 ( VAR_6 , device ) (  mContext . METHOD_3 ( VAR_2 , VAR_7 ) )  mContext . METHOD_3 ( VAR_2 , VAR_7 ) (  log ( ( ( ( ( ( STRING_1 + device ) + STRING_2 ) + VAR_1 ) + STRING_3 ) + state ) ) )  log ( ( ( ( ( ( STRING_1 + device ) + STRING_2 ) + VAR_1 ) + STRING_3 ) + state ) ) (  VAR_8 . METHOD_4 ( device , VAR_9 , state , VAR_1 ) )  VAR_8 . METHOD_4 ( device , VAR_9 , state , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( ) )  VAR_1 . METHOD_2 ( ) (  METHOD_3 ( ) )  METHOD_3 ( ) ( TRY TRY ( BLOCK BLOCK (  VAR_2 . METHOD_4 ( VAR_3 ) )  VAR_2 . METHOD_4 ( VAR_3 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME VAR_4 ) NAME VAR_4 ( BLOCK BLOCK (  VAR_5 = VAR_6 )  VAR_5 = VAR_6 (  android.util.Log.e ( VAR_7 . TAG , ( STRING_1 + ( VAR_4 . toString ( ) ) ) ) )  android.util.Log.e ( VAR_7 . TAG , ( STRING_1 + ( VAR_4 . toString ( ) ) ) ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  METHOD_5 ( false ) )  METHOD_5 ( false ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<TYPE_2,TYPE_2> ) RETURN TYPE_1<TYPE_2,TYPE_2> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  VAR_3 )  VAR_3 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_2 ( VAR_1 , VAR_2 , STRING_1 ) ) INIT = METHOD_2 ( VAR_1 , VAR_2 , STRING_1 ) ) VAR VAR ( IF IF ( COND ( VAR_4 == null ) || ( ( VAR_5 ) < 0 ) ) COND ( VAR_4 == null ) || ( ( VAR_5 ) < 0 ) ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF (  return TYPE_1 . METHOD_3 ( VAR_5 , VAR_6 ) ; )  return TYPE_1 . METHOD_3 ( VAR_5 , VAR_6 ) ; ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public final synchronized ) MODIFIER public final synchronized ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME get ) NAME get ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME key ) NAME key ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND key == null ) COND key == null ( THEN THEN (  throw new java.lang.NullPointerException ( STRING_1 ) ; )  throw new java.lang.NullPointerException ( STRING_1 ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ( INIT = VAR_1 . get ( key ) ) INIT = VAR_1 . get ( key ) ) VAR VAR ( IF IF ( COND result != null ) COND result != null ( THEN THEN (  return result ; )  return result ; ) THEN THEN ) IF IF (  result = METHOD_1 ( key ) )  result = METHOD_1 ( key ) ( IF IF ( COND result != null ) COND result != null ( THEN THEN (  VAR_1 . METHOD_2 ( key , result ) )  VAR_1 . METHOD_2 ( key , result ) (  METHOD_3 ( VAR_2 ) )  METHOD_3 ( VAR_2 ) ) THEN THEN ) IF IF (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE android.os.Bundle ) TYPE android.os.Bundle ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  super . METHOD_1 ( VAR_1 ) )  super . METHOD_1 ( VAR_1 ) (  VAR_1 . METHOD_2 ( VAR_2 , VAR_3 ) )  VAR_1 . METHOD_2 ( VAR_2 , VAR_3 ) (  VAR_1 . METHOD_2 ( VAR_4 , VAR_5 ) )  VAR_1 . METHOD_2 ( VAR_4 , VAR_5 ) (  VAR_1 . METHOD_3 ( VAR_6 , VAR_7 ) )  VAR_1 . METHOD_3 ( VAR_6 , VAR_7 ) (  VAR_1 . METHOD_4 ( VAR_8 , VAR_9 ) )  VAR_1 . METHOD_4 ( VAR_8 , VAR_9 ) (  VAR_1 . METHOD_4 ( VAR_10 , VAR_11 ) )  VAR_1 . METHOD_4 ( VAR_10 , VAR_11 ) (  VAR_1 . METHOD_4 ( VAR_12 , VAR_13 ) )  VAR_1 . METHOD_4 ( VAR_12 , VAR_13 ) (  VAR_1 . METHOD_4 ( VAR_14 , VAR_15 ) )  VAR_1 . METHOD_4 ( VAR_14 , VAR_15 ) (  VAR_16 . METHOD_1 ( VAR_1 ) )  VAR_16 . METHOD_1 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME uid ) NAME uid ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int[] ) TYPE int[] ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE int[][] ) TYPE int[][] ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_6 ) NAME VAR_6 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_3 |= VAR_7 )  VAR_3 |= VAR_7 (  TYPE_1 . METHOD_2 ( ) )  TYPE_1 . METHOD_2 ( ) (  TYPE_2 . METHOD_3 ( ) )  TYPE_2 . METHOD_3 ( ) ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_8 ) NAME VAR_8 ( INIT = TYPE_2 . METHOD_4 ( uid , VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ) INIT = TYPE_2 . METHOD_4 ( uid , VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ) VAR VAR ( IF IF ( COND VAR_8 == 0 ) COND VAR_8 == 0 ( THEN THEN (  TYPE_3 . METHOD_5 ( true , VAR_3 ) )  TYPE_3 . METHOD_5 ( true , VAR_3 ) ) THEN THEN ) IF IF (  TYPE_1 . METHOD_6 ( ) )  TYPE_1 . METHOD_6 ( ) (  return VAR_8 ; )  return VAR_8 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME key ) NAME key ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME value ) NAME value ( INIT = VAR_2 . get ( key ) ) INIT = VAR_2 . get ( key ) ) VAR VAR ( IF IF ( COND ( TYPE_1 . METHOD_2 ( value ) ) || ( TYPE_2 . equals ( value ) ) ) COND ( TYPE_1 . METHOD_2 ( value ) ) || ( TYPE_2 . equals ( value ) ) ( THEN THEN (  return STRING_1 ; )  return STRING_1 ; ) THEN THEN ) IF IF (  value = METHOD_3 ( value ) )  value = METHOD_3 ( value ) ( IF IF ( COND value . METHOD_4 ( VAR_1 ) ) COND value . METHOD_4 ( VAR_1 ) ( THEN THEN (  return value . METHOD_5 ( VAR_1 . length ( ) ) ; )  return value . METHOD_5 ( VAR_1 . length ( ) ) ; ) THEN THEN ( ELSE ELSE (  return value ; )  return value ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ! ( TYPE_1 . METHOD_2 ( METHOD_3 ( ) ) ) ) COND ! ( TYPE_1 . METHOD_2 ( METHOD_3 ( ) ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  assertEquals ( VAR_1 , TYPE_2 . METHOD_4 ( VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 , VAR_8 , VAR_9 , VAR_10 , VAR_11 , VAR_12 ) ) )  assertEquals ( VAR_1 , TYPE_2 . METHOD_4 ( VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 , VAR_8 , VAR_9 , VAR_10 , VAR_11 , VAR_12 ) ) (  METHOD_5 ( ) )  METHOD_5 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME context ) NAME context ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_2 ( VAR_1 ) ) INIT = TYPE_2 . METHOD_2 ( VAR_1 ) ) VAR VAR (  TYPE_3 . d ( VAR_3 , ( STRING_1 + VAR_2 ) ) )  TYPE_3 . d ( VAR_3 , ( STRING_1 + VAR_2 ) ) ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_4 ) NAME VAR_4 ( INIT = ( ( TYPE_4 ) ( context . METHOD_3 ( VAR_5 ) ) ) ) INIT = ( ( TYPE_4 ) ( context . METHOD_3 ( VAR_5 ) ) ) ) VAR VAR (  VAR_4 . METHOD_4 ( VAR_2 , true ) )  VAR_4 . METHOD_4 ( VAR_2 , true ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME input ) NAME input ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3<TYPE_1> ) TYPE TYPE_3<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 < TYPE_1 > METHOD_2 ( ) ) INIT = VAR_2 < TYPE_1 > METHOD_2 ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( IN TYPE_4 . METHOD_3 ( input ) ) IN TYPE_4 . METHOD_3 ( input ) ( BLOCK BLOCK (  VAR_1 . METHOD_4 ( VAR_4 . METHOD_1 ( input ) ) )  VAR_1 . METHOD_4 ( VAR_4 . METHOD_1 ( input ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_1 . build ( ) ; )  return VAR_1 . build ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE float ) TYPE float ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_1 . METHOD_2 ( VAR_1 ) ) INIT = TYPE_1 . METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND ( ( VAR_2 == INT_1 ) || ( VAR_2 == INT_2 ) ) || ( VAR_2 == INT_3 ) ) COND ( ( VAR_2 == INT_1 ) || ( VAR_2 == INT_2 ) ) || ( VAR_2 == INT_3 ) ( THEN THEN (  VAR_3 . METHOD_3 ( ( ( VAR_4 ) + ( ( int ) ( VAR_1 ) ) ) ) )  VAR_3 . METHOD_3 ( ( ( VAR_4 ) + ( ( int ) ( VAR_1 ) ) ) ) ) THEN THEN ( ELSE ELSE (  VAR_3 . METHOD_4 ( new TYPE_2 . Float ( VAR_1 ) ) )  VAR_3 . METHOD_4 ( new TYPE_2 . Float ( VAR_1 ) ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME expected ) NAME expected ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( ) )  VAR_1 . METHOD_2 ( ) (  assertEquals ( expected , METHOD_3 ( VAR_1 . METHOD_4 ( ) , VAR_2 ) ) )  assertEquals ( expected , METHOD_3 ( VAR_1 . METHOD_4 ( ) , VAR_2 ) ) (  ( ( TYPE_2 ) ( VAR_1 ) ) . METHOD_5 ( ) )  ( ( TYPE_2 ) ( VAR_1 ) ) . METHOD_5 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_4 ( ) ) )  TYPE_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_4 ( ) ) (  VAR_1 . METHOD_5 ( TYPE_1 . METHOD_4 ( ) ) )  VAR_1 . METHOD_5 ( TYPE_1 . METHOD_4 ( ) ) (  METHOD_6 ( ) )  METHOD_6 ( ) (  METHOD_7 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_4 ( ) ) )  METHOD_7 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_4 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ( INIT = TYPE_3 . METHOD_2 ( VAR_1 ) ) INIT = TYPE_3 . METHOD_2 ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_3 . METHOD_3 ( VAR_1 ) ) INIT = TYPE_3 . METHOD_3 ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_3 . METHOD_4 ( VAR_1 ) ) INIT = TYPE_3 . METHOD_4 ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN (  result = TYPE_1 . METHOD_5 ( result , VAR_2 ) )  result = TYPE_1 . METHOD_5 ( result , VAR_2 ) ) THEN THEN ) IF IF ( IF IF ( COND VAR_3 != null ) COND VAR_3 != null ( THEN THEN (  result = TYPE_1 . METHOD_5 ( result , VAR_3 ) )  result = TYPE_1 . METHOD_5 ( result , VAR_3 ) ) THEN THEN ) IF IF (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<java.io.File> ) RETURN java.util.List<java.io.File> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.io.File> ) TYPE java.util.List<java.io.File> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( ) ) INIT = TYPE_1 . METHOD_2 ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( IN VAR_3 ) IN VAR_3 ( BLOCK BLOCK ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_2 . METHOD_3 ( ) ) INIT = VAR_2 . METHOD_3 ( ) ) VAR VAR ( IF IF ( COND ( VAR_4 != null ) && ( VAR_4 . METHOD_4 ( ) ) ) COND ( VAR_4 != null ) && ( VAR_4 . METHOD_4 ( ) ) ( THEN THEN (  VAR_1 . METHOD_5 ( VAR_4 ) )  VAR_1 . METHOD_5 ( VAR_4 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME format ) NAME format ( PARAMS PARAMS ( VAR VAR ( TYPE double ) TYPE double ( NAME number ) NAME number ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME pos ) NAME pos ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_2 >= ( VAR_3 ) ) COND VAR_2 >= ( VAR_3 ) ( THEN THEN (  throw new TYPE_2 ( ( STRING_1 + ( name ) ) ) ; )  throw new TYPE_2 ( ( STRING_1 + ( name ) ) ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_1 ( number ) ) INIT = METHOD_1 ( number ) ) VAR VAR (  VAR_4 . METHOD_2 ( number , VAR_1 , pos , ( ++ VAR_2 ) ) )  VAR_4 . METHOD_2 ( number , VAR_1 , pos , ( ++ VAR_2 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME n ) NAME n ( INIT = VAR_1 . size ( ) ) INIT = VAR_1 . size ( ) ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < n ) COND i < n ( UPDATE UPDATE (  ++ i )  ++ i ) UPDATE UPDATE ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( i ) . METHOD_3 ( ) )  VAR_1 . METHOD_2 ( i ) . METHOD_3 ( ) ) BLOCK BLOCK ) FOR FOR (  VAR_1 . METHOD_4 ( ) )  VAR_1 . METHOD_4 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . get ( new TYPE_2 ( STRING_1 , STRING_2 ) ) ) INIT = TYPE_1 . get ( new TYPE_2 ( STRING_1 , STRING_2 ) ) ) VAR VAR (  assertEquals ( STRING_3 , VAR_2 [ 0 ] ) )  assertEquals ( STRING_3 , VAR_2 [ 0 ] ) (  assertEquals ( STRING_4 , VAR_3 [ 0 ] ) )  assertEquals ( STRING_4 , VAR_3 [ 0 ] ) (  assertEquals ( STRING_5 , VAR_4 [ 0 ] ) )  assertEquals ( STRING_5 , VAR_4 [ 0 ] ) (  assertEquals ( STRING_6 , VAR_5 [ 0 ] ) )  assertEquals ( STRING_6 , VAR_5 [ 0 ] ) (  assertEquals ( STRING_4 , VAR_6 [ 0 ] ) )  assertEquals ( STRING_4 , VAR_6 [ 0 ] ) (  assertEquals ( STRING_7 , VAR_7 [ 0 ] ) )  assertEquals ( STRING_7 , VAR_7 [ 0 ] ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME call ) NAME call ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) == null ) COND ( VAR_1 ) == null ( THEN THEN (  VAR_1 = VAR_2 . METHOD_2 ( VAR_3 , TYPE_3 . METHOD_3 ( ( ( TYPE_4 ) ( VAR_4 ) ) ) , VAR_5 ) )  VAR_1 = VAR_2 . METHOD_2 ( VAR_3 , TYPE_3 . METHOD_3 ( ( ( TYPE_4 ) ( VAR_4 ) ) ) , VAR_5 ) ) THEN THEN ) IF IF ( IF IF ( COND ( call . METHOD_4 ( ) . METHOD_5 ( VAR_2 ) ) && ( call . METHOD_6 ( ) . equals ( VAR_1 ) ) ) COND ( call . METHOD_4 ( ) . METHOD_5 ( VAR_2 ) ) && ( call . METHOD_6 ( ) . equals ( VAR_1 ) ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( VAR_2 ) ) INIT = new TYPE_1 ( VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_3 . METHOD_2 ( VAR_4 class ) ) INIT = TYPE_3 . METHOD_2 ( VAR_4 class ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_5 ) NAME VAR_5 ( INIT = new TYPE_4 ( ) ) INIT = new TYPE_4 ( ) ) VAR VAR (  VAR_1 . METHOD_3 ( VAR_5 . METHOD_4 ( ) , VAR_6 . METHOD_5 ( ) , VAR_3 ) )  VAR_1 . METHOD_3 ( VAR_5 . METHOD_4 ( ) , VAR_6 . METHOD_5 ( ) , VAR_3 ) (  VAR_7 . METHOD_6 ( ) )  VAR_7 . METHOD_6 ( ) (  org.junit.Assert.assertEquals ( STRING_1 , VAR_8 , VAR_1 . METHOD_7 ( ) ) )  org.junit.Assert.assertEquals ( STRING_1 , VAR_8 , VAR_1 . METHOD_7 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME length ) NAME length ( INIT = METHOD_2 ( VAR_1 ) ) INIT = METHOD_2 ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( os ) ) INIT = new TYPE_1 ( os ) ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < length ) COND i < length ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK (  VAR_2 . METHOD_3 ( VAR_3 [ i ] ) )  VAR_2 . METHOD_3 ( VAR_3 [ i ] ) ) BLOCK BLOCK ) FOR FOR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME result ) NAME result ( INIT = new java.lang.String ( os . METHOD_4 ( ) ) ) INIT = new java.lang.String ( os . METHOD_4 ( ) ) ) VAR VAR (  assertEquals ( VAR_1 , result ) )  assertEquals ( VAR_1 , result ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.io.File[] ) TYPE java.io.File[] ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND VAR_3 != null ) COND VAR_3 != null ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_4 ) NAME VAR_4 ( IN VAR_3 ) IN VAR_3 ( BLOCK BLOCK ( IF IF ( COND ( VAR_4 . METHOD_3 ( ) ) && ( TYPE_3 . METHOD_4 ( VAR_4 . getName ( ) ) ) ) COND ( VAR_4 . METHOD_3 ( ) ) && ( TYPE_3 . METHOD_4 ( VAR_4 . getName ( ) ) ) ( THEN THEN ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_5 ) NAME VAR_5 ( INIT = TYPE_5 . METHOD_5 ( VAR_4 ) ) INIT = TYPE_5 . METHOD_5 ( VAR_4 ) ) VAR VAR ( IF IF ( COND ( VAR_6 ) != null ) COND ( VAR_6 ) != null ( THEN THEN (  METHOD_6 ( VAR_1 , VAR_4 , VAR_5 , VAR_2 ) )  METHOD_6 ( VAR_1 , VAR_4 , VAR_5 , VAR_2 ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME context ) NAME context ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  super . METHOD_1 ( context , VAR_1 ) )  super . METHOD_1 ( context , VAR_1 ) ( IF IF ( COND VAR_1 . equals ( VAR_2 ) ) COND VAR_1 . equals ( VAR_2 ) ( THEN THEN (  return new TYPE_1 ( ) ; )  return new TYPE_1 ( ) ; ) THEN THEN ( ELSE ELSE ( TRY TRY ( BLOCK BLOCK (  return new TYPE_1 ( VAR_1 , VAR_3 ) ; )  return new TYPE_1 ( VAR_1 , VAR_3 ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_3 ( e.getMessage ( ) , e ) ; )  throw new TYPE_3 ( e.getMessage ( ) , e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<TYPE_2> ) RETURN TYPE_1<TYPE_2> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_2 ) RETURN TYPE_2 ( NAME METHOD_4 ) NAME METHOD_4 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return new TYPE_6 ( VAR_2 ) ; )  return new TYPE_6 ( VAR_2 ) ; ) BLOCK BLOCK ) METHOD METHOD (  return TYPE_3 . METHOD_2 ( TYPE_4 . METHOD_3 ( VAR_1 . METHOD_1 ( ) , new TYPE_5 < TYPE_2 , TYPE_2 > ( ) { public TYPE_2 METHOD_4 ( TYPE_2 VAR_2 ) { return new TYPE_6 ( VAR_2 ) ; } } ) ) ; )  return TYPE_3 . METHOD_2 ( TYPE_4 . METHOD_3 ( VAR_1 . METHOD_1 ( ) , new TYPE_5 < TYPE_2 , TYPE_2 > ( ) { public TYPE_2 METHOD_4 ( TYPE_2 VAR_2 ) { return new TYPE_6 ( VAR_2 ) ; } } ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  log ( STRING_1 ) )  log ( STRING_1 ) ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME context ) NAME context ( INIT = VAR_2 . METHOD_2 ( ) ) INIT = VAR_2 . METHOD_2 ( ) ) VAR VAR (  context . METHOD_3 ( STRING_2 , STRING_3 ) )  context . METHOD_3 ( STRING_2 , STRING_3 ) ( SYNCHRONIZED SYNCHRONIZED (  VAR_3 )  VAR_3 ( BLOCK BLOCK ( VAR VAR ( TYPE android.os.Message ) TYPE android.os.Message ( NAME response ) NAME response ( INIT = VAR_4 . METHOD_4 ( VAR_5 ) ) INIT = VAR_4 . METHOD_4 ( VAR_5 ) ) VAR VAR (  ( ( TYPE_3 ) ( VAR_2 . METHOD_5 ( ) ) ) . METHOD_6 ( VAR_6 , response ) )  ( ( TYPE_3 ) ( VAR_2 . METHOD_5 ( ) ) ) . METHOD_6 ( VAR_6 , response ) ( TRY TRY ( BLOCK BLOCK (  VAR_3 . METHOD_7 ( ) )  VAR_3 . METHOD_7 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME e ) NAME e ( BLOCK BLOCK (  log ( STRING_4 ) )  log ( STRING_4 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED (  return VAR_7 ; )  return VAR_7 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  org.junit.Assert.assertEquals ( VAR_1 , TYPE_1 . METHOD_2 ( new java.io.File ( METHOD_3 ( ) , STRING_1 ) ) ) )  org.junit.Assert.assertEquals ( VAR_1 , TYPE_1 . METHOD_2 ( new java.io.File ( METHOD_3 ( ) , STRING_1 ) ) ) (  org.junit.Assert.assertEquals ( VAR_2 , TYPE_1 . METHOD_2 ( new java.io.File ( METHOD_3 ( ) , STRING_2 ) ) ) )  org.junit.Assert.assertEquals ( VAR_2 , TYPE_1 . METHOD_2 ( new java.io.File ( METHOD_3 ( ) , STRING_2 ) ) ) (  org.junit.Assert.assertEquals ( VAR_3 , TYPE_1 . METHOD_4 ( new java.io.File ( METHOD_3 ( ) , STRING_3 ) ) ) )  org.junit.Assert.assertEquals ( VAR_3 , TYPE_1 . METHOD_4 ( new java.io.File ( METHOD_3 ( ) , STRING_3 ) ) ) (  org.junit.Assert.assertEquals ( VAR_4 , TYPE_1 . METHOD_2 ( new java.io.File ( METHOD_3 ( ) , STRING_3 ) ) ) )  org.junit.Assert.assertEquals ( VAR_4 , TYPE_1 . METHOD_2 ( new java.io.File ( METHOD_3 ( ) , STRING_3 ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<java.lang.String,TYPE_1> ) TYPE java.util.Map<java.lang.String,TYPE_1> ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_3 . METHOD_3 ( VAR_3 , new TYPE_4 ( ) , VAR_1 ) ) INIT = TYPE_3 . METHOD_3 ( VAR_3 , new TYPE_4 ( ) , VAR_1 ) ) VAR VAR (  org.junit.Assert.assertEquals ( STRING_1 , 1 , VAR_4 . size ( ) ) )  org.junit.Assert.assertEquals ( STRING_1 , 1 , VAR_4 . size ( ) ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_4 . get ( STRING_2 ) ) INIT = VAR_4 . get ( STRING_2 ) ) VAR VAR ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  TYPE_3 . METHOD_4 ( VAR_5 ) )  TYPE_3 . METHOD_4 ( VAR_5 ) ) THEN THEN ) IF IF (  return VAR_5 ; )  return VAR_5 ; ) BLOCK BLOCK ( FINALLY FINALLY (  VAR_3 . METHOD_5 ( ) )  VAR_3 . METHOD_5 ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN java.lang.Class<?> ) RETURN java.lang.Class<?> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( name . equals ( STRING_1 ) ) || ( name . equals ( STRING_2 ) ) ) COND ( name . equals ( STRING_1 ) ) || ( name . equals ( STRING_2 ) ) ( THEN THEN (  return super . METHOD_1 ( name , VAR_1 ) ; )  return super . METHOD_1 ( name , VAR_1 ) ; ) THEN THEN ( ELSE ELSE ( IF IF ( COND name . equals ( STRING_3 ) ) COND name . equals ( STRING_3 ) ( THEN THEN (  java.lang.System.out.println ( STRING_4 ) )  java.lang.System.out.println ( STRING_4 ) (  return VAR_2 . METHOD_1 ( STRING_2 , VAR_1 ) ; )  return VAR_2 . METHOD_1 ( STRING_2 , VAR_1 ) ; ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF (  return super . METHOD_1 ( name , VAR_1 ) ; )  return super . METHOD_1 ( name , VAR_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME x ) NAME x ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME info ) NAME info ( INIT = METHOD_2 ( x ) ) INIT = METHOD_2 ( x ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_4> ) TYPE java.util.List<TYPE_4> ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_3 ( info , VAR_3 , VAR_4 ) ) INIT = METHOD_3 ( info , VAR_3 , VAR_4 ) ) VAR VAR (  METHOD_4 ( info , x , null , VAR_2 , VAR_1 ) )  METHOD_4 ( info , x , null , VAR_2 , VAR_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Throwable ) TYPE java.lang.Throwable ( NAME e ) NAME e ( BLOCK BLOCK (  throw METHOD_5 ( x , e ) ; )  throw METHOD_5 ( x , e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE double ) TYPE double ( NAME value ) NAME value ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( value ) ) INIT = TYPE_1 . METHOD_2 ( value ) ) VAR VAR ( IF IF ( COND ( VAR_1 == INT_1 ) || ( VAR_1 == INT_2 ) ) COND ( VAR_1 == INT_1 ) || ( VAR_1 == INT_2 ) ( THEN THEN (  VAR_2 . METHOD_3 ( ( ( VAR_3 ) + ( ( int ) ( value ) ) ) ) )  VAR_2 . METHOD_3 ( ( ( VAR_3 ) + ( ( int ) ( value ) ) ) ) ) THEN THEN ( ELSE ELSE (  VAR_2 . METHOD_4 ( new TYPE_1 ( value ) ) )  VAR_2 . METHOD_4 ( new TYPE_1 ( value ) ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME context ) NAME context ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = context . METHOD_2 ( ) ) INIT = context . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND ( TYPE_3 . equals ( VAR_1 . METHOD_3 ( ) ) ) && ( TYPE_4 . equals ( VAR_1 . METHOD_4 ( ) ) ) ) COND ( TYPE_3 . equals ( VAR_1 . METHOD_3 ( ) ) ) && ( TYPE_4 . equals ( VAR_1 . METHOD_4 ( ) ) ) ( THEN THEN ( IF IF ( COND ( TYPE_5 . METHOD_5 ( ) ) instanceof TYPE_6 ) COND ( TYPE_5 . METHOD_5 ( ) ) instanceof TYPE_6 ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( VAR_1 ) )  METHOD_2 ( VAR_1 ) (  VAR_2 . METHOD_3 ( STRING_1 , STRING_2 , VAR_3 . TAG , null , null , null , null , false ) )  VAR_2 . METHOD_3 ( STRING_1 , STRING_2 , VAR_3 . TAG , null , null , null , null , false ) (  org.mockito.Mockito.verify ( VAR_4 ) . METHOD_4 ( ( ( byte [ ] ) ( org.mockito.Matchers . METHOD_5 ( ) ) ) , TYPE_1 . eq ( 0 ) , TYPE_1 . eq ( 0 ) , org.mockito.Matchers . METHOD_5 ( VAR_5 class ) ) )  org.mockito.Mockito.verify ( VAR_4 ) . METHOD_4 ( ( ( byte [ ] ) ( org.mockito.Matchers . METHOD_5 ( ) ) ) , TYPE_1 . eq ( 0 ) , TYPE_1 . eq ( 0 ) , org.mockito.Matchers . METHOD_5 ( VAR_5 class ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE android.bluetooth.BluetoothDevice ) TYPE android.bluetooth.BluetoothDevice ( NAME device ) NAME device ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( VAR_1 . METHOD_2 ( VAR_2 ) ) == false ) && ( ( VAR_3 . METHOD_3 ( ) ) == false ) ) COND ( ( VAR_1 . METHOD_2 ( VAR_2 ) ) == false ) && ( ( VAR_3 . METHOD_3 ( ) ) == false ) ( THEN THEN ( VAR VAR ( TYPE android.os.Message ) TYPE android.os.Message ( NAME m ) NAME m ( INIT = VAR_1 . METHOD_4 ( VAR_2 ) ) INIT = VAR_1 . METHOD_4 ( VAR_2 ) ) VAR VAR (  m . obj = device )  m . obj = device (  VAR_1 . METHOD_5 ( m , VAR_4 ) )  VAR_1 . METHOD_5 ( m , VAR_4 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME format ) NAME format ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  METHOD_2 ( VAR_1 , VAR_2 , VAR_6 , VAR_7 ) )  METHOD_2 ( VAR_1 , VAR_2 , VAR_6 , VAR_7 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME e ) NAME e ( BLOCK BLOCK (  android.util.Log.e ( VAR_8 , ( STRING_1 + ( e.getMessage ( ) ) ) ) )  android.util.Log.e ( VAR_8 , ( STRING_1 + ( e.getMessage ( ) ) ) ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  throw new java.lang.NullPointerException ( STRING_1 ) ; )  throw new java.lang.NullPointerException ( STRING_1 ) ; ) THEN THEN ) IF IF (  METHOD_2 ( ) )  METHOD_2 ( ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . get ( VAR_1 ) ) INIT = VAR_3 . get ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN (  return VAR_2 ; )  return VAR_2 ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ( INIT = new TYPE_1 ( VAR_1 ) ) INIT = new TYPE_1 ( VAR_1 ) ) VAR VAR (  VAR_3 . METHOD_3 ( VAR_1 , result ) )  VAR_3 . METHOD_3 ( VAR_1 , result ) (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK (  VAR_1 . METHOD_1 ( this ) )  VAR_1 . METHOD_1 ( this ) ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( packageName , uid , flags ) ) INIT = METHOD_2 ( packageName , uid , flags ) ) VAR VAR ( IF IF ( COND VAR_3 != null ) COND VAR_3 != null ( THEN THEN ( TRY TRY ( BLOCK BLOCK (  VAR_3 . METHOD_3 ( packageName , VAR_2 ) )  VAR_3 . METHOD_3 ( packageName , VAR_2 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME e ) NAME e ( BLOCK BLOCK (  android.util.Log . i ( com.android.server.pm.PackageManagerService.TAG , STRING_1 ) )  android.util.Log . i ( com.android.server.pm.PackageManagerService.TAG , STRING_1 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.Map<java.lang.String,TYPE_1> ) TYPE java.util.Map<java.lang.String,TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2<java.util.Map<java.lang.String,java.lang.String>> ) TYPE TYPE_2<java.util.Map<java.lang.String,java.lang.String>> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_3 . METHOD_2 ( VAR_1 , VAR_2 ) ) ) COND ! ( VAR_3 . METHOD_2 ( VAR_1 , VAR_2 ) ) ( THEN THEN (  android.util.Log . METHOD_3 ( VAR_4 . TAG , STRING_1 ) )  android.util.Log . METHOD_3 ( VAR_4 . TAG , STRING_1 ) (  return ; )  return ; ) THEN THEN ) IF IF ( IF IF ( COND VAR_1 . METHOD_4 ( ) ) COND VAR_1 . METHOD_4 ( ) ( THEN THEN (  android.util.Log.w ( VAR_4 . TAG , STRING_2 ) )  android.util.Log.w ( VAR_4 . TAG , STRING_2 ) (  return ; )  return ; ) THEN THEN ) IF IF ( IF IF ( COND ! ( VAR_5 ) ) COND ! ( VAR_5 ) ( THEN THEN (  METHOD_5 ( VAR_1 ) )  METHOD_5 ( VAR_1 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE float ) TYPE float ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE float ) TYPE float ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_6 . METHOD_2 ( VAR_1 ) ) INIT = VAR_6 . METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_5 == null ) COND VAR_5 == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  VAR_7 . append ( new TYPE_3 . Float ( VAR_8 , VAR_9 , VAR_2 . METHOD_3 ( ) , VAR_2 . METHOD_4 ( ) , ( - VAR_3 ) , ( - VAR_4 ) , VAR_10 ) , false ) )  VAR_7 . append ( new TYPE_3 . Float ( VAR_8 , VAR_9 , VAR_2 . METHOD_3 ( ) , VAR_2 . METHOD_4 ( ) , ( - VAR_3 ) , ( - VAR_4 ) , VAR_10 ) , false ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR ( IF IF ( COND VAR_1 > 0 ) COND VAR_1 > 0 ( THEN THEN ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 . METHOD_2 ( VAR_1 ) ) INIT = VAR_4 . METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_3 != null ) COND VAR_3 != null ( THEN THEN (  TYPE_2 . METHOD_3 ( VAR_5 , 0 , VAR_6 , 0 , VAR_7 ) )  TYPE_2 . METHOD_3 ( VAR_5 , 0 , VAR_6 , 0 , VAR_7 ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return VAR_4 . METHOD_4 ( VAR_2 ) ; )  return VAR_4 . METHOD_4 ( VAR_2 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_3 ( VAR_2 class ) ) INIT = METHOD_3 ( VAR_2 class ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_4 ( false ) ) INIT = METHOD_4 ( false ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_5 ( ) ) INIT = METHOD_5 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_5 ) NAME VAR_5 ( INIT = METHOD_6 ( VAR_1 , VAR_6 ) ) INIT = METHOD_6 ( VAR_1 , VAR_6 ) ) VAR VAR (  METHOD_7 ( null , VAR_3 , null , VAR_1 ) )  METHOD_7 ( null , VAR_3 , null , VAR_1 ) (  METHOD_8 ( VAR_5 , VAR_3 , VAR_1 , VAR_4 ) )  METHOD_8 ( VAR_5 , VAR_3 , VAR_1 , VAR_4 ) (  METHOD_9 ( VAR_1 ) )  METHOD_9 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int[] ) TYPE int[] ( NAME data ) NAME data ( INIT = VAR_2 . get ( VAR_1 ) ) INIT = VAR_2 . get ( VAR_1 ) ) VAR VAR ( IF IF ( COND data == null ) COND data == null ( THEN THEN ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_2 . get ( VAR_1 ) ) INIT = TYPE_2 . get ( VAR_1 ) ) VAR VAR (  data = new int [ 2 ] )  data = new int [ 2 ] (  data [ 0 ] = VAR_4 . METHOD_2 ( ) )  data [ 0 ] = VAR_4 . METHOD_2 ( ) (  data [ 1 ] = VAR_5 . METHOD_2 ( ) )  data [ 1 ] = VAR_5 . METHOD_2 ( ) (  VAR_2 . METHOD_3 ( VAR_1 , data ) )  VAR_2 . METHOD_3 ( VAR_1 , data ) ) THEN THEN ) IF IF (  VAR_6 = data [ 0 ] )  VAR_6 = data [ 0 ] (  VAR_7 = data [ 1 ] )  VAR_7 = data [ 1 ] ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME result ) NAME result ( INIT = device . METHOD_2 ( ( STRING_1 + VAR_1 ) ) ) INIT = device . METHOD_2 ( ( STRING_1 + VAR_1 ) ) ) VAR VAR (  android.util.Log.d ( TAG , ( STRING_2 + result ) ) )  android.util.Log.d ( TAG , ( STRING_2 + result ) ) ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( VAR_3 . METHOD_3 ( ) ) >= INT_1 ) ? ( result . METHOD_4 ( STRING_3 ) ) && ( result . METHOD_4 ( STRING_4 ) ) : ( result . METHOD_4 ( STRING_5 ) ) && ( result . METHOD_4 ( STRING_6 ) ) ) INIT = ( ( VAR_3 . METHOD_3 ( ) ) >= INT_1 ) ? ( result . METHOD_4 ( STRING_3 ) ) && ( result . METHOD_4 ( STRING_4 ) ) : ( result . METHOD_4 ( STRING_5 ) ) && ( result . METHOD_4 ( STRING_6 ) ) ) VAR VAR (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Integer ) TYPE java.lang.Integer ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Integer ) TYPE java.lang.Integer ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE java.lang.Integer ) TYPE java.lang.Integer ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE java.lang.Integer ) TYPE java.lang.Integer ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME session ) NAME session ) VAR VAR ( SYNCHRONIZED SYNCHRONIZED (  VAR_6 )  VAR_6 ( BLOCK BLOCK (  session = VAR_7 . get ( VAR_1 ) )  session = VAR_7 . get ( VAR_1 ) ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ( IF IF ( COND session == null ) COND session == null ( THEN THEN (  throw new TYPE_2 ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) ) ; )  throw new TYPE_2 ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_8 ) NAME VAR_8 ( INIT = VAR_3 . METHOD_2 ( ) ) INIT = VAR_3 . METHOD_2 ( ) ) VAR VAR (  session . METHOD_3 ( VAR_2 , VAR_8 , VAR_4 , VAR_5 ) )  session . METHOD_3 ( VAR_2 , VAR_8 , VAR_4 , VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN TYPE_1<TYPE_2>.VAR_1 ) RETURN TYPE_1<TYPE_2>.VAR_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4<TYPE_1<TYPE_2>.VAR_1> ) TYPE TYPE_4<TYPE_1<TYPE_2>.VAR_1> ( NAME i ) NAME i ( INIT = VAR_3 . METHOD_2 ( ) ) INIT = VAR_3 . METHOD_2 ( ) ) VAR VAR ( WHILE WHILE ( COND i . METHOD_3 ( ) ) COND i . METHOD_3 ( ) ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<TYPE_2>.VAR_1 ) TYPE TYPE_1<TYPE_2>.VAR_1 ( NAME entry ) NAME entry ( INIT = i . METHOD_4 ( ) ) INIT = i . METHOD_4 ( ) ) VAR VAR ( IF IF ( COND VAR_4 . equals ( VAR_2 ) ) COND VAR_4 . equals ( VAR_2 ) ( THEN THEN (  return entry ; )  return entry ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) WHILE WHILE (  android.util.Log.e ( TYPE_1 . TAG , ( STRING_1 + VAR_2 ) ) )  android.util.Log.e ( TYPE_1 . TAG , ( STRING_1 + VAR_2 ) ) (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_2 ) == null ) COND ( VAR_2 ) == null ( THEN THEN (  VAR_2 = TYPE_2 . METHOD_2 ( ) )  VAR_2 = TYPE_2 . METHOD_2 ( ) ) THEN THEN ( ELSE ELSE ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_2 . get ( VAR_1 ) ) INIT = VAR_2 . get ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_3 != null ) COND VAR_3 != null ( THEN THEN (  return VAR_3 ; )  return VAR_3 ; ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_3 . METHOD_3 ( VAR_1 ) ) INIT = TYPE_3 . METHOD_3 ( VAR_1 ) ) VAR VAR (  VAR_2 . METHOD_4 ( VAR_1 , VAR_3 ) )  VAR_2 . METHOD_4 ( VAR_1 , VAR_3 ) (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME context ) NAME context ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_2 . METHOD_2 ( VAR_1 ) )  TYPE_2 . METHOD_2 ( VAR_1 ) ( IF IF ( COND TYPE_3 . METHOD_3 ( context ) ) COND TYPE_3 . METHOD_3 ( context ) ( THEN THEN (  return VAR_2 . METHOD_4 ( VAR_3 , false ) ; )  return VAR_2 . METHOD_4 ( VAR_3 , false ) ; ) THEN THEN ( ELSE ELSE (  return TYPE_3 . METHOD_5 ( context ) . METHOD_4 ( VAR_3 , false ) ; )  return TYPE_3 . METHOD_5 ( context ) . METHOD_4 ( VAR_3 , false ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME callback ) NAME callback ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME service ) NAME service ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( IF IF ( COND service == null ) COND service == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  service . METHOD_3 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , callback ) )  service . METHOD_3 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , callback ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  VAR_1 )  VAR_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<TYPE_2<TYPE_3>> ) TYPE TYPE_1<TYPE_2<TYPE_3>> ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_2<TYPE_3> ) TYPE TYPE_2<TYPE_3> ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK (  VAR_3 . METHOD_3 ( VAR_4 , null ) )  VAR_3 . METHOD_3 ( VAR_4 , null ) (  VAR_3 . METHOD_3 ( VAR_5 , null ) )  VAR_3 . METHOD_3 ( VAR_5 , null ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED (  TYPE_4 . METHOD_4 ( ) )  TYPE_4 . METHOD_4 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( VAR_2 ) > ( VAR_3 ) ) INIT = ( VAR_2 ) > ( VAR_3 ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ( INIT = ( VAR_1 ) ? VAR_5 : VAR_6 ) INIT = ( VAR_1 ) ? VAR_5 : VAR_6 ) VAR VAR (  android.util.Log.w ( VAR_7 . TAG , ( ( ( ( ( STRING_1 + VAR_4 ) + STRING_2 ) + STRING_3 ) + ( VAR_2 ) ) + STRING_4 ) ) )  android.util.Log.w ( VAR_7 . TAG , ( ( ( ( ( STRING_1 + VAR_4 ) + STRING_2 ) + STRING_3 ) + ( VAR_2 ) ) + STRING_4 ) ) (  METHOD_2 ( VAR_8 , VAR_4 ) )  METHOD_2 ( VAR_8 , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_3 . METHOD_2 ( VAR_1 , STRING_1 ) )  TYPE_3 . METHOD_2 ( VAR_1 , STRING_1 ) ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_4 ( new TYPE_5 ( ) . METHOD_3 ( VAR_3 ) ) ) INIT = new TYPE_4 ( new TYPE_5 ( ) . METHOD_3 ( VAR_3 ) ) ) VAR VAR (  VAR_2 . METHOD_4 ( ) )  VAR_2 . METHOD_4 ( ) ( VAR VAR ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME item ) NAME item ( INIT = VAR_2 . METHOD_5 ( new TYPE_5 ( ) . METHOD_6 ( STRING_2 ) , STRING_3 ) ) INIT = VAR_2 . METHOD_5 ( new TYPE_5 ( ) . METHOD_6 ( STRING_2 ) , STRING_3 ) ) VAR VAR (  item . METHOD_7 ( ) )  item . METHOD_7 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME msg ) NAME msg ( INIT = METHOD_2 ( VAR_1 ) ) INIT = METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND ( VAR_2 ) == null ) COND ( VAR_2 ) == null ( THEN THEN ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_2 ( mContext ) ) INIT = new TYPE_2 ( mContext ) ) VAR VAR (  VAR_3 . METHOD_3 ( msg ) )  VAR_3 . METHOD_3 ( msg ) (  VAR_3 . METHOD_4 ( false ) )  VAR_3 . METHOD_4 ( false ) (  VAR_3 . METHOD_5 ( VAR_4 , null ) )  VAR_3 . METHOD_5 ( VAR_4 , null ) (  VAR_2 = VAR_3 . METHOD_6 ( ) )  VAR_2 = VAR_3 . METHOD_6 ( ) (  VAR_2 . METHOD_7 ( ) . METHOD_8 ( VAR_5 ) )  VAR_2 . METHOD_7 ( ) . METHOD_8 ( VAR_5 ) ) THEN THEN ( ELSE ELSE (  VAR_2 . METHOD_3 ( msg ) )  VAR_2 . METHOD_3 ( msg ) ) ELSE ELSE ) IF IF (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( STRING_1 ) )  TYPE_1 . METHOD_2 ( STRING_1 ) (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = null ) INIT = null ) VAR VAR ( IF IF ( COND TYPE_2 . METHOD_3 ( METHOD_4 ( ) ) ) COND TYPE_2 . METHOD_3 ( METHOD_4 ( ) ) ( THEN THEN (  VAR_1 = TYPE_2 . METHOD_5 ( ) )  VAR_1 = TYPE_2 . METHOD_5 ( ) ) THEN THEN ) IF IF (  VAR_2 . METHOD_6 ( VAR_1 ) )  VAR_2 . METHOD_6 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME equals ) NAME equals ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( this ) == VAR_1 ) COND ( this ) == VAR_1 ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ( IF IF ( COND ! ( VAR_1 instanceof TYPE_1 ) ) COND ! ( VAR_1 instanceof TYPE_1 ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_1 ) ( VAR_1 ) ) ) INIT = ( ( TYPE_1 ) ( VAR_1 ) ) ) VAR VAR ( IF IF ( COND ( VAR_3 ) != ( VAR_4 ) ) COND ( VAR_3 ) != ( VAR_4 ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( IF IF ( COND ! ( VAR_5 . equals ( VAR_6 ) ) ) COND ! ( VAR_5 . equals ( VAR_6 ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  return TYPE_2 . equals ( VAR_7 , VAR_8 ) ; )  return TYPE_2 . equals ( VAR_7 , VAR_8 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE long[] ) TYPE long[] ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME m ) NAME m ) VAR VAR ( VAR VAR ( TYPE int[] ) TYPE int[] ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) )  TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_3 - m ) INIT = VAR_3 - m ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME j ) NAME j ( INIT = VAR_4 . length ) INIT = VAR_4 . length ) VAR VAR ( WHILE WHILE ( COND ( -- j ) >= 0 ) COND ( -- j ) >= 0 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , ( ( VAR_4 [ j ] ) + VAR_5 ) ) )  TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , ( ( VAR_4 [ j ] ) + VAR_5 ) ) ) BLOCK BLOCK ) WHILE WHILE (  TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_5 ) )  TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME args ) NAME args ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  Main . METHOD_2 ( ) )  Main . METHOD_2 ( ) (  Main . METHOD_3 ( ) )  Main . METHOD_3 ( ) (  Main . METHOD_4 ( ) )  Main . METHOD_4 ( ) (  Main . METHOD_5 ( ) )  Main . METHOD_5 ( ) (  Main . METHOD_6 ( ) )  Main . METHOD_6 ( ) (  Main . METHOD_7 ( ) )  Main . METHOD_7 ( ) (  Main . METHOD_8 ( ) )  Main . METHOD_8 ( ) (  Main . METHOD_9 ( ) )  Main . METHOD_9 ( ) (  Main . METHOD_10 ( ) )  Main . METHOD_10 ( ) (  Main . METHOD_11 ( ) )  Main . METHOD_11 ( ) (  Main . METHOD_12 ( ) )  Main . METHOD_12 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER synchronized ) MODIFIER synchronized ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME w ) NAME w ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME h ) NAME h ) VAR VAR ( VAR VAR ( TYPE short[] ) TYPE short[] ( NAME d ) NAME d ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  METHOD_3 ( mContext , id , VAR_1 , VAR_2 , VAR_3 , VAR_4 , w , h , d , VAR_5 ) )  METHOD_3 ( mContext , id , VAR_1 , VAR_2 , VAR_3 , VAR_4 , w , h , d , VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE android.os.Message ) TYPE android.os.Message ( NAME msg ) NAME msg ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SWITCH SWITCH ( NAME VAR_1 ) NAME VAR_1 ( CASE VAR_2 ( BLOCK BLOCK (  TYPE_1 . d ( VAR_3 , ( STRING_1 + ( VAR_4 ) ) ) )  TYPE_1 . d ( VAR_3 , ( STRING_1 + ( VAR_4 ) ) ) (  VAR_5 = false )  VAR_5 = false ( IF IF ( COND ( VAR_4 ) == ( VAR_6 ) ) COND ( VAR_4 ) == ( VAR_6 ) ( THEN THEN (  VAR_7 . METHOD_2 ( VAR_8 ) . METHOD_3 ( VAR_9 ) )  VAR_7 . METHOD_2 ( VAR_8 ) . METHOD_3 ( VAR_9 ) ) THEN THEN ) IF IF (  METHOD_4 ( VAR_10 ) )  METHOD_4 ( VAR_10 ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_2 ) SWITCH SWITCH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_1 ( VAR_2 ) ) INIT = TYPE_1 . METHOD_1 ( VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME s ) NAME s ( INIT = new TYPE_2 ( VAR_1 ) ) INIT = new TYPE_2 ( VAR_1 ) ) VAR VAR (  VAR_1 . METHOD_2 ( VAR_3 ) )  VAR_1 . METHOD_2 ( VAR_3 ) ( IF IF ( COND ! ( METHOD_3 ( s ) ) ) COND ! ( METHOD_3 ( s ) ) ( THEN THEN (  METHOD_4 ( ) )  METHOD_4 ( ) ) THEN THEN ( ELSE ELSE (  s . METHOD_5 ( 0 , 0 ) )  s . METHOD_5 ( 0 , 0 ) (  VAR_1 . METHOD_6 ( ) )  VAR_1 . METHOD_6 ( ) (  METHOD_7 ( ) )  METHOD_7 ( ) ) ELSE ELSE ) IF IF (  VAR_1 . METHOD_8 ( ) )  VAR_1 . METHOD_8 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( ( VAR_2 ) != null ) && ( ( VAR_3 ) != null ) ) && ( VAR_4 ) ) COND ( ( ( VAR_2 ) != null ) && ( ( VAR_3 ) != null ) ) && ( VAR_4 ) ( THEN THEN (  VAR_4 = false )  VAR_4 = false (  VAR_5 . METHOD_2 ( ) . METHOD_3 ( VAR_1 , VAR_2 , VAR_3 ) )  VAR_5 . METHOD_2 ( ) . METHOD_3 ( VAR_1 , VAR_2 , VAR_3 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1<TYPE_2,TYPE_3> ) RETURN TYPE_1<TYPE_2,TYPE_3> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME project ) NAME project ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME type ) NAME type ( INIT = TYPE_7 . METHOD_2 ( VAR_2 ) ) INIT = TYPE_7 . METHOD_2 ( VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = type . METHOD_3 ( ) ) INIT = type . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( INIT = type . METHOD_4 ( ) ) INIT = type . METHOD_4 ( ) ) VAR VAR ( IF IF ( COND VAR_4 == null ) COND VAR_4 == null ( THEN THEN (  VAR_4 = type . METHOD_5 ( ) . toString ( ) )  VAR_4 = type . METHOD_5 ( ) . toString ( ) ) THEN THEN ) IF IF ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_5 ) NAME VAR_5 ( INIT = type . METHOD_6 ( project ) ) INIT = type . METHOD_6 ( project ) ) VAR VAR (  return TYPE_8 . METHOD_1 ( VAR_1 , VAR_3 , VAR_4 , VAR_5 ) ; )  return TYPE_8 . METHOD_1 ( VAR_1 , VAR_3 , VAR_4 , VAR_5 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( VAR_2 ) ) INIT = TYPE_1 . METHOD_2 ( VAR_2 ) ) VAR VAR (  TYPE_2 . assertEquals ( STRING_1 , TYPE_2 . METHOD_3 ( VAR_1 ) ) )  TYPE_2 . assertEquals ( STRING_1 , TYPE_2 . METHOD_3 ( VAR_1 ) ) (  TYPE_2 . assertEquals ( STRING_2 , VAR_1 . METHOD_4 ( ) ) )  TYPE_2 . assertEquals ( STRING_2 , VAR_1 . METHOD_4 ( ) ) (  TYPE_2 . assertEquals ( STRING_2 , TYPE_2 . METHOD_3 ( VAR_1 ) ) )  TYPE_2 . assertEquals ( STRING_2 , TYPE_2 . METHOD_3 ( VAR_1 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.lang.String[] ) RETURN java.lang.String[] ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  return new java.lang.String [ ] { STRING_1 , STRING_2 , STRING_3 , STRING_4 , STRING_5 , STRING_6 , STRING_7 , STRING_8 , STRING_9 , STRING_10 , STRING_11 , STRING_12 , STRING_13 , STRING_14 , STRING_15 , STRING_16 , STRING_17 , STRING_18 , STRING_19 , STRING_20 , STRING_21 , STRING_22 , STRING_23 , STRING_24 , STRING_25 , STRING_26 , STRING_27 , STRING_28 , STRING_29 , STRING_30 , STRING_31 , STRING_32 , STRING_33 , STRING_34 , STRING_35 , VAR_1 } ; )  return new java.lang.String [ ] { STRING_1 , STRING_2 , STRING_3 , STRING_4 , STRING_5 , STRING_6 , STRING_7 , STRING_8 , STRING_9 , STRING_10 , STRING_11 , STRING_12 , STRING_13 , STRING_14 , STRING_15 , STRING_16 , STRING_17 , STRING_18 , STRING_19 , STRING_20 , STRING_21 , STRING_22 , STRING_23 , STRING_24 , STRING_25 , STRING_26 , STRING_27 , STRING_28 , STRING_29 , STRING_30 , STRING_31 , STRING_32 , STRING_33 , STRING_34 , STRING_35 , VAR_1 } ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  android.util.Log.d ( VAR_2 . TAG , STRING_1 ) )  android.util.Log.d ( VAR_2 . TAG , STRING_1 ) ) THEN THEN ) IF IF ( IF IF ( COND ! ( METHOD_2 ( ) ) ) COND ! ( METHOD_2 ( ) ) ( THEN THEN ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  android.util.Log.d ( VAR_2 . TAG , ( STRING_2 + STRING_3 ) ) )  android.util.Log.d ( VAR_2 . TAG , ( STRING_2 + STRING_3 ) ) ) THEN THEN ) IF IF (  return true ; )  return true ; ) THEN THEN ( ELSE ELSE ( IF IF ( COND VAR_3 ) COND VAR_3 ( THEN THEN (  android.util.Log.d ( VAR_2 . TAG , STRING_4 ) )  android.util.Log.d ( VAR_2 . TAG , STRING_4 ) ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF (  METHOD_3 ( VAR_4 , VAR_5 ) )  METHOD_3 ( VAR_4 , VAR_5 ) ( IF IF ( COND ( VAR_6 ) != null ) COND ( VAR_6 ) != null ( THEN THEN (  METHOD_4 ( ) )  METHOD_4 ( ) ) THEN THEN ) IF IF (  VAR_7 = false )  VAR_7 = false (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME res ) NAME res ( INIT = TYPE_2 . METHOD_2 ( ) ) INIT = TYPE_2 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_3 ( ) ) INIT = new TYPE_3 ( ) ) VAR VAR (  VAR_1 . METHOD_3 ( res ) )  VAR_1 . METHOD_3 ( res ) ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_4 . METHOD_4 ( STRING_1 , STRING_2 ) ) INIT = TYPE_4 . METHOD_4 ( STRING_1 , STRING_2 ) ) VAR VAR ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_3 ) NAME VAR_3 ( INIT = new java.io.File ( VAR_2 , STRING_3 ) ) INIT = new java.io.File ( VAR_2 , STRING_3 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_5<TYPE_1> ) TYPE TYPE_5<TYPE_1> ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_1 . METHOD_5 ( VAR_3 ) ) INIT = VAR_1 . METHOD_5 ( VAR_3 ) ) VAR VAR (  assertEquals ( VAR_5 , VAR_4 . status ) )  assertEquals ( VAR_5 , VAR_4 . status ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( new TYPE_2 ( STRING_1 ) , TYPE_3 . METHOD_2 ( ) . METHOD_3 ( ) , null , TYPE_4 . of ( ) , TYPE_4 . of ( STRING_2 ) , TYPE_4 . of ( ) ) ) INIT = new TYPE_1 ( new TYPE_2 ( STRING_1 ) , TYPE_3 . METHOD_2 ( ) . METHOD_3 ( ) , null , TYPE_4 . of ( ) , TYPE_4 . of ( STRING_2 ) , TYPE_4 . of ( ) ) ) VAR VAR (  TYPE_5 . METHOD_4 ( VAR_1 . METHOD_5 ( VAR_2 , STRING_2 , STRING_3 , STRING_4 , true ) ) . METHOD_6 ( VAR_3 class ) )  TYPE_5 . METHOD_4 ( VAR_1 . METHOD_5 ( VAR_2 , STRING_2 , STRING_3 , STRING_4 , true ) ) . METHOD_6 ( VAR_3 class ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) != null ) COND ( VAR_1 ) != null ( THEN THEN (  VAR_1 . METHOD_2 ( ) )  VAR_1 . METHOD_2 ( ) (  VAR_2 . METHOD_3 ( ) )  VAR_2 . METHOD_3 ( ) ) THEN THEN ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  METHOD_4 ( ) )  METHOD_4 ( ) (  VAR_2 = null )  VAR_2 = null (  VAR_3 = null )  VAR_3 = null (  VAR_4 = null )  VAR_4 = null ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_1 ( VAR_2 ) ) INIT = TYPE_1 . METHOD_1 ( VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME s ) NAME s ( INIT = new TYPE_2 ( VAR_1 , VAR_3 , VAR_4 ) ) INIT = new TYPE_2 ( VAR_1 , VAR_3 , VAR_4 ) ) VAR VAR (  VAR_1 . METHOD_2 ( VAR_5 ) )  VAR_1 . METHOD_2 ( VAR_5 ) ( IF IF ( COND ! ( METHOD_3 ( s ) ) ) COND ! ( METHOD_3 ( s ) ) ( THEN THEN (  result = - 1 )  result = - 1 ) THEN THEN ( ELSE ELSE (  s . METHOD_4 ( 0 , 0 ) )  s . METHOD_4 ( 0 , 0 ) (  VAR_1 . METHOD_5 ( ) )  VAR_1 . METHOD_5 ( ) (  METHOD_6 ( ) )  METHOD_6 ( ) ) ELSE ELSE ) IF IF (  VAR_1 . METHOD_7 ( ) )  VAR_1 . METHOD_7 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( STRING_1 ) )  TYPE_1 . METHOD_2 ( STRING_1 ) (  TYPE_2 . v ( this , STRING_2 ) )  TYPE_2 . v ( this , STRING_2 ) (  TYPE_3 . METHOD_3 ( ) . METHOD_4 ( ) )  TYPE_3 . METHOD_3 ( ) . METHOD_4 ( ) (  TYPE_4 . METHOD_3 ( ) . METHOD_1 ( ) )  TYPE_4 . METHOD_3 ( ) . METHOD_1 ( ) ( IF IF ( COND ( VAR_1 ) != null ) COND ( VAR_1 ) != null ( THEN THEN (  VAR_1 . METHOD_1 ( ) )  VAR_1 . METHOD_1 ( ) (  VAR_1 = null )  VAR_1 = null ) THEN THEN ) IF IF (  TYPE_1 . METHOD_5 ( ) )  TYPE_1 . METHOD_5 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_6 ) NAME VAR_6 ( INIT = VAR_7 . METHOD_2 ( VAR_1 ) ) INIT = VAR_7 . METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_6 == null ) COND VAR_6 == null ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF (  VAR_8 = new TYPE_2 ( new TYPE_3 . Float ( VAR_2 , VAR_3 , ( VAR_4 - VAR_2 ) , ( VAR_5 - VAR_3 ) ) ) )  VAR_8 = new TYPE_2 ( new TYPE_3 . Float ( VAR_2 , VAR_3 , ( VAR_4 - VAR_2 ) , ( VAR_5 - VAR_3 ) ) ) (  return ( VAR_8 . METHOD_3 ( ) . METHOD_4 ( ) ) == false ; )  return ( VAR_8 . METHOD_3 ( ) . METHOD_4 ( ) ) == false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  VAR_2 . METHOD_3 ( VAR_1 ) )  VAR_2 . METHOD_3 ( VAR_1 ) (  TYPE_2 . METHOD_4 ( VAR_3 ) )  TYPE_2 . METHOD_4 ( VAR_3 ) (  VAR_2 . METHOD_5 ( VAR_4 ) )  VAR_2 . METHOD_5 ( VAR_4 ) (  VAR_2 . METHOD_6 ( METHOD_7 ( ) , ( ( VAR_5 ) + 1 ) , 0 ) )  VAR_2 . METHOD_6 ( METHOD_7 ( ) , ( ( VAR_5 ) + 1 ) , 0 ) (  TYPE_2 . METHOD_4 ( VAR_3 ) )  TYPE_2 . METHOD_4 ( VAR_3 ) (  METHOD_8 ( VAR_1 . length ( ) ) )  METHOD_8 ( VAR_1 . length ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME context ) NAME context ) VAR VAR ( VAR VAR ( TYPE android.content.Intent ) TYPE android.content.Intent ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME action ) NAME action ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND TYPE_2 . equals ( action ) ) COND TYPE_2 . equals ( action ) ( THEN THEN (  TYPE_3 . METHOD_3 ( false ) )  TYPE_3 . METHOD_3 ( false ) ( VAR VAR ( TYPE android.content.Intent ) TYPE android.content.Intent ( NAME VAR_2 ) NAME VAR_2 ( INIT = context . METHOD_4 ( null , new TYPE_4 ( VAR_3 ) ) ) INIT = context . METHOD_4 ( null , new TYPE_4 ( VAR_3 ) ) ) VAR VAR ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN (  METHOD_5 ( context , VAR_2 ) )  METHOD_5 ( context , VAR_2 ) ) THEN THEN ) IF IF ) THEN THEN ( ELSE ELSE ( IF IF ( COND TYPE_5 . equals ( action ) ) COND TYPE_5 . equals ( action ) ( THEN THEN (  METHOD_5 ( context , VAR_1 ) )  METHOD_5 ( context , VAR_1 ) ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static final ) MODIFIER public static final ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME input ) NAME input ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = 1 ) INIT = 1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = input . METHOD_2 ( ) ) INIT = input . METHOD_2 ( ) ) VAR VAR (  input . METHOD_3 ( VAR_1 ) )  input . METHOD_3 ( VAR_1 ) ( WHILE WHILE ( COND ( input . METHOD_4 ( ) ) > 0 ) COND ( input . METHOD_4 ( ) ) > 0 ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ( INIT = input . METHOD_5 ( ) ) INIT = input . METHOD_5 ( ) ) VAR VAR ( IF IF ( COND VAR_4 != VAR_1 ) COND VAR_4 != VAR_1 ( THEN THEN (  break ; )  break ; ) THEN THEN ) IF IF (  input . METHOD_3 ( VAR_1 ) )  input . METHOD_3 ( VAR_1 ) (  VAR_2 ++ )  VAR_2 ++ ) BLOCK BLOCK ) WHILE WHILE (  input . METHOD_6 ( VAR_3 ) )  input . METHOD_6 ( VAR_3 ) (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME args ) NAME args ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME in ) NAME in ( INIT = new TYPE_1 ( new TYPE_2 ( VAR_1 . in ) ) ) INIT = new TYPE_1 ( new TYPE_2 ( VAR_1 . in ) ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME line ) NAME line ( INIT = null ) INIT = null ) VAR VAR ( VAR VAR ( TYPE java.lang.StringBuilder ) TYPE java.lang.StringBuilder ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.lang.StringBuilder ( ) ) INIT = new java.lang.StringBuilder ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_3 ( ) ) INIT = new TYPE_3 ( ) ) VAR VAR ( WHILE WHILE ( COND ( line = in . METHOD_2 ( ) ) != null ) COND ( line = in . METHOD_2 ( ) ) != null ( BLOCK BLOCK (  TYPE_4 . METHOD_3 ( line , VAR_3 ) )  TYPE_4 . METHOD_3 ( line , VAR_3 ) ) BLOCK BLOCK ) WHILE WHILE (  VAR_4 . METHOD_4 ( VAR_3 . METHOD_5 ( ) ) )  VAR_4 . METHOD_4 ( VAR_3 . METHOD_5 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . METHOD_3 ( VAR_4 ) ) INIT = VAR_3 . METHOD_3 ( VAR_4 ) ) VAR VAR (  org.mockito.Mockito.verify ( VAR_5 ) . METHOD_4 ( org.mockito.Matchers.eq ( VAR_1 ) , org.mockito.Matchers.eq ( ( ( char ) ( VAR_4 ) ) ) ) )  org.mockito.Mockito.verify ( VAR_5 ) . METHOD_4 ( org.mockito.Matchers.eq ( VAR_1 ) , org.mockito.Matchers.eq ( ( ( char ) ( VAR_4 ) ) ) ) (  org.mockito.Mockito.verify ( VAR_5 ) . METHOD_5 ( org.mockito.Matchers.eq ( VAR_1 ) ) )  org.mockito.Mockito.verify ( VAR_5 ) . METHOD_5 ( org.mockito.Matchers.eq ( VAR_1 ) ) (  assertEquals ( VAR_2 , true ) )  assertEquals ( VAR_2 , true ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Class<?extendsTYPE_1> ) TYPE java.lang.Class<?extendsTYPE_1> ( NAME target ) NAME target ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND target == ( VAR_1 class ) ) COND target == ( VAR_1 class ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ( FOR-EACH FOR-EACH ( TYPE java.lang.Class<?extendsTYPE_1> ) TYPE java.lang.Class<?extendsTYPE_1> ( NAME VAR_2 ) NAME VAR_2 ( IN VAR_3 ) IN VAR_3 ( BLOCK BLOCK ( IF IF ( COND VAR_2 . METHOD_2 ( target ) ) COND VAR_2 . METHOD_2 ( target ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public synchronized ) MODIFIER public synchronized ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE long ) TYPE long ( NAME time ) NAME time ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME type ) NAME type ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE float ) TYPE float ( NAME values ) NAME values ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE float ) TYPE float ( NAME VAR_2 ) NAME VAR_2 ( INIT = FLOAT_1 ) INIT = FLOAT_1 ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE float ) TYPE float ( NAME value ) NAME value ( IN values ) IN values ( BLOCK BLOCK (  VAR_2 += value )  VAR_2 += value ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  VAR_3 = TYPE_1 . METHOD_2 ( VAR_3 , VAR_2 ) )  VAR_3 = TYPE_1 . METHOD_2 ( VAR_3 , VAR_2 ) (  VAR_4 . METHOD_1 ( new TYPE_2 ( ( ( time - ( VAR_5 ) ) / FLOAT_2 ) , type , id , values ) ) )  VAR_4 . METHOD_1 ( new TYPE_2 ( ( ( time - ( VAR_5 ) ) / FLOAT_2 ) , type , id , values ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public synchronized ) MODIFIER public synchronized ( RETURN void ) RETURN void ( NAME start ) NAME start ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) != 0 ) COND ( VAR_1 ) != 0 ( THEN THEN (  throw new TYPE_1 ( ) ; )  throw new TYPE_1 ( ) ; ) THEN THEN ) IF IF (  VAR_2 . METHOD_1 ( this ) )  VAR_2 . METHOD_1 ( this ) (  VAR_3 = false )  VAR_3 = false ( TRY TRY ( BLOCK BLOCK (  TYPE_2 . METHOD_2 ( this , VAR_4 , VAR_5 ) )  TYPE_2 . METHOD_2 ( this , VAR_4 , VAR_5 ) (  VAR_3 = true )  VAR_3 = true ) BLOCK BLOCK ( FINALLY FINALLY ( TRY TRY ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_3 ) ) COND ! ( VAR_3 ) ( THEN THEN (  VAR_2 . METHOD_3 ( this ) )  VAR_2 . METHOD_3 ( this ) ) THEN THEN ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Throwable ) TYPE java.lang.Throwable ( NAME VAR_6 ) NAME VAR_6 ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME args ) NAME args ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME TYPE_2 ) NAME TYPE_2 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR ( IF IF ( COND ! ( TYPE_2 . METHOD_2 ( args ) ) ) COND ! ( TYPE_2 . METHOD_2 ( args ) ) ( THEN THEN (  TYPE_2 . METHOD_3 ( ) )  TYPE_2 . METHOD_3 ( ) (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . run ( ) ) INIT = TYPE_2 . run ( ) ) VAR VAR (  TYPE_3 . METHOD_4 ( ( VAR_1 ? 0 : 1 ) ) )  TYPE_3 . METHOD_4 ( ( VAR_1 ? 0 : 1 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public final ) MODIFIER public final ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_2 ( ) ) INIT = TYPE_2 . METHOD_2 ( ) ) VAR VAR ( SYNCHRONIZED SYNCHRONIZED (  this )  this ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_4 . METHOD_3 ( VAR_1 ) ) INIT = TYPE_4 . METHOD_3 ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_3 != null ) COND VAR_3 != null ( THEN THEN (  TYPE_4 . METHOD_4 ( VAR_1 ) )  TYPE_4 . METHOD_4 ( VAR_1 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED (  TYPE_2 . METHOD_5 ( VAR_2 ) )  TYPE_2 . METHOD_5 ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME path ) NAME path ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_2 ( path ) ) INIT = VAR_1 . METHOD_2 ( path ) ) VAR VAR ( IF IF ( COND VAR_2 == 0 ) COND VAR_2 == 0 ( THEN THEN (  throw new android.renderscript.RSRuntimeException ( ( STRING_1 + path ) ) ; )  throw new android.renderscript.RSRuntimeException ( ( STRING_1 + path ) ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_1 ( VAR_2 , VAR_1 , null ) ) INIT = new TYPE_1 ( VAR_2 , VAR_1 , null ) ) VAR VAR (  VAR_3 . METHOD_3 ( ) )  VAR_3 . METHOD_3 ( ) (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE android.os.Message ) TYPE android.os.Message ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  android.util.Log . i ( TYPE_1 . TAG , ( ( ( STRING_1 + ( VAR_2 ) ) + STRING_2 ) + ( VAR_1 == null ? STRING_3 : TYPE_1 . METHOD_3 ( VAR_3 ) ) ) ) )  android.util.Log . i ( TYPE_1 . TAG , ( ( ( STRING_1 + ( VAR_2 ) ) + STRING_2 ) + ( VAR_1 == null ? STRING_3 : TYPE_1 . METHOD_3 ( VAR_3 ) ) ) ) (  VAR_4 = VAR_5 )  VAR_4 = VAR_5 (  METHOD_4 ( VAR_6 ) )  METHOD_4 ( VAR_6 ) (  METHOD_5 ( VAR_7 ) )  METHOD_5 ( VAR_7 ) (  METHOD_6 ( VAR_4 , VAR_8 ) )  METHOD_6 ( VAR_4 , VAR_8 ) (  METHOD_7 ( VAR_9 , VAR_10 ) )  METHOD_7 ( VAR_9 , VAR_10 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN java.util.Map<TYPE_1,java.util.Map<TYPE_2,TYPE_3>> ) RETURN java.util.Map<TYPE_1,java.util.Map<TYPE_2,TYPE_3>> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4<java.util.Map<TYPE_2,TYPE_5>,java.util.Map<TYPE_2,TYPE_3>> ) TYPE TYPE_4<java.util.Map<TYPE_2,TYPE_5>,java.util.Map<TYPE_2,TYPE_3>> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_4 < java.util.Map < TYPE_2 , TYPE_5 > , java.util.Map < TYPE_2 , TYPE_3 > > ( ) { public java.util.Map < TYPE_2 , TYPE_3 > METHOD_2 ( java.util.Map < TYPE_2 , TYPE_5 > VAR_2 ) { return TYPE_6 . METHOD_3 ( VAR_2 , VAR_3 ) ; } } ) INIT = new TYPE_4 < java.util.Map < TYPE_2 , TYPE_5 > , java.util.Map < TYPE_2 , TYPE_3 > > ( ) { public java.util.Map < TYPE_2 , TYPE_3 > METHOD_2 ( java.util.Map < TYPE_2 , TYPE_5 > VAR_2 ) { return TYPE_6 . METHOD_3 ( VAR_2 , VAR_3 ) ; } } ) VAR VAR ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.Map<TYPE_2,TYPE_3> ) RETURN java.util.Map<TYPE_2,TYPE_3> ( NAME METHOD_2 ) NAME METHOD_2 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.Map<TYPE_2,TYPE_5> ) TYPE java.util.Map<TYPE_2,TYPE_5> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return TYPE_6 . METHOD_3 ( VAR_2 , VAR_3 ) ; )  return TYPE_6 . METHOD_3 ( VAR_2 , VAR_3 ) ; ) BLOCK BLOCK ) METHOD METHOD (  return TYPE_6 . METHOD_3 ( VAR_4 . METHOD_4 ( ) , VAR_1 ) ; )  return TYPE_6 . METHOD_3 ( VAR_4 . METHOD_4 ( ) , VAR_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME key ) NAME key ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME uid ) NAME uid ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  return ( VAR_1 . METHOD_1 ( key , uid ) ) == ( VAR_2 ) ; )  return ( VAR_1 . METHOD_1 ( key , uid ) ) == ( VAR_2 ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME e ) NAME e ( BLOCK BLOCK (  android.util.Log.w ( VAR_3 . TAG , STRING_1 , e ) )  android.util.Log.w ( VAR_3 . TAG , STRING_1 , e ) (  return false ; )  return false ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME info ) NAME info ) VAR VAR ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND TYPE_2 . METHOD_2 ( ) ) COND TYPE_2 . METHOD_2 ( ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME uid ) NAME uid ( INIT = TYPE_2 . METHOD_3 ( ) ) INIT = TYPE_2 . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_3 . METHOD_4 ( ) . METHOD_5 ( uid ) ) INIT = TYPE_3 . METHOD_4 ( ) . METHOD_5 ( uid ) ) VAR VAR ( IF IF ( COND ( VAR_2 != null ) && ( ( VAR_2 . length ) == 1 ) ) COND ( VAR_2 != null ) && ( ( VAR_2 . length ) == 1 ) ( THEN THEN (  TYPE_4 . METHOD_6 ( VAR_1 ) )  TYPE_4 . METHOD_6 ( VAR_1 ) (  TYPE_5 . METHOD_6 ( VAR_1 ) )  TYPE_5 . METHOD_6 ( VAR_1 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( ) ) INIT = TYPE_2 . METHOD_2 ( ) ) VAR VAR (  assertEquals ( STRING_1 , ( ( java.lang.String ) ( VAR_1 . get ( VAR_2 ) ) ) ) )  assertEquals ( STRING_1 , ( ( java.lang.String ) ( VAR_1 . get ( VAR_2 ) ) ) ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  METHOD_3 ( VAR_1 . get ( STRING_2 ) ) )  METHOD_3 ( VAR_1 . get ( STRING_2 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  android.util.Log.d ( TYPE_1 . TAG , STRING_1 ) )  android.util.Log.d ( TYPE_1 . TAG , STRING_1 ) ) THEN THEN ) IF IF ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  METHOD_2 ( ) )  METHOD_2 ( ) (  VAR_2 = false )  VAR_2 = false ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_3 ) != null ) COND ( VAR_3 ) != null ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE android.bluetooth.BluetoothDevice ) TYPE android.bluetooth.BluetoothDevice ( NAME device ) NAME device ( IN VAR_3 . METHOD_3 ( ) ) IN VAR_3 . METHOD_3 ( ) ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_4 ( device ) ) INIT = METHOD_4 ( device ) ) VAR VAR ( IF IF ( COND VAR_4 != ( VAR_5 ) ) COND VAR_4 != ( VAR_5 ) ( THEN THEN (  METHOD_5 ( device , VAR_6 ) )  METHOD_5 ( device , VAR_6 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  VAR_3 . METHOD_6 ( ) )  VAR_3 . METHOD_6 ( ) ) THEN THEN ) IF IF (  TYPE_1 . METHOD_7 ( ) )  TYPE_1 . METHOD_7 ( ) (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME v ) NAME v ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_1 ) NAME VAR_1 ( INIT = v . METHOD_2 ( STRING_1 ) ) INIT = v . METHOD_2 ( STRING_1 ) ) VAR VAR (  METHOD_3 ( ( ( short ) ( VAR_1 . length ) ) ) )  METHOD_3 ( ( ( short ) ( VAR_1 . length ) ) ) ( FOR-EACH FOR-EACH ( TYPE byte ) TYPE byte ( NAME b ) NAME b ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  METHOD_4 ( b ) )  METHOD_4 ( b ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new java.lang.RuntimeException ( e ) ; )  throw new java.lang.RuntimeException ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME f ) NAME f ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( f , VAR_2 ) ) INIT = METHOD_2 ( f , VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_3 ( VAR_2 ) ) INIT = METHOD_3 ( VAR_2 ) ) VAR VAR (  assertEquals ( TYPE_3 . toString ( VAR_1 . METHOD_1 ( ) ) , TYPE_3 . toString ( VAR_3 ) ) )  assertEquals ( TYPE_3 . toString ( VAR_1 . METHOD_1 ( ) ) , TYPE_3 . toString ( VAR_3 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME context ) NAME context ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_3 ( context , VAR_1 ) ) INIT = new TYPE_3 ( context , VAR_1 ) ) VAR VAR (  VAR_2 . METHOD_2 ( TYPE_4 . METHOD_3 ( context , VAR_1 ) , VAR_3 ) )  VAR_2 . METHOD_2 ( TYPE_4 . METHOD_3 ( context , VAR_1 ) , VAR_3 ) (  TYPE_5 . METHOD_4 ( context , VAR_1 ) )  TYPE_5 . METHOD_4 ( context , VAR_1 ) (  TYPE_6 . start ( context , VAR_1 ) )  TYPE_6 . start ( context , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME args ) NAME args ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( TYPE_1 . METHOD_2 ( args ) ) ) COND ! ( TYPE_1 . METHOD_2 ( args ) ) ( THEN THEN (  TYPE_1 . METHOD_3 ( ) )  TYPE_1 . METHOD_3 ( ) (  TYPE_2 . METHOD_4 ( ( - 1 ) ) )  TYPE_2 . METHOD_4 ( ( - 1 ) ) ) THEN THEN ) IF IF ( VAR VAR ( TYPE long ) TYPE long ( NAME start ) NAME start ( INIT = TYPE_2 . METHOD_5 ( ) ) INIT = TYPE_2 . METHOD_5 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_1 . METHOD_6 ( ) )  VAR_1 . METHOD_6 ( ) ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_5 ( ) ) INIT = TYPE_2 . METHOD_5 ( ) ) VAR VAR (  java.lang.System.out.println ( ( STRING_1 + ( ( VAR_2 - start ) / INT_1 ) ) ) )  java.lang.System.out.println ( ( STRING_1 + ( ( VAR_2 - start ) / INT_1 ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , STRING_1 , VAR_1 ) )  TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , STRING_1 , VAR_1 ) ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME size ) NAME size ( INIT = VAR_3 . size ( ) ) INIT = VAR_3 . size ( ) ) VAR VAR ) INIT INIT ( COND i < size ) COND i < size ( UPDATE UPDATE (  ++ i )  ++ i ) UPDATE UPDATE ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME type ) NAME type ( INIT = VAR_3 . get ( i ) ) INIT = VAR_3 . get ( i ) ) VAR VAR ( IF IF ( COND type . equals ( VAR_1 ) ) COND type . equals ( VAR_1 ) ( THEN THEN (  VAR_3 . set ( i , VAR_2 ) )  VAR_3 . set ( i , VAR_2 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR FOR ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME listener ) NAME listener ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  VAR_1 )  VAR_1 ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_3 ) == listener ) COND ( VAR_3 ) == listener ( THEN THEN (  VAR_1 . METHOD_2 ( VAR_1 . METHOD_3 ( VAR_2 ) ) )  VAR_1 . METHOD_2 ( VAR_1 . METHOD_3 ( VAR_2 ) ) (  listener . METHOD_4 ( ) . METHOD_5 ( VAR_2 , 0 ) )  listener . METHOD_4 ( ) . METHOD_5 ( VAR_2 , 0 ) (  return ; )  return ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_3 ) < ( TYPE_1 . METHOD_2 ( ) ) ) COND ( VAR_3 ) < ( TYPE_1 . METHOD_2 ( ) ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_3 ( VAR_5 , VAR_1 , VAR_2 , ( - 1 ) ) ) INIT = METHOD_3 ( VAR_5 , VAR_1 , VAR_2 , ( - 1 ) ) ) VAR VAR ( IF IF ( COND VAR_4 == ( VAR_6 ) ) COND VAR_4 == ( VAR_6 ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF (  android.util.Slog.w ( com.android.server.am.ActivityManagerService.TAG , ( ( ( name + STRING_1 ) + VAR_2 ) + STRING_2 ) ) )  android.util.Slog.w ( com.android.server.am.ActivityManagerService.TAG , ( ( ( name + STRING_1 ) + VAR_2 ) + STRING_2 ) ) (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( ) )  VAR_1 . METHOD_2 ( ) (  VAR_1 . METHOD_3 ( VAR_2 ) )  VAR_1 . METHOD_3 ( VAR_2 ) ( VAR VAR ( TYPE TYPE_2<TYPE_3<TYPE_4,TYPE_5>> ) TYPE TYPE_2<TYPE_3<TYPE_4,TYPE_5>> ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_4 ( ) . METHOD_5 ( ) ) INIT = METHOD_4 ( ) . METHOD_5 ( ) ) VAR VAR ( WHILE WHILE ( COND VAR_3 . METHOD_6 ( ) ) COND VAR_3 . METHOD_6 ( ) ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3<TYPE_4,TYPE_5> ) TYPE TYPE_3<TYPE_4,TYPE_5> ( NAME entry ) NAME entry ( INIT = VAR_3 . METHOD_7 ( ) ) INIT = VAR_3 . METHOD_7 ( ) ) VAR VAR (  VAR_1 . METHOD_1 ( entry . METHOD_8 ( ) ) )  VAR_1 . METHOD_1 ( entry . METHOD_8 ( ) ) (  VAR_1 . METHOD_1 ( entry . METHOD_9 ( ) ) )  VAR_1 . METHOD_1 ( entry . METHOD_9 ( ) ) ) BLOCK BLOCK ) WHILE WHILE ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 . METHOD_2 ( VAR_2 ) ) && ( VAR_1 . METHOD_3 ( VAR_3 ) ) ) COND ( VAR_1 . METHOD_2 ( VAR_2 ) ) && ( VAR_1 . METHOD_3 ( VAR_3 ) ) ( THEN THEN (  return VAR_4 . METHOD_4 ( ) ; )  return VAR_4 . METHOD_4 ( ) ; ) THEN THEN ( ELSE ELSE (  return ( ( TYPE_1 ) ( scheduler . METHOD_5 ( ) . METHOD_6 ( VAR_5 class ) ) ) ; )  return ( ( TYPE_1 ) ( scheduler . METHOD_5 ( ) . METHOD_6 ( VAR_5 class ) ) ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = null ) INIT = null ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME service ) NAME service ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( IF IF ( COND service != null ) COND service != null ( THEN THEN (  VAR_2 = service . METHOD_1 ( VAR_1 ) )  VAR_2 = service . METHOD_1 ( VAR_1 ) ( IF IF ( COND VAR_2 == null ) COND VAR_2 == null ( THEN THEN (  METHOD_3 ( STRING_1 ) )  METHOD_3 ( STRING_1 ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE android.content.Intent ) TYPE android.content.Intent ( NAME VAR_3 ) NAME VAR_3 ( INIT = new android.content.Intent ( VAR_4 ) ) INIT = new android.content.Intent ( VAR_4 ) ) VAR VAR (  VAR_3 . METHOD_2 ( STRING_1 , TYPE_2 . METHOD_3 ( VAR_5 , VAR_2 , 0 ) ) )  VAR_3 . METHOD_2 ( STRING_1 , TYPE_2 . METHOD_3 ( VAR_5 , VAR_2 , 0 ) ) (  VAR_1 . METHOD_4 ( VAR_3 , VAR_6 , VAR_7 , VAR_8 , null , null , VAR_9 , null , null ) )  VAR_1 . METHOD_4 ( VAR_3 , VAR_6 , VAR_7 , VAR_8 , null , null , VAR_9 , null , null ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE short ) TYPE short ( NAME VAR_1 ) NAME VAR_1 ( INIT = INT_1 ) INIT = INT_1 ) VAR VAR ( VAR VAR ( TYPE android.os.Bundle ) TYPE android.os.Bundle ( NAME args ) NAME args ( INIT = new android.os.Bundle ( ) ) INIT = new android.os.Bundle ( ) ) VAR VAR (  args . METHOD_2 ( STRING_1 , VAR_2 ) )  args . METHOD_2 ( STRING_1 , VAR_2 ) (  args . METHOD_2 ( STRING_2 , 0 ) )  args . METHOD_2 ( STRING_2 , 0 ) (  args . METHOD_2 ( STRING_3 , VAR_3 ) )  args . METHOD_2 ( STRING_3 , VAR_3 ) (  TYPE_2 . METHOD_3 ( VAR_1 , TYPE_3 . METHOD_4 ( args ) . toString ( ) ) )  TYPE_2 . METHOD_3 ( VAR_1 , TYPE_3 . METHOD_4 ( args ) . toString ( ) ) (  TYPE_4 . METHOD_5 ( VAR_4 ) )  TYPE_4 . METHOD_5 ( VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected final ) MODIFIER protected final ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) != null ) COND ( VAR_1 ) != null ( THEN THEN (  TYPE_1 . METHOD_2 ( VAR_1 ) )  TYPE_1 . METHOD_2 ( VAR_1 ) ) THEN THEN ) IF IF ( SYNCHRONIZED SYNCHRONIZED (  VAR_2 )  VAR_2 ( BLOCK BLOCK (  transitionTo ( VAR_3 ) )  transitionTo ( VAR_3 ) ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ( FINALLY FINALLY (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN byte[] ) RETURN byte[] ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME in ) NAME in ( INIT = new TYPE_2 ( new TYPE_3 ( VAR_1 ) ) ) INIT = new TYPE_2 ( new TYPE_3 ( VAR_1 ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME out ) NAME out ( INIT = new TYPE_4 ( ) ) INIT = new TYPE_4 ( ) ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_2 ) NAME VAR_2 ( INIT = new byte [ INT_1 ] ) INIT = new byte [ INT_1 ] ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME count ) NAME count ) VAR VAR ( WHILE WHILE ( COND ( count = in . METHOD_2 ( VAR_2 ) ) != ( - 1 ) ) COND ( count = in . METHOD_2 ( VAR_2 ) ) != ( - 1 ) ( BLOCK BLOCK (  out . METHOD_3 ( VAR_2 , 0 , count ) )  out . METHOD_3 ( VAR_2 , 0 , count ) ) BLOCK BLOCK ) WHILE WHILE (  return out . METHOD_4 ( ) ; )  return out . METHOD_4 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME x ) NAME x ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR (  METHOD_5 ( METHOD_6 ( METHOD_7 ( x ) ) ) )  METHOD_5 ( METHOD_6 ( METHOD_7 ( x ) ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Throwable ) TYPE java.lang.Throwable ( NAME e ) NAME e ( BLOCK BLOCK (  throw METHOD_8 ( x , e ) ; )  throw METHOD_8 ( x , e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 . METHOD_2 ( METHOD_3 ( ) ) ) || ( METHOD_4 ( ) ) ) COND ( VAR_1 . METHOD_2 ( METHOD_3 ( ) ) ) || ( METHOD_4 ( ) ) ( THEN THEN ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_1 . METHOD_5 ( ) ) INIT = TYPE_1 . METHOD_5 ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  METHOD_6 ( ) )  METHOD_6 ( ) (  return true ; )  return true ; ) BLOCK BLOCK ( FINALLY FINALLY (  TYPE_1 . METHOD_7 ( VAR_2 ) )  TYPE_1 . METHOD_7 ( VAR_2 ) ) FINALLY FINALLY ) TRY TRY ) THEN THEN ( ELSE ELSE (  throw new TYPE_2 ( STRING_1 ) ; )  throw new TYPE_2 ( STRING_1 ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.Class<?> ) TYPE java.lang.Class<?> ( NAME target ) NAME target ( INIT = VAR_1 class ) INIT = VAR_1 class ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_2 ( target , null , VAR_3 ) ) INIT = TYPE_2 . METHOD_2 ( target , null , VAR_3 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_4 ( VAR_5 , VAR_6 , VAR_7 , 0 , VAR_2 ) ) INIT = new TYPE_4 ( VAR_5 , VAR_6 , VAR_7 , 0 , VAR_2 ) ) VAR VAR (  VAR_4 . run ( null ) )  VAR_4 . run ( null ) (  org.mockito.Mockito.verify ( VAR_5 ) . METHOD_3 ( VAR_8 class , ( ( target . getName ( ) ) + STRING_1 ) ) )  org.mockito.Mockito.verify ( VAR_5 ) . METHOD_3 ( VAR_8 class , ( ( target . getName ( ) ) + STRING_1 ) ) (  org.mockito.Mockito.verify ( VAR_5 ) . METHOD_4 ( VAR_9 ) )  org.mockito.Mockito.verify ( VAR_5 ) . METHOD_4 ( VAR_9 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME v ) NAME v ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  v . METHOD_2 ( new TYPE_3 ( VAR_1 ) ) )  v . METHOD_2 ( new TYPE_3 ( VAR_1 ) ) ( IF IF ( COND ( VAR_2 ) != 16 ) COND ( VAR_2 ) != 16 ( THEN THEN (  v . METHOD_2 ( new TYPE_4 ( VAR_2 ) ) )  v . METHOD_2 ( new TYPE_4 ( VAR_2 ) ) ) THEN THEN ) IF IF (  return new TYPE_5 ( v ) ; )  return new TYPE_5 ( v ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN byte[] ) RETURN byte[] ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_2 . METHOD_2 ( VAR_1 ) ) ) COND ! ( VAR_2 . METHOD_2 ( VAR_1 ) ) ( THEN THEN ( VAR VAR ( TYPE int ) TYPE int ( NAME key ) NAME key ( INIT = VAR_2 . size ( ) ) INIT = VAR_2 . size ( ) ) VAR VAR (  VAR_2 . METHOD_3 ( key , VAR_1 ) )  VAR_2 . METHOD_3 ( key , VAR_1 ) (  return METHOD_4 ( key ) ; )  return METHOD_4 ( key ) ; ) THEN THEN ( ELSE ELSE ( FOR-EACH FOR-EACH ( TYPE int ) TYPE int ( NAME key ) NAME key ( IN VAR_2 . METHOD_5 ( ) ) IN VAR_2 . METHOD_5 ( ) ( BLOCK BLOCK ( IF IF ( COND VAR_2 . get ( key ) . equals ( VAR_1 ) ) COND VAR_2 . get ( key ) . equals ( VAR_1 ) ( THEN THEN (  return METHOD_4 ( key ) ; )  return METHOD_4 ( key ) ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) ELSE ELSE ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.Map<TYPE_1,java.util.Map<java.lang.String,TYPE_2>> ) RETURN java.util.Map<TYPE_1,java.util.Map<java.lang.String,TYPE_2>> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<TYPE_1,java.util.Map<java.lang.String,TYPE_2>> ) TYPE java.util.Map<TYPE_1,java.util.Map<java.lang.String,TYPE_2>> ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_4 . METHOD_2 ( VAR_3 class ) ) INIT = TYPE_4 . METHOD_2 ( VAR_3 class ) ) VAR VAR ( SYNCHRONIZED SYNCHRONIZED (  VAR_4 )  VAR_4 ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME key ) NAME key ( IN TYPE_1 . values ( ) ) IN TYPE_1 . values ( ) ( BLOCK BLOCK (  VAR_2 . METHOD_3 ( key , METHOD_4 ( key , VAR_1 ) ) )  VAR_2 . METHOD_3 ( key , METHOD_4 ( key , VAR_1 ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( 100 , 100 , VAR_2 ) ) INIT = new TYPE_1 ( 100 , 100 , VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR (  VAR_3 . METHOD_3 ( new TYPE_3 ( 0 , true ) ) )  VAR_3 . METHOD_3 ( new TYPE_3 ( 0 , true ) ) (  VAR_3 . METHOD_4 ( 0 , 0 , VAR_1 . METHOD_5 ( ) , VAR_1 . METHOD_6 ( ) ) )  VAR_3 . METHOD_4 ( 0 , 0 , VAR_1 . METHOD_5 ( ) , VAR_1 . METHOD_6 ( ) ) (  VAR_3 . METHOD_7 ( ) )  VAR_3 . METHOD_7 ( ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_4 . METHOD_8 ( VAR_1 ) ) INIT = TYPE_4 . METHOD_8 ( VAR_1 ) ) VAR VAR (  METHOD_9 ( VAR_4 ) )  METHOD_9 ( VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME in ) NAME in ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.ArrayList < TYPE_1 > ( ) ) INIT = new java.util.ArrayList < TYPE_1 > ( ) ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = in . METHOD_2 ( 0 ) ) INIT = in . METHOD_2 ( 0 ) ) VAR VAR ) INIT INIT ( COND i >= 0 ) COND i >= 0 ( UPDATE UPDATE (  i = in . METHOD_2 ( ( i + 1 ) ) )  i = in . METHOD_2 ( ( i + 1 ) ) ) UPDATE UPDATE ( BLOCK BLOCK (  VAR_2 . METHOD_4 ( VAR_1 . get ( i ) ) )  VAR_2 . METHOD_4 ( VAR_1 . get ( i ) ) ) BLOCK BLOCK ) FOR FOR (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_2 ( ) ) INIT = TYPE_2 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_3 ( STRING_1 ) ) INIT = new TYPE_3 ( STRING_1 ) ) VAR VAR (  VAR_3 . METHOD_3 ( VAR_2 ) )  VAR_3 . METHOD_3 ( VAR_2 ) (  VAR_3 . METHOD_4 ( VAR_1 ) )  VAR_3 . METHOD_4 ( VAR_1 ) ( VAR VAR ( TYPE java.util.List<TYPE_4> ) TYPE java.util.List<TYPE_4> ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_3 . METHOD_5 ( ) . get ( STRING_2 ) ) INIT = VAR_3 . METHOD_5 ( ) . get ( STRING_2 ) ) VAR VAR (  assertEquals ( 1 , VAR_4 . size ( ) ) )  assertEquals ( 1 , VAR_4 . size ( ) ) (  assertFalse ( VAR_4 . get ( 0 ) . METHOD_6 ( ) ) )  assertFalse ( VAR_4 . get ( 0 ) . METHOD_6 ( ) ) (  METHOD_7 ( VAR_1 ) )  METHOD_7 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_1 . METHOD_3 ( ) ) INIT = TYPE_1 . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_1 . METHOD_4 ( VAR_4 class ) ) INIT = TYPE_1 . METHOD_4 ( VAR_4 class ) ) VAR VAR (  VAR_3 . METHOD_5 ( VAR_1 , VAR_2 , false ) )  VAR_3 . METHOD_5 ( VAR_1 , VAR_2 , false ) (  METHOD_6 ( VAR_2 , VAR_5 , STRING_1 , false ) )  METHOD_6 ( VAR_2 , VAR_5 , STRING_1 , false ) (  METHOD_6 ( VAR_2 , VAR_6 , STRING_2 , false ) )  METHOD_6 ( VAR_2 , VAR_6 , STRING_2 , false ) (  METHOD_6 ( VAR_2 , VAR_7 , STRING_3 , false ) )  METHOD_6 ( VAR_2 , VAR_7 , STRING_3 , false ) (  METHOD_6 ( VAR_2 , VAR_8 , STRING_4 , false ) )  METHOD_6 ( VAR_2 , VAR_8 , STRING_4 , false ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = null ) INIT = null ) VAR VAR ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN ( VAR VAR ( TYPE java.util.Map<java.lang.String,TYPE_2> ) TYPE java.util.Map<java.lang.String,TYPE_2> ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 . get ( VAR_5 ) ) INIT = VAR_4 . get ( VAR_5 ) ) VAR VAR (  VAR_2 = VAR_3 . get ( name ) )  VAR_2 = VAR_3 . get ( name ) ) THEN THEN ( ELSE ELSE ( VAR VAR ( TYPE java.util.Map<java.lang.String,TYPE_2> ) TYPE java.util.Map<java.lang.String,TYPE_2> ( NAME VAR_6 ) NAME VAR_6 ( INIT = VAR_7 . get ( VAR_5 ) ) INIT = VAR_7 . get ( VAR_5 ) ) VAR VAR (  VAR_2 = VAR_6 . get ( name ) )  VAR_2 = VAR_6 . get ( name ) ) ELSE ELSE ) IF IF ( IF IF ( COND VAR_2 instanceof TYPE_1 ) COND VAR_2 instanceof TYPE_1 ( THEN THEN (  return ( ( TYPE_1 ) ( VAR_2 ) ) ; )  return ( ( TYPE_1 ) ( VAR_2 ) ) ; ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  assertFalse ( METHOD_2 ( STRING_1 , new TYPE_1 ( STRING_2 ) ) ) )  assertFalse ( METHOD_2 ( STRING_1 , new TYPE_1 ( STRING_2 ) ) ) (  assertFalse ( METHOD_2 ( STRING_1 , new TYPE_1 ( STRING_2 ) . METHOD_3 ( VAR_1 , STRING_3 ) . METHOD_3 ( VAR_2 , STRING_3 ) ) ) )  assertFalse ( METHOD_2 ( STRING_1 , new TYPE_1 ( STRING_2 ) . METHOD_3 ( VAR_1 , STRING_3 ) . METHOD_3 ( VAR_2 , STRING_3 ) ) ) (  assertFalse ( METHOD_2 ( STRING_4 , new TYPE_1 ( STRING_5 ) ) ) )  assertFalse ( METHOD_2 ( STRING_4 , new TYPE_1 ( STRING_5 ) ) ) (  assertFalse ( METHOD_2 ( STRING_4 , new TYPE_1 ( STRING_5 ) . METHOD_3 ( VAR_1 , STRING_6 ) . METHOD_3 ( VAR_2 , STRING_6 ) ) ) )  assertFalse ( METHOD_2 ( STRING_4 , new TYPE_1 ( STRING_5 ) . METHOD_3 ( VAR_1 , STRING_6 ) . METHOD_3 ( VAR_2 , STRING_6 ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME request ) NAME request ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_5 ) NAME VAR_5 ( INIT = new TYPE_4 ( VAR_4 ) ) INIT = new TYPE_4 ( VAR_4 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_6 ) NAME VAR_6 ( INIT = VAR_7 ) INIT = VAR_7 ) VAR VAR (  METHOD_2 ( VAR_6 , VAR_1 , VAR_2 , VAR_8 , VAR_3 , VAR_5 ) )  METHOD_2 ( VAR_6 , VAR_1 , VAR_2 , VAR_8 , VAR_3 , VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static synchronized ) MODIFIER public static synchronized ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME context ) NAME context ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( VAR_1 ) != null ) && ( ( VAR_1 . METHOD_2 ( ) ) != ( VAR_2 ) ) ) COND ( ( VAR_1 ) != null ) && ( ( VAR_1 . METHOD_2 ( ) ) != ( VAR_2 ) ) ( THEN THEN (  VAR_1 . METHOD_3 ( true ) )  VAR_1 . METHOD_3 ( true ) ) THEN THEN ) IF IF (  VAR_1 = new TYPE_2 ( context ) )  VAR_1 = new TYPE_2 ( context ) (  VAR_1 . METHOD_4 ( ) )  VAR_1 . METHOD_4 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( ) )  VAR_1 . METHOD_2 ( ) (  VAR_2 = ( ( TYPE_3 < ? extends TYPE_4 < TYPE_5 > > ) ( VAR_1 . METHOD_1 ( ) ) ) )  VAR_2 = ( ( TYPE_3 < ? extends TYPE_4 < TYPE_5 > > ) ( VAR_1 . METHOD_1 ( ) ) ) ( VAR VAR ( TYPE java.util.Map<TYPE_6,TYPE_4<TYPE_5>> ) TYPE java.util.Map<TYPE_6,TYPE_4<TYPE_5>> ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( ( java.util.Map < TYPE_6 , TYPE_4 < TYPE_5 > > ) ( VAR_1 . METHOD_1 ( ) ) ) ) INIT = ( ( java.util.Map < TYPE_6 , TYPE_4 < TYPE_5 > > ) ( VAR_1 . METHOD_1 ( ) ) ) ) VAR VAR (  TYPE_7 . METHOD_3 ( VAR_3 ) )  TYPE_7 . METHOD_3 ( VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( STRING_1 , VAR_2 . METHOD_3 ( ) , VAR_3 ) ) INIT = METHOD_2 ( STRING_1 , VAR_2 . METHOD_3 ( ) , VAR_3 ) ) VAR VAR (  assertEquals ( VAR_4 , VAR_5 . METHOD_4 ( VAR_6 ) . METHOD_5 ( ) ) )  assertEquals ( VAR_4 , VAR_5 . METHOD_4 ( VAR_6 ) . METHOD_5 ( ) ) (  VAR_3 . METHOD_6 ( VAR_7 , VAR_8 , null ) )  VAR_3 . METHOD_6 ( VAR_7 , VAR_8 , null ) (  org.mockito.Mockito.verify ( VAR_5 . METHOD_7 ( ) , TYPE_2 . METHOD_8 ( VAR_9 ) ) . METHOD_9 ( VAR_6 , VAR_8 , null ) )  org.mockito.Mockito.verify ( VAR_5 . METHOD_7 ( ) , TYPE_2 . METHOD_8 ( VAR_9 ) ) . METHOD_9 ( VAR_6 , VAR_8 , null ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME subId ) NAME subId ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( TYPE_1 . METHOD_2 ( VAR_2 , VAR_1 , STRING_1 ) ) ) COND ! ( TYPE_1 . METHOD_2 ( VAR_2 , VAR_1 , STRING_1 ) ) ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_3 ( subId ) ) INIT = METHOD_3 ( subId ) ) VAR VAR ( IF IF ( COND VAR_3 != null ) COND VAR_3 != null ( THEN THEN ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( INIT = ( VAR_5 ) + VAR_3 ) INIT = ( VAR_5 ) + VAR_3 ) VAR VAR (  return VAR_6 . METHOD_4 ( VAR_4 , null ) ; )  return VAR_6 . METHOD_4 ( VAR_4 , null ) ; ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE float ) TYPE float ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE float ) TYPE float ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE float ) TYPE float ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE float ) TYPE float ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_6 ) NAME VAR_6 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_7 ) NAME VAR_7 ( INIT = VAR_8 . METHOD_2 ( VAR_1 ) ) INIT = VAR_8 . METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_7 == null ) COND VAR_7 == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  VAR_7 . METHOD_3 ( VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) )  VAR_7 . METHOD_3 ( VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME pos ) NAME pos ( INIT = ( ( TYPE_2 ) ( METHOD_2 ( VAR_1 ) ) ) ) INIT = ( ( TYPE_2 ) ( METHOD_2 ( VAR_1 ) ) ) ) VAR VAR ( IF IF ( COND pos != null ) COND pos != null ( THEN THEN (  return TYPE_1 . METHOD_3 ( VAR_2 , pos , ( ( TYPE_2 ) ( pos . METHOD_4 ( ) ) ) ) ; )  return TYPE_1 . METHOD_3 ( VAR_2 , pos , ( ( TYPE_2 ) ( pos . METHOD_4 ( ) ) ) ) ; ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME context ) NAME context ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME element ) NAME element ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND element . METHOD_3 ( VAR_2 , VAR_3 ) ) COND element . METHOD_3 ( VAR_2 , VAR_3 ) ( THEN THEN (  context . METHOD_4 ( VAR_4 , element , context . METHOD_5 ( VAR_1 ) , ( STRING_1 + STRING_2 ) , null ) )  context . METHOD_4 ( VAR_4 , element , context . METHOD_5 ( VAR_1 ) , ( STRING_1 + STRING_2 ) , null ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( 2 ) ) INIT = new TYPE_1 ( 2 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 ( VAR_1 , true , INT_1 ) ) INIT = new TYPE_2 ( VAR_1 , true , INT_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_3 ( VAR_2 ) ) INIT = new TYPE_3 ( VAR_2 ) ) VAR VAR (  TYPE_4 . METHOD_2 ( VAR_3 ) )  TYPE_4 . METHOD_2 ( VAR_3 ) (  VAR_3 . start ( ) )  VAR_3 . start ( ) (  VAR_2 . METHOD_3 ( 0 ) )  VAR_2 . METHOD_3 ( 0 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE android.os.Bundle ) TYPE android.os.Bundle ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( IF IF ( COND VAR_3 != null ) COND VAR_3 != null ( THEN THEN (  VAR_3 . METHOD_2 ( false ) )  VAR_3 . METHOD_2 ( false ) ) THEN THEN ) IF IF (  return TYPE_2 . METHOD_3 ( ) . METHOD_1 ( VAR_1 , VAR_2 , 0 , VAR_3 , null , null , METHOD_4 ( ) ) ; )  return TYPE_2 . METHOD_3 ( ) . METHOD_1 ( VAR_1 , VAR_2 , 0 , VAR_3 , null , null , METHOD_4 ( ) ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME rr ) NAME rr ( INIT = VAR_3 . METHOD_2 ( VAR_1 ) ) INIT = VAR_3 . METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND rr != null ) COND rr != null ( THEN THEN ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME ret ) NAME ret ( INIT = null ) INIT = null ) VAR VAR ( IF IF ( COND ( VAR_1 . error ) == ( VAR_4 ) ) COND ( VAR_1 . error ) == ( VAR_4 ) ( THEN THEN (  ret = new TYPE_4 ( VAR_5 , VAR_6 , VAR_7 ) )  ret = new TYPE_4 ( VAR_5 , VAR_6 , VAR_7 ) (  TYPE_5 . METHOD_3 ( VAR_8 , ret ) )  TYPE_5 . METHOD_3 ( VAR_8 , ret ) ) THEN THEN ) IF IF (  VAR_3 . METHOD_4 ( rr , VAR_1 , ret ) )  VAR_3 . METHOD_4 ( rr , VAR_1 , ret ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( VAR_2 , new TYPE_2 ( STRING_1 ) , VAR_3 , new TYPE_2 ( STRING_2 ) , VAR_4 , STRING_3 ) { protected void METHOD_2 ( ) { } } ) INIT = new TYPE_1 ( VAR_2 , new TYPE_2 ( STRING_1 ) , VAR_3 , new TYPE_2 ( STRING_2 ) , VAR_4 , STRING_3 ) { protected void METHOD_2 ( ) { } } ) VAR VAR ( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_2 ) NAME METHOD_2 ( BLOCK BLOCK ) BLOCK BLOCK ) METHOD METHOD (  VAR_1 . METHOD_3 ( VAR_5 , new TYPE_2 ( STRING_4 ) ) )  VAR_1 . METHOD_3 ( VAR_5 , new TYPE_2 ( STRING_4 ) ) (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( VAR_2 . METHOD_1 ( ) ) != null ) ? VAR_2 . METHOD_1 ( ) : 1 ) INIT = ( ( VAR_2 . METHOD_1 ( ) ) != null ) ? VAR_2 . METHOD_1 ( ) : 1 ) VAR VAR ( IF IF ( COND ( VAR_1 == ( - 1 ) ) && ( ( VAR_3 ) != ( VAR_4 ) ) ) COND ( VAR_1 == ( - 1 ) ) && ( ( VAR_3 ) != ( VAR_4 ) ) ( THEN THEN (  VAR_1 = METHOD_2 ( ) )  VAR_1 = METHOD_2 ( ) ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = INT_1 ) INIT = INT_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_1 . METHOD_2 ( 10 ) ) INIT = TYPE_1 . METHOD_2 ( 10 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_1 . METHOD_2 ( 100 ) . METHOD_3 ( ) ) INIT = TYPE_1 . METHOD_2 ( 100 ) . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_5 ) NAME VAR_5 ( INIT = METHOD_4 ( VAR_1 , VAR_2 ) ) INIT = METHOD_4 ( VAR_1 , VAR_2 ) ) VAR VAR (  VAR_5 . METHOD_5 ( true ) )  VAR_5 . METHOD_5 ( true ) ( TRY TRY ( BLOCK BLOCK (  VAR_5 . METHOD_6 ( VAR_3 , VAR_4 ) )  VAR_5 . METHOD_6 ( VAR_3 , VAR_4 ) (  fail ( STRING_2 ) )  fail ( STRING_2 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_6 ) NAME VAR_6 ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ( BLOCK BLOCK (  fail ( ( e + STRING_3 ) ) )  fail ( ( e + STRING_3 ) ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME println ) NAME println ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME format ) NAME format ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME args ) NAME args ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) != ( VAR_2 ) ) COND ( VAR_1 ) != ( VAR_2 ) ( THEN THEN ( IF IF ( COND ! ( format . METHOD_1 ( STRING_1 ) ) ) COND ! ( format . METHOD_1 ( STRING_1 ) ) ( THEN THEN (  format += STRING_1 )  format += STRING_1 ) THEN THEN ) IF IF (  VAR_3 . METHOD_2 ( format , args ) )  VAR_3 . METHOD_2 ( format , args ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<?superTYPE_2> ) TYPE TYPE_1<?superTYPE_2> ( NAME c ) NAME c ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND c == null ) COND c == null ( THEN THEN (  throw new java.lang.NullPointerException ( ) ; )  throw new java.lang.NullPointerException ( ) ; ) THEN THEN ) IF IF ( IF IF ( COND c == ( this ) ) COND c == ( this ) ( THEN THEN (  throw new java.lang.IllegalArgumentException ( ) ; )  throw new java.lang.IllegalArgumentException ( ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE int ) TYPE int ( NAME n ) NAME n ( INIT = 0 ) INIT = 0 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME e ) NAME e ) VAR VAR ( WHILE WHILE ( COND ( n < VAR_1 ) && ( ( e = METHOD_2 ( ) ) != null ) ) COND ( n < VAR_1 ) && ( ( e = METHOD_2 ( ) ) != null ) ( BLOCK BLOCK (  c . METHOD_3 ( e ) )  c . METHOD_3 ( e ) (  ++ n )  ++ n ) BLOCK BLOCK ) WHILE WHILE (  return n ; )  return n ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_5 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_1 ) ) )  VAR_5 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_1 ) ) (  VAR_5 . METHOD_4 ( STRING_1 ) )  VAR_5 . METHOD_4 ( STRING_1 ) (  assertEquals ( ( STRING_2 + VAR_1 ) , VAR_2 , VAR_5 . format ( VAR_4 ) ) )  assertEquals ( ( STRING_2 + VAR_1 ) , VAR_2 , VAR_5 . format ( VAR_4 ) ) (  VAR_5 . METHOD_4 ( STRING_3 ) )  VAR_5 . METHOD_4 ( STRING_3 ) (  assertEquals ( ( STRING_4 + VAR_1 ) , VAR_3 , VAR_5 . format ( VAR_4 ) ) )  assertEquals ( ( STRING_4 + VAR_1 ) , VAR_3 , VAR_5 . format ( VAR_4 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.Class<?> ) TYPE java.lang.Class<?> ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE TYPE_3<java.lang.String> ) TYPE TYPE_3<java.lang.String> ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_6 ) NAME VAR_6 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_7 ) NAME VAR_7 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_8 ) NAME VAR_8 ( IN VAR_9 ) IN VAR_9 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_10 ) NAME VAR_10 ( INIT = VAR_8 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 ) ) INIT = VAR_8 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 ) ) VAR VAR ( IF IF ( COND VAR_10 != null ) COND VAR_10 != null ( THEN THEN (  return VAR_10 ; )  return VAR_10 ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND METHOD_2 ( ) ) COND METHOD_2 ( ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_1 ) NAME VAR_1 ( INIT = this . key . METHOD_3 ( ) ) INIT = this . key . METHOD_3 ( ) ) VAR VAR (  this . VAR_2 . METHOD_4 ( new TYPE_1 ( VAR_1 , this . VAR_2 . size ( ) , name , result ) ) )  this . VAR_2 . METHOD_4 ( new TYPE_1 ( VAR_1 , this . VAR_2 . size ( ) , name , result ) ) (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME context ) NAME context ) VAR VAR ( VAR VAR ( TYPE android.content.Intent ) TYPE android.content.Intent ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME action ) NAME action ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND action . equals ( VAR_2 ) ) COND action . equals ( VAR_2 ) ( THEN THEN (  METHOD_3 ( VAR_3 , 1 ) )  METHOD_3 ( VAR_3 , 1 ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND action . equals ( VAR_4 ) ) COND action . equals ( VAR_4 ) ( THEN THEN (  METHOD_3 ( VAR_3 , 0 ) )  METHOD_3 ( VAR_3 , 0 ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND action . equals ( VAR_5 ) ) COND action . equals ( VAR_5 ) ( THEN THEN (  METHOD_4 ( ) )  METHOD_4 ( ) ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( VAR_1 , VAR_2 ) )  METHOD_2 ( VAR_1 , VAR_2 ) (  METHOD_3 ( ) )  METHOD_3 ( ) (  METHOD_4 ( VAR_3 , VAR_4 , STRING_1 ) )  METHOD_4 ( VAR_3 , VAR_4 , STRING_1 ) (  METHOD_5 ( ) )  METHOD_5 ( ) (  VAR_5 . METHOD_6 ( VAR_6 , VAR_1 , VAR_7 ) )  VAR_5 . METHOD_6 ( VAR_6 , VAR_1 , VAR_7 ) (  VAR_5 . METHOD_7 ( VAR_6 , VAR_1 , VAR_8 ) )  VAR_5 . METHOD_7 ( VAR_6 , VAR_1 , VAR_8 ) (  VAR_5 . METHOD_8 ( STRING_2 , VAR_1 ) )  VAR_5 . METHOD_8 ( STRING_2 , VAR_1 ) (  VAR_5 . METHOD_9 ( STRING_3 , VAR_7 ) )  VAR_5 . METHOD_9 ( STRING_3 , VAR_7 ) (  VAR_5 . METHOD_10 ( STRING_4 , VAR_7 ) )  VAR_5 . METHOD_10 ( STRING_4 , VAR_7 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . METHOD_2 ( VAR_1 ) ) INIT = VAR_3 . METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN (  return VAR_2 ; )  return VAR_2 ; ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_4 ) == null ) COND ( VAR_4 ) == null ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_4 . METHOD_3 ( VAR_1 ) ) INIT = VAR_4 . METHOD_3 ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_5 != null ) COND VAR_5 != null ( THEN THEN (  return VAR_3 . index ( VAR_5 ) ; )  return VAR_3 . index ( VAR_5 ) ; ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 ) INIT = VAR_3 ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_2 . METHOD_2 ( VAR_2 ) ) INIT = TYPE_2 . METHOD_2 ( VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_5 ) NAME VAR_5 ( INIT = new java.io.File ( VAR_6 , STRING_1 ) ) INIT = new java.io.File ( VAR_6 , STRING_1 ) ) VAR VAR (  TYPE_3 . METHOD_3 ( VAR_5 ) )  TYPE_3 . METHOD_3 ( VAR_5 ) ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_7 ) NAME VAR_7 ( INIT = new java.io.File ( VAR_6 , STRING_2 ) ) INIT = new java.io.File ( VAR_6 , STRING_2 ) ) VAR VAR (  TYPE_3 . METHOD_3 ( VAR_7 ) )  TYPE_3 . METHOD_3 ( VAR_7 ) (  return new TYPE_1 ( ) . METHOD_4 ( VAR_2 . METHOD_5 ( ) , VAR_4 ) . METHOD_6 ( VAR_1 ) . METHOD_7 ( VAR_5 ) . METHOD_8 ( VAR_7 ) ; )  return new TYPE_1 ( ) . METHOD_4 ( VAR_2 . METHOD_5 ( ) , VAR_4 ) . METHOD_6 ( VAR_1 ) . METHOD_7 ( VAR_5 ) . METHOD_8 ( VAR_7 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK (  VAR_1 . METHOD_1 ( this ) )  VAR_1 . METHOD_1 ( this ) ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( packageName , true , true , flags ) ) INIT = METHOD_2 ( packageName , true , true , flags ) ) VAR VAR ( IF IF ( COND VAR_3 != null ) COND VAR_3 != null ( THEN THEN ( TRY TRY ( BLOCK BLOCK (  VAR_3 . METHOD_3 ( packageName , VAR_2 ) )  VAR_3 . METHOD_3 ( packageName , VAR_2 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME e ) NAME e ( BLOCK BLOCK (  android.util.Log . i ( com.android.server.pm.PackageManagerService.TAG , STRING_1 ) )  android.util.Log . i ( com.android.server.pm.PackageManagerService.TAG , STRING_1 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1<TYPE_2> ) RETURN TYPE_1<TYPE_2> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_3 . METHOD_2 ( ) ) INIT = TYPE_3 . METHOD_2 ( ) ) VAR VAR (  VAR_2 . METHOD_3 ( VAR_1 ) )  VAR_2 . METHOD_3 ( VAR_1 ) ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_1 . METHOD_4 ( ) ) IN VAR_1 . METHOD_4 ( ) ( BLOCK BLOCK (  VAR_2 . METHOD_5 ( TYPE_4 . METHOD_1 ( VAR_3 ) ) )  VAR_2 . METHOD_5 ( TYPE_4 . METHOD_1 ( VAR_3 ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1[] ) RETURN TYPE_1[] ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE byte[][] ) TYPE byte[][] ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1[] ) TYPE TYPE_1[] ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 [ VAR_1 . length ] ) INIT = new TYPE_1 [ VAR_1 . length ] ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < ( VAR_1 . length ) ) COND i < ( VAR_1 . length ) ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  VAR_2 [ i ] = new TYPE_2 ( VAR_1 [ i ] ) )  VAR_2 [ i ] = new TYPE_2 ( VAR_1 [ i ] ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK (  return null ; )  return null ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) FOR FOR (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN float ) RETURN float ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME text ) NAME text ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME start ) NAME start ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME flags ) NAME flags ) VAR VAR ( VAR VAR ( TYPE float[] ) TYPE float[] ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_6 ) NAME VAR_6 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME count ) NAME count ( INIT = VAR_2 - start ) INIT = VAR_2 - start ) VAR VAR ( VAR VAR ( TYPE char[] ) TYPE char[] ( NAME VAR_7 ) NAME VAR_7 ( INIT = TYPE_1 . METHOD_2 ( count ) ) INIT = TYPE_1 . METHOD_2 ( count ) ) VAR VAR (  TYPE_2 . METHOD_3 ( text , start , VAR_2 , VAR_7 , 0 ) )  TYPE_2 . METHOD_3 ( text , start , VAR_2 , VAR_7 , 0 ) (  return TYPE_3 . METHOD_1 ( VAR_1 , VAR_7 , 0 , count , VAR_3 , ( VAR_4 - VAR_3 ) , flags , VAR_5 , VAR_6 ) ; )  return TYPE_3 . METHOD_1 ( VAR_1 , VAR_7 , 0 , count , VAR_3 , ( VAR_4 - VAR_3 ) , flags , VAR_5 , VAR_6 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  return new TYPE_1 ( VAR_1 ) ; )  return new TYPE_1 ( VAR_1 ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_2 ( METHOD_2 ( ) , e ) ; )  throw new TYPE_2 ( METHOD_2 ( ) , e ) ; ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_4 ( e ) ; )  throw new TYPE_4 ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( VAR_1 ) )  METHOD_2 ( VAR_1 ) (  METHOD_3 ( VAR_2 ) )  METHOD_3 ( VAR_2 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_2 . METHOD_4 ( VAR_4 , VAR_5 ) ) INIT = TYPE_2 . METHOD_4 ( VAR_4 , VAR_5 ) ) VAR VAR (  VAR_3 . verify ( VAR_5 ) . METHOD_5 ( VAR_6 ) )  VAR_3 . verify ( VAR_5 ) . METHOD_5 ( VAR_6 ) (  VAR_3 . verify ( VAR_4 ) . METHOD_6 ( VAR_6 , VAR_7 , VAR_8 , VAR_9 ) )  VAR_3 . verify ( VAR_4 ) . METHOD_6 ( VAR_6 , VAR_7 , VAR_8 , VAR_9 ) (  TYPE_2 . METHOD_7 ( VAR_5 , VAR_10 , VAR_4 ) )  TYPE_2 . METHOD_7 ( VAR_5 , VAR_10 , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 instanceof TYPE_3 ) COND VAR_1 instanceof TYPE_3 ( THEN THEN (  return METHOD_1 ( ( ( TYPE_3 ) ( VAR_1 ) ) . METHOD_2 ( ) ) ; )  return METHOD_1 ( ( ( TYPE_3 ) ( VAR_1 ) ) . METHOD_2 ( ) ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . get ( VAR_1 ) ) INIT = VAR_3 . get ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN (  return TYPE_4 . METHOD_3 ( VAR_2 ) ; )  return TYPE_4 . METHOD_3 ( VAR_2 ) ; ) THEN THEN ) IF IF (  return METHOD_4 ( VAR_1 ) ; )  return METHOD_4 ( VAR_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( ) )  VAR_1 . METHOD_2 ( ) (  TYPE_1 . METHOD_3 ( id ) )  TYPE_1 . METHOD_3 ( id ) (  TYPE_1 . METHOD_4 ( id , VAR_2 , TYPE_1 . METHOD_5 ( ) . METHOD_6 ( name ) ) )  TYPE_1 . METHOD_4 ( id , VAR_2 , TYPE_1 . METHOD_5 ( ) . METHOD_6 ( name ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Throwable ) TYPE java.lang.Throwable ( NAME e ) NAME e ( BLOCK BLOCK (  throw TYPE_2 . METHOD_7 ( e ) ; )  throw TYPE_2 . METHOD_7 ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ( FINALLY FINALLY (  VAR_1 . METHOD_8 ( ) )  VAR_1 . METHOD_8 ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_1 ( VAR_2 ) ) INIT = TYPE_1 . METHOD_1 ( VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME s ) NAME s ( INIT = new TYPE_2 ( VAR_1 , VAR_3 , VAR_4 ) ) INIT = new TYPE_2 ( VAR_1 , VAR_3 , VAR_4 ) ) VAR VAR (  VAR_1 . METHOD_2 ( VAR_5 ) )  VAR_1 . METHOD_2 ( VAR_5 ) (  s . METHOD_3 ( STRING_1 ) )  s . METHOD_3 ( STRING_1 ) (  s . METHOD_4 ( 0 , 0 ) )  s . METHOD_4 ( 0 , 0 ) (  VAR_1 . METHOD_5 ( ) )  VAR_1 . METHOD_5 ( ) (  METHOD_6 ( ) )  METHOD_6 ( ) (  VAR_1 . METHOD_7 ( ) )  VAR_1 . METHOD_7 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME count ) NAME count ) VAR VAR ( VAR VAR ( TYPE float[] ) TYPE float[] ( NAME d ) NAME d ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( VAR_2 , STRING_1 ) )  TYPE_1 . METHOD_2 ( VAR_2 , STRING_1 ) ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( VAR_4 . METHOD_3 ( ) ) * count ) INIT = ( VAR_4 . METHOD_3 ( ) ) * count ) VAR VAR (  METHOD_4 ( VAR_1 , count , ( ( d . length ) * 4 ) , VAR_3 ) )  METHOD_4 ( VAR_1 , count , ( ( d . length ) * 4 ) , VAR_3 ) (  mRS . METHOD_5 ( METHOD_6 ( ) , VAR_1 , VAR_5 , count , d , VAR_3 ) )  mRS . METHOD_5 ( METHOD_6 ( ) , VAR_1 , VAR_5 , count , d , VAR_3 ) (  TYPE_1 . METHOD_7 ( VAR_2 ) )  TYPE_1 . METHOD_7 ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_1 ) ( super . METHOD_1 ( ) ) ) ) INIT = ( ( TYPE_1 ) ( super . METHOD_1 ( ) ) ) ) VAR VAR ( IF IF ( COND ( VAR_2 ) != null ) COND ( VAR_2 ) != null ( THEN THEN (  VAR_3 = new TYPE_2 < java.lang.Object > ( VAR_2 ) )  VAR_3 = new TYPE_2 < java.lang.Object > ( VAR_2 ) (  VAR_4 = new TYPE_2 < TYPE_3 > ( VAR_5 ) )  VAR_4 = new TYPE_2 < TYPE_3 > ( VAR_5 ) ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_5 ( e.toString ( ) ) ; )  throw new TYPE_5 ( e.toString ( ) ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME source ) NAME source ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  source . METHOD_2 ( VAR_1 ) )  source . METHOD_2 ( VAR_1 ) (  source . METHOD_2 ( VAR_1 ) )  source . METHOD_2 ( VAR_1 ) (  source . METHOD_2 ( VAR_2 ) )  source . METHOD_2 ( VAR_2 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME target ) NAME target ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  target . METHOD_2 ( VAR_1 ) )  target . METHOD_2 ( VAR_1 ) (  target . METHOD_2 ( VAR_2 ) )  target . METHOD_2 ( VAR_2 ) (  target . METHOD_2 ( VAR_2 ) )  target . METHOD_2 ( VAR_2 ) (  METHOD_3 ( source , target ) )  METHOD_3 ( source , target ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ( BLOCK BLOCK (  fail ( ) )  fail ( ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  assertFalse ( STRING_1 , ( 0 == ( VAR_1 . METHOD_2 ( ) ) ) ) )  assertFalse ( STRING_1 , ( 0 == ( VAR_1 . METHOD_2 ( ) ) ) ) (  assertFalse ( STRING_2 , ( 0 > ( VAR_1 . METHOD_2 ( ) ) ) ) )  assertFalse ( STRING_2 , ( 0 > ( VAR_1 . METHOD_2 ( ) ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME e ) NAME e ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME c ) NAME c ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = null ) INIT = null ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ( INIT = 0 ) INIT = 0 ) VAR VAR (  VAR_4 = c . METHOD_2 ( VAR_5 ) )  VAR_4 = c . METHOD_2 ( VAR_5 ) ( IF IF ( COND VAR_6 ) COND VAR_6 ( THEN THEN (  android.util.Log.d ( TYPE_5 . TAG , ( STRING_1 + VAR_3 ) ) )  android.util.Log.d ( TYPE_5 . TAG , ( STRING_1 + VAR_3 ) ) ) THEN THEN ) IF IF (  e . METHOD_3 ( ( VAR_4 == 1 ? true : false ) , ( ( ( VAR_2 . METHOD_4 ( ) ) & ( VAR_7 ) ) != 0 ) ) )  e . METHOD_3 ( ( VAR_4 == 1 ? true : false ) , ( ( ( VAR_2 . METHOD_4 ( ) ) & ( VAR_7 ) ) != 0 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE float ) TYPE float ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE float ) TYPE float ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE float ) TYPE float ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME d ) NAME d ( INIT = VAR_5 . METHOD_2 ( VAR_1 ) ) INIT = VAR_5 . METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND d == null ) COND d == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  VAR_6 = TYPE_1 . METHOD_3 ( VAR_2 , VAR_3 , VAR_4 ) )  VAR_6 = TYPE_1 . METHOD_3 ( VAR_2 , VAR_3 , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN long ) RETURN long ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE long ) TYPE long ( NAME arg1 ) NAME arg1 ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  throw new TYPE_1 ( ) ; )  throw new TYPE_1 ( ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE long ) TYPE long ( NAME res ) NAME res ( INIT = 0 ) INIT = 0 ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_3 ) NAME VAR_3 ( INIT = - arg1 ) INIT = - arg1 ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_4 ) NAME VAR_4 ( INIT = - VAR_1 ) INIT = - VAR_1 ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE long ) TYPE long ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < 1 ) COND i < 1 ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK (  res += ( VAR_3 + VAR_4 ) + i )  res += ( VAR_3 + VAR_4 ) + i ) BLOCK BLOCK ) FOR FOR (  return res ; )  return res ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.util.List<java.lang.String> ) RETURN java.util.List<java.lang.String> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME test ) NAME test ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( java.util.List < TYPE_1 > ) ( TYPE_2 . METHOD_2 ( test , VAR_1 ) ) ) ) INIT = ( ( java.util.List < TYPE_1 > ) ( TYPE_2 . METHOD_2 ( test , VAR_1 ) ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_3 . METHOD_3 ( ) ) INIT = TYPE_3 . METHOD_3 ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK (  VAR_3 . METHOD_4 ( TYPE_2 . METHOD_5 ( VAR_4 ) ) )  VAR_3 . METHOD_4 ( TYPE_2 . METHOD_5 ( VAR_4 ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Class<?> ) TYPE java.lang.Class<?> ( NAME c ) NAME c ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ( INIT = Main . METHOD_2 ( c ) ) INIT = Main . METHOD_2 ( c ) ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = Main . METHOD_3 ( c ) ) INIT = Main . METHOD_3 ( c ) ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ( INIT = Main . METHOD_4 ( c ) ) INIT = Main . METHOD_4 ( c ) ) VAR VAR (  java.lang.System.out.println ( ( ( ( ( ( ( ( c . getName ( ) ) + STRING_1 ) + VAR_1 ) + STRING_2 ) + VAR_2 ) + STRING_3 ) + VAR_3 ) ) )  java.lang.System.out.println ( ( ( ( ( ( ( ( c . getName ( ) ) + STRING_1 ) + VAR_1 ) + STRING_2 ) + VAR_2 ) + STRING_3 ) + VAR_3 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  VAR_1 )  VAR_1 ( BLOCK BLOCK (  ( VAR_2 ) -- )  ( VAR_2 ) -- ( IF IF ( COND ( VAR_2 ) == ( - 1 ) ) COND ( VAR_2 ) == ( - 1 ) ( THEN THEN ( IF IF ( COND ( fd ) != null ) COND ( fd ) != null ( THEN THEN ( TRY TRY ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ( FINALLY FINALLY (  fd = null )  fd = null ) FINALLY FINALLY ) TRY TRY ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN long ) RETURN long ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ! ( TYPE_1 . METHOD_2 ( ) ) ) COND ! ( TYPE_1 . METHOD_2 ( ) ) ( THEN THEN (  android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) )  android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) (  return - 1 ; )  return - 1 ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME service ) NAME service ( INIT = METHOD_3 ( ) ) INIT = METHOD_3 ( ) ) VAR VAR ( IF IF ( COND service == null ) COND service == null ( THEN THEN (  return - 1 ; )  return - 1 ; ) THEN THEN ) IF IF (  return service . METHOD_1 ( ) ; )  return service . METHOD_1 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME obj ) NAME obj ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND TYPE_2 . METHOD_2 ( ) ) COND TYPE_2 . METHOD_2 ( ) ( THEN THEN ( IF IF ( COND obj != null ) COND obj != null ( THEN THEN (  VAR_1 . METHOD_1 ( obj . METHOD_3 ( ) ) )  VAR_1 . METHOD_1 ( obj . METHOD_3 ( ) ) ) THEN THEN ( ELSE ELSE (  VAR_1 . METHOD_1 ( null ) )  VAR_1 . METHOD_1 ( null ) ) ELSE ELSE ) IF IF (  return ; )  return ; ) THEN THEN ) IF IF ( IF IF ( COND obj != null ) COND obj != null ( THEN THEN (  METHOD_4 ( obj . METHOD_5 ( null ) ) )  METHOD_4 ( obj . METHOD_5 ( null ) ) ) THEN THEN ( ELSE ELSE (  METHOD_4 ( 0 ) )  METHOD_4 ( 0 ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE com.android.jack.ir.ast.JMethod ) TYPE com.android.jack.ir.ast.JMethod ( NAME method ) NAME method ( INIT = VAR_1 . METHOD_1 ( ) ) INIT = VAR_1 . METHOD_1 ( ) ) VAR VAR (  VAR_2 . METHOD_2 ( VAR_3 ) . METHOD_3 ( VAR_1 . METHOD_4 ( true ) . size ( ) , ( ( ( ( VAR_4 . getName ( method ) ) + STRING_1 ) + ( VAR_4 . getName ( method . METHOD_5 ( ) ) ) ) + STRING_2 ) ) )  VAR_2 . METHOD_2 ( VAR_3 ) . METHOD_3 ( VAR_1 . METHOD_4 ( true ) . size ( ) , ( ( ( ( VAR_4 . getName ( method ) ) + STRING_1 ) + ( VAR_4 . getName ( method . METHOD_5 ( ) ) ) ) + STRING_2 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE byte ) TYPE byte ( NAME x ) NAME x ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  throw new TYPE_2 ( ) ; )  throw new TYPE_2 ( ) ; ) THEN THEN ) IF IF ( IF IF ( COND ! ( VAR_2 ) ) COND ! ( VAR_2 ) ( THEN THEN (  throw new TYPE_3 ( STRING_1 ) ; )  throw new TYPE_3 ( STRING_1 ) ; ) THEN THEN ) IF IF (  METHOD_1 ( METHOD_2 ( METHOD_3 ( ) ) , x ) )  METHOD_1 ( METHOD_2 ( METHOD_3 ( ) ) , x ) (  return this ; )  return this ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME from ) NAME from ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = 6 ) INIT = 6 ) VAR VAR ( IF IF ( COND from != null ) COND from != null ( THEN THEN (  METHOD_2 ( STRING_1 , TYPE_3 . METHOD_3 ( from . METHOD_4 ( ) , VAR_1 ) ) )  METHOD_2 ( STRING_1 , TYPE_3 . METHOD_3 ( from . METHOD_4 ( ) , VAR_1 ) ) (  this . VAR_2 = new TYPE_1 [ ] { from } )  this . VAR_2 = new TYPE_1 [ ] { from } ) THEN THEN ( ELSE ELSE (  this . VAR_2 = null )  this . VAR_2 = null ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = 6 ) INIT = 6 ) VAR VAR (  METHOD_3 ( VAR_1 , false , false ) )  METHOD_3 ( VAR_1 , false , false ) (  assertNotNull ( VAR_2 ) )  assertNotNull ( VAR_2 ) (  VAR_2 . METHOD_4 ( VAR_3 , TYPE_1 . METHOD_5 ( VAR_4 ) , VAR_5 , TYPE_1 . METHOD_6 ( VAR_6 ) ) )  VAR_2 . METHOD_4 ( VAR_3 , TYPE_1 . METHOD_5 ( VAR_4 ) , VAR_5 , TYPE_1 . METHOD_6 ( VAR_6 ) ) (  org.mockito.Mockito.verify ( VAR_7 ) . METHOD_7 ( org.mockito.Matchers.eq ( VAR_8 ) , org.mockito.Matchers.eq ( VAR_1 ) , org.mockito.Matchers . METHOD_8 ( VAR_9 class ) , org.mockito.Matchers.eq ( VAR_4 ) , org.mockito.Matchers.eq ( VAR_10 ) ) )  org.mockito.Mockito.verify ( VAR_7 ) . METHOD_7 ( org.mockito.Matchers.eq ( VAR_8 ) , org.mockito.Matchers.eq ( VAR_1 ) , org.mockito.Matchers . METHOD_8 ( VAR_9 class ) , org.mockito.Matchers.eq ( VAR_4 ) , org.mockito.Matchers.eq ( VAR_10 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  assertTrue ( STRING_1 , TYPE_1 . METHOD_2 ( CHAR_1 ) ) )  assertTrue ( STRING_1 , TYPE_1 . METHOD_2 ( CHAR_1 ) ) (  assertTrue ( STRING_2 , TYPE_1 . METHOD_2 ( CHAR_2 ) ) )  assertTrue ( STRING_2 , TYPE_1 . METHOD_2 ( CHAR_2 ) ) (  assertTrue ( STRING_3 , ( ! ( TYPE_1 . METHOD_2 ( CHAR_3 ) ) ) ) )  assertTrue ( STRING_3 , ( ! ( TYPE_1 . METHOD_2 ( CHAR_3 ) ) ) ) (  assertTrue ( STRING_4 , ( ! ( TYPE_1 . METHOD_2 ( CHAR_4 ) ) ) ) )  assertTrue ( STRING_4 , ( ! ( TYPE_1 . METHOD_2 ( CHAR_4 ) ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( 2 ) ) INIT = new TYPE_1 ( 2 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 ( VAR_1 , false , INT_1 ) ) INIT = new TYPE_2 ( VAR_1 , false , INT_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_3 ( VAR_2 ) ) INIT = new TYPE_3 ( VAR_2 ) ) VAR VAR (  TYPE_4 . METHOD_2 ( VAR_3 ) )  TYPE_4 . METHOD_2 ( VAR_3 ) (  VAR_3 . start ( ) )  VAR_3 . start ( ) (  VAR_2 . METHOD_3 ( 0 ) )  VAR_2 . METHOD_3 ( 0 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME args ) NAME args ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1[] ) TYPE TYPE_1[] ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 [ VAR_2 ] ) INIT = new TYPE_1 [ VAR_2 ] ) VAR VAR (  Main . METHOD_2 ( ) )  Main . METHOD_2 ( ) ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME t ) NAME t ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND t < ( VAR_1 . length ) ) COND t < ( VAR_1 . length ) ( UPDATE UPDATE (  t ++ )  t ++ ) UPDATE UPDATE ( BLOCK BLOCK (  VAR_1 [ t ] = new TYPE_1 ( new Main ( ) ) )  VAR_1 [ t ] = new TYPE_1 ( new Main ( ) ) (  VAR_1 [ t ] . start ( ) )  VAR_1 [ t ] . start ( ) ) BLOCK BLOCK ) FOR FOR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME t ) NAME t ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  t . METHOD_3 ( ) )  t . METHOD_3 ( ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  java.lang.System.out.println ( STRING_1 ) )  java.lang.System.out.println ( STRING_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME data ) NAME data ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_2 ( VAR_2 ) ) INIT = METHOD_2 ( VAR_2 ) ) VAR VAR (  TYPE_1 . log ( VAR_4 , STRING_1 , VAR_5 , VAR_3 ) )  TYPE_1 . log ( VAR_4 , STRING_1 , VAR_5 , VAR_3 ) ( IF IF ( COND TYPE_2 . equals ( VAR_1 ) ) COND TYPE_2 . equals ( VAR_1 ) ( THEN THEN ( IF IF ( COND ( VAR_3 . equals ( STRING_2 ) ) || ( VAR_3 . equals ( STRING_3 ) ) ) COND ( VAR_3 . equals ( STRING_2 ) ) || ( VAR_3 . equals ( STRING_3 ) ) ( THEN THEN (  VAR_1 = VAR_6 )  VAR_1 = VAR_6 ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  METHOD_3 ( VAR_1 , VAR_3 ) )  METHOD_3 ( VAR_1 , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME equals ) NAME equals ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME obj ) NAME obj ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( obj instanceof TYPE_1 ) ) COND ! ( obj instanceof TYPE_1 ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_1 ) ( obj ) ) ) INIT = ( ( TYPE_1 ) ( obj ) ) ) VAR VAR (  return ( TYPE_2 . METHOD_1 ( VAR_2 , VAR_3 ) ) && ( TYPE_2 . METHOD_1 ( VAR_4 , VAR_5 ) ) ; )  return ( TYPE_2 . METHOD_1 ( VAR_2 , VAR_3 ) ) && ( TYPE_2 . METHOD_1 ( VAR_4 , VAR_5 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME args ) NAME args ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME t ) NAME t ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  t . METHOD_2 ( 0 , 1 , false ) )  t . METHOD_2 ( 0 , 1 , false ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME in ) NAME in ( INIT = t . METHOD_3 ( args . in ) ) INIT = t . METHOD_3 ( args . in ) ) VAR VAR (  args.out = t . METHOD_3 ( TYPE_4 . METHOD_4 ( in . METHOD_5 ( ) ) , TYPE_4 . METHOD_4 ( in . METHOD_6 ( ) ) , TYPE_4 . METHOD_4 ( in . METHOD_7 ( ) ) ) )  args.out = t . METHOD_3 ( TYPE_4 . METHOD_4 ( in . METHOD_5 ( ) ) , TYPE_4 . METHOD_4 ( in . METHOD_6 ( ) ) , TYPE_4 . METHOD_4 ( in . METHOD_7 ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME x ) NAME x ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME y ) NAME y ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_2 ( ) ) INIT = VAR_2 . METHOD_2 ( ) ) VAR VAR ( WHILE WHILE ( COND VAR_1 . METHOD_3 ( ) ) COND VAR_1 . METHOD_3 ( ) ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME c ) NAME c ( INIT = VAR_1 . METHOD_4 ( ) ) INIT = VAR_1 . METHOD_4 ( ) ) VAR VAR (  METHOD_5 ( c , VAR_3 ) )  METHOD_5 ( c , VAR_3 ) ( IF IF ( COND VAR_3 . METHOD_6 ( x , y ) ) COND VAR_3 . METHOD_6 ( x , y ) ( THEN THEN (  return METHOD_7 ( c ) ; )  return METHOD_7 ( c ) ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) WHILE WHILE (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  METHOD_3 ( ) )  METHOD_3 ( ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME options ) NAME options ( INIT = TYPE_2 . METHOD_4 ( VAR_1 ) ) INIT = TYPE_2 . METHOD_4 ( VAR_1 ) ) VAR VAR (  options . METHOD_5 ( METHOD_6 ( ) ) )  options . METHOD_5 ( METHOD_6 ( ) ) (  TYPE_3 . METHOD_7 ( options , VAR_2 , TYPE_2 . METHOD_8 ( TYPE_2 . METHOD_9 ( ) ) , VAR_3 ) )  TYPE_3 . METHOD_7 ( options , VAR_2 , TYPE_2 . METHOD_8 ( TYPE_2 . METHOD_9 ( ) ) , VAR_3 ) (  TYPE_4 . METHOD_10 ( INT_1 ) )  TYPE_4 . METHOD_10 ( INT_1 ) (  TYPE_5 . METHOD_11 ( new TYPE_6 ( new TYPE_7 ( VAR_4 . out ) ) ) )  TYPE_5 . METHOD_11 ( new TYPE_6 ( new TYPE_7 ( VAR_4 . out ) ) ) (  TYPE_5 . METHOD_12 ( new TYPE_6 ( new TYPE_7 ( VAR_5 ) ) ) )  TYPE_5 . METHOD_12 ( new TYPE_6 ( new TYPE_7 ( VAR_5 ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_4 ) IN VAR_4 ( BLOCK BLOCK ( IF IF ( COND ( ( VAR_3 . METHOD_2 ( ) ) == VAR_1 ) && ( ( VAR_3 . METHOD_3 ( ) ) == VAR_2 ) ) COND ( ( VAR_3 . METHOD_2 ( ) ) == VAR_1 ) && ( ( VAR_3 . METHOD_3 ( ) ) == VAR_2 ) ( THEN THEN (  return VAR_3 ; )  return VAR_3 ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME m ) NAME m ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME v ) NAME v ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME value ) NAME value ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = false ) INIT = false ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( v == null ) ? ( ( long ) ( m . METHOD_2 ( ) ) ) : ( ( long ) ( m . METHOD_2 ( v ) ) ) ) INIT = ( v == null ) ? ( ( long ) ( m . METHOD_2 ( ) ) ) : ( ( long ) ( m . METHOD_2 ( v ) ) ) ) VAR VAR (  TYPE_3 . assertTrue ( ( VAR_3 == value ) ) )  TYPE_3 . assertTrue ( ( VAR_3 == value ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_2 = true )  VAR_2 = true ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  TYPE_3 . METHOD_3 ( VAR_2 , VAR_1 ) )  TYPE_3 . METHOD_3 ( VAR_2 , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( VAR_2 ) == null ) || ( ! ( VAR_3 . METHOD_2 ( ) ) ) ) COND ( ( VAR_2 ) == null ) || ( ! ( VAR_3 . METHOD_2 ( ) ) ) ( THEN THEN (  METHOD_3 ( ) )  METHOD_3 ( ) ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_3 . METHOD_1 ( VAR_1 ) ) INIT = VAR_3 . METHOD_1 ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_4 == null ) COND VAR_4 == null ( THEN THEN (  throw new TYPE_2 ( STRING_1 , VAR_5 ) ; )  throw new TYPE_2 ( STRING_1 , VAR_5 ) ; ) THEN THEN ) IF IF (  VAR_2 = new TYPE_1 ( VAR_4 ) )  VAR_2 = new TYPE_1 ( VAR_4 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_2 ( STRING_1 , e , VAR_6 ) ; )  throw new TYPE_2 ( STRING_1 , e , VAR_6 ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) THEN THEN ) IF IF (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.ArrayList<TYPE_1> ) RETURN java.util.ArrayList<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME VAR_1 ) NAME VAR_1 ( INIT = null ) INIT = null ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_4 . METHOD_2 ( ) ) INIT = TYPE_4 . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN (  VAR_1 = VAR_2 . METHOD_3 ( METHOD_4 ( ) , TYPE_5 . METHOD_5 ( ) ) )  VAR_1 = VAR_2 . METHOD_3 ( METHOD_4 ( ) , TYPE_5 . METHOD_5 ( ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME ex ) NAME ex ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  return TYPE_4 . METHOD_6 ( VAR_1 ) ; )  return TYPE_4 . METHOD_6 ( VAR_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME m ) NAME m ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME v ) NAME v ) VAR VAR ( VAR VAR ( TYPE double ) TYPE double ( NAME value ) NAME value ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = false ) INIT = false ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE double ) TYPE double ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( v == null ) ? ( ( double ) ( m . METHOD_2 ( ) ) ) : ( ( double ) ( m . METHOD_2 ( v ) ) ) ) INIT = ( v == null ) ? ( ( double ) ( m . METHOD_2 ( ) ) ) : ( ( double ) ( m . METHOD_2 ( v ) ) ) ) VAR VAR (  TYPE_3 . assertTrue ( ( VAR_3 == value ) ) )  TYPE_3 . assertTrue ( ( VAR_3 == value ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_2 = true )  VAR_2 = true ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  TYPE_3 . assertEquals ( VAR_2 , VAR_1 ) )  TYPE_3 . assertEquals ( VAR_2 , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME data ) NAME data ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( VAR_1 ) ) INIT = new TYPE_1 ( VAR_1 ) ) VAR VAR (  VAR_2 . METHOD_2 ( data ) )  VAR_2 . METHOD_2 ( data ) (  VAR_2 . METHOD_3 ( ) )  VAR_2 . METHOD_3 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK (  android.util.Log.e ( VAR_3 . TAG , ( STRING_1 + VAR_1 ) ) )  android.util.Log.e ( VAR_3 . TAG , ( STRING_1 + VAR_1 ) ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME x ) NAME x ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME y ) NAME y ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  x -= METHOD_2 ( ) )  x -= METHOD_2 ( ) (  y -= METHOD_3 ( ) )  y -= METHOD_3 ( ) (  x += METHOD_4 ( ) )  x += METHOD_4 ( ) (  y += METHOD_5 ( ) )  y += METHOD_5 ( ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_6 ( ) ) INIT = METHOD_6 ( ) ) VAR VAR ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  return - 1 ; )  return - 1 ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE int ) TYPE int ( NAME line ) NAME line ( INIT = VAR_1 . METHOD_7 ( y ) ) INIT = VAR_1 . METHOD_7 ( y ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_8 ( line , x ) ) INIT = VAR_1 . METHOD_8 ( line , x ) ) VAR VAR (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  VAR_1 . METHOD_1 ( ) )  VAR_1 . METHOD_1 ( ) (  VAR_2 . METHOD_2 ( ( STRING_1 + ( STRING_2 + STRING_3 ) ) ) )  VAR_2 . METHOD_2 ( ( STRING_1 + ( STRING_2 + STRING_3 ) ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME e ) NAME e ( BLOCK BLOCK (  METHOD_3 ( e.getMessage ( ) ) )  METHOD_3 ( e.getMessage ( ) ) ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK (  METHOD_3 ( e.getMessage ( ) ) )  METHOD_3 ( e.getMessage ( ) ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( STRING_1 ) ) INIT = new TYPE_1 ( STRING_1 ) ) VAR VAR (  METHOD_2 ( VAR_1 . getName ( ) ) )  METHOD_2 ( VAR_1 . getName ( ) ) (  VAR_1 = new TYPE_1 ( STRING_2 ) )  VAR_1 = new TYPE_1 ( STRING_2 ) (  METHOD_2 ( VAR_1 . getName ( ) ) )  METHOD_2 ( VAR_1 . getName ( ) ) ( TRY TRY ( BLOCK BLOCK (  new TYPE_1 ( STRING_3 ) )  new TYPE_1 ( STRING_3 ) (  fail ( ) )  fail ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.IllegalArgumentException ) TYPE java.lang.IllegalArgumentException ( NAME expected ) NAME expected ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ( INIT = VAR_1 . getName ( ) ) INIT = VAR_1 . getName ( ) ) VAR VAR ( IF IF ( COND name == null ) COND name == null ( THEN THEN (  throw new java.lang.NullPointerException ( ) ; )  throw new java.lang.NullPointerException ( ) ; ) THEN THEN ) IF IF (  METHOD_2 ( ) )  METHOD_2 ( ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_3 ( ) ) INIT = METHOD_3 ( ) ) VAR VAR ( IF IF ( COND VAR_2 . METHOD_4 ( VAR_1 , this ) ) COND VAR_2 . METHOD_4 ( VAR_1 , this ) ( THEN THEN (  METHOD_5 ( VAR_1 , name , ( name + STRING_1 ) ) )  METHOD_5 ( VAR_1 , name , ( name + STRING_1 ) ) (  return true ; )  return true ; ) THEN THEN ( ELSE ELSE (  return false ; )  return false ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME args ) NAME args ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME options ) NAME options ( INIT = TYPE_4 . METHOD_2 ( args ) ) INIT = TYPE_4 . METHOD_2 ( args ) ) VAR VAR (  options . METHOD_3 ( VAR_1 ) )  options . METHOD_3 ( VAR_1 ) (  options . METHOD_4 ( VAR_2 ) )  options . METHOD_4 ( VAR_2 ) (  return new TYPE_5 ( options ) ; )  return new TYPE_5 ( options ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_2 ( e.getMessage ( ) , e ) ; )  throw new TYPE_2 ( e.getMessage ( ) , e ) ; ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE java.io.IOException|TYPE_7 ) TYPE java.io.IOException|TYPE_7 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_2 ( e.getMessage ( ) , e ) ; )  throw new TYPE_2 ( e.getMessage ( ) , e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE android.bluetooth.BluetoothDevice ) TYPE android.bluetooth.BluetoothDevice ( NAME device ) NAME device ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( TYPE_2 . METHOD_2 ( ) ) ) COND ! ( TYPE_2 . METHOD_2 ( ) ) ( THEN THEN (  android.util.Log.w ( TYPE_3 . TAG , STRING_1 ) )  android.util.Log.w ( TYPE_3 . TAG , STRING_1 ) (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME service ) NAME service ( INIT = METHOD_3 ( ) ) INIT = METHOD_3 ( ) ) VAR VAR ( IF IF ( COND service == null ) COND service == null ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  return service . METHOD_1 ( device , VAR_1 ) ; )  return service . METHOD_1 ( device , VAR_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME config ) NAME config ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME callback ) NAME callback ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_4 ) COND VAR_4 ( THEN THEN (  android.util.Log.v ( VAR_5 . TAG , STRING_1 ) )  android.util.Log.v ( VAR_5 . TAG , STRING_1 ) ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME service ) NAME service ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( IF IF ( COND service == null ) COND service == null ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  return service . METHOD_1 ( config , VAR_1 , VAR_2 , VAR_3 , callback ) ; )  return service . METHOD_1 ( config , VAR_1 , VAR_2 , VAR_3 , callback ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME x ) NAME x ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( IF IF ( COND x . METHOD_2 ( ) ) COND x . METHOD_2 ( ) ( THEN THEN (  METHOD_3 ( ) )  METHOD_3 ( ) ) THEN THEN ( ELSE ELSE ( VAR VAR ( TYPE java.util.List<TYPE_3> ) TYPE java.util.List<TYPE_3> ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_4 ( VAR_3 ) ) INIT = METHOD_4 ( VAR_3 ) ) VAR VAR (  VAR_4 . METHOD_5 ( ) . METHOD_6 ( VAR_2 ) )  VAR_4 . METHOD_5 ( ) . METHOD_6 ( VAR_2 ) ( IF IF ( COND ( ( VAR_5 ) & ( VAR_6 ) ) != 0 ) COND ( ( VAR_5 ) & ( VAR_6 ) ) != 0 ( THEN THEN (  METHOD_7 ( ) )  METHOD_7 ( ) ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF (  METHOD_8 ( ) )  METHOD_8 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Throwable ) TYPE java.lang.Throwable ( NAME e ) NAME e ( BLOCK BLOCK (  throw METHOD_9 ( x , e ) ; )  throw METHOD_9 ( x , e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME x ) NAME x ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME y ) NAME y ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 . METHOD_2 ( VAR_1 ) ) INIT = VAR_4 . METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_3 == null ) COND VAR_3 == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  VAR_3 . METHOD_3 ( ) . METHOD_4 ( x , y , VAR_2 ) )  VAR_3 . METHOD_3 ( ) . METHOD_4 ( x , y , VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  assertFalse ( VAR_1 . METHOD_2 ( VAR_2 ) ) )  assertFalse ( VAR_1 . METHOD_2 ( VAR_2 ) ) (  VAR_1 . METHOD_3 ( VAR_3 ) )  VAR_1 . METHOD_3 ( VAR_3 ) (  assertFalse ( VAR_1 . METHOD_2 ( VAR_2 ) ) )  assertFalse ( VAR_1 . METHOD_2 ( VAR_2 ) ) (  VAR_1 . METHOD_4 ( VAR_2 , VAR_4 ) )  VAR_1 . METHOD_4 ( VAR_2 , VAR_4 ) (  assertTrue ( TYPE_1 . equals ( VAR_4 , VAR_1 . get ( VAR_2 ) ) ) )  assertTrue ( TYPE_1 . equals ( VAR_4 , VAR_1 . get ( VAR_2 ) ) ) (  assertTrue ( VAR_1 . METHOD_2 ( VAR_2 ) ) )  assertTrue ( VAR_1 . METHOD_2 ( VAR_2 ) ) (  METHOD_5 ( VAR_1 . get ( VAR_2 ) ) )  METHOD_5 ( VAR_1 . get ( VAR_2 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME rr ) NAME rr ( INIT = VAR_3 . METHOD_2 ( VAR_1 ) ) INIT = VAR_3 . METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND rr != null ) COND rr != null ( THEN THEN ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME ret ) NAME ret ( INIT = null ) INIT = null ) VAR VAR ( IF IF ( COND ( VAR_1 . error ) == ( VAR_4 ) ) COND ( VAR_1 . error ) == ( VAR_4 ) ( THEN THEN (  ret = TYPE_5 . METHOD_3 ( VAR_2 ) )  ret = TYPE_5 . METHOD_3 ( VAR_2 ) (  TYPE_6 . METHOD_4 ( VAR_5 , ret ) )  TYPE_6 . METHOD_4 ( VAR_5 , ret ) ) THEN THEN ) IF IF (  VAR_3 . METHOD_5 ( rr , VAR_1 , ret ) )  VAR_3 . METHOD_5 ( rr , VAR_1 , ret ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_3 ( ) ) INIT = new TYPE_3 ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  TYPE_4 . METHOD_2 ( options , VAR_1 ) )  TYPE_4 . METHOD_2 ( options , VAR_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_5.sched ) TYPE TYPE_5.sched ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_2 ( e.getMessage ( ) , e ) ; )  throw new TYPE_2 ( e.getMessage ( ) , e ) ; ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_2 ( e.getMessage ( ) , e ) ; )  throw new TYPE_2 ( e.getMessage ( ) , e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  return new TYPE_7 ( options ) ; )  return new TYPE_7 ( options ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME context ) NAME context ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME method ) NAME method ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME call ) NAME call ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 ) INIT = VAR_3 ) VAR VAR ( IF IF ( COND ( VAR_2 . equals ( STRING_1 ) ) && ( ( context . METHOD_2 ( ) . METHOD_3 ( ) ) >= 8 ) ) COND ( VAR_2 . equals ( STRING_1 ) ) && ( ( context . METHOD_2 ( ) . METHOD_3 ( ) ) >= 8 ) ( THEN THEN ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( INIT = java.lang.String.format ( ( STRING_2 + STRING_3 ) , call . name ) ) INIT = java.lang.String.format ( ( STRING_2 + STRING_3 ) , call . name ) ) VAR VAR (  context . METHOD_4 ( VAR_5 , method , call , context . METHOD_5 ( call ) , VAR_4 , null ) )  context . METHOD_4 ( VAR_5 , method , call , context . METHOD_5 ( call ) , VAR_4 , null ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( METHOD_2 ( ) ) == false ) COND ( METHOD_2 ( ) ) == false ( THEN THEN (  android.util.Log.e ( android.bluetooth.BluetoothDevice . TAG , STRING_1 ) )  android.util.Log.e ( android.bluetooth.BluetoothDevice . TAG , STRING_1 ) (  throw new java.io.IOException ( ) ; )  throw new java.io.IOException ( ) ; ) THEN THEN ) IF IF (  return new TYPE_1 ( VAR_2 , ( - 1 ) , false , false , this , ( - 1 ) , new TYPE_3 ( VAR_1 ) ) ; )  return new TYPE_1 ( VAR_2 , ( - 1 ) , false , false , this , ( - 1 ) , new TYPE_3 ( VAR_1 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR (  VAR_1 . METHOD_3 ( ) )  VAR_1 . METHOD_3 ( ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = null ) INIT = null ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_3 = new TYPE_1 ( VAR_2 ) )  VAR_3 = new TYPE_1 ( VAR_2 ) (  assertTrue ( VAR_3 . METHOD_4 ( ) ) )  assertTrue ( VAR_3 . METHOD_4 ( ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK (  fail ( ( STRING_1 + e ) ) )  fail ( ( STRING_1 + e ) ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ( IF IF ( COND VAR_3 != null ) COND VAR_3 != null ( THEN THEN (  VAR_3 . METHOD_3 ( ) )  VAR_3 . METHOD_3 ( ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME e ) NAME e ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME data ) NAME data ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND ( data . size ( ) ) == 0 ) COND ( data . size ( ) ) == 0 ( THEN THEN (  TYPE_3 . METHOD_3 ( ) . METHOD_4 ( ( STRING_1 + STRING_2 ) ) )  TYPE_3 . METHOD_3 ( ) . METHOD_4 ( ( STRING_1 + STRING_2 ) ) (  return ; )  return ; ) THEN THEN ) IF IF ( IF IF ( COND ( data . size ( ) ) == 1 ) COND ( data . size ( ) ) == 1 ( THEN THEN (  TYPE_3 . METHOD_3 ( ) . METHOD_4 ( ( STRING_3 + STRING_4 ) ) )  TYPE_3 . METHOD_3 ( ) . METHOD_4 ( ( STRING_3 + STRING_4 ) ) (  return ; )  return ; ) THEN THEN ) IF IF (  new TYPE_4 ( this ) . start ( ) )  new TYPE_4 ( this ) . start ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) != null ) COND ( VAR_1 ) != null ( THEN THEN (  VAR_1 . METHOD_1 ( ) )  VAR_1 . METHOD_1 ( ) (  return ; )  return ; ) THEN THEN ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  METHOD_2 ( ) )  METHOD_2 ( ) ( SYNCHRONIZED SYNCHRONIZED (  VAR_2 )  VAR_2 ( BLOCK BLOCK ( IF IF ( COND METHOD_3 ( ) ) COND METHOD_3 ( ) ( THEN THEN ( IF IF ( COND ( VAR_3 ) != 0 ) COND ( VAR_3 ) != 0 ( THEN THEN (  TYPE_2 . METHOD_4 ( VAR_4 , VAR_3 ) )  TYPE_2 . METHOD_4 ( VAR_4 , VAR_3 ) ) THEN THEN ) IF IF (  VAR_5 = null )  VAR_5 = null (  VAR_6 = null )  VAR_6 = null (  VAR_3 = 0 )  VAR_3 = 0 ) THEN THEN ) IF IF ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME service ) NAME service ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( IF IF ( COND service != null ) COND service != null ( THEN THEN (  return service . METHOD_1 ( VAR_1 ) ; )  return service . METHOD_1 ( VAR_1 ) ; ) THEN THEN ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME e ) NAME e ( BLOCK BLOCK (  android.util.Log.e ( VAR_2 . TAG , STRING_1 , e ) )  android.util.Log.e ( VAR_2 . TAG , STRING_1 , e ) ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE java.lang.NullPointerException ) TYPE java.lang.NullPointerException ( NAME e ) NAME e ( BLOCK BLOCK (  android.util.Log.e ( VAR_2 . TAG , STRING_2 , e ) )  android.util.Log.e ( VAR_2 . TAG , STRING_2 , e ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  return new java.util.ArrayList < TYPE_1 > ( 0 ) ; )  return new java.util.ArrayList < TYPE_1 > ( 0 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN boolean ) RETURN boolean ( NAME start ) NAME start ( BLOCK BLOCK ( IF IF ( COND ( ( VAR_1 ) != null ) && ( ( ( VAR_2 ) == false ) || ( ( METHOD_1 ( ) ) == false ) ) ) COND ( ( VAR_1 ) != null ) && ( ( ( VAR_2 ) == false ) || ( ( METHOD_1 ( ) ) == false ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  VAR_3 = true )  VAR_3 = true (  VAR_4 = new TYPE_1 ( this ) )  VAR_4 = new TYPE_1 ( this ) (  VAR_4 . start ( ) )  VAR_4 . start ( ) (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( STRING_1 , STRING_2 , VAR_2 . TAG , null , null , null , null , false , ( - 1 ) , false , ( - 1 ) ) )  VAR_1 . METHOD_2 ( STRING_1 , STRING_2 , VAR_2 . TAG , null , null , null , null , false , ( - 1 ) , false , ( - 1 ) ) (  verify ( VAR_3 ) . METHOD_3 ( METHOD_4 ( byte [ ] . class ) , METHOD_4 ( VAR_4 class ) ) )  verify ( VAR_3 ) . METHOD_3 ( METHOD_4 ( byte [ ] . class ) , METHOD_4 ( VAR_4 class ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( true ) )  VAR_1 . METHOD_2 ( true ) (  VAR_1 . METHOD_2 ( false ) )  VAR_1 . METHOD_2 ( false ) (  VAR_1 . METHOD_3 ( VAR_2 , false ) )  VAR_1 . METHOD_3 ( VAR_2 , false ) (  org.junit.Assert.assertEquals ( VAR_3 , VAR_1 . METHOD_4 ( ) ) )  org.junit.Assert.assertEquals ( VAR_3 , VAR_1 . METHOD_4 ( ) ) (  VAR_1 . METHOD_2 ( true ) )  VAR_1 . METHOD_2 ( true ) (  org.mockito.Mockito.verify ( VAR_4 , TYPE_1 . METHOD_5 ( 2 ) ) . METHOD_3 ( TYPE_1 . METHOD_6 ( ) ) )  org.mockito.Mockito.verify ( VAR_4 , TYPE_1 . METHOD_5 ( 2 ) ) . METHOD_3 ( TYPE_1 . METHOD_6 ( ) ) (  org.junit.Assert.assertEquals ( VAR_2 , VAR_1 . METHOD_4 ( ) ) )  org.junit.Assert.assertEquals ( VAR_2 , VAR_1 . METHOD_4 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME version ) NAME version ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME d ) NAME d ( INIT = TYPE_4 . METHOD_2 ( version , VAR_1 ) . METHOD_3 ( ) ) INIT = TYPE_4 . METHOD_2 ( version , VAR_1 ) . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME r ) NAME r ( INIT = new TYPE_5 ( d , VAR_2 ) ) INIT = new TYPE_5 ( d , VAR_2 ) ) VAR VAR (  VAR_3 . METHOD_4 ( d . METHOD_5 ( ) , r ) )  VAR_3 . METHOD_4 ( d . METHOD_5 ( ) , r ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( ) )  VAR_1 . METHOD_2 ( ) ( IF IF ( COND ( ( VAR_2 ) != null ) && ( VAR_2 . METHOD_3 ( ) ) ) COND ( ( VAR_2 ) != null ) && ( VAR_2 . METHOD_3 ( ) ) ( THEN THEN (  VAR_2 . METHOD_4 ( ) )  VAR_2 . METHOD_4 ( ) ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_3 ) != null ) COND ( VAR_3 ) != null ( THEN THEN (  VAR_3 . METHOD_2 ( ) )  VAR_3 . METHOD_2 ( ) ) THEN THEN ) IF IF (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( true ) )  VAR_1 . METHOD_2 ( true ) (  org.junit.Assert.assertEquals ( VAR_2 , VAR_1 . METHOD_3 ( ) ) )  org.junit.Assert.assertEquals ( VAR_2 , VAR_1 . METHOD_3 ( ) ) (  VAR_1 . METHOD_4 ( VAR_3 , false ) )  VAR_1 . METHOD_4 ( VAR_3 , false ) (  VAR_1 . METHOD_2 ( false ) )  VAR_1 . METHOD_2 ( false ) (  org.mockito.Mockito.verify ( VAR_4 , TYPE_1 . METHOD_5 ( 2 ) ) . METHOD_4 ( TYPE_1 . METHOD_6 ( ) ) )  org.mockito.Mockito.verify ( VAR_4 , TYPE_1 . METHOD_5 ( 2 ) ) . METHOD_4 ( TYPE_1 . METHOD_6 ( ) ) (  org.junit.Assert.assertEquals ( VAR_3 , VAR_1 . METHOD_3 ( ) ) )  org.junit.Assert.assertEquals ( VAR_3 , VAR_1 . METHOD_3 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME subId ) NAME subId ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( TYPE_1 . METHOD_2 ( VAR_2 , VAR_1 , STRING_1 ) ) ) COND ! ( TYPE_1 . METHOD_2 ( VAR_2 , VAR_1 , STRING_1 ) ) ( THEN THEN (  return VAR_3 ; )  return VAR_3 ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_3 ( subId ) ) INIT = METHOD_3 ( subId ) ) VAR VAR ( IF IF ( COND VAR_4 != null ) COND VAR_4 != null ( THEN THEN (  return VAR_4 . METHOD_1 ( ) ; )  return VAR_4 . METHOD_1 ( ) ; ) THEN THEN ( ELSE ELSE (  return VAR_3 ; )  return VAR_3 ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( ) ) INIT = TYPE_2 . METHOD_2 ( ) ) VAR VAR (  VAR_1 . METHOD_3 ( new java.lang.Object ( ) ) )  VAR_1 . METHOD_3 ( new java.lang.Object ( ) ) (  VAR_1 . METHOD_3 ( new java.lang.Object ( ) ) )  VAR_1 . METHOD_3 ( new java.lang.Object ( ) ) (  VAR_1 . METHOD_3 ( new java.lang.Object ( ) ) )  VAR_1 . METHOD_3 ( new java.lang.Object ( ) ) (  METHOD_4 ( ) )  METHOD_4 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected final ) MODIFIER protected final ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME sb ) NAME sb ( INIT = new TYPE_1 ( INT_1 ) ) INIT = new TYPE_1 ( INT_1 ) ) VAR VAR (  sb.append ( STRING_1 ) )  sb.append ( STRING_1 ) (  sb.append ( VAR_2 ) )  sb.append ( VAR_2 ) (  sb.append ( CHAR_1 ) )  sb.append ( CHAR_1 ) (  sb.append ( VAR_3 ) )  sb.append ( VAR_3 ) ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN (  sb.append ( CHAR_1 ) )  sb.append ( CHAR_1 ) (  sb.append ( VAR_1 ) )  sb.append ( VAR_1 ) ) THEN THEN ) IF IF (  sb.append ( STRING_2 ) )  sb.append ( STRING_2 ) ( IF IF ( COND ( result ) != null ) COND ( result ) != null ( THEN THEN (  sb.append ( result ) )  sb.append ( result ) (  sb.append ( STRING_3 ) )  sb.append ( STRING_3 ) ) THEN THEN ) IF IF (  sb.append ( VAR_4 ) )  sb.append ( VAR_4 ) (  sb.append ( CHAR_2 ) )  sb.append ( CHAR_2 ) (  return sb . toString ( ) ; )  return sb . toString ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 = TYPE_1 . METHOD_2 ( ) )  VAR_1 = TYPE_1 . METHOD_2 ( ) (  VAR_2 = true )  VAR_2 = true ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 . METHOD_3 ( ) ) INIT = VAR_4 . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_6 . METHOD_4 ( ) . get ( VAR_3 ) ) INIT = VAR_6 . METHOD_4 ( ) . get ( VAR_3 ) ) VAR VAR ( IF IF ( COND VAR_7 ) COND VAR_7 ( THEN THEN (  android.util.Log.d ( VAR_8 . TAG , ( ( ( STRING_1 + ( VAR_4 ) ) + STRING_2 ) + VAR_5 ) ) )  android.util.Log.d ( VAR_8 . TAG , ( ( ( STRING_1 + ( VAR_4 ) ) + STRING_2 ) + VAR_5 ) ) ) THEN THEN ) IF IF ( IF IF ( COND VAR_5 != null ) COND VAR_5 != null ( THEN THEN (  METHOD_5 ( VAR_5 ) )  METHOD_5 ( VAR_5 ) ) THEN THEN ( ELSE ELSE (  VAR_9 . METHOD_6 ( this ) )  VAR_9 . METHOD_6 ( this ) (  METHOD_7 ( ) )  METHOD_7 ( ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME call ) NAME call ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( call ) )  VAR_1 . METHOD_2 ( call ) ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_4 ) NAME METHOD_4 ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  VAR_3 )  VAR_3 ( BLOCK BLOCK ( IF IF ( COND VAR_1 . METHOD_5 ( call ) ) COND VAR_1 . METHOD_5 ( call ) ( THEN THEN (  TYPE_2 . i ( this , STRING_2 , call ) )  TYPE_2 . i ( this , STRING_2 , call ) (  call . METHOD_6 ( ) )  call . METHOD_6 ( ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD (  VAR_2 . METHOD_3 ( new java.lang.Runnable ( STRING_1 ) { public void METHOD_4 ( ) { synchronized ( VAR_3 ) { if ( VAR_1 . METHOD_5 ( call ) ) { TYPE_2 . i ( this , STRING_2 , call ) ; call . METHOD_6 ( ) ; } } } } . METHOD_7 ( ) , TYPE_3 . METHOD_8 ( mContext . METHOD_9 ( ) ) ) )  VAR_2 . METHOD_3 ( new java.lang.Runnable ( STRING_1 ) { public void METHOD_4 ( ) { synchronized ( VAR_3 ) { if ( VAR_1 . METHOD_5 ( call ) ) { TYPE_2 . i ( this , STRING_2 , call ) ; call . METHOD_6 ( ) ; } } } } . METHOD_7 ( ) , TYPE_3 . METHOD_8 ( mContext . METHOD_9 ( ) ) ) (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) == null ) COND ( VAR_1 ) == null ( THEN THEN (  throw new TYPE_1 ( STRING_1 ) ; )  throw new TYPE_1 ( STRING_1 ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_3 . METHOD_2 ( VAR_1 ) ) INIT = TYPE_3 . METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND ( VAR_3 ) != null ) COND ( VAR_3 ) != null ( THEN THEN (  METHOD_3 ( VAR_2 , STRING_2 , VAR_3 , VAR_4 ) )  METHOD_3 ( VAR_2 , STRING_2 , VAR_3 , VAR_4 ) ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_5 ) != null ) COND ( VAR_5 ) != null ( THEN THEN (  METHOD_3 ( VAR_2 , STRING_3 , VAR_5 , VAR_6 ) )  METHOD_3 ( VAR_2 , STRING_3 , VAR_5 , VAR_6 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1<TYPE_2<TYPE_3,TYPE_4>> ) RETURN TYPE_1<TYPE_2<TYPE_3,TYPE_4>> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME m ) NAME m ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME c ) NAME c ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( m ) ) INIT = METHOD_2 ( m ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1<TYPE_2<TYPE_3,TYPE_4>> ) TYPE TYPE_1<TYPE_2<TYPE_3,TYPE_4>> ( NAME result ) NAME result ( INIT = new TYPE_6 < TYPE_2 < TYPE_3 , TYPE_4 > > ( ) ) INIT = new TYPE_6 < TYPE_2 < TYPE_3 , TYPE_4 > > ( ) ) VAR VAR (  METHOD_3 ( c , VAR_1 , result , null ) )  METHOD_3 ( c , VAR_1 , result , null ) (  METHOD_4 ( m , c , VAR_1 , result ) )  METHOD_4 ( m , c , VAR_1 , result ) (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME args ) NAME args ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  VAR_3 = VAR_2 )  VAR_3 = VAR_2 (  java.lang.System.out.println ( STRING_1 ) )  java.lang.System.out.println ( STRING_1 ) ( TRY TRY ( BLOCK BLOCK (  VAR_3 . run ( ) )  VAR_3 . run ( ) (  VAR_4 . println ( STRING_2 ) )  VAR_4 . println ( STRING_2 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_5 ) NAME VAR_5 ( BLOCK BLOCK (  java.lang.System.out.println ( STRING_3 ) )  java.lang.System.out.println ( STRING_3 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_6 ) NAME VAR_6 ( INIT = ( ( TYPE_4 ) ( VAR_3 ) ) ) INIT = ( ( TYPE_4 ) ( VAR_3 ) ) ) VAR VAR (  VAR_6 . METHOD_2 ( VAR_6 ) )  VAR_6 . METHOD_2 ( VAR_6 ) (  java.lang.System.out.println ( STRING_4 ) )  java.lang.System.out.println ( STRING_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.HashMap<?,?> ) TYPE java.util.HashMap<?,?> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.HashMap<?,?> ) TYPE java.util.HashMap<?,?> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . get ( VAR_4 ) ) INIT = VAR_1 . get ( VAR_4 ) ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_2 . get ( VAR_4 ) ) INIT = VAR_2 . get ( VAR_4 ) ) VAR VAR ( IF IF ( COND ! ( METHOD_2 ( VAR_3 ) ) ) COND ! ( METHOD_2 ( VAR_3 ) ) ( THEN THEN (  return METHOD_2 ( VAR_5 ) ? 1 : 0 ; )  return METHOD_2 ( VAR_5 ) ? 1 : 0 ; ) THEN THEN ( ELSE ELSE ( IF IF ( COND ! ( METHOD_2 ( VAR_5 ) ) ) COND ! ( METHOD_2 ( VAR_5 ) ) ( THEN THEN (  return - 1 ; )  return - 1 ; ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF (  return ( ( TYPE_1 ) ( VAR_3 ) ) . METHOD_3 ( VAR_5 ) ; )  return ( ( TYPE_1 ) ( VAR_3 ) ) . METHOD_3 ( VAR_5 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = null ) INIT = null ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME match ) NAME match ( INIT = VAR_3 . METHOD_2 ( VAR_1 ) ) INIT = VAR_3 . METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND match . METHOD_3 ( ) ) COND match . METHOD_3 ( ) ( THEN THEN (  VAR_2 = match . METHOD_4 ( 1 ) )  VAR_2 = match . METHOD_4 ( 1 ) ) THEN THEN ( ELSE ELSE (  android.util.Log.d ( VAR_4 . TAG , ( STRING_1 + VAR_1 ) ) )  android.util.Log.d ( VAR_4 . TAG , ( STRING_1 + VAR_1 ) ) ) ELSE ELSE ) IF IF (  VAR_5 . METHOD_5 ( VAR_6 , VAR_7 , 0 , VAR_2 ) )  VAR_5 . METHOD_5 ( VAR_6 , VAR_7 , 0 , VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_2 . METHOD_2 ( VAR_3 , VAR_4 ) )  VAR_2 . METHOD_2 ( VAR_3 , VAR_4 ) (  VAR_5 . METHOD_3 ( VAR_6 ) )  VAR_5 . METHOD_3 ( VAR_6 ) (  VAR_5 . METHOD_4 ( ) )  VAR_5 . METHOD_4 ( ) (  VAR_5 . METHOD_5 ( VAR_1 . name ) )  VAR_5 . METHOD_5 ( VAR_1 . name ) (  VAR_5 . METHOD_5 ( VAR_7 ) )  VAR_5 . METHOD_5 ( VAR_7 ) (  VAR_5 . METHOD_5 ( TYPE_2 . METHOD_6 ( VAR_8 ) . METHOD_7 ( ) ) )  VAR_5 . METHOD_5 ( TYPE_2 . METHOD_6 ( VAR_8 ) . METHOD_7 ( ) ) (  VAR_5 . METHOD_8 ( VAR_9 ) )  VAR_5 . METHOD_8 ( VAR_9 ) (  VAR_5 . METHOD_9 ( ) )  VAR_5 . METHOD_9 ( ) (  VAR_2 . METHOD_10 ( VAR_3 , ( ( VAR_4 ) + 1 ) ) )  VAR_2 . METHOD_10 ( VAR_3 , ( ( VAR_4 ) + 1 ) ) (  VAR_5 . METHOD_11 ( ) )  VAR_5 . METHOD_11 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME res ) NAME res ( INIT = this ) INIT = this ) VAR VAR ) INIT INIT ( COND res != null ) COND res != null ( UPDATE UPDATE (  res = res . METHOD_2 ( ) )  res = res . METHOD_2 ( ) ) UPDATE UPDATE ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME obj ) NAME obj ( INIT = res . METHOD_3 ( VAR_1 , null , this ) ) INIT = res . METHOD_3 ( VAR_1 , null , this ) ) VAR VAR ( IF IF ( COND obj != null ) COND obj != null ( THEN THEN (  ( ( TYPE_2 ) ( obj ) ) . METHOD_4 ( METHOD_5 ( ) ) )  ( ( TYPE_2 ) ( obj ) ) . METHOD_4 ( METHOD_5 ( ) ) (  return obj ; )  return obj ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR FOR (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME server ) NAME server ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME device ) NAME device ( INIT = null ) INIT = null ) VAR VAR ( IF IF ( COND server != null ) COND server != null ( THEN THEN ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_2 ) NAME VAR_2 ( INIT = server . METHOD_2 ( ) ) INIT = server . METHOD_2 ( ) ) VAR VAR (  device = new TYPE_3 ( VAR_2 , server , VAR_3 , VAR_4 , VAR_1 ) )  device = new TYPE_3 ( VAR_2 , server , VAR_3 , VAR_4 , VAR_1 ) (  METHOD_3 ( device , VAR_5 , VAR_6 ) )  METHOD_3 ( device , VAR_5 , VAR_6 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME e ) NAME e ( BLOCK BLOCK (  android.util.Log.e ( VAR_7 . TAG , STRING_1 ) )  android.util.Log.e ( VAR_7 . TAG , STRING_1 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) THEN THEN ) IF IF (  METHOD_3 ( device , VAR_5 , VAR_6 ) )  METHOD_3 ( device , VAR_5 , VAR_6 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  android.util.Log.d ( VAR_3 . TAG , ( ( ( STRING_1 + ( VAR_4 ) ) + STRING_2 ) + VAR_1 ) ) )  android.util.Log.d ( VAR_3 . TAG , ( ( ( STRING_1 + ( VAR_4 ) ) + STRING_2 ) + VAR_1 ) ) ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_4 ) != VAR_1 ) COND ( VAR_4 ) != VAR_1 ( THEN THEN ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  android.util.Log.d ( VAR_3 . TAG , ( STRING_3 + VAR_1 ) ) )  android.util.Log.d ( VAR_3 . TAG , ( STRING_3 + VAR_1 ) ) ) THEN THEN ) IF IF (  VAR_4 = VAR_1 )  VAR_4 = VAR_1 (  METHOD_2 ( ) )  METHOD_2 ( ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME toString ) NAME toString ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME sb ) NAME sb ( INIT = new TYPE_1 ( 100 ) ) INIT = new TYPE_1 ( 100 ) ) VAR VAR (  sb.append ( METHOD_1 ( ) . getName ( ) ) )  sb.append ( METHOD_1 ( ) . getName ( ) ) (  sb.append ( CHAR_1 ) )  sb.append ( CHAR_1 ) (  sb.append ( TYPE_2 . METHOD_2 ( METHOD_3 ( ) ) ) )  sb.append ( TYPE_2 . METHOD_2 ( METHOD_3 ( ) ) ) (  sb.append ( CHAR_2 ) )  sb.append ( CHAR_2 ) (  sb.append ( field ) )  sb.append ( field ) (  sb.append ( CHAR_3 ) )  sb.append ( CHAR_3 ) (  return sb . toString ( ) ; )  return sb . toString ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2[] ) TYPE TYPE_2[] ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_2 . METHOD_3 ( VAR_4 ) ) INIT = VAR_2 . METHOD_3 ( VAR_4 ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME item ) NAME item ( IN VAR_3 ) IN VAR_3 ( BLOCK BLOCK ( IF IF ( COND VAR_1 . equals ( item . getName ( ) ) ) COND VAR_1 . equals ( item . getName ( ) ) ( THEN THEN (  METHOD_4 ( new java.lang.Object [ ] { item } ) )  METHOD_4 ( new java.lang.Object [ ] { item } ) (  break ; )  break ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Throwable ) TYPE java.lang.Throwable ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  android.util.Log . i ( VAR_3 , ( STRING_1 + VAR_1 ) ) )  android.util.Log . i ( VAR_3 , ( STRING_1 + VAR_1 ) ) (  android.util.Log . i ( VAR_3 , STRING_2 ) )  android.util.Log . i ( VAR_3 , STRING_2 ) (  android.util.Log . i ( VAR_3 , STRING_3 , VAR_2 ) )  android.util.Log . i ( VAR_3 , STRING_3 , VAR_2 ) (  android.util.Log . i ( VAR_3 , STRING_4 ) )  android.util.Log . i ( VAR_3 , STRING_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) != null ) COND ( VAR_1 ) != null ( THEN THEN (  METHOD_2 ( ) . METHOD_3 ( VAR_1 ) )  METHOD_2 ( ) . METHOD_3 ( VAR_1 ) ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_2 ) != null ) COND ( VAR_2 ) != null ( THEN THEN (  VAR_2 . METHOD_4 ( ) )  VAR_2 . METHOD_4 ( ) ) THEN THEN ) IF IF (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private final ) MODIFIER private final ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( ( ( ( VAR_1 ) == 0 ) && ( ! ( METHOD_2 ( ) ) ) ) || ( ( VAR_2 ) == ( VAR_3 ) ) ) && ( TYPE_1 . METHOD_3 ( ) ) ) COND ( ( ( ( VAR_1 ) == 0 ) && ( ! ( METHOD_2 ( ) ) ) ) || ( ( VAR_2 ) == ( VAR_3 ) ) ) && ( TYPE_1 . METHOD_3 ( ) ) ( THEN THEN ( VAR VAR ( TYPE android.content.Intent ) TYPE android.content.Intent ( NAME VAR_4 ) NAME VAR_4 ( INIT = new android.content.Intent ( VAR_5 ) ) INIT = new android.content.Intent ( VAR_5 ) ) VAR VAR (  VAR_4 . METHOD_4 ( VAR_6 , false ) )  VAR_4 . METHOD_4 ( VAR_6 , false ) (  VAR_4 . METHOD_5 ( VAR_7 ) )  VAR_4 . METHOD_5 ( VAR_7 ) (  mContext . METHOD_6 ( VAR_4 ) )  mContext . METHOD_6 ( VAR_4 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Integer ) TYPE java.lang.Integer ( NAME error ) NAME error ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE android.bluetooth.BluetoothDevice ) TYPE android.bluetooth.BluetoothDevice ( NAME device ) NAME device ( INIT = TYPE_2 . METHOD_2 ( VAR_2 . METHOD_3 ( ) , VAR_1 ) ) INIT = TYPE_2 . METHOD_2 ( VAR_2 . METHOD_3 ( ) , VAR_1 ) ) VAR VAR (  return VAR_2 . METHOD_4 ( device , ( ( byte ) ( ( int ) ( error ) ) ) ) ; )  return VAR_2 . METHOD_4 ( device , ( ( byte ) ( ( int ) ( error ) ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_3 ( ) ) INIT = VAR_2 . METHOD_3 ( ) ) VAR VAR (  VAR_3 . METHOD_4 ( ) )  VAR_3 . METHOD_4 ( ) (  VAR_4 . METHOD_4 ( ) )  VAR_4 . METHOD_4 ( ) ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_5 ) NAME VAR_5 ( INIT = ( VAR_2 . METHOD_3 ( ) ) - VAR_1 ) INIT = ( VAR_2 . METHOD_3 ( ) ) - VAR_1 ) VAR VAR (  android.util.Log.d ( VAR_6 . TAG , ( ( STRING_1 + VAR_5 ) + STRING_2 ) ) )  android.util.Log.d ( VAR_6 . TAG , ( ( STRING_1 + VAR_5 ) + STRING_2 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ! ( METHOD_2 ( ) ) ) COND ! ( METHOD_2 ( ) ) ( THEN THEN (  TYPE_1 . METHOD_3 ( VAR_1 , STRING_1 ) )  TYPE_1 . METHOD_3 ( VAR_1 , STRING_1 ) (  return ; )  return ; ) THEN THEN ) IF IF ( IF IF ( COND ! ( METHOD_4 ( ) ) ) COND ! ( METHOD_4 ( ) ) ( THEN THEN (  TYPE_1 . METHOD_3 ( VAR_1 , STRING_2 ) )  TYPE_1 . METHOD_3 ( VAR_1 , STRING_2 ) (  return ; )  return ; ) THEN THEN ) IF IF (  METHOD_5 ( 0 ) )  METHOD_5 ( 0 ) (  METHOD_6 ( VAR_2 ) )  METHOD_6 ( VAR_2 ) (  METHOD_7 ( false , false , VAR_3 ) )  METHOD_7 ( false , false , VAR_3 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_8 ( VAR_3 , VAR_5 ) ) INIT = METHOD_8 ( VAR_3 , VAR_5 ) ) VAR VAR (  METHOD_9 ( VAR_4 , VAR_5 ) )  METHOD_9 ( VAR_4 , VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int[] ) TYPE int[] ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 [ 1 ] = 1 )  VAR_1 [ 1 ] = 1 (  VAR_1 [ 2 ] = 1 )  VAR_1 [ 2 ] = 1 (  VAR_1 [ 3 ] = 1 )  VAR_1 [ 3 ] = 1 (  VAR_1 [ 4 ] = 1 )  VAR_1 [ 4 ] = 1 (  VAR_1 [ ( - 1 ) ] = 1 )  VAR_1 [ ( - 1 ) ] = 1 ( IF IF ( COND ( VAR_1 [ 1 ] ) == 1 ) COND ( VAR_1 [ 1 ] ) == 1 ( THEN THEN (  throw new TYPE_1 ( STRING_1 ) ; )  throw new TYPE_1 ( STRING_1 ) ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( ( VAR_1 ) != null ) && ( ( VAR_2 ) != null ) ) COND ( ( VAR_1 ) != null ) && ( ( VAR_2 ) != null ) ( THEN THEN ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_2 ) INIT = VAR_2 ) VAR VAR ( IF IF ( COND ( VAR_4 ) || ( VAR_5 ) ) COND ( VAR_4 ) || ( VAR_5 ) ( THEN THEN (  VAR_1 = VAR_1 . METHOD_2 ( ) )  VAR_1 = VAR_1 . METHOD_2 ( ) ( IF IF ( COND VAR_4 ) COND VAR_4 ( THEN THEN (  VAR_1 . METHOD_3 ( VAR_6 ) )  VAR_1 . METHOD_3 ( VAR_6 ) ) THEN THEN ) IF IF ( IF IF ( COND VAR_5 ) COND VAR_5 ( THEN THEN (  VAR_1 . METHOD_4 ( VAR_7 ) )  VAR_1 . METHOD_4 ( VAR_7 ) ) THEN THEN ) IF IF ( IF IF ( COND VAR_1 . METHOD_5 ( ) ) COND VAR_1 . METHOD_5 ( ) ( THEN THEN (  VAR_1 . METHOD_6 ( METHOD_7 ( ) ) )  VAR_1 . METHOD_6 ( METHOD_7 ( ) ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME x ) NAME x ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  throw new TYPE_2 ( ) ; )  throw new TYPE_2 ( ) ; ) THEN THEN ) IF IF ( IF IF ( COND ! ( VAR_2 ) ) COND ! ( VAR_2 ) ( THEN THEN (  throw new TYPE_3 ( STRING_1 ) ; )  throw new TYPE_3 ( STRING_1 ) ; ) THEN THEN ) IF IF (  METHOD_1 ( METHOD_2 ( METHOD_3 ( i , VAR_3 ) ) , x ) )  METHOD_1 ( METHOD_2 ( METHOD_3 ( i , VAR_3 ) ) , x ) (  return this ; )  return this ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.lang.String[] ) RETURN java.lang.String[] ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  return new java.lang.String [ ] { STRING_1 , STRING_2 , STRING_3 , STRING_4 , STRING_5 , STRING_6 , STRING_7 , STRING_8 , STRING_9 , STRING_10 , STRING_11 , STRING_12 , STRING_13 , STRING_14 , STRING_15 , STRING_16 , STRING_17 , STRING_18 , STRING_19 , STRING_20 , STRING_21 , STRING_22 , VAR_1 } ; )  return new java.lang.String [ ] { STRING_1 , STRING_2 , STRING_3 , STRING_4 , STRING_5 , STRING_6 , STRING_7 , STRING_8 , STRING_9 , STRING_10 , STRING_11 , STRING_12 , STRING_13 , STRING_14 , STRING_15 , STRING_16 , STRING_17 , STRING_18 , STRING_19 , STRING_20 , STRING_21 , STRING_22 , VAR_1 } ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME config ) NAME config ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME callback ) NAME callback ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_4 ) COND VAR_4 ( THEN THEN (  android.util.Log.d ( VAR_5 . TAG , STRING_1 ) )  android.util.Log.d ( VAR_5 . TAG , STRING_1 ) ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME service ) NAME service ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( IF IF ( COND service == null ) COND service == null ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  return service . METHOD_1 ( config , VAR_1 , VAR_2 , VAR_3 , callback ) ; )  return service . METHOD_1 ( config , VAR_1 , VAR_2 , VAR_3 , callback ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME log ) NAME log ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME log ) NAME log ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND METHOD_1 ( log , false ) ) COND METHOD_1 ( log , false ) ( THEN THEN ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK (  METHOD_3 ( VAR_2 , log ) )  METHOD_3 ( VAR_2 , log ) ) BLOCK BLOCK ) METHOD METHOD (  METHOD_2 ( VAR_1 , new java.lang.Runnable ( ) { public void run ( ) { METHOD_3 ( VAR_2 , log ) ; } } ) )  METHOD_2 ( VAR_1 , new java.lang.Runnable ( ) { public void run ( ) { METHOD_3 ( VAR_2 , log ) ; } } ) ( IF IF ( COND ( VAR_3 ) != null ) COND ( VAR_3 ) != null ( THEN THEN (  VAR_3 . METHOD_4 ( STRING_1 , log ) )  VAR_3 . METHOD_4 ( STRING_1 , log ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 = new TYPE_1 ( VAR_2 ) )  VAR_1 = new TYPE_1 ( VAR_2 ) (  VAR_1 . METHOD_2 ( 0 ) )  VAR_1 . METHOD_2 ( 0 ) (  assertEquals ( 0 , VAR_1 . METHOD_3 ( ) ) )  assertEquals ( 0 , VAR_1 . METHOD_3 ( ) ) (  VAR_1 . METHOD_2 ( ( - 1 ) ) )  VAR_1 . METHOD_2 ( ( - 1 ) ) (  assertEquals ( ( - 1 ) , VAR_1 . METHOD_3 ( ) ) )  assertEquals ( ( - 1 ) , VAR_1 . METHOD_3 ( ) ) (  VAR_1 . METHOD_2 ( VAR_1 . METHOD_4 ( ) ) )  VAR_1 . METHOD_2 ( VAR_1 . METHOD_4 ( ) ) (  assertEquals ( VAR_1 . METHOD_4 ( ) , VAR_1 . METHOD_3 ( ) ) )  assertEquals ( VAR_1 . METHOD_4 ( ) , VAR_1 . METHOD_3 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME location ) NAME location ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME data ) NAME data ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_2 != null ) && ( VAR_4 . METHOD_2 ( VAR_1 , VAR_2 ) ) ) COND ( VAR_2 != null ) && ( VAR_4 . METHOD_2 ( VAR_1 , VAR_2 ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  super . METHOD_1 ( VAR_1 , location , VAR_3 , data ) )  super . METHOD_1 ( VAR_1 , location , VAR_3 , data ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN long ) RETURN long ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_5 ) NAME VAR_5 ( INIT = new TYPE_2 ( VAR_3 . value ) ) INIT = new TYPE_2 ( VAR_3 . value ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  return VAR_6 . METHOD_1 ( VAR_1 , VAR_2 , VAR_5 , VAR_4 ) ; )  return VAR_6 . METHOD_1 ( VAR_1 , VAR_2 , VAR_5 , VAR_4 ) ; ) BLOCK BLOCK ( FINALLY FINALLY (  VAR_3 . value = VAR_5 . value )  VAR_3 . value = VAR_5 . value ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN java.io.File ) RETURN java.io.File ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( STRING_1 , STRING_2 ) ) INIT = TYPE_1 . METHOD_2 ( STRING_1 , STRING_2 ) ) VAR VAR (  TYPE_1 . METHOD_3 ( new TYPE_2 ( ) , TYPE_1 . METHOD_4 ( STRING_3 ) , TYPE_1 . METHOD_5 ( ) , VAR_1 , false ) )  TYPE_1 . METHOD_3 ( new TYPE_2 ( ) , TYPE_1 . METHOD_4 ( STRING_3 ) , TYPE_1 . METHOD_5 ( ) , VAR_1 , false ) (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME e ) NAME e ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) != null ) COND ( VAR_1 ) != null ( THEN THEN (  VAR_1 . METHOD_1 ( e ) )  VAR_1 . METHOD_1 ( e ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND ( VAR_2 ) == ( VAR_3 ) ) COND ( VAR_2 ) == ( VAR_3 ) ( THEN THEN ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_2 . METHOD_2 ( VAR_5 , VAR_6 , VAR_7 ) ) INIT = TYPE_2 . METHOD_2 ( VAR_5 , VAR_6 , VAR_7 ) ) VAR VAR (  METHOD_3 ( VAR_4 , true ) )  METHOD_3 ( VAR_4 , true ) (  return ; )  return ; ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1[] ) TYPE TYPE_1[] ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 [ VAR_2 ] ) INIT = new TYPE_1 [ VAR_2 ] ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < ( ( VAR_2 ) - 1 ) ) COND i < ( ( VAR_2 ) - 1 ) ( UPDATE UPDATE (  ++ i )  ++ i ) UPDATE UPDATE ( BLOCK BLOCK (  VAR_1 [ i ] = new TYPE_1 ( i ) )  VAR_1 [ i ] = new TYPE_1 ( i ) ) BLOCK BLOCK ) FOR FOR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_2 ( TYPE_3 . METHOD_2 ( VAR_1 ) ) ) INIT = new TYPE_2 ( TYPE_3 . METHOD_2 ( VAR_1 ) ) ) VAR VAR (  METHOD_3 ( ) )  METHOD_3 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.NullPointerException ) TYPE java.lang.NullPointerException ( NAME VAR_4 ) NAME VAR_4 ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  this )  this ( BLOCK BLOCK (  ( VAR_1 ) ++ )  ( VAR_1 ) ++ ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  ( VAR_3 ) ++ )  ( VAR_3 ) ++ ) THEN THEN ) IF IF ( IF IF ( COND ( ( VAR_4 ) == ( VAR_3 ) ) && ( ( VAR_5 ) != null ) ) COND ( ( VAR_4 ) == ( VAR_3 ) ) && ( ( VAR_5 ) != null ) ( THEN THEN (  VAR_5 . METHOD_1 ( ) )  VAR_5 . METHOD_1 ( ) ) THEN THEN ) IF IF ( IF IF ( COND VAR_6 ) COND VAR_6 ( THEN THEN ( TRY TRY ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( INT_1 ) )  TYPE_1 . METHOD_2 ( INT_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) THEN THEN ) IF IF ( SYNCHRONIZED SYNCHRONIZED (  VAR_7 )  VAR_7 ( BLOCK BLOCK (  VAR_7 . METHOD_3 ( ) )  VAR_7 . METHOD_3 ( ) ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 > 0 ) COND VAR_1 > 0 ( THEN THEN ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_1 . METHOD_2 ( VAR_1 ) ) INIT = TYPE_1 . METHOD_2 ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_2 ( VAR_2 ) ) INIT = new TYPE_2 ( VAR_2 ) ) VAR VAR (  return VAR_4 . METHOD_3 ( VAR_3 ) ; )  return VAR_4 . METHOD_3 ( VAR_3 ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  return VAR_4 . METHOD_3 ( VAR_3 ) ; )  return VAR_4 . METHOD_3 ( VAR_3 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( METHOD_2 ( ) ) ) COND ! ( METHOD_2 ( ) ) ( THEN THEN (  TYPE_2 . METHOD_3 ( VAR_2 ) )  TYPE_2 . METHOD_3 ( VAR_2 ) (  return ; )  return ; ) THEN THEN ) IF IF ( TRY TRY ( BLOCK BLOCK (  TYPE_2 . METHOD_4 ( ) . METHOD_1 ( VAR_1 , mContext . METHOD_5 ( ) , VAR_2 ) )  TYPE_2 . METHOD_4 ( ) . METHOD_1 ( VAR_1 , mContext . METHOD_5 ( ) , VAR_2 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME e ) NAME e ( BLOCK BLOCK (  throw e . METHOD_6 ( ) ; )  throw e . METHOD_6 ( ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN byte[] ) RETURN byte[] ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_6 ) NAME VAR_6 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME telephony ) NAME telephony ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( IF IF ( COND telephony != null ) COND telephony != null ( THEN THEN (  return telephony . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; )  return telephony . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; ) THEN THEN ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME ex ) NAME ex ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE java.lang.NullPointerException ) TYPE java.lang.NullPointerException ( NAME ex ) NAME ex ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) == null ) COND ( VAR_1 ) == null ( THEN THEN (  throw new TYPE_2 ( STRING_1 ) ; )  throw new TYPE_2 ( STRING_1 ) ; ) THEN THEN ) IF IF ( TRY TRY ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( VAR_2 , VAR_3 , VAR_4 . METHOD_3 ( ) ) )  VAR_1 . METHOD_2 ( VAR_2 , VAR_3 , VAR_4 . METHOD_3 ( ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK (  android.util.Log.w ( VAR_5 , STRING_2 ) )  android.util.Log.w ( VAR_5 , STRING_2 ) (  VAR_1 = null )  VAR_1 = null (  throw new TYPE_1 ( VAR_6 ) ; )  throw new TYPE_1 ( VAR_6 ) ; ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME e ) NAME e ( BLOCK BLOCK (  android.util.Log.w ( VAR_5 , ( STRING_3 + e ) ) )  android.util.Log.w ( VAR_5 , ( STRING_3 + e ) ) (  throw new TYPE_1 ( VAR_7 ) ; )  throw new TYPE_1 ( VAR_7 ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_2 ( ) ) INIT = VAR_2 . METHOD_2 ( ) ) VAR VAR (  assertEquals ( VAR_3 . TRUE , VAR_1 . METHOD_3 ( ) ) )  assertEquals ( VAR_3 . TRUE , VAR_1 . METHOD_3 ( ) ) (  assertEquals ( VAR_3 . TRUE , VAR_1 . METHOD_4 ( ) ) )  assertEquals ( VAR_3 . TRUE , VAR_1 . METHOD_4 ( ) ) (  assertEquals ( VAR_3 . TRUE , VAR_1 . METHOD_5 ( ) ) )  assertEquals ( VAR_3 . TRUE , VAR_1 . METHOD_5 ( ) ) (  assertEquals ( VAR_3 . TRUE , VAR_1 . METHOD_6 ( ) ) )  assertEquals ( VAR_3 . TRUE , VAR_1 . METHOD_6 ( ) ) (  assertEquals ( VAR_3 . TRUE , VAR_1 . METHOD_7 ( ) ) )  assertEquals ( VAR_3 . TRUE , VAR_1 . METHOD_7 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public final ) MODIFIER public final ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME out ) NAME out ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( state ) != ( VAR_1 ) ) && ( ( state ) != ( VAR_2 ) ) ) COND ( ( state ) != ( VAR_1 ) ) && ( ( state ) != ( VAR_2 ) ) ( THEN THEN (  throw METHOD_2 ( ) ; )  throw METHOD_2 ( ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ( INIT = METHOD_3 ( out ) ) INIT = METHOD_3 ( out ) ) VAR VAR ( IF IF ( COND result == ( VAR_3 ) ) COND result == ( VAR_3 ) ( THEN THEN (  state = VAR_1 )  state = VAR_1 ) THEN THEN ) IF IF (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME session ) NAME session ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME s ) NAME s ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME c ) NAME c ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME fd ) NAME fd ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME callback ) NAME callback ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME v ) NAME v ( INIT = TYPE_4 . METHOD_2 ( session ) ) INIT = TYPE_4 . METHOD_2 ( session ) ) VAR VAR (  assertTrue ( TYPE_5 . METHOD_3 ( v ) ) )  assertTrue ( TYPE_5 . METHOD_3 ( v ) ) (  super . METHOD_1 ( session , s , c , VAR_1 , fd , callback ) )  super . METHOD_1 ( session , s , c , VAR_1 , fd , callback ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME field ) NAME field ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME location ) NAME location ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME data ) NAME data ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( field != null ) && ( VAR_3 . METHOD_2 ( VAR_1 , field ) ) ) COND ( field != null ) && ( VAR_3 . METHOD_2 ( VAR_1 , field ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  METHOD_1 ( VAR_1 , location , VAR_2 , data ) )  METHOD_1 ( VAR_1 , location , VAR_2 , data ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_2 . METHOD_2 ( VAR_3 , VAR_4 ) )  VAR_2 . METHOD_2 ( VAR_3 , VAR_4 ) (  VAR_5 . METHOD_3 ( VAR_6 ) )  VAR_5 . METHOD_3 ( VAR_6 ) (  VAR_5 . METHOD_4 ( VAR_7 ) )  VAR_5 . METHOD_4 ( VAR_7 ) (  VAR_5 . METHOD_5 ( ) )  VAR_5 . METHOD_5 ( ) ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME id ) NAME id ( INIT = java.lang.Integer . toString ( VAR_1 ) ) INIT = java.lang.Integer . toString ( VAR_1 ) ) VAR VAR (  VAR_5 . METHOD_6 ( id ) )  VAR_5 . METHOD_6 ( id ) (  VAR_5 . METHOD_7 ( id ) )  VAR_5 . METHOD_7 ( id ) (  METHOD_8 ( ) )  METHOD_8 ( ) (  VAR_2 . METHOD_9 ( VAR_3 , ( ( VAR_4 ) + 1 ) ) )  VAR_2 . METHOD_9 ( VAR_3 , ( ( VAR_4 ) + 1 ) ) (  VAR_5 . METHOD_10 ( ) )  VAR_5 . METHOD_10 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_1 . METHOD_2 ( ) ) ) COND ! ( VAR_1 . METHOD_2 ( ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE java.io.File[] ) TYPE java.io.File[] ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_3 ( ) ) INIT = VAR_1 . METHOD_3 ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK ( IF IF ( COND VAR_3 . METHOD_2 ( ) ) COND VAR_3 . METHOD_2 ( ) ( THEN THEN (  TYPE_1 . METHOD_1 ( VAR_3 ) )  TYPE_1 . METHOD_1 ( VAR_3 ) ) THEN THEN ( ELSE ELSE (  assertTrue ( VAR_3 . METHOD_4 ( ) ) )  assertTrue ( VAR_3 . METHOD_4 ( ) ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( new TYPE_2 ( ) ) ) INIT = TYPE_1 . METHOD_2 ( new TYPE_2 ( ) ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  server . METHOD_3 ( new TYPE_3 ( ) . METHOD_4 ( STRING_1 ) . METHOD_5 ( INT_1 ) ) )  server . METHOD_3 ( new TYPE_3 ( ) . METHOD_4 ( STRING_1 ) . METHOD_5 ( INT_1 ) ) (  server . METHOD_6 ( ) )  server . METHOD_6 ( ) ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_4 ) ( server . METHOD_7 ( STRING_2 ) . METHOD_8 ( ) ) ) ) INIT = ( ( TYPE_4 ) ( server . METHOD_7 ( STRING_2 ) . METHOD_8 ( ) ) ) ) VAR VAR (  assertEquals ( INT_1 , VAR_2 . METHOD_9 ( ) ) )  assertEquals ( INT_1 , VAR_2 . METHOD_9 ( ) ) ) BLOCK BLOCK ( FINALLY FINALLY (  TYPE_1 . METHOD_2 ( VAR_1 ) )  TYPE_1 . METHOD_2 ( VAR_1 ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME path ) NAME path ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_1 ) NAME VAR_1 ( INIT = this ) INIT = this ) VAR VAR ( VAR VAR ( TYPE TYPE_5<java.lang.String> ) TYPE TYPE_5<java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ( INIT = path . METHOD_2 ( ) . METHOD_3 ( ) ) INIT = path . METHOD_2 ( ) . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ( WHILE WHILE ( COND VAR_2 . METHOD_4 ( ) ) COND VAR_2 . METHOD_4 ( ) ( BLOCK BLOCK (  name = VAR_2 . METHOD_5 ( ) )  name = VAR_2 . METHOD_5 ( ) ( IF IF ( COND VAR_2 . METHOD_4 ( ) ) COND VAR_2 . METHOD_4 ( ) ( THEN THEN (  VAR_1 = VAR_3 . METHOD_6 ( VAR_1 , name ) )  VAR_1 = VAR_3 . METHOD_6 ( VAR_1 , name ) ) THEN THEN ( ELSE ELSE (  return VAR_3 . METHOD_1 ( VAR_1 , name ) ; )  return VAR_3 . METHOD_1 ( VAR_1 , name ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) WHILE WHILE (  throw new TYPE_6 ( ) ; )  throw new TYPE_6 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN char ) RETURN char ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_1 ) ) COND ! ( VAR_1 ) ( THEN THEN (  throw new TYPE_1 ( STRING_1 ) ; )  throw new TYPE_1 ( STRING_1 ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( VAR_3 ) + ( VAR_4 ) ) INIT = ( VAR_3 ) + ( VAR_4 ) ) VAR VAR ( IF IF ( COND VAR_2 > ( METHOD_2 ( ) ) ) COND VAR_2 > ( METHOD_2 ( ) ) ( THEN THEN (  throw new TYPE_2 ( ) ; )  throw new TYPE_2 ( ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE char ) TYPE char ( NAME x ) NAME x ( INIT = ( ( char ) ( TYPE_3 . METHOD_3 ( METHOD_4 ( VAR_3 ) , ( ! ( VAR_5 ) ) ) ) ) ) INIT = ( ( char ) ( TYPE_3 . METHOD_3 ( METHOD_4 ( VAR_3 ) , ( ! ( VAR_5 ) ) ) ) ) ) VAR VAR (  VAR_3 = VAR_2 )  VAR_3 = VAR_2 (  return x ; )  return x ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = null ) INIT = null ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( IF IF ( COND ( VAR_1 . type ) == null ) COND ( VAR_1 . type ) == null ( THEN THEN (  VAR_4 = TYPE_3 . METHOD_2 ( VAR_5 . Object class ) )  VAR_4 = TYPE_3 . METHOD_2 ( VAR_5 . Object class ) ) THEN THEN ( ELSE ELSE (  VAR_4 = TYPE_3 . METHOD_2 ( VAR_5 . Throwable class ) )  VAR_4 = TYPE_3 . METHOD_2 ( VAR_5 . Throwable class ) ) ELSE ELSE ) IF IF ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME id ) NAME id ( INIT = STRING_1 + ( ( VAR_6 ) ++ ) ) INIT = STRING_1 + ( ( VAR_6 ) ++ ) ) VAR VAR (  VAR_3 = new TYPE_2 ( id , id , VAR_4 , null ) )  VAR_3 = new TYPE_2 ( id , id , VAR_4 , null ) (  VAR_7 . METHOD_3 ( VAR_1 , VAR_3 ) )  VAR_7 . METHOD_3 ( VAR_1 , VAR_3 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  throw new java.lang.NullPointerException ( STRING_1 ) ; )  throw new java.lang.NullPointerException ( STRING_1 ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_2 ) ( VAR_3 . get ( new TYPE_3 ( VAR_1 ) ) ) ) ) INIT = ( ( TYPE_2 ) ( VAR_3 . get ( new TYPE_3 ( VAR_1 ) ) ) ) ) VAR VAR ( IF IF ( COND ! ( METHOD_2 ( VAR_2 ) ) ) COND ! ( METHOD_2 ( VAR_2 ) ) ( THEN THEN (  return VAR_2 ; )  return VAR_2 ; ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  assertNotNull ( VAR_1 ) )  assertNotNull ( VAR_1 ) (  assertNotNull ( VAR_1 . METHOD_2 ( ) ) )  assertNotNull ( VAR_1 . METHOD_2 ( ) ) (  assertEquals ( VAR_2 , VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) . getName ( ) ) )  assertEquals ( VAR_2 , VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) . getName ( ) ) (  METHOD_4 ( VAR_1 ) )  METHOD_4 ( VAR_1 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_1 ( VAR_4 ) ) INIT = new TYPE_1 ( VAR_4 ) ) VAR VAR (  assertEquals ( VAR_2 , VAR_3 . METHOD_2 ( ) . METHOD_3 ( ) . getName ( ) ) )  assertEquals ( VAR_2 , VAR_3 . METHOD_2 ( ) . METHOD_3 ( ) . getName ( ) ) (  METHOD_4 ( VAR_3 ) )  METHOD_4 ( VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME key ) NAME key ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME value ) NAME value ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  return ( VAR_1 . METHOD_2 ( key , value ) ) == ( VAR_2 ) ; )  return ( VAR_1 . METHOD_2 ( key , value ) ) == ( VAR_2 ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME e ) NAME e ( BLOCK BLOCK (  android.util.Log.w ( VAR_3 . TAG , STRING_1 , e ) )  android.util.Log.w ( VAR_3 . TAG , STRING_1 , e ) (  return false ; )  return false ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME args ) NAME args ( INIT = new java.lang.String [ ] { STRING_1 , STRING_2 } ) INIT = new java.lang.String [ ] { STRING_1 , STRING_2 } ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_2 ( args ) ) INIT = VAR_1 . METHOD_2 ( args ) ) VAR VAR (  assertEquals ( 1 , VAR_2 . METHOD_3 ( ) . size ( ) ) )  assertEquals ( 1 , VAR_2 . METHOD_3 ( ) . size ( ) ) (  assertEquals ( VAR_3 , VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( ) . error ( ) ) )  assertEquals ( VAR_3 , VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( ) . error ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public final ) MODIFIER public final ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE long ) TYPE long ( NAME x ) NAME x ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  throw new TYPE_2 ( ) ; )  throw new TYPE_2 ( ) ; ) THEN THEN ) IF IF ( IF IF ( COND ! ( VAR_2 ) ) COND ! ( VAR_2 ) ( THEN THEN (  throw new TYPE_3 ( STRING_1 ) ; )  throw new TYPE_3 ( STRING_1 ) ; ) THEN THEN ) IF IF (  METHOD_1 ( METHOD_2 ( METHOD_3 ( VAR_3 ) ) , x ) )  METHOD_1 ( METHOD_2 ( METHOD_3 ( VAR_3 ) ) , x ) (  return this ; )  return this ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND METHOD_2 ( ) ) COND METHOD_2 ( ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( IF IF ( COND result == null ) COND result == null ( THEN THEN (  TYPE_2 . METHOD_3 ( VAR_1 ) )  TYPE_2 . METHOD_3 ( VAR_1 ) (  METHOD_4 ( VAR_2 , null ) )  METHOD_4 ( VAR_2 , null ) ) THEN THEN ( ELSE ELSE ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 ) INIT = VAR_4 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_5 ) NAME VAR_5 ( INIT = result . METHOD_5 ( ) ) INIT = result . METHOD_5 ( ) ) VAR VAR ( SWITCH SWITCH ( NAME VAR_5 ) NAME VAR_5 ( CASE VAR_6 ( BLOCK BLOCK (  VAR_3 = VAR_7 )  VAR_3 = VAR_7 (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_6 ( CASE VAR_8 ( BLOCK BLOCK (  VAR_3 = VAR_9 )  VAR_3 = VAR_9 (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_8 ( CASE VAR_10 ( BLOCK BLOCK (  VAR_3 = VAR_11 )  VAR_3 = VAR_11 (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_10 ) SWITCH SWITCH (  METHOD_4 ( VAR_3 , result ) )  METHOD_4 ( VAR_3 , result ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<android.bluetooth.BluetoothDevice> ) RETURN java.util.List<android.bluetooth.BluetoothDevice> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<android.bluetooth.BluetoothDevice> ) TYPE java.util.List<android.bluetooth.BluetoothDevice> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < android.bluetooth.BluetoothDevice > ( ) ) INIT = new java.util.ArrayList < android.bluetooth.BluetoothDevice > ( ) ) VAR VAR ( SYNCHRONIZED SYNCHRONIZED (  this )  this ( BLOCK BLOCK ( IF IF ( COND ( ( VAR_2 ) == ( VAR_3 ) ) && ( ( VAR_4 ) != null ) ) COND ( ( VAR_2 ) == ( VAR_3 ) ) && ( ( VAR_4 ) != null ) ( THEN THEN (  VAR_1 . METHOD_2 ( VAR_4 ) )  VAR_1 . METHOD_2 ( VAR_4 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE double ) TYPE double ( NAME s ) NAME s ( INIT = VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) ) INIT = VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) ) VAR VAR ( IF IF ( COND VAR_1 > 0 ) COND VAR_1 > 0 ( THEN THEN (  s = s * 2 )  s = s * 2 ) THEN THEN ( ELSE ELSE (  s = s / 2 )  s = s / 2 ) ELSE ELSE ) IF IF (  VAR_2 . METHOD_2 ( ) . METHOD_4 ( s ) )  VAR_2 . METHOD_2 ( ) . METHOD_4 ( s ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( VAR_2 . METHOD_2 ( ) ) ) INIT = new TYPE_1 ( VAR_2 . METHOD_2 ( ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_2 . METHOD_3 ( VAR_4 , VAR_2 . METHOD_2 ( ) , false ) ) INIT = TYPE_2 . METHOD_3 ( VAR_4 , VAR_2 . METHOD_2 ( ) , false ) ) VAR VAR (  VAR_3 . METHOD_4 ( VAR_5 ) )  VAR_3 . METHOD_4 ( VAR_5 ) (  VAR_3 . METHOD_5 ( ) )  VAR_3 . METHOD_5 ( ) (  verify ( VAR_4 ) . METHOD_6 ( METHOD_7 ( ) ) )  verify ( VAR_4 ) . METHOD_6 ( METHOD_7 ( ) ) (  TYPE_3 . METHOD_8 ( VAR_3 . METHOD_9 ( ) ) )  TYPE_3 . METHOD_8 ( VAR_3 . METHOD_9 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) != null ) COND ( VAR_1 ) != null ( THEN THEN (  VAR_1 . METHOD_2 ( this ) )  VAR_1 . METHOD_2 ( this ) ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_2 ) != null ) COND ( VAR_2 ) != null ( THEN THEN (  VAR_2 . METHOD_3 ( this ) )  VAR_2 . METHOD_3 ( this ) ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_3 ) != null ) COND ( VAR_3 ) != null ( THEN THEN (  VAR_3 . METHOD_4 ( this ) )  VAR_3 . METHOD_4 ( this ) ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_4 ) != null ) COND ( VAR_4 ) != null ( THEN THEN (  VAR_4 . METHOD_5 ( this ) )  VAR_4 . METHOD_5 ( this ) (  VAR_4 . METHOD_6 ( this ) )  VAR_4 . METHOD_6 ( this ) (  VAR_4 . METHOD_7 ( this ) )  VAR_4 . METHOD_7 ( this ) (  VAR_4 . METHOD_8 ( this ) )  VAR_4 . METHOD_8 ( this ) (  VAR_4 . METHOD_9 ( this ) )  VAR_4 . METHOD_9 ( this ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND STRING_1 . METHOD_2 ( VAR_1 ) ) COND STRING_1 . METHOD_2 ( VAR_1 ) ( THEN THEN (  return VAR_2 ; )  return VAR_2 ; ) THEN THEN ( ELSE ELSE ( IF IF ( COND STRING_2 . METHOD_2 ( VAR_1 ) ) COND STRING_2 . METHOD_2 ( VAR_1 ) ( THEN THEN (  return VAR_3 ; )  return VAR_3 ; ) THEN THEN ( ELSE ELSE ( IF IF ( COND STRING_3 . METHOD_2 ( VAR_1 ) ) COND STRING_3 . METHOD_2 ( VAR_1 ) ( THEN THEN (  return VAR_4 ; )  return VAR_4 ; ) THEN THEN ( ELSE ELSE (  throw new java.lang.IllegalArgumentException ( ( STRING_4 + VAR_1 ) ) ; )  throw new java.lang.IllegalArgumentException ( ( STRING_4 + VAR_1 ) ) ; ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME context ) NAME context ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) != null ) COND ( VAR_1 ) != null ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE java.util.List<TYPE_2<java.lang.String,TYPE_3>> ) TYPE java.util.List<TYPE_2<java.lang.String,TYPE_3>> ( NAME VAR_2 ) NAME VAR_2 ( IN VAR_1 . values ( ) ) IN VAR_1 . values ( ) ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_2<java.lang.String,TYPE_3> ) TYPE TYPE_2<java.lang.String,TYPE_3> ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_3 . METHOD_2 ( ) ) INIT = VAR_3 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME location ) NAME location ( INIT = VAR_3 . METHOD_3 ( ) ) INIT = VAR_3 . METHOD_3 ( ) ) VAR VAR (  context . METHOD_4 ( VAR_5 , location , VAR_4 , null ) )  context . METHOD_4 ( VAR_5 , location , VAR_4 , null ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF (  super . METHOD_1 ( context ) )  super . METHOD_1 ( context ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME options ) NAME options ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  options . METHOD_2 ( TYPE_2 . getName ( ) , TYPE_3 . toString ( ) ) )  options . METHOD_2 ( TYPE_2 . getName ( ) , TYPE_3 . toString ( ) ) (  TYPE_4 . METHOD_3 ( options , null , null , null , null , VAR_1 , false , false , FLOAT_1 , ( ( TYPE_5 ) ( null ) ) , ( ( TYPE_6 [ ] ) ( null ) ) ) )  TYPE_4 . METHOD_3 ( options , null , null , null , null , VAR_1 , false , false , FLOAT_1 , ( ( TYPE_5 ) ( null ) ) , ( ( TYPE_6 [ ] ) ( null ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private synchronized ) MODIFIER private synchronized ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE byte ) TYPE byte ( NAME type ) NAME type ) VAR VAR ( VAR VAR ( TYPE byte ) TYPE byte ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE short ) TYPE short ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  android.util.Log.v ( VAR_3 . TAG , ( ( ( ( ( STRING_1 + type ) + STRING_2 ) + id ) + STRING_3 ) + VAR_1 ) ) )  android.util.Log.v ( VAR_3 . TAG , ( ( ( ( ( STRING_1 + type ) + STRING_2 ) + id ) + STRING_3 ) + VAR_1 ) ) ) THEN THEN ) IF IF ( VAR VAR ( TYPE android.os.Message ) TYPE android.os.Message ( NAME msg ) NAME msg ( INIT = VAR_4 . METHOD_2 ( VAR_5 ) ) INIT = VAR_4 . METHOD_2 ( VAR_5 ) ) VAR VAR (  msg.obj = ( VAR_1 > 0 ) ? new java.lang.Integer ( VAR_1 ) : null )  msg.obj = ( VAR_1 > 0 ) ? new java.lang.Integer ( VAR_1 ) : null (  msg.arg1 = type )  msg.arg1 = type (  VAR_6 = id )  VAR_6 = id (  VAR_4 . METHOD_3 ( msg ) )  VAR_4 . METHOD_3 ( msg ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME uri ) NAME uri ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME uid ) NAME uid ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( STRING_1 ) )  METHOD_2 ( STRING_1 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 . get ( ) ) INIT = VAR_4 . get ( ) ) VAR VAR ( IF IF ( COND VAR_3 != null ) COND VAR_3 != null ( THEN THEN (  uid = VAR_3 . uid )  uid = VAR_3 . uid (  VAR_1 = VAR_5 )  VAR_1 = VAR_5 ) THEN THEN ) IF IF (  uid = TYPE_3 . METHOD_3 ( uid ) )  uid = TYPE_3 . METHOD_3 ( uid ) ( IF IF ( COND VAR_1 == ( VAR_6 ) ) COND VAR_1 == ( VAR_6 ) ( THEN THEN (  return VAR_7 ; )  return VAR_7 ; ) THEN THEN ) IF IF ( SYNCHRONIZED SYNCHRONIZED (  this )  this ( BLOCK BLOCK (  return METHOD_4 ( uri , uid , VAR_2 ) ? VAR_7 : VAR_8 ; )  return METHOD_4 ( uri , uid , VAR_2 ) ? VAR_7 : VAR_8 ; ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( VAR_1 , VAR_2 ) )  METHOD_2 ( VAR_1 , VAR_2 ) (  METHOD_2 ( VAR_3 , VAR_4 ) )  METHOD_2 ( VAR_3 , VAR_4 ) (  METHOD_2 ( VAR_3 , VAR_5 ) )  METHOD_2 ( VAR_3 , VAR_5 ) (  METHOD_2 ( VAR_3 , VAR_6 ) )  METHOD_2 ( VAR_3 , VAR_6 ) (  METHOD_2 ( VAR_7 , VAR_8 ) )  METHOD_2 ( VAR_7 , VAR_8 ) (  METHOD_2 ( VAR_7 , VAR_9 ) )  METHOD_2 ( VAR_7 , VAR_9 ) (  METHOD_2 ( VAR_10 , VAR_11 ) )  METHOD_2 ( VAR_10 , VAR_11 ) (  METHOD_2 ( VAR_12 , VAR_13 ) )  METHOD_2 ( VAR_12 , VAR_13 ) (  METHOD_3 ( STRING_1 , STRING_2 ) )  METHOD_3 ( STRING_1 , STRING_2 ) (  METHOD_3 ( STRING_3 , STRING_4 ) )  METHOD_3 ( STRING_3 , STRING_4 ) (  METHOD_3 ( STRING_5 , STRING_6 ) )  METHOD_3 ( STRING_5 , STRING_6 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  return new TYPE_3 ( VAR_1 . METHOD_2 ( ) , VAR_2 ) . METHOD_3 ( ) ; )  return new TYPE_3 ( VAR_1 . METHOD_2 ( ) , VAR_2 ) . METHOD_3 ( ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_5 ( ) ; )  throw new TYPE_5 ( ) ; ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_5 ( ) ; )  throw new TYPE_5 ( ) ; ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE TYPE_7 ) TYPE TYPE_7 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_5 ( ) ; )  throw new TYPE_5 ( ) ; ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE TYPE_8 ) TYPE TYPE_8 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_9 ( e ) ; )  throw new TYPE_9 ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE TYPE_10 ) TYPE TYPE_10 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_9 ( e ) ; )  throw new TYPE_9 ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( IN TYPE_1 . values ( ) ) IN TYPE_1 . values ( ) ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_2 ( null ) ) INIT = VAR_1 . METHOD_2 ( null ) ) VAR VAR ( IF IF ( COND ( METHOD_3 ( VAR_2 ) ) && ( TYPE_2 . METHOD_4 ( METHOD_5 ( VAR_2 ) ) ) ) COND ( METHOD_3 ( VAR_2 ) ) && ( TYPE_2 . METHOD_4 ( METHOD_5 ( VAR_2 ) ) ) ( THEN THEN (  VAR_3 . METHOD_6 ( VAR_1 ) )  VAR_3 . METHOD_6 ( VAR_1 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_4 ( ) ; )  throw new TYPE_4 ( ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( ) , TYPE_2 . METHOD_4 ( VAR_2 class ) ) )  VAR_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( ) , TYPE_2 . METHOD_4 ( VAR_2 class ) ) (  VAR_3 . METHOD_5 ( METHOD_6 ( STRING_1 , 1 ) . METHOD_7 ( VAR_4 ) . build ( ) ) )  VAR_3 . METHOD_5 ( METHOD_6 ( STRING_1 , 1 ) . METHOD_7 ( VAR_4 ) . build ( ) ) (  assertEquals ( 0 , VAR_3 . METHOD_8 ( VAR_5 , false , TYPE_3 . METHOD_9 ( ) ) . size ( ) ) )  assertEquals ( 0 , VAR_3 . METHOD_8 ( VAR_5 , false , TYPE_3 . METHOD_9 ( ) ) . size ( ) ) (  assertEquals ( 1 , VAR_3 . METHOD_8 ( VAR_5 , true , TYPE_3 . METHOD_9 ( ) ) . size ( ) ) )  assertEquals ( 1 , VAR_3 . METHOD_8 ( VAR_5 , true , TYPE_3 . METHOD_9 ( ) ) . size ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.File ) TYPE TYPE_1.File ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1.File ) TYPE TYPE_1.File ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 . getName ( ) . METHOD_2 ( VAR_2 . getName ( ) ) ) COND VAR_1 . getName ( ) . METHOD_2 ( VAR_2 . getName ( ) ) ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_4 ) IN VAR_4 ( BLOCK BLOCK ( IF IF ( COND VAR_1 . getName ( ) . METHOD_3 ( VAR_3 ) ) COND VAR_1 . getName ( ) . METHOD_3 ( VAR_3 ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( VAR_1 ) )  METHOD_2 ( VAR_1 ) (  METHOD_3 ( ) )  METHOD_3 ( ) (  METHOD_4 ( ) )  METHOD_4 ( ) (  METHOD_5 ( ) )  METHOD_5 ( ) (  METHOD_6 ( ) )  METHOD_6 ( ) ( IF IF ( COND VAR_2 . METHOD_7 ( ) ) COND VAR_2 . METHOD_7 ( ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  VAR_2 . METHOD_8 ( ) )  VAR_2 . METHOD_8 ( ) ( IF IF ( COND VAR_3 ) COND VAR_3 ( THEN THEN (  VAR_2 . METHOD_9 ( null , false ) )  VAR_2 . METHOD_9 ( null , false ) ) THEN THEN ) IF IF (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME x ) NAME x ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( IF IF ( COND ( VAR_2 ) != null ) COND ( VAR_2 ) != null ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_4 ) IN VAR_4 ( BLOCK BLOCK (  METHOD_2 ( VAR_3 ) )  METHOD_2 ( VAR_3 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF (  return true ; )  return true ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Throwable ) TYPE java.lang.Throwable ( NAME e ) NAME e ( BLOCK BLOCK (  throw METHOD_3 ( x , e ) ; )  throw METHOD_3 ( x , e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME c ) NAME c ( INIT = TYPE_1 . METHOD_2 ( ) ) INIT = TYPE_1 . METHOD_2 ( ) ) VAR VAR (  assertTrue ( ( c != ( VAR_1 ) ) ) )  assertTrue ( ( c != ( VAR_1 ) ) ) ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_1 . METHOD_2 ( ) ) INIT = TYPE_1 . METHOD_2 ( ) ) VAR VAR (  assertTrue ( ( c != VAR_2 ) ) )  assertTrue ( ( c != VAR_2 ) ) (  TYPE_1 . METHOD_3 ( c ) )  TYPE_1 . METHOD_3 ( c ) (  TYPE_1 . METHOD_3 ( VAR_2 ) )  TYPE_1 . METHOD_3 ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.Integer[] ) TYPE java.lang.Integer[] ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.lang.Integer [ VAR_3 ] ) INIT = new java.lang.Integer [ VAR_3 ] ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < ( VAR_3 ) ) COND i < ( VAR_3 ) ( UPDATE UPDATE (  ++ i )  ++ i ) UPDATE UPDATE ( BLOCK BLOCK (  VAR_2 [ i ] = new java.lang.Integer ( i ) )  VAR_2 [ i ] = new java.lang.Integer ( i ) ) BLOCK BLOCK ) FOR FOR (  VAR_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_2 ) ) )  VAR_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_2 ) ) (  METHOD_4 ( ) )  METHOD_4 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME w ) NAME w ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME h ) NAME h ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( VAR_4 , STRING_1 ) )  TYPE_1 . METHOD_2 ( VAR_4 , STRING_1 ) (  METHOD_3 ( VAR_1 , VAR_2 , w , h , VAR_3 , METHOD_4 ( VAR_3 , true ) , TYPE_2 . METHOD_5 ( VAR_3 ) ) )  METHOD_3 ( VAR_1 , VAR_2 , w , h , VAR_3 , METHOD_4 ( VAR_3 , true ) , TYPE_2 . METHOD_5 ( VAR_3 ) ) (  TYPE_1 . METHOD_6 ( VAR_4 ) )  TYPE_1 . METHOD_6 ( VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( 0 , INT_1 ) ) ) INIT = TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( 0 , INT_1 ) ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_2 . METHOD_4 ( VAR_1 . METHOD_5 ( INT_1 ) , 10 ) ) INIT = TYPE_2 . METHOD_4 ( VAR_1 . METHOD_5 ( INT_1 ) , 10 ) ) VAR VAR (  assertEquals ( ( STRING_1 + VAR_1 ) , VAR_2 , VAR_3 ) )  assertEquals ( ( STRING_1 + VAR_1 ) , VAR_2 , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  assertFalse ( TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ) )  assertFalse ( TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ) ( TRY TRY ( BLOCK BLOCK (  VAR_1 . METHOD_4 ( INT_1 ) )  VAR_1 . METHOD_4 ( INT_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( BLOCK BLOCK (  VAR_2 . METHOD_5 ( ) )  VAR_2 . METHOD_5 ( ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ( IF IF ( COND VAR_1 . METHOD_6 ( ) ) COND VAR_1 . METHOD_6 ( ) ( THEN THEN (  fail ( ( ( STRING_1 + ( VAR_1 . getName ( ) ) ) + STRING_2 ) ) )  fail ( ( ( STRING_1 + ( VAR_1 . getName ( ) ) ) + STRING_2 ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < ( VAR_1 . length ) ) COND i < ( VAR_1 . length ) ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK ( IF IF ( COND VAR_2 . METHOD_2 ( VAR_1 [ i ] ) ) COND VAR_2 . METHOD_2 ( VAR_1 [ i ] ) ( THEN THEN (  return i ; )  return i ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR FOR (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME w ) NAME w ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME h ) NAME h ) VAR VAR ( VAR VAR ( TYPE float[] ) TYPE float[] ( NAME data ) NAME data ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( VAR_3 , STRING_1 ) )  TYPE_1 . METHOD_2 ( VAR_3 , STRING_1 ) (  mRS . METHOD_3 ( ) )  mRS . METHOD_3 ( ) (  METHOD_4 ( VAR_1 , VAR_2 , w , h ) )  METHOD_4 ( VAR_1 , VAR_2 , w , h ) (  mRS . METHOD_5 ( METHOD_6 ( ) , VAR_1 , VAR_2 , VAR_4 , VAR_5 , w , h , data , ( ( data . length ) * 4 ) ) )  mRS . METHOD_5 ( METHOD_6 ( ) , VAR_1 , VAR_2 , VAR_4 , VAR_5 , w , h , data , ( ( data . length ) * 4 ) ) (  TYPE_1 . METHOD_7 ( VAR_3 ) )  TYPE_1 . METHOD_7 ( VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<?superTYPE_2> ) TYPE TYPE_1<?superTYPE_2> ( NAME c ) NAME c ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND c == null ) COND c == null ( THEN THEN (  throw new java.lang.NullPointerException ( ) ; )  throw new java.lang.NullPointerException ( ) ; ) THEN THEN ) IF IF ( IF IF ( COND c == ( this ) ) COND c == ( this ) ( THEN THEN (  throw new java.lang.IllegalArgumentException ( ) ; )  throw new java.lang.IllegalArgumentException ( ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE int ) TYPE int ( NAME n ) NAME n ( INIT = 0 ) INIT = 0 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME e ) NAME e ) VAR VAR ( WHILE WHILE ( COND ( e = METHOD_2 ( ) ) != null ) COND ( e = METHOD_2 ( ) ) != null ( BLOCK BLOCK (  c . METHOD_3 ( e ) )  c . METHOD_3 ( e ) (  ++ n )  ++ n ) BLOCK BLOCK ) WHILE WHILE (  return n ; )  return n ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_3 ) COND VAR_3 ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN ( IF IF ( COND ( VAR_4 . METHOD_2 ( ) ) != null ) COND ( VAR_4 . METHOD_2 ( ) ) != null ( THEN THEN (  VAR_4 . METHOD_2 ( ) . METHOD_3 ( false ) )  VAR_4 . METHOD_2 ( ) . METHOD_3 ( false ) ) THEN THEN ) IF IF (  VAR_4 . METHOD_4 ( VAR_1 ) )  VAR_4 . METHOD_4 ( VAR_1 ) (  VAR_4 . METHOD_5 ( METHOD_6 ( ) ) )  VAR_4 . METHOD_5 ( METHOD_6 ( ) ) (  METHOD_7 ( VAR_4 . METHOD_8 ( ) ) )  METHOD_7 ( VAR_4 . METHOD_8 ( ) ) ) THEN THEN ) IF IF (  VAR_5 . METHOD_9 ( VAR_2 ) )  VAR_5 . METHOD_9 ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK (  VAR_1 = new TYPE_1 ( mContext ) )  VAR_1 = new TYPE_1 ( mContext ) (  VAR_1 . METHOD_1 ( VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) )  VAR_1 . METHOD_1 ( VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) (  VAR_7 = VAR_1 . METHOD_2 ( ) )  VAR_7 = VAR_1 . METHOD_2 ( ) (  VAR_8 = ( ( TYPE_2 ) ( VAR_7 . METHOD_3 ( ) . METHOD_4 ( VAR_9 ) ) ) )  VAR_8 = ( ( TYPE_2 ) ( VAR_7 . METHOD_3 ( ) . METHOD_4 ( VAR_9 ) ) ) (  VAR_10 = VAR_8 . METHOD_5 ( 0 ) )  VAR_10 = VAR_8 . METHOD_5 ( 0 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  log ( ( ( ( STRING_1 + ( METHOD_2 ( ) . VAR_1 ) ) + STRING_2 ) + ( VAR_2 . size ( ) ) ) ) )  log ( ( ( ( STRING_1 + ( METHOD_2 ( ) . VAR_1 ) ) + STRING_2 ) + ( VAR_2 . size ( ) ) ) ) (  VAR_3 . METHOD_3 ( ) )  VAR_3 . METHOD_3 ( ) (  VAR_4 . METHOD_4 ( false ) )  VAR_4 . METHOD_4 ( false ) (  VAR_5 = false )  VAR_5 = false (  VAR_6 = false )  VAR_6 = false (  VAR_7 = false )  VAR_7 = false ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ( VAR VAR ( TYPE TYPE_3<java.lang.String> ) TYPE TYPE_3<java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  return VAR_1 . METHOD_2 ( name , VAR_3 < TYPE_4 > METHOD_3 ( ) , VAR_4 ) ; )  return VAR_1 . METHOD_2 ( name , VAR_3 < TYPE_4 > METHOD_3 ( ) , VAR_4 ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Throwable ) TYPE java.lang.Throwable ( NAME e ) NAME e ( BLOCK BLOCK (  TYPE_5 . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( VAR_5 , new TYPE_6 ( VAR_2 , e ) ) )  TYPE_5 . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( VAR_5 , new TYPE_6 ( VAR_2 , e ) ) (  TYPE_5 . METHOD_4 ( ) . METHOD_7 ( ) )  TYPE_5 . METHOD_4 ( ) . METHOD_7 ( ) (  return null ; )  return null ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.util.List<TYPE_1>> ) TYPE java.util.Map<java.lang.String,java.util.List<TYPE_1>> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE android.content.Intent ) TYPE android.content.Intent ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_6 ) NAME VAR_6 ) VAR VAR ( IF IF ( COND VAR_1 . METHOD_2 ( VAR_2 ) ) COND VAR_1 . METHOD_2 ( VAR_2 ) ( THEN THEN (  VAR_6 = VAR_1 . get ( VAR_2 ) )  VAR_6 = VAR_1 . get ( VAR_2 ) ) THEN THEN ( ELSE ELSE (  VAR_6 = new java.util.ArrayList < TYPE_1 > ( ) )  VAR_6 = new java.util.ArrayList < TYPE_1 > ( ) ) ELSE ELSE ) IF IF (  VAR_1 . METHOD_3 ( VAR_2 , VAR_6 ) )  VAR_1 . METHOD_3 ( VAR_2 , VAR_6 ) (  VAR_6 . METHOD_4 ( TYPE_1 . METHOD_5 ( VAR_3 , VAR_4 , VAR_5 ) ) )  VAR_6 . METHOD_4 ( TYPE_1 . METHOD_5 ( VAR_3 , VAR_4 , VAR_5 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) != null ) COND ( VAR_1 ) != null ( THEN THEN ( TRY TRY ( BLOCK BLOCK (  return VAR_1 . METHOD_1 ( ) ; )  return VAR_1 . METHOD_1 ( ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME ex ) NAME ex ( BLOCK BLOCK (  throw new TYPE_5 ( ) ; )  throw new TYPE_5 ( ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) THEN THEN ( ELSE ELSE (  throw new TYPE_2 ( ) ; )  throw new TYPE_2 ( ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN byte[] ) RETURN byte[] ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 != null ) INIT = VAR_1 != null ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME result ) NAME result ( INIT = METHOD_2 ( VAR_3 , VAR_2 ) ) INIT = METHOD_2 ( VAR_3 , VAR_2 ) ) VAR VAR ( IF IF ( COND VAR_3 ) COND VAR_3 ( THEN THEN (  result . METHOD_3 ( VAR_1 ) )  result . METHOD_3 ( VAR_1 ) ) THEN THEN ) IF IF (  return result . METHOD_4 ( ) ; )  return result . METHOD_4 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = 0 ) INIT = 0 ) VAR VAR ( SWITCH SWITCH ( NAME VAR_1 ) NAME VAR_1 ( CASE VAR_3 ( BLOCK BLOCK (  VAR_2 = VAR_4 )  VAR_2 = VAR_4 (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_3 ( CASE VAR_5 ( BLOCK BLOCK (  VAR_2 = VAR_6 )  VAR_2 = VAR_6 (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_5 ( CASE VAR_7 ( BLOCK BLOCK (  VAR_2 = VAR_8 )  VAR_2 = VAR_8 (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_7 ( CASE VAR_9 ( BLOCK BLOCK (  VAR_2 = VAR_10 )  VAR_2 = VAR_10 (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_9 ( CASE VAR_11 ( BLOCK BLOCK (  VAR_2 = VAR_12 )  VAR_2 = VAR_12 (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_11 ) SWITCH SWITCH ( IF IF ( COND VAR_2 != 0 ) COND VAR_2 != 0 ( THEN THEN (  METHOD_2 ( ) )  METHOD_2 ( ) (  METHOD_3 ( ) . METHOD_1 ( VAR_2 ) )  METHOD_3 ( ) . METHOD_1 ( VAR_2 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_1 ) ( VAR_2 . METHOD_2 ( ) . METHOD_3 ( VAR_3 ) ) ) ) INIT = ( ( TYPE_1 ) ( VAR_2 . METHOD_2 ( ) . METHOD_3 ( VAR_3 ) ) ) ) VAR VAR (  assertFalse ( VAR_1 . METHOD_4 ( ) ) )  assertFalse ( VAR_1 . METHOD_4 ( ) ) (  VAR_4 . METHOD_5 ( true ) )  VAR_4 . METHOD_5 ( true ) (  assertTrue ( VAR_1 . METHOD_4 ( ) ) )  assertTrue ( VAR_1 . METHOD_4 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( WHILE WHILE ( COND true ) COND true ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 ) INIT = VAR_2 ) VAR VAR ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN (  return VAR_1 ; )  return VAR_1 ; ) THEN THEN ) IF IF ( SYNCHRONIZED SYNCHRONIZED (  this )  this ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME e ) NAME e ( BLOCK BLOCK (  return null ; )  return null ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) WHILE WHILE ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( ) . VAR_1 = VAR_1 )  METHOD_2 ( ) . VAR_1 = VAR_1 ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ( INIT = - 1 ) INIT = - 1 ) VAR VAR (  VAR_5 . METHOD_3 ( VAR_2 , VAR_3 ) )  VAR_5 . METHOD_3 ( VAR_2 , VAR_3 ) ( IF IF ( COND ( VAR_2 . length ) == ( VAR_6 ) ) COND ( VAR_2 . length ) == ( VAR_6 ) ( THEN THEN (  VAR_4 = VAR_7 )  VAR_4 = VAR_7 ) THEN THEN ) IF IF (  VAR_8 . METHOD_3 ( VAR_1 , VAR_4 ) )  VAR_8 . METHOD_3 ( VAR_1 , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) ( IF IF ( COND ( ! ( METHOD_2 ( ) ) ) || ( ! ( METHOD_3 ( ) ) ) ) COND ( ! ( METHOD_2 ( ) ) ) || ( ! ( METHOD_3 ( ) ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  VAR_1 . METHOD_4 ( ( ( VAR_2 ) + ( VAR_3 ) ) ) )  VAR_1 . METHOD_4 ( ( ( VAR_2 ) + ( VAR_3 ) ) ) (  VAR_1 . METHOD_4 ( ( ( VAR_2 ) + ( VAR_4 ) ) ) )  VAR_1 . METHOD_4 ( ( ( VAR_2 ) + ( VAR_4 ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ! ( METHOD_2 ( ) ) ) COND ! ( METHOD_2 ( ) ) ( THEN THEN (  TYPE_1 . METHOD_3 ( VAR_1 , STRING_1 ) )  TYPE_1 . METHOD_3 ( VAR_1 , STRING_1 ) (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_4 ( ) ) INIT = METHOD_4 ( ) ) VAR VAR (  METHOD_5 ( VAR_3 ) )  METHOD_5 ( VAR_3 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_6 ( VAR_3 , VAR_2 ) ) INIT = METHOD_6 ( VAR_3 , VAR_2 ) ) VAR VAR (  assertEquals ( STRING_2 , 1 , VAR_5 ) )  assertEquals ( STRING_2 , 1 , VAR_5 ) (  VAR_2 = METHOD_4 ( ) )  VAR_2 = METHOD_4 ( ) (  METHOD_7 ( VAR_6 , VAR_7 ) )  METHOD_7 ( VAR_6 , VAR_7 ) (  assertEquals ( STRING_3 , 0 , VAR_8 . METHOD_8 ( ) . METHOD_9 ( ) ) )  assertEquals ( STRING_3 , 0 , VAR_8 . METHOD_8 ( ) . METHOD_9 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 < 0 ) || ( VAR_1 > INT_1 ) ) COND ( VAR_1 < 0 ) || ( VAR_1 > INT_1 ) ( THEN THEN (  throw new java.lang.IllegalArgumentException ( STRING_1 ) ; )  throw new java.lang.IllegalArgumentException ( STRING_1 ) ; ) THEN THEN ) IF IF ( IF IF ( COND METHOD_2 ( ) ) COND METHOD_2 ( ) ( THEN THEN (  throw new TYPE_1 ( STRING_2 ) ; )  throw new TYPE_1 ( STRING_2 ) ; ) THEN THEN ) IF IF ( TRY TRY ( BLOCK BLOCK (  METHOD_3 ( ) . METHOD_4 ( VAR_2 , VAR_1 ) )  METHOD_3 ( ) . METHOD_4 ( VAR_2 , VAR_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( BLOCK BLOCK ( IF IF ( COND ! ( METHOD_5 ( ) ) ) COND ! ( METHOD_5 ( ) ) ( THEN THEN (  throw VAR_3 ; )  throw VAR_3 ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object[] ) RETURN java.lang.Object[] ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME length ) NAME length ( INIT = c . size ( ) ) INIT = c . size ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.Object[] ) TYPE java.lang.Object[] ( NAME result ) NAME result ( INIT = new java.lang.Object [ length ] ) INIT = new java.lang.Object [ length ] ) VAR VAR ( VAR VAR ( TYPE TYPE_1<?> ) TYPE TYPE_1<?> ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = length ) INIT = length ) VAR VAR ) INIT INIT ( COND ( -- i ) >= 0 ) COND ( -- i ) >= 0 ( BLOCK BLOCK (  result [ i ] = VAR_1 . METHOD_3 ( ) )  result [ i ] = VAR_1 . METHOD_3 ( ) ) BLOCK BLOCK ) FOR FOR (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_2 == null ) COND VAR_2 == null ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_3 . METHOD_2 ( ) ) == 0 ) COND ( VAR_3 . METHOD_2 ( ) ) == 0 ( THEN THEN (  return new TYPE_1 ( 1 ) ; )  return new TYPE_1 ( 1 ) ; ) THEN THEN ) IF IF ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF (  VAR_2 = VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) )  VAR_2 = VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) ( IF IF ( COND ! ( VAR_4 . equals ( VAR_5 ) ) ) COND ! ( VAR_4 . equals ( VAR_5 ) ) ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF (  return VAR_1 . METHOD_1 ( VAR_3 ) ; )  return VAR_1 . METHOD_1 ( VAR_3 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) instanceof TYPE_2 ) COND ( VAR_1 ) instanceof TYPE_2 ( THEN THEN ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_3 ) ( VAR_1 . METHOD_1 ( ) ) ) ) INIT = ( ( TYPE_3 ) ( VAR_1 . METHOD_1 ( ) ) ) ) VAR VAR (  return new TYPE_4 ( VAR_2 , METHOD_2 ( ) , METHOD_3 ( ) ) ; )  return new TYPE_4 ( VAR_2 , METHOD_2 ( ) , METHOD_3 ( ) ) ; ) THEN THEN ) IF IF (  throw new TYPE_1 ( ) ; )  throw new TYPE_1 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN java.util.List<?extendsTYPE_1> ) RETURN java.util.List<?extendsTYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<TYPE_2> ) TYPE java.util.ArrayList<TYPE_2> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.ArrayList < TYPE_2 > ( ) ) INIT = new java.util.ArrayList < TYPE_2 > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME config ) NAME config ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  VAR_2 . METHOD_2 ( new TYPE_2 ( config ) ) )  VAR_2 . METHOD_2 ( new TYPE_2 ( config ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_6 ) NAME VAR_6 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME options ) NAME options ( INIT = new TYPE_3 ( ) ) INIT = new TYPE_3 ( ) ) VAR VAR (  VAR_7 = VAR_2 )  VAR_7 = VAR_2 (  VAR_8 = VAR_4 )  VAR_8 = VAR_4 (  VAR_9 = VAR_3 )  VAR_9 = VAR_3 (  VAR_10 = VAR_5 )  VAR_10 = VAR_5 (  VAR_11 = VAR_6 )  VAR_11 = VAR_6 ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_12 ) NAME VAR_12 ( INIT = new TYPE_4 ( ) ) INIT = new TYPE_4 ( ) ) VAR VAR (  METHOD_1 ( ( 4 + ( VAR_6 ? 1 : 0 ) ) , STRING_1 , VAR_1 , VAR_12 , options ) )  METHOD_1 ( ( 4 + ( VAR_6 ? 1 : 0 ) ) , STRING_1 , VAR_1 , VAR_12 , options ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( INT_1 , INT_2 ) ) INIT = new TYPE_1 ( INT_1 , INT_2 ) ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_2 ( VAR_1 ) ) INIT = TYPE_2 . METHOD_2 ( VAR_1 ) ) VAR VAR (  assertEquals ( VAR_1 . start , TYPE_2 . METHOD_3 ( VAR_2 ) ) )  assertEquals ( VAR_1 . start , TYPE_2 . METHOD_3 ( VAR_2 ) ) (  assertEquals ( VAR_3 , TYPE_2 . METHOD_4 ( VAR_2 ) ) )  assertEquals ( VAR_3 , TYPE_2 . METHOD_4 ( VAR_2 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME x ) NAME x ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < ( x . METHOD_2 ( ) . size ( ) ) ) COND i < ( x . METHOD_2 ( ) . size ( ) ) ( UPDATE UPDATE (  ++ i )  ++ i ) UPDATE UPDATE ( BLOCK BLOCK ( VAR VAR ( TYPE com.android.jack.ir.ast.JDefinedClassOrInterface ) TYPE com.android.jack.ir.ast.JDefinedClassOrInterface ( NAME type ) NAME type ( INIT = x . METHOD_2 ( ) . get ( i ) ) INIT = x . METHOD_2 ( ) . get ( i ) ) VAR VAR ( IF IF ( COND ! ( type . METHOD_3 ( ) ) ) COND ! ( type . METHOD_3 ( ) ) ( THEN THEN (  METHOD_4 ( type ) )  METHOD_4 ( type ) (  METHOD_5 ( ) )  METHOD_5 ( ) (  METHOD_5 ( ) )  METHOD_5 ( ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR FOR (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  device . METHOD_1 ( VAR_1 ) )  device . METHOD_1 ( VAR_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME e ) NAME e ( BLOCK BLOCK (  TYPE_2 . log ( VAR_2 , STRING_1 , e ) )  TYPE_2 . log ( VAR_2 , STRING_1 , e ) ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK (  TYPE_2 . log ( VAR_2 , STRING_1 , e ) )  TYPE_2 . log ( VAR_2 , STRING_1 , e ) ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK (  TYPE_2 . log ( VAR_2 , STRING_1 , e ) )  TYPE_2 . log ( VAR_2 , STRING_1 , e ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  assertTrue ( STRING_1 , METHOD_3 ( ) ) )  assertTrue ( STRING_1 , METHOD_3 ( ) ) (  java.lang.System.out.println ( VAR_1 . METHOD_4 ( ) . METHOD_5 ( ) ) )  java.lang.System.out.println ( VAR_1 . METHOD_4 ( ) . METHOD_5 ( ) ) (  assertEquals ( STRING_2 , VAR_2 , VAR_3 . METHOD_6 ( ) ) )  assertEquals ( STRING_2 , VAR_2 , VAR_3 . METHOD_6 ( ) ) (  assertEquals ( STRING_2 , VAR_2 , VAR_4 . METHOD_6 ( ) ) )  assertEquals ( STRING_2 , VAR_2 , VAR_4 . METHOD_6 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND TYPE_1 . METHOD_2 ( VAR_1 ) ) COND TYPE_1 . METHOD_2 ( VAR_1 ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_3 . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) ) INIT = TYPE_3 . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_3 == null ) COND VAR_3 == null ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  return VAR_3 . METHOD_5 ( VAR_2 ) ; )  return VAR_3 . METHOD_5 ( VAR_2 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN ( IF IF ( COND TYPE_1 . METHOD_2 ( VAR_1 ) ) COND TYPE_1 . METHOD_2 ( VAR_1 ) ( THEN THEN (  VAR_3 . METHOD_3 ( ) . METHOD_4 ( VAR_4 , VAR_5 ) )  VAR_3 . METHOD_3 ( ) . METHOD_4 ( VAR_4 , VAR_5 ) ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK (  TYPE_1 . METHOD_5 ( ) . METHOD_6 ( ) )  TYPE_1 . METHOD_5 ( ) . METHOD_6 ( ) (  TYPE_3 . METHOD_7 ( VAR_5 , false ) )  TYPE_3 . METHOD_7 ( VAR_5 , false ) ) BLOCK BLOCK ) METHOD METHOD (  new TYPE_2 ( ) { public void run ( ) { TYPE_1 . METHOD_5 ( ) . METHOD_6 ( ) ; TYPE_3 . METHOD_7 ( VAR_5 , false ) ; } } . start ( ) )  new TYPE_2 ( ) { public void run ( ) { TYPE_1 . METHOD_5 ( ) . METHOD_6 ( ) ; TYPE_3 . METHOD_7 ( VAR_5 , false ) ; } } . start ( ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME id ) NAME id ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( ) )  VAR_1 . METHOD_2 ( ) (  TYPE_1 . METHOD_3 ( ) )  TYPE_1 . METHOD_3 ( ) (  TYPE_2 . METHOD_4 ( id ) )  TYPE_2 . METHOD_4 ( id ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Throwable ) TYPE java.lang.Throwable ( NAME e ) NAME e ( BLOCK BLOCK (  throw TYPE_1 . METHOD_5 ( e ) ; )  throw TYPE_1 . METHOD_5 ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ( FINALLY FINALLY (  VAR_1 . METHOD_6 ( ) )  VAR_1 . METHOD_6 ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < TYPE_1 > ( ) ) INIT = new java.util.ArrayList < TYPE_1 > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME info ) NAME info ( IN VAR_2 . values ( ) ) IN VAR_2 . values ( ) ( BLOCK BLOCK ( IF IF ( COND ( info . METHOD_2 ( ) ) != null ) COND ( info . METHOD_2 ( ) ) != null ( THEN THEN (  VAR_1 . METHOD_3 ( info . METHOD_2 ( ) . METHOD_4 ( ) ) )  VAR_1 . METHOD_3 ( info . METHOD_2 ( ) . METHOD_4 ( ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME item ) NAME item ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) ( TRY TRY ( BLOCK BLOCK ( IF IF ( COND ( item . METHOD_3 ( ) ) > ( METHOD_3 ( ) ) ) COND ( item . METHOD_3 ( ) ) > ( METHOD_3 ( ) ) ( THEN THEN (  throw new java.lang.IllegalArgumentException ( STRING_1 ) ; )  throw new java.lang.IllegalArgumentException ( STRING_1 ) ; ) THEN THEN ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.NullPointerException ) TYPE java.lang.NullPointerException ( NAME ex ) NAME ex ( BLOCK BLOCK (  throw new java.lang.NullPointerException ( STRING_2 ) ; )  throw new java.lang.NullPointerException ( STRING_2 ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  VAR_1 . METHOD_1 ( item ) )  VAR_1 . METHOD_1 ( item ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( STRING_1 , ( TYPE_2 . METHOD_1 ( ) ? STRING_2 : STRING_3 ) ) ) INIT = TYPE_1 . METHOD_2 ( STRING_1 , ( TYPE_2 . METHOD_1 ( ) ? STRING_2 : STRING_3 ) ) ) VAR VAR ( IF IF ( COND STRING_2 . METHOD_3 ( VAR_1 ) ) COND STRING_2 . METHOD_3 ( VAR_1 ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ( ELSE ELSE ( IF IF ( COND STRING_3 . METHOD_3 ( VAR_1 ) ) COND STRING_3 . METHOD_3 ( VAR_1 ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ( ELSE ELSE (  throw new java.lang.RuntimeException ( STRING_4 ) ; )  throw new java.lang.RuntimeException ( STRING_4 ) ; ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_2 ) != null ) COND ( VAR_2 ) != null ( THEN THEN (  METHOD_2 ( VAR_3 . METHOD_3 ( VAR_2 . METHOD_4 ( ) ) ) )  METHOD_2 ( VAR_3 . METHOD_3 ( VAR_2 . METHOD_4 ( ) ) ) ) THEN THEN ) IF IF (  VAR_2 = new TYPE_3 ( VAR_4 ) )  VAR_2 = new TYPE_3 ( VAR_4 ) ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_5 ) NAME VAR_5 ( INIT = METHOD_5 ( 1 ) ) INIT = METHOD_5 ( 1 ) ) VAR VAR (  VAR_2 . METHOD_6 ( true ) )  VAR_2 . METHOD_6 ( true ) (  TYPE_5 . METHOD_7 ( VAR_5 ) )  TYPE_5 . METHOD_7 ( VAR_5 ) (  METHOD_8 ( VAR_6 ) )  METHOD_8 ( VAR_6 ) (  VAR_2 . METHOD_9 ( VAR_1 ) )  VAR_2 . METHOD_9 ( VAR_1 ) (  VAR_7 . METHOD_10 ( ) )  VAR_7 . METHOD_10 ( ) (  return VAR_2 . METHOD_4 ( ) ; )  return VAR_2 . METHOD_4 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_2 ) != ( VAR_3 ) ) COND ( VAR_2 ) != ( VAR_3 ) ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_4 . length ) < 1 ) COND ( VAR_4 . length ) < 1 ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  result . type = ( VAR_4 [ 0 ] ) & INT_1 )  result . type = ( VAR_4 [ 0 ] ) & INT_1 (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME session ) NAME session ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME pkg ) NAME pkg ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( VAR_2 , TYPE_4 . METHOD_2 ( ( ( VAR_3 ) + id ) ) , ( ( ( VAR_4 ) | ( VAR_5 ) ) | ( VAR_6 ) ) , pkg , VAR_7 ) ) INIT = new TYPE_1 ( VAR_2 , TYPE_4 . METHOD_2 ( ( ( VAR_3 ) + id ) ) , ( ( ( VAR_4 ) | ( VAR_5 ) ) | ( VAR_6 ) ) , pkg , VAR_7 ) ) VAR VAR (  VAR_1 . METHOD_3 ( VAR_8 ) )  VAR_1 . METHOD_3 ( VAR_8 ) (  session . METHOD_4 ( VAR_1 ) )  session . METHOD_4 ( VAR_1 ) (  VAR_9 . METHOD_5 ( VAR_10 ) . METHOD_6 ( ) )  VAR_9 . METHOD_5 ( VAR_10 ) . METHOD_6 ( ) (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static final ) MODIFIER private static final ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.ArrayList<java.lang.String> ) TYPE java.util.ArrayList<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_2 == ( VAR_1 . size ( ) ) ) COND VAR_2 == ( VAR_1 . size ( ) ) ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME m ) NAME m ( INIT = VAR_3 . METHOD_2 ( VAR_1 . get ( VAR_2 ) ) ) INIT = VAR_3 . METHOD_2 ( VAR_1 . get ( VAR_2 ) ) ) VAR VAR ( IF IF ( COND m . METHOD_3 ( ) ) COND m . METHOD_3 ( ) ( THEN THEN (  return m ; )  return m ; ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( STRING_1 ) ) INIT = TYPE_1 . METHOD_2 ( STRING_1 ) ) VAR VAR (  TYPE_2 . METHOD_3 ( false ) . when ( VAR_2 ) . METHOD_4 ( org.mockito.Matchers . METHOD_5 ( VAR_3 class ) , org.mockito.Matchers.eq ( VAR_1 . METHOD_6 ( ) ) ) )  TYPE_2 . METHOD_3 ( false ) . when ( VAR_2 ) . METHOD_4 ( org.mockito.Matchers . METHOD_5 ( VAR_3 class ) , org.mockito.Matchers.eq ( VAR_1 . METHOD_6 ( ) ) ) ( VAR VAR ( TYPE android.content.Intent ) TYPE android.content.Intent ( NAME VAR_4 ) NAME VAR_4 ( INIT = new android.content.Intent ( VAR_5 , VAR_1 ) ) INIT = new android.content.Intent ( VAR_5 , VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME result ) NAME result ( INIT = METHOD_7 ( VAR_4 , true ) ) INIT = METHOD_7 ( VAR_4 , true ) ) VAR VAR (  assertEquals ( VAR_6 , result ) )  assertEquals ( VAR_6 , result ) (  METHOD_8 ( ) )  METHOD_8 ( ) (  METHOD_9 ( ) )  METHOD_9 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_1 ( event , VAR_2 ) ) INIT = TYPE_2 . METHOD_1 ( event , VAR_2 ) ) VAR VAR (  VAR_3 . METHOD_2 ( ) . METHOD_3 ( VAR_2 , VAR_4 , VAR_5 , new TYPE_3 ( VAR_6 . x , VAR_6 . y ) , VAR_1 ) )  VAR_3 . METHOD_2 ( ) . METHOD_3 ( VAR_2 , VAR_4 , VAR_5 , new TYPE_3 ( VAR_6 . x , VAR_6 . y ) , VAR_1 ) (  VAR_2 . METHOD_4 ( ) )  VAR_2 . METHOD_4 ( ) ( IF IF ( COND ( VAR_7 ) == ( VAR_8 ) ) COND ( VAR_7 ) == ( VAR_8 ) ( THEN THEN (  TYPE_4 . METHOD_5 ( ) . METHOD_6 ( ) )  TYPE_4 . METHOD_5 ( ) . METHOD_6 ( ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME session ) NAME session ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_1 ) NAME VAR_1 ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR (  VAR_4 . log ( VAR_5 , STRING_1 , VAR_3 . METHOD_3 ( ) . METHOD_4 ( ) ) )  VAR_4 . log ( VAR_5 , STRING_1 , VAR_3 . METHOD_3 ( ) . METHOD_4 ( ) ) ( FOR-EACH FOR-EACH ( TYPE TYPE_7 ) TYPE TYPE_7 ( NAME VAR_6 ) NAME VAR_6 ( IN VAR_3 . METHOD_5 ( ) ) IN VAR_3 . METHOD_5 ( ) ( BLOCK BLOCK (  METHOD_6 ( VAR_6 , session , STRING_2 ) )  METHOD_6 ( VAR_6 , session , STRING_2 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( VAR_2 ) )  VAR_1 . METHOD_2 ( VAR_2 ) (  VAR_1 . METHOD_2 ( VAR_3 ) )  VAR_1 . METHOD_2 ( VAR_3 ) (  VAR_1 . METHOD_2 ( VAR_4 ) )  VAR_1 . METHOD_2 ( VAR_4 ) (  VAR_1 . METHOD_2 ( VAR_5 ) )  VAR_1 . METHOD_2 ( VAR_5 ) (  VAR_1 . METHOD_2 ( VAR_6 ) )  VAR_1 . METHOD_2 ( VAR_6 ) (  VAR_1 . METHOD_2 ( VAR_7 ) )  VAR_1 . METHOD_2 ( VAR_7 ) (  VAR_1 . METHOD_2 ( VAR_8 ) )  VAR_1 . METHOD_2 ( VAR_8 ) (  VAR_1 . METHOD_2 ( VAR_9 ) )  VAR_1 . METHOD_2 ( VAR_9 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Class<?extendsTYPE_1> ) TYPE java.lang.Class<?extendsTYPE_1> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.StringBuilder ) TYPE java.lang.StringBuilder ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME data ) NAME data ( INIT = TYPE_3 . METHOD_2 ( VAR_1 ) ) INIT = TYPE_3 . METHOD_2 ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_4> ) TYPE java.util.List<TYPE_4> ( NAME VAR_3 ) NAME VAR_3 ( INIT = new java.util.ArrayList ( data . METHOD_3 ( VAR_1 ) ) ) INIT = new java.util.ArrayList ( data . METHOD_3 ( VAR_1 ) ) ) VAR VAR (  VAR_3 . METHOD_4 ( VAR_4 ) )  VAR_3 . METHOD_4 ( VAR_4 ) ( FOR-EACH FOR-EACH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_5 ) NAME VAR_5 ( IN VAR_3 ) IN VAR_3 ( BLOCK BLOCK (  TYPE_5 . METHOD_1 ( VAR_5 , VAR_2 , VAR_6 , null ) )  TYPE_5 . METHOD_1 ( VAR_5 , VAR_2 , VAR_6 , null ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE long ) TYPE long ( NAME offset ) NAME offset ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND offset < 0 ) COND offset < 0 ( THEN THEN (  throw new java.io.IOException ( ( STRING_1 + offset ) ) ; )  throw new java.io.IOException ( ( STRING_1 + offset ) ) ; ) THEN THEN ) IF IF ( TRY TRY ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( fd , offset , VAR_2 ) )  VAR_1 . METHOD_2 ( fd , offset , VAR_2 ) (  VAR_3 . METHOD_3 ( ) )  VAR_3 . METHOD_3 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( BLOCK BLOCK (  throw VAR_4 . METHOD_4 ( ) ; )  throw VAR_4 . METHOD_4 ( ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE android.bluetooth.BluetoothDevice ) TYPE android.bluetooth.BluetoothDevice ( NAME device ) NAME device ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( TYPE_1 . METHOD_2 ( ) ) ) COND ! ( TYPE_1 . METHOD_2 ( ) ) ( THEN THEN (  android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) )  android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) (  return VAR_1 ; )  return VAR_1 ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME service ) NAME service ( INIT = METHOD_3 ( ) ) INIT = METHOD_3 ( ) ) VAR VAR ( IF IF ( COND service == null ) COND service == null ( THEN THEN (  return VAR_1 ; )  return VAR_1 ; ) THEN THEN ) IF IF (  return service . METHOD_1 ( device ) ; )  return service . METHOD_1 ( device ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  assertEquals ( TYPE_1 . METHOD_2 ( INT_1 ) , 3 ) )  assertEquals ( TYPE_1 . METHOD_2 ( INT_1 ) , 3 ) (  assertEquals ( TYPE_1 . METHOD_2 ( INT_2 ) , 2 ) )  assertEquals ( TYPE_1 . METHOD_2 ( INT_2 ) , 2 ) (  assertEquals ( TYPE_1 . METHOD_2 ( INT_3 ) , 3 ) )  assertEquals ( TYPE_1 . METHOD_2 ( INT_3 ) , 3 ) (  assertEquals ( TYPE_1 . METHOD_2 ( INT_4 ) , 2 ) )  assertEquals ( TYPE_1 . METHOD_2 ( INT_4 ) , 2 ) (  assertEquals ( TYPE_1 . METHOD_2 ( INT_5 ) , 2 ) )  assertEquals ( TYPE_1 . METHOD_2 ( INT_5 ) , 2 ) (  assertEquals ( TYPE_1 . METHOD_2 ( 0 ) , 2 ) )  assertEquals ( TYPE_1 . METHOD_2 ( 0 ) , 2 ) (  assertEquals ( TYPE_1 . METHOD_2 ( INT_6 ) , 2 ) )  assertEquals ( TYPE_1 . METHOD_2 ( INT_6 ) , 2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int[] ) RETURN int[] ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int[] ) TYPE int[] ( NAME src ) NAME src ) VAR VAR ( VAR VAR ( TYPE int[] ) TYPE int[] ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return new int [ ] { TYPE_1 . METHOD_2 ( src [ 0 ] , VAR_1 [ 0 ] ) , TYPE_1 . METHOD_2 ( src [ 1 ] , VAR_1 [ 1 ] ) , TYPE_1 . METHOD_2 ( src [ 2 ] , VAR_1 [ 2 ] ) , TYPE_1 . METHOD_2 ( INT_1 , ( ( src [ 3 ] ) + ( VAR_1 [ 3 ] ) ) ) } ; )  return new int [ ] { TYPE_1 . METHOD_2 ( src [ 0 ] , VAR_1 [ 0 ] ) , TYPE_1 . METHOD_2 ( src [ 1 ] , VAR_1 [ 1 ] ) , TYPE_1 . METHOD_2 ( src [ 2 ] , VAR_1 [ 2 ] ) , TYPE_1 . METHOD_2 ( INT_1 , ( ( src [ 3 ] ) + ( VAR_1 [ 3 ] ) ) ) } ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME args ) NAME args ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND ( ( VAR_4 ) != null ) && ( VAR_3 != 0 ) ) COND ( ( VAR_4 ) != null ) && ( VAR_3 != 0 ) ( THEN THEN (  throw new TYPE_3 ( ( STRING_1 + STRING_2 ) ) ; )  throw new TYPE_3 ( ( STRING_1 + STRING_2 ) ) ; ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_4 ) != null ) COND ( VAR_4 ) != null ( THEN THEN ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_5 ) NAME VAR_5 ( INIT = TYPE_4 . METHOD_3 ( VAR_2 , VAR_2 , STRING_3 , STRING_4 ) ) INIT = TYPE_4 . METHOD_3 ( VAR_2 , VAR_2 , STRING_3 , STRING_4 ) ) VAR VAR ( IF IF ( COND ! VAR_5 ) COND ! VAR_5 ( THEN THEN (  throw new TYPE_3 ( ( STRING_1 + STRING_2 ) ) ; )  throw new TYPE_3 ( ( STRING_1 + STRING_2 ) ) ; ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME status ) NAME status ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME test ) NAME test ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_2 ) != null ) COND ( VAR_2 ) != null ( THEN THEN (  VAR_2 . METHOD_2 ( java.lang.String.format ( STRING_1 , test . METHOD_3 ( ) , test . METHOD_4 ( ) , VAR_3 ) ) )  VAR_2 . METHOD_2 ( java.lang.String.format ( STRING_1 , test . METHOD_3 ( ) , test . METHOD_4 ( ) , VAR_3 ) ) (  VAR_2 . METHOD_2 ( METHOD_5 ( VAR_1 ) ) )  VAR_2 . METHOD_2 ( METHOD_5 ( VAR_1 ) ) ) THEN THEN ) IF IF (  VAR_4 . METHOD_6 ( test ) )  VAR_4 . METHOD_6 ( test ) (  super . METHOD_1 ( VAR_5 , test , VAR_1 ) )  super . METHOD_1 ( VAR_5 , test , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( METHOD_2 ( ) ) ) COND ! ( METHOD_2 ( ) ) ( THEN THEN (  TYPE_2 . METHOD_3 ( VAR_1 ) )  TYPE_2 . METHOD_3 ( VAR_1 ) (  return ; )  return ; ) THEN THEN ) IF IF ( TRY TRY ( BLOCK BLOCK (  METHOD_4 ( ) . METHOD_1 ( VAR_1 ) )  METHOD_4 ( ) . METHOD_1 ( VAR_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME e ) NAME e ( BLOCK BLOCK (  throw e . METHOD_5 ( ) ; )  throw e . METHOD_5 ( ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_3 . METHOD_2 ( VAR_4 ) )  VAR_3 . METHOD_2 ( VAR_4 ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_2 . METHOD_3 ( ) ) INIT = VAR_2 . METHOD_3 ( ) ) VAR VAR (  METHOD_4 ( VAR_5 ) )  METHOD_4 ( VAR_5 ) (  METHOD_5 ( VAR_1 , VAR_5 ) )  METHOD_5 ( VAR_1 , VAR_5 ) (  METHOD_6 ( VAR_1 , VAR_5 ) )  METHOD_6 ( VAR_1 , VAR_5 ) ( VAR VAR ( TYPE TYPE_4<TYPE_5> ) TYPE TYPE_4<TYPE_5> ( NAME VAR_6 ) NAME VAR_6 ( INIT = METHOD_7 ( VAR_1 , VAR_5 ) ) INIT = METHOD_7 ( VAR_1 , VAR_5 ) ) VAR VAR (  TYPE_6 . METHOD_8 ( VAR_6 , VAR_1 , VAR_5 ) )  TYPE_6 . METHOD_8 ( VAR_6 , VAR_1 , VAR_5 ) (  METHOD_9 ( VAR_1 , VAR_2 ) )  METHOD_9 ( VAR_1 , VAR_2 ) (  VAR_3 . METHOD_10 ( null ) )  VAR_3 . METHOD_10 ( null ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < TYPE_1 > ( ) { { METHOD_2 ( TYPE_2 ) ; METHOD_2 ( VAR_2 ) ; } } ) INIT = new java.util.ArrayList < TYPE_1 > ( ) { { METHOD_2 ( TYPE_2 ) ; METHOD_2 ( VAR_2 ) ; } } ) VAR VAR ( STATIC-BLOCK STATIC-BLOCK (  METHOD_2 ( TYPE_2 ) )  METHOD_2 ( TYPE_2 ) (  METHOD_2 ( VAR_2 ) )  METHOD_2 ( VAR_2 ) ) STATIC-BLOCK STATIC-BLOCK (  TYPE_3 . when ( VAR_3 . METHOD_3 ( org.mockito.Matchers . METHOD_4 ( ) , org.mockito.Matchers . METHOD_5 ( VAR_4 class ) ) ) . thenReturn ( VAR_1 ) )  TYPE_3 . when ( VAR_3 . METHOD_3 ( org.mockito.Matchers . METHOD_4 ( ) , org.mockito.Matchers . METHOD_5 ( VAR_4 class ) ) ) . thenReturn ( VAR_1 ) (  METHOD_6 ( TYPE_2 , VAR_2 ) )  METHOD_6 ( TYPE_2 , VAR_2 ) (  assertEquals ( VAR_1 , VAR_5 . METHOD_3 ( TYPE_2 . METHOD_7 ( ) . METHOD_8 ( ) ) ) )  assertEquals ( VAR_1 , VAR_5 . METHOD_3 ( TYPE_2 . METHOD_7 ( ) . METHOD_8 ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( ) )  VAR_1 . METHOD_2 ( ) ( IF IF ( COND ( VAR_2 ) != null ) COND ( VAR_2 ) != null ( THEN THEN (  TYPE_1 . METHOD_3 ( ) )  TYPE_1 . METHOD_3 ( ) ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_3 ) != null ) COND ( VAR_3 ) != null ( THEN THEN (  VAR_3 . METHOD_1 ( ) )  VAR_3 . METHOD_1 ( ) (  VAR_4 . METHOD_1 ( ) )  VAR_4 . METHOD_1 ( ) (  VAR_5 . METHOD_1 ( ) )  VAR_5 . METHOD_1 ( ) ( IF IF ( COND ( VAR_6 ) != null ) COND ( VAR_6 ) != null ( THEN THEN (  VAR_6 . METHOD_1 ( ) )  VAR_6 . METHOD_1 ( ) ) THEN THEN ) IF IF (  VAR_2 . METHOD_1 ( ) )  VAR_2 . METHOD_1 ( ) ) THEN THEN ) IF IF ) BLOCK BLOCK ( FINALLY FINALLY (  VAR_1 . METHOD_4 ( ) )  VAR_1 . METHOD_4 ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_1 ( ) )  VAR_1 . METHOD_1 ( ) ( SYNCHRONIZED SYNCHRONIZED (  this )  this ( BLOCK BLOCK ( IF IF ( COND ( ( VAR_2 ) != null ) && ( VAR_2 . METHOD_2 ( ) ) ) COND ( ( VAR_2 ) != null ) && ( VAR_2 . METHOD_2 ( ) ) ( THEN THEN (  VAR_2 . METHOD_1 ( ) )  VAR_2 . METHOD_1 ( ) (  VAR_2 = null )  VAR_2 = null ) THEN THEN ) IF IF (  TYPE_1 . METHOD_3 ( fd ) )  TYPE_1 . METHOD_3 ( fd ) ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  s = new TYPE_1 ( new TYPE_2 ( STRING_1 ) ) )  s = new TYPE_1 ( new TYPE_2 ( STRING_1 ) ) (  assertNotNull ( s ) )  assertNotNull ( s ) (  s . METHOD_2 ( ) )  s . METHOD_2 ( ) ( TRY TRY ( BLOCK BLOCK (  s = new TYPE_1 ( ( ( TYPE_3 ) ( null ) ) ) )  s = new TYPE_1 ( ( ( TYPE_3 ) ( null ) ) ) (  fail ( STRING_2 ) )  fail ( STRING_2 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.NullPointerException ) TYPE java.lang.NullPointerException ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( new TYPE_2 ( STRING_1 ) , null , TYPE_3 . of ( ) , TYPE_3 . of ( ) , TYPE_3 . of ( ) ) ) INIT = new TYPE_1 ( new TYPE_2 ( STRING_1 ) , null , TYPE_3 . of ( ) , TYPE_3 . of ( ) , TYPE_3 . of ( ) ) ) VAR VAR (  TYPE_4 . METHOD_2 ( VAR_1 . METHOD_3 ( STRING_2 ) ) . METHOD_4 ( STRING_3 ) )  TYPE_4 . METHOD_2 ( VAR_1 . METHOD_3 ( STRING_2 ) ) . METHOD_4 ( STRING_3 ) (  TYPE_4 . METHOD_2 ( VAR_1 . METHOD_3 ( STRING_4 ) ) . METHOD_4 ( STRING_4 ) )  TYPE_4 . METHOD_2 ( VAR_1 . METHOD_3 ( STRING_4 ) ) . METHOD_4 ( STRING_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME uri ) NAME uri ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME action ) NAME action ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME data ) NAME data ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1<java.lang.String> ) TYPE TYPE_1<java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.Object> ) TYPE java.util.Map<java.lang.String,java.lang.Object> ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME flags ) NAME flags ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_5 ) NAME VAR_5 ( INIT = METHOD_2 ( uri , action , data , VAR_1 , VAR_2 , VAR_3 , VAR_4 , flags ) ) INIT = METHOD_2 ( uri , action , data , VAR_1 , VAR_2 , VAR_3 , VAR_4 , flags ) ) VAR VAR (  METHOD_3 ( TYPE_2 . METHOD_4 ( STRING_1 , STRING_2 , VAR_5 . METHOD_5 ( VAR_6 ) ) . METHOD_5 ( VAR_6 ) ) )  METHOD_3 ( TYPE_2 . METHOD_4 ( STRING_1 , STRING_2 , VAR_5 . METHOD_5 ( VAR_6 ) ) . METHOD_5 ( VAR_6 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME request ) NAME request ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_4 . METHOD_2 ( VAR_1 ) )  TYPE_4 . METHOD_2 ( VAR_1 ) ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_3 ( VAR_5 ) ) INIT = METHOD_3 ( VAR_5 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_6 ) NAME VAR_6 ( INIT = new TYPE_5 ( VAR_3 ) ) INIT = new TYPE_5 ( VAR_3 ) ) VAR VAR (  METHOD_1 ( request , VAR_2 , VAR_1 , VAR_4 , VAR_6 ) )  METHOD_1 ( request , VAR_2 , VAR_1 , VAR_4 , VAR_6 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) != null ) COND ( VAR_1 ) != null ( THEN THEN (  return VAR_1 . METHOD_1 ( ) ; )  return VAR_1 . METHOD_1 ( ) ; ) THEN THEN ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  METHOD_2 ( ) )  METHOD_2 ( ) (  android.util.Log.d ( TYPE_3 . TAG , ( STRING_1 + ( VAR_2 ) ) ) )  android.util.Log.d ( TYPE_3 . TAG , ( STRING_1 + ( VAR_2 ) ) ) ( SYNCHRONIZED SYNCHRONIZED (  VAR_3 )  VAR_3 ( BLOCK BLOCK ( IF IF ( COND METHOD_3 ( ) ) COND METHOD_3 ( ) ( THEN THEN (  return TYPE_3 . METHOD_4 ( VAR_2 ) ; )  return TYPE_3 . METHOD_4 ( VAR_2 ) ; ) THEN THEN ( ELSE ELSE (  return null ; )  return null ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  VAR_2 . METHOD_3 ( new TYPE_2 ( VAR_1 ) ) )  VAR_2 . METHOD_3 ( new TYPE_2 ( VAR_1 ) ) ( TRY TRY ( BLOCK BLOCK ( WHILE WHILE ( COND ( VAR_2 . METHOD_4 ( ) ) != ( VAR_3 ) ) COND ( VAR_2 . METHOD_4 ( ) ) != ( VAR_3 ) ( BLOCK BLOCK ) BLOCK BLOCK ) WHILE WHILE (  fail ( ) )  fail ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME expected ) NAME expected ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( new TYPE_2 ( STRING_1 ) , TYPE_3 . METHOD_2 ( ) . METHOD_3 ( ) , TYPE_4 . of ( ) , TYPE_4 . of ( STRING_2 ) ) ) INIT = new TYPE_1 ( new TYPE_2 ( STRING_1 ) , TYPE_3 . METHOD_2 ( ) . METHOD_3 ( ) , TYPE_4 . of ( ) , TYPE_4 . of ( STRING_2 ) ) ) VAR VAR (  TYPE_5 . METHOD_4 ( VAR_1 . METHOD_5 ( VAR_2 , STRING_2 , STRING_3 , STRING_4 , true ) ) . METHOD_6 ( VAR_3 class ) )  TYPE_5 . METHOD_4 ( VAR_1 . METHOD_5 ( VAR_2 , STRING_2 , STRING_3 , STRING_4 , true ) ) . METHOD_6 ( VAR_3 class ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME is ) NAME is ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_4 ( is ) ) INIT = new TYPE_4 ( is ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_5 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) INIT = TYPE_5 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) VAR VAR ( IF IF ( COND VAR_2 == 0 ) COND VAR_2 == 0 ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF (  return new TYPE_1 ( VAR_2 ) ; )  return new TYPE_1 ( VAR_2 ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_3 ( e ) ; )  throw new TYPE_3 ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ( FINALLY FINALLY (  VAR_1 . METHOD_4 ( ) )  VAR_1 . METHOD_4 ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME key ) NAME key ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  return ( VAR_1 . METHOD_1 ( key , ( - 1 ) ) ) == ( VAR_2 ) ; )  return ( VAR_1 . METHOD_1 ( key , ( - 1 ) ) ) == ( VAR_2 ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME e ) NAME e ( BLOCK BLOCK (  android.util.Log.w ( VAR_3 . TAG , STRING_1 , e ) )  android.util.Log.w ( VAR_3 . TAG , STRING_1 , e ) (  return false ; )  return false ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR (  VAR_2 = TYPE_4 . METHOD_2 ( VAR_1 ) )  VAR_2 = TYPE_4 . METHOD_2 ( VAR_1 ) ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( ( TYPE_6 ) ( VAR_2 ) ) . METHOD_3 ( ) ) INIT = ( ( TYPE_6 ) ( VAR_2 ) ) . METHOD_3 ( ) ) VAR VAR (  METHOD_4 ( VAR_3 ) )  METHOD_4 ( VAR_3 ) ( IF IF ( COND ( VAR_4 ) != null ) COND ( VAR_4 ) != null ( THEN THEN (  VAR_2 = new TYPE_7 ( VAR_2 , VAR_4 ) )  VAR_2 = new TYPE_7 ( VAR_2 , VAR_4 ) ) THEN THEN ) IF IF (  VAR_5 . METHOD_5 ( ) )  VAR_5 . METHOD_5 ( ) (  VAR_6 . METHOD_6 ( true , VAR_2 ) )  VAR_6 . METHOD_6 ( true , VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Integer ) RETURN java.lang.Integer ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Integer ) TYPE java.lang.Integer ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  VAR_3 )  VAR_3 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME session ) NAME session ( INIT = VAR_4 . get ( VAR_1 ) ) INIT = VAR_4 . get ( VAR_1 ) ) VAR VAR ( IF IF ( COND session == null ) COND session == null ( THEN THEN (  throw new TYPE_4 ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) ) ; )  throw new TYPE_4 ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_5 ) NAME VAR_5 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  session . METHOD_3 ( null , TYPE_5 . METHOD_4 ( VAR_2 ) , new TYPE_6 ( VAR_5 ) ) )  session . METHOD_3 ( null , TYPE_5 . METHOD_4 ( VAR_2 ) , new TYPE_6 ( VAR_5 ) ) (  return VAR_5 ; )  return VAR_5 ; ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public final ) MODIFIER public final ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ) VAR VAR ( VAR VAR ( TYPE short ) TYPE short ( NAME x ) NAME x ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  throw new TYPE_2 ( ) ; )  throw new TYPE_2 ( ) ; ) THEN THEN ) IF IF ( IF IF ( COND ! ( VAR_2 ) ) COND ! ( VAR_2 ) ( THEN THEN (  throw new TYPE_3 ( STRING_1 ) ; )  throw new TYPE_3 ( STRING_1 ) ; ) THEN THEN ) IF IF (  METHOD_1 ( METHOD_2 ( METHOD_3 ( i , VAR_3 ) ) , x ) )  METHOD_1 ( METHOD_2 ( METHOD_3 ( i , VAR_3 ) ) , x ) (  return this ; )  return this ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME key ) NAME key ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME uid ) NAME uid ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  return ( VAR_2 . METHOD_2 ( VAR_1 , key , uid ) ) == ( VAR_3 ) ; )  return ( VAR_2 . METHOD_2 ( VAR_1 , key , uid ) ) == ( VAR_3 ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME e ) NAME e ( BLOCK BLOCK (  android.util.Log.w ( VAR_4 . TAG , STRING_1 , e ) )  android.util.Log.w ( VAR_4 . TAG , STRING_1 , e ) (  return false ; )  return false ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME field ) NAME field ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME value ) NAME value ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME entry ) NAME entry ( INIT = VAR_4 . get ( field ) ) INIT = VAR_4 . get ( field ) ) VAR VAR ( IF IF ( COND entry == null ) COND entry == null ( THEN THEN (  entry = new TYPE_3 ( field . getName ( ) , TYPE_4 . METHOD_2 ( ) , VAR_1 , source , VAR_2 , VAR_3 , true ) )  entry = new TYPE_3 ( field . getName ( ) , TYPE_4 . METHOD_2 ( ) , VAR_1 , source , VAR_2 , VAR_3 , true ) (  VAR_4 . METHOD_3 ( field , entry ) )  VAR_4 . METHOD_3 ( field , entry ) (  METHOD_4 ( field ) )  METHOD_4 ( field ) ) THEN THEN ) IF IF (  entry . METHOD_5 ( VAR_1 , value ) )  entry . METHOD_5 ( VAR_1 , value ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_2 ( VAR_3 ) ) INIT = VAR_1 . METHOD_2 ( VAR_3 ) ) VAR VAR (  VAR_4 . METHOD_3 ( VAR_2 , METHOD_4 ( VAR_1 ) ) )  VAR_4 . METHOD_3 ( VAR_2 , METHOD_4 ( VAR_1 ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME e ) NAME e ( BLOCK BLOCK (  TYPE_3 . e ( ( ( STRING_1 + ( e.getMessage ( ) ) ) + STRING_2 ) , e ) )  TYPE_3 . e ( ( ( STRING_1 + ( e.getMessage ( ) ) ) + STRING_2 ) , e ) ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ( BLOCK BLOCK (  TYPE_3 . e ( STRING_3 , e ) )  TYPE_3 . e ( STRING_3 , e ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  when ( VAR_1 . METHOD_2 ( METHOD_3 ( ) , METHOD_3 ( ) , METHOD_4 ( ) , METHOD_4 ( ) , METHOD_4 ( ) ) ) . thenReturn ( null ) )  when ( VAR_1 . METHOD_2 ( METHOD_3 ( ) , METHOD_3 ( ) , METHOD_4 ( ) , METHOD_4 ( ) , METHOD_4 ( ) ) ) . thenReturn ( null ) (  VAR_2 . METHOD_5 ( false ) )  VAR_2 . METHOD_5 ( false ) ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_2 . METHOD_6 ( ) ) INIT = VAR_2 . METHOD_6 ( ) ) VAR VAR (  VAR_2 . METHOD_7 ( VAR_4 ) )  VAR_2 . METHOD_7 ( VAR_4 ) ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_2 . METHOD_6 ( ) ) INIT = VAR_2 . METHOD_6 ( ) ) VAR VAR (  assertEquals ( ( VAR_3 * 2 ) , VAR_5 ) )  assertEquals ( ( VAR_3 * 2 ) , VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME address ) NAME address ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( VAR_5 , STRING_1 ) )  METHOD_2 ( VAR_5 , STRING_1 ) ( VAR VAR ( TYPE java.lang.Integer ) TYPE java.lang.Integer ( NAME VAR_6 ) NAME VAR_6 ( INIT = VAR_7 . METHOD_3 ( VAR_1 , address ) ) INIT = VAR_7 . METHOD_3 ( VAR_1 , address ) ) VAR VAR ( IF IF ( COND VAR_6 == null ) COND VAR_6 == null ( THEN THEN (  android.util.Log.d ( VAR_8 . TAG , ( STRING_2 + address ) ) )  android.util.Log.d ( VAR_8 . TAG , ( STRING_2 + address ) ) (  return ; )  return ; ) THEN THEN ) IF IF ( IF IF ( COND VAR_9 ) COND VAR_9 ( THEN THEN (  android.util.Log.d ( VAR_8 . TAG , ( ( ( STRING_3 + address ) + STRING_4 ) + VAR_6 ) ) )  android.util.Log.d ( VAR_8 . TAG , ( ( ( STRING_3 + address ) + STRING_4 ) + VAR_6 ) ) ) THEN THEN ) IF IF (  METHOD_4 ( VAR_1 , VAR_6 , VAR_2 , VAR_3 , VAR_4 ) )  METHOD_4 ( VAR_1 , VAR_6 , VAR_2 , VAR_3 , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  throw new java.lang.NullPointerException ( STRING_1 ) ; )  throw new java.lang.NullPointerException ( STRING_1 ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( IF IF ( COND VAR_2 == 0 ) COND VAR_2 == 0 ( THEN THEN (  return - 1 ; )  return - 1 ; ) THEN THEN ) IF IF (  return TYPE_1 . METHOD_3 ( VAR_2 , VAR_1 ) ; )  return TYPE_1 . METHOD_3 ( VAR_2 , VAR_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME call ) NAME call ( INIT = TYPE_2 . METHOD_2 ( VAR_1 class ) ) INIT = TYPE_2 . METHOD_2 ( VAR_1 class ) ) VAR VAR (  TYPE_2 . when ( call . METHOD_3 ( ) ) . thenReturn ( VAR_2 ) )  TYPE_2 . when ( call . METHOD_3 ( ) ) . thenReturn ( VAR_2 ) (  TYPE_2 . when ( VAR_3 . METHOD_4 ( org.mockito.Matchers . METHOD_5 ( ) ) ) . thenReturn ( call ) )  TYPE_2 . when ( VAR_3 . METHOD_4 ( org.mockito.Matchers . METHOD_5 ( ) ) ) . thenReturn ( call ) (  TYPE_3 . assertTrue ( VAR_4 . METHOD_6 ( ) ) )  TYPE_3 . assertTrue ( VAR_4 . METHOD_6 ( ) ) (  org.mockito.Mockito.verify ( call ) . METHOD_7 ( ) )  org.mockito.Mockito.verify ( call ) . METHOD_7 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( VAR_1 . METHOD_3 ( VAR_2 ) ) )  VAR_1 . METHOD_2 ( VAR_1 . METHOD_3 ( VAR_2 ) ) (  org.mockito.Mockito.verify ( VAR_3 , TYPE_1 . METHOD_4 ( 1 ) ) . METHOD_5 ( TYPE_1 . METHOD_6 ( ) , TYPE_1 . METHOD_7 ( ) , TYPE_1 . METHOD_7 ( ) ) )  org.mockito.Mockito.verify ( VAR_3 , TYPE_1 . METHOD_4 ( 1 ) ) . METHOD_5 ( TYPE_1 . METHOD_6 ( ) , TYPE_1 . METHOD_7 ( ) , TYPE_1 . METHOD_7 ( ) ) (  org.mockito.Mockito.verify ( VAR_4 , TYPE_1 . METHOD_4 ( 1 ) ) . METHOD_8 ( 1 ) )  org.mockito.Mockito.verify ( VAR_4 , TYPE_1 . METHOD_4 ( 1 ) ) . METHOD_8 ( 1 ) (  org.mockito.Mockito.verify ( VAR_4 , TYPE_1 . METHOD_4 ( 1 ) ) . METHOD_9 ( FLOAT_1 ) )  org.mockito.Mockito.verify ( VAR_4 , TYPE_1 . METHOD_4 ( 1 ) ) . METHOD_9 ( FLOAT_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME text ) NAME text ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_6 ) NAME VAR_6 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_7 . METHOD_2 ( ) . METHOD_3 ( VAR_8 , STRING_1 ) )  VAR_7 . METHOD_2 ( ) . METHOD_3 ( VAR_8 , STRING_1 ) (  METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , text , VAR_4 , VAR_5 , VAR_6 , VAR_9 , false , VAR_10 ) )  METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , text , VAR_4 , VAR_5 , VAR_6 , VAR_9 , false , VAR_10 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER synchronized ) MODIFIER synchronized ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME call ) NAME call ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME number ) NAME number ( INIT = TYPE_3 . METHOD_2 ( VAR_1 , call . METHOD_3 ( ) , null ) ) INIT = TYPE_3 . METHOD_2 ( VAR_1 , call . METHOD_3 ( ) , null ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_2 = VAR_3 . get ( call . METHOD_4 ( ) ) ) INIT = VAR_2 = VAR_3 . get ( call . METHOD_4 ( ) ) ) VAR VAR ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN (  VAR_2 . METHOD_5 ( ) )  VAR_2 . METHOD_5 ( ) (  METHOD_6 ( ) )  METHOD_6 ( ) (  return VAR_2 ; )  return VAR_2 ; ) THEN THEN ( ELSE ELSE (  android.util.Log.e ( VAR_4 , ( ( STRING_1 + call ) + STRING_2 ) ) )  android.util.Log.e ( VAR_4 , ( ( STRING_1 + call ) + STRING_2 ) ) (  return null ; )  return null ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_1 ) ( super . METHOD_1 ( ) ) ) ) INIT = ( ( TYPE_1 ) ( super . METHOD_1 ( ) ) ) ) VAR VAR ( VAR VAR ( TYPE char[] ) TYPE char[] ( NAME VAR_2 ) NAME VAR_2 ( INIT = new char [ VAR_3 . length ] ) INIT = new char [ VAR_3 . length ] ) VAR VAR (  TYPE_2 . METHOD_2 ( VAR_3 , 0 , VAR_2 , 0 , VAR_3 . length ) )  TYPE_2 . METHOD_2 ( VAR_3 , 0 , VAR_2 , 0 , VAR_3 . length ) (  VAR_4 = VAR_2 )  VAR_4 = VAR_2 (  VAR_5 = null )  VAR_5 = null (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_4 ( ) ; )  throw new TYPE_4 ( ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return ( ( ( VAR_1 . METHOD_2 ( ) ) || ( ( ( VAR_1 . METHOD_3 ( ) ) != null ) && ( VAR_1 . METHOD_3 ( ) . METHOD_2 ( ) ) ) ) || ( VAR_2 . METHOD_2 ( ) ) ) || ( ( VAR_3 ) == null ) ; )  return ( ( ( VAR_1 . METHOD_2 ( ) ) || ( ( ( VAR_1 . METHOD_3 ( ) ) != null ) && ( VAR_1 . METHOD_3 ( ) . METHOD_2 ( ) ) ) ) || ( VAR_2 . METHOD_2 ( ) ) ) || ( ( VAR_3 ) == null ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  VAR_2 . METHOD_2 ( ) )  VAR_2 . METHOD_2 ( ) ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_1 . METHOD_3 ( VAR_1 ) ) INIT = TYPE_1 . METHOD_3 ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_3 > 0 ) COND VAR_3 > 0 ( THEN THEN (  TYPE_1 . METHOD_4 ( ) . METHOD_5 ( VAR_3 ) )  TYPE_1 . METHOD_4 ( ) . METHOD_5 ( VAR_3 ) ) THEN THEN ) IF IF (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Throwable ) TYPE java.lang.Throwable ( NAME e ) NAME e ( BLOCK BLOCK (  throw TYPE_2 . METHOD_6 ( e ) ; )  throw TYPE_2 . METHOD_6 ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ( FINALLY FINALLY (  VAR_2 . METHOD_7 ( ) )  VAR_2 . METHOD_7 ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . assertTrue ( ( ( TYPE_2 . METHOD_2 ( STRING_1 ) ) != ( VAR_1 ) ) ) )  TYPE_1 . assertTrue ( ( ( TYPE_2 . METHOD_2 ( STRING_1 ) ) != ( VAR_1 ) ) ) ( TRY TRY ( BLOCK BLOCK (  TYPE_2 . METHOD_2 ( null ) )  TYPE_2 . METHOD_2 ( null ) (  TYPE_1 . fail ( ) )  TYPE_1 . fail ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.NullPointerException ) TYPE java.lang.NullPointerException ( NAME expected ) NAME expected ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ( TRY TRY ( BLOCK BLOCK (  TYPE_2 . METHOD_2 ( STRING_2 ) )  TYPE_2 . METHOD_2 ( STRING_2 ) (  TYPE_2 . METHOD_2 ( STRING_3 ) )  TYPE_2 . METHOD_2 ( STRING_3 ) (  TYPE_1 . fail ( ) )  TYPE_1 . fail ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.RuntimeException ) TYPE java.lang.RuntimeException ( NAME expected ) NAME expected ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_1 ( VAR_4 , VAR_2 , ( ( ( VAR_5 ) | ( VAR_6 ) ) | ( VAR_7 ) ) , VAR_1 , VAR_8 ) ) INIT = new TYPE_1 ( VAR_4 , VAR_2 , ( ( ( VAR_5 ) | ( VAR_6 ) ) | ( VAR_7 ) ) , VAR_1 , VAR_8 ) ) VAR VAR (  VAR_3 . METHOD_2 ( session . METHOD_3 ( ) . METHOD_4 ( VAR_9 ) ) )  VAR_3 . METHOD_2 ( session . METHOD_3 ( ) . METHOD_4 ( VAR_9 ) ) (  VAR_3 . METHOD_5 ( false ) )  VAR_3 . METHOD_5 ( false ) (  session . METHOD_6 ( VAR_3 ) )  session . METHOD_6 ( VAR_3 ) (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  return ( ( ( ( METHOD_2 ( ) . METHOD_3 ( TYPE_1 . METHOD_2 ( ) ) ) || ( METHOD_2 ( ) . METHOD_3 ( TYPE_2 . METHOD_2 ( ) ) ) ) || ( METHOD_2 ( ) . METHOD_3 ( TYPE_3 . METHOD_2 ( ) ) ) ) || ( METHOD_2 ( ) . METHOD_3 ( TYPE_4 . METHOD_2 ( ) ) ) ) || ( METHOD_2 ( ) . METHOD_3 ( TYPE_5 . METHOD_2 ( ) ) ) ; )  return ( ( ( ( METHOD_2 ( ) . METHOD_3 ( TYPE_1 . METHOD_2 ( ) ) ) || ( METHOD_2 ( ) . METHOD_3 ( TYPE_2 . METHOD_2 ( ) ) ) ) || ( METHOD_2 ( ) . METHOD_3 ( TYPE_3 . METHOD_2 ( ) ) ) ) || ( METHOD_2 ( ) . METHOD_3 ( TYPE_4 . METHOD_2 ( ) ) ) ) || ( METHOD_2 ( ) . METHOD_3 ( TYPE_5 . METHOD_2 ( ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . log ( VAR_2 , STRING_1 ) )  VAR_1 . log ( VAR_2 , STRING_1 ) ( TRY TRY ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( VAR_3 , new TYPE_2 ( VAR_3 ) , ( ( VAR_4 ) | ( VAR_5 ) ) , VAR_6 ) )  TYPE_1 . METHOD_2 ( VAR_3 , new TYPE_2 ( VAR_3 ) , ( ( VAR_4 ) | ( VAR_5 ) ) , VAR_6 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_1 . log ( VAR_7 , e.getMessage ( ) , e ) )  VAR_1 . log ( VAR_7 , e.getMessage ( ) , e ) (  TYPE_4 . METHOD_3 ( ) )  TYPE_4 . METHOD_3 ( ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Class<?> ) TYPE java.lang.Class<?> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . getName ( ) ) INIT = VAR_1 . getName ( ) ) VAR VAR ( IF IF ( COND VAR_2 . METHOD_2 ( VAR_3 ) ) COND VAR_2 . METHOD_2 ( VAR_3 ) ( THEN THEN (  return VAR_2 ; )  return VAR_2 ; ) THEN THEN ( ELSE ELSE ( IF IF ( COND VAR_2 . METHOD_3 ( VAR_4 ) ) COND VAR_2 . METHOD_3 ( VAR_4 ) ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ( VAR VAR ( TYPE java.lang.Class<?> ) TYPE java.lang.Class<?> ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_1 . METHOD_4 ( ) ) INIT = VAR_1 . METHOD_4 ( ) ) VAR VAR ( IF IF ( COND VAR_5 != null ) COND VAR_5 != null ( THEN THEN (  return TYPE_1 . METHOD_1 ( VAR_5 ) ; )  return TYPE_1 . METHOD_1 ( VAR_5 ) ; ) THEN THEN ( ELSE ELSE (  return null ; )  return null ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME t ) NAME t ( INIT = null ) INIT = null ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  t = new TYPE_1 ( STRING_1 ) )  t = new TYPE_1 ( STRING_1 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  t . METHOD_2 ( VAR_1 , INT_1 ) )  t . METHOD_2 ( VAR_1 , INT_1 ) (  METHOD_3 ( VAR_1 ) )  METHOD_3 ( VAR_1 ) (  t . METHOD_4 ( ) )  t . METHOD_4 ( ) ) BLOCK BLOCK ( FINALLY FINALLY ( IF IF ( COND t != null ) COND t != null ( THEN THEN (  t . METHOD_4 ( ) )  t . METHOD_4 ( ) ) THEN THEN ) IF IF ) FINALLY FINALLY ) TRY TRY ( TRY TRY ( BLOCK BLOCK (  new TYPE_1 ( null ) )  new TYPE_1 ( null ) (  fail ( STRING_2 ) )  fail ( STRING_2 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.NullPointerException ) TYPE java.lang.NullPointerException ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME type ) NAME type ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_3 ) COND VAR_3 ( THEN THEN ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_5 ) INIT = VAR_5 ) VAR VAR ( IF IF ( COND VAR_4 != null ) COND VAR_4 != null ( THEN THEN ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME value ) NAME value ( INIT = TYPE_6 . METHOD_1 ( ( ( TYPE_7 ) ( VAR_4 ) ) ) ) INIT = TYPE_6 . METHOD_1 ( ( ( TYPE_7 ) ( VAR_4 ) ) ) ) VAR VAR ( IF IF ( COND ( value != null ) && ( value . METHOD_2 ( ) ) ) COND ( value != null ) && ( value . METHOD_2 ( ) ) ( THEN THEN (  return value ; )  return value ; ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return super . METHOD_1 ( VAR_1 , VAR_2 , type ) ; )  return super . METHOD_1 ( VAR_1 , VAR_2 , type ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_3 ( ) ) INIT = METHOD_3 ( ) ) VAR VAR ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  METHOD_4 ( VAR_2 class ) )  METHOD_4 ( VAR_2 class ) (  TYPE_2 . METHOD_5 ( ) )  TYPE_2 . METHOD_5 ( ) (  METHOD_4 ( VAR_3 class ) )  METHOD_4 ( VAR_3 class ) ( IF IF ( COND ( ! ( METHOD_6 ( VAR_4 class ) ) ) && ( METHOD_7 ( ) ) ) COND ( ! ( METHOD_6 ( VAR_4 class ) ) ) && ( METHOD_7 ( ) ) ( THEN THEN (  METHOD_8 ( new TYPE_3 ( this , VAR_1 . METHOD_9 ( ) ) ) )  METHOD_8 ( new TYPE_3 ( this , VAR_1 . METHOD_9 ( ) ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( STRING_1 , VAR_2 . METHOD_3 ( ) , VAR_3 ) ) INIT = METHOD_2 ( STRING_1 , VAR_2 . METHOD_3 ( ) , VAR_3 ) ) VAR VAR (  assertEquals ( VAR_4 , VAR_5 . METHOD_4 ( VAR_6 ) . METHOD_5 ( ) ) )  assertEquals ( VAR_4 , VAR_5 . METHOD_4 ( VAR_6 ) . METHOD_5 ( ) ) (  VAR_7 . METHOD_6 ( VAR_6 , VAR_8 , null ) )  VAR_7 . METHOD_6 ( VAR_6 , VAR_8 , null ) (  org.mockito.Mockito.verify ( VAR_3 . METHOD_7 ( ) , TYPE_2 . METHOD_8 ( VAR_9 ) ) . METHOD_6 ( org.mockito.Matchers.eq ( VAR_10 ) , org.mockito.Matchers.eq ( VAR_8 ) , org.mockito.Matchers . METHOD_9 ( VAR_11 . Bundle class ) , org.mockito.Matchers . METHOD_10 ( ) ) )  org.mockito.Mockito.verify ( VAR_3 . METHOD_7 ( ) , TYPE_2 . METHOD_8 ( VAR_9 ) ) . METHOD_6 ( org.mockito.Matchers.eq ( VAR_10 ) , org.mockito.Matchers.eq ( VAR_8 ) , org.mockito.Matchers . METHOD_9 ( VAR_11 . Bundle class ) , org.mockito.Matchers . METHOD_10 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND id == null ) COND id == null ( THEN THEN (  throw new java.lang.NullPointerException ( STRING_1 ) ; )  throw new java.lang.NullPointerException ( STRING_1 ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_3 . METHOD_2 ( VAR_3 , id ) ) INIT = TYPE_3 . METHOD_2 ( VAR_3 , id ) ) VAR VAR ( IF IF ( COND VAR_2 == 0 ) COND VAR_2 == 0 ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_4 ( VAR_2 , this , id ) ) INIT = new TYPE_4 ( VAR_2 , this , id ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  return VAR_4 . METHOD_3 ( VAR_1 ) ; )  return VAR_4 . METHOD_3 ( VAR_1 ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_2 ( e ) ; )  throw new TYPE_2 ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  assertEquals ( VAR_1 . METHOD_3 ( ) . toString ( ) , STRING_1 ) )  assertEquals ( VAR_1 . METHOD_3 ( ) . toString ( ) , STRING_1 ) (  VAR_1 . METHOD_4 ( true ) )  VAR_1 . METHOD_4 ( true ) (  VAR_1 . METHOD_5 ( ) )  VAR_1 . METHOD_5 ( ) (  assertEquals ( VAR_1 . METHOD_3 ( ) . toString ( ) , STRING_2 ) )  assertEquals ( VAR_1 . METHOD_3 ( ) . toString ( ) , STRING_2 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME ex ) NAME ex ( BLOCK BLOCK (  fail ( ( STRING_3 + ex ) ) )  fail ( ( STRING_3 + ex ) ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  android.util.Log.v ( VAR_2 . TAG , STRING_1 ) )  android.util.Log.v ( VAR_2 . TAG , STRING_1 ) (  VAR_3 = new TYPE_2 ( VAR_4 , VAR_1 , VAR_5 ) )  VAR_3 = new TYPE_2 ( VAR_4 , VAR_1 , VAR_5 ) ( IF IF ( COND VAR_6 ) COND VAR_6 ( THEN THEN (  android.util.Log.d ( VAR_2 . TAG , ( ( STRING_2 + ( VAR_3 . METHOD_2 ( ) ) ) + STRING_3 ) ) )  android.util.Log.d ( VAR_2 . TAG , ( ( STRING_2 + ( VAR_3 . METHOD_2 ( ) ) ) + STRING_3 ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME x ) NAME x ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE com.android.jack.ir.ast.JMethod ) TYPE com.android.jack.ir.ast.JMethod ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( IF IF ( COND x . METHOD_2 ( ) ) COND x . METHOD_2 ( ) ( THEN THEN (  VAR_2 = VAR_3 . METHOD_3 ( VAR_4 , TYPE_3 . METHOD_4 ( ) ) )  VAR_2 = VAR_3 . METHOD_3 ( VAR_4 , TYPE_3 . METHOD_4 ( ) ) ) THEN THEN ( ELSE ELSE (  VAR_2 = VAR_3 . METHOD_3 ( VAR_5 , TYPE_3 . METHOD_4 ( ) ) )  VAR_2 = VAR_3 . METHOD_3 ( VAR_5 , TYPE_3 . METHOD_4 ( ) ) ) ELSE ELSE ) IF IF (  METHOD_5 ( new TYPE_4 ( VAR_2 , ( ( TYPE_5 ) ( VAR_2 . METHOD_6 ( ) ) ) , VAR_1 ) ) )  METHOD_5 ( new TYPE_4 ( VAR_2 , ( ( TYPE_5 ) ( VAR_2 . METHOD_6 ( ) ) ) , VAR_1 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 == ( VAR_2 ) ) COND VAR_1 == ( VAR_2 ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( IF IF ( COND ( ( VAR_2 ) != null ) && ( ! ( VAR_2 . METHOD_2 ( ) ) ) ) COND ( ( VAR_2 ) != null ) && ( ! ( VAR_2 . METHOD_2 ( ) ) ) ( THEN THEN (  VAR_2 . METHOD_3 ( ) )  VAR_2 . METHOD_3 ( ) ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_1 != null ) && ( ( VAR_1 . METHOD_4 ( ) ) > 0 ) ) COND ( VAR_1 != null ) && ( ( VAR_1 . METHOD_4 ( ) ) > 0 ) ( THEN THEN (  VAR_2 = VAR_1 )  VAR_2 = VAR_1 ) THEN THEN ( ELSE ELSE (  VAR_2 = null )  VAR_2 = null ) ELSE ELSE ) IF IF (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) == ( VAR_2 ) ) COND ( VAR_1 ) == ( VAR_2 ) ( THEN THEN (  android.util.Log.w ( VAR_3 . TAG , ( ( STRING_1 + ( VAR_4 . METHOD_2 ( ) ) ) + STRING_2 ) ) )  android.util.Log.w ( VAR_3 . TAG , ( ( STRING_1 + ( VAR_4 . METHOD_2 ( ) ) ) + STRING_2 ) ) (  return ; )  return ; ) THEN THEN ) IF IF (  android.util.Log.w ( VAR_3 . TAG , STRING_3 ) )  android.util.Log.w ( VAR_3 . TAG , STRING_3 ) (  VAR_4 . METHOD_3 ( ) )  VAR_4 . METHOD_3 ( ) (  VAR_5 . METHOD_4 ( ) )  VAR_5 . METHOD_4 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME input ) NAME input ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.Class<?> ) TYPE java.lang.Class<?> ( NAME c ) NAME c ( INIT = java.lang.Class . METHOD_2 ( STRING_1 ) ) INIT = java.lang.Class . METHOD_2 ( STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME m ) NAME m ( INIT = c . METHOD_3 ( STRING_2 , new java.lang.Class [ ] { int . class } ) ) INIT = c . METHOD_3 ( STRING_2 , new java.lang.Class [ ] { int . class } ) ) VAR VAR (  return ( ( java.lang.Integer ) ( m . invoke ( null , input ) ) ) ; )  return ( ( java.lang.Integer ) ( m . invoke ( null , input ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) != null ) COND ( VAR_1 ) != null ( THEN THEN (  METHOD_2 ( VAR_1 , VAR_2 ) )  METHOD_2 ( VAR_1 , VAR_2 ) ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_3 ) != null ) COND ( VAR_3 ) != null ( THEN THEN ( IF IF ( COND ! ( VAR_3 . METHOD_3 ( ) ) ) COND ! ( VAR_3 . METHOD_3 ( ) ) ( THEN THEN (  android.util.Slog.w ( com.android.server.pm.PackageManagerService.TAG , ( STRING_1 + ( VAR_3 . METHOD_4 ( ) ) ) ) )  android.util.Slog.w ( com.android.server.pm.PackageManagerService.TAG , ( STRING_1 + ( VAR_3 . METHOD_4 ( ) ) ) ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_1 ) ( super . METHOD_1 ( ) ) ) ) INIT = ( ( TYPE_1 ) ( super . METHOD_1 ( ) ) ) ) VAR VAR ( IF IF ( COND ( VAR_2 ) != null ) COND ( VAR_2 ) != null ( THEN THEN (  VAR_3 = new TYPE_2 ( VAR_2 . get ( ) , VAR_4 , VAR_1 ) )  VAR_3 = new TYPE_2 ( VAR_2 . get ( ) , VAR_4 , VAR_1 ) ) THEN THEN ) IF IF (  VAR_5 = null )  VAR_5 = null (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_4 ( ) ; )  throw new TYPE_4 ( ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  android.util.Slog.v ( com.android.server.am.ActivityManagerService.TAG , ( ( ( STRING_1 + ( this ) ) + STRING_2 ) + ( VAR_2 . METHOD_2 ( ) ) ) ) )  android.util.Slog.v ( com.android.server.am.ActivityManagerService.TAG , ( ( ( STRING_1 + ( this ) ) + STRING_2 ) + ( VAR_2 . METHOD_2 ( ) ) ) ) ) THEN THEN ) IF IF (  METHOD_3 ( VAR_3 ) )  METHOD_3 ( VAR_3 ) ( SYNCHRONIZED SYNCHRONIZED (  this )  this ( BLOCK BLOCK (  METHOD_4 ( VAR_3 , VAR_4 , VAR_2 ) )  METHOD_4 ( VAR_3 , VAR_4 , VAR_2 ) ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( VAR_5 , VAR_1 , VAR_4 ) )  METHOD_2 ( VAR_5 , VAR_1 , VAR_4 ) ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  METHOD_2 ( VAR_6 , VAR_1 , VAR_4 ) )  METHOD_2 ( VAR_6 , VAR_1 , VAR_4 ) ) THEN THEN ) IF IF ( IF IF ( COND VAR_3 ) COND VAR_3 ( THEN THEN (  METHOD_3 ( VAR_7 , VAR_1 ) )  METHOD_3 ( VAR_7 , VAR_1 ) ) THEN THEN ( ELSE ELSE (  METHOD_4 ( VAR_7 , VAR_1 ) )  METHOD_4 ( VAR_7 , VAR_1 ) ) ELSE ELSE ) IF IF (  METHOD_2 ( VAR_8 , VAR_1 , VAR_4 ) )  METHOD_2 ( VAR_8 , VAR_1 , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_2 ( VAR_1 ) ) INIT = new TYPE_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND ( ! VAR_2 ) || ( ! ( TYPE_3 . METHOD_2 ( VAR_1 . getName ( ) ) ) ) ) COND ( ! VAR_2 ) || ( ! ( TYPE_3 . METHOD_2 ( VAR_1 . getName ( ) ) ) ) ( THEN THEN (  return VAR_3 ; )  return VAR_3 ; ) THEN THEN ) IF IF (  return new TYPE_4 ( VAR_1 ) ; )  return new TYPE_4 ( VAR_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME id ) NAME id ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND id == null ) COND id == null ( THEN THEN (  throw new java.lang.NullPointerException ( STRING_1 ) ; )  throw new java.lang.NullPointerException ( STRING_1 ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_3 . METHOD_2 ( VAR_2 , id ) ) INIT = TYPE_3 . METHOD_2 ( VAR_2 , id ) ) VAR VAR ( IF IF ( COND VAR_1 == 0 ) COND VAR_1 == 0 ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_4 ( VAR_1 , this , id ) ) INIT = new TYPE_4 ( VAR_1 , this , id ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  return VAR_3 . METHOD_3 ( ) ; )  return VAR_3 . METHOD_3 ( ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_2 ( e ) ; )  throw new TYPE_2 ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME w ) NAME w ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME h ) NAME h ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME d ) NAME d ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( VAR_5 , STRING_1 ) )  TYPE_1 . METHOD_2 ( VAR_5 , STRING_1 ) (  METHOD_3 ( VAR_1 , VAR_2 , VAR_3 , w , h , d , VAR_4 , METHOD_4 ( VAR_4 , true ) , TYPE_2 . METHOD_5 ( VAR_4 ) ) )  METHOD_3 ( VAR_1 , VAR_2 , VAR_3 , w , h , d , VAR_4 , METHOD_4 ( VAR_4 , true ) , TYPE_2 . METHOD_5 ( VAR_4 ) ) (  TYPE_1 . METHOD_6 ( VAR_5 ) )  TYPE_1 . METHOD_6 ( VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME method ) NAME method ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND method == null ) COND method == null ( THEN THEN (  throw new java.lang.NullPointerException ( STRING_1 ) ; )  throw new java.lang.NullPointerException ( STRING_1 ) ; ) THEN THEN ) IF IF (  METHOD_2 ( ) )  METHOD_2 ( ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ( INIT = VAR_1 . get ( method ) ) INIT = VAR_1 . get ( method ) ) VAR VAR ( IF IF ( COND result == null ) COND result == null ( THEN THEN (  result = new TYPE_1 ( method ) )  result = new TYPE_1 ( method ) (  VAR_1 . METHOD_3 ( method , result ) )  VAR_1 . METHOD_3 ( method , result ) ) THEN THEN ) IF IF (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( ( ( VAR_2 [ ( VAR_1 - 1 ) ] ) == CHAR_1 ) && ( ( VAR_2 [ ( VAR_1 - 2 ) ] ) == CHAR_2 ) ) && ( ( VAR_2 [ ( VAR_1 - 3 ) ] ) == CHAR_3 ) ) && ( ( VAR_2 [ ( VAR_1 - 4 ) ] ) == CHAR_4 ) ) COND ( ( ( ( VAR_2 [ ( VAR_1 - 1 ) ] ) == CHAR_1 ) && ( ( VAR_2 [ ( VAR_1 - 2 ) ] ) == CHAR_2 ) ) && ( ( VAR_2 [ ( VAR_1 - 3 ) ] ) == CHAR_3 ) ) && ( ( VAR_2 [ ( VAR_1 - 4 ) ] ) == CHAR_4 ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) ( IF IF ( COND ( VAR_1 ) != null ) COND ( VAR_1 ) != null ( THEN THEN (  VAR_1 . METHOD_2 ( ) )  VAR_1 . METHOD_2 ( ) ) THEN THEN ) IF IF (  METHOD_3 ( ) )  METHOD_3 ( ) (  VAR_2 = false )  VAR_2 = false ( IF IF ( COND ( VAR_3 ) != null ) COND ( VAR_3 ) != null ( THEN THEN (  VAR_3 . METHOD_4 ( this , VAR_4 ) )  VAR_3 . METHOD_4 ( this , VAR_4 ) ) THEN THEN ) IF IF (  VAR_5 . METHOD_5 ( ) )  VAR_5 . METHOD_5 ( ) (  METHOD_6 ( VAR_6 ) )  METHOD_6 ( VAR_6 ) (  VAR_7 . METHOD_7 ( ) )  VAR_7 . METHOD_7 ( ) ( IF IF ( COND VAR_8 ) COND VAR_8 ( THEN THEN (  VAR_9 . METHOD_8 ( this ) )  VAR_9 . METHOD_8 ( this ) (  VAR_9 = null )  VAR_9 = null ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( VAR_3 , VAR_1 ) ) INIT = METHOD_2 ( VAR_3 , VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_2 . equals ( TYPE_3 ) ) COND VAR_2 . equals ( TYPE_3 ) ( THEN THEN (  return VAR_4 ; )  return VAR_4 ; ) THEN THEN ( ELSE ELSE ( IF IF ( COND VAR_2 . equals ( TYPE_4 ) ) COND VAR_2 . equals ( TYPE_4 ) ( THEN THEN (  return VAR_5 ; )  return VAR_5 ; ) THEN THEN ( ELSE ELSE ( IF IF ( COND VAR_2 . equals ( TYPE_5 ) ) COND VAR_2 . equals ( TYPE_5 ) ( THEN THEN (  return VAR_6 ; )  return VAR_6 ; ) THEN THEN ( ELSE ELSE (  return null ; )  return null ; ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME n ) NAME n ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 >= VAR_2 ) || ( n < 0 ) ) COND ( VAR_1 >= VAR_2 ) || ( n < 0 ) ( THEN THEN (  return 0 ; )  return 0 ; ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_1 + n ) > VAR_2 ) COND ( VAR_1 + n ) > VAR_2 ( THEN THEN (  return VAR_2 - VAR_1 ; )  return VAR_2 - VAR_1 ; ) THEN THEN ) IF IF (  return n ; )  return n ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 . METHOD_2 ( ) ) COND VAR_1 . METHOD_2 ( ) ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_2 ) NAME VAR_2 ( IN VAR_1 . METHOD_3 ( ) ) IN VAR_1 . METHOD_3 ( ) ( BLOCK BLOCK ( IF IF ( COND VAR_2 . METHOD_4 ( ) ) COND VAR_2 . METHOD_4 ( ) ( THEN THEN (  METHOD_1 ( VAR_2 ) )  METHOD_1 ( VAR_2 ) ) THEN THEN ( ELSE ELSE (  VAR_2 . METHOD_5 ( ) )  VAR_2 . METHOD_5 ( ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  VAR_1 . METHOD_5 ( ) )  VAR_1 . METHOD_5 ( ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME b ) NAME b ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  METHOD_2 ( VAR_1 , b , VAR_2 ) )  METHOD_2 ( VAR_1 , b , VAR_2 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( BLOCK BLOCK ( IF IF ( COND ( ( VAR_4 ) == null ) || ( ! ( VAR_4 . METHOD_3 ( ) ) ) ) COND ( ( VAR_4 ) == null ) || ( ! ( VAR_4 . METHOD_3 ( ) ) ) ( THEN THEN (  throw VAR_3 ; )  throw VAR_3 ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public synchronized ) MODIFIER public synchronized ( RETURN void ) RETURN void ( NAME run ) NAME run ( PARAMS PARAMS ( VAR VAR ( TYPE com.android.jack.ir.ast.JDefinedClassOrInterface ) TYPE com.android.jack.ir.ast.JDefinedClassOrInterface ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 . METHOD_1 ( ) ) == ( VAR_2 ) ) COND ( VAR_1 . METHOD_1 ( ) ) == ( VAR_2 ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_1 . METHOD_1 ( ) . METHOD_5 ( ) , VAR_1 ) )  TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_1 . METHOD_1 ( ) . METHOD_5 ( ) , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME field ) NAME field ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND field == null ) COND field == null ( THEN THEN (  throw new java.lang.NullPointerException ( STRING_1 ) ; )  throw new java.lang.NullPointerException ( STRING_1 ) ; ) THEN THEN ) IF IF (  METHOD_2 ( ) )  METHOD_2 ( ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ( INIT = VAR_1 . get ( field ) ) INIT = VAR_1 . get ( field ) ) VAR VAR ( IF IF ( COND result == null ) COND result == null ( THEN THEN (  result = new TYPE_1 ( field ) )  result = new TYPE_1 ( field ) (  VAR_1 . METHOD_3 ( field , result ) )  VAR_1 . METHOD_3 ( field , result ) ) THEN THEN ) IF IF (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME w ) NAME w ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME h ) NAME h ) VAR VAR ( VAR VAR ( TYPE float[] ) TYPE float[] ( NAME data ) NAME data ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  mRS . METHOD_2 ( ) )  mRS . METHOD_2 ( ) (  METHOD_3 ( VAR_1 , VAR_2 , w , h ) )  METHOD_3 ( VAR_1 , VAR_2 , w , h ) (  mRS . METHOD_4 ( METHOD_5 ( ) , VAR_1 , VAR_2 , VAR_3 , VAR_4 , w , h , data , ( ( data . length ) * 4 ) ) )  mRS . METHOD_4 ( METHOD_5 ( ) , VAR_1 , VAR_2 , VAR_3 , VAR_4 , w , h , data , ( ( data . length ) * 4 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  when ( VAR_1 . METHOD_2 ( eq ( 0 ) , METHOD_3 ( ) ) ) . thenReturn ( true ) )  when ( VAR_1 . METHOD_2 ( eq ( 0 ) , METHOD_3 ( ) ) ) . thenReturn ( true ) (  METHOD_4 ( ) )  METHOD_4 ( ) (  VAR_2 . METHOD_5 ( VAR_3 , 0 , VAR_4 ) )  VAR_2 . METHOD_5 ( VAR_3 , 0 , VAR_4 ) (  VAR_5 . METHOD_6 ( ) )  VAR_5 . METHOD_6 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME m ) NAME m ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME v ) NAME v ) VAR VAR ( VAR VAR ( TYPE char ) TYPE char ( NAME value ) NAME value ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = false ) INIT = false ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( IF IF ( COND v == null ) COND v == null ( THEN THEN (  m . METHOD_2 ( value ) )  m . METHOD_2 ( value ) ) THEN THEN ( ELSE ELSE (  m . METHOD_2 ( v , value ) )  m . METHOD_2 ( v , value ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_2 = true )  VAR_2 = true ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  TYPE_4 . assertEquals ( VAR_2 , VAR_1 ) )  TYPE_4 . assertEquals ( VAR_2 , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<?extendsTYPE_2> ) RETURN TYPE_1<?extendsTYPE_2> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_3 ( ) ) INIT = METHOD_3 ( ) ) VAR VAR ( IF IF ( COND VAR_2 == null ) COND VAR_2 == null ( THEN THEN (  return TYPE_5 . METHOD_4 ( ) ; )  return TYPE_5 . METHOD_4 ( ) ; ) THEN THEN ) IF IF (  return new TYPE_6 ( METHOD_5 ( ) , VAR_1 , VAR_2 ) . METHOD_1 ( ) ; )  return new TYPE_6 ( METHOD_5 ( ) , VAR_1 , VAR_2 ) . METHOD_1 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME v ) NAME v ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME VAR_6 ) NAME VAR_6 ( INIT = Main . METHOD_2 ( VAR_7 , VAR_8 , VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ) INIT = Main . METHOD_2 ( VAR_7 , VAR_8 , VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ) VAR VAR ( IF IF ( COND ( ( VAR_7 ) == 0 ) && ( ( VAR_8 ) == null ) ) COND ( ( VAR_7 ) == 0 ) && ( ( VAR_8 ) == null ) ( THEN THEN (  v . METHOD_3 ( VAR_6 , VAR_5 ) )  v . METHOD_3 ( VAR_6 , VAR_5 ) ) THEN THEN ( ELSE ELSE (  TYPE_3 . METHOD_4 ( VAR_6 ) )  TYPE_3 . METHOD_4 ( VAR_6 ) ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_9 ) NAME VAR_9 ( IN VAR_6 ) IN VAR_6 ( BLOCK BLOCK (  java.lang.System.out.println ( VAR_9 ) )  java.lang.System.out.println ( VAR_9 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_1 ( VAR_2 ) ) INIT = TYPE_1 . METHOD_1 ( VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME s ) NAME s ( INIT = new TYPE_2 ( VAR_1 ) ) INIT = new TYPE_2 ( VAR_1 ) ) VAR VAR (  VAR_1 . METHOD_2 ( VAR_3 ) )  VAR_1 . METHOD_2 ( VAR_3 ) ( IF IF ( COND ! ( METHOD_3 ( s ) ) ) COND ! ( METHOD_3 ( s ) ) ( THEN THEN (  METHOD_4 ( ) )  METHOD_4 ( ) ) THEN THEN ( ELSE ELSE (  s . METHOD_5 ( ) )  s . METHOD_5 ( ) (  VAR_1 . METHOD_6 ( ) )  VAR_1 . METHOD_6 ( ) (  METHOD_7 ( ) )  METHOD_7 ( ) ) ELSE ELSE ) IF IF (  VAR_1 . METHOD_8 ( ) )  VAR_1 . METHOD_8 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME t ) NAME t ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 class . METHOD_2 ( STRING_1 ) ) INIT = VAR_2 class . METHOD_2 ( STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_2 class . METHOD_2 ( STRING_2 ) ) INIT = VAR_2 class . METHOD_2 ( STRING_2 ) ) VAR VAR (  VAR_1 . invoke ( t ) )  VAR_1 . invoke ( t ) (  t . METHOD_3 ( ) )  t . METHOD_3 ( ) (  VAR_3 . invoke ( t ) )  VAR_3 . invoke ( t ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ( BLOCK BLOCK (  java.lang.System.out.println ( ( STRING_3 + ( e.toString ( ) ) ) ) )  java.lang.System.out.println ( ( STRING_3 + ( e.toString ( ) ) ) ) (  e . METHOD_4 ( ) )  e . METHOD_4 ( ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SWITCH SWITCH ( NAME VAR_2 ) NAME VAR_2 ( CASE VAR_3 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_2 . METHOD_2 ( this ) ) INIT = TYPE_2 . METHOD_2 ( this ) ) VAR VAR (  VAR_4 . METHOD_3 ( ) )  VAR_4 . METHOD_3 ( ) (  VAR_5 = true )  VAR_5 = true (  TYPE_3 . METHOD_4 ( this , METHOD_5 ( VAR_6 ) , VAR_7 ) . METHOD_6 ( ) )  TYPE_3 . METHOD_4 ( this , METHOD_5 ( VAR_6 ) , VAR_7 ) . METHOD_6 ( ) ( VAR VAR ( TYPE android.content.Intent ) TYPE android.content.Intent ( NAME in ) NAME in ( INIT = new android.content.Intent ( this , VAR_8 class ) ) INIT = new android.content.Intent ( this , VAR_8 class ) ) VAR VAR (  in . METHOD_7 ( VAR_9 ) )  in . METHOD_7 ( VAR_9 ) (  this . METHOD_8 ( in ) )  this . METHOD_8 ( in ) (  METHOD_9 ( ) )  METHOD_9 ( ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_3 ( CASE VAR_10 ( BLOCK BLOCK (  METHOD_9 ( ) )  METHOD_9 ( ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_10 ) SWITCH SWITCH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_2 ( ) ) INIT = VAR_2 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE double ) TYPE double ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( METHOD_3 ( VAR_2 . METHOD_4 ( ) ) ) * FLOAT_1 ) INIT = ( METHOD_3 ( VAR_2 . METHOD_4 ( ) ) ) * FLOAT_1 ) VAR VAR (  VAR_4 . METHOD_5 ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) ) )  VAR_4 . METHOD_5 ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) ) ( IF IF ( COND VAR_1 < 1 ) COND VAR_1 < 1 ( THEN THEN (  VAR_4 . METHOD_6 ( VAR_5 ) )  VAR_4 . METHOD_6 ( VAR_5 ) ) THEN THEN ( ELSE ELSE (  VAR_4 . METHOD_6 ( TYPE_1 . METHOD_7 ( ) ) )  VAR_4 . METHOD_6 ( TYPE_1 . METHOD_7 ( ) ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME id ) NAME id ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME p ) NAME p ( INIT = VAR_1 ) INIT = VAR_1 ) VAR VAR ( SWITCH SWITCH ( NAME id ) NAME id ( CASE VAR_2 ( BLOCK BLOCK (  VAR_3 = VAR_4 )  VAR_3 = VAR_4 (  VAR_5 = METHOD_2 ( VAR_6 ) )  VAR_5 = METHOD_2 ( VAR_6 ) (  VAR_7 = METHOD_3 ( VAR_2 ) )  VAR_7 = METHOD_3 ( VAR_2 ) (  VAR_8 = METHOD_2 ( VAR_9 ) )  VAR_8 = METHOD_2 ( VAR_9 ) (  VAR_10 = this )  VAR_10 = this (  VAR_11 = METHOD_2 ( VAR_12 ) )  VAR_11 = METHOD_2 ( VAR_12 ) (  VAR_13 = this )  VAR_13 = this (  METHOD_4 ( ) )  METHOD_4 ( ) (  VAR_14 = VAR_15 . METHOD_5 ( VAR_16 ) )  VAR_14 = VAR_15 . METHOD_5 ( VAR_16 ) (  VAR_14 . METHOD_6 ( false ) )  VAR_14 . METHOD_6 ( false ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_2 ( DEFAULT DEFAULT ( BLOCK BLOCK (  break ; )  break ; ) BLOCK BLOCK ) DEFAULT DEFAULT ) SWITCH SWITCH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( VAR_1 ) )  METHOD_2 ( VAR_1 ) (  VAR_2 . METHOD_3 ( STRING_1 , STRING_2 , VAR_3 . TAG , null , null , null , null , false ) )  VAR_2 . METHOD_3 ( STRING_1 , STRING_2 , VAR_3 . TAG , null , null , null , null , false ) (  org.mockito.Mockito.verify ( VAR_4 ) . METHOD_4 ( TYPE_1 . eq ( STRING_3 ) , TYPE_1 . eq ( STRING_4 ) , TYPE_1 . eq ( 0 ) , TYPE_1 . eq ( 0 ) , org.mockito.Matchers . METHOD_5 ( VAR_5 class ) ) )  org.mockito.Mockito.verify ( VAR_4 ) . METHOD_4 ( TYPE_1 . eq ( STRING_3 ) , TYPE_1 . eq ( STRING_4 ) , TYPE_1 . eq ( 0 ) , TYPE_1 . eq ( 0 ) , org.mockito.Matchers . METHOD_5 ( VAR_5 class ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_3 . METHOD_2 ( VAR_1 ) )  VAR_3 . METHOD_2 ( VAR_1 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME response ) NAME response ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  VAR_4 = VAR_2 . type )  VAR_4 = VAR_2 . type (  VAR_5 = VAR_6 )  VAR_5 = VAR_6 (  VAR_7 = VAR_8 )  VAR_7 = VAR_8 ( IF IF ( COND RIL . RILJ_LOGD ) COND RIL . RILJ_LOGD ( THEN THEN (  VAR_3 . METHOD_3 ( VAR_9 , response ) )  VAR_3 . METHOD_3 ( VAR_9 , response ) ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_10 ) != null ) COND ( VAR_10 ) != null ( THEN THEN (  VAR_10 . METHOD_4 ( new android.os.AsyncResult ( null , response , null ) ) )  VAR_10 . METHOD_4 ( new android.os.AsyncResult ( null , response , null ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( ( VAR_4 ) >= ( VAR_5 ) ) ? VAR_6 : VAR_7 ) INIT = ( ( VAR_4 ) >= ( VAR_5 ) ) ? VAR_6 : VAR_7 ) VAR VAR (  return VAR_3 . METHOD_2 ( ) . METHOD_3 ( VAR_1 ) . METHOD_4 ( VAR_8 , java.lang.String . METHOD_5 ( VAR_2 ) ) . METHOD_4 ( VAR_9 , STRING_1 ) . METHOD_4 ( VAR_10 , VAR_11 ) . build ( ) ; )  return VAR_3 . METHOD_2 ( ) . METHOD_3 ( VAR_1 ) . METHOD_4 ( VAR_8 , java.lang.String . METHOD_5 ( VAR_2 ) ) . METHOD_4 ( VAR_9 , STRING_1 ) . METHOD_4 ( VAR_10 , VAR_11 ) . build ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ( ( FLOAT_1 - ( cts ) ) - ( VAR_1 ) ) ) )  METHOD_2 ( ( ( FLOAT_1 - ( cts ) ) - ( VAR_1 ) ) ) (  VAR_2 . METHOD_3 ( VAR_3 ) )  VAR_2 . METHOD_3 ( VAR_3 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_2 . METHOD_4 ( ) ) INIT = VAR_2 . METHOD_4 ( ) ) VAR VAR (  VAR_4 = new TYPE_1 ( ( ( VAR_5 ) | ( VAR_6 ) ) , VAR_7 , VAR_8 ) )  VAR_4 = new TYPE_1 ( ( ( VAR_5 ) | ( VAR_6 ) ) , VAR_7 , VAR_8 ) (  VAR_2 . METHOD_5 ( VAR_4 ) )  VAR_2 . METHOD_5 ( VAR_4 ) (  METHOD_6 ( ) )  METHOD_6 ( ) (  METHOD_7 ( VAR_9 , false , false ) )  METHOD_7 ( VAR_9 , false , false ) (  status = VAR_10 )  status = VAR_10 ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE android.bluetooth.BluetoothDevice ) TYPE android.bluetooth.BluetoothDevice ( NAME device ) NAME device ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  android.util.Log.v ( VAR_2 . TAG , ( STRING_1 + device ) ) )  android.util.Log.v ( VAR_2 . TAG , ( STRING_1 + device ) ) ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME service ) NAME service ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( IF IF ( COND service == null ) COND service == null ( THEN THEN (  return VAR_3 ; )  return VAR_3 ; ) THEN THEN ) IF IF (  return service . METHOD_1 ( device ) ; )  return service . METHOD_1 ( device ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( VAR_3 . METHOD_3 ( ) , VAR_4 , VAR_5 . METHOD_4 ( ) , VAR_6 , VAR_7 , VAR_8 ) ) INIT = METHOD_2 ( VAR_3 . METHOD_3 ( ) , VAR_4 , VAR_5 . METHOD_4 ( ) , VAR_6 , VAR_7 , VAR_8 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_9 ) NAME VAR_9 ( INIT = METHOD_5 ( VAR_2 . METHOD_6 ( ) , ( - ( VAR_1 . METHOD_7 ( ) ) ) ) ) INIT = METHOD_5 ( VAR_2 . METHOD_6 ( ) , ( - ( VAR_1 . METHOD_7 ( ) ) ) ) ) VAR VAR (  VAR_2 . METHOD_8 ( VAR_9 ) )  VAR_2 . METHOD_8 ( VAR_9 ) (  VAR_5 . METHOD_9 ( VAR_2 ) )  VAR_5 . METHOD_9 ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private synchronized ) MODIFIER private synchronized ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 == null ) || ( ( VAR_1 . length ( ) ) == 0 ) ) COND ( VAR_1 == null ) || ( ( VAR_1 . length ( ) ) == 0 ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  METHOD_2 ( null , VAR_1 ) )  METHOD_2 ( null , VAR_1 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_1 . METHOD_3 ( ) ) INIT = TYPE_1 . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE java.util.Set<java.lang.String> ) TYPE java.util.Set<java.lang.String> ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_4 ( VAR_1 ) ) INIT = METHOD_4 ( VAR_1 ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( IN VAR_3 ) IN VAR_3 ( BLOCK BLOCK (  METHOD_5 ( VAR_2 , VAR_4 ) )  METHOD_5 ( VAR_2 , VAR_4 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  METHOD_6 ( ) )  METHOD_6 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME fd ) NAME fd ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  METHOD_2 ( fd , VAR_1 ) )  METHOD_2 ( fd , VAR_1 ) (  fail ( STRING_1 ) )  fail ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME expected ) NAME expected ( BLOCK BLOCK (  assertEquals ( VAR_2 , VAR_3 ) )  assertEquals ( VAR_2 , VAR_3 ) ) BLOCK BLOCK ) CATCH CATCH ( FINALLY FINALLY (  TYPE_3 . METHOD_3 ( fd ) )  TYPE_3 . METHOD_3 ( fd ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ! ( TYPE_1 . METHOD_2 ( ) ) ) COND ! ( TYPE_1 . METHOD_2 ( ) ) ( THEN THEN (  android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) )  android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME service ) NAME service ( INIT = METHOD_3 ( ) ) INIT = METHOD_3 ( ) ) VAR VAR ( IF IF ( COND service == null ) COND service == null ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  return service . METHOD_1 ( ) ; )  return service . METHOD_1 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME s ) NAME s ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  android.util.Log.v ( VAR_2 . TAG , ( STRING_1 + s ) ) )  android.util.Log.v ( VAR_2 . TAG , ( STRING_1 + s ) ) ) THEN THEN ) IF IF ( TRY TRY ( BLOCK BLOCK ( IF IF ( COND s != null ) COND s != null ( THEN THEN (  s . METHOD_2 ( ) )  s . METHOD_2 ( ) ) THEN THEN ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  android.util.Log.e ( VAR_2 . TAG , STRING_2 ) )  android.util.Log.e ( VAR_2 . TAG , STRING_2 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  VAR_3 . METHOD_3 ( VAR_4 ) . METHOD_4 ( ) )  VAR_3 . METHOD_3 ( VAR_4 ) . METHOD_4 ( ) (  return ; )  return ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_3 ( STRING_1 , VAR_3 ) ) INIT = METHOD_3 ( STRING_1 , VAR_3 ) ) VAR VAR (  TYPE_3 . when ( VAR_4 . METHOD_4 ( TYPE_4 . METHOD_5 ( VAR_5 class ) ) ) . thenReturn ( VAR_2 ) )  TYPE_3 . when ( VAR_4 . METHOD_4 ( TYPE_4 . METHOD_5 ( VAR_5 class ) ) ) . thenReturn ( VAR_2 ) ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_6 ) NAME VAR_6 ( INIT = VAR_7 . METHOD_6 ( ) ) INIT = VAR_7 . METHOD_6 ( ) ) VAR VAR (  assertEquals ( VAR_6 , STRING_2 ) )  assertEquals ( VAR_6 , STRING_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( mContext ) ) INIT = new TYPE_2 ( mContext ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME state ) NAME state ) VAR VAR (  assertFalse ( VAR_1 . METHOD_2 ( ) ) )  assertFalse ( VAR_1 . METHOD_2 ( ) ) (  assertFalse ( VAR_1 . METHOD_3 ( ) ) )  assertFalse ( VAR_1 . METHOD_3 ( ) ) (  state = VAR_1 . METHOD_4 ( ) )  state = VAR_1 . METHOD_4 ( ) (  assertNotNull ( state ) )  assertNotNull ( state ) (  assertTrue ( VAR_1 . METHOD_3 ( ) ) )  assertTrue ( VAR_1 . METHOD_3 ( ) ) (  VAR_1 . METHOD_5 ( true ) )  VAR_1 . METHOD_5 ( true ) (  VAR_1 . METHOD_6 ( state ) )  VAR_1 . METHOD_6 ( state ) (  assertFalse ( VAR_1 . METHOD_2 ( ) ) )  assertFalse ( VAR_1 . METHOD_2 ( ) ) (  assertTrue ( VAR_1 . METHOD_7 ( ) ) )  assertTrue ( VAR_1 . METHOD_7 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_2 ( this , VAR_3 ) ) INIT = TYPE_2 . METHOD_2 ( this , VAR_3 ) ) VAR VAR ( IF IF ( COND VAR_2 == null ) COND VAR_2 == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  VAR_4 . METHOD_3 ( ) )  VAR_4 . METHOD_3 ( ) (  VAR_4 = VAR_2 )  VAR_4 = VAR_2 (  VAR_4 . METHOD_4 ( VAR_5 ) )  VAR_4 . METHOD_4 ( VAR_5 ) (  METHOD_5 ( ) )  METHOD_5 ( ) (  METHOD_6 ( false ) )  METHOD_6 ( false ) (  VAR_4 . METHOD_7 ( VAR_6 , false ) )  VAR_4 . METHOD_7 ( VAR_6 , false ) ( IF IF ( COND VAR_4 . METHOD_8 ( ) ) COND VAR_4 . METHOD_8 ( ) ( THEN THEN (  METHOD_9 ( true ) )  METHOD_9 ( true ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 == ( VAR_2 ) ) COND VAR_1 == ( VAR_2 ) ( THEN THEN ( IF IF ( COND VAR_3 ) COND VAR_3 ( THEN THEN (  android.util.Log.v ( TYPE_1 . TAG , ( STRING_1 + VAR_1 ) ) )  android.util.Log.v ( TYPE_1 . TAG , ( STRING_1 + VAR_1 ) ) ) THEN THEN ) IF IF (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_5 ) INIT = VAR_5 ) VAR VAR ( IF IF ( COND VAR_4 == null ) COND VAR_4 == null ( THEN THEN ( IF IF ( COND VAR_3 ) COND VAR_3 ( THEN THEN (  android.util.Log.d ( TYPE_1 . TAG , STRING_2 ) )  android.util.Log.d ( TYPE_1 . TAG , STRING_2 ) ) THEN THEN ) IF IF (  return ; )  return ; ) THEN THEN ) IF IF (  VAR_4 . METHOD_2 ( VAR_6 ) )  VAR_4 . METHOD_2 ( VAR_6 ) ( VAR VAR ( TYPE android.os.Message ) TYPE android.os.Message ( NAME msg ) NAME msg ( INIT = VAR_4 . METHOD_3 ( VAR_7 , VAR_1 , 0 ) ) INIT = VAR_4 . METHOD_3 ( VAR_7 , VAR_1 , 0 ) ) VAR VAR (  VAR_4 . METHOD_4 ( msg ) )  VAR_4 . METHOD_4 ( msg ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.Map<TYPE_1,TYPE_2> ) TYPE java.util.Map<TYPE_1,TYPE_2> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_3<TYPE_1,TYPE_2> ) TYPE TYPE_3<TYPE_1,TYPE_2> ( NAME entry ) NAME entry ( IN VAR_1 . METHOD_2 ( ) ) IN VAR_1 . METHOD_2 ( ) ( BLOCK BLOCK ( IF IF ( COND ( VAR_2 . METHOD_3 ( entry . METHOD_4 ( ) ) ) && ( VAR_3 . METHOD_3 ( entry . METHOD_5 ( ) ) ) ) COND ( VAR_2 . METHOD_3 ( entry . METHOD_4 ( ) ) ) && ( VAR_3 . METHOD_3 ( entry . METHOD_5 ( ) ) ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE char ) TYPE char ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = java.lang.Integer . toString ( VAR_1 , 16 ) . METHOD_2 ( ) ) INIT = java.lang.Integer . toString ( VAR_1 , 16 ) . METHOD_2 ( ) ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = VAR_2 . length ( ) ) INIT = VAR_2 . length ( ) ) VAR VAR ) INIT INIT ( COND i < 4 ) COND i < 4 ( UPDATE UPDATE (  ++ i )  ++ i ) UPDATE UPDATE ( BLOCK BLOCK (  result . append ( CHAR_1 ) )  result . append ( CHAR_1 ) ) BLOCK BLOCK ) FOR FOR (  return result + VAR_2 ; )  return result + VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  android.util.Log . i ( VAR_1 . TAG , STRING_1 ) )  android.util.Log . i ( VAR_1 . TAG , STRING_1 ) ( VAR VAR ( TYPE TYPE_1<java.lang.Integer,java.lang.Integer> ) TYPE TYPE_1<java.lang.Integer,java.lang.Integer> ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  android.util.Log.w ( VAR_1 . TAG , ( ( ( STRING_2 + ( VAR_3 ) ) + STRING_3 ) + ( VAR_4 ) ) ) )  android.util.Log.w ( VAR_1 . TAG , ( ( ( STRING_2 + ( VAR_3 ) ) + STRING_3 ) + ( VAR_4 ) ) ) (  METHOD_3 ( VAR_3 , VAR_4 , true , false ) )  METHOD_3 ( VAR_3 , VAR_4 , true , false ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME x ) NAME x ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME result ) NAME result ( INIT = METHOD_2 ( x , VAR_1 ) ) INIT = METHOD_2 ( x , VAR_1 ) ) VAR VAR ( IF IF ( COND result == null ) COND result == null ( THEN THEN (  METHOD_3 ( null ) )  METHOD_3 ( null ) (  return ; )  return ; ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_2 ) != null ) COND ( VAR_2 ) != null ( THEN THEN ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_4 ( ) . get ( VAR_2 ) ) INIT = METHOD_4 ( ) . get ( VAR_2 ) ) VAR VAR (  result = METHOD_5 ( VAR_3 , result ) )  result = METHOD_5 ( VAR_3 , result ) ) THEN THEN ) IF IF (  METHOD_3 ( result ) )  METHOD_3 ( result ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Throwable ) TYPE java.lang.Throwable ( NAME e ) NAME e ( BLOCK BLOCK (  throw METHOD_6 ( x , e ) ; )  throw METHOD_6 ( x , e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  android.util.Log.v ( VAR_3 . TAG , ( ( ( STRING_1 + ( this ) ) + STRING_2 ) + VAR_1 ) ) )  android.util.Log.v ( VAR_3 . TAG , ( ( ( STRING_1 + ( this ) ) + STRING_2 ) + VAR_1 ) ) ) THEN THEN ) IF IF (  VAR_4 = false )  VAR_4 = false (  VAR_5 = false )  VAR_5 = false (  VAR_6 = VAR_1 )  VAR_6 = VAR_1 (  VAR_6 . METHOD_2 ( VAR_7 ) )  VAR_6 . METHOD_2 ( VAR_7 ) (  VAR_6 . METHOD_3 ( VAR_8 ) )  VAR_6 . METHOD_3 ( VAR_8 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1[] ) TYPE TYPE_1[] ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( VAR_2 class ) ) INIT = METHOD_2 ( VAR_2 class ) ) VAR VAR (  assertNotNull ( VAR_1 ) )  assertNotNull ( VAR_1 ) ( VAR VAR ( TYPE TYPE_2<java.lang.Class<?>,java.lang.Class<?>> ) TYPE TYPE_2<java.lang.Class<?>,java.lang.Class<?>> ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_3 ( ) ) INIT = METHOD_3 ( ) ) VAR VAR (  assertNotNull ( VAR_3 ) )  assertNotNull ( VAR_3 ) (  VAR_3 . METHOD_4 ( ) )  VAR_3 . METHOD_4 ( ) ( VAR VAR ( TYPE TYPE_1[] ) TYPE TYPE_1[] ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_2 ( VAR_2 class ) ) INIT = METHOD_2 ( VAR_2 class ) ) VAR VAR (  assertNotNull ( VAR_4 ) )  assertNotNull ( VAR_4 ) (  assertTrue ( TYPE_3 . equals ( VAR_1 , VAR_4 ) ) )  assertTrue ( TYPE_3 . equals ( VAR_1 , VAR_4 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_4 ) || ( TYPE_4 . METHOD_2 ( VAR_3 ) ) ) COND ( VAR_4 ) || ( TYPE_4 . METHOD_2 ( VAR_3 ) ) ( THEN THEN (  VAR_4 = true )  VAR_4 = true (  return ; )  return ; ) THEN THEN ) IF IF (  TYPE_5 . METHOD_3 ( VAR_2 , VAR_1 , VAR_5 , VAR_3 , new TYPE_6 ( new java.io.File ( new java.lang.String ( VAR_6 ) ) ) ) )  TYPE_5 . METHOD_3 ( VAR_2 , VAR_1 , VAR_5 , VAR_3 , new TYPE_6 ( new java.io.File ( new java.lang.String ( VAR_6 ) ) ) ) ( IF IF ( COND ( VAR_7 ) != null ) COND ( VAR_7 ) != null ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_8 ) NAME VAR_8 ( IN VAR_7 ) IN VAR_7 ( BLOCK BLOCK (  METHOD_1 ( VAR_1 , VAR_2 , VAR_8 ) )  METHOD_1 ( VAR_1 , VAR_2 , VAR_8 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME callback ) NAME callback ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( VAR_2 , STRING_1 ) )  METHOD_2 ( VAR_2 , STRING_1 ) ( IF IF ( COND VAR_3 ) COND VAR_3 ( THEN THEN (  android.util.Log.d ( VAR_4 . TAG , ( STRING_2 + VAR_1 ) ) )  android.util.Log.d ( VAR_4 . TAG , ( STRING_2 + VAR_1 ) ) ) THEN THEN ) IF IF (  VAR_5 . METHOD_3 ( VAR_1 , callback ) )  VAR_5 . METHOD_3 ( VAR_1 , callback ) (  METHOD_4 ( VAR_1 . METHOD_5 ( ) , VAR_1 . METHOD_6 ( ) ) )  METHOD_4 ( VAR_1 . METHOD_5 ( ) , VAR_1 . METHOD_6 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME path ) NAME path ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME d ) NAME d ( INIT = TYPE_4 . METHOD_2 ( VAR_2 , path , name , null , VAR_1 ) . METHOD_3 ( ) ) INIT = TYPE_4 . METHOD_2 ( VAR_2 , path , name , null , VAR_1 ) . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME r ) NAME r ( INIT = new TYPE_5 ( d , VAR_3 ) ) INIT = new TYPE_5 ( d , VAR_3 ) ) VAR VAR (  VAR_4 . METHOD_4 ( d . METHOD_5 ( ) , r ) )  VAR_4 . METHOD_4 ( d . METHOD_5 ( ) , r ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  assertEquals ( 9 , VAR_1 . length ) )  assertEquals ( 9 , VAR_1 . length ) (  TYPE_1 . METHOD_2 ( VAR_1 [ 4 ] ) )  TYPE_1 . METHOD_2 ( VAR_1 [ 4 ] ) (  TYPE_1 . METHOD_2 ( VAR_1 [ 5 ] ) )  TYPE_1 . METHOD_2 ( VAR_1 [ 5 ] ) (  TYPE_1 . METHOD_2 ( VAR_1 [ 6 ] ) )  TYPE_1 . METHOD_2 ( VAR_1 [ 6 ] ) (  TYPE_1 . METHOD_2 ( VAR_1 [ 7 ] ) )  TYPE_1 . METHOD_2 ( VAR_1 [ 7 ] ) (  TYPE_1 . METHOD_2 ( VAR_1 [ 8 ] ) )  TYPE_1 . METHOD_2 ( VAR_1 [ 8 ] ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN long ) RETURN long ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_3 . METHOD_2 ( VAR_1 . getName ( ) ) ) INIT = TYPE_3 . METHOD_2 ( VAR_1 . getName ( ) ) ) VAR VAR ( IF IF ( COND ! ( VAR_2 . METHOD_3 ( ) ) ) COND ! ( VAR_2 . METHOD_3 ( ) ) ( THEN THEN (  throw new TYPE_1 ( ) ; )  throw new TYPE_1 ( ) ; ) THEN THEN ) IF IF (  return TYPE_4 . METHOD_4 ( VAR_2 . METHOD_5 ( 1 ) ) ; )  return TYPE_4 . METHOD_4 ( VAR_2 . METHOD_5 ( 1 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_1 ( VAR_2 , new TYPE_4 ( TYPE_5 . METHOD_2 ( VAR_2 . METHOD_3 ( ) ) ) ) ) INIT = new TYPE_1 ( VAR_2 , new TYPE_4 ( TYPE_5 . METHOD_2 ( VAR_2 . METHOD_3 ( ) ) ) ) ) VAR VAR (  TYPE_5 . METHOD_4 ( VAR_2 . METHOD_3 ( ) , VAR_4 . METHOD_3 ( ) , VAR_3 . METHOD_5 ( ) . METHOD_6 ( ) , VAR_3 . METHOD_7 ( ) . METHOD_6 ( ) ) )  TYPE_5 . METHOD_4 ( VAR_2 . METHOD_3 ( ) , VAR_4 . METHOD_3 ( ) , VAR_3 . METHOD_5 ( ) . METHOD_6 ( ) , VAR_3 . METHOD_7 ( ) . METHOD_6 ( ) ) (  return VAR_4 ; )  return VAR_4 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  android.util.Log . i ( VAR_1 . TAG , STRING_1 ) )  android.util.Log . i ( VAR_1 . TAG , STRING_1 ) ( VAR VAR ( TYPE TYPE_1<java.lang.Integer,java.lang.Integer> ) TYPE TYPE_1<java.lang.Integer,java.lang.Integer> ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( IF IF ( COND ( ( VAR_3 ) >= INT_1 ) && ( ( VAR_4 ) >= INT_2 ) ) COND ( ( VAR_3 ) >= INT_1 ) && ( ( VAR_4 ) >= INT_2 ) ( THEN THEN (  METHOD_3 ( INT_1 , INT_2 , true , true ) )  METHOD_3 ( INT_1 , INT_2 , true , true ) ) THEN THEN ( ELSE ELSE (  android.util.Log.w ( VAR_1 . TAG , STRING_2 ) )  android.util.Log.w ( VAR_1 . TAG , STRING_2 ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_3 ) == null ) COND ( VAR_3 ) == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( IF IF ( COND VAR_5 . METHOD_3 ( ) ) COND VAR_5 . METHOD_3 ( ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  VAR_5 . METHOD_4 ( METHOD_5 ( ( VAR_4 ? VAR_6 : VAR_7 ) ) ) )  VAR_5 . METHOD_4 ( METHOD_5 ( ( VAR_4 ? VAR_6 : VAR_7 ) ) ) (  VAR_8 . METHOD_6 ( VAR_1 , VAR_2 ) )  VAR_8 . METHOD_6 ( VAR_1 , VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_1 ) NAME VAR_1 ( INIT = java.io.File . METHOD_2 ( STRING_1 , STRING_2 ) ) INIT = java.io.File . METHOD_2 ( STRING_1 , STRING_2 ) ) VAR VAR (  VAR_1 . METHOD_3 ( ) )  VAR_1 . METHOD_3 ( ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( VAR_1 ) ) INIT = new TYPE_1 ( VAR_1 ) ) VAR VAR (  VAR_2 . METHOD_4 ( VAR_3 ) )  VAR_2 . METHOD_4 ( VAR_3 ) (  VAR_2 . METHOD_5 ( ) )  VAR_2 . METHOD_5 ( ) (  VAR_2 . METHOD_6 ( ) )  VAR_2 . METHOD_6 ( ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME f ) NAME f ( INIT = new TYPE_1 ( VAR_1 , true ) ) INIT = new TYPE_1 ( VAR_1 , true ) ) VAR VAR (  assertEquals ( 10 , f . METHOD_7 ( ) . METHOD_8 ( ) ) )  assertEquals ( 10 , f . METHOD_7 ( ) . METHOD_8 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  throw new java.lang.NullPointerException ( STRING_1 ) ; )  throw new java.lang.NullPointerException ( STRING_1 ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME name ) NAME name ( INIT = VAR_1 . getName ( ) ) INIT = VAR_1 . getName ( ) ) VAR VAR ( IF IF ( COND ( VAR_2 . get ( name ) ) != null ) COND ( VAR_2 . get ( name ) ) != null ( THEN THEN (  throw new java.lang.IllegalArgumentException ( ( STRING_2 + name ) ) ; )  throw new java.lang.IllegalArgumentException ( ( STRING_2 + name ) ) ; ) THEN THEN ) IF IF (  VAR_2 . METHOD_3 ( name , VAR_1 ) )  VAR_2 . METHOD_3 ( name , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME context ) NAME context ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND ( VAR_2 != null ) && ( VAR_2 . METHOD_3 ( ) . equals ( VAR_3 ) ) ) COND ( VAR_2 != null ) && ( VAR_2 . METHOD_3 ( ) . equals ( VAR_3 ) ) ( THEN THEN (  context . METHOD_4 ( VAR_4 , context . METHOD_5 ( VAR_2 ) , STRING_1 , null ) )  context . METHOD_4 ( VAR_4 , context . METHOD_5 ( VAR_2 ) , STRING_1 , null ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME count ) NAME count ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( STRING_1 ) )  METHOD_2 ( STRING_1 ) (  arg ( STRING_2 , VAR_1 ) )  arg ( STRING_2 , VAR_1 ) (  arg ( STRING_3 , VAR_2 ) )  arg ( STRING_3 , VAR_2 ) (  arg ( STRING_4 , count ) )  arg ( STRING_4 , count ) (  METHOD_3 ( ) )  METHOD_3 ( ) ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < count ) COND i < count ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK (  METHOD_4 ( VAR_3 , i , ( VAR_2 + count ) ) )  METHOD_4 ( VAR_3 , i , ( VAR_2 + count ) ) ) BLOCK BLOCK ) FOR FOR (  METHOD_5 ( ) )  METHOD_5 ( ) (  METHOD_6 ( ) )  METHOD_6 ( ) (  VAR_4 . METHOD_1 ( VAR_1 , VAR_2 , count ) )  VAR_4 . METHOD_1 ( VAR_1 , VAR_2 , count ) (  METHOD_7 ( ) )  METHOD_7 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_1 . name = name )  VAR_1 . name = name (  VAR_2 = METHOD_2 ( VAR_3 ) )  VAR_2 = METHOD_2 ( VAR_3 ) (  VAR_4 = METHOD_2 ( VAR_5 ) )  VAR_4 = METHOD_2 ( VAR_5 ) (  VAR_6 = METHOD_2 ( VAR_7 ) )  VAR_6 = METHOD_2 ( VAR_7 ) (  VAR_8 = METHOD_2 ( VAR_9 ) )  VAR_8 = METHOD_2 ( VAR_9 ) (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = 2 ) INIT = 2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = 8 ) INIT = 8 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_1 ( 0 ) ) INIT = new TYPE_1 ( 0 ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_3 . METHOD_2 ( INT_1 ) )  VAR_3 . METHOD_2 ( INT_1 ) (  fail ( STRING_1 ) )  fail ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.IllegalArgumentException ) TYPE java.lang.IllegalArgumentException ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ( TRY TRY ( BLOCK BLOCK (  VAR_3 . METHOD_2 ( ( - 1 ) ) )  VAR_3 . METHOD_2 ( ( - 1 ) ) (  fail ( STRING_2 ) )  fail ( STRING_2 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.IllegalArgumentException ) TYPE java.lang.IllegalArgumentException ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  VAR_3 . METHOD_2 ( VAR_1 ) )  VAR_3 . METHOD_2 ( VAR_1 ) (  VAR_3 . METHOD_2 ( VAR_2 ) )  VAR_3 . METHOD_2 ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME url ) NAME url ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = mContext . METHOD_2 ( ) ) INIT = mContext . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND VAR_2 && ( ( VAR_4 ) != null ) ) COND VAR_2 && ( ( VAR_4 ) != null ) ( THEN THEN (  VAR_4 . METHOD_3 ( false ) )  VAR_4 . METHOD_3 ( false ) (  VAR_4 = null )  VAR_4 = null ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_4 ) == null ) COND ( VAR_4 ) == null ( THEN THEN (  VAR_4 = new TYPE_3 ( this , mContext , VAR_3 , VAR_1 ) )  VAR_4 = new TYPE_3 ( this , mContext , VAR_3 , VAR_1 ) (  VAR_4 . METHOD_4 ( url ) )  VAR_4 . METHOD_4 ( url ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE android.content.Intent ) TYPE android.content.Intent ( NAME VAR_3 ) NAME VAR_3 ( INIT = new android.content.Intent ( this , METHOD_2 ( ) ) ) INIT = new android.content.Intent ( this , METHOD_2 ( ) ) ) VAR VAR (  VAR_3 . METHOD_3 ( VAR_4 , VAR_2 . METHOD_4 ( ) ) )  VAR_3 . METHOD_3 ( VAR_4 , VAR_2 . METHOD_4 ( ) ) (  VAR_1 . METHOD_5 ( TYPE_3 . METHOD_6 ( VAR_2 . METHOD_7 ( ) , VAR_2 . METHOD_4 ( ) , VAR_3 , null ) ) )  VAR_1 . METHOD_5 ( TYPE_3 . METHOD_6 ( VAR_2 . METHOD_7 ( ) , VAR_2 . METHOD_4 ( ) , VAR_3 , null ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . METHOD_2 ( VAR_1 ) ) INIT = VAR_3 . METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_2 == null ) COND VAR_2 == null ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF (  ( VAR_4 ) ++ )  ( VAR_4 ) ++ ( IF IF ( COND ! ( VAR_5 ) ) COND ! ( VAR_5 ) ( THEN THEN (  METHOD_3 ( ( ( VAR_2 . getName ( ) ) + STRING_1 ) ) )  METHOD_3 ( ( ( VAR_2 . getName ( ) ) + STRING_1 ) ) ) THEN THEN ) IF IF (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME uri ) NAME uri ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  throw new java.lang.NullPointerException ( STRING_1 ) ; )  throw new java.lang.NullPointerException ( STRING_1 ) ; ) THEN THEN ) IF IF (  VAR_2 . METHOD_2 ( ) )  VAR_2 . METHOD_2 ( ) ( TRY TRY ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 . METHOD_3 ( ) ) != 0 ) COND ( VAR_1 . METHOD_3 ( ) ) != 0 ( THEN THEN (  METHOD_4 ( VAR_3 , METHOD_5 ( uri ) , VAR_1 ) )  METHOD_4 ( VAR_3 , METHOD_5 ( uri ) , VAR_1 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ( FINALLY FINALLY (  VAR_2 . METHOD_6 ( ) )  VAR_2 . METHOD_6 ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  return new TYPE_1 ( null , null , false , null , null , null , VAR_1 , false , false , false , false , false , false , null , null , true , ( - 1 ) ) ; )  return new TYPE_1 ( null , null , false , null , null , null , VAR_1 , false , false , false , false , false , false , null , null , true , ( - 1 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( METHOD_2 ( VAR_3 , STRING_1 ) ) ) COND ! ( METHOD_2 ( VAR_3 , STRING_1 ) ) ( THEN THEN (  throw new TYPE_2 ( STRING_2 ) ; )  throw new TYPE_2 ( STRING_2 ) ; ) THEN THEN ) IF IF ( SYNCHRONIZED SYNCHRONIZED (  VAR_4 )  VAR_4 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_5 ) NAME VAR_5 ( INIT = METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ) INIT = METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ) VAR VAR ( IF IF ( COND VAR_5 == null ) COND VAR_5 == null ( THEN THEN (  android.util.Log.w ( TYPE_4 . TAG , ( STRING_3 + VAR_1 ) ) )  android.util.Log.w ( TYPE_4 . TAG , ( STRING_3 + VAR_1 ) ) (  return ; )  return ; ) THEN THEN ) IF IF (  VAR_6 = VAR_2 )  VAR_6 = VAR_2 ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME time ) NAME time ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_3 ) != ( this ) ) COND ( VAR_3 ) != ( this ) ( THEN THEN (  throw new TYPE_3 ( ) ; )  throw new TYPE_3 ( ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_4 ) NAME VAR_4 ( INIT = this . VAR_4 ) INIT = this . VAR_4 ) VAR VAR ( IF IF ( COND ! ( METHOD_2 ( time , VAR_2 ) ) ) COND ! ( METHOD_2 ( time , VAR_2 ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_5 ) NAME VAR_5 ( INIT = false ) INIT = false ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_5 = VAR_1 . METHOD_3 ( ) )  VAR_5 = VAR_1 . METHOD_3 ( ) ) BLOCK BLOCK ( FINALLY FINALLY ( IF IF ( COND ! VAR_5 ) COND ! VAR_5 ( THEN THEN (  VAR_4 . METHOD_4 ( ) )  VAR_4 . METHOD_4 ( ) ) THEN THEN ) IF IF ) FINALLY FINALLY ) TRY TRY (  return VAR_5 ; )  return VAR_5 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_2 ) != ( VAR_3 ) ) COND ( VAR_2 ) != ( VAR_3 ) ( THEN THEN ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_4 ) NAME VAR_4 ( INIT = true ) INIT = true ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME s ) NAME s ( INIT = VAR_5 . size ( ) ) INIT = VAR_5 . size ( ) ) VAR VAR ) INIT INIT ( COND i < s ) COND i < s ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK ( IF IF ( COND ( VAR_5 . get ( i ) . METHOD_2 ( ) ) != ( VAR_3 ) ) COND ( VAR_5 . get ( i ) . METHOD_2 ( ) ) != ( VAR_3 ) ( THEN THEN (  VAR_4 = false )  VAR_4 = false (  break ; )  break ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR FOR ( IF IF ( COND VAR_4 ) COND VAR_4 ( THEN THEN (  VAR_2 = VAR_3 )  VAR_2 = VAR_3 ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_1 ) ) COND ! ( VAR_1 ) ( THEN THEN (  VAR_1 = true )  VAR_1 = true (  VAR_2 = null )  VAR_2 = null (  VAR_3 = null )  VAR_3 = null (  VAR_4 = null )  VAR_4 = null (  VAR_5 = null )  VAR_5 = null (  VAR_6 . METHOD_2 ( ) )  VAR_6 . METHOD_2 ( ) ( IF IF ( COND ( VAR_5 ) != null ) COND ( VAR_5 ) != null ( THEN THEN ( TRY TRY ( BLOCK BLOCK (  VAR_5 . METHOD_1 ( ) )  VAR_5 . METHOD_1 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_7 ) NAME VAR_7 ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( STRING_1 ) )  METHOD_2 ( STRING_1 ) ( IF IF ( COND ! ( VAR_1 . METHOD_3 ( ) ) ) COND ! ( VAR_1 . METHOD_3 ( ) ) ( THEN THEN (  TYPE_2 . METHOD_4 ( VAR_2 ) )  TYPE_2 . METHOD_4 ( VAR_2 ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND ! ( VAR_3 . METHOD_3 ( ) ) ) COND ! ( VAR_3 . METHOD_3 ( ) ) ( THEN THEN (  TYPE_2 . METHOD_5 ( VAR_2 ) )  TYPE_2 . METHOD_5 ( VAR_2 ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND ! ( VAR_4 . METHOD_3 ( ) ) ) COND ! ( VAR_4 . METHOD_3 ( ) ) ( THEN THEN (  TYPE_2 . METHOD_6 ( VAR_2 ) )  TYPE_2 . METHOD_6 ( VAR_2 ) ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF (  return new TYPE_1 ( VAR_5 ) ; )  return new TYPE_1 ( VAR_5 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( PARAMS PARAMS ( VAR VAR ( TYPE com.android.jack.ir.ast.JMethod ) TYPE com.android.jack.ir.ast.JMethod ( NAME method ) NAME method ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( ( method . METHOD_1 ( ) . METHOD_2 ( ) ) || ( method . METHOD_3 ( ) ) ) || ( method . METHOD_4 ( ) ) ) || ( ! ( VAR_1 . METHOD_5 ( this . METHOD_6 ( ) , method ) ) ) ) COND ( ( ( method . METHOD_1 ( ) . METHOD_2 ( ) ) || ( method . METHOD_3 ( ) ) ) || ( method . METHOD_4 ( ) ) ) || ( ! ( VAR_1 . METHOD_5 ( this . METHOD_6 ( ) , method ) ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  VAR_2 . METHOD_5 ( method ) )  VAR_2 . METHOD_5 ( method ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( false ) )  VAR_1 . METHOD_2 ( false ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_3 ( ) ) INIT = VAR_1 . METHOD_3 ( ) ) VAR VAR (  VAR_2 . METHOD_4 ( null ) )  VAR_2 . METHOD_4 ( null ) ( TRY TRY ( BLOCK BLOCK (  VAR_2 . METHOD_5 ( ) )  VAR_2 . METHOD_5 ( ) (  fail ( STRING_1 ) )  fail ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  VAR_1 . METHOD_6 ( ) )  VAR_1 . METHOD_6 ( ) ( TRY TRY ( BLOCK BLOCK (  VAR_2 . METHOD_5 ( ) )  VAR_2 . METHOD_5 ( ) (  fail ( STRING_2 ) )  fail ( STRING_2 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE double ) TYPE double ( NAME x ) NAME x ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME expected ) NAME expected ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( VAR_2 ) )  VAR_1 . METHOD_2 ( VAR_2 ) ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME out ) NAME out ( INIT = VAR_1 . format ( x ) ) INIT = VAR_1 . format ( x ) ) VAR VAR (  logln ( ( ( ( ( x + STRING_1 ) + VAR_2 ) + STRING_2 ) + out ) ) )  logln ( ( ( ( ( x + STRING_1 ) + VAR_2 ) + STRING_2 ) + out ) ) ( IF IF ( COND ! ( out . equals ( expected ) ) ) COND ! ( out . equals ( expected ) ) ( THEN THEN (  errln ( ( STRING_3 + expected ) ) )  errln ( ( STRING_3 + expected ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME m ) NAME m ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME v ) NAME v ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME value ) NAME value ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = false ) INIT = false ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( IF IF ( COND v == null ) COND v == null ( THEN THEN (  m . METHOD_2 ( value ) )  m . METHOD_2 ( value ) ) THEN THEN ( ELSE ELSE (  m . METHOD_2 ( v , value ) )  m . METHOD_2 ( v , value ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_2 = true )  VAR_2 = true ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  TYPE_4 . METHOD_3 ( VAR_2 , VAR_1 ) )  TYPE_4 . METHOD_3 ( VAR_2 , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME text ) NAME text ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME s ) NAME s ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME start ) NAME start ( INIT = ( s == null ) ? 0 : s . length ( ) ) INIT = ( s == null ) ? 0 : s . length ( ) ) VAR VAR (  VAR_1 . append ( text ) )  VAR_1 . append ( text ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_3 ( ) ) INIT = new TYPE_3 ( ) ) VAR VAR (  VAR_2 . start = start )  VAR_2 . start = start (  VAR_2 . length = text . length ( ) )  VAR_2 . length = text . length ( ) (  VAR_3 = VAR_4 )  VAR_3 = VAR_4 (  VAR_1 . METHOD_3 ( VAR_2 ) )  VAR_1 . METHOD_3 ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.String> ) TYPE java.util.Map<java.lang.String,java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME args ) NAME args ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_1<java.lang.String,java.lang.String> ) TYPE TYPE_1<java.lang.String,java.lang.String> ( NAME entry ) NAME entry ( IN VAR_1 . METHOD_2 ( ) ) IN VAR_1 . METHOD_2 ( ) ( BLOCK BLOCK (  args . METHOD_3 ( STRING_1 ) )  args . METHOD_3 ( STRING_1 ) (  args . METHOD_3 ( ( ( ( entry . METHOD_4 ( ) ) + STRING_2 ) + ( entry . METHOD_5 ( ) ) ) ) )  args . METHOD_3 ( ( ( ( entry . METHOD_4 ( ) ) + STRING_2 ) + ( entry . METHOD_5 ( ) ) ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  VAR_4 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 ) )  VAR_4 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_5 ) NAME VAR_5 ( BLOCK BLOCK (  VAR_4 . fail ( VAR_5 . METHOD_2 ( ) ) )  VAR_4 . fail ( VAR_5 . METHOD_2 ( ) ) (  throw VAR_5 ; )  throw VAR_5 ; ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_4 . fail ( VAR_6 ) )  VAR_4 . fail ( VAR_6 ) (  throw e ; )  throw e ; ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE java.lang.RuntimeException ) TYPE java.lang.RuntimeException ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_4 . fail ( VAR_6 ) )  VAR_4 . fail ( VAR_6 ) (  throw new TYPE_1 ( VAR_6 ) ; )  throw new TYPE_1 ( VAR_6 ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_3 ) NAME VAR_3 ( INIT = new java.util.ArrayList < java.lang.String > ( ) ) INIT = new java.util.ArrayList < java.lang.String > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( IN VAR_2 . METHOD_2 ( VAR_1 ) ) IN VAR_2 . METHOD_2 ( VAR_1 ) ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_3 . METHOD_3 ( VAR_4 ) ) ) COND ! ( VAR_3 . METHOD_3 ( VAR_4 ) ) ( THEN THEN (  VAR_3 . METHOD_4 ( VAR_4 ) )  VAR_3 . METHOD_4 ( VAR_4 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_5 ) NAME VAR_5 ( INIT = new TYPE_2 ( VAR_4 , CHAR_1 ) ) INIT = new TYPE_2 ( VAR_4 , CHAR_1 ) ) VAR VAR (  METHOD_5 ( VAR_6 , VAR_5 ) )  METHOD_5 ( VAR_6 , VAR_5 ) (  METHOD_5 ( VAR_7 , VAR_5 ) )  METHOD_5 ( VAR_7 , VAR_5 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) == ( - 1 ) ) COND ( VAR_1 ) == ( - 1 ) ( THEN THEN (  VAR_1 = INT_1 + ( VAR_2 . METHOD_1 ( ) ) )  VAR_1 = INT_1 + ( VAR_2 . METHOD_1 ( ) ) ( IF IF ( COND ( VAR_3 ) != null ) COND ( VAR_3 ) != null ( THEN THEN (  VAR_1 = ( INT_1 * ( VAR_1 ) ) + ( VAR_3 . METHOD_1 ( ) ) )  VAR_1 = ( INT_1 * ( VAR_1 ) ) + ( VAR_3 . METHOD_1 ( ) ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN long ) RETURN long ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME arg ) NAME arg ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  throw new TYPE_1 ( ) ; )  throw new TYPE_1 ( ) ; ) THEN THEN ) IF IF ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.Class<?> ) TYPE java.lang.Class<?> ( NAME c ) NAME c ( INIT = java.lang.Class . METHOD_2 ( STRING_1 ) ) INIT = java.lang.Class . METHOD_2 ( STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME m ) NAME m ( INIT = c . METHOD_3 ( name , long . class ) ) INIT = c . METHOD_3 ( name , long . class ) ) VAR VAR (  return ( ( TYPE_3 ) ( m . invoke ( null , arg ) ) ) ; )  return ( ( TYPE_3 ) ( m . invoke ( null , arg ) ) ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME ex ) NAME ex ( BLOCK BLOCK (  throw new TYPE_1 ( ex ) ; )  throw new TYPE_1 ( ex ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME device ) NAME device ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME status ) NAME status ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( device . METHOD_2 ( VAR_1 ) ) ) COND ! ( device . METHOD_2 ( VAR_1 ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( TRY TRY ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME listener ) NAME listener ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK (  listener . METHOD_3 ( status ) )  listener . METHOD_3 ( status ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME e ) NAME e ( BLOCK BLOCK (  android.util.Log.e ( TYPE_4 . TAG , STRING_1 , e ) )  android.util.Log.e ( TYPE_4 . TAG , STRING_1 , e ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_1 ( VAR_2 ) ) INIT = TYPE_1 . METHOD_1 ( VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME s ) NAME s ( INIT = new TYPE_2 ( VAR_1 ) ) INIT = new TYPE_2 ( VAR_1 ) ) VAR VAR (  VAR_1 . METHOD_2 ( VAR_3 ) )  VAR_1 . METHOD_2 ( VAR_3 ) (  s . METHOD_3 ( 0 , 0 ) )  s . METHOD_3 ( 0 , 0 ) (  VAR_1 . METHOD_4 ( ) )  VAR_1 . METHOD_4 ( ) (  METHOD_5 ( ) )  METHOD_5 ( ) (  VAR_1 . METHOD_6 ( ) )  VAR_1 . METHOD_6 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private final synchronized ) MODIFIER private final synchronized ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE android.content.Intent ) TYPE android.content.Intent ( NAME VAR_2 ) NAME VAR_2 ( INIT = new android.content.Intent ( VAR_3 ) ) INIT = new android.content.Intent ( VAR_3 ) ) VAR VAR (  VAR_2 . METHOD_2 ( VAR_4 ) )  VAR_2 . METHOD_2 ( VAR_4 ) (  VAR_2 . METHOD_3 ( STRING_1 , VAR_5 ) )  VAR_2 . METHOD_3 ( STRING_1 , VAR_5 ) (  VAR_2 . METHOD_3 ( STRING_2 , VAR_6 ) )  VAR_2 . METHOD_3 ( STRING_2 , VAR_6 ) (  TYPE_1 . METHOD_4 ( VAR_2 , null ) )  TYPE_1 . METHOD_4 ( VAR_2 , null ) ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  VAR_2 = new android.content.Intent ( VAR_7 ) )  VAR_2 = new android.content.Intent ( VAR_7 ) (  mContext . METHOD_5 ( VAR_2 ) )  mContext . METHOD_5 ( VAR_2 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_2 && ( ! ( VAR_1 . METHOD_1 ( true ) ) ) ) COND VAR_2 && ( ! ( VAR_1 . METHOD_1 ( true ) ) ) ( THEN THEN (  VAR_3 . error ( STRING_1 ) )  VAR_3 . error ( STRING_1 ) (  throw new java.io.IOException ( ( STRING_2 + VAR_1 ) ) ; )  throw new java.io.IOException ( ( STRING_2 + VAR_1 ) ) ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME options ) NAME options ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  options . METHOD_2 ( TYPE_2 . getName ( ) , TYPE_3 . toString ( ) ) )  options . METHOD_2 ( TYPE_2 . getName ( ) , TYPE_3 . toString ( ) ) (  TYPE_4 . METHOD_3 ( options , null , null , VAR_1 , false , false , FLOAT_1 , ( ( TYPE_5 ) ( null ) ) , ( ( TYPE_6 [ ] ) ( null ) ) ) )  TYPE_4 . METHOD_3 ( options , null , null , VAR_1 , false , false , FLOAT_1 , ( ( TYPE_5 ) ( null ) ) , ( ( TYPE_6 [ ] ) ( null ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME index ) NAME index ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . get ( index ) ) INIT = VAR_2 . get ( index ) ) VAR VAR ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN (  VAR_3 = VAR_1 )  VAR_3 = VAR_1 (  VAR_4 . METHOD_2 ( true ) )  VAR_4 . METHOD_2 ( true ) ( IF IF ( COND ! ( VAR_5 ) ) COND ! ( VAR_5 ) ( THEN THEN (  VAR_5 = true )  VAR_5 = true (  VAR_6 . METHOD_3 ( index ) )  VAR_6 . METHOD_3 ( index ) (  VAR_5 = false )  VAR_5 = false ) THEN THEN ) IF IF ( IF IF ( COND VAR_1 instanceof TYPE_2 ) COND VAR_1 instanceof TYPE_2 ( THEN THEN (  ( ( TYPE_2 ) ( VAR_1 ) ) . METHOD_4 ( ) )  ( ( TYPE_2 ) ( VAR_1 ) ) . METHOD_4 ( ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME flags ) NAME flags ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  this )  this ( BLOCK BLOCK (  METHOD_2 ( VAR_2 , STRING_1 ) )  METHOD_2 ( VAR_2 , STRING_1 ) ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_1 . METHOD_3 ( ) ) INIT = TYPE_1 . METHOD_3 ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  return METHOD_4 ( VAR_1 , flags ) ; )  return METHOD_4 ( VAR_1 , flags ) ; ) BLOCK BLOCK ( FINALLY FINALLY (  TYPE_1 . METHOD_5 ( VAR_3 ) )  TYPE_1 . METHOD_5 ( VAR_3 ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE android.os.Message ) TYPE android.os.Message ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  VAR_3 )  VAR_3 ( BLOCK BLOCK ( IF IF ( COND VAR_4 ) COND VAR_4 ( THEN THEN (  log ( ( STRING_1 + VAR_1 ) ) )  log ( ( STRING_1 + VAR_1 ) ) ) THEN THEN ) IF IF ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_5 ) NAME VAR_5 ( INIT = true ) INIT = true ) VAR VAR (  VAR_3 . METHOD_2 ( VAR_1 ) )  VAR_3 . METHOD_2 ( VAR_1 ) ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  log ( STRING_2 ) )  log ( STRING_2 ) (  METHOD_3 ( VAR_6 ) )  METHOD_3 ( VAR_6 ) ) THEN THEN ( ELSE ELSE (  VAR_5 = false )  VAR_5 = false (  log ( STRING_3 ) )  log ( STRING_3 ) (  METHOD_4 ( VAR_7 , VAR_2 ) )  METHOD_4 ( VAR_7 , VAR_2 ) ) ELSE ELSE ) IF IF ( IF IF ( COND VAR_5 ) COND VAR_5 ( THEN THEN ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN (  VAR_2 . METHOD_5 ( ) )  VAR_2 . METHOD_5 ( ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME index ) NAME index ( INIT = TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ) INIT = TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ) VAR VAR ( IF IF ( COND index != ( - 1 ) ) COND index != ( - 1 ) ( THEN THEN (  return index == ( ( VAR_1 . length ( ) ) - ( VAR_2 . length ( ) ) ) ; )  return index == ( ( VAR_1 . length ( ) ) - ( VAR_2 . length ( ) ) ) ; ) THEN THEN ) IF IF (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME address ) NAME address ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  android.util.Log . i ( VAR_1 . TAG , ( STRING_1 + address ) ) )  android.util.Log . i ( VAR_1 . TAG , ( STRING_1 + address ) ) ( VAR VAR ( TYPE android.bluetooth.BluetoothDevice ) TYPE android.bluetooth.BluetoothDevice ( NAME d ) NAME d ( INIT = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( address . METHOD_4 ( ) ) ) INIT = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( address . METHOD_4 ( ) ) ) VAR VAR ( IF IF ( COND d == null ) COND d == null ( THEN THEN (  android.util.Log . METHOD_5 ( VAR_1 . TAG , ( STRING_2 + address ) ) )  android.util.Log . METHOD_5 ( VAR_1 . TAG , ( STRING_2 + address ) ) ) THEN THEN ) IF IF (  TYPE_2 . METHOD_6 ( ) . METHOD_1 ( d ) )  TYPE_2 . METHOD_6 ( ) . METHOD_1 ( d ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_2 ( VAR_3 ) ) INIT = VAR_2 . METHOD_2 ( VAR_3 ) ) VAR VAR (  android.util.Log . i ( VAR_4 . TAG , ( STRING_1 + VAR_1 ) ) )  android.util.Log . i ( VAR_4 . TAG , ( STRING_1 + VAR_1 ) ) ( IF IF ( COND VAR_1 > 0 ) COND VAR_1 > 0 ( THEN THEN (  TYPE_1 . METHOD_3 ( ) . METHOD_4 ( ) )  TYPE_1 . METHOD_3 ( ) . METHOD_4 ( ) ) THEN THEN ( ELSE ELSE (  VAR_5 . METHOD_5 ( ) )  VAR_5 . METHOD_5 ( ) (  TYPE_2 . set ( STRING_2 , STRING_3 ) )  TYPE_2 . set ( STRING_2 , STRING_3 ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( false ) )  METHOD_2 ( false ) (  METHOD_3 ( false ) )  METHOD_3 ( false ) (  METHOD_4 ( true ) )  METHOD_4 ( true ) (  METHOD_5 ( VAR_1 , false ) )  METHOD_5 ( VAR_1 , false ) (  METHOD_6 ( false ) )  METHOD_6 ( false ) (  assertEquals ( VAR_2 , TYPE_1 . METHOD_7 ( mContext , VAR_3 , VAR_4 ) ) )  assertEquals ( VAR_2 , TYPE_1 . METHOD_7 ( mContext , VAR_3 , VAR_4 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_3 ( VAR_1 . METHOD_4 ( null ) , java.lang.String . METHOD_5 ( true ) ) )  METHOD_3 ( VAR_1 . METHOD_4 ( null ) , java.lang.String . METHOD_5 ( true ) ) (  METHOD_6 ( VAR_1 ) )  METHOD_6 ( VAR_1 ) (  return METHOD_7 ( VAR_1 ) . METHOD_8 ( ) . METHOD_9 ( ) . METHOD_10 ( METHOD_11 ( VAR_1 , VAR_2 ) ) ; )  return METHOD_7 ( VAR_1 ) . METHOD_8 ( ) . METHOD_9 ( ) . METHOD_10 ( METHOD_11 ( VAR_1 , VAR_2 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  this )  this ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME index ) NAME index ( INIT = METHOD_2 ( VAR_1 , false ) ) INIT = METHOD_2 ( VAR_1 , false ) ) VAR VAR ( IF IF ( COND index >= 0 ) COND index >= 0 ( THEN THEN ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME r ) NAME r ( INIT = ( ( TYPE_2 ) ( VAR_2 . get ( index ) ) ) ) INIT = ( ( TYPE_2 ) ( VAR_2 . get ( index ) ) ) ) VAR VAR (  return r . packageName ; )  return r . packageName ; ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME size ) NAME size ( INIT = ( this . METHOD_2 ( ) ) > > 3 ) INIT = ( this . METHOD_2 ( ) ) > > 3 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_3 ( ) ) INIT = METHOD_3 ( ) ) VAR VAR (  return ( ( TYPE_1 ) ( new TYPE_2 ( this , ( - 1 ) , 0 , size , size , VAR_1 , METHOD_4 ( ) ) ) ) ; )  return ( ( TYPE_1 ) ( new TYPE_2 ( this , ( - 1 ) , 0 , size , size , VAR_1 , METHOD_4 ( ) ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE long ) TYPE long ( NAME session ) NAME session ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME context ) NAME context ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME fd ) NAME fd ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME callback ) NAME callback ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_4 . METHOD_2 ( VAR_1 ) ) INIT = TYPE_4 . METHOD_2 ( VAR_1 ) ) VAR VAR (  assertEquals ( STRING_1 , new java.lang.String ( VAR_3 ) ) )  assertEquals ( STRING_1 , new java.lang.String ( VAR_3 ) ) (  super . METHOD_1 ( session , VAR_1 , context , VAR_2 , fd , callback ) )  super . METHOD_1 ( session , VAR_1 , context , VAR_2 , fd , callback ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.util.ArrayList<java.io.File> ) TYPE java.util.ArrayList<java.io.File> ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME path ) NAME path ( IN VAR_1 . METHOD_2 ( STRING_1 ) ) IN VAR_1 . METHOD_2 ( STRING_1 ) ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME sb ) NAME sb ( INIT = VAR_4 . METHOD_3 ( path ) ) INIT = VAR_4 . METHOD_3 ( path ) ) VAR VAR ( IF IF ( COND ( ! VAR_2 ) || ( METHOD_4 ( VAR_5 ) ) ) COND ( ! VAR_2 ) || ( METHOD_4 ( VAR_5 ) ) ( THEN THEN (  VAR_3 . METHOD_5 ( new java.io.File ( path ) ) )  VAR_3 . METHOD_5 ( new java.io.File ( path ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_6 ) NAME VAR_6 ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 ) INIT = VAR_4 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME s ) NAME s ( INIT = VAR_3 [ VAR_2 ] ) INIT = VAR_3 [ VAR_2 ] ) VAR VAR ( IF IF ( COND s == null ) COND s == null ( THEN THEN (  s = VAR_1 . METHOD_2 ( ) . get ( VAR_2 ) . METHOD_3 ( ) )  s = VAR_1 . METHOD_2 ( ) . get ( VAR_2 ) . METHOD_3 ( ) (  VAR_3 [ VAR_2 ] = s )  VAR_3 [ VAR_2 ] = s ) THEN THEN ) IF IF (  return s ; )  return s ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME equals ) NAME equals ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME obj ) NAME obj ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( this ) == obj ) COND ( this ) == obj ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ( IF IF ( COND ( METHOD_1 ( ) ) != ( obj . METHOD_1 ( ) ) ) COND ( METHOD_1 ( ) ) != ( obj . METHOD_1 ( ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_1 ) ( obj ) ) ) INIT = ( ( TYPE_1 ) ( obj ) ) ) VAR VAR ( IF IF ( COND ( VAR_2 ) != ( VAR_3 ) ) COND ( VAR_2 ) != ( VAR_3 ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ( INIT = false ) INIT = false ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_2 ( TYPE_3 . METHOD_3 ( STRING_1 ) ) ) INIT = TYPE_2 . METHOD_2 ( TYPE_3 . METHOD_3 ( STRING_1 ) ) ) VAR VAR ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN (  VAR_1 = ( VAR_2 . METHOD_4 ( ) ) == ( VAR_3 ) )  VAR_1 = ( VAR_2 . METHOD_4 ( ) ) == ( VAR_3 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME e ) NAME e ( BLOCK BLOCK (  android.util.Log.w ( VAR_4 . TAG , STRING_2 , e ) )  android.util.Log.w ( VAR_4 . TAG , STRING_2 , e ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( VAR_2 ) ) INIT = METHOD_2 ( VAR_2 ) ) VAR VAR ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . METHOD_1 ( VAR_4 ) ) INIT = VAR_1 . METHOD_1 ( VAR_4 ) ) VAR VAR ( IF IF ( COND VAR_3 == null ) COND VAR_3 == null ( THEN THEN (  METHOD_3 ( STRING_1 ) )  METHOD_3 ( STRING_1 ) (  return null ; )  return null ; ) THEN THEN ) IF IF (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public final ) MODIFIER public final ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  assertEquals ( VAR_1 , VAR_2 . METHOD_2 ( STRING_1 , STRING_2 , ( - INT_1 ) ) ) )  assertEquals ( VAR_1 , VAR_2 . METHOD_2 ( STRING_1 , STRING_2 , ( - INT_1 ) ) ) (  assertEquals ( VAR_3 , VAR_2 . METHOD_2 ( STRING_1 , STRING_2 , 1 ) ) )  assertEquals ( VAR_3 , VAR_2 . METHOD_2 ( STRING_1 , STRING_2 , 1 ) ) (  assertEquals ( VAR_1 , VAR_2 . METHOD_2 ( STRING_3 , STRING_4 , ( - INT_2 ) ) ) )  assertEquals ( VAR_1 , VAR_2 . METHOD_2 ( STRING_3 , STRING_4 , ( - INT_2 ) ) ) (  assertEquals ( VAR_3 , VAR_2 . METHOD_2 ( STRING_3 , STRING_4 , 2 ) ) )  assertEquals ( VAR_3 , VAR_2 . METHOD_2 ( STRING_3 , STRING_4 , 2 ) ) (  assertEquals ( VAR_4 , VAR_2 . METHOD_2 ( STRING_5 , STRING_6 , 3 ) ) )  assertEquals ( VAR_4 , VAR_2 . METHOD_2 ( STRING_5 , STRING_6 , 3 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  VAR_3 )  VAR_3 ( BLOCK BLOCK (  VAR_3 . METHOD_2 ( VAR_2 , VAR_1 ) )  VAR_3 . METHOD_2 ( VAR_2 , VAR_1 ) ( IF IF ( COND android.util.Log . METHOD_3 ( VAR_4 , VAR_5 ) ) COND android.util.Log . METHOD_3 ( VAR_4 , VAR_5 ) ( THEN THEN (  android.util.Log . i ( VAR_4 , ( STRING_1 + ( METHOD_4 ( ) ) ) ) )  android.util.Log . i ( VAR_4 , ( STRING_1 + ( METHOD_4 ( ) ) ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int[] ) TYPE int[] ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME offset ) NAME offset ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME x ) NAME x ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME y ) NAME y ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_6 ) NAME VAR_6 ( INIT = VAR_7 . METHOD_2 ( VAR_1 ) ) INIT = VAR_7 . METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_6 == null ) COND VAR_6 == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  VAR_6 . METHOD_3 ( ) . METHOD_4 ( x , y , VAR_4 , VAR_5 , VAR_2 , offset , VAR_3 ) )  VAR_6 . METHOD_3 ( ) . METHOD_4 ( x , y , VAR_4 , VAR_5 , VAR_2 , offset , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME callback ) NAME callback ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME error ) NAME error ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  callback . error ( VAR_2 , VAR_3 ) )  callback . error ( VAR_2 , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_2 ) NAME METHOD_2 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<TYPE_3> ) TYPE java.util.List<TYPE_3> ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  callback . METHOD_2 ( VAR_4 ) )  callback . METHOD_2 ( VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_3 ) NAME METHOD_3 ( BLOCK BLOCK (  callback . METHOD_3 ( ) )  callback . METHOD_3 ( ) ) BLOCK BLOCK ) METHOD METHOD (  return METHOD_1 ( VAR_1 , new TYPE_2 ( ) { public void error ( int VAR_2 , java.lang.String VAR_3 ) throws android.os.RemoteException { callback . error ( VAR_2 , VAR_3 ) ; } public void METHOD_2 ( java.util.List < TYPE_3 > VAR_4 ) throws android.os.RemoteException { callback . METHOD_2 ( VAR_4 ) ; } public void METHOD_3 ( ) throws android.os.RemoteException { callback . METHOD_3 ( ) ; } } ) ; )  return METHOD_1 ( VAR_1 , new TYPE_2 ( ) { public void error ( int VAR_2 , java.lang.String VAR_3 ) throws android.os.RemoteException { callback . error ( VAR_2 , VAR_3 ) ; } public void METHOD_2 ( java.util.List < TYPE_3 > VAR_4 ) throws android.os.RemoteException { callback . METHOD_2 ( VAR_4 ) ; } public void METHOD_3 ( ) throws android.os.RemoteException { callback . METHOD_3 ( ) ; } } ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( IF IF ( COND VAR_1 instanceof TYPE_3 ) COND VAR_1 instanceof TYPE_3 ( THEN THEN (  VAR_2 = VAR_3 . METHOD_1 ( ( ( TYPE_3 ) ( VAR_1 ) ) ) )  VAR_2 = VAR_3 . METHOD_1 ( ( ( TYPE_3 ) ( VAR_1 ) ) ) ) THEN THEN ( ELSE ELSE (  VAR_2 = VAR_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) )  VAR_2 = VAR_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) (  METHOD_4 ( VAR_2 , ( ( TYPE_4 ) ( VAR_1 ) ) ) )  METHOD_4 ( VAR_2 , ( ( TYPE_4 ) ( VAR_1 ) ) ) ) ELSE ELSE ) IF IF (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  assertTrue ( VAR_2 . METHOD_2 ( VAR_3 , VAR_4 ) ) )  assertTrue ( VAR_2 . METHOD_2 ( VAR_3 , VAR_4 ) ) (  verify ( VAR_5 , METHOD_3 ( ) ) . METHOD_4 ( METHOD_5 ( VAR_6 class ) ) )  verify ( VAR_5 , METHOD_3 ( ) ) . METHOD_4 ( METHOD_5 ( VAR_6 class ) ) (  METHOD_6 ( VAR_1 ) )  METHOD_6 ( VAR_1 ) (  VAR_7 . verify ( VAR_8 , METHOD_3 ( ) ) . METHOD_7 ( METHOD_8 ( ) , METHOD_5 ( VAR_9 class ) ) )  VAR_7 . verify ( VAR_8 , METHOD_3 ( ) ) . METHOD_7 ( METHOD_8 ( ) , METHOD_5 ( VAR_9 class ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_1 ( VAR_2 ) ) INIT = TYPE_1 . METHOD_1 ( VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME s ) NAME s ( INIT = new TYPE_2 ( VAR_1 ) ) INIT = new TYPE_2 ( VAR_1 ) ) VAR VAR (  VAR_1 . METHOD_2 ( VAR_3 ) )  VAR_1 . METHOD_2 ( VAR_3 ) (  s . METHOD_3 ( STRING_1 ) )  s . METHOD_3 ( STRING_1 ) (  s . METHOD_4 ( 0 , 0 ) )  s . METHOD_4 ( 0 , 0 ) (  VAR_1 . METHOD_5 ( ) )  VAR_1 . METHOD_5 ( ) (  METHOD_6 ( ) )  METHOD_6 ( ) (  VAR_1 . METHOD_7 ( ) )  VAR_1 . METHOD_7 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_2 class ) , TYPE_2 . METHOD_4 ( 100 ) , TYPE_2 . METHOD_4 ( 5 ) , TYPE_2 . METHOD_5 ( INT_1 ) ) ) INIT = TYPE_2 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_2 class ) , TYPE_2 . METHOD_4 ( 100 ) , TYPE_2 . METHOD_4 ( 5 ) , TYPE_2 . METHOD_5 ( INT_1 ) ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_3 . METHOD_6 ( STRING_1 , STRING_2 , STRING_3 , STRING_4 , STRING_5 , STRING_6 , STRING_7 , STRING_8 , STRING_9 , STRING_10 , STRING_11 , STRING_12 , STRING_13 ) ) INIT = TYPE_3 . METHOD_6 ( STRING_1 , STRING_2 , STRING_3 , STRING_4 , STRING_5 , STRING_6 , STRING_7 , STRING_8 , STRING_9 , STRING_10 , STRING_11 , STRING_12 , STRING_13 ) ) VAR VAR (  TYPE_3 . METHOD_7 ( VAR_3 , VAR_1 ) )  TYPE_3 . METHOD_7 ( VAR_3 , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME context ) NAME context ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 = TYPE_2 . get ( context . METHOD_2 ( ) ) )  VAR_1 = TYPE_2 . get ( context . METHOD_2 ( ) ) ( IF IF ( COND ( ( VAR_1 ) == null ) && ( ! ( VAR_2 ) ) ) COND ( ( VAR_1 ) == null ) && ( ! ( VAR_2 ) ) ( THEN THEN (  VAR_2 = true )  VAR_2 = true (  context . METHOD_3 ( VAR_3 , TYPE_3 . METHOD_4 ( VAR_4 ) , STRING_1 , null ) )  context . METHOD_3 ( VAR_3 , TYPE_3 . METHOD_4 ( VAR_4 ) , STRING_1 , null ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME node ) NAME node ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME start ) NAME start ( INIT = VAR_3 . METHOD_3 ( this , node ) ) INIT = VAR_3 . METHOD_3 ( this , node ) ) VAR VAR ( IF IF ( COND start != ( - 1 ) ) COND start != ( - 1 ) ( THEN THEN (  return METHOD_4 ( start , VAR_1 ) ; )  return METHOD_4 ( start , VAR_1 ) ; ) THEN THEN ) IF IF (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME event ) NAME event ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) ( VAR VAR ( TYPE float[] ) TYPE float[] ( NAME values ) NAME values ( INIT = event . values ) INIT = event . values ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_3 ( ) ) INIT = METHOD_3 ( ) ) VAR VAR (  VAR_1 . METHOD_4 ( VAR_2 ) )  VAR_1 . METHOD_4 ( VAR_2 ) (  VAR_1 . METHOD_5 ( VAR_3 , values [ 0 ] , values [ 1 ] , values [ 2 ] , TYPE_3 . METHOD_6 ( values ) ) )  VAR_1 . METHOD_5 ( VAR_3 , values [ 0 ] , values [ 1 ] , values [ 2 ] , TYPE_3 . METHOD_6 ( values ) ) (  VAR_1 . METHOD_4 ( VAR_4 ) )  VAR_1 . METHOD_4 ( VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_5 ) NAME VAR_5 ( INIT = ( ( TYPE_4 ) ( VAR_6 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ) ) ) INIT = ( ( TYPE_4 ) ( VAR_6 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ) ) ) VAR VAR (  METHOD_2 ( VAR_5 ) )  METHOD_2 ( VAR_5 ) (  return VAR_5 ; )  return VAR_5 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  assertEquals ( ( - 1 ) , TYPE_1 . METHOD_2 ( new java.util.ArrayList < java.lang.Integer > ( ) , 9 ) ) )  assertEquals ( ( - 1 ) , TYPE_1 . METHOD_2 ( new java.util.ArrayList < java.lang.Integer > ( ) , 9 ) ) ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_3 ) NAME METHOD_3 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Integer ) TYPE java.lang.Integer ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Integer ) TYPE java.lang.Integer ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return VAR_1 . METHOD_4 ( VAR_2 ) ; )  return VAR_1 . METHOD_4 ( VAR_2 ) ; ) BLOCK BLOCK ) METHOD METHOD (  assertEquals ( ( - 1 ) , TYPE_1 . METHOD_2 ( new java.util.ArrayList < java.lang.Integer > ( ) , 9 , new TYPE_2 < java.lang.Integer > ( ) { public int METHOD_3 ( java.lang.Integer VAR_1 , java.lang.Integer VAR_2 ) { return VAR_1 . METHOD_4 ( VAR_2 ) ; } } ) ) )  assertEquals ( ( - 1 ) , TYPE_1 . METHOD_2 ( new java.util.ArrayList < java.lang.Integer > ( ) , 9 , new TYPE_2 < java.lang.Integer > ( ) { public int METHOD_3 ( java.lang.Integer VAR_1 , java.lang.Integer VAR_2 ) { return VAR_1 . METHOD_4 ( VAR_2 ) ; } } ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME item ) NAME item ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  VAR_1 )  VAR_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<TYPE_2,TYPE_3<java.lang.String,TYPE_1>> ) TYPE java.util.Map<TYPE_2,TYPE_3<java.lang.String,TYPE_1>> ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3<java.lang.String,TYPE_1> ) TYPE TYPE_3<java.lang.String,TYPE_1> ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_2 ( item . METHOD_3 ( ) ) ) INIT = METHOD_2 ( item . METHOD_3 ( ) ) ) VAR VAR ( IF IF ( COND ! ( VAR_3 . METHOD_4 ( item ) ) ) COND ! ( VAR_3 . METHOD_4 ( item ) ) ( THEN THEN (  VAR_3 . METHOD_5 ( item . getName ( ) , item ) )  VAR_3 . METHOD_5 ( item . getName ( ) , item ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE TYPE_2[] ) TYPE TYPE_2[] ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 . length ) > 0 ) COND ( VAR_1 . length ) > 0 ( THEN THEN (  VAR_2 . METHOD_2 ( source ) )  VAR_2 . METHOD_2 ( source ) ) THEN THEN ) IF IF ( IF IF ( COND source == null ) COND source == null ( THEN THEN (  return METHOD_3 ( this , VAR_1 ) ; )  return METHOD_3 ( this , VAR_1 ) ; ) THEN THEN ( ELSE ELSE (  return METHOD_4 ( this , source , VAR_1 ) ; )  return METHOD_4 ( this , source , VAR_1 ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME key ) NAME key ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( IF IF ( COND VAR_2 instanceof TYPE_6 ) COND VAR_2 instanceof TYPE_6 ( THEN THEN ( VAR VAR ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME VAR_5 ) NAME VAR_5 ( INIT = ( ( TYPE_6 ) ( VAR_2 ) ) ) INIT = ( ( TYPE_6 ) ( VAR_2 ) ) ) VAR VAR (  VAR_4 = VAR_5 . METHOD_2 ( ) )  VAR_4 = VAR_5 . METHOD_2 ( ) ) THEN THEN ( ELSE ELSE (  VAR_4 = null )  VAR_4 = null ) ELSE ELSE ) IF IF (  METHOD_3 ( VAR_1 , key , VAR_4 ) )  METHOD_3 ( VAR_1 , key , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( ) ) INIT = TYPE_2 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_3 ( VAR_3 ) ) INIT = new TYPE_3 ( VAR_3 ) ) VAR VAR (  TYPE_2 . METHOD_3 ( VAR_2 , VAR_1 ) )  TYPE_2 . METHOD_3 ( VAR_2 , VAR_1 ) ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_3 . size ( ) ) INIT = VAR_3 . size ( ) ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_5 ) NAME VAR_5 ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND VAR_5 < VAR_4 ) COND VAR_5 < VAR_4 ( UPDATE UPDATE (  VAR_5 ++ )  VAR_5 ++ ) UPDATE UPDATE ( BLOCK BLOCK (  assertEquals ( STRING_1 , VAR_2 . get ( ( ( VAR_4 - VAR_5 ) - 1 ) ) , VAR_3 . get ( VAR_5 ) ) )  assertEquals ( STRING_1 , VAR_2 . get ( ( ( VAR_4 - VAR_5 ) - 1 ) ) , VAR_3 . get ( VAR_5 ) ) ) BLOCK BLOCK ) FOR FOR ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME target ) NAME target ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND target == ( this ) ) COND target == ( this ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ( IF IF ( COND ( ( VAR_1 ) == null ) || ( VAR_1 . METHOD_2 ( ) ) ) COND ( ( VAR_1 ) == null ) || ( VAR_1 . METHOD_2 ( ) ) ( THEN THEN (  return VAR_2 . METHOD_1 ( target ) ; )  return VAR_2 . METHOD_1 ( target ) ; ) THEN THEN ( ELSE ELSE ( IF IF ( COND ( ! ( VAR_3 . equals ( target . METHOD_3 ( ) ) ) ) || ( ! ( VAR_4 . equals ( target . getName ( ) ) ) ) ) COND ( ! ( VAR_3 . equals ( target . METHOD_3 ( ) ) ) ) || ( ! ( VAR_4 . equals ( target . getName ( ) ) ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  return VAR_2 . METHOD_1 ( target ) ; )  return VAR_2 . METHOD_1 ( target ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_3 ) < ( VAR_4 ) ) COND ( VAR_3 ) < ( VAR_4 ) ( THEN THEN (  TYPE_3 . fail ( STRING_1 ) )  TYPE_3 . fail ( STRING_1 ) ) THEN THEN ) IF IF ( TRY TRY ( BLOCK BLOCK (  return ( ( boolean ) ( VAR_5 class . METHOD_2 ( STRING_2 , VAR_6 class ) . invoke ( VAR_1 , VAR_2 ) ) ) ; )  return ( ( boolean ) ( VAR_5 class . METHOD_2 ( STRING_2 , VAR_6 class ) . invoke ( VAR_1 , VAR_2 ) ) ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4|TYPE_5|TYPE_6 ) TYPE TYPE_4|TYPE_5|TYPE_6 ( NAME e ) NAME e ( BLOCK BLOCK (  TYPE_7 . e ( STRING_3 , STRING_4 , e ) )  TYPE_7 . e ( STRING_3 , STRING_4 , e ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE android.bluetooth.BluetoothDevice ) TYPE android.bluetooth.BluetoothDevice ( NAME device ) NAME device ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_1 . d ( ( STRING_1 + device ) ) )  TYPE_1 . d ( ( STRING_1 + device ) ) (  VAR_2 . METHOD_2 ( device ) )  VAR_2 . METHOD_2 ( device ) (  VAR_3 . METHOD_3 ( device ) )  VAR_3 . METHOD_3 ( device ) (  VAR_4 . METHOD_4 ( device ) )  VAR_4 . METHOD_4 ( device ) (  VAR_5 . METHOD_5 ( device ) )  VAR_5 . METHOD_5 ( device ) (  VAR_6 . METHOD_6 ( device ) )  VAR_6 . METHOD_6 ( device ) (  VAR_7 . METHOD_7 ( device ) )  VAR_7 . METHOD_7 ( device ) (  VAR_8 . METHOD_8 ( device ) )  VAR_8 . METHOD_8 ( device ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME target ) NAME target ( INIT = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ) INIT = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ) VAR VAR ( IF IF ( COND target != null ) COND target != null ( THEN THEN ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME data ) NAME data ( INIT = TYPE_3 . METHOD_2 ( ) . METHOD_5 ( target ) ) INIT = TYPE_3 . METHOD_2 ( ) . METHOD_5 ( target ) ) VAR VAR ( IF IF ( COND data != null ) COND data != null ( THEN THEN ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = data . METHOD_1 ( ) ) INIT = data . METHOD_1 ( ) ) VAR VAR (  return VAR_2 ; )  return VAR_2 ; ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR (  VAR_4 = VAR_5 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 ) )  VAR_4 = VAR_5 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 ) ( IF IF ( COND VAR_2 . equals ( STRING_1 ) ) COND VAR_2 . equals ( STRING_1 ) ( THEN THEN (  VAR_6 . METHOD_2 ( new java.lang.Integer ( VAR_1 ) ) )  VAR_6 . METHOD_2 ( new java.lang.Integer ( VAR_1 ) ) ) THEN THEN ) IF IF (  return VAR_4 ; )  return VAR_4 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_2 . d ( this , STRING_1 , VAR_1 ) )  TYPE_2 . d ( this , STRING_1 , VAR_1 ) ( IF IF ( COND ( ( VAR_2 ) == null ) || ( VAR_2 . equals ( VAR_3 . METHOD_2 ( ) ) ) ) COND ( ( VAR_2 ) == null ) || ( VAR_2 . equals ( VAR_3 . METHOD_2 ( ) ) ) ( THEN THEN (  METHOD_3 ( VAR_3 . METHOD_2 ( ) ) )  METHOD_3 ( VAR_3 . METHOD_2 ( ) ) (  METHOD_4 ( ) )  METHOD_4 ( ) (  METHOD_5 ( VAR_1 ) )  METHOD_5 ( VAR_1 ) ) THEN THEN ( ELSE ELSE (  VAR_2 . METHOD_6 ( ) )  VAR_2 . METHOD_6 ( ) (  VAR_4 = VAR_1 )  VAR_4 = VAR_1 ( VAR VAR ( TYPE android.os.Message ) TYPE android.os.Message ( NAME msg ) NAME msg ( INIT = VAR_5 . METHOD_7 ( VAR_6 ) ) INIT = VAR_5 . METHOD_7 ( VAR_6 ) ) VAR VAR (  msg.obj = VAR_1 )  msg.obj = VAR_1 (  VAR_5 . METHOD_8 ( msg , VAR_7 ) )  VAR_5 . METHOD_8 ( msg , VAR_7 ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME length ) NAME length ( INIT = METHOD_2 ( VAR_1 ) ) INIT = METHOD_2 ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( os ) ) INIT = new TYPE_1 ( os ) ) VAR VAR (  VAR_2 . METHOD_3 ( VAR_3 , 0 , length ) )  VAR_2 . METHOD_3 ( VAR_3 , 0 , length ) ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME result ) NAME result ( INIT = new java.lang.String ( os . METHOD_4 ( ) ) ) INIT = new java.lang.String ( os . METHOD_4 ( ) ) ) VAR VAR (  assertEquals ( VAR_1 , result ) )  assertEquals ( VAR_1 , result ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE float ) TYPE float ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_1 . assertTrue ( ( VAR_1 > 0 ) ) )  TYPE_1 . assertTrue ( ( VAR_1 > 0 ) ) ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_2 ( 1 , ( ( int ) ( TYPE_3 . METHOD_3 ( ( 1 / VAR_1 ) ) ) ) ) ) INIT = TYPE_2 . METHOD_2 ( 1 , ( ( int ) ( TYPE_3 . METHOD_3 ( ( 1 / VAR_1 ) ) ) ) ) ) VAR VAR (  return VAR_2 <= 8 ? TYPE_1 . METHOD_4 ( VAR_2 ) : ( ( VAR_2 + 7 ) / 8 ) * 8 ; )  return VAR_2 <= 8 ? TYPE_1 . METHOD_4 ( VAR_2 ) : ( ( VAR_2 + 7 ) / 8 ) * 8 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN long ) RETURN long ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE long ) TYPE long ( NAME arg1 ) NAME arg1 ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  throw new TYPE_1 ( ) ; )  throw new TYPE_1 ( ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE long ) TYPE long ( NAME res ) NAME res ( INIT = 0 ) INIT = 0 ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_3 ) NAME VAR_3 ( INIT = - arg1 ) INIT = - arg1 ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE long ) TYPE long ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < 1 ) COND i < 1 ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK (  res += ( VAR_3 - VAR_1 ) - i )  res += ( VAR_3 - VAR_1 ) - i ) BLOCK BLOCK ) FOR FOR (  return res ; )  return res ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( ( VAR_2 ) & ( VAR_3 ) ) != 0 ) != VAR_1 ) COND ( ( ( VAR_2 ) & ( VAR_3 ) ) != 0 ) != VAR_1 ( THEN THEN (  VAR_2 = ( ( VAR_2 ) & ( ~ ( VAR_3 ) ) ) | ( VAR_1 ? VAR_3 : 0 ) )  VAR_2 = ( ( VAR_2 ) & ( ~ ( VAR_3 ) ) ) | ( VAR_1 ? VAR_3 : 0 ) ( IF IF ( COND ! VAR_1 ) COND ! VAR_1 ( THEN THEN (  METHOD_2 ( ) )  METHOD_2 ( ) ) THEN THEN ) IF IF (  METHOD_3 ( true ) )  METHOD_3 ( true ) (  METHOD_4 ( ) )  METHOD_4 ( ) (  METHOD_5 ( VAR_1 ) )  METHOD_5 ( VAR_1 ) ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  METHOD_6 ( VAR_4 ) )  METHOD_6 ( VAR_4 ) ) THEN THEN ( ELSE ELSE (  METHOD_7 ( VAR_5 ) )  METHOD_7 ( VAR_5 ) ) ELSE ELSE ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME context ) NAME context ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) >= ( VAR_2 ) ) COND ( VAR_1 ) >= ( VAR_2 ) ( THEN THEN ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = context . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) INIT = context . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) VAR VAR ( IF IF ( COND ! ( VAR_3 . METHOD_5 ( ) ) ) COND ! ( VAR_3 . METHOD_5 ( ) ) ( THEN THEN (  return VAR_3 . get ( 0 ) ; )  return VAR_3 . get ( 0 ) ; ) THEN THEN ) IF IF (  return TYPE_1 . METHOD_6 ( ) ; )  return TYPE_1 . METHOD_6 ( ) ; ) THEN THEN ( ELSE ELSE (  return context . METHOD_2 ( ) . METHOD_3 ( ) . locale ; )  return context . METHOD_2 ( ) . METHOD_3 ( ) . locale ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME size ) NAME size ( INIT = VAR_2 . size ( ) ) INIT = VAR_2 . size ( ) ) VAR VAR ( IF IF ( COND size == 0 ) COND size == 0 ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME value ) NAME value ( INIT = VAR_1 . METHOD_1 ( VAR_2 . get ( 0 ) ) ) INIT = VAR_1 . METHOD_1 ( VAR_2 . get ( 0 ) ) ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 1 ) INIT = 1 ) VAR VAR ) INIT INIT ( COND i < size ) COND i < size ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK ( IF IF ( COND ! ( TYPE_2 . METHOD_2 ( value , VAR_1 . METHOD_1 ( VAR_2 . get ( i ) ) ) ) ) COND ! ( TYPE_2 . METHOD_2 ( value , VAR_1 . METHOD_1 ( VAR_2 . get ( i ) ) ) ) ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR FOR (  return value ; )  return value ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME output ) NAME output ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 . METHOD_2 ( ) ) COND VAR_1 . METHOD_2 ( ) ( THEN THEN ( IF IF ( COND output . METHOD_3 ( ) ) COND output . METHOD_3 ( ) ( THEN THEN (  output . METHOD_4 ( ) )  output . METHOD_4 ( ) ) THEN THEN ) IF IF ) THEN THEN ( ELSE ELSE ( IF IF ( COND METHOD_5 ( output ) ) COND METHOD_5 ( output ) ( THEN THEN (  METHOD_6 ( ) )  METHOD_6 ( ) (  TYPE_1 . METHOD_7 ( ( STRING_1 + output ) ) )  TYPE_1 . METHOD_7 ( ( STRING_1 + output ) ) ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME id ) NAME id ( INIT = VAR_1 . METHOD_2 ( 8 , e . METHOD_3 ( VAR_1 ) ) ) INIT = VAR_1 . METHOD_2 ( 8 , e . METHOD_3 ( VAR_1 ) ) ) VAR VAR ( IF IF ( COND ! ( e . METHOD_4 ( TYPE_3 . METHOD_5 ( VAR_1 ) ) ) ) COND ! ( e . METHOD_4 ( TYPE_3 . METHOD_5 ( VAR_1 ) ) ) ( THEN THEN (  throw new TYPE_4 ( STRING_1 ) ; )  throw new TYPE_4 ( STRING_1 ) ; ) THEN THEN ) IF IF (  return new TYPE_1 ( id , VAR_1 , e ) ; )  return new TYPE_1 ( id , VAR_1 , e ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( VAR_2 ) ) INIT = TYPE_2 . METHOD_2 ( VAR_2 ) ) VAR VAR ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME path ) NAME path ( INIT = TYPE_3 . get ( VAR_1 ) . METHOD_3 ( ) ) INIT = TYPE_3 . get ( VAR_1 ) . METHOD_3 ( ) ) VAR VAR (  TYPE_4 . METHOD_4 ( TYPE_5 . METHOD_5 ( path ) , STRING_1 , path ) )  TYPE_4 . METHOD_4 ( TYPE_5 . METHOD_5 ( path ) , STRING_1 , path ) (  return path ; )  return path ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_5 . METHOD_6 ( STRING_2 ) ) INIT = TYPE_5 . METHOD_6 ( STRING_2 ) ) VAR VAR (  TYPE_2 . METHOD_7 ( VAR_2 , VAR_3 . toString ( ) ) )  TYPE_2 . METHOD_7 ( VAR_2 , VAR_3 . toString ( ) ) (  TYPE_6 . METHOD_8 ( VAR_3 ) )  TYPE_6 . METHOD_8 ( VAR_3 ) (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME listener ) NAME listener ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) ( IF IF ( COND listener == null ) COND listener == null ( THEN THEN (  throw new java.lang.NullPointerException ( STRING_1 ) ; )  throw new java.lang.NullPointerException ( STRING_1 ) ; ) THEN THEN ) IF IF ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME p ) NAME p ( INIT = METHOD_3 ( VAR_2 , listener ) ) INIT = METHOD_3 ( VAR_2 , listener ) ) VAR VAR (  VAR_3 . METHOD_4 ( p ) )  VAR_3 . METHOD_4 ( p ) (  VAR_4 . METHOD_1 ( VAR_1 , p ) )  VAR_4 . METHOD_1 ( VAR_1 , p ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_2 ( STRING_2 , e , VAR_5 ) ; )  throw new TYPE_2 ( STRING_2 , e , VAR_5 ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( VAR_2 ) )  VAR_1 . METHOD_2 ( VAR_2 ) (  VAR_1 . METHOD_3 ( true , METHOD_4 ( ) ) )  VAR_1 . METHOD_3 ( true , METHOD_4 ( ) ) (  assertFalse ( VAR_3 . METHOD_5 ( VAR_4 ) ) )  assertFalse ( VAR_3 . METHOD_5 ( VAR_4 ) ) (  assertTrue ( VAR_5 . METHOD_6 ( ) ) )  assertTrue ( VAR_5 . METHOD_6 ( ) ) (  assertTrue ( VAR_2 . METHOD_6 ( ) ) )  assertTrue ( VAR_2 . METHOD_6 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_2 ( ) ) INIT = VAR_2 . METHOD_2 ( ) ) VAR VAR (  VAR_1 . run ( ) )  VAR_1 . run ( ) (  METHOD_3 ( ) . METHOD_4 ( VAR_3 class ) . METHOD_5 ( STRING_1 ) . METHOD_5 ( STRING_2 ) . METHOD_5 ( STRING_3 ) . METHOD_4 ( VAR_4 class ) . METHOD_5 ( STRING_4 ) . METHOD_6 ( ) )  METHOD_3 ( ) . METHOD_4 ( VAR_3 class ) . METHOD_5 ( STRING_1 ) . METHOD_5 ( STRING_2 ) . METHOD_5 ( STRING_3 ) . METHOD_4 ( VAR_4 class ) . METHOD_5 ( STRING_4 ) . METHOD_6 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME context ) NAME context ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME node ) NAME node ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME text ) NAME text ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( INIT = java.lang.String.format ( STRING_1 , text . METHOD_2 ( VAR_2 , VAR_3 ) ) ) INIT = java.lang.String.format ( STRING_1 , text . METHOD_2 ( VAR_2 , VAR_3 ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME location ) NAME location ( INIT = context . METHOD_3 ( node , VAR_1 , VAR_3 ) ) INIT = context . METHOD_3 ( node , VAR_1 , VAR_3 ) ) VAR VAR (  context . METHOD_4 ( VAR_5 , node , location , VAR_4 , null ) )  context . METHOD_4 ( VAR_5 , node , location , VAR_4 , null ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( STRING_1 + ( VAR_2 ) ) + STRING_2 ) + ( VAR_3 ) ) INIT = ( ( STRING_1 + ( VAR_2 ) ) + STRING_2 ) + ( VAR_3 ) ) VAR VAR (  TYPE_1 . when ( VAR_4 . METHOD_2 ( VAR_1 ) ) . thenReturn ( STRING_3 ) )  TYPE_1 . when ( VAR_4 . METHOD_2 ( VAR_1 ) ) . thenReturn ( STRING_3 ) (  TYPE_2 . assertTrue ( VAR_5 . METHOD_3 ( VAR_6 , VAR_3 ) ) )  TYPE_2 . assertTrue ( VAR_5 . METHOD_3 ( VAR_6 , VAR_3 ) ) (  TYPE_1 . when ( VAR_4 . METHOD_2 ( VAR_1 ) ) . thenReturn ( STRING_4 ) )  TYPE_1 . when ( VAR_4 . METHOD_2 ( VAR_1 ) ) . thenReturn ( STRING_4 ) (  TYPE_2 . assertFalse ( VAR_5 . METHOD_3 ( VAR_6 , VAR_3 ) ) )  TYPE_2 . assertFalse ( VAR_5 . METHOD_3 ( VAR_6 , VAR_3 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_2 ( ) ) INIT = TYPE_2 . METHOD_2 ( ) ) VAR VAR (  VAR_2 . METHOD_3 ( ) )  VAR_2 . METHOD_3 ( ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ( INIT = new TYPE_1 ( null , VAR_1 , TYPE_3 . METHOD_4 ( ) ) ) INIT = new TYPE_1 ( null , VAR_1 , TYPE_3 . METHOD_4 ( ) ) ) VAR VAR (  VAR_3 = true )  VAR_3 = true ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_2 . METHOD_5 ( STRING_1 ) ) INIT = VAR_2 . METHOD_5 ( STRING_1 ) ) VAR VAR (  result . METHOD_6 ( VAR_4 ) )  result . METHOD_6 ( VAR_4 ) (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME toString ) NAME toString ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME values ) NAME values ( INIT = new java.lang.String [ this . METHOD_1 ( ) ] ) INIT = new java.lang.String [ this . METHOD_1 ( ) ] ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < ( values . length ) ) COND i < ( values . length ) ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK (  values [ i ] = java.lang.String.format ( STRING_1 , i ) )  values [ i ] = java.lang.String.format ( STRING_1 , i ) ) BLOCK BLOCK ) FOR FOR (  return METHOD_2 ( new java.lang.StringBuilder ( ) , null , values ) . toString ( ) ; )  return METHOD_2 ( new java.lang.StringBuilder ( ) , null , values ) . toString ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  VAR_1 = STRING_1 )  VAR_1 = STRING_1 ) THEN THEN ) IF IF ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  VAR_1 = TYPE_1 . METHOD_2 ( VAR_1 , VAR_3 ) )  VAR_1 = TYPE_1 . METHOD_2 ( VAR_1 , VAR_3 ) ) THEN THEN ( ELSE ELSE (  VAR_1 = TYPE_1 . METHOD_3 ( VAR_1 , VAR_3 ) )  VAR_1 = TYPE_1 . METHOD_3 ( VAR_1 , VAR_3 ) ) ELSE ELSE ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME arg ) NAME arg ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  throw new TYPE_1 ( ) ; )  throw new TYPE_1 ( ) ; ) THEN THEN ) IF IF ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.Class<?> ) TYPE java.lang.Class<?> ( NAME c ) NAME c ( INIT = java.lang.Class . METHOD_2 ( STRING_1 ) ) INIT = java.lang.Class . METHOD_2 ( STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME m ) NAME m ( INIT = c . METHOD_3 ( name , int . class ) ) INIT = c . METHOD_3 ( name , int . class ) ) VAR VAR (  return ( ( java.lang.Integer ) ( m . invoke ( null , arg ) ) ) ; )  return ( ( java.lang.Integer ) ( m . invoke ( null , arg ) ) ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME ex ) NAME ex ( BLOCK BLOCK (  throw new TYPE_1 ( ex ) ; )  throw new TYPE_1 ( ex ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME count ) NAME count ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME sb ) NAME sb ( INIT = new TYPE_3 ( 100 ) ) INIT = new TYPE_3 ( 100 ) ) VAR VAR (  sb.append ( CHAR_1 ) )  sb.append ( CHAR_1 ) ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < count ) COND i < count ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK (  sb.append ( CHAR_2 ) )  sb.append ( CHAR_2 ) ) BLOCK BLOCK ) FOR FOR (  sb.append ( CHAR_3 ) )  sb.append ( CHAR_3 ) (  sb.append ( VAR_1 . METHOD_2 ( ) ) )  sb.append ( VAR_1 . METHOD_2 ( ) ) (  return TYPE_1 . METHOD_3 ( sb . toString ( ) ) ; )  return TYPE_1 . METHOD_3 ( sb . toString ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return ( ( ( VAR_4 . get ( VAR_5 ) ) != VAR_1 ) || ( ( VAR_4 . get ( VAR_6 ) ) != VAR_3 ) ) || ( ( VAR_4 . get ( VAR_7 ) ) != VAR_2 ) ; )  return ( ( ( VAR_4 . get ( VAR_5 ) ) != VAR_1 ) || ( ( VAR_4 . get ( VAR_6 ) ) != VAR_3 ) ) || ( ( VAR_4 . get ( VAR_7 ) ) != VAR_2 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( java.lang.String [ ] ) ( VAR_2 . METHOD_2 ( ) ) ) ) INIT = ( ( java.lang.String [ ] ) ( VAR_2 . METHOD_2 ( ) ) ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME f ) NAME f ( INIT = ( ( java.lang.String [ ] ) ( VAR_3 . METHOD_3 ( ) ) ) ) INIT = ( ( java.lang.String [ ] ) ( VAR_3 . METHOD_3 ( ) ) ) ) VAR VAR (  assertTrue ( STRING_1 , f . equals ( VAR_2 ) ) )  assertTrue ( STRING_1 , f . equals ( VAR_2 ) ) (  f [ 0 ] = STRING_2 )  f [ 0 ] = STRING_2 (  assertTrue ( STRING_3 , ( ! ( f . equals ( VAR_1 ) ) ) ) )  assertTrue ( STRING_3 , ( ! ( f . equals ( VAR_1 ) ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( METHOD_2 ( ) ) ) COND ! ( METHOD_2 ( ) ) ( THEN THEN (  TYPE_2 . METHOD_3 ( VAR_3 ) )  TYPE_2 . METHOD_3 ( VAR_3 ) (  return ; )  return ; ) THEN THEN ) IF IF ( TRY TRY ( BLOCK BLOCK (  TYPE_2 . METHOD_4 ( ) . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 ) )  TYPE_2 . METHOD_4 ( ) . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME e ) NAME e ( BLOCK BLOCK (  throw e . METHOD_5 ( ) ; )  throw e . METHOD_5 ( ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME context ) NAME context ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME service ) NAME service ( INIT = VAR_2 . METHOD_1 ( context , STRING_1 ) ) INIT = VAR_2 . METHOD_1 ( context , STRING_1 ) ) VAR VAR (  return new TYPE_5 ( VAR_3 . METHOD_1 ( context , VAR_1 ) , 2 , 2 , new TYPE_6 ( service ) , false ) ; )  return new TYPE_5 ( VAR_3 . METHOD_1 ( context , VAR_1 ) , 2 , 2 , new TYPE_6 ( service ) , false ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_7 ) TYPE TYPE_7 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_3 ( e ) ; )  throw new TYPE_3 ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_6 ) NAME VAR_6 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_7 ) == ( VAR_8 ) ) COND ( VAR_7 ) == ( VAR_8 ) ( THEN THEN ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_9 ) NAME VAR_9 ( INIT = VAR_10 . METHOD_2 ( VAR_1 ) ) INIT = VAR_10 . METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND ( VAR_11 . equals ( VAR_9 ) ) == false ) COND ( VAR_11 . equals ( VAR_9 ) ) == false ( THEN THEN (  METHOD_3 ( VAR_9 , false ) )  METHOD_3 ( VAR_9 , false ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  METHOD_4 ( VAR_1 ) )  METHOD_4 ( VAR_1 ) (  return METHOD_1 ( result , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; )  return METHOD_1 ( result , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( STRING_1 ) ) INIT = TYPE_1 . METHOD_2 ( STRING_1 ) ) VAR VAR (  assertEquals ( 0 , TYPE_1 . METHOD_3 ( VAR_1 ) ) )  assertEquals ( 0 , TYPE_1 . METHOD_3 ( VAR_1 ) ) ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_1 . METHOD_2 ( STRING_2 ) ) INIT = TYPE_1 . METHOD_2 ( STRING_2 ) ) VAR VAR (  assertEquals ( 16 , TYPE_1 . METHOD_3 ( VAR_2 ) ) )  assertEquals ( 16 , TYPE_1 . METHOD_3 ( VAR_2 ) ) (  TYPE_2 . METHOD_4 ( ) )  TYPE_2 . METHOD_4 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( ( TYPE_4 ) ( VAR_1 ) ) ) INIT = ( ( TYPE_4 ) ( VAR_1 ) ) ) VAR VAR (  return TYPE_5 . METHOD_1 ( VAR_1 , e ) ; )  return TYPE_5 . METHOD_1 ( VAR_1 , e ) ; ) THEN THEN ) IF IF ( IF IF ( COND ! ( e . METHOD_2 ( TYPE_3 . METHOD_3 ( VAR_1 ) ) ) ) COND ! ( e . METHOD_2 ( TYPE_3 . METHOD_3 ( VAR_1 ) ) ) ( THEN THEN (  throw new TYPE_6 ( STRING_1 ) ; )  throw new TYPE_6 ( STRING_1 ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE int ) TYPE int ( NAME id ) NAME id ( INIT = VAR_1 . METHOD_4 ( 2 , e . METHOD_5 ( VAR_1 ) ) ) INIT = VAR_1 . METHOD_4 ( 2 , e . METHOD_5 ( VAR_1 ) ) ) VAR VAR (  return new TYPE_1 ( id , VAR_1 ) ; )  return new TYPE_1 ( id , VAR_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_4 . METHOD_3 ( VAR_1 ) )  VAR_4 . METHOD_3 ( VAR_1 ) ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN (  VAR_4 . METHOD_4 ( METHOD_5 ( VAR_1 , true ) ) )  VAR_4 . METHOD_4 ( METHOD_5 ( VAR_1 , true ) ) ) THEN THEN ( ELSE ELSE (  VAR_4 . METHOD_4 ( STRING_1 ) )  VAR_4 . METHOD_4 ( STRING_1 ) ) ELSE ELSE ) IF IF (  METHOD_6 ( ) )  METHOD_6 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME t ) NAME t ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND TYPE_1 . METHOD_2 ( mContext ) . METHOD_3 ( ) ) COND TYPE_1 . METHOD_2 ( mContext ) . METHOD_3 ( ) ( THEN THEN (  METHOD_4 ( ) )  METHOD_4 ( ) ) THEN THEN ) IF IF (  VAR_4 = true )  VAR_4 = true ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_6 ) INIT = VAR_6 ) VAR VAR ( IF IF ( COND VAR_5 != null ) COND VAR_5 != null ( THEN THEN (  VAR_7 = true )  VAR_7 = true ) THEN THEN ) IF IF ( IF IF ( COND ( ( VAR_8 ) != null ) && ( ( VAR_9 ) != null ) ) COND ( ( VAR_8 ) != null ) && ( ( VAR_9 ) != null ) ( THEN THEN (  VAR_9 . METHOD_5 ( this , VAR_1 , t , VAR_2 , VAR_3 ) )  VAR_9 . METHOD_5 ( this , VAR_1 , t , VAR_2 , VAR_3 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( PARAMS PARAMS ( VAR VAR ( TYPE com.android.jack.ir.ast.JMethod ) TYPE com.android.jack.ir.ast.JMethod ( NAME method ) NAME method ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( ( method . METHOD_1 ( ) . METHOD_2 ( ) ) || ( method . METHOD_3 ( ) ) ) || ( method . METHOD_4 ( ) ) ) || ( ! ( VAR_1 . METHOD_5 ( this . METHOD_6 ( ) , method ) ) ) ) COND ( ( ( method . METHOD_1 ( ) . METHOD_2 ( ) ) || ( method . METHOD_3 ( ) ) ) || ( method . METHOD_4 ( ) ) ) || ( ! ( VAR_1 . METHOD_5 ( this . METHOD_6 ( ) , method ) ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_2 . METHOD_5 ( method ) )  VAR_2 . METHOD_5 ( method ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE float ) TYPE float ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE float ) TYPE float ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_6 ) NAME VAR_6 ( INIT = VAR_7 . METHOD_2 ( VAR_1 ) ) INIT = VAR_7 . METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_6 == null ) COND VAR_6 == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  VAR_6 . METHOD_3 ( VAR_2 , VAR_3 , VAR_4 , VAR_5 ) )  VAR_6 . METHOD_3 ( VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 class . METHOD_2 ( ) ) INIT = VAR_2 class . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.Class<?> ) TYPE java.lang.Class<?> ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_3 = VAR_1 . METHOD_3 ( STRING_1 ) )  VAR_3 = VAR_1 . METHOD_3 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( BLOCK BLOCK (  return null ; )  return null ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_5 = VAR_3 . METHOD_4 ( STRING_2 , VAR_6 . String class ) )  VAR_5 = VAR_3 . METHOD_4 ( STRING_2 , VAR_6 . String class ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_7 ) NAME VAR_7 ( BLOCK BLOCK (  VAR_8 . println ( STRING_3 ) )  VAR_8 . println ( STRING_3 ) (  return null ; )  return null ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  return VAR_5 ; )  return VAR_5 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME out ) NAME out ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  METHOD_2 ( VAR_1 , VAR_3 ) )  METHOD_2 ( VAR_1 , VAR_3 ) ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  VAR_4 . METHOD_3 ( out ) )  VAR_4 . METHOD_3 ( out ) ) THEN THEN ( ELSE ELSE (  VAR_4 . METHOD_4 ( out ) )  VAR_4 . METHOD_4 ( out ) ) ELSE ELSE ) IF IF (  TYPE_1 . METHOD_5 ( VAR_5 ) )  TYPE_1 . METHOD_5 ( VAR_5 ) (  TYPE_1 . METHOD_6 ( VAR_6 ) )  TYPE_1 . METHOD_6 ( VAR_6 ) (  TYPE_2 . run ( VAR_4 ) )  TYPE_2 . run ( VAR_4 ) ) BLOCK BLOCK ( FINALLY FINALLY (  TYPE_1 . METHOD_5 ( VAR_7 ) )  TYPE_1 . METHOD_5 ( VAR_7 ) (  TYPE_1 . METHOD_6 ( VAR_8 ) )  TYPE_1 . METHOD_6 ( VAR_8 ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_5 ) COND VAR_5 ( THEN THEN (  android.util.Log.w ( VAR_6 . TAG , STRING_1 ) )  android.util.Log.w ( VAR_6 . TAG , STRING_1 ) (  return ; )  return ; ) THEN THEN ( ELSE ELSE ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_7 ) NAME VAR_7 ( INIT = VAR_8 . get ( ) ) INIT = VAR_8 . get ( ) ) VAR VAR ( IF IF ( COND VAR_7 == null ) COND VAR_7 == null ( THEN THEN (  android.util.Log.w ( VAR_6 . TAG , STRING_2 ) )  android.util.Log.w ( VAR_6 . TAG , STRING_2 ) (  return ; )  return ; ) THEN THEN ) IF IF (  VAR_7 . METHOD_1 ( VAR_9 , VAR_10 , VAR_1 , VAR_3 , VAR_2 , VAR_4 ) )  VAR_7 . METHOD_1 ( VAR_9 , VAR_10 , VAR_1 , VAR_3 , VAR_2 , VAR_4 ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME config ) NAME config ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  VAR_1 . METHOD_3 ( STRING_1 ) . c ( TYPE_2 . METHOD_4 ( ) ) . METHOD_5 ( ) )  VAR_1 . METHOD_3 ( STRING_1 ) . c ( TYPE_2 . METHOD_4 ( ) ) . METHOD_5 ( ) ( IF IF ( COND ! ( mContext . METHOD_6 ( ) . METHOD_7 ( VAR_2 ) ) ) COND ! ( mContext . METHOD_6 ( ) . METHOD_7 ( VAR_2 ) ) ( THEN THEN (  throw new TYPE_3 ( STRING_2 ) ; )  throw new TYPE_3 ( STRING_2 ) ; ) THEN THEN ) IF IF (  return VAR_3 . METHOD_8 ( VAR_4 , config ) ; )  return VAR_3 . METHOD_8 ( VAR_4 , config ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  assertTrue ( STRING_1 , VAR_2 . METHOD_2 ( ) ) )  assertTrue ( STRING_1 , VAR_2 . METHOD_2 ( ) ) (  assertTrue ( STRING_2 , VAR_5 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ) )  assertTrue ( STRING_2 , VAR_5 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ) ( IF IF ( COND VAR_4 ) COND VAR_4 ( THEN THEN (  assertEquals ( STRING_3 , VAR_1 . METHOD_4 ( ) , VAR_2 . METHOD_4 ( ) ) )  assertEquals ( STRING_3 , VAR_1 . METHOD_4 ( ) , VAR_2 . METHOD_4 ( ) ) ) THEN THEN ) IF IF (  assertEquals ( VAR_3 , VAR_2 . METHOD_5 ( ) ) )  assertEquals ( VAR_3 , VAR_2 . METHOD_5 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private final ) MODIFIER private final ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( TYPE_2 . METHOD_2 ( ) ) ) INIT = new TYPE_1 ( TYPE_2 . METHOD_2 ( ) ) ) VAR VAR (  TYPE_2 . METHOD_3 ( VAR_1 ) )  TYPE_2 . METHOD_3 ( VAR_1 ) ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  METHOD_4 ( ) )  METHOD_4 ( ) (  TYPE_2 . METHOD_5 ( VAR_1 , VAR_3 ) )  TYPE_2 . METHOD_5 ( VAR_1 , VAR_3 ) ) THEN THEN ( ELSE ELSE (  TYPE_2 . METHOD_6 ( VAR_1 , VAR_3 ) )  TYPE_2 . METHOD_6 ( VAR_1 , VAR_3 ) ) ELSE ELSE ) IF IF (  this . VAR_4 = VAR_1 )  this . VAR_4 = VAR_1 ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( VAR_1 class ) . METHOD_3 ( ) . METHOD_4 ( ) )  TYPE_1 . METHOD_2 ( VAR_1 class ) . METHOD_3 ( ) . METHOD_4 ( ) (  fail ( ) )  fail ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME expected ) NAME expected ( BLOCK BLOCK (  assertTrue ( ( ( expected . METHOD_5 ( ) ) instanceof TYPE_3 ) ) )  assertTrue ( ( ( expected . METHOD_5 ( ) ) instanceof TYPE_3 ) ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( VAR_2 , 1 ) ) INIT = TYPE_2 . METHOD_2 ( VAR_2 , 1 ) ) VAR VAR (  assertEquals ( VAR_3 , VAR_4 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ) )  assertEquals ( VAR_3 , VAR_4 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ) (  METHOD_5 ( VAR_1 ) )  METHOD_5 ( VAR_1 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_5 ) NAME VAR_5 ( INIT = TYPE_2 . METHOD_6 ( VAR_6 , 1 ) . METHOD_7 ( ) . METHOD_8 ( ) ) INIT = TYPE_2 . METHOD_6 ( VAR_6 , 1 ) . METHOD_7 ( ) . METHOD_8 ( ) ) VAR VAR (  assertEquals ( VAR_7 , VAR_4 . METHOD_3 ( VAR_5 . METHOD_4 ( ) ) ) )  assertEquals ( VAR_7 , VAR_4 . METHOD_3 ( VAR_5 . METHOD_4 ( ) ) ) (  METHOD_5 ( VAR_1 ) )  METHOD_5 ( VAR_1 ) (  METHOD_9 ( ) )  METHOD_9 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME res ) NAME res ( INIT = METHOD_2 ( ) . METHOD_3 ( ) ) INIT = METHOD_2 ( ) . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = res . METHOD_4 ( ) . VAR_1 ) INIT = res . METHOD_4 ( ) . VAR_1 ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  METHOD_5 ( res , VAR_1 ) )  METHOD_5 ( res , VAR_1 ) ) BLOCK BLOCK ( FINALLY FINALLY (  TYPE_3 . METHOD_6 ( res , VAR_1 ) )  TYPE_3 . METHOD_6 ( res , VAR_1 ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_1 ) ( TYPE_1 . METHOD_2 ( ) ) ) ) INIT = ( ( TYPE_1 ) ( TYPE_1 . METHOD_2 ( ) ) ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_3 ( ) ) INIT = VAR_1 . METHOD_3 ( ) ) VAR VAR (  TYPE_2 . METHOD_4 ( VAR_3 , VAR_2 ) )  TYPE_2 . METHOD_4 ( VAR_3 , VAR_2 ) (  METHOD_5 ( VAR_2 , VAR_1 . METHOD_3 ( ) ) )  METHOD_5 ( VAR_2 , VAR_1 . METHOD_3 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( VAR_2 ) )  VAR_1 . METHOD_2 ( VAR_2 ) (  VAR_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( ) ) )  VAR_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( ) ) (  VAR_1 . METHOD_5 ( VAR_3 ) )  VAR_1 . METHOD_5 ( VAR_3 ) (  VAR_1 . METHOD_6 ( VAR_4 ) )  VAR_1 . METHOD_6 ( VAR_4 ) (  VAR_1 . METHOD_7 ( VAR_3 ) )  VAR_1 . METHOD_7 ( VAR_3 ) (  VAR_1 . METHOD_8 ( TYPE_3 . METHOD_9 ( ) ) )  VAR_1 . METHOD_8 ( TYPE_3 . METHOD_9 ( ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new java.lang.RuntimeException ( e ) ; )  throw new java.lang.RuntimeException ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN java.lang.Class ) RETURN java.lang.Class ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.Class ) TYPE java.lang.Class ( NAME VAR_2 ) NAME VAR_2 ( INIT = null ) INIT = null ) VAR VAR ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN ( TRY TRY ( BLOCK BLOCK (  VAR_2 = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( VAR_1 ) )  VAR_2 = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( VAR_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME ex ) NAME ex ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  VAR_2 = TYPE_3 . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_3 ( VAR_1 ) )  VAR_2 = TYPE_3 . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_3 ( VAR_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( BLOCK BLOCK (  VAR_2 = null )  VAR_2 = null ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) THEN THEN ) IF IF (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( SWITCH SWITCH ( NAME TYPE_3 . METHOD_2 ( VAR_1 ) ) NAME TYPE_3 . METHOD_2 ( VAR_1 ) ( CASE VAR_2 ( BLOCK BLOCK (  return new TYPE_4 ( this ) ; )  return new TYPE_4 ( this ) ; ) BLOCK BLOCK ) CASE VAR_2 ( CASE VAR_3 ( BLOCK BLOCK (  return new TYPE_5 ( this ) ; )  return new TYPE_5 ( this ) ; ) BLOCK BLOCK ) CASE VAR_3 ( CASE VAR_4 ( BLOCK BLOCK (  return new TYPE_6 ( this ) ; )  return new TYPE_6 ( this ) ; ) BLOCK BLOCK ) CASE VAR_4 ( CASE VAR_5 ( BLOCK BLOCK (  return new TYPE_7 ( this ) ; )  return new TYPE_7 ( this ) ; ) BLOCK BLOCK ) CASE VAR_5 ( DEFAULT DEFAULT ( BLOCK BLOCK (  throw new TYPE_2 ( STRING_1 ) ; )  throw new TYPE_2 ( STRING_1 ) ; ) BLOCK BLOCK ) DEFAULT DEFAULT ) SWITCH SWITCH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . when ( VAR_1 . METHOD_2 ( org.mockito.Matchers . METHOD_3 ( VAR_2 class ) ) ) . thenReturn ( METHOD_4 ( VAR_3 , VAR_4 ) ) )  TYPE_1 . when ( VAR_1 . METHOD_2 ( org.mockito.Matchers . METHOD_3 ( VAR_2 class ) ) ) . thenReturn ( METHOD_4 ( VAR_3 , VAR_4 ) ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_5 ) NAME VAR_5 ( INIT = METHOD_5 ( VAR_6 , false , true , INT_1 , INT_2 , VAR_7 , VAR_3 , VAR_8 , VAR_9 , VAR_10 , null ) ) INIT = METHOD_5 ( VAR_6 , false , true , INT_1 , INT_2 , VAR_7 , VAR_3 , VAR_8 , VAR_9 , VAR_10 , null ) ) VAR VAR (  VAR_11 . METHOD_6 ( VAR_5 , VAR_12 , VAR_13 ) )  VAR_11 . METHOD_6 ( VAR_5 , VAR_12 , VAR_13 ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_14 ) NAME VAR_14 ( INIT = METHOD_7 ( VAR_4 ) ) INIT = METHOD_7 ( VAR_4 ) ) VAR VAR (  assertEquals ( VAR_14 . METHOD_8 ( VAR_15 ) , java.lang.Integer . METHOD_9 ( VAR_16 ) ) )  assertEquals ( VAR_14 . METHOD_8 ( VAR_15 ) , java.lang.Integer . METHOD_9 ( VAR_16 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  s = new TYPE_1 ( STRING_1 ) )  s = new TYPE_1 ( STRING_1 ) ( TRY TRY ( BLOCK BLOCK (  s . METHOD_2 ( ( ( java.lang.String ) ( null ) ) ) )  s . METHOD_2 ( ( ( java.lang.String ) ( null ) ) ) (  fail ( STRING_2 ) )  fail ( STRING_2 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.NullPointerException ) TYPE java.lang.NullPointerException ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  s = new TYPE_1 ( STRING_1 ) )  s = new TYPE_1 ( STRING_1 ) (  s . METHOD_2 ( STRING_3 ) )  s . METHOD_2 ( STRING_3 ) (  assertEquals ( STRING_3 , s . METHOD_3 ( ) . toString ( ) ) )  assertEquals ( STRING_3 , s . METHOD_3 ( ) . toString ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( STRING_1 ) ) INIT = METHOD_2 ( STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_3 ( VAR_2 ) ) INIT = new TYPE_3 ( VAR_2 ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( WHILE WHILE ( COND ( VAR_4 = VAR_3 . METHOD_3 ( ) ) != null ) COND ( VAR_4 = VAR_3 . METHOD_3 ( ) ) != null ( BLOCK BLOCK ( IF IF ( COND VAR_1 . equals ( VAR_4 . getName ( ) ) ) COND VAR_1 . equals ( VAR_4 . getName ( ) ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) WHILE WHILE (  return false ; )  return false ; ) BLOCK BLOCK ( FINALLY FINALLY (  VAR_3 . METHOD_4 ( ) )  VAR_3 . METHOD_4 ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME server ) NAME server ( INIT = new TYPE_1 ( 0 ) ) INIT = new TYPE_1 ( 0 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( TYPE_3 . METHOD_2 ( ) , server . METHOD_3 ( ) , TYPE_3 . METHOD_2 ( ) , 0 ) ) INIT = new TYPE_2 ( TYPE_3 . METHOD_2 ( ) , server . METHOD_3 ( ) , TYPE_3 . METHOD_2 ( ) , 0 ) ) VAR VAR (  METHOD_4 ( STRING_1 , 0 , VAR_1 . METHOD_3 ( ) ) )  METHOD_4 ( STRING_1 , 0 , VAR_1 . METHOD_3 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( STRING_1 ) ) INIT = TYPE_1 . METHOD_2 ( STRING_1 ) ) VAR VAR (  assertTrue ( ( VAR_1 != ( VAR_2 ) ) ) )  assertTrue ( ( VAR_1 != ( VAR_2 ) ) ) (  TYPE_1 . METHOD_3 ( VAR_1 ) )  TYPE_1 . METHOD_3 ( VAR_1 ) ( TRY TRY ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( STRING_2 ) )  TYPE_1 . METHOD_2 ( STRING_2 ) (  fail ( ) )  fail ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.RuntimeException ) TYPE java.lang.RuntimeException ( NAME expected ) NAME expected ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  TYPE_2 . METHOD_4 ( ) )  TYPE_2 . METHOD_4 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) == null ) COND ( VAR_1 ) == null ( THEN THEN (  VAR_1 = new TYPE_1 ( 20 , 0 , ( - 1 ) , ( - 1 ) , ( - 1 ) , ( - 1 ) , ( - 1 ) , INT_1 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , true ) )  VAR_1 = new TYPE_1 ( 20 , 0 , ( - 1 ) , ( - 1 ) , ( - 1 ) , ( - 1 ) , ( - 1 ) , INT_1 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , true ) ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_3 ) != null ) COND ( VAR_3 ) != null ( THEN THEN (  VAR_3 . METHOD_2 ( new android.os.AsyncResult ( null , VAR_1 , null ) ) )  VAR_3 . METHOD_2 ( new android.os.AsyncResult ( null , VAR_1 , null ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_3 ) NAME METHOD_3 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_4 ( METHOD_5 ( ) ) ) INIT = METHOD_4 ( METHOD_5 ( ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_6 ( VAR_2 , STRING_3 ) ) INIT = METHOD_6 ( VAR_2 , STRING_3 ) ) VAR VAR (  VAR_1 . METHOD_7 ( VAR_3 ) )  VAR_1 . METHOD_7 ( VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD (  METHOD_2 ( STRING_1 , STRING_2 , new TYPE_1 ( ) { public void METHOD_3 ( java.util.List < TYPE_2 > VAR_1 ) { long VAR_2 = METHOD_4 ( METHOD_5 ( ) ) ; TYPE_2 VAR_3 = METHOD_6 ( VAR_2 , STRING_3 ) ; VAR_1 . METHOD_7 ( VAR_3 ) ; } } ) )  METHOD_2 ( STRING_1 , STRING_2 , new TYPE_1 ( ) { public void METHOD_3 ( java.util.List < TYPE_2 > VAR_1 ) { long VAR_2 = METHOD_4 ( METHOD_5 ( ) ) ; TYPE_2 VAR_3 = METHOD_6 ( VAR_2 , STRING_3 ) ; VAR_1 . METHOD_7 ( VAR_3 ) ; } } ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME r ) NAME r ( INIT = TYPE_1 . METHOD_2 ( ) ) INIT = TYPE_1 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = r . METHOD_3 ( ) ) INIT = r . METHOD_3 ( ) ) VAR VAR ( IF IF ( COND ( ( VAR_2 ) == null ) || ( ! ( VAR_2 . equals ( VAR_1 ) ) ) ) COND ( ( VAR_2 ) == null ) || ( ! ( VAR_2 . equals ( VAR_1 ) ) ) ( THEN THEN (  VAR_2 = VAR_1 )  VAR_2 = VAR_1 (  VAR_3 = TYPE_3 . METHOD_4 ( VAR_4 ) )  VAR_3 = TYPE_3 . METHOD_4 ( VAR_4 ) (  VAR_5 = r . METHOD_5 ( VAR_6 ) )  VAR_5 = r . METHOD_5 ( VAR_6 ) (  VAR_7 = r . METHOD_5 ( VAR_8 ) )  VAR_7 = r . METHOD_5 ( VAR_8 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME in ) NAME in ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( in . METHOD_2 ( ) ) != 0 ) INIT = ( in . METHOD_2 ( ) ) != 0 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = in . METHOD_2 ( ) ) INIT = in . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = in . METHOD_2 ( ) ) INIT = in . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ( INIT = in . METHOD_2 ( ) ) INIT = in . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_5 ) NAME VAR_5 ( INIT = ( in . METHOD_2 ( ) ) != 0 ) INIT = ( in . METHOD_2 ( ) ) != 0 ) VAR VAR (  return new TYPE_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; )  return new TYPE_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_1<java.lang.String> ) TYPE TYPE_1<java.lang.String> ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.Object[] ) TYPE java.lang.Object[] ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_3 . METHOD_2 ( ) ) INIT = VAR_3 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_5 ) NAME VAR_5 ( INIT = TYPE_2 . METHOD_3 ( null , VAR_1 , VAR_2 , VAR_6 , null , VAR_4 , VAR_4 [ 0 ] ) ) INIT = TYPE_2 . METHOD_3 ( null , VAR_1 , VAR_2 , VAR_6 , null , VAR_4 , VAR_4 [ 0 ] ) ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME x ) NAME x ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND x < ( VAR_4 . length ) ) COND x < ( VAR_4 . length ) ( UPDATE UPDATE (  x ++ )  x ++ ) UPDATE UPDATE ( BLOCK BLOCK ( IF IF ( COND VAR_4 [ x ] . equals ( VAR_5 ) ) COND VAR_4 [ x ] . equals ( VAR_5 ) ( THEN THEN (  return x ; )  return x ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR FOR (  return - 1 ; )  return - 1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME type ) NAME type ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SWITCH SWITCH ( NAME VAR_1 ) NAME VAR_1 ( CASE VAR_4 ( BLOCK BLOCK (  return TYPE_4 . METHOD_2 ( type ) ; )  return TYPE_4 . METHOD_2 ( type ) ; ) BLOCK BLOCK ) CASE VAR_4 ( CASE LT ( BLOCK BLOCK (  return TYPE_4 . METHOD_2 ( type ) ; )  return TYPE_4 . METHOD_2 ( type ) ; ) BLOCK BLOCK ) CASE LT ( CASE VAR_5 ( BLOCK BLOCK (  return TYPE_4 . METHOD_3 ( type ) ; )  return TYPE_4 . METHOD_3 ( type ) ; ) BLOCK BLOCK ) CASE VAR_5 ( CASE VAR_6 ( BLOCK BLOCK (  return TYPE_4 . METHOD_3 ( type ) ; )  return TYPE_4 . METHOD_3 ( type ) ; ) BLOCK BLOCK ) CASE VAR_6 ( CASE VAR_7 ( BLOCK BLOCK (  return TYPE_4 . METHOD_3 ( type ) ; )  return TYPE_4 . METHOD_3 ( type ) ; ) BLOCK BLOCK ) CASE VAR_7 ( CASE VAR_8 ( BLOCK BLOCK (  return TYPE_4 . METHOD_3 ( type ) ; )  return TYPE_4 . METHOD_3 ( type ) ; ) BLOCK BLOCK ) CASE VAR_8 ( DEFAULT DEFAULT ( BLOCK BLOCK (  throw new TYPE_5 ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) ) ; )  throw new TYPE_5 ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) ) ; ) BLOCK BLOCK ) DEFAULT DEFAULT ) SWITCH SWITCH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN byte[] ) RETURN byte[] ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME context ) NAME context ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = context . METHOD_2 ( ) ) INIT = context . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_3 = VAR_2 . METHOD_3 ( VAR_1 ) )  VAR_3 = VAR_2 . METHOD_3 ( VAR_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK (  android.util.Log.e ( VAR_4 . TAG , ( STRING_1 + VAR_1 ) ) )  android.util.Log.e ( VAR_4 . TAG , ( STRING_1 + VAR_1 ) ) (  return null ; )  return null ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_5 ) NAME VAR_5 ( INIT = TYPE_4 . METHOD_4 ( VAR_3 ) ) INIT = TYPE_4 . METHOD_4 ( VAR_3 ) ) VAR VAR (  return VAR_5 ; )  return VAR_5 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 == null ) || ( ( VAR_1 . length ( ) ) == 0 ) ) COND ( VAR_1 == null ) || ( ( VAR_1 . length ( ) ) == 0 ) ( THEN THEN (  VAR_2 . METHOD_2 ( ) )  VAR_2 . METHOD_2 ( ) (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME state ) NAME state ( INIT = new TYPE_2 ( VAR_1 ) ) INIT = new TYPE_2 ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME result ) NAME result ( INIT = new TYPE_3 ( ) ) INIT = new TYPE_3 ( ) ) VAR VAR (  TYPE_4 . METHOD_3 ( state , result ) )  TYPE_4 . METHOD_3 ( state , result ) (  result . METHOD_4 ( VAR_2 , VAR_3 ) )  result . METHOD_4 ( VAR_2 , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( INIT = ( VAR_3 == null ) ? null : TYPE_4 . METHOD_2 ( TYPE_4 . METHOD_3 ( VAR_3 ) ) ) INIT = ( VAR_3 == null ) ? null : TYPE_4 . METHOD_2 ( TYPE_4 . METHOD_3 ( VAR_3 ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_5 ) NAME VAR_5 ( INIT = new TYPE_1 ( VAR_2 . METHOD_4 ( ) , VAR_2 . METHOD_5 ( ) , VAR_1 , VAR_3 , VAR_4 ) ) INIT = new TYPE_1 ( VAR_2 . METHOD_4 ( ) , VAR_2 . METHOD_5 ( ) , VAR_1 , VAR_3 , VAR_4 ) ) VAR VAR (  METHOD_6 ( VAR_5 ) )  METHOD_6 ( VAR_5 ) (  return VAR_5 ; )  return VAR_5 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.Map<TYPE_2,java.util.Map<java.lang.String,TYPE_3>> ) TYPE java.util.Map<TYPE_2,java.util.Map<java.lang.String,TYPE_3>> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.Map<TYPE_2,java.util.Map<java.lang.String,TYPE_3>> ) TYPE java.util.Map<TYPE_2,java.util.Map<java.lang.String,TYPE_3>> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_5 ) NAME VAR_5 ( INIT = new TYPE_1 ( VAR_1 , VAR_2 ) ) INIT = new TYPE_1 ( VAR_1 , VAR_2 ) ) VAR VAR (  VAR_5 . METHOD_2 ( VAR_3 , VAR_4 ) )  VAR_5 . METHOD_2 ( VAR_3 , VAR_4 ) (  return VAR_5 ; )  return VAR_5 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  this )  this ( BLOCK BLOCK ( IF IF ( COND ( tree ) != null ) COND ( tree ) != null ( THEN THEN (  VAR_3 . METHOD_2 ( ) )  VAR_3 . METHOD_2 ( ) ) THEN THEN ) IF IF (  this . VAR_1 = VAR_1 )  this . VAR_1 = VAR_1 (  tree = new TYPE_3 ( VAR_2 ) )  tree = new TYPE_3 ( VAR_2 ) (  tree . METHOD_3 ( ) )  tree . METHOD_3 ( ) (  tree . METHOD_4 ( ) )  tree . METHOD_4 ( ) (  VAR_4 = null )  VAR_4 = null (  VAR_5 = 1 )  VAR_5 = 1 (  VAR_6 = null )  VAR_6 = null ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED (  METHOD_5 ( ) )  METHOD_5 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( METHOD_2 ( ) . METHOD_3 ( ) ) )  super . METHOD_1 ( METHOD_2 ( ) . METHOD_3 ( ) ) (  VAR_1 = new TYPE_1 ( mContext , VAR_2 . METHOD_4 ( ) , VAR_2 . METHOD_5 ( ) , new byte [ ] [ ] { VAR_3 } , 0 , null , VAR_4 , METHOD_2 ( ) . METHOD_3 ( ) ) )  VAR_1 = new TYPE_1 ( mContext , VAR_2 . METHOD_4 ( ) , VAR_2 . METHOD_5 ( ) , new byte [ ] [ ] { VAR_3 } , 0 , null , VAR_4 , METHOD_2 ( ) . METHOD_3 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  android.util.Log . i ( VAR_1 . TAG , STRING_1 ) )  android.util.Log . i ( VAR_1 . TAG , STRING_1 ) ( VAR VAR ( TYPE TYPE_1<java.lang.Integer,java.lang.Integer> ) TYPE TYPE_1<java.lang.Integer,java.lang.Integer> ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  android.util.Log.w ( VAR_1 . TAG , ( ( ( STRING_2 + ( VAR_3 ) ) + STRING_3 ) + ( VAR_4 ) ) ) )  android.util.Log.w ( VAR_1 . TAG , ( ( ( STRING_2 + ( VAR_3 ) ) + STRING_3 ) + ( VAR_4 ) ) ) (  METHOD_3 ( VAR_3 , VAR_4 , false , false ) )  METHOD_3 ( VAR_3 , VAR_4 , false , false ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<TYPE_2> ) RETURN TYPE_1<TYPE_2> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME project ) NAME project ) VAR VAR ( VAR VAR ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE TYPE_7 ) TYPE TYPE_7 ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( project == null ) || ( ! ( TYPE_8 . METHOD_2 ( ) . METHOD_3 ( ) ) ) ) COND ( project == null ) || ( ! ( TYPE_8 . METHOD_2 ( ) . METHOD_3 ( ) ) ) ( THEN THEN (  return TYPE_9 . METHOD_4 ( ) ; )  return TYPE_9 . METHOD_4 ( ) ; ) THEN THEN ) IF IF (  return VAR_5 < TYPE_2 > METHOD_5 ( new TYPE_10 ( project , VAR_1 , VAR_2 , VAR_3 ) ) ; )  return VAR_5 < TYPE_2 > METHOD_5 ( new TYPE_10 ( project , VAR_1 , VAR_2 , VAR_3 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public synchronized ) MODIFIER public synchronized ( RETURN void ) RETURN void ( NAME run ) NAME run ( PARAMS PARAMS ( VAR VAR ( TYPE com.android.jack.ir.ast.JMethod ) TYPE com.android.jack.ir.ast.JMethod ( NAME method ) NAME method ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( ( method . METHOD_1 ( ) . METHOD_2 ( ) ) || ( method . METHOD_3 ( ) ) ) || ( method . METHOD_4 ( ) ) ) || ( ! ( VAR_1 . METHOD_5 ( this . METHOD_6 ( ) , method ) ) ) ) COND ( ( ( method . METHOD_1 ( ) . METHOD_2 ( ) ) || ( method . METHOD_3 ( ) ) ) || ( method . METHOD_4 ( ) ) ) || ( ! ( VAR_1 . METHOD_5 ( this . METHOD_6 ( ) , method ) ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( method . METHOD_1 ( ) ) ) INIT = new TYPE_1 ( method . METHOD_1 ( ) ) ) VAR VAR (  VAR_2 . METHOD_5 ( method ) )  VAR_2 . METHOD_5 ( method ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = 10 ) INIT = 10 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_1 . METHOD_2 ( ) ) INIT = TYPE_1 . METHOD_2 ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_2 . METHOD_3 ( null ) )  VAR_2 . METHOD_3 ( null ) (  VAR_2 . METHOD_4 ( false ) )  VAR_2 . METHOD_4 ( false ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_2 . METHOD_5 ( ) ) INIT = VAR_2 . METHOD_5 ( ) ) VAR VAR (  VAR_3 . METHOD_6 ( VAR_1 ) )  VAR_3 . METHOD_6 ( VAR_1 ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_2 . METHOD_7 ( ) ) INIT = VAR_2 . METHOD_7 ( ) ) VAR VAR (  METHOD_8 ( VAR_4 ) )  METHOD_8 ( VAR_4 ) ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_3 . METHOD_9 ( ) ) INIT = VAR_3 . METHOD_9 ( ) ) VAR VAR (  assertEquals ( VAR_1 , VAR_5 ) )  assertEquals ( VAR_1 , VAR_5 ) ) BLOCK BLOCK ( FINALLY FINALLY (  VAR_2 . METHOD_10 ( ) )  VAR_2 . METHOD_10 ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . METHOD_2 ( VAR_1 ) ) INIT = VAR_3 . METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_4 ) COND VAR_4 ( THEN THEN (  android.util.Log.d ( VAR_5 . TAG , ( ( ( STRING_1 + ( VAR_1 . netId ) ) + STRING_2 ) + VAR_2 ) ) )  android.util.Log.d ( VAR_5 . TAG , ( ( ( STRING_1 + ( VAR_1 . netId ) ) + STRING_2 ) + VAR_2 ) ) ) THEN THEN ) IF IF ( IF IF ( COND VAR_2 . METHOD_3 ( VAR_6 ) ) COND VAR_2 . METHOD_3 ( VAR_6 ) ( THEN THEN (  METHOD_4 ( VAR_1 . netId ) )  METHOD_4 ( VAR_1 . netId ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_4 ) COND VAR_4 ( THEN THEN (  android.util.Log.v ( VAR_5 . TAG , STRING_1 ) )  android.util.Log.v ( VAR_5 . TAG , STRING_1 ) ) THEN THEN ) IF IF ( IF IF ( COND VAR_3 == null ) COND VAR_3 == null ( THEN THEN (  android.util.Log.e ( VAR_5 . TAG , STRING_2 ) )  android.util.Log.e ( VAR_5 . TAG , STRING_2 ) (  VAR_6 . METHOD_2 ( VAR_1 , VAR_7 , null ) )  VAR_6 . METHOD_2 ( VAR_1 , VAR_7 , null ) (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE java.util.List<TYPE_3> ) TYPE java.util.List<TYPE_3> ( NAME VAR_8 ) NAME VAR_8 ( INIT = METHOD_3 ( VAR_3 ) ) INIT = METHOD_3 ( VAR_3 ) ) VAR VAR (  METHOD_4 ( VAR_1 , VAR_2 , VAR_8 , VAR_9 , VAR_10 , VAR_11 , VAR_3 ) )  METHOD_4 ( VAR_1 , VAR_2 , VAR_8 , VAR_9 , VAR_10 , VAR_11 , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 = new TYPE_1 ( STRING_1 , INT_1 ) )  VAR_1 = new TYPE_1 ( STRING_1 , INT_1 ) (  assertEquals ( INT_1 , VAR_1 . length ( ) ) )  assertEquals ( INT_1 , VAR_1 . length ( ) ) (  VAR_1 = new TYPE_1 ( STRING_1 , INT_2 ) )  VAR_1 = new TYPE_1 ( STRING_1 , INT_2 ) (  assertEquals ( INT_2 , VAR_1 . length ( ) ) )  assertEquals ( INT_2 , VAR_1 . length ( ) ) (  VAR_1 = new TYPE_1 ( STRING_1 , VAR_2 ) )  VAR_1 = new TYPE_1 ( STRING_1 , VAR_2 ) (  assertEquals ( VAR_2 , VAR_1 . length ( ) ) )  assertEquals ( VAR_2 , VAR_1 . length ( ) ) (  VAR_1 = new TYPE_1 ( STRING_1 , VAR_3 ) )  VAR_1 = new TYPE_1 ( STRING_1 , VAR_3 ) (  assertEquals ( VAR_3 , VAR_1 . length ( ) ) )  assertEquals ( VAR_3 , VAR_1 . length ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN android.bluetooth.BluetoothDevice ) RETURN android.bluetooth.BluetoothDevice ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  android.util.Log.d ( TYPE_1 . TAG , ( STRING_1 + ( VAR_2 . METHOD_2 ( ) ) ) ) )  android.util.Log.d ( TYPE_1 . TAG , ( STRING_1 + ( VAR_2 . METHOD_2 ( ) ) ) ) ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME service ) NAME service ( INIT = METHOD_3 ( VAR_3 ) ) INIT = METHOD_3 ( VAR_3 ) ) VAR VAR ( IF IF ( COND service == null ) COND service == null ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF (  return service . METHOD_2 ( ) ; )  return service . METHOD_2 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME device ) NAME device ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_2 = false )  VAR_2 = false ( VAR VAR ( TYPE TYPE_5<TYPE_6> ) TYPE TYPE_5<TYPE_6> ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_1 ( ) . METHOD_2 ( ) ) INIT = METHOD_1 ( ) . METHOD_2 ( ) ) VAR VAR ( WHILE WHILE ( COND ( VAR_3 . METHOD_3 ( ) ) && ( ! ( VAR_2 ) ) ) COND ( VAR_3 . METHOD_3 ( ) ) && ( ! ( VAR_2 ) ) ( BLOCK BLOCK (  VAR_4 = VAR_3 . METHOD_4 ( ) )  VAR_4 = VAR_3 . METHOD_4 ( ) ( IF IF ( COND VAR_4 . METHOD_5 ( ) . METHOD_6 ( ) ) COND VAR_4 . METHOD_5 ( ) . METHOD_6 ( ) ( THEN THEN (  VAR_4 . run ( device , VAR_1 ) )  VAR_4 . run ( device , VAR_1 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) WHILE WHILE ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_3 ( ) ) INIT = METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 . METHOD_4 ( VAR_5 ) ) INIT = VAR_4 . METHOD_4 ( VAR_5 ) ) VAR VAR (  org.mockito.Mockito.verify ( VAR_6 ) . METHOD_5 ( org.mockito.Matchers.eq ( VAR_1 ) ) )  org.mockito.Mockito.verify ( VAR_6 ) . METHOD_5 ( org.mockito.Matchers.eq ( VAR_1 ) ) (  org.mockito.Mockito.verify ( VAR_6 ) . METHOD_6 ( org.mockito.Matchers.eq ( VAR_2 ) , org.mockito.Matchers . METHOD_7 ( int . class ) ) )  org.mockito.Mockito.verify ( VAR_6 ) . METHOD_6 ( org.mockito.Matchers.eq ( VAR_2 ) , org.mockito.Matchers . METHOD_7 ( int . class ) ) (  assertEquals ( VAR_3 , true ) )  assertEquals ( VAR_3 , true ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( METHOD_2 ( ) ) != null ) COND ( METHOD_2 ( ) ) != null ( THEN THEN ( IF IF ( COND ( ( METHOD_2 ( ) . METHOD_3 ( VAR_1 , false ) ) && ( ( METHOD_4 ( ) ) != null ) ) && ( ( VAR_2 ) <= ( VAR_3 ) ) ) COND ( ( METHOD_2 ( ) . METHOD_3 ( VAR_1 , false ) ) && ( ( METHOD_4 ( ) ) != null ) ) && ( ( VAR_2 ) <= ( VAR_3 ) ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ) THEN THEN ) IF IF ( IF IF ( COND ( METHOD_5 ( VAR_4 ) ) && ( TYPE_1 . METHOD_6 ( ) ) ) COND ( METHOD_5 ( VAR_4 ) ) && ( TYPE_1 . METHOD_6 ( ) ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.Set<TYPE_3> ) TYPE java.util.Set<TYPE_3> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_5 . METHOD_2 ( VAR_1 ) ) INIT = VAR_5 . METHOD_2 ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_6 ) NAME VAR_6 ( INIT = VAR_7 . METHOD_3 ( ) ) INIT = VAR_7 . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_8 ) NAME VAR_8 ( INIT = VAR_7 . METHOD_4 ( ) ) INIT = VAR_7 . METHOD_4 ( ) ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_9 ) NAME VAR_9 ( INIT = VAR_2 . METHOD_5 ( VAR_10 ) ) INIT = VAR_2 . METHOD_5 ( VAR_10 ) ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_11 ) NAME VAR_11 ( INIT = VAR_2 . METHOD_5 ( VAR_12 ) ) INIT = VAR_2 . METHOD_5 ( VAR_12 ) ) VAR VAR (  return new TYPE_1 ( VAR_4 , null , VAR_6 , VAR_8 , VAR_3 , VAR_9 , VAR_11 , null , null ) ; )  return new TYPE_1 ( VAR_4 , null , VAR_6 , VAR_8 , VAR_3 , VAR_9 , VAR_11 , null , null ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN int[] ) RETURN int[] ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.ArrayList<TYPE_1> ) TYPE java.util.ArrayList<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME count ) NAME count ( INIT = VAR_1 . size ( ) ) INIT = VAR_1 . size ( ) ) VAR VAR ( VAR VAR ( TYPE int[] ) TYPE int[] ( NAME VAR_2 ) NAME VAR_2 ( INIT = new int [ count * 2 ] ) INIT = new int [ count * 2 ] ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME index ) NAME index ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND index < count ) COND index < count ( UPDATE UPDATE (  index ++ )  index ++ ) UPDATE UPDATE ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME c ) NAME c ( INIT = VAR_1 . get ( index ) ) INIT = VAR_1 . get ( index ) ) VAR VAR (  VAR_2 [ ( 2 * index ) ] = c . x )  VAR_2 [ ( 2 * index ) ] = c . x (  VAR_2 [ ( ( 2 * index ) + 1 ) ] = c . y )  VAR_2 [ ( ( 2 * index ) + 1 ) ] = c . y ) BLOCK BLOCK ) FOR FOR (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String[] ) RETURN java.lang.String[] ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( STRING_1 ) )  METHOD_2 ( STRING_1 ) ( IF IF ( COND ( VAR_2 ) != null ) COND ( VAR_2 ) != null ( THEN THEN ( TRY TRY ( BLOCK BLOCK (  return VAR_2 . METHOD_1 ( VAR_1 ) ; )  return VAR_2 . METHOD_1 ( VAR_1 ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME e ) NAME e ( BLOCK BLOCK (  throw e . METHOD_3 ( ) ; )  throw e . METHOD_3 ( ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME res ) NAME res ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN (  return VAR_2 . toString ( ) ; )  return VAR_2 . toString ( ) ; ) THEN THEN ) IF IF ( IF IF ( COND res != 0 ) COND res != 0 ( THEN THEN ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME r ) NAME r ( INIT = METHOD_2 ( VAR_1 ) ) INIT = METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND r != null ) COND r != null ( THEN THEN (  return r . METHOD_3 ( res ) ; )  return r . METHOD_3 ( res ) ; ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_1 . METHOD_2 ( true ) )  VAR_1 . METHOD_2 ( true ) (  assertTrue ( STRING_1 , VAR_1 . METHOD_3 ( ) ) )  assertTrue ( STRING_1 , VAR_1 . METHOD_3 ( ) ) (  VAR_1 . METHOD_2 ( false ) )  VAR_1 . METHOD_2 ( false ) (  assertFalse ( STRING_2 , VAR_1 . METHOD_3 ( ) ) )  assertFalse ( STRING_2 , VAR_1 . METHOD_3 ( ) ) (  VAR_1 . METHOD_2 ( false ) )  VAR_1 . METHOD_2 ( false ) (  assertFalse ( STRING_2 , VAR_1 . METHOD_3 ( ) ) )  assertFalse ( STRING_2 , VAR_1 . METHOD_3 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( null == VAR_2 ) || ( 0 >= ( VAR_2 . length ) ) ) COND ( null == VAR_2 ) || ( 0 >= ( VAR_2 . length ) ) ( THEN THEN (  throw new java.lang.IllegalArgumentException ( STRING_1 ) ; )  throw new java.lang.IllegalArgumentException ( STRING_1 ) ; ) THEN THEN ( ELSE ELSE ( IF IF ( COND ( VAR_3 ) == ( METHOD_2 ( ) ) ) COND ( VAR_3 ) == ( METHOD_2 ( ) ) ( THEN THEN (  throw new TYPE_2 ( STRING_2 ) ; )  throw new TYPE_2 ( STRING_2 ) ; ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF (  return METHOD_3 ( VAR_4 , VAR_1 , VAR_2 ) ; )  return METHOD_3 ( VAR_4 , VAR_1 , VAR_2 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  throw new java.lang.NullPointerException ( STRING_1 ) ; )  throw new java.lang.NullPointerException ( STRING_1 ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( IF IF ( COND VAR_2 == 0 ) COND VAR_2 == 0 ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF (  return TYPE_1 . METHOD_3 ( VAR_2 , VAR_1 ) ; )  return TYPE_1 . METHOD_3 ( VAR_2 , VAR_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN ( IF IF ( COND ( VAR_1 . METHOD_3 ( ) ) == 2 ) COND ( VAR_1 . METHOD_3 ( ) ) == 2 ( THEN THEN ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_2 ) ( VAR_1 . METHOD_4 ( ) ) ) ) INIT = ( ( TYPE_2 ) ( VAR_1 . METHOD_4 ( ) ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( ( TYPE_3 ) ( VAR_1 . METHOD_5 ( ) ) ) ) INIT = ( ( TYPE_3 ) ( VAR_1 . METHOD_5 ( ) ) ) ) VAR VAR (  VAR_4 = TYPE_4 . METHOD_6 ( VAR_2 , VAR_3 , false ) )  VAR_4 = TYPE_4 . METHOD_6 ( VAR_2 , VAR_3 , false ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME service ) NAME service ( INIT = VAR_1 ) INIT = VAR_1 ) VAR VAR ( IF IF ( COND ( service == null ) || ( ( METHOD_2 ( ) ) == false ) ) COND ( service == null ) || ( ( METHOD_2 ( ) ) == false ) ( THEN THEN (  android.util.Log.e ( android.bluetooth.BluetoothDevice . TAG , STRING_1 ) )  android.util.Log.e ( android.bluetooth.BluetoothDevice . TAG , STRING_1 ) (  return false ; )  return false ; ) THEN THEN ) IF IF ( TRY TRY ( BLOCK BLOCK (  return service . METHOD_3 ( this ) ; )  return service . METHOD_3 ( this ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME e ) NAME e ( BLOCK BLOCK (  android.util.Log.e ( android.bluetooth.BluetoothDevice . TAG , STRING_2 , e ) )  android.util.Log.e ( android.bluetooth.BluetoothDevice . TAG , STRING_2 , e ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN ( VAR VAR ( TYPE java.util.List ) TYPE java.util.List ( NAME result ) NAME result ( INIT = TYPE_1 . METHOD_2 ( ) ) INIT = TYPE_1 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_2 ) ( value ) ) ) INIT = ( ( TYPE_2 ) ( value ) ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( IN TYPE_3 . values ( ) ) IN TYPE_3 . values ( ) ( BLOCK BLOCK ( IF IF ( COND VAR_2 . METHOD_3 ( VAR_3 ) ) COND VAR_2 . METHOD_3 ( VAR_3 ) ( THEN THEN (  result . METHOD_4 ( VAR_2 . get ( VAR_3 ) ) )  result . METHOD_4 ( VAR_2 . get ( VAR_3 ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return result ; )  return result ; ) THEN THEN ) IF IF (  return value ; )  return value ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = null ) INIT = null ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = null ) INIT = null ) VAR VAR ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  VAR_2 = TYPE_2 . METHOD_2 ( STRING_1 ) )  VAR_2 = TYPE_2 . METHOD_2 ( STRING_1 ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND VAR_1 instanceof TYPE_3 ) COND VAR_1 instanceof TYPE_3 ( THEN THEN ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( INIT = ( ( TYPE_3 ) ( VAR_1 ) ) ) INIT = ( ( TYPE_3 ) ( VAR_1 ) ) ) VAR VAR (  VAR_2 = VAR_4 . METHOD_3 ( ) )  VAR_2 = VAR_4 . METHOD_3 ( ) (  VAR_3 = VAR_4 . METHOD_4 ( ) )  VAR_3 = VAR_4 . METHOD_4 ( ) ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ( SYNCHRONIZED SYNCHRONIZED (  this )  this ( BLOCK BLOCK (  return TYPE_4 . METHOD_5 ( name , VAR_1 , VAR_2 , VAR_3 ) ; )  return TYPE_4 . METHOD_5 ( name , VAR_1 , VAR_2 , VAR_3 ) ; ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME get ) NAME get ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME index ) NAME index ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME value ) NAME value ( INIT = values . get ( index ) ) INIT = values . get ( index ) ) VAR VAR ( IF IF ( COND value == null ) COND value == null ( THEN THEN (  throw new TYPE_1 ( ( ( STRING_1 + index ) + STRING_2 ) ) ; )  throw new TYPE_1 ( ( ( STRING_1 + index ) + STRING_2 ) ) ; ) THEN THEN ) IF IF (  return value ; )  return value ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_1 ( ( ( ( ( STRING_3 + index ) + STRING_4 ) + ( values . size ( ) ) ) + STRING_5 ) ) ; )  throw new TYPE_1 ( ( ( ( ( STRING_3 + index ) + STRING_4 ) + ( values . size ( ) ) ) + STRING_5 ) ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_2 ) == 1 ) COND ( VAR_2 ) == 1 ( THEN THEN (  return VAR_1 ; )  return VAR_1 ; ) THEN THEN ( ELSE ELSE ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_1 . METHOD_2 ( VAR_4 ) ) INIT = TYPE_1 . METHOD_2 ( VAR_4 ) ) VAR VAR ( IF IF ( COND ( METHOD_3 ( ) ) == ( VAR_5 ) ) COND ( METHOD_3 ( ) ) == ( VAR_5 ) ( THEN THEN (  return VAR_3 + VAR_1 ; )  return VAR_3 + VAR_1 ; ) THEN THEN ( ELSE ELSE ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_6 ) NAME VAR_6 ( INIT = ( METHOD_4 ( ) ) ? VAR_2 : 0 ) INIT = ( METHOD_4 ( ) ) ? VAR_2 : 0 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_7 ) NAME VAR_7 ( INIT = ( VAR_1 + VAR_3 ) + VAR_6 ) INIT = ( VAR_1 + VAR_3 ) + VAR_6 ) VAR VAR (  return VAR_7 - ( VAR_7 % ( VAR_2 ) ) ; )  return VAR_7 - ( VAR_7 % ( VAR_2 ) ) ; ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.io.File> ) TYPE java.util.List<java.io.File> ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 . get ( VAR_1 ) ) INIT = VAR_4 . get ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_3 == null ) COND VAR_3 == null ( THEN THEN (  VAR_3 = TYPE_1 . METHOD_2 ( ) )  VAR_3 = TYPE_1 . METHOD_2 ( ) (  VAR_4 . METHOD_3 ( VAR_1 , VAR_3 ) )  VAR_4 . METHOD_3 ( VAR_1 , VAR_3 ) ) THEN THEN ) IF IF (  VAR_3 . METHOD_4 ( VAR_2 ) )  VAR_3 . METHOD_4 ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME key ) NAME key ( INIT = new TYPE_3 ( VAR_2 , STRING_1 ) ) INIT = new TYPE_3 ( VAR_2 , STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME c ) NAME c ( INIT = TYPE_1 . METHOD_2 ( STRING_2 ) ) INIT = TYPE_1 . METHOD_2 ( STRING_2 ) ) VAR VAR (  c . METHOD_3 ( VAR_1 , key ) )  c . METHOD_3 ( VAR_1 , key ) (  return c ; )  return c ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ( BLOCK BLOCK (  fail ( ( STRING_3 + ( e.getMessage ( ) ) ) ) )  fail ( ( STRING_3 + ( e.getMessage ( ) ) ) ) (  return null ; )  return null ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.Map<java.lang.Object,java.lang.Object> ) TYPE java.util.Map<java.lang.Object,java.lang.Object> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_2 = new TYPE_1 < byte [ ] > ( VAR_1 . size ( ) ) )  VAR_2 = new TYPE_1 < byte [ ] > ( VAR_1 . size ( ) ) ( FOR-EACH FOR-EACH ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME key ) NAME key ( IN VAR_1 . METHOD_2 ( ) ) IN VAR_1 . METHOD_2 ( ) ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME value ) NAME value ( INIT = ( ( TYPE_2 ) ( VAR_1 . get ( key ) ) ) ) INIT = ( ( TYPE_2 ) ( VAR_1 . get ( key ) ) ) ) VAR VAR ( IF IF ( COND ! ( METHOD_3 ( value ) ) ) COND ! ( METHOD_3 ( value ) ) ( THEN THEN (  VAR_2 . METHOD_4 ( ( ( TYPE_3 ) ( key ) ) . METHOD_5 ( ) ) )  VAR_2 . METHOD_4 ( ( ( TYPE_3 ) ( key ) ) . METHOD_5 ( ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_1 ) ) COND ! ( VAR_1 ) ( THEN THEN (  throw new TYPE_2 ( VAR_2 ) ; )  throw new TYPE_2 ( VAR_2 ) ; ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_3 ) == 0 ) COND ( VAR_3 ) == 0 ( THEN THEN (  return VAR_4 ; )  return VAR_4 ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_5 ) NAME VAR_5 ( INIT = TYPE_3 . METHOD_1 ( this . VAR_6 , this . VAR_3 ) ) INIT = TYPE_3 . METHOD_1 ( this . VAR_6 , this . VAR_3 ) ) VAR VAR (  return new TYPE_4 ( VAR_7 , VAR_5 , VAR_3 ) ; )  return new TYPE_4 ( VAR_7 , VAR_5 , VAR_3 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME h ) NAME h ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME obj ) NAME obj ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME r ) NAME r ( INIT = new TYPE_2 ( h , VAR_1 , obj ) ) INIT = new TYPE_2 ( h , VAR_1 , obj ) ) VAR VAR (  VAR_3 . METHOD_2 ( r ) )  VAR_3 . METHOD_2 ( r ) ( IF IF ( COND ( ( VAR_4 ) == 0 ) && ( ( VAR_5 ) == true ) ) COND ( ( VAR_4 ) == 0 ) && ( ( VAR_5 ) == true ) ( THEN THEN (  r . METHOD_3 ( new android.os.AsyncResult ( null , null , null ) ) )  r . METHOD_3 ( new android.os.AsyncResult ( null , null , null ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( VAR_1 ) )  METHOD_2 ( VAR_1 ) (  METHOD_3 ( VAR_2 ) )  METHOD_3 ( VAR_2 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_2 . METHOD_4 ( VAR_4 , VAR_5 ) ) INIT = TYPE_2 . METHOD_4 ( VAR_4 , VAR_5 ) ) VAR VAR (  VAR_3 . verify ( VAR_5 ) . METHOD_5 ( VAR_6 ) )  VAR_3 . verify ( VAR_5 ) . METHOD_5 ( VAR_6 ) (  VAR_3 . verify ( VAR_5 ) . METHOD_6 ( VAR_6 , VAR_7 ) )  VAR_3 . verify ( VAR_5 ) . METHOD_6 ( VAR_6 , VAR_7 ) (  VAR_3 . verify ( VAR_5 ) . METHOD_7 ( VAR_6 ) )  VAR_3 . verify ( VAR_5 ) . METHOD_7 ( VAR_6 ) (  VAR_3 . verify ( VAR_4 ) . METHOD_8 ( VAR_6 , VAR_8 , VAR_9 , VAR_10 ) )  VAR_3 . verify ( VAR_4 ) . METHOD_8 ( VAR_6 , VAR_8 , VAR_9 , VAR_10 ) (  TYPE_2 . METHOD_9 ( VAR_5 , VAR_11 , VAR_4 ) )  TYPE_2 . METHOD_9 ( VAR_5 , VAR_11 , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return ( ( TYPE_1 . METHOD_2 ( VAR_1 , ( ( VAR_3 ) | ( VAR_4 ) ) ) ) && ( TYPE_2 . equals ( name ) ) ) && ( TYPE_3 . equals ( VAR_2 ) ) ; )  return ( ( TYPE_1 . METHOD_2 ( VAR_1 , ( ( VAR_3 ) | ( VAR_4 ) ) ) ) && ( TYPE_2 . equals ( name ) ) ) && ( TYPE_3 . equals ( VAR_2 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME location ) NAME location ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_1 . METHOD_2 ( ) ) ) COND ! ( VAR_1 . METHOD_2 ( ) ) ( THEN THEN (  throw new TYPE_2 ( location ) ; )  throw new TYPE_2 ( location ) ; ) THEN THEN ) IF IF ( IF IF ( COND ! ( VAR_1 . METHOD_3 ( ) ) ) COND ! ( VAR_1 . METHOD_3 ( ) ) ( THEN THEN (  throw new TYPE_3 ( location ) ; )  throw new TYPE_3 ( location ) ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME request ) NAME request ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = request . METHOD_2 ( ) ) INIT = request . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_3 ( ) ) INIT = VAR_1 . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME uri ) NAME uri ( INIT = TYPE_3 . METHOD_4 ( VAR_2 ) ) INIT = TYPE_3 . METHOD_4 ( VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME path ) NAME path ( INIT = uri . METHOD_5 ( ) ) INIT = uri . METHOD_5 ( ) ) VAR VAR (  return path . equals ( VAR_3 ) ; )  return path . equals ( VAR_3 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME m ) NAME m ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME v ) NAME v ) VAR VAR ( VAR VAR ( TYPE float ) TYPE float ( NAME value ) NAME value ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = false ) INIT = false ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE float ) TYPE float ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( v == null ) ? ( ( float ) ( m . METHOD_2 ( ) ) ) : ( ( float ) ( m . METHOD_2 ( v ) ) ) ) INIT = ( v == null ) ? ( ( float ) ( m . METHOD_2 ( ) ) ) : ( ( float ) ( m . METHOD_2 ( v ) ) ) ) VAR VAR (  TYPE_3 . assertTrue ( ( VAR_3 == value ) ) )  TYPE_3 . assertTrue ( ( VAR_3 == value ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_2 = true )  VAR_2 = true ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  TYPE_3 . assertEquals ( VAR_2 , VAR_1 ) )  TYPE_3 . assertEquals ( VAR_2 , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static final ) MODIFIER public static final ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( ( 8 * ( VAR_3 ) ) + ( VAR_4 ) ) + ( VAR_5 ) ) + ( 20 * ( VAR_4 ) ) ) INIT = ( ( ( 8 * ( VAR_3 ) ) + ( VAR_4 ) ) + ( VAR_5 ) ) + ( 20 * ( VAR_4 ) ) ) VAR VAR ( IF IF ( COND VAR_1 >= ( VAR_6 ) ) COND VAR_1 >= ( VAR_6 ) ( THEN THEN (  VAR_2 += 2 * ( VAR_4 ) )  VAR_2 += 2 * ( VAR_4 ) ) THEN THEN ) IF IF (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME args ) NAME args ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.Class<?> ) TYPE java.lang.Class<?> ( NAME c ) NAME c ( INIT = java.lang.Class . METHOD_2 ( STRING_1 ) ) INIT = java.lang.Class . METHOD_2 ( STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME m ) NAME m ( INIT = c . METHOD_3 ( STRING_2 , ( ( java.lang.Class [ ] ) ( null ) ) ) ) INIT = c . METHOD_3 ( STRING_2 , ( ( java.lang.Class [ ] ) ( null ) ) ) ) VAR VAR (  m . invoke ( null , ( ( java.lang.Object [ ] ) ( null ) ) ) )  m . invoke ( null , ( ( java.lang.Object [ ] ) ( null ) ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME e ) NAME e ( BLOCK BLOCK (  return ; )  return ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  throw new TYPE_3 ( STRING_3 ) ; )  throw new TYPE_3 ( STRING_3 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE float ) TYPE float ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE float ) TYPE float ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE float ) TYPE float ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE float ) TYPE float ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_6 ) NAME VAR_6 ( INIT = VAR_7 . METHOD_2 ( VAR_1 ) ) INIT = VAR_7 . METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_6 == null ) COND VAR_6 == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  VAR_6 . METHOD_3 ( VAR_2 , VAR_3 , VAR_4 , VAR_5 ) )  VAR_6 . METHOD_3 ( VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = STRING_1 + ( ( ( ( ( STRING_2 + STRING_3 ) + STRING_4 ) + STRING_5 ) + STRING_4 ) + STRING_6 ) ) INIT = STRING_1 + ( ( ( ( ( STRING_2 + STRING_3 ) + STRING_4 ) + STRING_5 ) + STRING_4 ) + STRING_6 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_2 ( VAR_1 ) ) INIT = TYPE_2 . METHOD_2 ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_3 . METHOD_3 ( VAR_2 , true ) ) INIT = TYPE_3 . METHOD_3 ( VAR_2 , true ) ) VAR VAR (  assertEquals ( VAR_1 , VAR_3 ) )  assertEquals ( VAR_1 , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME index ) NAME index ) VAR VAR ( VAR VAR ( TYPE double ) TYPE double ( NAME value ) NAME value ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 instanceof double [ ] ) COND VAR_1 instanceof double [ ] ( THEN THEN (  ( ( double [ ] ) ( VAR_1 ) ) [ index ] = value )  ( ( double [ ] ) ( VAR_1 ) ) [ index ] = value ) THEN THEN ( ELSE ELSE (  throw TYPE_2 . METHOD_2 ( VAR_1 ) ; )  throw TYPE_2 . METHOD_2 ( VAR_1 ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<TYPE_2> ) RETURN TYPE_1<TYPE_2> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME context ) NAME context ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME VAR_2 ) NAME VAR_2 ( INIT = on . METHOD_1 ( VAR_1 , context ) ) INIT = on . METHOD_1 ( VAR_1 , context ) ) VAR VAR ( IF IF ( COND ! ( VAR_2 . METHOD_2 ( ) ) ) COND ! ( VAR_2 . METHOD_2 ( ) ) ( THEN THEN (  context . METHOD_3 ( new TYPE_5 ( VAR_3 , VAR_2 ) ) )  context . METHOD_3 ( new TYPE_5 ( VAR_3 , VAR_2 ) ) ) THEN THEN ) IF IF (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME context ) NAME context ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME node ) NAME node ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME pos ) NAME pos ( INIT = ( ( TYPE_4 ) ( METHOD_2 ( node ) ) ) ) INIT = ( ( TYPE_4 ) ( METHOD_2 ( node ) ) ) ) VAR VAR ( IF IF ( COND pos != null ) COND pos != null ( THEN THEN (  return TYPE_1 . METHOD_3 ( VAR_1 , pos , ( ( TYPE_4 ) ( pos . METHOD_4 ( ) ) ) ) ; )  return TYPE_1 . METHOD_3 ( VAR_1 , pos , ( ( TYPE_4 ) ( pos . METHOD_4 ( ) ) ) ) ; ) THEN THEN ) IF IF (  return TYPE_1 . METHOD_3 ( VAR_1 ) ; )  return TYPE_1 . METHOD_3 ( VAR_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_2 ( ) ) INIT = VAR_2 . METHOD_2 ( ) ) VAR VAR (  VAR_2 . METHOD_3 ( true ) )  VAR_2 . METHOD_3 ( true ) ( TRY TRY ( BLOCK BLOCK (  VAR_1 . METHOD_4 ( ) )  VAR_1 . METHOD_4 ( ) (  fail ( STRING_1 ) )  fail ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  VAR_2 . METHOD_5 ( ) )  VAR_2 . METHOD_5 ( ) ( TRY TRY ( BLOCK BLOCK (  VAR_1 . METHOD_4 ( ) )  VAR_1 . METHOD_4 ( ) (  fail ( STRING_1 ) )  fail ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME subId ) NAME subId ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_2 . METHOD_2 ( TYPE_1 . METHOD_3 ( ) , VAR_1 ) )  VAR_2 . METHOD_2 ( TYPE_1 . METHOD_3 ( ) , VAR_1 ) ( IF IF ( COND ! ( TYPE_2 . METHOD_4 ( VAR_3 , VAR_1 , STRING_1 ) ) ) COND ! ( TYPE_2 . METHOD_4 ( VAR_3 , VAR_1 , STRING_1 ) ) ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF (  return TYPE_3 . METHOD_5 ( VAR_4 . METHOD_6 ( ) , subId ) . METHOD_7 ( ) ; )  return TYPE_3 . METHOD_5 ( VAR_4 . METHOD_6 ( ) , subId ) . METHOD_7 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_2 ( ) ) INIT = VAR_2 . METHOD_2 ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME item ) NAME item ( IN VAR_1 . METHOD_3 ( ) ) IN VAR_1 . METHOD_3 ( ) ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME node ) NAME node ( INIT = item . METHOD_4 ( ) . METHOD_5 ( ) ) INIT = item . METHOD_4 ( ) . METHOD_5 ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_4 . METHOD_6 ( node . METHOD_7 ( ) ) ) INIT = TYPE_4 . METHOD_6 ( node . METHOD_7 ( ) ) ) VAR VAR ( IF IF ( COND VAR_3 != null ) COND VAR_3 != null ( THEN THEN (  return VAR_3 ; )  return VAR_3 ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME source ) NAME source ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE java.util.ArrayList<TYPE_1> ) TYPE java.util.ArrayList<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( IN VAR_2 . values ( ) ) IN VAR_2 . values ( ) ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME s ) NAME s ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( IF IF ( COND s . equals ( source ) ) COND s . equals ( source ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . start ( ) ) INIT = TYPE_1 . start ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR (  assertEquals ( VAR_3 , VAR_2 . type ( ) ) )  assertEquals ( VAR_3 , VAR_2 . type ( ) ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME address ) NAME address ( INIT = VAR_2 . address ( ) ) INIT = VAR_2 . address ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_4 ( ) ) INIT = new TYPE_4 ( ) ) VAR VAR (  VAR_4 . METHOD_3 ( address , 10 ) )  VAR_4 . METHOD_3 ( address , 10 ) (  VAR_4 . METHOD_4 ( ) )  VAR_4 . METHOD_4 ( ) ) BLOCK BLOCK ( FINALLY FINALLY ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_1 . METHOD_5 ( ) ) INIT = VAR_1 . METHOD_5 ( ) ) VAR VAR (  assertEquals ( 1 , VAR_5 ) )  assertEquals ( 1 , VAR_5 ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME res ) NAME res ( INIT = METHOD_2 ( ) . METHOD_3 ( ) ) INIT = METHOD_2 ( ) . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = res . METHOD_4 ( ) . VAR_1 ) INIT = res . METHOD_4 ( ) . VAR_1 ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  METHOD_5 ( res ) )  METHOD_5 ( res ) ) BLOCK BLOCK ( FINALLY FINALLY (  TYPE_3 . METHOD_6 ( res , VAR_1 ) )  TYPE_3 . METHOD_6 ( res , VAR_1 ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE double ) TYPE double ( NAME x ) NAME x ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  throw new TYPE_2 ( ) ; )  throw new TYPE_2 ( ) ; ) THEN THEN ) IF IF ( IF IF ( COND ! ( VAR_2 ) ) COND ! ( VAR_2 ) ( THEN THEN (  throw new TYPE_3 ( STRING_1 ) ; )  throw new TYPE_3 ( STRING_1 ) ; ) THEN THEN ) IF IF (  METHOD_1 ( METHOD_2 ( METHOD_3 ( VAR_3 ) ) , x ) )  METHOD_1 ( METHOD_2 ( METHOD_3 ( VAR_3 ) ) , x ) (  return this ; )  return this ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( new TYPE_2 ( STRING_1 ) , TYPE_3 . METHOD_2 ( ) . METHOD_3 ( ) , TYPE_4 . of ( ) , TYPE_4 . of ( STRING_2 ) , TYPE_4 . of ( ) ) ) INIT = new TYPE_1 ( new TYPE_2 ( STRING_1 ) , TYPE_3 . METHOD_2 ( ) . METHOD_3 ( ) , TYPE_4 . of ( ) , TYPE_4 . of ( STRING_2 ) , TYPE_4 . of ( ) ) ) VAR VAR (  TYPE_5 . METHOD_4 ( VAR_1 . METHOD_5 ( VAR_2 , STRING_2 , STRING_3 , STRING_4 , true ) ) . METHOD_6 ( VAR_3 class ) )  TYPE_5 . METHOD_4 ( VAR_1 . METHOD_5 ( VAR_2 , STRING_2 , STRING_3 , STRING_4 , true ) ) . METHOD_6 ( VAR_3 class ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( TYPE_1 . METHOD_2 ( ) ) ) COND ! ( TYPE_1 . METHOD_2 ( ) ) ( THEN THEN (  android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) )  android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME service ) NAME service ( INIT = METHOD_3 ( ) ) INIT = METHOD_3 ( ) ) VAR VAR ( IF IF ( COND service == null ) COND service == null ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  return service . METHOD_1 ( name ) ; )  return service . METHOD_1 ( name ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_2 ( VAR_3 ) ) INIT = VAR_1 . METHOD_2 ( VAR_3 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( IF IF ( COND TYPE_3 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ) COND TYPE_3 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ( THEN THEN (  VAR_4 = TYPE_1 . METHOD_5 ( VAR_5 , VAR_2 ) )  VAR_4 = TYPE_1 . METHOD_5 ( VAR_5 , VAR_2 ) ) THEN THEN ( ELSE ELSE ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_6 ) NAME VAR_6 ( INIT = VAR_1 . METHOD_6 ( VAR_7 ) ) INIT = VAR_1 . METHOD_6 ( VAR_7 ) ) VAR VAR (  VAR_4 = TYPE_4 . METHOD_7 ( VAR_6 , VAR_2 ) )  VAR_4 = TYPE_4 . METHOD_7 ( VAR_6 , VAR_2 ) ) ELSE ELSE ) IF IF (  return VAR_4 . METHOD_8 ( ) . METHOD_9 ( VAR_8 , java.lang.String . METHOD_10 ( VAR_1 . METHOD_4 ( ) ) ) . build ( ) ; )  return VAR_4 . METHOD_8 ( ) . METHOD_9 ( VAR_8 , java.lang.String . METHOD_10 ( VAR_1 . METHOD_4 ( ) ) ) . build ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_4 . METHOD_2 ( ) ) INIT = TYPE_4 . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_5 . METHOD_3 ( VAR_3 ) ) INIT = TYPE_5 . METHOD_3 ( VAR_3 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_2 . METHOD_4 ( new TYPE_6 ( VAR_1 ) ) ) INIT = VAR_2 . METHOD_4 ( new TYPE_6 ( VAR_1 ) ) ) VAR VAR (  return VAR_4 ; )  return VAR_4 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME path ) NAME path ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME action ) NAME action ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( null == path ) || ( path . equals ( STRING_1 ) ) ) || ( ! ( TYPE_1 . METHOD_2 ( action ) ) ) ) COND ( ( null == path ) || ( path . equals ( STRING_1 ) ) ) || ( ! ( TYPE_1 . METHOD_2 ( action ) ) ) ( THEN THEN (  throw new java.lang.IllegalArgumentException ( STRING_2 ) ; )  throw new java.lang.IllegalArgumentException ( STRING_2 ) ; ) THEN THEN ( ELSE ELSE ( IF IF ( COND ( METHOD_3 ( ) ) == ( VAR_1 ) ) COND ( METHOD_3 ( ) ) == ( VAR_1 ) ( THEN THEN (  throw new TYPE_2 ( STRING_3 ) ; )  throw new TYPE_2 ( STRING_3 ) ; ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF (  return METHOD_4 ( VAR_2 , path , action ) ; )  return METHOD_4 ( VAR_2 , path , action ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<java.lang.String,TYPE_1> ) TYPE java.util.Map<java.lang.String,TYPE_1> ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_3 ( VAR_3 , new TYPE_3 ( ) , VAR_1 ) ) INIT = METHOD_3 ( VAR_3 , new TYPE_3 ( ) , VAR_1 ) ) VAR VAR (  org.junit.Assert.assertEquals ( STRING_1 , 1 , VAR_4 . size ( ) ) )  org.junit.Assert.assertEquals ( STRING_1 , 1 , VAR_4 . size ( ) ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_4 . get ( STRING_2 ) ) INIT = VAR_4 . get ( STRING_2 ) ) VAR VAR ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  TYPE_4 . METHOD_4 ( VAR_5 ) )  TYPE_4 . METHOD_4 ( VAR_5 ) ) THEN THEN ) IF IF (  return VAR_5 ; )  return VAR_5 ; ) BLOCK BLOCK ( FINALLY FINALLY (  VAR_3 . METHOD_5 ( ) )  VAR_3 . METHOD_5 ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 == INT_1 ) || ( VAR_1 == INT_2 ) ) COND ( VAR_1 == INT_1 ) || ( VAR_1 == INT_2 ) ( THEN THEN (  VAR_2 . METHOD_2 ( ( ( VAR_3 ) + ( ( int ) ( VAR_1 ) ) ) ) )  VAR_2 . METHOD_2 ( ( ( VAR_3 ) + ( ( int ) ( VAR_1 ) ) ) ) ) THEN THEN ( ELSE ELSE (  VAR_2 . METHOD_3 ( new TYPE_1 ( VAR_1 ) ) )  VAR_2 . METHOD_3 ( new TYPE_1 ( VAR_1 ) ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SWITCH SWITCH ( NAME VAR_2 ) NAME VAR_2 ( CASE VAR_3 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = ( ( TYPE_2 ) ( VAR_1 . event ) ) ) INIT = ( ( TYPE_2 ) ( VAR_1 . event ) ) ) VAR VAR ( IF IF ( COND VAR_5 . METHOD_2 ( VAR_4 . METHOD_3 ( ) ) ) COND VAR_5 . METHOD_2 ( VAR_4 . METHOD_3 ( ) ) ( THEN THEN (  android.util.Log.w ( VAR_6 . TAG , ( ( ( STRING_1 + ( VAR_4 . METHOD_3 ( ) ) ) + STRING_2 ) + ( VAR_4 . METHOD_4 ( ) ) ) ) )  android.util.Log.w ( VAR_6 . TAG , ( ( ( STRING_1 + ( VAR_4 . METHOD_3 ( ) ) ) + STRING_2 ) + ( VAR_4 . METHOD_4 ( ) ) ) ) (  return VAR_7 ; )  return VAR_7 ; ) THEN THEN ) IF IF (  return VAR_8 ; )  return VAR_8 ; ) BLOCK BLOCK ) CASE VAR_3 ( DEFAULT DEFAULT ( BLOCK BLOCK (  return VAR_9 ; )  return VAR_9 ; ) BLOCK BLOCK ) DEFAULT DEFAULT ) SWITCH SWITCH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME append ) NAME append ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_3 . METHOD_2 ( new TYPE_2 ( VAR_1 ) ) )  VAR_3 . METHOD_2 ( new TYPE_2 ( VAR_1 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME args ) NAME args ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME c ) NAME c ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  Main . METHOD_2 ( ) )  Main . METHOD_2 ( ) (  Main . METHOD_3 ( c ) )  Main . METHOD_3 ( c ) (  Main . METHOD_4 ( c ) )  Main . METHOD_4 ( c ) (  Main . METHOD_5 ( new Main ( ) ) )  Main . METHOD_5 ( new Main ( ) ) (  Main . METHOD_6 ( ) )  Main . METHOD_6 ( ) (  Main . METHOD_7 ( c ) )  Main . METHOD_7 ( c ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME listener ) NAME listener ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( VAR_3 ) != null ) ? VAR_3 . METHOD_2 ( ) : STRING_1 ) INIT = ( ( VAR_3 ) != null ) ? VAR_3 . METHOD_2 ( ) : STRING_1 ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = ( METHOD_3 ( ) ) != null ) INIT = ( METHOD_3 ( ) ) != null ) VAR VAR (  VAR_5 . METHOD_1 ( VAR_2 , listener . callback , VAR_1 , VAR_4 ) )  VAR_5 . METHOD_1 ( VAR_2 , listener . callback , VAR_1 , VAR_4 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME ex ) NAME ex ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE java.lang.NullPointerException ) TYPE java.lang.NullPointerException ( NAME ex ) NAME ex ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( java.lang.Integer ) ( VAR_1 . METHOD_2 ( VAR_3 ) ) ) ) INIT = ( ( java.lang.Integer ) ( VAR_1 . METHOD_2 ( VAR_3 ) ) ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ( INIT = ( ( java.lang.Integer ) ( VAR_1 . METHOD_2 ( VAR_5 ) ) ) ) INIT = ( ( java.lang.Integer ) ( VAR_1 . METHOD_2 ( VAR_5 ) ) ) ) VAR VAR (  VAR_6 = new TYPE_2 ( VAR_4 , VAR_2 ) )  VAR_6 = new TYPE_2 ( VAR_4 , VAR_2 ) ( IF IF ( COND ( METHOD_3 ( ) ) != null ) COND ( METHOD_3 ( ) ) != null ( THEN THEN (  METHOD_3 ( ) . METHOD_1 ( this ) )  METHOD_3 ( ) . METHOD_1 ( this ) ) THEN THEN ) IF IF (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( ( address ) != null ) && ( ( address ) instanceof TYPE_1 ) ) COND ( ( address ) != null ) && ( ( address ) instanceof TYPE_1 ) ( THEN THEN ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_1 ) NAME VAR_1 ( INIT = address . METHOD_2 ( ) ) INIT = address . METHOD_2 ( ) ) VAR VAR (  return ( ( VAR_1 [ 0 ] ) & ( ( byte ) ( INT_1 ) ) ) == ( ( byte ) ( INT_2 ) ) ; )  return ( ( VAR_1 [ 0 ] ) & ( ( byte ) ( INT_1 ) ) ) == ( ( byte ) ( INT_2 ) ) ; ) THEN THEN ) IF IF (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.Class<?> ) TYPE java.lang.Class<?> ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE TYPE_3<java.lang.String> ) TYPE TYPE_3<java.lang.String> ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_6 ) NAME VAR_6 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_7 ) NAME VAR_7 ) VAR VAR ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME args ) NAME args ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( VAR_8 ) != null ) && ( VAR_8 . METHOD_2 ( VAR_3 ) ) ) COND ( ( VAR_8 ) != null ) && ( VAR_8 . METHOD_2 ( VAR_3 ) ) ( THEN THEN (  return new TYPE_5 ( VAR_1 , VAR_7 , VAR_3 , args ) ; )  return new TYPE_5 ( VAR_1 , VAR_7 , VAR_3 , args ) ; ) THEN THEN ( ELSE ELSE (  return null ; )  return null ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( VAR_2 class . getName ( ) ) ) INIT = new TYPE_1 ( VAR_2 class . getName ( ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  VAR_1 . METHOD_2 ( new TYPE_3 ( VAR_3 , null ) , 0 ) )  VAR_1 . METHOD_2 ( new TYPE_3 ( VAR_3 , null ) , 0 ) (  TYPE_4 . METHOD_3 ( VAR_3 . version ) . METHOD_4 ( VAR_4 ) )  TYPE_4 . METHOD_3 ( VAR_3 . version ) . METHOD_4 ( VAR_4 ) (  TYPE_4 . METHOD_3 ( VAR_5 ) . METHOD_4 ( 2 ) )  TYPE_4 . METHOD_3 ( VAR_5 ) . METHOD_4 ( 2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_3 ) COND VAR_3 ( THEN THEN (  METHOD_2 ( ) )  METHOD_2 ( ) ) THEN THEN ) IF IF ( IF IF ( COND VAR_3 ) COND VAR_3 ( THEN THEN (  android.util.Log.d ( VAR_4 , ( ( ( STRING_1 + ( VAR_1 . METHOD_3 ( ) ) ) + STRING_2 ) + VAR_2 ) ) )  android.util.Log.d ( VAR_4 , ( ( ( STRING_1 + ( VAR_1 . METHOD_3 ( ) ) ) + STRING_2 ) + VAR_2 ) ) ) THEN THEN ) IF IF (  VAR_5 . METHOD_4 ( VAR_1 . METHOD_3 ( ) ) )  VAR_5 . METHOD_4 ( VAR_1 . METHOD_3 ( ) ) ( IF IF ( COND VAR_6 ) COND VAR_6 ( THEN THEN ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  METHOD_5 ( VAR_7 ) )  METHOD_5 ( VAR_7 ) ) THEN THEN ( ELSE ELSE (  METHOD_5 ( VAR_8 ) )  METHOD_5 ( VAR_8 ) ) ELSE ELSE ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME in ) NAME in ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return new TYPE_1 ( ( ( android.bluetooth.BluetoothDevice ) ( in . METHOD_2 ( null ) ) ) , in . METHOD_3 ( ) , TYPE_3 . METHOD_4 ( in . METHOD_5 ( ) ) , in . METHOD_3 ( ) , in . METHOD_5 ( ) , ( ( in . METHOD_3 ( ) ) == 1 ) , ( ( in . METHOD_3 ( ) ) == 1 ) ) ; )  return new TYPE_1 ( ( ( android.bluetooth.BluetoothDevice ) ( in . METHOD_2 ( null ) ) ) , in . METHOD_3 ( ) , TYPE_3 . METHOD_4 ( in . METHOD_5 ( ) ) , in . METHOD_3 ( ) , in . METHOD_5 ( ) , ( ( in . METHOD_3 ( ) ) == 1 ) , ( ( in . METHOD_3 ( ) ) == 1 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME v ) NAME v ( INIT = null ) INIT = null ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  v = TYPE_2 . METHOD_2 ( VAR_1 ) )  v = TYPE_2 . METHOD_2 ( VAR_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.IllegalArgumentException ) TYPE java.lang.IllegalArgumentException ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE java.lang.NullPointerException ) TYPE java.lang.NullPointerException ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ( IF IF ( COND v != null ) COND v != null ( THEN THEN ( TRY TRY ( BLOCK BLOCK (  return TYPE_1 . METHOD_3 ( v ) ; )  return TYPE_1 . METHOD_3 ( v ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) THEN THEN ) IF IF (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME offset ) NAME offset ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.StringBuilder ) TYPE java.lang.StringBuilder ( NAME sb ) NAME sb ( INIT = new java.lang.StringBuilder ( ) ) INIT = new java.lang.StringBuilder ( ) ) VAR VAR (  sb.append ( CHAR_1 ) . append ( VAR_2 ) . append ( CHAR_2 ) )  sb.append ( CHAR_1 ) . append ( VAR_2 ) . append ( CHAR_2 ) (  sb.append ( VAR_3 ) . append ( CHAR_3 ) . append ( CHAR_4 ) )  sb.append ( VAR_3 ) . append ( CHAR_3 ) . append ( CHAR_4 ) (  sb.append ( VAR_4 ) . append ( CHAR_4 ) )  sb.append ( VAR_4 ) . append ( CHAR_4 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_5 ) NAME VAR_5 ( INIT = new TYPE_2 ( offset , sb . toString ( ) ) ) INIT = new TYPE_2 ( offset , sb . toString ( ) ) ) VAR VAR (  VAR_1 . addChild ( VAR_5 ) )  VAR_1 . addChild ( VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME expected ) NAME expected ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME source ) NAME source ( INIT = ( ( ( ( ( ( ( STRING_1 + ( ( ( STRING_2 + STRING_3 ) + STRING_4 ) + STRING_5 ) ) + VAR_1 ) + STRING_6 ) + STRING_7 ) + STRING_8 ) + STRING_9 ) + STRING_10 ) + STRING_11 ) INIT = ( ( ( ( ( ( ( STRING_1 + ( ( ( STRING_2 + STRING_3 ) + STRING_4 ) + STRING_5 ) ) + VAR_1 ) + STRING_6 ) + STRING_7 ) + STRING_8 ) + STRING_9 ) + STRING_10 ) + STRING_11 ) VAR VAR (  TYPE_1 . METHOD_2 ( expected , source , VAR_2 ) )  TYPE_1 . METHOD_2 ( expected , source , VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public synchronized ) MODIFIER public synchronized ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ! ( METHOD_2 ( ) ) ) && ( ! ( METHOD_3 ( VAR_1 ) ) ) ) COND ( ! ( METHOD_2 ( ) ) ) && ( ! ( METHOD_3 ( VAR_1 ) ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  METHOD_4 ( VAR_1 , VAR_2 ) )  METHOD_4 ( VAR_1 , VAR_2 ) ( IF IF ( COND ( METHOD_5 ( ) ) != VAR_2 ) COND ( METHOD_5 ( ) ) != VAR_2 ( THEN THEN ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . METHOD_6 ( VAR_4 , METHOD_7 ( VAR_1 ) , VAR_2 ) ) INIT = VAR_1 . METHOD_6 ( VAR_4 , METHOD_7 ( VAR_1 ) , VAR_2 ) ) VAR VAR (  throw new TYPE_3 ( VAR_3 ) ; )  throw new TYPE_3 ( VAR_3 ) ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME w ) NAME w ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME h ) NAME h ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME d ) NAME d ) VAR VAR ( VAR VAR ( TYPE int[] ) TYPE int[] ( NAME data ) NAME data ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  mRS . METHOD_2 ( ) )  mRS . METHOD_2 ( ) (  METHOD_3 ( VAR_1 , VAR_2 , VAR_3 , w , h , d ) )  METHOD_3 ( VAR_1 , VAR_2 , VAR_3 , w , h , d ) (  mRS . METHOD_4 ( METHOD_5 ( ) , VAR_1 , VAR_2 , VAR_3 , VAR_4 , w , h , d , data , ( ( data . length ) * 4 ) ) )  mRS . METHOD_4 ( METHOD_5 ( ) , VAR_1 , VAR_2 , VAR_3 , VAR_4 , w , h , d , data , ( ( data . length ) * 4 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_3 ) != null ) COND ( VAR_3 ) != null ( THEN THEN (  METHOD_2 ( VAR_3 . METHOD_3 ( ) , VAR_3 . METHOD_4 ( VAR_4 ) ) )  METHOD_2 ( VAR_3 . METHOD_3 ( ) , VAR_3 . METHOD_4 ( VAR_4 ) ) ) THEN THEN ) IF IF (  VAR_5 = VAR_1 )  VAR_5 = VAR_1 ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_6 ) NAME VAR_6 ( INIT = VAR_1 . METHOD_5 ( ) ) INIT = VAR_1 . METHOD_5 ( ) ) VAR VAR (  VAR_6 . METHOD_6 ( VAR_7 , VAR_2 ) )  VAR_6 . METHOD_6 ( VAR_7 , VAR_2 ) (  VAR_8 . METHOD_7 ( true ) )  VAR_8 . METHOD_7 ( true ) (  VAR_9 . METHOD_8 ( true ) )  VAR_9 . METHOD_8 ( true ) (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_1 ( VAR_2 ) ) INIT = TYPE_1 . METHOD_1 ( VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME s ) NAME s ( INIT = new TYPE_2 ( VAR_1 ) ) INIT = new TYPE_2 ( VAR_1 ) ) VAR VAR (  VAR_1 . METHOD_2 ( VAR_3 ) )  VAR_1 . METHOD_2 ( VAR_3 ) (  METHOD_3 ( VAR_1 , s ) )  METHOD_3 ( VAR_1 , s ) (  METHOD_4 ( VAR_1 , s ) )  METHOD_4 ( VAR_1 , s ) (  METHOD_5 ( VAR_1 , s ) )  METHOD_5 ( VAR_1 , s ) (  s . METHOD_6 ( true ) )  s . METHOD_6 ( true ) (  VAR_1 . METHOD_7 ( ) )  VAR_1 . METHOD_7 ( ) (  METHOD_8 ( ) )  METHOD_8 ( ) (  VAR_1 . METHOD_9 ( ) )  VAR_1 . METHOD_9 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE long ) TYPE long ( NAME i ) NAME i ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME offset ) NAME offset ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 [ offset ] = ( ( byte ) ( i > > INT_1 ) ) )  VAR_1 [ offset ] = ( ( byte ) ( i > > INT_1 ) ) (  VAR_1 [ ( offset + 1 ) ] = ( ( byte ) ( i > > 16 ) ) )  VAR_1 [ ( offset + 1 ) ] = ( ( byte ) ( i > > 16 ) ) (  VAR_1 [ ( offset + 2 ) ] = ( ( byte ) ( i > > 8 ) ) )  VAR_1 [ ( offset + 2 ) ] = ( ( byte ) ( i > > 8 ) ) (  VAR_1 [ ( offset + 3 ) ] = ( ( byte ) ( i ) ) )  VAR_1 [ ( offset + 3 ) ] = ( ( byte ) ( i ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1[] ) RETURN TYPE_1[] ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ! ( TYPE_2 . METHOD_2 ( ) ) ) COND ! ( TYPE_2 . METHOD_2 ( ) ) ( THEN THEN (  android.util.Log.w ( TYPE_3 . TAG , STRING_1 ) )  android.util.Log.w ( TYPE_3 . TAG , STRING_1 ) (  return new TYPE_1 [ 0 ] ; )  return new TYPE_1 [ 0 ] ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME service ) NAME service ( INIT = METHOD_3 ( ) ) INIT = METHOD_3 ( ) ) VAR VAR ( IF IF ( COND service == null ) COND service == null ( THEN THEN (  return new TYPE_1 [ 0 ] ; )  return new TYPE_1 [ 0 ] ; ) THEN THEN ) IF IF (  return service . METHOD_1 ( ) ; )  return service . METHOD_1 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME args ) NAME args ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME t ) NAME t ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  t . METHOD_2 ( 16 , INT_1 , false ) )  t . METHOD_2 ( 16 , INT_1 , false ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME in ) NAME in ( INIT = t . METHOD_3 ( args . in ) ) INIT = t . METHOD_3 ( args . in ) ) VAR VAR (  args.out = t . METHOD_3 ( TYPE_4 . METHOD_4 ( args . in ) , TYPE_4 . METHOD_4 ( in . METHOD_5 ( ) ) , TYPE_4 . METHOD_4 ( in . METHOD_6 ( ) ) ) )  args.out = t . METHOD_3 ( TYPE_4 . METHOD_4 ( args . in ) , TYPE_4 . METHOD_4 ( in . METHOD_5 ( ) ) , TYPE_4 . METHOD_4 ( in . METHOD_6 ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ) VAR VAR ( VAR VAR ( TYPE short ) TYPE short ( NAME x ) NAME x ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  throw new TYPE_2 ( ) ; )  throw new TYPE_2 ( ) ; ) THEN THEN ) IF IF ( IF IF ( COND ! ( VAR_2 ) ) COND ! ( VAR_2 ) ( THEN THEN (  throw new TYPE_3 ( STRING_1 ) ; )  throw new TYPE_3 ( STRING_1 ) ; ) THEN THEN ) IF IF (  METHOD_1 ( METHOD_2 ( METHOD_3 ( i , VAR_3 ) ) , x ) )  METHOD_1 ( METHOD_2 ( METHOD_3 ( i , VAR_3 ) ) , x ) (  return this ; )  return this ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( STRING_1 , STRING_2 , VAR_2 . TAG , null , null , null , null , false ) )  VAR_1 . METHOD_2 ( STRING_1 , STRING_2 , VAR_2 . TAG , null , null , null , null , false ) (  verify ( VAR_3 ) . METHOD_3 ( METHOD_4 ( byte [ ] . class ) , METHOD_4 ( VAR_4 class ) ) )  verify ( VAR_3 ) . METHOD_3 ( METHOD_4 ( byte [ ] . class ) , METHOD_4 ( VAR_4 class ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_2 . METHOD_2 ( STRING_1 ) )  TYPE_2 . METHOD_2 ( STRING_1 ) ( IF IF ( COND TYPE_3 . get ( VAR_1 ) . METHOD_3 ( STRING_2 , false ) ) COND TYPE_3 . get ( VAR_1 ) . METHOD_3 ( STRING_2 , false ) ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_2 ) NAME VAR_2 ( IN VAR_3 . METHOD_4 ( ) ) IN VAR_3 . METHOD_4 ( ) ( BLOCK BLOCK (  VAR_2 . METHOD_1 ( VAR_1 ) )  VAR_2 . METHOD_1 ( VAR_1 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ( ELSE ELSE (  TYPE_2 . i ( STRING_1 , STRING_3 ) )  TYPE_2 . i ( STRING_1 , STRING_3 ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME userId ) NAME userId ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . METHOD_1 ( userId ) )  VAR_1 . METHOD_1 ( userId ) (  VAR_2 . METHOD_2 ( VAR_3 ) )  VAR_2 . METHOD_2 ( VAR_3 ) ( SYNCHRONIZED SYNCHRONIZED (  VAR_4 )  VAR_4 ( BLOCK BLOCK (  VAR_5 . METHOD_3 ( ) )  VAR_5 . METHOD_3 ( ) (  VAR_6 . METHOD_3 ( ) )  VAR_6 . METHOD_3 ( ) ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME p ) NAME p ( IN VAR_7 ) IN VAR_7 ( BLOCK BLOCK (  METHOD_4 ( p . getName ( ) , false , VAR_8 ) )  METHOD_4 ( p . getName ( ) , false , VAR_8 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  VAR_8 = userId )  VAR_8 = userId (  METHOD_5 ( ) )  METHOD_5 ( ) ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Class<?> ) TYPE java.lang.Class<?> ( NAME type ) NAME type ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( type . METHOD_2 ( ) ) ) COND ! ( type . METHOD_2 ( ) ) ( THEN THEN (  throw new java.lang.IllegalArgumentException ( ( STRING_1 + type ) ) ; )  throw new java.lang.IllegalArgumentException ( ( STRING_1 + type ) ) ; ) THEN THEN ) IF IF ( IF IF ( COND TYPE_1 . METHOD_3 ( type ) ) COND TYPE_1 . METHOD_3 ( type ) ( THEN THEN (  return 8 ; )  return 8 ; ) THEN THEN ( ELSE ELSE (  return 4 ; )  return 4 ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE android.os.Message ) TYPE android.os.Message ( NAME msg ) NAME msg ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_1 ) ( msg.obj ) ) ) INIT = ( ( TYPE_1 ) ( msg.obj ) ) ) VAR VAR ( SWITCH SWITCH ( NAME VAR_2 ) NAME VAR_2 ( CASE VAR_3 ( BLOCK BLOCK (  METHOD_2 ( VAR_1 ) )  METHOD_2 ( VAR_1 ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_3 ( CASE VAR_4 ( BLOCK BLOCK (  METHOD_3 ( VAR_1 ) )  METHOD_3 ( VAR_1 ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_4 ( CASE VAR_5 ( BLOCK BLOCK (  METHOD_4 ( VAR_1 ) )  METHOD_4 ( VAR_1 ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_5 ( CASE VAR_6 ( BLOCK BLOCK (  VAR_7 . METHOD_5 ( ) )  VAR_7 . METHOD_5 ( ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_6 ( DEFAULT DEFAULT ( BLOCK BLOCK (  android.util.Log.e ( VAR_8 . TAG , ( STRING_1 + ( VAR_2 ) ) ) )  android.util.Log.e ( VAR_8 . TAG , ( STRING_1 + ( VAR_2 ) ) ) ) BLOCK BLOCK ) DEFAULT DEFAULT ) SWITCH SWITCH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_6 ) NAME VAR_6 ) VAR VAR ( VAR VAR ( TYPE TYPE_1.Allocation ) TYPE TYPE_1.Allocation ( NAME VAR_7 ) NAME VAR_7 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return new TYPE_2 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 ) . METHOD_1 ( ) ; )  return new TYPE_2 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 ) . METHOD_1 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE android.bluetooth.BluetoothDevice ) TYPE android.bluetooth.BluetoothDevice ( NAME device ) NAME device ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_4 ) COND VAR_4 ( THEN THEN (  android.util.Log.d ( TYPE_1 . TAG , ( STRING_1 + device ) ) )  android.util.Log.d ( TYPE_1 . TAG , ( STRING_1 + device ) ) ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_5 ) NAME VAR_5 ( INIT = new TYPE_1 ( device , VAR_1 , VAR_2 , VAR_3 ) ) INIT = new TYPE_1 ( device , VAR_1 , VAR_2 , VAR_3 ) ) VAR VAR (  VAR_5 . start ( ) )  VAR_5 . start ( ) (  return VAR_5 ; )  return VAR_5 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME packageName ) NAME packageName ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = 0 ) INIT = 0 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME context ) NAME context ( INIT = mContext ) INIT = mContext ) VAR VAR ( IF IF ( COND VAR_1 >= 0 ) COND VAR_1 >= 0 ( THEN THEN ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_2 ( packageName , VAR_1 ) ) INIT = METHOD_2 ( packageName , VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_3 != null ) COND VAR_3 != null ( THEN THEN (  context = VAR_3 . context )  context = VAR_3 . context (  VAR_2 = VAR_1 )  VAR_2 = VAR_1 ) THEN THEN ) IF IF ) THEN THEN ) IF IF ( IF IF ( COND VAR_2 != 0 ) COND VAR_2 != 0 ( THEN THEN (  return TYPE_4 . METHOD_1 ( context , VAR_2 ) ; )  return TYPE_4 . METHOD_1 ( context , VAR_2 ) ; ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE char ) TYPE char ( NAME c ) NAME c ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( ( TYPE_1 . METHOD_2 ( c ) ) || ( ( c >= CHAR_1 ) && ( c <= CHAR_2 ) ) ) ) COND ! ( ( TYPE_1 . METHOD_2 ( c ) ) || ( ( c >= CHAR_1 ) && ( c <= CHAR_2 ) ) ) ( THEN THEN (  TYPE_2 . e ( VAR_1 , ( ( STRING_1 + c ) + STRING_2 ) ) )  TYPE_2 . e ( VAR_1 , ( ( STRING_1 + c ) + STRING_2 ) ) ) THEN THEN ( ELSE ELSE (  VAR_2 . METHOD_1 ( c ) )  VAR_2 . METHOD_1 ( c ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME context ) NAME context ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME element ) NAME element ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( TYPE_3 . METHOD_2 ( element ) ) && ( TYPE_3 . METHOD_3 ( element ) ) ) && ( ! ( TYPE_3 . METHOD_4 ( element ) ) ) ) COND ( ( TYPE_3 . METHOD_2 ( element ) ) && ( TYPE_3 . METHOD_3 ( element ) ) ) && ( ! ( TYPE_3 . METHOD_4 ( element ) ) ) ( THEN THEN (  context . METHOD_5 ( VAR_1 , element , context . METHOD_6 ( element ) , STRING_1 , null ) )  context . METHOD_5 ( VAR_1 , element , context . METHOD_6 ( element ) , STRING_1 , null ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME e ) NAME e ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME project ) NAME project ( INIT = TYPE_3 . METHOD_2 ( e . METHOD_3 ( ) ) ) INIT = TYPE_3 . METHOD_2 ( e . METHOD_3 ( ) ) ) VAR VAR ( IF IF ( COND project == null ) COND project == null ( THEN THEN (  project = TYPE_4 . METHOD_4 ( ) . METHOD_5 ( ) )  project = TYPE_4 . METHOD_4 ( ) . METHOD_5 ( ) ) THEN THEN ) IF IF ( IF IF ( COND TYPE_5 . METHOD_6 ( project ) ) COND TYPE_5 . METHOD_6 ( project ) ( THEN THEN (  TYPE_5 . METHOD_7 ( ) )  TYPE_5 . METHOD_7 ( ) ) THEN THEN ) IF IF (  TYPE_6 . METHOD_4 ( ) . METHOD_8 ( project , VAR_1 , TYPE_7 . METHOD_4 ( project ) ) )  TYPE_6 . METHOD_4 ( ) . METHOD_8 ( project , VAR_1 , TYPE_7 . METHOD_4 ( project ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME args ) NAME args ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  TYPE_3 . METHOD_2 ( VAR_2 class . METHOD_3 ( ) , new java.lang.Class < ? > [ ] { VAR_3 class , VAR_4 class , VAR_5 class , VAR_6 class , VAR_7 class } , VAR_1 ) )  TYPE_3 . METHOD_2 ( VAR_2 class . METHOD_3 ( ) , new java.lang.Class < ? > [ ] { VAR_3 class , VAR_4 class , VAR_5 class , VAR_6 class , VAR_7 class } , VAR_1 ) (  VAR_8 . println ( STRING_1 ) )  VAR_8 . println ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.IllegalArgumentException ) TYPE java.lang.IllegalArgumentException ( NAME VAR_9 ) NAME VAR_9 ( BLOCK BLOCK (  java.lang.System.out.println ( STRING_2 ) )  java.lang.System.out.println ( STRING_2 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME d ) NAME d ( INIT = TYPE_3 . METHOD_2 ( VAR_1 , VAR_2 ) . METHOD_3 ( ) ) INIT = TYPE_3 . METHOD_2 ( VAR_1 , VAR_2 ) . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME r ) NAME r ( INIT = new TYPE_4 ( d , VAR_3 ) ) INIT = new TYPE_4 ( d , VAR_3 ) ) VAR VAR (  VAR_4 . METHOD_4 ( d . METHOD_5 ( ) , r ) )  VAR_4 . METHOD_4 ( d . METHOD_5 ( ) , r ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE android.bluetooth.BluetoothDevice ) TYPE android.bluetooth.BluetoothDevice ( NAME device ) NAME device ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( TYPE_1 . METHOD_2 ( VAR_1 ) ) ) COND ! ( TYPE_1 . METHOD_2 ( VAR_1 ) ) ( THEN THEN (  android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) )  android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) (  return 0 ; )  return 0 ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME service ) NAME service ( INIT = METHOD_3 ( ) ) INIT = METHOD_3 ( ) ) VAR VAR ( IF IF ( COND service == null ) COND service == null ( THEN THEN (  return 0 ; )  return 0 ; ) THEN THEN ) IF IF (  return service . METHOD_1 ( device ) ; )  return service . METHOD_1 ( device ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.ArrayList < TYPE_1 > ( ) ) INIT = new java.util.ArrayList < TYPE_1 > ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_3 ) NAME VAR_3 ( INIT = result . METHOD_2 ( ) ) INIT = result . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_6 . METHOD_3 ( VAR_3 , ( ( TYPE_3 ) ( result ) ) . METHOD_4 ( ) , VAR_5 , METHOD_5 ( ) ) ) INIT = TYPE_6 . METHOD_3 ( VAR_3 , ( ( TYPE_3 ) ( result ) ) . METHOD_4 ( ) , VAR_5 , METHOD_5 ( ) ) ) VAR VAR (  VAR_2 . METHOD_6 ( VAR_4 ) )  VAR_2 . METHOD_6 ( VAR_4 ) (  VAR_2 . METHOD_6 ( VAR_1 ) )  VAR_2 . METHOD_6 ( VAR_1 ) (  return new TYPE_7 ( VAR_3 , VAR_2 ) ; )  return new TYPE_7 ( VAR_3 , VAR_2 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME context ) NAME context ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( ) ) INIT = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( ) ) VAR VAR ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  TYPE_4 . METHOD_4 ( context ) )  TYPE_4 . METHOD_4 ( context ) (  TYPE_5 . e ( STRING_1 , STRING_2 ) )  TYPE_5 . e ( STRING_1 , STRING_2 ) ) THEN THEN ( ELSE ELSE ( VAR VAR ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME call ) NAME call ( INIT = VAR_1 . METHOD_5 ( ) ) INIT = VAR_1 . METHOD_5 ( ) ) VAR VAR ( IF IF ( COND call != null ) COND call != null ( THEN THEN (  call . METHOD_6 ( false , null ) )  call . METHOD_6 ( false , null ) ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  VAR_1 )  VAR_1 ( BLOCK BLOCK ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = ( VAR_1 . size ( ) ) - 1 ) INIT = ( VAR_1 . size ( ) ) - 1 ) VAR VAR ) INIT INIT ( COND i >= 0 ) COND i >= 0 ( UPDATE UPDATE (  i -- )  i -- ) UPDATE UPDATE ( BLOCK BLOCK (  VAR_1 . get ( i ) . run ( ) )  VAR_1 . get ( i ) . run ( ) ) BLOCK BLOCK ) FOR FOR ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = this . VAR_3 ) INIT = this . VAR_3 ) VAR VAR ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN (  VAR_2 . METHOD_1 ( ) )  VAR_2 . METHOD_1 ( ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME value ) NAME value ( INIT = TYPE_2 . METHOD_1 ( VAR_1 ) ) INIT = TYPE_2 . METHOD_1 ( VAR_1 ) ) VAR VAR (  callback . METHOD_2 ( value ) )  callback . METHOD_2 ( value ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK (  callback . METHOD_3 ( e . METHOD_4 ( ) ) )  callback . METHOD_3 ( e . METHOD_4 ( ) ) ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE java.lang.RuntimeException ) TYPE java.lang.RuntimeException ( NAME e ) NAME e ( BLOCK BLOCK (  callback . METHOD_3 ( e ) )  callback . METHOD_3 ( e ) ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME e ) NAME e ( BLOCK BLOCK (  callback . METHOD_3 ( e ) )  callback . METHOD_3 ( e ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_2 ) == 1 ) COND ( VAR_2 ) == 1 ( THEN THEN (  return VAR_1 ; )  return VAR_1 ; ) THEN THEN ( ELSE ELSE ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_1 . METHOD_2 ( VAR_4 . METHOD_3 ( ) ) ) INIT = TYPE_1 . METHOD_2 ( VAR_4 . METHOD_3 ( ) ) ) VAR VAR ( IF IF ( COND ( ! ( VAR_5 ) ) || ( ( VAR_6 ) == ( VAR_7 ) ) ) COND ( ! ( VAR_5 ) ) || ( ( VAR_6 ) == ( VAR_7 ) ) ( THEN THEN (  return VAR_3 + VAR_1 ; )  return VAR_3 + VAR_1 ; ) THEN THEN ( ELSE ELSE ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_8 ) NAME VAR_8 ( INIT = ( VAR_1 + VAR_3 ) + ( VAR_2 ) ) INIT = ( VAR_1 + VAR_3 ) + ( VAR_2 ) ) VAR VAR (  return VAR_8 - ( VAR_8 % ( VAR_2 ) ) ; )  return VAR_8 - ( VAR_8 % ( VAR_2 ) ) ; ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  VAR_1 = TYPE_1 . METHOD_2 ( VAR_2 , VAR_3 , VAR_4 ) )  VAR_1 = TYPE_1 . METHOD_2 ( VAR_2 , VAR_3 , VAR_4 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_5 ) NAME VAR_5 ( INIT = new TYPE_2 ( ( ( short ) ( VAR_6 ) ) , VAR_7 . METHOD_3 ( ) ) ) INIT = new TYPE_2 ( ( ( short ) ( VAR_6 ) ) , VAR_7 . METHOD_3 ( ) ) ) VAR VAR (  TYPE_1 . METHOD_4 ( VAR_1 , VAR_5 ) )  TYPE_1 . METHOD_4 ( VAR_1 , VAR_5 ) (  TYPE_3 . METHOD_5 ( VAR_1 ) )  TYPE_3 . METHOD_5 ( VAR_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4|TYPE_5 ) TYPE TYPE_4|TYPE_5 ( NAME e ) NAME e ( BLOCK BLOCK (  android.util.Log.e ( VAR_8 . TAG , STRING_1 , e ) )  android.util.Log.e ( VAR_8 . TAG , STRING_1 , e ) (  return false ; )  return false ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME info ) NAME info ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_3 . METHOD_2 ( info ) ) INIT = TYPE_3 . METHOD_2 ( info ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_4 ( VAR_2 ) ) INIT = new TYPE_4 ( VAR_2 ) ) VAR VAR (  TYPE_5 . METHOD_3 ( ) . METHOD_4 ( VAR_3 , VAR_1 , VAR_4 , ( ( ( VAR_5 ) | ( VAR_6 ) ) | ( VAR_7 ) ) , 0 , false ) )  TYPE_5 . METHOD_3 ( ) . METHOD_4 ( VAR_3 , VAR_1 , VAR_4 , ( ( ( VAR_5 ) | ( VAR_6 ) ) | ( VAR_7 ) ) , 0 , false ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean[] ) RETURN boolean[] ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE boolean[] ) TYPE boolean[] ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( mContext ) ) INIT = TYPE_1 . METHOD_2 ( mContext ) ) VAR VAR ( IF IF ( COND ( VAR_1 . length ) >= 9 ) COND ( VAR_1 . length ) >= 9 ( THEN THEN (  return VAR_1 ; )  return VAR_1 ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE boolean[] ) TYPE boolean[] ( NAME VAR_2 ) NAME VAR_2 ( INIT = new boolean [ 9 ] ) INIT = new boolean [ 9 ] ) VAR VAR (  TYPE_2 . METHOD_3 ( VAR_1 , 0 , VAR_2 , 0 , VAR_1 . length ) )  TYPE_2 . METHOD_3 ( VAR_1 , 0 , VAR_2 , 0 , VAR_1 . length ) (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Class<?extendsTYPE_1> ) TYPE java.lang.Class<?extendsTYPE_1> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  VAR_3 . METHOD_2 ( STRING_1 , VAR_2 ) )  VAR_3 . METHOD_2 ( STRING_1 , VAR_2 ) ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN (  VAR_3 . METHOD_2 ( STRING_2 , VAR_1 . getName ( ) ) )  VAR_3 . METHOD_2 ( STRING_2 , VAR_1 . getName ( ) ) ) THEN THEN ) IF IF (  VAR_4 . print ( ( ( ( VAR_5 ) + ( VAR_6 . METHOD_3 ( VAR_3 ) ) ) + STRING_3 ) ) )  VAR_4 . print ( ( ( ( VAR_5 ) + ( VAR_6 . METHOD_3 ( VAR_3 ) ) ) + STRING_3 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.Set<TYPE_1> ) TYPE java.util.Set<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  METHOD_2 ( VAR_2 ) )  METHOD_2 ( VAR_2 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  METHOD_3 ( false ) )  METHOD_3 ( false ) ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_4 ( VAR_4 ) ) INIT = METHOD_4 ( VAR_4 ) ) VAR VAR (  assertEquals ( STRING_1 , STRING_2 , VAR_3 ) )  assertEquals ( STRING_1 , STRING_2 , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_2 ( VAR_3 ) ) INIT = VAR_1 . METHOD_2 ( VAR_3 ) ) VAR VAR ( IF IF ( COND VAR_1 . equals ( STRING_1 ) ) COND VAR_1 . equals ( STRING_1 ) ( THEN THEN (  VAR_2 = STRING_2 )  VAR_2 = STRING_2 ) THEN THEN ( ELSE ELSE ( IF IF ( COND VAR_1 . equals ( STRING_3 ) ) COND VAR_1 . equals ( STRING_3 ) ( THEN THEN (  VAR_2 = STRING_4 )  VAR_2 = STRING_4 ) THEN THEN ( ELSE ELSE ( IF IF ( COND VAR_1 . equals ( STRING_5 ) ) COND VAR_1 . equals ( STRING_5 ) ( THEN THEN (  VAR_2 = STRING_6 )  VAR_2 = STRING_6 ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( STRING_1 , STRING_2 ) )  VAR_1 . METHOD_2 ( STRING_1 , STRING_2 ) (  VAR_1 . METHOD_2 ( STRING_3 , STRING_4 ) )  VAR_1 . METHOD_2 ( STRING_3 , STRING_4 ) (  VAR_1 . METHOD_2 ( STRING_5 , STRING_6 ) )  VAR_1 . METHOD_2 ( STRING_5 , STRING_6 ) (  VAR_1 . METHOD_2 ( STRING_7 , STRING_8 ) )  VAR_1 . METHOD_2 ( STRING_7 , STRING_8 ) (  VAR_1 . METHOD_2 ( STRING_9 , STRING_10 ) )  VAR_1 . METHOD_2 ( STRING_9 , STRING_10 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_2 = TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , false ) )  VAR_2 = TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , false ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.IllegalArgumentException ) TYPE java.lang.IllegalArgumentException ( NAME e ) NAME e ( BLOCK BLOCK (  return null ; )  return null ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  return new java.lang.String ( VAR_2 , VAR_3 ) ; )  return new java.lang.String ( VAR_2 , VAR_3 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME pos ) NAME pos ( INIT = new TYPE_2 ( 0 ) ) INIT = new TYPE_2 ( 0 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR (  VAR_2 = VAR_1 . METHOD_2 ( STRING_1 , pos ) )  VAR_2 = VAR_1 . METHOD_2 ( STRING_1 , pos ) (  METHOD_3 ( VAR_2 ) )  METHOD_3 ( VAR_2 ) (  assertEquals ( STRING_2 , 5 , pos . METHOD_4 ( ) ) )  assertEquals ( STRING_2 , 5 , pos . METHOD_4 ( ) ) (  METHOD_5 ( 8 ) )  METHOD_5 ( 8 ) ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1<TYPE_2> ) RETURN TYPE_1<TYPE_2> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  < TYPE_2 > VAR_3 = TYPE_1 . METHOD_2 ( VAR_4 class ) )  < TYPE_2 > VAR_3 = TYPE_1 . METHOD_2 ( VAR_4 class ) (  org.mockito.Mockito.verify ( VAR_1 ) . METHOD_3 ( VAR_3 . METHOD_4 ( ) , org.mockito.Matchers . METHOD_5 ( VAR_5 class ) ) )  org.mockito.Mockito.verify ( VAR_1 ) . METHOD_3 ( VAR_3 . METHOD_4 ( ) , org.mockito.Matchers . METHOD_5 ( VAR_5 class ) ) (  assertEquals ( VAR_6 , VAR_2 ) )  assertEquals ( VAR_6 , VAR_2 ) (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME state ) NAME state ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  VAR_1 )  VAR_1 ( BLOCK BLOCK (  android.util.Log . i ( VAR_2 , ( STRING_1 + state ) ) )  android.util.Log . i ( VAR_2 , ( STRING_1 + state ) ) (  VAR_3 = state )  VAR_3 = state ( IF IF ( COND ! state ) COND ! state ( THEN THEN ( IF IF ( COND ( VAR_4 ) != null ) COND ( VAR_4 ) != null ( THEN THEN (  VAR_4 . METHOD_2 ( ) )  VAR_4 . METHOD_2 ( ) ) THEN THEN ) IF IF ) THEN THEN ( ELSE ELSE ( TRY TRY ( BLOCK BLOCK (  METHOD_3 ( ) )  METHOD_3 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ( SYNCHRONIZED SYNCHRONIZED (  VAR_1 )  VAR_1 ( BLOCK BLOCK (  VAR_5 = true )  VAR_5 = true ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE short ) TYPE short ( NAME value ) NAME value ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  throw new TYPE_1 ( ) ; )  throw new TYPE_1 ( ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE char ) TYPE char ( NAME c ) NAME c ( INIT = ( ( char ) ( value ) ) ) INIT = ( ( char ) ( value ) ) ) VAR VAR ( VAR VAR ( TYPE byte ) TYPE byte ( NAME b ) NAME b ( INIT = ( ( byte ) ( c ) ) ) INIT = ( ( byte ) ( c ) ) ) VAR VAR (  return ( ( STRING_1 + ( ( int ) ( c ) ) ) + STRING_2 ) + ( ( int ) ( b ) ) ; )  return ( ( STRING_1 + ( ( int ) ( c ) ) ) + STRING_2 ) + ( ( int ) ( b ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_2 ) == null ) COND ( VAR_2 ) == null ( THEN THEN (  TYPE_1 . METHOD_2 ( false ) )  TYPE_1 . METHOD_2 ( false ) ) THEN THEN ) IF IF ( IF IF ( COND ( ( VAR_2 ) == null ) || ( ! ( VAR_2 . METHOD_3 ( ) ) ) ) COND ( ( VAR_2 ) == null ) || ( ! ( VAR_2 . METHOD_3 ( ) ) ) ( THEN THEN (  VAR_2 = TYPE_1 . METHOD_4 ( VAR_1 , true ) )  VAR_2 = TYPE_1 . METHOD_4 ( VAR_1 , true ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  android.util.Log.d ( TYPE_1 . TAG , STRING_1 ) )  android.util.Log.d ( TYPE_1 . TAG , STRING_1 ) ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_2 ) != null ) COND ( VAR_2 ) != null ( THEN THEN (  METHOD_2 ( VAR_2 ) )  METHOD_2 ( VAR_2 ) (  VAR_2 = null )  VAR_2 = null ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_3 ) != null ) COND ( VAR_3 ) != null ( THEN THEN (  VAR_3 . METHOD_1 ( ) )  VAR_3 . METHOD_1 ( ) (  VAR_3 = null )  VAR_3 = null ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_4 ) != null ) COND ( VAR_4 ) != null ( THEN THEN (  VAR_4 . METHOD_1 ( ) )  VAR_4 . METHOD_1 ( ) (  VAR_4 = null )  VAR_4 = null ) THEN THEN ) IF IF (  TYPE_1 . METHOD_3 ( ) )  TYPE_1 . METHOD_3 ( ) (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( VAR_2 ) ) INIT = METHOD_2 ( VAR_2 ) ) VAR VAR (  assertEquals ( INT_1 , VAR_1 . size ( ) ) )  assertEquals ( INT_1 , VAR_1 . size ( ) ) (  TYPE_2 . METHOD_3 ( VAR_1 , STRING_1 , INT_2 , VAR_3 , INT_3 , INT_4 , INT_5 , INT_6 , INT_7 ) )  TYPE_2 . METHOD_3 ( VAR_1 , STRING_1 , INT_2 , VAR_3 , INT_3 , INT_4 , INT_5 , INT_6 , INT_7 ) (  TYPE_2 . METHOD_3 ( VAR_1 , STRING_1 , INT_2 , VAR_4 , INT_3 , INT_8 , INT_9 , INT_10 , INT_9 ) )  TYPE_2 . METHOD_3 ( VAR_1 , STRING_1 , INT_2 , VAR_4 , INT_3 , INT_8 , INT_9 , INT_10 , INT_9 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME n ) NAME n ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = n . METHOD_2 ( ) ) INIT = n . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( VAR_1 . length ) * 8 ) INIT = ( VAR_1 . length ) * 8 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME e ) NAME e ( INIT = new TYPE_1 ( 1 , VAR_1 ) ) INIT = new TYPE_1 ( 1 , VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_2 < VAR_3 ) COND VAR_2 < VAR_3 ( THEN THEN (  e = e . METHOD_3 ( ( VAR_3 - VAR_2 ) ) )  e = e . METHOD_3 ( ( VAR_3 - VAR_2 ) ) ) THEN THEN ) IF IF (  return e ; )  return e ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( ) ) INIT = TYPE_2 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3<java.lang.String,TYPE_4> ) TYPE TYPE_3<java.lang.String,TYPE_4> ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_3 ( ) ) INIT = VAR_1 . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_4> ) TYPE java.util.List<TYPE_4> ( NAME values ) NAME values ( INIT = VAR_2 . get ( STRING_1 ) ) INIT = VAR_2 . get ( STRING_1 ) ) VAR VAR (  assertEquals ( 2 , values . size ( ) ) )  assertEquals ( 2 , values . size ( ) ) ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_3 ) NAME VAR_3 ( INIT = values . get ( 1 ) ) INIT = values . get ( 1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_3 . METHOD_4 ( ) ) INIT = VAR_3 . METHOD_4 ( ) ) VAR VAR (  assertTrue ( VAR_4 . METHOD_5 ( ) . METHOD_6 ( ) . METHOD_7 ( METHOD_8 ( STRING_2 ) ) ) )  assertTrue ( VAR_4 . METHOD_5 ( ) . METHOD_6 ( ) . METHOD_7 ( METHOD_8 ( STRING_2 ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME context ) NAME context ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE android.content.Intent ) TYPE android.content.Intent ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( IF IF ( COND TYPE_4 . METHOD_2 ( context ) ) COND TYPE_4 . METHOD_2 ( context ) ( THEN THEN (  VAR_2 = TYPE_4 . METHOD_3 ( context ) )  VAR_2 = TYPE_4 . METHOD_3 ( context ) ) THEN THEN ( ELSE ELSE (  VAR_2 = TYPE_5 . METHOD_4 ( context , VAR_3 ) )  VAR_2 = TYPE_5 . METHOD_4 ( context , VAR_3 ) ) ELSE ELSE ) IF IF ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN (  VAR_2 . METHOD_5 ( VAR_4 ) )  VAR_2 . METHOD_5 ( VAR_4 ) ) THEN THEN ) IF IF (  VAR_2 . METHOD_6 ( VAR_5 , true ) )  VAR_2 . METHOD_6 ( VAR_5 , true ) (  return TYPE_1 . METHOD_7 ( context , 0 , VAR_2 , VAR_6 ) ; )  return TYPE_1 . METHOD_7 ( context , 0 , VAR_2 , VAR_6 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN TYPE_1<java.lang.Integer> ) RETURN TYPE_1<java.lang.Integer> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME n ) NAME n ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<java.lang.Integer> ) TYPE TYPE_1<java.lang.Integer> ( NAME a ) NAME a ( INIT = new TYPE_1 < java.lang.Integer > ( ) ) INIT = new TYPE_1 < java.lang.Integer > ( ) ) VAR VAR (  assertTrue ( a . METHOD_2 ( ) ) )  assertTrue ( a . METHOD_2 ( ) ) ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < n ) COND i < n ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK (  a . METHOD_3 ( i ) )  a . METHOD_3 ( i ) ) BLOCK BLOCK ) FOR FOR (  assertFalse ( a . METHOD_2 ( ) ) )  assertFalse ( a . METHOD_2 ( ) ) (  assertEquals ( n , a . size ( ) ) )  assertEquals ( n , a . size ( ) ) (  return a ; )  return a ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_2 ) != ( VAR_3 ) ) COND ( VAR_2 ) != ( VAR_3 ) ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_4 . length ) < 2 ) COND ( VAR_4 . length ) < 2 ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  result . level = ( VAR_4 [ 0 ] ) & INT_1 )  result . level = ( VAR_4 [ 0 ] ) & INT_1 (  VAR_5 = ( VAR_4 [ 1 ] ) & INT_1 )  VAR_5 = ( VAR_4 [ 1 ] ) & INT_1 (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_6 ) NAME VAR_6 ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_7 ) NAME VAR_7 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return new TYPE_1 ( id , VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 ) ; )  return new TYPE_1 ( id , VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = null ) INIT = null ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_4 = METHOD_2 ( VAR_1 ) )  VAR_4 = METHOD_2 ( VAR_1 ) (  VAR_2 . METHOD_3 ( VAR_4 , VAR_3 ) )  VAR_2 . METHOD_3 ( VAR_4 , VAR_3 ) (  return true ; )  return true ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME VAR_5 ) NAME VAR_5 ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ( FINALLY FINALLY (  TYPE_3 . METHOD_4 ( VAR_4 ) )  TYPE_3 . METHOD_4 ( VAR_4 ) ) FINALLY FINALLY ) TRY TRY (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME args ) NAME args ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME t ) NAME t ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  t . METHOD_2 ( 3 , 3 , false ) )  t . METHOD_2 ( 3 , 3 , false ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME in ) NAME in ( INIT = t . METHOD_3 ( VAR_1 ) ) INIT = t . METHOD_3 ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = t . METHOD_3 ( ( ( float ) ( ( VAR_3 ) / FLOAT_1 ) ) ) ) INIT = t . METHOD_3 ( ( ( float ) ( ( VAR_3 ) / FLOAT_1 ) ) ) ) VAR VAR (  args.out = t . METHOD_4 ( in , VAR_2 ) )  args.out = t . METHOD_4 ( in , VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 = METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_2 ) )  VAR_1 = METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_2 ) (  VAR_3 = ( ( TYPE_1 ) ( METHOD_5 ( VAR_4 ) ) ) )  VAR_3 = ( ( TYPE_1 ) ( METHOD_5 ( VAR_4 ) ) ) (  VAR_5 = METHOD_5 ( VAR_6 ) )  VAR_5 = METHOD_5 ( VAR_6 ) (  VAR_7 = ( ( TYPE_2 ) ( METHOD_5 ( VAR_8 ) ) ) )  VAR_7 = ( ( TYPE_2 ) ( METHOD_5 ( VAR_8 ) ) ) ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  this . METHOD_6 ( VAR_7 ) )  this . METHOD_6 ( VAR_7 ) ) THEN THEN ( ELSE ELSE (  this . METHOD_6 ( VAR_5 ) )  this . METHOD_6 ( VAR_5 ) ) ELSE ELSE ) IF IF (  VAR_9 = new TYPE_3 ( METHOD_2 ( ) ) )  VAR_9 = new TYPE_3 ( METHOD_2 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_2 < 1 ) COND VAR_2 < 1 ( THEN THEN (  throw new TYPE_4 ( STRING_1 ) ; )  throw new TYPE_4 ( STRING_1 ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE int ) TYPE int ( NAME id ) NAME id ( INIT = VAR_1 . METHOD_2 ( e . METHOD_3 ( VAR_1 ) , VAR_2 , 0 , 0 , false , false , 0 ) ) INIT = VAR_1 . METHOD_2 ( e . METHOD_3 ( VAR_1 ) , VAR_2 , 0 , 0 , false , false , 0 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME t ) NAME t ( INIT = new TYPE_1 ( id , VAR_1 ) ) INIT = new TYPE_1 ( id , VAR_1 ) ) VAR VAR (  VAR_3 = e )  VAR_3 = e (  VAR_4 = VAR_2 )  VAR_4 = VAR_2 (  t . METHOD_4 ( ) )  t . METHOD_4 ( ) (  return t ; )  return t ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ! ( METHOD_2 ( ) ) ) COND ! ( METHOD_2 ( ) ) ( THEN THEN (  return STRING_1 ; )  return STRING_1 ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = context . METHOD_3 ( VAR_2 ) ) INIT = context . METHOD_3 ( VAR_2 ) ) VAR VAR (  return METHOD_4 ( ) ? context . METHOD_3 ( VAR_3 , VAR_1 ) : context . METHOD_3 ( VAR_4 , VAR_1 ) ; )  return METHOD_4 ( ) ? context . METHOD_3 ( VAR_3 , VAR_1 ) : context . METHOD_3 ( VAR_4 , VAR_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_3 . METHOD_2 ( VAR_2 ) ) ^ ( VAR_4 ) ) COND ( VAR_3 . METHOD_2 ( VAR_2 ) ) ^ ( VAR_4 ) ( THEN THEN (  METHOD_3 ( ) )  METHOD_3 ( ) (  VAR_5 . print ( STRING_1 ) )  VAR_5 . print ( STRING_1 ) (  VAR_5 . print ( STRING_2 ) )  VAR_5 . print ( STRING_2 ) (  VAR_2 . METHOD_4 ( VAR_1 , this ) )  VAR_2 . METHOD_4 ( VAR_1 , this ) (  VAR_5 . println ( TYPE_3 . METHOD_5 ( VAR_1 . getName ( ) , VAR_2 . METHOD_6 ( ) , VAR_2 . getName ( VAR_1 ) , VAR_2 . METHOD_7 ( VAR_1 ) ) ) )  VAR_5 . println ( TYPE_3 . METHOD_5 ( VAR_1 . getName ( ) , VAR_2 . METHOD_6 ( ) , VAR_2 . getName ( VAR_1 ) , VAR_2 . METHOD_7 ( VAR_1 ) ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 . METHOD_2 ( ) . METHOD_3 ( ) ) INIT = VAR_4 . METHOD_2 ( ) . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_3 . METHOD_4 ( ) ) INIT = VAR_3 . METHOD_4 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_6 ) NAME VAR_6 ( INIT = VAR_3 . METHOD_5 ( ) . METHOD_6 ( ) ) INIT = VAR_3 . METHOD_5 ( ) . METHOD_6 ( ) ) VAR VAR (  return TYPE_4 . METHOD_1 ( VAR_1 , VAR_6 , VAR_5 ) ; )  return TYPE_4 . METHOD_1 ( VAR_1 , VAR_6 , VAR_5 ) ; ) THEN THEN ( ELSE ELSE (  return null ; )  return null ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( METHOD_2 ( ) ) ) COND ! ( METHOD_2 ( ) ) ( THEN THEN (  TYPE_3 . METHOD_3 ( VAR_2 ) )  TYPE_3 . METHOD_3 ( VAR_2 ) (  return ; )  return ; ) THEN THEN ) IF IF ( TRY TRY ( BLOCK BLOCK (  METHOD_4 ( ) . METHOD_1 ( VAR_1 , mContext . METHOD_5 ( ) , VAR_2 ) )  METHOD_4 ( ) . METHOD_1 ( VAR_1 , mContext . METHOD_5 ( ) , VAR_2 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME e ) NAME e ( BLOCK BLOCK (  throw e . METHOD_6 ( ) ; )  throw e . METHOD_6 ( ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME data ) NAME data ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  android.util.Log.v ( VAR_1 . TAG , ( STRING_1 + id ) ) )  android.util.Log.v ( VAR_1 . TAG , ( STRING_1 + id ) ) ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME result ) NAME result ( INIT = false ) INIT = false ) VAR VAR ( IF IF ( COND ( VAR_2 ) != null ) COND ( VAR_2 ) != null ( THEN THEN ( TRY TRY ( BLOCK BLOCK (  result = VAR_2 . METHOD_1 ( id , data ) )  result = VAR_2 . METHOD_1 ( id , data ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME e ) NAME e ( BLOCK BLOCK (  android.util.Log.e ( VAR_1 . TAG , e.toString ( ) ) )  android.util.Log.e ( VAR_1 . TAG , e.toString ( ) ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) THEN THEN ( ELSE ELSE (  android.util.Log.w ( VAR_1 . TAG , STRING_2 ) )  android.util.Log.w ( VAR_1 . TAG , STRING_2 ) ) ELSE ELSE ) IF IF (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME config ) NAME config ) VAR VAR ( VAR VAR ( TYPE TYPE_3[] ) TYPE TYPE_3[] ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = config . METHOD_2 ( VAR_4 , ( ( TYPE_4 ) ( null ) ) ) ) INIT = config . METHOD_2 ( VAR_4 , ( ( TYPE_4 ) ( null ) ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_5 ) NAME VAR_5 ( INIT = new TYPE_5 ( VAR_3 , VAR_2 ) ) INIT = new TYPE_5 ( VAR_3 , VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME VAR_6 ) NAME VAR_6 ( INIT = METHOD_3 ( VAR_1 , config , VAR_5 ) ) INIT = METHOD_3 ( VAR_1 , config , VAR_5 ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_7 ) NAME VAR_7 ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK (  VAR_6 . METHOD_4 ( new TYPE_7 ( new TYPE_8 ( VAR_7 ) , VAR_6 ) ) )  VAR_6 . METHOD_4 ( new TYPE_7 ( new TYPE_8 ( VAR_7 ) , VAR_6 ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER synchronized ) MODIFIER synchronized ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME count ) NAME count ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME d ) NAME d ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  METHOD_3 ( mContext , id , VAR_1 , VAR_2 , count , d , VAR_3 , VAR_5 ) )  METHOD_3 ( mContext , id , VAR_1 , VAR_2 , count , d , VAR_3 , VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME key ) NAME key ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND key . METHOD_2 ( STRING_1 ) ) COND key . METHOD_2 ( STRING_1 ) ( THEN THEN (  VAR_2 = 0 )  VAR_2 = 0 ) THEN THEN ( ELSE ELSE ( IF IF ( COND key . METHOD_2 ( STRING_2 ) ) COND key . METHOD_2 ( STRING_2 ) ( THEN THEN (  VAR_2 = 1 )  VAR_2 = 1 ) THEN THEN ( ELSE ELSE (  return null ; )  return null ; ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ( IF IF ( COND ( VAR_3 ) == null ) COND ( VAR_3 ) == null ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF (  return VAR_4 ; )  return VAR_4 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  VAR_2 . METHOD_2 ( ) )  VAR_2 . METHOD_2 ( ) ( TRY TRY ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_3 . METHOD_3 ( ) ) ) COND ! ( VAR_3 . METHOD_3 ( ) ) ( THEN THEN (  loge ( STRING_1 ) )  loge ( STRING_1 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) THEN THEN ) IF IF (  VAR_4 . METHOD_4 ( ) )  VAR_4 . METHOD_4 ( ) (  METHOD_5 ( false ) )  METHOD_5 ( false ) (  METHOD_6 ( VAR_5 ) )  METHOD_6 ( VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( VAR_2 , 2 ) ) INIT = TYPE_2 . METHOD_2 ( VAR_2 , 2 ) ) VAR VAR (  assertEquals ( VAR_3 , VAR_4 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ) )  assertEquals ( VAR_3 , VAR_4 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ) (  METHOD_5 ( VAR_1 ) )  METHOD_5 ( VAR_1 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_5 ) NAME VAR_5 ( INIT = TYPE_2 . METHOD_2 ( VAR_6 , 1 ) ) INIT = TYPE_2 . METHOD_2 ( VAR_6 , 1 ) ) VAR VAR (  assertEquals ( VAR_7 , VAR_4 . METHOD_3 ( VAR_5 . METHOD_4 ( ) ) ) )  assertEquals ( VAR_7 , VAR_4 . METHOD_3 ( VAR_5 . METHOD_4 ( ) ) ) (  METHOD_5 ( VAR_1 ) )  METHOD_5 ( VAR_1 ) (  METHOD_6 ( ) )  METHOD_6 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME output ) NAME output ( INIT = java.io.File . METHOD_1 ( STRING_1 , STRING_2 ) ) INIT = java.io.File . METHOD_1 ( STRING_1 , STRING_2 ) ) VAR VAR (  output . METHOD_2 ( ) )  output . METHOD_2 ( ) (  VAR_1 [ VAR_2 ] = output )  VAR_1 [ VAR_2 ] = output (  TYPE_1 . METHOD_3 ( ) . METHOD_4 ( input , output , VAR_3 , VAR_4 , false , VAR_5 ) )  TYPE_1 . METHOD_3 ( ) . METHOD_4 ( input , output , VAR_3 , VAR_4 , false , VAR_5 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME VAR_6 ) NAME VAR_6 ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE int[] ) TYPE int[] ( NAME VAR_1 ) NAME VAR_1 ( INIT = new int [ ] { VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 , VAR_8 , VAR_9 } ) INIT = new int [ ] { VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 , VAR_8 , VAR_9 } ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < ( VAR_1 . length ) ) COND i < ( VAR_1 . length ) ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  new TYPE_1 ( ) . METHOD_2 ( VAR_1 [ i ] , STRING_1 ) )  new TYPE_1 ( ) . METHOD_2 ( VAR_1 [ i ] , STRING_1 ) (  fail ( ( STRING_2 + ( VAR_1 [ i ] ) ) ) )  fail ( ( STRING_2 + ( VAR_1 [ i ] ) ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) FOR FOR ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME pos ) NAME pos ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = VAR_2 . METHOD_2 ( pos ) ) INIT = VAR_2 . METHOD_2 ( pos ) ) VAR VAR ( IF IF ( COND ( VAR_3 ) || ( VAR_4 ) ) COND ( VAR_3 ) || ( VAR_4 ) ( THEN THEN (  android.util.Log.v ( TYPE_2 . TAG , ( ( ( ( ( ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + ( i + 1 ) ) + STRING_3 ) + ( VAR_2 . size ( ) ) ) + STRING_4 ) + pos ) + STRING_5 ) ) )  android.util.Log.v ( TYPE_2 . TAG , ( ( ( ( ( ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + ( i + 1 ) ) + STRING_3 ) + ( VAR_2 . size ( ) ) ) + STRING_4 ) + pos ) + STRING_5 ) ) ) THEN THEN ) IF IF (  VAR_2 . METHOD_3 ( ( i + 1 ) , VAR_1 ) )  VAR_2 . METHOD_3 ( ( i + 1 ) , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME parent ) NAME parent ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME state ) NAME state ( INIT = ( ( TYPE_4 ) ( VAR_4 ) ) ) INIT = ( ( TYPE_4 ) ( VAR_4 ) ) ) VAR VAR ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_3 ) NAME METHOD_3 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME n ) NAME n ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  state . METHOD_4 ( ) )  state . METHOD_4 ( ) (  state . METHOD_5 ( n ) )  state . METHOD_5 ( n ) ) BLOCK BLOCK ) METHOD METHOD (  VAR_2 . METHOD_2 ( STRING_1 , new TYPE_5 ( ) { public void METHOD_3 ( TYPE_2 n ) { state . METHOD_4 ( ) ; state . METHOD_5 ( n ) ; } } ) )  VAR_2 . METHOD_2 ( STRING_1 , new TYPE_5 ( ) { public void METHOD_3 ( TYPE_2 n ) { state . METHOD_4 ( ) ; state . METHOD_5 ( n ) ; } } ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME uid ) NAME uid ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_6 ) NAME VAR_6 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_7 ) NAME VAR_7 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_8 ) NAME VAR_8 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( TYPE_1 . METHOD_2 ( VAR_4 ) ) ) COND ! ( TYPE_1 . METHOD_2 ( VAR_4 ) ) ( THEN THEN (  TYPE_2 . e ( TYPE_1 . TAG , ( STRING_1 + VAR_4 ) ) )  TYPE_2 . e ( TYPE_1 . TAG , ( STRING_1 + VAR_4 ) ) (  return - 1 ; )  return - 1 ; ) THEN THEN ) IF IF (  return VAR_9 . METHOD_1 ( VAR_1 , uid , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 , VAR_8 ) ; )  return VAR_9 . METHOD_1 ( VAR_1 , uid , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 , VAR_8 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . assertEquals ( java.lang.Float.floatToRawIntBits ( ( - FLOAT_1 ) ) , - INT_1 ) )  TYPE_1 . assertEquals ( java.lang.Float.floatToRawIntBits ( ( - FLOAT_1 ) ) , - INT_1 ) (  TYPE_1 . assertEquals ( java.lang.Float.floatToRawIntBits ( FLOAT_2 ) , 0 ) )  TYPE_1 . assertEquals ( java.lang.Float.floatToRawIntBits ( FLOAT_2 ) , 0 ) (  TYPE_1 . assertEquals ( java.lang.Float.floatToRawIntBits ( FLOAT_1 ) , INT_2 ) )  TYPE_1 . assertEquals ( java.lang.Float.floatToRawIntBits ( FLOAT_1 ) , INT_2 ) (  TYPE_1 . assertEquals ( java.lang.Float.floatToRawIntBits ( VAR_1 ) , INT_3 ) )  TYPE_1 . assertEquals ( java.lang.Float.floatToRawIntBits ( VAR_1 ) , INT_3 ) (  TYPE_1 . assertEquals ( java.lang.Float.floatToRawIntBits ( VAR_2 ) , INT_4 ) )  TYPE_1 . assertEquals ( java.lang.Float.floatToRawIntBits ( VAR_2 ) , INT_4 ) (  TYPE_1 . assertEquals ( java.lang.Float.floatToRawIntBits ( VAR_3 ) , - INT_5 ) )  TYPE_1 . assertEquals ( java.lang.Float.floatToRawIntBits ( VAR_3 ) , - INT_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME source ) NAME source ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<TYPE_2> ) TYPE java.util.ArrayList<TYPE_2> ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . get ( VAR_1 ) ) INIT = VAR_3 . get ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_2 == null ) COND VAR_2 == null ( THEN THEN (  VAR_2 = new java.util.ArrayList < TYPE_2 > ( ) )  VAR_2 = new java.util.ArrayList < TYPE_2 > ( ) (  VAR_3 . METHOD_2 ( VAR_1 , VAR_2 ) )  VAR_3 . METHOD_2 ( VAR_1 , VAR_2 ) ) THEN THEN ) IF IF (  VAR_2 . METHOD_1 ( source ) )  VAR_2 . METHOD_1 ( source ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_6 ) NAME VAR_6 ) VAR VAR ( IF IF ( COND VAR_3 != null ) COND VAR_3 != null ( THEN THEN (  VAR_3 . METHOD_2 ( ) )  VAR_3 . METHOD_2 ( ) (  VAR_5 = VAR_7 )  VAR_5 = VAR_7 ) THEN THEN ( ELSE ELSE (  VAR_5 = 0 )  VAR_5 = 0 ) ELSE ELSE ) IF IF ( IF IF ( COND VAR_4 != null ) COND VAR_4 != null ( THEN THEN (  VAR_4 . METHOD_2 ( ) )  VAR_4 . METHOD_2 ( ) (  VAR_6 = VAR_8 )  VAR_6 = VAR_8 ) THEN THEN ( ELSE ELSE (  VAR_6 = 0 )  VAR_6 = 0 ) ELSE ELSE ) IF IF (  TYPE_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_5 , VAR_6 , VAR_9 , VAR_10 ) ) )  TYPE_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_5 , VAR_6 , VAR_9 , VAR_10 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ! ( TYPE_1 . METHOD_2 ( ) ) ) COND ! ( TYPE_1 . METHOD_2 ( ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( IF IF ( COND METHOD_3 ( ) ) COND METHOD_3 ( ) ( THEN THEN (  android.util.Log.d ( VAR_1 . TAG , STRING_1 ) )  android.util.Log.d ( VAR_1 . TAG , STRING_1 ) (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.lang.String [ ] { STRING_2 , STRING_3 , STRING_4 , STRING_5 , STRING_6 , STRING_7 , STRING_8 , STRING_9 , STRING_10 , STRING_11 , STRING_12 , STRING_13 , STRING_14 , STRING_15 , STRING_16 , STRING_17 , STRING_18 , STRING_19 , STRING_20 } ) INIT = new java.lang.String [ ] { STRING_2 , STRING_3 , STRING_4 , STRING_5 , STRING_6 , STRING_7 , STRING_8 , STRING_9 , STRING_10 , STRING_11 , STRING_12 , STRING_13 , STRING_14 , STRING_15 , STRING_16 , STRING_17 , STRING_18 , STRING_19 , STRING_20 } ) VAR VAR (  METHOD_4 ( VAR_2 ) )  METHOD_4 ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) (  TYPE_1 . d ( VAR_1 , ( ( ( STRING_1 + ( VAR_2 ) ) + STRING_2 ) + ( VAR_3 ) ) ) )  TYPE_1 . d ( VAR_1 , ( ( ( STRING_1 + ( VAR_2 ) ) + STRING_2 ) + ( VAR_3 ) ) ) (  METHOD_2 ( ) )  METHOD_2 ( ) (  VAR_4 . METHOD_3 ( VAR_3 ) . METHOD_4 ( null ) )  VAR_4 . METHOD_3 ( VAR_3 ) . METHOD_4 ( null ) ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  METHOD_5 ( ) )  METHOD_5 ( ) (  METHOD_6 ( ) )  METHOD_6 ( ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME project ) NAME project ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( project ) ) INIT = TYPE_2 . METHOD_2 ( project ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( IN VAR_1 . METHOD_3 ( ) ) IN VAR_1 . METHOD_3 ( ) ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_4 . METHOD_2 ( VAR_2 ) ) INIT = TYPE_4 . METHOD_2 ( VAR_2 ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_4 ) NAME VAR_4 ( IN VAR_3 . METHOD_4 ( ) ) IN VAR_3 . METHOD_4 ( ) ( BLOCK BLOCK ( IF IF ( COND STRING_1 . equals ( VAR_4 . METHOD_5 ( ) . METHOD_6 ( ) ) ) COND STRING_1 . equals ( VAR_4 . METHOD_5 ( ) . METHOD_6 ( ) ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME path ) NAME path ) VAR VAR ( VAR VAR ( TYPE java.util.HashMap<java.lang.String,java.lang.Integer> ) TYPE java.util.HashMap<java.lang.String,java.lang.Integer> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME request ) NAME request ( INIT = new TYPE_1 ( path , VAR_2 , 0 , VAR_3 , 0 , 0 ) ) INIT = new TYPE_1 ( path , VAR_2 , 0 , VAR_3 , 0 , 0 ) ) VAR VAR (  request . METHOD_2 ( VAR_4 ) )  request . METHOD_2 ( VAR_4 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_5 ) NAME VAR_5 ( INIT = new TYPE_2 ( VAR_6 . METHOD_3 ( ) , path , VAR_1 ) ) INIT = new TYPE_2 ( VAR_6 . METHOD_3 ( ) , path , VAR_1 ) ) VAR VAR (  VAR_5 . METHOD_4 ( request . METHOD_5 ( ) ) )  VAR_5 . METHOD_4 ( request . METHOD_5 ( ) ) (  VAR_5 . METHOD_6 ( ) )  VAR_5 . METHOD_6 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK (  android.util.Log.w ( VAR_7 . TAG , STRING_1 ) )  android.util.Log.w ( VAR_7 . TAG , STRING_1 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN byte ) RETURN byte ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  android.util.Log.w ( VAR_2 . TAG , STRING_1 ) )  android.util.Log.w ( VAR_2 . TAG , STRING_1 ) (  return VAR_3 ; )  return VAR_3 ; ) THEN THEN ) IF IF ( SWITCH SWITCH ( NAME VAR_1 . METHOD_2 ( ) ) NAME VAR_1 . METHOD_2 ( ) ( CASE VAR_4 ( BLOCK BLOCK (  return VAR_6 ; )  return VAR_6 ; ) BLOCK BLOCK ) CASE VAR_4 ( CASE VAR_5 ( BLOCK BLOCK (  return VAR_6 ; )  return VAR_6 ; ) BLOCK BLOCK ) CASE VAR_5 ( CASE VAR_7 ( BLOCK BLOCK (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) CASE VAR_7 ( CASE VAR_8 ( BLOCK BLOCK (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) CASE VAR_8 ( CASE VAR_9 ( BLOCK BLOCK (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) CASE VAR_9 ( CASE VAR_10 ( BLOCK BLOCK (  return VAR_11 ; )  return VAR_11 ; ) BLOCK BLOCK ) CASE VAR_10 ( CASE VAR_12 ( BLOCK BLOCK (  return VAR_15 ; )  return VAR_15 ; ) BLOCK BLOCK ) CASE VAR_12 ( CASE VAR_13 ( BLOCK BLOCK (  return VAR_15 ; )  return VAR_15 ; ) BLOCK BLOCK ) CASE VAR_13 ( CASE VAR_14 ( BLOCK BLOCK (  return VAR_15 ; )  return VAR_15 ; ) BLOCK BLOCK ) CASE VAR_14 ( CASE VAR_16 ( BLOCK BLOCK (  return VAR_18 ; )  return VAR_18 ; ) BLOCK BLOCK ) CASE VAR_16 ( CASE VAR_17 ( BLOCK BLOCK (  return VAR_18 ; )  return VAR_18 ; ) BLOCK BLOCK ) CASE VAR_17 ( CASE VAR_19 ( BLOCK BLOCK (  return VAR_20 ; )  return VAR_20 ; ) BLOCK BLOCK ) CASE VAR_19 ( DEFAULT DEFAULT ( BLOCK BLOCK (  return VAR_20 ; )  return VAR_20 ; ) BLOCK BLOCK ) DEFAULT DEFAULT ) SWITCH SWITCH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  this )  this ( BLOCK BLOCK ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( TYPE_1 . METHOD_2 ( ) ) + INT_1 ) INIT = ( TYPE_1 . METHOD_2 ( ) ) + INT_1 ) VAR VAR ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  android.util.Log.v ( VAR_3 . TAG , ( STRING_1 + VAR_1 ) ) )  android.util.Log.v ( VAR_3 . TAG , ( STRING_1 + VAR_1 ) ) ) THEN THEN ) IF IF ( IF IF ( COND ( ( VAR_4 ) == 0 ) || ( VAR_1 < ( VAR_4 ) ) ) COND ( ( VAR_4 ) == 0 ) || ( VAR_1 < ( VAR_4 ) ) ( THEN THEN (  VAR_4 = VAR_1 )  VAR_4 = VAR_1 ) THEN THEN ) IF IF (  METHOD_3 ( ) )  METHOD_3 ( ) ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( VAR_2 class . getName ( ) ) ) INIT = new TYPE_1 ( VAR_2 class . getName ( ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  VAR_1 . METHOD_2 ( new TYPE_3 ( VAR_3 , null ) , 0 ) )  VAR_1 . METHOD_2 ( new TYPE_3 ( VAR_3 , null ) , 0 ) (  TYPE_4 . METHOD_3 ( VAR_3 . version ) . METHOD_4 ( VAR_4 ) )  TYPE_4 . METHOD_3 ( VAR_3 . version ) . METHOD_4 ( VAR_4 ) (  TYPE_4 . METHOD_3 ( VAR_5 ) . METHOD_4 ( 0 ) )  TYPE_4 . METHOD_3 ( VAR_5 ) . METHOD_4 ( 0 ) (  TYPE_4 . METHOD_3 ( VAR_6 ) . METHOD_4 ( 1 ) )  TYPE_4 . METHOD_3 ( VAR_6 ) . METHOD_4 ( 1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = STRING_1 + ( ( ( ( ( ( STRING_2 + STRING_3 ) + STRING_4 ) + STRING_5 ) + STRING_6 ) + STRING_7 ) + STRING_8 ) ) INIT = STRING_1 + ( ( ( ( ( ( STRING_2 + STRING_3 ) + STRING_4 ) + STRING_5 ) + STRING_6 ) + STRING_7 ) + STRING_8 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_2 ( VAR_1 ) ) INIT = TYPE_2 . METHOD_2 ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_3 . METHOD_3 ( VAR_2 , true ) ) INIT = TYPE_3 . METHOD_3 ( VAR_2 , true ) ) VAR VAR (  assertEquals ( ( STRING_1 + ( ( ( ( ( ( STRING_2 + STRING_3 ) + STRING_4 ) + STRING_5 ) + STRING_6 ) + STRING_9 ) + STRING_8 ) ) , VAR_3 ) )  assertEquals ( ( STRING_1 + ( ( ( ( ( ( STRING_2 + STRING_3 ) + STRING_4 ) + STRING_5 ) + STRING_6 ) + STRING_9 ) + STRING_8 ) ) , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  VAR_1 . METHOD_3 ( VAR_1 . METHOD_4 ( VAR_2 , VAR_3 ) ) )  VAR_1 . METHOD_3 ( VAR_1 . METHOD_4 ( VAR_2 , VAR_3 ) ) (  org.mockito.Mockito.verify ( VAR_4 , TYPE_1 . METHOD_5 ( 1 ) ) . METHOD_6 ( TYPE_1 . METHOD_7 ( ) , TYPE_1 . METHOD_8 ( ) , TYPE_1 . METHOD_8 ( ) ) )  org.mockito.Mockito.verify ( VAR_4 , TYPE_1 . METHOD_5 ( 1 ) ) . METHOD_6 ( TYPE_1 . METHOD_7 ( ) , TYPE_1 . METHOD_8 ( ) , TYPE_1 . METHOD_8 ( ) ) (  org.mockito.Mockito.verify ( VAR_5 , TYPE_1 . METHOD_5 ( 2 ) ) . METHOD_9 ( 1 ) )  org.mockito.Mockito.verify ( VAR_5 , TYPE_1 . METHOD_5 ( 2 ) ) . METHOD_9 ( 1 ) (  org.mockito.Mockito.verify ( VAR_5 , TYPE_1 . METHOD_5 ( 2 ) ) . METHOD_10 ( FLOAT_1 ) )  org.mockito.Mockito.verify ( VAR_5 , TYPE_1 . METHOD_5 ( 2 ) ) . METHOD_10 ( FLOAT_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  VAR_3 )  VAR_3 ( BLOCK BLOCK ( IF IF ( COND ( VAR_4 ) != null ) COND ( VAR_4 ) != null ( THEN THEN (  android.util.Log.w ( VAR_5 . TAG , STRING_1 ) )  android.util.Log.w ( VAR_5 . TAG , STRING_1 ) (  return false ; )  return false ; ) THEN THEN ) IF IF (  VAR_6 = VAR_2 )  VAR_6 = VAR_2 (  VAR_4 = VAR_1 )  VAR_4 = VAR_1 ( IF IF ( COND ! ( METHOD_2 ( VAR_7 ) ) ) COND ! ( METHOD_2 ( VAR_7 ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  METHOD_3 ( ) )  METHOD_3 ( ) (  return true ; )  return true ; ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME packageName ) NAME packageName ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME result ) NAME result ( INIT = device . METHOD_2 ( packageName ) ) INIT = device . METHOD_2 ( packageName ) ) VAR VAR ( IF IF ( COND result != null ) COND result != null ( THEN THEN (  TYPE_1 . log ( VAR_1 , ( ( ( STRING_1 + packageName ) + STRING_2 ) + result ) ) )  TYPE_1 . log ( VAR_1 , ( ( ( STRING_1 + packageName ) + STRING_2 ) + result ) ) (  return false ; )  return false ; ) THEN THEN ) IF IF (  return true ; )  return true ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME e ) NAME e ( BLOCK BLOCK (  TYPE_1 . log ( VAR_1 , ( STRING_3 + packageName ) , e ) )  TYPE_1 . log ( VAR_1 , ( STRING_3 + packageName ) , e ) (  return false ; )  return false ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( PARAMS PARAMS ( VAR VAR ( TYPE com.android.jack.ir.ast.JMethod ) TYPE com.android.jack.ir.ast.JMethod ( NAME method ) NAME method ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( ( method . METHOD_1 ( ) . METHOD_2 ( ) ) || ( method . METHOD_3 ( ) ) ) || ( method . METHOD_4 ( ) ) ) || ( ! ( VAR_1 . METHOD_5 ( VAR_2 class , method ) ) ) ) COND ( ( ( method . METHOD_1 ( ) . METHOD_2 ( ) ) || ( method . METHOD_3 ( ) ) ) || ( method . METHOD_4 ( ) ) ) || ( ! ( VAR_1 . METHOD_5 ( VAR_2 class , method ) ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME request ) NAME request ( INIT = new TYPE_1 ( method ) ) INIT = new TYPE_1 ( method ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_2 ( request ) ) INIT = new TYPE_2 ( request ) ) VAR VAR (  VAR_3 . METHOD_5 ( method ) )  VAR_3 . METHOD_5 ( method ) (  request . METHOD_6 ( ) )  request . METHOD_6 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) ( IF IF ( COND ( VAR_4 . METHOD_3 ( ) . length ( ) ) != 0 ) COND ( VAR_4 . METHOD_3 ( ) . length ( ) ) != 0 ( THEN THEN ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_5 ) NAME VAR_5 ( INIT = new TYPE_1 ( null , VAR_4 . METHOD_4 ( ) ) ) INIT = new TYPE_1 ( null , VAR_4 . METHOD_4 ( ) ) ) VAR VAR (  return VAR_5 ; )  return VAR_5 ; ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME m ) NAME m ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME v ) NAME v ) VAR VAR ( VAR VAR ( TYPE short ) TYPE short ( NAME value ) NAME value ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = false ) INIT = false ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( IF IF ( COND v == null ) COND v == null ( THEN THEN (  m . METHOD_2 ( value ) )  m . METHOD_2 ( value ) ) THEN THEN ( ELSE ELSE (  m . METHOD_2 ( v , value ) )  m . METHOD_2 ( v , value ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_2 = true )  VAR_2 = true ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  TYPE_4 . assertEquals ( VAR_2 , VAR_1 ) )  TYPE_4 . assertEquals ( VAR_2 , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private synchronized ) MODIFIER private synchronized ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME packageName ) NAME packageName ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME info ) NAME info ( INIT = new TYPE_2 ( TYPE_1 . METHOD_3 ( VAR_1 ) , VAR_2 , VAR_3 , METHOD_4 ( VAR_1 . METHOD_5 ( ) ) , METHOD_6 ( packageName ) , VAR_1 . METHOD_2 ( ) , METHOD_7 ( packageName ) ) ) INIT = new TYPE_2 ( TYPE_1 . METHOD_3 ( VAR_1 ) , VAR_2 , VAR_3 , METHOD_4 ( VAR_1 . METHOD_5 ( ) ) , METHOD_6 ( packageName ) , VAR_1 . METHOD_2 ( ) , METHOD_7 ( packageName ) ) ) VAR VAR (  METHOD_8 ( info ) )  METHOD_8 ( info ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( ) )  VAR_1 . METHOD_2 ( ) ( IF IF ( COND ( ( null != ( VAR_2 ) ) && ( ( VAR_2 . METHOD_3 ( ) ) > 0 ) ) && ( ( VAR_3 ) == ( VAR_4 ) ) ) COND ( ( null != ( VAR_2 ) ) && ( ( VAR_2 . METHOD_3 ( ) ) > 0 ) ) && ( ( VAR_3 ) == ( VAR_4 ) ) ( THEN THEN (  VAR_1 . METHOD_4 ( 0 , VAR_5 , 0 , VAR_6 ) . METHOD_5 ( VAR_7 ) )  VAR_1 . METHOD_4 ( 0 , VAR_5 , 0 , VAR_6 ) . METHOD_5 ( VAR_7 ) ) THEN THEN ) IF IF (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME id ) NAME id ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND id . METHOD_2 ( TYPE_1 ) ) COND id . METHOD_2 ( TYPE_1 ) ( THEN THEN (  id = id . METHOD_3 ( TYPE_1 . length ( ) ) )  id = id . METHOD_3 ( TYPE_1 . length ( ) ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND id . METHOD_2 ( TYPE_2 ) ) COND id . METHOD_2 ( TYPE_2 ) ( THEN THEN (  id = id . METHOD_3 ( TYPE_2 . length ( ) ) )  id = id . METHOD_3 ( TYPE_2 . length ( ) ) ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF (  return id ; )  return id ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( STRING_1 ) )  TYPE_1 . METHOD_2 ( STRING_1 ) (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) ( IF IF ( COND ( METHOD_3 ( ) ) != null ) COND ( METHOD_3 ( ) ) != null ( THEN THEN (  VAR_1 . METHOD_4 ( METHOD_3 ( ) ) )  VAR_1 . METHOD_4 ( METHOD_3 ( ) ) (  TYPE_2 . get ( METHOD_3 ( ) ) . METHOD_5 ( VAR_2 ) )  TYPE_2 . get ( METHOD_3 ( ) ) . METHOD_5 ( VAR_2 ) (  METHOD_3 ( ) . METHOD_6 ( VAR_3 ) )  METHOD_3 ( ) . METHOD_6 ( VAR_3 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME version ) NAME version ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_5 ) == false ) COND ( VAR_5 ) == false ( THEN THEN (  throw new java.lang.RuntimeException ( ( ( VAR_6 . TAG ) + STRING_1 ) ) ; )  throw new java.lang.RuntimeException ( ( ( VAR_6 . TAG ) + STRING_1 ) ) ; ) THEN THEN ) IF IF (  return METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , version , VAR_4 ) ; )  return METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , version , VAR_4 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME equals ) NAME equals ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME obj ) NAME obj ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND obj == ( this ) ) COND obj == ( this ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ( ELSE ELSE ( IF IF ( COND obj instanceof TYPE_1 ) COND obj instanceof TYPE_1 ( THEN THEN ( VAR VAR ( TYPE TYPE_1<?> ) TYPE TYPE_1<?> ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_1 < ? > ) ( obj ) ) ) INIT = ( ( TYPE_1 < ? > ) ( obj ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2<java.lang.Object> ) TYPE TYPE_2<java.lang.Object> ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_2 < java.lang.Object > ) ( this . VAR_2 ) ) ) INIT = ( ( TYPE_2 < java.lang.Object > ) ( this . VAR_2 ) ) ) VAR VAR (  return ( VAR_2 . equals ( VAR_3 ) ) && ( VAR_2 . METHOD_1 ( this . VAR_4 , VAR_5 ) ) ; )  return ( VAR_2 . equals ( VAR_3 ) ) && ( VAR_2 . METHOD_1 ( this . VAR_4 , VAR_5 ) ) ; ) THEN THEN ( ELSE ELSE (  return false ; )  return false ; ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<?extendsTYPE_2> ) TYPE java.util.List<?extendsTYPE_2> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.Set<java.lang.String> ) TYPE java.util.Set<java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return TYPE_3 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , TYPE_4 . METHOD_2 ( VAR_4 ) ) ; )  return TYPE_3 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , TYPE_4 . METHOD_2 ( VAR_4 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME subId ) NAME subId ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( TYPE_2 . METHOD_2 ( VAR_2 , VAR_1 , STRING_1 ) ) ) COND ! ( TYPE_2 . METHOD_2 ( VAR_2 , VAR_1 , STRING_1 ) ) ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_3 ( subId ) ) INIT = METHOD_3 ( subId ) ) VAR VAR ( IF IF ( COND VAR_3 == null ) COND VAR_3 == null ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF (  return VAR_3 . METHOD_4 ( ) ; )  return VAR_3 . METHOD_4 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public synchronized ) MODIFIER public synchronized ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME netId ) NAME netId ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME error ) NAME error ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME uid ) NAME uid ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( STRING_1 , netId , error , VAR_1 ) )  TYPE_1 . METHOD_2 ( STRING_1 , netId , error , VAR_1 ) ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_2 . METHOD_3 ( ) ) INIT = TYPE_2 . METHOD_3 ( ) ) VAR VAR (  METHOD_4 ( VAR_4 , netId ) . METHOD_5 ( error , VAR_1 , VAR_2 ) )  METHOD_4 ( VAR_4 , netId ) . METHOD_5 ( error , VAR_1 , VAR_2 ) ( IF IF ( COND ( VAR_5 ) != null ) COND ( VAR_5 ) != null ( THEN THEN (  VAR_5 . METHOD_1 ( VAR_2 , VAR_3 , VAR_4 , uid ) )  VAR_5 . METHOD_1 ( VAR_2 , VAR_3 , VAR_4 , uid ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( ) )  VAR_1 . METHOD_2 ( ) (  TYPE_1 . METHOD_3 ( ) )  TYPE_1 . METHOD_3 ( ) (  TYPE_1 . METHOD_4 ( ) )  TYPE_1 . METHOD_4 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Throwable ) TYPE java.lang.Throwable ( NAME e ) NAME e ( BLOCK BLOCK (  throw TYPE_1 . METHOD_5 ( e ) ; )  throw TYPE_1 . METHOD_5 ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ( FINALLY FINALLY (  VAR_2 = true )  VAR_2 = true (  VAR_1 . METHOD_6 ( ) )  VAR_1 . METHOD_6 ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_3 . METHOD_2 ( new TYPE_4 ( new TYPE_5 ( STRING_1 , 16 ) , new TYPE_5 ( STRING_2 , 16 ) , new TYPE_5 ( STRING_3 , 16 ) ) ) ) INIT = TYPE_3 . METHOD_2 ( new TYPE_4 ( new TYPE_5 ( STRING_1 , 16 ) , new TYPE_5 ( STRING_2 , 16 ) , new TYPE_5 ( STRING_3 , 16 ) ) ) ) VAR VAR (  return new TYPE_1 ( VAR_1 , VAR_1 . METHOD_3 ( TYPE_6 . METHOD_4 ( STRING_4 ) ) , new TYPE_5 ( STRING_5 , 16 ) , new TYPE_5 ( STRING_6 , 16 ) ) ; )  return new TYPE_1 ( VAR_1 , VAR_1 . METHOD_3 ( TYPE_6 . METHOD_4 ( STRING_4 ) ) , new TYPE_5 ( STRING_5 , 16 ) , new TYPE_5 ( STRING_6 , 16 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE android.os.Message ) TYPE android.os.Message ( NAME msg ) NAME msg ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( super . METHOD_1 ( msg ) ) == ( VAR_1 ) ) COND ( super . METHOD_1 ( msg ) ) == ( VAR_1 ) ( THEN THEN (  return VAR_1 ; )  return VAR_1 ; ) THEN THEN ) IF IF ( SWITCH SWITCH ( NAME VAR_2 ) NAME VAR_2 ( CASE VAR_3 ( BLOCK BLOCK (  METHOD_2 ( VAR_4 ) )  METHOD_2 ( VAR_4 ) (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) CASE VAR_3 ( CASE VAR_5 ( BLOCK BLOCK (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) CASE VAR_5 ( CASE VAR_6 ( BLOCK BLOCK (  METHOD_2 ( VAR_7 , VAR_8 ) )  METHOD_2 ( VAR_7 , VAR_8 ) (  VAR_9 = false )  VAR_9 = false (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) CASE VAR_6 ( CASE VAR_10 ( BLOCK BLOCK (  METHOD_3 ( ) )  METHOD_3 ( ) (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) CASE VAR_10 ( CASE VAR_11 ( BLOCK BLOCK (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) CASE VAR_11 ( CASE VAR_12 ( BLOCK BLOCK (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) CASE VAR_12 ( DEFAULT DEFAULT ( BLOCK BLOCK (  return VAR_13 ; )  return VAR_13 ; ) BLOCK BLOCK ) DEFAULT DEFAULT ) SWITCH SWITCH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( 1 , 1 , VAR_2 , 1 ) ) INIT = new TYPE_1 ( 1 , 1 , VAR_2 , 1 ) ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR (  VAR_3 [ ( ( VAR_3 . length ) - 6 ) ] = CHAR_1 )  VAR_3 [ ( ( VAR_3 . length ) - 6 ) ] = CHAR_1 ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_3 . METHOD_3 ( VAR_3 ) ) INIT = TYPE_3 . METHOD_3 ( VAR_3 ) ) VAR VAR (  assertEquals ( VAR_5 , VAR_6 . METHOD_4 ( VAR_4 . METHOD_5 ( ) ) ) )  assertEquals ( VAR_5 , VAR_6 . METHOD_4 ( VAR_4 . METHOD_5 ( ) ) ) (  METHOD_6 ( ) )  METHOD_6 ( ) (  METHOD_7 ( ) )  METHOD_7 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return new TYPE_2 ( METHOD_3 ( ) , METHOD_4 ( ) , VAR_1 , METHOD_5 ( ) , METHOD_6 ( ) , METHOD_7 ( ) , a , b , c ) ; )  return new TYPE_2 ( METHOD_3 ( ) , METHOD_4 ( ) , VAR_1 , METHOD_5 ( ) , METHOD_6 ( ) , METHOD_7 ( ) , a , b , c ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME callback ) NAME callback ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND callback == null ) COND callback == null ( THEN THEN (  throw new java.lang.IllegalArgumentException ( STRING_1 ) ; )  throw new java.lang.IllegalArgumentException ( STRING_1 ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_2 ( callback ) ) INIT = VAR_2 . METHOD_2 ( callback ) ) VAR VAR ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_3 = VAR_4 . METHOD_3 ( ) )  VAR_3 = VAR_4 . METHOD_3 ( ) (  VAR_3 . METHOD_1 ( VAR_1 ) )  VAR_3 . METHOD_1 ( VAR_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME e ) NAME e ( BLOCK BLOCK (  android.util.Log.e ( VAR_5 . TAG , STRING_2 , e ) )  android.util.Log.e ( VAR_5 . TAG , STRING_2 , e ) (  throw new TYPE_4 ( STRING_3 ) ; )  throw new TYPE_4 ( STRING_3 ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME address ) NAME address ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = mContext . METHOD_2 ( VAR_3 , VAR_4 ) ) INIT = mContext . METHOD_2 ( VAR_3 , VAR_4 ) ) VAR VAR ( IF IF ( COND ! ( VAR_2 . METHOD_3 ( address ) ) ) COND ! ( VAR_2 . METHOD_3 ( address ) ) ( THEN THEN (  return VAR_1 ; )  return VAR_1 ; ) THEN THEN ) IF IF ( IF IF ( COND VAR_2 . METHOD_4 ( address , false ) ) COND VAR_2 . METHOD_4 ( address , false ) ( THEN THEN (  VAR_1 &= ~ ( VAR_5 ) )  VAR_1 &= ~ ( VAR_5 ) ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME context ) NAME context ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return new TYPE_1 ( new TYPE_3 ( context ) , new TYPE_4 ( context ) , new TYPE_5 ( context ) , new TYPE_3 ( context ) , new TYPE_4 ( context ) , new TYPE_3 ( context ) , new TYPE_3 ( context ) , new TYPE_3 ( context ) ) ; )  return new TYPE_1 ( new TYPE_3 ( context ) , new TYPE_4 ( context ) , new TYPE_5 ( context ) , new TYPE_3 ( context ) , new TYPE_4 ( context ) , new TYPE_3 ( context ) , new TYPE_3 ( context ) , new TYPE_3 ( context ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME device ) NAME device ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_3 . METHOD_2 ( device ) ) INIT = TYPE_3 . METHOD_2 ( device ) ) VAR VAR ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_4[] ) TYPE TYPE_4[] ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_3 . METHOD_3 ( device ) ) INIT = TYPE_3 . METHOD_3 ( device ) ) VAR VAR (  TYPE_5 . METHOD_4 ( ) . METHOD_5 ( device , VAR_2 ) )  TYPE_5 . METHOD_4 ( ) . METHOD_5 ( device , VAR_2 ) ( IF IF ( COND ( VAR_3 ) >= 3 ) COND ( VAR_3 ) >= 3 ( THEN THEN (  TYPE_6 . METHOD_6 ( this , device ) )  TYPE_6 . METHOD_6 ( this , device ) (  METHOD_7 ( device ) )  METHOD_7 ( device ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME uri ) NAME uri ) VAR VAR ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_5 . size ( ) ) > 0 ) COND ( VAR_5 . size ( ) ) > 0 ( THEN THEN (  return METHOD_2 ( VAR_5 . get ( 0 ) ) ; )  return METHOD_2 ( VAR_5 . get ( 0 ) ) ; ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_1 ) ( TYPE_1 . METHOD_2 ( ) ) ) ) INIT = ( ( TYPE_1 ) ( TYPE_1 . METHOD_2 ( ) ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_2 ) ( VAR_1 . METHOD_3 ( ) ) ) ) INIT = ( ( TYPE_2 ) ( VAR_1 . METHOD_3 ( ) ) ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_2 . METHOD_4 ( ) ) INIT = VAR_2 . METHOD_4 ( ) ) VAR VAR (  TYPE_3 . METHOD_5 ( VAR_4 , VAR_3 ) )  TYPE_3 . METHOD_5 ( VAR_4 , VAR_3 ) (  METHOD_6 ( VAR_3 , VAR_2 . METHOD_4 ( ) ) )  METHOD_6 ( VAR_3 , VAR_2 . METHOD_4 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME toString ) NAME toString ( BLOCK BLOCK (  return ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( STRING_1 + ( VAR_1 ) ) + STRING_2 ) + ( VAR_2 ) ) + STRING_3 ) + ( VAR_3 ) ) + STRING_4 ) + ( VAR_4 ) ) + STRING_5 ) + ( VAR_5 ) ) + STRING_6 ) + ( VAR_6 . toString ( ) ) ) + STRING_7 ) + ( VAR_7 ) ) + STRING_8 ) + ( TYPE_1 . toString ( VAR_8 ) ) ) + STRING_9 ; )  return ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( STRING_1 + ( VAR_1 ) ) + STRING_2 ) + ( VAR_2 ) ) + STRING_3 ) + ( VAR_3 ) ) + STRING_4 ) + ( VAR_4 ) ) + STRING_5 ) + ( VAR_5 ) ) + STRING_6 ) + ( VAR_6 . toString ( ) ) ) + STRING_7 ) + ( VAR_7 ) ) + STRING_8 ) + ( TYPE_1 . toString ( VAR_8 ) ) ) + STRING_9 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int[] ) TYPE int[] ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  TYPE_1 . log ( ( STRING_1 + ( ( VAR_1 [ 0 ] ) != 0 ? STRING_2 : STRING_3 ) ) ) )  TYPE_1 . log ( ( STRING_1 + ( ( VAR_1 [ 0 ] ) != 0 ? STRING_2 : STRING_3 ) ) ) ) THEN THEN ) IF IF (  this . VAR_3 . METHOD_2 ( ( ( VAR_1 [ 0 ] ) != 0 ) ) )  this . VAR_3 . METHOD_2 ( ( ( VAR_1 [ 0 ] ) != 0 ) ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME context ) NAME context ( INIT = this ) INIT = this ) VAR VAR ( IF IF ( COND ( VAR_1 [ 0 ] ) == 1 ) COND ( VAR_1 [ 0 ] ) == 1 ( THEN THEN (  TYPE_1 . METHOD_3 ( context , true ) )  TYPE_1 . METHOD_3 ( context , true ) ) THEN THEN ( ELSE ELSE (  TYPE_1 . METHOD_3 ( context , false ) )  TYPE_1 . METHOD_3 ( context , false ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME telephony ) NAME telephony ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( IF IF ( COND telephony != null ) COND telephony != null ( THEN THEN (  return telephony . METHOD_1 ( VAR_1 ) ; )  return telephony . METHOD_1 ( VAR_1 ) ; ) THEN THEN ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME ex ) NAME ex ( BLOCK BLOCK (  TYPE_2 . e ( VAR_2 . TAG , STRING_1 , ex ) )  TYPE_2 . e ( VAR_2 . TAG , STRING_1 , ex ) ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE java.lang.NullPointerException ) TYPE java.lang.NullPointerException ( NAME ex ) NAME ex ( BLOCK BLOCK (  TYPE_2 . e ( VAR_2 . TAG , STRING_2 , ex ) )  TYPE_2 . e ( VAR_2 . TAG , STRING_2 , ex ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER synchronized ) MODIFIER synchronized ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE android.bluetooth.BluetoothDevice ) TYPE android.bluetooth.BluetoothDevice ( NAME device ) NAME device ) VAR VAR ( VAR VAR ( TYPE byte ) TYPE byte ( NAME error ) NAME error ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  android.util.Log.v ( VAR_2 . TAG , ( ( ( STRING_1 + device ) + STRING_2 ) + error ) ) )  android.util.Log.v ( VAR_2 . TAG , ( ( ( STRING_1 + device ) + STRING_2 ) + error ) ) ) THEN THEN ) IF IF ( IF IF ( COND ! ( METHOD_2 ( device ) ) ) COND ! ( METHOD_2 ( device ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  return METHOD_3 ( error ) ; )  return METHOD_3 ( error ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME c ) NAME c ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND c instanceof TYPE_3 ) COND c instanceof TYPE_3 ( THEN THEN (  VAR_2 -= 5 )  VAR_2 -= 5 (  return super . METHOD_1 ( c , VAR_1 ) ; )  return super . METHOD_1 ( c , VAR_1 ) ; ) THEN THEN ) IF IF ( IF IF ( COND c instanceof TYPE_4 ) COND c instanceof TYPE_4 ( THEN THEN (  VAR_1 . x -= 1 )  VAR_1 . x -= 1 (  VAR_3 += 1 )  VAR_3 += 1 ( IF IF ( COND ! ( METHOD_2 ( ) ) ) COND ! ( METHOD_2 ( ) ) ( THEN THEN (  VAR_1 . y -= 1 )  VAR_1 . y -= 1 (  VAR_2 += 1 )  VAR_2 += 1 ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return super . METHOD_1 ( c , VAR_1 ) ; )  return super . METHOD_1 ( c , VAR_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME item ) NAME item ( INIT = VAR_1 . METHOD_2 ( VAR_2 , VAR_3 ) ) INIT = VAR_1 . METHOD_2 ( VAR_2 , VAR_3 ) ) VAR VAR ( IF IF ( COND ( item == null ) && ( ( VAR_4 ) != null ) ) COND ( item == null ) && ( ( VAR_4 ) != null ) ( THEN THEN ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_4 . get ( VAR_1 ) ) INIT = VAR_4 . get ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_5 != null ) COND VAR_5 != null ( THEN THEN (  return METHOD_1 ( VAR_5 , VAR_2 , VAR_3 ) ; )  return METHOD_1 ( VAR_5 , VAR_2 , VAR_3 ) ; ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return item ; )  return item ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME event ) NAME event ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 == ( VAR_2 ) ) COND VAR_1 == ( VAR_2 ) ( THEN THEN ( IF IF ( COND VAR_3 ) COND VAR_3 ( THEN THEN (  android.util.Log.d ( VAR_4 . TAG , STRING_1 ) )  android.util.Log.d ( VAR_4 . TAG , STRING_1 ) ) THEN THEN ) IF IF (  VAR_5 = new TYPE_2 ( ) )  VAR_5 = new TYPE_2 ( ) (  VAR_5 . METHOD_2 ( VAR_6 , VAR_7 ) )  VAR_5 . METHOD_2 ( VAR_6 , VAR_7 ) (  this . METHOD_3 ( ) . METHOD_4 ( VAR_8 , VAR_5 , null , null ) )  this . METHOD_3 ( ) . METHOD_4 ( VAR_8 , VAR_5 , null , null ) (  TYPE_3 . METHOD_5 ( this , METHOD_6 ( VAR_9 ) , VAR_10 ) . METHOD_7 ( ) )  TYPE_3 . METHOD_5 ( this , METHOD_6 ( VAR_9 ) , VAR_10 ) . METHOD_7 ( ) (  METHOD_8 ( ) )  METHOD_8 ( ) ) THEN THEN ) IF IF (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME flags ) NAME flags ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( VAR_2 ) )  VAR_1 . METHOD_2 ( VAR_2 ) (  VAR_1 . METHOD_2 ( VAR_3 ) )  VAR_1 . METHOD_2 ( VAR_3 ) (  VAR_1 . METHOD_3 ( VAR_4 ) )  VAR_1 . METHOD_3 ( VAR_4 ) (  VAR_1 . METHOD_3 ( VAR_5 ) )  VAR_1 . METHOD_3 ( VAR_5 ) (  VAR_1 . METHOD_4 ( ( ( TYPE_2 ) ( VAR_6 ) ) , flags ) )  VAR_1 . METHOD_4 ( ( ( TYPE_2 ) ( VAR_6 ) ) , flags ) (  VAR_1 . METHOD_3 ( VAR_7 ) )  VAR_1 . METHOD_3 ( VAR_7 ) (  VAR_1 . METHOD_5 ( new TYPE_3 ( VAR_8 ) ) )  VAR_1 . METHOD_5 ( new TYPE_3 ( VAR_8 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME context ) NAME context ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND TYPE_2 . METHOD_2 ( context ) ) COND TYPE_2 . METHOD_2 ( context ) ( THEN THEN (  TYPE_2 . METHOD_3 ( context , VAR_2 , VAR_1 ) )  TYPE_2 . METHOD_3 ( context , VAR_2 , VAR_1 ) ) THEN THEN ( ELSE ELSE (  TYPE_2 . METHOD_4 ( context ) . METHOD_5 ( ) . METHOD_6 ( VAR_2 , VAR_1 ) . METHOD_7 ( ) )  TYPE_2 . METHOD_4 ( context ) . METHOD_5 ( ) . METHOD_6 ( VAR_2 , VAR_1 ) . METHOD_7 ( ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( VAR_2 ) ) INIT = new TYPE_1 ( VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME p ) NAME p ( INIT = new TYPE_2 ( INT_1 , INT_2 ) ) INIT = new TYPE_2 ( INT_1 , INT_2 ) ) VAR VAR (  VAR_1 . METHOD_2 ( null , p , 1 , 2 ) )  VAR_1 . METHOD_2 ( null , p , 1 , 2 ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( ( TYPE_3 ) ( VAR_4 ) ) ) INIT = ( ( TYPE_3 ) ( VAR_4 ) ) ) VAR VAR (  assertEquals ( 1 , VAR_3 . index ) )  assertEquals ( 1 , VAR_3 . index ) (  assertEquals ( 2 , VAR_3 . count ) )  assertEquals ( 2 , VAR_3 . count ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = null ) INIT = null ) VAR VAR ( IF IF ( COND VAR_1 instanceof TYPE_2 ) COND VAR_1 instanceof TYPE_2 ( THEN THEN (  VAR_2 = ( ( TYPE_2 ) ( VAR_1 ) ) . METHOD_2 ( ) )  VAR_2 = ( ( TYPE_2 ) ( VAR_1 ) ) . METHOD_2 ( ) ) THEN THEN ) IF IF (  VAR_2 = TYPE_3 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) )  VAR_2 = TYPE_3 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ( IF IF ( COND VAR_2 == null ) COND VAR_2 == null ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF (  return TYPE_3 . METHOD_5 ( VAR_2 ) ; )  return TYPE_3 . METHOD_5 ( VAR_2 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( ( METHOD_2 ( ) ) != null ) && ( TYPE_1 . equals ( METHOD_2 ( ) . METHOD_3 ( ) ) ) ) COND ( ( METHOD_2 ( ) ) != null ) && ( TYPE_1 . equals ( METHOD_2 ( ) . METHOD_3 ( ) ) ) ( THEN THEN (  VAR_1 = true )  VAR_1 = true ) THEN THEN ) IF IF ( IF IF ( COND ! ( TYPE_2 . METHOD_4 ( context , VAR_2 ) ) ) COND ! ( TYPE_2 . METHOD_4 ( context , VAR_2 ) ) ( THEN THEN (  VAR_1 = false )  VAR_1 = false ) THEN THEN ) IF IF (  VAR_1 = TYPE_3 . METHOD_5 ( context , METHOD_6 ( ) , METHOD_7 ( ) ) )  VAR_1 = TYPE_3 . METHOD_5 ( context , METHOD_6 ( ) , METHOD_7 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.io.File ) RETURN java.io.File ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME path ) NAME path ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( ) ) INIT = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME res ) NAME res ( INIT = VAR_1 . METHOD_4 ( path ) ) INIT = VAR_1 . METHOD_4 ( path ) ) VAR VAR ( IF IF ( COND res != null ) COND res != null ( THEN THEN (  return res . METHOD_5 ( ) . METHOD_6 ( ) ; )  return res . METHOD_5 ( ) . METHOD_6 ( ) ; ) THEN THEN ) IF IF (  return path . METHOD_6 ( ) ; )  return path . METHOD_6 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME equals ) NAME equals ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME obj ) NAME obj ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND METHOD_1 ( ) . equals ( obj . METHOD_1 ( ) ) ) COND METHOD_1 ( ) . equals ( obj . METHOD_1 ( ) ) ( THEN THEN (  return TYPE_1 . equals ( VAR_1 , ( ( TYPE_2 ) ( obj ) ) . VAR_1 ) ; )  return TYPE_1 . equals ( VAR_1 , ( ( TYPE_2 ) ( obj ) ) . VAR_1 ) ; ) THEN THEN ) IF IF (  return super . equals ( obj ) ; )  return super . equals ( obj ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME src ) NAME src ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_1 . METHOD_2 ( VAR_2 ) ) INIT = TYPE_1 . METHOD_2 ( VAR_2 ) ) VAR VAR ( IF IF ( COND VAR_3 == null ) COND VAR_3 == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  TYPE_2 . METHOD_3 ( VAR_1 , src , VAR_3 . METHOD_4 ( ) ) )  TYPE_2 . METHOD_3 ( VAR_1 , src , VAR_3 . METHOD_4 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME m ) NAME m ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME v ) NAME v ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME value ) NAME value ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = false ) INIT = false ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( IF IF ( COND v == null ) COND v == null ( THEN THEN (  m . METHOD_2 ( value ) )  m . METHOD_2 ( value ) ) THEN THEN ( ELSE ELSE (  m . METHOD_2 ( v , value ) )  m . METHOD_2 ( v , value ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_2 = true )  VAR_2 = true ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  TYPE_4 . METHOD_3 ( VAR_2 , VAR_1 ) )  TYPE_4 . METHOD_3 ( VAR_2 , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME address ) NAME address ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( this . VAR_1 ) == null ) COND ( this . VAR_1 ) == null ( THEN THEN (  this . VAR_1 = new java.util.ArrayList < TYPE_1 > ( 1 ) )  this . VAR_1 = new java.util.ArrayList < TYPE_1 > ( 1 ) ) THEN THEN ) IF IF (  this . VAR_1 . METHOD_2 ( new TYPE_1 ( name , address , null ) ) )  this . VAR_1 . METHOD_2 ( new TYPE_1 ( name , address , null ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME config ) NAME config ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( config ) ) INIT = METHOD_2 ( config ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . METHOD_3 ( VAR_1 ) ) INIT = VAR_3 . METHOD_3 ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_2 < 0 ) COND VAR_2 < 0 ( THEN THEN (  TYPE_6 . e ( STRING_1 ) )  TYPE_6 . e ( STRING_1 ) (  return false ; )  return false ; ) THEN THEN ) IF IF (  VAR_3 . METHOD_4 ( ) )  VAR_3 . METHOD_4 ( ) (  VAR_3 . METHOD_5 ( VAR_2 , true ) )  VAR_3 . METHOD_5 ( VAR_2 , true ) (  return VAR_3 . METHOD_6 ( ) ; )  return VAR_3 . METHOD_6 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( VAR_2 ) )  VAR_1 . METHOD_2 ( VAR_2 ) ( IF IF ( COND VAR_3 ) COND VAR_3 ( THEN THEN (  VAR_4 . METHOD_3 ( VAR_5 . METHOD_4 ( ) , VAR_6 ) )  VAR_4 . METHOD_3 ( VAR_5 . METHOD_4 ( ) , VAR_6 ) (  VAR_4 . METHOD_5 ( ) )  VAR_4 . METHOD_5 ( ) ) THEN THEN ( ELSE ELSE (  VAR_1 . METHOD_6 ( VAR_7 ) )  VAR_1 . METHOD_6 ( VAR_7 ) (  VAR_5 . METHOD_6 ( VAR_7 , VAR_6 ) )  VAR_5 . METHOD_6 ( VAR_7 , VAR_6 ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( STRING_1 ) )  TYPE_1 . METHOD_2 ( STRING_1 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_3 . METHOD_3 ( ) . METHOD_4 ( ) ) INIT = TYPE_3 . METHOD_3 ( ) . METHOD_4 ( ) ) VAR VAR ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  TYPE_1 . i ( STRING_1 , STRING_2 ) )  TYPE_1 . i ( STRING_1 , STRING_2 ) (  return ; )  return ; ) THEN THEN ) IF IF (  VAR_1 . METHOD_5 ( true ) )  VAR_1 . METHOD_5 ( true ) ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_4 ) ( VAR_3 . METHOD_6 ( ) . METHOD_7 ( ) ) ) ) INIT = ( ( TYPE_4 ) ( VAR_3 . METHOD_6 ( ) . METHOD_7 ( ) ) ) ) VAR VAR (  VAR_2 . METHOD_8 ( ) )  VAR_2 . METHOD_8 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_1 . get ( VAR_2 . METHOD_2 ( ) ) ) ) COND ! ( VAR_1 . get ( VAR_2 . METHOD_2 ( ) ) ) ( THEN THEN (  VAR_1 . set ( VAR_2 . METHOD_2 ( ) ) )  VAR_1 . set ( VAR_2 . METHOD_2 ( ) ) (  VAR_2 . METHOD_3 ( VAR_3 ) )  VAR_2 . METHOD_3 ( VAR_3 ) ( VAR VAR ( TYPE java.util.ArrayList<TYPE_1> ) TYPE java.util.ArrayList<TYPE_1> ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR (  VAR_4 = VAR_2 . METHOD_4 ( ) )  VAR_4 = VAR_2 . METHOD_4 ( ) (  VAR_5 = ( VAR_4 . size ( ) ) - 1 )  VAR_5 = ( VAR_4 . size ( ) ) - 1 (  VAR_6 = VAR_7 )  VAR_6 = VAR_7 ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME x ) NAME x ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME info ) NAME info ( INIT = METHOD_2 ( x ) ) INIT = METHOD_2 ( x ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE com.android.jack.ir.ast.JDefinedClassOrInterface ) TYPE com.android.jack.ir.ast.JDefinedClassOrInterface ( NAME type ) NAME type ( INIT = ( ( com.android.jack.ir.ast.JDefinedClassOrInterface ) ( METHOD_3 ( ) . get ( VAR_1 ) ) ) ) INIT = ( ( com.android.jack.ir.ast.JDefinedClassOrInterface ) ( METHOD_3 ( ) . get ( VAR_1 ) ) ) ) VAR VAR (  VAR_2 . METHOD_4 ( type ) )  VAR_2 . METHOD_4 ( type ) ( IF IF ( COND ( VAR_3 ) != null ) COND ( VAR_3 ) != null ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( IN VAR_3 ) IN VAR_3 ( BLOCK BLOCK (  METHOD_1 ( VAR_4 ) )  METHOD_1 ( VAR_4 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Throwable ) TYPE java.lang.Throwable ( NAME e ) NAME e ( BLOCK BLOCK (  throw METHOD_5 ( x , e , info ) ; )  throw METHOD_5 ( x , e , info ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( IN VAR_3 . METHOD_2 ( ) ) IN VAR_3 . METHOD_2 ( ) ( BLOCK BLOCK ( IF IF ( COND VAR_2 instanceof TYPE_3 ) COND VAR_2 instanceof TYPE_3 ( THEN THEN ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME action ) NAME action ( INIT = ( ( TYPE_3 ) ( VAR_2 ) ) . METHOD_3 ( ) ) INIT = ( ( TYPE_3 ) ( VAR_2 ) ) . METHOD_3 ( ) ) VAR VAR ( IF IF ( COND action instanceof TYPE_5 ) COND action instanceof TYPE_5 ( THEN THEN (  ( ( TYPE_5 ) ( action ) ) . METHOD_4 ( VAR_4 ) )  ( ( TYPE_5 ) ( action ) ) . METHOD_4 ( VAR_4 ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( new TYPE_1 ( ) ) ) INIT = TYPE_2 . METHOD_2 ( new TYPE_1 ( ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME info ) NAME info ( INIT = new TYPE_3 ( VAR_2 , 0 ) ) INIT = new TYPE_3 ( VAR_2 , 0 ) ) VAR VAR (  VAR_3 . METHOD_3 ( info ) )  VAR_3 . METHOD_3 ( info ) (  VAR_4 . METHOD_4 ( VAR_1 ) )  VAR_4 . METHOD_4 ( VAR_1 ) (  org.mockito.Mockito.verify ( VAR_5 ) . METHOD_3 ( TYPE_4 . eq ( info ) ) )  org.mockito.Mockito.verify ( VAR_5 ) . METHOD_3 ( TYPE_4 . eq ( info ) ) (  org.mockito.Mockito.verify ( VAR_1 ) . METHOD_3 ( TYPE_4 . eq ( info ) ) )  org.mockito.Mockito.verify ( VAR_1 ) . METHOD_3 ( TYPE_4 . eq ( info ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( TYPE_1 . METHOD_2 ( ) ) ) COND ! ( TYPE_1 . METHOD_2 ( ) ) ( THEN THEN (  android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) )  android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME service ) NAME service ( INIT = METHOD_3 ( ) ) INIT = METHOD_3 ( ) ) VAR VAR ( IF IF ( COND service == null ) COND service == null ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  return service . METHOD_1 ( VAR_1 ) ; )  return service . METHOD_1 ( VAR_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME args ) NAME args ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 = 4 )  VAR_1 = 4 (  VAR_2 = 4 )  VAR_2 = 4 ( VAR VAR ( TYPE double ) TYPE double ( NAME x ) NAME x ( INIT = ( ( double ) ( args . in ) ) ) INIT = ( ( double ) ( args . in ) ) ) VAR VAR (  args.out = ( ( float ) ( TYPE_2 . METHOD_2 ( ( ( x - FLOAT_1 ) / FLOAT_2 ) ) ) ) )  args.out = ( ( float ) ( TYPE_2 . METHOD_2 ( ( ( x - FLOAT_1 ) / FLOAT_2 ) ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) . METHOD_3 ( ) ) INIT = METHOD_2 ( ) . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . METHOD_4 ( ) ) INIT = VAR_3 . METHOD_4 ( ) ) VAR VAR ( IF IF ( COND VAR_1 . METHOD_5 ( VAR_4 ) ) COND VAR_1 . METHOD_5 ( VAR_4 ) ( THEN THEN (  assertTrue ( ( ( ( STRING_1 + VAR_2 ) + STRING_2 ) + ( VAR_5 ) ) , TYPE_2 . METHOD_6 ( VAR_5 , VAR_2 ) ) )  assertTrue ( ( ( ( STRING_1 + VAR_2 ) + STRING_2 ) + ( VAR_5 ) ) , TYPE_2 . METHOD_6 ( VAR_5 , VAR_2 ) ) ) THEN THEN ( ELSE ELSE (  assertEquals ( STRING_3 , VAR_2 ) )  assertEquals ( STRING_3 , VAR_2 ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( METHOD_2 ( ) ) ) COND ! ( METHOD_2 ( ) ) ( THEN THEN (  TYPE_2 . METHOD_3 ( VAR_1 ) )  TYPE_2 . METHOD_3 ( VAR_1 ) (  return ; )  return ; ) THEN THEN ) IF IF ( TRY TRY ( BLOCK BLOCK (  TYPE_2 . METHOD_4 ( ) . METHOD_1 ( mContext . METHOD_5 ( ) , VAR_1 ) )  TYPE_2 . METHOD_4 ( ) . METHOD_1 ( mContext . METHOD_5 ( ) , VAR_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME e ) NAME e ( BLOCK BLOCK (  throw e . METHOD_6 ( ) ; )  throw e . METHOD_6 ( ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( SWITCH SWITCH ( NAME METHOD_2 ( ) . METHOD_3 ( ) ) NAME METHOD_2 ( ) . METHOD_3 ( ) ( CASE VAR_2 ( BLOCK BLOCK (  VAR_1 = STRING_1 )  VAR_1 = STRING_1 (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_2 ( CASE VAR_3 ( BLOCK BLOCK (  VAR_1 = STRING_2 )  VAR_1 = STRING_2 (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_3 ( DEFAULT DEFAULT ( BLOCK BLOCK (  throw new TYPE_1 ( STRING_3 ) ; )  throw new TYPE_1 ( STRING_3 ) ; ) BLOCK BLOCK ) DEFAULT DEFAULT ) SWITCH SWITCH ( IF IF ( COND METHOD_2 ( ) . METHOD_4 ( ) ) COND METHOD_2 ( ) . METHOD_4 ( ) ( THEN THEN (  return java.lang.String.format ( STRING_4 , VAR_1 , METHOD_5 ( ) , METHOD_6 ( ) ) ; )  return java.lang.String.format ( STRING_4 , VAR_1 , METHOD_5 ( ) , METHOD_6 ( ) ) ; ) THEN THEN ( ELSE ELSE (  return java.lang.String.format ( STRING_5 , VAR_1 , METHOD_6 ( ) ) ; )  return java.lang.String.format ( STRING_5 , VAR_1 , METHOD_6 ( ) ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 . METHOD_3 ( ) ) INIT = VAR_4 . METHOD_3 ( ) ) VAR VAR ( IF IF ( COND VAR_3 == null ) COND VAR_3 == null ( THEN THEN (  VAR_2 . METHOD_4 ( VAR_4 . METHOD_5 ( ) , new TYPE_3 ( ) , VAR_5 ) )  VAR_2 . METHOD_4 ( VAR_4 . METHOD_5 ( ) , new TYPE_3 ( ) , VAR_5 ) ) THEN THEN ( ELSE ELSE (  VAR_2 . METHOD_6 ( VAR_3 ) )  VAR_2 . METHOD_6 ( VAR_3 ) ) ELSE ELSE ) IF IF (  VAR_2 . METHOD_7 ( ) )  VAR_2 . METHOD_7 ( ) (  VAR_1 . METHOD_8 ( ) )  VAR_1 . METHOD_8 ( ) (  TYPE_4 . get ( VAR_4 ) . METHOD_9 ( VAR_6 , VAR_4 ) )  TYPE_4 . get ( VAR_4 ) . METHOD_9 ( VAR_6 , VAR_4 ) (  METHOD_10 ( true ) )  METHOD_10 ( true ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  VAR_1 )  VAR_1 ( BLOCK BLOCK (  VAR_1 . METHOD_1 ( VAR_2 ) )  VAR_1 . METHOD_1 ( VAR_2 ) ( IF IF ( COND VAR_3 ) COND VAR_3 ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME e ) NAME e ( BLOCK BLOCK (  android.util.Log.w ( VAR_4 . TAG , STRING_1 ) )  android.util.Log.w ( VAR_4 . TAG , STRING_1 ) (  METHOD_2 ( ) )  METHOD_2 ( ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  android.util.Log.e ( VAR_4 . TAG , STRING_2 ) )  android.util.Log.e ( VAR_4 . TAG , STRING_2 ) (  VAR_5 . METHOD_3 ( ) )  VAR_5 . METHOD_3 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME in ) NAME in ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_2 ) NAME VAR_2 ( INIT = new byte [ INT_1 ] ) INIT = new byte [ INT_1 ] ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME count ) NAME count ) VAR VAR ( WHILE WHILE ( COND ( count = in . METHOD_2 ( VAR_2 ) ) != ( - 1 ) ) COND ( count = in . METHOD_2 ( VAR_2 ) ) != ( - 1 ) ( BLOCK BLOCK (  VAR_1 . METHOD_3 ( VAR_2 , 0 , count ) )  VAR_1 . METHOD_3 ( VAR_2 , 0 , count ) ) BLOCK BLOCK ) WHILE WHILE (  in . METHOD_4 ( ) )  in . METHOD_4 ( ) (  this . data = VAR_1 . METHOD_5 ( ) )  this . data = VAR_1 . METHOD_5 ( ) (  this . length = data . length )  this . length = data . length (  this . VAR_3 . METHOD_6 ( this ) )  this . VAR_3 . METHOD_6 ( this ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK (  VAR_1 . println ( STRING_1 ) )  VAR_1 . println ( STRING_1 ) (  VAR_1 . println ( STRING_2 ) )  VAR_1 . println ( STRING_2 ) (  VAR_2 . METHOD_1 ( VAR_3 ) )  VAR_2 . METHOD_1 ( VAR_3 ) (  VAR_1 . println ( STRING_3 ) )  VAR_1 . println ( STRING_3 ) (  VAR_2 . METHOD_2 ( VAR_4 ) )  VAR_2 . METHOD_2 ( VAR_4 ) (  VAR_1 . println ( STRING_4 ) )  VAR_1 . println ( STRING_4 ) (  VAR_1 . println ( ( STRING_5 + STRING_6 ) ) )  VAR_1 . println ( ( STRING_5 + STRING_6 ) ) (  TYPE_1 . METHOD_3 ( ) )  TYPE_1 . METHOD_3 ( ) (  VAR_1 . println ( ( STRING_5 + STRING_7 ) ) )  VAR_1 . println ( ( STRING_5 + STRING_7 ) ) (  VAR_1 . println ( STRING_8 ) )  VAR_1 . println ( STRING_8 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME listener ) NAME listener ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = super . METHOD_1 ( VAR_1 , listener ) ) INIT = super . METHOD_1 ( VAR_1 , listener ) ) VAR VAR (  VAR_2 . METHOD_2 ( new java.lang.String [ ] { STRING_1 } ) )  VAR_2 . METHOD_2 ( new java.lang.String [ ] { STRING_1 } ) (  assertEquals ( STRING_2 , 0 , VAR_2 . METHOD_3 ( ) . length ) )  assertEquals ( STRING_2 , 0 , VAR_2 . METHOD_3 ( ) . length ) (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( STRING_1 ) ) INIT = new TYPE_1 ( STRING_1 ) ) VAR VAR (  fail ( STRING_2 ) )  fail ( STRING_2 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  TYPE_2 . METHOD_2 ( VAR_2 , null , VAR_3 ) )  TYPE_2 . METHOD_2 ( VAR_2 , null , VAR_3 ) ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( INIT = new java.io.File ( VAR_2 , VAR_3 ) . METHOD_3 ( ) ) INIT = new java.io.File ( VAR_2 , VAR_3 ) . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( VAR_4 ) ) INIT = new TYPE_1 ( VAR_4 ) ) VAR VAR (  assertEquals ( VAR_4 , VAR_1 . getName ( ) ) )  assertEquals ( VAR_4 , VAR_1 . getName ( ) ) (  VAR_1 . METHOD_4 ( ) )  VAR_1 . METHOD_4 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ! ( METHOD_2 ( ) ) ) COND ! ( METHOD_2 ( ) ) ( THEN THEN (  TYPE_1 . METHOD_3 ( VAR_1 , STRING_1 ) )  TYPE_1 . METHOD_3 ( VAR_1 , STRING_1 ) (  return ; )  return ; ) THEN THEN ) IF IF ( IF IF ( COND ( ! ( METHOD_4 ( ) ) ) || ( ! ( METHOD_5 ( ) ) ) ) COND ( ! ( METHOD_4 ( ) ) ) || ( ! ( METHOD_5 ( ) ) ) ( THEN THEN (  TYPE_1 . METHOD_3 ( VAR_1 , STRING_2 ) )  TYPE_1 . METHOD_3 ( VAR_1 , STRING_2 ) (  return ; )  return ; ) THEN THEN ) IF IF (  METHOD_6 ( 0 ) )  METHOD_6 ( 0 ) (  METHOD_7 ( VAR_2 ) )  METHOD_7 ( VAR_2 ) (  METHOD_8 ( false , false , VAR_3 ) )  METHOD_8 ( false , false , VAR_3 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_9 ( VAR_3 ) ) INIT = METHOD_9 ( VAR_3 ) ) VAR VAR (  METHOD_10 ( VAR_4 ) )  METHOD_10 ( VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER synchronized ) MODIFIER synchronized ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME w ) NAME w ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME h ) NAME h ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME d ) NAME d ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_6 ) NAME VAR_6 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_7 ) NAME VAR_7 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  METHOD_3 ( mContext , id , VAR_1 , VAR_2 , VAR_3 , VAR_4 , w , h , VAR_5 , d , VAR_6 , VAR_8 ) )  METHOD_3 ( mContext , id , VAR_1 , VAR_2 , VAR_3 , VAR_4 , w , h , VAR_5 , d , VAR_6 , VAR_8 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME pos ) NAME pos ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = VAR_2 . METHOD_2 ( pos ) ) INIT = VAR_2 . METHOD_2 ( pos ) ) VAR VAR ( IF IF ( COND ( VAR_3 ) || ( VAR_4 ) ) COND ( VAR_3 ) || ( VAR_4 ) ( THEN THEN (  android.util.Log.v ( TYPE_2 . TAG , ( ( ( ( ( ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + i ) + STRING_3 ) + ( VAR_2 . size ( ) ) ) + STRING_4 ) + pos ) + STRING_5 ) ) )  android.util.Log.v ( TYPE_2 . TAG , ( ( ( ( ( ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + i ) + STRING_3 ) + ( VAR_2 . size ( ) ) ) + STRING_4 ) + pos ) + STRING_5 ) ) ) THEN THEN ) IF IF (  VAR_2 . METHOD_3 ( i , VAR_1 ) )  VAR_2 . METHOD_3 ( i , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME m ) NAME m ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME v ) NAME v ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME value ) NAME value ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = false ) INIT = false ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( v == null ) ? ( ( java.lang.String ) ( m . METHOD_2 ( ) ) ) : ( ( java.lang.String ) ( m . METHOD_2 ( v ) ) ) ) INIT = ( v == null ) ? ( ( java.lang.String ) ( m . METHOD_2 ( ) ) ) : ( ( java.lang.String ) ( m . METHOD_2 ( v ) ) ) ) VAR VAR (  TYPE_3 . assertTrue ( VAR_3 . equals ( value ) ) )  TYPE_3 . assertTrue ( VAR_3 . equals ( value ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_2 = true )  VAR_2 = true ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  TYPE_3 . assertEquals ( VAR_2 , VAR_1 ) )  TYPE_3 . assertEquals ( VAR_2 , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_2 = new TYPE_2 ( ) )  VAR_2 = new TYPE_2 ( ) (  TYPE_3 . METHOD_2 ( ) )  TYPE_3 . METHOD_2 ( ) (  TYPE_2 . METHOD_3 ( true ) )  TYPE_2 . METHOD_3 ( true ) (  VAR_2 . METHOD_4 ( VAR_1 ) )  VAR_2 . METHOD_4 ( VAR_1 ) (  TYPE_2 . METHOD_5 ( VAR_3 < TYPE_4 > of ( ) ) )  TYPE_2 . METHOD_5 ( VAR_3 < TYPE_4 > of ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_2 = VAR_1 )  VAR_2 = VAR_1 (  VAR_3 . METHOD_2 ( VAR_2 ) )  VAR_3 . METHOD_2 ( VAR_2 ) ( IF IF ( COND ( VAR_4 ) == null ) COND ( VAR_4 ) == null ( THEN THEN (  VAR_4 = new TYPE_2 ( ) )  VAR_4 = new TYPE_2 ( ) (  TYPE_3 . METHOD_3 ( ) . METHOD_4 ( VAR_2 . METHOD_5 ( ) , VAR_4 ) )  TYPE_3 . METHOD_3 ( ) . METHOD_4 ( VAR_2 . METHOD_5 ( ) , VAR_4 ) ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_5 ) == null ) COND ( VAR_5 ) == null ( THEN THEN (  VAR_5 = new TYPE_4 ( VAR_2 . METHOD_5 ( ) ) )  VAR_5 = new TYPE_4 ( VAR_2 . METHOD_5 ( ) ) ( IF IF ( COND ( VAR_6 ) != null ) COND ( VAR_6 ) != null ( THEN THEN (  VAR_6 . METHOD_6 ( ) . METHOD_7 ( VAR_5 ) )  VAR_6 . METHOD_6 ( ) . METHOD_7 ( VAR_5 ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.android.jack.ir.ast.JMethod ) TYPE com.android.jack.ir.ast.JMethod ( NAME method ) NAME method ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = 0 ) INIT = 0 ) VAR VAR ( IF IF ( COND ! ( method . METHOD_2 ( ) ) ) COND ! ( method . METHOD_2 ( ) ) ( THEN THEN (  VAR_1 += 1 )  VAR_1 += 1 ) THEN THEN ) IF IF ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( IN method . METHOD_3 ( ) ) IN method . METHOD_3 ( ) ( BLOCK BLOCK ( IF IF ( COND ( VAR_2 . METHOD_4 ( ) . METHOD_5 ( TYPE_2 . METHOD_4 ( ) ) ) || ( VAR_2 . METHOD_4 ( ) . METHOD_5 ( TYPE_3 . METHOD_4 ( ) ) ) ) COND ( VAR_2 . METHOD_4 ( ) . METHOD_5 ( TYPE_2 . METHOD_4 ( ) ) ) || ( VAR_2 . METHOD_4 ( ) . METHOD_5 ( TYPE_3 . METHOD_4 ( ) ) ) ( THEN THEN (  VAR_1 += 2 )  VAR_1 += 2 ) THEN THEN ( ELSE ELSE (  VAR_1 += 1 )  VAR_1 += 1 ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_3 = false )  VAR_3 = false (  VAR_4 = null )  VAR_4 = null (  VAR_5 = 0 )  VAR_5 = 0 (  VAR_6 = VAR_1 )  VAR_6 = VAR_1 (  VAR_7 = VAR_2 )  VAR_7 = VAR_2 (  VAR_8 = ( VAR_2 != null ) ? METHOD_2 ( VAR_2 ) : null )  VAR_8 = ( VAR_2 != null ) ? METHOD_2 ( VAR_2 ) : null (  VAR_9 = null )  VAR_9 = null (  VAR_10 = null )  VAR_10 = null (  VAR_11 = VAR_12 = ( ( VAR_7 ) != null ) ? 0 : TYPE_2 . METHOD_3 ( ) )  VAR_11 = VAR_12 = ( ( VAR_7 ) != null ) ? 0 : TYPE_2 . METHOD_3 ( ) (  VAR_13 = 0 )  VAR_13 = 0 (  VAR_14 = null )  VAR_14 = null (  VAR_15 . METHOD_4 ( VAR_16 ) )  VAR_15 . METHOD_4 ( VAR_16 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME parent ) NAME parent ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ( INIT = VAR_1 . METHOD_2 ( ( ( VAR_1 . METHOD_3 ( CHAR_1 ) ) + 1 ) ) ) INIT = VAR_1 . METHOD_2 ( ( ( VAR_1 . METHOD_3 ( CHAR_1 ) ) + 1 ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_3 . METHOD_4 ( name , VAR_1 , VAR_2 ) ) INIT = TYPE_3 . METHOD_4 ( name , VAR_1 , VAR_2 ) ) VAR VAR ( IF IF ( COND parent == null ) COND parent == null ( THEN THEN (  parent = new TYPE_1 ( TYPE_3 . METHOD_4 ( STRING_1 , STRING_1 , true ) ) )  parent = new TYPE_1 ( TYPE_3 . METHOD_4 ( STRING_1 , STRING_1 , true ) ) ) THEN THEN ) IF IF (  return ( ( TYPE_1 ) ( parent . METHOD_5 ( VAR_3 ) ) ) ; )  return ( ( TYPE_1 ) ( parent . METHOD_5 ( VAR_3 ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_3 . METHOD_2 ( VAR_2 ) ) INIT = TYPE_3 . METHOD_2 ( VAR_2 ) ) VAR VAR (  VAR_1 . METHOD_3 ( ) . METHOD_4 ( VAR_3 , new TYPE_4 ( VAR_4 ) ) )  VAR_1 . METHOD_3 ( ) . METHOD_4 ( VAR_3 , new TYPE_4 ( VAR_4 ) ) ( FOR-EACH FOR-EACH ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_5 ) NAME VAR_5 ( IN VAR_6 ) IN VAR_6 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME VAR_7 ) NAME VAR_7 ( INIT = VAR_5 . METHOD_1 ( VAR_1 ) ) INIT = VAR_5 . METHOD_1 ( VAR_1 ) ) VAR VAR (  VAR_4 . METHOD_5 ( VAR_7 ) )  VAR_4 . METHOD_5 ( VAR_7 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_4 ; )  return VAR_4 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME append ) NAME append ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME path ) NAME path ( INIT = METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ) INIT = METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  return new TYPE_4 ( path , append ) ; )  return new TYPE_4 ( path , append ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME e ) NAME e ( BLOCK BLOCK (  TYPE_6 . METHOD_6 ( path , VAR_1 . METHOD_7 ( ) , VAR_4 ) )  TYPE_6 . METHOD_6 ( path , VAR_1 . METHOD_7 ( ) , VAR_4 ) (  throw new TYPE_7 ( e ) ; )  throw new TYPE_7 ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE android.bluetooth.BluetoothDevice ) TYPE android.bluetooth.BluetoothDevice ( NAME device ) NAME device ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( device ) ) INIT = METHOD_2 ( device ) ) VAR VAR ( VAR VAR ( TYPE android.content.Intent ) TYPE android.content.Intent ( NAME VAR_2 ) NAME VAR_2 ( INIT = new android.content.Intent ( VAR_3 ) ) INIT = new android.content.Intent ( VAR_3 ) ) VAR VAR (  VAR_2 . METHOD_3 ( VAR_4 , device ) )  VAR_2 . METHOD_3 ( VAR_4 , device ) (  VAR_2 . METHOD_3 ( VAR_5 , ( VAR_1 == null ? null : VAR_6 ) ) )  VAR_2 . METHOD_3 ( VAR_5 , ( VAR_1 == null ? null : VAR_6 ) ) (  VAR_7 . METHOD_4 ( device , ( VAR_1 == null ? null : VAR_6 ) ) )  VAR_7 . METHOD_4 ( device , ( VAR_1 == null ? null : VAR_6 ) ) (  VAR_7 . METHOD_5 ( VAR_2 , VAR_8 ) )  VAR_7 . METHOD_5 ( VAR_2 , VAR_8 ) (  VAR_9 . METHOD_6 ( device ) )  VAR_9 . METHOD_6 ( device ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN ( TRY TRY ( BLOCK BLOCK ( IF IF ( COND ( VAR_2 ) != null ) COND ( VAR_2 ) != null ( THEN THEN (  VAR_1 . METHOD_3 ( VAR_2 ) )  VAR_1 . METHOD_3 ( VAR_2 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ( FINALLY FINALLY (  VAR_1 . METHOD_4 ( ) )  VAR_1 . METHOD_4 ( ) ) FINALLY FINALLY ) TRY TRY ) THEN THEN ) IF IF (  TYPE_2 . METHOD_5 ( ) . METHOD_6 ( this ) )  TYPE_2 . METHOD_5 ( ) . METHOD_6 ( this ) ( IF IF ( COND ( VAR_3 ) != null ) COND ( VAR_3 ) != null ( THEN THEN (  TYPE_3 . METHOD_7 ( ) . METHOD_8 ( VAR_3 ) )  TYPE_3 . METHOD_7 ( ) . METHOD_8 ( VAR_3 ) (  VAR_3 = null )  VAR_3 = null ) THEN THEN ) IF IF (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( null ) )  TYPE_1 . when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( null ) ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . METHOD_3 ( ) ) INIT = VAR_3 . METHOD_3 ( ) ) VAR VAR (  org.mockito.Mockito.verify ( VAR_1 , TYPE_1 . METHOD_4 ( ) ) . METHOD_3 ( org.mockito.Matchers . METHOD_5 ( VAR_4 class ) , org.mockito.Matchers . METHOD_5 ( int . class ) ) )  org.mockito.Mockito.verify ( VAR_1 , TYPE_1 . METHOD_4 ( ) ) . METHOD_3 ( org.mockito.Matchers . METHOD_5 ( VAR_4 class ) , org.mockito.Matchers . METHOD_5 ( int . class ) ) (  assertEquals ( VAR_2 , false ) )  assertEquals ( VAR_2 , false ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_2 class ) , TYPE_2 . METHOD_4 ( STRING_1 ) , TYPE_2 . METHOD_5 ( VAR_3 ) ) ) INIT = TYPE_2 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_2 class ) , TYPE_2 . METHOD_4 ( STRING_1 ) , TYPE_2 . METHOD_5 ( VAR_3 ) ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_3 . METHOD_6 ( STRING_2 , STRING_3 , STRING_4 , STRING_5 , STRING_6 , STRING_7 , STRING_8 , STRING_9 , STRING_10 , STRING_11 ) ) INIT = TYPE_3 . METHOD_6 ( STRING_2 , STRING_3 , STRING_4 , STRING_5 , STRING_6 , STRING_7 , STRING_8 , STRING_9 , STRING_10 , STRING_11 ) ) VAR VAR (  TYPE_3 . METHOD_7 ( VAR_4 , VAR_1 ) )  TYPE_3 . METHOD_7 ( VAR_4 , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE android.os.Message ) TYPE android.os.Message ( NAME msg ) NAME msg ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SWITCH SWITCH ( NAME VAR_1 ) NAME VAR_1 ( CASE VAR_2 ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME flags ) NAME flags ( INIT = msg.arg1 ) INIT = msg.arg1 ) VAR VAR (  VAR_3 . METHOD_2 ( flags ) )  VAR_3 . METHOD_2 ( flags ) (  return true ; )  return true ; ) BLOCK BLOCK ) CASE VAR_2 ( CASE VAR_4 ( BLOCK BLOCK (  VAR_3 . METHOD_3 ( null ) )  VAR_3 . METHOD_3 ( null ) (  return true ; )  return true ; ) BLOCK BLOCK ) CASE VAR_4 ( CASE VAR_5 ( BLOCK BLOCK (  VAR_3 . METHOD_4 ( ) )  VAR_3 . METHOD_4 ( ) (  return true ; )  return true ; ) BLOCK BLOCK ) CASE VAR_5 ( DEFAULT DEFAULT ( BLOCK BLOCK (  return false ; )  return false ; ) BLOCK BLOCK ) DEFAULT DEFAULT ) SWITCH SWITCH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_1 ( VAR_1 . METHOD_2 ( ) , VAR_2 , VAR_3 , VAR_5 , 0 , 0 , VAR_6 , true ) ) INIT = new TYPE_1 ( VAR_1 . METHOD_2 ( ) , VAR_2 , VAR_3 , VAR_5 , 0 , 0 , VAR_6 , true ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_7 ) NAME VAR_7 ( INIT = METHOD_3 ( ) ) INIT = METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_8 ) NAME VAR_8 ( INIT = TYPE_3 . METHOD_4 ( VAR_9 class ) ) INIT = TYPE_3 . METHOD_4 ( VAR_9 class ) ) VAR VAR (  VAR_10 . METHOD_5 ( VAR_7 , VAR_4 , VAR_8 ) )  VAR_10 . METHOD_5 ( VAR_7 , VAR_4 , VAR_8 ) (  org.mockito.Mockito.verify ( VAR_11 ) . METHOD_5 ( VAR_7 , VAR_4 , VAR_8 ) )  org.mockito.Mockito.verify ( VAR_11 ) . METHOD_5 ( VAR_7 , VAR_4 , VAR_8 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  android.util.Log.v ( VAR_1 . TAG , STRING_1 ) )  android.util.Log.v ( VAR_1 . TAG , STRING_1 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . METHOD_2 ( ) ) INIT = VAR_3 . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN ( TRY TRY ( BLOCK BLOCK (  VAR_2 . METHOD_3 ( VAR_4 ) )  VAR_2 . METHOD_3 ( VAR_4 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME e ) NAME e ( BLOCK BLOCK (  e . METHOD_4 ( ) )  e . METHOD_4 ( ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) THEN THEN ) IF IF ( SYNCHRONIZED SYNCHRONIZED (  VAR_5 )  VAR_5 ( BLOCK BLOCK (  METHOD_5 ( ) )  METHOD_5 ( ) ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED (  VAR_6 = null )  VAR_6 = null ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_5 ) COND VAR_5 ( THEN THEN (  android.util.Log.w ( VAR_6 . TAG , STRING_1 ) )  android.util.Log.w ( VAR_6 . TAG , STRING_1 ) (  return ; )  return ; ) THEN THEN ( ELSE ELSE ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_7 ) NAME VAR_7 ( INIT = VAR_8 . get ( ) ) INIT = VAR_8 . get ( ) ) VAR VAR ( IF IF ( COND VAR_7 == null ) COND VAR_7 == null ( THEN THEN (  android.util.Log.w ( VAR_6 . TAG , STRING_2 ) )  android.util.Log.w ( VAR_6 . TAG , STRING_2 ) (  return ; )  return ; ) THEN THEN ) IF IF (  VAR_7 . METHOD_1 ( VAR_9 , VAR_10 , VAR_1 , VAR_2 , VAR_3 , VAR_4 ) )  VAR_7 . METHOD_1 ( VAR_9 , VAR_10 , VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.util.Set<java.lang.String>> ) TYPE java.util.Map<java.lang.String,java.util.Set<java.lang.String>> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.util.Set<java.lang.String> ) TYPE java.util.Set<java.lang.String> ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( IN VAR_3 ) IN VAR_3 ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_1 . METHOD_2 ( VAR_4 ) ) ) COND ! ( VAR_1 . METHOD_2 ( VAR_4 ) ) ( THEN THEN (  VAR_1 . METHOD_3 ( VAR_4 ) )  VAR_1 . METHOD_3 ( VAR_4 ) ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_5 ) NAME VAR_5 ( IN METHOD_4 ( VAR_2 , VAR_4 ) ) IN METHOD_4 ( VAR_2 , VAR_4 ) ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_1 . METHOD_2 ( VAR_5 ) ) ) COND ! ( VAR_1 . METHOD_2 ( VAR_5 ) ) ( THEN THEN (  VAR_1 . METHOD_3 ( VAR_5 ) )  VAR_1 . METHOD_3 ( VAR_5 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( VAR_2 ) ) INIT = METHOD_2 ( VAR_2 ) ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < ( VAR_3 ) ) COND i < ( VAR_3 ) ( UPDATE UPDATE (  ++ i )  ++ i ) UPDATE UPDATE ( BLOCK BLOCK (  assertEquals ( new TYPE_2 ( i ) , ( ( TYPE_2 ) ( VAR_1 . element ( ) ) ) ) )  assertEquals ( new TYPE_2 ( i ) , ( ( TYPE_2 ) ( VAR_1 . element ( ) ) ) ) (  VAR_1 . METHOD_3 ( ) )  VAR_1 . METHOD_3 ( ) ) BLOCK BLOCK ) FOR FOR ( TRY TRY ( BLOCK BLOCK (  VAR_1 . element ( ) )  VAR_1 . element ( ) (  METHOD_4 ( ) )  METHOD_4 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  android.util.Log.v ( VAR_3 . TAG , ( STRING_1 + VAR_1 ) ) )  android.util.Log.v ( VAR_3 . TAG , ( STRING_1 + VAR_1 ) ) ) THEN THEN ) IF IF ( VAR VAR ( TYPE android.content.Intent ) TYPE android.content.Intent ( NAME VAR_4 ) NAME VAR_4 ( INIT = new android.content.Intent ( VAR_5 ) ) INIT = new android.content.Intent ( VAR_5 ) ) VAR VAR (  VAR_4 . METHOD_2 ( VAR_6 ) )  VAR_4 . METHOD_2 ( VAR_6 ) ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  VAR_4 . METHOD_3 ( VAR_7 , VAR_8 ) )  VAR_4 . METHOD_3 ( VAR_7 , VAR_8 ) ) THEN THEN ( ELSE ELSE (  VAR_4 . METHOD_3 ( VAR_7 , VAR_9 ) )  VAR_4 . METHOD_3 ( VAR_7 , VAR_9 ) ) ELSE ELSE ) IF IF (  mContext . METHOD_4 ( VAR_4 , VAR_10 ) )  mContext . METHOD_4 ( VAR_4 , VAR_10 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME request ) NAME request ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME id ) NAME id ( INIT = VAR_1 . METHOD_2 ( VAR_2 , TYPE_3 . METHOD_3 ( ) , VAR_3 ) ) INIT = VAR_1 . METHOD_2 ( VAR_2 , TYPE_3 . METHOD_3 ( ) , VAR_3 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME field ) NAME field ( INIT = id . METHOD_4 ( ) ) INIT = id . METHOD_4 ( ) ) VAR VAR ( IF IF ( COND field . METHOD_5 ( ) . METHOD_6 ( VAR_1 ) ) COND field . METHOD_5 ( ) . METHOD_6 ( VAR_1 ) ( THEN THEN (  return id ; )  return id ; ) THEN THEN ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  return METHOD_7 ( VAR_1 , request ) ; )  return METHOD_7 ( VAR_1 , request ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME index ) NAME index ) VAR VAR ( VAR VAR ( TYPE float ) TYPE float ( NAME value ) NAME value ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 instanceof float [ ] ) COND VAR_1 instanceof float [ ] ( THEN THEN (  ( ( float [ ] ) ( VAR_1 ) ) [ index ] = value )  ( ( float [ ] ) ( VAR_1 ) ) [ index ] = value ) THEN THEN ( ELSE ELSE ( IF IF ( COND VAR_1 instanceof double [ ] ) COND VAR_1 instanceof double [ ] ( THEN THEN (  ( ( double [ ] ) ( VAR_1 ) ) [ index ] = value )  ( ( double [ ] ) ( VAR_1 ) ) [ index ] = value ) THEN THEN ( ELSE ELSE (  throw TYPE_2 . METHOD_2 ( VAR_1 ) ; )  throw TYPE_2 . METHOD_2 ( VAR_1 ) ; ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ! ( TYPE_1 . METHOD_2 ( new TYPE_2 ( STRING_1 ) ) ) ) COND ! ( TYPE_1 . METHOD_2 ( new TYPE_2 ( STRING_1 ) ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_3 . METHOD_3 ( new TYPE_2 ( STRING_1 ) ) ) INIT = TYPE_3 . METHOD_3 ( new TYPE_2 ( STRING_1 ) ) ) VAR VAR (  assertEquals ( STRING_2 , ( ( TYPE_4 ) ( VAR_1 ) ) . METHOD_4 ( ) ) )  assertEquals ( STRING_2 , ( ( TYPE_4 ) ( VAR_1 ) ) . METHOD_4 ( ) ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_3 . METHOD_5 ( new TYPE_2 ( STRING_1 ) ) ) INIT = TYPE_3 . METHOD_5 ( new TYPE_2 ( STRING_1 ) ) ) VAR VAR (  assertEquals ( STRING_3 , ( ( TYPE_4 ) ( VAR_2 ) ) . METHOD_4 ( ) ) )  assertEquals ( STRING_3 , ( ( TYPE_4 ) ( VAR_2 ) ) . METHOD_4 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME b ) NAME b ( INIT = ( ( TYPE_1 ) ( METHOD_2 ( VAR_1 ) ) ) ) INIT = ( ( TYPE_1 ) ( METHOD_2 ( VAR_1 ) ) ) ) VAR VAR ( IF IF ( COND b != null ) COND b != null ( THEN THEN ( IF IF ( COND VAR_2 . METHOD_3 ( ) ) COND VAR_2 . METHOD_3 ( ) ( THEN THEN (  b . METHOD_4 ( VAR_3 ) )  b . METHOD_4 ( VAR_3 ) ) THEN THEN ( ELSE ELSE (  b . METHOD_4 ( VAR_4 ) )  b . METHOD_4 ( VAR_4 ) (  VAR_5 . METHOD_5 ( null ) )  VAR_5 . METHOD_5 ( null ) ) ELSE ELSE ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( new TYPE_5 ( VAR_2 . METHOD_3 ( ) ) ) )  VAR_1 . METHOD_2 ( new TYPE_5 ( VAR_2 . METHOD_3 ( ) ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_3 ( new TYPE_6 ( VAR_2 . METHOD_4 ( ) , e ) ) ; )  throw new TYPE_3 ( new TYPE_6 ( VAR_2 . METHOD_4 ( ) , e ) ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( PARAMS PARAMS ( VAR VAR ( TYPE com.android.jack.ir.ast.JMethod ) TYPE com.android.jack.ir.ast.JMethod ( NAME method ) NAME method ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( ! ( VAR_1 ) ) && ( ! ( method . METHOD_1 ( ) ) ) ) && ( ! ( method . METHOD_2 ( ) ) ) ) COND ( ( ! ( VAR_1 ) ) && ( ! ( method . METHOD_1 ( ) ) ) ) && ( ! ( method . METHOD_2 ( ) ) ) ( THEN THEN ( IF IF ( COND TYPE_1 . METHOD_3 ( method ) ) COND TYPE_1 . METHOD_3 ( method ) ( THEN THEN (  new TYPE_2 ( method ) . METHOD_4 ( ) )  new TYPE_2 ( method ) . METHOD_4 ( ) ) THEN THEN ( ELSE ELSE (  METHOD_5 ( method ) )  METHOD_5 ( method ) ) ELSE ELSE ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  assertTrue ( STRING_1 , TYPE_1 . METHOD_2 ( CHAR_1 ) ) )  assertTrue ( STRING_1 , TYPE_1 . METHOD_2 ( CHAR_1 ) ) (  assertTrue ( STRING_2 , TYPE_1 . METHOD_2 ( CHAR_2 ) ) )  assertTrue ( STRING_2 , TYPE_1 . METHOD_2 ( CHAR_2 ) ) (  assertTrue ( STRING_3 , TYPE_1 . METHOD_2 ( CHAR_3 ) ) )  assertTrue ( STRING_3 , TYPE_1 . METHOD_2 ( CHAR_3 ) ) (  assertTrue ( STRING_4 , TYPE_1 . METHOD_2 ( CHAR_4 ) ) )  assertTrue ( STRING_4 , TYPE_1 . METHOD_2 ( CHAR_4 ) ) (  assertTrue ( STRING_5 , ( ! ( TYPE_1 . METHOD_2 ( CHAR_5 ) ) ) ) )  assertTrue ( STRING_5 , ( ! ( TYPE_1 . METHOD_2 ( CHAR_5 ) ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME equals ) NAME equals ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_1 instanceof TYPE_1 ) ) COND ! ( VAR_1 instanceof TYPE_1 ) ( THEN THEN ( IF IF ( COND VAR_1 instanceof TYPE_2 ) COND VAR_1 instanceof TYPE_2 ( THEN THEN ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_2 ) ( VAR_1 ) ) ) INIT = ( ( TYPE_2 ) ( VAR_1 ) ) ) VAR VAR (  return equals ( VAR_3 , VAR_2 . type , VAR_4 ) ; )  return equals ( VAR_3 , VAR_2 . type , VAR_4 ) ; ) THEN THEN ) IF IF (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_5 ) NAME VAR_5 ( INIT = ( ( TYPE_1 ) ( VAR_1 ) ) ) INIT = ( ( TYPE_1 ) ( VAR_1 ) ) ) VAR VAR (  return equals ( VAR_6 , VAR_5 . type , VAR_7 ) ; )  return equals ( VAR_6 , VAR_5 . type , VAR_7 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME netId ) NAME netId ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  android.util.Log.d ( VAR_3 . TAG , ( ( ( ( ( STRING_1 + ( java.lang.Integer . toString ( netId ) ) ) + STRING_2 ) + ( java.lang.Integer . toString ( VAR_1 ) ) ) + STRING_3 ) + ( VAR_4 ) ) ) )  android.util.Log.d ( VAR_3 . TAG , ( ( ( ( ( STRING_1 + ( java.lang.Integer . toString ( netId ) ) ) + STRING_2 ) + ( java.lang.Integer . toString ( VAR_1 ) ) ) + STRING_3 ) + ( VAR_4 ) ) ) ) THEN THEN ) IF IF ( IF IF ( COND VAR_4 ) COND VAR_4 ( THEN THEN (  VAR_5 . METHOD_2 ( ) )  VAR_5 . METHOD_2 ( ) (  VAR_4 = false )  VAR_4 = false ) THEN THEN ) IF IF (  VAR_5 . METHOD_3 ( netId , VAR_1 ) )  VAR_5 . METHOD_3 ( netId , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static final ) MODIFIER public static final ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME msg ) NAME msg ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME data ) NAME data ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME offset ) NAME offset ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME length ) NAME length ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME output ) NAME output ( INIT = TYPE_2 . METHOD_2 ( data , offset , length ) ) INIT = TYPE_2 . METHOD_2 ( data , offset , length ) ) VAR VAR (  msg . METHOD_3 ( output ) )  msg . METHOD_3 ( output ) (  output . METHOD_4 ( ) )  output . METHOD_4 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK (  throw new java.lang.RuntimeException ( ( STRING_1 + STRING_2 ) ) ; )  throw new java.lang.RuntimeException ( ( STRING_1 + STRING_2 ) ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( PARAMS PARAMS ( VAR VAR ( TYPE com.android.jack.ir.ast.JMethod ) TYPE com.android.jack.ir.ast.JMethod ( NAME method ) NAME method ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( ( method . METHOD_1 ( ) . METHOD_2 ( ) ) || ( method . METHOD_3 ( ) ) ) || ( method . METHOD_4 ( ) ) ) || ( ! ( VAR_1 . METHOD_5 ( this . METHOD_6 ( ) , method ) ) ) ) COND ( ( ( method . METHOD_1 ( ) . METHOD_2 ( ) ) || ( method . METHOD_3 ( ) ) ) || ( method . METHOD_4 ( ) ) ) || ( ! ( VAR_1 . METHOD_5 ( this . METHOD_6 ( ) , method ) ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  method . METHOD_7 ( VAR_2 class ) )  method . METHOD_7 ( VAR_2 class ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME v ) NAME v ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  v . METHOD_5 ( method ) )  v . METHOD_5 ( method ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( true ) )  METHOD_2 ( true ) (  METHOD_3 ( false ) )  METHOD_3 ( false ) (  METHOD_4 ( false ) )  METHOD_4 ( false ) (  METHOD_5 ( VAR_1 , false ) )  METHOD_5 ( VAR_1 , false ) (  METHOD_6 ( false ) )  METHOD_6 ( false ) (  assertEquals ( VAR_2 , TYPE_1 . METHOD_7 ( mContext , VAR_3 , VAR_4 ) ) )  assertEquals ( VAR_2 , TYPE_1 . METHOD_7 ( mContext , VAR_3 , VAR_4 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME session ) NAME session ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME s ) NAME s ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME c ) NAME c ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME fd ) NAME fd ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME callback ) NAME callback ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_4 . METHOD_2 ( s , fd , callback , new byte [ 1 ] , 0 , 1 , 1 ) )  TYPE_4 . METHOD_2 ( s , fd , callback , new byte [ 1 ] , 0 , 1 , 1 ) (  fail ( ) )  fail ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME path ) NAME path ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( null == path ) || ( path . equals ( STRING_1 ) ) ) && ( ( null == VAR_1 ) || ( VAR_1 . equals ( STRING_1 ) ) ) ) COND ( ( null == path ) || ( path . equals ( STRING_1 ) ) ) && ( ( null == VAR_1 ) || ( VAR_1 . equals ( STRING_1 ) ) ) ( THEN THEN (  throw new java.lang.IllegalArgumentException ( STRING_2 ) ; )  throw new java.lang.IllegalArgumentException ( STRING_2 ) ; ) THEN THEN ( ELSE ELSE ( IF IF ( COND ( VAR_2 ) == ( METHOD_2 ( ) ) ) COND ( VAR_2 ) == ( METHOD_2 ( ) ) ( THEN THEN (  throw new TYPE_1 ( STRING_3 ) ; )  throw new TYPE_1 ( STRING_3 ) ; ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF (  return METHOD_3 ( VAR_3 , path , VAR_1 ) ; )  return METHOD_3 ( VAR_3 , path , VAR_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  this )  this ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_1 ) ) COND ! ( VAR_1 ) ( THEN THEN (  VAR_1 = true )  VAR_1 = true ( TRY TRY ( BLOCK BLOCK ( IF IF ( COND ( VAR_2 ) != null ) COND ( VAR_2 ) != null ( THEN THEN (  VAR_2 . METHOD_1 ( ) )  VAR_2 . METHOD_1 ( ) ) THEN THEN ) IF IF (  out . METHOD_1 ( ) )  out . METHOD_1 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME x ) NAME x ( BLOCK BLOCK (  VAR_3 = true )  VAR_3 = true ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  VAR_2 = null )  VAR_2 = null (  VAR_4 = null )  VAR_4 = null (  out = null )  out = null ) THEN THEN ) IF IF ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME args ) NAME args ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME t ) NAME t ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  t . METHOD_2 ( 0 , 0 , false ) )  t . METHOD_2 ( 0 , 0 , false ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME in ) NAME in ( INIT = t . METHOD_3 ( args . in ) ) INIT = t . METHOD_3 ( args . in ) ) VAR VAR (  args.out = t . METHOD_3 ( TYPE_4 . METHOD_4 ( args . in ) , TYPE_4 . METHOD_4 ( in . METHOD_5 ( ) ) , TYPE_4 . METHOD_4 ( in . METHOD_6 ( ) ) ) )  args.out = t . METHOD_3 ( TYPE_4 . METHOD_4 ( args . in ) , TYPE_4 . METHOD_4 ( in . METHOD_5 ( ) ) , TYPE_4 . METHOD_4 ( in . METHOD_6 ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME options ) NAME options ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = options . METHOD_2 ( ) ) INIT = options . METHOD_2 ( ) ) VAR VAR (  TYPE_4 . METHOD_3 ( VAR_1 , VAR_2 , VAR_3 class ) )  TYPE_4 . METHOD_3 ( VAR_1 , VAR_2 , VAR_3 class ) (  VAR_1 . println ( ) )  VAR_1 . println ( ) (  VAR_1 . println ( STRING_1 ) )  VAR_1 . println ( STRING_1 ) (  VAR_1 . println ( ) )  VAR_1 . println ( ) (  TYPE_4 . METHOD_3 ( VAR_1 , VAR_2 , VAR_4 class ) )  TYPE_4 . METHOD_3 ( VAR_1 , VAR_2 , VAR_4 class ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER final ) MODIFIER final ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME r ) NAME r ( INIT = VAR_2 . get ( VAR_1 ) ) INIT = VAR_2 . get ( VAR_1 ) ) VAR VAR ( IF IF ( COND ( r == null ) || ( ( VAR_3 ) == null ) ) COND ( r == null ) || ( ( VAR_3 ) == null ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( IF IF ( COND VAR_4 ) COND VAR_4 ( THEN THEN (  android.util.Slog.v ( TYPE_3 . TAG , ( STRING_1 + ( VAR_5 . name ) ) ) )  android.util.Slog.v ( TYPE_3 . TAG , ( STRING_1 + ( VAR_5 . name ) ) ) ) THEN THEN ) IF IF (  TYPE_3 . METHOD_2 ( VAR_3 , VAR_6 ) )  TYPE_3 . METHOD_2 ( VAR_3 , VAR_6 ) (  METHOD_3 ( VAR_7 . METHOD_4 ( VAR_6 ) ) )  METHOD_3 ( VAR_7 . METHOD_4 ( VAR_6 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Integer ) TYPE java.lang.Integer ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_3 != null ) COND VAR_3 != null ( THEN THEN (  VAR_4 . METHOD_2 ( VAR_1 , TYPE_1 . METHOD_3 ( VAR_2 ) , TYPE_1 . METHOD_3 ( VAR_3 ) ) )  VAR_4 . METHOD_2 ( VAR_1 , TYPE_1 . METHOD_3 ( VAR_2 ) , TYPE_1 . METHOD_3 ( VAR_3 ) ) ) THEN THEN ( ELSE ELSE (  VAR_4 . METHOD_2 ( VAR_1 , TYPE_1 . METHOD_3 ( VAR_2 ) ) )  VAR_4 . METHOD_2 ( VAR_1 , TYPE_1 . METHOD_3 ( VAR_2 ) ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME m ) NAME m ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME v ) NAME v ) VAR VAR ( VAR VAR ( TYPE float ) TYPE float ( NAME value ) NAME value ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = false ) INIT = false ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE float ) TYPE float ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( v == null ) ? ( ( float ) ( m . METHOD_2 ( ) ) ) : ( ( float ) ( m . METHOD_2 ( v ) ) ) ) INIT = ( v == null ) ? ( ( float ) ( m . METHOD_2 ( ) ) ) : ( ( float ) ( m . METHOD_2 ( v ) ) ) ) VAR VAR (  TYPE_3 . assertTrue ( ( VAR_3 == value ) ) )  TYPE_3 . assertTrue ( ( VAR_3 == value ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_2 = true )  VAR_2 = true ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  TYPE_3 . METHOD_3 ( VAR_2 , VAR_1 ) )  TYPE_3 . METHOD_3 ( VAR_2 , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_5 ) NAME VAR_5 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ( INIT = null ) INIT = null ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_6 ) NAME VAR_6 ( INIT = METHOD_3 ( VAR_5 , VAR_1 , VAR_2 , VAR_3 ) ) INIT = METHOD_3 ( VAR_5 , VAR_1 , VAR_2 , VAR_3 ) ) VAR VAR ( IF IF ( COND VAR_6 != null ) COND VAR_6 != null ( THEN THEN (  name = VAR_6 . METHOD_4 ( ) )  name = VAR_6 . METHOD_4 ( ) ) THEN THEN ) IF IF ( IF IF ( COND ( name != null ) && ( VAR_4 != null ) ) COND ( name != null ) && ( VAR_4 != null ) ( THEN THEN ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_7 ) NAME VAR_7 ( INIT = METHOD_1 ( VAR_6 , VAR_4 ) ) INIT = METHOD_1 ( VAR_6 , VAR_4 ) ) VAR VAR (  return VAR_7 ; )  return VAR_7 ; ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( ) ) INIT = TYPE_2 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( VAR_1 ) ) INIT = new TYPE_1 ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3<?> ) TYPE TYPE_3<?> ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . METHOD_3 ( ) ) INIT = VAR_1 . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( INIT = null ) INIT = null ) VAR VAR ( WHILE WHILE ( COND VAR_3 . METHOD_4 ( ) ) COND VAR_3 . METHOD_4 ( ) ( BLOCK BLOCK (  VAR_4 = ( ( java.lang.String ) ( VAR_3 . METHOD_5 ( ) ) ) )  VAR_4 = ( ( java.lang.String ) ( VAR_3 . METHOD_5 ( ) ) ) (  assertEquals ( STRING_1 , VAR_1 . get ( VAR_4 ) , VAR_2 . METHOD_6 ( VAR_4 ) ) )  assertEquals ( STRING_1 , VAR_1 . get ( VAR_4 ) , VAR_2 . METHOD_6 ( VAR_4 ) ) ) BLOCK BLOCK ) WHILE WHILE ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) == ( VAR_2 ) ) COND ( VAR_1 ) == ( VAR_2 ) ( THEN THEN (  throw new TYPE_2 ( ) ; )  throw new TYPE_2 ( ) ; ) THEN THEN ) IF IF (  VAR_1 = ( ( VAR_1 ) - 1 ) & ( ( VAR_3 . length ) - 1 ) )  VAR_1 = ( ( VAR_1 ) - 1 ) & ( ( VAR_3 . length ) - 1 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ( INIT = VAR_3 [ VAR_1 ] ) INIT = VAR_3 [ VAR_1 ] ) VAR VAR ( IF IF ( COND ( ( VAR_4 ) != ( VAR_2 ) ) || ( result == null ) ) COND ( ( VAR_4 ) != ( VAR_2 ) ) || ( result == null ) ( THEN THEN (  throw new TYPE_3 ( ) ; )  throw new TYPE_3 ( ) ; ) THEN THEN ) IF IF (  VAR_5 = VAR_1 )  VAR_5 = VAR_1 (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( IN VAR_2 . values ( ) ) IN VAR_2 . values ( ) ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( ) )  VAR_1 . METHOD_2 ( ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  VAR_2 . METHOD_3 ( ) )  VAR_2 . METHOD_3 ( ) ( IF IF ( COND ( VAR_3 ) != null ) COND ( VAR_3 ) != null ( THEN THEN (  VAR_3 . METHOD_4 ( ) )  VAR_3 . METHOD_4 ( ) (  VAR_3 = null )  VAR_3 = null ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME index ) NAME index ( INIT = VAR_2 . METHOD_2 ( id ) ) INIT = VAR_2 . METHOD_2 ( id ) ) VAR VAR ( IF IF ( COND index >= 0 ) COND index >= 0 ( THEN THEN ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME e ) NAME e ( INIT = VAR_2 . METHOD_3 ( index ) ) INIT = VAR_2 . METHOD_3 ( index ) ) VAR VAR (  VAR_2 . METHOD_4 ( index ) )  VAR_2 . METHOD_4 ( index ) (  VAR_3 . METHOD_5 ( VAR_4 , VAR_1 ) )  VAR_3 . METHOD_5 ( VAR_4 , VAR_1 ) (  METHOD_6 ( e ) )  METHOD_6 ( e ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_3 ) ) COND ! ( VAR_3 ) ( THEN THEN (  TYPE_4 . d ( STRING_1 ) )  TYPE_4 . d ( STRING_1 ) (  METHOD_2 ( VAR_1 , VAR_2 ) )  METHOD_2 ( VAR_1 , VAR_2 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK (  METHOD_3 ( ) )  METHOD_3 ( ) (  throw e ; )  throw e ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE android.renderscript.Allocation ) TYPE android.renderscript.Allocation ( NAME a ) NAME a ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( VAR_1 , STRING_1 ) )  TYPE_1 . METHOD_2 ( VAR_1 , STRING_1 ) (  mRS . METHOD_3 ( ) )  mRS . METHOD_3 ( ) ( IF IF ( COND ! ( VAR_2 . equals ( a . METHOD_4 ( ) ) ) ) COND ! ( VAR_2 . equals ( a . METHOD_4 ( ) ) ) ( THEN THEN (  throw new TYPE_2 ( STRING_2 ) ; )  throw new TYPE_2 ( STRING_2 ) ; ) THEN THEN ) IF IF (  METHOD_5 ( 0 , 0 , VAR_3 , VAR_4 , a , 0 , 0 ) )  METHOD_5 ( 0 , 0 , VAR_3 , VAR_4 , a , 0 , 0 ) (  TYPE_1 . METHOD_6 ( VAR_1 ) )  TYPE_1 . METHOD_6 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_2 = VAR_1 )  VAR_2 = VAR_1 (  VAR_3 = null )  VAR_3 = null ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN ( TRY TRY ( BLOCK BLOCK (  VAR_3 = TYPE_1 . METHOD_2 ( VAR_1 ) )  VAR_3 = TYPE_1 . METHOD_2 ( VAR_1 ) (  VAR_4 = VAR_3 . METHOD_3 ( ) )  VAR_4 = VAR_3 . METHOD_3 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.IllegalArgumentException ) TYPE java.lang.IllegalArgumentException ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) THEN THEN ) IF IF (  VAR_5 = null )  VAR_5 = null ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME res ) NAME res ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN ( IF IF ( COND relaxed ) COND relaxed ( THEN THEN (  VAR_2 = new TYPE_2 ( mRS , res , VAR_3 ) )  VAR_2 = new TYPE_2 ( mRS , res , VAR_3 ) ) THEN THEN ( ELSE ELSE (  VAR_4 = new TYPE_3 ( mRS , res , VAR_5 ) )  VAR_4 = new TYPE_3 ( mRS , res , VAR_5 ) ) ELSE ELSE ) IF IF ) THEN THEN ( ELSE ELSE ( IF IF ( COND relaxed ) COND relaxed ( THEN THEN (  VAR_6 = new TYPE_4 ( mRS ) )  VAR_6 = new TYPE_4 ( mRS ) ) THEN THEN ( ELSE ELSE (  VAR_7 = new TYPE_5 ( mRS ) )  VAR_7 = new TYPE_5 ( mRS ) ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF (  METHOD_2 ( ) )  METHOD_2 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME fd ) NAME fd ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( IF IF ( COND fd . METHOD_2 ( ) ) COND fd . METHOD_2 ( ) ( THEN THEN ( IF IF ( COND TYPE_3 . METHOD_3 ( fd ) ) COND TYPE_3 . METHOD_3 ( fd ) ( THEN THEN (  TYPE_4 . METHOD_4 ( ) . METHOD_5 ( ) )  TYPE_4 . METHOD_4 ( ) . METHOD_5 ( ) ) THEN THEN ) IF IF ( IF IF ( COND TYPE_3 . METHOD_6 ( fd ) ) COND TYPE_3 . METHOD_6 ( fd ) ( THEN THEN (  METHOD_7 ( fd ) )  METHOD_7 ( fd ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  os . METHOD_1 ( fd ) )  os . METHOD_1 ( fd ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME res ) NAME res ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME path ) NAME path ) VAR VAR ( VAR VAR ( TYPE float ) TYPE float ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( ) )  VAR_1 . METHOD_2 ( ) ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_3 ) NAME VAR_3 ( INIT = res . METHOD_3 ( ) ) INIT = res . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ( INIT = res . METHOD_4 ( ) . VAR_5 ) INIT = res . METHOD_4 ( ) . VAR_5 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_6 ) NAME VAR_6 ( INIT = VAR_1 . METHOD_5 ( VAR_3 , path , VAR_2 , VAR_4 ) ) INIT = VAR_1 . METHOD_5 ( VAR_3 , path , VAR_2 , VAR_4 ) ) VAR VAR ( IF IF ( COND VAR_6 == 0 ) COND VAR_6 == 0 ( THEN THEN (  throw new android.renderscript.RSRuntimeException ( ( STRING_1 + path ) ) ; )  throw new android.renderscript.RSRuntimeException ( ( STRING_1 + path ) ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_7 ) NAME VAR_7 ( INIT = new TYPE_1 ( VAR_6 , VAR_1 ) ) INIT = new TYPE_1 ( VAR_6 , VAR_1 ) ) VAR VAR (  return VAR_7 ; )  return VAR_7 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME r ) NAME r ( INIT = VAR_1 . get ( ) ) INIT = VAR_1 . get ( ) ) VAR VAR ( IF IF ( COND r == null ) COND r == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  r . METHOD_2 ( this , VAR_2 , null ) )  r . METHOD_2 ( this , VAR_2 , null ) (  r . METHOD_3 ( this , VAR_3 , null ) )  r . METHOD_3 ( this , VAR_3 , null ) (  r . METHOD_4 ( this , VAR_4 , null ) )  r . METHOD_4 ( this , VAR_4 , null ) (  r . METHOD_5 ( this , VAR_5 , null ) )  r . METHOD_5 ( this , VAR_5 , null ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 . length ) != ( VAR_2 . length ) ) COND ( VAR_1 . length ) != ( VAR_2 . length ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < ( VAR_1 . length ) ) COND i < ( VAR_1 . length ) ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 [ i ] ) != ( VAR_2 [ i ] ) ) COND ( VAR_1 [ i ] ) != ( VAR_2 [ i ] ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR FOR (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( ) ) INIT = TYPE_2 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_3 . METHOD_3 ( ) ) INIT = TYPE_3 . METHOD_3 ( ) ) VAR VAR (  VAR_1 . METHOD_4 ( VAR_2 , new TYPE_4 ( TYPE_3 . METHOD_3 ( ) , VAR_3 , false , false ) ) )  VAR_1 . METHOD_4 ( VAR_2 , new TYPE_4 ( TYPE_3 . METHOD_3 ( ) , VAR_3 , false , false ) ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  assertTrue ( VAR_4 . METHOD_5 ( VAR_2 , true ) ) )  assertTrue ( VAR_4 . METHOD_5 ( VAR_2 , true ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_1 instanceof TYPE_2 ) ) COND ! ( VAR_1 instanceof TYPE_2 ) ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF ( SYNCHRONIZED SYNCHRONIZED (  this )  this ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME res ) NAME res ( INIT = ( ( TYPE_2 ) ( VAR_1 ) ) ) INIT = ( ( TYPE_2 ) ( VAR_1 ) ) ) VAR VAR (  return VAR_2 . packageName ; )  return VAR_2 . packageName ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 . METHOD_2 ( ) ) == ( VAR_4 ) ) COND ( VAR_1 . METHOD_2 ( ) ) == ( VAR_4 ) ( THEN THEN ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_5 ) NAME VAR_5 ( INIT = TYPE_3 . METHOD_3 ( VAR_3 ) ) INIT = TYPE_3 . METHOD_3 ( VAR_3 ) ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_6 ) NAME VAR_6 ( INIT = 0 ) INIT = 0 ) VAR VAR ( IF IF ( COND VAR_5 != null ) COND VAR_5 != null ( THEN THEN (  VAR_6 = ( ( VAR_5 . METHOD_4 ( ) ) - ( VAR_7 ) ) / INT_1 )  VAR_6 = ( ( VAR_5 . METHOD_4 ( ) ) - ( VAR_7 ) ) / INT_1 ( IF IF ( COND VAR_6 < 0 ) COND VAR_6 < 0 ( THEN THEN (  VAR_6 = 0 )  VAR_6 = 0 ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  VAR_1 . METHOD_5 ( VAR_6 ) )  VAR_1 . METHOD_5 ( VAR_6 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME toString ) NAME toString ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.StringBuilder ) TYPE java.lang.StringBuilder ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.lang.StringBuilder ( ) ) INIT = new java.lang.StringBuilder ( ) ) VAR VAR (  VAR_2 . append ( STRING_1 ) )  VAR_2 . append ( STRING_1 ) ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < 5 ) COND i < 5 ( UPDATE UPDATE (  ++ i )  ++ i ) UPDATE UPDATE ( BLOCK BLOCK ( IF IF ( COND i > 0 ) COND i > 0 ( THEN THEN (  VAR_2 . append ( STRING_2 ) )  VAR_2 . append ( STRING_2 ) ) THEN THEN ) IF IF (  VAR_2 . append ( TYPE_2 . toString ( VAR_1 . s [ i ] ) ) )  VAR_2 . append ( TYPE_2 . toString ( VAR_1 . s [ i ] ) ) ) BLOCK BLOCK ) FOR FOR (  VAR_2 . append ( STRING_3 ) )  VAR_2 . append ( STRING_3 ) (  return VAR_2 . toString ( ) ; )  return VAR_2 . toString ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_3 ( new TYPE_4 ( STRING_1 ) , new TYPE_4 ( STRING_2 , 16 ) , new TYPE_4 ( STRING_3 , 16 ) ) ) INIT = new TYPE_3 ( new TYPE_4 ( STRING_1 ) , new TYPE_4 ( STRING_2 , 16 ) , new TYPE_4 ( STRING_3 , 16 ) ) ) VAR VAR (  return new TYPE_1 ( VAR_1 , VAR_1 . METHOD_2 ( TYPE_5 . METHOD_3 ( STRING_4 ) ) , new TYPE_4 ( STRING_5 , 16 ) , TYPE_4 . METHOD_4 ( 1 ) , TYPE_5 . METHOD_3 ( STRING_6 ) ) ; )  return new TYPE_1 ( VAR_1 , VAR_1 . METHOD_2 ( TYPE_5 . METHOD_3 ( STRING_4 ) ) , new TYPE_4 ( STRING_5 , 16 ) , TYPE_4 . METHOD_4 ( 1 ) , TYPE_5 . METHOD_3 ( STRING_6 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( VAR_1 , STRING_1 ) )  TYPE_1 . METHOD_2 ( VAR_1 , STRING_1 ) ( IF IF ( COND ( ( VAR_2 ) & ( VAR_3 ) ) == 0 ) COND ( ( VAR_2 ) & ( VAR_3 ) ) == 0 ( THEN THEN (  throw new TYPE_2 ( STRING_2 ) ; )  throw new TYPE_2 ( STRING_2 ) ; ) THEN THEN ) IF IF (  mRS . METHOD_3 ( ) )  mRS . METHOD_3 ( ) (  mRS . METHOD_4 ( METHOD_5 ( mRS ) ) )  mRS . METHOD_4 ( METHOD_5 ( mRS ) ) (  TYPE_1 . METHOD_6 ( VAR_1 ) )  TYPE_1 . METHOD_6 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_1 ) ) COND ! ( VAR_1 ) ( THEN THEN (  throw new TYPE_2 ( STRING_1 ) ; )  throw new TYPE_2 ( STRING_1 ) ; ) THEN THEN ) IF IF (  return new TYPE_3 ( VAR_2 , this . METHOD_2 ( ) , this . METHOD_3 ( ) , this . METHOD_4 ( ) , this . METHOD_5 ( ) , offset , VAR_3 ) ; )  return new TYPE_3 ( VAR_2 , this . METHOD_2 ( ) , this . METHOD_3 ( ) , this . METHOD_4 ( ) , this . METHOD_5 ( ) , offset , VAR_3 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_2 ) >= ( VAR_3 ) ) COND ( VAR_2 ) >= ( VAR_3 ) ( THEN THEN ( TRY TRY ( BLOCK BLOCK (  VAR_4 . METHOD_2 ( VAR_5 ) )  VAR_4 . METHOD_2 ( VAR_5 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME ex ) NAME ex ( BLOCK BLOCK (  android.util.Log.e ( TYPE_3 . TAG , STRING_1 ) )  android.util.Log.e ( TYPE_3 . TAG , STRING_1 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  return true ; )  return true ; ) THEN THEN ) IF IF (  ( VAR_2 ) ++ )  ( VAR_2 ) ++ (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  VAR_1 = true )  VAR_1 = true ( TRY TRY ( BLOCK BLOCK (  VAR_2 = VAR_3 . METHOD_2 ( ) )  VAR_2 = VAR_3 . METHOD_2 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_1|TYPE_2 ) TYPE TYPE_1|TYPE_2 ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_2 = null )  VAR_2 = null ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ( TRY TRY ( BLOCK BLOCK (  METHOD_3 ( ) )  METHOD_3 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME VAR_4 ) NAME VAR_4 ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  out . METHOD_1 ( ) )  out . METHOD_1 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = 100 ) INIT = 100 ) VAR VAR (  VAR_1 . METHOD_2 ( VAR_2 ) )  VAR_1 . METHOD_2 ( VAR_2 ) ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . METHOD_3 ( ) ) INIT = VAR_1 . METHOD_3 ( ) ) VAR VAR (  assertTrue ( STRING_1 , ( ( TYPE_2 . METHOD_4 ( ( VAR_3 - VAR_2 ) ) ) <= 10 ) ) )  assertTrue ( STRING_1 , ( ( TYPE_2 . METHOD_4 ( ( VAR_3 - VAR_2 ) ) ) <= 10 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  assertTrue ( VAR_1 . METHOD_2 ( STRING_1 , VAR_2 ) ) )  assertTrue ( VAR_1 . METHOD_2 ( STRING_1 , VAR_2 ) ) (  assertEquals ( VAR_3 , VAR_1 . METHOD_3 ( METHOD_4 ( STRING_1 , VAR_2 ) , VAR_2 ) ) )  assertEquals ( VAR_3 , VAR_1 . METHOD_3 ( METHOD_4 ( STRING_1 , VAR_2 ) , VAR_2 ) ) (  assertFalse ( VAR_1 . METHOD_2 ( STRING_1 , VAR_4 ) ) )  assertFalse ( VAR_1 . METHOD_2 ( STRING_1 , VAR_4 ) ) (  assertEquals ( VAR_5 , VAR_1 . METHOD_3 ( METHOD_4 ( STRING_1 , VAR_4 ) , VAR_4 ) ) )  assertEquals ( VAR_5 , VAR_1 . METHOD_3 ( METHOD_4 ( STRING_1 , VAR_4 ) , VAR_4 ) ) (  assertFalse ( VAR_1 . METHOD_2 ( STRING_1 , VAR_6 ) ) )  assertFalse ( VAR_1 . METHOD_2 ( STRING_1 , VAR_6 ) ) (  assertEquals ( VAR_5 , VAR_1 . METHOD_3 ( METHOD_4 ( STRING_1 , VAR_6 ) , VAR_6 ) ) )  assertEquals ( VAR_5 , VAR_1 . METHOD_3 ( METHOD_4 ( STRING_1 , VAR_6 ) , VAR_6 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK (  VAR_1 . METHOD_1 ( VAR_2 ) )  VAR_1 . METHOD_1 ( VAR_2 ) (  TYPE_1 . d ( VAR_3 . TAG , ( ( ( ( ( ( ( STRING_1 + ( VAR_2 [ 0 ] ) ) + STRING_2 ) + ( VAR_2 [ 1 ] ) ) + STRING_3 ) + ( VAR_1 . METHOD_2 ( ) ) ) + STRING_4 ) + ( METHOD_3 ( ) ) ) ) )  TYPE_1 . d ( VAR_3 . TAG , ( ( ( ( ( ( ( STRING_1 + ( VAR_2 [ 0 ] ) ) + STRING_2 ) + ( VAR_2 [ 1 ] ) ) + STRING_3 ) + ( VAR_1 . METHOD_2 ( ) ) ) + STRING_4 ) + ( METHOD_3 ( ) ) ) ) (  VAR_1 . METHOD_4 ( ) )  VAR_1 . METHOD_4 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.io.File[] ) TYPE java.io.File[] ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.io.File[] ) TYPE java.io.File[] ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE TYPE_1[] ) TYPE TYPE_1[] ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_2 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , false , FLOAT_1 , ( ( TYPE_3 ) ( null ) ) , VAR_5 ) )  TYPE_2 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , false , FLOAT_1 , ( ( TYPE_3 ) ( null ) ) , VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME context ) NAME context ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME version ) NAME version ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND TYPE_2 . METHOD_2 ( context ) ) COND TYPE_2 . METHOD_2 ( context ) ( THEN THEN (  TYPE_2 . METHOD_3 ( context , VAR_1 , version ) )  TYPE_2 . METHOD_3 ( context , VAR_1 , version ) ) THEN THEN ( ELSE ELSE (  TYPE_2 . METHOD_4 ( context ) . METHOD_5 ( ) . METHOD_6 ( VAR_1 , version ) . METHOD_7 ( ) )  TYPE_2 . METHOD_4 ( context ) . METHOD_5 ( ) . METHOD_6 ( VAR_1 , version ) . METHOD_7 ( ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME value ) NAME value ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME m ) NAME m ( INIT = TYPE_3 . METHOD_2 ( value ) ) INIT = TYPE_3 . METHOD_2 ( value ) ) VAR VAR ( IF IF ( COND m . METHOD_3 ( ) ) COND m . METHOD_3 ( ) ( THEN THEN (  return new TYPE_1 ( m . METHOD_4 ( 2 ) , m . METHOD_4 ( 1 ) , m . METHOD_4 ( 3 ) ) ; )  return new TYPE_1 ( m . METHOD_4 ( 2 ) , m . METHOD_4 ( 1 ) , m . METHOD_4 ( 3 ) ) ; ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE TYPE_2<TYPE_3> ) TYPE TYPE_2<TYPE_3> ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_6 ) NAME VAR_6 ) VAR VAR (  VAR_5 = TYPE_5 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) )  VAR_5 = TYPE_5 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ( VAR VAR ( TYPE TYPE_2<TYPE_3> ) TYPE TYPE_2<TYPE_3> ( NAME VAR_7 ) NAME VAR_7 ( INIT = VAR_4 . METHOD_3 ( ) ) INIT = VAR_4 . METHOD_3 ( ) ) VAR VAR (  VAR_7 . METHOD_4 ( VAR_8 ) )  VAR_7 . METHOD_4 ( VAR_8 ) (  TYPE_6 . METHOD_5 ( VAR_5 , VAR_7 ) )  TYPE_6 . METHOD_5 ( VAR_5 , VAR_7 ) (  VAR_6 = TYPE_7 . METHOD_6 ( VAR_5 , true ) )  VAR_6 = TYPE_7 . METHOD_6 ( VAR_5 , true ) (  return VAR_6 ; )  return VAR_6 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME url ) NAME url ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_2 ) ) COND ! ( VAR_2 ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( IF IF ( COND ! ( METHOD_2 ( ) ) ) COND ! ( METHOD_2 ( ) ) ( THEN THEN (  TYPE_2 . METHOD_3 ( url , ( ( TYPE_3 . METHOD_4 ( ) ) - ( VAR_3 ) ) ) )  TYPE_2 . METHOD_3 ( url , ( ( TYPE_3 . METHOD_4 ( ) ) - ( VAR_3 ) ) ) ) THEN THEN ) IF IF (  METHOD_5 ( VAR_1 , url ) )  METHOD_5 ( VAR_1 , url ) (  VAR_4 . METHOD_1 ( this ) )  VAR_4 . METHOD_1 ( this ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME start ) NAME start ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( start < 0 ) || ( start > ( input . length ( ) ) ) ) COND ( start < 0 ) || ( start > ( input . length ( ) ) ) ( THEN THEN (  throw new TYPE_1 ( ( ( ( STRING_1 + start ) + STRING_2 ) + ( input . length ( ) ) ) ) ; )  throw new TYPE_1 ( ( ( ( STRING_1 + start ) + STRING_2 ) + ( input . length ( ) ) ) ) ; ) THEN THEN ) IF IF ( SYNCHRONIZED SYNCHRONIZED (  this )  this ( BLOCK BLOCK (  VAR_1 = TYPE_2 . METHOD_2 ( address , start , VAR_2 ) )  VAR_1 = TYPE_2 . METHOD_2 ( address , start , VAR_2 ) ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_1 ) ( TYPE_2 . METHOD_2 ( new TYPE_3 ( STRING_1 , STRING_2 , STRING_3 ) ) ) ) ) INIT = ( ( TYPE_1 ) ( TYPE_2 . METHOD_2 ( new TYPE_3 ( STRING_1 , STRING_2 , STRING_3 ) ) ) ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME text ) NAME text ( INIT = STRING_4 ) INIT = STRING_4 ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_3 ( text ) ) INIT = VAR_1 . METHOD_3 ( text ) ) VAR VAR (  VAR_2 . METHOD_4 ( 1 ) )  VAR_2 . METHOD_4 ( 1 ) (  assertEquals ( 1 , VAR_2 . METHOD_5 ( ) ) )  assertEquals ( 1 , VAR_2 . METHOD_5 ( ) ) (  VAR_2 . METHOD_6 ( new TYPE_5 ( STRING_5 ) ) )  VAR_2 . METHOD_6 ( new TYPE_5 ( STRING_5 ) ) (  VAR_2 . METHOD_4 ( 1 ) )  VAR_2 . METHOD_4 ( 1 ) (  assertEquals ( 0 , VAR_2 . METHOD_5 ( ) ) )  assertEquals ( 0 , VAR_2 . METHOD_5 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_1 ( VAR_2 ) ) INIT = TYPE_1 . METHOD_1 ( VAR_2 ) ) VAR VAR (  VAR_1 . METHOD_2 ( VAR_3 ) )  VAR_1 . METHOD_2 ( VAR_3 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME s ) NAME s ( INIT = new TYPE_2 ( VAR_1 , VAR_4 , VAR_5 ) ) INIT = new TYPE_2 ( VAR_1 , VAR_4 , VAR_5 ) ) VAR VAR (  METHOD_3 ( VAR_1 , s ) )  METHOD_3 ( VAR_1 , s ) (  s . METHOD_4 ( ) )  s . METHOD_4 ( ) (  VAR_1 . METHOD_5 ( ) )  VAR_1 . METHOD_5 ( ) (  METHOD_6 ( ) )  METHOD_6 ( ) (  VAR_1 . METHOD_7 ( ) )  VAR_1 . METHOD_7 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME m ) NAME m ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME v ) NAME v ) VAR VAR ( VAR VAR ( TYPE double ) TYPE double ( NAME value ) NAME value ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = false ) INIT = false ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( IF IF ( COND v == null ) COND v == null ( THEN THEN (  m . METHOD_2 ( value ) )  m . METHOD_2 ( value ) ) THEN THEN ( ELSE ELSE (  m . METHOD_2 ( v , value ) )  m . METHOD_2 ( v , value ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_2 = true )  VAR_2 = true ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  TYPE_4 . assertEquals ( VAR_2 , VAR_1 ) )  TYPE_4 . assertEquals ( VAR_2 , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME start ) NAME start ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_6 ) NAME VAR_6 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_7 ) NAME VAR_7 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME entry ) NAME entry ( INIT = VAR_1 . METHOD_2 ( start , VAR_2 , null ) ) INIT = VAR_1 . METHOD_2 ( start , VAR_2 , null ) ) VAR VAR (  assertEquals ( STRING_1 , VAR_3 , VAR_8 ) )  assertEquals ( STRING_1 , VAR_3 , VAR_8 ) (  assertEquals ( STRING_2 , VAR_4 , VAR_9 ) )  assertEquals ( STRING_2 , VAR_4 , VAR_9 ) (  assertEquals ( STRING_3 , VAR_5 , VAR_10 ) )  assertEquals ( STRING_3 , VAR_5 , VAR_10 ) (  assertEquals ( STRING_4 , VAR_6 , VAR_11 ) )  assertEquals ( STRING_4 , VAR_6 , VAR_11 ) (  assertEquals ( STRING_5 , VAR_7 , VAR_12 ) )  assertEquals ( STRING_5 , VAR_7 , VAR_12 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( VAR_3 ) - ( VAR_4 ) ) INIT = ( VAR_3 ) - ( VAR_4 ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_5 ) NAME VAR_5 ( INIT = ( VAR_6 ) - ( VAR_7 ) ) INIT = ( VAR_6 ) - ( VAR_7 ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_8 ) NAME VAR_8 ( INIT = ( VAR_5 * ( VAR_1 - ( VAR_4 ) ) ) / VAR_2 ) INIT = ( VAR_5 * ( VAR_1 - ( VAR_4 ) ) ) / VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_9 ) NAME VAR_9 ( INIT = ( VAR_7 ) + VAR_8 ) INIT = ( VAR_7 ) + VAR_8 ) VAR VAR (  android.util.Log.d ( VAR_10 . TAG , ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + VAR_9 ) ) )  android.util.Log.d ( VAR_10 . TAG , ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + VAR_9 ) ) (  return VAR_9 ; )  return VAR_9 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME test ) NAME test ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.StringBuilder ) TYPE java.lang.StringBuilder ( NAME path ) NAME path ( INIT = new java.lang.StringBuilder ( STRING_1 ) ) INIT = new java.lang.StringBuilder ( STRING_1 ) ) VAR VAR (  path . append ( VAR_2 ) )  path . append ( VAR_2 ) (  path . append ( test . METHOD_2 ( ) . getName ( ) . METHOD_3 ( CHAR_1 , VAR_2 ) ) )  path . append ( test . METHOD_2 ( ) . getName ( ) . METHOD_3 ( CHAR_1 , VAR_2 ) ) (  path . append ( VAR_1 ) )  path . append ( VAR_1 ) ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = path . toString ( ) ) INIT = path . toString ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME in ) NAME in ( INIT = VAR_4 class . METHOD_4 ( VAR_3 ) ) INIT = VAR_4 class . METHOD_4 ( VAR_3 ) ) VAR VAR (  assertNotNull ( ( STRING_2 + path ) , in ) )  assertNotNull ( ( STRING_2 + path ) , in ) (  return TYPE_4 . METHOD_5 ( in ) ; )  return TYPE_4 . METHOD_5 ( in ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME provider ) NAME provider ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  provider . METHOD_2 ( STRING_1 , ( ( VAR_1 ) + STRING_2 ) ) )  provider . METHOD_2 ( STRING_1 , ( ( VAR_1 ) + STRING_2 ) ) (  provider . METHOD_2 ( STRING_3 , ( ( VAR_1 ) + STRING_4 ) ) )  provider . METHOD_2 ( STRING_3 , ( ( VAR_1 ) + STRING_4 ) ) (  provider . METHOD_2 ( STRING_5 , ( ( VAR_1 ) + STRING_6 ) ) )  provider . METHOD_2 ( STRING_5 , ( ( VAR_1 ) + STRING_6 ) ) (  provider . METHOD_2 ( STRING_7 , STRING_8 ) )  provider . METHOD_2 ( STRING_7 , STRING_8 ) (  provider . METHOD_2 ( STRING_9 , ( ( VAR_1 ) + STRING_10 ) ) )  provider . METHOD_2 ( STRING_9 , ( ( VAR_1 ) + STRING_10 ) ) (  provider . METHOD_2 ( STRING_11 , STRING_8 ) )  provider . METHOD_2 ( STRING_11 , STRING_8 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME m ) NAME m ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME v ) NAME v ) VAR VAR ( VAR VAR ( TYPE double ) TYPE double ( NAME value ) NAME value ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = false ) INIT = false ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( IF IF ( COND v == null ) COND v == null ( THEN THEN (  m . METHOD_2 ( value ) )  m . METHOD_2 ( value ) ) THEN THEN ( ELSE ELSE (  m . METHOD_2 ( v , value ) )  m . METHOD_2 ( v , value ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_2 = true )  VAR_2 = true ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  TYPE_4 . METHOD_3 ( VAR_2 , VAR_1 ) )  TYPE_4 . METHOD_3 ( VAR_2 , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME n ) NAME n ( INIT = VAR_1 . length ) INIT = VAR_1 . length ) VAR VAR ( IF IF ( COND n == 0 ) COND n == 0 ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < n ) COND i < n ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 [ i ] . VAR_2 . length ) != 0 ) COND ( VAR_1 [ i ] . VAR_2 . length ) != 0 ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR FOR (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME uri ) NAME uri ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME userId ) NAME userId ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_2 ) == null ) COND ( VAR_2 ) == null ( THEN THEN ( SYNCHRONIZED SYNCHRONIZED (  VAR_3 )  VAR_3 ( BLOCK BLOCK ( IF IF ( COND ( VAR_4 ) == null ) COND ( VAR_4 ) == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED (  METHOD_2 ( VAR_1 , uri , userId ) )  METHOD_2 ( VAR_1 , uri , userId ) ) THEN THEN ( ELSE ELSE (  VAR_2 . METHOD_3 ( new TYPE_2 ( VAR_1 , uri , userId ) ) )  VAR_2 . METHOD_3 ( new TYPE_2 ( VAR_1 , uri , userId ) ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  android.util.Log.v ( VAR_1 . TAG , STRING_1 ) )  android.util.Log.v ( VAR_1 . TAG , STRING_1 ) ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME result ) NAME result ( INIT = false ) INIT = false ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME service ) NAME service ( INIT = VAR_2 ) INIT = VAR_2 ) VAR VAR ( IF IF ( COND service != null ) COND service != null ( THEN THEN ( TRY TRY ( BLOCK BLOCK (  result = service . METHOD_1 ( ) )  result = service . METHOD_1 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME e ) NAME e ( BLOCK BLOCK (  android.util.Log.e ( VAR_1 . TAG , e.toString ( ) ) )  android.util.Log.e ( VAR_1 . TAG , e.toString ( ) ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) THEN THEN ( ELSE ELSE (  android.util.Log.w ( VAR_1 . TAG , STRING_2 ) )  android.util.Log.w ( VAR_1 . TAG , STRING_2 ) ) ELSE ELSE ) IF IF (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK ( WHILE WHILE ( COND true ) COND true ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.Runnable ) TYPE java.lang.Runnable ( NAME r ) NAME r ( INIT = null ) INIT = null ) VAR VAR ( SYNCHRONIZED SYNCHRONIZED (  VAR_1 )  VAR_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 . size ( ) ) == 0 ) COND ( VAR_1 . size ( ) ) == 0 ( THEN THEN ( TRY TRY ( BLOCK BLOCK (  VAR_1 . METHOD_1 ( ) )  VAR_1 . METHOD_1 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME ex ) NAME ex ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_1 . size ( ) ) > 0 ) COND ( VAR_1 . size ( ) ) > 0 ( THEN THEN (  r = VAR_1 . METHOD_2 ( 0 ) )  r = VAR_1 . METHOD_2 ( 0 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ( IF IF ( COND r != null ) COND r != null ( THEN THEN (  r . run ( ) )  r . run ( ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) WHILE WHILE ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 . METHOD_2 ( VAR_1 ) ) INIT = VAR_4 . METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_3 == null ) COND VAR_3 == null ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_4 . METHOD_2 ( VAR_2 ) ) INIT = VAR_4 . METHOD_2 ( VAR_2 ) ) VAR VAR ( IF IF ( COND VAR_5 == null ) COND VAR_5 == null ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  return VAR_6 . equals ( VAR_7 ) ; )  return VAR_6 . equals ( VAR_7 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) == null ) COND ( VAR_1 ) == null ( THEN THEN ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_3 ( ) ) INIT = METHOD_3 ( ) ) VAR VAR ( IF IF ( COND VAR_2 . METHOD_4 ( ) ) COND VAR_2 . METHOD_4 ( ) ( THEN THEN (  VAR_1 = TYPE_2 . METHOD_5 ( VAR_2 ) )  VAR_1 = TYPE_2 . METHOD_5 ( VAR_2 ) ) THEN THEN ( ELSE ELSE (  VAR_3 . METHOD_6 ( this , VAR_4 , ( STRING_1 + ( VAR_4 . METHOD_7 ( ) ) ) ) )  VAR_3 . METHOD_6 ( this , VAR_4 , ( STRING_1 + ( VAR_4 . METHOD_7 ( ) ) ) ) (  return null ; )  return null ; ) ELSE ELSE ) IF IF ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.Set<java.lang.String> ) RETURN java.util.Set<java.lang.String> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.Set<java.lang.String> ) TYPE java.util.Set<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<java.lang.String> ) TYPE TYPE_1<java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 < java.lang.String > ( ) ) INIT = new TYPE_1 < java.lang.String > ( ) ) VAR VAR ( IF IF ( COND METHOD_2 ( ) ) COND METHOD_2 ( ) ( THEN THEN (  VAR_2 . METHOD_3 ( VAR_3 ) )  VAR_2 . METHOD_3 ( VAR_3 ) ) THEN THEN ) IF IF (  VAR_2 . METHOD_4 ( super . METHOD_1 ( VAR_1 ) ) )  VAR_2 . METHOD_4 ( super . METHOD_1 ( VAR_1 ) ) (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( ) )  VAR_1 . METHOD_2 ( ) (  fail ( STRING_1 ) )  fail ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  VAR_1 = new TYPE_2 ( VAR_2 ) )  VAR_1 = new TYPE_2 ( VAR_2 ) (  VAR_1 . METHOD_3 ( new TYPE_3 ( STRING_2 ) ) )  VAR_1 . METHOD_3 ( new TYPE_3 ( STRING_2 ) ) (  VAR_1 . METHOD_4 ( ) )  VAR_1 . METHOD_4 ( ) (  VAR_1 . METHOD_2 ( ) )  VAR_1 . METHOD_2 ( ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( new TYPE_4 ( ) ) ) INIT = new TYPE_2 ( new TYPE_4 ( ) ) ) VAR VAR (  VAR_1 . METHOD_3 ( new TYPE_3 ( STRING_3 ) ) )  VAR_1 . METHOD_3 ( new TYPE_3 ( STRING_3 ) ) (  VAR_1 . METHOD_2 ( ) )  VAR_1 . METHOD_2 ( ) (  VAR_1 . METHOD_2 ( ) )  VAR_1 . METHOD_2 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE android.bluetooth.BluetoothDevice ) TYPE android.bluetooth.BluetoothDevice ( NAME device ) NAME device ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME result ) NAME result ( INIT = false ) INIT = false ) VAR VAR ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  android.util.Log.d ( TYPE_1 . TAG , STRING_1 ) )  android.util.Log.d ( TYPE_1 . TAG , STRING_1 ) ) THEN THEN ) IF IF ( IF IF ( COND ( ( TYPE_1 . METHOD_2 ( ) ) != null ) && ( TYPE_1 . METHOD_2 ( ) . equals ( device ) ) ) COND ( ( TYPE_1 . METHOD_2 ( ) ) != null ) && ( TYPE_1 . METHOD_2 ( ) . equals ( device ) ) ( THEN THEN ( SWITCH SWITCH ( NAME VAR_2 ) NAME VAR_2 ( CASE VAR_3 ( BLOCK BLOCK (  METHOD_3 ( ( - 1 ) ) )  METHOD_3 ( ( - 1 ) ) (  result = true )  result = true (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_3 ( DEFAULT DEFAULT ( BLOCK BLOCK (  break ; )  break ; ) BLOCK BLOCK ) DEFAULT DEFAULT ) SWITCH SWITCH ) THEN THEN ) IF IF (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME t ) NAME t ( INIT = VAR_1 ) INIT = VAR_1 ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < ( ( VAR_1 . METHOD_2 ( ) ) - 1 ) ) COND i < ( ( VAR_1 . METHOD_2 ( ) ) - 1 ) ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK (  t = t . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) )  t = t . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) ) BLOCK BLOCK ) FOR FOR (  return t . METHOD_5 ( ) ; )  return t . METHOD_5 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( ) ) INIT = TYPE_1 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 ( 0 , VAR_1 ) ) INIT = new TYPE_2 ( 0 , VAR_1 ) ) VAR VAR (  assertEquals ( TYPE_1 . METHOD_3 ( TYPE_1 . METHOD_2 ( ) . METHOD_4 ( ) ) , VAR_2 . METHOD_5 ( ) ) )  assertEquals ( TYPE_1 . METHOD_3 ( TYPE_1 . METHOD_2 ( ) . METHOD_4 ( ) ) , VAR_2 . METHOD_5 ( ) ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME s ) NAME s ( INIT = new TYPE_2 ( 0 ) ) INIT = new TYPE_2 ( 0 ) ) VAR VAR (  assertTrue ( ( STRING_1 + ( s . METHOD_6 ( ) ) ) , ( ( s . METHOD_5 ( ) ) instanceof TYPE_3 ) ) )  assertTrue ( ( STRING_1 + ( s . METHOD_6 ( ) ) ) , ( ( s . METHOD_5 ( ) ) instanceof TYPE_3 ) ) (  s . METHOD_7 ( ) )  s . METHOD_7 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME in ) NAME in ( INIT = VAR_1 ) INIT = VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = in . METHOD_2 ( ) ) INIT = in . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME id ) NAME id ( INIT = METHOD_3 ( ) ) INIT = METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = in . METHOD_2 ( ) ) INIT = in . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ( INIT = VAR_4 . get ( METHOD_3 ( ) ) ) INIT = VAR_4 . get ( METHOD_3 ( ) ) ) VAR VAR (  VAR_5 . METHOD_4 ( id , name ) )  VAR_5 . METHOD_4 ( id , name ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME result ) NAME result ( INIT = false ) INIT = false ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( SYNCHRONIZED SYNCHRONIZED (  this )  this ( BLOCK BLOCK (  VAR_2 = false )  VAR_2 = false (  VAR_1 = VAR_3 )  VAR_1 = VAR_3 ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN (  VAR_1 . METHOD_2 ( ) )  VAR_1 . METHOD_2 ( ) ( TRY TRY ( BLOCK BLOCK (  VAR_1 . METHOD_3 ( ) )  VAR_1 . METHOD_3 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ( SYNCHRONIZED SYNCHRONIZED (  this )  this ( BLOCK BLOCK (  VAR_3 = null )  VAR_3 = null ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED (  result = true )  result = true ) THEN THEN ( ELSE ELSE (  result = METHOD_4 ( ) )  result = METHOD_4 ( ) ) ELSE ELSE ) IF IF (  VAR_4 = - 1 )  VAR_4 = - 1 (  VAR_5 = - 1 )  VAR_5 = - 1 (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public final ) MODIFIER public final ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ) VAR VAR ( VAR VAR ( TYPE double ) TYPE double ( NAME x ) NAME x ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  throw new TYPE_2 ( ) ; )  throw new TYPE_2 ( ) ; ) THEN THEN ) IF IF ( IF IF ( COND ! ( VAR_2 ) ) COND ! ( VAR_2 ) ( THEN THEN (  throw new TYPE_3 ( STRING_1 ) ; )  throw new TYPE_3 ( STRING_1 ) ; ) THEN THEN ) IF IF (  METHOD_1 ( METHOD_2 ( METHOD_3 ( i , VAR_3 ) ) , x ) )  METHOD_1 ( METHOD_2 ( METHOD_3 ( i , VAR_3 ) ) , x ) (  return this ; )  return this ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( STRING_1 ) )  VAR_1 . METHOD_2 ( STRING_1 ) (  VAR_1 . METHOD_3 ( new TYPE_3 ( STRING_2 , VAR_3 ) , new TYPE_3 ( STRING_3 ) ) )  VAR_1 . METHOD_3 ( new TYPE_3 ( STRING_2 , VAR_3 ) , new TYPE_3 ( STRING_3 ) ) ( VAR VAR ( TYPE java.lang.Object[] ) TYPE java.lang.Object[] ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_2 . METHOD_4 ( ) ) INIT = VAR_2 . METHOD_4 ( ) ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < ( VAR_4 . length ) ) COND i < ( VAR_4 . length ) ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK (  VAR_1 . METHOD_5 ( TYPE_4 . text ( STRING_4 , i ) , TYPE_5 . METHOD_6 ( VAR_4 [ i ] ) ) )  VAR_1 . METHOD_5 ( TYPE_4 . text ( STRING_4 , i ) , TYPE_5 . METHOD_6 ( VAR_4 [ i ] ) ) ) BLOCK BLOCK ) FOR FOR (  VAR_1 . METHOD_7 ( ) )  VAR_1 . METHOD_7 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_1 ( VAR_2 ) ) INIT = TYPE_1 . METHOD_1 ( VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME s ) NAME s ( INIT = new TYPE_2 ( VAR_1 , VAR_3 , VAR_4 ) ) INIT = new TYPE_2 ( VAR_1 , VAR_3 , VAR_4 ) ) VAR VAR (  VAR_1 . METHOD_2 ( VAR_5 ) )  VAR_1 . METHOD_2 ( VAR_5 ) (  s . METHOD_3 ( ) )  s . METHOD_3 ( ) (  VAR_1 . METHOD_4 ( ) )  VAR_1 . METHOD_4 ( ) (  METHOD_5 ( ) )  METHOD_5 ( ) (  VAR_1 . METHOD_6 ( ) )  VAR_1 . METHOD_6 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE float ) TYPE float ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE float ) TYPE float ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME d ) NAME d ( INIT = VAR_4 . METHOD_2 ( VAR_1 ) ) INIT = VAR_4 . METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND d == null ) COND d == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  VAR_5 [ 0 ] = 1 )  VAR_5 [ 0 ] = 1 (  VAR_5 [ 1 ] = VAR_2 )  VAR_5 [ 1 ] = VAR_2 (  VAR_5 [ 2 ] = - 0 )  VAR_5 [ 2 ] = - 0 (  VAR_5 [ 3 ] = VAR_3 )  VAR_5 [ 3 ] = VAR_3 (  VAR_5 [ 4 ] = 1 )  VAR_5 [ 4 ] = 1 (  VAR_5 [ 5 ] = 0 )  VAR_5 [ 5 ] = 0 (  VAR_5 [ 6 ] = 0 )  VAR_5 [ 6 ] = 0 (  VAR_5 [ 7 ] = 0 )  VAR_5 [ 7 ] = 0 (  VAR_5 [ 8 ] = 1 )  VAR_5 [ 8 ] = 1 ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME location ) NAME location ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 . METHOD_2 ( ) ) COND VAR_1 . METHOD_2 ( ) ( THEN THEN (  throw new TYPE_3 ( location ) ; )  throw new TYPE_3 ( location ) ; ) THEN THEN ) IF IF ( IF IF ( COND VAR_1 . METHOD_3 ( ) ) COND VAR_1 . METHOD_3 ( ) ( THEN THEN (  VAR_2 . log ( VAR_3 , STRING_1 , new java.lang.Object [ ] { location . METHOD_4 ( ) , VAR_1 . METHOD_5 ( ) } ) )  VAR_2 . log ( VAR_3 , STRING_1 , new java.lang.Object [ ] { location . METHOD_4 ( ) , VAR_1 . METHOD_5 ( ) } ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND ! ( VAR_1 . METHOD_2 ( ) ) ) COND ! ( VAR_1 . METHOD_2 ( ) ) ( THEN THEN (  throw new TYPE_2 ( location ) ; )  throw new TYPE_2 ( location ) ; ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME expected ) NAME expected ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME p ) NAME p ( INIT = new TYPE_2 ( null , expected , ( - 1 ) , null , null , null , VAR_1 , VAR_2 , VAR_3 ) ) INIT = new TYPE_2 ( null , expected , ( - 1 ) , null , null , null , VAR_1 , VAR_2 , VAR_3 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  p . METHOD_3 ( VAR_4 ) )  p . METHOD_3 ( VAR_4 ) (  assertEquals ( expected , VAR_4 ) )  assertEquals ( expected , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  VAR_2 . METHOD_2 ( VAR_1 ) )  VAR_2 . METHOD_2 ( VAR_1 ) (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_1 . METHOD_2 ( VAR_2 ) ) ) COND ! ( VAR_1 . METHOD_2 ( VAR_2 ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 . METHOD_3 ( ) ) INIT = VAR_4 . METHOD_3 ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  assertTrue ( VAR_4 . METHOD_4 ( true ) ) )  assertTrue ( VAR_4 . METHOD_4 ( true ) ) (  METHOD_5 ( VAR_2 ) )  METHOD_5 ( VAR_2 ) ) BLOCK BLOCK ( FINALLY FINALLY ( IF IF ( COND ! VAR_3 ) COND ! VAR_3 ( THEN THEN (  VAR_4 . METHOD_4 ( false ) )  VAR_4 . METHOD_4 ( false ) ) THEN THEN ) IF IF ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME node ) NAME node ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME type ) NAME type ( INIT = TYPE_4 . METHOD_2 ( node , null ) ) INIT = TYPE_4 . METHOD_2 ( node , null ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ( INIT = TYPE_4 . getName ( node ) ) INIT = TYPE_4 . getName ( node ) ) VAR VAR ( IF IF ( COND name != null ) COND name != null ( THEN THEN ( IF IF ( COND type != null ) COND type != null ( THEN THEN (  return new TYPE_1 ( name , type , VAR_1 , node ) ; )  return new TYPE_1 ( name , type , VAR_1 , node ) ; ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1.File ) RETURN TYPE_1.File ( NAME call ) NAME call ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME info ) NAME info ( INIT = VAR_1 . METHOD_1 ( ) . METHOD_2 ( ) . METHOD_3 ( ) ) INIT = VAR_1 . METHOD_1 ( ) . METHOD_2 ( ) . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME path ) NAME path ( INIT = ( info == null ) ? null : info . METHOD_4 ( ) . METHOD_5 ( VAR_2 ) ) INIT = ( info == null ) ? null : info . METHOD_4 ( ) . METHOD_5 ( VAR_2 ) ) VAR VAR ( IF IF ( COND path != null ) COND path != null ( THEN THEN ( VAR VAR ( TYPE TYPE_1.File ) TYPE TYPE_1.File ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_1 . File ( path ) ) INIT = new TYPE_1 . File ( path ) ) VAR VAR (  return VAR_3 . METHOD_6 ( ) ? VAR_3 : null ; )  return VAR_3 . METHOD_6 ( ) ? VAR_3 : null ; ) THEN THEN ( ELSE ELSE (  return null ; )  return null ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME server ) NAME server ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_5 ) NAME VAR_5 ( INIT = TYPE_1 . METHOD_2 ( VAR_4 , VAR_2 , VAR_6 , VAR_7 ) ) INIT = TYPE_1 . METHOD_2 ( VAR_4 , VAR_2 , VAR_6 , VAR_7 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_8 ) NAME VAR_8 ( INIT = TYPE_1 . METHOD_2 ( VAR_4 , VAR_3 , VAR_9 , VAR_10 ) ) INIT = TYPE_1 . METHOD_2 ( VAR_4 , VAR_3 , VAR_9 , VAR_10 ) ) VAR VAR (  return TYPE_1 . METHOD_1 ( VAR_11 , VAR_12 , VAR_13 , VAR_14 , VAR_6 [ 0 ] , VAR_9 [ 0 ] , VAR_7 [ 0 ] , VAR_10 [ 0 ] , VAR_5 , VAR_8 ) ; )  return TYPE_1 . METHOD_1 ( VAR_11 , VAR_12 , VAR_13 , VAR_14 , VAR_6 [ 0 ] , VAR_9 [ 0 ] , VAR_7 [ 0 ] , VAR_10 [ 0 ] , VAR_5 , VAR_8 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private synchronized ) MODIFIER private synchronized ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_3 = VAR_1 )  VAR_3 = VAR_1 (  VAR_4 = VAR_2 )  VAR_4 = VAR_2 ( IF IF ( COND VAR_5 ) COND VAR_5 ( THEN THEN (  android.util.Log.v ( VAR_6 . TAG , ( ( ( ( ( ( ( STRING_1 + ( VAR_3 ) ) + STRING_2 ) + VAR_1 ) + STRING_3 ) + ( VAR_4 ) ) + STRING_2 ) + VAR_2 ) ) )  android.util.Log.v ( VAR_6 . TAG , ( ( ( ( ( ( ( STRING_1 + ( VAR_3 ) ) + STRING_2 ) + VAR_1 ) + STRING_3 ) + ( VAR_4 ) ) + STRING_2 ) + VAR_2 ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( VAR_1 ) )  TYPE_1 . METHOD_2 ( VAR_1 ) (  fail ( ) )  fail ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.NullPointerException ) TYPE java.lang.NullPointerException ( NAME expected ) NAME expected ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ( VAR VAR ( TYPE int ) TYPE int ( NAME c ) NAME c ( INIT = TYPE_1 . METHOD_3 ( ) ) INIT = TYPE_1 . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME s ) NAME s ( INIT = TYPE_1 . METHOD_4 ( c ) ) INIT = TYPE_1 . METHOD_4 ( c ) ) VAR VAR (  assertTrue ( ( ( TYPE_1 . METHOD_2 ( s ) ) != 0 ) ) )  assertTrue ( ( ( TYPE_1 . METHOD_2 ( s ) ) != 0 ) ) (  TYPE_1 . METHOD_5 ( s ) )  TYPE_1 . METHOD_5 ( s ) (  TYPE_1 . METHOD_6 ( c ) )  TYPE_1 . METHOD_6 ( c ) (  TYPE_2 . METHOD_7 ( ) )  TYPE_2 . METHOD_7 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME m ) NAME m ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME v ) NAME v ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME value ) NAME value ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = false ) INIT = false ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( v == null ) ? ( ( java.lang.String ) ( m . METHOD_2 ( ) ) ) : ( ( java.lang.String ) ( m . METHOD_2 ( v ) ) ) ) INIT = ( v == null ) ? ( ( java.lang.String ) ( m . METHOD_2 ( ) ) ) : ( ( java.lang.String ) ( m . METHOD_2 ( v ) ) ) ) VAR VAR (  TYPE_3 . assertTrue ( VAR_3 . equals ( value ) ) )  TYPE_3 . assertTrue ( VAR_3 . equals ( value ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_2 = true )  VAR_2 = true ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  TYPE_3 . METHOD_3 ( VAR_2 , VAR_1 ) )  TYPE_3 . METHOD_3 ( VAR_2 , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER synchronized ) MODIFIER synchronized ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME w ) NAME w ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME h ) NAME h ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ( VAR VAR ( TYPE float[] ) TYPE float[] ( NAME d ) NAME d ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_6 ) NAME VAR_6 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  METHOD_3 ( mContext , id , VAR_1 , VAR_2 , VAR_3 , VAR_4 , w , h , VAR_5 , d , VAR_6 ) )  METHOD_3 ( mContext , id , VAR_1 , VAR_2 , VAR_3 , VAR_4 , w , h , VAR_5 , d , VAR_6 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( STRING_1 ) ) INIT = TYPE_1 . METHOD_2 ( STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 ( null , null ) ) INIT = new TYPE_2 ( null , null ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_3 = VAR_1 . METHOD_3 ( VAR_2 ) )  VAR_3 = VAR_1 . METHOD_3 ( VAR_2 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.NullPointerException ) TYPE java.lang.NullPointerException ( NAME e ) NAME e ( BLOCK BLOCK (  return ; )  return ; ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME e ) NAME e ( BLOCK BLOCK (  return ; )  return ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_5 . METHOD_2 ( STRING_2 ) ) INIT = TYPE_5 . METHOD_2 ( STRING_2 ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_4 . METHOD_4 ( VAR_3 ) )  VAR_4 . METHOD_4 ( VAR_3 ) (  fail ( STRING_3 ) )  fail ( STRING_3 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( ) . METHOD_2 ( VAR_2 ) . build ( ) ) INIT = new TYPE_2 ( ) . METHOD_2 ( VAR_2 ) . build ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_3 ( ) ) INIT = new TYPE_3 ( ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ( INIT = INT_1 ) INIT = INT_1 ) VAR VAR (  VAR_5 . METHOD_3 ( VAR_1 , VAR_3 , VAR_4 ) )  VAR_5 . METHOD_3 ( VAR_1 , VAR_3 , VAR_4 ) (  VAR_6 = new TYPE_4 ( VAR_7 ) )  VAR_6 = new TYPE_4 ( VAR_7 ) (  VAR_6 . METHOD_4 ( false ) )  VAR_6 . METHOD_4 ( false ) (  VAR_3 . METHOD_5 ( VAR_6 , false , VAR_4 ) )  VAR_3 . METHOD_5 ( VAR_6 , false , VAR_4 ) (  VAR_3 . METHOD_6 ( ) )  VAR_3 . METHOD_6 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 ) INIT = VAR_3 ) VAR VAR ( IF IF ( COND ( VAR_4 ) != null ) COND ( VAR_4 ) != null ( THEN THEN (  VAR_4 . METHOD_2 ( VAR_5 ) )  VAR_4 . METHOD_2 ( VAR_5 ) (  VAR_3 = VAR_5 . equals ( VAR_1 ) )  VAR_3 = VAR_5 . equals ( VAR_1 ) ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_6 . equals ( VAR_1 ) ) && ( VAR_2 == ( VAR_3 ) ) ) COND ( VAR_6 . equals ( VAR_1 ) ) && ( VAR_2 == ( VAR_3 ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  VAR_7 . METHOD_1 ( VAR_1 ) )  VAR_7 . METHOD_1 ( VAR_1 ) (  VAR_8 . METHOD_1 ( VAR_1 ) )  VAR_8 . METHOD_1 ( VAR_1 ) (  VAR_6 . set ( VAR_1 ) )  VAR_6 . set ( VAR_1 ) (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME context ) NAME context ( INIT = TYPE_3 . METHOD_2 ( ) ) INIT = TYPE_3 . METHOD_2 ( ) ) VAR VAR (  return new TYPE_1 ( TYPE_4 . METHOD_3 ( VAR_1 ) , TYPE_4 . METHOD_4 ( context , VAR_1 ) , TYPE_4 . METHOD_5 ( context , VAR_1 ) , TYPE_4 . METHOD_6 ( VAR_1 , VAR_2 ) , TYPE_4 . METHOD_7 ( VAR_1 ) ) ; )  return new TYPE_1 ( TYPE_4 . METHOD_3 ( VAR_1 ) , TYPE_4 . METHOD_4 ( context , VAR_1 ) , TYPE_4 . METHOD_5 ( context , VAR_1 ) , TYPE_4 . METHOD_6 ( VAR_1 , VAR_2 ) , TYPE_4 . METHOD_7 ( VAR_1 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  assertTrue ( STRING_1 , METHOD_2 ( ( ( ( VAR_3 ) + STRING_2 ) + ( VAR_4 ) ) , VAR_5 ) ) )  assertTrue ( STRING_1 , METHOD_2 ( ( ( ( VAR_3 ) + STRING_2 ) + ( VAR_4 ) ) , VAR_5 ) ) ) THEN THEN ) IF IF (  assertTrue ( STRING_3 , METHOD_3 ( STRING_4 , VAR_5 ) ) )  assertTrue ( STRING_3 , METHOD_3 ( STRING_4 , VAR_5 ) ) (  METHOD_4 ( ) )  METHOD_4 ( ) ) THEN THEN ) IF IF (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . METHOD_3 ( name ) ) INIT = VAR_1 . METHOD_3 ( name ) ) VAR VAR (  VAR_1 . METHOD_4 ( VAR_3 ) )  VAR_1 . METHOD_4 ( VAR_3 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  android.util.Log.e ( VAR_2 . TAG , ( ( STRING_1 + ( this . METHOD_2 ( ) . METHOD_3 ( ) ) ) + ( VAR_1 == null ? STRING_2 : STRING_3 + VAR_1 ) ) , e ) )  android.util.Log.e ( VAR_2 . TAG , ( ( STRING_1 + ( this . METHOD_2 ( ) . METHOD_3 ( ) ) ) + ( VAR_1 == null ? STRING_2 : STRING_3 + VAR_1 ) ) , e ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( STRING_1 ) ) INIT = TYPE_1 . METHOD_2 ( STRING_1 ) ) VAR VAR (  assertEquals ( 0 , TYPE_1 . METHOD_3 ( VAR_1 ) ) )  assertEquals ( 0 , TYPE_1 . METHOD_3 ( VAR_1 ) ) ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_1 . METHOD_2 ( STRING_2 ) ) INIT = TYPE_1 . METHOD_2 ( STRING_2 ) ) VAR VAR (  assertEquals ( 16 , TYPE_1 . METHOD_3 ( VAR_2 ) ) )  assertEquals ( 16 , TYPE_1 . METHOD_3 ( VAR_2 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( STRING_1 , null , VAR_1 , TYPE_1 . METHOD_3 ( ) , VAR_2 ) )  METHOD_2 ( STRING_1 , null , VAR_1 , TYPE_1 . METHOD_3 ( ) , VAR_2 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME call ) NAME call ( INIT = VAR_3 . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( ) . METHOD_7 ( ) ) INIT = VAR_3 . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( ) . METHOD_7 ( ) ) VAR VAR (  assertEquals ( VAR_2 , call . METHOD_9 ( ) ) )  assertEquals ( VAR_2 , call . METHOD_9 ( ) ) (  call . METHOD_10 ( VAR_4 . METHOD_11 ( ) ) )  call . METHOD_10 ( VAR_4 . METHOD_11 ( ) ) (  assertEquals ( VAR_2 , call . METHOD_9 ( ) ) )  assertEquals ( VAR_2 , call . METHOD_9 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<TYPE_2> ) RETURN TYPE_1<TYPE_2> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  VAR_1 )  VAR_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_2 ) == null ) COND ( VAR_2 ) == null ( THEN THEN (  return VAR_3 ; )  return VAR_3 ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( IN VAR_2 . values ( ) ) IN VAR_2 . values ( ) ( BLOCK BLOCK ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_2 . values ( ) ; )  return VAR_2 . values ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME input ) NAME input ) VAR VAR ( VAR VAR ( TYPE char[] ) TYPE char[] ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_2 ( input ) ) INIT = TYPE_2 . METHOD_2 ( input ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR (  VAR_4 . METHOD_3 ( VAR_5 ) )  VAR_4 . METHOD_3 ( VAR_5 ) (  VAR_3 = VAR_4 . METHOD_1 ( VAR_2 ) )  VAR_3 = VAR_4 . METHOD_1 ( VAR_2 ) (  VAR_3 . METHOD_4 ( ) )  VAR_3 . METHOD_4 ( ) (  TYPE_4 . METHOD_5 ( STRING_1 , VAR_1 , VAR_3 ) )  TYPE_4 . METHOD_5 ( STRING_1 , VAR_1 , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER synchronized ) MODIFIER synchronized ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME w ) NAME w ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME h ) NAME h ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME d ) NAME d ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  METHOD_3 ( mContext , id , VAR_1 , VAR_2 , VAR_3 , VAR_4 , w , h , d , VAR_5 ) )  METHOD_3 ( mContext , id , VAR_1 , VAR_2 , VAR_3 , VAR_4 , w , h , d , VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME address ) NAME address ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ! ( VAR_1 instanceof TYPE_2 ) ) || ( ( address . METHOD_2 ( CHAR_1 ) ) != ( - 1 ) ) ) COND ( ! ( VAR_1 instanceof TYPE_2 ) ) || ( ( address . METHOD_2 ( CHAR_1 ) ) != ( - 1 ) ) ( THEN THEN (  return VAR_1 ; )  return VAR_1 ; ) THEN THEN ) IF IF (  return VAR_2 . METHOD_3 ( VAR_3 , address ) ; )  return VAR_2 . METHOD_3 ( VAR_3 , address ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME args ) NAME args ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME t ) NAME t ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  t . METHOD_2 ( 0 , 0 , false ) )  t . METHOD_2 ( 0 , 0 , false ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME in ) NAME in ( INIT = t . METHOD_3 ( VAR_1 ) ) INIT = t . METHOD_3 ( VAR_1 ) ) VAR VAR (  args.out = t . METHOD_3 ( TYPE_4 . METHOD_4 ( VAR_1 ) , TYPE_4 . METHOD_4 ( in . METHOD_5 ( ) ) , TYPE_4 . METHOD_4 ( in . METHOD_6 ( ) ) ) )  args.out = t . METHOD_3 ( TYPE_4 . METHOD_4 ( VAR_1 ) , TYPE_4 . METHOD_4 ( in . METHOD_5 ( ) ) , TYPE_4 . METHOD_4 ( in . METHOD_6 ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( VAR_2 ) ) INIT = new TYPE_1 ( VAR_2 ) ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < ( VAR_2 ) ) COND i < ( VAR_2 ) ( UPDATE UPDATE (  ++ i )  ++ i ) UPDATE UPDATE ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.Integer ) TYPE java.lang.Integer ( NAME VAR_3 ) NAME VAR_3 ( INIT = new java.lang.Integer ( i ) ) INIT = new java.lang.Integer ( i ) ) VAR VAR (  VAR_1 . METHOD_2 ( VAR_3 ) )  VAR_1 . METHOD_2 ( VAR_3 ) (  assertTrue ( VAR_1 . METHOD_3 ( VAR_3 ) ) )  assertTrue ( VAR_1 . METHOD_3 ( VAR_3 ) ) ) BLOCK BLOCK ) FOR FOR (  assertEquals ( VAR_4 , VAR_1 . size ( ) ) )  assertEquals ( VAR_4 , VAR_1 . size ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( VAR_1 ) ) INIT = METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_3 ) COND VAR_3 ( THEN THEN (  java.lang.System.out.println ( ( ( ( STRING_1 + ( VAR_4 . METHOD_3 ( ) ) ) + STRING_2 ) + VAR_1 ) ) )  java.lang.System.out.println ( ( ( ( STRING_1 + ( VAR_4 . METHOD_3 ( ) ) ) + STRING_2 ) + VAR_1 ) ) ) THEN THEN ) IF IF (  VAR_5 . METHOD_4 ( VAR_2 ) )  VAR_5 . METHOD_4 ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER synchronized ) MODIFIER synchronized ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_3 ) == null ) COND ( VAR_3 ) == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( SYNCHRONIZED SYNCHRONIZED (  VAR_4 )  VAR_4 ( BLOCK BLOCK ( IF IF ( COND ( VAR_4 . METHOD_2 ( VAR_1 ) ) == false ) COND ( VAR_4 . METHOD_2 ( VAR_1 ) ) == false ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED (  VAR_1 . METHOD_3 ( VAR_2 ) )  VAR_1 . METHOD_3 ( VAR_2 ) (  METHOD_4 ( VAR_5 , VAR_1 ) )  METHOD_4 ( VAR_5 , VAR_1 ) (  METHOD_5 ( ) )  METHOD_5 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = super . METHOD_1 ( ) ) INIT = super . METHOD_1 ( ) ) VAR VAR (  VAR_1 |= VAR_2 )  VAR_1 |= VAR_2 ( IF IF ( COND ! ( METHOD_2 ( ) ) ) COND ! ( METHOD_2 ( ) ) ( THEN THEN (  VAR_1 |= VAR_3 )  VAR_1 |= VAR_3 ( IF IF ( COND ( ( METHOD_3 ( ) ) == ( VAR_4 ) ) || ( ( METHOD_3 ( ) ) == ( VAR_5 ) ) ) COND ( ( METHOD_3 ( ) ) == ( VAR_4 ) ) || ( ( METHOD_3 ( ) ) == ( VAR_5 ) ) ( THEN THEN (  VAR_1 |= VAR_6 )  VAR_1 |= VAR_6 ) THEN THEN ) IF IF ) THEN THEN ) IF IF ( IF IF ( COND ( ( METHOD_4 ( ) ) & ( VAR_7 ) ) != 0 ) COND ( ( METHOD_4 ( ) ) & ( VAR_7 ) ) != 0 ( THEN THEN (  VAR_1 |= VAR_8 )  VAR_1 |= VAR_8 ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME run ) NAME run ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.Class[] ) TYPE java.lang.Class[] ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.lang.Class [ 2 ] ) INIT = new java.lang.Class [ 2 ] ) VAR VAR (  VAR_1 [ 0 ] = VAR_2 class )  VAR_1 [ 0 ] = VAR_2 class (  VAR_1 [ 1 ] = VAR_3 )  VAR_1 [ 1 ] = VAR_3 ( VAR VAR ( TYPE java.lang.Class ) TYPE java.lang.Class ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_5 . METHOD_1 ( ) ) INIT = VAR_5 . METHOD_1 ( ) ) VAR VAR ( WHILE WHILE ( COND true ) COND true ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  VAR_4 . METHOD_2 ( STRING_1 , VAR_1 ) )  VAR_4 . METHOD_2 ( STRING_1 , VAR_1 ) (  return TYPE_1 . FALSE ; )  return TYPE_1 . FALSE ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_4 = VAR_4 . METHOD_3 ( ) )  VAR_4 = VAR_4 . METHOD_3 ( ) ( IF IF ( COND VAR_4 . equals ( VAR_6 class ) ) COND VAR_4 . equals ( VAR_6 class ) ( THEN THEN (  return TYPE_1 . TRUE ; )  return TYPE_1 . TRUE ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) WHILE WHILE ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME expected ) NAME expected ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( expected . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) ) COND ! ( expected . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) ( THEN THEN ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_3 ) ( expected ) ) ) INIT = ( ( TYPE_3 ) ( expected ) ) ) VAR VAR (  return new TYPE_4 ( VAR_1 . METHOD_4 ( ) , VAR_2 , VAR_1 ) ; )  return new TYPE_4 ( VAR_1 . METHOD_4 ( ) , VAR_2 , VAR_1 ) ; ) THEN THEN ( ELSE ELSE (  return VAR_1 ; )  return VAR_1 ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME location ) NAME location ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( IF IF ( COND VAR_1 . METHOD_2 ( ) ) COND VAR_1 . METHOD_2 ( ) ( THEN THEN (  VAR_2 . log ( VAR_3 , STRING_1 , new java.lang.Object [ ] { location . METHOD_3 ( ) , VAR_1 . METHOD_4 ( ) } ) )  VAR_2 . log ( VAR_3 , STRING_1 , new java.lang.Object [ ] { location . METHOD_3 ( ) , VAR_1 . METHOD_4 ( ) } ) (  return ; )  return ; ) THEN THEN ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_2 ( location ) ; )  throw new TYPE_2 ( location ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  throw new TYPE_3 ( location ) ; )  throw new TYPE_3 ( location ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME path ) NAME path ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . get ( path ) ) INIT = VAR_2 . get ( path ) ) VAR VAR ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_3 . METHOD_2 ( path ) ) INIT = TYPE_3 . METHOD_2 ( path ) ) VAR VAR ( IF IF ( COND VAR_3 != null ) COND VAR_3 != null ( THEN THEN (  return VAR_3 . METHOD_3 ( ) ; )  return VAR_3 . METHOD_3 ( ) ; ) THEN THEN ) IF IF (  VAR_2 . METHOD_4 ( path , VAR_1 ) )  VAR_2 . METHOD_4 ( path , VAR_1 ) ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public final ) MODIFIER public final ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ) VAR VAR ( VAR VAR ( TYPE float ) TYPE float ( NAME x ) NAME x ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  throw new TYPE_2 ( ) ; )  throw new TYPE_2 ( ) ; ) THEN THEN ) IF IF ( IF IF ( COND ! ( VAR_2 ) ) COND ! ( VAR_2 ) ( THEN THEN (  throw new TYPE_3 ( STRING_1 ) ; )  throw new TYPE_3 ( STRING_1 ) ; ) THEN THEN ) IF IF (  METHOD_1 ( METHOD_2 ( METHOD_3 ( i , VAR_3 ) ) , x ) )  METHOD_1 ( METHOD_2 ( METHOD_3 ( i , VAR_3 ) ) , x ) (  return this ; )  return this ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  METHOD_3 ( ) )  METHOD_3 ( ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_4 ( 100 ) ) INIT = TYPE_2 . METHOD_4 ( 100 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_4 ( INT_1 ) ) INIT = TYPE_2 . METHOD_4 ( INT_1 ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_3 . METHOD_5 ( new TYPE_2 [ ] { VAR_1 } , VAR_2 ) )  VAR_3 . METHOD_5 ( new TYPE_2 [ ] { VAR_1 } , VAR_2 ) (  VAR_4 . METHOD_5 ( new TYPE_2 [ ] { VAR_1 } , VAR_2 ) )  VAR_4 . METHOD_5 ( new TYPE_2 [ ] { VAR_1 } , VAR_2 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME ex ) NAME ex ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME size ) NAME size ( INIT = VAR_1 . size ( ) ) INIT = VAR_1 . size ( ) ) VAR VAR ( IF IF ( COND size == 0 ) COND size == 0 ( THEN THEN (  return STRING_1 ; )  return STRING_1 ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME sb ) NAME sb ( INIT = new TYPE_2 ( 100 ) ) INIT = new TYPE_2 ( 100 ) ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < size ) COND i < size ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK ( IF IF ( COND i != 0 ) COND i != 0 ( THEN THEN (  sb.append ( STRING_2 ) )  sb.append ( STRING_2 ) ) THEN THEN ) IF IF (  sb.append ( VAR_1 . METHOD_2 ( i ) . METHOD_1 ( ) ) )  sb.append ( VAR_1 . METHOD_2 ( i ) . METHOD_1 ( ) ) ) BLOCK BLOCK ) FOR FOR (  return sb . toString ( ) ; )  return sb . toString ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.io.File ) RETURN java.io.File ( NAME call ) NAME call ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME info ) NAME info ( INIT = VAR_1 . METHOD_1 ( ) ) INIT = VAR_1 . METHOD_1 ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME path ) NAME path ( INIT = ( info == null ? null : info . METHOD_2 ( ) ) . METHOD_3 ( VAR_2 ) ) INIT = ( info == null ? null : info . METHOD_2 ( ) ) . METHOD_3 ( VAR_2 ) ) VAR VAR ( IF IF ( COND path != null ) COND path != null ( THEN THEN (  return new java.io.File ( path ) ; )  return new java.io.File ( path ) ; ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME packageName ) NAME packageName ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME userId ) NAME userId ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  TYPE_1 . d ( VAR_2 . TAG , ( ( ( STRING_1 + packageName ) + STRING_2 ) + userId ) ) )  TYPE_1 . d ( VAR_2 . TAG , ( ( ( STRING_1 + packageName ) + STRING_2 ) + userId ) ) ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 . METHOD_2 ( packageName , userId ) ) INIT = VAR_4 . METHOD_2 ( packageName , userId ) ) VAR VAR ( IF IF ( COND METHOD_3 ( packageName , userId , VAR_3 ) ) COND METHOD_3 ( packageName , userId , VAR_3 ) ( THEN THEN (  VAR_5 . METHOD_4 ( packageName , userId ) )  VAR_5 . METHOD_4 ( packageName , userId ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_4 ( ) ) )  TYPE_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_4 ( ) ) (  METHOD_5 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_4 ( ) ) )  METHOD_5 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_4 ( ) ) (  METHOD_6 ( TYPE_1 . METHOD_4 ( ) ) )  METHOD_6 ( TYPE_1 . METHOD_4 ( ) ) (  VAR_1 . METHOD_7 ( TYPE_1 . METHOD_3 ( ) ) )  VAR_1 . METHOD_7 ( TYPE_1 . METHOD_3 ( ) ) (  METHOD_5 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_4 ( ) ) )  METHOD_5 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_4 ( ) ) (  METHOD_6 ( TYPE_1 . METHOD_4 ( ) ) )  METHOD_6 ( TYPE_1 . METHOD_4 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( ( ( VAR_2 . METHOD_3 ( ) ) + 2 ) , ( ( VAR_2 . METHOD_4 ( ) ) + 2 ) ) ) INIT = TYPE_2 . METHOD_2 ( ( ( VAR_2 . METHOD_3 ( ) ) + 2 ) , ( ( VAR_2 . METHOD_4 ( ) ) + 2 ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . METHOD_5 ( ) ) INIT = VAR_1 . METHOD_5 ( ) ) VAR VAR (  VAR_3 . METHOD_6 ( VAR_2 , 1 , 1 , null ) )  VAR_3 . METHOD_6 ( VAR_2 , 1 , 1 , null ) (  VAR_3 . METHOD_7 ( ) )  VAR_3 . METHOD_7 ( ) (  VAR_2 = VAR_1 )  VAR_2 = VAR_1 (  VAR_4 . METHOD_8 ( VAR_2 ) )  VAR_4 . METHOD_8 ( VAR_2 ) (  name = ( name . METHOD_9 ( 0 , name . METHOD_10 ( CHAR_1 ) ) ) + STRING_1 )  name = ( name . METHOD_9 ( 0 , name . METHOD_10 ( CHAR_1 ) ) ) + STRING_1 ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME m ) NAME m ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME v ) NAME v ) VAR VAR ( VAR VAR ( TYPE float ) TYPE float ( NAME value ) NAME value ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = false ) INIT = false ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( IF IF ( COND v == null ) COND v == null ( THEN THEN (  m . METHOD_2 ( value ) )  m . METHOD_2 ( value ) ) THEN THEN ( ELSE ELSE (  m . METHOD_2 ( v , value ) )  m . METHOD_2 ( v , value ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_2 = true )  VAR_2 = true ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  TYPE_4 . assertEquals ( VAR_2 , VAR_1 ) )  TYPE_4 . assertEquals ( VAR_2 , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( VAR_2 , 1 ) ) INIT = TYPE_2 . METHOD_2 ( VAR_2 , 1 ) ) VAR VAR (  assertEquals ( VAR_3 , VAR_4 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ) )  assertEquals ( VAR_3 , VAR_4 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ) (  METHOD_5 ( VAR_1 ) )  METHOD_5 ( VAR_1 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_5 ) NAME VAR_5 ( INIT = TYPE_2 . METHOD_6 ( VAR_6 , 1 ) . METHOD_7 ( null ) . METHOD_8 ( ) ) INIT = TYPE_2 . METHOD_6 ( VAR_6 , 1 ) . METHOD_7 ( null ) . METHOD_8 ( ) ) VAR VAR (  assertEquals ( VAR_7 , VAR_4 . METHOD_3 ( VAR_5 . METHOD_4 ( ) ) ) )  assertEquals ( VAR_7 , VAR_4 . METHOD_3 ( VAR_5 . METHOD_4 ( ) ) ) (  METHOD_5 ( VAR_1 ) )  METHOD_5 ( VAR_1 ) (  METHOD_9 ( ) )  METHOD_9 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < ( VAR_1 ) ) COND i < ( VAR_1 ) ( UPDATE UPDATE (  ++ i )  ++ i ) UPDATE UPDATE ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_2 [ i ] ) ) COND ! ( VAR_2 [ i ] ) ( THEN THEN (  VAR_3 . println ( ( ( STRING_1 + i ) + STRING_2 ) ) )  VAR_3 . println ( ( ( STRING_1 + i ) + STRING_2 ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR FOR ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND false ) COND false ( THEN THEN ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME f ) NAME f ( INIT = TYPE_1 . METHOD_2 ( INT_1 , ( ( 3 * INT_1 ) * INT_1 ) ) ) INIT = TYPE_1 . METHOD_2 ( INT_1 , ( ( 3 * INT_1 ) * INT_1 ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( f ) ) INIT = new TYPE_2 ( f ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = 0 ) INIT = 0 ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE TYPE_3<?extendsTYPE_4> ) TYPE TYPE_3<?extendsTYPE_4> ( NAME e ) NAME e ( INIT = VAR_1 . METHOD_3 ( ) ) INIT = VAR_1 . METHOD_3 ( ) ) VAR VAR ) INIT INIT ( COND e . METHOD_4 ( ) ) COND e . METHOD_4 ( ) ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_3 ) NAME VAR_3 ( INIT = e . METHOD_5 ( ) ) INIT = e . METHOD_5 ( ) ) VAR VAR (  ++ VAR_2 )  ++ VAR_2 ) BLOCK BLOCK ) FOR FOR (  assertEquals ( INT_1 , VAR_2 ) )  assertEquals ( INT_1 , VAR_2 ) (  VAR_1 . METHOD_6 ( ) )  VAR_1 . METHOD_6 ( ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME match ) NAME match ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( ) ) INIT = TYPE_2 . METHOD_2 ( ) ) VAR VAR (  VAR_1 . METHOD_3 ( ( match = TYPE_3 . METHOD_4 ( ) ) ) )  VAR_1 . METHOD_3 ( ( match = TYPE_3 . METHOD_4 ( ) ) ) (  VAR_1 . METHOD_3 ( TYPE_3 . METHOD_5 ( INT_1 ) ) )  VAR_1 . METHOD_3 ( TYPE_3 . METHOD_5 ( INT_1 ) ) (  VAR_1 . METHOD_3 ( TYPE_3 . METHOD_5 ( INT_2 ) ) )  VAR_1 . METHOD_3 ( TYPE_3 . METHOD_5 ( INT_2 ) ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ( INIT = TYPE_3 . METHOD_6 ( VAR_1 , 1 , STRING_1 ) ) INIT = TYPE_3 . METHOD_6 ( VAR_1 , 1 , STRING_1 ) ) VAR VAR (  assertEquals ( match , result ) )  assertEquals ( match , result ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ) VAR VAR ( VAR VAR ( TYPE char ) TYPE char ( NAME x ) NAME x ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  throw new TYPE_2 ( ) ; )  throw new TYPE_2 ( ) ; ) THEN THEN ) IF IF ( IF IF ( COND ! ( VAR_2 ) ) COND ! ( VAR_2 ) ( THEN THEN (  throw new TYPE_3 ( STRING_1 ) ; )  throw new TYPE_3 ( STRING_1 ) ; ) THEN THEN ) IF IF (  METHOD_1 ( METHOD_2 ( METHOD_3 ( i , VAR_3 ) ) , x ) )  METHOD_1 ( METHOD_2 ( METHOD_3 ( i , VAR_3 ) ) , x ) (  return this ; )  return this ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_6 ) NAME VAR_6 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_7 ) NAME VAR_7 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_2 . METHOD_2 ( VAR_1 , VAR_8 , VAR_9 , VAR_2 . METHOD_3 ( ) , VAR_2 . METHOD_4 ( ) , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 ) )  TYPE_2 . METHOD_2 ( VAR_1 , VAR_8 , VAR_9 , VAR_2 . METHOD_3 ( ) , VAR_2 . METHOD_4 ( ) , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( IF IF ( COND ( VAR_2 ) != null ) COND ( VAR_2 ) != null ( THEN THEN (  return VAR_2 . METHOD_1 ( VAR_1 ) ; )  return VAR_2 . METHOD_1 ( VAR_1 ) ; ) THEN THEN ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  METHOD_2 ( ) )  METHOD_2 ( ) (  android.util.Log.d ( TYPE_2 . TAG , ( STRING_1 + VAR_1 ) ) )  android.util.Log.d ( TYPE_2 . TAG , ( STRING_1 + VAR_1 ) ) ( SYNCHRONIZED SYNCHRONIZED (  VAR_3 )  VAR_3 ( BLOCK BLOCK ( IF IF ( COND METHOD_3 ( ) ) COND METHOD_3 ( ) ( THEN THEN (  return TYPE_2 . METHOD_4 ( VAR_4 , VAR_1 ) ; )  return TYPE_2 . METHOD_4 ( VAR_4 , VAR_1 ) ; ) THEN THEN ( ELSE ELSE (  return - 1 ; )  return - 1 ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE char[] ) TYPE char[] ( NAME text ) NAME text ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME start ) NAME start ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME count ) NAME count ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE float ) TYPE float ( NAME x ) NAME x ) VAR VAR ( VAR VAR ( TYPE float ) TYPE float ( NAME y ) NAME y ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME flags ) NAME flags ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( VAR_1 , text , start , count , x , y , flags , VAR_4 ) )  TYPE_1 . METHOD_2 ( VAR_1 , text , start , count , x , y , flags , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME device ) NAME device ) VAR VAR ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND ( VAR_2 . length ) != 1 ) COND ( VAR_2 . length ) != 1 ( THEN THEN (  throw new TYPE_2 ( java.lang.String.format ( STRING_1 , VAR_1 . METHOD_3 ( ) ) ) ; )  throw new TYPE_2 ( java.lang.String.format ( STRING_1 , VAR_1 . METHOD_3 ( ) ) ) ; ) THEN THEN ) IF IF (  VAR_3 = new java.io.File ( VAR_1 , VAR_2 [ 0 ] ) . METHOD_3 ( ) )  VAR_3 = new java.io.File ( VAR_1 , VAR_2 [ 0 ] ) . METHOD_3 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( ) ) INIT = TYPE_2 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_3 . METHOD_3 ( ) ) INIT = TYPE_3 . METHOD_3 ( ) ) VAR VAR (  VAR_1 . METHOD_4 ( VAR_2 ) )  VAR_1 . METHOD_4 ( VAR_2 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_3 . METHOD_5 ( VAR_2 ) )  VAR_3 . METHOD_5 ( VAR_2 ) (  METHOD_6 ( VAR_1 , VAR_3 , true ) )  METHOD_6 ( VAR_1 , VAR_3 , true ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME e ) NAME e ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME f ) NAME f ( INIT = VAR_2 . get ( VAR_1 ) ) INIT = VAR_2 . get ( VAR_1 ) ) VAR VAR ( IF IF ( COND f != null ) COND f != null ( THEN THEN (  return f ; )  return f ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE int ) TYPE int ( NAME id ) NAME id ( INIT = mRS . METHOD_2 ( METHOD_3 ( mRS ) , VAR_1 ) ) INIT = mRS . METHOD_2 ( METHOD_3 ( mRS ) , VAR_1 ) ) VAR VAR ( IF IF ( COND id == 0 ) COND id == 0 ( THEN THEN (  throw new TYPE_3 ( STRING_1 ) ; )  throw new TYPE_3 ( STRING_1 ) ; ) THEN THEN ) IF IF (  f = new TYPE_1 ( id , mRS , this , VAR_1 ) )  f = new TYPE_1 ( id , mRS , this , VAR_1 ) (  VAR_2 . METHOD_4 ( VAR_1 , f ) )  VAR_2 . METHOD_4 ( VAR_1 , f ) (  return f ; )  return f ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME event ) NAME event ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_2 . METHOD_2 ( ) . METHOD_3 ( event ) )  TYPE_2 . METHOD_2 ( ) . METHOD_3 ( event ) ( IF IF ( COND TYPE_3 . equals ( event . METHOD_4 ( ) ) ) COND TYPE_3 . equals ( event . METHOD_4 ( ) ) ( THEN THEN (  TYPE_4 . METHOD_5 ( TYPE_5 . METHOD_6 ( ) , true ) )  TYPE_4 . METHOD_5 ( TYPE_5 . METHOD_6 ( ) , true ) (  TYPE_6 . METHOD_5 ( TYPE_5 . METHOD_6 ( ) , true ) )  TYPE_6 . METHOD_5 ( TYPE_5 . METHOD_6 ( ) , true ) ( IF IF ( COND METHOD_7 ( ) ) COND METHOD_7 ( ) ( THEN THEN (  METHOD_8 ( ) )  METHOD_8 ( ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.Set<java.lang.String> ) TYPE java.util.Set<java.lang.String> ( NAME expected ) NAME expected ) VAR VAR ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Set<java.lang.String> ) TYPE java.util.Set<java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_1 . METHOD_2 ( expected , VAR_1 ) ) INIT = TYPE_1 . METHOD_2 ( expected , VAR_1 ) ) VAR VAR (  assertEquals ( STRING_1 , VAR_3 , VAR_2 ) )  assertEquals ( STRING_1 , VAR_3 , VAR_2 ) (  assertEquals ( expected . size ( ) , VAR_1 . length ) )  assertEquals ( expected . size ( ) , VAR_1 . length ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE java.util.List ) TYPE java.util.List ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_6 ) NAME VAR_6 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME service ) NAME service ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( IF IF ( COND service == null ) COND service == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  service . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) )  service . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME locale ) NAME locale ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int[] ) TYPE int[] ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_3 . METHOD_2 ( locale ) ) INIT = TYPE_3 . METHOD_2 ( locale ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ) VAR VAR ( FOR FOR ( INIT INIT (  i = 0 )  i = 0 ) INIT INIT ( COND i < ( VAR_2 . length ) ) COND i < ( VAR_2 . length ) ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK (  VAR_3 . METHOD_3 ( VAR_4 , VAR_2 [ i ] ) )  VAR_3 . METHOD_3 ( VAR_4 , VAR_2 [ i ] ) (  VAR_1 . METHOD_4 ( VAR_3 ) )  VAR_1 . METHOD_4 ( VAR_3 ) ) BLOCK BLOCK ) FOR FOR ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME context ) NAME context ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME subId ) NAME subId ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_4 . METHOD_2 ( context ) ) INIT = TYPE_4 . METHOD_2 ( context ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME packageName ) NAME packageName ) VAR VAR ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  packageName = VAR_2 )  packageName = VAR_2 ) THEN THEN ( ELSE ELSE (  packageName = VAR_1 . METHOD_3 ( ) )  packageName = VAR_1 . METHOD_3 ( ) ) ELSE ELSE ) IF IF (  return TYPE_5 . METHOD_4 ( context , packageName , subId ) ; )  return TYPE_5 . METHOD_4 ( context , packageName , subId ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN short ) RETURN short ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME index ) NAME index ( INIT = 0 ) INIT = 0 ) VAR VAR ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  return 0 ; )  return 0 ; ) THEN THEN ) IF IF ( WHILE WHILE ( COND ( TYPE_1 [ index ] . VAR_1 ) != null ) COND ( TYPE_1 [ index ] . VAR_1 ) != null ( BLOCK BLOCK ( IF IF ( COND ( TYPE_1 [ index ] . VAR_1 ) == VAR_1 ) COND ( TYPE_1 [ index ] . VAR_1 ) == VAR_1 ( THEN THEN (  return TYPE_1 [ index ] . VAR_2 ; )  return TYPE_1 [ index ] . VAR_2 ; ) THEN THEN ( ELSE ELSE ( IF IF ( COND ( TYPE_1 [ index ] . VAR_1 . METHOD_2 ( VAR_1 ) ) > 0 ) COND ( TYPE_1 [ index ] . VAR_1 . METHOD_2 ( VAR_1 ) ) > 0 ( THEN THEN (  break ; )  break ; ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF (  index ++ )  index ++ ) BLOCK BLOCK ) WHILE WHILE (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<?> ) TYPE TYPE_1<?> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( DO-WHILE DO-WHILE ( COND ( VAR_1 = VAR_6 . METHOD_4 ( ) ) != null ) COND ( VAR_1 = VAR_6 . METHOD_4 ( ) ) != null ( BLOCK BLOCK (  VAR_1 . METHOD_3 ( ) )  VAR_1 . METHOD_3 ( ) ( IF IF ( COND VAR_1 == ( VAR_3 ) ) COND VAR_1 == ( VAR_3 ) ( THEN THEN (  throw new TYPE_2 ( ) ; )  throw new TYPE_2 ( ) ; ) THEN THEN ) IF IF ( TRY TRY ( BLOCK BLOCK (  VAR_2 . invoke ( VAR_1 ) )  VAR_2 . invoke ( VAR_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Throwable ) TYPE java.lang.Throwable ( NAME t ) NAME t ( BLOCK BLOCK (  VAR_4 . log ( VAR_5 , STRING_1 , t ) )  VAR_4 . log ( VAR_5 , STRING_1 , t ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) DO-WHILE DO-WHILE ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( true ) )  METHOD_2 ( true ) (  VAR_1 . METHOD_3 ( VAR_2 ) )  VAR_1 . METHOD_3 ( VAR_2 ) (  VAR_1 . METHOD_4 ( ( - 1 ) , 0 , null , null ) )  VAR_1 . METHOD_4 ( ( - 1 ) , 0 , null , null ) (  VAR_3 . METHOD_5 ( ) )  VAR_3 . METHOD_5 ( ) (  METHOD_6 ( VAR_4 , ( ( VAR_5 ) | ( VAR_6 ) ) , VAR_7 . METHOD_7 ( ) ) )  METHOD_6 ( VAR_4 , ( ( VAR_5 ) | ( VAR_6 ) ) , VAR_7 . METHOD_7 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  server . METHOD_2 ( new TYPE_1 ( ) . METHOD_3 ( STRING_1 , STRING_2 ) . METHOD_4 ( STRING_3 ) ) )  server . METHOD_2 ( new TYPE_1 ( ) . METHOD_3 ( STRING_1 , STRING_2 ) . METHOD_4 ( STRING_3 ) ) (  server . METHOD_5 ( ) )  server . METHOD_5 ( ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_2 ) ( server . METHOD_6 ( STRING_4 ) . METHOD_7 ( ) ) ) ) INIT = ( ( TYPE_2 ) ( server . METHOD_6 ( STRING_4 ) . METHOD_7 ( ) ) ) ) VAR VAR (  VAR_1 . METHOD_8 ( ) )  VAR_1 . METHOD_8 ( ) (  assertEquals ( INT_1 , VAR_1 . METHOD_9 ( ) ) )  assertEquals ( INT_1 , VAR_1 . METHOD_9 ( ) ) (  assertEquals ( INT_1 , VAR_1 . METHOD_10 ( STRING_1 , ( - 1 ) ) ) )  assertEquals ( INT_1 , VAR_1 . METHOD_10 ( STRING_1 , ( - 1 ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME out ) NAME out ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_2 != null ) INIT = VAR_2 != null ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME result ) NAME result ( INIT = METHOD_2 ( VAR_4 , VAR_3 , VAR_1 ) ) INIT = METHOD_2 ( VAR_4 , VAR_3 , VAR_1 ) ) VAR VAR ( IF IF ( COND out != null ) COND out != null ( THEN THEN (  out . METHOD_3 ( result . METHOD_4 ( ) ) )  out . METHOD_3 ( result . METHOD_4 ( ) ) ) THEN THEN ) IF IF ( IF IF ( COND VAR_4 ) COND VAR_4 ( THEN THEN (  result . METHOD_5 ( VAR_2 ) )  result . METHOD_5 ( VAR_2 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME value ) NAME value ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND value instanceof java.lang.Integer ) COND value instanceof java.lang.Integer ( THEN THEN (  return new TYPE_2 ( ( ( java.lang.Integer ) ( value ) ) , null ) ; )  return new TYPE_2 ( ( ( java.lang.Integer ) ( value ) ) , null ) ; ) THEN THEN ( ELSE ELSE ( IF IF ( COND value instanceof java.lang.String ) COND value instanceof java.lang.String ( THEN THEN (  return new TYPE_2 ( 1 , ( ( java.lang.String ) ( value ) ) ) ; )  return new TYPE_2 ( 1 , ( ( java.lang.String ) ( value ) ) ) ; ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = INT_1 ) INIT = INT_1 ) VAR VAR ( IF IF ( COND ( ( VAR_3 ) >= INT_2 ) && ( ( VAR_3 ) <= INT_3 ) ) COND ( ( VAR_3 ) >= INT_2 ) && ( ( VAR_3 ) <= INT_3 ) ( THEN THEN ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ( INIT = - ( VAR_3 ) ) INIT = - ( VAR_3 ) ) VAR VAR (  VAR_2 = VAR_4 + INT_3 )  VAR_2 = VAR_4 + INT_3 ) THEN THEN ) IF IF (  return new TYPE_1 ( VAR_5 , VAR_6 , VAR_7 , VAR_8 , VAR_9 , VAR_10 , VAR_11 , VAR_12 , VAR_13 , VAR_14 , VAR_15 , VAR_16 , VAR_2 ) ; )  return new TYPE_1 ( VAR_5 , VAR_6 , VAR_7 , VAR_8 , VAR_9 , VAR_10 , VAR_11 , VAR_12 , VAR_13 , VAR_14 , VAR_15 , VAR_16 , VAR_2 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static final ) MODIFIER public static final ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE short ) TYPE short ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SWITCH SWITCH ( NAME VAR_1 ) NAME VAR_1 ( CASE VAR_2 ( BLOCK BLOCK (  return new TYPE_2 ( ) ; )  return new TYPE_2 ( ) ; ) BLOCK BLOCK ) CASE VAR_2 ( CASE VAR_3 ( BLOCK BLOCK (  return new TYPE_3 ( ) ; )  return new TYPE_3 ( ) ; ) BLOCK BLOCK ) CASE VAR_3 ( CASE VAR_4 ( BLOCK BLOCK (  return new TYPE_4 ( ) ; )  return new TYPE_4 ( ) ; ) BLOCK BLOCK ) CASE VAR_4 ( CASE VAR_5 ( BLOCK BLOCK (  return new TYPE_5 ( ) ; )  return new TYPE_5 ( ) ; ) BLOCK BLOCK ) CASE VAR_5 ( CASE VAR_6 ( BLOCK BLOCK (  return new TYPE_6 ( ) ; )  return new TYPE_6 ( ) ; ) BLOCK BLOCK ) CASE VAR_6 ( CASE VAR_7 ( BLOCK BLOCK (  return new TYPE_7 ( ) ; )  return new TYPE_7 ( ) ; ) BLOCK BLOCK ) CASE VAR_7 ( DEFAULT DEFAULT ( BLOCK BLOCK (  throw new java.lang.IllegalArgumentException ( STRING_1 ) ; )  throw new java.lang.IllegalArgumentException ( STRING_1 ) ; ) BLOCK BLOCK ) DEFAULT DEFAULT ) SWITCH SWITCH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( false ) )  METHOD_2 ( false ) ( IF IF ( COND ( VAR_1 ) != null ) COND ( VAR_1 ) != null ( THEN THEN (  VAR_1 . METHOD_3 ( ) )  VAR_1 . METHOD_3 ( ) (  VAR_1 = null )  VAR_1 = null ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_2 ) != null ) COND ( VAR_2 ) != null ( THEN THEN (  VAR_2 . METHOD_3 ( ) )  VAR_2 . METHOD_3 ( ) (  VAR_2 = null )  VAR_2 = null ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_3 ) != null ) COND ( VAR_3 ) != null ( THEN THEN (  VAR_3 . METHOD_3 ( ) )  VAR_3 . METHOD_3 ( ) (  VAR_3 = null )  VAR_3 = null ) THEN THEN ) IF IF (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) (  METHOD_2 ( false ) )  METHOD_2 ( false ) (  METHOD_3 ( false ) )  METHOD_3 ( false ) ( IF IF ( COND ( VAR_1 ) == ( VAR_2 ) ) COND ( VAR_1 ) == ( VAR_2 ) ( THEN THEN (  METHOD_4 ( true ) )  METHOD_4 ( true ) ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_1 ( VAR_4 , VAR_5 , VAR_6 ) ) INIT = new TYPE_1 ( VAR_4 , VAR_5 , VAR_6 ) ) VAR VAR (  METHOD_5 ( VAR_3 ) )  METHOD_5 ( VAR_3 ) (  METHOD_6 ( ) )  METHOD_6 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  target . METHOD_2 ( ) )  target . METHOD_2 ( ) (  assertTrue ( target . METHOD_3 ( ) ) )  assertTrue ( target . METHOD_3 ( ) ) (  assertFalse ( target . METHOD_4 ( ) ) )  assertFalse ( target . METHOD_4 ( ) ) (  VAR_1 . METHOD_2 ( ) )  VAR_1 . METHOD_2 ( ) (  assertFalse ( VAR_1 . METHOD_3 ( ) ) )  assertFalse ( VAR_1 . METHOD_3 ( ) ) ( TRY TRY ( BLOCK BLOCK (  target . METHOD_5 ( ) )  target . METHOD_5 ( ) (  target . METHOD_6 ( ) )  target . METHOD_6 ( ) (  fail ( STRING_1 ) )  fail ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME state ) NAME state ) VAR VAR ( VAR VAR ( TYPE android.bluetooth.BluetoothDevice ) TYPE android.bluetooth.BluetoothDevice ( NAME device ) NAME device ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SWITCH SWITCH ( NAME state ) NAME state ( CASE VAR_1 ( BLOCK BLOCK ( IF IF ( COND VAR_2 . equals ( device ) ) COND VAR_2 . equals ( device ) ( THEN THEN (  METHOD_2 ( VAR_3 , device ) )  METHOD_2 ( VAR_3 , device ) (  METHOD_3 ( VAR_2 , VAR_4 , VAR_5 ) )  METHOD_3 ( VAR_2 , VAR_4 , VAR_5 ) (  VAR_2 = null )  VAR_2 = null (  transitionTo ( VAR_6 ) )  transitionTo ( VAR_6 ) ) THEN THEN ( ELSE ELSE (  android.util.Log.e ( VAR_7 . TAG , ( STRING_1 + device ) ) )  android.util.Log.e ( VAR_7 . TAG , ( STRING_1 + device ) ) ) ELSE ELSE ) IF IF (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_1 ( DEFAULT DEFAULT ( BLOCK BLOCK (  android.util.Log.e ( VAR_7 . TAG , ( ( ( STRING_2 + device ) + STRING_3 ) + state ) ) )  android.util.Log.e ( VAR_7 . TAG , ( ( ( STRING_2 + device ) + STRING_3 ) + state ) ) (  break ; )  break ; ) BLOCK BLOCK ) DEFAULT DEFAULT ) SWITCH SWITCH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<TYPE_2,TYPE_3> ) RETURN TYPE_1<TYPE_2,TYPE_3> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_4[] ) TYPE TYPE_4[] ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_4 ) COND VAR_4 ( THEN THEN (  java.lang.System.out.println ( java.lang.String.format ( STRING_1 , VAR_1 ) ) )  java.lang.System.out.println ( java.lang.String.format ( STRING_1 , VAR_1 ) ) ) THEN THEN ) IF IF (  return TYPE_7 . METHOD_2 ( VAR_1 , false , VAR_3 , VAR_2 ) ; )  return TYPE_7 . METHOD_2 ( VAR_1 , false , VAR_3 , VAR_2 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Class<?> ) TYPE java.lang.Class<?> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Class<?> ) TYPE java.lang.Class<?> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) )  TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) (  TYPE_1 . METHOD_2 ( VAR_2 . METHOD_3 ( ) ) )  TYPE_1 . METHOD_2 ( VAR_2 . METHOD_3 ( ) ) ( IF IF ( COND VAR_1 == VAR_2 ) COND VAR_1 == VAR_2 ( THEN THEN (  return 0 ; )  return 0 ; ) THEN THEN ) IF IF ( IF IF ( COND VAR_1 . METHOD_4 ( VAR_2 ) ) COND VAR_1 . METHOD_4 ( VAR_2 ) ( THEN THEN (  return 1 ; )  return 1 ; ) THEN THEN ) IF IF ( IF IF ( COND VAR_2 . METHOD_4 ( VAR_1 ) ) COND VAR_2 . METHOD_4 ( VAR_1 ) ( THEN THEN (  return - 1 ; )  return - 1 ; ) THEN THEN ) IF IF (  return VAR_1 . getName ( ) . METHOD_5 ( VAR_2 . getName ( ) ) ; )  return VAR_1 . getName ( ) . METHOD_5 ( VAR_2 . getName ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.ArrayList<TYPE_1> ) TYPE java.util.ArrayList<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 ) INIT = VAR_3 ) VAR VAR ( VAR VAR ( TYPE TYPE_2[] ) TYPE TYPE_2[] ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_2 ( VAR_5 , VAR_1 ) ) INIT = METHOD_2 ( VAR_5 , VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_6 ) NAME VAR_6 ( INIT = new TYPE_3 ( VAR_2 , VAR_2 , VAR_3 , STRING_1 , null , null , VAR_4 , null , false ) ) INIT = new TYPE_3 ( VAR_2 , VAR_2 , VAR_3 , STRING_1 , null , null , VAR_4 , null , false ) ) VAR VAR (  return VAR_6 ; )  return VAR_6 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME call ) NAME call ( INIT = TYPE_2 . METHOD_2 ( VAR_1 class ) ) INIT = TYPE_2 . METHOD_2 ( VAR_1 class ) ) VAR VAR (  TYPE_2 . when ( call . METHOD_3 ( ) ) . thenReturn ( VAR_2 ) )  TYPE_2 . when ( call . METHOD_3 ( ) ) . thenReturn ( VAR_2 ) (  TYPE_2 . when ( VAR_3 . METHOD_4 ( ) ) . thenReturn ( call ) )  TYPE_2 . when ( VAR_3 . METHOD_4 ( ) ) . thenReturn ( call ) (  TYPE_3 . assertTrue ( VAR_4 . METHOD_5 ( ) ) )  TYPE_3 . assertTrue ( VAR_4 . METHOD_5 ( ) ) (  org.mockito.Mockito.verify ( call ) . METHOD_6 ( ) )  org.mockito.Mockito.verify ( call ) . METHOD_6 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME w ) NAME w ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME h ) NAME h ) VAR VAR ( VAR VAR ( TYPE int[] ) TYPE int[] ( NAME data ) NAME data ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  mRS . METHOD_2 ( ) )  mRS . METHOD_2 ( ) (  METHOD_3 ( VAR_1 , VAR_2 , w , h ) )  METHOD_3 ( VAR_1 , VAR_2 , w , h ) (  mRS . METHOD_4 ( METHOD_5 ( ) , VAR_1 , VAR_2 , VAR_3 , VAR_4 , w , h , data , ( ( data . length ) * 4 ) ) )  mRS . METHOD_4 ( METHOD_5 ( ) , VAR_1 , VAR_2 , VAR_3 , VAR_4 , w , h , data , ( ( data . length ) * 4 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME key ) NAME key ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME value ) NAME value ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND key . METHOD_2 ( STRING_1 ) ) COND key . METHOD_2 ( STRING_1 ) ( THEN THEN ) THEN THEN ( ELSE ELSE ( IF IF ( COND key . METHOD_2 ( STRING_2 ) ) COND key . METHOD_2 ( STRING_2 ) ( THEN THEN (  METHOD_3 ( VAR_1 , value , 0 ) )  METHOD_3 ( VAR_1 , value , 0 ) ) THEN THEN ( ELSE ELSE (  METHOD_3 ( TYPE_3 . METHOD_4 ( key ) , value , 0 ) )  METHOD_3 ( TYPE_3 . METHOD_4 ( key ) , value , 0 ) ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( this ) == VAR_1 ) COND ( this ) == VAR_1 ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ( IF IF ( COND ! ( VAR_1 instanceof TYPE_1 ) ) COND ! ( VAR_1 instanceof TYPE_1 ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_1 ) ( VAR_1 ) ) ) INIT = ( ( TYPE_1 ) ( VAR_1 ) ) ) VAR VAR (  return ( ( ( ( VAR_3 ) == ( VAR_4 ) ) && ( ( VAR_5 ) == ( VAR_6 ) ) ) && ( ( VAR_7 ) == ( VAR_8 ) ) ) && ( ( VAR_9 ) == ( VAR_10 ) ) ; )  return ( ( ( ( VAR_3 ) == ( VAR_4 ) ) && ( ( VAR_5 ) == ( VAR_6 ) ) ) && ( ( VAR_7 ) == ( VAR_8 ) ) ) && ( ( VAR_9 ) == ( VAR_10 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK (  VAR_1 . METHOD_1 ( VAR_2 ) )  VAR_1 . METHOD_1 ( VAR_2 ) ( IF IF ( COND METHOD_2 ( VAR_2 , true ) ) COND METHOD_2 ( VAR_2 , true ) ( THEN THEN (  METHOD_3 ( VAR_3 , VAR_2 ) )  METHOD_3 ( VAR_3 , VAR_2 ) ( IF IF ( COND ( VAR_4 ) != null ) COND ( VAR_4 ) != null ( THEN THEN (  VAR_4 . METHOD_4 ( STRING_1 , VAR_2 ) )  VAR_4 . METHOD_4 ( STRING_1 , VAR_2 ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) ( VAR VAR ( TYPE int[] ) TYPE int[] ( NAME subId ) NAME subId ( INIT = VAR_3 . METHOD_3 ( VAR_1 ) ) INIT = VAR_3 . METHOD_3 ( VAR_1 ) ) VAR VAR ( IF IF ( COND ( subId == null ) || ( ( subId . length ) == 0 ) ) COND ( subId == null ) || ( ( subId . length ) == 0 ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_4 ( subId [ 0 ] ) ) INIT = METHOD_4 ( subId [ 0 ] ) ) VAR VAR ( IF IF ( COND VAR_4 != null ) COND VAR_4 != null ( THEN THEN (  VAR_4 . METHOD_5 ( VAR_2 ) )  VAR_4 . METHOD_5 ( VAR_2 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  server . METHOD_2 ( ) )  server . METHOD_2 ( ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_1 ) ( server . METHOD_3 ( STRING_1 ) . METHOD_4 ( ) ) ) ) INIT = ( ( TYPE_1 ) ( server . METHOD_3 ( STRING_1 ) . METHOD_4 ( ) ) ) ) VAR VAR (  VAR_1 . METHOD_5 ( STRING_2 , STRING_3 ) )  VAR_1 . METHOD_5 ( STRING_2 , STRING_3 ) (  VAR_1 . METHOD_5 ( STRING_2 , STRING_4 ) )  VAR_1 . METHOD_5 ( STRING_2 , STRING_4 ) (  assertEquals ( STRING_4 , VAR_1 . METHOD_6 ( STRING_2 ) ) )  assertEquals ( STRING_4 , VAR_1 . METHOD_6 ( STRING_2 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  assertEquals ( VAR_2 , VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) )  assertEquals ( VAR_2 , VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) (  METHOD_4 ( VAR_1 ) )  METHOD_4 ( VAR_1 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_1 ( VAR_4 ) ) INIT = new TYPE_1 ( VAR_4 ) ) VAR VAR (  assertEquals ( VAR_2 , VAR_3 . METHOD_2 ( ) . METHOD_3 ( ) ) )  assertEquals ( VAR_2 , VAR_3 . METHOD_2 ( ) . METHOD_3 ( ) ) (  METHOD_4 ( VAR_3 ) )  METHOD_4 ( VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( VAR_1 ) )  METHOD_2 ( VAR_1 ) (  VAR_2 . METHOD_3 ( null , STRING_1 , VAR_3 . TAG , null , null , null , null , false ) )  VAR_2 . METHOD_3 ( null , STRING_1 , VAR_3 . TAG , null , null , null , null , false ) (  org.mockito.Mockito.verify ( VAR_4 , TYPE_1 . METHOD_4 ( 0 ) ) . METHOD_5 ( org.mockito.Matchers . METHOD_6 ( ) , org.mockito.Matchers . METHOD_6 ( ) , TYPE_1 . METHOD_7 ( ) , TYPE_1 . METHOD_7 ( ) , org.mockito.Matchers . METHOD_8 ( VAR_5 class ) ) )  org.mockito.Mockito.verify ( VAR_4 , TYPE_1 . METHOD_4 ( 0 ) ) . METHOD_5 ( org.mockito.Matchers . METHOD_6 ( ) , org.mockito.Matchers . METHOD_6 ( ) , TYPE_1 . METHOD_7 ( ) , TYPE_1 . METHOD_7 ( ) , org.mockito.Matchers . METHOD_8 ( VAR_5 class ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME id ) NAME id ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1[] ) TYPE TYPE_1[] ( NAME t ) NAME t ( INIT = TYPE_2 . values ( ) ) INIT = TYPE_2 . values ( ) ) VAR VAR ( VAR VAR ( TYPE int[] ) TYPE int[] ( NAME VAR_1 ) NAME VAR_1 ( INIT = new int [ 1 ] ) INIT = new int [ 1 ] ) VAR VAR (  VAR_1 [ 0 ] = id )  VAR_1 [ 0 ] = id ( VAR VAR ( TYPE android.content.Intent ) TYPE android.content.Intent ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  VAR_2 . METHOD_3 ( STRING_1 , VAR_1 ) )  VAR_2 . METHOD_3 ( STRING_1 , VAR_1 ) (  VAR_2 . METHOD_3 ( STRING_2 , true ) )  VAR_2 . METHOD_3 ( STRING_2 , true ) (  METHOD_4 ( VAR_2 , 0 ) )  METHOD_4 ( VAR_2 , 0 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ! ( TYPE_1 . METHOD_2 ( METHOD_3 ( ) ) ) ) COND ! ( TYPE_1 . METHOD_2 ( METHOD_3 ( ) ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( IF IF ( COND ! ( VAR_1 . METHOD_4 ( ) ) ) COND ! ( VAR_1 . METHOD_4 ( ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_5 ( ) ) INIT = VAR_1 . METHOD_5 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME callback ) NAME callback ( INIT = METHOD_6 ( ) ) INIT = METHOD_6 ( ) ) VAR VAR (  assertFalse ( VAR_1 . METHOD_5 ( ) ) )  assertFalse ( VAR_1 . METHOD_5 ( ) ) (  assertFalse ( VAR_1 . METHOD_7 ( true ) ) )  assertFalse ( VAR_1 . METHOD_7 ( true ) ) (  METHOD_8 ( callback , VAR_2 ) )  METHOD_8 ( callback , VAR_2 ) (  assertEquals ( VAR_2 , VAR_1 . METHOD_5 ( ) ) )  assertEquals ( VAR_2 , VAR_1 . METHOD_5 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME path ) NAME path ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_2 . METHOD_2 ( 0 , new TYPE_2 ( java.lang.String . METHOD_3 ( VAR_3 ) , VAR_3 ) ) )  VAR_2 . METHOD_2 ( 0 , new TYPE_2 ( java.lang.String . METHOD_3 ( VAR_3 ) , VAR_3 ) ) (  VAR_2 . METHOD_4 ( 0 , path . METHOD_5 ( ) ) )  VAR_2 . METHOD_4 ( 0 , path . METHOD_5 ( ) ) (  return this ; )  return this ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 == ( VAR_2 ) ) COND VAR_1 == ( VAR_2 ) ( THEN THEN (  METHOD_2 ( VAR_3 , VAR_4 ) )  METHOD_2 ( VAR_3 , VAR_4 ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND VAR_1 == ( VAR_5 ) ) COND VAR_1 == ( VAR_5 ) ( THEN THEN (  METHOD_2 ( VAR_6 , VAR_7 ) )  METHOD_2 ( VAR_6 , VAR_7 ) (  VAR_8 . METHOD_3 ( ) )  VAR_8 . METHOD_3 ( ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND VAR_1 == ( VAR_9 ) ) COND VAR_1 == ( VAR_9 ) ( THEN THEN (  METHOD_4 ( VAR_10 . METHOD_5 ( ) ) )  METHOD_4 ( VAR_10 . METHOD_5 ( ) ) (  METHOD_2 ( VAR_11 , VAR_12 ) )  METHOD_2 ( VAR_11 , VAR_12 ) (  VAR_13 . METHOD_3 ( ) )  VAR_13 . METHOD_3 ( ) ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME status ) NAME status ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME options ) NAME options ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( status . value ) ) INIT = new TYPE_1 ( status . value ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  return VAR_3 . METHOD_1 ( VAR_1 , VAR_2 , options ) ; )  return VAR_3 . METHOD_1 ( VAR_1 , VAR_2 , options ) ; ) BLOCK BLOCK ( FINALLY FINALLY (  status . value = VAR_2 . value )  status . value = VAR_2 . value ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private synchronized ) MODIFIER private synchronized ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME node ) NAME node ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = node . METHOD_2 ( VAR_3 class ) ) INIT = node . METHOD_2 ( VAR_3 class ) ) VAR VAR ( IF IF ( COND VAR_2 == null ) COND VAR_2 == null ( THEN THEN (  node . METHOD_3 ( new TYPE_3 ( VAR_1 ) ) )  node . METHOD_3 ( new TYPE_3 ( VAR_1 ) ) ) THEN THEN ( ELSE ELSE ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_2 . METHOD_4 ( ) ) INIT = VAR_2 . METHOD_4 ( ) ) VAR VAR ( IF IF ( COND VAR_4 != VAR_1 ) COND VAR_4 != VAR_1 ( THEN THEN (  VAR_2 . METHOD_5 ( VAR_5 ) )  VAR_2 . METHOD_5 ( VAR_5 ) ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_3 ( ) ) INIT = new TYPE_3 ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_1 . METHOD_3 ( null ) )  VAR_1 . METHOD_3 ( null ) (  fail ( ) )  fail ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.IllegalArgumentException ) TYPE java.lang.IllegalArgumentException ( NAME expected ) NAME expected ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ( TRY TRY ( BLOCK BLOCK (  VAR_1 . METHOD_3 ( VAR_2 ) )  VAR_1 . METHOD_3 ( VAR_2 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.IllegalArgumentException ) TYPE java.lang.IllegalArgumentException ( NAME expected ) NAME expected ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  VAR_1 . METHOD_4 ( VAR_2 ) )  VAR_1 . METHOD_4 ( VAR_2 ) (  VAR_1 . METHOD_3 ( VAR_2 ) )  VAR_1 . METHOD_3 ( VAR_2 ) (  VAR_1 . METHOD_5 ( ) )  VAR_1 . METHOD_5 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( VAR_2 , VAR_1 ) )  TYPE_1 . METHOD_2 ( VAR_2 , VAR_1 ) (  assertEquals ( VAR_3 , TYPE_2 . METHOD_3 ( VAR_1 ) ) )  assertEquals ( VAR_3 , TYPE_2 . METHOD_3 ( VAR_1 ) ) ( IF IF ( COND ! ( VAR_4 ) ) COND ! ( VAR_4 ) ( THEN THEN ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_5 ) NAME VAR_5 ( INIT = new java.util.ArrayList < java.lang.String > ( ) ) INIT = new java.util.ArrayList < java.lang.String > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_6 ) NAME VAR_6 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( IF IF ( COND ! ( TYPE_1 . METHOD_4 ( VAR_6 ) ) ) COND ! ( TYPE_1 . METHOD_4 ( VAR_6 ) ) ( THEN THEN (  VAR_5 . METHOD_5 ( VAR_6 ) )  VAR_5 . METHOD_5 ( VAR_6 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  assertEquals ( VAR_7 , VAR_5 ) )  assertEquals ( VAR_7 , VAR_5 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( VAR_1 , null ) )  METHOD_2 ( VAR_1 , null ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_3 ( VAR_3 ) ) INIT = TYPE_2 . METHOD_3 ( VAR_3 ) ) VAR VAR (  VAR_2 . METHOD_4 ( VAR_4 ) )  VAR_2 . METHOD_4 ( VAR_4 ) (  assertEquals ( VAR_1 , VAR_5 . METHOD_5 ( ) ) )  assertEquals ( VAR_1 , VAR_5 . METHOD_5 ( ) ) (  assertEquals ( VAR_3 , VAR_5 . METHOD_6 ( ) ) )  assertEquals ( VAR_3 , VAR_5 . METHOD_6 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = java.lang.Integer . toString ( VAR_1 , 16 ) . METHOD_2 ( ) ) INIT = java.lang.Integer . toString ( VAR_1 , 16 ) . METHOD_2 ( ) ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = VAR_2 . length ( ) ) INIT = VAR_2 . length ( ) ) VAR VAR ) INIT INIT ( COND i < 4 ) COND i < 4 ( UPDATE UPDATE (  ++ i )  ++ i ) UPDATE UPDATE ( BLOCK BLOCK (  result . append ( CHAR_1 ) )  result . append ( CHAR_1 ) ) BLOCK BLOCK ) FOR FOR (  return result + VAR_2 ; )  return result + VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<TYPE_2,TYPE_3> ) RETURN TYPE_1<TYPE_2,TYPE_3> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_4<?> ) TYPE TYPE_4<?> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<TYPE_2,TYPE_3> ) TYPE java.util.Map<TYPE_2,TYPE_3> ( NAME result ) NAME result ( INIT = TYPE_5 . METHOD_2 ( ) ) INIT = TYPE_5 . METHOD_2 ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME key ) NAME key ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( IF IF ( COND ! ( result . METHOD_3 ( key ) ) ) COND ! ( result . METHOD_3 ( key ) ) ( THEN THEN ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_2 ) ( key ) ) ) INIT = ( ( TYPE_2 ) ( key ) ) ) VAR VAR (  result . METHOD_4 ( VAR_2 , METHOD_5 ( key ) ) )  result . METHOD_4 ( VAR_2 , METHOD_5 ( key ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return TYPE_1 . METHOD_6 ( result ) ; )  return TYPE_1 . METHOD_6 ( result ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_1 ) ) COND ! ( VAR_1 ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( new TYPE_2 [ ] { VAR_3 , VAR_4 } , VAR_5 ) ) INIT = new TYPE_1 ( new TYPE_2 [ ] { VAR_3 , VAR_4 } , VAR_5 ) ) VAR VAR (  VAR_6 = VAR_7 )  VAR_6 = VAR_7 (  VAR_8 = true )  VAR_8 = true (  VAR_9 = TYPE_3 . METHOD_2 ( STRING_1 ) )  VAR_9 = TYPE_3 . METHOD_2 ( STRING_1 ) (  VAR_2 . METHOD_3 ( ) )  VAR_2 . METHOD_3 ( ) (  assertTrue ( VAR_10 ) )  assertTrue ( VAR_10 ) (  assertTrue ( VAR_11 ) )  assertTrue ( VAR_11 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE android.bluetooth.BluetoothDevice ) TYPE android.bluetooth.BluetoothDevice ( NAME device ) NAME device ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  android.util.Log.v ( VAR_1 . TAG , ( STRING_1 + device ) ) )  android.util.Log.v ( VAR_1 . TAG , ( STRING_1 + device ) ) ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME result ) NAME result ( INIT = false ) INIT = false ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME service ) NAME service ( INIT = VAR_2 ) INIT = VAR_2 ) VAR VAR ( IF IF ( COND service != null ) COND service != null ( THEN THEN ( TRY TRY ( BLOCK BLOCK (  result = service . METHOD_1 ( device ) )  result = service . METHOD_1 ( device ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME e ) NAME e ( BLOCK BLOCK (  android.util.Log.e ( VAR_1 . TAG , e.toString ( ) ) )  android.util.Log.e ( VAR_1 . TAG , e.toString ( ) ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) THEN THEN ( ELSE ELSE (  android.util.Log.w ( VAR_1 . TAG , STRING_2 ) )  android.util.Log.w ( VAR_1 . TAG , STRING_2 ) ) ELSE ELSE ) IF IF (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE android.os.Message ) TYPE android.os.Message ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) == null ) COND ( VAR_1 ) == null ( THEN THEN (  VAR_1 = new TYPE_1 ( 20 , 0 , ( - 1 ) , ( - 1 ) , ( - 1 ) , ( - 1 ) , ( - 1 ) , INT_1 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , true ) )  VAR_1 = new TYPE_1 ( 20 , 0 , ( - 1 ) , ( - 1 ) , ( - 1 ) , ( - 1 ) , ( - 1 ) , INT_1 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , true ) ) THEN THEN ) IF IF (  METHOD_2 ( result , VAR_1 ) )  METHOD_2 ( result , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  METHOD_3 ( true ) )  METHOD_3 ( true ) (  TYPE_1 . METHOD_4 ( new java.lang.IllegalArgumentException ( STRING_1 ) ) . when ( VAR_1 ) . METHOD_5 ( org.mockito.Matchers . METHOD_6 ( VAR_2 class ) ) )  TYPE_1 . METHOD_4 ( new java.lang.IllegalArgumentException ( STRING_1 ) ) . when ( VAR_1 ) . METHOD_5 ( org.mockito.Matchers . METHOD_6 ( VAR_2 class ) ) (  assertFalse ( VAR_3 . METHOD_7 ( new TYPE_2 ( ) , false ) ) )  assertFalse ( VAR_3 . METHOD_7 ( new TYPE_2 ( ) , false ) ) (  org.mockito.Mockito.verify ( VAR_4 , TYPE_1 . METHOD_8 ( 2 ) ) . METHOD_9 ( org.mockito.Matchers . METHOD_10 ( ) ) )  org.mockito.Mockito.verify ( VAR_4 , TYPE_1 . METHOD_8 ( 2 ) ) . METHOD_9 ( org.mockito.Matchers . METHOD_10 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME x ) NAME x ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME info ) NAME info ( INIT = METHOD_2 ( x ) ) INIT = METHOD_2 ( x ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME action ) NAME action ( INIT = METHOD_3 ( x . action ) ) INIT = METHOD_3 ( x . action ) ) VAR VAR ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_3 ( VAR_3 ) ) INIT = METHOD_3 ( VAR_3 ) ) VAR VAR ( IF IF ( COND action == null ) COND action == null ( THEN THEN (  action = new TYPE_6 ( info ) )  action = new TYPE_6 ( info ) ) THEN THEN ) IF IF (  METHOD_4 ( new TYPE_7 ( info , VAR_2 , action ) ) )  METHOD_4 ( new TYPE_7 ( info , VAR_2 , action ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Throwable ) TYPE java.lang.Throwable ( NAME e ) NAME e ( BLOCK BLOCK (  throw METHOD_5 ( x , e ) ; )  throw METHOD_5 ( x , e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( ( TYPE_2 ) ( VAR_1 ) ) ) INIT = ( ( TYPE_2 ) ( VAR_1 ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = ( ( TYPE_2 ) ( VAR_2 ) ) ) INIT = ( ( TYPE_2 ) ( VAR_2 ) ) ) VAR VAR ( IF IF ( COND ( ( VAR_5 ) == ( VAR_6 ) ) && ( ( VAR_7 ) != ( VAR_6 ) ) ) COND ( ( VAR_5 ) == ( VAR_6 ) ) && ( ( VAR_7 ) != ( VAR_6 ) ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ( ELSE ELSE (  return ( VAR_5 . METHOD_2 ( ) ) > ( VAR_7 . METHOD_2 ( ) ) ; )  return ( VAR_5 . METHOD_2 ( ) ) > ( VAR_7 . METHOD_2 ( ) ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( new java.util.HashMap < > ( ) ) . METHOD_3 ( 1 , FLOAT_1 ) )  TYPE_1 . METHOD_2 ( new java.util.HashMap < > ( ) ) . METHOD_3 ( 1 , FLOAT_1 ) (  fail ( ) )  fail ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME expected ) NAME expected ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ( VAR VAR ( TYPE java.util.HashMap<java.lang.Integer,TYPE_3> ) TYPE java.util.HashMap<java.lang.Integer,TYPE_3> ( NAME m ) NAME m ( INIT = new java.util.HashMap < > ( ) ) INIT = new java.util.HashMap < > ( ) ) VAR VAR (  m . METHOD_4 ( 1 , FLOAT_1 ) )  m . METHOD_4 ( 1 , FLOAT_1 ) ( TRY TRY ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( m ) . METHOD_3 ( 1 , FLOAT_1 ) )  TYPE_1 . METHOD_2 ( m ) . METHOD_3 ( 1 , FLOAT_1 ) (  fail ( ) )  fail ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME expected ) NAME expected ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME sb ) NAME sb ( INIT = new TYPE_1 ( 100 ) ) INIT = new TYPE_1 ( 100 ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = values . size ( ) ) INIT = values . size ( ) ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < VAR_1 ) COND i < VAR_1 ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK (  sb.append ( STRING_1 ) )  sb.append ( STRING_1 ) (  sb.append ( i ) )  sb.append ( i ) (  sb.append ( STRING_2 ) )  sb.append ( STRING_2 ) (  sb.append ( values . get ( i ) . METHOD_2 ( ) ) )  sb.append ( values . get ( i ) . METHOD_2 ( ) ) ) BLOCK BLOCK ) FOR FOR (  return sb . toString ( ) ; )  return sb . toString ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  VAR_2 )  VAR_2 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 . get ( VAR_1 ) ) INIT = VAR_4 . get ( VAR_1 ) ) VAR VAR ( IF IF ( COND ( VAR_3 != null ) && ( ( VAR_5 ) != null ) ) COND ( VAR_3 != null ) && ( ( VAR_5 ) != null ) ( THEN THEN (  return VAR_2 . get ( VAR_5 ) ; )  return VAR_2 . get ( VAR_5 ) ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = 100 ) INIT = 100 ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < VAR_1 ) COND i < VAR_1 ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK (  METHOD_2 ( ( ( ( STRING_1 + ( i + 1 ) ) + STRING_2 ) + VAR_1 ) , INT_1 ) )  METHOD_2 ( ( ( ( STRING_1 + ( i + 1 ) ) + STRING_2 ) + VAR_1 ) , INT_1 ) ) BLOCK BLOCK ) FOR FOR ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( false ) )  METHOD_2 ( false ) (  METHOD_3 ( false ) )  METHOD_3 ( false ) (  METHOD_4 ( false ) )  METHOD_4 ( false ) (  METHOD_5 ( VAR_1 , true ) )  METHOD_5 ( VAR_1 , true ) (  METHOD_6 ( false ) )  METHOD_6 ( false ) (  assertEquals ( VAR_2 , TYPE_1 . METHOD_7 ( mContext , VAR_3 , VAR_4 ) ) )  assertEquals ( VAR_2 , TYPE_1 . METHOD_7 ( mContext , VAR_3 , VAR_4 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( 1 ) ) INIT = new TYPE_1 ( 1 ) ) VAR VAR (  VAR_1 . METHOD_2 ( new java.lang.Object ( ) ) )  VAR_1 . METHOD_2 ( new java.lang.Object ( ) ) (  VAR_1 . METHOD_2 ( new java.lang.Object ( ) ) )  VAR_1 . METHOD_2 ( new java.lang.Object ( ) ) (  VAR_1 . METHOD_2 ( new java.lang.Object ( ) ) )  VAR_1 . METHOD_2 ( new java.lang.Object ( ) ) (  METHOD_3 ( ) )  METHOD_3 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.Class<?> ) TYPE java.lang.Class<?> ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE TYPE_3<java.lang.String> ) TYPE TYPE_3<java.lang.String> ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_6 ) NAME VAR_6 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_7 ) NAME VAR_7 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_8 class . METHOD_2 ( VAR_3 ) ) COND VAR_8 class . METHOD_2 ( VAR_3 ) ( THEN THEN (  return new TYPE_5 ( VAR_1 , VAR_7 , VAR_3 ) ; )  return new TYPE_5 ( VAR_1 , VAR_7 , VAR_3 ) ; ) THEN THEN ( ELSE ELSE (  return null ; )  return null ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME x ) NAME x ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME info ) NAME info ( INIT = METHOD_2 ( x ) ) INIT = METHOD_2 ( x ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_4> ) TYPE java.util.List<TYPE_4> ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_3 ( info , VAR_3 , VAR_4 ) ) INIT = METHOD_3 ( info , VAR_3 , VAR_4 ) ) VAR VAR (  METHOD_4 ( info , x , x . METHOD_5 ( ) , VAR_2 , VAR_1 ) )  METHOD_4 ( info , x , x . METHOD_5 ( ) , VAR_2 , VAR_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Throwable ) TYPE java.lang.Throwable ( NAME e ) NAME e ( BLOCK BLOCK (  throw METHOD_6 ( x , e ) ; )  throw METHOD_6 ( x , e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  android.util.Log . i ( TYPE_1 . TAG , ( ( ( STRING_1 + ( VAR_1 ) ) + STRING_2 ) + ( TYPE_1 . METHOD_2 ( METHOD_3 ( ) . VAR_2 ) ) ) ) )  android.util.Log . i ( TYPE_1 . TAG , ( ( ( STRING_1 + ( VAR_1 ) ) + STRING_2 ) + ( TYPE_1 . METHOD_2 ( METHOD_3 ( ) . VAR_2 ) ) ) ) (  VAR_3 = VAR_4 )  VAR_3 = VAR_4 (  METHOD_4 ( VAR_5 ) )  METHOD_4 ( VAR_5 ) (  METHOD_5 ( VAR_3 , VAR_6 ) )  METHOD_5 ( VAR_3 , VAR_6 ) (  METHOD_6 ( VAR_7 , VAR_8 ) )  METHOD_6 ( VAR_7 , VAR_8 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE android.bluetooth.BluetoothDevice ) TYPE android.bluetooth.BluetoothDevice ( NAME device ) NAME device ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME result ) NAME result ( INIT = false ) INIT = false ) VAR VAR ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  android.util.Log.d ( VAR_2 . TAG , STRING_1 ) )  android.util.Log.d ( VAR_2 . TAG , STRING_1 ) ) THEN THEN ) IF IF ( IF IF ( COND METHOD_2 ( ) . equals ( device ) ) COND METHOD_2 ( ) . equals ( device ) ( THEN THEN ( SWITCH SWITCH ( NAME VAR_3 ) NAME VAR_3 ( CASE VAR_4 ( BLOCK BLOCK (  METHOD_3 ( ( - 1 ) ) )  METHOD_3 ( ( - 1 ) ) (  result = true )  result = true (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_4 ( DEFAULT DEFAULT ( BLOCK BLOCK (  break ; )  break ; ) BLOCK BLOCK ) DEFAULT DEFAULT ) SWITCH SWITCH ) THEN THEN ) IF IF (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) INIT = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) VAR VAR ( IF IF ( COND VAR_2 . METHOD_4 ( ) ) COND VAR_2 . METHOD_4 ( ) ( THEN THEN (  VAR_2 = VAR_3 . METHOD_5 ( VAR_2 ) )  VAR_2 = VAR_3 . METHOD_5 ( VAR_2 ) ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_4 ( VAR_5 , TYPE_5 . METHOD_6 ( VAR_1 ) , TYPE_6 . METHOD_7 ( VAR_2 ) , METHOD_8 ( ) ) ) INIT = new TYPE_4 ( VAR_5 , TYPE_5 . METHOD_6 ( VAR_1 ) , TYPE_6 . METHOD_7 ( VAR_2 ) , METHOD_8 ( ) ) ) VAR VAR (  METHOD_9 ( VAR_4 ) )  METHOD_9 ( VAR_4 ) (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME m ) NAME m ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME v ) NAME v ) VAR VAR ( VAR VAR ( TYPE byte ) TYPE byte ( NAME value ) NAME value ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = false ) INIT = false ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( IF IF ( COND v == null ) COND v == null ( THEN THEN (  m . METHOD_2 ( value ) )  m . METHOD_2 ( value ) ) THEN THEN ( ELSE ELSE (  m . METHOD_2 ( v , value ) )  m . METHOD_2 ( v , value ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_2 = true )  VAR_2 = true ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  TYPE_4 . METHOD_3 ( VAR_2 , VAR_1 ) )  TYPE_4 . METHOD_3 ( VAR_2 , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( VAR_2 , STRING_1 ) ) INIT = new TYPE_1 ( VAR_2 , STRING_1 ) ) VAR VAR (  VAR_1 . METHOD_2 ( 0 ) )  VAR_1 . METHOD_2 ( 0 ) (  assertEquals ( 0 , VAR_2 . length ( ) ) )  assertEquals ( 0 , VAR_2 . length ( ) ) ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( ( long ) ( VAR_4 ) ) + INT_1 ) INIT = ( ( long ) ( VAR_4 ) ) + INT_1 ) VAR VAR (  VAR_1 . METHOD_2 ( VAR_3 ) )  VAR_1 . METHOD_2 ( VAR_3 ) (  assertEquals ( VAR_3 , VAR_2 . length ( ) ) )  assertEquals ( VAR_3 , VAR_2 . length ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  android.util.Log.d ( TAG , STRING_1 ) )  android.util.Log.d ( TAG , STRING_1 ) ) THEN THEN ) IF IF (  METHOD_2 ( ) )  METHOD_2 ( ) ( IF IF ( COND ( VAR_2 ) != null ) COND ( VAR_2 ) != null ( THEN THEN (  VAR_3 = new TYPE_1 ( VAR_2 ) )  VAR_3 = new TYPE_1 ( VAR_2 ) (  VAR_3 . start ( ) )  VAR_3 . start ( ) ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_4 ) != null ) COND ( VAR_4 ) != null ( THEN THEN (  VAR_5 = new TYPE_1 ( VAR_4 ) )  VAR_5 = new TYPE_1 ( VAR_4 ) (  VAR_5 . start ( ) )  VAR_5 . start ( ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( VAR_2 ) ) INIT = new TYPE_1 ( VAR_2 ) ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < ( VAR_2 ) ) COND i < ( VAR_2 ) ( UPDATE UPDATE (  ++ i )  ++ i ) UPDATE UPDATE ( BLOCK BLOCK (  assertTrue ( VAR_1 . METHOD_2 ( new java.lang.Integer ( i ) ) ) )  assertTrue ( VAR_1 . METHOD_2 ( new java.lang.Integer ( i ) ) ) ) BLOCK BLOCK ) FOR FOR (  assertEquals ( 0 , VAR_1 . METHOD_3 ( ) ) )  assertEquals ( 0 , VAR_1 . METHOD_3 ( ) ) (  VAR_1 . METHOD_2 ( new java.lang.Integer ( VAR_2 ) ) )  VAR_1 . METHOD_2 ( new java.lang.Integer ( VAR_2 ) ) (  METHOD_4 ( ) )  METHOD_4 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( ) . addFeature ( VAR_2 ) . addFeature ( VAR_3 ) . build ( ) ) INIT = new TYPE_2 ( ) . addFeature ( VAR_2 ) . addFeature ( VAR_3 ) . build ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME p ) NAME p ( INIT = TYPE_3 . METHOD_2 ( ) ) INIT = TYPE_3 . METHOD_2 ( ) ) VAR VAR (  VAR_1 . METHOD_3 ( p , 0 ) )  VAR_1 . METHOD_3 ( p , 0 ) (  p . METHOD_4 ( 0 ) )  p . METHOD_4 ( 0 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ( INIT = TYPE_4 . METHOD_5 ( p ) ) INIT = TYPE_4 . METHOD_5 ( p ) ) VAR VAR (  p . METHOD_6 ( ) )  p . METHOD_6 ( ) (  TYPE_5 . assertEquals ( VAR_1 , result ) )  TYPE_5 . assertEquals ( VAR_1 , result ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_2 ( VAR_3 ) . get ( VAR_1 ) ) INIT = TYPE_2 . METHOD_2 ( VAR_3 ) . get ( VAR_1 ) ) VAR VAR (  assertNotNull ( VAR_2 ) )  assertNotNull ( VAR_2 ) ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME p ) NAME p ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK (  assertTrue ( ( ( STRING_2 + p ) + STRING_3 ) , p . METHOD_3 ( ) ) )  assertTrue ( ( ( STRING_2 + p ) + STRING_3 ) , p . METHOD_3 ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<TYPE_2> ) RETURN TYPE_1<TYPE_2> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME project ) NAME project ) VAR VAR ( VAR VAR ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE TYPE_7 ) TYPE TYPE_7 ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( TYPE_8 . METHOD_2 ( ) . METHOD_3 ( ) ) ) COND ! ( TYPE_8 . METHOD_2 ( ) . METHOD_3 ( ) ) ( THEN THEN (  return TYPE_9 . METHOD_4 ( ) ; )  return TYPE_9 . METHOD_4 ( ) ; ) THEN THEN ) IF IF (  return VAR_5 < TYPE_2 > METHOD_5 ( new TYPE_10 ( project , VAR_1 , VAR_2 , VAR_3 ) ) ; )  return VAR_5 < TYPE_2 > METHOD_5 ( new TYPE_10 ( project , VAR_1 , VAR_2 , VAR_3 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  VAR_1 )  VAR_1 ( BLOCK BLOCK ( IF IF ( COND METHOD_2 ( ) ) COND METHOD_2 ( ) ( THEN THEN (  TYPE_1 . METHOD_3 ( ) )  TYPE_1 . METHOD_3 ( ) ( TRY TRY ( BLOCK BLOCK (  VAR_2 . METHOD_4 ( VAR_3 ) )  VAR_2 . METHOD_4 ( VAR_3 ) (  android.util.Log.d ( TYPE_1 . TAG , STRING_1 ) )  android.util.Log.d ( TYPE_1 . TAG , STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME e ) NAME e ( BLOCK BLOCK (  android.util.Log.e ( TYPE_1 . TAG , STRING_2 ) )  android.util.Log.e ( TYPE_1 . TAG , STRING_2 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  VAR_2 = null )  VAR_2 = null (  VAR_4 = 0 )  VAR_4 = 0 (  VAR_5 = null )  VAR_5 = null (  VAR_6 = - 1 )  VAR_6 = - 1 ) THEN THEN ) IF IF ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ( IF IF ( COND ( VAR_7 ) != null ) COND ( VAR_7 ) != null ( THEN THEN (  VAR_7 . METHOD_5 ( ) )  VAR_7 . METHOD_5 ( ) (  VAR_7 = null )  VAR_7 = null ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME address ) NAME address ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME context ) NAME context ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME listener ) NAME listener ( INIT = new TYPE_3 ( address , VAR_1 , VAR_2 , context ) ) INIT = new TYPE_3 ( address , VAR_1 , VAR_2 , context ) ) VAR VAR ( IF IF ( COND ( VAR_1 ) != null ) COND ( VAR_1 ) != null ( THEN THEN (  listener . METHOD_2 ( ) )  listener . METHOD_2 ( ) (  VAR_3 . METHOD_3 ( listener ) )  VAR_3 . METHOD_3 ( listener ) ) THEN THEN ) IF IF (  return listener . METHOD_4 ( ) ; )  return listener . METHOD_4 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( VAR_2 , STRING_1 ) )  METHOD_2 ( VAR_2 , STRING_1 ) ( SYNCHRONIZED SYNCHRONIZED (  this )  this ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 . METHOD_3 ( ) ) INIT = VAR_4 . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_4 . METHOD_1 ( VAR_3 , VAR_1 ) ) INIT = VAR_4 . METHOD_1 ( VAR_3 , VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_5 == null ) COND VAR_5 == null ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF (  return VAR_6 ; )  return VAR_6 ; ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_1 . d ( this , STRING_1 , VAR_1 ) )  TYPE_1 . d ( this , STRING_1 , VAR_1 ) ( IF IF ( COND VAR_2 . METHOD_2 ( VAR_1 ) ) COND VAR_2 . METHOD_2 ( VAR_1 ) ( THEN THEN (  METHOD_3 ( VAR_1 , STRING_2 ) . METHOD_4 ( ) )  METHOD_3 ( VAR_1 , STRING_2 ) . METHOD_4 ( ) (  METHOD_3 ( VAR_1 , STRING_2 ) . METHOD_5 ( ) )  METHOD_3 ( VAR_1 , STRING_2 ) . METHOD_5 ( ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND VAR_3 . METHOD_2 ( VAR_1 ) ) COND VAR_3 . METHOD_2 ( VAR_1 ) ( THEN THEN (  TYPE_1 . w ( this , STRING_3 ) )  TYPE_1 . w ( this , STRING_3 ) ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME a ) NAME a ) VAR VAR ( VAR VAR ( TYPE java.lang.Integer ) TYPE java.lang.Integer ( NAME b ) NAME b ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND a && ( ( b . METHOD_2 ( ) ) == INT_1 ) ) COND a && ( ( b . METHOD_2 ( ) ) == INT_1 ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  java.lang.System.out.println ( ( ( ( STRING_1 + a ) + STRING_2 ) + b ) ) )  java.lang.System.out.println ( ( ( ( STRING_1 + a ) + STRING_2 ) + b ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public synchronized ) MODIFIER public synchronized ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( VAR_2 , STRING_1 ) )  METHOD_2 ( VAR_2 , STRING_1 ) ( IF IF ( COND VAR_3 . METHOD_3 ( VAR_4 , VAR_5 ) ) COND VAR_3 . METHOD_3 ( VAR_4 , VAR_5 ) ( THEN THEN (  METHOD_4 ( STRING_2 ) )  METHOD_4 ( STRING_2 ) (  return false ; )  return false ; ) THEN THEN ) IF IF (  METHOD_4 ( ( STRING_3 + ( VAR_6 ) ) ) )  METHOD_4 ( ( STRING_3 + ( VAR_6 ) ) ) (  VAR_6 = VAR_1 )  VAR_6 = VAR_1 ( VAR VAR ( TYPE android.os.Message ) TYPE android.os.Message ( NAME m ) NAME m ( INIT = VAR_7 . METHOD_5 ( VAR_8 ) ) INIT = VAR_7 . METHOD_5 ( VAR_8 ) ) VAR VAR (  VAR_7 . METHOD_6 ( m ) )  VAR_7 . METHOD_6 ( m ) (  VAR_9 = TYPE_1 . METHOD_7 ( ) )  VAR_9 = TYPE_1 . METHOD_7 ( ) (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE android.bluetooth.BluetoothDevice ) TYPE android.bluetooth.BluetoothDevice ( NAME device ) NAME device ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( TYPE_1 . METHOD_2 ( ) ) ) COND ! ( TYPE_1 . METHOD_2 ( ) ) ( THEN THEN (  android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) )  android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME service ) NAME service ( INIT = METHOD_3 ( ) ) INIT = METHOD_3 ( ) ) VAR VAR ( IF IF ( COND service == null ) COND service == null ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  return service . METHOD_1 ( device , VAR_1 ) ; )  return service . METHOD_1 ( device , VAR_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE float ) TYPE float ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE float ) TYPE float ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_6 ) NAME VAR_6 ( INIT = VAR_7 . METHOD_2 ( VAR_1 ) ) INIT = VAR_7 . METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_6 == null ) COND VAR_6 == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  VAR_8 . append ( new TYPE_3 . Float ( VAR_9 , VAR_10 , VAR_2 . METHOD_3 ( ) , VAR_2 . METHOD_4 ( ) , ( VAR_3 * 2 ) , ( VAR_4 * 2 ) ) , false ) )  VAR_8 . append ( new TYPE_3 . Float ( VAR_9 , VAR_10 , VAR_2 . METHOD_3 ( ) , VAR_2 . METHOD_4 ( ) , ( VAR_3 * 2 ) , ( VAR_4 * 2 ) ) , false ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = false ) INIT = false ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = this . VAR_3 ) INIT = this . VAR_3 ) VAR VAR (  VAR_3 . METHOD_2 ( ) )  VAR_3 . METHOD_2 ( ) ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = METHOD_3 ( VAR_1 ) ) INIT = METHOD_3 ( VAR_1 ) ) VAR VAR ( IF IF ( COND i != ( - 1 ) ) COND i != ( - 1 ) ( THEN THEN (  METHOD_4 ( i ) )  METHOD_4 ( i ) (  VAR_2 = true )  VAR_2 = true ) THEN THEN ) IF IF ) BLOCK BLOCK ( FINALLY FINALLY (  VAR_3 . METHOD_5 ( ) )  VAR_3 . METHOD_5 ( ) ) FINALLY FINALLY ) TRY TRY (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME res ) NAME res ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN ( IF IF ( COND relaxed ) COND relaxed ( THEN THEN (  VAR_2 = new TYPE_2 ( mRS , res , VAR_3 ) )  VAR_2 = new TYPE_2 ( mRS , res , VAR_3 ) ) THEN THEN ( ELSE ELSE (  VAR_4 = new TYPE_3 ( mRS , res , VAR_5 ) )  VAR_4 = new TYPE_3 ( mRS , res , VAR_5 ) ) ELSE ELSE ) IF IF ) THEN THEN ( ELSE ELSE ( IF IF ( COND relaxed ) COND relaxed ( THEN THEN (  VAR_6 = new TYPE_4 ( mRS , res , VAR_7 ) )  VAR_6 = new TYPE_4 ( mRS , res , VAR_7 ) ) THEN THEN ( ELSE ELSE (  VAR_8 = new TYPE_5 ( mRS , res , VAR_9 ) )  VAR_8 = new TYPE_5 ( mRS , res , VAR_9 ) ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF (  METHOD_2 ( ) )  METHOD_2 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = java.lang.Integer . METHOD_3 ( VAR_1 ) ) INIT = java.lang.Integer . METHOD_3 ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_4 ( ) ) INIT = METHOD_4 ( ) ) VAR VAR ( IF IF ( COND VAR_3 == null ) COND VAR_3 == null ( THEN THEN (  VAR_4 . println ( STRING_1 ) )  VAR_4 . println ( STRING_1 ) (  return ; )  return ; ) THEN THEN ) IF IF ( TRY TRY ( BLOCK BLOCK (  VAR_5 . METHOD_5 ( VAR_2 , VAR_3 ) )  VAR_5 . METHOD_5 ( VAR_2 , VAR_3 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME path ) NAME path ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.io.File> ) TYPE java.util.List<java.io.File> ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_1 . METHOD_2 ( VAR_1 , path ) ) INIT = TYPE_1 . METHOD_2 ( VAR_1 , path ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME sb ) NAME sb ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE TYPE_3<java.io.File> ) TYPE TYPE_3<java.io.File> ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_2 . METHOD_3 ( ) ) INIT = VAR_2 . METHOD_3 ( ) ) VAR VAR ) INIT INIT ( COND VAR_3 . METHOD_4 ( ) ) COND VAR_3 . METHOD_4 ( ) ( BLOCK BLOCK (  sb.append ( VAR_3 . METHOD_5 ( ) . METHOD_6 ( ) ) )  sb.append ( VAR_3 . METHOD_5 ( ) . METHOD_6 ( ) ) ( IF IF ( COND VAR_3 . METHOD_4 ( ) ) COND VAR_3 . METHOD_4 ( ) ( THEN THEN (  sb.append ( VAR_4 ) )  sb.append ( VAR_4 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR FOR (  return sb . toString ( ) ; )  return sb . toString ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( PARAMS PARAMS ( VAR VAR ( TYPE com.android.jack.ir.ast.JMethod ) TYPE com.android.jack.ir.ast.JMethod ( NAME method ) NAME method ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE com.android.jack.ir.ast.JDefinedClassOrInterface ) TYPE com.android.jack.ir.ast.JDefinedClassOrInterface ( NAME VAR_1 ) NAME VAR_1 ( INIT = method . METHOD_1 ( ) ) INIT = method . METHOD_1 ( ) ) VAR VAR ( IF IF ( COND ( ( method . METHOD_2 ( ) ) || ( method . METHOD_3 ( ) ) ) || ( ! ( VAR_2 . METHOD_4 ( this . METHOD_5 ( ) , method ) ) ) ) COND ( ( method . METHOD_2 ( ) ) || ( method . METHOD_3 ( ) ) ) || ( ! ( VAR_2 . METHOD_4 ( this . METHOD_5 ( ) , method ) ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  session = VAR_1 . METHOD_6 ( ) )  session = VAR_1 . METHOD_6 ( ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_1 ( method ) ) INIT = new TYPE_1 ( method ) ) VAR VAR (  VAR_3 . METHOD_4 ( method ) )  VAR_3 . METHOD_4 ( method ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_2 ( ) ) INIT = VAR_2 . METHOD_2 ( ) ) VAR VAR (  METHOD_3 ( STRING_1 , VAR_1 , VAR_3 ) )  METHOD_3 ( STRING_1 , VAR_1 , VAR_3 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_5 ) INIT = VAR_5 ) VAR VAR (  VAR_4 . METHOD_4 ( VAR_6 ) )  VAR_4 . METHOD_4 ( VAR_6 ) (  METHOD_5 ( new TYPE_3 ( TYPE_4 . METHOD_6 ( ) ) , VAR_7 ) )  METHOD_5 ( new TYPE_3 ( TYPE_4 . METHOD_6 ( ) ) , VAR_7 ) (  METHOD_7 ( STRING_1 , VAR_8 . METHOD_2 ( ) , VAR_3 ) )  METHOD_7 ( STRING_1 , VAR_8 . METHOD_2 ( ) , VAR_3 ) (  assertEquals ( VAR_9 , VAR_10 . METHOD_8 ( ) ) )  assertEquals ( VAR_9 , VAR_10 . METHOD_8 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME callback ) NAME callback ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_2 . METHOD_2 ( mContext ) )  TYPE_2 . METHOD_2 ( mContext ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_3 ( TYPE_4 . METHOD_4 ( ) ) ) INIT = VAR_2 . METHOD_3 ( TYPE_4 . METHOD_4 ( ) ) ) VAR VAR ( IF IF ( COND ( ! ( VAR_1 . METHOD_5 ( ) ) ) && ( ! ( VAR_2 . METHOD_6 ( VAR_3 , VAR_1 . METHOD_7 ( ) ) ) ) ) COND ( ! ( VAR_1 . METHOD_5 ( ) ) ) && ( ! ( VAR_2 . METHOD_6 ( VAR_3 , VAR_1 . METHOD_7 ( ) ) ) ) ( THEN THEN (  VAR_4 . METHOD_8 ( callback , TYPE_5 . METHOD_9 ( ) ) )  VAR_4 . METHOD_8 ( callback , TYPE_5 . METHOD_9 ( ) ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND VAR_5 ) COND VAR_5 ( THEN THEN (  android.util.Log.d ( VAR_6 . TAG , STRING_1 ) )  android.util.Log.d ( VAR_6 . TAG , STRING_1 ) ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  METHOD_3 ( VAR_1 , STRING_1 , STRING_2 , STRING_3 , STRING_4 , STRING_5 , STRING_6 , STRING_7 , STRING_8 , STRING_9 , STRING_10 , STRING_11 , STRING_12 , STRING_13 , STRING_14 , STRING_15 , STRING_16 , STRING_17 , STRING_18 , STRING_19 , STRING_20 , STRING_21 , STRING_22 , STRING_23 , STRING_24 , STRING_25 , STRING_26 , STRING_27 ) )  METHOD_3 ( VAR_1 , STRING_1 , STRING_2 , STRING_3 , STRING_4 , STRING_5 , STRING_6 , STRING_7 , STRING_8 , STRING_9 , STRING_10 , STRING_11 , STRING_12 , STRING_13 , STRING_14 , STRING_15 , STRING_16 , STRING_17 , STRING_18 , STRING_19 , STRING_20 , STRING_21 , STRING_22 , STRING_23 , STRING_24 , STRING_25 , STRING_26 , STRING_27 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME TYPE_2 ) NAME TYPE_2 ( INIT = this . METHOD_2 ( ) ) INIT = this . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND TYPE_2 . METHOD_3 ( ) ) COND TYPE_2 . METHOD_3 ( ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME TYPE_3 ) NAME TYPE_3 ( INIT = this . METHOD_4 ( ) ) INIT = this . METHOD_4 ( ) ) VAR VAR ( SWITCH SWITCH ( NAME this . METHOD_5 ( ) ) NAME this . METHOD_5 ( ) ( CASE VAR_1 ( BLOCK BLOCK (  return TYPE_3 . METHOD_6 ( TYPE_2 ) . METHOD_7 ( ) ; )  return TYPE_3 . METHOD_6 ( TYPE_2 ) . METHOD_7 ( ) ; ) BLOCK BLOCK ) CASE VAR_1 ( CASE VAR_2 ( BLOCK BLOCK (  return TYPE_3 . METHOD_6 ( TYPE_2 ) . METHOD_7 ( ) ; )  return TYPE_3 . METHOD_6 ( TYPE_2 ) . METHOD_7 ( ) ; ) BLOCK BLOCK ) CASE VAR_2 ( DEFAULT DEFAULT ( BLOCK BLOCK (  return TYPE_3 . METHOD_8 ( TYPE_2 ) . METHOD_7 ( ) ; )  return TYPE_3 . METHOD_8 ( TYPE_2 ) . METHOD_7 ( ) ; ) BLOCK BLOCK ) DEFAULT DEFAULT ) SWITCH SWITCH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME context ) NAME context ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_4 . METHOD_2 ( VAR_1 ) )  TYPE_4 . METHOD_2 ( VAR_1 ) (  TYPE_4 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) )  TYPE_4 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_1 . METHOD_5 ( ) ) INIT = TYPE_1 . METHOD_5 ( ) ) VAR VAR ( DO-WHILE DO-WHILE ( COND VAR_1 . METHOD_8 ( ) ) COND VAR_1 . METHOD_8 ( ) ( BLOCK BLOCK (  VAR_2 . METHOD_6 ( TYPE_6 . METHOD_7 ( context , VAR_1 ) ) )  VAR_2 . METHOD_6 ( TYPE_6 . METHOD_7 ( context , VAR_1 ) ) ) BLOCK BLOCK ) DO-WHILE DO-WHILE (  return VAR_2 . build ( ) ; )  return VAR_2 . build ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME test ) NAME test ) VAR VAR ( VAR VAR ( TYPE java.lang.Object[] ) TYPE java.lang.Object[] ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  assertFalse ( STRING_1 , ( ( VAR_1 . length ) == 0 ) ) )  assertFalse ( STRING_1 , ( ( VAR_1 . length ) == 0 ) ) ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < ( VAR_1 . length ) ) COND i < ( VAR_1 . length ) ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_4 . METHOD_2 ( test , ( ( STRING_2 + i ) + STRING_3 ) ) ) INIT = TYPE_4 . METHOD_2 ( test , ( ( STRING_2 + i ) + STRING_3 ) ) ) VAR VAR (  VAR_2 . METHOD_3 ( ( ( TYPE_3 ) ( VAR_1 [ i ] ) ) , VAR_3 ) )  VAR_2 . METHOD_3 ( ( ( TYPE_3 ) ( VAR_1 [ i ] ) ) , VAR_3 ) ) BLOCK BLOCK ) FOR FOR ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME data ) NAME data ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME telephony ) NAME telephony ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( IF IF ( COND telephony != null ) COND telephony != null ( THEN THEN (  return telephony . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , data ) ; )  return telephony . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , data ) ; ) THEN THEN ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME ex ) NAME ex ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE java.lang.NullPointerException ) TYPE java.lang.NullPointerException ( NAME ex ) NAME ex ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  return STRING_1 ; )  return STRING_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.Object> ) TYPE java.util.Map<java.lang.String,java.lang.Object> ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_2 . METHOD_2 ( ) ) INIT = VAR_2 . METHOD_2 ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME key ) NAME key ( IN TYPE_1 . METHOD_3 ( VAR_3 ) ) IN TYPE_1 . METHOD_3 ( VAR_3 ) ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME value ) NAME value ( INIT = VAR_3 . get ( key ) ) INIT = VAR_3 . get ( key ) ) VAR VAR (  android.util.Log.v ( VAR_1 , java.lang.String.format ( STRING_1 , key , TYPE_1 . METHOD_4 ( value ) ) ) )  android.util.Log.v ( VAR_1 , java.lang.String.format ( STRING_1 , key , TYPE_1 . METHOD_4 ( value ) ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private final ) MODIFIER private final ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME f ) NAME f ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME is ) NAME is ( INIT = TYPE_4 . METHOD_2 ( name ) ) INIT = TYPE_4 . METHOD_2 ( name ) ) VAR VAR (  assertNotNull ( ( STRING_1 + name ) , is ) )  assertNotNull ( ( STRING_1 + name ) , is ) ( TRY TRY ( BLOCK BLOCK (  return ( ( TYPE_1 ) ( f . METHOD_3 ( is ) ) ) ; )  return ( ( TYPE_1 ) ( f . METHOD_3 ( is ) ) ) ; ) BLOCK BLOCK ( FINALLY FINALLY ( TRY TRY ( BLOCK BLOCK (  is . METHOD_4 ( ) )  is . METHOD_4 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME VAR_1 ) NAME VAR_1 ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME s ) NAME s ( INIT = STRING_1 + ( STRING_2 + STRING_3 ) ) INIT = STRING_1 + ( STRING_2 + STRING_3 ) ) VAR VAR (  VAR_1 = false )  VAR_1 = false ( TRY TRY ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( s ) )  TYPE_1 . METHOD_2 ( s ) (  fail ( ) )  fail ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME expected ) NAME expected ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  assertFalse ( VAR_1 ) )  assertFalse ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_2 . METHOD_2 ( ) )  VAR_2 . METHOD_2 ( ) ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_4 ) IN VAR_4 ( BLOCK BLOCK (  new TYPE_3 ( VAR_2 , VAR_5 , VAR_1 , VAR_3 , VAR_6 ) . METHOD_3 ( ) )  new TYPE_3 ( VAR_2 , VAR_5 , VAR_1 , VAR_3 , VAR_6 ) . METHOD_3 ( ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  VAR_2 . METHOD_4 ( ) )  VAR_2 . METHOD_4 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND ( VAR_2 != null ) && ( ! ( VAR_2 instanceof TYPE_3 ) ) ) COND ( VAR_2 != null ) && ( ! ( VAR_2 instanceof TYPE_3 ) ) ( THEN THEN (  METHOD_3 ( VAR_2 ) )  METHOD_3 ( VAR_2 ) ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . METHOD_4 ( ) ) INIT = VAR_1 . METHOD_4 ( ) ) VAR VAR ( IF IF ( COND ( VAR_3 != null ) && ( ! ( VAR_3 instanceof TYPE_3 ) ) ) COND ( VAR_3 != null ) && ( ! ( VAR_3 instanceof TYPE_3 ) ) ( THEN THEN (  METHOD_3 ( VAR_3 ) )  METHOD_3 ( VAR_3 ) ) THEN THEN ) IF IF (  return super . METHOD_1 ( VAR_1 ) ; )  return super . METHOD_1 ( VAR_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME start ) NAME start ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( STRING_1 ) ) INIT = new TYPE_1 ( STRING_1 ) ) VAR VAR (  VAR_1 . start ( ) )  VAR_1 . start ( ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_1 ( ) ) INIT = VAR_1 . METHOD_1 ( ) ) VAR VAR (  VAR_3 = new TYPE_3 ( VAR_2 ) )  VAR_3 = new TYPE_3 ( VAR_2 ) (  VAR_4 = new TYPE_4 ( ) )  VAR_4 = new TYPE_4 ( ) (  VAR_5 . METHOD_2 ( VAR_4 , null , VAR_3 ) )  VAR_5 . METHOD_2 ( VAR_4 , null , VAR_3 ) (  METHOD_3 ( VAR_5 . METHOD_4 ( null ) ) )  METHOD_3 ( VAR_5 . METHOD_4 ( null ) ) (  VAR_6 = new TYPE_5 ( ) )  VAR_6 = new TYPE_5 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_2<TYPE_1,TYPE_3>> ) TYPE java.util.List<TYPE_2<TYPE_1,TYPE_3>> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN ( VAR VAR ( TYPE java.util.List<java.lang.Throwable> ) TYPE java.util.List<java.lang.Throwable> ( NAME VAR_3 ) NAME VAR_3 ( INIT = null ) INIT = null ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME session ) NAME session ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  VAR_3 = TYPE_4 . METHOD_2 ( session , VAR_2 , VAR_3 ) )  VAR_3 = TYPE_4 . METHOD_2 ( session , VAR_2 , VAR_3 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ( IF IF ( COND VAR_3 != null ) COND VAR_3 != null ( THEN THEN (  throw new TYPE_5 ( VAR_3 ) ; )  throw new TYPE_5 ( VAR_3 ) ; ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ) VAR VAR ( VAR VAR ( TYPE float ) TYPE float ( NAME x ) NAME x ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  throw new TYPE_2 ( ) ; )  throw new TYPE_2 ( ) ; ) THEN THEN ) IF IF ( IF IF ( COND ! ( VAR_2 ) ) COND ! ( VAR_2 ) ( THEN THEN (  throw new TYPE_3 ( STRING_1 ) ; )  throw new TYPE_3 ( STRING_1 ) ; ) THEN THEN ) IF IF (  METHOD_1 ( METHOD_2 ( METHOD_3 ( i , VAR_3 ) ) , x ) )  METHOD_1 ( METHOD_2 ( METHOD_3 ( i , VAR_3 ) ) , x ) (  return this ; )  return this ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1[] ) RETURN TYPE_1[] ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( ( VAR_1 ) == null ) || ( ( METHOD_2 ( ) ) == false ) ) COND ( ( VAR_1 ) == null ) || ( ( METHOD_2 ( ) ) == false ) ( THEN THEN (  android.util.Log.e ( android.bluetooth.BluetoothDevice . TAG , STRING_1 ) )  android.util.Log.e ( android.bluetooth.BluetoothDevice . TAG , STRING_1 ) (  return null ; )  return null ; ) THEN THEN ) IF IF ( TRY TRY ( BLOCK BLOCK (  return VAR_1 . METHOD_3 ( this ) ; )  return VAR_1 . METHOD_3 ( this ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME e ) NAME e ( BLOCK BLOCK (  android.util.Log.e ( android.bluetooth.BluetoothDevice . TAG , STRING_2 , e ) )  android.util.Log.e ( android.bluetooth.BluetoothDevice . TAG , STRING_2 , e ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( METHOD_1 ( VAR_4 , VAR_1 , ( ( TYPE_4 ) ( VAR_2 ) ) , VAR_3 ) ) ) COND ! ( METHOD_1 ( VAR_4 , VAR_1 , ( ( TYPE_4 ) ( VAR_2 ) ) , VAR_3 ) ) ( THEN THEN ( IF IF ( COND ! ( METHOD_1 ( VAR_5 , VAR_1 , ( ( com.android.jack.ir.ast.JMethod ) ( VAR_2 ) ) , VAR_3 ) ) ) COND ! ( METHOD_1 ( VAR_5 , VAR_1 , ( ( com.android.jack.ir.ast.JMethod ) ( VAR_2 ) ) , VAR_3 ) ) ( THEN THEN (  super . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 ) )  super . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE android.bluetooth.BluetoothDevice ) TYPE android.bluetooth.BluetoothDevice ( NAME device ) NAME device ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME data ) NAME data ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  android.util.Log.v ( VAR_2 . TAG , ( ( ( STRING_1 + device ) + STRING_2 ) + id ) ) )  android.util.Log.v ( VAR_2 . TAG , ( ( ( STRING_1 + device ) + STRING_2 ) + id ) ) ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME service ) NAME service ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( IF IF ( COND service == null ) COND service == null ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  return service . METHOD_1 ( device , id , data ) ; )  return service . METHOD_1 ( device , id , data ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  server . METHOD_2 ( new TYPE_1 ( ) . METHOD_3 ( new byte [ ] { - 2 , - 1 } ) ) )  server . METHOD_2 ( new TYPE_1 ( ) . METHOD_3 ( new byte [ ] { - 2 , - 1 } ) ) (  server . METHOD_4 ( ) )  server . METHOD_4 ( ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = server . METHOD_5 ( STRING_1 ) . METHOD_6 ( ) ) INIT = server . METHOD_5 ( STRING_1 ) . METHOD_6 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME in ) NAME in ( INIT = VAR_1 . METHOD_7 ( ) ) INIT = VAR_1 . METHOD_7 ( ) ) VAR VAR (  assertEquals ( INT_1 , in . METHOD_8 ( ) ) )  assertEquals ( INT_1 , in . METHOD_8 ( ) ) (  assertEquals ( INT_2 , in . METHOD_8 ( ) ) )  assertEquals ( INT_2 , in . METHOD_8 ( ) ) (  assertEquals ( ( - 1 ) , in . METHOD_8 ( ) ) )  assertEquals ( ( - 1 ) , in . METHOD_8 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 instanceof TYPE_3 ) COND VAR_1 instanceof TYPE_3 ( THEN THEN (  return VAR_2 ; )  return VAR_2 ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_4 . get ( VAR_3 ) ) INIT = VAR_4 . get ( VAR_3 ) ) VAR VAR (  return VAR_5 ; )  return VAR_5 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . set ( 5 , false ) )  VAR_1 . set ( 5 , false ) (  assertTrue ( STRING_1 , ( ! ( VAR_1 . get ( 5 ) ) ) ) )  assertTrue ( STRING_1 , ( ! ( VAR_1 . get ( 5 ) ) ) ) (  VAR_1 . set ( 5 , true ) )  VAR_1 . set ( 5 , true ) (  assertTrue ( STRING_2 , VAR_1 . get ( 5 ) ) )  assertTrue ( STRING_2 , VAR_1 . get ( 5 ) ) ( TRY TRY ( BLOCK BLOCK (  VAR_1 . set ( ( - 5 ) , false ) )  VAR_1 . set ( ( - 5 ) , false ) (  fail ( ) )  fail ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME expected ) NAME expected ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . println ( STRING_1 ) )  VAR_1 . println ( STRING_1 ) (  VAR_2 . METHOD_2 ( VAR_3 ) )  VAR_2 . METHOD_2 ( VAR_3 ) ( IF IF ( COND ! ( METHOD_3 ( ) ) ) COND ! ( METHOD_3 ( ) ) ( THEN THEN (  VAR_2 . METHOD_4 ( VAR_4 ) )  VAR_2 . METHOD_4 ( VAR_4 ) (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE byte ) TYPE byte ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_6 ) INIT = VAR_6 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_7 ) NAME VAR_7 ( INIT = new TYPE_1 ( VAR_8 , VAR_9 , 0 ) ) INIT = new TYPE_1 ( VAR_8 , VAR_9 , 0 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_10 ) NAME VAR_10 ( INIT = METHOD_5 ( VAR_5 , VAR_7 ) ) INIT = METHOD_5 ( VAR_5 , VAR_7 ) ) VAR VAR (  METHOD_6 ( VAR_10 ) )  METHOD_6 ( VAR_10 ) (  VAR_1 . println ( STRING_2 ) )  VAR_1 . println ( STRING_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < ( VAR_1 ) ) COND i < ( VAR_1 ) ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK ( IF IF ( COND ( ( VAR_2 [ i ] ) != null ) && ( ( VAR_2 [ i ] . METHOD_2 ( ) ) == false ) ) COND ( ( VAR_2 [ i ] ) != null ) && ( ( VAR_2 [ i ] . METHOD_2 ( ) ) == false ) ( THEN THEN (  return VAR_2 [ i ] ; )  return VAR_2 [ i ] ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR FOR (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Integer ) TYPE java.lang.Integer ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Integer ) TYPE java.lang.Integer ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.Integer ) TYPE java.lang.Integer ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME session ) NAME session ) VAR VAR ( SYNCHRONIZED SYNCHRONIZED (  VAR_5 )  VAR_5 ( BLOCK BLOCK (  session = VAR_6 . get ( VAR_2 ) )  session = VAR_6 . get ( VAR_2 ) ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ( IF IF ( COND session == null ) COND session == null ( THEN THEN (  throw new TYPE_2 ( ( ( STRING_1 + VAR_2 ) + STRING_2 ) ) ; )  throw new TYPE_2 ( ( ( STRING_1 + VAR_2 ) + STRING_2 ) ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_7 ) NAME VAR_7 ( INIT = VAR_4 . METHOD_2 ( ) ) INIT = VAR_4 . METHOD_2 ( ) ) VAR VAR (  return session . METHOD_3 ( VAR_1 , new TYPE_3 ( VAR_3 ) , VAR_7 ) ; )  return session . METHOD_3 ( VAR_1 , new TYPE_3 ( VAR_3 ) , VAR_7 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.Integer[] ) TYPE java.lang.Integer[] ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.lang.Integer [ VAR_2 ] ) INIT = new java.lang.Integer [ VAR_2 ] ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < ( ( VAR_2 ) - 1 ) ) COND i < ( ( VAR_2 ) - 1 ) ( UPDATE UPDATE (  ++ i )  ++ i ) UPDATE UPDATE ( BLOCK BLOCK (  VAR_1 [ i ] = i )  VAR_1 [ i ] = i ) BLOCK BLOCK ) FOR FOR ( VAR VAR ( TYPE TYPE_1<java.lang.Integer> ) TYPE TYPE_1<java.lang.Integer> ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_2 . METHOD_2 ( VAR_1 ) ) INIT = TYPE_2 . METHOD_2 ( VAR_1 ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  new TYPE_3 ( VAR_2 , false , TYPE_2 . METHOD_2 ( VAR_1 ) ) )  new TYPE_3 ( VAR_2 , false , TYPE_2 . METHOD_2 ( VAR_1 ) ) (  METHOD_3 ( ) )  METHOD_3 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.NullPointerException ) TYPE java.lang.NullPointerException ( NAME VAR_4 ) NAME VAR_4 ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ! ( METHOD_2 ( ) ) ) COND ! ( METHOD_2 ( ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  METHOD_3 ( true ) )  METHOD_3 ( true ) (  METHOD_4 ( false ) )  METHOD_4 ( false ) (  METHOD_5 ( ) )  METHOD_5 ( ) (  METHOD_4 ( true ) )  METHOD_4 ( true ) (  METHOD_6 ( ) )  METHOD_6 ( ) (  METHOD_4 ( false ) )  METHOD_4 ( false ) (  METHOD_3 ( false ) )  METHOD_3 ( false ) (  METHOD_4 ( true ) )  METHOD_4 ( true ) (  METHOD_7 ( true ) )  METHOD_7 ( true ) (  METHOD_4 ( false ) )  METHOD_4 ( false ) (  METHOD_5 ( ) )  METHOD_5 ( ) (  METHOD_4 ( true ) )  METHOD_4 ( true ) (  METHOD_6 ( ) )  METHOD_6 ( ) (  METHOD_4 ( true ) )  METHOD_4 ( true ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER synchronized ) MODIFIER synchronized ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE android.bluetooth.BluetoothDevice ) TYPE android.bluetooth.BluetoothDevice ( NAME device ) NAME device ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME data ) NAME data ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  android.util.Log.v ( VAR_2 . TAG , ( ( ( STRING_1 + device ) + STRING_2 ) + id ) ) )  android.util.Log.v ( VAR_2 . TAG , ( ( ( STRING_1 + device ) + STRING_2 ) + id ) ) ) THEN THEN ) IF IF ( IF IF ( COND ! ( METHOD_2 ( device ) ) ) COND ! ( METHOD_2 ( device ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  return METHOD_3 ( id , data ) ; )  return METHOD_3 ( id , data ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_2 ( ) ) INIT = VAR_2 . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  TYPE_2 . e ( STRING_1 , STRING_2 ) )  TYPE_2 . e ( STRING_1 , STRING_2 ) (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . METHOD_3 ( VAR_4 ) ) INIT = VAR_1 . METHOD_3 ( VAR_4 ) ) VAR VAR ( IF IF ( COND VAR_3 != null ) COND VAR_3 != null ( THEN THEN ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_1 . METHOD_4 ( ) ) INIT = VAR_1 . METHOD_4 ( ) ) VAR VAR (  VAR_5 . METHOD_5 ( VAR_3 ) )  VAR_5 . METHOD_5 ( VAR_3 ) (  VAR_5 . METHOD_6 ( ) )  VAR_5 . METHOD_6 ( ) (  VAR_1 . METHOD_7 ( ) )  VAR_1 . METHOD_7 ( ) ) THEN THEN ) IF IF (  METHOD_8 ( false ) )  METHOD_8 ( false ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME context ) NAME context ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME c ) NAME c ( INIT = context . METHOD_2 ( ) . METHOD_3 ( VAR_1 , new java.lang.String [ ] { VAR_2 } , null , null , null ) ) INIT = context . METHOD_2 ( ) . METHOD_3 ( VAR_1 , new java.lang.String [ ] { VAR_2 } , null , null , null ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = null ) INIT = null ) VAR VAR ( IF IF ( COND ( c != null ) && ( c . METHOD_4 ( ) ) ) COND ( c != null ) && ( c . METHOD_4 ( ) ) ( THEN THEN (  VAR_3 = c . METHOD_5 ( 0 ) )  VAR_3 = c . METHOD_5 ( 0 ) ) THEN THEN ) IF IF ( IF IF ( COND c != null ) COND c != null ( THEN THEN (  c . METHOD_6 ( ) )  c . METHOD_6 ( ) (  c = null )  c = null ) THEN THEN ) IF IF (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME context ) NAME context ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( ) ) INIT = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( ) ) VAR VAR ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  TYPE_4 . METHOD_4 ( context ) )  TYPE_4 . METHOD_4 ( context ) (  TYPE_5 . e ( STRING_1 , STRING_2 ) )  TYPE_5 . e ( STRING_1 , STRING_2 ) ) THEN THEN ( ELSE ELSE ( VAR VAR ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME call ) NAME call ( INIT = VAR_1 . METHOD_5 ( ) ) INIT = VAR_1 . METHOD_5 ( ) ) VAR VAR ( IF IF ( COND call != null ) COND call != null ( THEN THEN (  call . METHOD_6 ( ) . METHOD_7 ( ) )  call . METHOD_6 ( ) . METHOD_7 ( ) ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_2 ) ) COND ! ( VAR_2 ) ( THEN THEN (  throw new TYPE_1 ( ) ; )  throw new TYPE_1 ( ) ; ) THEN THEN ) IF IF ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.Class<?extendsTYPE_2> ) TYPE java.lang.Class<?extendsTYPE_2> ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( ( VAR_4 ) == null ) ? TYPE_3 . METHOD_2 ( VAR_5 class , VAR_1 ) : VAR_4 . METHOD_2 ( VAR_1 ) ) INIT = ( ( VAR_4 ) == null ) ? TYPE_3 . METHOD_2 ( VAR_5 class , VAR_1 ) : VAR_4 . METHOD_2 ( VAR_1 ) ) VAR VAR (  METHOD_1 ( VAR_3 ) )  METHOD_1 ( VAR_3 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new java.lang.IllegalArgumentException ( e ) ; )  throw new java.lang.IllegalArgumentException ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( VAR_2 , 3 ) ) INIT = new TYPE_1 ( VAR_2 , 3 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR (  assertEquals ( 0 , VAR_1 . size ( ) ) )  assertEquals ( 0 , VAR_1 . size ( ) ) (  assertEquals ( 0 , VAR_3 . size ( ) ) )  assertEquals ( 0 , VAR_3 . size ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 == ( VAR_3 ) ) COND VAR_1 == ( VAR_3 ) ( THEN THEN ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_4 ) NAME VAR_4 ( INIT = ( ( TYPE_2 ) ( VAR_2 ) ) ) INIT = ( ( TYPE_2 ) ( VAR_2 ) ) ) VAR VAR (  METHOD_2 ( ( STRING_1 + ( java.lang.String . METHOD_3 ( VAR_4 ) ) ) ) )  METHOD_2 ( ( STRING_1 + ( java.lang.String . METHOD_3 ( VAR_4 ) ) ) ) (  METHOD_4 ( VAR_4 ) )  METHOD_4 ( VAR_4 ) (  TYPE_3 . action ( METHOD_5 ( ) , VAR_5 , VAR_4 ) )  TYPE_3 . action ( METHOD_5 ( ) , VAR_5 , VAR_4 ) (  return true ; )  return true ; ) THEN THEN ) IF IF (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME type ) NAME type ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SWITCH SWITCH ( NAME type . METHOD_2 ( ) ) NAME type . METHOD_2 ( ) ( CASE VAR_1 ( BLOCK BLOCK (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) CASE VAR_1 ( CASE VAR_3 ( BLOCK BLOCK (  return VAR_4 ; )  return VAR_4 ; ) BLOCK BLOCK ) CASE VAR_3 ( CASE VAR_5 ( BLOCK BLOCK (  return VAR_6 ; )  return VAR_6 ; ) BLOCK BLOCK ) CASE VAR_5 ( CASE VAR_7 ( BLOCK BLOCK (  return VAR_8 ; )  return VAR_8 ; ) BLOCK BLOCK ) CASE VAR_7 ( CASE VAR_9 ( BLOCK BLOCK (  return VAR_11 ; )  return VAR_11 ; ) BLOCK BLOCK ) CASE VAR_9 ( CASE VAR_10 ( BLOCK BLOCK (  return VAR_11 ; )  return VAR_11 ; ) BLOCK BLOCK ) CASE VAR_10 ( CASE VAR_12 ( BLOCK BLOCK (  return VAR_13 ; )  return VAR_13 ; ) BLOCK BLOCK ) CASE VAR_12 ( CASE VAR_14 ( BLOCK BLOCK (  return VAR_15 ; )  return VAR_15 ; ) BLOCK BLOCK ) CASE VAR_14 ( CASE VAR_16 ( BLOCK BLOCK (  return VAR_17 ; )  return VAR_17 ; ) BLOCK BLOCK ) CASE VAR_16 ( CASE VAR_18 ( BLOCK BLOCK (  return VAR_19 ; )  return VAR_19 ; ) BLOCK BLOCK ) CASE VAR_18 ) SWITCH SWITCH (  return TYPE_3 . METHOD_3 ( type ) ; )  return TYPE_3 . METHOD_3 ( type ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME c ) NAME c ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = c . METHOD_2 ( ) ) INIT = c . METHOD_2 ( ) ) VAR VAR ) INIT INIT ( COND VAR_2 . METHOD_3 ( ) ) COND VAR_2 . METHOD_3 ( ) ( BLOCK BLOCK (  VAR_1 . append ( ( ( VAR_2 . METHOD_4 ( ) ) + STRING_1 ) ) )  VAR_1 . append ( ( ( VAR_2 . METHOD_4 ( ) ) + STRING_1 ) ) ) BLOCK BLOCK ) FOR FOR (  return VAR_1 . toString ( ) ; )  return VAR_1 . toString ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME e ) NAME e ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME p ) NAME p ( INIT = TYPE_3 . METHOD_2 ( this , e ) . METHOD_3 ( ) ) INIT = TYPE_3 . METHOD_2 ( this , e ) . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_4 ( p ) ) INIT = VAR_2 . METHOD_4 ( p ) ) VAR VAR ( IF IF ( COND ( VAR_1 == null ) || ( VAR_1 . METHOD_5 ( ) ) ) COND ( VAR_1 == null ) || ( VAR_1 . METHOD_5 ( ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . METHOD_6 ( ) ) INIT = VAR_1 . METHOD_6 ( ) ) VAR VAR ( IF IF ( COND VAR_3 != null ) COND VAR_3 != null ( THEN THEN ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_5 . METHOD_7 ( VAR_3 ) ) INIT = VAR_5 . METHOD_7 ( VAR_3 ) ) VAR VAR ( IF IF ( COND ! VAR_4 ) COND ! VAR_4 ( THEN THEN (  METHOD_8 ( ) . METHOD_9 ( ) )  METHOD_8 ( ) . METHOD_9 ( ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME match ) NAME match ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( ) ) INIT = TYPE_2 . METHOD_2 ( ) ) VAR VAR (  VAR_1 . METHOD_3 ( TYPE_3 . METHOD_4 ( ) ) )  VAR_1 . METHOD_3 ( TYPE_3 . METHOD_4 ( ) ) (  VAR_1 . METHOD_3 ( ( match = TYPE_3 . METHOD_5 ( STRING_1 ) ) ) )  VAR_1 . METHOD_3 ( ( match = TYPE_3 . METHOD_5 ( STRING_1 ) ) ) (  VAR_1 . METHOD_3 ( TYPE_3 . METHOD_5 ( STRING_2 ) ) )  VAR_1 . METHOD_3 ( TYPE_3 . METHOD_5 ( STRING_2 ) ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ( INIT = TYPE_3 . METHOD_6 ( VAR_1 , INT_1 , STRING_1 ) ) INIT = TYPE_3 . METHOD_6 ( VAR_1 , INT_1 , STRING_1 ) ) VAR VAR (  assertEquals ( match , result ) )  assertEquals ( match , result ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  VAR_2 )  VAR_2 ( BLOCK BLOCK ( IF IF ( COND ( VAR_2 . METHOD_2 ( ) ) && ( VAR_3 . METHOD_2 ( ) ) ) COND ( VAR_2 . METHOD_2 ( ) ) && ( VAR_3 . METHOD_2 ( ) ) ( THEN THEN ( IF IF ( COND android.util.Log . METHOD_3 ( VAR_4 , VAR_5 ) ) COND android.util.Log . METHOD_3 ( VAR_4 , VAR_5 ) ( THEN THEN (  android.util.Log.v ( VAR_6 . TAG , STRING_1 ) )  android.util.Log.v ( VAR_6 . TAG , STRING_1 ) ) THEN THEN ) IF IF ( IF IF ( COND android.util.Log . METHOD_3 ( VAR_4 , VAR_5 ) ) COND android.util.Log . METHOD_3 ( VAR_4 , VAR_5 ) ( THEN THEN (  android.util.Log.v ( VAR_6 . TAG , STRING_2 ) )  android.util.Log.v ( VAR_6 . TAG , STRING_2 ) ) THEN THEN ) IF IF (  TYPE_1 . METHOD_4 ( METHOD_5 ( ) ) )  TYPE_1 . METHOD_4 ( METHOD_5 ( ) ) (  METHOD_6 ( VAR_1 ) )  METHOD_6 ( VAR_1 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( METHOD_3 ( ) ) ) INIT = METHOD_2 ( METHOD_3 ( ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_4 ( VAR_2 , STRING_1 ) ) INIT = METHOD_4 ( VAR_2 , STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_4 ( VAR_2 , STRING_2 ) ) INIT = METHOD_4 ( VAR_2 , STRING_2 ) ) VAR VAR (  VAR_1 . METHOD_5 ( VAR_3 ) )  VAR_1 . METHOD_5 ( VAR_3 ) (  VAR_1 . METHOD_5 ( new TYPE_1 ( 0 ) ) )  VAR_1 . METHOD_5 ( new TYPE_1 ( 0 ) ) (  VAR_1 . METHOD_5 ( new TYPE_1 ( 1 ) ) )  VAR_1 . METHOD_5 ( new TYPE_1 ( 1 ) ) (  VAR_1 . METHOD_5 ( VAR_4 ) )  VAR_1 . METHOD_5 ( VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN char[] ) RETURN char[] ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME length ) NAME length ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_2 . METHOD_2 ( METHOD_3 ( length ) ) . METHOD_4 ( VAR_4 ) . METHOD_5 ( ) ) INIT = TYPE_2 . METHOD_2 ( METHOD_3 ( length ) ) . METHOD_4 ( VAR_4 ) . METHOD_5 ( ) ) VAR VAR ( VAR VAR ( TYPE char[] ) TYPE char[] ( NAME result ) NAME result ( INIT = new char [ VAR_3 . length ( ) ] ) INIT = new char [ VAR_3 . length ( ) ] ) VAR VAR (  VAR_3 . get ( result ) )  VAR_3 . get ( result ) (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return TYPE_3 . METHOD_2 ( ) . METHOD_3 ( VAR_1 . getName ( ) ) . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) . METHOD_6 ( VAR_1 . METHOD_7 ( ) ) . METHOD_8 ( VAR_1 . METHOD_9 ( ) ) . METHOD_10 ( VAR_1 . METHOD_11 ( ) ) . METHOD_12 ( VAR_1 . METHOD_13 ( ) ) . METHOD_14 ( VAR_1 . METHOD_15 ( ) ) ; )  return TYPE_3 . METHOD_2 ( ) . METHOD_3 ( VAR_1 . getName ( ) ) . METHOD_4 ( VAR_1 . METHOD_5 ( ) ) . METHOD_6 ( VAR_1 . METHOD_7 ( ) ) . METHOD_8 ( VAR_1 . METHOD_9 ( ) ) . METHOD_10 ( VAR_1 . METHOD_11 ( ) ) . METHOD_12 ( VAR_1 . METHOD_13 ( ) ) . METHOD_14 ( VAR_1 . METHOD_15 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE android.content.Intent ) TYPE android.content.Intent ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . METHOD_2 ( VAR_4 , ( - 1 ) ) ) INIT = VAR_1 . METHOD_2 ( VAR_4 , ( - 1 ) ) ) VAR VAR (  VAR_5 = ( VAR_3 != ( VAR_6 ) ) && ( VAR_3 != ( VAR_7 ) ) )  VAR_5 = ( VAR_3 != ( VAR_6 ) ) && ( VAR_3 != ( VAR_7 ) ) (  TYPE_1 . METHOD_3 ( ) )  TYPE_1 . METHOD_3 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) >= ( VAR_2 . length ) ) COND ( VAR_1 ) >= ( VAR_2 . length ) ( THEN THEN (  VAR_3 . METHOD_2 ( ) )  VAR_3 . METHOD_2 ( ) (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( INIT = ( ( VAR_5 ) != null ) ? VAR_5 [ VAR_1 ] : null ) INIT = ( ( VAR_5 ) != null ) ? VAR_5 [ VAR_1 ] : null ) VAR VAR (  VAR_3 . METHOD_3 ( VAR_2 [ VAR_1 ] , VAR_4 ) )  VAR_3 . METHOD_3 ( VAR_2 [ VAR_1 ] , VAR_4 ) (  ( VAR_1 ) ++ )  ( VAR_1 ) ++ ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( ) )  VAR_1 . METHOD_2 ( ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_3 ( VAR_3 ) ) INIT = METHOD_3 ( VAR_3 ) ) VAR VAR ( IF IF ( COND VAR_2 . METHOD_4 ( VAR_4 , true ) ) COND VAR_2 . METHOD_4 ( VAR_4 , true ) ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE TYPE_2<?> ) TYPE TYPE_2<?> ( NAME item ) NAME item ( IN VAR_5 ) IN VAR_5 ( BLOCK BLOCK (  item . METHOD_5 ( VAR_2 ) )  item . METHOD_5 ( VAR_2 ) (  item . METHOD_6 ( VAR_6 , VAR_7 ) )  item . METHOD_6 ( VAR_6 , VAR_7 ) (  VAR_1 . METHOD_7 ( item ) )  VAR_1 . METHOD_7 ( item ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME m ) NAME m ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME v ) NAME v ) VAR VAR ( VAR VAR ( TYPE byte ) TYPE byte ( NAME value ) NAME value ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = false ) INIT = false ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( IF IF ( COND v == null ) COND v == null ( THEN THEN (  m . METHOD_2 ( value ) )  m . METHOD_2 ( value ) ) THEN THEN ( ELSE ELSE (  m . METHOD_2 ( v , value ) )  m . METHOD_2 ( v , value ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_2 = true )  VAR_2 = true ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  TYPE_4 . assertEquals ( VAR_2 , VAR_1 ) )  TYPE_4 . assertEquals ( VAR_2 , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( PARAMS PARAMS ( VAR VAR ( TYPE com.android.jack.ir.ast.JDefinedClassOrInterface ) TYPE com.android.jack.ir.ast.JDefinedClassOrInterface ( NAME type ) NAME type ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( type . METHOD_1 ( ) ) || ( type instanceof TYPE_1 ) ) COND ( type . METHOD_1 ( ) ) || ( type instanceof TYPE_1 ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( type ) ) INIT = new TYPE_2 ( type ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = type . METHOD_2 ( VAR_3 class ) ) INIT = type . METHOD_2 ( VAR_3 class ) ) VAR VAR ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME f ) NAME f ( IN VAR_2 . METHOD_3 ( ) ) IN VAR_2 . METHOD_3 ( ) ( BLOCK BLOCK (  VAR_1 . append ( new TYPE_5 ( f , VAR_4 ) ) )  VAR_1 . append ( new TYPE_5 ( f , VAR_4 ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  type . METHOD_4 ( VAR_3 class ) )  type . METHOD_4 ( VAR_3 class ) ) THEN THEN ) IF IF (  VAR_1 . METHOD_5 ( ) )  VAR_1 . METHOD_5 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME status ) NAME status ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME response ) NAME response ( INIT = new TYPE_2 ( VAR_1 , status , null ) ) INIT = new TYPE_2 ( VAR_1 , status , null ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_3 . METHOD_2 ( status ) ) INIT = TYPE_3 . METHOD_2 ( status ) ) VAR VAR ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_4 ( STRING_1 ) ) INIT = new TYPE_4 ( STRING_1 ) ) VAR VAR (  VAR_3 . append ( VAR_2 ) )  VAR_3 . append ( VAR_2 ) (  VAR_3 . append ( STRING_2 ) )  VAR_3 . append ( STRING_2 ) (  VAR_3 . append ( VAR_2 ) )  VAR_3 . append ( VAR_2 ) (  VAR_3 . append ( STRING_3 ) )  VAR_3 . append ( STRING_3 ) (  response . METHOD_3 ( METHOD_4 ( VAR_3 . toString ( ) ) ) )  response . METHOD_3 ( METHOD_4 ( VAR_3 . toString ( ) ) ) ) THEN THEN ) IF IF (  return response ; )  return response ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  throw new java.lang.IllegalArgumentException ( STRING_1 ) ; )  throw new java.lang.IllegalArgumentException ( STRING_1 ) ; ) THEN THEN ) IF IF ( IF IF ( COND ( ( VAR_2 ) != null ) && ( VAR_1 . equals ( VAR_2 . METHOD_2 ( ) ) ) ) COND ( ( VAR_2 ) != null ) && ( VAR_1 . equals ( VAR_2 . METHOD_2 ( ) ) ) ( THEN THEN (  return VAR_2 . METHOD_3 ( ) ; )  return VAR_2 . METHOD_3 ( ) ; ) THEN THEN ) IF IF (  return TYPE_1 . METHOD_4 ( VAR_1 ) ; )  return TYPE_1 . METHOD_4 ( VAR_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public final ) MODIFIER public final ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( this ) )  VAR_1 . METHOD_2 ( this ) ( FOR-EACH FOR-EACH ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME value ) NAME value ( IN METHOD_3 ( ) . values ( ) ) IN METHOD_3 ( ) . values ( ) ( BLOCK BLOCK ( IF IF ( COND value instanceof TYPE_2 ) COND value instanceof TYPE_2 ( THEN THEN ( IF IF ( COND ! ( VAR_2 ) ) COND ! ( VAR_2 ) ( THEN THEN (  ( ( TYPE_2 ) ( value ) ) . METHOD_4 ( this ) )  ( ( TYPE_2 ) ( value ) ) . METHOD_4 ( this ) ) THEN THEN ) IF IF (  VAR_1 . METHOD_5 ( ( ( TYPE_2 ) ( value ) ) ) )  VAR_1 . METHOD_5 ( ( ( TYPE_2 ) ( value ) ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  VAR_2 = true )  VAR_2 = true ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.Class<?> ) TYPE java.lang.Class<?> ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_2 ( ) ) INIT = TYPE_2 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ( INIT = TYPE_1 . METHOD_3 ( name , VAR_1 , VAR_2 ) ) INIT = TYPE_1 . METHOD_3 ( name , VAR_1 , VAR_2 ) ) VAR VAR ( IF IF ( COND ( VAR_3 ) == null ) COND ( VAR_3 ) == null ( THEN THEN (  result . METHOD_4 ( VAR_1 , VAR_2 ) )  result . METHOD_4 ( VAR_1 , VAR_2 ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND ! ( VAR_3 . equals ( VAR_1 ) ) ) COND ! ( VAR_3 . equals ( VAR_1 ) ) ( THEN THEN (  throw new java.lang.IllegalArgumentException ( ( ( ( VAR_3 ) + STRING_1 ) + VAR_1 ) ) ; )  throw new java.lang.IllegalArgumentException ( ( ( ( VAR_3 ) + STRING_1 ) + VAR_1 ) ) ; ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME output ) NAME output ( INIT = java.io.File . METHOD_1 ( STRING_1 , STRING_2 ) ) INIT = java.io.File . METHOD_1 ( STRING_1 , STRING_2 ) ) VAR VAR (  output . METHOD_2 ( ) )  output . METHOD_2 ( ) (  VAR_1 [ VAR_2 ] = output )  VAR_1 [ VAR_2 ] = output (  TYPE_1 . METHOD_3 ( ) . METHOD_4 ( input , output , VAR_3 , VAR_4 , false , ( VAR_2 == 0 ? VAR_5 : VAR_6 ) ) )  TYPE_1 . METHOD_3 ( ) . METHOD_4 ( input , output , VAR_3 , VAR_4 , false , ( VAR_2 == 0 ? VAR_5 : VAR_6 ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME VAR_7 ) NAME VAR_7 ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  VAR_8 . METHOD_5 ( ) )  VAR_8 . METHOD_5 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME session ) NAME session ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_4 . get ( VAR_2 ) ) INIT = TYPE_4 . get ( VAR_2 ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_1 . METHOD_1 ( VAR_3 ) )  VAR_1 . METHOD_1 ( VAR_3 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME e ) NAME e ( BLOCK BLOCK (  session . METHOD_2 ( ) . METHOD_3 ( VAR_4 , e ) )  session . METHOD_2 ( ) . METHOD_3 ( VAR_4 , e ) (  throw new TYPE_2 ( e ) ; )  throw new TYPE_2 ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ( IF IF ( COND TYPE_4 . get ( VAR_5 ) . booleanValue ( ) ) COND TYPE_4 . get ( VAR_5 ) . booleanValue ( ) ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE com.android.jack.ir.ast.JDefinedClassOrInterface ) TYPE com.android.jack.ir.ast.JDefinedClassOrInterface ( NAME type ) NAME type ( IN session . METHOD_4 ( ) ) IN session . METHOD_4 ( ) ( BLOCK BLOCK (  type . METHOD_5 ( VAR_6 class ) )  type . METHOD_5 ( VAR_6 class ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) != null ) COND ( VAR_1 ) != null ( THEN THEN (  VAR_1 . METHOD_2 ( ) )  VAR_1 . METHOD_2 ( ) ) THEN THEN ) IF IF (  VAR_2 . METHOD_2 ( ) )  VAR_2 . METHOD_2 ( ) (  VAR_3 . METHOD_2 ( ) )  VAR_3 . METHOD_2 ( ) ( IF IF ( COND ( VAR_4 ) != null ) COND ( VAR_4 ) != null ( THEN THEN (  VAR_4 . METHOD_2 ( ) )  VAR_4 . METHOD_2 ( ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME packageName ) NAME packageName ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND packageName != null ) COND packageName != null ( THEN THEN (  VAR_3 . info ( STRING_1 , VAR_2 , packageName ) )  VAR_3 . info ( STRING_1 , VAR_2 , packageName ) (  device . METHOD_2 ( packageName , VAR_4 ) )  device . METHOD_2 ( packageName , VAR_4 ) ) THEN THEN ( ELSE ELSE (  VAR_3 . info ( STRING_2 , VAR_2 , VAR_1 ) )  VAR_3 . info ( STRING_2 , VAR_2 , VAR_1 ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 == ( VAR_2 ) ) COND VAR_1 == ( VAR_2 ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ( ELSE ELSE ( IF IF ( COND VAR_1 < ( VAR_3 ) ) COND VAR_1 < ( VAR_3 ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ( ELSE ELSE ( IF IF ( COND VAR_1 == ( VAR_3 ) ) COND VAR_1 == ( VAR_3 ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ( ELSE ELSE (  VAR_4 . METHOD_2 ( ( VAR_1 - ( VAR_3 ) ) ) )  VAR_4 . METHOD_2 ( ( VAR_1 - ( VAR_3 ) ) ) (  VAR_3 = VAR_1 )  VAR_3 = VAR_1 (  return false ; )  return false ; ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( ) ) INIT = TYPE_2 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.Integer[] ) TYPE java.lang.Integer[] ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.lang.Integer [ VAR_3 ] ) INIT = new java.lang.Integer [ VAR_3 ] ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < ( ( VAR_3 ) - 1 ) ) COND i < ( ( VAR_3 ) - 1 ) ( UPDATE UPDATE (  ++ i )  ++ i ) UPDATE UPDATE ( BLOCK BLOCK (  VAR_2 [ i ] = new java.lang.Integer ( ( i + ( VAR_3 ) ) ) )  VAR_2 [ i ] = new java.lang.Integer ( ( i + ( VAR_3 ) ) ) ) BLOCK BLOCK ) FOR FOR (  VAR_1 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_2 ) ) )  VAR_1 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_2 ) ) (  METHOD_5 ( ) )  METHOD_5 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.NullPointerException ) TYPE java.lang.NullPointerException ( NAME VAR_4 ) NAME VAR_4 ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Set<java.lang.String> ) TYPE java.util.Set<java.lang.String> ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_2 < java.lang.String > ( TYPE_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) ) INIT = new TYPE_2 < java.lang.String > ( TYPE_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.Set<java.lang.String> ) TYPE java.util.Set<java.lang.String> ( NAME VAR_5 ) NAME VAR_5 ( INIT = new TYPE_2 < java.lang.String > ( TYPE_3 . METHOD_2 ( VAR_3 ) ) ) INIT = new TYPE_2 < java.lang.String > ( TYPE_3 . METHOD_2 ( VAR_3 ) ) ) VAR VAR (  assertEquals ( VAR_4 , VAR_5 ) )  assertEquals ( VAR_4 , VAR_5 ) (  assertEquals ( VAR_2 , VAR_1 . METHOD_4 ( ) ) )  assertEquals ( VAR_2 , VAR_1 . METHOD_4 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 == null ) || ( ( VAR_1 . length ( ) ) == 0 ) ) COND ( VAR_1 == null ) || ( ( VAR_1 . length ( ) ) == 0 ) ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( VAR_1 ) . getName ( VAR_3 ) ) INIT = METHOD_2 ( VAR_1 ) . getName ( VAR_3 ) ) VAR VAR (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME session ) NAME session ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME s ) NAME s ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME c ) NAME c ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME fd ) NAME fd ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME callback ) NAME callback ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME a ) NAME a ( INIT = TYPE_4 . METHOD_2 ( session ) ) INIT = TYPE_4 . METHOD_2 ( session ) ) VAR VAR (  assertTrue ( TYPE_5 . METHOD_3 ( a ) ) )  assertTrue ( TYPE_5 . METHOD_3 ( a ) ) (  super . METHOD_1 ( session , s , c , VAR_1 , fd , callback ) )  super . METHOD_1 ( session , s , c , VAR_1 , fd , callback ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME x ) NAME x ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME info ) NAME info ( INIT = METHOD_2 ( x ) ) INIT = METHOD_2 ( x ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME type ) NAME type ( INIT = METHOD_3 ( ) . get ( VAR_2 ) ) INIT = METHOD_3 ( ) . get ( VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_4 ( VAR_4 ) ) INIT = METHOD_4 ( VAR_4 ) ) VAR VAR (  METHOD_5 ( new TYPE_6 ( info , type , VAR_3 ) ) )  METHOD_5 ( new TYPE_6 ( info , type , VAR_3 ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Throwable ) TYPE java.lang.Throwable ( NAME e ) NAME e ( BLOCK BLOCK (  throw METHOD_6 ( x , e ) ; )  throw METHOD_6 ( x , e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int[] ) RETURN int[] ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int[] ) TYPE int[] ( NAME src ) NAME src ) VAR VAR ( VAR VAR ( TYPE int[] ) TYPE int[] ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return new int [ ] { VAR_1 [ 0 ] , src [ 1 ] , VAR_1 [ 2 ] , TYPE_1 . METHOD_2 ( INT_1 , ( ( src [ 3 ] ) + ( VAR_1 [ 3 ] ) ) ) } ; )  return new int [ ] { VAR_1 [ 0 ] , src [ 1 ] , VAR_1 [ 2 ] , TYPE_1 . METHOD_2 ( INT_1 , ( ( src [ 3 ] ) + ( VAR_1 [ 3 ] ) ) ) } ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE android.bluetooth.BluetoothDevice ) TYPE android.bluetooth.BluetoothDevice ( NAME device ) NAME device ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME type ) NAME type ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( TYPE_3 . METHOD_2 ( VAR_4 ) ) ) COND ! ( TYPE_3 . METHOD_2 ( VAR_4 ) ) ( THEN THEN (  android.util.Log.w ( TYPE_4 . TAG , STRING_1 ) )  android.util.Log.w ( TYPE_4 . TAG , STRING_1 ) (  return null ; )  return null ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME service ) NAME service ( INIT = METHOD_3 ( ) ) INIT = METHOD_3 ( ) ) VAR VAR ( IF IF ( COND service == null ) COND service == null ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF (  return service . METHOD_1 ( device , type , VAR_1 , VAR_2 , VAR_3 ) ; )  return service . METHOD_1 ( device , type , VAR_1 , VAR_2 , VAR_3 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME session ) NAME session ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_3 . METHOD_2 ( ) ) INIT = TYPE_3 . METHOD_2 ( ) ) VAR VAR ( SYNCHRONIZED SYNCHRONIZED (  VAR_3 )  VAR_3 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_3 ( session , VAR_1 ) ) INIT = METHOD_3 ( session , VAR_1 ) ) VAR VAR ( IF IF ( COND ( VAR_4 != null ) && ( VAR_4 . METHOD_4 ( ) ) ) COND ( VAR_4 != null ) && ( VAR_4 . METHOD_4 ( ) ) ( THEN THEN ( IF IF ( COND ( ( VAR_5 . flags ) & ( VAR_6 ) ) != 0 ) COND ( ( VAR_5 . flags ) & ( VAR_6 ) ) != 0 ( THEN THEN (  METHOD_5 ( ) )  METHOD_5 ( ) ) THEN THEN ) IF IF (  VAR_7 = true )  VAR_7 = true (  METHOD_6 ( ) )  METHOD_6 ( ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED (  TYPE_3 . METHOD_7 ( VAR_2 ) )  TYPE_3 . METHOD_7 ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME key ) NAME key ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME value ) NAME value ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND key == null ) COND key == null ( THEN THEN (  throw new java.lang.NullPointerException ( STRING_1 ) ; )  throw new java.lang.NullPointerException ( STRING_1 ) ; ) THEN THEN ) IF IF (  VAR_1 . METHOD_2 ( key ) )  VAR_1 . METHOD_2 ( key ) ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = key . METHOD_3 ( ) ) INIT = key . METHOD_3 ( ) ) VAR VAR ( IF IF ( COND ! ( VAR_3 [ VAR_2 ] ) ) COND ! ( VAR_3 [ VAR_2 ] ) ( THEN THEN (  VAR_3 [ VAR_2 ] = true )  VAR_3 [ VAR_2 ] = true (  ( VAR_4 ) ++ )  ( VAR_4 ) ++ ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_5 ) NAME VAR_5 ( INIT = ( ( TYPE_1 ) ( values [ VAR_2 ] ) ) ) INIT = ( ( TYPE_1 ) ( values [ VAR_2 ] ) ) ) VAR VAR (  values [ VAR_2 ] = value )  values [ VAR_2 ] = value (  return VAR_5 ; )  return VAR_5 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_2 ( ) ) INIT = VAR_2 . METHOD_2 ( ) ) VAR VAR (  assertTrue ( VAR_1 . METHOD_3 ( ) ) )  assertTrue ( VAR_1 . METHOD_3 ( ) ) (  TYPE_1 . METHOD_4 ( new java.io.File ( VAR_1 , STRING_1 ) , new byte [ ] { CHAR_1 } ) )  TYPE_1 . METHOD_4 ( new java.io.File ( VAR_1 , STRING_1 ) , new byte [ ] { CHAR_1 } ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_1 . METHOD_5 ( VAR_4 , 1 ) ) INIT = TYPE_1 . METHOD_5 ( VAR_4 , 1 ) ) VAR VAR (  assertEquals ( VAR_5 , VAR_2 . METHOD_6 ( VAR_3 . METHOD_7 ( ) ) ) )  assertEquals ( VAR_5 , VAR_2 . METHOD_6 ( VAR_3 . METHOD_7 ( ) ) ) (  METHOD_8 ( VAR_3 ) )  METHOD_8 ( VAR_3 ) (  METHOD_9 ( ) )  METHOD_9 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_2 ( VAR_2 , VAR_4 ) . METHOD_2 ( VAR_1 ) . build ( ) ) INIT = new TYPE_2 ( VAR_2 , VAR_4 ) . METHOD_2 ( VAR_1 ) . build ( ) ) VAR VAR (  VAR_5 . METHOD_3 ( ) )  VAR_5 . METHOD_3 ( ) (  VAR_5 . METHOD_4 ( 0 ) )  VAR_5 . METHOD_4 ( 0 ) (  VAR_6 . METHOD_5 ( VAR_3 ) )  VAR_6 . METHOD_5 ( VAR_3 ) (  METHOD_6 ( VAR_7 ) )  METHOD_6 ( VAR_7 ) ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_8 ) NAME VAR_8 ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_8 = VAR_5 . METHOD_7 ( ) )  VAR_8 = VAR_5 . METHOD_7 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_8 = false )  VAR_8 = false ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  METHOD_8 ( new TYPE_4 ( VAR_2 , VAR_8 ) ) )  METHOD_8 ( new TYPE_4 ( VAR_2 , VAR_8 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME get ) NAME get ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  throw new java.lang.NullPointerException ( STRING_1 ) ; )  throw new java.lang.NullPointerException ( STRING_1 ) ; ) THEN THEN ) IF IF (  METHOD_1 ( ) )  METHOD_1 ( ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME type ) NAME type ( INIT = ( ( TYPE_4 ) ( VAR_1 ) ) . METHOD_2 ( ) ) INIT = ( ( TYPE_4 ) ( VAR_1 ) ) . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ( INIT = VAR_2 . get ( type ) ) INIT = VAR_2 . get ( type ) ) VAR VAR ( IF IF ( COND result == null ) COND result == null ( THEN THEN (  throw new java.lang.IllegalArgumentException ( STRING_2 ) ; )  throw new java.lang.IllegalArgumentException ( STRING_2 ) ; ) THEN THEN ) IF IF (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME packageName ) NAME packageName ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME userId ) NAME userId ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  TYPE_1 . d ( VAR_2 . TAG , ( ( ( STRING_1 + packageName ) + STRING_2 ) + userId ) ) )  TYPE_1 . d ( VAR_2 . TAG , ( ( ( STRING_1 + packageName ) + STRING_2 ) + userId ) ) ) THEN THEN ) IF IF ( IF IF ( COND METHOD_2 ( packageName , userId , null ) ) COND METHOD_2 ( packageName , userId , null ) ( THEN THEN (  VAR_3 . METHOD_3 ( packageName , userId ) )  VAR_3 . METHOD_3 ( packageName , userId ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME subId ) NAME subId ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME slotId ) NAME slotId ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  android.util.Log.v ( VAR_3 . TAG , ( ( ( ( STRING_1 + subId ) + STRING_2 ) + VAR_1 ) + STRING_3 ) ) )  android.util.Log.v ( VAR_3 . TAG , ( ( ( ( STRING_1 + subId ) + STRING_2 ) + VAR_1 ) + STRING_3 ) ) ) THEN THEN ) IF IF ( SWITCH SWITCH ( NAME VAR_1 ) NAME VAR_1 ( CASE VAR_4 ( BLOCK BLOCK (  TYPE_2 . METHOD_2 ( METHOD_3 ( ) ) . METHOD_4 ( VAR_5 ) )  TYPE_2 . METHOD_2 ( METHOD_3 ( ) ) . METHOD_4 ( VAR_5 ) (  VAR_6 . METHOD_5 ( true , TYPE_2 . METHOD_6 ( ) ) )  VAR_6 . METHOD_5 ( true , TYPE_2 . METHOD_6 ( ) ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_4 ( DEFAULT DEFAULT ( BLOCK BLOCK (  METHOD_7 ( ) )  METHOD_7 ( ) ) BLOCK BLOCK ) DEFAULT DEFAULT ) SWITCH SWITCH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER final ) MODIFIER final ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_2 ) == ( VAR_3 ) ) COND ( VAR_2 ) == ( VAR_3 ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ( IF IF ( COND VAR_1 == 0 ) COND VAR_1 == 0 ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ( INIT = 0 ) INIT = 0 ) VAR VAR ( IF IF ( COND ( VAR_5 ) && ( ( VAR_2 ) == ( VAR_6 ) ) ) COND ( VAR_5 ) && ( ( VAR_2 ) == ( VAR_6 ) ) ( THEN THEN (  VAR_4 |= VAR_7 )  VAR_4 |= VAR_7 ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_8 ) && ( ( VAR_2 ) == ( VAR_6 ) ) ) COND ( VAR_8 ) && ( ( VAR_2 ) == ( VAR_6 ) ) ( THEN THEN (  VAR_4 |= VAR_9 )  VAR_4 |= VAR_9 ) THEN THEN ) IF IF (  return ( VAR_1 & VAR_4 ) != 0 ; )  return ( VAR_1 & VAR_4 ) != 0 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( ) )  VAR_1 . METHOD_2 ( ) ( TRY TRY ( BLOCK BLOCK (  VAR_2 . METHOD_3 ( VAR_3 ) )  VAR_2 . METHOD_3 ( VAR_3 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME VAR_4 ) NAME VAR_4 ( BLOCK BLOCK (  VAR_5 = VAR_6 )  VAR_5 = VAR_6 (  android.util.Log.e ( VAR_7 . TAG , ( STRING_1 + ( VAR_4 . toString ( ) ) ) ) )  android.util.Log.e ( VAR_7 . TAG , ( STRING_1 + ( VAR_4 . toString ( ) ) ) ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  METHOD_4 ( false ) )  METHOD_4 ( false ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( TYPE_2 . METHOD_2 ( ) ) ) COND ! ( TYPE_2 . METHOD_2 ( ) ) ( THEN THEN (  android.util.Log.w ( TYPE_1 . TAG , STRING_1 ) )  android.util.Log.w ( TYPE_1 . TAG , STRING_1 ) (  return null ; )  return null ; ) THEN THEN ) IF IF ( IF IF ( COND ( ( VAR_2 ) != null ) && ( VAR_2 . METHOD_3 ( ) ) ) COND ( ( VAR_2 ) != null ) && ( VAR_2 . METHOD_3 ( ) ) ( THEN THEN (  VAR_2 . METHOD_4 ( VAR_1 , ( ( STRING_2 + VAR_1 ) + STRING_3 ) ) )  VAR_2 . METHOD_4 ( VAR_1 , ( ( STRING_2 + VAR_1 ) + STRING_3 ) ) (  return VAR_2 ; )  return VAR_2 ; ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME e ) NAME e ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME project ) NAME project ( INIT = TYPE_3 . METHOD_2 ( e . METHOD_3 ( ) ) ) INIT = TYPE_3 . METHOD_2 ( e . METHOD_3 ( ) ) ) VAR VAR ( IF IF ( COND project == null ) COND project == null ( THEN THEN (  project = TYPE_4 . METHOD_4 ( ) . METHOD_5 ( ) )  project = TYPE_4 . METHOD_4 ( ) . METHOD_5 ( ) ) THEN THEN ) IF IF ( IF IF ( COND TYPE_5 . METHOD_6 ( project ) ) COND TYPE_5 . METHOD_6 ( project ) ( THEN THEN (  TYPE_5 . METHOD_7 ( ) )  TYPE_5 . METHOD_7 ( ) (  return ; )  return ; ) THEN THEN ) IF IF (  TYPE_6 . METHOD_4 ( ) . METHOD_8 ( project , VAR_1 , TYPE_7 . METHOD_4 ( project ) ) )  TYPE_6 . METHOD_4 ( ) . METHOD_8 ( project , VAR_1 , TYPE_7 . METHOD_4 ( project ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME event ) NAME event ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( event . METHOD_2 ( ) ) == ( VAR_2 ) ) COND ( event . METHOD_2 ( ) ) == ( VAR_2 ) ( THEN THEN ( IF IF ( COND VAR_3 ) COND VAR_3 ( THEN THEN (  android.util.Log.v ( VAR_4 . TAG , STRING_1 ) )  android.util.Log.v ( VAR_4 . TAG , STRING_1 ) ) THEN THEN ) IF IF (  VAR_5 . METHOD_3 ( ) )  VAR_5 . METHOD_3 ( ) (  return false ; )  return false ; ) THEN THEN ) IF IF (  return super . METHOD_1 ( VAR_1 , event ) ; )  return super . METHOD_1 ( VAR_1 , event ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE short ) TYPE short ( NAME x ) NAME x ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  throw new TYPE_2 ( ) ; )  throw new TYPE_2 ( ) ; ) THEN THEN ) IF IF ( IF IF ( COND ! ( VAR_2 ) ) COND ! ( VAR_2 ) ( THEN THEN (  throw new TYPE_3 ( STRING_1 ) ; )  throw new TYPE_3 ( STRING_1 ) ; ) THEN THEN ) IF IF (  METHOD_1 ( METHOD_2 ( METHOD_3 ( VAR_3 ) ) , x ) )  METHOD_1 ( METHOD_2 ( METHOD_3 ( VAR_3 ) ) , x ) (  return this ; )  return this ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static synchronized ) MODIFIER private static synchronized ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 != null ) && ( ! ( VAR_2 ) ) ) COND ( VAR_1 != null ) && ( ! ( VAR_2 ) ) ( THEN THEN ( IF IF ( COND VAR_3 ) COND VAR_3 ( THEN THEN (  android.util.Log.d ( TYPE_1 . TAG , ( STRING_1 + ( VAR_4 ) ) ) )  android.util.Log.d ( TYPE_1 . TAG , ( STRING_1 + ( VAR_4 ) ) ) ) THEN THEN ) IF IF (  VAR_4 = VAR_1 )  VAR_4 = VAR_1 ) THEN THEN ( ELSE ELSE ( IF IF ( COND VAR_3 ) COND VAR_3 ( THEN THEN ( IF IF ( COND ( VAR_4 ) == null ) COND ( VAR_4 ) == null ( THEN THEN (  android.util.Log.d ( TYPE_1 . TAG , STRING_2 ) )  android.util.Log.d ( TYPE_1 . TAG , STRING_2 ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND VAR_5 ) COND VAR_5 ( THEN THEN (  android.util.Log.d ( TYPE_1 . TAG , STRING_3 ) )  android.util.Log.d ( TYPE_1 . TAG , STRING_3 ) ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < ( VAR_1 . length ) ) COND i < ( VAR_1 . length ) ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_1 . METHOD_2 ( VAR_1 [ i ] ) ) INIT = TYPE_1 . METHOD_2 ( VAR_1 [ i ] ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME p ) NAME p ( INIT = VAR_2 . METHOD_3 ( ) ) INIT = VAR_2 . METHOD_3 ( ) ) VAR VAR (  assertNotNull ( ( STRING_1 + ( VAR_1 [ i ] ) ) , p ) )  assertNotNull ( ( STRING_1 + ( VAR_1 [ i ] ) ) , p ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK (  fail ( ( STRING_2 + ( VAR_1 [ i ] ) ) ) )  fail ( ( STRING_2 + ( VAR_1 [ i ] ) ) ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) FOR FOR ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( STRING_1 ) ) INIT = TYPE_1 . METHOD_2 ( STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_2 = TYPE_2 . METHOD_2 ( STRING_2 ) )  VAR_2 = TYPE_2 . METHOD_2 ( STRING_2 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK (  TYPE_4 . METHOD_3 ( STRING_3 ) )  TYPE_4 . METHOD_3 ( STRING_3 ) (  return ; )  return ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  assertFalse ( VAR_1 . METHOD_4 ( VAR_2 , INT_1 , INT_2 ) ) )  assertFalse ( VAR_1 . METHOD_4 ( VAR_2 , INT_1 , INT_2 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_2 = TYPE_2 . METHOD_2 ( ( ( VAR_3 ) == ( VAR_4 ) ? VAR_5 : VAR_6 ) ) )  VAR_2 = TYPE_2 . METHOD_2 ( ( ( VAR_3 ) == ( VAR_4 ) ? VAR_5 : VAR_6 ) ) ( IF IF ( COND VAR_7 ) COND VAR_7 ( THEN THEN (  android.util.Log.v ( TYPE_2 . TAG , ( ( ( ( ( STRING_1 + ( VAR_2 . METHOD_3 ( ) ) ) + STRING_2 ) + ( VAR_2 . METHOD_4 ( ) ) ) + STRING_3 ) + ( VAR_2 . METHOD_5 ( ) ) ) ) )  android.util.Log.v ( TYPE_2 . TAG , ( ( ( ( ( STRING_1 + ( VAR_2 . METHOD_3 ( ) ) ) + STRING_2 ) + ( VAR_2 . METHOD_4 ( ) ) ) + STRING_3 ) + ( VAR_2 . METHOD_5 ( ) ) ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected static ) MODIFIER protected static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME value ) NAME value ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME sb ) NAME sb ( INIT = new TYPE_2 ( 100 ) ) INIT = new TYPE_2 ( 100 ) ) VAR VAR (  sb.append ( CHAR_1 ) )  sb.append ( CHAR_1 ) ( IF IF ( COND value instanceof TYPE_3 ) COND value instanceof TYPE_3 ( THEN THEN (  sb.append ( STRING_1 ) )  sb.append ( STRING_1 ) ) THEN THEN ( ELSE ELSE (  sb.append ( value . METHOD_2 ( ) ) )  sb.append ( value . METHOD_2 ( ) ) (  sb.append ( CHAR_2 ) )  sb.append ( CHAR_2 ) (  sb.append ( value . METHOD_3 ( ) ) )  sb.append ( value . METHOD_3 ( ) ) ) ELSE ELSE ) IF IF (  return sb . toString ( ) ; )  return sb . toString ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_1 ) ) ) INIT = TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_1 ) ) ) VAR VAR (  assertNotNull ( VAR_4 ) )  assertNotNull ( VAR_4 ) ( VAR VAR ( TYPE java.util.List<?extendsTYPE_3> ) TYPE java.util.List<?extendsTYPE_3> ( NAME VAR_5 ) NAME VAR_5 ( INIT = METHOD_4 ( VAR_3 ) ) INIT = METHOD_4 ( VAR_3 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME match ) NAME match ( INIT = VAR_4 . METHOD_5 ( VAR_5 ) ) INIT = VAR_4 . METHOD_5 ( VAR_5 ) ) VAR VAR (  assertEquals ( VAR_2 , VAR_5 . METHOD_6 ( match ) ) )  assertEquals ( VAR_2 , VAR_5 . METHOD_6 ( match ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( ( TYPE_1 . METHOD_2 ( ) ) != null ) && ( VAR_1 . METHOD_3 ( ) ) ) COND ( ( TYPE_1 . METHOD_2 ( ) ) != null ) && ( VAR_1 . METHOD_3 ( ) ) ( THEN THEN ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME state ) NAME state ( INIT = TYPE_1 . METHOD_4 ( VAR_1 ) ) INIT = TYPE_1 . METHOD_4 ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME target ) NAME target ( INIT = state . METHOD_5 ( ) ) INIT = state . METHOD_5 ( ) ) VAR VAR ( IF IF ( COND target != null ) COND target != null ( THEN THEN (  VAR_2 . METHOD_6 ( target ) )  VAR_2 . METHOD_6 ( target ) ) THEN THEN ) IF IF (  VAR_3 . METHOD_6 ( state . METHOD_7 ( ) ) )  VAR_3 . METHOD_6 ( state . METHOD_7 ( ) ) (  VAR_4 . METHOD_8 ( state ) )  VAR_4 . METHOD_8 ( state ) (  VAR_4 . METHOD_9 ( ( ! ( state . METHOD_7 ( ) ) ) ) )  VAR_4 . METHOD_9 ( ( ! ( state . METHOD_7 ( ) ) ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_1 ) NAME VAR_1 ( INIT = new byte [ VAR_2 ] ) INIT = new byte [ VAR_2 ] ) VAR VAR ( SYNCHRONIZED SYNCHRONIZED (  VAR_3 )  VAR_3 ( BLOCK BLOCK ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_2 ( VAR_1 ) ) INIT = METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND ( VAR_4 == null ) || ( ! ( TYPE_1 . equals ( VAR_1 , VAR_4 ) ) ) ) COND ( VAR_4 == null ) || ( ! ( TYPE_1 . equals ( VAR_1 , VAR_4 ) ) ) ( THEN THEN (  TYPE_2 . i ( VAR_5 . TAG , STRING_1 ) )  TYPE_2 . i ( VAR_5 . TAG , STRING_1 ) (  METHOD_3 ( ) )  METHOD_3 ( ) (  return false ; )  return false ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( STRING_1 ) ) INIT = TYPE_1 . METHOD_2 ( STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_2 ) ( VAR_1 . METHOD_3 ( new TYPE_3 ( TYPE_4 . METHOD_4 ( ) ) ) ) ) ) INIT = ( ( TYPE_2 ) ( VAR_1 . METHOD_3 ( new TYPE_3 ( TYPE_4 . METHOD_4 ( ) ) ) ) ) ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_2 . METHOD_5 ( STRING_2 ) ) INIT = VAR_2 . METHOD_5 ( STRING_2 ) ) VAR VAR (  assertTrue ( TYPE_5 . equals ( new byte [ ] { 4 , 2 , INT_1 , 0 } , VAR_3 ) ) )  assertTrue ( TYPE_5 . equals ( new byte [ ] { 4 , 2 , INT_1 , 0 } , VAR_3 ) ) (  assertNotNull ( VAR_2 . toString ( ) ) )  assertNotNull ( VAR_2 . toString ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME device ) NAME device ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME test ) NAME test ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND test == null ) COND test == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  VAR_2 = false )  VAR_2 = false (  VAR_3 = false )  VAR_3 = false (  println ( VAR_4 ) )  println ( VAR_4 ) (  println ( ( STRING_1 + ( METHOD_2 ( ) ) ) ) )  println ( ( STRING_1 + ( METHOD_2 ( ) ) ) ) (  METHOD_3 ( device ) )  METHOD_3 ( device ) (  METHOD_4 ( test , VAR_1 ) )  METHOD_4 ( test , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 . METHOD_2 ( ) ) COND VAR_1 . METHOD_2 ( ) ( THEN THEN ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_1 . toString ( VAR_1 , VAR_3 ) ) INIT = TYPE_1 . toString ( VAR_1 , VAR_3 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_3 . METHOD_3 ( VAR_2 , true ) ) INIT = TYPE_3 . METHOD_3 ( VAR_2 , true ) ) VAR VAR (  METHOD_1 ( VAR_4 ) )  METHOD_1 ( VAR_4 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_5 . log ( e , STRING_1 , VAR_1 ) )  VAR_5 . log ( e , STRING_1 , VAR_1 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1<TYPE_2> ) RETURN TYPE_1<TYPE_2> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_4> ) TYPE java.util.List<TYPE_4> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_5<TYPE_2> ) TYPE TYPE_5<TYPE_2> ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_5 < > ( ) ) INIT = new TYPE_5 < > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME path ) NAME path ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK (  VAR_3 . METHOD_2 ( VAR_1 . METHOD_3 ( TYPE_6 . METHOD_4 ( path ) ) ) )  VAR_3 . METHOD_2 ( VAR_1 . METHOD_3 ( TYPE_6 . METHOD_4 ( path ) ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_3 . build ( ) ; )  return VAR_3 . build ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 . METHOD_2 ( VAR_1 ) ) INIT = VAR_4 . METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_3 != null ) COND VAR_3 != null ( THEN THEN (  VAR_2 . set ( VAR_3 ) )  VAR_2 . set ( VAR_3 ) ) THEN THEN ) IF IF (  return VAR_4 . METHOD_3 ( VAR_2 ) ; )  return VAR_4 . METHOD_3 ( VAR_2 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE android.os.Message ) TYPE android.os.Message ( NAME msg ) NAME msg ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SWITCH SWITCH ( NAME VAR_1 ) NAME VAR_1 ( CASE VAR_2 ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME flags ) NAME flags ( INIT = msg.arg1 ) INIT = msg.arg1 ) VAR VAR (  VAR_3 . METHOD_2 ( flags ) )  VAR_3 . METHOD_2 ( flags ) (  return true ; )  return true ; ) BLOCK BLOCK ) CASE VAR_2 ( CASE VAR_4 ( BLOCK BLOCK (  VAR_3 . METHOD_3 ( ) )  VAR_3 . METHOD_3 ( ) (  return true ; )  return true ; ) BLOCK BLOCK ) CASE VAR_4 ( CASE VAR_5 ( BLOCK BLOCK (  VAR_3 . METHOD_4 ( ) )  VAR_3 . METHOD_4 ( ) (  return true ; )  return true ; ) BLOCK BLOCK ) CASE VAR_5 ( DEFAULT DEFAULT ( BLOCK BLOCK (  return false ; )  return false ; ) BLOCK BLOCK ) DEFAULT DEFAULT ) SWITCH SWITCH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME uri ) NAME uri ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND uri == null ) COND uri == null ( THEN THEN (  throw new java.lang.NullPointerException ( STRING_1 ) ; )  throw new java.lang.NullPointerException ( STRING_1 ) ; ) THEN THEN ) IF IF ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  throw new java.lang.NullPointerException ( STRING_2 ) ; )  throw new java.lang.NullPointerException ( STRING_2 ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( IF IF ( COND VAR_2 == 0 ) COND VAR_2 == 0 ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF (  return TYPE_1 . METHOD_1 ( VAR_2 , uri , VAR_1 ) ; )  return TYPE_1 . METHOD_1 ( VAR_2 , uri , VAR_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME text ) NAME text ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( VAR_2 ) != null ) ? VAR_2 . METHOD_2 ( text , this ) : text ) INIT = ( ( VAR_2 ) != null ) ? VAR_2 . METHOD_2 ( text , this ) : text ) VAR VAR (  return new TYPE_3 ( VAR_1 , VAR_3 , ( ( int ) ( TYPE_4 . METHOD_3 ( TYPE_1 . METHOD_4 ( VAR_1 , VAR_3 ) ) ) ) , VAR_4 , FLOAT_1 , 0 , true ) ; )  return new TYPE_3 ( VAR_1 , VAR_3 , ( ( int ) ( TYPE_4 . METHOD_3 ( TYPE_1 . METHOD_4 ( VAR_1 , VAR_3 ) ) ) ) , VAR_4 , FLOAT_1 , 0 , true ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4<TYPE_5> ) TYPE TYPE_4<TYPE_5> ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_2 ( ) . METHOD_3 ( ) ) INIT = METHOD_2 ( ) . METHOD_3 ( ) ) VAR VAR ( WHILE WHILE ( COND ( VAR_3 . METHOD_4 ( ) ) && ( ! ( VAR_4 ) ) ) COND ( VAR_3 . METHOD_4 ( ) ) && ( ! ( VAR_4 ) ) ( BLOCK BLOCK (  VAR_5 = VAR_3 . METHOD_5 ( ) )  VAR_5 = VAR_3 . METHOD_5 ( ) (  VAR_5 . run ( VAR_6 , VAR_1 , VAR_2 ) )  VAR_5 . run ( VAR_6 , VAR_1 , VAR_2 ) ) BLOCK BLOCK ) WHILE WHILE ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.Set<java.lang.String> ) TYPE java.util.Set<java.lang.String> ( NAME expected ) NAME expected ) VAR VAR ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Set<java.lang.String> ) TYPE java.util.Set<java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_1 . METHOD_2 ( expected , VAR_1 ) ) INIT = TYPE_1 . METHOD_2 ( expected , VAR_1 ) ) VAR VAR (  assertEquals ( STRING_1 , VAR_3 , VAR_2 ) )  assertEquals ( STRING_1 , VAR_3 , VAR_2 ) (  assertEquals ( expected . size ( ) , VAR_1 . length ) )  assertEquals ( expected . size ( ) , VAR_1 . length ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = false ) INIT = false ) VAR VAR (  VAR_3 = VAR_1 )  VAR_3 = VAR_1 ( IF IF ( COND ! ( VAR_4 ) ) COND ! ( VAR_4 ) ( THEN THEN (  METHOD_2 ( ) )  METHOD_2 ( ) ( IF IF ( COND VAR_5 ) COND VAR_5 ( THEN THEN (  TYPE_2 . d ( VAR_6 , ( STRING_1 + VAR_1 ) ) )  TYPE_2 . d ( VAR_6 , ( STRING_1 + VAR_1 ) ) ) THEN THEN ) IF IF (  VAR_7 . METHOD_3 ( this ) )  VAR_7 . METHOD_3 ( this ) ( IF IF ( COND ( VAR_8 ) != null ) COND ( VAR_8 ) != null ( THEN THEN (  VAR_2 = VAR_8 . METHOD_4 ( this ) )  VAR_2 = VAR_8 . METHOD_4 ( this ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  METHOD_5 ( ) )  METHOD_5 ( ) (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME context ) NAME context ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_3 . METHOD_2 ( TYPE_4 . get ( context ) . METHOD_3 ( ) . METHOD_4 ( context ) ) )  TYPE_3 . METHOD_2 ( TYPE_4 . get ( context ) . METHOD_3 ( ) . METHOD_4 ( context ) ) (  new TYPE_5 ( context , VAR_1 ) . METHOD_5 ( ) . METHOD_6 ( VAR_3 , VAR_2 ) . METHOD_7 ( ) )  new TYPE_5 ( context , VAR_1 ) . METHOD_5 ( ) . METHOD_6 ( VAR_3 , VAR_2 ) . METHOD_7 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_2 ( VAR_1 ) ) INIT = TYPE_2 . METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_2 == null ) COND VAR_2 == null ( THEN THEN (  VAR_2 = TYPE_3 . METHOD_2 ( VAR_1 ) )  VAR_2 = TYPE_3 . METHOD_2 ( VAR_1 ) ( IF IF ( COND VAR_2 == null ) COND VAR_2 == null ( THEN THEN (  VAR_2 = TYPE_4 . METHOD_2 ( VAR_1 ) )  VAR_2 = TYPE_4 . METHOD_2 ( VAR_1 ) ) THEN THEN ) IF IF ( IF IF ( COND VAR_2 == null ) COND VAR_2 == null ( THEN THEN (  VAR_2 = TYPE_5 . METHOD_2 ( VAR_1 ) )  VAR_2 = TYPE_5 . METHOD_2 ( VAR_1 ) ) THEN THEN ) IF IF ( IF IF ( COND VAR_2 == null ) COND VAR_2 == null ( THEN THEN (  VAR_2 = TYPE_6 . METHOD_2 ( VAR_1 ) )  VAR_2 = TYPE_6 . METHOD_2 ( VAR_1 ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( STRING_1 , ( STRING_2 + ( ( STRING_3 + STRING_4 ) + STRING_5 ) ) , ( STRING_2 + ( ( ( ( STRING_6 + STRING_7 ) + STRING_8 ) + STRING_6 ) + STRING_9 ) ) ) )  METHOD_2 ( STRING_1 , ( STRING_2 + ( ( STRING_3 + STRING_4 ) + STRING_5 ) ) , ( STRING_2 + ( ( ( ( STRING_6 + STRING_7 ) + STRING_8 ) + STRING_6 ) + STRING_9 ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME context ) NAME context ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = context . METHOD_2 ( ) ) INIT = context . METHOD_2 ( ) ) VAR VAR (  VAR_2 = new TYPE_3 < TYPE_2 > ( VAR_1 ) )  VAR_2 = new TYPE_3 < TYPE_2 > ( VAR_1 ) (  VAR_3 = new TYPE_4 ( ) )  VAR_3 = new TYPE_4 ( ) (  VAR_1 . METHOD_3 ( VAR_4 , true , VAR_3 ) )  VAR_1 . METHOD_3 ( VAR_4 , true , VAR_3 ) (  METHOD_4 ( VAR_1 ) )  METHOD_4 ( VAR_1 ) (  VAR_5 = true )  VAR_5 = true ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( ! ( TYPE_1 . METHOD_2 ( METHOD_3 ( ) ) ) ) && ( ! ( TYPE_1 . METHOD_4 ( METHOD_3 ( ) ) ) ) ) COND ( ! ( TYPE_1 . METHOD_2 ( METHOD_3 ( ) ) ) ) && ( ! ( TYPE_1 . METHOD_4 ( METHOD_3 ( ) ) ) ) ( THEN THEN (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) (  return ; )  return ; ) THEN THEN ) IF IF (  mContext . METHOD_5 ( VAR_1 ) )  mContext . METHOD_5 ( VAR_1 ) ( IF IF ( COND VAR_2 . METHOD_6 ( ) ) COND VAR_2 . METHOD_6 ( ) ( THEN THEN (  assertTrue ( VAR_2 . METHOD_7 ( false ) ) )  assertTrue ( VAR_2 . METHOD_7 ( false ) ) (  TYPE_2 . METHOD_8 ( VAR_3 ) )  TYPE_2 . METHOD_8 ( VAR_3 ) ) THEN THEN ) IF IF (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = 1 ) INIT = 1 ) VAR VAR (  VAR_2 . METHOD_2 ( VAR_1 , METHOD_3 ( ) ) )  VAR_2 . METHOD_2 ( VAR_1 , METHOD_3 ( ) ) (  org.mockito.Mockito.verify ( VAR_3 ) . METHOD_2 ( VAR_4 . METHOD_4 ( ) , org.mockito.Matchers.eq ( ( ( java.lang.Integer ) ( TYPE_1 . METHOD_5 ( VAR_5 , STRING_1 , new java.lang.Class < ? > [ ] { VAR_6 } , new java.lang.Object [ ] { VAR_1 } ) ) ) ) ) )  org.mockito.Mockito.verify ( VAR_3 ) . METHOD_2 ( VAR_4 . METHOD_4 ( ) , org.mockito.Matchers.eq ( ( ( java.lang.Integer ) ( TYPE_1 . METHOD_5 ( VAR_5 , STRING_1 , new java.lang.Class < ? > [ ] { VAR_6 } , new java.lang.Object [ ] { VAR_1 } ) ) ) ) ) (  TYPE_1 . METHOD_6 ( VAR_2 , VAR_4 . METHOD_7 ( ) , VAR_7 ) )  TYPE_1 . METHOD_6 ( VAR_2 , VAR_4 . METHOD_7 ( ) , VAR_7 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( 3 , VAR_2 ) )  VAR_1 . METHOD_2 ( 3 , VAR_2 ) ( VAR VAR ( TYPE android.os.Bundle ) TYPE android.os.Bundle ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 . METHOD_3 ( ) . METHOD_4 ( ) ) INIT = VAR_4 . METHOD_3 ( ) . METHOD_4 ( ) ) VAR VAR (  assertEquals ( 1 , VAR_3 . size ( ) ) )  assertEquals ( 1 , VAR_3 . size ( ) ) (  assertFalse ( VAR_3 . METHOD_5 ( VAR_5 ) ) )  assertFalse ( VAR_3 . METHOD_5 ( VAR_5 ) ) (  assertTrue ( VAR_3 . METHOD_5 ( VAR_6 ) ) )  assertTrue ( VAR_3 . METHOD_5 ( VAR_6 ) ) (  assertEquals ( VAR_7 , VAR_3 . METHOD_6 ( VAR_6 ) ) )  assertEquals ( VAR_7 , VAR_3 . METHOD_6 ( VAR_6 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME context ) NAME context ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND TYPE_2 . METHOD_2 ( context ) ) COND TYPE_2 . METHOD_2 ( context ) ( THEN THEN (  TYPE_2 . METHOD_3 ( context , VAR_2 , VAR_1 ) )  TYPE_2 . METHOD_3 ( context , VAR_2 , VAR_1 ) ) THEN THEN ( ELSE ELSE (  TYPE_2 . METHOD_4 ( context ) . METHOD_5 ( ) . METHOD_6 ( VAR_2 , VAR_1 ) . METHOD_7 ( ) )  TYPE_2 . METHOD_4 ( context ) . METHOD_5 ( ) . METHOD_6 ( VAR_2 , VAR_1 ) . METHOD_7 ( ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME VAR_1 ) NAME VAR_1 ( INIT = null ) INIT = null ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_1 = ( ( TYPE_1 < TYPE_2 > ) ( super . METHOD_1 ( ) ) ) )  VAR_1 = ( ( TYPE_1 < TYPE_2 > ) ( super . METHOD_1 ( ) ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_4 ( ) ; )  throw new TYPE_4 ( ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  VAR_1 . m = new TYPE_5 < > ( m ) )  VAR_1 . m = new TYPE_5 < > ( m ) (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME in ) NAME in ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = in . METHOD_2 ( ) . VAR_3 ) INIT = in . METHOD_2 ( ) . VAR_3 ) VAR VAR ( IF IF ( COND VAR_2 . METHOD_3 ( ) ) COND VAR_2 . METHOD_3 ( ) ( THEN THEN ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_4 ) NAME VAR_4 ( INIT = in . METHOD_4 ( VAR_5 ) ) INIT = in . METHOD_4 ( VAR_5 ) ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < ( VAR_2 . size ) ) COND i < ( VAR_2 . size ) ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK (  METHOD_5 ( in , VAR_4 , VAR_1 ) )  METHOD_5 ( in , VAR_4 , VAR_1 ) ) BLOCK BLOCK ) FOR FOR ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME data ) NAME data ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME input ) NAME input ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = input . METHOD_2 ( ) ) INIT = input . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ( INIT = input . METHOD_3 ( VAR_1 ) ) INIT = input . METHOD_3 ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ( INIT = input . METHOD_2 ( ) ) INIT = input . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_5 ) NAME VAR_5 ( INIT = input . METHOD_4 ( VAR_2 , ( VAR_4 - VAR_2 ) ) ) INIT = input . METHOD_4 ( VAR_2 , ( VAR_4 - VAR_2 ) ) ) VAR VAR (  data . METHOD_5 ( new TYPE_1 ( VAR_1 , VAR_5 ) ) )  data . METHOD_5 ( new TYPE_1 ( VAR_1 , VAR_5 ) ) (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME server ) NAME server ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_1 . METHOD_2 ( VAR_2 , VAR_4 , VAR_5 ) ) INIT = TYPE_1 . METHOD_2 ( VAR_2 , VAR_4 , VAR_5 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_6 ) NAME VAR_6 ( INIT = TYPE_1 . METHOD_2 ( VAR_2 , VAR_7 , VAR_8 ) ) INIT = TYPE_1 . METHOD_2 ( VAR_2 , VAR_7 , VAR_8 ) ) VAR VAR (  return TYPE_1 . METHOD_1 ( VAR_9 , VAR_10 , VAR_11 , VAR_12 , VAR_4 [ 0 ] , VAR_7 [ 0 ] , VAR_5 [ 0 ] , VAR_8 [ 0 ] , VAR_3 , VAR_6 ) ; )  return TYPE_1 . METHOD_1 ( VAR_9 , VAR_10 , VAR_11 , VAR_12 , VAR_4 [ 0 ] , VAR_7 [ 0 ] , VAR_5 [ 0 ] , VAR_8 [ 0 ] , VAR_3 , VAR_6 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_3 . METHOD_2 ( VAR_1 ) )  TYPE_3 . METHOD_2 ( VAR_1 ) ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_4 ) NAME VAR_4 ( INIT = ( ( TYPE_4 ) ( VAR_1 . METHOD_3 ( ) ) ) ) INIT = ( ( TYPE_4 ) ( VAR_1 . METHOD_3 ( ) ) ) ) VAR VAR (  VAR_4 . print ( ( VAR_2 + STRING_1 ) , VAR_3 ) )  VAR_4 . print ( ( VAR_2 + STRING_1 ) , VAR_3 ) (  VAR_4 . METHOD_4 ( ) )  VAR_4 . METHOD_4 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME toString ) NAME toString ( BLOCK BLOCK (  return ( ( ( STRING_1 + ( TYPE_1 . getName ( VAR_1 [ ( ( VAR_2 ) - 1 ) ] . METHOD_1 ( ) . METHOD_2 ( ) ) ) ) + STRING_2 ) + ( data ) ) + STRING_3 ; )  return ( ( ( STRING_1 + ( TYPE_1 . getName ( VAR_1 [ ( ( VAR_2 ) - 1 ) ] . METHOD_1 ( ) . METHOD_2 ( ) ) ) ) + STRING_2 ) + ( data ) ) + STRING_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.Map<java.lang.String,TYPE_1> ) TYPE java.util.Map<java.lang.String,TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2<java.util.Map<java.lang.String,java.lang.String>> ) TYPE TYPE_2<java.util.Map<java.lang.String,java.lang.String>> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_3<java.lang.String,TYPE_1> ) TYPE TYPE_3<java.lang.String,TYPE_1> ( NAME entry ) NAME entry ( IN METHOD_2 ( VAR_3 ) . METHOD_3 ( ) ) IN METHOD_2 ( VAR_3 ) . METHOD_3 ( ) ( BLOCK BLOCK (  VAR_1 . METHOD_4 ( entry . METHOD_5 ( ) , entry . METHOD_6 ( ) ) )  VAR_1 . METHOD_4 ( entry . METHOD_5 ( ) , entry . METHOD_6 ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return 0 ; )  return 0 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( ) ) INIT = TYPE_1 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 ( INT_1 , STRING_1 ) ) INIT = new TYPE_2 ( INT_1 , STRING_1 ) ) VAR VAR (  TYPE_1 . METHOD_3 ( VAR_2 ) )  TYPE_1 . METHOD_3 ( VAR_2 ) (  assertEquals ( STRING_2 , VAR_2 , TYPE_1 . METHOD_2 ( ) ) )  assertEquals ( STRING_2 , VAR_2 , TYPE_1 . METHOD_2 ( ) ) (  TYPE_1 . METHOD_3 ( null ) )  TYPE_1 . METHOD_3 ( null ) (  assertEquals ( STRING_3 , VAR_1 , TYPE_1 . METHOD_2 ( ) ) )  assertEquals ( STRING_3 , VAR_1 , TYPE_1 . METHOD_2 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_2 class ) , TYPE_2 . METHOD_4 ( STRING_1 ) , TYPE_2 . METHOD_5 ( VAR_3 ) , TYPE_2 . METHOD_6 ( INT_1 ) ) ) INIT = TYPE_2 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_2 class ) , TYPE_2 . METHOD_4 ( STRING_1 ) , TYPE_2 . METHOD_5 ( VAR_3 ) , TYPE_2 . METHOD_6 ( INT_1 ) ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_3 . METHOD_7 ( STRING_2 , STRING_3 , STRING_4 , STRING_5 , STRING_6 , STRING_7 , STRING_8 , STRING_9 , STRING_10 , STRING_11 , STRING_12 ) ) INIT = TYPE_3 . METHOD_7 ( STRING_2 , STRING_3 , STRING_4 , STRING_5 , STRING_6 , STRING_7 , STRING_8 , STRING_9 , STRING_10 , STRING_11 , STRING_12 ) ) VAR VAR (  TYPE_3 . METHOD_8 ( VAR_4 , VAR_1 ) )  TYPE_3 . METHOD_8 ( VAR_4 , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_3 ) == ( VAR_4 ) ) COND ( VAR_3 ) == ( VAR_4 ) ( THEN THEN ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_6 . get ( STRING_1 , VAR_1 ) ) INIT = VAR_6 . get ( STRING_1 , VAR_1 ) ) VAR VAR ( IF IF ( COND ! ( VAR_5 . equals ( VAR_1 ) ) ) COND ! ( VAR_5 . equals ( VAR_1 ) ) ( THEN THEN (  return VAR_2 ? VAR_5 : METHOD_2 ( VAR_7 , VAR_5 ) ; )  return VAR_2 ? VAR_5 : METHOD_2 ( VAR_7 , VAR_5 ) ; ) THEN THEN ) IF IF ) THEN THEN ) IF IF ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_6 . get ( STRING_2 , VAR_1 ) ) INIT = VAR_6 . get ( STRING_2 , VAR_1 ) ) VAR VAR (  return VAR_2 ? VAR_5 : METHOD_2 ( VAR_7 , VAR_5 ) ; )  return VAR_2 ? VAR_5 : METHOD_2 ( VAR_7 , VAR_5 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( key ) == null ) COND ( key ) == null ( THEN THEN (  throw new TYPE_1 ( STRING_1 ) ; )  throw new TYPE_1 ( STRING_1 ) ; ) THEN THEN ) IF IF ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME result ) NAME result ( INIT = TYPE_2 . METHOD_2 ( VAR_2 , VAR_1 , 0 , VAR_1 . length , key . METHOD_3 ( ) ) ) INIT = TYPE_2 . METHOD_2 ( VAR_2 , VAR_1 , 0 , VAR_1 . length , key . METHOD_3 ( ) ) ) VAR VAR (  return result == 1 ; )  return result == 1 ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME ex ) NAME ex ( BLOCK BLOCK (  throw new TYPE_1 ( ex ) ; )  throw new TYPE_1 ( ex ) ; ) BLOCK BLOCK ) CATCH CATCH ( FINALLY FINALLY (  METHOD_4 ( ) )  METHOD_4 ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME service ) NAME service ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  android.util.Log . i ( TYPE_1 . TAG , STRING_1 ) )  android.util.Log . i ( TYPE_1 . TAG , STRING_1 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_1 ( VAR_1 , service , VAR_2 , VAR_3 ) ) INIT = new TYPE_1 ( VAR_1 , service , VAR_2 , VAR_3 ) ) VAR VAR (  VAR_4 . start ( ) )  VAR_4 . start ( ) (  return VAR_4 ; )  return VAR_4 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  server . METHOD_2 ( new TYPE_1 ( ) . METHOD_3 ( STRING_1 ) ) )  server . METHOD_2 ( new TYPE_1 ( ) . METHOD_3 ( STRING_1 ) ) (  server . METHOD_4 ( ) )  server . METHOD_4 ( ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_2 ) ( server . METHOD_5 ( STRING_2 ) . METHOD_6 ( ) ) ) ) INIT = ( ( TYPE_2 ) ( server . METHOD_5 ( STRING_2 ) . METHOD_6 ( ) ) ) ) VAR VAR (  VAR_1 . METHOD_7 ( ) )  VAR_1 . METHOD_7 ( ) (  METHOD_8 ( STRING_1 , VAR_1 ) )  METHOD_8 ( STRING_1 , VAR_1 ) (  assertEquals ( INT_1 , VAR_1 . METHOD_9 ( ) ) )  assertEquals ( INT_1 , VAR_1 . METHOD_9 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( false ) )  METHOD_2 ( false ) ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_3 ( ) ) INIT = VAR_2 . METHOD_3 ( ) ) VAR VAR ( IF IF ( COND VAR_1 != ( - 1 ) ) COND VAR_1 != ( - 1 ) ( THEN THEN ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_2 . METHOD_4 ( VAR_1 ) ) INIT = VAR_2 . METHOD_4 ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_3 . equals ( VAR_4 ) ) COND VAR_3 . equals ( VAR_4 ) ( THEN THEN (  VAR_2 . METHOD_5 ( 0 ) )  VAR_2 . METHOD_5 ( 0 ) ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_5 ) != null ) COND ( VAR_5 ) != null ( THEN THEN (  VAR_5 . METHOD_1 ( ) )  VAR_5 . METHOD_1 ( ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE android.bluetooth.BluetoothDevice ) TYPE android.bluetooth.BluetoothDevice ( NAME device ) NAME device ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = 0 ) INIT = 0 ) VAR VAR ( SYNCHRONIZED SYNCHRONIZED (  VAR_2 )  VAR_2 ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_2 . values ( ) ) IN VAR_2 . values ( ) ( BLOCK BLOCK ( SWITCH SWITCH ( NAME VAR_3 . METHOD_2 ( ) ) NAME VAR_3 . METHOD_2 ( ) ( CASE VAR_4 ( BLOCK BLOCK ( IF IF ( COND TYPE_2 . equals ( device , VAR_3 . METHOD_3 ( ) ) ) COND TYPE_2 . equals ( device , VAR_3 . METHOD_3 ( ) ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF (  VAR_1 ++ )  VAR_1 ++ (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_4 ( CASE VAR_5 ( BLOCK BLOCK ( IF IF ( COND TYPE_2 . equals ( device , VAR_3 . METHOD_3 ( ) ) ) COND TYPE_2 . equals ( device , VAR_3 . METHOD_3 ( ) ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF (  VAR_1 ++ )  VAR_1 ++ (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_5 ( DEFAULT DEFAULT ( BLOCK BLOCK (  break ; )  break ; ) BLOCK BLOCK ) DEFAULT DEFAULT ) SWITCH SWITCH ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED (  return VAR_1 < ( VAR_6 ) ; )  return VAR_1 < ( VAR_6 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME x ) NAME x ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME info ) NAME info ( INIT = METHOD_2 ( x ) ) INIT = METHOD_2 ( x ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_4 ) ( VAR_3 ) ) ) INIT = ( ( TYPE_4 ) ( VAR_3 ) ) ) VAR VAR (  METHOD_3 ( METHOD_4 ( info , VAR_2 , true , VAR_1 ) ) )  METHOD_3 ( METHOD_4 ( info , VAR_2 , true , VAR_1 ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Throwable ) TYPE java.lang.Throwable ( NAME e ) NAME e ( BLOCK BLOCK (  throw METHOD_5 ( x , e ) ; )  throw METHOD_5 ( x , e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ( ( TYPE_1 ) ( null ) ) ) ) INIT = new TYPE_1 ( ( ( TYPE_1 ) ( null ) ) ) ) VAR VAR (  METHOD_2 ( VAR_1 ) )  METHOD_2 ( VAR_1 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_3 ( ) ) INIT = METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_1 ( VAR_2 ) ) INIT = new TYPE_1 ( VAR_2 ) ) VAR VAR (  assertEquals ( VAR_2 , VAR_3 ) )  assertEquals ( VAR_2 , VAR_3 ) (  VAR_3 . METHOD_4 ( ) )  VAR_3 . METHOD_4 ( ) (  assertEquals ( VAR_1 , VAR_3 ) )  assertEquals ( VAR_1 , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) ) INIT = VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) ) VAR VAR ( IF IF ( COND VAR_3 > 0 ) COND VAR_3 > 0 ( THEN THEN ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_3 * ( VAR_1 . METHOD_5 ( ) ) ) INIT = VAR_3 * ( VAR_1 . METHOD_5 ( ) ) ) VAR VAR (  VAR_2 = TYPE_3 . METHOD_6 ( VAR_2 , VAR_4 ) )  VAR_2 = TYPE_3 . METHOD_6 ( VAR_2 , VAR_4 ) ) THEN THEN ) IF IF ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_5 ) NAME VAR_5 ( INIT = TYPE_4 . METHOD_7 ( VAR_2 ) ) INIT = TYPE_4 . METHOD_7 ( VAR_2 ) ) VAR VAR (  return new TYPE_1 ( VAR_6 , VAR_5 ) ; )  return new TYPE_1 ( VAR_6 , VAR_5 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME x ) NAME x ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME info ) NAME info ( INIT = METHOD_2 ( x ) ) INIT = METHOD_2 ( x ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( SWITCH SWITCH ( NAME VAR_3 ) NAME VAR_3 ( CASE VAR_4 ( BLOCK BLOCK (  VAR_2 = VAR_5 )  VAR_2 = VAR_5 (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_4 ( CASE VAR_6 ( BLOCK BLOCK (  VAR_2 = VAR_7 )  VAR_2 = VAR_7 (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_6 ( DEFAULT DEFAULT ( BLOCK BLOCK (  throw new TYPE_5 ( STRING_1 ) ; )  throw new TYPE_5 ( STRING_1 ) ; ) BLOCK BLOCK ) DEFAULT DEFAULT ) SWITCH SWITCH ( VAR VAR ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME VAR_8 ) NAME VAR_8 ( INIT = METHOD_3 ( VAR_9 ) ) INIT = METHOD_3 ( VAR_9 ) ) VAR VAR (  METHOD_4 ( TYPE_7 . METHOD_5 ( info , VAR_2 , VAR_8 ) ) )  METHOD_4 ( TYPE_7 . METHOD_5 ( info , VAR_2 , VAR_8 ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Throwable ) TYPE java.lang.Throwable ( NAME e ) NAME e ( BLOCK BLOCK (  throw METHOD_6 ( x , e ) ; )  throw METHOD_6 ( x , e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME subId ) NAME subId ( INIT = INT_1 ) INIT = INT_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR (  METHOD_2 ( VAR_2 ) )  METHOD_2 ( VAR_2 ) (  TYPE_1 . when ( VAR_3 . METHOD_3 ( VAR_2 ) ) . thenReturn ( subId ) )  TYPE_1 . when ( VAR_3 . METHOD_3 ( VAR_2 ) ) . thenReturn ( subId ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = ( ( TYPE_2 ) ( mContext . METHOD_4 ( VAR_5 ) ) ) ) INIT = ( ( TYPE_2 ) ( mContext . METHOD_4 ( VAR_5 ) ) ) ) VAR VAR (  TYPE_1 . when ( VAR_4 . METHOD_5 ( subId ) ) . thenReturn ( VAR_1 ) )  TYPE_1 . when ( VAR_4 . METHOD_5 ( subId ) ) . thenReturn ( VAR_1 ) (  assertEquals ( VAR_1 , VAR_6 . METHOD_5 ( VAR_2 , VAR_7 ) ) )  assertEquals ( VAR_1 , VAR_6 . METHOD_5 ( VAR_2 , VAR_7 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME format ) NAME format ( PARAMS PARAMS ( VAR VAR ( TYPE long ) TYPE long ( NAME number ) NAME number ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME pos ) NAME pos ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_2 >= ( VAR_3 ) ) COND VAR_2 >= ( VAR_3 ) ( THEN THEN (  throw new TYPE_2 ( ( STRING_1 + ( name ) ) ) ; )  throw new TYPE_2 ( ( STRING_1 + ( name ) ) ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_1 ( number ) ) INIT = METHOD_1 ( number ) ) VAR VAR (  VAR_4 . METHOD_2 ( number , VAR_1 , pos , ( ++ VAR_2 ) ) )  VAR_4 . METHOD_2 ( number , VAR_1 , pos , ( ++ VAR_2 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( null ) )  TYPE_1 . METHOD_2 ( null ) (  fail ( STRING_1 ) )  fail ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.NullPointerException ) TYPE java.lang.NullPointerException ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  assertEquals ( new TYPE_1 ( VAR_1 ) , TYPE_1 . METHOD_2 ( VAR_1 ) ) )  assertEquals ( new TYPE_1 ( VAR_1 ) , TYPE_1 . METHOD_2 ( VAR_1 ) ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME locale ) NAME locale ( INIT = new TYPE_2 ( STRING_2 , STRING_3 ) ) INIT = new TYPE_2 ( STRING_2 , STRING_3 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_1 . METHOD_2 ( locale ) ) INIT = TYPE_1 . METHOD_2 ( locale ) ) VAR VAR (  assertNotNull ( VAR_2 ) )  assertNotNull ( VAR_2 ) (  assertEquals ( TYPE_1 . METHOD_2 ( ) , VAR_2 ) )  assertEquals ( TYPE_1 . METHOD_2 ( ) , VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( 0 , TYPE_2 . METHOD_2 ( ) ) ) INIT = new TYPE_1 ( 0 , TYPE_2 . METHOD_2 ( ) ) ) VAR VAR (  assertTrue ( STRING_1 , ( ( VAR_1 . METHOD_3 ( ) ) != 0 ) ) )  assertTrue ( STRING_1 , ( ( VAR_1 . METHOD_3 ( ) ) != 0 ) ) (  assertEquals ( STRING_2 , TYPE_2 . METHOD_2 ( ) , VAR_1 . METHOD_4 ( ) ) )  assertEquals ( STRING_2 , TYPE_2 . METHOD_2 ( ) , VAR_1 . METHOD_4 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE android.renderscript.Allocation ) TYPE android.renderscript.Allocation ( NAME VAR_1 ) NAME VAR_1 ( INIT = android.renderscript.Allocation.createSized ( mRS , TYPE_1 . METHOD_2 ( mRS ) , android.renderscript.cts.INPUTSIZE ) ) INIT = android.renderscript.Allocation.createSized ( mRS , TYPE_1 . METHOD_2 ( mRS ) , android.renderscript.cts.INPUTSIZE ) ) VAR VAR (  n = new int [ INPUTSIZE ] )  n = new int [ INPUTSIZE ] (  TYPE_2 . METHOD_3 ( INT_1 , INT_2 , 1 , n ) )  TYPE_2 . METHOD_3 ( INT_1 , INT_2 , 1 , n ) (  VAR_1 . METHOD_4 ( n ) )  VAR_1 . METHOD_4 ( n ) (  VAR_2 . METHOD_5 ( VAR_1 ) )  VAR_2 . METHOD_5 ( VAR_1 ) (  METHOD_6 ( INT_3 , 16 ) )  METHOD_6 ( INT_3 , 16 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ) VAR VAR ( VAR VAR ( TYPE byte ) TYPE byte ( NAME x ) NAME x ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  throw new TYPE_2 ( ) ; )  throw new TYPE_2 ( ) ; ) THEN THEN ) IF IF ( IF IF ( COND ! ( VAR_2 ) ) COND ! ( VAR_2 ) ( THEN THEN (  throw new TYPE_3 ( STRING_1 ) ; )  throw new TYPE_3 ( STRING_1 ) ; ) THEN THEN ) IF IF (  METHOD_1 ( METHOD_2 ( METHOD_3 ( i ) ) , x ) )  METHOD_1 ( METHOD_2 ( METHOD_3 ( i ) ) , x ) (  return this ; )  return this ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_5 ( new TYPE_6 ( VAR_1 ) ) ) INIT = new TYPE_5 ( new TYPE_6 ( VAR_1 ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_7 ) TYPE TYPE_7 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_7 ( ) ) INIT = new TYPE_7 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_8 ) TYPE TYPE_8 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_3 . METHOD_2 ( VAR_2 ) ) INIT = VAR_3 . METHOD_2 ( VAR_2 ) ) VAR VAR (  return VAR_4 != null ? new TYPE_1 ( VAR_3 , new TYPE_9 ( VAR_1 ) , VAR_4 . METHOD_3 ( ) ) : null ; )  return VAR_4 != null ? new TYPE_1 ( VAR_3 , new TYPE_9 ( VAR_1 ) , VAR_4 . METHOD_3 ( ) ) : null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<?extendsTYPE_1> ) TYPE java.util.List<?extendsTYPE_1> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  return TYPE_2 . METHOD_2 ( VAR_2 , VAR_1 . get ( 0 ) . METHOD_1 ( ) ) ; )  return TYPE_2 . METHOD_2 ( VAR_2 , VAR_1 . get ( 0 ) . METHOD_1 ( ) ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME ex ) NAME ex ( BLOCK BLOCK (  throw new java.lang.IllegalArgumentException ( STRING_1 ) ; )  throw new java.lang.IllegalArgumentException ( STRING_1 ) ; ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE java.lang.NullPointerException ) TYPE java.lang.NullPointerException ( NAME ex ) NAME ex ( BLOCK BLOCK (  throw new java.lang.NullPointerException ( STRING_2 ) ; )  throw new java.lang.NullPointerException ( STRING_2 ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME s ) NAME s ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i <= INT_1 ) COND i <= INT_1 ( UPDATE UPDATE (  ++ i )  ++ i ) UPDATE UPDATE ( BLOCK BLOCK (  s . METHOD_2 ( i ) )  s . METHOD_2 ( i ) (  assertEquals ( i , s . METHOD_3 ( ) ) )  assertEquals ( i , s . METHOD_3 ( ) ) ) BLOCK BLOCK ) FOR FOR ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME x ) NAME x ( INIT = 0 ) INIT = 0 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME y ) NAME y ( INIT = 1 ) INIT = 1 ) VAR VAR ( WHILE WHILE ( COND ( y ++ ) < 10 ) COND ( y ++ ) < 10 ( BLOCK BLOCK ( IF IF ( COND y > 1 ) COND y > 1 ( THEN THEN (  x = INT_1 )  x = INT_1 (  continue ; )  continue ; ) THEN THEN ( ELSE ELSE (  x = INT_2 )  x = INT_2 (  continue ; )  continue ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) WHILE WHILE (  return x ; )  return x ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.Map<java.lang.String,TYPE_1> ) TYPE java.util.Map<java.lang.String,TYPE_1> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME field ) NAME field ( INIT = VAR_3 . METHOD_2 ( VAR_1 ) ) INIT = VAR_3 . METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND field == null ) COND field == null ( THEN THEN (  throw new java.lang.IllegalArgumentException ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) ) ; )  throw new java.lang.IllegalArgumentException ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_4 ) NAME VAR_4 ( INIT = field . METHOD_3 ( VAR_5 class ) ) INIT = field . METHOD_3 ( VAR_5 class ) ) VAR VAR (  VAR_6 . METHOD_4 ( field ) )  VAR_6 . METHOD_4 ( field ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_7 ) NAME VAR_7 ( INIT = VAR_8 . METHOD_5 ( field ) ) INIT = VAR_8 . METHOD_5 ( field ) ) VAR VAR ( IF IF ( COND VAR_7 != null ) COND VAR_7 != null ( THEN THEN (  VAR_2 . METHOD_6 ( VAR_4 . name ( ) , VAR_7 ) )  VAR_2 . METHOD_6 ( VAR_4 . name ( ) , VAR_7 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( i < 0 ) || ( i > ( ( VAR_1 ) - 1 ) ) ) COND ( i < 0 ) || ( i > ( ( VAR_1 ) - 1 ) ) ( THEN THEN (  throw new java.lang.RuntimeException ( ) ; )  throw new java.lang.RuntimeException ( ) ; ) THEN THEN ) IF IF ( IF IF ( COND i > ( ( VAR_1 ) - 1 ) ) COND i > ( ( VAR_1 ) - 1 ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  value [ ( i > > > 5 ) ] &= ~ ( VAR_2 [ ( i & INT_1 ) ] ) )  value [ ( i > > > 5 ) ] &= ~ ( VAR_2 [ ( i & INT_1 ) ] ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME info ) NAME info ( INIT = VAR_3 . get ( VAR_2 ) ) INIT = VAR_3 . get ( VAR_2 ) ) VAR VAR ( SYNCHRONIZED SYNCHRONIZED (  this )  this ( BLOCK BLOCK ( IF IF ( COND VAR_4 ) COND VAR_4 ( THEN THEN (  android.util.Log.d ( TYPE_3 . TAG , ( STRING_1 + ( VAR_5 ) ) ) )  android.util.Log.d ( TYPE_3 . TAG , ( STRING_1 + ( VAR_5 ) ) ) ) THEN THEN ) IF IF ( IF IF ( COND ! ( VAR_6 ) ) COND ! ( VAR_6 ) ( THEN THEN (  VAR_6 = true )  VAR_6 = true (  new TYPE_4 ( this , info , VAR_7 ) )  new TYPE_4 ( this , info , VAR_7 ) (  return true ; )  return true ; ) THEN THEN ( ELSE ELSE (  return false ; )  return false ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( ) ) INIT = TYPE_1 . METHOD_2 ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_1 . METHOD_3 ( false ) )  VAR_1 . METHOD_3 ( false ) (  VAR_1 . METHOD_4 ( ) . METHOD_5 ( null ) )  VAR_1 . METHOD_4 ( ) . METHOD_5 ( null ) (  METHOD_6 ( VAR_1 . METHOD_7 ( TYPE_2 . METHOD_8 ( INT_1 ) ) ) )  METHOD_6 ( VAR_1 . METHOD_7 ( TYPE_2 . METHOD_8 ( INT_1 ) ) ) ) BLOCK BLOCK ( FINALLY FINALLY (  VAR_1 . METHOD_9 ( ) )  VAR_1 . METHOD_9 ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( true ) )  VAR_1 . METHOD_2 ( true ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_3 ( ) ) INIT = VAR_1 . METHOD_3 ( ) ) VAR VAR (  VAR_2 . METHOD_4 ( null ) )  VAR_2 . METHOD_4 ( null ) (  VAR_1 . METHOD_5 ( ) )  VAR_1 . METHOD_5 ( ) ( TRY TRY ( BLOCK BLOCK (  VAR_2 . METHOD_6 ( ) )  VAR_2 . METHOD_6 ( ) (  fail ( STRING_1 ) )  fail ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( STRING_1 ) ) INIT = TYPE_1 . METHOD_2 ( STRING_1 ) ) VAR VAR (  VAR_1 . METHOD_3 ( new TYPE_2 ( VAR_2 , VAR_3 , VAR_4 ) , new TYPE_3 ( new TYPE_4 ( ) , null ) { } ) )  VAR_1 . METHOD_3 ( new TYPE_2 ( VAR_2 , VAR_3 , VAR_4 ) , new TYPE_3 ( new TYPE_4 ( ) , null ) { } ) ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_1 . METHOD_4 ( ) ) INIT = VAR_1 . METHOD_4 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME key ) NAME key ( INIT = ( ( TYPE_6 ) ( VAR_5 . METHOD_5 ( ) ) ) ) INIT = ( ( TYPE_6 ) ( VAR_5 . METHOD_5 ( ) ) ) ) VAR VAR (  assertNotNull ( STRING_2 , key . METHOD_6 ( ) ) )  assertNotNull ( STRING_2 , key . METHOD_6 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME context ) NAME context ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( VAR_1 ) && ( ( VAR_2 ) == null ) ) && ( METHOD_2 ( context ) ) ) COND ( ( VAR_1 ) && ( ( VAR_2 ) == null ) ) && ( METHOD_2 ( context ) ) ( THEN THEN ( VAR VAR ( TYPE java.util.List<java.io.File> ) TYPE java.util.List<java.io.File> ( NAME VAR_3 ) NAME VAR_3 ( INIT = context . METHOD_3 ( ) . METHOD_4 ( ) ) INIT = context . METHOD_3 ( ) . METHOD_4 ( ) ) VAR VAR ( IF IF ( COND ! ( VAR_3 . METHOD_5 ( ) ) ) COND ! ( VAR_3 . METHOD_5 ( ) ) ( THEN THEN ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME location ) NAME location ( INIT = TYPE_2 . METHOD_6 ( VAR_3 . get ( 0 ) ) ) INIT = TYPE_2 . METHOD_6 ( VAR_3 . get ( 0 ) ) ) VAR VAR (  context . METHOD_7 ( VAR_4 , location , ( STRING_1 + STRING_2 ) , null ) )  context . METHOD_7 ( VAR_4 , location , ( STRING_1 + STRING_2 ) , null ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( RESOURCES RESOURCES ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . get ( ) ) INIT = VAR_2 . get ( ) ) VAR VAR ) RESOURCES RESOURCES ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_2 . METHOD_2 ( ) ) INIT = TYPE_2 . METHOD_2 ( ) ) VAR VAR (  VAR_3 . METHOD_3 ( false ) )  VAR_3 . METHOD_3 ( false ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_3 . METHOD_4 ( ) ) INIT = VAR_3 . METHOD_4 ( ) ) VAR VAR (  VAR_4 . METHOD_5 ( VAR_1 ) )  VAR_4 . METHOD_5 ( VAR_1 ) (  TYPE_4 . METHOD_6 ( VAR_4 , VAR_5 ) )  TYPE_4 . METHOD_6 ( VAR_4 , VAR_5 ) (  return VAR_4 . METHOD_7 ( null , VAR_6 ) ; )  return VAR_4 . METHOD_7 ( null , VAR_6 ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME e ) NAME e ( BLOCK BLOCK (  return null ; )  return null ; ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK (  return null ; )  return null ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE android.os.Message ) TYPE android.os.Message ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( VAR_1 , this ) )  METHOD_2 ( VAR_1 , this ) ( SWITCH SWITCH ( NAME VAR_2 ) NAME VAR_2 ( CASE VAR_3 ( BLOCK BLOCK (  transitionTo ( VAR_4 ) )  transitionTo ( VAR_4 ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_3 ( CASE VAR_5 ( BLOCK BLOCK (  VAR_21 = VAR_22 )  VAR_21 = VAR_22 (  METHOD_3 ( VAR_1 ) )  METHOD_3 ( VAR_1 ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_5 ( CASE VAR_6 ( BLOCK BLOCK (  VAR_21 = VAR_22 )  VAR_21 = VAR_22 (  METHOD_3 ( VAR_1 ) )  METHOD_3 ( VAR_1 ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_6 ( CASE VAR_7 ( BLOCK BLOCK (  VAR_21 = VAR_22 )  VAR_21 = VAR_22 (  METHOD_3 ( VAR_1 ) )  METHOD_3 ( VAR_1 ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_7 ( CASE VAR_8 ( BLOCK BLOCK (  VAR_21 = VAR_22 )  VAR_21 = VAR_22 (  METHOD_3 ( VAR_1 ) )  METHOD_3 ( VAR_1 ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_8 ( CASE VAR_9 ( BLOCK BLOCK (  VAR_21 = VAR_22 )  VAR_21 = VAR_22 (  METHOD_3 ( VAR_1 ) )  METHOD_3 ( VAR_1 ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_9 ( CASE VAR_10 ( BLOCK BLOCK (  VAR_21 = VAR_22 )  VAR_21 = VAR_22 (  METHOD_3 ( VAR_1 ) )  METHOD_3 ( VAR_1 ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_10 ( CASE VAR_11 ( BLOCK BLOCK (  VAR_21 = VAR_22 )  VAR_21 = VAR_22 (  METHOD_3 ( VAR_1 ) )  METHOD_3 ( VAR_1 ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_11 ( CASE VAR_12 ( BLOCK BLOCK (  VAR_21 = VAR_22 )  VAR_21 = VAR_22 (  METHOD_3 ( VAR_1 ) )  METHOD_3 ( VAR_1 ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_12 ( CASE VAR_13 ( BLOCK BLOCK (  VAR_21 = VAR_22 )  VAR_21 = VAR_22 (  METHOD_3 ( VAR_1 ) )  METHOD_3 ( VAR_1 ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_13 ( CASE VAR_14 ( BLOCK BLOCK (  VAR_21 = VAR_22 )  VAR_21 = VAR_22 (  METHOD_3 ( VAR_1 ) )  METHOD_3 ( VAR_1 ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_14 ( CASE VAR_15 ( BLOCK BLOCK (  VAR_21 = VAR_22 )  VAR_21 = VAR_22 (  METHOD_3 ( VAR_1 ) )  METHOD_3 ( VAR_1 ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_15 ( CASE VAR_16 ( BLOCK BLOCK (  VAR_21 = VAR_22 )  VAR_21 = VAR_22 (  METHOD_3 ( VAR_1 ) )  METHOD_3 ( VAR_1 ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_16 ( CASE VAR_17 ( BLOCK BLOCK (  VAR_21 = VAR_22 )  VAR_21 = VAR_22 (  METHOD_3 ( VAR_1 ) )  METHOD_3 ( VAR_1 ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_17 ( CASE VAR_18 ( BLOCK BLOCK (  VAR_21 = VAR_22 )  VAR_21 = VAR_22 (  METHOD_3 ( VAR_1 ) )  METHOD_3 ( VAR_1 ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_18 ( CASE VAR_19 ( BLOCK BLOCK (  VAR_21 = VAR_22 )  VAR_21 = VAR_22 (  METHOD_3 ( VAR_1 ) )  METHOD_3 ( VAR_1 ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_19 ( CASE VAR_20 ( BLOCK BLOCK (  VAR_21 = VAR_22 )  VAR_21 = VAR_22 (  METHOD_3 ( VAR_1 ) )  METHOD_3 ( VAR_1 ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_20 ( DEFAULT DEFAULT ( BLOCK BLOCK (  return VAR_23 ; )  return VAR_23 ; ) BLOCK BLOCK ) DEFAULT DEFAULT ) SWITCH SWITCH (  return VAR_24 ; )  return VAR_24 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_3 ) NAME METHOD_3 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_4 ( METHOD_5 ( ) ) ) INIT = METHOD_4 ( METHOD_5 ( ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_6 ( VAR_2 , STRING_3 ) ) INIT = METHOD_6 ( VAR_2 , STRING_3 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_6 ( VAR_2 , STRING_4 ) ) INIT = METHOD_6 ( VAR_2 , STRING_4 ) ) VAR VAR (  VAR_1 . METHOD_7 ( VAR_3 ) )  VAR_1 . METHOD_7 ( VAR_3 ) (  VAR_1 . METHOD_7 ( VAR_4 ) )  VAR_1 . METHOD_7 ( VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD (  METHOD_2 ( STRING_1 , STRING_2 , new TYPE_1 ( ) { public void METHOD_3 ( java.util.List < TYPE_2 > VAR_1 ) { long VAR_2 = METHOD_4 ( METHOD_5 ( ) ) ; TYPE_2 VAR_3 = METHOD_6 ( VAR_2 , STRING_3 ) ; TYPE_2 VAR_4 = METHOD_6 ( VAR_2 , STRING_4 ) ; VAR_1 . METHOD_7 ( VAR_3 ) ; VAR_1 . METHOD_7 ( VAR_4 ) ; } } ) )  METHOD_2 ( STRING_1 , STRING_2 , new TYPE_1 ( ) { public void METHOD_3 ( java.util.List < TYPE_2 > VAR_1 ) { long VAR_2 = METHOD_4 ( METHOD_5 ( ) ) ; TYPE_2 VAR_3 = METHOD_6 ( VAR_2 , STRING_3 ) ; TYPE_2 VAR_4 = METHOD_6 ( VAR_2 , STRING_4 ) ; VAR_1 . METHOD_7 ( VAR_3 ) ; VAR_1 . METHOD_7 ( VAR_4 ) ; } } ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME toString ) NAME toString ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_1 ( ) ) INIT = METHOD_1 ( ) ) VAR VAR (  return ( ( ( ( ( VAR_1 == 0 ? STRING_1 : ( TYPE_1 . toString ( VAR_1 ) ) + STRING_2 ) + ( TYPE_2 . METHOD_2 ( METHOD_3 ( ) ) ) ) + STRING_2 ) + ( TYPE_2 . METHOD_2 ( METHOD_4 ( ) ) ) ) + STRING_3 ) + ( getName ( ) ) ; )  return ( ( ( ( ( VAR_1 == 0 ? STRING_1 : ( TYPE_1 . toString ( VAR_1 ) ) + STRING_2 ) + ( TYPE_2 . METHOD_2 ( METHOD_3 ( ) ) ) ) + STRING_2 ) + ( TYPE_2 . METHOD_2 ( METHOD_4 ( ) ) ) ) + STRING_3 ) + ( getName ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE android.bluetooth.BluetoothDevice ) TYPE android.bluetooth.BluetoothDevice ( NAME device ) NAME device ) VAR VAR ( VAR VAR ( TYPE byte ) TYPE byte ( NAME error ) NAME error ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  android.util.Log.v ( VAR_1 . TAG , ( ( ( STRING_1 + device ) + STRING_2 ) + error ) ) )  android.util.Log.v ( VAR_1 . TAG , ( ( ( STRING_1 + device ) + STRING_2 ) + error ) ) ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME result ) NAME result ( INIT = false ) INIT = false ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME service ) NAME service ( INIT = VAR_2 ) INIT = VAR_2 ) VAR VAR ( IF IF ( COND service != null ) COND service != null ( THEN THEN ( TRY TRY ( BLOCK BLOCK (  result = service . METHOD_1 ( device , error ) )  result = service . METHOD_1 ( device , error ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME e ) NAME e ( BLOCK BLOCK (  android.util.Log.e ( VAR_1 . TAG , e.toString ( ) ) )  android.util.Log.e ( VAR_1 . TAG , e.toString ( ) ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) THEN THEN ( ELSE ELSE (  android.util.Log.w ( VAR_1 . TAG , STRING_3 ) )  android.util.Log.w ( VAR_1 . TAG , STRING_3 ) ) ELSE ELSE ) IF IF (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME config ) NAME config ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_3> ) TYPE java.util.List<TYPE_3> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( VAR_1 , config ) ) INIT = METHOD_2 ( VAR_1 , config ) ) VAR VAR ( IF IF ( COND VAR_2 == null ) COND VAR_2 == null ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_2 . level ) INIT = VAR_2 . level ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_4 ( VAR_5 , VAR_6 ) ) INIT = new TYPE_4 ( VAR_5 , VAR_6 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_7 ) NAME VAR_7 ( INIT = VAR_8 . METHOD_3 ( new TYPE_6 ( VAR_4 ) ) ) INIT = VAR_8 . METHOD_3 ( new TYPE_6 ( VAR_4 ) ) ) VAR VAR ( IF IF ( COND VAR_7 != null ) COND VAR_7 != null ( THEN THEN (  return METHOD_4 ( VAR_7 . METHOD_5 ( VAR_3 ) , VAR_3 ) ; )  return METHOD_4 ( VAR_7 . METHOD_5 ( VAR_3 ) , VAR_3 ) ; ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE short ) TYPE short ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_3 ) COND VAR_3 ( THEN THEN (  android.util.Log.v ( TYPE_1 . TAG , ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + VAR_2 ) ) )  android.util.Log.v ( TYPE_1 . TAG , ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + VAR_2 ) ) ) THEN THEN ) IF IF ( IF IF ( COND VAR_2 == ( VAR_4 ) ) COND VAR_2 == ( VAR_4 ) ( THEN THEN (  TYPE_2 . METHOD_2 ( ) . METHOD_3 ( VAR_1 ) )  TYPE_2 . METHOD_2 ( ) . METHOD_3 ( VAR_1 ) ) THEN THEN ( ELSE ELSE (  TYPE_2 . METHOD_2 ( ) . METHOD_4 ( VAR_1 , TYPE_1 . METHOD_5 ( VAR_2 ) ) )  TYPE_2 . METHOD_2 ( ) . METHOD_4 ( VAR_1 , TYPE_1 . METHOD_5 ( VAR_2 ) ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public final ) MODIFIER public final ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ) VAR VAR ( VAR VAR ( TYPE char ) TYPE char ( NAME x ) NAME x ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  throw new TYPE_2 ( ) ; )  throw new TYPE_2 ( ) ; ) THEN THEN ) IF IF ( IF IF ( COND ! ( VAR_2 ) ) COND ! ( VAR_2 ) ( THEN THEN (  throw new TYPE_3 ( STRING_1 ) ; )  throw new TYPE_3 ( STRING_1 ) ; ) THEN THEN ) IF IF (  METHOD_1 ( METHOD_2 ( METHOD_3 ( i , VAR_3 ) ) , x ) )  METHOD_1 ( METHOD_2 ( METHOD_3 ( i , VAR_3 ) ) , x ) (  return this ; )  return this ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( VAR_1 ) )  TYPE_1 . METHOD_2 ( VAR_1 ) (  fail ( ) )  fail ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.NullPointerException ) TYPE java.lang.NullPointerException ( NAME expected ) NAME expected ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ( VAR VAR ( TYPE int ) TYPE int ( NAME c ) NAME c ( INIT = TYPE_1 . METHOD_3 ( ) ) INIT = TYPE_1 . METHOD_3 ( ) ) VAR VAR (  TYPE_1 . METHOD_2 ( TYPE_1 . METHOD_4 ( c ) ) )  TYPE_1 . METHOD_2 ( TYPE_1 . METHOD_4 ( c ) ) (  TYPE_1 . METHOD_5 ( c ) )  TYPE_1 . METHOD_5 ( c ) (  TYPE_2 . METHOD_6 ( ) )  TYPE_2 . METHOD_6 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME address ) NAME address ) VAR VAR ( VAR VAR ( TYPE byte ) TYPE byte ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_3 ) COND VAR_3 ( THEN THEN (  android.util.Log.v ( VAR_4 . TAG , ( STRING_1 + VAR_1 ) ) )  android.util.Log.v ( VAR_4 . TAG , ( STRING_1 + VAR_1 ) ) ) THEN THEN ) IF IF ( VAR VAR ( TYPE android.os.Bundle ) TYPE android.os.Bundle ( NAME data ) NAME data ( INIT = new android.os.Bundle ( ) ) INIT = new android.os.Bundle ( ) ) VAR VAR ( VAR VAR ( TYPE android.os.Message ) TYPE android.os.Message ( NAME msg ) NAME msg ( INIT = VAR_5 . METHOD_2 ( VAR_6 ) ) INIT = VAR_5 . METHOD_2 ( VAR_6 ) ) VAR VAR (  data . METHOD_3 ( STRING_2 , address ) )  data . METHOD_3 ( STRING_2 , address ) (  data . METHOD_3 ( STRING_3 , VAR_2 ) )  data . METHOD_3 ( STRING_3 , VAR_2 ) (  data . METHOD_4 ( STRING_4 , VAR_1 ) )  data . METHOD_4 ( STRING_4 , VAR_1 ) (  msg . METHOD_5 ( data ) )  msg . METHOD_5 ( data ) (  VAR_5 . METHOD_6 ( msg ) )  VAR_5 . METHOD_6 ( msg ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME item ) NAME item ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_2 ( METHOD_3 ( ) ) ) INIT = VAR_2 . METHOD_2 ( METHOD_3 ( ) ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME i ) NAME i ( IN VAR_3 . METHOD_4 ( ) ) IN VAR_3 . METHOD_4 ( ) ( BLOCK BLOCK ( IF IF ( COND i == item ) COND i == item ( THEN THEN (  return VAR_3 ; )  return VAR_3 ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME value ) NAME value ( INIT = TYPE_1 . METHOD_2 ( mContext . METHOD_3 ( ) , VAR_1 ) ) INIT = TYPE_1 . METHOD_2 ( mContext . METHOD_3 ( ) , VAR_1 ) ) VAR VAR ( IF IF ( COND value == null ) COND value == null ( THEN THEN ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME d ) NAME d ( INIT = TYPE_2 . get ( mContext . METHOD_4 ( ) . METHOD_5 ( ) . locale ) ) INIT = TYPE_2 . get ( mContext . METHOD_4 ( ) . METHOD_5 ( ) . locale ) ) VAR VAR (  value = VAR_2 )  value = VAR_2 ) THEN THEN ) IF IF (  return ( value . METHOD_6 ( CHAR_1 ) ) > ( value . METHOD_6 ( CHAR_2 ) ) ; )  return ( value . METHOD_6 ( CHAR_1 ) ) > ( value . METHOD_6 ( CHAR_2 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private synchronized ) MODIFIER private synchronized ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME packageName ) NAME packageName ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( packageName ) ) INIT = METHOD_2 ( packageName ) ) VAR VAR ( IF IF ( COND VAR_2 != ( - 1 ) ) COND VAR_2 != ( - 1 ) ( THEN THEN (  VAR_1 = VAR_3 . get ( VAR_2 ) . VAR_4 )  VAR_1 = VAR_3 . get ( VAR_2 ) . VAR_4 ) THEN THEN ) IF IF ( IF IF ( COND VAR_5 ) COND VAR_5 ( THEN THEN (  android.util.Log.d ( VAR_6 . TAG , ( ( ( STRING_2 + packageName ) + STRING_3 ) + VAR_1 ) ) )  android.util.Log.d ( VAR_6 . TAG , ( ( ( STRING_2 + packageName ) + STRING_3 ) + VAR_1 ) ) ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Class<?extendsTYPE_1> ) TYPE java.lang.Class<?extendsTYPE_1> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.StringBuilder ) TYPE java.lang.StringBuilder ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME data ) NAME data ( INIT = TYPE_3 . METHOD_2 ( VAR_1 ) ) INIT = TYPE_3 . METHOD_2 ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_4> ) TYPE java.util.List<TYPE_4> ( NAME VAR_3 ) NAME VAR_3 ( INIT = new java.util.ArrayList ( data . METHOD_3 ( VAR_1 ) ) ) INIT = new java.util.ArrayList ( data . METHOD_3 ( VAR_1 ) ) ) VAR VAR (  TYPE_5 . METHOD_4 ( VAR_3 , VAR_4 ) )  TYPE_5 . METHOD_4 ( VAR_3 , VAR_4 ) ( FOR-EACH FOR-EACH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_5 ) NAME VAR_5 ( IN VAR_3 ) IN VAR_3 ( BLOCK BLOCK (  TYPE_6 . METHOD_1 ( VAR_5 , VAR_2 , VAR_6 , null ) )  TYPE_6 . METHOD_1 ( VAR_5 , VAR_2 , VAR_6 , null ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  android.util.Log.w ( com.android.server.am.ActivityManagerService.TAG , VAR_3 ) )  android.util.Log.w ( com.android.server.am.ActivityManagerService.TAG , VAR_3 ) ( TRY TRY ( BLOCK BLOCK ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN ( VAR VAR ( TYPE android.os.Bundle ) TYPE android.os.Bundle ( NAME VAR_4 ) NAME VAR_4 ( INIT = new android.os.Bundle ( ) ) INIT = new android.os.Bundle ( ) ) VAR VAR (  VAR_4 . METHOD_2 ( VAR_5 , STRING_1 ) )  VAR_4 . METHOD_2 ( VAR_5 , STRING_1 ) (  VAR_4 . METHOD_2 ( STRING_2 , VAR_3 ) )  VAR_4 . METHOD_2 ( STRING_2 , VAR_3 ) (  VAR_1 . METHOD_3 ( VAR_2 , ( - 1 ) , VAR_4 ) )  VAR_1 . METHOD_3 ( VAR_2 , ( - 1 ) , VAR_4 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME e ) NAME e ( BLOCK BLOCK (  android.util.Log.w ( com.android.server.am.ActivityManagerService.TAG , e ) )  android.util.Log.w ( com.android.server.am.ActivityManagerService.TAG , e ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_2 ) != null ) COND ( VAR_2 ) != null ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( IN VAR_3 . METHOD_2 ( ) ) IN VAR_3 . METHOD_2 ( ) ( BLOCK BLOCK ( IF IF ( COND VAR_1 . equals ( VAR_4 . METHOD_3 ( ) ) ) COND VAR_1 . equals ( VAR_4 . METHOD_3 ( ) ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME telephony ) NAME telephony ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( IF IF ( COND telephony != null ) COND telephony != null ( THEN THEN (  telephony . METHOD_1 ( VAR_1 , VAR_2 ) )  telephony . METHOD_1 ( VAR_1 , VAR_2 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME e ) NAME e ( BLOCK BLOCK (  android.util.Log.e ( VAR_3 . TAG , STRING_1 , e ) )  android.util.Log.e ( VAR_3 . TAG , STRING_1 , e ) ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME e ) NAME e ( BLOCK BLOCK (  android.util.Log.e ( VAR_3 . TAG , STRING_2 , e ) )  android.util.Log.e ( VAR_3 . TAG , STRING_2 , e ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( ( - 5 ) , ( STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ) , STRING_5 ) )  TYPE_1 . METHOD_2 ( ( - 5 ) , ( STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ) , STRING_5 ) (  TYPE_1 . METHOD_2 ( ( - 4 ) , ( STRING_1 + ( STRING_6 + STRING_7 ) ) , STRING_5 ) )  TYPE_1 . METHOD_2 ( ( - 4 ) , ( STRING_1 + ( STRING_6 + STRING_7 ) ) , STRING_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME t ) NAME t ( INIT = ( ( VAR_1 ) - 1 ) & ( ( VAR_2 . length ) - 1 ) ) INIT = ( ( VAR_1 ) - 1 ) & ( ( VAR_2 . length ) - 1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ( INIT = VAR_2 [ t ] ) INIT = VAR_2 [ t ] ) VAR VAR ( IF IF ( COND result == null ) COND result == null ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF (  VAR_2 [ t ] = null )  VAR_2 [ t ] = null (  VAR_1 = t )  VAR_1 = t (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME error ) NAME error ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.Throwable ) TYPE java.lang.Throwable ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_1 ( VAR_1 , VAR_2 ) ) INIT = METHOD_1 ( VAR_1 , VAR_2 ) ) VAR VAR (  TYPE_1 . log ( VAR_3 , STRING_1 , VAR_5 , VAR_4 ) )  TYPE_1 . log ( VAR_3 , STRING_1 , VAR_5 , VAR_4 ) ( IF IF ( COND VAR_3 != null ) COND VAR_3 != null ( THEN THEN (  VAR_6 = true )  VAR_6 = true ) THEN THEN ) IF IF (  METHOD_2 ( VAR_4 ) )  METHOD_2 ( VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 && ( VAR_4 == 0 ) ) COND VAR_1 && ( VAR_4 == 0 ) ( THEN THEN (  return - 1 ; )  return - 1 ; ) THEN THEN ) IF IF ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN (  VAR_2 . METHOD_2 ( VAR_4 ) )  VAR_2 . METHOD_2 ( VAR_4 ) (  VAR_2 . METHOD_3 ( VAR_3 . METHOD_4 ( ) ) )  VAR_2 . METHOD_3 ( VAR_3 . METHOD_4 ( ) ) ( IF IF ( COND ! ( VAR_3 . METHOD_5 ( ) . equals ( VAR_2 . METHOD_5 ( ) ) ) ) COND ! ( VAR_3 . METHOD_5 ( ) . equals ( VAR_2 . METHOD_5 ( ) ) ) ( THEN THEN (  VAR_2 . METHOD_6 ( VAR_3 . METHOD_5 ( ) ) )  VAR_2 . METHOD_6 ( VAR_3 . METHOD_5 ( ) ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return VAR_4 ; )  return VAR_4 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = - 1 ) INIT = - 1 ) VAR VAR ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN ( TRY TRY ( BLOCK BLOCK (  VAR_2 = java.lang.Integer.parseInt ( VAR_1 ) )  VAR_2 = java.lang.Integer.parseInt ( VAR_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_2 ( ) ; )  throw new TYPE_2 ( ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) THEN THEN ) IF IF (  return new TYPE_1 ( VAR_2 , ( - 1 ) , ( - 1 ) ) ; )  return new TYPE_1 ( VAR_2 , ( - 1 ) , ( - 1 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME context ) NAME context ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Set<java.lang.String> ) TYPE java.util.Set<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 < java.lang.String > ( VAR_2 . METHOD_2 ( ) ) ) INIT = new TYPE_2 < java.lang.String > ( VAR_2 . METHOD_2 ( ) ) ) VAR VAR (  VAR_2 . METHOD_3 ( ) )  VAR_2 . METHOD_3 ( ) ( IF IF ( COND ! ( METHOD_4 ( context ) ) ) COND ! ( METHOD_4 ( context ) ) ( THEN THEN (  context . METHOD_5 ( ) )  context . METHOD_5 ( ) (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE java.util.Set<java.lang.String> ) TYPE java.util.Set<java.lang.String> ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_2 . METHOD_2 ( ) ) INIT = VAR_2 . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND ( VAR_1 . equals ( VAR_3 ) ) == false ) COND ( VAR_1 . equals ( VAR_3 ) ) == false ( THEN THEN (  METHOD_6 ( context ) )  METHOD_6 ( context ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE float ) TYPE float ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE float ) TYPE float ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( VAR_1 ) )  METHOD_2 ( VAR_1 ) ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_5 ) NAME VAR_5 ( INIT = ( VAR_4 != null ) ? METHOD_3 ( VAR_1 , VAR_4 ) : VAR_6 ) INIT = ( VAR_4 != null ) ? METHOD_3 ( VAR_1 , VAR_4 ) : VAR_6 ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_7 ) NAME VAR_7 ( INIT = ( VAR_4 == null ) ? 0 : VAR_8 ) INIT = ( VAR_4 == null ) ? 0 : VAR_8 ) VAR VAR (  TYPE_3 . METHOD_4 ( VAR_9 , VAR_10 , VAR_11 , VAR_2 , VAR_3 , VAR_7 ) )  TYPE_3 . METHOD_4 ( VAR_9 , VAR_10 , VAR_11 , VAR_2 , VAR_3 , VAR_7 ) ) BLOCK BLOCK ( FINALLY FINALLY ( IF IF ( COND VAR_5 != ( VAR_6 ) ) COND VAR_5 != ( VAR_6 ) ( THEN THEN (  TYPE_3 . METHOD_5 ( VAR_9 , VAR_5 ) )  TYPE_3 . METHOD_5 ( VAR_9 , VAR_5 ) ) THEN THEN ) IF IF ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_4 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) INIT = TYPE_4 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_4 . METHOD_4 ( VAR_1 ) ) INIT = TYPE_4 . METHOD_4 ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_5 ( new TYPE_6 ( VAR_1 . METHOD_5 ( ) ) , new TYPE_6 ( VAR_3 ) ) ) INIT = new TYPE_5 ( new TYPE_6 ( VAR_1 . METHOD_5 ( ) ) , new TYPE_6 ( VAR_3 ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_5 ) NAME VAR_5 ( INIT = new TYPE_1 ( VAR_2 , VAR_4 ) ) INIT = new TYPE_1 ( VAR_2 , VAR_4 ) ) VAR VAR (  return VAR_5 ; )  return VAR_5 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.android.jack.ir.ast.JMethod ) TYPE com.android.jack.ir.ast.JMethod ( NAME method ) NAME method ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( method . METHOD_2 ( ) ) ? 0 : TYPE_1 . METHOD_3 ( ) ) INIT = ( method . METHOD_2 ( ) ) ? 0 : TYPE_1 . METHOD_3 ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( IN method . METHOD_4 ( ) ) IN method . METHOD_4 ( ) ( BLOCK BLOCK ( IF IF ( COND ( VAR_2 . METHOD_5 ( VAR_3 class ) ) != null ) COND ( VAR_2 . METHOD_5 ( VAR_3 class ) ) != null ( THEN THEN (  continue ; )  continue ; ) THEN THEN ) IF IF (  VAR_1 += TYPE_3 . METHOD_6 ( VAR_2 . METHOD_7 ( ) , ( ( VAR_2 . METHOD_5 ( VAR_4 class ) ) != null ) ) . METHOD_3 ( ) )  VAR_1 += TYPE_3 . METHOD_6 ( VAR_2 . METHOD_7 ( ) , ( ( VAR_2 . METHOD_5 ( VAR_4 class ) ) != null ) ) . METHOD_3 ( ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME id ) NAME id ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = id . getName ( ) ) INIT = id . getName ( ) ) VAR VAR ( IF IF ( COND VAR_1 . METHOD_2 ( ) ) COND VAR_1 . METHOD_2 ( ) ( THEN THEN ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_3 ) ( VAR_1 ) ) ) INIT = ( ( TYPE_3 ) ( VAR_1 ) ) ) VAR VAR ( IF IF ( COND VAR_2 . getName ( ) . METHOD_3 ( ) . equals ( VAR_3 ) ) COND VAR_2 . getName ( ) . METHOD_3 ( ) . equals ( VAR_3 ) ( THEN THEN (  this . VAR_4 . METHOD_4 ( VAR_2 . METHOD_5 ( ) , VAR_5 , null ) )  this . VAR_4 . METHOD_4 ( VAR_2 . METHOD_5 ( ) , VAR_5 , null ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME request ) NAME request ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = request . METHOD_2 ( STRING_1 ) ) INIT = request . METHOD_2 ( STRING_1 ) ) VAR VAR (  VAR_1 . METHOD_3 ( new TYPE_1 ( VAR_3 , VAR_2 . METHOD_4 ( ) , ( STRING_2 + VAR_2 ) ) ) )  VAR_1 . METHOD_3 ( new TYPE_1 ( VAR_3 , VAR_2 . METHOD_4 ( ) , ( STRING_2 + VAR_2 ) ) ) (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public final ) MODIFIER public final ( RETURN boolean ) RETURN boolean ( NAME equals ) NAME equals ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 == null ) || ( ( METHOD_1 ( ) ) != ( VAR_1 . METHOD_1 ( ) ) ) ) COND ( VAR_1 == null ) || ( ( METHOD_1 ( ) ) != ( VAR_1 . METHOD_1 ( ) ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_1 ) ( VAR_1 ) ) ) INIT = ( ( TYPE_1 ) ( VAR_1 ) ) ) VAR VAR (  return ( VAR_3 . equals ( VAR_4 ) ) && ( VAR_5 . equals ( VAR_6 ) ) ; )  return ( VAR_3 . equals ( VAR_4 ) ) && ( VAR_5 . equals ( VAR_6 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME start ) NAME start ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( start < 0 ) || ( start > ( input . length ( ) ) ) ) COND ( start < 0 ) || ( start > ( input . length ( ) ) ) ( THEN THEN (  throw new TYPE_1 ( ( ( ( STRING_1 + start ) + STRING_2 ) + ( input . length ( ) ) ) ) ; )  throw new TYPE_1 ( ( ( ( STRING_1 + start ) + STRING_2 ) + ( input . length ( ) ) ) ) ; ) THEN THEN ) IF IF ( SYNCHRONIZED SYNCHRONIZED (  this )  this ( BLOCK BLOCK (  VAR_1 = TYPE_2 . METHOD_2 ( address , input , start , VAR_2 ) )  VAR_1 = TYPE_2 . METHOD_2 ( address , input , start , VAR_2 ) ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME number ) NAME number ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( number . METHOD_3 ( ) ) ) INIT = METHOD_2 ( number . METHOD_3 ( ) ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_4 ( number ) ) INIT = TYPE_2 . METHOD_4 ( number ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_4 . METHOD_5 ( VAR_3 ) ) INIT = TYPE_4 . METHOD_5 ( VAR_3 ) ) VAR VAR ( IF IF ( COND VAR_5 . METHOD_6 ( VAR_2 , VAR_4 . METHOD_7 ( ) ) ) COND VAR_5 . METHOD_6 ( VAR_2 , VAR_4 . METHOD_7 ( ) ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( in ) == null ) COND ( in ) == null ( THEN THEN (  return - 1 ; )  return - 1 ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE int ) TYPE int ( NAME c ) NAME c ( INIT = in . METHOD_1 ( ) ) INIT = in . METHOD_1 ( ) ) VAR VAR ( IF IF ( COND c == ( - 1 ) ) COND c == ( - 1 ) ( THEN THEN (  METHOD_2 ( ) )  METHOD_2 ( ) (  return METHOD_1 ( ) ; )  return METHOD_1 ( ) ; ) THEN THEN ) IF IF (  return c ; )  return c ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . size ( ) ) INIT = VAR_2 . size ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( null , new java.lang.Object ( ) ) )  TYPE_1 . METHOD_2 ( null , new java.lang.Object ( ) ) (  fail ( STRING_1 ) )  fail ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.NullPointerException ) TYPE java.lang.NullPointerException ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND VAR_3 < VAR_1 ) COND VAR_3 < VAR_1 ( UPDATE UPDATE (  VAR_3 ++ )  VAR_3 ++ ) UPDATE UPDATE ( BLOCK BLOCK (  assertTrue ( STRING_2 , ( ( VAR_2 . get ( TYPE_1 . METHOD_2 ( VAR_2 , VAR_2 . get ( VAR_3 ) ) ) ) == ( VAR_2 . get ( VAR_3 ) ) ) ) )  assertTrue ( STRING_2 , ( ( VAR_2 . get ( TYPE_1 . METHOD_2 ( VAR_2 , VAR_2 . get ( VAR_3 ) ) ) ) == ( VAR_2 . get ( VAR_3 ) ) ) ) ) BLOCK BLOCK ) FOR FOR ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_3 . METHOD_2 ( ) ) INIT = TYPE_3 . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND VAR_1 instanceof TYPE_4 ) COND VAR_1 instanceof TYPE_4 ( THEN THEN (  METHOD_3 ( VAR_1 , VAR_2 . METHOD_4 ( VAR_3 ) , VAR_4 , VAR_5 ) )  METHOD_3 ( VAR_1 , VAR_2 . METHOD_4 ( VAR_3 ) , VAR_4 , VAR_5 ) ) THEN THEN ) IF IF ( IF IF ( COND VAR_1 instanceof TYPE_5 ) COND VAR_1 instanceof TYPE_5 ( THEN THEN (  METHOD_3 ( VAR_1 , VAR_2 . METHOD_4 ( VAR_6 ) , VAR_7 , VAR_8 ) )  METHOD_3 ( VAR_1 , VAR_2 . METHOD_4 ( VAR_6 ) , VAR_7 , VAR_8 ) ) THEN THEN ) IF IF ( IF IF ( COND VAR_1 instanceof TYPE_6 ) COND VAR_1 instanceof TYPE_6 ( THEN THEN (  METHOD_3 ( VAR_1 , VAR_2 . METHOD_4 ( VAR_9 ) , VAR_7 , VAR_8 ) )  METHOD_3 ( VAR_1 , VAR_2 . METHOD_4 ( VAR_9 ) , VAR_7 , VAR_8 ) ) THEN THEN ) IF IF (  return super . METHOD_1 ( VAR_1 ) ; )  return super . METHOD_1 ( VAR_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  METHOD_3 ( true ) )  METHOD_3 ( true ) (  TYPE_1 . when ( VAR_1 . METHOD_4 ( org.mockito.Matchers . METHOD_5 ( VAR_2 class ) ) ) . thenReturn ( false ) )  TYPE_1 . when ( VAR_1 . METHOD_4 ( org.mockito.Matchers . METHOD_5 ( VAR_2 class ) ) ) . thenReturn ( false ) (  assertFalse ( VAR_3 . METHOD_6 ( new TYPE_2 ( ) , false ) ) )  assertFalse ( VAR_3 . METHOD_6 ( new TYPE_2 ( ) , false ) ) (  org.mockito.Mockito.verify ( VAR_4 , TYPE_1 . METHOD_7 ( 2 ) ) . METHOD_8 ( org.mockito.Matchers . METHOD_9 ( ) ) )  org.mockito.Mockito.verify ( VAR_4 , TYPE_1 . METHOD_7 ( 2 ) ) . METHOD_8 ( org.mockito.Matchers . METHOD_9 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ! ( TYPE_1 . METHOD_2 ( VAR_1 . getName ( ) ) ) ) && ( TYPE_2 . METHOD_3 ( VAR_1 . METHOD_4 ( ) , status , true ) ) ) COND ( ! ( TYPE_1 . METHOD_2 ( VAR_1 . getName ( ) ) ) ) && ( TYPE_2 . METHOD_3 ( VAR_1 . METHOD_4 ( ) , status , true ) ) ( THEN THEN (  return ( ( ! ( status . METHOD_5 ( ) ) ) && ( ! ( status . METHOD_6 ( ) ) ) ) && ( status . METHOD_7 ( ) ) ; )  return ( ( ! ( status . METHOD_5 ( ) ) ) && ( ! ( status . METHOD_6 ( ) ) ) ) && ( status . METHOD_7 ( ) ) ; ) THEN THEN ( ELSE ELSE (  android.util.Log.w ( VAR_2 . TAG , ( STRING_1 + VAR_1 ) ) )  android.util.Log.w ( VAR_2 . TAG , ( STRING_1 + VAR_1 ) ) (  return false ; )  return false ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) == false ) COND ( VAR_1 ) == false ( THEN THEN (  VAR_1 = true )  VAR_1 = true ( TRY TRY ( BLOCK BLOCK (  VAR_2 . METHOD_2 ( ) )  VAR_2 . METHOD_2 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK ( IF IF ( COND VAR_3 ) COND VAR_3 ( THEN THEN (  android.util.Log.d ( TAG , STRING_1 , e ) )  android.util.Log.d ( TAG , STRING_1 , e ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) THEN THEN ) IF IF ( IF IF ( COND ! ( TYPE_1 . METHOD_3 ( ) . equals ( this ) ) ) COND ! ( TYPE_1 . METHOD_3 ( ) . equals ( this ) ) ( THEN THEN ( IF IF ( COND VAR_3 ) COND VAR_3 ( THEN THEN (  android.util.Log.d ( TAG , STRING_2 ) )  android.util.Log.d ( TAG , STRING_2 ) ) THEN THEN ) IF IF (  METHOD_4 ( ) )  METHOD_4 ( ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_3 ) COND VAR_3 ( THEN THEN (  log ( ( STRING_1 + ( VAR_2 . METHOD_2 ( ) ) ) ) )  log ( ( STRING_1 + ( VAR_2 . METHOD_2 ( ) ) ) ) ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_1 . METHOD_3 ( ) ) && ( ! ( VAR_2 . METHOD_2 ( ) . equals ( VAR_4 ) ) ) ) COND ( VAR_1 . METHOD_3 ( ) ) && ( ! ( VAR_2 . METHOD_2 ( ) . equals ( VAR_4 ) ) ) ( THEN THEN (  VAR_5 . METHOD_4 ( VAR_2 . METHOD_5 ( ) , VAR_2 . METHOD_2 ( ) ) )  VAR_5 . METHOD_4 ( VAR_2 . METHOD_5 ( ) , VAR_2 . METHOD_2 ( ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME input ) NAME input ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  VAR_1 )  VAR_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_2 ) != null ) COND ( VAR_2 ) != null ( THEN THEN (  VAR_2 . METHOD_2 ( ) )  VAR_2 . METHOD_2 ( ) (  VAR_2 . METHOD_3 ( input ) )  VAR_2 . METHOD_3 ( input ) ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME result ) NAME result ( INIT = VAR_2 . METHOD_4 ( ) ) INIT = VAR_2 . METHOD_4 ( ) ) VAR VAR (  return TYPE_1 . METHOD_5 ( result ) ; )  return TYPE_1 . METHOD_5 ( result ) ; ) THEN THEN ( ELSE ELSE (  return STRING_1 ; )  return STRING_1 ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME index ) NAME index ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND index >= ( VAR_1 . length ) ) COND index >= ( VAR_1 . length ) ( THEN THEN (  TYPE_1 . loge ( STRING_1 ) )  TYPE_1 . loge ( STRING_1 ) (  return - 1 ; )  return - 1 ; ) THEN THEN ) IF IF (  VAR_2 = VAR_1 [ index ] )  VAR_2 = VAR_1 [ index ] (  VAR_3 = new byte [ ( VAR_2 ) & ( VAR_4 ) ] )  VAR_3 = new byte [ ( VAR_2 ) & ( VAR_4 ) ] ( IF IF ( COND VAR_5 ) COND VAR_5 ( THEN THEN (  TYPE_1 . log ( ( STRING_2 + ( VAR_3 . length ) ) ) )  TYPE_1 . log ( ( STRING_2 + ( VAR_3 . length ) ) ) ) THEN THEN ) IF IF (  return index + 1 ; )  return index + 1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) == ( VAR_2 ) ) COND ( VAR_1 ) == ( VAR_2 ) ( THEN THEN ( IF IF ( COND ( VAR_3 ) != null ) COND ( VAR_3 ) != null ( THEN THEN (  VAR_3 . METHOD_1 ( this ) )  VAR_3 . METHOD_1 ( this ) ) THEN THEN ( ELSE ELSE (  TYPE_1 . e ( this , new java.lang.NullPointerException ( ) , STRING_1 , METHOD_2 ( ) ) )  TYPE_1 . e ( this , new java.lang.NullPointerException ( ) , STRING_1 , METHOD_2 ( ) ) ) ELSE ELSE ) IF IF (  TYPE_1 . METHOD_3 ( this , VAR_4 ) )  TYPE_1 . METHOD_3 ( this , VAR_4 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( VAR_2 ) ) INIT = new TYPE_1 ( VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME p ) NAME p ( INIT = new TYPE_2 ( INT_1 , INT_2 ) ) INIT = new TYPE_2 ( INT_1 , INT_2 ) ) VAR VAR (  VAR_1 . METHOD_2 ( null , p , 1 , 2 ) )  VAR_1 . METHOD_2 ( null , p , 1 , 2 ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( ( TYPE_3 ) ( VAR_4 ) ) ) INIT = ( ( TYPE_3 ) ( VAR_4 ) ) ) VAR VAR (  org.junit.Assert.assertEquals ( 1 , VAR_3 . index ) )  org.junit.Assert.assertEquals ( 1 , VAR_3 . index ) (  org.junit.Assert.assertEquals ( 2 , VAR_3 . count ) )  org.junit.Assert.assertEquals ( 2 , VAR_3 . count ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME c ) NAME c ( INIT = TYPE_1 . METHOD_2 ( ) ) INIT = TYPE_1 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME s ) NAME s ( INIT = TYPE_1 . METHOD_3 ( c ) ) INIT = TYPE_1 . METHOD_3 ( c ) ) VAR VAR (  TYPE_1 . METHOD_4 ( s , TYPE_2 . METHOD_5 ( ) ) )  TYPE_1 . METHOD_4 ( s , TYPE_2 . METHOD_5 ( ) ) ( TRY TRY ( BLOCK BLOCK (  TYPE_1 . METHOD_6 ( s ) )  TYPE_1 . METHOD_6 ( s ) (  fail ( ) )  fail ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME expected ) NAME expected ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  TYPE_1 . METHOD_7 ( s , TYPE_2 . METHOD_8 ( ) ) )  TYPE_1 . METHOD_7 ( s , TYPE_2 . METHOD_8 ( ) ) (  TYPE_1 . METHOD_6 ( s ) )  TYPE_1 . METHOD_6 ( s ) (  TYPE_1 . METHOD_9 ( s ) )  TYPE_1 . METHOD_9 ( s ) (  TYPE_1 . METHOD_10 ( c ) )  TYPE_1 . METHOD_10 ( c ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  VAR_2 = VAR_3 . METHOD_1 ( VAR_1 ) )  VAR_2 = VAR_3 . METHOD_1 ( VAR_1 ) (  return ( VAR_2 ) == ( VAR_4 ) ; )  return ( VAR_2 ) == ( VAR_4 ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME e ) NAME e ( BLOCK BLOCK (  android.util.Log.w ( VAR_5 . TAG , STRING_1 , e ) )  android.util.Log.w ( VAR_5 . TAG , STRING_1 , e ) (  return false ; )  return false ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME size ) NAME size ( INIT = VAR_1 . size ( ) ) INIT = VAR_1 . size ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1.List ) TYPE TYPE_1.List ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 . List ( size ) ) INIT = new TYPE_1 . List ( size ) ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < size ) COND i < size ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK (  VAR_2 . set ( i , TYPE_3 . METHOD_2 ( VAR_1 . METHOD_3 ( i ) ) ) )  VAR_2 . set ( i , TYPE_3 . METHOD_2 ( VAR_1 . METHOD_3 ( i ) ) ) ) BLOCK BLOCK ) FOR FOR (  VAR_2 . METHOD_4 ( ) )  VAR_2 . METHOD_4 ( ) (  return new TYPE_1 ( VAR_2 ) ; )  return new TYPE_1 ( VAR_2 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public final ) MODIFIER public final ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  return VAR_2 ; )  return VAR_2 ; ) THEN THEN ( ELSE ELSE ( IF IF ( COND ( VAR_3 ) == null ) COND ( VAR_3 ) == null ( THEN THEN ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_2 ( ) . METHOD_3 ( ) ) INIT = METHOD_2 ( ) . METHOD_3 ( ) ) VAR VAR (  VAR_3 = VAR_2 . METHOD_4 ( VAR_4 ) )  VAR_3 = VAR_2 . METHOD_4 ( VAR_4 ) ) THEN THEN ) IF IF (  return VAR_3 ; )  return VAR_3 ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_1 . METHOD_2 ( VAR_2 ) ) INIT = VAR_1 . METHOD_2 ( VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME size ) NAME size ( INIT = VAR_4 . METHOD_3 ( ) ) INIT = VAR_4 . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_5 ) NAME VAR_5 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME j ) NAME j ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND j < size ) COND j < size ( UPDATE UPDATE (  j ++ )  j ++ ) UPDATE UPDATE ( BLOCK BLOCK (  VAR_5 . METHOD_4 ( METHOD_5 ( VAR_1 , VAR_4 . METHOD_3 ( ) , VAR_3 ) ) )  VAR_5 . METHOD_4 ( METHOD_5 ( VAR_1 , VAR_4 . METHOD_3 ( ) , VAR_3 ) ) ) BLOCK BLOCK ) FOR FOR (  return VAR_5 ; )  return VAR_5 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < VAR_1 ) COND i < VAR_1 ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( TYPE_2 . METHOD_2 ( ) , 0 ) ) INIT = new TYPE_1 ( TYPE_2 . METHOD_2 ( ) , 0 ) ) VAR VAR (  TYPE_3 . METHOD_3 ( VAR_2 , VAR_3 . METHOD_4 ( ) , VAR_4 , new java.lang.String [ 0 ] , INT_1 ) )  TYPE_3 . METHOD_3 ( VAR_2 , VAR_3 . METHOD_4 ( ) , VAR_4 , new java.lang.String [ 0 ] , INT_1 ) ) BLOCK BLOCK ) FOR FOR ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME count ) NAME count ) VAR VAR ( VAR VAR ( TYPE int[] ) TYPE int[] ( NAME d ) NAME d ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( VAR_3 . METHOD_2 ( ) ) * count ) INIT = ( VAR_3 . METHOD_2 ( ) ) * count ) VAR VAR (  METHOD_3 ( VAR_1 , count , ( ( d . length ) * 4 ) , VAR_2 ) )  METHOD_3 ( VAR_1 , count , ( ( d . length ) * 4 ) , VAR_2 ) (  mRS . METHOD_4 ( METHOD_5 ( ) , VAR_1 , VAR_4 , count , d , VAR_2 ) )  mRS . METHOD_4 ( METHOD_5 ( ) , VAR_1 , VAR_4 , count , d , VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE long ) TYPE long ( NAME session ) NAME session ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME c ) NAME c ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME fd ) NAME fd ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME callback ) NAME callback ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_4 . METHOD_2 ( VAR_1 ) ) INIT = TYPE_4 . METHOD_2 ( VAR_1 ) ) VAR VAR (  assertEquals ( STRING_1 , new java.lang.String ( VAR_3 ) ) )  assertEquals ( STRING_1 , new java.lang.String ( VAR_3 ) ) (  super . METHOD_1 ( session , VAR_1 , c , VAR_2 , fd , callback ) )  super . METHOD_1 ( session , VAR_1 , c , VAR_2 , fd , callback ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME context ) NAME context ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( VAR_1 ) != null ) && ( ! ( VAR_2 ) ) ) COND ( ( VAR_1 ) != null ) && ( ! ( VAR_2 ) ) ( THEN THEN ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( ( STRING_1 + STRING_2 ) + ( VAR_4 ) ) + STRING_3 ) INIT = ( ( STRING_1 + STRING_2 ) + ( VAR_4 ) ) + STRING_3 ) VAR VAR (  context . METHOD_2 ( VAR_5 , VAR_1 , VAR_3 , null ) )  context . METHOD_2 ( VAR_5 , VAR_1 , VAR_3 , null ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public synchronized ) MODIFIER public synchronized ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  VAR_1 )  VAR_1 ( BLOCK BLOCK ( IF IF ( COND ( METHOD_2 ( ) ) && ( METHOD_3 ( ) ) ) COND ( METHOD_2 ( ) ) && ( METHOD_3 ( ) ) ( THEN THEN (  android.util.Log . i ( VAR_2 , STRING_1 ) )  android.util.Log . i ( VAR_2 , STRING_1 ) (  VAR_3 . METHOD_4 ( ) )  VAR_3 . METHOD_4 ( ) ) THEN THEN ) IF IF (  VAR_3 . METHOD_5 ( this ) )  VAR_3 . METHOD_5 ( this ) (  VAR_4 = true )  VAR_4 = true ( IF IF ( COND ( VAR_5 ) != null ) COND ( VAR_5 ) != null ( THEN THEN (  VAR_5 . METHOD_6 ( this , 0 ) )  VAR_5 . METHOD_6 ( this , 0 ) ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_6 ) != null ) COND ( VAR_6 ) != null ( THEN THEN (  VAR_6 . METHOD_7 ( this ) )  VAR_6 . METHOD_7 ( this ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<android.bluetooth.BluetoothDevice> ) RETURN java.util.List<android.bluetooth.BluetoothDevice> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int[] ) TYPE int[] ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = - 1 ) INIT = - 1 ) VAR VAR ( VAR VAR ( TYPE android.bluetooth.BluetoothDevice ) TYPE android.bluetooth.BluetoothDevice ( NAME VAR_3 ) NAME VAR_3 ( INIT = null ) INIT = null ) VAR VAR ( SYNCHRONIZED SYNCHRONIZED (  VAR_4 )  VAR_4 ( BLOCK BLOCK (  VAR_2 = METHOD_2 ( ) )  VAR_2 = METHOD_2 ( ) (  VAR_3 = METHOD_3 ( ) )  VAR_3 = METHOD_3 ( ) ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ( VAR VAR ( TYPE java.util.List<android.bluetooth.BluetoothDevice> ) TYPE java.util.List<android.bluetooth.BluetoothDevice> ( NAME VAR_5 ) NAME VAR_5 ( INIT = new java.util.ArrayList < android.bluetooth.BluetoothDevice > ( ) ) INIT = new java.util.ArrayList < android.bluetooth.BluetoothDevice > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE int ) TYPE int ( NAME state ) NAME state ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( IF IF ( COND VAR_2 == state ) COND VAR_2 == state ( THEN THEN ( IF IF ( COND VAR_3 != null ) COND VAR_3 != null ( THEN THEN (  VAR_5 . METHOD_4 ( VAR_3 ) )  VAR_5 . METHOD_4 ( VAR_3 ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_5 ; )  return VAR_5 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.Set<TYPE_1> ) RETURN java.util.Set<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME in ) NAME in ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Set<TYPE_1> ) TYPE java.util.Set<TYPE_1> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_3 < TYPE_1 > ( ) ) INIT = new TYPE_3 < TYPE_1 > ( ) ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = in . METHOD_2 ( 0 ) ) INIT = in . METHOD_2 ( 0 ) ) VAR VAR ) INIT INIT ( COND i >= 0 ) COND i >= 0 ( UPDATE UPDATE (  i = in . METHOD_2 ( ( i + 1 ) ) )  i = in . METHOD_2 ( ( i + 1 ) ) ) UPDATE UPDATE ( BLOCK BLOCK (  VAR_2 . METHOD_3 ( VAR_1 . get ( i ) ) )  VAR_2 . METHOD_3 ( VAR_1 . get ( i ) ) ) BLOCK BLOCK ) FOR FOR (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( 0 ) )  METHOD_2 ( 0 ) (  return ( ( VAR_1 . get ( 0 ) . METHOD_3 ( ) . METHOD_4 ( request . METHOD_5 ( ) ) ) && ( VAR_1 . get ( 0 ) . METHOD_6 ( ) . METHOD_7 ( request . METHOD_5 ( ) ) ) ) && ( VAR_2 . METHOD_8 ( ) ) ; )  return ( ( VAR_1 . get ( 0 ) . METHOD_3 ( ) . METHOD_4 ( request . METHOD_5 ( ) ) ) && ( VAR_1 . get ( 0 ) . METHOD_6 ( ) . METHOD_7 ( request . METHOD_5 ( ) ) ) ) && ( VAR_2 . METHOD_8 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME node ) NAME node ) VAR VAR ( VAR VAR ( TYPE java.lang.Throwable ) TYPE java.lang.Throwable ( NAME e ) NAME e ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_1 ( e ) ) INIT = METHOD_1 ( e ) ) VAR VAR ( IF IF ( COND node != null ) COND node != null ( THEN THEN (  VAR_1 . METHOD_2 ( node . METHOD_3 ( ) . getName ( ) , node . toString ( ) , METHOD_4 ( node ) ) )  VAR_1 . METHOD_2 ( node . METHOD_3 ( ) . getName ( ) , node . toString ( ) , METHOD_4 ( node ) ) ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( VAR_2 ) ) INIT = TYPE_1 . METHOD_2 ( VAR_2 ) ) VAR VAR (  assertEquals ( STRING_1 , VAR_1 . format ( INT_1 ) ) )  assertEquals ( STRING_1 , VAR_1 . format ( INT_1 ) ) (  VAR_1 = TYPE_1 . METHOD_2 ( VAR_3 ) )  VAR_1 = TYPE_1 . METHOD_2 ( VAR_3 ) (  assertEquals ( STRING_2 , VAR_1 . format ( INT_1 ) ) )  assertEquals ( STRING_2 , VAR_1 . format ( INT_1 ) ) (  VAR_1 = TYPE_1 . METHOD_2 ( VAR_4 ) )  VAR_1 = TYPE_1 . METHOD_2 ( VAR_4 ) (  assertEquals ( STRING_3 , VAR_1 . format ( INT_1 ) ) )  assertEquals ( STRING_3 , VAR_1 . format ( INT_1 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER synchronized ) MODIFIER synchronized ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_6 ) NAME VAR_6 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_7 ) NAME VAR_7 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_8 ) NAME VAR_8 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_9 ) NAME VAR_9 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_10 ) NAME VAR_10 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_11 ) NAME VAR_11 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_12 ) NAME VAR_12 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_13 ) NAME VAR_13 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  METHOD_3 ( mContext , VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 , VAR_8 , VAR_9 , VAR_10 , VAR_11 , VAR_12 , VAR_13 ) )  METHOD_3 ( mContext , VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 , VAR_8 , VAR_9 , VAR_10 , VAR_11 , VAR_12 , VAR_13 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_2 . i ( STRING_1 , STRING_2 , VAR_2 . toString ( ) ) )  TYPE_2 . i ( STRING_1 , STRING_2 , VAR_2 . toString ( ) ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( ( TYPE_3 ) ( METHOD_2 ( ) . METHOD_3 ( VAR_4 class ) ) ) ) INIT = ( ( TYPE_3 ) ( METHOD_2 ( ) . METHOD_3 ( VAR_4 class ) ) ) ) VAR VAR (  VAR_3 . METHOD_4 ( VAR_5 ) )  VAR_3 . METHOD_4 ( VAR_5 ) ( IF IF ( COND VAR_3 . METHOD_5 ( ) ) COND VAR_3 . METHOD_5 ( ) ( THEN THEN (  TYPE_2 . i ( STRING_3 , STRING_4 ) )  TYPE_2 . i ( STRING_3 , STRING_4 ) (  VAR_3 . METHOD_6 ( false ) )  VAR_3 . METHOD_6 ( false ) ) THEN THEN ( ELSE ELSE (  TYPE_2 . i ( STRING_3 , STRING_5 ) )  TYPE_2 . i ( STRING_3 , STRING_5 ) (  VAR_3 . METHOD_6 ( true ) )  VAR_3 . METHOD_6 ( true ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 . METHOD_2 ( ) ) COND VAR_1 . METHOD_2 ( ) ( THEN THEN (  throw new TYPE_1 ( STRING_1 , VAR_1 ) ; )  throw new TYPE_1 ( STRING_1 , VAR_1 ) ; ) THEN THEN ) IF IF ( IF IF ( COND VAR_1 . METHOD_3 ( ) ) COND VAR_1 . METHOD_3 ( ) ( THEN THEN ( IF IF ( COND ( VAR_1 . METHOD_4 ( ) ) == false ) COND ( VAR_1 . METHOD_4 ( ) ) == false ( THEN THEN (  throw new TYPE_1 ( STRING_2 , VAR_1 ) ; )  throw new TYPE_1 ( STRING_2 , VAR_1 ) ; ) THEN THEN ) IF IF ) THEN THEN ( ELSE ELSE (  throw new TYPE_2 ( java.lang.String.format ( STRING_3 , VAR_1 ) ) ; )  throw new TYPE_2 ( java.lang.String.format ( STRING_3 , VAR_1 ) ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME args ) NAME args ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ( INIT = false ) INIT = false ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  new TYPE_1 ( ) . run ( args ) )  new TYPE_1 ( ) . run ( args ) (  VAR_1 = true )  VAR_1 = true ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ( BLOCK BLOCK ( IF IF ( COND e instanceof java.lang.IllegalArgumentException ) COND e instanceof java.lang.IllegalArgumentException ( THEN THEN (  TYPE_1 . METHOD_2 ( ) )  TYPE_1 . METHOD_2 ( ) ) THEN THEN ) IF IF (  android.util.Log.e ( TYPE_1 . TAG , STRING_1 , e ) )  android.util.Log.e ( TYPE_1 . TAG , STRING_1 , e ) (  VAR_2 . println ( ( STRING_2 + e ) ) )  VAR_2 . println ( ( STRING_2 + e ) ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  TYPE_2 . METHOD_3 ( ( VAR_1 ? 0 : 1 ) ) )  TYPE_2 . METHOD_3 ( ( VAR_1 ? 0 : 1 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_2 ) RETURN TYPE_2 ( NAME METHOD_2 ) NAME METHOD_2 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME args ) NAME args ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_1 = TYPE_3 . METHOD_3 ( STRING_1 ) )  VAR_1 = TYPE_3 . METHOD_3 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_1 = null )  VAR_1 = null ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ( SYNCHRONIZED SYNCHRONIZED (  VAR_2 )  VAR_2 ( BLOCK BLOCK (  VAR_3 = VAR_1 )  VAR_3 = VAR_1 ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD (  new TYPE_1 < TYPE_2 , TYPE_2 , TYPE_2 > ( ) { public TYPE_2 METHOD_2 ( TYPE_2 ... args ) { TYPE_3 VAR_1 ; try { VAR_1 = TYPE_3 . METHOD_3 ( STRING_1 ) ; } catch ( TYPE_4 e ) { VAR_1 = null ; } synchronized ( VAR_2 ) { VAR_3 = VAR_1 ; } return null ; } } . METHOD_4 ( ) )  new TYPE_1 < TYPE_2 , TYPE_2 , TYPE_2 > ( ) { public TYPE_2 METHOD_2 ( TYPE_2 ... args ) { TYPE_3 VAR_1 ; try { VAR_1 = TYPE_3 . METHOD_3 ( STRING_1 ) ; } catch ( TYPE_4 e ) { VAR_1 = null ; } synchronized ( VAR_2 ) { VAR_3 = VAR_1 ; } return null ; } } . METHOD_4 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  assertEquals ( VAR_2 , VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) . getName ( ) ) )  assertEquals ( VAR_2 , VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) . getName ( ) ) (  METHOD_4 ( VAR_1 ) )  METHOD_4 ( VAR_1 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_1 ( VAR_4 ) ) INIT = new TYPE_1 ( VAR_4 ) ) VAR VAR (  assertEquals ( VAR_2 , VAR_3 . METHOD_2 ( ) . METHOD_3 ( ) . getName ( ) ) )  assertEquals ( VAR_2 , VAR_3 . METHOD_2 ( ) . METHOD_3 ( ) . getName ( ) ) (  METHOD_4 ( VAR_3 ) )  METHOD_4 ( VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME parent ) NAME parent ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND parent == ( VAR_3 . METHOD_2 ( ) ) ) COND parent == ( VAR_3 . METHOD_2 ( ) ) ( THEN THEN ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME n ) NAME n ( INIT = VAR_4 . size ( ) ) INIT = VAR_4 . size ( ) ) VAR VAR ) INIT INIT ( COND i < n ) COND i < n ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_4 . get ( i ) ) INIT = VAR_4 . get ( i ) ) VAR VAR ( IF IF ( COND VAR_5 >= VAR_2 ) COND VAR_5 >= VAR_2 ( THEN THEN (  VAR_4 . set ( i , ( VAR_5 - 1 ) ) )  VAR_4 . set ( i , ( VAR_5 - 1 ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR FOR ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE android.bluetooth.BluetoothDevice ) TYPE android.bluetooth.BluetoothDevice ( NAME device ) NAME device ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( TYPE_1 . METHOD_2 ( VAR_1 ) ) ) COND ! ( TYPE_1 . METHOD_2 ( VAR_1 ) ) ( THEN THEN (  android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) )  android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) (  return VAR_2 ; )  return VAR_2 ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME service ) NAME service ( INIT = METHOD_3 ( ) ) INIT = METHOD_3 ( ) ) VAR VAR ( IF IF ( COND service == null ) COND service == null ( THEN THEN (  return VAR_2 ; )  return VAR_2 ; ) THEN THEN ) IF IF (  return service . METHOD_1 ( device ) ; )  return service . METHOD_1 ( device ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME parent ) NAME parent ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND id == parent ) COND id == parent ( THEN THEN (  TYPE_1 . error ( STRING_1 ) )  TYPE_1 . error ( STRING_1 ) (  return ; )  return ; ) THEN THEN ) IF IF ( TRY TRY ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( ) )  VAR_1 . METHOD_2 ( ) (  TYPE_2 . METHOD_3 ( id ) )  TYPE_2 . METHOD_3 ( id ) (  TYPE_2 . METHOD_4 ( id , VAR_2 , parent ) )  TYPE_2 . METHOD_4 ( id , VAR_2 , parent ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Throwable ) TYPE java.lang.Throwable ( NAME e ) NAME e ( BLOCK BLOCK (  throw TYPE_3 . METHOD_5 ( e ) ; )  throw TYPE_3 . METHOD_5 ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ( FINALLY FINALLY (  VAR_1 . METHOD_6 ( ) )  VAR_1 . METHOD_6 ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME f ) NAME f ( INIT = new java.io.File ( VAR_1 ) ) INIT = new java.io.File ( VAR_1 ) ) VAR VAR ( IF IF ( COND f . METHOD_2 ( ) ) COND f . METHOD_2 ( ) ( THEN THEN (  VAR_2 = true )  VAR_2 = true (  is = METHOD_3 ( f ) )  is = METHOD_3 ( f ) ) THEN THEN ( ELSE ELSE (  is = new TYPE_1 ( new TYPE_2 ( f ) ) )  is = new TYPE_1 ( new TYPE_2 ( f ) ) ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_3 ) NAME VAR_3 ( INIT = f . length ( ) ) INIT = f . length ( ) ) VAR VAR (  length = ( VAR_3 <= ( VAR_4 ) ) ? ( ( int ) ( VAR_3 ) ) : VAR_4 )  length = ( VAR_3 <= ( VAR_4 ) ) ? ( ( int ) ( VAR_3 ) ) : VAR_4 ) ELSE ELSE ) IF IF (  VAR_5 = true )  VAR_5 = true ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  mRS . METHOD_2 ( ) )  mRS . METHOD_2 ( ) ( IF IF ( COND ( VAR_2 < 0 ) || ( VAR_2 >= ( VAR_3 ) ) ) COND ( VAR_2 < 0 ) || ( VAR_2 >= ( VAR_3 ) ) ( THEN THEN (  throw new java.lang.IllegalArgumentException ( STRING_1 ) ; )  throw new java.lang.IllegalArgumentException ( STRING_1 ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE int ) TYPE int ( NAME id ) NAME id ( INIT = ( VAR_1 != null ) ? VAR_1 . METHOD_3 ( mRS ) : 0 ) INIT = ( VAR_1 != null ) ? VAR_1 . METHOD_3 ( mRS ) : 0 ) VAR VAR (  mRS . METHOD_4 ( METHOD_3 ( mRS ) , VAR_2 , id ) )  mRS . METHOD_4 ( METHOD_3 ( mRS ) , VAR_2 , id ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_2 . println ( STRING_1 ) )  VAR_2 . println ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( BLOCK BLOCK (  java.lang.System.out.println ( STRING_2 ) )  java.lang.System.out.println ( STRING_2 ) ( IF IF ( COND VAR_4 ) COND VAR_4 ( THEN THEN (  java.lang.System.out.println ( ( STRING_3 + VAR_3 ) ) )  java.lang.System.out.println ( ( STRING_3 + VAR_3 ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME ex ) NAME ex ( BLOCK BLOCK (  VAR_2 . println ( STRING_4 ) )  VAR_2 . println ( STRING_4 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  mRS = TYPE_1 . METHOD_2 ( this ) )  mRS = TYPE_1 . METHOD_2 ( this ) (  VAR_1 = android.renderscript.Allocation . METHOD_3 ( mRS , VAR_2 , VAR_3 , VAR_4 ) )  VAR_1 = android.renderscript.Allocation . METHOD_3 ( mRS , VAR_2 , VAR_3 , VAR_4 ) (  VAR_5 = android.renderscript.Allocation . METHOD_3 ( mRS , VAR_6 , VAR_3 , VAR_4 ) )  VAR_5 = android.renderscript.Allocation . METHOD_3 ( mRS , VAR_6 , VAR_3 , VAR_4 ) (  VAR_7 = new TYPE_2 ( mRS , METHOD_4 ( ) , VAR_8 ) )  VAR_7 = new TYPE_2 ( mRS , METHOD_4 ( ) , VAR_8 ) (  VAR_7 . METHOD_5 ( VAR_1 , VAR_5 ) )  VAR_7 . METHOD_5 ( VAR_1 , VAR_5 ) (  VAR_5 . METHOD_6 ( VAR_6 ) )  VAR_5 . METHOD_6 ( VAR_6 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN double ) RETURN double ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_6 ) NAME VAR_6 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_7 ) NAME VAR_7 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_8 ) NAME VAR_8 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE double ) TYPE double ( NAME VAR_9 ) NAME VAR_9 ( INIT = 0 ) INIT = 0 ) VAR VAR ( IF IF ( COND ! ( VAR_4 . equals ( VAR_8 ) ) ) COND ! ( VAR_4 . equals ( VAR_8 ) ) ( THEN THEN (  VAR_9 = METHOD_2 ( VAR_2 , VAR_6 ) )  VAR_9 = METHOD_2 ( VAR_2 , VAR_6 ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND ! ( VAR_3 . equals ( VAR_7 ) ) ) COND ! ( VAR_3 . equals ( VAR_7 ) ) ( THEN THEN (  VAR_9 += FLOAT_1 )  VAR_9 += FLOAT_1 ) THEN THEN ( ELSE ELSE ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF (  return VAR_9 ; )  return VAR_9 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.String> ) TYPE java.util.Map<java.lang.String,java.lang.String> ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( RESOURCES RESOURCES ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_1 . METHOD_2 ( ( ( STRING_1 + VAR_2 ) + STRING_2 ) , null ) ) INIT = VAR_1 . METHOD_2 ( ( ( STRING_1 + VAR_2 ) + STRING_2 ) , null ) ) VAR VAR ) RESOURCES RESOURCES ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_5 ) NAME VAR_5 ( IN VAR_4 . METHOD_3 ( ) ) IN VAR_4 . METHOD_3 ( ) ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_3 . METHOD_4 ( VAR_5 ) ) ) COND ! ( VAR_3 . METHOD_4 ( VAR_5 ) ) ( THEN THEN (  VAR_3 . METHOD_5 ( VAR_5 , ( ( VAR_2 + CHAR_1 ) + VAR_5 ) ) )  VAR_3 . METHOD_5 ( VAR_5 , ( ( VAR_2 + CHAR_1 ) + VAR_5 ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME field ) NAME field ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( ( field == ( VAR_1 ) ) || ( field == ( VAR_2 ) ) ) || ( field == ( VAR_3 ) ) ) || ( field == ( VAR_4 ) ) ) COND ( ( ( field == ( VAR_1 ) ) || ( field == ( VAR_2 ) ) ) || ( field == ( VAR_3 ) ) ) || ( field == ( VAR_4 ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  return VAR_5 super . METHOD_1 ( field ) ; )  return VAR_5 super . METHOD_1 ( field ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.android.jack.ir.ast.JDefinedClassOrInterface ) TYPE com.android.jack.ir.ast.JDefinedClassOrInterface ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_3 . METHOD_2 ( ) ) ) COND ! ( VAR_3 . METHOD_2 ( ) ) ( THEN THEN ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME session ) NAME session ( INIT = TYPE_3 . METHOD_3 ( ) ) INIT = TYPE_3 . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_4 ( VAR_2 . METHOD_3 ( ) , VAR_5 ) ) INIT = new TYPE_4 ( VAR_2 . METHOD_3 ( ) , VAR_5 ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_6 ) NAME VAR_6 ( IN VAR_3 ) IN VAR_3 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME VAR_7 ) NAME VAR_7 ( INIT = VAR_6 . METHOD_4 ( VAR_4 ) ) INIT = VAR_6 . METHOD_4 ( VAR_4 ) ) VAR VAR (  VAR_1 . METHOD_5 ( VAR_7 ) )  VAR_1 . METHOD_5 ( VAR_7 ) (  VAR_7 . METHOD_6 ( VAR_1 ) )  VAR_7 . METHOD_6 ( VAR_1 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME key ) NAME key ) VAR VAR ( VAR VAR ( TYPE char[] ) TYPE char[] ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_2[] ) TYPE TYPE_2[] ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_2 != null ) && ( ( VAR_2 . length ) > 0 ) ) COND ( VAR_2 != null ) && ( ( VAR_2 . length ) > 0 ) ( THEN THEN (  throw new TYPE_3 ( STRING_1 ) ; )  throw new TYPE_3 ( STRING_1 ) ; ) THEN THEN ) IF IF ( IF IF ( COND key instanceof TYPE_4 ) COND key instanceof TYPE_4 ( THEN THEN (  METHOD_2 ( VAR_1 , ( ( TYPE_4 ) ( key ) ) , VAR_3 ) )  METHOD_2 ( VAR_1 , ( ( TYPE_4 ) ( key ) ) , VAR_3 ) ) THEN THEN ( ELSE ELSE (  throw new TYPE_3 ( STRING_2 ) ; )  throw new TYPE_3 ( STRING_2 ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE short ) TYPE short ( NAME type ) NAME type ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_6 ) NAME VAR_6 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_7 ) NAME VAR_7 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_8 ) NAME VAR_8 ( INIT = TYPE_1 . METHOD_2 ( VAR_2 , VAR_3 , VAR_4 ) ) INIT = TYPE_1 . METHOD_2 ( VAR_2 , VAR_3 , VAR_4 ) ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_9 ) NAME VAR_9 ( INIT = VAR_10 . METHOD_3 ( VAR_1 , type , VAR_5 , VAR_6 , VAR_7 ) ) INIT = VAR_10 . METHOD_3 ( VAR_1 , type , VAR_5 , VAR_6 , VAR_7 ) ) VAR VAR ( IF IF ( COND ! ( TYPE_1 . METHOD_4 ( VAR_8 , VAR_9 ) ) ) COND ! ( TYPE_1 . METHOD_4 ( VAR_8 , VAR_9 ) ) ( THEN THEN (  throw new TYPE_2 ( VAR_11 ) ; )  throw new TYPE_2 ( VAR_11 ) ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_2 . d ( this , STRING_1 , VAR_1 ) )  TYPE_2 . d ( this , STRING_1 , VAR_1 ) (  VAR_1 . METHOD_2 ( VAR_2 ) )  VAR_1 . METHOD_2 ( VAR_2 ) ( SYNCHRONIZED SYNCHRONIZED (  VAR_3 )  VAR_3 ( BLOCK BLOCK (  VAR_4 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) )  VAR_4 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED (  VAR_5 . METHOD_5 ( VAR_1 ) )  VAR_5 . METHOD_5 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE float ) TYPE float ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE float ) TYPE float ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE float ) TYPE float ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME d ) NAME d ( INIT = VAR_5 . METHOD_2 ( VAR_1 ) ) INIT = VAR_5 . METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND d == null ) COND d == null ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  d . METHOD_3 ( TYPE_1 . METHOD_4 ( VAR_2 , VAR_3 , VAR_4 ) ) )  d . METHOD_3 ( TYPE_1 . METHOD_4 ( VAR_2 , VAR_3 , VAR_4 ) ) (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR (  METHOD_3 ( VAR_2 . METHOD_4 ( VAR_3 ) ) )  METHOD_3 ( VAR_2 . METHOD_4 ( VAR_3 ) ) ( IF IF ( COND ( ( VAR_4 ) != null ) && ( ! ( VAR_2 . METHOD_4 ( VAR_5 ) ) ) ) COND ( ( VAR_4 ) != null ) && ( ! ( VAR_2 . METHOD_4 ( VAR_5 ) ) ) ( THEN THEN (  METHOD_5 ( null ) )  METHOD_5 ( null ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME pkg ) NAME pkg ( INIT = super . METHOD_1 ( ) ) INIT = super . METHOD_1 ( ) ) VAR VAR ( IF IF ( COND pkg == null ) COND pkg == null ( THEN THEN ( TRY TRY ( BLOCK BLOCK (  pkg = TYPE_2 . METHOD_2 ( null , METHOD_3 ( ) , 0 , null , 0 , null , null , null , TYPE_3 . METHOD_4 ( ) , TYPE_4 . METHOD_5 ( ) , METHOD_6 ( ) . METHOD_7 ( ) ) )  pkg = TYPE_2 . METHOD_2 ( null , METHOD_3 ( ) , 0 , null , 0 , null , null , null , TYPE_3 . METHOD_4 ( ) , TYPE_4 . METHOD_5 ( ) , METHOD_6 ( ) . METHOD_7 ( ) ) (  METHOD_8 ( pkg ) )  METHOD_8 ( pkg ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ( BLOCK BLOCK (  METHOD_9 ( STRING_1 , e.toString ( ) ) )  METHOD_9 ( STRING_1 , e.toString ( ) ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) THEN THEN ) IF IF (  return pkg ; )  return pkg ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  this )  this ( BLOCK BLOCK ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME node ) NAME node ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  node = METHOD_2 ( ) )  node = METHOD_2 ( ) (  node . METHOD_3 ( VAR_1 ) )  node . METHOD_3 ( VAR_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_4 ( METHOD_4 ( VAR_1 ) , e ) ; )  throw new TYPE_4 ( METHOD_4 ( VAR_1 ) , e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  VAR_2 = true )  VAR_2 = true ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED (  VAR_1 . METHOD_5 ( ) )  VAR_1 . METHOD_5 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( STRING_1 , STRING_2 ) )  METHOD_2 ( STRING_1 , STRING_2 ) ( IF IF ( COND ( VAR_1 ) != null ) COND ( VAR_1 ) != null ( THEN THEN (  METHOD_2 ( STRING_3 , VAR_1 ) )  METHOD_2 ( STRING_3 , VAR_1 ) ) THEN THEN ) IF IF ( IF IF ( COND ! ( VAR_2 . METHOD_3 ( ) ) ) COND ! ( VAR_2 . METHOD_3 ( ) ) ( THEN THEN (  METHOD_2 ( STRING_4 , VAR_2 . toString ( ) ) )  METHOD_2 ( STRING_4 , VAR_2 . toString ( ) ) ) THEN THEN ) IF IF ( IF IF ( COND ! ( VAR_3 . METHOD_3 ( ) ) ) COND ! ( VAR_3 . METHOD_3 ( ) ) ( THEN THEN (  METHOD_2 ( STRING_5 , VAR_3 . toString ( ) ) )  METHOD_2 ( STRING_5 , VAR_3 . toString ( ) ) ) THEN THEN ) IF IF (  METHOD_4 ( FLOAT_1 ) )  METHOD_4 ( FLOAT_1 ) ( VAR VAR ( TYPE TYPE_1.f ) TYPE TYPE_1.f ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1[] ) TYPE TYPE_1[] ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) ) INIT = TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME device ) NAME device ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ( INIT = device . METHOD_4 ( ) ) INIT = device . METHOD_4 ( ) ) VAR VAR ( IF IF ( COND name == null ) COND name == null ( THEN THEN (  name = device . METHOD_5 ( ) )  name = device . METHOD_5 ( ) ) THEN THEN ) IF IF ( IF IF ( COND name . equals ( VAR_1 ) ) COND name . equals ( VAR_1 ) ( THEN THEN (  return device ; )  return device ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( VAR_4 ) + 1 ) INIT = ( VAR_4 ) + 1 ) VAR VAR ) INIT INIT ( COND VAR_3 <= VAR_1 ) COND VAR_3 <= VAR_1 ( UPDATE UPDATE (  VAR_3 ++ )  VAR_3 ++ ) UPDATE UPDATE ( BLOCK BLOCK (  ( ( TYPE_1 < ? > . VAR_5 ) ( VAR_2 . get ( VAR_3 ) ) ) . METHOD_2 ( VAR_2 . get ( ( VAR_3 - 1 ) ) . METHOD_3 ( ) ) )  ( ( TYPE_1 < ? > . VAR_5 ) ( VAR_2 . get ( VAR_3 ) ) ) . METHOD_2 ( VAR_2 . get ( ( VAR_3 - 1 ) ) . METHOD_3 ( ) ) ) BLOCK BLOCK ) FOR FOR (  VAR_4 = VAR_1 )  VAR_4 = VAR_1 ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME args ) NAME args ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( args [ 1 ] ) )  TYPE_1 . METHOD_2 ( args [ 1 ] ) (  java.lang.System.out.println ( STRING_1 ) )  java.lang.System.out.println ( STRING_1 ) ( IF IF ( COND Main . METHOD_3 ( ) ) COND Main . METHOD_3 ( ) ( THEN THEN (  java.lang.System.out.println ( STRING_2 ) )  java.lang.System.out.println ( STRING_2 ) ) THEN THEN ) IF IF (  Main . set ( 0 ) )  Main . set ( 0 ) (  Main . set ( 1 ) )  Main . set ( 1 ) (  Main . set ( 2 ) )  Main . set ( 2 ) (  Main . set ( 4 ) )  Main . set ( 4 ) (  Main . set ( 8 ) )  Main . set ( 8 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( VAR_2 , VAR_3 ) ) INIT = new TYPE_1 ( VAR_2 , VAR_3 ) ) VAR VAR (  VAR_1 . METHOD_2 ( false ) )  VAR_1 . METHOD_2 ( false ) (  VAR_1 . METHOD_3 ( true ) )  VAR_1 . METHOD_3 ( true ) (  VAR_1 . METHOD_4 ( false ) )  VAR_1 . METHOD_4 ( false ) (  VAR_1 . METHOD_5 ( true ) )  VAR_1 . METHOD_5 ( true ) (  VAR_1 . METHOD_6 ( 0 ) )  VAR_1 . METHOD_6 ( 0 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_2 ( VAR_2 , VAR_3 ) ) INIT = new TYPE_2 ( VAR_2 , VAR_3 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_5 ) NAME VAR_5 ( INIT = new TYPE_3 ( VAR_2 , VAR_3 ) ) INIT = new TYPE_3 ( VAR_2 , VAR_3 ) ) VAR VAR (  METHOD_7 ( new TYPE_4 ( VAR_1 , VAR_4 , VAR_5 ) ) )  METHOD_7 ( new TYPE_4 ( VAR_1 , VAR_4 , VAR_5 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR (  VAR_1 = TYPE_1 . METHOD_2 ( ) )  VAR_1 = TYPE_1 . METHOD_2 ( ) (  METHOD_3 ( ) )  METHOD_3 ( ) (  METHOD_4 ( ) )  METHOD_4 ( ) ( IF IF ( COND VAR_3 ) COND VAR_3 ( THEN THEN (  VAR_2 = VAR_1 )  VAR_2 = VAR_1 (  VAR_1 = TYPE_1 . METHOD_2 ( ) )  VAR_1 = TYPE_1 . METHOD_2 ( ) (  android.util.Log . i ( VAR_4 . TAG , ( ( STRING_1 + ( VAR_1 - VAR_2 ) ) + STRING_2 ) ) )  android.util.Log . i ( VAR_4 . TAG , ( ( STRING_1 + ( VAR_1 - VAR_2 ) ) + STRING_2 ) ) ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_5 ) || ( ( VAR_6 ) == null ) ) COND ( VAR_5 ) || ( ( VAR_6 ) == null ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  METHOD_5 ( ) )  METHOD_5 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( mRS ) ) INIT = new TYPE_1 ( mRS ) ) VAR VAR (  VAR_1 . METHOD_3 ( VAR_2 ) )  VAR_1 . METHOD_3 ( VAR_2 ) (  VAR_1 . METHOD_4 ( VAR_3 ) )  VAR_1 . METHOD_4 ( VAR_3 ) (  VAR_1 . METHOD_5 ( VAR_3 , VAR_4 ) )  VAR_1 . METHOD_5 ( VAR_3 , VAR_4 ) (  VAR_4 . METHOD_6 ( output ) )  VAR_4 . METHOD_6 ( output ) ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME x ) NAME x ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND x < ( VAR_5 ) ) COND x < ( VAR_5 ) ( UPDATE UPDATE (  x ++ )  x ++ ) UPDATE UPDATE ( BLOCK BLOCK ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME y ) NAME y ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND y < ( VAR_5 ) ) COND y < ( VAR_5 ) ( UPDATE UPDATE (  y ++ )  y ++ ) UPDATE UPDATE ( BLOCK BLOCK (  METHOD_7 ( x , y ) )  METHOD_7 ( x , y ) ) BLOCK BLOCK ) FOR FOR ) BLOCK BLOCK ) FOR FOR ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<TYPE_2> ) RETURN TYPE_1<TYPE_2> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_2 ) RETURN TYPE_2 ( NAME METHOD_4 ) NAME METHOD_4 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return new TYPE_7 ( VAR_2 ) ; )  return new TYPE_7 ( VAR_2 ) ; ) BLOCK BLOCK ) METHOD METHOD (  return TYPE_3 . METHOD_2 ( TYPE_4 . METHOD_3 ( VAR_1 . METHOD_1 ( ) , new TYPE_5 < TYPE_6 , TYPE_2 > ( ) { public TYPE_2 METHOD_4 ( TYPE_6 VAR_2 ) { return new TYPE_7 ( VAR_2 ) ; } } ) ) ; )  return TYPE_3 . METHOD_2 ( TYPE_4 . METHOD_3 ( VAR_1 . METHOD_1 ( ) , new TYPE_5 < TYPE_6 , TYPE_2 > ( ) { public TYPE_2 METHOD_4 ( TYPE_6 VAR_2 ) { return new TYPE_7 ( VAR_2 ) ; } } ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_1 . METHOD_1 ( ) ) ) COND ! ( VAR_1 . METHOD_1 ( ) ) ( THEN THEN (  VAR_1 . METHOD_2 ( true ) )  VAR_1 . METHOD_2 ( true ) ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_3 ( ) ) INIT = VAR_1 . METHOD_3 ( ) ) VAR VAR ( IF IF ( COND ( ( ( VAR_2 != null ) && ( ( VAR_2 . length ( ) ) > 0 ) ) && ( ! ( VAR_2 . METHOD_4 ( STRING_1 ) ) ) ) && ( ! ( result . METHOD_5 ( STRING_1 ) ) ) ) COND ( ( ( VAR_2 != null ) && ( ( VAR_2 . length ( ) ) > 0 ) ) && ( ! ( VAR_2 . METHOD_4 ( STRING_1 ) ) ) ) && ( ! ( result . METHOD_5 ( STRING_1 ) ) ) ( THEN THEN (  VAR_1 . append ( STRING_1 ) )  VAR_1 . append ( STRING_1 ) ) THEN THEN ) IF IF (  VAR_1 . append ( result ) )  VAR_1 . append ( result ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME equals ) NAME equals ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( this ) == VAR_1 ) COND ( this ) == VAR_1 ( THEN THEN (  return true ; )  return true ; ) THEN THEN ( ELSE ELSE ( IF IF ( COND ( VAR_1 == null ) || ( ( METHOD_1 ( ) ) != ( VAR_1 . METHOD_1 ( ) ) ) ) COND ( VAR_1 == null ) || ( ( METHOD_1 ( ) ) != ( VAR_1 . METHOD_1 ( ) ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_1 ) ( VAR_1 ) ) ) INIT = ( ( TYPE_1 ) ( VAR_1 ) ) ) VAR VAR (  return ( ( VAR_3 ) == ( VAR_4 ) ) && ( VAR_5 . equals ( VAR_6 ) ) ; )  return ( ( VAR_3 ) == ( VAR_4 ) ) && ( VAR_5 . equals ( VAR_6 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( METHOD_2 ( VAR_3 , STRING_1 ) ) ) COND ! ( METHOD_2 ( VAR_3 , STRING_1 ) ) ( THEN THEN (  throw new TYPE_2 ( STRING_2 ) ; )  throw new TYPE_2 ( STRING_2 ) ; ) THEN THEN ) IF IF ( SYNCHRONIZED SYNCHRONIZED (  VAR_4 )  VAR_4 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_5 ) NAME VAR_5 ( INIT = METHOD_3 ( VAR_1 ) ) INIT = METHOD_3 ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_5 == null ) COND VAR_5 == null ( THEN THEN (  android.util.Log.w ( TYPE_4 . TAG , ( STRING_3 + VAR_1 ) ) )  android.util.Log.w ( TYPE_4 . TAG , ( STRING_3 + VAR_1 ) ) (  return ; )  return ; ) THEN THEN ) IF IF (  VAR_6 = VAR_2 )  VAR_6 = VAR_2 ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE android.bluetooth.BluetoothDevice ) TYPE android.bluetooth.BluetoothDevice ( NAME device ) NAME device ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  android.util.Log.v ( VAR_2 . TAG , ( STRING_1 + device ) ) )  android.util.Log.v ( VAR_2 . TAG , ( STRING_1 + device ) ) ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME service ) NAME service ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( IF IF ( COND service == null ) COND service == null ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  return service . METHOD_1 ( device ) ; )  return service . METHOD_1 ( device ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME equals ) NAME equals ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( this ) == VAR_1 ) COND ( this ) == VAR_1 ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_1 == null ) || ( ( METHOD_1 ( ) ) != ( VAR_1 . METHOD_1 ( ) ) ) ) COND ( VAR_1 == null ) || ( ( METHOD_1 ( ) ) != ( VAR_1 . METHOD_1 ( ) ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_1 ) ( VAR_1 ) ) ) INIT = ( ( TYPE_1 ) ( VAR_1 ) ) ) VAR VAR ( IF IF ( COND ! ( VAR_3 . equals ( VAR_4 ) ) ) COND ! ( VAR_3 . equals ( VAR_4 ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ( INIT = TYPE_2 . METHOD_2 ( VAR_1 ) ) INIT = TYPE_2 . METHOD_2 ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = name . METHOD_3 ( CHAR_1 ) ) INIT = name . METHOD_3 ( CHAR_1 ) ) VAR VAR ( IF IF ( COND ( VAR_2 > 0 ) && ( ! ( name . METHOD_4 ( STRING_1 ) ) ) ) COND ( VAR_2 > 0 ) && ( ! ( name . METHOD_4 ( STRING_1 ) ) ) ( THEN THEN (  return ( name . METHOD_5 ( 0 , VAR_2 ) ) + ( name . METHOD_5 ( ( VAR_2 + 1 ) ) ) ; )  return ( name . METHOD_5 ( 0 , VAR_2 ) ) + ( name . METHOD_5 ( ( VAR_2 + 1 ) ) ) ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_2 ( ) ) INIT = VAR_2 . METHOD_2 ( ) ) VAR VAR (  METHOD_3 ( VAR_2 , VAR_1 , VAR_3 ) )  METHOD_3 ( VAR_2 , VAR_1 , VAR_3 ) (  METHOD_3 ( VAR_4 , VAR_2 . METHOD_4 ( ) , VAR_3 ) )  METHOD_3 ( VAR_4 , VAR_2 . METHOD_4 ( ) , VAR_3 ) (  VAR_5 . METHOD_5 ( VAR_2 . METHOD_6 ( ) , VAR_3 ) )  VAR_5 . METHOD_5 ( VAR_2 . METHOD_6 ( ) , VAR_3 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_6 ) NAME VAR_6 ( INIT = METHOD_7 ( VAR_2 ) ) INIT = METHOD_7 ( VAR_2 ) ) VAR VAR (  TYPE_2 . assertNotNull ( VAR_6 ) )  TYPE_2 . assertNotNull ( VAR_6 ) (  TYPE_2 . assertTrue ( VAR_6 . METHOD_8 ( ) ) )  TYPE_2 . assertTrue ( VAR_6 . METHOD_8 ( ) ) (  TYPE_2 . assertTrue ( VAR_6 . METHOD_9 ( ) . METHOD_10 ( ) ) )  TYPE_2 . assertTrue ( VAR_6 . METHOD_9 ( ) . METHOD_10 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( null ) )  TYPE_1 . when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( null ) ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . METHOD_3 ( ) ) INIT = VAR_3 . METHOD_3 ( ) ) VAR VAR (  org.mockito.Mockito.verify ( VAR_1 , TYPE_1 . METHOD_4 ( ) ) . METHOD_5 ( org.mockito.Matchers . METHOD_6 ( VAR_4 class ) ) )  org.mockito.Mockito.verify ( VAR_1 , TYPE_1 . METHOD_4 ( ) ) . METHOD_5 ( org.mockito.Matchers . METHOD_6 ( VAR_4 class ) ) (  assertEquals ( VAR_2 , false ) )  assertEquals ( VAR_2 , false ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_4 ) == null ) COND ( VAR_4 ) == null ( THEN THEN (  VAR_4 = new TYPE_3 ( VAR_5 . METHOD_2 ( ) ) )  VAR_4 = new TYPE_3 ( VAR_5 . METHOD_2 ( ) ) ) THEN THEN ) IF IF ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME result ) NAME result ( INIT = VAR_4 . METHOD_1 ( ( ( TYPE_4 ) ( VAR_1 ) ) , VAR_3 . METHOD_3 ( ) ) ) INIT = VAR_4 . METHOD_1 ( ( ( TYPE_4 ) ( VAR_1 ) ) , VAR_3 . METHOD_3 ( ) ) ) VAR VAR ( IF IF ( COND result && VAR_2 ) COND result && VAR_2 ( THEN THEN ( VAR VAR ( TYPE java.lang.Runnable ) TYPE java.lang.Runnable ( NAME r ) NAME r ( INIT = new java.lang.Runnable ( ) { public void run ( ) { } } ) INIT = new java.lang.Runnable ( ) { public void run ( ) { } } ) VAR VAR ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK ) BLOCK BLOCK ) METHOD METHOD (  result = VAR_3 . METHOD_4 ( r ) )  result = VAR_3 . METHOD_4 ( r ) ) THEN THEN ) IF IF (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME action ) NAME action ) VAR VAR ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ( IF IF ( COND ( VAR_6 ) == ( VAR_7 ) ) COND ( VAR_6 ) == ( VAR_7 ) ( THEN THEN (  VAR_5 = new TYPE_4 ( run , VAR_1 , VAR_8 , name , VAR_2 , action , VAR_3 ) )  VAR_5 = new TYPE_4 ( run , VAR_1 , VAR_8 , name , VAR_2 , action , VAR_3 ) ) THEN THEN ( ELSE ELSE (  VAR_5 = new TYPE_5 ( VAR_6 . METHOD_2 ( ) , VAR_9 , VAR_1 , VAR_8 , name , VAR_2 , action , VAR_3 , VAR_4 , VAR_10 ) )  VAR_5 = new TYPE_5 ( VAR_6 . METHOD_2 ( ) , VAR_9 , VAR_1 , VAR_8 , name , VAR_2 , action , VAR_3 , VAR_4 , VAR_10 ) ) ELSE ELSE ) IF IF (  return VAR_5 ; )  return VAR_5 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_1 ( device ) ) INIT = TYPE_2 . METHOD_1 ( device ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3[] ) TYPE TYPE_3[] ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_2 ( device ) ) INIT = TYPE_2 . METHOD_2 ( device ) ) VAR VAR (  TYPE_4 . METHOD_3 ( ) . METHOD_4 ( device , VAR_2 ) )  TYPE_4 . METHOD_3 ( ) . METHOD_4 ( device , VAR_2 ) ( IF IF ( COND ( VAR_3 ) >= 3 ) COND ( VAR_3 ) >= 3 ( THEN THEN (  TYPE_5 . METHOD_5 ( this , device ) )  TYPE_5 . METHOD_5 ( this , device ) (  METHOD_6 ( device ) )  METHOD_6 ( device ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN java.lang.String ) RETURN java.lang.String ( NAME getName ) NAME getName ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME type ) NAME type ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) == null ) COND ( VAR_1 ) == null ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ( INIT = null ) INIT = null ) VAR VAR ( SWITCH SWITCH ( NAME type ) NAME type ( CASE VAR_2 ( BLOCK BLOCK (  name = VAR_1 [ 0 ] )  name = VAR_1 [ 0 ] (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_2 ( CASE VAR_3 ( BLOCK BLOCK (  name = VAR_1 [ 1 ] )  name = VAR_1 [ 1 ] (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_3 ) SWITCH SWITCH (  return name ; )  return name ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ! ( TYPE_2 . METHOD_2 ( context ) ) ) COND ! ( TYPE_2 . METHOD_2 ( context ) ) ( THEN THEN (  TYPE_3 . i ( STRING_1 , STRING_2 ) )  TYPE_3 . i ( STRING_1 , STRING_2 ) (  return null ; )  return null ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_4 . get ( context ) . METHOD_3 ( ) ) INIT = TYPE_4 . get ( context ) . METHOD_3 ( ) ) VAR VAR (  VAR_1 . METHOD_4 ( METHOD_5 ( ) ) )  VAR_1 . METHOD_4 ( METHOD_5 ( ) ) (  VAR_1 . METHOD_6 ( ) )  VAR_1 . METHOD_6 ( ) (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public final ) MODIFIER public final ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( this ) )  VAR_1 . METHOD_2 ( this ) ( IF IF ( COND ( VAR_2 ) == ( VAR_3 ) ) COND ( VAR_2 ) == ( VAR_3 ) ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME value ) NAME value ( IN METHOD_3 ( ) ) IN METHOD_3 ( ) ( BLOCK BLOCK ( IF IF ( COND value instanceof TYPE_2 ) COND value instanceof TYPE_2 ( THEN THEN ( IF IF ( COND ! ( VAR_4 ) ) COND ! ( VAR_4 ) ( THEN THEN (  ( ( TYPE_2 ) ( value ) ) . METHOD_4 ( this ) )  ( ( TYPE_2 ) ( value ) ) . METHOD_4 ( this ) ) THEN THEN ) IF IF (  VAR_1 . METHOD_5 ( this , ( ( TYPE_2 ) ( value ) ) ) )  VAR_1 . METHOD_5 ( this , ( ( TYPE_2 ) ( value ) ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  VAR_4 = true )  VAR_4 = true ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( i < 0 ) || ( i > ( ( VAR_1 ) - 1 ) ) ) COND ( i < 0 ) || ( i > ( ( VAR_1 ) - 1 ) ) ( THEN THEN (  throw new java.lang.RuntimeException ( ) ; )  throw new java.lang.RuntimeException ( ) ; ) THEN THEN ) IF IF ( IF IF ( COND i > ( ( VAR_1 ) - 1 ) ) COND i > ( ( VAR_1 ) - 1 ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  value [ ( i > > > 5 ) ] |= VAR_2 [ ( i & INT_1 ) ] )  value [ ( i > > > 5 ) ] |= VAR_2 [ ( i & INT_1 ) ] (  return ; )  return ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_3 ) != null ) COND ( VAR_3 ) != null ( THEN THEN (  VAR_3 . METHOD_1 ( VAR_2 ) )  VAR_3 . METHOD_1 ( VAR_2 ) (  VAR_4 = VAR_1 )  VAR_4 = VAR_1 (  VAR_5 . METHOD_2 ( VAR_6 ) )  VAR_5 . METHOD_2 ( VAR_6 ) (  VAR_5 . METHOD_3 ( VAR_6 , 0 ) )  VAR_5 . METHOD_3 ( VAR_6 , 0 ) (  return true ; )  return true ; ) THEN THEN ) IF IF (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME v ) NAME v ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 . size ( ) ) > 0 ) COND ( VAR_1 . size ( ) ) > 0 ( THEN THEN ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME result ) NAME result ( INIT = false ) INIT = false ) VAR VAR ( IF IF ( COND ( ( TYPE_2 ) ( VAR_2 ) ) . METHOD_2 ( v ) ) COND ( ( TYPE_2 ) ( VAR_2 ) ) . METHOD_2 ( v ) ( THEN THEN (  VAR_3 . METHOD_3 ( ) )  VAR_3 . METHOD_3 ( ) (  result = true )  result = true ) THEN THEN ) IF IF (  METHOD_4 ( v , VAR_1 ) )  METHOD_4 ( v , VAR_1 ) (  return result ; )  return result ; ) THEN THEN ) IF IF (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME getName ) NAME getName ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME s ) NAME s ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = TYPE_1 . METHOD_1 ( s , true ) ) INIT = TYPE_1 . METHOD_1 ( s , true ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ( INIT = VAR_1 [ VAR_2 [ i ] [ 1 ] ] ) INIT = VAR_1 [ VAR_2 [ i ] [ 1 ] ] ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_2 [ i ] [ 2 ] ) INIT = VAR_2 [ i ] [ 2 ] ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_3 < 0 ) INIT = VAR_3 < 0 ) VAR VAR ( IF IF ( COND VAR_4 ) COND VAR_4 ( THEN THEN (  VAR_3 = - VAR_3 )  VAR_3 = - VAR_3 ) THEN THEN ) IF IF ( IF IF ( COND VAR_3 < 0 ) COND VAR_3 < 0 ( THEN THEN (  name += STRING_1 )  name += STRING_1 ) THEN THEN ( ELSE ELSE (  name += STRING_2 )  name += STRING_2 ) ELSE ELSE ) IF IF (  return name ; )  return name ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static synchronized ) MODIFIER static synchronized ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 . METHOD_2 ( VAR_1 ) ) INIT = VAR_4 . METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_3 == null ) COND VAR_3 == null ( THEN THEN (  return 0 ; )  return 0 ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_5 ) NAME VAR_5 ( INIT = new TYPE_1 ( VAR_6 , VAR_2 ) ) INIT = new TYPE_1 ( VAR_6 , VAR_2 ) ) VAR VAR ( IF IF ( COND ( VAR_7 ) != null ) COND ( VAR_7 ) != null ( THEN THEN (  VAR_5 . METHOD_3 ( ) )  VAR_5 . METHOD_3 ( ) ) THEN THEN ( ELSE ELSE (  VAR_8 . METHOD_4 ( VAR_5 ) )  VAR_8 . METHOD_4 ( VAR_5 ) ) ELSE ELSE ) IF IF (  return VAR_4 . METHOD_5 ( VAR_5 ) ; )  return VAR_4 . METHOD_5 ( VAR_5 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( this , VAR_2 , null ) )  VAR_1 . METHOD_2 ( this , VAR_2 , null ) (  VAR_1 . METHOD_3 ( this , VAR_3 , null ) )  VAR_1 . METHOD_3 ( this , VAR_3 , null ) (  VAR_1 . METHOD_4 ( this , VAR_4 , null ) )  VAR_1 . METHOD_4 ( this , VAR_4 , null ) (  VAR_1 . METHOD_5 ( this , VAR_5 , null ) )  VAR_1 . METHOD_5 ( this , VAR_5 , null ) (  VAR_1 . METHOD_6 ( this , VAR_6 , null ) )  VAR_1 . METHOD_6 ( this , VAR_6 , null ) (  VAR_1 . METHOD_7 ( this , VAR_7 , null ) )  VAR_1 . METHOD_7 ( this , VAR_7 , null ) (  VAR_1 . METHOD_8 ( this , VAR_8 , null ) )  VAR_1 . METHOD_8 ( this , VAR_8 , null ) (  VAR_1 . METHOD_9 ( this , VAR_9 , null ) )  VAR_1 . METHOD_9 ( this , VAR_9 , null ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME address ) NAME address ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME event ) NAME event ( INIT = new TYPE_1 ( VAR_3 ) ) INIT = new TYPE_1 ( VAR_3 ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ( INIT = ( VAR_2 == 1 ) ? VAR_5 : VAR_6 ) INIT = ( VAR_2 == 1 ) ? VAR_5 : VAR_6 ) VAR VAR (  VAR_7 = new TYPE_2 ( VAR_1 , VAR_4 , VAR_8 ) )  VAR_7 = new TYPE_2 ( VAR_1 , VAR_4 , VAR_8 ) (  event . device = METHOD_2 ( address ) )  event . device = METHOD_2 ( address ) (  METHOD_3 ( VAR_9 , event ) )  METHOD_3 ( VAR_9 , event ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME x ) NAME x ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( VAR_3 ) ) INIT = METHOD_2 ( VAR_3 ) ) VAR VAR ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN (  VAR_4 . METHOD_3 ( ) . METHOD_4 ( VAR_2 ) )  VAR_4 . METHOD_3 ( ) . METHOD_4 ( VAR_2 ) ) THEN THEN ) IF IF (  METHOD_5 ( ) )  METHOD_5 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Throwable ) TYPE java.lang.Throwable ( NAME e ) NAME e ( BLOCK BLOCK (  throw METHOD_6 ( x , e ) ; )  throw METHOD_6 ( x , e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_2 ) != ( this ) ) COND ( VAR_2 ) != ( this ) ( THEN THEN (  throw new TYPE_3 ( ) ; )  throw new TYPE_3 ( ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_3 ) NAME VAR_3 ( INIT = this . VAR_3 ) INIT = this . VAR_3 ) VAR VAR (  VAR_3 . METHOD_2 ( ) )  VAR_3 . METHOD_2 ( ) ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_4 ) NAME VAR_4 ( INIT = false ) INIT = false ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_4 = VAR_1 . METHOD_3 ( ) )  VAR_4 = VAR_1 . METHOD_3 ( ) ) BLOCK BLOCK ( FINALLY FINALLY ( IF IF ( COND ! VAR_4 ) COND ! VAR_4 ( THEN THEN (  VAR_3 . METHOD_4 ( ) )  VAR_3 . METHOD_4 ( ) ) THEN THEN ) IF IF ) FINALLY FINALLY ) TRY TRY (  return VAR_4 ; )  return VAR_4 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE android.content.Intent ) TYPE android.content.Intent ( NAME i ) NAME i ( INIT = new android.content.Intent ( this , VAR_3 class ) ) INIT = new android.content.Intent ( this , VAR_3 class ) ) VAR VAR (  i . METHOD_2 ( VAR_4 , VAR_2 ) )  i . METHOD_2 ( VAR_4 , VAR_2 ) (  VAR_1 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_2 . name , TYPE_4 . METHOD_5 ( VAR_5 ) , i ) ) )  VAR_1 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_2 . name , TYPE_4 . METHOD_5 ( VAR_5 ) , i ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected static ) MODIFIER protected static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_4 . METHOD_2 ( VAR_1 ) ) INIT = TYPE_4 . METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN (  return VAR_2 ; )  return VAR_2 ; ) THEN THEN ) IF IF (  return new TYPE_1 ( TYPE_5 . METHOD_3 ( VAR_1 , VAR_1 . METHOD_4 ( ) . METHOD_5 ( ) ) ) ; )  return new TYPE_1 ( TYPE_5 . METHOD_3 ( VAR_1 , VAR_1 . METHOD_4 ( ) . METHOD_5 ( ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<TYPE_2,TYPE_3> ) TYPE TYPE_1<TYPE_2,TYPE_3> ( NAME node ) NAME node ) VAR VAR ( VAR VAR ( TYPE TYPE_1<TYPE_2,TYPE_3> ) TYPE TYPE_1<TYPE_2,TYPE_3> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<TYPE_2,TYPE_3> ) TYPE TYPE_1<TYPE_2,TYPE_3> ( NAME parent ) NAME parent ( INIT = node . parent ) INIT = node . parent ) VAR VAR (  node . parent = null )  node . parent = null ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN (  VAR_1 . parent = parent )  VAR_1 . parent = parent ) THEN THEN ) IF IF ( IF IF ( COND parent != null ) COND parent != null ( THEN THEN ( IF IF ( COND ( VAR_2 ) == node ) COND ( VAR_2 ) == node ( THEN THEN (  VAR_2 = VAR_1 )  VAR_2 = VAR_1 ) THEN THEN ( ELSE ELSE (  VAR_3 = VAR_1 )  VAR_3 = VAR_1 ) ELSE ELSE ) IF IF ) THEN THEN ( ELSE ELSE (  VAR_4 = VAR_1 )  VAR_4 = VAR_1 ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME r ) NAME r ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( VAR_3 ) & ( VAR_4 ) ) | ( ( VAR_5 ) & ( r . METHOD_2 ( ) ) ) ) INIT = ( ( VAR_3 ) & ( VAR_4 ) ) | ( ( VAR_5 ) & ( r . METHOD_2 ( ) ) ) ) VAR VAR (  VAR_2 = VAR_2 | ( VAR_6 ) )  VAR_2 = VAR_2 | ( VAR_6 ) (  VAR_2 = VAR_2 & ( ~ ( VAR_7 ) ) )  VAR_2 = VAR_2 & ( ~ ( VAR_7 ) ) (  return new TYPE_1 ( VAR_2 ) ; )  return new TYPE_1 ( VAR_2 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( VAR_1 ) )  METHOD_2 ( VAR_1 ) ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ( INIT = ( VAR_3 != null ) ? METHOD_3 ( VAR_1 , VAR_3 ) : VAR_5 ) INIT = ( VAR_3 != null ) ? METHOD_3 ( VAR_1 , VAR_3 ) : VAR_5 ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_6 ) NAME VAR_6 ( INIT = ( VAR_3 == null ) ? 0 : VAR_7 ) INIT = ( VAR_3 == null ) ? 0 : VAR_7 ) VAR VAR (  TYPE_4 . METHOD_4 ( VAR_8 , VAR_9 , VAR_10 , VAR_11 , VAR_6 ) )  TYPE_4 . METHOD_4 ( VAR_8 , VAR_9 , VAR_10 , VAR_11 , VAR_6 ) ) BLOCK BLOCK ( FINALLY FINALLY ( IF IF ( COND VAR_4 != ( VAR_5 ) ) COND VAR_4 != ( VAR_5 ) ( THEN THEN (  TYPE_4 . METHOD_5 ( VAR_8 , VAR_4 ) )  TYPE_4 . METHOD_5 ( VAR_8 , VAR_4 ) ) THEN THEN ) IF IF ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  METHOD_2 ( ) )  METHOD_2 ( ) (  VAR_1 = false )  VAR_1 = false ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_2 ) != null ) COND ( VAR_2 ) != null ( THEN THEN ( VAR VAR ( TYPE java.util.List<android.bluetooth.BluetoothDevice> ) TYPE java.util.List<android.bluetooth.BluetoothDevice> ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_3 ( ) ) INIT = METHOD_3 ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE android.bluetooth.BluetoothDevice ) TYPE android.bluetooth.BluetoothDevice ( NAME VAR_4 ) NAME VAR_4 ( IN VAR_3 ) IN VAR_3 ( BLOCK BLOCK (  METHOD_4 ( VAR_4 , VAR_5 , VAR_6 , VAR_7 , VAR_8 ) )  METHOD_4 ( VAR_4 , VAR_5 , VAR_6 , VAR_7 , VAR_8 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  VAR_2 . METHOD_5 ( ) )  VAR_2 . METHOD_5 ( ) ) THEN THEN ) IF IF (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( 5 ) , 1 ) ) INIT = TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( 5 ) , 1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_3 . METHOD_4 ( VAR_1 ) ) INIT = TYPE_3 . METHOD_4 ( VAR_1 ) ) VAR VAR (  VAR_1 . METHOD_5 ( ) )  VAR_1 . METHOD_5 ( ) (  assertTrue ( VAR_1 . METHOD_6 ( ) ) )  assertTrue ( VAR_1 . METHOD_6 ( ) ) (  assertFalse ( VAR_2 . METHOD_7 ( ) ) )  assertFalse ( VAR_2 . METHOD_7 ( ) ) ( TRY TRY ( BLOCK BLOCK (  TYPE_3 . METHOD_4 ( VAR_1 ) )  TYPE_3 . METHOD_4 ( VAR_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME expected ) NAME expected ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  VAR_1 . METHOD_5 ( ) )  VAR_1 . METHOD_5 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME packageName ) NAME packageName ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( VAR_2 , new TYPE_2 ( STRING_1 ) , VAR_3 , new TYPE_2 ( STRING_2 ) , VAR_4 , STRING_3 ) { public java.lang.String METHOD_2 ( ) { return packageName ; } protected void METHOD_3 ( ) { } } ) INIT = new TYPE_1 ( VAR_2 , new TYPE_2 ( STRING_1 ) , VAR_3 , new TYPE_2 ( STRING_2 ) , VAR_4 , STRING_3 ) { public java.lang.String METHOD_2 ( ) { return packageName ; } protected void METHOD_3 ( ) { } } ) VAR VAR ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_2 ) NAME METHOD_2 ( BLOCK BLOCK (  return packageName ; )  return packageName ; ) BLOCK BLOCK ) METHOD METHOD ( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_3 ) NAME METHOD_3 ( BLOCK BLOCK ) BLOCK BLOCK ) METHOD METHOD (  VAR_1 . METHOD_4 ( VAR_5 , new TYPE_2 ( STRING_4 ) ) )  VAR_1 . METHOD_4 ( VAR_5 , new TYPE_2 ( STRING_4 ) ) (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME key ) NAME key ( INIT = VAR_2 ) INIT = VAR_2 ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE java.io.File ) TYPE java.io.File ( NAME element ) NAME element ( IN VAR_1 . METHOD_2 ( ) ) IN VAR_1 . METHOD_2 ( ) ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = element . getName ( ) ) INIT = element . getName ( ) ) VAR VAR ( IF IF ( COND ( ! ( VAR_3 . METHOD_3 ( STRING_1 ) ) ) && ( ! ( VAR_3 . METHOD_3 ( STRING_2 ) ) ) ) COND ( ! ( VAR_3 . METHOD_3 ( STRING_1 ) ) ) && ( ! ( VAR_3 . METHOD_3 ( STRING_2 ) ) ) ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF (  key += STRING_3 + ( TYPE_2 . METHOD_4 ( element ) ) )  key += STRING_3 + ( TYPE_2 . METHOD_4 ( element ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return key ; )  return key ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( VAR_2 . METHOD_2 ( ) ) == 1 ) && ( ( VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) ) == ( VAR_3 ) ) ) COND ( ( VAR_2 . METHOD_2 ( ) ) == 1 ) && ( ( VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) ) == ( VAR_3 ) ) ( THEN THEN (  VAR_2 . METHOD_5 ( ) )  VAR_2 . METHOD_5 ( ) ) THEN THEN ) IF IF (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_6 ) NAME METHOD_6 ( BLOCK BLOCK (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD (  new TYPE_2 ( false ) { public boolean METHOD_1 ( TYPE_3 VAR_2 ) { if ( ( ( VAR_2 . METHOD_2 ( ) ) == 1 ) && ( ( VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) ) == ( VAR_3 ) ) ) { VAR_2 . METHOD_5 ( ) ; } return false ; } public TYPE_1 METHOD_6 ( ) { return VAR_1 ; } } . METHOD_7 ( ) )  new TYPE_2 ( false ) { public boolean METHOD_1 ( TYPE_3 VAR_2 ) { if ( ( ( VAR_2 . METHOD_2 ( ) ) == 1 ) && ( ( VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) ) == ( VAR_3 ) ) ) { VAR_2 . METHOD_5 ( ) ; } return false ; } public TYPE_1 METHOD_6 ( ) { return VAR_1 ; } } . METHOD_7 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME toString ) NAME toString ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.StringBuilder ) TYPE java.lang.StringBuilder ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.lang.StringBuilder ( ) ) INIT = new java.lang.StringBuilder ( ) ) VAR VAR (  VAR_2 . append ( STRING_1 ) )  VAR_2 . append ( STRING_1 ) ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < ( VAR_1 . size ( ) ) ) COND i < ( VAR_1 . size ( ) ) ( UPDATE UPDATE (  ++ i )  ++ i ) UPDATE UPDATE ( BLOCK BLOCK ( IF IF ( COND i > 0 ) COND i > 0 ( THEN THEN (  VAR_2 . append ( STRING_2 ) )  VAR_2 . append ( STRING_2 ) ) THEN THEN ) IF IF (  VAR_2 . append ( TYPE_3 . toString ( VAR_1 . METHOD_1 ( i ) ) ) )  VAR_2 . append ( TYPE_3 . toString ( VAR_1 . METHOD_1 ( i ) ) ) ) BLOCK BLOCK ) FOR FOR (  VAR_2 . append ( STRING_3 ) )  VAR_2 . append ( STRING_3 ) (  return VAR_2 . toString ( ) ; )  return VAR_2 . toString ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( VAR_2 class ) ) INIT = TYPE_2 . METHOD_2 ( VAR_2 class ) ) VAR VAR (  TYPE_3 . METHOD_3 ( VAR_1 , STRING_1 ) )  TYPE_3 . METHOD_3 ( VAR_1 , STRING_1 ) (  TYPE_3 . METHOD_3 ( VAR_1 , STRING_2 ) )  TYPE_3 . METHOD_3 ( VAR_1 , STRING_2 ) (  TYPE_2 . METHOD_4 ( VAR_1 ) )  TYPE_2 . METHOD_4 ( VAR_1 ) ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_4 ( VAR_1 ) ) INIT = new TYPE_4 ( VAR_1 ) ) VAR VAR (  org.junit.Assert.assertEquals ( STRING_3 , VAR_3 . METHOD_5 ( STRING_4 ) . get ( ) ) )  org.junit.Assert.assertEquals ( STRING_3 , VAR_3 . METHOD_5 ( STRING_4 ) . get ( ) ) (  org.junit.Assert.assertEquals ( STRING_5 , VAR_3 . METHOD_5 ( STRING_4 ) . get ( ) ) )  org.junit.Assert.assertEquals ( STRING_5 , VAR_3 . METHOD_5 ( STRING_4 ) . get ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME c ) NAME c ( INIT = TYPE_1 . METHOD_2 ( ) ) INIT = TYPE_1 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME s ) NAME s ( INIT = TYPE_1 . METHOD_3 ( c ) ) INIT = TYPE_1 . METHOD_3 ( c ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  TYPE_1 . METHOD_4 ( s ) )  TYPE_1 . METHOD_4 ( s ) (  fail ( ) )  fail ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME expected ) NAME expected ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  TYPE_1 . METHOD_5 ( s ) )  TYPE_1 . METHOD_5 ( s ) (  TYPE_1 . METHOD_6 ( c ) )  TYPE_1 . METHOD_6 ( c ) (  TYPE_3 . METHOD_7 ( ) )  TYPE_3 . METHOD_7 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME match ) NAME match ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( ) ) INIT = TYPE_2 . METHOD_2 ( ) ) VAR VAR (  VAR_1 . METHOD_3 ( ( match = TYPE_3 . METHOD_4 ( ) ) ) )  VAR_1 . METHOD_3 ( ( match = TYPE_3 . METHOD_4 ( ) ) ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ( INIT = TYPE_3 . METHOD_5 ( VAR_1 , INT_1 , STRING_1 ) ) INIT = TYPE_3 . METHOD_5 ( VAR_1 , INT_1 , STRING_1 ) ) VAR VAR (  assertEquals ( match , result ) )  assertEquals ( match , result ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE long[] ) TYPE long[] ( NAME expected ) NAME expected ) VAR VAR ( VAR VAR ( TYPE long[] ) TYPE long[] ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  assertEquals ( expected . length , VAR_1 . length ) )  assertEquals ( expected . length , VAR_1 . length ) ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < ( expected . length ) ) COND i < ( expected . length ) ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( expected [ i ] , VAR_1 [ i ] ) )  TYPE_1 . METHOD_2 ( expected [ i ] , VAR_1 [ i ] ) ) BLOCK BLOCK ) FOR FOR ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME source ) NAME source ) VAR VAR ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND source . equals ( VAR_1 ) ) COND source . equals ( VAR_1 ) ( THEN THEN (  TYPE_1 . METHOD_2 ( ) . info ( java.lang.String.format ( STRING_1 , source , source . length ( ) , source . METHOD_3 ( ) ) ) )  TYPE_1 . METHOD_2 ( ) . info ( java.lang.String.format ( STRING_1 , source , source . length ( ) , source . METHOD_3 ( ) ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  android.util.Log.v ( VAR_2 . TAG , STRING_1 ) )  android.util.Log.v ( VAR_2 . TAG , STRING_1 ) ) THEN THEN ) IF IF (  TYPE_1 . METHOD_2 ( this , VAR_3 , VAR_4 , VAR_5 . get ( ) , VAR_6 , VAR_7 , VAR_8 , VAR_9 ) )  TYPE_1 . METHOD_2 ( this , VAR_3 , VAR_4 , VAR_5 . get ( ) , VAR_6 , VAR_7 , VAR_8 , VAR_9 ) ( IF IF ( COND ( VAR_10 ) != null ) COND ( VAR_10 ) != null ( THEN THEN (  VAR_10 . METHOD_3 ( ) )  VAR_10 . METHOD_3 ( ) (  VAR_10 = null )  VAR_10 = null ) THEN THEN ) IF IF (  METHOD_4 ( ) )  METHOD_4 ( ) ( IF IF ( COND ( VAR_11 ) != null ) COND ( VAR_11 ) != null ( THEN THEN (  VAR_11 . METHOD_5 ( null ) )  VAR_11 . METHOD_5 ( null ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_3 ) == null ) COND ( VAR_3 ) == null ( THEN THEN ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_3 . METHOD_2 ( ) ) INIT = TYPE_3 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME project ) NAME project ( INIT = METHOD_3 ( ) ) INIT = METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_4 . METHOD_4 ( project ) ) INIT = VAR_4 . METHOD_4 ( project ) ) VAR VAR (  VAR_3 = new TYPE_1 ( VAR_2 , VAR_5 , project , VAR_6 ) )  VAR_3 = new TYPE_1 ( VAR_2 , VAR_5 , project , VAR_6 ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  VAR_3 . METHOD_5 ( ) . METHOD_6 ( ) )  VAR_3 . METHOD_5 ( ) . METHOD_6 ( ) (  VAR_3 . METHOD_7 ( ) . METHOD_6 ( ) )  VAR_3 . METHOD_7 ( ) . METHOD_6 ( ) ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE long ) TYPE long ( NAME session ) NAME session ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME c ) NAME c ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME fd ) NAME fd ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME callback ) NAME callback ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_4 . METHOD_2 ( VAR_1 ) ) INIT = TYPE_4 . METHOD_2 ( VAR_1 ) ) VAR VAR (  assertEquals ( STRING_1 , new java.lang.String ( VAR_3 ) ) )  assertEquals ( STRING_1 , new java.lang.String ( VAR_3 ) ) ( IF IF ( COND ! ( VAR_4 ) ) COND ! ( VAR_4 ) ( THEN THEN (  assertEquals ( STRING_2 , 0 , ( ( TYPE_4 . METHOD_3 ( VAR_1 ) ) & ( VAR_5 ) ) ) )  assertEquals ( STRING_2 , 0 , ( ( TYPE_4 . METHOD_3 ( VAR_1 ) ) & ( VAR_5 ) ) ) ) THEN THEN ) IF IF (  super . METHOD_1 ( session , VAR_1 , c , VAR_2 , fd , callback ) )  super . METHOD_1 ( session , VAR_1 , c , VAR_2 , fd , callback ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( STRING_1 ) ) INIT = TYPE_1 . METHOD_2 ( STRING_1 ) ) VAR VAR (  METHOD_3 ( VAR_1 , STRING_2 , INT_1 , INT_2 , CHAR_1 , 0 , INT_3 , 6 ) )  METHOD_3 ( VAR_1 , STRING_2 , INT_1 , INT_2 , CHAR_1 , 0 , INT_3 , 6 ) (  METHOD_4 ( VAR_1 , STRING_2 , INT_1 , INT_2 , CHAR_1 , 0 , INT_3 , 6 ) )  METHOD_4 ( VAR_1 , STRING_2 , INT_1 , INT_2 , CHAR_1 , 0 , INT_3 , 6 ) (  METHOD_4 ( VAR_1 , STRING_3 , INT_2 , INT_1 , CHAR_1 , 0 , INT_3 , 6 ) )  METHOD_4 ( VAR_1 , STRING_3 , INT_2 , INT_1 , CHAR_1 , 0 , INT_3 , 6 ) (  METHOD_4 ( VAR_1 , STRING_2 , CHAR_1 , 0 , INT_3 , 6 ) )  METHOD_4 ( VAR_1 , STRING_2 , CHAR_1 , 0 , INT_3 , 6 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE java.util.Set<TYPE_3> ) TYPE java.util.Set<TYPE_3> ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( METHOD_2 ( ) ) ) COND ! ( METHOD_2 ( ) ) ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF ( IF IF ( COND ! ( METHOD_3 ( VAR_1 ) ) ) COND ! ( METHOD_3 ( VAR_1 ) ) ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_6 ) NAME VAR_6 ( INIT = METHOD_4 ( ) ) INIT = METHOD_4 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_7 ) NAME VAR_7 ( INIT = VAR_8 . METHOD_5 ( ) ) INIT = VAR_8 . METHOD_5 ( ) ) VAR VAR (  return METHOD_6 ( VAR_7 , VAR_1 , VAR_6 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; )  return METHOD_6 ( VAR_7 , VAR_1 , VAR_6 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( STRING_1 ) ) INIT = TYPE_1 . METHOD_2 ( STRING_1 ) ) VAR VAR (  assertTrue ( ( VAR_1 != ( VAR_2 ) ) ) )  assertTrue ( ( VAR_1 != ( VAR_2 ) ) ) (  TYPE_1 . METHOD_3 ( VAR_1 ) )  TYPE_1 . METHOD_3 ( VAR_1 ) ( TRY TRY ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( STRING_2 ) )  TYPE_1 . METHOD_2 ( STRING_2 ) (  fail ( ) )  fail ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.RuntimeException ) TYPE java.lang.RuntimeException ( NAME expected ) NAME expected ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < ( VAR_2 ) ) COND i < ( VAR_2 ) ( UPDATE UPDATE (  ++ i )  ++ i ) UPDATE UPDATE ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_2 ( i ) ) INIT = new TYPE_2 ( i ) ) VAR VAR (  VAR_1 . METHOD_2 ( VAR_3 ) )  VAR_1 . METHOD_2 ( VAR_3 ) (  assertTrue ( VAR_1 . METHOD_3 ( VAR_3 ) ) )  assertTrue ( VAR_1 . METHOD_3 ( VAR_3 ) ) ) BLOCK BLOCK ) FOR FOR (  assertEquals ( VAR_4 , VAR_1 . size ( ) ) )  assertEquals ( VAR_4 , VAR_1 . size ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2<TYPE_3> ) TYPE TYPE_2<TYPE_3> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME pkg ) NAME pkg ( INIT = VAR_3 . METHOD_2 ( ) ) INIT = VAR_3 . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND ( VAR_3 . METHOD_3 ( ) ) == null ) COND ( VAR_3 . METHOD_3 ( ) ) == null ( THEN THEN (  VAR_1 . print ( TYPE_5 . METHOD_4 ( VAR_3 . METHOD_5 ( ) ) ) )  VAR_1 . print ( TYPE_5 . METHOD_4 ( VAR_3 . METHOD_5 ( ) ) ) ) THEN THEN ) IF IF ( IF IF ( COND pkg != null ) COND pkg != null ( THEN THEN (  VAR_1 . println ( ( ( STRING_1 + ( pkg . name ( ) ) ) + STRING_2 ) ) )  VAR_1 . println ( ( ( STRING_1 + ( pkg . name ( ) ) ) + STRING_2 ) ) ) THEN THEN ) IF IF (  TYPE_5 . METHOD_6 ( VAR_1 , VAR_2 , VAR_3 ) )  TYPE_5 . METHOD_6 ( VAR_1 , VAR_2 , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.android.jack.ir.ast.JMethod ) TYPE com.android.jack.ir.ast.JMethod ( NAME method ) NAME method ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME options ) NAME options ( INIT = new TYPE_3 ( ) ) INIT = new TYPE_3 ( ) ) VAR VAR (  VAR_2 = VAR_3 )  VAR_2 = VAR_3 (  VAR_4 = VAR_5 )  VAR_4 = VAR_5 ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_6 ) NAME VAR_6 ( INIT = METHOD_2 ( method ) ) INIT = METHOD_2 ( method ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_7 ) NAME VAR_7 ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_8 ) NAME VAR_8 ) VAR VAR ( IF IF ( COND VAR_9 ) COND VAR_9 ( THEN THEN (  VAR_8 = TYPE_5 . METHOD_3 ( VAR_1 ) )  VAR_8 = TYPE_5 . METHOD_3 ( VAR_1 ) ) THEN THEN ( ELSE ELSE (  VAR_8 = null )  VAR_8 = null ) ELSE ELSE ) IF IF ( IF IF ( COND VAR_10 ) COND VAR_10 ( THEN THEN (  VAR_7 = VAR_11 )  VAR_7 = VAR_11 ) THEN THEN ( ELSE ELSE (  VAR_7 = VAR_12 )  VAR_7 = VAR_12 ) ELSE ELSE ) IF IF (  return TYPE_6 . METHOD_4 ( VAR_1 , VAR_7 , VAR_8 , VAR_6 , options ) ; )  return TYPE_6 . METHOD_4 ( VAR_1 , VAR_7 , VAR_8 , VAR_6 , options ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SWITCH SWITCH ( NAME VAR_1 ) NAME VAR_1 ( CASE VAR_3 ( BLOCK BLOCK (  return TYPE_5 . METHOD_2 ( VAR_2 ) ; )  return TYPE_5 . METHOD_2 ( VAR_2 ) ; ) BLOCK BLOCK ) CASE VAR_3 ( CASE VAR_4 ( BLOCK BLOCK (  return new TYPE_6 ( VAR_1 , VAR_2 ) ; )  return new TYPE_6 ( VAR_1 , VAR_2 ) ; ) BLOCK BLOCK ) CASE VAR_4 ( CASE VAR_5 ( BLOCK BLOCK (  return new TYPE_7 ( VAR_1 , VAR_2 ) ; )  return new TYPE_7 ( VAR_1 , VAR_2 ) ; ) BLOCK BLOCK ) CASE VAR_5 ( CASE VAR_6 ( BLOCK BLOCK (  return new TYPE_8 ( VAR_1 , VAR_2 ) ; )  return new TYPE_8 ( VAR_1 , VAR_2 ) ; ) BLOCK BLOCK ) CASE VAR_6 ( DEFAULT DEFAULT ( BLOCK BLOCK (  throw new TYPE_4 ( ( STRING_1 + VAR_1 ) ) ; )  throw new TYPE_4 ( ( STRING_1 + VAR_1 ) ) ; ) BLOCK BLOCK ) DEFAULT DEFAULT ) SWITCH SWITCH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE short ) TYPE short ( NAME VAR_1 ) NAME VAR_1 ( INIT = INT_1 ) INIT = INT_1 ) VAR VAR ( VAR VAR ( TYPE android.os.Bundle ) TYPE android.os.Bundle ( NAME args ) NAME args ( INIT = new android.os.Bundle ( ) ) INIT = new android.os.Bundle ( ) ) VAR VAR (  args . METHOD_2 ( STRING_1 , VAR_1 ) )  args . METHOD_2 ( STRING_1 , VAR_1 ) (  args . METHOD_2 ( STRING_2 , VAR_2 ) )  args . METHOD_2 ( STRING_2 , VAR_2 ) (  TYPE_2 . METHOD_3 ( TYPE_3 . METHOD_4 ( args ) . toString ( ) ) )  TYPE_2 . METHOD_3 ( TYPE_3 . METHOD_4 ( args ) . toString ( ) ) (  org.mockito.Mockito.verify ( VAR_3 ) . METHOD_5 ( VAR_1 , VAR_4 ) )  org.mockito.Mockito.verify ( VAR_3 ) . METHOD_5 ( VAR_1 , VAR_4 ) (  TYPE_4 . METHOD_6 ( VAR_3 ) )  TYPE_4 . METHOD_6 ( VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = count ) INIT = count ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = 0 ) INIT = 0 ) VAR VAR ( WHILE WHILE ( COND ( VAR_2 < VAR_1 ) && ( ( METHOD_2 ( VAR_2 ) ) <= CHAR_1 ) ) COND ( VAR_2 < VAR_1 ) && ( ( METHOD_2 ( VAR_2 ) ) <= CHAR_1 ) ( BLOCK BLOCK (  VAR_2 ++ )  VAR_2 ++ ) BLOCK BLOCK ) WHILE WHILE ( WHILE WHILE ( COND ( VAR_2 < VAR_1 ) && ( ( METHOD_2 ( ( VAR_1 - 1 ) ) ) <= CHAR_1 ) ) COND ( VAR_2 < VAR_1 ) && ( ( METHOD_2 ( ( VAR_1 - 1 ) ) ) <= CHAR_1 ) ( BLOCK BLOCK (  VAR_1 -- )  VAR_1 -- ) BLOCK BLOCK ) WHILE WHILE (  return ( VAR_2 > 0 ) || ( VAR_1 < ( count ) ) ? METHOD_3 ( VAR_2 , VAR_1 ) : this ; )  return ( VAR_2 > 0 ) || ( VAR_1 < ( count ) ) ? METHOD_3 ( VAR_2 , VAR_1 ) : this ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public final ) MODIFIER public final ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME x ) NAME x ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  throw new TYPE_2 ( ) ; )  throw new TYPE_2 ( ) ; ) THEN THEN ) IF IF ( IF IF ( COND ! ( VAR_2 ) ) COND ! ( VAR_2 ) ( THEN THEN (  throw new TYPE_3 ( STRING_1 ) ; )  throw new TYPE_3 ( STRING_1 ) ; ) THEN THEN ) IF IF (  METHOD_1 ( METHOD_2 ( METHOD_3 ( i , VAR_3 ) ) , x ) )  METHOD_1 ( METHOD_2 ( METHOD_3 ( i , VAR_3 ) ) , x ) (  return this ; )  return this ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME config ) NAME config ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND config == null ) COND config == null ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE java.lang.StringBuilder ) TYPE java.lang.StringBuilder ( NAME sb ) NAME sb ( INIT = new java.lang.StringBuilder ( ) . append ( STRING_1 ) . append ( VAR_1 ) . append ( STRING_2 ) . append ( VAR_2 ) . append ( STRING_3 ) . append ( VAR_3 ) . append ( STRING_4 ) . append ( VAR_4 ) . append ( STRING_5 ) . append ( VAR_5 ) ) INIT = new java.lang.StringBuilder ( ) . append ( STRING_1 ) . append ( VAR_1 ) . append ( STRING_2 ) . append ( VAR_2 ) . append ( STRING_3 ) . append ( VAR_3 ) . append ( STRING_4 ) . append ( VAR_4 ) . append ( STRING_5 ) . append ( VAR_5 ) ) VAR VAR (  return sb . toString ( ) ; )  return sb . toString ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = null ) INIT = null ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( IF IF ( COND ( VAR_1 . type ) == null ) COND ( VAR_1 . type ) == null ( THEN THEN (  VAR_4 = TYPE_3 . METHOD_2 ( VAR_5 . Object class ) )  VAR_4 = TYPE_3 . METHOD_2 ( VAR_5 . Object class ) ) THEN THEN ( ELSE ELSE (  VAR_4 = TYPE_3 . METHOD_3 ( VAR_1 . type ) )  VAR_4 = TYPE_3 . METHOD_3 ( VAR_1 . type ) ) ELSE ELSE ) IF IF ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME id ) NAME id ( INIT = STRING_1 + ( ( VAR_6 ) ++ ) ) INIT = STRING_1 + ( ( VAR_6 ) ++ ) ) VAR VAR (  VAR_3 = new TYPE_2 ( id , id , VAR_4 , null ) )  VAR_3 = new TYPE_2 ( id , id , VAR_4 , null ) (  VAR_7 . METHOD_4 ( VAR_1 , VAR_3 ) )  VAR_7 . METHOD_4 ( VAR_1 , VAR_3 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME source ) NAME source ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<TYPE_2> ) TYPE java.util.ArrayList<TYPE_2> ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . get ( VAR_1 ) ) INIT = VAR_3 . get ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME s ) NAME s ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK ( IF IF ( COND s . equals ( source ) ) COND s . equals ( source ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( true ) )  VAR_1 . METHOD_2 ( true ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_3 ( VAR_1 , VAR_3 , VAR_4 ) ) INIT = TYPE_2 . METHOD_3 ( VAR_1 , VAR_3 , VAR_4 ) ) VAR VAR (  TYPE_3 . METHOD_4 ( new java.io.File ( VAR_5 , STRING_1 ) , new java.io.File ( VAR_5 , STRING_2 ) ) )  TYPE_3 . METHOD_4 ( new java.io.File ( VAR_5 , STRING_1 ) , new java.io.File ( VAR_5 , STRING_2 ) ) ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_6 ) NAME VAR_6 ( INIT = TYPE_2 . METHOD_5 ( VAR_3 , VAR_5 , VAR_4 ) ) INIT = TYPE_2 . METHOD_5 ( VAR_3 , VAR_5 , VAR_4 ) ) VAR VAR (  assertEquals ( 1 , VAR_7 . size ( ) ) )  assertEquals ( 1 , VAR_7 . size ( ) ) (  assertEquals ( new TYPE_5 ( VAR_8 , STRING_3 , VAR_9 , VAR_10 , VAR_11 ) , VAR_7 . get ( 0 ) ) )  assertEquals ( new TYPE_5 ( VAR_8 , STRING_3 , VAR_9 , VAR_10 , VAR_11 ) , VAR_7 . get ( 0 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 , VAR_8 , VAR_9 ) ) INIT = new TYPE_1 ( VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 , VAR_8 , VAR_9 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME p ) NAME p ( INIT = TYPE_2 . METHOD_2 ( ) ) INIT = TYPE_2 . METHOD_2 ( ) ) VAR VAR (  VAR_1 . METHOD_3 ( p , 0 ) )  VAR_1 . METHOD_3 ( p , 0 ) (  p . METHOD_4 ( 0 ) )  p . METHOD_4 ( 0 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_10 ) NAME VAR_10 ( INIT = TYPE_3 . METHOD_5 ( p ) ) INIT = TYPE_3 . METHOD_5 ( p ) ) VAR VAR (  org.junit.Assert.assertEquals ( VAR_1 , VAR_10 ) )  org.junit.Assert.assertEquals ( VAR_1 , VAR_10 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME location ) NAME location ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME data ) NAME data ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_2 != null ) && ( VAR_4 . METHOD_2 ( this , VAR_1 , VAR_2 ) ) ) COND ( VAR_2 != null ) && ( VAR_4 . METHOD_2 ( this , VAR_1 , VAR_2 ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  super . METHOD_1 ( VAR_1 , location , VAR_3 , data ) )  super . METHOD_1 ( VAR_1 , location , VAR_3 , data ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_1 ) NAME VAR_1 ( INIT = new byte [ ] { INT_1 , - INT_2 , INT_3 , 100 , INT_4 , INT_5 , 3 , 0 , 0 , INT_6 , 0 , INT_7 , 0 } ) INIT = new byte [ ] { INT_1 , - INT_2 , INT_3 , 100 , INT_4 , INT_5 , 3 , 0 , 0 , INT_6 , 0 , INT_7 , 0 } ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME in ) NAME in ( INIT = new TYPE_2 ( new TYPE_3 ( VAR_1 ) ) ) INIT = new TYPE_2 ( new TYPE_3 ( VAR_1 ) ) ) VAR VAR (  assertEquals ( 1 , in . METHOD_2 ( ) ) )  assertEquals ( 1 , in . METHOD_2 ( ) ) (  assertEquals ( 4 , in . METHOD_3 ( 4 ) ) )  assertEquals ( 4 , in . METHOD_3 ( 4 ) ) (  assertEquals ( 0 , in . METHOD_2 ( ) ) )  assertEquals ( 0 , in . METHOD_2 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE android.os.Bundle ) TYPE android.os.Bundle ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  throw new java.lang.IllegalArgumentException ( STRING_1 ) ; )  throw new java.lang.IllegalArgumentException ( STRING_1 ) ; ) THEN THEN ) IF IF ( TRY TRY ( BLOCK BLOCK (  return VAR_4 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ; )  return VAR_4 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME e ) NAME e ( BLOCK BLOCK (  throw new java.lang.RuntimeException ( e ) ; )  throw new java.lang.RuntimeException ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE android.bluetooth.BluetoothDevice ) TYPE android.bluetooth.BluetoothDevice ( NAME device ) NAME device ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( VAR_1 , STRING_1 ) )  METHOD_2 ( VAR_1 , STRING_1 ) ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  android.util.Log.d ( VAR_3 . TAG , ( ( STRING_2 + device ) + STRING_3 ) ) )  android.util.Log.d ( VAR_3 . TAG , ( ( STRING_2 + device ) + STRING_3 ) ) ) THEN THEN ) IF IF ( IF IF ( COND device == null ) COND device == null ( THEN THEN (  device = VAR_4 )  device = VAR_4 ) THEN THEN ) IF IF ( IF IF ( COND device == null ) COND device == null ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF ( SYNCHRONIZED SYNCHRONIZED (  VAR_5 )  VAR_5 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_6 ) NAME VAR_6 ( INIT = VAR_5 . get ( device ) ) INIT = VAR_5 . get ( device ) ) VAR VAR ( IF IF ( COND VAR_6 != null ) COND VAR_6 != null ( THEN THEN (  return VAR_6 . METHOD_1 ( ) ; )  return VAR_6 . METHOD_1 ( ) ; ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN byte[] ) RETURN byte[] ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_2 ) NAME VAR_2 ( INIT = new byte [ VAR_3 ] ) INIT = new byte [ VAR_3 ] ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME index ) NAME index ( INIT = VAR_3 ) INIT = VAR_3 ) VAR VAR ( WHILE WHILE ( COND ( index -- ) > 0 ) COND ( index -- ) > 0 ( BLOCK BLOCK (  VAR_2 [ index ] = ( ( byte ) ( VAR_1 ) ) )  VAR_2 [ index ] = ( ( byte ) ( VAR_1 ) ) (  VAR_1 = VAR_1 > > 8 )  VAR_1 = VAR_1 > > 8 ) BLOCK BLOCK ) WHILE WHILE (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_6 ) NAME VAR_6 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_7 ) NAME VAR_7 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_8 ) NAME VAR_8 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 , INT_1 , VAR_9 , VAR_9 , VAR_9 , VAR_9 , VAR_8 ) )  METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 , INT_1 , VAR_9 , VAR_9 , VAR_9 , VAR_9 , VAR_8 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( VAR_1 == null ) ? null : VAR_1 . METHOD_2 ( ) ) INIT = ( VAR_1 == null ) ? null : VAR_1 . METHOD_2 ( ) ) VAR VAR (  return ( VAR_3 != null ) && ( VAR_2 . equals ( VAR_3 . METHOD_3 ( ) ) ) ; )  return ( VAR_3 != null ) && ( VAR_2 . equals ( VAR_3 . METHOD_3 ( ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME slotId ) NAME slotId ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME service ) NAME service ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( IF IF ( COND service != null ) COND service != null ( THEN THEN (  return service . METHOD_1 ( slotId , VAR_1 ) ; )  return service . METHOD_1 ( slotId , VAR_1 ) ; ) THEN THEN ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME e ) NAME e ( BLOCK BLOCK (  android.util.Log.e ( VAR_2 . TAG , STRING_1 , e ) )  android.util.Log.e ( VAR_2 . TAG , STRING_1 , e ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  return - 1 ; )  return - 1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( ) ) INIT = TYPE_2 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_3 ( VAR_3 ) ) INIT = new TYPE_3 ( VAR_3 ) ) VAR VAR (  TYPE_2 . METHOD_3 ( VAR_2 , VAR_1 ) )  TYPE_2 . METHOD_3 ( VAR_2 , VAR_1 ) ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_3 . size ( ) ) INIT = VAR_3 . size ( ) ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_5 ) NAME VAR_5 ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND VAR_5 < VAR_4 ) COND VAR_5 < VAR_4 ( UPDATE UPDATE (  VAR_5 ++ )  VAR_5 ++ ) UPDATE UPDATE ( BLOCK BLOCK (  assertTrue ( STRING_1 , ( ( VAR_3 . get ( VAR_5 ) ) == ( VAR_2 . get ( ( ( VAR_4 - VAR_5 ) - 1 ) ) ) ) ) )  assertTrue ( STRING_1 , ( ( VAR_3 . get ( VAR_5 ) ) == ( VAR_2 . get ( ( ( VAR_4 - VAR_5 ) - 1 ) ) ) ) ) ) BLOCK BLOCK ) FOR FOR ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME size ) NAME size ( INIT = ( this . METHOD_2 ( ) ) > > 1 ) INIT = ( this . METHOD_2 ( ) ) > > 1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_3 ( ) ) INIT = METHOD_3 ( ) ) VAR VAR (  return ( ( TYPE_1 ) ( new TYPE_2 ( this , ( - 1 ) , 0 , size , size , VAR_1 , METHOD_4 ( ) ) ) ) ; )  return ( ( TYPE_1 ) ( new TYPE_2 ( this , ( - 1 ) , 0 , size , size , VAR_1 , METHOD_4 ( ) ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME server ) NAME server ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_2 ) != null ) COND ( VAR_2 ) != null ( THEN THEN (  METHOD_2 ( ) )  METHOD_2 ( ) ) THEN THEN ) IF IF (  VAR_2 = METHOD_3 ( server , VAR_1 ) )  VAR_2 = METHOD_3 ( server , VAR_1 ) ( TRY TRY ( BLOCK BLOCK (  VAR_3 = new TYPE_2 ( new TYPE_3 ( VAR_2 . METHOD_4 ( ) ) , true , VAR_4 ) )  VAR_3 = new TYPE_2 ( new TYPE_3 ( VAR_2 . METHOD_4 ( ) ) , true , VAR_4 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_5 ( ( ( VAR_4 ) + STRING_1 ) ) ; )  throw new TYPE_5 ( ( ( VAR_4 ) + STRING_1 ) ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  VAR_5 = new TYPE_6 ( VAR_2 . METHOD_5 ( ) ) )  VAR_5 = new TYPE_6 ( VAR_2 . METHOD_5 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_1 ( VAR_2 ) ) INIT = TYPE_1 . METHOD_1 ( VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME s ) NAME s ( INIT = new TYPE_2 ( VAR_1 ) ) INIT = new TYPE_2 ( VAR_1 ) ) VAR VAR (  VAR_1 . METHOD_2 ( VAR_3 ) )  VAR_1 . METHOD_2 ( VAR_3 ) (  METHOD_3 ( s ) )  METHOD_3 ( s ) (  s . METHOD_4 ( ) )  s . METHOD_4 ( ) (  VAR_1 . METHOD_5 ( ) )  VAR_1 . METHOD_5 ( ) (  METHOD_6 ( ) )  METHOD_6 ( ) (  VAR_1 . METHOD_7 ( ) )  VAR_1 . METHOD_7 ( ) (  METHOD_8 ( ) )  METHOD_8 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( VAR_2 , TYPE_2 . METHOD_3 ( ) ) )  VAR_1 . METHOD_2 ( VAR_2 , TYPE_2 . METHOD_3 ( ) ) (  VAR_1 . METHOD_2 ( VAR_3 , VAR_4 ) )  VAR_1 . METHOD_2 ( VAR_3 , VAR_4 ) (  VAR_1 . METHOD_2 ( VAR_5 , VAR_6 ) )  VAR_1 . METHOD_2 ( VAR_5 , VAR_6 ) (  VAR_1 . METHOD_2 ( VAR_7 , VAR_8 ) )  VAR_1 . METHOD_2 ( VAR_7 , VAR_8 ) (  VAR_1 . METHOD_2 ( VAR_9 , VAR_10 ) )  VAR_1 . METHOD_2 ( VAR_9 , VAR_10 ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_11 ) NAME VAR_11 ( INIT = TYPE_4 . METHOD_4 ( ) . METHOD_5 ( ) ) INIT = TYPE_4 . METHOD_4 ( ) . METHOD_5 ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_12 ) NAME VAR_12 ( INIT = VAR_11 . METHOD_6 ( VAR_13 ) ) INIT = VAR_11 . METHOD_6 ( VAR_13 ) ) VAR VAR (  VAR_1 . METHOD_2 ( VAR_14 , VAR_12 ) )  VAR_1 . METHOD_2 ( VAR_14 , VAR_12 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME context ) NAME context ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME location ) NAME location ) VAR VAR ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN (  location = context . METHOD_2 ( VAR_2 ) )  location = context . METHOD_2 ( VAR_2 ) ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_4 ) NAME VAR_4 ( INIT = context . METHOD_2 ( VAR_1 ) ) INIT = context . METHOD_2 ( VAR_1 ) ) VAR VAR (  VAR_4 . METHOD_3 ( STRING_1 ) )  VAR_4 . METHOD_3 ( STRING_1 ) (  location . METHOD_4 ( VAR_4 ) )  location . METHOD_4 ( VAR_4 ) ) THEN THEN ( ELSE ELSE (  location = context . METHOD_2 ( VAR_1 ) )  location = context . METHOD_2 ( VAR_1 ) ) ELSE ELSE ) IF IF (  context . METHOD_5 ( VAR_5 , VAR_1 . METHOD_6 ( ) , location , VAR_3 , null ) )  context . METHOD_5 ( VAR_5 , VAR_1 . METHOD_6 ( ) , location , VAR_3 , null ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME request ) NAME request ( INIT = TYPE_2 . METHOD_2 ( STRING_1 ) ) INIT = TYPE_2 . METHOD_2 ( STRING_1 ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  TYPE_2 . METHOD_3 ( VAR_1 , request ) )  TYPE_2 . METHOD_3 ( VAR_1 , request ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_4 ( VAR_1 , false ) ) INIT = TYPE_2 . METHOD_4 ( VAR_1 , false ) ) VAR VAR ( IF IF ( COND ( VAR_3 ) == false ) COND ( VAR_3 ) == false ( THEN THEN (  TYPE_4 . e ( STRING_2 , ( STRING_3 + ( VAR_4 ) ) ) )  TYPE_4 . e ( STRING_2 , ( STRING_3 + ( VAR_4 ) ) ) ) THEN THEN ) IF IF (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK (  TYPE_4 . e ( STRING_2 , STRING_4 ) )  TYPE_4 . e ( STRING_2 , STRING_4 ) (  VAR_1 . METHOD_5 ( ) )  VAR_1 . METHOD_5 ( ) (  throw e ; )  throw e ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME d ) NAME d ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND d != null ) COND d != null ( THEN THEN (  d . METHOD_2 ( this ) )  d . METHOD_2 ( this ) ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_3 ( ) ) INIT = VAR_2 . METHOD_3 ( ) ) VAR VAR ( IF IF ( COND ( VAR_3 ) < VAR_1 ) COND ( VAR_3 ) < VAR_1 ( THEN THEN (  VAR_3 = VAR_1 )  VAR_3 = VAR_1 (  METHOD_4 ( ) )  METHOD_4 ( ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  VAR_4 = d )  VAR_4 = d ( IF IF ( COND ! ( VAR_5 ) ) COND ! ( VAR_5 ) ( THEN THEN (  VAR_6 = d )  VAR_6 = d (  METHOD_5 ( ) )  METHOD_5 ( ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_3 ) COND VAR_3 ( THEN THEN (  android.util.Log.d ( TYPE_2 . TAG , STRING_1 ) )  android.util.Log.d ( TYPE_2 . TAG , STRING_1 ) ) THEN THEN ) IF IF ( IF IF ( COND VAR_4 ) COND VAR_4 ( THEN THEN (  TYPE_2 . METHOD_2 ( VAR_1 ) )  TYPE_2 . METHOD_2 ( VAR_1 ) ) THEN THEN ) IF IF (  METHOD_3 ( ) )  METHOD_3 ( ) (  VAR_5 = VAR_6 )  VAR_5 = VAR_6 ( IF IF ( COND ( VAR_7 ) != null ) COND ( VAR_7 ) != null ( THEN THEN ( VAR VAR ( TYPE android.os.Message ) TYPE android.os.Message ( NAME msg ) NAME msg ( INIT = android.os.Message . METHOD_4 ( VAR_7 ) ) INIT = android.os.Message . METHOD_4 ( VAR_7 ) ) VAR VAR (  VAR_8 = VAR_9 )  VAR_8 = VAR_9 (  msg . METHOD_5 ( ) )  msg . METHOD_5 ( ) ( IF IF ( COND VAR_4 ) COND VAR_4 ( THEN THEN (  android.util.Log.v ( TYPE_2 . TAG , STRING_2 ) )  android.util.Log.v ( TYPE_2 . TAG , STRING_2 ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = null ) INIT = null ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( VAR_3 ) ) INIT = METHOD_2 ( VAR_3 ) ) VAR VAR ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN (  VAR_1 = VAR_2 . METHOD_1 ( VAR_4 ) )  VAR_1 = VAR_2 . METHOD_1 ( VAR_4 ) ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  METHOD_3 ( STRING_1 ) )  METHOD_3 ( STRING_1 ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 ) INIT = VAR_3 ) VAR VAR ( IF IF ( COND ( VAR_2 . METHOD_2 ( ) ) != null ) COND ( VAR_2 . METHOD_2 ( ) ) != null ( THEN THEN ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_2 . METHOD_2 ( ) ) INIT = VAR_2 . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND VAR_4 != null ) COND VAR_4 != null ( THEN THEN ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_4 . METHOD_3 ( ) ) INIT = VAR_4 . METHOD_3 ( ) ) VAR VAR ( IF IF ( COND VAR_5 != null ) COND VAR_5 != null ( THEN THEN ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_6 ) NAME VAR_6 ( INIT = VAR_5 . METHOD_4 ( VAR_7 , VAR_1 ) ) INIT = VAR_5 . METHOD_4 ( VAR_7 , VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_6 != null ) COND VAR_6 != null ( THEN THEN (  return VAR_6 . METHOD_5 ( ) ; )  return VAR_6 . METHOD_5 ( ) ; ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ! ( METHOD_2 ( ) ) ) COND ! ( METHOD_2 ( ) ) ( THEN THEN (  TYPE_1 . METHOD_3 ( TYPE_2 . TAG , STRING_1 ) )  TYPE_1 . METHOD_3 ( TYPE_2 . TAG , STRING_1 ) (  return ; )  return ; ) THEN THEN ) IF IF (  assertTrue ( TYPE_2 . METHOD_4 ( VAR_1 ) ) )  assertTrue ( TYPE_2 . METHOD_4 ( VAR_1 ) ) ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_5 ( VAR_1 ) ) INIT = TYPE_2 . METHOD_5 ( VAR_1 ) ) VAR VAR ( IF IF ( COND ! VAR_2 ) COND ! VAR_2 ( THEN THEN (  TYPE_1 . METHOD_3 ( TYPE_2 . TAG , STRING_2 ) )  TYPE_1 . METHOD_3 ( TYPE_2 . TAG , STRING_2 ) (  return ; )  return ; ) THEN THEN ) IF IF (  METHOD_6 ( VAR_3 , INT_1 , INT_2 , 4 ) )  METHOD_6 ( VAR_3 , INT_1 , INT_2 , 4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.util.List<java.io.File> ) TYPE java.util.List<java.io.File> ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME path ) NAME path ( IN VAR_1 . METHOD_2 ( STRING_1 ) ) IN VAR_1 . METHOD_2 ( STRING_1 ) ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME sb ) NAME sb ( INIT = VAR_4 . METHOD_3 ( path ) ) INIT = VAR_4 . METHOD_3 ( path ) ) VAR VAR ( IF IF ( COND ( ! VAR_2 ) || ( TYPE_2 . METHOD_4 ( VAR_5 ) ) ) COND ( ! VAR_2 ) || ( TYPE_2 . METHOD_4 ( VAR_5 ) ) ( THEN THEN (  VAR_3 . METHOD_5 ( new java.io.File ( path ) ) )  VAR_3 . METHOD_5 ( new java.io.File ( path ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_6 ) NAME VAR_6 ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME callback ) NAME callback ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , 0 , callback , new TYPE_5 ( TYPE_6 . METHOD_2 ( ) ) ) )  METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , 0 , callback , new TYPE_5 ( TYPE_6 . METHOD_2 ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  s = new TYPE_1 ( STRING_1 ) )  s = new TYPE_1 ( STRING_1 ) ( TRY TRY ( BLOCK BLOCK (  s . METHOD_2 ( null ) )  s . METHOD_2 ( null ) (  fail ( STRING_2 ) )  fail ( STRING_2 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.NullPointerException ) TYPE java.lang.NullPointerException ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  s . METHOD_2 ( new TYPE_2 ( STRING_1 , STRING_1 ) ) )  s . METHOD_2 ( new TYPE_2 ( STRING_1 , STRING_1 ) ) (  assertEquals ( new TYPE_2 ( STRING_1 , STRING_1 ) , s . locale ( ) ) )  assertEquals ( new TYPE_2 ( STRING_1 , STRING_1 ) , s . locale ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME context ) NAME context ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME node ) NAME node ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME pos ) NAME pos ( INIT = ( ( TYPE_4 ) ( METHOD_2 ( node ) ) ) ) INIT = ( ( TYPE_4 ) ( METHOD_2 ( node ) ) ) ) VAR VAR ( IF IF ( COND pos != null ) COND pos != null ( THEN THEN (  return TYPE_1 . METHOD_3 ( VAR_1 , pos , ( ( TYPE_4 ) ( pos . METHOD_4 ( ) ) ) ) ; )  return TYPE_1 . METHOD_3 ( VAR_1 , pos , ( ( TYPE_4 ) ( pos . METHOD_4 ( ) ) ) ) ; ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static final ) MODIFIER public static final ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SWITCH SWITCH ( NAME VAR_1 ) NAME VAR_1 ( CASE VAR_3 ( BLOCK BLOCK (  return new TYPE_2 ( ( ( TYPE_2 ) ( VAR_2 ) ) ) ; )  return new TYPE_2 ( ( ( TYPE_2 ) ( VAR_2 ) ) ) ; ) BLOCK BLOCK ) CASE VAR_3 ( DEFAULT DEFAULT ( BLOCK BLOCK (  return TYPE_3 . METHOD_2 ( TYPE_3 . METHOD_3 ( VAR_1 ) , VAR_2 ) ; )  return TYPE_3 . METHOD_2 ( TYPE_3 . METHOD_3 ( VAR_1 ) , VAR_2 ) ; ) BLOCK BLOCK ) DEFAULT DEFAULT ) SWITCH SWITCH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_3 != null ) COND VAR_3 != null ( THEN THEN (  VAR_4 . METHOD_2 ( TYPE_1 . METHOD_3 ( VAR_1 ) , TYPE_2 . METHOD_4 ( VAR_2 ) , TYPE_2 . METHOD_4 ( VAR_3 ) ) )  VAR_4 . METHOD_2 ( TYPE_1 . METHOD_3 ( VAR_1 ) , TYPE_2 . METHOD_4 ( VAR_2 ) , TYPE_2 . METHOD_4 ( VAR_3 ) ) ) THEN THEN ( ELSE ELSE (  VAR_4 . METHOD_2 ( TYPE_1 . METHOD_3 ( VAR_1 ) , TYPE_2 . METHOD_4 ( VAR_2 ) ) )  VAR_4 . METHOD_2 ( TYPE_1 . METHOD_3 ( VAR_1 ) , TYPE_2 . METHOD_4 ( VAR_2 ) ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 && ( VAR_5 == 0 ) ) COND VAR_1 && ( VAR_5 == 0 ) ( THEN THEN (  return - 1 ; )  return - 1 ; ) THEN THEN ) IF IF ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN (  VAR_2 . METHOD_2 ( VAR_5 ) )  VAR_2 . METHOD_2 ( VAR_5 ) ( IF IF ( COND ! VAR_3 ) COND ! VAR_3 ( THEN THEN (  VAR_2 . METHOD_3 ( VAR_4 . METHOD_4 ( ) ) )  VAR_2 . METHOD_3 ( VAR_4 . METHOD_4 ( ) ) (  VAR_2 . METHOD_5 ( VAR_4 . METHOD_6 ( ) ) )  VAR_2 . METHOD_5 ( VAR_4 . METHOD_6 ( ) ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return VAR_5 ; )  return VAR_5 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE float ) TYPE float ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE float ) TYPE float ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE float ) TYPE float ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( VAR_1 , new TYPE_2 ( ( VAR_2 - VAR_4 ) , ( VAR_3 - VAR_4 ) , ( VAR_2 + VAR_4 ) , ( VAR_3 + VAR_4 ) ) , VAR_5 ) )  TYPE_1 . METHOD_2 ( VAR_1 , new TYPE_2 ( ( VAR_2 - VAR_4 ) , ( VAR_3 - VAR_4 ) , ( VAR_2 + VAR_4 ) , ( VAR_3 + VAR_4 ) ) , VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR (  assertEquals ( VAR_3 , VAR_4 ) )  assertEquals ( VAR_3 , VAR_4 ) (  assertFalse ( STRING_1 , ( ( VAR_5 ) == 0 ) ) )  assertFalse ( STRING_1 , ( ( VAR_5 ) == 0 ) ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_6 ) NAME VAR_6 ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR (  assertEquals ( VAR_3 , VAR_7 ) )  assertEquals ( VAR_3 , VAR_7 ) (  assertEquals ( STRING_1 , 0 , VAR_8 ) )  assertEquals ( STRING_1 , 0 , VAR_8 ) (  METHOD_3 ( VAR_1 ) )  METHOD_3 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE android.bluetooth.BluetoothDevice ) TYPE android.bluetooth.BluetoothDevice ( NAME device ) NAME device ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_2 ) == false ) COND ( VAR_2 ) == false ( THEN THEN (  android.util.Log.e ( TYPE_2 . TAG , STRING_1 ) )  android.util.Log.e ( TYPE_2 . TAG , STRING_1 ) (  return ; )  return ; ) THEN THEN ) IF IF ( SYNCHRONIZED SYNCHRONIZED (  VAR_3 )  VAR_3 ( BLOCK BLOCK ( IF IF ( COND VAR_4 . METHOD_2 ( device , VAR_1 ) ) COND VAR_4 . METHOD_2 ( device , VAR_1 ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_5 ) NAME VAR_5 ( INIT = new TYPE_3 ( 0 , device , VAR_1 ) ) INIT = new TYPE_3 ( 0 , device , VAR_1 ) ) VAR VAR (  VAR_4 . METHOD_3 ( VAR_5 ) )  VAR_4 . METHOD_3 ( VAR_5 ) (  METHOD_4 ( ) )  METHOD_4 ( ) ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) ) )  METHOD_2 ( VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) ) ( IF IF ( COND ! ( VAR_1 . METHOD_5 ( ) ) ) COND ! ( VAR_1 . METHOD_5 ( ) ) ( THEN THEN ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_6 ( ) . METHOD_7 ( ) ) INIT = VAR_1 . METHOD_6 ( ) . METHOD_7 ( ) ) VAR VAR (  assertTrue ( STRING_1 , ( ( VAR_2 >= 0 ) && ( VAR_2 <= INT_1 ) ) ) )  assertTrue ( STRING_1 , ( ( VAR_2 >= 0 ) && ( VAR_2 <= INT_1 ) ) ) ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . METHOD_6 ( ) . METHOD_8 ( ) ) INIT = VAR_1 . METHOD_6 ( ) . METHOD_8 ( ) ) VAR VAR (  assertTrue ( STRING_2 , ( ( VAR_3 >= 0 ) && ( VAR_3 <= INT_1 ) ) ) )  assertTrue ( STRING_2 , ( ( VAR_3 >= 0 ) && ( VAR_3 <= INT_1 ) ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE android.os.Message ) TYPE android.os.Message ( NAME msg ) NAME msg ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) != null ) COND ( VAR_1 ) != null ( THEN THEN ( VAR VAR ( TYPE android.os.Message ) TYPE android.os.Message ( NAME VAR_2 ) NAME VAR_2 ( INIT = android.os.Message . METHOD_2 ( ) ) INIT = android.os.Message . METHOD_2 ( ) ) VAR VAR (  VAR_3 = VAR_4 )  VAR_3 = VAR_4 (  VAR_5 = VAR_6 )  VAR_5 = VAR_6 ( TRY TRY ( BLOCK BLOCK (  VAR_1 . METHOD_3 ( VAR_2 ) )  VAR_1 . METHOD_3 ( VAR_2 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) THEN THEN ( ELSE ELSE ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME path ) NAME path ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME VAR_1 ) NAME VAR_1 ( INIT = this ) INIT = this ) VAR VAR ( VAR VAR ( TYPE TYPE_7<java.lang.String> ) TYPE TYPE_7<java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ( INIT = path . METHOD_2 ( ) . METHOD_3 ( ) ) INIT = path . METHOD_2 ( ) . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ( WHILE WHILE ( COND VAR_2 . METHOD_4 ( ) ) COND VAR_2 . METHOD_4 ( ) ( BLOCK BLOCK (  name = VAR_2 . METHOD_5 ( ) )  name = VAR_2 . METHOD_5 ( ) ( IF IF ( COND VAR_2 . METHOD_4 ( ) ) COND VAR_2 . METHOD_4 ( ) ( THEN THEN (  VAR_1 = VAR_3 . METHOD_6 ( VAR_1 , name ) )  VAR_1 = VAR_3 . METHOD_6 ( VAR_1 , name ) ) THEN THEN ( ELSE ELSE (  return VAR_3 . METHOD_1 ( VAR_1 , name ) ; )  return VAR_3 . METHOD_1 ( VAR_1 , name ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) WHILE WHILE (  throw new TYPE_8 ( ) ; )  throw new TYPE_8 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE android.os.Message ) TYPE android.os.Message ( NAME msg ) NAME msg ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( ( STRING_1 + ( VAR_1 ) ) ) )  METHOD_2 ( ( STRING_1 + ( VAR_1 ) ) ) ( SWITCH SWITCH ( NAME VAR_1 ) NAME VAR_1 ( CASE VAR_2 ( BLOCK BLOCK (  METHOD_2 ( STRING_2 ) )  METHOD_2 ( STRING_2 ) (  METHOD_3 ( ( ( TYPE_1 ) ( msg.obj ) ) , msg.arg1 ) )  METHOD_3 ( ( ( TYPE_1 ) ( msg.obj ) ) , msg.arg1 ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_2 ( CASE VAR_3 ( BLOCK BLOCK (  METHOD_2 ( STRING_3 ) )  METHOD_2 ( STRING_3 ) (  METHOD_4 ( ( ( TYPE_1 ) ( msg.obj ) ) ) )  METHOD_4 ( ( ( TYPE_1 ) ( msg.obj ) ) ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_3 ( CASE VAR_4 ( BLOCK BLOCK (  METHOD_2 ( STRING_4 ) )  METHOD_2 ( STRING_4 ) (  METHOD_5 ( ( ( TYPE_1 ) ( msg.obj ) ) ) )  METHOD_5 ( ( ( TYPE_1 ) ( msg.obj ) ) ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_4 ) SWITCH SWITCH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = STRING_1 + ( ( ( STRING_2 + STRING_3 ) + STRING_4 ) + STRING_5 ) ) INIT = STRING_1 + ( ( ( STRING_2 + STRING_3 ) + STRING_4 ) + STRING_5 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_2 ( VAR_1 ) ) INIT = TYPE_2 . METHOD_2 ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_3 . METHOD_3 ( VAR_2 , true ) ) INIT = TYPE_3 . METHOD_3 ( VAR_2 , true ) ) VAR VAR (  assertEquals ( VAR_1 , VAR_3 ) )  assertEquals ( VAR_1 , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . METHOD_2 ( ) . METHOD_3 ( ) ) INIT = VAR_3 . METHOD_2 ( ) . METHOD_3 ( ) ) VAR VAR ( IF IF ( COND ! ( TYPE_2 . METHOD_4 ( VAR_2 , VAR_1 ) ) ) COND ! ( TYPE_2 . METHOD_4 ( VAR_2 , VAR_1 ) ) ( THEN THEN (  throw new TYPE_3 ( ( ( ( ( STRING_1 + STRING_2 ) + ( VAR_2 . METHOD_5 ( ) ) ) + STRING_3 ) + ( VAR_1 . METHOD_5 ( ) ) ) ) ; )  throw new TYPE_3 ( ( ( ( ( STRING_1 + STRING_2 ) + ( VAR_2 . METHOD_5 ( ) ) ) + STRING_3 ) + ( VAR_1 . METHOD_5 ( ) ) ) ) ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME number ) NAME number ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND TYPE_1 . METHOD_2 ( number ) ) COND TYPE_1 . METHOD_2 ( number ) ( THEN THEN (  return STRING_1 ; )  return STRING_1 ; ) THEN THEN ) IF IF ( IF IF ( COND TYPE_2 . METHOD_3 ( number ) ) COND TYPE_2 . METHOD_3 ( number ) ( THEN THEN (  return number ; )  return number ; ) THEN THEN ) IF IF ( IF IF ( COND TYPE_1 . METHOD_2 ( VAR_2 ) ) COND TYPE_1 . METHOD_2 ( VAR_2 ) ( THEN THEN (  VAR_2 = VAR_3 )  VAR_2 = VAR_3 ) THEN THEN ) IF IF (  return TYPE_3 . METHOD_4 ( number , VAR_1 , VAR_2 ) ; )  return TYPE_3 . METHOD_4 ( number , VAR_1 , VAR_2 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( STRING_1 + STRING_2 ) + ( VAR_2 ) ) INIT = ( STRING_1 + STRING_2 ) + ( VAR_2 ) ) VAR VAR ( IF IF ( COND VAR_3 ) COND VAR_3 ( THEN THEN (  TYPE_1 . d ( VAR_4 , VAR_1 ) )  TYPE_1 . d ( VAR_4 , VAR_1 ) ) THEN THEN ) IF IF (  VAR_5 . log ( VAR_1 ) )  VAR_5 . log ( VAR_1 ) ( IF IF ( COND ( VAR_2 ) != null ) COND ( VAR_2 ) != null ( THEN THEN (  METHOD_2 ( VAR_2 ) )  METHOD_2 ( VAR_2 ) ) THEN THEN ( ELSE ELSE ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_6 ) NAME VAR_6 ( INIT = VAR_7 . METHOD_3 ( ) ) INIT = VAR_7 . METHOD_3 ( ) ) VAR VAR ( IF IF ( COND ! ( TYPE_2 . METHOD_4 ( VAR_6 ) ) ) COND ! ( TYPE_2 . METHOD_4 ( VAR_6 ) ) ( THEN THEN (  METHOD_5 ( VAR_6 ) )  METHOD_5 ( VAR_6 ) ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( VAR_2 , VAR_3 , VAR_4 ) )  VAR_1 . METHOD_2 ( VAR_2 , VAR_3 , VAR_4 ) (  VAR_1 . METHOD_3 ( VAR_5 , VAR_3 , 0 , 0 , 0 ) )  VAR_1 . METHOD_3 ( VAR_5 , VAR_3 , 0 , 0 , 0 ) (  org.mockito.Mockito.verify ( VAR_6 , TYPE_1 . METHOD_4 ( ) ) . METHOD_3 ( org.mockito.Matchers . METHOD_5 ( ) , org.mockito.Matchers . METHOD_5 ( ) , org.mockito.Matchers . METHOD_5 ( ) ) )  org.mockito.Mockito.verify ( VAR_6 , TYPE_1 . METHOD_4 ( ) ) . METHOD_3 ( org.mockito.Matchers . METHOD_5 ( ) , org.mockito.Matchers . METHOD_5 ( ) , org.mockito.Matchers . METHOD_5 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  throw new java.lang.NullPointerException ( STRING_1 ) ; )  throw new java.lang.NullPointerException ( STRING_1 ) ; ) THEN THEN ( ELSE ELSE ( TRY TRY ( BLOCK BLOCK (  TYPE_3 . METHOD_2 ( VAR_1 ) )  TYPE_3 . METHOD_2 ( VAR_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.IllegalArgumentException ) TYPE java.lang.IllegalArgumentException ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_2 ( ( STRING_2 + VAR_1 ) ) ; )  throw new TYPE_2 ( ( STRING_2 + VAR_1 ) ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) ELSE ELSE ) IF IF (  VAR_2 = VAR_1 )  VAR_2 = VAR_1 (  return this ; )  return this ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME action ) NAME action ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_2 . METHOD_2 ( VAR_1 ) ) COND VAR_2 . METHOD_2 ( VAR_1 ) ( THEN THEN (  return VAR_2 . get ( VAR_1 ) ; )  return VAR_2 . get ( VAR_1 ) ; ) THEN THEN ) IF IF (  TYPE_2 . w ( this , STRING_1 , action , VAR_1 ) )  TYPE_2 . w ( this , STRING_1 , action , VAR_1 ) (  return TYPE_3 . METHOD_3 ( ) ; )  return TYPE_3 . METHOD_3 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int[] ) RETURN int[] ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int[] ) TYPE int[] ( NAME src ) NAME src ) VAR VAR ( VAR VAR ( TYPE int[] ) TYPE int[] ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return new int [ ] { VAR_1 [ 0 ] , VAR_1 [ 1 ] , src [ 2 ] , TYPE_1 . METHOD_2 ( INT_1 , ( ( src [ 3 ] ) + ( VAR_1 [ 3 ] ) ) ) } ; )  return new int [ ] { VAR_1 [ 0 ] , VAR_1 [ 1 ] , src [ 2 ] , TYPE_1 . METHOD_2 ( INT_1 , ( ( src [ 3 ] ) + ( VAR_1 [ 3 ] ) ) ) } ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_2 class ) , TYPE_2 . METHOD_4 ( 100 ) , TYPE_2 . METHOD_4 ( 5 ) , TYPE_2 . METHOD_5 ( INT_1 ) ) ) INIT = TYPE_2 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_2 class ) , TYPE_2 . METHOD_4 ( 100 ) , TYPE_2 . METHOD_4 ( 5 ) , TYPE_2 . METHOD_5 ( INT_1 ) ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = java.lang.String . METHOD_6 ( STRING_1 , STRING_2 , STRING_3 , STRING_4 , STRING_5 , STRING_6 , STRING_7 , STRING_8 , STRING_9 , STRING_10 , STRING_11 , STRING_12 , STRING_13 , STRING_14 , STRING_15 , STRING_16 , STRING_17 ) ) INIT = java.lang.String . METHOD_6 ( STRING_1 , STRING_2 , STRING_3 , STRING_4 , STRING_5 , STRING_6 , STRING_7 , STRING_8 , STRING_9 , STRING_10 , STRING_11 , STRING_12 , STRING_13 , STRING_14 , STRING_15 , STRING_16 , STRING_17 ) ) VAR VAR (  TYPE_3 . METHOD_7 ( VAR_3 , VAR_1 ) )  TYPE_3 . METHOD_7 ( VAR_3 , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME a ) NAME a ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE float ) TYPE float ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( VAR_2 ) ) INIT = TYPE_2 . METHOD_2 ( VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE float ) TYPE float ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_2 . METHOD_2 ( VAR_4 ) ) INIT = TYPE_2 . METHOD_2 ( VAR_4 ) ) VAR VAR (  VAR_5 = ( ( VAR_1 * ( VAR_6 ) ) + ( VAR_3 * ( VAR_5 ) ) ) / ( VAR_3 * ( VAR_3 - ( VAR_6 ) ) ) )  VAR_5 = ( ( VAR_1 * ( VAR_6 ) ) + ( VAR_3 * ( VAR_5 ) ) ) / ( VAR_3 * ( VAR_3 - ( VAR_6 ) ) ) (  VAR_2 /= VAR_4 )  VAR_2 /= VAR_4 (  return this ; )  return this ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1[] ) RETURN TYPE_1[] ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE android.bluetooth.BluetoothDevice ) TYPE android.bluetooth.BluetoothDevice ( NAME device ) NAME device ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( TYPE_2 . METHOD_2 ( VAR_1 ) ) ) COND ! ( TYPE_2 . METHOD_2 ( VAR_1 ) ) ( THEN THEN (  android.util.Log.w ( TYPE_3 . TAG , STRING_1 ) )  android.util.Log.w ( TYPE_3 . TAG , STRING_1 ) (  return new TYPE_1 [ 0 ] ; )  return new TYPE_1 [ 0 ] ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME service ) NAME service ( INIT = METHOD_3 ( ) ) INIT = METHOD_3 ( ) ) VAR VAR ( IF IF ( COND service == null ) COND service == null ( THEN THEN (  return new TYPE_1 [ 0 ] ; )  return new TYPE_1 [ 0 ] ; ) THEN THEN ) IF IF (  return service . METHOD_1 ( device ) ; )  return service . METHOD_1 ( device ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 = new TYPE_1 ( 4 ) . METHOD_2 ( 1 , 3 , 2 ) . METHOD_2 ( 3 , 2 ) . METHOD_3 ( 1 ) . METHOD_4 ( ) )  VAR_1 = new TYPE_1 ( 4 ) . METHOD_2 ( 1 , 3 , 2 ) . METHOD_2 ( 3 , 2 ) . METHOD_3 ( 1 ) . METHOD_4 ( ) (  VAR_1 . METHOD_5 ( ) )  VAR_1 . METHOD_5 ( ) (  assertEquals ( 6 , VAR_1 . METHOD_6 ( 1 ) . METHOD_7 ( 1 ) ) )  assertEquals ( 6 , VAR_1 . METHOD_6 ( 1 ) . METHOD_7 ( 1 ) ) (  assertEquals ( 2 , VAR_1 . METHOD_6 ( 2 ) . METHOD_7 ( 1 ) ) )  assertEquals ( 2 , VAR_1 . METHOD_6 ( 2 ) . METHOD_7 ( 1 ) ) (  assertEquals ( 3 , VAR_1 . METHOD_6 ( 3 ) . METHOD_7 ( 1 ) ) )  assertEquals ( 3 , VAR_1 . METHOD_6 ( 3 ) . METHOD_7 ( 1 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME info ) NAME info ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( TYPE_3 . equals ( VAR_1 , VAR_2 ) ) ) COND ! ( TYPE_3 . equals ( VAR_1 , VAR_2 ) ) ( THEN THEN (  TYPE_4 . w ( this , ( STRING_1 + STRING_2 ) ) )  TYPE_4 . w ( this , ( STRING_1 + STRING_2 ) ) (  return ; )  return ; ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_3 ) == null ) COND ( VAR_3 ) == null ( THEN THEN ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_5 . METHOD_2 ( info , null , VAR_2 , VAR_6 ) ) INIT = VAR_5 . METHOD_2 ( info , null , VAR_2 , VAR_6 ) ) VAR VAR (  METHOD_3 ( VAR_4 , VAR_7 ) )  METHOD_3 ( VAR_4 , VAR_7 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_1 ) ) COND ! ( VAR_1 ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1[] ) TYPE TYPE_1[] ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 [ ] { VAR_3 , VAR_4 } ) INIT = new TYPE_1 [ ] { VAR_3 , VAR_4 } ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_5 ) NAME VAR_5 ( INIT = new byte [ ] { 1 , 2 , 3 , 4 } ) INIT = new byte [ ] { 1 , 2 , 3 , 4 } ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME result ) NAME result ( INIT = VAR_6 . METHOD_2 ( VAR_2 , null , VAR_5 ) ) INIT = VAR_6 . METHOD_2 ( VAR_2 , null , VAR_5 ) ) VAR VAR (  assertEquals ( 0 , result . METHOD_3 ( ) . size ( ) ) )  assertEquals ( 0 , result . METHOD_3 ( ) . size ( ) ) (  assertEquals ( 0 , result . METHOD_4 ( ) . size ( ) ) )  assertEquals ( 0 , result . METHOD_4 ( ) . size ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.Map<java.lang.String,TYPE_1> ) RETURN java.util.Map<java.lang.String,TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  METHOD_3 ( VAR_4 < java.lang.String > METHOD_4 ( ) , VAR_3 , VAR_2 ) )  METHOD_3 ( VAR_4 < java.lang.String > METHOD_4 ( ) , VAR_3 , VAR_2 ) (  return TYPE_3 . METHOD_5 ( VAR_3 , new TYPE_4 ( ) , VAR_1 ) ; )  return TYPE_3 . METHOD_5 ( VAR_3 , new TYPE_4 ( ) , VAR_1 ) ; ) BLOCK BLOCK ( FINALLY FINALLY (  VAR_3 . METHOD_6 ( ) )  VAR_3 . METHOD_6 ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ! ( VAR_5 ) ) && ( ! ( VAR_6 . METHOD_2 ( ) ) ) ) COND ( ! ( VAR_5 ) ) && ( ! ( VAR_6 . METHOD_2 ( ) ) ) ( THEN THEN (  METHOD_3 ( VAR_1 , name , VAR_2 ) )  METHOD_3 ( VAR_1 , name , VAR_2 ) ) THEN THEN ) IF IF (  return super . METHOD_1 ( VAR_1 , name , VAR_2 , VAR_3 , VAR_4 ) ; )  return super . METHOD_1 ( VAR_1 , name , VAR_2 , VAR_3 , VAR_4 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_2 ) == null ) COND ( VAR_2 ) == null ( THEN THEN ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME b ) NAME b ( INIT = new TYPE_3 ( VAR_1 ) ) INIT = new TYPE_3 ( VAR_1 ) ) VAR VAR (  b . METHOD_2 ( VAR_3 ) )  b . METHOD_2 ( VAR_3 ) (  b . METHOD_3 ( VAR_3 ) )  b . METHOD_3 ( VAR_3 ) (  b . METHOD_4 ( VAR_4 ) )  b . METHOD_4 ( VAR_4 ) (  b . METHOD_5 ( VAR_4 ) )  b . METHOD_5 ( VAR_4 ) (  VAR_2 = b . METHOD_6 ( ) )  VAR_2 = b . METHOD_6 ( ) ) THEN THEN ) IF IF (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_3 . METHOD_1 ( VAR_1 ) ) INIT = VAR_3 . METHOD_1 ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME type ) NAME type ( INIT = VAR_1 . METHOD_2 ( ) . METHOD_3 ( VAR_4 ) ) INIT = VAR_1 . METHOD_2 ( ) . METHOD_3 ( VAR_4 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_6 ) NAME VAR_6 ( INIT = new TYPE_1 ( VAR_5 , VAR_2 , type ) ) INIT = new TYPE_1 ( VAR_5 , VAR_2 , type ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_7 ) TYPE TYPE_7 ( NAME VAR_7 ) NAME VAR_7 ( IN VAR_8 ) IN VAR_8 ( BLOCK BLOCK (  VAR_6 . METHOD_4 ( VAR_7 . METHOD_1 ( VAR_1 ) ) )  VAR_6 . METHOD_4 ( VAR_7 . METHOD_1 ( VAR_1 ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_6 ; )  return VAR_6 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_3 . METHOD_2 ( VAR_1 ) ) INIT = TYPE_3 . METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_2 == null ) COND VAR_2 == null ( THEN THEN (  VAR_2 = TYPE_4 . METHOD_2 ( VAR_1 ) )  VAR_2 = TYPE_4 . METHOD_2 ( VAR_1 ) ( IF IF ( COND VAR_2 == null ) COND VAR_2 == null ( THEN THEN (  VAR_2 = TYPE_5 . METHOD_2 ( VAR_1 ) )  VAR_2 = TYPE_5 . METHOD_2 ( VAR_1 ) ) THEN THEN ) IF IF ( IF IF ( COND VAR_2 == null ) COND VAR_2 == null ( THEN THEN (  VAR_2 = TYPE_6 . METHOD_2 ( VAR_1 ) )  VAR_2 = TYPE_6 . METHOD_2 ( VAR_1 ) ) THEN THEN ) IF IF ( IF IF ( COND VAR_2 == null ) COND VAR_2 == null ( THEN THEN (  VAR_2 = TYPE_7 . METHOD_2 ( VAR_1 ) )  VAR_2 = TYPE_7 . METHOD_2 ( VAR_1 ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME context ) NAME context ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( ) ) INIT = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( ) ) VAR VAR ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  TYPE_4 . METHOD_4 ( context ) )  TYPE_4 . METHOD_4 ( context ) (  TYPE_5 . e ( STRING_1 , STRING_2 ) )  TYPE_5 . e ( STRING_1 , STRING_2 ) ) THEN THEN ( ELSE ELSE ( VAR VAR ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME call ) NAME call ( INIT = VAR_1 . METHOD_5 ( ) ) INIT = VAR_1 . METHOD_5 ( ) ) VAR VAR ( IF IF ( COND call != null ) COND call != null ( THEN THEN (  call . METHOD_6 ( ) . METHOD_7 ( context ) )  call . METHOD_6 ( ) . METHOD_7 ( context ) ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR (  return ( ( ( ( VAR_2 . get ( 0 ) . METHOD_3 ( ) ) + STRING_1 ) + ( VAR_2 . get ( 1 ) . METHOD_3 ( ) ) ) + STRING_1 ) + ( METHOD_4 ( VAR_1 ) ) ; )  return ( ( ( ( VAR_2 . get ( 0 ) . METHOD_3 ( ) ) + STRING_1 ) + ( VAR_2 . get ( 1 ) . METHOD_3 ( ) ) ) + STRING_1 ) + ( METHOD_4 ( VAR_1 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  return METHOD_2 ( VAR_1 ) . METHOD_3 ( ) . METHOD_4 ( METHOD_5 ( VAR_1 , VAR_2 ) ) ; )  return METHOD_2 ( VAR_1 ) . METHOD_3 ( ) . METHOD_4 ( METHOD_5 ( VAR_1 , VAR_2 ) ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_4 ( METHOD_6 ( ) , VAR_2 , VAR_1 ) ; )  throw new TYPE_4 ( METHOD_6 ( ) , VAR_2 , VAR_1 ) ; ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_4 ( METHOD_6 ( ) , VAR_2 , VAR_1 ) ; )  throw new TYPE_4 ( METHOD_6 ( ) , VAR_2 , VAR_1 ) ; ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE TYPE_7 ) TYPE TYPE_7 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_4 ( METHOD_6 ( ) , VAR_2 , VAR_1 ) ; )  throw new TYPE_4 ( METHOD_6 ( ) , VAR_2 , VAR_1 ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public final ) MODIFIER public final ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE short ) TYPE short ( NAME x ) NAME x ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  throw new TYPE_2 ( ) ; )  throw new TYPE_2 ( ) ; ) THEN THEN ) IF IF ( IF IF ( COND ! ( VAR_2 ) ) COND ! ( VAR_2 ) ( THEN THEN (  throw new TYPE_3 ( STRING_1 ) ; )  throw new TYPE_3 ( STRING_1 ) ; ) THEN THEN ) IF IF (  METHOD_1 ( METHOD_2 ( METHOD_3 ( VAR_3 ) ) , x ) )  METHOD_1 ( METHOD_2 ( METHOD_3 ( VAR_3 ) ) , x ) (  return this ; )  return this ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( METHOD_3 ( ) ) ) INIT = TYPE_1 . METHOD_2 ( METHOD_3 ( ) ) ) VAR VAR ( IF IF ( COND ( ! ( VAR_2 . METHOD_4 ( ) ) ) && ( VAR_1 . METHOD_4 ( ) ) ) COND ( ! ( VAR_2 . METHOD_4 ( ) ) ) && ( VAR_1 . METHOD_4 ( ) ) ( THEN THEN (  throw new TYPE_2 ( ( STRING_1 + ( this ) ) , ( STRING_2 + ( this ) ) , STRING_3 ) ; )  throw new TYPE_2 ( ( STRING_1 + ( this ) ) , ( STRING_2 + ( this ) ) , STRING_3 ) ; ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  android.util.Log . i ( VAR_1 , ( ( ( STRING_1 + ( TYPE_1 . METHOD_2 ( ) ) ) + STRING_2 ) + VAR_2 ) ) )  android.util.Log . i ( VAR_1 , ( ( ( STRING_1 + ( TYPE_1 . METHOD_2 ( ) ) ) + STRING_2 ) + VAR_2 ) ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME log ) NAME log ( INIT = new TYPE_2 ( STRING_3 , STRING_4 ) ) INIT = new TYPE_2 ( STRING_3 , STRING_4 ) ) VAR VAR (  log . METHOD_3 ( STRING_5 , VAR_2 , VAR_3 , VAR_4 ) )  log . METHOD_3 ( STRING_5 , VAR_2 , VAR_3 , VAR_4 ) (  log . METHOD_3 ( STRING_6 , TYPE_1 . METHOD_4 ( ) , VAR_3 , VAR_4 ) )  log . METHOD_3 ( STRING_6 , TYPE_1 . METHOD_4 ( ) , VAR_3 , VAR_4 ) ( TRY TRY ( BLOCK BLOCK (  log . METHOD_5 ( null ) )  log . METHOD_5 ( null ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.NullPointerException ) TYPE java.lang.NullPointerException ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . METHOD_3 ( ) ) INIT = VAR_1 . METHOD_3 ( ) ) VAR VAR ( IF IF ( COND ( ( VAR_2 != null ) && ( ! ( VAR_2 instanceof TYPE_3 ) ) ) || ( ( VAR_3 != null ) && ( ! ( VAR_3 instanceof TYPE_3 ) ) ) ) COND ( ( VAR_2 != null ) && ( ! ( VAR_2 instanceof TYPE_3 ) ) ) || ( ( VAR_3 != null ) && ( ! ( VAR_3 instanceof TYPE_3 ) ) ) ( THEN THEN (  throw new TYPE_4 ( STRING_1 ) ; )  throw new TYPE_4 ( STRING_1 ) ; ) THEN THEN ) IF IF (  return super . METHOD_1 ( VAR_1 ) ; )  return super . METHOD_1 ( VAR_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static final ) MODIFIER public static final ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME locale ) NAME locale ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_4 . METHOD_2 ( locale , VAR_2 ) ) INIT = TYPE_4 . METHOD_2 ( locale , VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . METHOD_3 ( ) ) INIT = VAR_1 . METHOD_3 ( ) ) VAR VAR ( IF IF ( COND TYPE_5 . equals ( VAR_3 ) ) COND TYPE_5 . equals ( VAR_3 ) ( THEN THEN (  return TYPE_5 ; )  return TYPE_5 ; ) THEN THEN ) IF IF ( IF IF ( COND TYPE_6 . equals ( VAR_3 ) ) COND TYPE_6 . equals ( VAR_3 ) ( THEN THEN (  return TYPE_6 ; )  return TYPE_6 ; ) THEN THEN ) IF IF ( IF IF ( COND TYPE_7 . equals ( VAR_3 ) ) COND TYPE_7 . equals ( VAR_3 ) ( THEN THEN (  return TYPE_7 ; )  return TYPE_7 ; ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( METHOD_3 ( ) , VAR_2 ) ) INIT = TYPE_1 . METHOD_2 ( METHOD_3 ( ) , VAR_2 ) ) VAR VAR ( IF IF ( COND VAR_1 == 0 ) COND VAR_1 == 0 ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = 6 ) INIT = 6 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR (  TYPE_1 . METHOD_4 ( METHOD_3 ( ) , VAR_5 , VAR_1 , VAR_2 , VAR_3 , VAR_6 , VAR_4 ) )  TYPE_1 . METHOD_4 ( METHOD_3 ( ) , VAR_5 , VAR_1 , VAR_2 , VAR_3 , VAR_6 , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME type ) NAME type ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_3 ) COND VAR_3 ( THEN THEN ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_5 ) INIT = VAR_5 ) VAR VAR ( IF IF ( COND VAR_4 != null ) COND VAR_4 != null ( THEN THEN ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME value ) NAME value ( INIT = TYPE_5 . METHOD_1 ( ( ( TYPE_6 ) ( VAR_4 ) ) ) ) INIT = TYPE_5 . METHOD_1 ( ( ( TYPE_6 ) ( VAR_4 ) ) ) ) VAR VAR ( IF IF ( COND ( value != null ) && ( value . METHOD_2 ( ) ) ) COND ( value != null ) && ( value . METHOD_2 ( ) ) ( THEN THEN (  return value ; )  return value ; ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return super . METHOD_1 ( VAR_1 , VAR_2 , type ) ; )  return super . METHOD_1 ( VAR_1 , VAR_2 , type ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME p ) NAME p ) VAR VAR ( VAR VAR ( TYPE float ) TYPE float ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE android.renderscript.Allocation ) TYPE android.renderscript.Allocation ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME id ) NAME id ( INIT = VAR_1 . METHOD_2 ( VAR_4 , false , VAR_3 . METHOD_3 ( VAR_1 ) , 0 , VAR_2 ) ) INIT = VAR_1 . METHOD_2 ( VAR_4 , false , VAR_3 . METHOD_3 ( VAR_1 ) , 0 , VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_5 ) NAME VAR_5 ( INIT = new TYPE_1 ( id , VAR_1 , p , null , null , VAR_2 ) ) INIT = new TYPE_1 ( id , VAR_1 , p , null , null , VAR_2 ) ) VAR VAR (  return VAR_5 ; )  return VAR_5 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.Map<?,?> ) TYPE java.util.Map<?,?> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.Map<?,?> ) TYPE java.util.Map<?,?> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . get ( VAR_4 ) ) INIT = VAR_1 . get ( VAR_4 ) ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_2 . get ( VAR_4 ) ) INIT = VAR_2 . get ( VAR_4 ) ) VAR VAR ( IF IF ( COND ! ( METHOD_2 ( VAR_3 ) ) ) COND ! ( METHOD_2 ( VAR_3 ) ) ( THEN THEN (  return METHOD_2 ( VAR_5 ) ? 1 : 0 ; )  return METHOD_2 ( VAR_5 ) ? 1 : 0 ; ) THEN THEN ( ELSE ELSE ( IF IF ( COND ! ( METHOD_2 ( VAR_5 ) ) ) COND ! ( METHOD_2 ( VAR_5 ) ) ( THEN THEN (  return - 1 ; )  return - 1 ; ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF (  return ( ( TYPE_1 ) ( VAR_3 ) ) . METHOD_3 ( VAR_5 ) ; )  return ( ( TYPE_1 ) ( VAR_3 ) ) . METHOD_3 ( VAR_5 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME a ) NAME a ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME b ) NAME b ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME c ) NAME c ) VAR VAR (  a = Main . METHOD_2 ( 1 ) )  a = Main . METHOD_2 ( 1 ) (  b = Main . METHOD_2 ( 2 ) )  b = Main . METHOD_2 ( 2 ) (  a += b )  a += b (  b = Main . METHOD_2 ( 5 ) )  b = Main . METHOD_2 ( 5 ) (  c = Main . METHOD_2 ( 6 ) )  c = Main . METHOD_2 ( 6 ) (  b += c )  b += c (  c = a + b )  c = a + b (  return c ; )  return c ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_2 instanceof TYPE_3 ) && ( ! ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ) ) ) COND ( VAR_2 instanceof TYPE_3 ) && ( ! ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ) ) ( THEN THEN (  VAR_3 . append ( new TYPE_4 ( VAR_1 , new TYPE_5 ( VAR_1 . METHOD_4 ( ) , VAR_2 , VAR_1 ) ) ) )  VAR_3 . append ( new TYPE_4 ( VAR_1 , new TYPE_5 ( VAR_1 . METHOD_4 ( ) , VAR_2 , VAR_1 ) ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME index ) NAME index ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_5 ) COND VAR_5 ( THEN THEN (  TYPE_2 . d ( VAR_6 . TAG , ( ( ( ( ( ( ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + index ) + STRING_3 ) + VAR_2 ) + STRING_4 ) + VAR_3 ) + STRING_5 ) + VAR_4 ) ) )  TYPE_2 . d ( VAR_6 . TAG , ( ( ( ( ( ( ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + index ) + STRING_3 ) + VAR_2 ) + STRING_4 ) + VAR_3 ) + STRING_5 ) + VAR_4 ) ) ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_7 ) NAME VAR_7 ( INIT = ( ( TYPE_3 ) ( VAR_8 . METHOD_2 ( VAR_2 ) ) ) ) INIT = ( ( TYPE_3 ) ( VAR_8 . METHOD_2 ( VAR_2 ) ) ) ) VAR VAR (  VAR_7 . set ( VAR_4 ) )  VAR_7 . set ( VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = STRING_1 + ( ( ( ( ( ( STRING_2 + STRING_3 ) + STRING_4 ) + STRING_5 ) + STRING_6 ) + STRING_3 ) + STRING_7 ) ) INIT = STRING_1 + ( ( ( ( ( ( STRING_2 + STRING_3 ) + STRING_4 ) + STRING_5 ) + STRING_6 ) + STRING_3 ) + STRING_7 ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME expected ) NAME expected ( INIT = STRING_8 + ( STRING_9 + STRING_10 ) ) INIT = STRING_8 + ( STRING_9 + STRING_10 ) ) VAR VAR (  assertEquals ( expected , METHOD_2 ( VAR_1 ) ) )  assertEquals ( expected , METHOD_2 ( VAR_1 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME entry ) NAME entry ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . get ( ) ) INIT = VAR_3 . get ( ) ) VAR VAR ( IF IF ( COND VAR_2 == null ) COND VAR_2 == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_4 ) != null ) COND ( VAR_4 ) != null ( THEN THEN (  VAR_2 . METHOD_2 ( VAR_4 ) )  VAR_2 . METHOD_2 ( VAR_4 ) ) THEN THEN ( ELSE ELSE ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_5 ) NAME VAR_5 ( INIT = TYPE_4 . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) ) INIT = TYPE_4 . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) ) VAR VAR (  VAR_2 . METHOD_5 ( VAR_2 . METHOD_6 ( VAR_5 , entry ) ) )  VAR_2 . METHOD_5 ( VAR_2 . METHOD_6 ( VAR_5 , entry ) ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_1 . v ( this , STRING_1 , VAR_1 ) )  TYPE_1 . v ( this , STRING_1 , VAR_1 ) ( IF IF ( COND VAR_2 . METHOD_2 ( ) ) COND VAR_2 . METHOD_2 ( ) ( THEN THEN (  VAR_1 = false )  VAR_1 = false (  TYPE_1 . v ( this , STRING_2 ) )  TYPE_1 . v ( this , STRING_2 ) ) THEN THEN ) IF IF (  VAR_3 . METHOD_3 ( ( VAR_1 ? VAR_4 : VAR_5 ) ) )  VAR_3 . METHOD_3 ( ( VAR_1 ? VAR_4 : VAR_5 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( VAR_1 ) )  TYPE_1 . METHOD_2 ( VAR_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.NullPointerException ) TYPE java.lang.NullPointerException ( NAME expected ) NAME expected ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ( TRY TRY ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( VAR_1 ) )  TYPE_1 . METHOD_2 ( VAR_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.NullPointerException ) TYPE java.lang.NullPointerException ( NAME expected ) NAME expected ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_2 ) NAME VAR_2 ( INIT = new byte [ 20 ] ) INIT = new byte [ 20 ] ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_1 . METHOD_3 ( STRING_1 ) ) INIT = TYPE_1 . METHOD_3 ( STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_2 ( TYPE_1 . METHOD_4 ( VAR_3 ) ) ) INIT = new TYPE_2 ( TYPE_1 . METHOD_4 ( VAR_3 ) ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( VAR_4 ) )  TYPE_1 . METHOD_2 ( VAR_4 ) (  fail ( ) )  fail ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.RuntimeException ) TYPE java.lang.RuntimeException ( NAME expected ) NAME expected ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( VAR_1 ) . METHOD_3 ( this ) )  METHOD_2 ( VAR_1 ) . METHOD_3 ( this ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( VAR_3 ) ) INIT = METHOD_2 ( VAR_3 ) ) VAR VAR (  VAR_2 . METHOD_4 ( new TYPE_2 ( ) ) )  VAR_2 . METHOD_4 ( new TYPE_2 ( ) ) (  VAR_2 . METHOD_5 ( VAR_4 ) )  VAR_2 . METHOD_5 ( VAR_4 ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_5 ) NAME VAR_5 ( INIT = METHOD_2 ( VAR_6 ) ) INIT = METHOD_2 ( VAR_6 ) ) VAR VAR (  VAR_5 . METHOD_6 ( VAR_7 ) )  VAR_5 . METHOD_6 ( VAR_7 ) (  METHOD_7 ( VAR_5 ) )  METHOD_7 ( VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ) VAR VAR ( VAR VAR ( TYPE double ) TYPE double ( NAME x ) NAME x ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  throw new TYPE_2 ( ) ; )  throw new TYPE_2 ( ) ; ) THEN THEN ) IF IF ( IF IF ( COND ! ( VAR_2 ) ) COND ! ( VAR_2 ) ( THEN THEN (  throw new TYPE_3 ( STRING_1 ) ; )  throw new TYPE_3 ( STRING_1 ) ; ) THEN THEN ) IF IF (  METHOD_1 ( METHOD_2 ( METHOD_3 ( i , VAR_3 ) ) , x ) )  METHOD_1 ( METHOD_2 ( METHOD_3 ( i , VAR_3 ) ) , x ) (  return this ; )  return this ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE char ) TYPE char ( NAME expected ) NAME expected ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME c ) NAME c ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( IF IF ( COND c != expected ) COND c != expected ( THEN THEN (  METHOD_3 ( ( ( ( ( STRING_1 + expected ) + STRING_2 ) + ( ( char ) ( c ) ) ) + STRING_3 ) ) )  METHOD_3 ( ( ( ( ( STRING_1 + expected ) + STRING_2 ) + ( ( char ) ( c ) ) ) + STRING_3 ) ) ) THEN THEN ) IF IF (  ( VAR_1 ) ++ )  ( VAR_1 ) ++ ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) )  TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.NullPointerException ) TYPE java.lang.NullPointerException ( NAME VAR_4 ) NAME VAR_4 ( BLOCK BLOCK (  throw VAR_4 ; )  throw VAR_4 ; ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE java.lang.RuntimeException ) TYPE java.lang.RuntimeException ( NAME re ) NAME re ( BLOCK BLOCK (  throw new java.lang.IllegalArgumentException ( ( ( ( STRING_1 + ( re . getMessage ( ) ) ) + STRING_2 ) + VAR_3 ) ) ; )  throw new java.lang.IllegalArgumentException ( ( ( ( STRING_1 + ( re . getMessage ( ) ) ) + STRING_2 ) + VAR_3 ) ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME context ) NAME context ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME number ) NAME number ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( number != null ) && ( number . METHOD_2 ( VAR_1 ) ) ) COND ( number != null ) && ( number . METHOD_2 ( VAR_1 ) ) ( THEN THEN ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = context . METHOD_3 ( VAR_3 class ) ) INIT = context . METHOD_3 ( VAR_3 class ) ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_4 ) NAME VAR_4 ( INIT = ( ( VAR_5 ) >= ( VAR_6 ) ) && ( ( VAR_2 . METHOD_4 ( ) ) == ( VAR_7 ) ) ) INIT = ( ( VAR_5 ) >= ( VAR_6 ) ) && ( ( VAR_2 . METHOD_4 ( ) ) == ( VAR_7 ) ) ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_8 ) NAME VAR_8 ( INIT = ( VAR_2 . METHOD_5 ( ) ) == ( VAR_9 ) ) INIT = ( VAR_2 . METHOD_5 ( ) ) == ( VAR_9 ) ) VAR VAR (  return VAR_4 && VAR_8 ; )  return VAR_4 && VAR_8 ; ) THEN THEN ) IF IF (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME address ) NAME address ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND TYPE_1 . METHOD_2 ( address ) ) COND TYPE_1 . METHOD_2 ( address ) ( THEN THEN (  return address ; )  return address ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_3 ( address ) ) INIT = TYPE_2 . METHOD_3 ( address ) ) VAR VAR ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN (  return VAR_1 ; )  return VAR_1 ; ) THEN THEN ) IF IF ( IF IF ( COND TYPE_2 . METHOD_4 ( address ) ) COND TYPE_2 . METHOD_4 ( address ) ( THEN THEN (  return address ; )  return address ; ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1[] ) RETURN TYPE_1[] ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME target ) NAME target ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND target != null ) COND target != null ( THEN THEN ( VAR VAR ( TYPE TYPE_1[] ) TYPE TYPE_1[] ( NAME VAR_1 ) NAME VAR_1 ( INIT = target . METHOD_1 ( ) ) INIT = target . METHOD_1 ( ) ) VAR VAR ( IF IF ( COND ( ( VAR_1 == null ) || ( ( VAR_1 . length ) == 0 ) ) && ( ! ( target . METHOD_2 ( ) ) ) ) COND ( ( VAR_1 == null ) || ( ( VAR_1 . length ) == 0 ) ) && ( ! ( target . METHOD_2 ( ) ) ) ( THEN THEN (  VAR_1 = target . METHOD_3 ( ) . METHOD_1 ( ) )  VAR_1 = target . METHOD_3 ( ) . METHOD_1 ( ) ) THEN THEN ) IF IF ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN (  return VAR_1 ; )  return VAR_1 ; ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return new TYPE_1 [ 0 ] ; )  return new TYPE_1 [ 0 ] ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.String> ) TYPE java.util.Map<java.lang.String,java.lang.String> ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( INIT = ( ( VAR_5 ) + ( VAR_6 ) ) + ( VAR_7 ) ) INIT = ( ( VAR_5 ) + ( VAR_6 ) ) + ( VAR_7 ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_8 ) NAME VAR_8 ( INIT = ( VAR_4 + ( VAR_6 ) ) + VAR_1 ) INIT = ( VAR_4 + ( VAR_6 ) ) + VAR_1 ) VAR VAR (  METHOD_2 ( VAR_8 , VAR_2 , VAR_3 ) )  METHOD_2 ( VAR_8 , VAR_2 , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  VAR_1 )  VAR_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . METHOD_2 ( ) ) INIT = VAR_3 . METHOD_2 ( ) ) VAR VAR ( WHILE WHILE ( COND VAR_2 == null ) COND VAR_2 == null ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  VAR_3 . METHOD_3 ( ) )  VAR_3 . METHOD_3 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME VAR_4 ) NAME VAR_4 ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  VAR_5 . in = new TYPE_1 ( new TYPE_2 ( VAR_6 ) ) )  VAR_5 . in = new TYPE_1 ( new TYPE_2 ( VAR_6 ) ) (  VAR_2 = VAR_3 . METHOD_2 ( ) )  VAR_2 = VAR_3 . METHOD_2 ( ) ) BLOCK BLOCK ) WHILE WHILE (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND TYPE_1 . METHOD_2 ( VAR_1 ) ) COND TYPE_1 . METHOD_2 ( VAR_1 ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE java.util.List ) TYPE java.util.List ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_3 ( VAR_1 ) ) INIT = TYPE_2 . METHOD_3 ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_2 . METHOD_4 ( VAR_3 ) ) COND VAR_2 . METHOD_4 ( VAR_3 ) ( THEN THEN (  android.util.Log.d ( VAR_4 . TAG , STRING_1 ) )  android.util.Log.d ( VAR_4 . TAG , STRING_1 ) (  return true ; )  return true ; ) THEN THEN ) IF IF ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_5 ) NAME VAR_5 ( IN VAR_6 ) IN VAR_6 ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_2 . METHOD_4 ( VAR_5 ) ) ) COND ! ( VAR_2 . METHOD_4 ( VAR_5 ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  android.util.Log.d ( VAR_4 . TAG , STRING_2 ) )  android.util.Log.d ( VAR_4 . TAG , STRING_2 ) (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK (  VAR_1 = STRING_1 )  VAR_1 = STRING_1 ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . METHOD_1 ( ) ) INIT = VAR_3 . METHOD_1 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_2 . METHOD_2 ( VAR_3 ) ) INIT = VAR_2 . METHOD_2 ( VAR_3 ) ) VAR VAR ( IF IF ( COND VAR_4 != null ) COND VAR_4 != null ( THEN THEN (  VAR_2 . METHOD_3 ( VAR_3 , VAR_4 ) )  VAR_2 . METHOD_3 ( VAR_3 , VAR_4 ) (  VAR_4 . METHOD_4 ( ) )  VAR_4 . METHOD_4 ( ) (  TYPE_3 . METHOD_5 ( ) . METHOD_6 ( VAR_3 , VAR_4 ) )  TYPE_3 . METHOD_5 ( ) . METHOD_6 ( VAR_3 , VAR_4 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME number ) NAME number ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND TYPE_2 . get ( this ) . METHOD_2 ( ) . METHOD_3 ( ) ) COND TYPE_2 . get ( this ) . METHOD_2 ( ) . METHOD_3 ( ) ( THEN THEN ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_6 ) NAME METHOD_6 ( BLOCK BLOCK (  METHOD_7 ( number , VAR_1 ) )  METHOD_7 ( number , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD (  TYPE_3 . METHOD_4 ( TYPE_4 . METHOD_5 ( number ) , new TYPE_5 ( ) { public void METHOD_6 ( ) { METHOD_7 ( number , VAR_1 ) ; } } , VAR_2 ) . METHOD_8 ( METHOD_9 ( ) , VAR_3 ) )  TYPE_3 . METHOD_4 ( TYPE_4 . METHOD_5 ( number ) , new TYPE_5 ( ) { public void METHOD_6 ( ) { METHOD_7 ( number , VAR_1 ) ; } } , VAR_2 ) . METHOD_8 ( METHOD_9 ( ) , VAR_3 ) ) THEN THEN ( ELSE ELSE (  METHOD_7 ( number , VAR_1 ) )  METHOD_7 ( number , VAR_1 ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE float[] ) TYPE float[] ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE float[] ) TYPE float[] ( NAME src ) NAME src ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_6 ) NAME VAR_6 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME d ) NAME d ( INIT = VAR_7 . METHOD_2 ( VAR_1 ) ) INIT = VAR_7 . METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND d == null ) COND d == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( IF IF ( COND VAR_6 ) COND VAR_6 ( THEN THEN (  d . METHOD_3 ( VAR_2 , VAR_3 , src , VAR_4 , VAR_5 ) )  d . METHOD_3 ( VAR_2 , VAR_3 , src , VAR_4 , VAR_5 ) ) THEN THEN ( ELSE ELSE (  d . METHOD_4 ( VAR_2 , VAR_3 , src , VAR_4 , VAR_5 ) )  d . METHOD_4 ( VAR_2 , VAR_3 , src , VAR_4 , VAR_5 ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_2 . getName ( ) ) INIT = VAR_2 . getName ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) ) INIT = VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) ) VAR VAR ( IF IF ( COND ! ( VAR_4 . METHOD_5 ( ) ) ) COND ! ( VAR_4 . METHOD_5 ( ) ) ( THEN THEN (  VAR_3 = ( VAR_3 + ( VAR_5 ) ) + VAR_4 )  VAR_3 = ( VAR_3 + ( VAR_5 ) ) + VAR_4 ) THEN THEN ) IF IF (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME slotId ) NAME slotId ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  VAR_5 )  VAR_5 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_6 ) NAME VAR_6 ( INIT = METHOD_2 ( slotId , VAR_1 ) ) INIT = METHOD_2 ( slotId , VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_6 != null ) COND VAR_6 != null ( THEN THEN (  return VAR_6 . METHOD_1 ( VAR_2 , VAR_3 , VAR_4 ) ; )  return VAR_6 . METHOD_1 ( VAR_2 , VAR_3 , VAR_4 ) ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( ) ) INIT = TYPE_2 . METHOD_2 ( ) ) VAR VAR (  VAR_1 . METHOD_3 ( TYPE_3 . METHOD_4 ( STRING_1 ) ) )  VAR_1 . METHOD_3 ( TYPE_3 . METHOD_4 ( STRING_1 ) ) (  VAR_1 . METHOD_3 ( TYPE_3 . METHOD_4 ( STRING_2 ) ) )  VAR_1 . METHOD_3 ( TYPE_3 . METHOD_4 ( STRING_2 ) ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ( INIT = TYPE_3 . METHOD_5 ( VAR_1 , INT_1 , STRING_3 ) ) INIT = TYPE_3 . METHOD_5 ( VAR_1 , INT_1 , STRING_3 ) ) VAR VAR (  METHOD_6 ( result ) )  METHOD_6 ( result ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_1 ) ) ) INIT = TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_1 ) ) ) VAR VAR (  assertNotNull ( VAR_4 ) )  assertNotNull ( VAR_4 ) ( VAR VAR ( TYPE java.util.List<?extendsTYPE_3> ) TYPE java.util.List<?extendsTYPE_3> ( NAME VAR_5 ) NAME VAR_5 ( INIT = TYPE_2 . METHOD_4 ( VAR_3 ) ) INIT = TYPE_2 . METHOD_4 ( VAR_3 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME match ) NAME match ( INIT = VAR_4 . METHOD_5 ( VAR_5 ) ) INIT = VAR_4 . METHOD_5 ( VAR_5 ) ) VAR VAR (  assertEquals ( VAR_2 , VAR_5 . METHOD_6 ( match ) ) )  assertEquals ( VAR_2 , VAR_5 . METHOD_6 ( match ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.Set<java.lang.String> ) TYPE java.util.Set<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.util.Set<java.lang.String>> ) TYPE java.util.Map<java.lang.String,java.util.Set<java.lang.String>> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.util.Set<java.lang.String> ) TYPE java.util.Set<java.lang.String> ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( IN VAR_3 ) IN VAR_3 ( BLOCK BLOCK ( IF IF ( COND VAR_1 . METHOD_2 ( VAR_4 ) ) COND VAR_1 . METHOD_2 ( VAR_4 ) ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_5 ) NAME VAR_5 ( IN METHOD_3 ( VAR_2 , VAR_4 ) ) IN METHOD_3 ( VAR_2 , VAR_4 ) ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( VAR_5 ) )  VAR_1 . METHOD_2 ( VAR_5 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME log ) NAME log ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  VAR_2 )  VAR_2 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( IF IF ( COND ( VAR_3 = VAR_2 . get ( VAR_1 . METHOD_2 ( ) ) ) != null ) COND ( VAR_3 = VAR_2 . get ( VAR_1 . METHOD_2 ( ) ) ) != null ( THEN THEN (  return VAR_3 ; )  return VAR_3 ; ) THEN THEN ) IF IF (  VAR_3 = new TYPE_1 ( VAR_1 , log ) )  VAR_3 = new TYPE_1 ( VAR_1 , log ) (  VAR_2 . METHOD_3 ( VAR_1 . METHOD_2 ( ) . METHOD_4 ( ) , VAR_3 ) )  VAR_2 . METHOD_3 ( VAR_1 . METHOD_2 ( ) . METHOD_4 ( ) , VAR_3 ) (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME rr ) NAME rr ( INIT = VAR_3 . METHOD_2 ( VAR_1 ) ) INIT = VAR_3 . METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND rr != null ) COND rr != null ( THEN THEN ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME ret ) NAME ret ( INIT = null ) INIT = null ) VAR VAR ( IF IF ( COND ( VAR_1 . error ) == ( VAR_4 ) ) COND ( VAR_1 . error ) == ( VAR_4 ) ( THEN THEN (  ret = new TYPE_4 ( ) )  ret = new TYPE_4 ( ) (  VAR_5 = VAR_6 )  VAR_5 = VAR_6 (  VAR_7 = VAR_8 )  VAR_7 = VAR_8 (  TYPE_5 . METHOD_3 ( VAR_9 , ret ) )  TYPE_5 . METHOD_3 ( VAR_9 , ret ) ) THEN THEN ) IF IF (  VAR_3 . METHOD_4 ( rr , VAR_1 , ret ) )  VAR_3 . METHOD_4 ( rr , VAR_1 , ret ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( METHOD_3 ( ) ) ) INIT = METHOD_2 ( METHOD_3 ( ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_4 ( VAR_2 , STRING_1 ) ) INIT = METHOD_4 ( VAR_2 , STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_4 ( VAR_2 , STRING_2 ) ) INIT = METHOD_4 ( VAR_2 , STRING_2 ) ) VAR VAR (  VAR_1 . METHOD_5 ( VAR_3 ) )  VAR_1 . METHOD_5 ( VAR_3 ) (  VAR_1 . METHOD_5 ( VAR_4 ) )  VAR_1 . METHOD_5 ( VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.StringBuilder ) TYPE java.lang.StringBuilder ( NAME sb ) NAME sb ( INIT = new java.lang.StringBuilder ( ) ) INIT = new java.lang.StringBuilder ( ) ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = true ) INIT = true ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_4 ) IN VAR_4 ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_3 . METHOD_2 ( VAR_1 ) ) ) COND ! ( VAR_3 . METHOD_2 ( VAR_1 ) ) ( THEN THEN ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  VAR_2 = false )  VAR_2 = false ) THEN THEN ( ELSE ELSE (  TYPE_2 . METHOD_3 ( sb , VAR_5 ) )  TYPE_2 . METHOD_3 ( sb , VAR_5 ) ) ELSE ELSE ) IF IF (  sb.append ( VAR_3 . METHOD_1 ( VAR_1 ) ) )  sb.append ( VAR_3 . METHOD_1 ( VAR_1 ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return sb . toString ( ) ; )  return sb . toString ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME type ) NAME type ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND type <= 8 ) COND type <= 8 ( UPDATE UPDATE (  type ++ )  type ++ ) UPDATE UPDATE ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  new TYPE_1 ( ) . METHOD_2 ( type , ( ( java.lang.String ) ( null ) ) ) )  new TYPE_1 ( ) . METHOD_2 ( type , ( ( java.lang.String ) ( null ) ) ) (  fail ( STRING_1 ) )  fail ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME VAR_1 ) NAME VAR_1 ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) FOR FOR ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME type ) NAME type ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND type == null ) COND type == null ( THEN THEN (  throw new java.lang.NullPointerException ( STRING_1 ) ; )  throw new java.lang.NullPointerException ( STRING_1 ) ; ) THEN THEN ) IF IF (  METHOD_2 ( ) )  METHOD_2 ( ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ( INIT = type . METHOD_3 ( ) ) INIT = type . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ( INIT = VAR_2 . get ( VAR_1 ) ) INIT = VAR_2 . get ( VAR_1 ) ) VAR VAR ( IF IF ( COND result == null ) COND result == null ( THEN THEN (  result = new TYPE_1 ( type ) )  result = new TYPE_1 ( type ) (  VAR_2 . METHOD_4 ( VAR_1 , result ) )  VAR_2 . METHOD_4 ( VAR_1 , result ) ) THEN THEN ) IF IF (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 = TYPE_1 . METHOD_2 ( ) )  VAR_1 = TYPE_1 . METHOD_2 ( ) ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < ( VAR_1 . length ) ) COND i < ( VAR_1 . length ) ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK (  VAR_2 . METHOD_3 ( VAR_1 [ i ] . toString ( ) , STRING_1 ) )  VAR_2 . METHOD_3 ( VAR_1 [ i ] . toString ( ) , STRING_1 ) ) BLOCK BLOCK ) FOR FOR ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) . METHOD_3 ( ) ) INIT = METHOD_2 ( ) . METHOD_3 ( ) ) VAR VAR ( IF IF ( COND VAR_1 . METHOD_4 ( ) ) COND VAR_1 . METHOD_4 ( ) ( THEN THEN (  return new TYPE_1 ( ) ; )  return new TYPE_1 ( ) ; ) THEN THEN ) IF IF (  return TYPE_1 . METHOD_5 ( TYPE_2 . on ( CHAR_1 ) . METHOD_6 ( VAR_1 ) ) ; )  return TYPE_1 . METHOD_5 ( TYPE_2 . on ( CHAR_1 ) . METHOD_6 ( VAR_1 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME session ) NAME session ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME s ) NAME s ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME c ) NAME c ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME fd ) NAME fd ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME callback ) NAME callback ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( TYPE_4 . METHOD_3 ( s ) ) )  METHOD_2 ( TYPE_4 . METHOD_3 ( s ) ) (  super . METHOD_1 ( session , s , c , VAR_1 , fd , callback ) )  super . METHOD_1 ( session , s , c , VAR_1 , fd , callback ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  VAR_1 )  VAR_1 ( BLOCK BLOCK (  VAR_1 . METHOD_1 ( ) )  VAR_1 . METHOD_1 ( ) ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ( SYNCHRONIZED SYNCHRONIZED (  VAR_2 )  VAR_2 ( BLOCK BLOCK (  VAR_2 . METHOD_1 ( ) )  VAR_2 . METHOD_1 ( ) ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ( SYNCHRONIZED SYNCHRONIZED (  VAR_3 )  VAR_3 ( BLOCK BLOCK (  VAR_3 . METHOD_1 ( ) )  VAR_3 . METHOD_1 ( ) ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ( SYNCHRONIZED SYNCHRONIZED (  VAR_4 )  VAR_4 ( BLOCK BLOCK (  VAR_4 . METHOD_1 ( ) )  VAR_4 . METHOD_1 ( ) ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ( SYNCHRONIZED SYNCHRONIZED (  VAR_5 )  VAR_5 ( BLOCK BLOCK (  VAR_5 . METHOD_1 ( ) )  VAR_5 . METHOD_1 ( ) ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = INT_1 ) INIT = INT_1 ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < VAR_1 ) COND i < VAR_1 ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK (  METHOD_2 ( ( ( ( STRING_1 + ( i + 1 ) ) + STRING_2 ) + VAR_1 ) , INT_2 ) )  METHOD_2 ( ( ( ( STRING_1 + ( i + 1 ) ) + STRING_2 ) + VAR_1 ) , INT_2 ) ) BLOCK BLOCK ) FOR FOR ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_1 ) ( TYPE_2 . METHOD_2 ( new TYPE_3 ( STRING_1 , STRING_2 , STRING_3 ) ) ) ) ) INIT = ( ( TYPE_1 ) ( TYPE_2 . METHOD_2 ( new TYPE_3 ( STRING_1 , STRING_2 , STRING_3 ) ) ) ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME text ) NAME text ( INIT = STRING_4 ) INIT = STRING_4 ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_3 ( text ) ) INIT = VAR_1 . METHOD_3 ( text ) ) VAR VAR (  VAR_2 . METHOD_4 ( 1 ) )  VAR_2 . METHOD_4 ( 1 ) (  assertEquals ( 0 , VAR_2 . METHOD_5 ( ) ) )  assertEquals ( 0 , VAR_2 . METHOD_5 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ) INIT = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME size ) NAME size ( INIT = ( ( int ) ( VAR_1 / INT_1 ) ) ) INIT = ( ( int ) ( VAR_1 / INT_1 ) ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = INT_2 ) INIT = INT_2 ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_3 ) NAME VAR_3 ( INIT = 0 ) INIT = 0 ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < VAR_2 ) COND i < VAR_2 ( UPDATE UPDATE (  ++ i )  ++ i ) UPDATE UPDATE ( BLOCK BLOCK (  VAR_4 . METHOD_4 ( size ) )  VAR_4 . METHOD_4 ( size ) (  VAR_3 += size )  VAR_3 += size ) BLOCK BLOCK ) FOR FOR ( WHILE WHILE ( COND VAR_3 > 0 ) COND VAR_3 > 0 ( BLOCK BLOCK (  VAR_4 . METHOD_5 ( size ) )  VAR_4 . METHOD_5 ( size ) (  VAR_3 -= size )  VAR_3 -= size ) BLOCK BLOCK ) WHILE WHILE ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME status ) NAME status ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND status == ( VAR_1 ) ) COND status == ( VAR_1 ) ( THEN THEN (  return STRING_1 ; )  return STRING_1 ; ) THEN THEN ( ELSE ELSE ( IF IF ( COND status == ( VAR_2 ) ) COND status == ( VAR_2 ) ( THEN THEN (  return STRING_2 ; )  return STRING_2 ; ) THEN THEN ( ELSE ELSE ( IF IF ( COND status == ( VAR_3 ) ) COND status == ( VAR_3 ) ( THEN THEN (  return STRING_3 ; )  return STRING_3 ; ) THEN THEN ( ELSE ELSE ( IF IF ( COND status == ( VAR_4 ) ) COND status == ( VAR_4 ) ( THEN THEN (  return STRING_4 ; )  return STRING_4 ; ) THEN THEN ( ELSE ELSE (  return STRING_5 ; )  return STRING_5 ; ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME request ) NAME request ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 <= 0 ) COND VAR_1 <= 0 ( THEN THEN (  throw new java.lang.IllegalArgumentException ( STRING_1 ) ; )  throw new java.lang.IllegalArgumentException ( STRING_1 ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_2 ( VAR_5 ) ) INIT = METHOD_2 ( VAR_5 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_6 ) NAME VAR_6 ( INIT = new TYPE_4 ( VAR_3 ) ) INIT = new TYPE_4 ( VAR_3 ) ) VAR VAR (  METHOD_1 ( request , VAR_2 , VAR_1 , VAR_4 , VAR_6 ) )  METHOD_1 ( request , VAR_2 , VAR_1 , VAR_4 , VAR_6 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  VAR_1 )  VAR_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_2 ) == null ) COND ( VAR_2 ) == null ( THEN THEN ( TRY TRY ( BLOCK BLOCK (  VAR_2 = TYPE_1 . METHOD_2 ( VAR_3 class . METHOD_3 ( VAR_4 ) ) )  VAR_2 = TYPE_1 . METHOD_2 ( VAR_3 class . METHOD_3 ( VAR_4 ) ) (  return true ; )  return true ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_5 . error ( e , null ) )  VAR_5 . error ( e , null ) (  VAR_2 = new java.util.ArrayList < TYPE_3 > ( ) )  VAR_2 = new java.util.ArrayList < TYPE_3 > ( ) ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_5 . error ( null , STRING_1 ) )  VAR_5 . error ( null , STRING_1 ) (  VAR_2 = new java.util.ArrayList < TYPE_3 > ( ) )  VAR_2 = new java.util.ArrayList < TYPE_3 > ( ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) THEN THEN ) IF IF ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME content ) NAME content ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( content ) ) INIT = new TYPE_1 ( content ) ) VAR VAR (  VAR_1 . METHOD_2 ( STRING_1 ) )  VAR_1 . METHOD_2 ( STRING_1 ) (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME e ) NAME e ( BLOCK BLOCK (  android.util.Log.w ( VAR_2 . TAG , e ) )  android.util.Log.w ( VAR_2 . TAG , e ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  this )  this ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME index ) NAME index ( INIT = METHOD_2 ( VAR_1 , false ) ) INIT = METHOD_2 ( VAR_1 , false ) ) VAR VAR ( IF IF ( COND index < 0 ) COND index < 0 ( THEN THEN (  return VAR_2 ; )  return VAR_2 ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME r ) NAME r ( INIT = ( ( TYPE_2 ) ( VAR_3 . get ( index ) ) ) ) INIT = ( ( TYPE_2 ) ( VAR_3 . get ( index ) ) ) ) VAR VAR (  return VAR_4 . METHOD_3 ( r ) ; )  return VAR_4 . METHOD_3 ( r ) ; ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME number ) NAME number ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( 4 ) . METHOD_3 ( number ) . METHOD_4 ( ) ) INIT = TYPE_1 . METHOD_2 ( 4 ) . METHOD_3 ( number ) . METHOD_4 ( ) ) VAR VAR (  VAR_1 = TYPE_2 . METHOD_5 ( VAR_1 , 2 , 4 ) )  VAR_1 = TYPE_2 . METHOD_5 ( VAR_1 , 2 , 4 ) (  return TYPE_3 . METHOD_6 ( VAR_1 , ( ( VAR_2 ) | ( VAR_3 ) ) ) ; )  return TYPE_3 . METHOD_6 ( VAR_1 , ( ( VAR_2 ) | ( VAR_3 ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) ( VAR VAR ( TYPE int ) TYPE int ( NAME subId ) NAME subId ( INIT = METHOD_3 ( ) ) INIT = METHOD_3 ( ) ) VAR VAR ( IF IF ( COND ! ( TYPE_2 . METHOD_4 ( subId ) ) ) COND ! ( TYPE_2 . METHOD_4 ( subId ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_3<java.lang.String,TYPE_1> ) TYPE TYPE_3<java.lang.String,TYPE_1> ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_3 ( VAR_1 , VAR_2 ) ) INIT = new TYPE_3 ( VAR_1 , VAR_2 ) ) VAR VAR (  METHOD_5 ( VAR_4 , VAR_3 , subId ) )  METHOD_5 ( VAR_4 , VAR_3 , subId ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME id ) NAME id ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_2 ( id , null ) ) INIT = VAR_2 . METHOD_2 ( id , null ) ) VAR VAR ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  android.util.Log.w ( VAR_3 . TAG , ( ( STRING_1 + id ) + STRING_2 ) ) )  android.util.Log.w ( VAR_3 . TAG , ( ( STRING_1 + id ) + STRING_2 ) ) (  return STRING_3 ; )  return STRING_3 ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME packageName ) NAME packageName ( INIT = VAR_1 . METHOD_1 ( ) ) INIT = VAR_1 . METHOD_1 ( ) ) VAR VAR ( IF IF ( COND VAR_4 ) COND VAR_4 ( THEN THEN (  android.util.Log.v ( VAR_3 . TAG , ( ( ( STRING_4 + id ) + STRING_5 ) + packageName ) ) )  android.util.Log.v ( VAR_3 . TAG , ( ( ( STRING_4 + id ) + STRING_5 ) + packageName ) ) ) THEN THEN ) IF IF (  return packageName ; )  return packageName ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME t ) NAME t ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = t . METHOD_2 ( ) ) INIT = t . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN (  VAR_2 . METHOD_3 ( ) )  VAR_2 . METHOD_3 ( ) ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = t . METHOD_4 ( ) ) INIT = t . METHOD_4 ( ) ) VAR VAR ( IF IF ( COND VAR_3 != null ) COND VAR_3 != null ( THEN THEN (  VAR_2 . METHOD_3 ( ) )  VAR_2 . METHOD_3 ( ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME pw ) NAME pw ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  pw.println ( ( ( ( ( ( ( ( ( ( ( VAR_1 + STRING_1 ) + ( VAR_2 ) ) + STRING_2 ) + ( VAR_3 ) ) + STRING_3 ) + ( VAR_4 ) ) + STRING_4 ) + ( VAR_5 ) ) + STRING_5 ) + ( VAR_6 ) ) ) )  pw.println ( ( ( ( ( ( ( ( ( ( ( VAR_1 + STRING_1 ) + ( VAR_2 ) ) + STRING_2 ) + ( VAR_3 ) ) + STRING_3 ) + ( VAR_4 ) ) + STRING_4 ) + ( VAR_5 ) ) + STRING_5 ) + ( VAR_6 ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<TYPE_2,java.lang.Integer> ) RETURN TYPE_1<TYPE_2,java.lang.Integer> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_3 ) COND VAR_3 ( THEN THEN (  java.lang.System.out.println ( java.lang.String.format ( STRING_1 , VAR_1 ) ) )  java.lang.System.out.println ( java.lang.String.format ( STRING_1 , VAR_1 ) ) ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1<TYPE_2,TYPE_5> ) TYPE TYPE_1<TYPE_2,TYPE_5> ( NAME result ) NAME result ( INIT = TYPE_6 . METHOD_2 ( VAR_1 , false , VAR_2 , null ) ) INIT = TYPE_6 . METHOD_2 ( VAR_1 , false , VAR_2 , null ) ) VAR VAR (  return TYPE_1 . of ( result . METHOD_3 ( ) , result . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( ) ) ; )  return TYPE_1 . of ( result . METHOD_3 ( ) , result . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( ) ) INIT = TYPE_2 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_3 ( ) ) INIT = new TYPE_3 ( ) ) VAR VAR ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_3 ( ) ) INIT = METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_4 ( STRING_1 ) ) INIT = new TYPE_4 ( STRING_1 ) ) VAR VAR (  VAR_4 . METHOD_4 ( VAR_3 ) )  VAR_4 . METHOD_4 ( VAR_3 ) (  VAR_4 . METHOD_5 ( VAR_2 ) )  VAR_4 . METHOD_5 ( VAR_2 ) (  METHOD_6 ( VAR_1 , VAR_4 , false ) )  METHOD_6 ( VAR_1 , VAR_4 , false ) (  METHOD_7 ( VAR_2 ) )  METHOD_7 ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  METHOD_3 ( ) )  METHOD_3 ( ) (  METHOD_4 ( ) )  METHOD_4 ( ) (  METHOD_5 ( ) )  METHOD_5 ( ) (  METHOD_6 ( ) )  METHOD_6 ( ) (  METHOD_7 ( ) )  METHOD_7 ( ) (  METHOD_8 ( ) )  METHOD_8 ( ) (  METHOD_9 ( ) )  METHOD_9 ( ) (  METHOD_10 ( ) )  METHOD_10 ( ) (  VAR_1 = 0 )  VAR_1 = 0 (  VAR_2 . size = 1 )  VAR_2 . size = 1 (  VAR_3 = VAR_4 . METHOD_11 ( ) )  VAR_3 = VAR_4 . METHOD_11 ( ) (  VAR_5 . METHOD_12 ( ) )  VAR_5 . METHOD_12 ( ) (  VAR_5 . METHOD_13 ( VAR_6 ) )  VAR_5 . METHOD_13 ( VAR_6 ) (  VAR_5 . METHOD_14 ( VAR_7 ) )  VAR_5 . METHOD_14 ( VAR_7 ) (  new TYPE_2 ( ) . METHOD_15 ( VAR_4 ) )  new TYPE_2 ( ) . METHOD_15 ( VAR_4 ) (  return VAR_4 ; )  return VAR_4 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( ) ) INIT = TYPE_1 . METHOD_2 ( ) ) VAR VAR (  METHOD_3 ( VAR_1 , STRING_1 ) )  METHOD_3 ( VAR_1 , STRING_1 ) ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.io.File ( VAR_1 , VAR_3 ) ) INIT = new java.io.File ( VAR_1 , VAR_3 ) ) VAR VAR ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_4 ) NAME VAR_4 ( INIT = new java.io.File ( VAR_1 , VAR_5 ) ) INIT = new java.io.File ( VAR_1 , VAR_5 ) ) VAR VAR ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_6 ) NAME VAR_6 ( INIT = new java.io.File ( VAR_1 , VAR_7 ) ) INIT = new java.io.File ( VAR_1 , VAR_7 ) ) VAR VAR (  TYPE_2 . assertTrue ( VAR_2 . METHOD_4 ( ) ) )  TYPE_2 . assertTrue ( VAR_2 . METHOD_4 ( ) ) (  TYPE_2 . assertTrue ( VAR_4 . METHOD_4 ( ) ) )  TYPE_2 . assertTrue ( VAR_4 . METHOD_4 ( ) ) (  TYPE_2 . assertTrue ( VAR_6 . METHOD_4 ( ) ) )  TYPE_2 . assertTrue ( VAR_6 . METHOD_4 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME app ) NAME app ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( ( ( ( app . METHOD_2 ( ) ) != ( VAR_1 ) ) && ( ( app . METHOD_2 ( ) ) != ( VAR_2 ) ) ) && ( ( app . METHOD_2 ( ) ) != ( VAR_3 ) ) ) && ( ( app . METHOD_2 ( ) ) != ( VAR_4 ) ) ) && ( ( app . METHOD_2 ( ) ) != ( VAR_5 ) ) ) COND ( ( ( ( ( app . METHOD_2 ( ) ) != ( VAR_1 ) ) && ( ( app . METHOD_2 ( ) ) != ( VAR_2 ) ) ) && ( ( app . METHOD_2 ( ) ) != ( VAR_3 ) ) ) && ( ( app . METHOD_2 ( ) ) != ( VAR_4 ) ) ) && ( ( app . METHOD_2 ( ) ) != ( VAR_5 ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public synchronized ) MODIFIER public synchronized ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) != null ) COND ( VAR_1 ) != null ( THEN THEN ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  android.util.Log.d ( VAR_3 . TAG , STRING_1 ) )  android.util.Log.d ( VAR_3 . TAG , STRING_1 ) ) THEN THEN ) IF IF (  VAR_1 = null )  VAR_1 = null (  VAR_4 . METHOD_2 ( VAR_5 ) )  VAR_4 . METHOD_2 ( VAR_5 ) ) THEN THEN ) IF IF (  VAR_6 . METHOD_3 ( false ) )  VAR_6 . METHOD_3 ( false ) (  VAR_6 . METHOD_4 ( ) )  VAR_6 . METHOD_4 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( ( VAR_2 ) & ( VAR_3 ) ) != 0 ) != VAR_1 ) COND ( ( ( VAR_2 ) & ( VAR_3 ) ) != 0 ) != VAR_1 ( THEN THEN (  VAR_2 = ( ( VAR_2 ) & ( ~ ( VAR_3 ) ) ) | ( VAR_1 ? VAR_3 : 0 ) )  VAR_2 = ( ( VAR_2 ) & ( ~ ( VAR_3 ) ) ) | ( VAR_1 ? VAR_3 : 0 ) ( IF IF ( COND ! VAR_1 ) COND ! VAR_1 ( THEN THEN (  METHOD_2 ( ) )  METHOD_2 ( ) ) THEN THEN ) IF IF (  METHOD_3 ( ) )  METHOD_3 ( ) (  METHOD_4 ( ) )  METHOD_4 ( ) (  METHOD_5 ( VAR_1 ) )  METHOD_5 ( VAR_1 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME content ) NAME content ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME input ) NAME input ( INIT = TYPE_3 . METHOD_2 ( content ) ) INIT = TYPE_3 . METHOD_2 ( content ) ) VAR VAR ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME output ) NAME output ( INIT = java.io.File . METHOD_3 ( STRING_2 , STRING_3 ) ) INIT = java.io.File . METHOD_3 ( STRING_2 , STRING_3 ) ) VAR VAR (  output . METHOD_4 ( ) )  output . METHOD_4 ( ) (  TYPE_4 . METHOD_5 ( ) . METHOD_6 ( input , output , new TYPE_5 ( ) , VAR_1 , false , new TYPE_6 ( new TYPE_7 ( VAR_2 ) ) ) )  TYPE_4 . METHOD_5 ( ) . METHOD_6 ( input , output , new TYPE_5 ( ) , VAR_1 , false , new TYPE_6 ( new TYPE_7 ( VAR_2 ) ) ) (  TYPE_3 . METHOD_7 ( content , output ) )  TYPE_3 . METHOD_7 ( content , output ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 class . METHOD_2 ( ( STRING_1 + name ) ) ) INIT = VAR_2 class . METHOD_2 ( ( STRING_1 + name ) ) ) VAR VAR ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN ( TRY TRY ( BLOCK BLOCK (  return TYPE_3 . METHOD_3 ( VAR_1 ) ; )  return TYPE_3 . METHOD_3 ( VAR_1 ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK (  TYPE_4 . log ( e , STRING_2 , name ) )  TYPE_4 . log ( e , STRING_2 , name ) ) BLOCK BLOCK ) CATCH CATCH ( FINALLY FINALLY ( TRY TRY ( BLOCK BLOCK (  VAR_1 . METHOD_4 ( ) )  VAR_1 . METHOD_4 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) FINALLY FINALLY ) TRY TRY ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_2 ( VAR_3 ) . get ( VAR_1 ) ) INIT = TYPE_2 . METHOD_2 ( VAR_3 ) . get ( VAR_1 ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME p ) NAME p ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK (  assertTrue ( ( ( STRING_2 + p ) + STRING_3 ) , p . METHOD_3 ( ) ) )  assertTrue ( ( ( STRING_2 + p ) + STRING_3 ) , p . METHOD_3 ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME version ) NAME version ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_5 = name )  VAR_5 = name (  VAR_6 = TYPE_1 . METHOD_2 ( VAR_1 , VAR_7 ) )  VAR_6 = TYPE_1 . METHOD_2 ( VAR_1 , VAR_7 ) (  super . METHOD_1 ( TYPE_2 . METHOD_3 ( version , VAR_8 ) , VAR_1 , name , VAR_2 , VAR_3 , VAR_4 ) )  super . METHOD_1 ( TYPE_2 . METHOD_3 ( version , VAR_8 ) , VAR_1 , name , VAR_2 , VAR_3 , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<android.bluetooth.BluetoothDevice> ) RETURN java.util.List<android.bluetooth.BluetoothDevice> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int[] ) TYPE int[] ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  android.util.Log.v ( TYPE_1 . TAG , STRING_1 ) )  android.util.Log.v ( TYPE_1 . TAG , STRING_1 ) ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME service ) NAME service ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( IF IF ( COND service == null ) COND service == null ( THEN THEN (  return new java.util.ArrayList < android.bluetooth.BluetoothDevice > ( 0 ) ; )  return new java.util.ArrayList < android.bluetooth.BluetoothDevice > ( 0 ) ; ) THEN THEN ) IF IF (  return service . METHOD_1 ( VAR_1 ) ; )  return service . METHOD_1 ( VAR_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE android.os.Message ) TYPE android.os.Message ( NAME msg ) NAME msg ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE android.os.Message ) TYPE android.os.Message ( NAME VAR_3 ) NAME VAR_3 ( INIT = android.os.Message . METHOD_2 ( ) ) INIT = android.os.Message . METHOD_2 ( ) ) VAR VAR (  VAR_4 = VAR_1 )  VAR_4 = VAR_1 (  VAR_3 . arg1 = VAR_2 )  VAR_3 . arg1 = VAR_2 ( TRY TRY ( BLOCK BLOCK (  VAR_5 . METHOD_3 ( VAR_3 ) )  VAR_5 . METHOD_3 ( VAR_3 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME v ) NAME v ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  Main . METHOD_2 ( ) )  Main . METHOD_2 ( ) ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME VAR_6 ) NAME VAR_6 ( INIT = Main . METHOD_3 ( 0 , null , VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ) INIT = Main . METHOD_3 ( 0 , null , VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ) VAR VAR (  v . METHOD_4 ( VAR_6 , VAR_5 ) )  v . METHOD_4 ( VAR_6 , VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE android.bluetooth.BluetoothDevice ) TYPE android.bluetooth.BluetoothDevice ( NAME device ) NAME device ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( IN VAR_3 ) IN VAR_3 ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( IN VAR_2 . METHOD_2 ( ) ) IN VAR_2 . METHOD_2 ( ) ( BLOCK BLOCK (  android.util.Log.w ( VAR_5 . TAG , ( ( ( STRING_1 + ( VAR_4 . METHOD_3 ( ) ) ) + STRING_2 ) + VAR_1 ) ) )  android.util.Log.w ( VAR_5 . TAG , ( ( ( STRING_1 + ( VAR_4 . METHOD_3 ( ) ) ) + STRING_2 ) + VAR_1 ) ) ( IF IF ( COND ( VAR_4 . METHOD_3 ( ) ) == VAR_1 ) COND ( VAR_4 . METHOD_3 ( ) ) == VAR_1 ( THEN THEN (  return VAR_4 ; )  return VAR_4 ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME b ) NAME b ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < 10 ) COND i < 10 ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME d ) NAME d ( INIT = b . toString ( ) . METHOD_2 ( STRING_1 , 1 ) ) INIT = b . toString ( ) . METHOD_2 ( STRING_1 , 1 ) ) VAR VAR ) BLOCK BLOCK ) FOR FOR (  return b . length ( ) ; )  return b . length ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_1 ) ( METHOD_2 ( ) . METHOD_3 ( VAR_3 ) ) ) ) INIT = ( ( TYPE_1 ) ( METHOD_2 ( ) . METHOD_3 ( VAR_3 ) ) ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_1 . toString ( ) ) INIT = VAR_1 . toString ( ) ) VAR VAR (  VAR_2 . METHOD_4 ( VAR_4 ) )  VAR_2 . METHOD_4 ( VAR_4 ) ( IF IF ( COND VAR_4 . equals ( STRING_1 ) ) COND VAR_4 . equals ( STRING_1 ) ( THEN THEN (  VAR_2 . METHOD_5 ( false ) )  VAR_2 . METHOD_5 ( false ) ) THEN THEN ( ELSE ELSE (  VAR_2 . METHOD_5 ( true ) )  VAR_2 . METHOD_5 ( true ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<?superTYPE_2> ) TYPE TYPE_1<?superTYPE_2> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( this ) )  VAR_1 . METHOD_2 ( this ) (  VAR_2 . METHOD_1 ( VAR_1 ) )  VAR_2 . METHOD_1 ( VAR_1 ) ( IF IF ( COND ( VAR_3 ) != null ) COND ( VAR_3 ) != null ( THEN THEN (  VAR_3 . METHOD_1 ( VAR_1 ) )  VAR_3 . METHOD_1 ( VAR_1 ) ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_4 ) != null ) COND ( VAR_4 ) != null ( THEN THEN (  VAR_4 . METHOD_1 ( VAR_1 ) )  VAR_4 . METHOD_1 ( VAR_1 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME a ) NAME a ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME r ) NAME r ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME b ) NAME b ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( VAR_1 , ( ( ( ( a < < INT_1 ) | ( ( r & INT_2 ) < < 16 ) ) | ( ( VAR_2 & INT_2 ) < < 8 ) ) | ( b & INT_2 ) ) , VAR_3 ) )  TYPE_1 . METHOD_2 ( VAR_1 , ( ( ( ( a < < INT_1 ) | ( ( r & INT_2 ) < < 16 ) ) | ( ( VAR_2 & INT_2 ) < < 8 ) ) | ( b & INT_2 ) ) , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME c ) NAME c ( INIT = TYPE_1 . METHOD_2 ( ) ) INIT = TYPE_1 . METHOD_2 ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) )  VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) (  fail ( ) )  fail ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME expected ) NAME expected ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  METHOD_5 ( TYPE_3 . METHOD_2 ( null ) ) )  METHOD_5 ( TYPE_3 . METHOD_2 ( null ) ) (  c . METHOD_6 ( ) )  c . METHOD_6 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE float ) TYPE float ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE float ) TYPE float ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE float ) TYPE float ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE float ) TYPE float ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME d ) NAME d ( INIT = VAR_6 . METHOD_2 ( VAR_1 ) ) INIT = VAR_6 . METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND d == null ) COND d == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  TYPE_1 . METHOD_3 ( VAR_7 , ( - VAR_4 ) , ( - VAR_5 ) ) )  TYPE_1 . METHOD_3 ( VAR_7 , ( - VAR_4 ) , ( - VAR_5 ) ) (  d . METHOD_4 ( TYPE_1 . METHOD_5 ( VAR_2 , VAR_3 ) ) )  d . METHOD_4 ( TYPE_1 . METHOD_5 ( VAR_2 , VAR_3 ) ) (  d . METHOD_4 ( TYPE_1 . METHOD_6 ( VAR_4 , VAR_5 ) ) )  d . METHOD_4 ( TYPE_1 . METHOD_6 ( VAR_4 , VAR_5 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_2 ( VAR_2 . METHOD_3 ( ) ) ) INIT = METHOD_2 ( VAR_2 . METHOD_3 ( ) ) ) VAR VAR ( IF IF ( COND VAR_4 == null ) COND VAR_4 == null ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF (  return TYPE_5 . METHOD_4 ( VAR_2 , VAR_4 , VAR_3 ) ; )  return TYPE_5 . METHOD_4 ( VAR_2 , VAR_4 , VAR_3 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < ( VAR_2 ) ) COND i < ( VAR_2 ) ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 [ i ] ) INIT = VAR_4 [ i ] ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_6 [ i ] ) INIT = VAR_6 [ i ] ) VAR VAR ( IF IF ( COND ( ( VAR_3 != null ) && ( VAR_5 != null ) ) && ( ( VAR_3 . METHOD_1 ( VAR_5 ) ) == false ) ) COND ( ( VAR_3 != null ) && ( VAR_5 != null ) ) && ( ( VAR_3 . METHOD_1 ( VAR_5 ) ) == false ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR FOR (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME in ) NAME in ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_1 . type = in . METHOD_2 ( ) )  VAR_1 . type = in . METHOD_2 ( ) (  VAR_2 = in . METHOD_2 ( ) )  VAR_2 = in . METHOD_2 ( ) (  VAR_3 = in . METHOD_2 ( ) )  VAR_3 = in . METHOD_2 ( ) (  VAR_4 = in . METHOD_2 ( ) )  VAR_4 = in . METHOD_2 ( ) (  VAR_5 = in . METHOD_2 ( ) )  VAR_5 = in . METHOD_2 ( ) (  VAR_6 = in . METHOD_3 ( ) )  VAR_6 = in . METHOD_3 ( ) (  VAR_7 = in . METHOD_3 ( ) )  VAR_7 = in . METHOD_3 ( ) (  VAR_8 = in . METHOD_4 ( ) )  VAR_8 = in . METHOD_4 ( ) (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( TYPE_1 . METHOD_2 ( ) ) ) COND ! ( TYPE_1 . METHOD_2 ( ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_2 . METHOD_3 ( VAR_1 ) ) INIT = TYPE_2 . METHOD_3 ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_2 == ( VAR_5 ) ) INIT = VAR_2 == ( VAR_5 ) ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_6 ) NAME VAR_6 ( INIT = ( TYPE_3 . METHOD_4 ( VAR_2 ) ) || ( VAR_2 == ( VAR_7 ) ) ) INIT = ( TYPE_3 . METHOD_4 ( VAR_2 ) ) || ( VAR_2 == ( VAR_7 ) ) ) VAR VAR (  return ( ( ! VAR_3 ) && ( VAR_4 || VAR_6 ) ) && ( TYPE_2 . METHOD_5 ( VAR_1 ) ) ; )  return ( ( ! VAR_3 ) && ( VAR_4 || VAR_6 ) ) && ( TYPE_2 . METHOD_5 ( VAR_1 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME type ) NAME type ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  android.util.Log.d ( VAR_2 . TAG , ( ( ( STRING_1 + type ) + STRING_2 ) + VAR_1 ) ) )  android.util.Log.d ( VAR_2 . TAG , ( ( ( STRING_1 + type ) + STRING_2 ) + VAR_1 ) ) ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_2 ( VAR_1 ) ) INIT = METHOD_2 ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_2 . METHOD_3 ( VAR_5 ) . METHOD_4 ( VAR_3 ) . METHOD_5 ( ) ) INIT = TYPE_2 . METHOD_3 ( VAR_5 ) . METHOD_4 ( VAR_3 ) . METHOD_5 ( ) ) VAR VAR ( IF IF ( COND type == ( VAR_6 ) ) COND type == ( VAR_6 ) ( THEN THEN (  METHOD_6 ( ) )  METHOD_6 ( ) ) THEN THEN ) IF IF (  VAR_7 . METHOD_7 ( type , VAR_4 ) )  VAR_7 . METHOD_7 ( type , VAR_4 ) (  VAR_8 = VAR_3 )  VAR_8 = VAR_3 ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME m ) NAME m ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME v ) NAME v ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME value ) NAME value ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = false ) INIT = false ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( IF IF ( COND v == null ) COND v == null ( THEN THEN (  m . METHOD_2 ( value ) )  m . METHOD_2 ( value ) ) THEN THEN ( ELSE ELSE (  m . METHOD_2 ( v , value ) )  m . METHOD_2 ( v , value ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_2 = true )  VAR_2 = true ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  TYPE_4 . METHOD_3 ( VAR_2 , VAR_1 ) )  TYPE_4 . METHOD_3 ( VAR_2 , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_2 ) NAME METHOD_2 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_2 . METHOD_3 ( VAR_3 ) )  VAR_2 . METHOD_3 ( VAR_3 ) (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_3 ) RETURN TYPE_3 ( NAME METHOD_4 ) NAME METHOD_4 ( BLOCK BLOCK (  return VAR_4 this ; )  return VAR_4 this ; ) BLOCK BLOCK ) METHOD METHOD (  new TYPE_2 ( ) { public boolean METHOD_2 ( TYPE_1 VAR_3 ) { VAR_2 . METHOD_3 ( VAR_3 ) ; return true ; } public TYPE_3 METHOD_4 ( ) { return VAR_4 this ; } } . METHOD_5 ( VAR_1 ) )  new TYPE_2 ( ) { public boolean METHOD_2 ( TYPE_1 VAR_3 ) { VAR_2 . METHOD_3 ( VAR_3 ) ; return true ; } public TYPE_3 METHOD_4 ( ) { return VAR_4 this ; } } . METHOD_5 ( VAR_1 ) (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = ++ ( VAR_3 ) ) INIT = ++ ( VAR_3 ) ) VAR VAR (  VAR_4 . METHOD_2 ( VAR_2 , VAR_1 ) )  VAR_4 . METHOD_2 ( VAR_2 , VAR_1 ) (  VAR_5 . METHOD_4 ( VAR_1 ) )  VAR_5 . METHOD_4 ( VAR_1 ) ( IF IF ( COND VAR_6 ) COND VAR_6 ( THEN THEN (  java.lang.System.out.println ( ( ( ( STRING_1 + ( VAR_7 . METHOD_5 ( ) ) ) + STRING_2 ) + VAR_2 ) ) )  java.lang.System.out.println ( ( ( ( STRING_1 + ( VAR_7 . METHOD_5 ( ) ) ) + STRING_2 ) + VAR_2 ) ) ) THEN THEN ) IF IF (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  super . METHOD_1 ( VAR_1 ) )  super . METHOD_1 ( VAR_1 ) ( IF IF ( COND ( VAR_2 ) != null ) COND ( VAR_2 ) != null ( THEN THEN (  METHOD_2 ( VAR_2 , TYPE_2 . METHOD_3 ( VAR_3 ) ) )  METHOD_2 ( VAR_2 , TYPE_2 . METHOD_3 ( VAR_3 ) ) ) THEN THEN ) IF IF (  TYPE_3 . METHOD_4 ( ) . METHOD_5 ( this ) )  TYPE_3 . METHOD_4 ( ) . METHOD_5 ( this ) (  TYPE_3 . METHOD_4 ( ) . METHOD_6 ( this ) )  TYPE_3 . METHOD_4 ( ) . METHOD_6 ( this ) (  TYPE_3 . METHOD_4 ( ) . METHOD_7 ( this ) )  TYPE_3 . METHOD_4 ( ) . METHOD_7 ( this ) (  TYPE_3 . METHOD_4 ( ) . METHOD_8 ( this ) )  TYPE_3 . METHOD_4 ( ) . METHOD_8 ( this ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME res ) NAME res ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME path ) NAME path ) VAR VAR ( VAR VAR ( TYPE float ) TYPE float ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( ) )  VAR_1 . METHOD_2 ( ) ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = res . METHOD_3 ( ) . VAR_4 ) INIT = res . METHOD_3 ( ) . VAR_4 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_1 . METHOD_4 ( path , VAR_2 , VAR_3 ) ) INIT = VAR_1 . METHOD_4 ( path , VAR_2 , VAR_3 ) ) VAR VAR ( IF IF ( COND VAR_5 == 0 ) COND VAR_5 == 0 ( THEN THEN (  throw new android.renderscript.RSRuntimeException ( ( STRING_1 + path ) ) ; )  throw new android.renderscript.RSRuntimeException ( ( STRING_1 + path ) ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_6 ) NAME VAR_6 ( INIT = new TYPE_1 ( VAR_5 , VAR_1 ) ) INIT = new TYPE_1 ( VAR_5 , VAR_1 ) ) VAR VAR (  return VAR_6 ; )  return VAR_6 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME subId ) NAME subId ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( TYPE_1 . METHOD_2 ( VAR_2 , VAR_1 , STRING_1 ) ) ) COND ! ( TYPE_1 . METHOD_2 ( VAR_2 , VAR_1 , STRING_1 ) ) ( THEN THEN (  return VAR_3 ; )  return VAR_3 ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_3 ( subId ) ) INIT = METHOD_3 ( subId ) ) VAR VAR ( IF IF ( COND VAR_4 == null ) COND VAR_4 == null ( THEN THEN (  return VAR_3 ; )  return VAR_3 ; ) THEN THEN ( ELSE ELSE (  return VAR_4 . METHOD_4 ( ) ; )  return VAR_4 . METHOD_4 ( ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME flags ) NAME flags ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  return ( ( ( ( ( VAR_1 ) != null ) && ( ( VAR_1 . METHOD_3 ( ) ) != ( VAR_2 ) ) ) && ( ( VAR_1 . METHOD_3 ( ) ) != ( VAR_3 ) ) ) && ( VAR_1 . METHOD_4 ( ) ) ) && ( ( flags & ( VAR_4 ) ) != 0 ) ; )  return ( ( ( ( ( VAR_1 ) != null ) && ( ( VAR_1 . METHOD_3 ( ) ) != ( VAR_2 ) ) ) && ( ( VAR_1 . METHOD_3 ( ) ) != ( VAR_3 ) ) ) && ( VAR_1 . METHOD_4 ( ) ) ) && ( ( flags & ( VAR_4 ) ) != 0 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( ) ) INIT = TYPE_1 . METHOD_2 ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_1 . METHOD_3 ( STRING_1 ) ) INIT = TYPE_1 . METHOD_3 ( STRING_1 ) ) VAR VAR (  TYPE_1 . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , null , true ) )  TYPE_1 . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , null , true ) ) BLOCK BLOCK ( FINALLY FINALLY (  TYPE_1 . METHOD_5 ( VAR_1 ) )  TYPE_1 . METHOD_5 ( VAR_1 ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( PARAMS PARAMS ( VAR VAR ( TYPE com.android.jack.ir.ast.JMethod ) TYPE com.android.jack.ir.ast.JMethod ( NAME method ) NAME method ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( ( method . METHOD_1 ( ) . METHOD_2 ( ) ) || ( method . METHOD_3 ( ) ) ) || ( method . METHOD_4 ( ) ) ) || ( ! ( VAR_1 . METHOD_5 ( this . METHOD_6 ( ) , method ) ) ) ) COND ( ( ( method . METHOD_1 ( ) . METHOD_2 ( ) ) || ( method . METHOD_3 ( ) ) ) || ( method . METHOD_4 ( ) ) ) || ( ! ( VAR_1 . METHOD_5 ( this . METHOD_6 ( ) , method ) ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( method ) ) INIT = new TYPE_1 ( method ) ) VAR VAR (  VAR_2 . METHOD_5 ( method ) )  VAR_2 . METHOD_5 ( method ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME expected ) NAME expected ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME msg ) NAME msg ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 != expected ) COND VAR_1 != expected ( THEN THEN (  java.lang.System.out.println ( ( ( ( ( msg + STRING_1 ) + VAR_1 ) + STRING_2 ) + expected ) ) )  java.lang.System.out.println ( ( ( ( ( msg + STRING_1 ) + VAR_1 ) + STRING_2 ) + expected ) ) (  TYPE_1 . METHOD_2 ( ( - 1 ) ) )  TYPE_1 . METHOD_2 ( ( - 1 ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME value ) NAME value ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME m ) NAME m ( INIT = TYPE_3 . METHOD_2 ( value ) ) INIT = TYPE_3 . METHOD_2 ( value ) ) VAR VAR ( IF IF ( COND m . METHOD_3 ( ) ) COND m . METHOD_3 ( ) ( THEN THEN (  return new TYPE_1 ( m . METHOD_4 ( 2 ) , m . METHOD_4 ( 1 ) , m . METHOD_4 ( 3 ) ) ; )  return new TYPE_1 ( m . METHOD_4 ( 2 ) , m . METHOD_4 ( 1 ) , m . METHOD_4 ( 3 ) ) ; ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( ! ( VAR_1 ) ) || ( ! ( METHOD_2 ( 1 ) ) ) ) COND ( ! ( VAR_1 ) ) || ( ! ( METHOD_2 ( 1 ) ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_3 ( ) ) INIT = METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_4 ( VAR_4 , VAR_5 , VAR_6 ) ) INIT = METHOD_4 ( VAR_4 , VAR_5 , VAR_6 ) ) VAR VAR (  METHOD_5 ( VAR_2 ) )  METHOD_5 ( VAR_2 ) (  METHOD_6 ( VAR_2 ) )  METHOD_6 ( VAR_2 ) (  METHOD_7 ( VAR_5 , VAR_7 , VAR_3 ) )  METHOD_7 ( VAR_5 , VAR_7 , VAR_3 ) (  METHOD_5 ( VAR_3 ) )  METHOD_5 ( VAR_3 ) (  METHOD_6 ( VAR_3 ) )  METHOD_6 ( VAR_3 ) (  METHOD_6 ( VAR_2 ) )  METHOD_6 ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_5 . METHOD_2 ( VAR_2 . METHOD_3 ( ) ) ) INIT = TYPE_5 . METHOD_2 ( VAR_2 . METHOD_3 ( ) ) ) VAR VAR ( IF IF ( COND VAR_4 == null ) COND VAR_4 == null ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF (  return TYPE_5 . METHOD_4 ( VAR_2 , VAR_4 , VAR_3 ) ; )  return TYPE_5 . METHOD_4 ( VAR_2 , VAR_4 , VAR_3 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.lang.Class ) RETURN java.lang.Class ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE Main ) TYPE Main ( NAME m ) NAME m ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( Main . METHOD_2 ( STRING_1 ) ) ) COND ! ( Main . METHOD_2 ( STRING_1 ) ) ( THEN THEN (  return VAR_2 class ; )  return VAR_2 class ; ) THEN THEN ) IF IF (  Main . METHOD_3 ( ) )  Main . METHOD_3 ( ) ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  Main . METHOD_4 ( STRING_1 ) )  Main . METHOD_4 ( STRING_1 ) ) THEN THEN ) IF IF ( VAR VAR ( TYPE Main ) TYPE Main ( NAME VAR_3 ) NAME VAR_3 ( INIT = m . METHOD_5 ( ) ) INIT = m . METHOD_5 ( ) ) VAR VAR ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN ( WHILE WHILE ( COND ! ( Main . METHOD_6 ( STRING_1 ) ) ) COND ! ( Main . METHOD_6 ( STRING_1 ) ) ( BLOCK BLOCK ) BLOCK BLOCK ) WHILE WHILE ) THEN THEN ) IF IF (  return VAR_3 . METHOD_7 ( ) ; )  return VAR_3 . METHOD_7 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN TYPE_1<TYPE_2> ) RETURN TYPE_1<TYPE_2> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_4> ) TYPE java.util.List<TYPE_4> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_5<TYPE_2> ) TYPE TYPE_5<TYPE_2> ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_5 < > ( ) ) INIT = new TYPE_5 < > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME path ) NAME path ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK (  VAR_3 . METHOD_2 ( VAR_1 . METHOD_3 ( TYPE_6 . METHOD_4 ( path ) ) ) )  VAR_3 . METHOD_2 ( VAR_1 . METHOD_3 ( TYPE_6 . METHOD_4 ( path ) ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_3 . build ( ) ; )  return VAR_3 . build ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.io.File[] ) TYPE java.io.File[] ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND VAR_2 == null ) COND VAR_2 == null ( THEN THEN (  throw new java.lang.IllegalArgumentException ( ( STRING_1 + VAR_1 ) ) ; )  throw new java.lang.IllegalArgumentException ( ( STRING_1 + VAR_1 ) ) ; ) THEN THEN ) IF IF ( FOR-EACH FOR-EACH ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK ( IF IF ( COND VAR_3 . METHOD_3 ( ) ) COND VAR_3 . METHOD_3 ( ) ( THEN THEN (  TYPE_1 . METHOD_1 ( VAR_3 ) )  TYPE_1 . METHOD_1 ( VAR_3 ) ) THEN THEN ) IF IF ( IF IF ( COND ! ( VAR_3 . METHOD_4 ( ) ) ) COND ! ( VAR_3 . METHOD_4 ( ) ) ( THEN THEN (  throw new java.io.IOException ( ( STRING_2 + VAR_3 ) ) ; )  throw new java.io.IOException ( ( STRING_2 + VAR_3 ) ) ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( ( VAR_4 ) != VAR_1 ) || ( ( VAR_5 ) != VAR_2 ) ) || ( ( VAR_6 ) != VAR_3 ) ) COND ( ( ( VAR_4 ) != VAR_1 ) || ( ( VAR_5 ) != VAR_2 ) ) || ( ( VAR_6 ) != VAR_3 ) ( THEN THEN (  VAR_4 = ( ( VAR_7 ) && ( VAR_1 == ( VAR_8 ) ) ) ? METHOD_2 ( ) : VAR_1 )  VAR_4 = ( ( VAR_7 ) && ( VAR_1 == ( VAR_8 ) ) ) ? METHOD_2 ( ) : VAR_1 (  VAR_5 = VAR_2 )  VAR_5 = VAR_2 (  VAR_6 = VAR_3 )  VAR_6 = VAR_3 (  METHOD_3 ( ) )  METHOD_3 ( ) (  METHOD_4 ( new TYPE_1 ( ) . METHOD_5 ( ) ) )  METHOD_4 ( new TYPE_1 ( ) . METHOD_5 ( ) ) (  METHOD_6 ( ) )  METHOD_6 ( ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_2 ( ) ) INIT = TYPE_2 . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME data ) NAME data ( INIT = VAR_2 . METHOD_3 ( VAR_1 ) ) INIT = VAR_2 . METHOD_3 ( VAR_1 ) ) VAR VAR ( IF IF ( COND data != null ) COND data != null ( THEN THEN ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_3 ) NAME VAR_3 ( INIT = data . METHOD_4 ( ) ) INIT = data . METHOD_4 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_3 . METHOD_5 ( ) ) INIT = VAR_3 . METHOD_5 ( ) ) VAR VAR ( IF IF ( COND VAR_4 != null ) COND VAR_4 != null ( THEN THEN (  VAR_4 . METHOD_6 ( VAR_5 . METHOD_7 ( ) ) )  VAR_4 . METHOD_6 ( VAR_5 . METHOD_7 ( ) ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN int[] ) RETURN int[] ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int[] ) TYPE int[] ( NAME VAR_2 ) NAME VAR_2 ( INIT = new int [ 4 ] ) INIT = new int [ 4 ] ) VAR VAR (  VAR_2 [ 0 ] = METHOD_2 ( VAR_1 ) )  VAR_2 [ 0 ] = METHOD_2 ( VAR_1 ) (  VAR_2 [ 1 ] = METHOD_2 ( VAR_1 ) )  VAR_2 [ 1 ] = METHOD_2 ( VAR_1 ) (  VAR_2 [ 2 ] = METHOD_2 ( VAR_1 ) )  VAR_2 [ 2 ] = METHOD_2 ( VAR_1 ) (  VAR_2 [ 3 ] = METHOD_2 ( VAR_1 ) )  VAR_2 [ 3 ] = METHOD_2 ( VAR_1 ) (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 . METHOD_2 ( VAR_1 ) ) INIT = VAR_4 . METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_3 == null ) COND VAR_3 == null ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_5 ) NAME VAR_5 ( INIT = new TYPE_3 ( VAR_6 ) ) INIT = new TYPE_3 ( VAR_6 ) ) VAR VAR ( IF IF ( COND VAR_5 . METHOD_3 ( ) ) COND VAR_5 . METHOD_3 ( ) ( THEN THEN ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN (  VAR_3 . METHOD_4 ( VAR_2 ) )  VAR_3 . METHOD_4 ( VAR_2 ) ) THEN THEN ) IF IF (  return true ; )  return true ; ) THEN THEN ) IF IF (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( new TYPE_2 ( ) , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 < java.lang.String > METHOD_2 ( ) ) ) INIT = new TYPE_1 ( new TYPE_2 ( ) , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 < java.lang.String > METHOD_2 ( ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_8 ) NAME VAR_8 ( INIT = new TYPE_4 ( VAR_9 ) . METHOD_3 ( VAR_1 ) . build ( ) ) INIT = new TYPE_4 ( VAR_9 ) . METHOD_3 ( VAR_1 ) . build ( ) ) VAR VAR (  assertTrue ( VAR_8 . METHOD_4 ( ) . METHOD_5 ( ) ) )  assertTrue ( VAR_8 . METHOD_4 ( ) . METHOD_5 ( ) ) (  assertEquals ( VAR_1 , VAR_8 . METHOD_4 ( ) . get ( ) ) )  assertEquals ( VAR_1 , VAR_8 . METHOD_4 ( ) . get ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_1 . METHOD_2 ( true ) )  VAR_1 . METHOD_2 ( true ) (  assertTrue ( STRING_1 , VAR_1 . METHOD_3 ( ) ) )  assertTrue ( STRING_1 , VAR_1 . METHOD_3 ( ) ) (  VAR_1 . METHOD_2 ( false ) )  VAR_1 . METHOD_2 ( false ) (  assertFalse ( STRING_2 , VAR_1 . METHOD_3 ( ) ) )  assertFalse ( STRING_2 , VAR_1 . METHOD_3 ( ) ) (  VAR_1 . METHOD_4 ( ) )  VAR_1 . METHOD_4 ( ) ( TRY TRY ( BLOCK BLOCK (  VAR_1 . METHOD_3 ( ) )  VAR_1 . METHOD_3 ( ) (  fail ( STRING_3 ) )  fail ( STRING_3 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( VAR_3 , VAR_4 ) ) INIT = new TYPE_1 ( VAR_3 , VAR_4 ) ) VAR VAR (  VAR_2 . METHOD_2 ( VAR_5 ) )  VAR_2 . METHOD_2 ( VAR_5 ) (  VAR_2 . METHOD_2 ( VAR_1 . length ) )  VAR_2 . METHOD_2 ( VAR_1 . length ) ( FOR-EACH FOR-EACH ( TYPE byte ) TYPE byte ( NAME b ) NAME b ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  VAR_2 . METHOD_3 ( b ) )  VAR_2 . METHOD_3 ( b ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME element ) NAME element ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND element instanceof TYPE_1 ) COND element instanceof TYPE_1 ( THEN THEN ( VAR VAR ( TYPE java.util.ArrayList<TYPE_1> ) TYPE java.util.ArrayList<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_1 ) ( element ) ) . METHOD_2 ( ) ) INIT = ( ( TYPE_1 ) ( element ) ) . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN (  return ( VAR_1 . size ( ) ) > 0 ; )  return ( VAR_1 . size ( ) ) > 0 ; ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME match ) NAME match ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_3 . METHOD_1 ( ) ) COND VAR_3 . METHOD_1 ( ) ( THEN THEN (  return VAR_4 ; )  return VAR_4 ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_5 ) NAME VAR_5 ( INIT = TYPE_2 . METHOD_2 ( VAR_1 ) ) INIT = TYPE_2 . METHOD_2 ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_6 ) NAME VAR_6 ( INIT = VAR_7 ) INIT = VAR_7 ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_8 ) NAME VAR_8 ( IN VAR_3 ) IN VAR_3 ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME match ) NAME match ( INIT = VAR_8 . match ( VAR_5 , VAR_2 ) ) INIT = VAR_8 . match ( VAR_5 , VAR_2 ) ) VAR VAR ( IF IF ( COND match > VAR_6 ) COND match > VAR_6 ( THEN THEN (  VAR_6 = match )  VAR_6 = match ( IF IF ( COND VAR_6 == ( VAR_9 ) ) COND VAR_6 == ( VAR_9 ) ( THEN THEN (  return VAR_6 ; )  return VAR_6 ; ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_6 ; )  return VAR_6 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_3 . METHOD_1 ( VAR_1 ) ) INIT = VAR_3 . METHOD_1 ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME type ) NAME type ( INIT = VAR_1 . METHOD_2 ( ) . METHOD_3 ( VAR_4 ) ) INIT = VAR_1 . METHOD_2 ( ) . METHOD_3 ( VAR_4 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_6 ) NAME VAR_6 ( INIT = new TYPE_1 ( VAR_5 , VAR_2 , type ) ) INIT = new TYPE_1 ( VAR_5 , VAR_2 , type ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_7 ) TYPE TYPE_7 ( NAME VAR_7 ) NAME VAR_7 ( IN VAR_8 ) IN VAR_8 ( BLOCK BLOCK (  VAR_6 . METHOD_4 ( VAR_7 . METHOD_1 ( VAR_1 , type ) ) )  VAR_6 . METHOD_4 ( VAR_7 . METHOD_1 ( VAR_1 , type ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_6 ; )  return VAR_6 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME t ) NAME t ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME r ) NAME r ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME b ) NAME b ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! VAR_1 ) COND ! VAR_1 ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < VAR_3 ) COND i < VAR_3 ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_3 ( i ) ) INIT = METHOD_3 ( i ) ) VAR VAR (  VAR_4 . METHOD_4 ( 0 , 0 , VAR_4 . METHOD_5 ( ) , VAR_4 . METHOD_6 ( ) ) )  VAR_4 . METHOD_4 ( 0 , 0 , VAR_4 . METHOD_5 ( ) , VAR_4 . METHOD_6 ( ) ) ) BLOCK BLOCK ) FOR FOR ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( METHOD_2 ( ) , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ) INIT = new TYPE_1 ( METHOD_2 ( ) , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ) VAR VAR (  assertEquals ( STRING_1 , METHOD_2 ( ) , VAR_1 . METHOD_2 ( ) ) )  assertEquals ( STRING_1 , METHOD_2 ( ) , VAR_1 . METHOD_2 ( ) ) (  assertEquals ( STRING_2 , VAR_2 , VAR_1 . METHOD_3 ( ) ) )  assertEquals ( STRING_2 , VAR_2 , VAR_1 . METHOD_3 ( ) ) (  assertEquals ( STRING_3 , VAR_3 , VAR_1 . METHOD_4 ( ) ) )  assertEquals ( STRING_3 , VAR_3 , VAR_1 . METHOD_4 ( ) ) (  assertEquals ( STRING_4 , VAR_5 , VAR_1 . METHOD_5 ( ) ) )  assertEquals ( STRING_4 , VAR_5 , VAR_1 . METHOD_5 ( ) ) (  assertEquals ( STRING_5 , VAR_6 , VAR_1 . METHOD_6 ( ) ) )  assertEquals ( STRING_5 , VAR_6 , VAR_1 . METHOD_6 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public final ) MODIFIER public final ( RETURN int[] ) RETURN int[] ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = size ( ) ) INIT = size ( ) ) VAR VAR ( VAR VAR ( TYPE int[] ) TYPE int[] ( NAME result ) NAME result ( INIT = new int [ VAR_1 ] ) INIT = new int [ VAR_1 ] ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < VAR_1 ) COND i < VAR_1 ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_1 ) ( METHOD_2 ( i ) ) ) ) INIT = ( ( TYPE_1 ) ( METHOD_2 ( i ) ) ) ) VAR VAR ( IF IF ( COND VAR_2 == null ) COND VAR_2 == null ( THEN THEN (  throw new java.lang.NullPointerException ( ( STRING_1 + i ) ) ; )  throw new java.lang.NullPointerException ( ( STRING_1 + i ) ) ; ) THEN THEN ) IF IF (  result [ i ] = VAR_2 . METHOD_3 ( ) )  result [ i ] = VAR_2 . METHOD_3 ( ) ) BLOCK BLOCK ) FOR FOR (  TYPE_2 . METHOD_4 ( result ) )  TYPE_2 . METHOD_4 ( result ) (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_3 . METHOD_2 ( ) )  VAR_3 . METHOD_2 ( ) (  TYPE_2 . METHOD_3 ( VAR_1 ) )  TYPE_2 . METHOD_3 ( VAR_1 ) (  VAR_2 = TYPE_2 . METHOD_4 ( VAR_1 ) )  VAR_2 = TYPE_2 . METHOD_4 ( VAR_1 ) ( IF IF ( COND VAR_2 == 0 ) COND VAR_2 == 0 ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF ) BLOCK BLOCK ( FINALLY FINALLY (  VAR_3 . METHOD_5 ( ) )  VAR_3 . METHOD_5 ( ) ) FINALLY FINALLY ) TRY TRY (  return TYPE_2 . METHOD_6 ( ) . METHOD_7 ( VAR_2 ) ; )  return TYPE_2 . METHOD_6 ( ) . METHOD_7 ( VAR_2 ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Throwable ) TYPE java.lang.Throwable ( NAME e ) NAME e ( BLOCK BLOCK (  throw TYPE_3 . METHOD_8 ( e ) ; )  throw TYPE_3 . METHOD_8 ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected static ) MODIFIER protected static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ( INIT = VAR_1 ) INIT = VAR_1 ) VAR VAR ( IF IF ( COND result == null ) COND result == null ( THEN THEN (  VAR_1 = result = new TYPE_1 ( null , null , null , new TYPE_3 ( ) , new TYPE_4 ( ) ) )  VAR_1 = result = new TYPE_1 ( null , null , null , new TYPE_3 ( ) , new TYPE_4 ( ) ) ) THEN THEN ) IF IF (  return ( ( TYPE_1 ) ( result . METHOD_2 ( ) ) ) ; )  return ( ( TYPE_1 ) ( result . METHOD_2 ( ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER synchronized ) MODIFIER synchronized ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME x ) NAME x ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME y ) NAME y ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  return METHOD_3 ( mContext , VAR_1 , x , y , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; )  return METHOD_3 ( mContext , VAR_1 , x , y , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( VAR_2 ) )  VAR_1 . METHOD_2 ( VAR_2 ) (  TYPE_1 . METHOD_3 ( ) . METHOD_4 ( ) )  TYPE_1 . METHOD_3 ( ) . METHOD_4 ( ) (  TYPE_1 . METHOD_5 ( ) )  TYPE_1 . METHOD_5 ( ) (  org.mockito.Mockito.verify ( VAR_3 ) . METHOD_6 ( TYPE_2 . METHOD_7 ( ) , TYPE_2 . METHOD_8 ( ) ) )  org.mockito.Mockito.verify ( VAR_3 ) . METHOD_6 ( TYPE_2 . METHOD_7 ( ) , TYPE_2 . METHOD_8 ( ) ) (  TYPE_2 . METHOD_9 ( VAR_3 ) )  TYPE_2 . METHOD_9 ( VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE float ) TYPE float ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE float ) TYPE float ( NAME t ) NAME t ) VAR VAR ( VAR VAR ( TYPE float ) TYPE float ( NAME r ) NAME r ) VAR VAR ( VAR VAR ( TYPE float ) TYPE float ( NAME b ) NAME b ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_6 . METHOD_2 ( VAR_1 ) ) INIT = VAR_6 . METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_5 == null ) COND VAR_5 == null ( THEN THEN (  return 0 ; )  return 0 ; ) THEN THEN ) IF IF (  return VAR_5 . METHOD_3 ( new TYPE_2 ( VAR_2 , t , r , b ) , VAR_3 , VAR_4 ) ; )  return VAR_5 . METHOD_3 ( new TYPE_2 ( VAR_2 , t , r , b ) , VAR_3 , VAR_4 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public synchronized ) MODIFIER public synchronized ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME netId ) NAME netId ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_6 ) NAME VAR_6 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME uid ) NAME uid ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( STRING_1 , netId , VAR_1 , VAR_2 , VAR_3 ) )  TYPE_1 . METHOD_2 ( STRING_1 , netId , VAR_1 , VAR_2 , VAR_3 ) ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_7 ) NAME VAR_7 ( INIT = TYPE_2 . METHOD_3 ( ) ) INIT = TYPE_2 . METHOD_3 ( ) ) VAR VAR (  METHOD_4 ( VAR_7 , netId ) . METHOD_5 ( VAR_1 , VAR_2 , VAR_3 ) )  METHOD_4 ( VAR_7 , netId ) . METHOD_5 ( VAR_1 , VAR_2 , VAR_3 ) ( IF IF ( COND ( VAR_8 ) != null ) COND ( VAR_8 ) != null ( THEN THEN (  VAR_8 . METHOD_1 ( VAR_4 , VAR_5 , VAR_6 , VAR_7 , uid ) )  VAR_8 . METHOD_1 ( VAR_4 , VAR_5 , VAR_6 , VAR_7 , uid ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( STRING_1 ) ) INIT = TYPE_1 . METHOD_2 ( STRING_1 ) ) VAR VAR (  VAR_1 = STRING_2 )  VAR_1 = STRING_2 (  java.lang.System.out.println ( VAR_1 ) )  java.lang.System.out.println ( VAR_1 ) ( IF IF ( COND ( VAR_1 != null ) && ( ( VAR_1 . length ( ) ) != 0 ) ) COND ( VAR_1 != null ) && ( ( VAR_1 . length ( ) ) != 0 ) ( THEN THEN (  return ( VAR_1 + ( VAR_2 ) ) + ( VAR_3 ) ; )  return ( VAR_1 + ( VAR_2 ) ) + ( VAR_3 ) ; ) THEN THEN ) IF IF (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN android.os.Bundle ) RETURN android.os.Bundle ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME b ) NAME b ( INIT = TYPE_2 . METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ) INIT = TYPE_2 . METHOD_2 ( ) . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = b . METHOD_5 ( VAR_3 ) ) INIT = b . METHOD_5 ( VAR_3 ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( INIT = b . METHOD_6 ( VAR_5 ) ) INIT = b . METHOD_6 ( VAR_5 ) ) VAR VAR ( VAR VAR ( TYPE android.os.Bundle ) TYPE android.os.Bundle ( NAME VAR_6 ) NAME VAR_6 ( INIT = new android.os.Bundle ( ) ) INIT = new android.os.Bundle ( ) ) VAR VAR (  VAR_6 . METHOD_7 ( VAR_7 , VAR_2 ) )  VAR_6 . METHOD_7 ( VAR_7 , VAR_2 ) (  VAR_6 . METHOD_8 ( VAR_8 , VAR_4 ) )  VAR_6 . METHOD_8 ( VAR_8 , VAR_4 ) (  return VAR_6 ; )  return VAR_6 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Set<java.lang.String> ) TYPE java.util.Set<java.lang.String> ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_2 < java.lang.String > ( TYPE_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) ) INIT = new TYPE_2 < java.lang.String > ( TYPE_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.Set<java.lang.String> ) TYPE java.util.Set<java.lang.String> ( NAME VAR_5 ) NAME VAR_5 ( INIT = new TYPE_2 < java.lang.String > ( TYPE_3 . METHOD_2 ( VAR_3 ) ) ) INIT = new TYPE_2 < java.lang.String > ( TYPE_3 . METHOD_2 ( VAR_3 ) ) ) VAR VAR (  assertEquals ( VAR_5 , VAR_4 ) )  assertEquals ( VAR_5 , VAR_4 ) (  assertEquals ( VAR_2 , VAR_1 . METHOD_4 ( ) ) )  assertEquals ( VAR_2 , VAR_1 . METHOD_4 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME key ) NAME key ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME value ) NAME value ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME uid ) NAME uid ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  return ( VAR_1 . METHOD_2 ( key , value , uid ) ) == ( VAR_2 ) ; )  return ( VAR_1 . METHOD_2 ( key , value , uid ) ) == ( VAR_2 ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME e ) NAME e ( BLOCK BLOCK (  android.util.Log.w ( VAR_3 . TAG , STRING_1 , e ) )  android.util.Log.w ( VAR_3 . TAG , STRING_1 , e ) (  return false ; )  return false ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2<TYPE_3> ) TYPE TYPE_2<TYPE_3> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( VAR_1 . METHOD_2 ( ) ) + VAR_2 ) INIT = ( VAR_1 . METHOD_2 ( ) ) + VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_1 . METHOD_3 ( VAR_3 ) ) INIT = VAR_1 . METHOD_3 ( VAR_3 ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME id ) NAME id ( INIT = ( ( STRING_1 + VAR_3 ) + STRING_2 ) + ( METHOD_4 ( VAR_4 . METHOD_5 ( ) ) ) ) INIT = ( ( STRING_1 + VAR_3 ) + STRING_2 ) + ( METHOD_4 ( VAR_4 . METHOD_5 ( ) ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_6 ) NAME VAR_6 ( INIT = METHOD_6 ( id , id , METHOD_7 ( VAR_4 . METHOD_5 ( ) ) , null ) ) INIT = METHOD_6 ( id , id , METHOD_7 ( VAR_4 . METHOD_5 ( ) ) , null ) ) VAR VAR (  return VAR_6 ; )  return VAR_6 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.ArrayList<TYPE_2> ) TYPE java.util.ArrayList<TYPE_2> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . size ( ) ) INIT = VAR_1 . size ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ( INIT = new TYPE_1 ( VAR_2 ) ) INIT = new TYPE_1 ( VAR_2 ) ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < VAR_2 ) COND i < VAR_2 ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK (  result . set ( i , VAR_1 . get ( i ) . METHOD_2 ( ) ) )  result . set ( i , VAR_1 . get ( i ) . METHOD_2 ( ) ) ) BLOCK BLOCK ) FOR FOR (  result . METHOD_3 ( ) )  result . METHOD_3 ( ) (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( IF IF ( COND ( VAR_2 < 0 ) || ( VAR_2 > 11 ) ) COND ( VAR_2 < 0 ) || ( VAR_2 > 11 ) ( THEN THEN (  VAR_1 += VAR_2 / 12 )  VAR_1 += VAR_2 / 12 (  VAR_2 %= 12 )  VAR_2 %= 12 ) THEN THEN ) IF IF ( IF IF ( COND VAR_2 == 12 ) COND VAR_2 == 12 ( THEN THEN (  VAR_4 = 1 )  VAR_4 = 1 ) THEN THEN ( ELSE ELSE (  VAR_4 = VAR_2 + 1 )  VAR_4 = VAR_2 + 1 ) ELSE ELSE ) IF IF ( VAR VAR ( TYPE double ) TYPE double ( NAME VAR_5 ) NAME VAR_5 ( INIT = TYPE_1 . METHOD_2 ( VAR_1 , VAR_4 , 1 ) ) INIT = TYPE_1 . METHOD_2 ( VAR_1 , VAR_4 , 1 ) ) VAR VAR (  return ( ( int ) ( VAR_5 ) ) ; )  return ( ( int ) ( VAR_5 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.io.File ) RETURN java.io.File ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( STRING_1 , STRING_2 ) ) INIT = TYPE_1 . METHOD_2 ( STRING_1 , STRING_2 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_1 . METHOD_3 ( VAR_3 class ) ) INIT = TYPE_1 . METHOD_3 ( VAR_3 class ) ) VAR VAR (  VAR_2 . METHOD_4 ( TYPE_1 . METHOD_5 ( STRING_3 ) ) )  VAR_2 . METHOD_4 ( TYPE_1 . METHOD_5 ( STRING_3 ) ) (  VAR_2 . METHOD_6 ( null , VAR_1 , true ) )  VAR_2 . METHOD_6 ( null , VAR_1 , true ) (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME s ) NAME s ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i <= INT_1 ) COND i <= INT_1 ( UPDATE UPDATE (  ++ i )  ++ i ) UPDATE UPDATE ( BLOCK BLOCK (  s . METHOD_2 ( i ) )  s . METHOD_2 ( i ) (  assertEquals ( ( i & ( ~ ( VAR_1 ) ) ) , s . METHOD_3 ( ) ) )  assertEquals ( ( i & ( ~ ( VAR_1 ) ) ) , s . METHOD_3 ( ) ) ) BLOCK BLOCK ) FOR FOR ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE java.lang.Class<?> ) TYPE java.lang.Class<?> ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE TYPE_3<java.lang.String> ) TYPE TYPE_3<java.lang.String> ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_6 ) NAME VAR_6 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_7 ) NAME VAR_7 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_8 ) NAME VAR_8 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_9 class . METHOD_2 ( VAR_4 ) ) COND VAR_9 class . METHOD_2 ( VAR_4 ) ( THEN THEN (  return new TYPE_5 ( VAR_1 , VAR_8 , VAR_4 ) ; )  return new TYPE_5 ( VAR_1 , VAR_8 , VAR_4 ) ; ) THEN THEN ( ELSE ELSE (  return null ; )  return null ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( VAR_1 ) ) INIT = METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND ( VAR_3 ) && ( VAR_2 != ( VAR_4 ) ) ) COND ( VAR_3 ) && ( VAR_2 != ( VAR_4 ) ) ( THEN THEN (  return VAR_5 ; )  return VAR_5 ; ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_6 . METHOD_3 ( ) ) && ( ( VAR_2 . METHOD_4 ( VAR_7 ) ) > 0 ) ) COND ( VAR_6 . METHOD_3 ( ) ) && ( ( VAR_2 . METHOD_4 ( VAR_7 ) ) > 0 ) ( THEN THEN (  VAR_2 = VAR_8 )  VAR_2 = VAR_8 ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_6 . METHOD_5 ( ) ) && ( VAR_2 == ( VAR_9 ) ) ) COND ( VAR_6 . METHOD_5 ( ) ) && ( VAR_2 == ( VAR_9 ) ) ( THEN THEN (  VAR_2 = VAR_5 )  VAR_2 = VAR_5 ) THEN THEN ) IF IF (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME time ) NAME time ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE long ) TYPE long ( NAME when ) NAME when ( INIT = time . METHOD_2 ( ) ) INIT = time . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( int ) ( when / INT_1 ) ) ) INIT = ( ( int ) ( when / INT_1 ) ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_3 ( VAR_3 , VAR_1 ) ) INIT = TYPE_2 . METHOD_3 ( VAR_3 , VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_2 < 0 ) COND VAR_2 < 0 ( THEN THEN (  VAR_2 = ( ~ VAR_2 ) - 1 )  VAR_2 = ( ~ VAR_2 ) - 1 ( IF IF ( COND VAR_2 < 0 ) COND VAR_2 < 0 ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return ( VAR_4 [ ( ( VAR_5 [ VAR_2 ] ) & INT_2 ) ] ) == 1 ; )  return ( VAR_4 [ ( ( VAR_5 [ VAR_2 ] ) & INT_2 ) ] ) == 1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( METHOD_2 ( ) ) && ( ! ( ( METHOD_3 ( ) ) && ( ( ( VAR_3 ) == ( VAR_4 ) ) || ( ( VAR_3 ) == ( VAR_5 ) ) ) ) ) ) INIT = ( METHOD_2 ( ) ) && ( ! ( ( METHOD_3 ( ) ) && ( ( ( VAR_3 ) == ( VAR_4 ) ) || ( ( VAR_3 ) == ( VAR_5 ) ) ) ) ) ) VAR VAR ( IF IF ( COND ( ( ! VAR_2 ) && ( VAR_6 ) ) && ( METHOD_2 ( ) ) ) COND ( ( ! VAR_2 ) && ( VAR_6 ) ) && ( METHOD_2 ( ) ) ( THEN THEN (  log ( ( STRING_1 + ( VAR_3 ) ) ) )  log ( ( STRING_1 + ( VAR_3 ) ) ) ) THEN THEN ) IF IF (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME x ) NAME x ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME b ) NAME b ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( VAR_2 ) & ( VAR_3 ) ) > > ( VAR_4 ) ) INIT = ( ( VAR_2 ) & ( VAR_3 ) ) > > ( VAR_4 ) ) VAR VAR ( IF IF ( COND ( VAR_1 == ( VAR_5 ) ) && ( ! ( ( VAR_6 ) instanceof TYPE_3 ) ) ) COND ( VAR_1 == ( VAR_5 ) ) && ( ! ( ( VAR_6 ) instanceof TYPE_3 ) ) ( THEN THEN (  VAR_7 = true )  VAR_7 = true ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_8 ) NAME VAR_8 ( INIT = VAR_9 ) INIT = VAR_9 ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_10 ) NAME VAR_10 ( INIT = VAR_11 ) INIT = VAR_11 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_7 ) NAME VAR_7 ( INIT = ! ( VAR_8 . equals ( VAR_10 ) ) ) INIT = ! ( VAR_8 . equals ( VAR_10 ) ) ) VAR VAR ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public final ) MODIFIER public final ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME uri ) NAME uri ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( TYPE_3 . equals ( uri . METHOD_2 ( ) ) ) ) COND ! ( TYPE_3 . equals ( uri . METHOD_2 ( ) ) ) ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = uri . METHOD_3 ( ) ) INIT = uri . METHOD_3 ( ) ) VAR VAR ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN (  return METHOD_1 ( mContext , uri . METHOD_3 ( ) ) ; )  return METHOD_1 ( mContext , uri . METHOD_3 ( ) ) ; ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public synchronized ) MODIFIER public synchronized ( RETURN void ) RETURN void ( NAME run ) NAME run ( PARAMS PARAMS ( VAR VAR ( TYPE com.android.jack.ir.ast.JMethod ) TYPE com.android.jack.ir.ast.JMethod ( NAME method ) NAME method ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE com.android.jack.ir.ast.JDefinedClassOrInterface ) TYPE com.android.jack.ir.ast.JDefinedClassOrInterface ( NAME VAR_1 ) NAME VAR_1 ( INIT = method . METHOD_1 ( ) ) INIT = method . METHOD_1 ( ) ) VAR VAR ( IF IF ( COND VAR_1 . METHOD_2 ( ) ) COND VAR_1 . METHOD_2 ( ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_3 ( VAR_3 class ) ) INIT = VAR_1 . METHOD_3 ( VAR_3 class ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_2 . METHOD_4 ( ) ) INIT = VAR_2 . METHOD_4 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_5 ) NAME VAR_5 ( INIT = METHOD_5 ( method ) ) INIT = METHOD_5 ( method ) ) VAR VAR ( IF IF ( COND TYPE_4 . METHOD_6 ( method ) ) COND TYPE_4 . METHOD_6 ( method ) ( THEN THEN (  VAR_4 . METHOD_7 ( VAR_5 ) )  VAR_4 . METHOD_7 ( VAR_5 ) ) THEN THEN ( ELSE ELSE (  VAR_4 . METHOD_8 ( VAR_5 ) )  VAR_4 . METHOD_8 ( VAR_5 ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( METHOD_2 ( ) ) ) COND ! ( METHOD_2 ( ) ) ( THEN THEN (  TYPE_2 . METHOD_3 ( VAR_3 ) )  TYPE_2 . METHOD_3 ( VAR_3 ) (  return ; )  return ; ) THEN THEN ) IF IF ( TRY TRY ( BLOCK BLOCK (  METHOD_4 ( ) . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 ) )  METHOD_4 ( ) . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME e ) NAME e ( BLOCK BLOCK (  throw e . METHOD_5 ( ) ; )  throw e . METHOD_5 ( ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 ( VAR_1 ) ) INIT = new TYPE_2 ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_3 . METHOD_2 ( VAR_2 ) ) INIT = TYPE_3 . METHOD_2 ( VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME in ) NAME in ( INIT = TYPE_1 . METHOD_3 ( ) ) INIT = TYPE_1 . METHOD_3 ( ) ) VAR VAR (  in . METHOD_4 ( VAR_3 , 0 , VAR_3 . length ) )  in . METHOD_4 ( VAR_3 , 0 , VAR_3 . length ) (  in . METHOD_5 ( 0 ) )  in . METHOD_5 ( 0 ) (  VAR_2 . METHOD_6 ( ) )  VAR_2 . METHOD_6 ( ) (  return in ; )  return in ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.Map<?,?> ) TYPE java.util.Map<?,?> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 == VAR_2 ) COND VAR_1 == VAR_2 ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ( IF IF ( COND VAR_2 instanceof java.util.Map ) COND VAR_2 instanceof java.util.Map ( THEN THEN ( VAR VAR ( TYPE java.util.Map<?,?> ) TYPE java.util.Map<?,?> ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( ( java.util.Map < ? , ? > ) ( VAR_2 ) ) ) INIT = ( ( java.util.Map < ? , ? > ) ( VAR_2 ) ) ) VAR VAR (  return VAR_1 . METHOD_2 ( ) . equals ( VAR_3 . METHOD_2 ( ) ) ; )  return VAR_1 . METHOD_2 ( ) . equals ( VAR_3 . METHOD_2 ( ) ) ; ) THEN THEN ) IF IF (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( STRING_1 , VAR_2 ) ) INIT = new TYPE_1 ( STRING_1 , VAR_2 ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( STRING_2 ) )  VAR_1 . METHOD_2 ( STRING_2 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME expected ) NAME expected ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ( TRY TRY ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( STRING_3 ) )  VAR_1 . METHOD_2 ( STRING_3 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME expected ) NAME expected ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . size ( ) ) INIT = VAR_3 . size ( ) ) VAR VAR ( WHILE WHILE ( COND VAR_2 > 0 ) COND VAR_2 > 0 ( BLOCK BLOCK (  VAR_2 -- )  VAR_2 -- (  android.util.Log.v ( VAR_4 . TAG , ( ( ( ( VAR_1 + STRING_1 ) + VAR_2 ) + STRING_2 ) + ( VAR_3 . get ( VAR_2 ) ) ) ) )  android.util.Log.v ( VAR_4 . TAG , ( ( ( ( VAR_1 + STRING_1 ) + VAR_2 ) + STRING_2 ) + ( VAR_3 . get ( VAR_2 ) ) ) ) ) BLOCK BLOCK ) WHILE WHILE ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.Map<TYPE_1,java.util.Map<java.lang.String,TYPE_2>> ) RETURN java.util.Map<TYPE_1,java.util.Map<java.lang.String,TYPE_2>> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( ( VAR_1 ) == null ) && ( ( VAR_2 ) != null ) ) COND ( ( VAR_1 ) == null ) && ( ( VAR_2 ) != null ) ( THEN THEN ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME project ) NAME project ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  project . METHOD_3 ( ) )  project . METHOD_3 ( ) (  VAR_1 = project . METHOD_4 ( VAR_2 . METHOD_5 ( ) ) )  VAR_1 = project . METHOD_4 ( VAR_2 . METHOD_5 ( ) ) ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1[] ) RETURN TYPE_1[] ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( ) . METHOD_1 ( VAR_1 ) ) INIT = METHOD_2 ( ) . METHOD_1 ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1[] ) TYPE TYPE_1[] ( NAME ret ) NAME ret ( INIT = new TYPE_1 [ VAR_2 . length ] ) INIT = new TYPE_1 [ VAR_2 . length ] ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < ( ret . length ) ) COND i < ( ret . length ) ( UPDATE UPDATE (  ++ i )  ++ i ) UPDATE UPDATE ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  ret [ i ] = new TYPE_1 ( VAR_3 , VAR_2 [ i ] . METHOD_3 ( ) ) )  ret [ i ] = new TYPE_1 ( VAR_3 , VAR_2 [ i ] . METHOD_3 ( ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.NullPointerException ) TYPE java.lang.NullPointerException ( NAME VAR_4 ) NAME VAR_4 ( BLOCK BLOCK (  return null ; )  return null ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) FOR FOR (  return ret ; )  return ret ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME type ) NAME type ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SWITCH SWITCH ( NAME type . METHOD_2 ( ) ) NAME type . METHOD_2 ( ) ( CASE VAR_1 ( BLOCK BLOCK (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) CASE VAR_1 ( CASE VAR_3 ( BLOCK BLOCK (  return VAR_4 ; )  return VAR_4 ; ) BLOCK BLOCK ) CASE VAR_3 ( CASE VAR_5 ( BLOCK BLOCK (  return VAR_6 ; )  return VAR_6 ; ) BLOCK BLOCK ) CASE VAR_5 ( CASE VAR_7 ( BLOCK BLOCK (  return VAR_8 ; )  return VAR_8 ; ) BLOCK BLOCK ) CASE VAR_7 ( CASE VAR_9 ( BLOCK BLOCK (  return VAR_10 ; )  return VAR_10 ; ) BLOCK BLOCK ) CASE VAR_9 ( CASE VAR_11 ( BLOCK BLOCK (  return VAR_12 ; )  return VAR_12 ; ) BLOCK BLOCK ) CASE VAR_11 ( CASE VAR_13 ( BLOCK BLOCK (  return VAR_14 ; )  return VAR_14 ; ) BLOCK BLOCK ) CASE VAR_13 ) SWITCH SWITCH (  return TYPE_3 . METHOD_3 ( type ) ; )  return TYPE_3 . METHOD_3 ( type ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  VAR_3 = VAR_1 )  VAR_3 = VAR_1 (  VAR_4 = new TYPE_3 [ 2 ] )  VAR_4 = new TYPE_3 [ 2 ] (  VAR_4 [ 0 ] = METHOD_2 ( STRING_1 , 1 , 1 ) )  VAR_4 [ 0 ] = METHOD_2 ( STRING_1 , 1 , 1 ) (  VAR_4 [ 1 ] = METHOD_2 ( STRING_2 , 2 , 2 ) )  VAR_4 [ 1 ] = METHOD_2 ( STRING_2 , 2 , 2 ) (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  this . VAR_1 = VAR_1 )  this . VAR_1 = VAR_1 (  this . VAR_2 = VAR_2 )  this . VAR_2 = VAR_2 ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( ( TYPE_2 ) ( VAR_4 . get ( TYPE_3 . METHOD_2 ( VAR_1 ) ) ) ) ) INIT = ( ( TYPE_2 ) ( VAR_4 . get ( TYPE_3 . METHOD_2 ( VAR_1 ) ) ) ) ) VAR VAR ( IF IF ( COND VAR_3 != null ) COND VAR_3 != null ( THEN THEN ( TRY TRY ( BLOCK BLOCK (  METHOD_1 ( VAR_3 , VAR_2 ) )  METHOD_1 ( VAR_3 , VAR_2 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_5 ( STRING_1 ) ; )  throw new TYPE_5 ( STRING_1 ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) THEN THEN ( ELSE ELSE (  throw new TYPE_5 ( STRING_2 ) ; )  throw new TYPE_5 ( STRING_2 ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  VAR_2 . name = VAR_1 . getName ( ) )  VAR_2 . name = VAR_1 . getName ( ) (  VAR_3 = VAR_1 . METHOD_2 ( ) )  VAR_3 = VAR_1 . METHOD_2 ( ) (  VAR_4 = VAR_1 . METHOD_3 ( ) )  VAR_4 = VAR_1 . METHOD_3 ( ) (  VAR_5 = VAR_1 . METHOD_4 ( ) )  VAR_5 = VAR_1 . METHOD_4 ( ) (  VAR_6 = VAR_1 . METHOD_5 ( ) )  VAR_6 = VAR_1 . METHOD_5 ( ) (  VAR_7 = VAR_1 . METHOD_6 ( ) )  VAR_7 = VAR_1 . METHOD_6 ( ) (  VAR_8 = VAR_1 . METHOD_7 ( ) )  VAR_8 = VAR_1 . METHOD_7 ( ) (  VAR_9 = VAR_1 . METHOD_8 ( ) )  VAR_9 = VAR_1 . METHOD_8 ( ) (  VAR_10 = VAR_1 . METHOD_9 ( ) )  VAR_10 = VAR_1 . METHOD_9 ( ) (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME event ) NAME event ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) == null ) COND ( VAR_1 ) == null ( THEN THEN (  VAR_2 = VAR_3 )  VAR_2 = VAR_3 ) THEN THEN ( ELSE ELSE ( IF IF ( COND ( VAR_3 ) < ( VAR_2 ) ) COND ( VAR_3 ) < ( VAR_2 ) ( THEN THEN (  VAR_4 . METHOD_2 ( new TYPE_2 ( VAR_5 , event , VAR_1 ) ) )  VAR_4 . METHOD_2 ( new TYPE_2 ( VAR_5 , event , VAR_1 ) ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND ( VAR_3 ) > ( VAR_2 ) ) COND ( VAR_3 ) > ( VAR_2 ) ( THEN THEN (  VAR_2 = VAR_3 )  VAR_2 = VAR_3 ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF (  VAR_1 = event )  VAR_1 = event (  ( VAR_5 ) ++ )  ( VAR_5 ) ++ ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) != null ) COND ( VAR_1 ) != null ( THEN THEN (  VAR_1 . METHOD_2 ( ) )  VAR_1 . METHOD_2 ( ) ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_2 ) != null ) COND ( VAR_2 ) != null ( THEN THEN (  VAR_2 . METHOD_2 ( ) )  VAR_2 . METHOD_2 ( ) ) THEN THEN ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME m ) NAME m ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME v ) NAME v ) VAR VAR ( VAR VAR ( TYPE float ) TYPE float ( NAME value ) NAME value ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = false ) INIT = false ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( IF IF ( COND v == null ) COND v == null ( THEN THEN (  m . METHOD_2 ( value ) )  m . METHOD_2 ( value ) ) THEN THEN ( ELSE ELSE (  m . METHOD_2 ( v , value ) )  m . METHOD_2 ( v , value ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_2 = true )  VAR_2 = true ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  TYPE_4 . METHOD_3 ( VAR_2 , VAR_1 ) )  TYPE_4 . METHOD_3 ( VAR_2 , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( i < 0 ) || ( i > ( ( VAR_1 ) - 1 ) ) ) COND ( i < 0 ) || ( i > ( ( VAR_1 ) - 1 ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  return ( ( value [ ( i > > > 5 ) ] ) & ( VAR_2 [ ( i & INT_1 ) ] ) ) != 0 ; )  return ( ( value [ ( i > > > 5 ) ] ) & ( VAR_2 [ ( i & INT_1 ) ] ) ) != 0 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME subId ) NAME subId ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( subId ) ) INIT = METHOD_2 ( subId ) ) VAR VAR ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN ( IF IF ( COND ! ( TYPE_2 . METHOD_3 ( mContext , VAR_1 , STRING_1 ) ) ) COND ! ( TYPE_2 . METHOD_3 ( mContext , VAR_1 , STRING_1 ) ) ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME number ) NAME number ( INIT = TYPE_3 . METHOD_4 ( VAR_2 . METHOD_5 ( ) ) ) INIT = TYPE_3 . METHOD_4 ( VAR_2 . METHOD_5 ( ) ) ) VAR VAR ( IF IF ( COND VAR_3 ) COND VAR_3 ( THEN THEN (  log ( ( STRING_2 + number ) ) )  log ( ( STRING_2 + number ) ) ) THEN THEN ) IF IF (  return number ; )  return number ; ) THEN THEN ( ELSE ELSE (  loge ( ( STRING_3 + subId ) ) )  loge ( ( STRING_3 + subId ) ) (  return null ; )  return null ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME context ) NAME context ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 == ( VAR_3 ) ) COND VAR_1 == ( VAR_3 ) ( THEN THEN ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  return context . METHOD_2 ( VAR_4 ) ; )  return context . METHOD_2 ( VAR_4 ) ; ) THEN THEN ( ELSE ELSE (  return context . METHOD_2 ( VAR_5 ) ; )  return context . METHOD_2 ( VAR_5 ) ; ) ELSE ELSE ) IF IF ) THEN THEN ( ELSE ELSE ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  return context . METHOD_2 ( VAR_6 ) ; )  return context . METHOD_2 ( VAR_6 ) ; ) THEN THEN ( ELSE ELSE (  return context . METHOD_2 ( VAR_7 ) ; )  return context . METHOD_2 ( VAR_7 ) ; ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( false ) )  METHOD_2 ( false ) (  METHOD_3 ( false ) )  METHOD_3 ( false ) (  METHOD_4 ( false ) )  METHOD_4 ( false ) (  METHOD_5 ( VAR_1 , false ) )  METHOD_5 ( VAR_1 , false ) (  METHOD_6 ( false ) )  METHOD_6 ( false ) (  assertEquals ( VAR_2 , TYPE_1 . METHOD_7 ( mContext , VAR_3 , VAR_4 ) ) )  assertEquals ( VAR_2 , TYPE_1 . METHOD_7 ( mContext , VAR_3 , VAR_4 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME type ) NAME type ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( IF IF ( COND type != null ) COND type != null ( THEN THEN (  VAR_2 . METHOD_3 ( VAR_3 ) )  VAR_2 . METHOD_3 ( VAR_3 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME sb ) NAME sb ( INIT = new TYPE_2 ( VAR_4 ) ) INIT = new TYPE_2 ( VAR_4 ) ) VAR VAR (  sb.append ( VAR_3 . METHOD_4 ( type . METHOD_5 ( ) , VAR_5 ) ) )  sb.append ( VAR_3 . METHOD_4 ( type . METHOD_5 ( ) , VAR_5 ) ) (  VAR_6 = true )  VAR_6 = true (  VAR_7 . METHOD_6 ( sb . toString ( ) ) )  VAR_7 . METHOD_6 ( sb . toString ( ) ) (  VAR_6 = false )  VAR_6 = false ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  METHOD_7 ( ) )  METHOD_7 ( ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN byte[] ) RETURN byte[] ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME s ) NAME s ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( int ) ( TYPE_2 . METHOD_2 ( s , true ) ) ) ) INIT = ( ( int ) ( TYPE_2 . METHOD_2 ( s , true ) ) ) ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME result ) NAME result ( INIT = new byte [ ( VAR_2 ) + VAR_1 ] ) INIT = new byte [ ( VAR_2 ) + VAR_1 ] ) VAR VAR (  TYPE_3 . METHOD_3 ( result , 0 , ( ( short ) ( VAR_1 ) ) , VAR_3 ) )  TYPE_3 . METHOD_3 ( result , 0 , ( ( short ) ( VAR_1 ) ) , VAR_3 ) (  TYPE_2 . METHOD_1 ( result , VAR_4 , s ) )  TYPE_2 . METHOD_1 ( result , VAR_4 , s ) (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<?> ) TYPE TYPE_1<?> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME element ) NAME element ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 instanceof TYPE_2 ) COND VAR_1 instanceof TYPE_2 ( THEN THEN (  return ( ( TYPE_2 < ? > ) ( VAR_1 ) ) . count ( element ) ; )  return ( ( TYPE_2 < ? > ) ( VAR_1 ) ) . count ( element ) ; ) THEN THEN ) IF IF ( IF IF ( COND VAR_1 instanceof java.util.Set ) COND VAR_1 instanceof java.util.Set ( THEN THEN (  return ( ( java.util.Set < ? > ) ( VAR_1 ) ) . METHOD_2 ( element ) ? 1 : 0 ; )  return ( ( java.util.Set < ? > ) ( VAR_1 ) ) . METHOD_2 ( element ) ? 1 : 0 ; ) THEN THEN ) IF IF (  return TYPE_3 . METHOD_1 ( VAR_1 . METHOD_3 ( ) , element ) ; )  return TYPE_3 . METHOD_1 ( VAR_1 . METHOD_3 ( ) , element ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME expected ) NAME expected ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN (  VAR_3 = VAR_1 + STRING_2 )  VAR_3 = VAR_1 + STRING_2 ) THEN THEN ) IF IF (  TYPE_1 . fail ( ( ( ( ( ( VAR_3 + STRING_3 ) + expected ) + STRING_4 ) + VAR_2 ) + STRING_5 ) ) )  TYPE_1 . fail ( ( ( ( ( ( VAR_3 + STRING_3 ) + expected ) + STRING_4 ) + VAR_2 ) + STRING_5 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME res ) NAME res ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 = new TYPE_2 ( mRS , res , VAR_2 ) )  VAR_1 = new TYPE_2 ( mRS , res , VAR_2 ) (  VAR_3 = TYPE_3 . METHOD_2 ( mRS , TYPE_4 . METHOD_3 ( mRS ) ) )  VAR_3 = TYPE_3 . METHOD_2 ( mRS , TYPE_4 . METHOD_3 ( mRS ) ) (  METHOD_4 ( ) )  METHOD_4 ( ) (  VAR_1 . METHOD_5 ( VAR_4 ) )  VAR_1 . METHOD_5 ( VAR_4 ) (  VAR_3 . METHOD_6 ( VAR_4 ) )  VAR_3 . METHOD_6 ( VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public synchronized ) MODIFIER public synchronized ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( IF IF ( COND ! ( VAR_1 . METHOD_3 ( ) ) ) COND ! ( VAR_1 . METHOD_3 ( ) ) ( THEN THEN (  throw new TYPE_2 ( ) ; )  throw new TYPE_2 ( ) ; ) THEN THEN ) IF IF ( IF IF ( COND valid ) COND valid ( THEN THEN ( IF IF ( COND VAR_1 instanceof TYPE_3 ) COND VAR_1 instanceof TYPE_3 ( THEN THEN (  ( ( TYPE_3 ) ( VAR_1 ) ) . METHOD_1 ( this ) )  ( ( TYPE_3 ) ( VAR_1 ) ) . METHOD_1 ( this ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND VAR_1 instanceof TYPE_4 ) COND VAR_1 instanceof TYPE_4 ( THEN THEN (  ( ( TYPE_4 ) ( VAR_1 ) ) . METHOD_1 ( this ) )  ( ( TYPE_4 ) ( VAR_1 ) ) . METHOD_1 ( this ) ) THEN THEN ( ELSE ELSE (  throw new TYPE_5 ( ) ; )  throw new TYPE_5 ( ) ; ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF (  valid = false )  valid = false ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = INT_1 ) INIT = INT_1 ) VAR VAR ( VAR VAR ( TYPE short ) TYPE short ( NAME VAR_2 ) NAME VAR_2 ( INIT = INT_2 ) INIT = INT_2 ) VAR VAR ( VAR VAR ( TYPE android.os.Bundle ) TYPE android.os.Bundle ( NAME args ) NAME args ( INIT = new android.os.Bundle ( ) ) INIT = new android.os.Bundle ( ) ) VAR VAR (  args . METHOD_2 ( STRING_1 , VAR_3 ) )  args . METHOD_2 ( STRING_1 , VAR_3 ) (  args . METHOD_2 ( STRING_2 , 0 ) )  args . METHOD_2 ( STRING_2 , 0 ) (  args . METHOD_2 ( STRING_3 , VAR_1 ) )  args . METHOD_2 ( STRING_3 , VAR_1 ) (  TYPE_2 . METHOD_3 ( VAR_2 , TYPE_3 . METHOD_4 ( args ) . toString ( ) ) )  TYPE_2 . METHOD_3 ( VAR_2 , TYPE_3 . METHOD_4 ( args ) . toString ( ) ) (  TYPE_4 . METHOD_5 ( VAR_4 ) )  TYPE_4 . METHOD_5 ( VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME source ) NAME source ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND source != null ) COND source != null ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE TYPE_3<TYPE_1,java.util.ArrayList<TYPE_2>> ) TYPE TYPE_3<TYPE_1,java.util.ArrayList<TYPE_2>> ( NAME entry ) NAME entry ( IN VAR_1 . METHOD_2 ( ) ) IN VAR_1 . METHOD_2 ( ) ( BLOCK BLOCK ( IF IF ( COND entry . METHOD_3 ( ) . METHOD_4 ( source ) ) COND entry . METHOD_3 ( ) . METHOD_4 ( source ) ( THEN THEN (  return entry . METHOD_5 ( ) ; )  return entry . METHOD_5 ( ) ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK (  TYPE_4 . METHOD_3 ( VAR_3 ) . METHOD_5 ( VAR_1 , VAR_2 ) )  TYPE_4 . METHOD_3 ( VAR_3 ) . METHOD_5 ( VAR_1 , VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD (  TYPE_3 . METHOD_3 ( ) . METHOD_4 ( VAR_3 , TYPE_4 . METHOD_3 ( VAR_3 ) , new java.lang.Runnable ( ) { public void run ( ) { TYPE_4 . METHOD_3 ( VAR_3 ) . METHOD_5 ( VAR_1 , VAR_2 ) ; } } ) )  TYPE_3 . METHOD_3 ( ) . METHOD_4 ( VAR_3 , TYPE_4 . METHOD_3 ( VAR_3 ) , new java.lang.Runnable ( ) { public void run ( ) { TYPE_4 . METHOD_3 ( VAR_3 ) . METHOD_5 ( VAR_1 , VAR_2 ) ; } } ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_2 ) != null ) COND ( VAR_2 ) != null ( THEN THEN ( IF IF ( COND ! ( VAR_1 . equals ( VAR_3 ) ) ) COND ! ( VAR_1 . equals ( VAR_3 ) ) ( THEN THEN (  METHOD_2 ( ( STRING_1 + VAR_1 ) ) )  METHOD_2 ( ( STRING_1 + VAR_1 ) ) (  return false ; )  return false ; ) THEN THEN ) IF IF ( IF IF ( COND VAR_2 . METHOD_3 ( ) ) COND VAR_2 . METHOD_3 ( ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  VAR_3 = VAR_1 )  VAR_3 = VAR_1 (  VAR_2 = VAR_4 . METHOD_4 ( VAR_5 , VAR_1 ) )  VAR_2 = VAR_4 . METHOD_4 ( VAR_5 , VAR_1 ) (  VAR_2 . METHOD_5 ( ) )  VAR_2 . METHOD_5 ( ) (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME toString ) NAME toString ( BLOCK BLOCK ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_1 ( ) ) INIT = METHOD_1 ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.StringBuilder ) TYPE java.lang.StringBuilder ( NAME sb ) NAME sb ( INIT = new java.lang.StringBuilder ( ( 2 * ( VAR_1 . length ) ) ) ) INIT = new java.lang.StringBuilder ( ( 2 * ( VAR_1 . length ) ) ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE byte ) TYPE byte ( NAME b ) NAME b ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  sb.append ( VAR_2 [ ( ( b > > 4 ) & INT_1 ) ] ) . append ( VAR_2 [ ( b & INT_1 ) ] ) )  sb.append ( VAR_2 [ ( ( b > > 4 ) & INT_1 ) ] ) . append ( VAR_2 [ ( b & INT_1 ) ] ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return sb . toString ( ) ; )  return sb . toString ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < TYPE_1 > ( ) ) INIT = new java.util.ArrayList < TYPE_1 > ( ) ) VAR VAR (  VAR_1 = VAR_2 . METHOD_2 ( null ) )  VAR_1 = VAR_2 . METHOD_2 ( null ) (  android.util.Log . i ( VAR_3 . TAG , ( ( STRING_1 + ( VAR_1 . size ( ) ) ) + STRING_2 ) ) )  android.util.Log . i ( VAR_3 . TAG , ( ( STRING_1 + ( VAR_1 . size ( ) ) ) + STRING_2 ) ) (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME listener ) NAME listener ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( mContext ) == null ) COND ( mContext ) == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( METHOD_2 ( ) ) != null ) INIT = ( METHOD_2 ( ) ) != null ) VAR VAR ( IF IF ( COND ( VAR_3 ) == null ) COND ( VAR_3 ) == null ( THEN THEN (  VAR_3 = VAR_4 )  VAR_3 = VAR_4 ) THEN THEN ) IF IF (  VAR_5 . METHOD_3 ( VAR_3 , METHOD_4 ( ) , listener . callback , VAR_1 , VAR_2 ) )  VAR_5 . METHOD_3 ( VAR_3 , METHOD_4 ( ) , listener . callback , VAR_1 , VAR_2 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME ex ) NAME ex ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE java.lang.NullPointerException ) TYPE java.lang.NullPointerException ( NAME ex ) NAME ex ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  TYPE_1 . v ( VAR_3 . TAG , ( STRING_1 + VAR_1 ) ) )  TYPE_1 . v ( VAR_3 . TAG , ( STRING_1 + VAR_1 ) ) ) THEN THEN ) IF IF (  VAR_4 = TYPE_2 . METHOD_2 ( VAR_1 , TYPE_3 . METHOD_3 ( ) ) )  VAR_4 = TYPE_2 . METHOD_2 ( VAR_1 , TYPE_3 . METHOD_3 ( ) ) (  VAR_5 = new TYPE_2 ( VAR_4 , TYPE_3 . METHOD_3 ( ) ) )  VAR_5 = new TYPE_2 ( VAR_4 , TYPE_3 . METHOD_3 ( ) ) (  VAR_5 . METHOD_4 ( ( ! ( VAR_6 ) ) ) )  VAR_5 . METHOD_4 ( ( ! ( VAR_6 ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<?> ) TYPE java.util.List<?> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = 1 ) INIT = 1 ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  VAR_2 = ( INT_1 * VAR_2 ) + ( VAR_3 == null ? 0 : VAR_3 . METHOD_2 ( ) ) )  VAR_2 = ( INT_1 * VAR_2 ) + ( VAR_3 == null ? 0 : VAR_3 . METHOD_2 ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  s = new TYPE_1 ( STRING_1 ) )  s = new TYPE_1 ( STRING_1 ) (  assertNotNull ( s ) )  assertNotNull ( s ) (  s . METHOD_2 ( ) )  s . METHOD_2 ( ) ( TRY TRY ( BLOCK BLOCK (  s = new TYPE_1 ( ( ( java.lang.String ) ( null ) ) ) )  s = new TYPE_1 ( ( ( java.lang.String ) ( null ) ) ) (  fail ( STRING_2 ) )  fail ( STRING_2 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.NullPointerException ) TYPE java.lang.NullPointerException ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_3 ) COND VAR_3 ( THEN THEN (  android.util.Log.d ( VAR_4 . TAG , ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + VAR_2 ) ) )  android.util.Log.d ( VAR_4 . TAG , ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + VAR_2 ) ) ) THEN THEN ) IF IF (  VAR_5 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_2 ) )  VAR_5 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_2 ) ( IF IF ( COND VAR_1 == ( VAR_6 ) ) COND VAR_1 == ( VAR_6 ) ( THEN THEN (  METHOD_4 ( VAR_1 ) )  METHOD_4 ( VAR_1 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( VAR_1 ) ) INIT = new TYPE_1 ( VAR_1 ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_2 . METHOD_2 ( ) )  VAR_2 . METHOD_2 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( BLOCK BLOCK (  METHOD_3 ( VAR_3 ) )  METHOD_3 ( VAR_3 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  METHOD_4 ( VAR_2 ) )  METHOD_4 ( VAR_2 ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME t ) NAME t ( INIT = METHOD_5 ( new TYPE_4 ( VAR_2 ) ) ) INIT = METHOD_5 ( new TYPE_4 ( VAR_2 ) ) ) VAR VAR (  METHOD_6 ( VAR_2 , t ) )  METHOD_6 ( VAR_2 , t ) (  t . METHOD_7 ( ) )  t . METHOD_7 ( ) (  assertTrue ( VAR_2 . METHOD_8 ( ) ) )  assertTrue ( VAR_2 . METHOD_8 ( ) ) (  assertTrue ( VAR_2 . METHOD_9 ( ) ) )  assertTrue ( VAR_2 . METHOD_9 ( ) ) (  METHOD_10 ( t ) )  METHOD_10 ( t ) (  METHOD_11 ( VAR_2 ) )  METHOD_11 ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  android.util.Log.e ( TYPE_3 . TAG , ( STRING_1 + ( VAR_3 ) ) ) )  android.util.Log.e ( TYPE_3 . TAG , ( STRING_1 + ( VAR_3 ) ) ) ( SYNCHRONIZED SYNCHRONIZED (  VAR_4 )  VAR_4 ( BLOCK BLOCK ( IF IF ( COND METHOD_3 ( ) ) COND METHOD_3 ( ) ( THEN THEN (  VAR_3 = TYPE_3 . METHOD_4 ( ) )  VAR_3 = TYPE_3 . METHOD_4 ( ) (  VAR_5 = VAR_2 )  VAR_5 = VAR_2 ( IF IF ( COND TYPE_3 . METHOD_5 ( VAR_6 , VAR_3 , VAR_1 ) ) COND TYPE_3 . METHOD_5 ( VAR_6 , VAR_3 , VAR_1 ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  VAR_5 = null )  VAR_5 = null (  return false ; )  return false ; ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 . id ) == ( VAR_3 ) ) COND ( VAR_1 . id ) == ( VAR_3 ) ( THEN THEN ( IF IF ( COND ! ( TYPE_2 . METHOD_2 ( this ) ) ) COND ! ( TYPE_2 . METHOD_2 ( this ) ) ( THEN THEN (  TYPE_3 . METHOD_3 ( this , METHOD_4 ( ) . METHOD_5 ( VAR_4 ) , VAR_5 ) . METHOD_6 ( ) )  TYPE_3 . METHOD_3 ( this , METHOD_4 ( ) . METHOD_5 ( VAR_4 ) , VAR_5 ) . METHOD_6 ( ) (  METHOD_7 ( new android.content.Intent ( VAR_6 ) ) )  METHOD_7 ( new android.content.Intent ( VAR_6 ) ) (  return ; )  return ; ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  super . METHOD_1 ( VAR_1 , VAR_2 ) )  super . METHOD_1 ( VAR_1 , VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<TYPE_2> ) RETURN TYPE_1<TYPE_2> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME method ) NAME method ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME m ) NAME m ( INIT = METHOD_2 ( method ) ) INIT = METHOD_2 ( method ) ) VAR VAR ( IF IF ( COND m == null ) COND m == null ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_2 ) != null ) COND ( VAR_2 ) != null ( THEN THEN (  return VAR_2 . get ( VAR_1 ) ; )  return VAR_2 . get ( VAR_1 ) ; ) THEN THEN ) IF IF (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME equals ) NAME equals ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME obj ) NAME obj ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( this ) == obj ) COND ( this ) == obj ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ( IF IF ( COND obj == null ) COND obj == null ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( IF IF ( COND ( METHOD_1 ( ) ) != ( obj . METHOD_1 ( ) ) ) COND ( METHOD_1 ( ) ) != ( obj . METHOD_1 ( ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_1 ) ( obj ) ) ) INIT = ( ( TYPE_1 ) ( obj ) ) ) VAR VAR ( IF IF ( COND ( VAR_2 ) == null ) COND ( VAR_2 ) == null ( THEN THEN ( IF IF ( COND ( VAR_3 ) != null ) COND ( VAR_3 ) != null ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ) THEN THEN ( ELSE ELSE ( IF IF ( COND ! ( VAR_2 . equals ( VAR_3 ) ) ) COND ! ( VAR_2 . equals ( VAR_3 ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( VAR_2 ) & ( VAR_3 ) ) == ( VAR_3 ) ) COND ( ( VAR_2 ) & ( VAR_3 ) ) == ( VAR_3 ) ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF ( IF IF ( COND ( ( VAR_2 ) & ( VAR_4 ) ) == ( VAR_4 ) ) COND ( ( VAR_2 ) & ( VAR_4 ) ) == ( VAR_4 ) ( THEN THEN (  METHOD_2 ( VAR_1 ) )  METHOD_2 ( VAR_1 ) ) THEN THEN ) IF IF (  return VAR_1 ? ( VAR_5 ) == null ? null : VAR_5 . get ( ) : ( VAR_6 ) == null ? null : VAR_6 . get ( ) ; )  return VAR_1 ? ( VAR_5 ) == null ? null : VAR_5 . get ( ) : ( VAR_6 ) == null ? null : VAR_6 . get ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_2 ) == null ) COND ( VAR_2 ) == null ( THEN THEN ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME b ) NAME b ( INIT = new TYPE_3 ( VAR_1 ) ) INIT = new TYPE_3 ( VAR_1 ) ) VAR VAR (  b . METHOD_2 ( VAR_3 ) )  b . METHOD_2 ( VAR_3 ) (  b . METHOD_3 ( VAR_4 ) )  b . METHOD_3 ( VAR_4 ) (  b . METHOD_4 ( VAR_5 ) )  b . METHOD_4 ( VAR_5 ) (  b . METHOD_5 ( VAR_5 ) )  b . METHOD_5 ( VAR_5 ) (  VAR_2 = b . METHOD_6 ( ) )  VAR_2 = b . METHOD_6 ( ) ) THEN THEN ) IF IF (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME start ) NAME start ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( start < 0 ) || ( start > ( input . length ( ) ) ) ) COND ( start < 0 ) || ( start > ( input . length ( ) ) ) ( THEN THEN (  throw new TYPE_1 ( ( ( ( STRING_1 + start ) + STRING_2 ) + ( input . length ( ) ) ) ) ; )  throw new TYPE_1 ( ( ( ( STRING_1 + start ) + STRING_2 ) + ( input . length ( ) ) ) ) ; ) THEN THEN ) IF IF (  VAR_1 = TYPE_2 . METHOD_2 ( address , input , start , VAR_2 ) )  VAR_1 = TYPE_2 . METHOD_2 ( address , input , start , VAR_2 ) (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.io.File[] ) TYPE java.io.File[] ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND VAR_3 != null ) COND VAR_3 != null ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_4 ) NAME VAR_4 ( IN VAR_3 ) IN VAR_3 ( BLOCK BLOCK ( IF IF ( COND ( VAR_4 . METHOD_3 ( ) ) && ( ! ( METHOD_4 ( VAR_4 ) ) ) ) COND ( VAR_4 . METHOD_3 ( ) ) && ( ! ( METHOD_4 ( VAR_4 ) ) ) ( THEN THEN ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_5 ) NAME VAR_5 ( INIT = TYPE_4 . METHOD_5 ( VAR_4 ) ) INIT = TYPE_4 . METHOD_5 ( VAR_4 ) ) VAR VAR ( IF IF ( COND VAR_5 != null ) COND VAR_5 != null ( THEN THEN (  METHOD_6 ( VAR_1 , VAR_4 , VAR_5 , VAR_2 ) )  METHOD_6 ( VAR_1 , VAR_4 , VAR_5 , VAR_2 ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ( VAR VAR ( TYPE java.util.List<?extendsTYPE_2> ) TYPE java.util.List<?extendsTYPE_2> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  VAR_3 )  VAR_3 ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME id ) NAME id ( IN VAR_3 ) IN VAR_3 ( BLOCK BLOCK ( IF IF ( COND id . equals ( name , VAR_1 ) ) COND id . equals ( name , VAR_1 ) ( THEN THEN (  return id ; )  return id ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_1 ( name , VAR_1 , VAR_2 ) ) INIT = new TYPE_1 ( name , VAR_1 , VAR_2 ) ) VAR VAR (  VAR_3 . METHOD_2 ( VAR_4 ) )  VAR_3 . METHOD_2 ( VAR_4 ) (  return VAR_4 ; )  return VAR_4 ; ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN java.io.File ) RETURN java.io.File ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_4 . METHOD_2 ( ) ) INIT = TYPE_4 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_5 . METHOD_3 ( ) ) INIT = TYPE_5 . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_6 ( VAR_2 ) ) INIT = new TYPE_6 ( VAR_2 ) ) VAR VAR (  VAR_1 . METHOD_4 ( VAR_3 ) )  VAR_1 . METHOD_4 ( VAR_3 ) (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( e . METHOD_2 ( TYPE_3 . METHOD_3 ( VAR_1 ) ) ) ) COND ! ( e . METHOD_2 ( TYPE_3 . METHOD_3 ( VAR_1 ) ) ) ( THEN THEN (  throw new TYPE_4 ( STRING_1 ) ; )  throw new TYPE_4 ( STRING_1 ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE int ) TYPE int ( NAME id ) NAME id ( INIT = VAR_1 . METHOD_4 ( 2 , e . METHOD_5 ( VAR_1 ) ) ) INIT = VAR_1 . METHOD_4 ( 2 , e . METHOD_5 ( VAR_1 ) ) ) VAR VAR (  return new TYPE_1 ( id , VAR_1 ) ; )  return new TYPE_1 ( id , VAR_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 . METHOD_2 ( ) . METHOD_3 ( VAR_1 ) ) INIT = VAR_4 . METHOD_2 ( ) . METHOD_3 ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_5 ) NAME VAR_5 ( INIT = TYPE_8 . METHOD_4 ( ) . build ( VAR_3 , VAR_2 ) ) INIT = TYPE_8 . METHOD_4 ( ) . build ( VAR_3 , VAR_2 ) ) VAR VAR (  VAR_6 . METHOD_5 ( VAR_5 ) )  VAR_6 . METHOD_5 ( VAR_5 ) (  return VAR_5 ; )  return VAR_5 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( null == VAR_1 ) || ( VAR_1 . equals ( STRING_1 ) ) ) COND ( null == VAR_1 ) || ( VAR_1 . equals ( STRING_1 ) ) ( THEN THEN (  throw new java.lang.IllegalArgumentException ( STRING_2 ) ; )  throw new java.lang.IllegalArgumentException ( STRING_2 ) ; ) THEN THEN ( ELSE ELSE ( IF IF ( COND ( METHOD_2 ( ) ) == ( VAR_2 ) ) COND ( METHOD_2 ( ) ) == ( VAR_2 ) ( THEN THEN (  throw new TYPE_1 ( STRING_3 ) ; )  throw new TYPE_1 ( STRING_3 ) ; ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF (  return METHOD_3 ( VAR_3 , VAR_1 ) ; )  return METHOD_3 ( VAR_3 , VAR_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  TYPE_1 . log ( STRING_1 ) )  TYPE_1 . log ( STRING_1 ) ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME service ) NAME service ( INIT = VAR_2 ) INIT = VAR_2 ) VAR VAR ( IF IF ( COND service != null ) COND service != null ( THEN THEN ( TRY TRY ( BLOCK BLOCK (  service . METHOD_1 ( ) )  service . METHOD_1 ( ) (  return true ; )  return true ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME e ) NAME e ( BLOCK BLOCK (  android.util.Log.e ( TYPE_1 . TAG , e.toString ( ) ) )  android.util.Log.e ( TYPE_1 . TAG , e.toString ( ) ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) THEN THEN ( ELSE ELSE (  android.util.Log.w ( TYPE_1 . TAG , STRING_2 ) )  android.util.Log.w ( TYPE_1 . TAG , STRING_2 ) ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  TYPE_1 . log ( android.util.Log . METHOD_2 ( new java.lang.Throwable ( ) ) ) )  TYPE_1 . log ( android.util.Log . METHOD_2 ( new java.lang.Throwable ( ) ) ) ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN long ) RETURN long ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( IF IF ( COND VAR_1 == 16 ) COND VAR_1 == 16 ( THEN THEN (  return TYPE_2 . METHOD_2 ( ) ; )  return TYPE_2 . METHOD_2 ( ) ; ) THEN THEN ( ELSE ELSE ( IF IF ( COND VAR_1 == INT_1 ) COND VAR_1 == INT_1 ( THEN THEN (  return TYPE_2 . METHOD_3 ( ) ; )  return TYPE_2 . METHOD_3 ( ) ; ) THEN THEN ( ELSE ELSE (  throw new java.lang.RuntimeException ( ( STRING_1 + VAR_1 ) ) ; )  throw new java.lang.RuntimeException ( ( STRING_1 + VAR_1 ) ) ; ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( ) ) INIT = TYPE_2 . METHOD_2 ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( IF IF ( COND ! ( TYPE_3 . METHOD_3 ( VAR_1 ) . METHOD_4 ( STRING_1 ) ) ) COND ! ( TYPE_3 . METHOD_3 ( VAR_1 ) . METHOD_4 ( STRING_1 ) ) ( THEN THEN (  java.lang.System.out.println ( STRING_2 ) )  java.lang.System.out.println ( STRING_2 ) (  return ; )  return ; ) THEN THEN ) IF IF (  TYPE_4 . METHOD_5 ( VAR_1 ) )  TYPE_4 . METHOD_5 ( VAR_1 ) (  TYPE_4 . METHOD_6 ( VAR_1 ) )  TYPE_4 . METHOD_6 ( VAR_1 ) (  TYPE_4 . METHOD_7 ( VAR_1 ) )  TYPE_4 . METHOD_7 ( VAR_1 ) (  TYPE_4 . METHOD_8 ( VAR_1 ) )  TYPE_4 . METHOD_8 ( VAR_1 ) (  TYPE_4 . METHOD_9 ( VAR_1 ) )  TYPE_4 . METHOD_9 ( VAR_1 ) ) BLOCK BLOCK ( FINALLY FINALLY (  TYPE_2 . METHOD_10 ( VAR_1 ) )  TYPE_2 . METHOD_10 ( VAR_1 ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  VAR_3 )  VAR_3 ( BLOCK BLOCK (  VAR_1 = METHOD_2 ( VAR_1 ) )  VAR_1 = METHOD_2 ( VAR_1 ) (  VAR_2 = METHOD_2 ( VAR_2 ) )  VAR_2 = METHOD_2 ( VAR_2 ) (  VAR_3 . METHOD_3 ( VAR_1 ) )  VAR_3 . METHOD_3 ( VAR_1 ) (  VAR_4 += VAR_2 . size ( ) )  VAR_4 += VAR_2 . size ( ) ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED (  METHOD_4 ( ) )  METHOD_4 ( ) (  METHOD_5 ( VAR_1 ) )  METHOD_5 ( VAR_1 ) (  METHOD_6 ( ) )  METHOD_6 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( TYPE_2 . equals ( VAR_2 , VAR_1 ) ) ) COND ! ( TYPE_2 . equals ( VAR_2 , VAR_1 ) ) ( THEN THEN (  VAR_2 = VAR_1 )  VAR_2 = VAR_1 ( FOR-EACH FOR-EACH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_4 ) IN VAR_4 ( BLOCK BLOCK (  VAR_3 . METHOD_2 ( this ) )  VAR_3 . METHOD_2 ( this ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  METHOD_3 ( ) )  METHOD_3 ( ) (  METHOD_4 ( ) )  METHOD_4 ( ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  android.util.Log . i ( VAR_1 . TAG , STRING_1 ) )  android.util.Log . i ( VAR_1 . TAG , STRING_1 ) ( VAR VAR ( TYPE TYPE_1<java.lang.Integer,java.lang.Integer> ) TYPE TYPE_1<java.lang.Integer,java.lang.Integer> ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( IF IF ( COND ( ( VAR_3 ) >= INT_1 ) && ( ( VAR_4 ) >= INT_2 ) ) COND ( ( VAR_3 ) >= INT_1 ) && ( ( VAR_4 ) >= INT_2 ) ( THEN THEN (  METHOD_3 ( INT_1 , INT_2 , false , true ) )  METHOD_3 ( INT_1 , INT_2 , false , true ) ) THEN THEN ( ELSE ELSE (  android.util.Log.w ( VAR_1 . TAG , STRING_2 ) )  android.util.Log.w ( VAR_1 . TAG , STRING_2 ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME index ) NAME index ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND index != ( VAR_3 ) ) COND index != ( VAR_3 ) ( THEN THEN ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_2 ( VAR_1 , VAR_2 , index ) ) INIT = METHOD_2 ( VAR_1 , VAR_2 , index ) ) VAR VAR ( IF IF ( COND VAR_4 != null ) COND VAR_4 != null ( THEN THEN (  return VAR_4 ; )  return VAR_4 ; ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return METHOD_3 ( VAR_1 , VAR_2 , VAR_5 ) ; )  return METHOD_3 ( VAR_1 , VAR_2 , VAR_5 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 ) INIT = VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 ) INIT = VAR_4 ) VAR VAR (  VAR_5 . METHOD_2 ( java.lang.Integer . toString ( VAR_1 ) ) )  VAR_5 . METHOD_2 ( java.lang.Integer . toString ( VAR_1 ) ) (  TYPE_1 . METHOD_3 ( VAR_6 . METHOD_4 ( ) . METHOD_5 ( ) , VAR_7 , VAR_1 ) )  TYPE_1 . METHOD_3 ( VAR_6 . METHOD_4 ( ) . METHOD_5 ( ) , VAR_7 , VAR_1 ) (  VAR_6 . METHOD_6 ( VAR_3 , this . METHOD_7 ( VAR_8 ) ) )  VAR_6 . METHOD_6 ( VAR_3 , this . METHOD_7 ( VAR_8 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 instanceof TYPE_2 ) COND VAR_1 instanceof TYPE_2 ( THEN THEN (  throw new java.lang.RuntimeException ( STRING_1 ) ; )  throw new java.lang.RuntimeException ( STRING_1 ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . METHOD_3 ( ) . size ( ) ) INIT = VAR_1 . METHOD_3 ( ) . size ( ) ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_4 ) NAME VAR_4 ( INIT = ( VAR_2 > 1 ) && ( VAR_3 > 1 ) ) INIT = ( VAR_2 > 1 ) && ( VAR_3 > 1 ) ) VAR VAR (  return VAR_4 ; )  return VAR_4 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME app ) NAME app ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE android.os.Bundle ) TYPE android.os.Bundle ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_3 ) != null ) COND ( VAR_3 ) != null ( THEN THEN ( TRY TRY ( BLOCK BLOCK (  VAR_3 . METHOD_2 ( VAR_4 , VAR_1 , VAR_2 ) )  VAR_3 . METHOD_2 ( VAR_4 , VAR_1 , VAR_2 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) THEN THEN ) IF IF (  VAR_3 = null )  VAR_3 = null (  VAR_4 = null )  VAR_4 = null (  VAR_5 = null )  VAR_5 = null (  VAR_6 = null )  VAR_6 = null (  VAR_7 = null )  VAR_7 = null (  METHOD_3 ( VAR_8 , ( - 1 ) , false , false , true ) )  METHOD_3 ( VAR_8 , ( - 1 ) , false , false , true ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME context ) NAME context ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME element ) NAME element ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = element . METHOD_2 ( ) ) INIT = element . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( TYPE_3 . METHOD_3 ( VAR_1 . METHOD_4 ( 0 ) ) ) + ( VAR_1 . METHOD_5 ( 1 ) ) ) INIT = ( TYPE_3 . METHOD_3 ( VAR_1 . METHOD_4 ( 0 ) ) ) + ( VAR_1 . METHOD_5 ( 1 ) ) ) VAR VAR (  context . METHOD_6 ( VAR_3 , element , context . METHOD_7 ( element ) , java.lang.String.format ( STRING_1 , VAR_1 , VAR_2 ) , null ) )  context . METHOD_6 ( VAR_3 , element , context . METHOD_7 ( element ) , java.lang.String.format ( STRING_1 , VAR_1 , VAR_2 ) , null ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME action ) NAME action ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_3 . METHOD_1 ( VAR_2 , true ) ) INIT = TYPE_3 . METHOD_1 ( VAR_2 , true ) ) VAR VAR ( IF IF ( COND ! ( VAR_1 . METHOD_2 ( ) ) ) COND ! ( VAR_1 . METHOD_2 ( ) ) ( THEN THEN (  TYPE_4 . METHOD_3 ( VAR_1 , null , false , true ) )  TYPE_4 . METHOD_3 ( VAR_1 , null , false , true ) ) THEN THEN ( ELSE ELSE (  TYPE_5 . METHOD_4 ( TYPE_6 . METHOD_5 ( ) . METHOD_6 ( ) , STRING_1 , STRING_2 ) )  TYPE_5 . METHOD_4 ( TYPE_6 . METHOD_5 ( ) . METHOD_6 ( ) , STRING_1 , STRING_2 ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN java.util.ArrayList<java.io.File> ) RETURN java.util.ArrayList<java.io.File> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<java.io.File> ) TYPE java.util.ArrayList<java.io.File> ( NAME result ) NAME result ( INIT = new java.util.ArrayList < java.io.File > ( ) ) INIT = new java.util.ArrayList < java.io.File > ( ) ) VAR VAR (  TYPE_1 . METHOD_2 ( VAR_1 , VAR_3 , result ) )  TYPE_1 . METHOD_2 ( VAR_1 , VAR_3 , result ) (  TYPE_1 . METHOD_2 ( VAR_2 , VAR_3 , result ) )  TYPE_1 . METHOD_2 ( VAR_2 , VAR_3 , result ) (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME session ) NAME session ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME s ) NAME s ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME c ) NAME c ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME fd ) NAME fd ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME callback ) NAME callback ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_2 ) NAME VAR_2 ( INIT = new byte [ 1 ] ) INIT = new byte [ 1 ] ) VAR VAR (  TYPE_4 . METHOD_2 ( s , fd , callback , VAR_2 , 0 , 1 , 0 ) )  TYPE_4 . METHOD_2 ( s , fd , callback , VAR_2 , 0 , 1 , 0 ) (  assertEquals ( INT_1 , VAR_2 [ 0 ] ) )  assertEquals ( INT_1 , VAR_2 [ 0 ] ) (  super . METHOD_1 ( session , s , c , VAR_1 , fd , callback ) )  super . METHOD_1 ( session , s , c , VAR_1 , fd , callback ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 == VAR_2 ) COND VAR_1 == VAR_2 ( THEN THEN (  return new TYPE_1 ( ) ; )  return new TYPE_1 ( ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( ( TYPE_2 ) ( VAR_2 . METHOD_2 ( ) ) ) ) INIT = ( ( TYPE_2 ) ( VAR_2 . METHOD_2 ( ) ) ) ) VAR VAR (  return METHOD_1 ( VAR_1 , VAR_3 ) . append ( VAR_2 . getName ( ) ) . append ( CHAR_1 ) ; )  return METHOD_1 ( VAR_1 , VAR_3 ) . append ( VAR_2 . getName ( ) ) . append ( CHAR_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 ) INIT = VAR_2 ) VAR VAR (  VAR_3 . METHOD_2 ( VAR_1 ) )  VAR_3 . METHOD_2 ( VAR_1 ) (  VAR_4 . verify ( VAR_5 , METHOD_3 ( ) ) . METHOD_4 ( METHOD_5 ( VAR_6 class ) ) )  VAR_4 . verify ( VAR_5 , METHOD_3 ( ) ) . METHOD_4 ( METHOD_5 ( VAR_6 class ) ) (  VAR_4 . verify ( VAR_5 , METHOD_3 ( ) ) . METHOD_6 ( METHOD_7 ( ) , METHOD_5 ( VAR_7 class ) ) )  VAR_4 . verify ( VAR_5 , METHOD_3 ( ) ) . METHOD_6 ( METHOD_7 ( ) , METHOD_5 ( VAR_7 class ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME data ) NAME data ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_4 . METHOD_2 ( data ) ) INIT = TYPE_4 . METHOD_2 ( data ) ) VAR VAR (  VAR_1 = TYPE_5 . METHOD_3 ( VAR_1 ) )  VAR_1 = TYPE_5 . METHOD_3 ( VAR_1 ) (  return METHOD_1 ( VAR_1 , new TYPE_6 ( new TYPE_7 ( VAR_1 ) ) , true ) ; )  return METHOD_1 ( VAR_1 , new TYPE_6 ( new TYPE_7 ( VAR_1 ) ) , true ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( VAR_2 ) ) INIT = METHOD_2 ( VAR_2 ) ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < ( VAR_3 ) ) COND i < ( VAR_3 ) ( UPDATE UPDATE (  ++ i )  ++ i ) UPDATE UPDATE ( BLOCK BLOCK (  assertEquals ( new TYPE_3 ( i ) , ( ( TYPE_3 ) ( VAR_1 . METHOD_3 ( ) ) ) ) )  assertEquals ( new TYPE_3 ( i ) , ( ( TYPE_3 ) ( VAR_1 . METHOD_3 ( ) ) ) ) ) BLOCK BLOCK ) FOR FOR ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) (  VAR_1 . METHOD_2 ( null ) )  VAR_1 . METHOD_2 ( null ) (  VAR_2 . METHOD_3 ( ) )  VAR_2 . METHOD_3 ( ) (  VAR_3 . METHOD_4 ( ) )  VAR_3 . METHOD_4 ( ) (  METHOD_5 ( VAR_4 ) )  METHOD_5 ( VAR_4 ) (  VAR_1 . METHOD_6 ( this ) )  VAR_1 . METHOD_6 ( this ) ( IF IF ( COND ( VAR_5 ) == ( VAR_6 ) ) COND ( VAR_5 ) == ( VAR_6 ) ( THEN THEN (  VAR_7 . METHOD_7 ( ) )  VAR_7 . METHOD_7 ( ) (  VAR_8 . METHOD_7 ( ) )  VAR_8 . METHOD_7 ( ) (  VAR_9 . METHOD_7 ( ) )  VAR_9 . METHOD_7 ( ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( ) )  VAR_1 . METHOD_2 ( ) ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( byte [ ] ) ( VAR_1 . METHOD_1 ( ) ) ) ) INIT = ( ( byte [ ] ) ( VAR_1 . METHOD_1 ( ) ) ) ) VAR VAR (  key = new TYPE_3 ( TYPE_4 . METHOD_3 ( VAR_2 ) ) )  key = new TYPE_3 ( TYPE_4 . METHOD_3 ( VAR_2 ) ) ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_4 . METHOD_4 ( key . METHOD_5 ( ) ) ) INIT = TYPE_4 . METHOD_4 ( key . METHOD_5 ( ) ) ) VAR VAR (  VAR_4 = new TYPE_5 ( TYPE_4 . METHOD_6 ( VAR_3 ) ) )  VAR_4 = new TYPE_5 ( TYPE_4 . METHOD_6 ( VAR_3 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME index ) NAME index ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( INT_1 ) )  METHOD_2 ( INT_1 ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( VAR_3 ) / FLOAT_1 ) INIT = ( VAR_3 ) / FLOAT_1 ) VAR VAR ( LABELED LABELED ( NAME VAR_4 ) NAME VAR_4 (  TYPE_4 . assertTrue ( VAR_5 . METHOD_3 ( ) , STRING_1 ) )  TYPE_4 . assertTrue ( VAR_5 . METHOD_3 ( ) , STRING_1 ) ) LABELED LABELED ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_5 ) NAME METHOD_5 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_6 ) NAME VAR_6 ( INIT = new TYPE_6 ( VAR_1 , index , VAR_5 ) ) INIT = new TYPE_6 ( VAR_1 , index , VAR_5 ) ) VAR VAR (  ( ( TYPE_6 ) ( VAR_6 ) ) . METHOD_6 ( ) )  ( ( TYPE_6 ) ( VAR_6 ) ) . METHOD_6 ( ) (  return VAR_6 ; )  return VAR_6 ; ) BLOCK BLOCK ) METHOD METHOD (  return VAR_5 . METHOD_4 ( VAR_1 , new TYPE_5 < TYPE_1 > ( ) { public TYPE_1 METHOD_5 ( ) { TYPE_1 VAR_6 = new TYPE_6 ( VAR_1 , index , VAR_5 ) ; ( ( TYPE_6 ) ( VAR_6 ) ) . METHOD_6 ( ) ; return VAR_6 ; } } ) ; )  return VAR_5 . METHOD_4 ( VAR_1 , new TYPE_5 < TYPE_1 > ( ) { public TYPE_1 METHOD_5 ( ) { TYPE_1 VAR_6 = new TYPE_6 ( VAR_1 , index , VAR_5 ) ; ( ( TYPE_6 ) ( VAR_6 ) ) . METHOD_6 ( ) ; return VAR_6 ; } } ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String[][] ) TYPE java.lang.String[][] ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.lang.String [ ] [ ] { null , new java.lang.String [ ] { STRING_1 } , null , new java.lang.String [ ] { STRING_2 } } ) INIT = new java.lang.String [ ] [ ] { null , new java.lang.String [ ] { STRING_1 } , null , new java.lang.String [ ] { STRING_2 } } ) VAR VAR ( VAR VAR ( TYPE java.lang.String[][] ) TYPE java.lang.String[][] ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.lang.String [ ] [ ] { null , null , null , new java.lang.String [ ] { STRING_2 } } ) INIT = new java.lang.String [ ] [ ] { null , null , null , new java.lang.String [ ] { STRING_2 } } ) VAR VAR (  METHOD_2 ( VAR_2 , TYPE_1 . METHOD_3 ( VAR_1 ) ) )  METHOD_2 ( VAR_2 , TYPE_1 . METHOD_3 ( VAR_1 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  assertEquals ( TYPE_1 . METHOD_2 ( INT_1 ) , STRING_1 ) )  assertEquals ( TYPE_1 . METHOD_2 ( INT_1 ) , STRING_1 ) (  assertEquals ( TYPE_1 . METHOD_2 ( INT_2 ) , STRING_2 ) )  assertEquals ( TYPE_1 . METHOD_2 ( INT_2 ) , STRING_2 ) (  assertEquals ( TYPE_1 . METHOD_2 ( INT_3 ) , STRING_3 ) )  assertEquals ( TYPE_1 . METHOD_2 ( INT_3 ) , STRING_3 ) (  assertEquals ( TYPE_1 . METHOD_2 ( INT_4 ) , STRING_4 ) )  assertEquals ( TYPE_1 . METHOD_2 ( INT_4 ) , STRING_4 ) (  assertEquals ( TYPE_1 . METHOD_2 ( INT_5 ) , STRING_5 ) )  assertEquals ( TYPE_1 . METHOD_2 ( INT_5 ) , STRING_5 ) (  assertEquals ( TYPE_1 . METHOD_2 ( 0 ) , null ) )  assertEquals ( TYPE_1 . METHOD_2 ( 0 ) , null ) (  assertEquals ( TYPE_1 . METHOD_2 ( INT_6 ) , null ) )  assertEquals ( TYPE_1 . METHOD_2 ( INT_6 ) , null ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_2 ) ( super . METHOD_1 ( ) ) ) ) INIT = ( ( TYPE_2 ) ( super . METHOD_1 ( ) ) ) ) VAR VAR (  VAR_2 = ( ( TYPE_3 ) ( VAR_3 . METHOD_2 ( ) ) ) )  VAR_2 = ( ( TYPE_3 ) ( VAR_3 . METHOD_2 ( ) ) ) (  VAR_4 = ( ( TYPE_4 ) ( VAR_5 . METHOD_2 ( ) ) ) )  VAR_4 = ( ( TYPE_4 ) ( VAR_5 . METHOD_2 ( ) ) ) (  VAR_6 = false )  VAR_6 = false (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME method ) NAME method ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME call ) NAME call ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_4 ( null , method , call , VAR_1 ) ) INIT = new TYPE_4 ( null , method , call , VAR_1 ) ) VAR VAR (  method . METHOD_2 ( VAR_2 ) )  method . METHOD_2 ( VAR_2 ) ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ( INIT = VAR_2 . METHOD_3 ( ) ) INIT = VAR_2 . METHOD_3 ( ) ) VAR VAR (  return name ; )  return name ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  VAR_1 )  VAR_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) == null ) COND ( VAR_1 ) == null ( THEN THEN (  VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) )  VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.io.File ( TYPE_2 . METHOD_2 ( ) , VAR_3 ) ) INIT = new java.io.File ( TYPE_2 . METHOD_2 ( ) , VAR_3 ) ) VAR VAR (  VAR_1 . METHOD_3 ( METHOD_4 ( VAR_2 ) ) )  VAR_1 . METHOD_3 ( METHOD_4 ( VAR_2 ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_4 . METHOD_5 ( STRING_1 , e.getMessage ( ) ) )  VAR_4 . METHOD_5 ( STRING_1 , e.getMessage ( ) ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) THEN THEN ) IF IF ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_3> ) TYPE java.util.List<TYPE_3> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 == null ) || ( ( VAR_1 . METHOD_2 ( ) ) == 0 ) ) COND ( VAR_1 == null ) || ( ( VAR_1 . METHOD_2 ( ) ) == 0 ) ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_1 ( TYPE_1 . METHOD_3 ( VAR_1 , VAR_2 ) ) ) INIT = new TYPE_1 ( TYPE_1 . METHOD_3 ( VAR_1 , VAR_2 ) ) ) VAR VAR (  VAR_1 . METHOD_4 ( ) )  VAR_1 . METHOD_4 ( ) (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME userId ) NAME userId ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_2 . METHOD_2 ( userId ) ) ) COND ! ( VAR_2 . METHOD_2 ( userId ) ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME p ) NAME p ( INIT = VAR_3 ) INIT = VAR_3 ) VAR VAR ( IF IF ( COND p != null ) COND p != null ( THEN THEN ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( INIT = ( ( TYPE_3 ) ( VAR_5 ) ) ) INIT = ( ( TYPE_3 ) ( VAR_5 ) ) ) VAR VAR ( IF IF ( COND VAR_4 != null ) COND VAR_4 != null ( THEN THEN (  return ( VAR_4 . METHOD_3 ( userId ) ) && ( ( ( VAR_6 ) & ( VAR_7 ) ) == 0 ) ; )  return ( VAR_4 . METHOD_3 ( userId ) ) && ( ( ( VAR_6 ) & ( VAR_7 ) ) == 0 ) ; ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME out ) NAME out ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) )  METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) (  super . METHOD_1 ( out , VAR_1 , VAR_2 ) )  super . METHOD_1 ( out , VAR_1 , VAR_2 ) (  TYPE_2 . METHOD_4 ( INT_1 ) )  TYPE_2 . METHOD_4 ( INT_1 ) (  METHOD_5 ( VAR_2 ) )  METHOD_5 ( VAR_2 ) (  super . METHOD_1 ( out , VAR_1 , VAR_2 ) )  super . METHOD_1 ( out , VAR_1 , VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_1 . METHOD_2 ( VAR_2 ) ) ) COND ! ( VAR_1 . METHOD_2 ( VAR_2 ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 . METHOD_3 ( ) ) INIT = VAR_4 . METHOD_3 ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( IF IF ( COND VAR_4 . METHOD_4 ( true ) ) COND VAR_4 . METHOD_4 ( true ) ( THEN THEN (  METHOD_5 ( VAR_2 ) )  METHOD_5 ( VAR_2 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ( FINALLY FINALLY ( IF IF ( COND ! VAR_3 ) COND ! VAR_3 ( THEN THEN (  VAR_4 . METHOD_4 ( false ) )  VAR_4 . METHOD_4 ( false ) ) THEN THEN ) IF IF ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME type ) NAME type ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . get ( type ) ) INIT = VAR_3 . get ( type ) ) VAR VAR ( IF IF ( COND VAR_2 == null ) COND VAR_2 == null ( THEN THEN (  VAR_2 = new java.util.ArrayList < TYPE_1 > ( 1 ) )  VAR_2 = new java.util.ArrayList < TYPE_1 > ( 1 ) (  VAR_3 . METHOD_3 ( type , VAR_2 ) )  VAR_3 . METHOD_3 ( type , VAR_2 ) ) THEN THEN ) IF IF (  VAR_2 . METHOD_4 ( VAR_1 ) )  VAR_2 . METHOD_4 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME address ) NAME address ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( VAR_2 , STRING_1 ) )  METHOD_2 ( VAR_2 , STRING_1 ) ( VAR VAR ( TYPE java.lang.Integer ) TYPE java.lang.Integer ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 . METHOD_3 ( VAR_1 , address ) ) INIT = VAR_4 . METHOD_3 ( VAR_1 , address ) ) VAR VAR ( IF IF ( COND VAR_3 == null ) COND VAR_3 == null ( THEN THEN (  android.util.Log.d ( VAR_5 . TAG , ( STRING_2 + address ) ) )  android.util.Log.d ( VAR_5 . TAG , ( STRING_2 + address ) ) (  return ; )  return ; ) THEN THEN ) IF IF ( IF IF ( COND VAR_6 ) COND VAR_6 ( THEN THEN (  android.util.Log.d ( VAR_5 . TAG , ( ( ( STRING_3 + address ) + STRING_4 ) + VAR_3 ) ) )  android.util.Log.d ( VAR_5 . TAG , ( ( ( STRING_3 + address ) + STRING_4 ) + VAR_3 ) ) ) THEN THEN ) IF IF (  METHOD_4 ( VAR_1 , VAR_3 ) )  METHOD_4 ( VAR_1 , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME action ) NAME action ) VAR VAR ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( IF IF ( COND VAR_5 ) COND VAR_5 ( THEN THEN (  VAR_4 = new TYPE_4 ( run , VAR_1 , VAR_6 , name , VAR_2 , null , VAR_3 ) )  VAR_4 = new TYPE_4 ( run , VAR_1 , VAR_6 , name , VAR_2 , null , VAR_3 ) ) THEN THEN ( ELSE ELSE (  VAR_4 = new TYPE_5 ( VAR_7 , VAR_1 , VAR_6 , name , VAR_2 , action , VAR_3 ) )  VAR_4 = new TYPE_5 ( VAR_7 , VAR_1 , VAR_6 , name , VAR_2 , action , VAR_3 ) ) ELSE ELSE ) IF IF (  return VAR_4 ; )  return VAR_4 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME expected ) NAME expected ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME msg ) NAME msg ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 != expected ) COND VAR_1 != expected ( THEN THEN (  java.lang.System.out.println ( ( ( ( ( msg + STRING_1 ) + VAR_1 ) + STRING_2 ) + expected ) ) )  java.lang.System.out.println ( ( ( ( ( msg + STRING_1 ) + VAR_1 ) + STRING_2 ) + expected ) ) (  TYPE_1 . METHOD_2 ( ( - 1 ) ) )  TYPE_1 . METHOD_2 ( ( - 1 ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME info ) NAME info ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return new TYPE_1 ( info , new TYPE_3 ( info , null , VAR_3 , VAR_2 , TYPE_4 . METHOD_2 ( ) , false ) ) ; )  return new TYPE_1 ( info , new TYPE_3 ( info , null , VAR_3 , VAR_2 , TYPE_4 . METHOD_2 ( ) , false ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( INT_1 , VAR_2 ) ) INIT = new TYPE_1 ( INT_1 , VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_2 . METHOD_2 ( VAR_1 ) ) INIT = TYPE_2 . METHOD_2 ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_2 . METHOD_3 ( VAR_3 ) ) INIT = TYPE_2 . METHOD_3 ( VAR_3 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_5 ) NAME VAR_5 ( INIT = TYPE_2 . METHOD_4 ( VAR_4 ) ) INIT = TYPE_2 . METHOD_4 ( VAR_4 ) ) VAR VAR (  assertEquals ( VAR_1 , VAR_5 ) )  assertEquals ( VAR_1 , VAR_5 ) (  TYPE_3 . METHOD_5 ( VAR_3 , VAR_4 ) )  TYPE_3 . METHOD_5 ( VAR_3 , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( ) ) INIT = TYPE_1 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_1 . METHOD_3 ( VAR_3 class ) ) INIT = TYPE_1 . METHOD_3 ( VAR_3 class ) ) VAR VAR (  VAR_2 . METHOD_4 ( VAR_4 ) )  VAR_2 . METHOD_4 ( VAR_4 ) (  VAR_2 . METHOD_5 ( TYPE_3 . getName ( ) , STRING_1 ) )  VAR_2 . METHOD_5 ( TYPE_3 . getName ( ) , STRING_1 ) (  VAR_2 . METHOD_6 ( VAR_5 ) . METHOD_6 ( VAR_6 ) . METHOD_7 ( VAR_1 , false , VAR_7 ) )  VAR_2 . METHOD_6 ( VAR_5 ) . METHOD_6 ( VAR_6 ) . METHOD_7 ( VAR_1 , false , VAR_7 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  assertFalse ( METHOD_2 ( STRING_1 , new TYPE_1 ( STRING_2 ) . METHOD_3 ( VAR_1 , STRING_3 ) ) ) )  assertFalse ( METHOD_2 ( STRING_1 , new TYPE_1 ( STRING_2 ) . METHOD_3 ( VAR_1 , STRING_3 ) ) ) (  assertFalse ( METHOD_2 ( STRING_1 , new TYPE_1 ( STRING_4 ) . METHOD_3 ( VAR_1 , STRING_3 ) ) ) )  assertFalse ( METHOD_2 ( STRING_1 , new TYPE_1 ( STRING_4 ) . METHOD_3 ( VAR_1 , STRING_3 ) ) ) (  assertTrue ( METHOD_2 ( STRING_1 , new TYPE_1 ( STRING_2 ) . METHOD_3 ( VAR_1 , STRING_1 ) ) ) )  assertTrue ( METHOD_2 ( STRING_1 , new TYPE_1 ( STRING_2 ) . METHOD_3 ( VAR_1 , STRING_1 ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME args ) NAME args ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME msg ) NAME msg ( INIT = java.lang.String.format ( VAR_1 , args ) ) INIT = java.lang.String.format ( VAR_1 , args ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME s ) NAME s ( IN msg . METHOD_2 ( STRING_1 ) ) IN msg . METHOD_2 ( STRING_1 ) ( BLOCK BLOCK ( IF IF ( COND ( s . METHOD_3 ( ) . length ( ) ) > 0 ) COND ( s . METHOD_3 ( ) . length ( ) ) > 0 ( THEN THEN (  TYPE_1 . METHOD_4 ( VAR_2 . TAG , s ) )  TYPE_1 . METHOD_4 ( VAR_2 . TAG , s ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME data ) NAME data ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_3 ( data ) ) INIT = new TYPE_3 ( data ) ) VAR VAR (  return VAR_2 ? ( ( TYPE_1 ) ( new TYPE_4 ( VAR_3 , VAR_1 ) ) ) : ( ( TYPE_1 ) ( new TYPE_5 ( VAR_3 , VAR_1 ) ) ) ; )  return VAR_2 ? ( ( TYPE_1 ) ( new TYPE_4 ( VAR_3 , VAR_1 ) ) ) : ( ( TYPE_1 ) ( new TYPE_5 ( VAR_3 , VAR_1 ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( METHOD_2 ( ) ) ) COND ! ( METHOD_2 ( ) ) ( THEN THEN (  METHOD_3 ( ) )  METHOD_3 ( ) (  METHOD_4 ( ) )  METHOD_4 ( ) ( TRY TRY ( BLOCK BLOCK (  VAR_2 . METHOD_5 ( ) . METHOD_6 ( ) )  VAR_2 . METHOD_5 ( ) . METHOD_6 ( ) ( IF IF ( COND ( VAR_3 ) != null ) COND ( VAR_3 ) != null ( THEN THEN (  VAR_3 . METHOD_7 ( ) )  VAR_3 . METHOD_7 ( ) ) THEN THEN ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME e ) NAME e ( BLOCK BLOCK (  TYPE_1 . e ( VAR_4 . TAG , STRING_1 , e ) )  TYPE_1 . e ( VAR_4 . TAG , STRING_1 , e ) ) BLOCK BLOCK ) CATCH CATCH ( FINALLY FINALLY (  VAR_2 . METHOD_5 ( ) . METHOD_8 ( ) )  VAR_2 . METHOD_5 ( ) . METHOD_8 ( ) ) FINALLY FINALLY ) TRY TRY ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 . METHOD_2 ( VAR_1 ) ) INIT = VAR_4 . METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_3 == null ) COND VAR_3 == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_6 ) INIT = VAR_6 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_7 ) NAME VAR_7 ( INIT = VAR_5 . METHOD_3 ( ) ) INIT = VAR_5 . METHOD_3 ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_7 . METHOD_4 ( new TYPE_4 ( VAR_2 , true ) ) )  VAR_7 . METHOD_4 ( new TYPE_4 ( VAR_2 , true ) ) (  VAR_7 . METHOD_5 ( 0 , 0 , VAR_5 . METHOD_6 ( ) , VAR_5 . METHOD_7 ( ) ) )  VAR_7 . METHOD_5 ( 0 , 0 , VAR_5 . METHOD_6 ( ) , VAR_5 . METHOD_7 ( ) ) ) BLOCK BLOCK ( FINALLY FINALLY (  VAR_7 . METHOD_8 ( ) )  VAR_7 . METHOD_8 ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME verify ) NAME verify ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME key ) NAME key ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND key instanceof TYPE_7 ) COND key instanceof TYPE_7 ( THEN THEN ( VAR VAR ( TYPE TYPE_8 ) TYPE TYPE_8 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_7 ) ( key ) ) . METHOD_1 ( ) ) INIT = ( ( TYPE_7 ) ( key ) ) . METHOD_1 ( ) ) VAR VAR (  METHOD_2 ( VAR_1 ) )  METHOD_2 ( VAR_1 ) (  return ; )  return ; ) THEN THEN ) IF IF (  METHOD_3 ( key , null ) )  METHOD_3 ( key , null ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) (  METHOD_2 ( VAR_1 ) )  METHOD_2 ( VAR_1 ) ( IF IF ( COND ! ( VAR_2 . equals ( VAR_3 . METHOD_3 ( ) ) ) ) COND ! ( VAR_2 . equals ( VAR_3 . METHOD_3 ( ) ) ) ( THEN THEN (  VAR_3 . METHOD_4 ( VAR_2 ) )  VAR_3 . METHOD_4 ( VAR_2 ) ) THEN THEN ) IF IF (  METHOD_5 ( ) )  METHOD_5 ( ) (  VAR_4 . METHOD_6 ( ) . METHOD_7 ( true ) )  VAR_4 . METHOD_6 ( ) . METHOD_7 ( true ) (  METHOD_8 ( ) )  METHOD_8 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN TYPE_1<TYPE_2> ) RETURN TYPE_1<TYPE_2> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME flags ) NAME flags ) VAR VAR ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_2 ) NAME METHOD_2 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  action . METHOD_2 ( VAR_2 ) )  action . METHOD_2 ( VAR_2 ) (  VAR_3 . METHOD_2 ( VAR_2 ) )  VAR_3 . METHOD_2 ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD (  return new TYPE_3 < TYPE_2 , TYPE_2 > ( VAR_1 ) { public void METHOD_2 ( TYPE_2 VAR_2 ) { action . METHOD_2 ( VAR_2 ) ; VAR_3 . METHOD_2 ( VAR_2 ) ; } } ; )  return new TYPE_3 < TYPE_2 , TYPE_2 > ( VAR_1 ) { public void METHOD_2 ( TYPE_2 VAR_2 ) { action . METHOD_2 ( VAR_2 ) ; VAR_3 . METHOD_2 ( VAR_2 ) ; } } ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_3 ) COND VAR_3 ( THEN THEN (  METHOD_2 ( ) )  METHOD_2 ( ) ) THEN THEN ) IF IF ( IF IF ( COND VAR_3 ) COND VAR_3 ( THEN THEN (  android.util.Log.d ( VAR_4 , ( ( ( STRING_1 + ( VAR_1 . METHOD_3 ( ) ) ) + STRING_2 ) + VAR_2 ) ) )  android.util.Log.d ( VAR_4 , ( ( ( STRING_1 + ( VAR_1 . METHOD_3 ( ) ) ) + STRING_2 ) + VAR_2 ) ) ) THEN THEN ) IF IF (  VAR_5 . METHOD_4 ( VAR_1 . METHOD_3 ( ) ) )  VAR_5 . METHOD_4 ( VAR_1 . METHOD_3 ( ) ) ( IF IF ( COND VAR_5 . METHOD_5 ( ) ) COND VAR_5 . METHOD_5 ( ) ( THEN THEN ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  METHOD_6 ( VAR_6 ) )  METHOD_6 ( VAR_6 ) ) THEN THEN ( ELSE ELSE (  METHOD_6 ( VAR_7 ) )  METHOD_6 ( VAR_7 ) ) ELSE ELSE ) IF IF ) THEN THEN ) IF IF (  VAR_1 . METHOD_7 ( true ) )  VAR_1 . METHOD_7 ( true ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 ( 6 ) ) INIT = new TYPE_2 ( 6 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME callback ) NAME callback ( INIT = new TYPE_4 ( ) ) INIT = new TYPE_4 ( ) ) VAR VAR (  VAR_2 . METHOD_2 ( VAR_3 , callback ) )  VAR_2 . METHOD_2 ( VAR_3 , callback ) ( WHILE WHILE ( COND true ) COND true ( BLOCK BLOCK (  TYPE_5 . METHOD_3 ( INT_1 ) )  TYPE_5 . METHOD_3 ( INT_1 ) ) BLOCK BLOCK ) WHILE WHILE ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) == null ) COND ( VAR_1 ) == null ( THEN THEN ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.io.File ( VAR_3 , VAR_4 ) ) INIT = new java.io.File ( VAR_3 , VAR_4 ) ) VAR VAR ( IF IF ( COND VAR_2 . METHOD_2 ( ) ) COND VAR_2 . METHOD_2 ( ) ( THEN THEN (  VAR_1 = VAR_5 . METHOD_3 ( VAR_2 , false ) )  VAR_1 = VAR_5 . METHOD_3 ( VAR_2 , false ) ) THEN THEN ( ELSE ELSE (  VAR_5 . METHOD_4 ( this , VAR_3 , ( STRING_1 + ( VAR_3 . METHOD_5 ( ) ) ) ) )  VAR_5 . METHOD_4 ( this , VAR_3 , ( STRING_1 + ( VAR_3 . METHOD_5 ( ) ) ) ) (  return null ; )  return null ; ) ELSE ELSE ) IF IF ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME version ) NAME version ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME name ) NAME name ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME d ) NAME d ( INIT = TYPE_5 . METHOD_2 ( version , VAR_1 , VAR_2 , name ) . METHOD_3 ( ) ) INIT = TYPE_5 . METHOD_2 ( version , VAR_1 , VAR_2 , name ) . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME r ) NAME r ( INIT = new TYPE_6 ( d , VAR_3 ) ) INIT = new TYPE_6 ( d , VAR_3 ) ) VAR VAR (  VAR_4 . METHOD_4 ( d . METHOD_5 ( ) , r ) )  VAR_4 . METHOD_4 ( d . METHOD_5 ( ) , r ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  assertTrue ( ( ( TYPE_1 . METHOD_2 ( STRING_1 ) ) != ( VAR_1 ) ) ) )  assertTrue ( ( ( TYPE_1 . METHOD_2 ( STRING_1 ) ) != ( VAR_1 ) ) ) ( TRY TRY ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( null ) )  TYPE_1 . METHOD_2 ( null ) (  fail ( ) )  fail ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.NullPointerException ) TYPE java.lang.NullPointerException ( NAME expected ) NAME expected ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ( TRY TRY ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( STRING_2 ) )  TYPE_1 . METHOD_2 ( STRING_2 ) (  TYPE_1 . METHOD_2 ( STRING_3 ) )  TYPE_1 . METHOD_2 ( STRING_3 ) (  fail ( ) )  fail ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.RuntimeException ) TYPE java.lang.RuntimeException ( NAME expected ) NAME expected ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  TYPE_2 . METHOD_3 ( ) )  TYPE_2 . METHOD_3 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME toString ) NAME toString ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.StringBuilder ) TYPE java.lang.StringBuilder ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.lang.StringBuilder ( ( ( VAR_2 . length ( ) ) + 7 ) ) ) INIT = new java.lang.StringBuilder ( ( ( VAR_2 . length ( ) ) + 7 ) ) ) VAR VAR ( IF IF ( COND ( VAR_2 . METHOD_1 ( CHAR_1 ) ) >= 0 ) COND ( VAR_2 . METHOD_1 ( CHAR_1 ) ) >= 0 ( THEN THEN (  VAR_1 . append ( CHAR_2 ) . append ( VAR_2 ) . append ( CHAR_3 ) )  VAR_1 . append ( CHAR_2 ) . append ( VAR_2 ) . append ( CHAR_3 ) ) THEN THEN ( ELSE ELSE (  VAR_1 . append ( VAR_2 ) )  VAR_1 . append ( VAR_2 ) ) ELSE ELSE ) IF IF ( IF IF ( COND METHOD_2 ( ) ) COND METHOD_2 ( ) ( THEN THEN (  VAR_1 . append ( CHAR_1 ) . append ( VAR_3 ) )  VAR_1 . append ( CHAR_1 ) . append ( VAR_3 ) ) THEN THEN ) IF IF (  return VAR_1 . toString ( ) ; )  return VAR_1 . toString ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_2 ( VAR_3 ) ) INIT = VAR_1 . METHOD_2 ( VAR_3 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_3 ( VAR_2 ) ) INIT = new TYPE_3 ( VAR_2 ) ) VAR VAR ( IF IF ( COND VAR_4 . METHOD_3 ( ) ) COND VAR_4 . METHOD_3 ( ) ( THEN THEN ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_5 ) NAME VAR_5 ( INIT = new TYPE_4 ( ) ) INIT = new TYPE_4 ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  METHOD_4 ( VAR_5 , VAR_4 ) )  METHOD_4 ( VAR_5 , VAR_4 ) (  VAR_5 . METHOD_5 ( VAR_4 , TYPE_5 . METHOD_6 ( ) ) )  VAR_5 . METHOD_5 ( VAR_4 , TYPE_5 . METHOD_6 ( ) ) (  return VAR_5 ; )  return VAR_5 ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2<TYPE_3> ) TYPE TYPE_2<TYPE_3> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_3 ) ) COND ! ( VAR_3 ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_5 . METHOD_2 ( VAR_1 , VAR_6 class ) ) INIT = VAR_5 . METHOD_2 ( VAR_1 , VAR_6 class ) ) VAR VAR ( IF IF ( COND VAR_4 != null ) COND VAR_4 != null ( THEN THEN ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_7 ) NAME VAR_7 ( INIT = TYPE_6 . METHOD_3 ( VAR_4 ) ) INIT = TYPE_6 . METHOD_3 ( VAR_4 ) ) VAR VAR (  VAR_2 . METHOD_4 ( VAR_8 , VAR_7 ) )  VAR_2 . METHOD_4 ( VAR_8 , VAR_7 ) ) THEN THEN ) IF IF (  VAR_9 . METHOD_1 ( VAR_1 , VAR_2 ) )  VAR_9 . METHOD_1 ( VAR_1 , VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER synchronized ) MODIFIER synchronized ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_6 ) NAME VAR_6 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_7 ) NAME VAR_7 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_8 ) NAME VAR_8 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_9 ) NAME VAR_9 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_10 ) NAME VAR_10 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_11 ) NAME VAR_11 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_12 ) NAME VAR_12 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_13 ) NAME VAR_13 ) VAR VAR ( VAR VAR ( TYPE float ) TYPE float ( NAME VAR_14 ) NAME VAR_14 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_15 ) NAME VAR_15 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 , VAR_8 , VAR_9 , VAR_10 , VAR_11 , VAR_12 , VAR_13 , VAR_14 , VAR_15 ) ; )  return METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 , VAR_8 , VAR_9 , VAR_10 , VAR_11 , VAR_12 , VAR_13 , VAR_14 , VAR_15 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME id ) NAME id ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SWITCH SWITCH ( NAME id ) NAME id ( CASE VAR_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  return true ; )  return true ; ) BLOCK BLOCK ) CASE VAR_1 ( CASE VAR_2 ( BLOCK BLOCK (  METHOD_3 ( ) )  METHOD_3 ( ) (  return true ; )  return true ; ) BLOCK BLOCK ) CASE VAR_2 ( CASE VAR_3 ( BLOCK BLOCK (  METHOD_4 ( ) )  METHOD_4 ( ) (  return true ; )  return true ; ) BLOCK BLOCK ) CASE VAR_3 ( DEFAULT DEFAULT ( BLOCK BLOCK (  return false ; )  return false ; ) BLOCK BLOCK ) DEFAULT DEFAULT ) SWITCH SWITCH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME offset ) NAME offset ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 [ offset ] ) != ( VAR_2 ) ) COND ( VAR_1 [ offset ] ) != ( VAR_2 ) ( THEN THEN (  VAR_3 = VAR_1 [ offset ] )  VAR_3 = VAR_1 [ offset ] ) THEN THEN ( ELSE ELSE ( IF IF ( COND ( VAR_3 ) != ( VAR_2 ) ) COND ( VAR_3 ) != ( VAR_2 ) ( THEN THEN (  VAR_1 [ offset ] = VAR_3 )  VAR_1 [ offset ] = VAR_3 ( IF IF ( COND ( VAR_3 ) >= 0 ) COND ( VAR_3 ) >= 0 ( THEN THEN (  VAR_4 [ VAR_3 ] = offset )  VAR_4 [ VAR_3 ] = offset ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  server . METHOD_2 ( new TYPE_1 ( ) . METHOD_3 ( STRING_1 ) . METHOD_4 ( STRING_2 ) ) )  server . METHOD_2 ( new TYPE_1 ( ) . METHOD_3 ( STRING_1 ) . METHOD_4 ( STRING_2 ) ) (  server . METHOD_5 ( ) )  server . METHOD_5 ( ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_2 ) ( server . METHOD_6 ( STRING_3 ) . METHOD_7 ( ) ) ) ) INIT = ( ( TYPE_2 ) ( server . METHOD_6 ( STRING_3 ) . METHOD_7 ( ) ) ) ) VAR VAR (  assertEquals ( STRING_4 , VAR_1 . METHOD_8 ( ) ) )  assertEquals ( STRING_4 , VAR_1 . METHOD_8 ( ) ) (  VAR_1 . METHOD_9 ( ) )  VAR_1 . METHOD_9 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( METHOD_3 ( ) , VAR_2 ) ) INIT = TYPE_1 . METHOD_2 ( METHOD_3 ( ) , VAR_2 ) ) VAR VAR ( IF IF ( COND VAR_1 == 0 ) COND VAR_1 == 0 ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = 6 ) INIT = 6 ) VAR VAR (  TYPE_1 . METHOD_4 ( METHOD_3 ( ) , VAR_4 , METHOD_5 ( ) , VAR_1 , VAR_2 , VAR_3 ) )  TYPE_1 . METHOD_4 ( METHOD_3 ( ) , VAR_4 , METHOD_5 ( ) , VAR_1 , VAR_2 , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_1 . METHOD_3 ( ) ) INIT = VAR_1 . METHOD_3 ( ) ) VAR VAR ( IF IF ( COND VAR_4 == null ) COND VAR_4 == null ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE int ) TYPE int ( NAME start ) NAME start ( INIT = VAR_4 . METHOD_4 ( ) ) INIT = VAR_4 . METHOD_4 ( ) ) VAR VAR (  return METHOD_5 ( start , VAR_2 ) ; )  return METHOD_5 ( start , VAR_2 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.ArrayList<TYPE_1> ) TYPE java.util.ArrayList<TYPE_1> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_3 . METHOD_2 ( VAR_1 ) )  VAR_3 . METHOD_2 ( VAR_1 ) ( VAR VAR ( TYPE java.util.ArrayList<TYPE_2> ) TYPE java.util.ArrayList<TYPE_2> ( NAME response ) NAME response ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK (  response . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_4 ) ) )  response . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_4 ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ( IF IF ( COND RIL . RILJ_LOGD ) COND RIL . RILJ_LOGD ( THEN THEN (  VAR_3 . METHOD_5 ( VAR_5 , response ) )  VAR_3 . METHOD_5 ( VAR_5 , response ) ) THEN THEN ) IF IF (  VAR_6 . METHOD_6 ( new android.os.AsyncResult ( null , response , null ) ) )  VAR_6 . METHOD_6 ( new android.os.AsyncResult ( null , response , null ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) ( IF IF ( COND ( METHOD_2 ( ) ) != 1 ) COND ( METHOD_2 ( ) ) != 1 ( THEN THEN (  throw new TYPE_1 ( this , STRING_1 ) ; )  throw new TYPE_1 ( this , STRING_1 ) ; ) THEN THEN ) IF IF ( IF IF ( COND ( ! ( ( METHOD_3 ( ) ) instanceof TYPE_2 ) ) || ( ! ( ( ( TYPE_2 ) ( METHOD_3 ( ) ) ) . METHOD_4 ( ) ) ) ) COND ( ! ( ( METHOD_3 ( ) ) instanceof TYPE_2 ) ) || ( ! ( ( ( TYPE_2 ) ( METHOD_3 ( ) ) ) . METHOD_4 ( ) ) ) ( THEN THEN (  throw new TYPE_1 ( this , STRING_2 ) ; )  throw new TYPE_1 ( this , STRING_2 ) ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME options ) NAME options ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  VAR_6 = VAR_2 )  VAR_6 = VAR_2 (  VAR_7 = VAR_3 )  VAR_7 = VAR_3 ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_8 ) NAME VAR_8 ( INIT = new TYPE_3 ( ) ) INIT = new TYPE_3 ( ) ) VAR VAR (  METHOD_1 ( VAR_5 , VAR_4 , VAR_1 , VAR_8 , options ) )  METHOD_1 ( VAR_5 , VAR_4 , VAR_1 , VAR_8 , options ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_3 . METHOD_2 ( ) )  VAR_3 . METHOD_2 ( ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME request ) NAME request ( INIT = new TYPE_3 ( null , null , null , ( - 1 ) , null , VAR_1 , VAR_2 ) ) INIT = new TYPE_3 ( null , null , null , ( - 1 ) , null , VAR_1 , VAR_2 ) ) VAR VAR (  VAR_4 . METHOD_3 ( request ) )  VAR_4 . METHOD_3 ( request ) (  VAR_5 . METHOD_4 ( request ) )  VAR_5 . METHOD_4 ( request ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_6 ) NAME VAR_6 ( INIT = VAR_7 . METHOD_2 ( VAR_1 ) ) INIT = VAR_7 . METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_6 == null ) COND VAR_6 == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_8 ) NAME VAR_8 ( INIT = TYPE_3 . METHOD_2 ( VAR_2 ) ) INIT = TYPE_3 . METHOD_2 ( VAR_2 ) ) VAR VAR (  VAR_6 . METHOD_3 ( ) . METHOD_1 ( VAR_5 , VAR_8 , VAR_3 , VAR_4 ) )  VAR_6 . METHOD_3 ( ) . METHOD_1 ( VAR_5 , VAR_8 , VAR_3 , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 = new TYPE_1 ( VAR_2 ) )  VAR_1 = new TYPE_1 ( VAR_2 ) (  VAR_1 . METHOD_2 ( 0 ) )  VAR_1 . METHOD_2 ( 0 ) (  org.junit.Assert.assertEquals ( 0 , VAR_1 . METHOD_3 ( ) ) )  org.junit.Assert.assertEquals ( 0 , VAR_1 . METHOD_3 ( ) ) (  VAR_1 . METHOD_2 ( ( - 1 ) ) )  VAR_1 . METHOD_2 ( ( - 1 ) ) (  org.junit.Assert.assertEquals ( ( - 1 ) , VAR_1 . METHOD_3 ( ) ) )  org.junit.Assert.assertEquals ( ( - 1 ) , VAR_1 . METHOD_3 ( ) ) (  VAR_1 . METHOD_2 ( VAR_1 . METHOD_4 ( ) ) )  VAR_1 . METHOD_2 ( VAR_1 . METHOD_4 ( ) ) (  org.junit.Assert.assertEquals ( VAR_1 . METHOD_4 ( ) , VAR_1 . METHOD_3 ( ) ) )  org.junit.Assert.assertEquals ( VAR_1 . METHOD_4 ( ) , VAR_1 . METHOD_3 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( new TYPE_2 ( ) , VAR_1 , null , VAR_2 , null , VAR_3 , false , true , FLOAT_1 , ( ( TYPE_3 ) ( null ) ) , ( ( TYPE_4 [ ] ) ( null ) ) ) )  TYPE_1 . METHOD_2 ( new TYPE_2 ( ) , VAR_1 , null , VAR_2 , null , VAR_3 , false , true , FLOAT_1 , ( ( TYPE_3 ) ( null ) ) , ( ( TYPE_4 [ ] ) ( null ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( fd ) != null ) COND ( fd ) != null ( THEN THEN ( IF IF ( COND ( ( fd ) == ( VAR_1 . out ) ) || ( ( fd ) == ( VAR_2 ) ) ) COND ( ( fd ) == ( VAR_1 . out ) ) || ( ( fd ) == ( VAR_2 ) ) ( THEN THEN (  METHOD_2 ( ) )  METHOD_2 ( ) ) THEN THEN ( ELSE ELSE (  VAR_3 . set ( VAR_4 . TRUE ) )  VAR_3 . set ( VAR_4 . TRUE ) ( TRY TRY ( BLOCK BLOCK (  METHOD_3 ( ) )  METHOD_3 ( ) ) BLOCK BLOCK ( FINALLY FINALLY (  VAR_3 . set ( VAR_4 . FALSE ) )  VAR_3 . set ( VAR_4 . FALSE ) ) FINALLY FINALLY ) TRY TRY ) ELSE ELSE ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.Class<?> ) TYPE java.lang.Class<?> ( NAME target ) NAME target ( INIT = VAR_1 class ) INIT = VAR_1 class ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_2 ( target , null , new java.lang.String [ ] { STRING_1 } ) ) INIT = TYPE_2 . METHOD_2 ( target , null , new java.lang.String [ ] { STRING_1 } ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_4 ( VAR_4 , VAR_5 , VAR_6 , 0 , VAR_2 ) ) INIT = new TYPE_4 ( VAR_4 , VAR_5 , VAR_6 , 0 , VAR_2 ) ) VAR VAR (  VAR_3 . run ( null ) )  VAR_3 . run ( null ) (  org.mockito.Mockito.verify ( VAR_4 ) . METHOD_3 ( VAR_7 class , ( ( target . getName ( ) ) + STRING_2 ) ) )  org.mockito.Mockito.verify ( VAR_4 ) . METHOD_3 ( VAR_7 class , ( ( target . getName ( ) ) + STRING_2 ) ) (  org.mockito.Mockito.verify ( VAR_4 ) . METHOD_4 ( VAR_8 ) )  org.mockito.Mockito.verify ( VAR_4 ) . METHOD_4 ( VAR_8 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) INIT = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_2 ( VAR_1 . METHOD_4 ( ) ) ) INIT = METHOD_2 ( VAR_1 . METHOD_4 ( ) ) ) VAR VAR (  VAR_4 = METHOD_5 ( new TYPE_1 ( VAR_1 . METHOD_6 ( ) , VAR_3 , VAR_2 ) , VAR_1 ) )  VAR_4 = METHOD_5 ( new TYPE_1 ( VAR_1 . METHOD_6 ( ) , VAR_3 , VAR_2 ) , VAR_1 ) (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME context ) NAME context ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( ) ) INIT = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( ) ) VAR VAR ( IF IF ( COND VAR_2 == null ) COND VAR_2 == null ( THEN THEN (  TYPE_4 . METHOD_4 ( context ) )  TYPE_4 . METHOD_4 ( context ) (  TYPE_5 . e ( STRING_1 , STRING_2 ) )  TYPE_5 . e ( STRING_1 , STRING_2 ) ) THEN THEN ( ELSE ELSE ( VAR VAR ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME call ) NAME call ( INIT = VAR_2 . METHOD_5 ( ) ) INIT = VAR_2 . METHOD_5 ( ) ) VAR VAR ( IF IF ( COND call != null ) COND call != null ( THEN THEN (  call . METHOD_6 ( VAR_1 ) )  call . METHOD_6 ( VAR_1 ) (  TYPE_3 . METHOD_2 ( ) . METHOD_7 ( false , false ) )  TYPE_3 . METHOD_2 ( ) . METHOD_7 ( false , false ) ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE android.content.Intent ) TYPE android.content.Intent ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_2 ) == null ) COND ( VAR_2 ) == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . METHOD_2 ( VAR_4 , ( - 1 ) ) ) INIT = VAR_1 . METHOD_2 ( VAR_4 , ( - 1 ) ) ) VAR VAR (  VAR_5 = ( VAR_3 != ( VAR_6 ) ) && ( VAR_3 != ( VAR_7 ) ) )  VAR_5 = ( VAR_3 != ( VAR_6 ) ) && ( VAR_3 != ( VAR_7 ) ) (  TYPE_1 . METHOD_3 ( ) )  TYPE_1 . METHOD_3 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  android.util.Slog.w ( TYPE_3 . TAG , ( ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + VAR_2 ) + STRING_3 ) ) )  android.util.Slog.w ( TYPE_3 . TAG , ( ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + VAR_2 ) + STRING_3 ) ) (  return VAR_2 != null ? VAR_3 . METHOD_2 ( VAR_1 . netId , VAR_2 ) : VAR_3 . METHOD_3 ( VAR_1 ) ; )  return VAR_2 != null ? VAR_3 . METHOD_2 ( VAR_1 . netId , VAR_2 ) : VAR_3 . METHOD_3 ( VAR_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME r ) NAME r ( INIT = VAR_2 . get ( id ) ) INIT = VAR_2 . get ( id ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = null ) INIT = null ) VAR VAR ( IF IF ( COND r != null ) COND r != null ( THEN THEN (  VAR_3 = METHOD_2 ( r , VAR_1 ) )  VAR_3 = METHOD_2 ( r , VAR_1 ) ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  VAR_2 . METHOD_3 ( r ) )  VAR_2 . METHOD_3 ( r ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME context ) NAME context ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE android.os.Message ) TYPE android.os.Message ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) ( TRY TRY ( BLOCK BLOCK (  VAR_4 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 ) )  VAR_4 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_2 ( STRING_1 , e , VAR_5 ) ; )  throw new TYPE_2 ( STRING_1 , e , VAR_5 ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ( IF IF ( COND ! ( TYPE_3 . METHOD_3 ( context , VAR_6 ) ) ) COND ! ( TYPE_3 . METHOD_3 ( context , VAR_6 ) ) ( THEN THEN (  METHOD_4 ( ( ( VAR_2 == ( VAR_7 ) ) && ( TYPE_3 . METHOD_5 ( context ) ) ) ) )  METHOD_4 ( ( ( VAR_2 == ( VAR_7 ) ) && ( TYPE_3 . METHOD_5 ( context ) ) ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < ( VAR_2 ) ) COND i < ( VAR_2 ) ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK (  VAR_1 . append ( CHAR_1 ) )  VAR_1 . append ( CHAR_1 ) ) BLOCK BLOCK ) FOR FOR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . toString ( ) ) INIT = VAR_1 . toString ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  TYPE_2 . METHOD_2 ( VAR_4 ) )  TYPE_2 . METHOD_2 ( VAR_4 ) (  VAR_5 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_3 . METHOD_5 ( ) ) , VAR_6 ) )  VAR_5 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_3 . METHOD_5 ( ) ) , VAR_6 ) (  fail ( STRING_1 ) )  fail ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME expected ) NAME expected ) VAR VAR ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) INIT = TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_3 . METHOD_4 ( expected ) ) INIT = TYPE_3 . METHOD_4 ( expected ) ) VAR VAR (  TYPE_4 . METHOD_5 ( VAR_3 , VAR_2 ) )  TYPE_4 . METHOD_5 ( VAR_3 , VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME id ) NAME id ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( ) )  VAR_1 . METHOD_2 ( ) (  TYPE_1 . METHOD_3 ( ) )  TYPE_1 . METHOD_3 ( ) (  TYPE_2 . METHOD_4 ( id ) )  TYPE_2 . METHOD_4 ( id ) (  TYPE_1 . METHOD_5 ( id ) )  TYPE_1 . METHOD_5 ( id ) (  TYPE_2 . METHOD_6 ( id ) )  TYPE_2 . METHOD_6 ( id ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Throwable ) TYPE java.lang.Throwable ( NAME e ) NAME e ( BLOCK BLOCK (  throw TYPE_1 . METHOD_7 ( e ) ; )  throw TYPE_1 . METHOD_7 ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ( FINALLY FINALLY (  VAR_1 . METHOD_8 ( ) )  VAR_1 . METHOD_8 ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE long ) TYPE long ( NAME when ) NAME when ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( int ) ( when / INT_1 ) ) ) INIT = ( ( int ) ( when / INT_1 ) ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_1 . METHOD_2 ( VAR_3 , VAR_1 ) ) INIT = TYPE_1 . METHOD_2 ( VAR_3 , VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_2 < 0 ) COND VAR_2 < 0 ( THEN THEN (  VAR_2 = ( ~ VAR_2 ) - 1 )  VAR_2 = ( ~ VAR_2 ) - 1 ( IF IF ( COND VAR_2 < 0 ) COND VAR_2 < 0 ( THEN THEN (  return VAR_4 ; )  return VAR_4 ; ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return ( VAR_5 ) + ( ( VAR_6 [ ( ( VAR_7 [ VAR_2 ] ) & INT_2 ) ] ) * INT_1 ) ; )  return ( VAR_5 ) + ( ( VAR_6 [ ( ( VAR_7 [ VAR_2 ] ) & INT_2 ) ] ) * INT_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private synchronized ) MODIFIER private synchronized ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE byte ) TYPE byte ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME data ) NAME data ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  android.util.Log.v ( VAR_3 . TAG , ( STRING_1 + VAR_1 ) ) )  android.util.Log.v ( VAR_3 . TAG , ( STRING_1 + VAR_1 ) ) ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_1 . METHOD_2 ( data ) ) INIT = TYPE_1 . METHOD_2 ( data ) ) VAR VAR ( VAR VAR ( TYPE android.os.Message ) TYPE android.os.Message ( NAME msg ) NAME msg ( INIT = VAR_5 . METHOD_3 ( VAR_6 ) ) INIT = VAR_5 . METHOD_3 ( VAR_6 ) ) VAR VAR (  msg.arg1 = VAR_1 )  msg.arg1 = VAR_1 (  msg.obj = VAR_4 )  msg.obj = VAR_4 (  VAR_5 . METHOD_4 ( msg ) )  VAR_5 . METHOD_4 ( msg ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME node ) NAME node ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_1 ) ) COND ! ( VAR_1 ) ( THEN THEN (  return new TYPE_1 ( ) ; )  return new TYPE_1 ( ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME parent ) NAME parent ( INIT = METHOD_3 ( ) ) INIT = METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( WHILE WHILE ( COND parent != null ) COND parent != null ( BLOCK BLOCK (  VAR_3 = parent . METHOD_2 ( ) )  VAR_3 = parent . METHOD_2 ( ) (  VAR_2 . METHOD_4 ( VAR_3 ) )  VAR_2 . METHOD_4 ( VAR_3 ) (  parent = parent . METHOD_3 ( ) )  parent = parent . METHOD_3 ( ) ) BLOCK BLOCK ) WHILE WHILE (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  assertEquals ( VAR_1 [ 0 ] . x , VAR_1 [ 0 ] . y ) )  assertEquals ( VAR_1 [ 0 ] . x , VAR_1 [ 0 ] . y ) (  assertEquals ( VAR_1 [ 1 ] . x , VAR_1 [ 1 ] . y ) )  assertEquals ( VAR_1 [ 1 ] . x , VAR_1 [ 1 ] . y ) (  METHOD_2 ( VAR_1 [ 2 ] . x , VAR_1 [ 2 ] . y ) )  METHOD_2 ( VAR_1 [ 2 ] . x , VAR_1 [ 2 ] . y ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME entry ) NAME entry ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  assertEquals ( VAR_1 , VAR_6 ) )  assertEquals ( VAR_1 , VAR_6 ) (  assertEquals ( VAR_2 , VAR_7 ) )  assertEquals ( VAR_2 , VAR_7 ) (  assertEquals ( VAR_3 , VAR_8 ) )  assertEquals ( VAR_3 , VAR_8 ) (  assertEquals ( VAR_4 , VAR_9 ) )  assertEquals ( VAR_4 , VAR_9 ) (  assertEquals ( VAR_5 , VAR_10 ) )  assertEquals ( VAR_5 , VAR_10 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.Map<java.lang.String,TYPE_1> ) RETURN java.util.Map<java.lang.String,TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  METHOD_3 ( VAR_4 < java.lang.String > METHOD_4 ( ) , VAR_3 , VAR_2 , VAR_5 ) )  METHOD_3 ( VAR_4 < java.lang.String > METHOD_4 ( ) , VAR_3 , VAR_2 , VAR_5 ) (  return METHOD_5 ( VAR_3 , new TYPE_3 ( ) , VAR_1 ) ; )  return METHOD_5 ( VAR_3 , new TYPE_3 ( ) , VAR_1 ) ; ) BLOCK BLOCK ( FINALLY FINALLY (  VAR_3 . METHOD_6 ( ) )  VAR_3 . METHOD_6 ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN java.io.File ) RETURN java.io.File ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_4 . METHOD_2 ( ) ) INIT = TYPE_4 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_5 . METHOD_3 ( ) ) INIT = TYPE_5 . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_6 ( VAR_2 , null ) ) INIT = new TYPE_6 ( VAR_2 , null ) ) VAR VAR (  VAR_1 . METHOD_4 ( VAR_3 ) )  VAR_1 . METHOD_4 ( VAR_3 ) (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_3 ) NAME METHOD_3 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_4 ( METHOD_5 ( ) ) ) INIT = METHOD_4 ( METHOD_5 ( ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_6 ( VAR_2 , STRING_3 ) ) INIT = METHOD_6 ( VAR_2 , STRING_3 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_6 ( VAR_2 , STRING_4 ) ) INIT = METHOD_6 ( VAR_2 , STRING_4 ) ) VAR VAR (  VAR_1 . METHOD_7 ( VAR_3 ) )  VAR_1 . METHOD_7 ( VAR_3 ) (  VAR_1 . METHOD_7 ( new TYPE_2 ( 0 ) ) )  VAR_1 . METHOD_7 ( new TYPE_2 ( 0 ) ) (  VAR_1 . METHOD_7 ( new TYPE_2 ( 1 ) ) )  VAR_1 . METHOD_7 ( new TYPE_2 ( 1 ) ) (  VAR_1 . METHOD_7 ( VAR_4 ) )  VAR_1 . METHOD_7 ( VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD (  METHOD_2 ( STRING_1 , STRING_2 , new TYPE_1 ( ) { public void METHOD_3 ( java.util.List < TYPE_2 > VAR_1 ) { long VAR_2 = METHOD_4 ( METHOD_5 ( ) ) ; TYPE_2 VAR_3 = METHOD_6 ( VAR_2 , STRING_3 ) ; TYPE_2 VAR_4 = METHOD_6 ( VAR_2 , STRING_4 ) ; VAR_1 . METHOD_7 ( VAR_3 ) ; VAR_1 . METHOD_7 ( new TYPE_2 ( 0 ) ) ; VAR_1 . METHOD_7 ( new TYPE_2 ( 1 ) ) ; VAR_1 . METHOD_7 ( VAR_4 ) ; } } ) )  METHOD_2 ( STRING_1 , STRING_2 , new TYPE_1 ( ) { public void METHOD_3 ( java.util.List < TYPE_2 > VAR_1 ) { long VAR_2 = METHOD_4 ( METHOD_5 ( ) ) ; TYPE_2 VAR_3 = METHOD_6 ( VAR_2 , STRING_3 ) ; TYPE_2 VAR_4 = METHOD_6 ( VAR_2 , STRING_4 ) ; VAR_1 . METHOD_7 ( VAR_3 ) ; VAR_1 . METHOD_7 ( new TYPE_2 ( 0 ) ) ; VAR_1 . METHOD_7 ( new TYPE_2 ( 1 ) ) ; VAR_1 . METHOD_7 ( VAR_4 ) ; } } ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<?> ) TYPE TYPE_1<?> ( NAME parent ) NAME parent ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME id ) NAME id ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_3 . METHOD_2 ( ) ) == 1 ) COND ( VAR_3 . METHOD_2 ( ) ) == 1 ( THEN THEN ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( INIT = ( ( TYPE_3 ) ( METHOD_3 ( VAR_5 ) ) ) ) INIT = ( ( TYPE_3 ) ( METHOD_3 ( VAR_5 ) ) ) ) VAR VAR ( IF IF ( COND ( VAR_4 == null ) || ( ! ( VAR_4 . METHOD_4 ( ) ) ) ) COND ( VAR_4 == null ) || ( ! ( VAR_4 . METHOD_4 ( ) ) ) ( THEN THEN (  VAR_6 . METHOD_5 ( ) )  VAR_6 . METHOD_5 ( ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_1 ) NAME VAR_1 ( INIT = new byte [ ] { INT_1 , - 100 , 3 , 0 , 0 , 0 , 0 , 1 } ) INIT = new byte [ ] { INT_1 , - 100 , 3 , 0 , 0 , 0 , 0 , 1 } ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME in ) NAME in ( INIT = new TYPE_2 ( new TYPE_3 ( VAR_1 ) ) ) INIT = new TYPE_2 ( new TYPE_3 ( VAR_1 ) ) ) VAR VAR (  assertEquals ( ( - 1 ) , in . METHOD_2 ( ) ) )  assertEquals ( ( - 1 ) , in . METHOD_2 ( ) ) (  assertEquals ( ( - 1 ) , in . METHOD_2 ( ) ) )  assertEquals ( ( - 1 ) , in . METHOD_2 ( ) ) (  assertEquals ( 0 , in . METHOD_3 ( ) ) )  assertEquals ( 0 , in . METHOD_3 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME index ) NAME index ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . get ( index ) ) INIT = VAR_2 . get ( index ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_3 . METHOD_2 ( ) )  VAR_3 . METHOD_2 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME e ) NAME e ( BLOCK BLOCK (  android.util.Log.w ( TYPE_2 . TAG , ( ( ( STRING_1 + ( VAR_1 . callback ) ) + STRING_2 ) + ( VAR_1 . pkg ) ) ) )  android.util.Log.w ( TYPE_2 . TAG , ( ( ( STRING_1 + ( VAR_1 . callback ) ) + STRING_2 ) + ( VAR_1 . pkg ) ) ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  VAR_2 . METHOD_3 ( index ) )  VAR_2 . METHOD_3 ( index ) (  METHOD_4 ( VAR_4 ) )  METHOD_4 ( VAR_4 ) ( IF IF ( COND ( VAR_2 . size ( ) ) > 0 ) COND ( VAR_2 . size ( ) ) > 0 ( THEN THEN (  METHOD_5 ( ) )  METHOD_5 ( ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME out ) NAME out ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  VAR_3 )  VAR_3 ( BLOCK BLOCK ( IF IF ( COND ( VAR_4 . METHOD_2 ( ) ) || ( ! ( TYPE_3 . METHOD_3 ( ) ) ) ) COND ( VAR_4 . METHOD_2 ( ) ) || ( ! ( TYPE_3 . METHOD_3 ( ) ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  VAR_4 . METHOD_4 ( VAR_1 ) )  VAR_4 . METHOD_4 ( VAR_1 ) (  VAR_4 . METHOD_5 ( out ) )  VAR_4 . METHOD_5 ( out ) (  VAR_4 . METHOD_6 ( new TYPE_4 ( new TYPE_5 ( out ) ) ) )  VAR_4 . METHOD_6 ( new TYPE_4 ( new TYPE_5 ( out ) ) ) (  TYPE_3 . METHOD_7 ( VAR_2 ) )  TYPE_3 . METHOD_7 ( VAR_2 ) ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.Set<java.lang.String> ) RETURN java.util.Set<java.lang.String> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME path ) NAME path ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( path , VAR_2 ) ) INIT = new TYPE_1 ( path , VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE java.util.Set<byte[]> ) TYPE java.util.Set<byte[]> ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 ) INIT = VAR_4 ) VAR VAR ( VAR VAR ( TYPE java.util.Set<java.lang.String> ) TYPE java.util.Set<java.lang.String> ( NAME VAR_5 ) NAME VAR_5 ( INIT = new TYPE_2 < java.lang.String > ( ) ) INIT = new TYPE_2 < java.lang.String > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE byte[] ) TYPE byte[] ( NAME value ) NAME value ( IN VAR_3 ) IN VAR_3 ( BLOCK BLOCK (  VAR_5 . METHOD_2 ( new java.lang.String ( TYPE_3 . METHOD_3 ( value ) ) ) )  VAR_5 . METHOD_2 ( new java.lang.String ( TYPE_3 . METHOD_3 ( value ) ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_5 ; )  return VAR_5 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public synchronized ) MODIFIER public synchronized ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) == null ) COND ( VAR_1 ) == null ( THEN THEN (  throw new java.io.IOException ( STRING_1 ) ; )  throw new java.io.IOException ( STRING_1 ) ; ) THEN THEN ) IF IF ( IF IF ( COND ( - 1 ) == ( VAR_2 ) ) COND ( - 1 ) == ( VAR_2 ) ( THEN THEN (  throw new java.io.IOException ( STRING_2 ) ; )  throw new java.io.IOException ( STRING_2 ) ; ) THEN THEN ) IF IF (  pos = VAR_2 )  pos = VAR_2 ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME packageName ) NAME packageName ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME userId ) NAME userId ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  TYPE_1 . d ( VAR_2 . TAG , ( ( ( STRING_1 + packageName ) + STRING_2 ) + userId ) ) )  TYPE_1 . d ( VAR_2 . TAG , ( ( ( STRING_1 + packageName ) + STRING_2 ) + userId ) ) ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 . METHOD_2 ( packageName , userId ) ) INIT = VAR_4 . METHOD_2 ( packageName , userId ) ) VAR VAR (  METHOD_3 ( packageName , userId , VAR_3 ) )  METHOD_3 ( packageName , userId , VAR_3 ) (  VAR_5 . METHOD_4 ( packageName , userId ) )  VAR_5 . METHOD_4 ( packageName , userId ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN byte[] ) RETURN byte[] ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( IF IF ( COND TYPE_1 . METHOD_2 ( context ) ) COND TYPE_1 . METHOD_2 ( context ) ( THEN THEN (  return VAR_2 . METHOD_3 ( VAR_3 , VAR_4 , VAR_1 ) ; )  return VAR_2 . METHOD_3 ( VAR_3 , VAR_4 , VAR_1 ) ; ) THEN THEN ( ELSE ELSE (  return VAR_2 . METHOD_3 ( VAR_4 , VAR_1 ) ; )  return VAR_2 . METHOD_3 ( VAR_4 , VAR_1 ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_3 ( VAR_5 ) ; )  throw new TYPE_3 ( VAR_5 ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME id ) NAME id ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( ) )  VAR_1 . METHOD_2 ( ) (  TYPE_1 . METHOD_3 ( id ) )  TYPE_1 . METHOD_3 ( id ) ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  TYPE_1 . METHOD_4 ( id ) )  TYPE_1 . METHOD_4 ( id ) ) THEN THEN ( ELSE ELSE (  TYPE_1 . METHOD_5 ( id ) )  TYPE_1 . METHOD_5 ( id ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Throwable ) TYPE java.lang.Throwable ( NAME e ) NAME e ( BLOCK BLOCK (  throw TYPE_2 . METHOD_6 ( e ) ; )  throw TYPE_2 . METHOD_6 ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ( FINALLY FINALLY (  VAR_1 . METHOD_7 ( ) )  VAR_1 . METHOD_7 ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME path ) NAME path ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( null == path ) || ( path . equals ( STRING_1 ) ) ) COND ( null == path ) || ( path . equals ( STRING_1 ) ) ( THEN THEN (  throw new java.lang.IllegalArgumentException ( STRING_2 ) ; )  throw new java.lang.IllegalArgumentException ( STRING_2 ) ; ) THEN THEN ( ELSE ELSE ( IF IF ( COND ( METHOD_2 ( ) ) == ( VAR_1 ) ) COND ( METHOD_2 ( ) ) == ( VAR_1 ) ( THEN THEN (  throw new TYPE_1 ( STRING_3 ) ; )  throw new TYPE_1 ( STRING_3 ) ; ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF (  METHOD_3 ( VAR_2 , path ) )  METHOD_3 ( VAR_2 , path ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public synchronized ) MODIFIER public synchronized ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME b ) NAME b ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( ( ( byte ) ( b ) ) ) )  VAR_1 . METHOD_2 ( ( ( byte ) ( b ) ) ) ( IF IF ( COND b == CHAR_1 ) COND b == CHAR_1 ( THEN THEN ( SYNCHRONIZED SYNCHRONIZED (  out )  out ( BLOCK BLOCK (  TYPE_1 . METHOD_3 ( VAR_2 , out ) )  TYPE_1 . METHOD_3 ( VAR_2 , out ) (  VAR_1 . METHOD_4 ( ) )  VAR_1 . METHOD_4 ( ) (  TYPE_1 . METHOD_3 ( VAR_1 , out ) )  TYPE_1 . METHOD_3 ( VAR_1 , out ) (  VAR_1 . METHOD_5 ( ) )  VAR_1 . METHOD_5 ( ) ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_1 . METHOD_6 ( ) ) == 1 ) COND ( VAR_1 . METHOD_6 ( ) ) == 1 ( THEN THEN (  METHOD_1 ( CHAR_1 ) )  METHOD_1 ( CHAR_1 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  log ( STRING_1 ) )  log ( STRING_1 ) ) THEN THEN ) IF IF (  VAR_2 . METHOD_2 ( ) . METHOD_3 ( METHOD_4 ( ) , VAR_3 , null ) )  VAR_2 . METHOD_2 ( ) . METHOD_3 ( METHOD_4 ( ) , VAR_3 , null ) (  VAR_2 . METHOD_2 ( ) . METHOD_5 ( METHOD_4 ( ) , VAR_4 , null ) )  VAR_2 . METHOD_2 ( ) . METHOD_5 ( METHOD_4 ( ) , VAR_4 , null ) (  VAR_2 . METHOD_2 ( ) . METHOD_6 ( METHOD_4 ( ) , VAR_5 , null ) )  VAR_2 . METHOD_2 ( ) . METHOD_6 ( METHOD_4 ( ) , VAR_5 , null ) (  VAR_6 . METHOD_7 ( this ) )  VAR_6 . METHOD_7 ( this ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME packageName ) NAME packageName ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( packageName . METHOD_2 ( CHAR_1 , CHAR_2 ) ) + STRING_2 ) INIT = ( packageName . METHOD_2 ( CHAR_1 , CHAR_2 ) ) + STRING_2 ) VAR VAR ( VAR VAR ( TYPE java.util.Map<java.lang.String,TYPE_1> ) TYPE java.util.Map<java.lang.String,TYPE_1> ( NAME input ) NAME input ( INIT = TYPE_2 . METHOD_3 ( ) ) INIT = TYPE_2 . METHOD_3 ( ) ) VAR VAR (  input . METHOD_4 ( STRING_3 , new TYPE_1 ( true ) . METHOD_5 ( STRING_4 , true ) ) )  input . METHOD_4 ( STRING_3 , new TYPE_1 ( true ) . METHOD_5 ( STRING_4 , true ) ) (  METHOD_6 ( packageName , input ) )  METHOD_6 ( packageName , input ) (  METHOD_7 ( VAR_2 ) )  METHOD_7 ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME out ) NAME out ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME size ) NAME size ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND out . METHOD_2 ( ) ) COND out . METHOD_2 ( ) ( THEN THEN (  out . METHOD_3 ( java.lang.String.format ( STRING_1 , ( VAR_2 + STRING_2 ) , java.lang.Integer . METHOD_4 ( size ) ) ) )  out . METHOD_3 ( java.lang.String.format ( STRING_1 , ( VAR_2 + STRING_2 ) , java.lang.Integer . METHOD_4 ( size ) ) ) ) THEN THEN ) IF IF (  out . METHOD_5 ( size ) )  out . METHOD_5 ( size ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( STRING_1 , STRING_2 ) ) INIT = new TYPE_1 ( STRING_1 , STRING_2 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( STRING_1 , STRING_3 ) ) INIT = new TYPE_1 ( STRING_1 , STRING_3 ) ) VAR VAR (  assertEquals ( STRING_4 , TYPE_2 . METHOD_2 ( VAR_1 ) . METHOD_3 ( VAR_1 ) ) )  assertEquals ( STRING_4 , TYPE_2 . METHOD_2 ( VAR_1 ) . METHOD_3 ( VAR_1 ) ) (  assertEquals ( STRING_5 , TYPE_2 . METHOD_2 ( VAR_1 ) . METHOD_3 ( VAR_2 ) ) )  assertEquals ( STRING_5 , TYPE_2 . METHOD_2 ( VAR_1 ) . METHOD_3 ( VAR_2 ) ) (  assertEquals ( STRING_6 , TYPE_2 . METHOD_2 ( VAR_2 ) . METHOD_3 ( VAR_1 ) ) )  assertEquals ( STRING_6 , TYPE_2 . METHOD_2 ( VAR_2 ) . METHOD_3 ( VAR_1 ) ) (  assertEquals ( STRING_6 , TYPE_2 . METHOD_2 ( VAR_2 ) . METHOD_3 ( VAR_2 ) ) )  assertEquals ( STRING_6 , TYPE_2 . METHOD_2 ( VAR_2 ) . METHOD_3 ( VAR_2 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( METHOD_2 ( ) ) == true ) COND ( METHOD_2 ( ) ) == true ( THEN THEN ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  android.util.Log.d ( VAR_2 . TAG , STRING_1 ) )  android.util.Log.d ( VAR_2 . TAG , STRING_1 ) ) THEN THEN ) IF IF (  return true ; )  return true ; ) THEN THEN ) IF IF ( TRY TRY ( BLOCK BLOCK (  return VAR_3 . METHOD_1 ( TYPE_1 . METHOD_3 ( ) ) ; )  return VAR_3 . METHOD_1 ( TYPE_1 . METHOD_3 ( ) ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME e ) NAME e ( BLOCK BLOCK (  android.util.Log.e ( VAR_2 . TAG , STRING_2 , e ) )  android.util.Log.e ( VAR_2 . TAG , STRING_2 , e ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  assertTrue ( STRING_1 , VAR_1 . METHOD_2 ( ) ) )  assertTrue ( STRING_1 , VAR_1 . METHOD_2 ( ) ) (  VAR_2 . METHOD_3 ( true ) )  VAR_2 . METHOD_3 ( true ) (  assertTrue ( STRING_2 , VAR_2 . METHOD_2 ( ) ) )  assertTrue ( STRING_2 , VAR_2 . METHOD_2 ( ) ) (  VAR_3 . METHOD_3 ( false ) )  VAR_3 . METHOD_3 ( false ) (  assertFalse ( STRING_3 , VAR_3 . METHOD_2 ( ) ) )  assertFalse ( STRING_3 , VAR_3 . METHOD_2 ( ) ) (  VAR_2 . METHOD_4 ( ) )  VAR_2 . METHOD_4 ( ) (  VAR_2 . METHOD_5 ( ) . METHOD_6 ( ) )  VAR_2 . METHOD_5 ( ) . METHOD_6 ( ) (  VAR_3 . METHOD_4 ( ) )  VAR_3 . METHOD_4 ( ) ( TRY TRY ( BLOCK BLOCK (  VAR_3 . METHOD_5 ( ) )  VAR_3 . METHOD_5 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Throwable ) TYPE java.lang.Throwable ( NAME expected ) NAME expected ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME context ) NAME context ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_3 . METHOD_2 ( context ) ) INIT = TYPE_3 . METHOD_2 ( context ) ) VAR VAR ( IF IF ( COND VAR_2 == null ) COND VAR_2 == null ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( IF IF ( COND VAR_1 != ( VAR_3 ) ) COND VAR_1 != ( VAR_3 ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  return ( context . METHOD_3 ( VAR_4 ) ) == ( VAR_5 ) ; )  return ( context . METHOD_3 ( VAR_4 ) ) == ( VAR_5 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME test ) NAME test ) VAR VAR ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.String> ) TYPE java.util.Map<java.lang.String,java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_2 . METHOD_2 ( test ) ) ) COND ! ( VAR_2 . METHOD_2 ( test ) ) ( THEN THEN ( IF IF ( COND ( VAR_3 ) != null ) COND ( VAR_3 ) != null ( THEN THEN (  VAR_3 . info ( java.lang.String.format ( STRING_1 , test . METHOD_3 ( ) , test . METHOD_4 ( ) , VAR_4 ) ) )  VAR_3 . info ( java.lang.String.format ( STRING_1 , test . METHOD_3 ( ) , test . METHOD_4 ( ) , VAR_4 ) ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  super . METHOD_1 ( test , VAR_1 ) )  super . METHOD_1 ( test , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  assertEquals ( null , TYPE_1 . METHOD_2 ( ) ) )  assertEquals ( null , TYPE_1 . METHOD_2 ( ) ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( ) ) INIT = TYPE_1 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_3 ( ) ) INIT = new TYPE_3 ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  TYPE_1 . METHOD_3 ( VAR_2 ) )  TYPE_1 . METHOD_3 ( VAR_2 ) ( TRY TRY ( BLOCK BLOCK (  METHOD_4 ( VAR_2 , TYPE_1 . METHOD_2 ( ) ) )  METHOD_4 ( VAR_2 , TYPE_1 . METHOD_2 ( ) ) ) BLOCK BLOCK ( FINALLY FINALLY (  TYPE_1 . METHOD_3 ( VAR_1 ) )  TYPE_1 . METHOD_3 ( VAR_1 ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_3 ) NAME VAR_3 ( BLOCK BLOCK (  assertNotNull ( TYPE_5 . METHOD_5 ( ) ) )  assertNotNull ( TYPE_5 . METHOD_5 ( ) ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  METHOD_4 ( VAR_1 , TYPE_1 . METHOD_2 ( ) ) )  METHOD_4 ( VAR_1 , TYPE_1 . METHOD_2 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( STRING_1 , TYPE_2 . METHOD_2 ( ) , true ) ) INIT = new TYPE_1 ( STRING_1 , TYPE_2 . METHOD_2 ( ) , true ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_3 ( null , VAR_1 , VAR_3 , VAR_4 ) ) INIT = new TYPE_3 ( null , VAR_1 , VAR_3 , VAR_4 ) ) VAR VAR (  VAR_2 . METHOD_3 ( VAR_5 class , VAR_6 ) )  VAR_2 . METHOD_3 ( VAR_5 class , VAR_6 ) (  VAR_2 . METHOD_3 ( VAR_7 class , VAR_8 ) )  VAR_2 . METHOD_3 ( VAR_7 class , VAR_8 ) (  VAR_2 . METHOD_4 ( ) )  VAR_2 . METHOD_4 ( ) (  VAR_1 . METHOD_5 ( true ) )  VAR_1 . METHOD_5 ( true ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ( BLOCK BLOCK (  e . METHOD_6 ( ) )  e . METHOD_6 ( ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN com.android.jack.ir.ast.JMethod ) RETURN com.android.jack.ir.ast.JMethod ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE com.android.jack.ir.ast.JDefinedClassOrInterface ) TYPE com.android.jack.ir.ast.JDefinedClassOrInterface ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE com.android.jack.ir.ast.JMethod ) TYPE com.android.jack.ir.ast.JMethod ( NAME method ) NAME method ( INIT = null ) INIT = null ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( new java.lang.String ( VAR_4 ) ) + ( new java.lang.String ( VAR_1 . METHOD_2 ( ) ) ) ) INIT = ( new java.lang.String ( VAR_4 ) ) + ( new java.lang.String ( VAR_1 . METHOD_2 ( ) ) ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE com.android.jack.ir.ast.JMethod ) TYPE com.android.jack.ir.ast.JMethod ( NAME VAR_5 ) NAME VAR_5 ( IN VAR_2 . METHOD_3 ( ) ) IN VAR_2 . METHOD_3 ( ) ( BLOCK BLOCK ( IF IF ( COND VAR_3 . equals ( TYPE_2 . METHOD_4 ( ) . getName ( VAR_5 ) ) ) COND VAR_3 . equals ( TYPE_2 . METHOD_4 ( ) . getName ( VAR_5 ) ) ( THEN THEN (  method = VAR_5 )  method = VAR_5 (  break ; )  break ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return method ; )  return method ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  METHOD_3 ( VAR_1 , VAR_2 ) )  METHOD_3 ( VAR_1 , VAR_2 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_2 . METHOD_4 ( VAR_4 class ) ) INIT = TYPE_2 . METHOD_4 ( VAR_4 class ) ) VAR VAR ( VAR VAR ( TYPE java.util.ArrayList<TYPE_1> ) TYPE java.util.ArrayList<TYPE_1> ( NAME VAR_5 ) NAME VAR_5 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR (  VAR_5 . METHOD_5 ( VAR_3 ) )  VAR_5 . METHOD_5 ( VAR_3 ) (  TYPE_2 . when ( VAR_1 . METHOD_6 ( ) ) . thenReturn ( VAR_5 ) )  TYPE_2 . when ( VAR_1 . METHOD_6 ( ) ) . thenReturn ( VAR_5 ) ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_6 ) NAME VAR_6 ( INIT = VAR_7 . METHOD_7 ( VAR_8 ) ) INIT = VAR_7 . METHOD_7 ( VAR_8 ) ) VAR VAR (  org.mockito.Mockito.verify ( VAR_9 ) . METHOD_8 ( VAR_1 , VAR_3 ) )  org.mockito.Mockito.verify ( VAR_9 ) . METHOD_8 ( VAR_1 , VAR_3 ) (  assertEquals ( VAR_6 , true ) )  assertEquals ( VAR_6 , true ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND METHOD_2 ( ) ) COND METHOD_2 ( ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  android.util.Log . i ( VAR_1 . TAG , STRING_1 ) )  android.util.Log . i ( VAR_1 . TAG , STRING_1 ) (  METHOD_3 ( ) )  METHOD_3 ( ) ( VAR VAR ( TYPE android.os.Message ) TYPE android.os.Message ( NAME msg ) NAME msg ( INIT = android.os.Message . METHOD_4 ( VAR_2 , VAR_3 ) ) INIT = android.os.Message . METHOD_4 ( VAR_2 , VAR_3 ) ) VAR VAR (  VAR_4 . METHOD_5 ( ) . METHOD_6 ( msg ) )  VAR_4 . METHOD_5 ( ) . METHOD_6 ( msg ) ( TRY TRY ( BLOCK BLOCK (  VAR_5 . METHOD_7 ( ) )  VAR_5 . METHOD_7 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME e ) NAME e ( BLOCK BLOCK (  e . METHOD_8 ( ) )  e . METHOD_8 ( ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  org.junit.Assert.assertEquals ( VAR_6 , VAR_4 . METHOD_9 ( ) ) )  org.junit.Assert.assertEquals ( VAR_6 , VAR_4 . METHOD_9 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.io.File ) RETURN java.io.File ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_3 . METHOD_2 ( ) ) INIT = TYPE_3 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_4 . METHOD_3 ( ) ) INIT = TYPE_4 . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_5 ( VAR_2 , VAR_4 , false , false ) ) INIT = new TYPE_5 ( VAR_2 , VAR_4 , false , false ) ) VAR VAR (  VAR_1 . METHOD_4 ( VAR_3 , false ) )  VAR_1 . METHOD_4 ( VAR_3 , false ) (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME rr ) NAME rr ( INIT = VAR_2 . METHOD_2 ( VAR_1 ) ) INIT = VAR_2 . METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND rr != null ) COND rr != null ( THEN THEN ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME ret ) NAME ret ( INIT = null ) INIT = null ) VAR VAR ( IF IF ( COND ( VAR_1 . error ) == ( VAR_3 ) ) COND ( VAR_1 . error ) == ( VAR_3 ) ( THEN THEN (  ret = new TYPE_4 ( VAR_4 , VAR_5 , VAR_6 ) )  ret = new TYPE_4 ( VAR_4 , VAR_5 , VAR_6 ) (  TYPE_5 . METHOD_3 ( VAR_7 , ret ) )  TYPE_5 . METHOD_3 ( VAR_7 , ret ) ) THEN THEN ) IF IF (  VAR_2 . METHOD_4 ( rr , VAR_1 , ret ) )  VAR_2 . METHOD_4 ( rr , VAR_1 , ret ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME request ) NAME request ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  android.util.Log.v ( VAR_3 . TAG , STRING_1 ) )  android.util.Log.v ( VAR_3 . TAG , STRING_1 ) ) THEN THEN ) IF IF (  VAR_4 . METHOD_2 ( ) )  VAR_4 . METHOD_2 ( ) ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_5 ) NAME VAR_5 ( INIT = ( ( byte [ ] ) ( request . METHOD_3 ( VAR_6 ) ) ) ) INIT = ( ( byte [ ] ) ( request . METHOD_3 ( VAR_6 ) ) ) ) VAR VAR ( IF IF ( COND ! ( TYPE_2 . equals ( VAR_5 , VAR_7 ) ) ) COND ! ( TYPE_2 . equals ( VAR_5 , VAR_7 ) ) ( THEN THEN (  return VAR_8 ; )  return VAR_8 ; ) THEN THEN ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK (  return VAR_9 ; )  return VAR_9 ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  VAR_1 . METHOD_4 ( VAR_10 , VAR_7 ) )  VAR_1 . METHOD_4 ( VAR_10 , VAR_7 ) (  return VAR_11 ; )  return VAR_11 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.Class ) TYPE java.lang.Class ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_3 ( STRING_1 ) ) INIT = VAR_1 . METHOD_3 ( STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_3 ) NAME VAR_3 ( INIT = new byte [ 20 ] ) INIT = new byte [ 20 ] ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME length ) NAME length ( INIT = VAR_2 . METHOD_4 ( VAR_3 ) ) INIT = VAR_2 . METHOD_4 ( VAR_3 ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME s ) NAME s ( INIT = new java.lang.String ( VAR_3 , 0 , length ) ) INIT = new java.lang.String ( VAR_3 , 0 , length ) ) VAR VAR (  VAR_2 . METHOD_5 ( ) )  VAR_2 . METHOD_5 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ( STRING_1 + ( this ) ) ) )  METHOD_2 ( ( STRING_1 + ( this ) ) ) (  METHOD_3 ( ) )  METHOD_3 ( ) ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN ( SYNCHRONIZED SYNCHRONIZED (  VAR_2 class )  VAR_2 class ( BLOCK BLOCK (  ( VAR_3 ) -- )  ( VAR_3 ) -- (  METHOD_2 ( ( STRING_2 + ( VAR_3 ) ) ) )  METHOD_2 ( ( STRING_2 + ( VAR_3 ) ) ) ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME config ) NAME config ( INIT = METHOD_2 ( ) . METHOD_3 ( ) ) INIT = METHOD_2 ( ) . METHOD_3 ( ) ) VAR VAR ( IF IF ( COND ( ( ( VAR_1 ) == ( VAR_2 ) ) && ( ! ( VAR_3 ) ) ) && ( ( VAR_4 ) == null ) ) COND ( ( ( VAR_1 ) == ( VAR_2 ) ) && ( ! ( VAR_3 ) ) ) && ( ( VAR_4 ) == null ) ( THEN THEN (  METHOD_4 ( ) )  METHOD_4 ( ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND ( VAR_4 ) != null ) COND ( VAR_4 ) != null ( THEN THEN (  METHOD_5 ( ) )  METHOD_5 ( ) ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME v ) NAME v ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( v . METHOD_2 ( ) ) ) COND ! ( v . METHOD_2 ( ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_3 ( v . METHOD_4 ( ) ) ) INIT = METHOD_3 ( v . METHOD_4 ( ) ) ) VAR VAR ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  v . METHOD_5 ( ) )  v . METHOD_5 ( ) ) THEN THEN ( ELSE ELSE (  VAR_2 . METHOD_6 ( VAR_3 ) )  VAR_2 . METHOD_6 ( VAR_3 ) (  VAR_2 . METHOD_7 ( ) )  VAR_2 . METHOD_7 ( ) (  VAR_2 . METHOD_8 ( VAR_1 . name ) )  VAR_2 . METHOD_8 ( VAR_1 . name ) (  VAR_2 . METHOD_9 ( VAR_4 ) )  VAR_2 . METHOD_9 ( VAR_4 ) (  VAR_2 . METHOD_8 ( VAR_5 ) )  VAR_2 . METHOD_8 ( VAR_5 ) (  VAR_2 . METHOD_10 ( ) )  VAR_2 . METHOD_10 ( ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME type ) NAME type ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_3 . METHOD_2 ( type ) ) INIT = TYPE_3 . METHOD_2 ( type ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( IF IF ( COND VAR_2 != ( VAR_3 ) ) COND VAR_2 != ( VAR_3 ) ( THEN THEN ( IF IF ( COND type == ( VAR_4 ) ) COND type == ( VAR_4 ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  return true ; )  return true ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  this )  this ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_1 ) ) COND ! ( VAR_1 ) ( THEN THEN (  VAR_1 = true )  VAR_1 = true ( TRY TRY ( BLOCK BLOCK (  VAR_2 . METHOD_1 ( ) )  VAR_2 . METHOD_1 ( ) (  out . METHOD_1 ( ) )  out . METHOD_1 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME x ) NAME x ( BLOCK BLOCK (  VAR_3 = true )  VAR_3 = true ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  VAR_2 = null )  VAR_2 = null (  VAR_4 = null )  VAR_4 = null (  out = null )  out = null ) THEN THEN ) IF IF ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 == null ) || ( ( VAR_1 . length ( ) ) == 0 ) ) COND ( VAR_1 == null ) || ( ( VAR_1 . length ( ) ) == 0 ) ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( null , VAR_1 ) . getName ( VAR_3 ) ) INIT = METHOD_2 ( null , VAR_1 ) . getName ( VAR_3 ) ) VAR VAR (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE android.os.Message ) TYPE android.os.Message ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( VAR_1 , this ) )  METHOD_2 ( VAR_1 , this ) ( SWITCH SWITCH ( NAME VAR_2 ) NAME VAR_2 ( CASE VAR_3 ( BLOCK BLOCK (  VAR_5 = VAR_6 )  VAR_5 = VAR_6 (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_3 ( CASE VAR_4 ( BLOCK BLOCK (  VAR_5 = VAR_6 )  VAR_5 = VAR_6 (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_4 ( CASE VAR_7 ( BLOCK BLOCK (  VAR_5 = VAR_9 )  VAR_5 = VAR_9 (  METHOD_3 ( VAR_1 ) )  METHOD_3 ( VAR_1 ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_7 ( CASE VAR_8 ( BLOCK BLOCK (  VAR_5 = VAR_9 )  VAR_5 = VAR_9 (  METHOD_3 ( VAR_1 ) )  METHOD_3 ( VAR_1 ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_8 ( CASE VAR_10 ( BLOCK BLOCK (  METHOD_4 ( VAR_11 , VAR_12 ) )  METHOD_4 ( VAR_11 , VAR_12 ) (  return VAR_13 ; )  return VAR_13 ; ) BLOCK BLOCK ) CASE VAR_10 ( CASE VAR_14 ( BLOCK BLOCK (  VAR_5 = VAR_9 )  VAR_5 = VAR_9 (  METHOD_3 ( VAR_1 ) )  METHOD_3 ( VAR_1 ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_14 ( CASE VAR_15 ( BLOCK BLOCK (  VAR_5 = VAR_9 )  VAR_5 = VAR_9 (  METHOD_3 ( VAR_1 ) )  METHOD_3 ( VAR_1 ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_15 ( DEFAULT DEFAULT ( BLOCK BLOCK (  return VAR_13 ; )  return VAR_13 ; ) BLOCK BLOCK ) DEFAULT DEFAULT ) SWITCH SWITCH (  return VAR_16 ; )  return VAR_16 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  assertNotNull ( VAR_1 ) )  assertNotNull ( VAR_1 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME method ) NAME method ( INIT = TYPE_3 . METHOD_3 ( STRING_1 , STRING_2 , STRING_3 , STRING_4 ) ) INIT = TYPE_3 . METHOD_3 ( STRING_1 , STRING_2 , STRING_3 , STRING_4 ) ) VAR VAR (  assertNotNull ( VAR_1 . METHOD_4 ( method , 2 , STRING_5 ) ) )  assertNotNull ( VAR_1 . METHOD_4 ( method , 2 , STRING_5 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) ) )  METHOD_2 ( VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) ) ( IF IF ( COND ! ( VAR_1 . METHOD_5 ( ) ) ) COND ! ( VAR_1 . METHOD_5 ( ) ) ( THEN THEN ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_6 ( ) . METHOD_7 ( ) ) INIT = VAR_1 . METHOD_6 ( ) . METHOD_7 ( ) ) VAR VAR (  assertTrue ( STRING_1 , ( ( VAR_2 >= 0 ) && ( VAR_2 <= INT_1 ) ) ) )  assertTrue ( STRING_1 , ( ( VAR_2 >= 0 ) && ( VAR_2 <= INT_1 ) ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private final ) MODIFIER private final ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  VAR_3 = VAR_4 )  VAR_3 = VAR_4 ) THEN THEN ( ELSE ELSE (  VAR_3 = VAR_5 )  VAR_3 = VAR_5 ) ELSE ELSE ) IF IF ( IF IF ( COND ! ( TYPE_1 . METHOD_2 ( ) ) ) COND ! ( TYPE_1 . METHOD_2 ( ) ) ( THEN THEN (  VAR_3 |= VAR_6 )  VAR_3 |= VAR_6 ) THEN THEN ) IF IF (  return TYPE_2 . METHOD_3 ( mContext , VAR_3 , VAR_2 ) ; )  return TYPE_2 . METHOD_3 ( mContext , VAR_3 , VAR_2 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME m ) NAME m ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME v ) NAME v ) VAR VAR ( VAR VAR ( TYPE char ) TYPE char ( NAME value ) NAME value ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = false ) INIT = false ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( IF IF ( COND v == null ) COND v == null ( THEN THEN (  m . METHOD_2 ( value ) )  m . METHOD_2 ( value ) ) THEN THEN ( ELSE ELSE (  m . METHOD_2 ( v , value ) )  m . METHOD_2 ( v , value ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_2 = true )  VAR_2 = true ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  TYPE_4 . METHOD_3 ( VAR_2 , VAR_1 ) )  TYPE_4 . METHOD_3 ( VAR_2 , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  VAR_5 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) )  VAR_5 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ( IF IF ( COND VAR_4 ) COND VAR_4 ( THEN THEN (  VAR_5 . METHOD_3 ( VAR_2 , VAR_3 ) )  VAR_5 . METHOD_3 ( VAR_2 , VAR_3 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_1 ) NAME VAR_1 ( INIT = STRING_1 . METHOD_2 ( ) ) INIT = STRING_1 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME os ) NAME os ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_3 ( os ) ) INIT = TYPE_2 . METHOD_3 ( os ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  TYPE_2 . METHOD_4 ( VAR_2 , VAR_1 , 0 , VAR_1 . length ) )  TYPE_2 . METHOD_4 ( VAR_2 , VAR_1 , 0 , VAR_1 . length ) (  assertEquals ( VAR_1 . length , os . size ( ) ) )  assertEquals ( VAR_1 . length , os . size ( ) ) (  assertEquals ( TYPE_3 . toString ( VAR_1 ) , TYPE_3 . toString ( os . METHOD_5 ( ) ) ) )  assertEquals ( TYPE_3 . toString ( VAR_1 ) , TYPE_3 . toString ( os . METHOD_5 ( ) ) ) ) BLOCK BLOCK ( FINALLY FINALLY (  TYPE_2 . METHOD_6 ( VAR_2 ) )  TYPE_2 . METHOD_6 ( VAR_2 ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.io.File[] ) TYPE java.io.File[] ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.io.File[] ) TYPE java.io.File[] ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ( VAR VAR ( TYPE float ) TYPE float ( NAME VAR_6 ) NAME VAR_6 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_7 ) NAME VAR_7 ) VAR VAR ( VAR VAR ( TYPE TYPE_2[] ) TYPE TYPE_2[] ( NAME VAR_8 ) NAME VAR_8 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_3 . METHOD_1 ( new TYPE_4 ( ) , VAR_1 , VAR_2 , null , null , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 , VAR_8 ) )  TYPE_3 . METHOD_1 ( new TYPE_4 ( ) , VAR_1 , VAR_2 , null , null , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 , VAR_8 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_2 . METHOD_2 ( ) ) COND VAR_2 . METHOD_2 ( ) ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = null ) INIT = null ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME r ) NAME r ( IN VAR_2 . METHOD_3 ( ) ) IN VAR_2 . METHOD_3 ( ) ( BLOCK BLOCK ( IF IF ( COND ( r . METHOD_4 ( ) ) == VAR_1 ) COND ( r . METHOD_4 ( ) ) == VAR_1 ( THEN THEN ( IF IF ( COND ( VAR_3 == null ) || ( ( r . METHOD_5 ( VAR_3 ) ) > 0 ) ) COND ( VAR_3 == null ) || ( ( r . METHOD_5 ( VAR_3 ) ) > 0 ) ( THEN THEN (  VAR_3 = r )  VAR_3 = r ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_2 . get ( VAR_3 ) ; )  return VAR_2 . get ( VAR_3 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME m ) NAME m ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME v ) NAME v ) VAR VAR ( VAR VAR ( TYPE short ) TYPE short ( NAME value ) NAME value ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = false ) INIT = false ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( IF IF ( COND v == null ) COND v == null ( THEN THEN (  m . METHOD_2 ( value ) )  m . METHOD_2 ( value ) ) THEN THEN ( ELSE ELSE (  m . METHOD_2 ( v , value ) )  m . METHOD_2 ( v , value ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_2 = true )  VAR_2 = true ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  TYPE_4 . METHOD_3 ( VAR_2 , VAR_1 ) )  TYPE_4 . METHOD_3 ( VAR_2 , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME subId ) NAME subId ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( subId ) ) INIT = METHOD_2 ( subId ) ) VAR VAR ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN ( IF IF ( COND ! ( TYPE_2 . METHOD_3 ( mContext , VAR_1 , STRING_1 ) ) ) COND ! ( TYPE_2 . METHOD_3 ( mContext , VAR_1 , STRING_1 ) ) ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF (  return VAR_2 . METHOD_4 ( ) ; )  return VAR_2 . METHOD_4 ( ) ; ) THEN THEN ( ELSE ELSE (  loge ( STRING_2 ) )  loge ( STRING_2 ) (  return null ; )  return null ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( 9 , ( STRING_1 + ( ( ( ( STRING_2 + STRING_3 ) + STRING_4 ) + STRING_5 ) + STRING_6 ) ) , STRING_7 ) )  TYPE_1 . METHOD_2 ( 9 , ( STRING_1 + ( ( ( ( STRING_2 + STRING_3 ) + STRING_4 ) + STRING_5 ) + STRING_6 ) ) , STRING_7 ) (  TYPE_1 . METHOD_2 ( STRING_8 , ( STRING_1 + ( ( ( STRING_9 + STRING_10 ) + STRING_11 ) + STRING_12 ) ) , STRING_13 ) )  TYPE_1 . METHOD_2 ( STRING_8 , ( STRING_1 + ( ( ( STRING_9 + STRING_10 ) + STRING_11 ) + STRING_12 ) ) , STRING_13 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN float ) RETURN float ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE float ) TYPE float ( NAME a ) NAME a ) VAR VAR ( VAR VAR ( TYPE float ) TYPE float ( NAME b ) NAME b ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND a != a ) COND a != a ( THEN THEN (  return a ; )  return a ; ) THEN THEN ) IF IF ( IF IF ( COND ( ( a == FLOAT_1 ) && ( b == FLOAT_1 ) ) && ( ( TYPE_1 . METHOD_2 ( b ) ) == ( VAR_1 ) ) ) COND ( ( a == FLOAT_1 ) && ( b == FLOAT_1 ) ) && ( ( TYPE_1 . METHOD_2 ( b ) ) == ( VAR_1 ) ) ( THEN THEN (  return b ; )  return b ; ) THEN THEN ) IF IF (  return a <= b ? a : b ; )  return a <= b ? a : b ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  VAR_1 . METHOD_3 ( VAR_1 . METHOD_4 ( VAR_2 ) ) )  VAR_1 . METHOD_3 ( VAR_1 . METHOD_4 ( VAR_2 ) ) (  verify ( VAR_3 , METHOD_5 ( 1 ) ) . METHOD_6 ( METHOD_7 ( ) ) )  verify ( VAR_3 , METHOD_5 ( 1 ) ) . METHOD_6 ( METHOD_7 ( ) ) (  verify ( VAR_4 , METHOD_5 ( 1 ) ) . METHOD_8 ( 0 ) )  verify ( VAR_4 , METHOD_5 ( 1 ) ) . METHOD_8 ( 0 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1[] ) RETURN TYPE_1[] ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) == null ) COND ( VAR_1 ) == null ( THEN THEN ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME log ) NAME log ( INIT = new TYPE_2 ( VAR_3 ) ) INIT = new TYPE_2 ( VAR_3 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_3 . METHOD_3 ( VAR_2 . METHOD_4 ( ) , log ) ) INIT = TYPE_3 . METHOD_3 ( VAR_2 . METHOD_4 ( ) , log ) ) VAR VAR (  VAR_1 = VAR_4 . METHOD_1 ( ) )  VAR_1 = VAR_4 . METHOD_1 ( ) ) THEN THEN ( ELSE ELSE (  VAR_1 = new TYPE_1 [ 0 ] )  VAR_1 = new TYPE_1 [ 0 ] ) ELSE ELSE ) IF IF ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME method ) NAME method ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME call ) NAME call ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_4 ( method , call ) ) INIT = new TYPE_4 ( method , call ) ) VAR VAR (  method . METHOD_2 ( VAR_1 ) )  method . METHOD_2 ( VAR_1 ) ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ( INIT = VAR_1 . METHOD_3 ( ) ) INIT = VAR_1 . METHOD_3 ( ) ) VAR VAR (  return name ; )  return name ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME response ) NAME response ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_2 . METHOD_2 ( VAR_1 , response ) )  VAR_2 . METHOD_2 ( VAR_1 , response ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME request ) NAME request ( INIT = VAR_3 . METHOD_3 ( VAR_1 ) ) INIT = VAR_3 . METHOD_3 ( VAR_1 ) ) VAR VAR ( IF IF ( COND request != null ) COND request != null ( THEN THEN (  VAR_4 = response )  VAR_4 = response (  METHOD_4 ( VAR_1 , request ) )  METHOD_4 ( VAR_1 , request ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public final ) MODIFIER public final ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE long ) TYPE long ( NAME id ) NAME id ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( IN VAR_2 . values ( ) ) IN VAR_2 . values ( ) ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . METHOD_2 ( id ) ) INIT = VAR_1 . METHOD_2 ( id ) ) VAR VAR ( IF IF ( COND VAR_3 != null ) COND VAR_3 != null ( THEN THEN (  return VAR_3 ; )  return VAR_3 ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return METHOD_3 ( id ) ; )  return METHOD_3 ( id ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static final ) MODIFIER public static final ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_4 ) COND VAR_4 ( THEN THEN (  TYPE_3 . d ( VAR_5 . TAG , STRING_1 ) )  TYPE_3 . d ( VAR_5 . TAG , STRING_1 ) ) THEN THEN ) IF IF (  TYPE_4 . METHOD_2 ( VAR_6 , STRING_2 ) )  TYPE_4 . METHOD_2 ( VAR_6 , STRING_2 ) (  TYPE_5 . METHOD_3 ( ) )  TYPE_5 . METHOD_3 ( ) (  TYPE_5 . METHOD_4 ( ) )  TYPE_5 . METHOD_4 ( ) (  TYPE_6 . METHOD_5 ( ) )  TYPE_6 . METHOD_5 ( ) (  TYPE_5 . METHOD_6 ( VAR_1 , VAR_2 , VAR_3 ) )  TYPE_5 . METHOD_6 ( VAR_1 , VAR_2 , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_2 ( ) . get ( VAR_1 ) ) INIT = TYPE_2 . METHOD_2 ( ) . get ( VAR_1 ) ) VAR VAR (  assertNotNull ( VAR_2 ) )  assertNotNull ( VAR_2 ) ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME p ) NAME p ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK (  assertTrue ( ( ( STRING_2 + ( VAR_3 ) ) + STRING_3 ) , p . METHOD_3 ( ) ) )  assertTrue ( ( ( STRING_2 + ( VAR_3 ) ) + STRING_3 ) , p . METHOD_3 ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR (  TYPE_1 . when ( VAR_2 . METHOD_2 ( ) ) . thenReturn ( VAR_1 ) )  TYPE_1 . when ( VAR_2 . METHOD_2 ( ) ) . thenReturn ( VAR_1 ) (  METHOD_3 ( ) )  METHOD_3 ( ) (  assertTrue ( ( ( VAR_3 . METHOD_4 ( ) ) == null ) ) )  assertTrue ( ( ( VAR_3 . METHOD_4 ( ) ) == null ) ) (  org.mockito.Mockito.verify ( VAR_2 , TYPE_1 . METHOD_5 ( ) ) . METHOD_2 ( ) )  org.mockito.Mockito.verify ( VAR_2 , TYPE_1 . METHOD_5 ( ) ) . METHOD_2 ( ) (  METHOD_6 ( 4 , false , false ) )  METHOD_6 ( 4 , false , false ) (  assertEquals ( VAR_1 , VAR_3 . METHOD_4 ( ) ) )  assertEquals ( VAR_1 , VAR_3 . METHOD_4 ( ) ) (  org.mockito.Mockito.verify ( VAR_2 ) . METHOD_2 ( ) )  org.mockito.Mockito.verify ( VAR_2 ) . METHOD_2 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_1 instanceof TYPE_4 ) ) COND ! ( VAR_1 instanceof TYPE_4 ) ( THEN THEN (  throw new TYPE_3 ( STRING_1 ) ; )  throw new TYPE_3 ( STRING_1 ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( ( TYPE_4 ) ( VAR_1 ) ) ) INIT = ( ( TYPE_4 ) ( VAR_1 ) ) ) VAR VAR (  VAR_4 = new TYPE_5 ( VAR_3 . METHOD_2 ( ) , VAR_2 , VAR_3 . METHOD_3 ( ) , VAR_5 ) )  VAR_4 = new TYPE_5 ( VAR_3 . METHOD_2 ( ) , VAR_2 , VAR_3 . METHOD_3 ( ) , VAR_5 ) (  VAR_6 . METHOD_4 ( VAR_4 ) )  VAR_6 . METHOD_4 ( VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME m ) NAME m ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME v ) NAME v ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME value ) NAME value ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = false ) INIT = false ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( IF IF ( COND v == null ) COND v == null ( THEN THEN (  m . METHOD_2 ( value ) )  m . METHOD_2 ( value ) ) THEN THEN ( ELSE ELSE (  m . METHOD_2 ( v , value ) )  m . METHOD_2 ( v , value ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_2 = true )  VAR_2 = true ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  TYPE_4 . assertEquals ( VAR_2 , VAR_1 ) )  TYPE_4 . assertEquals ( VAR_2 , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME config ) NAME config ( INIT = TYPE_2 . METHOD_3 ( VAR_2 ) ) INIT = TYPE_2 . METHOD_3 ( VAR_2 ) ) VAR VAR ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK (  config . METHOD_5 ( VAR_1 , true ) )  config . METHOD_5 ( VAR_1 , true ) ) BLOCK BLOCK ) METHOD METHOD (  TYPE_3 . METHOD_3 ( ) . METHOD_4 ( VAR_2 , config , new java.lang.Runnable ( ) { public void run ( ) { config . METHOD_5 ( VAR_1 , true ) ; } } ) )  TYPE_3 . METHOD_3 ( ) . METHOD_4 ( VAR_2 , config , new java.lang.Runnable ( ) { public void run ( ) { config . METHOD_5 ( VAR_1 , true ) ; } } ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.Map ) TYPE java.util.Map ( NAME m ) NAME m ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = m . METHOD_2 ( ) . METHOD_3 ( ) ) INIT = m . METHOD_2 ( ) . METHOD_3 ( ) ) VAR VAR ) INIT INIT ( COND VAR_2 . METHOD_4 ( ) ) COND VAR_2 . METHOD_4 ( ) ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME key ) NAME key ( INIT = VAR_2 . METHOD_5 ( ) ) INIT = VAR_2 . METHOD_5 ( ) ) VAR VAR (  VAR_1 . append ( ( ( ( key + STRING_1 ) + ( m . get ( key ) ) ) + STRING_2 ) ) )  VAR_1 . append ( ( ( ( key + STRING_1 ) + ( m . get ( key ) ) ) + STRING_2 ) ) ) BLOCK BLOCK ) FOR FOR (  return VAR_1 . toString ( ) ; )  return VAR_1 . toString ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < INT_1 ) COND i < INT_1 ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK ( IF IF ( COND METHOD_2 ( ) ) COND METHOD_2 ( ) ( THEN THEN (  TYPE_1 . d ( VAR_1 . TAG , STRING_1 ) )  TYPE_1 . d ( VAR_1 . TAG , STRING_1 ) (  return ; )  return ; ) THEN THEN ) IF IF (  TYPE_1 . d ( VAR_1 . TAG , STRING_2 ) )  TYPE_1 . d ( VAR_1 . TAG , STRING_2 ) (  TYPE_2 . METHOD_3 ( INT_2 ) )  TYPE_2 . METHOD_3 ( INT_2 ) ) BLOCK BLOCK ) FOR FOR (  throw new TYPE_3 ( STRING_3 ) ; )  throw new TYPE_3 ( STRING_3 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ( INIT = false ) INIT = false ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_2 . METHOD_1 ( ) )  VAR_2 . METHOD_1 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_1 = true )  VAR_1 = true ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE java.lang.IllegalArgumentException ) TYPE java.lang.IllegalArgumentException ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_1 = true )  VAR_1 = true ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  assertTrue ( VAR_1 ) )  assertTrue ( VAR_1 ) (  assertFalse ( VAR_2 . METHOD_2 ( ) ) )  assertFalse ( VAR_2 . METHOD_2 ( ) ) (  assertFalse ( VAR_2 . METHOD_3 ( ) ) )  assertFalse ( VAR_2 . METHOD_3 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . when ( VAR_1 . METHOD_2 ( org.mockito.Matchers . METHOD_3 ( ) , org.mockito.Matchers . METHOD_4 ( ) , org.mockito.Matchers . METHOD_4 ( ) ) ) . thenReturn ( VAR_2 ) )  TYPE_1 . when ( VAR_1 . METHOD_2 ( org.mockito.Matchers . METHOD_3 ( ) , org.mockito.Matchers . METHOD_4 ( ) , org.mockito.Matchers . METHOD_4 ( ) ) ) . thenReturn ( VAR_2 ) (  assertFalse ( VAR_3 . METHOD_5 ( VAR_4 ) ) )  assertFalse ( VAR_3 . METHOD_5 ( VAR_4 ) ) (  METHOD_6 ( ) )  METHOD_6 ( ) (  assertTrue ( VAR_3 . METHOD_5 ( VAR_4 ) ) )  assertTrue ( VAR_3 . METHOD_5 ( VAR_4 ) ) (  org.mockito.Mockito.verify ( VAR_1 ) . METHOD_2 ( org.mockito.Matchers.eq ( VAR_5 ) , org.mockito.Matchers.eq ( false ) , org.mockito.Matchers.eq ( false ) ) )  org.mockito.Mockito.verify ( VAR_1 ) . METHOD_2 ( org.mockito.Matchers.eq ( VAR_5 ) , org.mockito.Matchers.eq ( false ) , org.mockito.Matchers.eq ( false ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( ! ( METHOD_2 ( ) ) ) || ( ! ( METHOD_3 ( ) ) ) ) COND ( ! ( METHOD_2 ( ) ) ) || ( ! ( METHOD_3 ( ) ) ) ( THEN THEN (  TYPE_1 . METHOD_4 ( VAR_1 , STRING_1 ) )  TYPE_1 . METHOD_4 ( VAR_1 , STRING_1 ) (  return ; )  return ; ) THEN THEN ) IF IF (  METHOD_5 ( VAR_2 , VAR_3 ) )  METHOD_5 ( VAR_2 , VAR_3 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_6 ( VAR_2 ) ) INIT = METHOD_6 ( VAR_2 ) ) VAR VAR (  METHOD_7 ( VAR_2 , VAR_5 ) )  METHOD_7 ( VAR_2 , VAR_5 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_6 ) NAME VAR_6 ( INIT = METHOD_6 ( VAR_2 ) ) INIT = METHOD_6 ( VAR_2 ) ) VAR VAR (  TYPE_3 . METHOD_8 ( VAR_6 , VAR_4 ) )  TYPE_3 . METHOD_8 ( VAR_6 , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ( VAR VAR ( TYPE TYPE_3<java.lang.String> ) TYPE TYPE_3<java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  return VAR_1 . METHOD_2 ( name ) ; )  return VAR_1 . METHOD_2 ( name ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Throwable ) TYPE java.lang.Throwable ( NAME e ) NAME e ( BLOCK BLOCK (  TYPE_4 . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( VAR_3 , new TYPE_5 ( VAR_2 , e ) ) )  TYPE_4 . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( VAR_3 , new TYPE_5 ( VAR_2 , e ) ) (  TYPE_4 . METHOD_3 ( ) . METHOD_6 ( ) )  TYPE_4 . METHOD_3 ( ) . METHOD_6 ( ) (  return null ; )  return null ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( TYPE_2 . equals ( VAR_2 , VAR_1 ) ) ) COND ! ( TYPE_2 . equals ( VAR_2 , VAR_1 ) ) ( THEN THEN ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN (  VAR_1 . METHOD_2 ( VAR_3 ) )  VAR_1 . METHOD_2 ( VAR_3 ) (  VAR_1 . METHOD_3 ( ) )  VAR_1 . METHOD_3 ( ) ) THEN THEN ) IF IF (  VAR_2 = VAR_1 )  VAR_2 = VAR_1 (  TYPE_3 . d ( this , STRING_1 , VAR_1 ) )  TYPE_3 . d ( this , STRING_1 , VAR_1 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_2 ( ) ) INIT = VAR_2 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME device ) NAME device ( INIT = VAR_2 . METHOD_3 ( ) ) INIT = VAR_2 . METHOD_3 ( ) ) VAR VAR (  TYPE_3 . METHOD_4 ( VAR_1 , STRING_1 ) )  TYPE_3 . METHOD_4 ( VAR_1 , STRING_1 ) (  assertTrue ( METHOD_5 ( VAR_1 , STRING_1 ) ) )  assertTrue ( METHOD_5 ( VAR_1 , STRING_1 ) ) (  TYPE_3 . METHOD_6 ( VAR_1 , STRING_1 ) )  TYPE_3 . METHOD_6 ( VAR_1 , STRING_1 ) (  assertFalse ( METHOD_5 ( VAR_1 , STRING_1 ) ) )  assertFalse ( METHOD_5 ( VAR_1 , STRING_1 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME session ) NAME session ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME s ) NAME s ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME c ) NAME c ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME fd ) NAME fd ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME callback ) NAME callback ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_4 . METHOD_2 ( TYPE_4 . METHOD_3 ( ) , TYPE_5 . METHOD_4 ( s ) ) )  TYPE_4 . METHOD_2 ( TYPE_4 . METHOD_3 ( ) , TYPE_5 . METHOD_4 ( s ) ) (  super . METHOD_1 ( session , s , c , VAR_1 , fd , callback ) )  super . METHOD_1 ( session , s , c , VAR_1 , fd , callback ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 . METHOD_2 ( ) ) == ( VAR_2 ) ) COND ( VAR_1 . METHOD_2 ( ) ) == ( VAR_2 ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( IF IF ( COND VAR_1 == ( VAR_3 ) ) COND VAR_1 == ( VAR_3 ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( IF IF ( COND ( ( ( VAR_1 == ( VAR_4 ) ) || ( VAR_1 == ( VAR_5 ) ) ) || ( VAR_1 == ( VAR_6 ) ) ) || ( VAR_1 == ( VAR_7 ) ) ) COND ( ( ( VAR_1 == ( VAR_4 ) ) || ( VAR_1 == ( VAR_5 ) ) ) || ( VAR_1 == ( VAR_6 ) ) ) || ( VAR_1 == ( VAR_7 ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME uid ) NAME uid ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME VAR_1 ) NAME VAR_1 ( INIT = mContext . METHOD_2 ( ) . METHOD_3 ( uid ) ) INIT = mContext . METHOD_2 ( ) . METHOD_3 ( uid ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME userId ) NAME userId ( INIT = TYPE_1 . METHOD_4 ( uid ) ) INIT = TYPE_1 . METHOD_4 ( uid ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME packageName ) NAME packageName ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_2 . METHOD_5 ( packageName , uid , userId ) ) ) COND ! ( VAR_2 . METHOD_5 ( packageName , uid , userId ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_2 > VAR_3 ) COND VAR_2 > VAR_3 ( THEN THEN (  throw new java.lang.IllegalArgumentException ( ( ( ( ( STRING_1 + VAR_2 ) + STRING_2 ) + VAR_3 ) + STRING_3 ) ) ; )  throw new java.lang.IllegalArgumentException ( ( ( ( ( STRING_1 + VAR_2 ) + STRING_2 ) + VAR_3 ) + STRING_3 ) ) ; ) THEN THEN ) IF IF ( IF IF ( COND VAR_2 < 0 ) COND VAR_2 < 0 ( THEN THEN (  throw new TYPE_1 ( VAR_2 ) ; )  throw new TYPE_1 ( VAR_2 ) ; ) THEN THEN ) IF IF ( IF IF ( COND VAR_3 > VAR_1 ) COND VAR_3 > VAR_1 ( THEN THEN (  throw new TYPE_1 ( VAR_3 ) ; )  throw new TYPE_1 ( VAR_3 ) ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME type ) NAME type ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  VAR_3 )  VAR_3 ( BLOCK BLOCK ( SWITCH SWITCH ( NAME type ) NAME type ( CASE VAR_4 ( BLOCK BLOCK ( IF IF ( COND ( ( VAR_5 ) != ( VAR_6 ) ) && ( ( VAR_5 ) != ( VAR_7 ) ) ) COND ( ( VAR_5 ) != ( VAR_6 ) ) && ( ( VAR_5 ) != ( VAR_7 ) ) ( THEN THEN (  throw new TYPE_1 ( ( STRING_1 + ( VAR_5 ) ) ) ; )  throw new TYPE_1 ( ( STRING_1 + ( VAR_5 ) ) ) ; ) THEN THEN ) IF IF (  VAR_5 = VAR_8 )  VAR_5 = VAR_8 (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_4 ( CASE VAR_9 ( BLOCK BLOCK (  VAR_5 = VAR_6 )  VAR_5 = VAR_6 (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_9 ) SWITCH SWITCH ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME type ) NAME type ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND type == null ) COND type == null ( THEN THEN (  throw new java.lang.NullPointerException ( STRING_1 ) ; )  throw new java.lang.NullPointerException ( STRING_1 ) ; ) THEN THEN ) IF IF (  METHOD_2 ( ) )  METHOD_2 ( ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ( INIT = VAR_1 . get ( type ) ) INIT = VAR_1 . get ( type ) ) VAR VAR ( IF IF ( COND result == null ) COND result == null ( THEN THEN (  result = new TYPE_1 ( new TYPE_3 ( type ) ) )  result = new TYPE_1 ( new TYPE_3 ( type ) ) (  VAR_1 . METHOD_3 ( type , result ) )  VAR_1 . METHOD_3 ( type , result ) ) THEN THEN ) IF IF (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  super . METHOD_1 ( VAR_1 ) )  super . METHOD_1 ( VAR_1 ) ( IF IF ( COND ( output ) == null ) COND ( output ) == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  METHOD_2 ( ) )  METHOD_2 ( ) ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  VAR_2 = new TYPE_3 ( output ) )  VAR_2 = new TYPE_3 ( output ) ) THEN THEN ( ELSE ELSE (  VAR_2 = new TYPE_3 ( output , VAR_1 ) )  VAR_2 = new TYPE_3 ( output , VAR_1 ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME key ) NAME key ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN (  throw new TYPE_4 ( ( STRING_1 + ( VAR_2 . METHOD_2 ( ) . getName ( ) ) ) ) ; )  throw new TYPE_4 ( ( STRING_1 + ( VAR_2 . METHOD_2 ( ) . getName ( ) ) ) ) ; ) THEN THEN ) IF IF (  METHOD_3 ( VAR_1 , key ) )  METHOD_3 ( VAR_1 , key ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE long ) TYPE long ( NAME session ) NAME session ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME context ) NAME context ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME fd ) NAME fd ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME callback ) NAME callback ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_4 . METHOD_2 ( VAR_1 ) ) INIT = TYPE_4 . METHOD_2 ( VAR_1 ) ) VAR VAR (  assertEquals ( STRING_1 , new java.lang.String ( VAR_3 ) ) )  assertEquals ( STRING_1 , new java.lang.String ( VAR_3 ) ) ( IF IF ( COND ! ( VAR_4 ) ) COND ! ( VAR_4 ) ( THEN THEN (  assertEquals ( STRING_2 , 0 , ( ( TYPE_4 . METHOD_3 ( VAR_1 ) ) & ( VAR_5 ) ) ) )  assertEquals ( STRING_2 , 0 , ( ( TYPE_4 . METHOD_3 ( VAR_1 ) ) & ( VAR_5 ) ) ) ) THEN THEN ) IF IF (  super . METHOD_1 ( session , VAR_1 , context , VAR_2 , fd , callback ) )  super . METHOD_1 ( session , VAR_1 , context , VAR_2 , fd , callback ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) INIT = METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) VAR VAR (  TYPE_2 . METHOD_5 ( VAR_1 ) )  TYPE_2 . METHOD_5 ( VAR_1 ) (  TYPE_3 . get ( VAR_2 ) . METHOD_6 ( VAR_1 ) )  TYPE_3 . get ( VAR_2 ) . METHOD_6 ( VAR_1 ) (  METHOD_7 ( ) )  METHOD_7 ( ) (  VAR_3 = METHOD_8 ( ) )  VAR_3 = METHOD_8 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected static ) MODIFIER protected static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . size ( ) ) INIT = VAR_1 . size ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME sb ) NAME sb ( INIT = new TYPE_2 ( ( ( VAR_2 * 5 ) + 2 ) ) ) INIT = new TYPE_2 ( ( ( VAR_2 * 5 ) + 2 ) ) ) VAR VAR (  sb.append ( CHAR_1 ) )  sb.append ( CHAR_1 ) ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < VAR_2 ) COND i < VAR_2 ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK ( IF IF ( COND i != 0 ) COND i != 0 ( THEN THEN (  sb.append ( STRING_1 ) )  sb.append ( STRING_1 ) ) THEN THEN ) IF IF (  sb.append ( VAR_1 . get ( i ) . METHOD_2 ( ) ) )  sb.append ( VAR_1 . get ( i ) . METHOD_2 ( ) ) ) BLOCK BLOCK ) FOR FOR (  sb.append ( CHAR_2 ) )  sb.append ( CHAR_2 ) (  return sb . toString ( ) ; )  return sb . toString ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME provider ) NAME provider ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  VAR_2 )  VAR_2 ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME size ) NAME size ( INIT = VAR_2 . size ( ) ) INIT = VAR_2 . size ( ) ) VAR VAR ( IF IF ( COND ( VAR_1 < 1 ) || ( VAR_1 > size ) ) COND ( VAR_1 < 1 ) || ( VAR_1 > size ) ( THEN THEN (  VAR_1 = size + 1 )  VAR_1 = size + 1 ) THEN THEN ) IF IF (  VAR_2 . METHOD_2 ( ( VAR_1 - 1 ) , provider ) )  VAR_2 . METHOD_2 ( ( VAR_1 - 1 ) , provider ) (  VAR_3 . METHOD_3 ( provider . getName ( ) , provider ) )  VAR_3 . METHOD_3 ( provider . getName ( ) , provider ) (  TYPE_2 . METHOD_4 ( ) )  TYPE_2 . METHOD_4 ( ) (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME value ) NAME value ( INIT = TYPE_1 . METHOD_1 ( new TYPE_2 ( VAR_1 ) ) ) INIT = TYPE_1 . METHOD_1 ( new TYPE_2 ( VAR_1 ) ) ) VAR VAR ( IF IF ( COND value instanceof java.lang.Integer ) COND value instanceof java.lang.Integer ( THEN THEN (  return ( ( java.lang.Integer ) ( value ) ) . METHOD_2 ( ) ; )  return ( ( java.lang.Integer ) ( value ) ) . METHOD_2 ( ) ; ) THEN THEN ( ELSE ELSE ( IF IF ( COND value instanceof java.lang.String ) COND value instanceof java.lang.String ( THEN THEN ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new java.lang.RuntimeException ( e ) ; )  throw new java.lang.RuntimeException ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  return 1 ; )  return 1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 . METHOD_2 ( this ) ) COND VAR_1 . METHOD_2 ( this ) ( THEN THEN (  VAR_1 . METHOD_3 ( VAR_2 ) )  VAR_1 . METHOD_3 ( VAR_2 ) ( IF IF ( COND ( VAR_3 ) != null ) COND ( VAR_3 ) != null ( THEN THEN (  VAR_1 . METHOD_3 ( VAR_3 ) )  VAR_1 . METHOD_3 ( VAR_3 ) ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_4 ) != null ) COND ( VAR_4 ) != null ( THEN THEN (  VAR_1 . METHOD_3 ( VAR_4 ) )  VAR_1 . METHOD_3 ( VAR_4 ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  VAR_1 . METHOD_4 ( this ) )  VAR_1 . METHOD_4 ( this ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN long ) RETURN long ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME subId ) NAME subId ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( ) . METHOD_3 ( VAR_3 , VAR_4 ) ) INIT = METHOD_2 ( ) . METHOD_3 ( VAR_3 , VAR_4 ) ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_2 . METHOD_4 ( ( ( VAR_6 ) + subId ) , VAR_7 ) ) INIT = VAR_2 . METHOD_4 ( ( ( VAR_6 ) + subId ) , VAR_7 ) ) VAR VAR ( IF IF ( COND ( VAR_5 == ( VAR_7 ) ) && VAR_1 ) COND ( VAR_5 == ( VAR_7 ) ) && VAR_1 ( THEN THEN (  VAR_5 = METHOD_5 ( subId ) )  VAR_5 = METHOD_5 ( subId ) ( IF IF ( COND VAR_5 != ( VAR_7 ) ) COND VAR_5 != ( VAR_7 ) ( THEN THEN (  METHOD_6 ( VAR_5 , subId ) )  METHOD_6 ( VAR_5 , subId ) (  METHOD_7 ( subId ) )  METHOD_7 ( subId ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return VAR_5 ; )  return VAR_5 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN byte[] ) RETURN byte[] ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) != null ) COND ( VAR_1 ) != null ( THEN THEN (  return VAR_1 . METHOD_1 ( ) ; )  return VAR_1 . METHOD_1 ( ) ; ) THEN THEN ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  METHOD_2 ( ) )  METHOD_2 ( ) ( SYNCHRONIZED SYNCHRONIZED (  VAR_2 )  VAR_2 ( BLOCK BLOCK ( IF IF ( COND METHOD_3 ( ) ) COND METHOD_3 ( ) ( THEN THEN ( IF IF ( COND TYPE_2 . METHOD_4 ( VAR_3 ) ) COND TYPE_2 . METHOD_4 ( VAR_3 ) ( THEN THEN ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_5 ) INIT = VAR_5 ) VAR VAR (  VAR_5 = null )  VAR_5 = null (  return VAR_4 ; )  return VAR_4 ; ) THEN THEN ( ELSE ELSE (  return null ; )  return null ; ) ELSE ELSE ) IF IF ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_3 . METHOD_2 ( STRING_1 , STRING_2 ) ) INIT = TYPE_3 . METHOD_2 ( STRING_1 , STRING_2 ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME result ) NAME result ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK (  result . METHOD_3 ( new TYPE_4 ( VAR_1 , VAR_4 , VAR_3 ) ) )  result . METHOD_3 ( new TYPE_4 ( VAR_1 , VAR_4 , VAR_3 ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return TYPE_5 . METHOD_4 ( result ) ; )  return TYPE_5 . METHOD_4 ( result ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) instanceof TYPE_2 ) COND ( VAR_1 ) instanceof TYPE_2 ( THEN THEN ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_2 ) ( VAR_1 ) ) ) INIT = ( ( TYPE_2 ) ( VAR_1 ) ) ) VAR VAR (  return VAR_2 . METHOD_2 ( ) ; )  return VAR_2 . METHOD_2 ( ) ; ) THEN THEN ( ELSE ELSE ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( ( TYPE_3 ) ( VAR_1 ) ) ) INIT = ( ( TYPE_3 ) ( VAR_1 ) ) ) VAR VAR (  return ( ( TYPE_1 ) ( VAR_3 . METHOD_3 ( ) . METHOD_2 ( ) ) ) ; )  return ( ( TYPE_1 ) ( VAR_3 . METHOD_3 ( ) . METHOD_2 ( ) ) ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( VAR_1 ) )  METHOD_2 ( VAR_1 ) (  VAR_2 . METHOD_3 ( null , STRING_1 , VAR_3 . TAG , null , null , null , null , false , ( - 1 ) , false , ( - 1 ) ) )  VAR_2 . METHOD_3 ( null , STRING_1 , VAR_3 . TAG , null , null , null , null , false , ( - 1 ) , false , ( - 1 ) ) (  org.mockito.Mockito.verify ( VAR_4 , TYPE_1 . METHOD_4 ( 0 ) ) . METHOD_5 ( org.mockito.Matchers . METHOD_6 ( ) , org.mockito.Matchers . METHOD_6 ( ) , TYPE_1 . METHOD_7 ( ) , TYPE_1 . METHOD_7 ( ) , org.mockito.Matchers . METHOD_8 ( VAR_5 class ) ) )  org.mockito.Mockito.verify ( VAR_4 , TYPE_1 . METHOD_4 ( 0 ) ) . METHOD_5 ( org.mockito.Matchers . METHOD_6 ( ) , org.mockito.Matchers . METHOD_6 ( ) , TYPE_1 . METHOD_7 ( ) , TYPE_1 . METHOD_7 ( ) , org.mockito.Matchers . METHOD_8 ( VAR_5 class ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  METHOD_2 ( ) )  METHOD_2 ( ) (  VAR_1 = false )  VAR_1 = false ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_2 ) != null ) COND ( VAR_2 ) != null ( THEN THEN ( VAR VAR ( TYPE java.util.List<android.bluetooth.BluetoothDevice> ) TYPE java.util.List<android.bluetooth.BluetoothDevice> ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_3 ( ) ) INIT = METHOD_3 ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE android.bluetooth.BluetoothDevice ) TYPE android.bluetooth.BluetoothDevice ( NAME VAR_4 ) NAME VAR_4 ( IN VAR_3 ) IN VAR_3 ( BLOCK BLOCK (  METHOD_4 ( VAR_4 , VAR_5 , VAR_6 , VAR_7 , VAR_8 ) )  METHOD_4 ( VAR_4 , VAR_5 , VAR_6 , VAR_7 , VAR_8 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  VAR_2 . METHOD_5 ( ) )  VAR_2 . METHOD_5 ( ) ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_9 ) != null ) COND ( VAR_9 ) != null ( THEN THEN (  VAR_9 . METHOD_5 ( ) )  VAR_9 . METHOD_5 ( ) ) THEN THEN ) IF IF (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_5 . METHOD_2 ( VAR_1 ) ) INIT = VAR_5 . METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_4 == null ) COND VAR_4 == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_6 ) NAME VAR_6 ( INIT = TYPE_2 . METHOD_2 ( VAR_2 ) ) INIT = TYPE_2 . METHOD_2 ( VAR_2 ) ) VAR VAR ( IF IF ( COND VAR_6 == null ) COND VAR_6 == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_7 ) NAME VAR_7 ( INIT = VAR_5 . METHOD_2 ( VAR_3 ) ) INIT = VAR_5 . METHOD_2 ( VAR_3 ) ) VAR VAR (  VAR_4 . METHOD_3 ( VAR_6 , VAR_7 ) )  VAR_4 . METHOD_3 ( VAR_6 , VAR_7 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( PARAMS PARAMS ( VAR VAR ( TYPE com.android.jack.ir.ast.JMethod ) TYPE com.android.jack.ir.ast.JMethod ( NAME method ) NAME method ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( method . METHOD_1 ( ) ) || ( method . METHOD_2 ( ) ) ) || ( ! ( VAR_1 . METHOD_3 ( this . METHOD_4 ( ) , method ) ) ) ) COND ( ( method . METHOD_1 ( ) ) || ( method . METHOD_2 ( ) ) ) || ( ! ( VAR_1 . METHOD_3 ( this . METHOD_4 ( ) , method ) ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE com.android.jack.ir.ast.JDefinedClassOrInterface ) TYPE com.android.jack.ir.ast.JDefinedClassOrInterface ( NAME VAR_2 ) NAME VAR_2 ( INIT = method . METHOD_5 ( ) ) INIT = method . METHOD_5 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_1 ( method ) ) INIT = new TYPE_1 ( method ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_2 ( VAR_3 , method ) ) INIT = new TYPE_2 ( VAR_3 , method ) ) VAR VAR (  VAR_4 . METHOD_3 ( method ) )  VAR_4 . METHOD_3 ( method ) (  VAR_3 . METHOD_6 ( ) )  VAR_3 . METHOD_6 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME state ) NAME state ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  VAR_1 )  VAR_1 ( BLOCK BLOCK (  android.util.Log . i ( VAR_2 , ( STRING_1 + state ) ) )  android.util.Log . i ( VAR_2 , ( STRING_1 + state ) ) (  VAR_3 = state )  VAR_3 = state ( IF IF ( COND ! state ) COND ! state ( THEN THEN ( IF IF ( COND ( VAR_4 ) != null ) COND ( VAR_4 ) != null ( THEN THEN (  VAR_4 . METHOD_2 ( ) )  VAR_4 . METHOD_2 ( ) ) THEN THEN ) IF IF ) THEN THEN ( ELSE ELSE (  METHOD_3 ( ) )  METHOD_3 ( ) ( SYNCHRONIZED SYNCHRONIZED (  VAR_1 )  VAR_1 ( BLOCK BLOCK (  VAR_5 = true )  VAR_5 = true ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  f = java.io.File . METHOD_2 ( STRING_1 , STRING_2 ) )  f = java.io.File . METHOD_2 ( STRING_1 , STRING_2 ) ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = f . METHOD_3 ( ) ) INIT = f . METHOD_3 ( ) ) VAR VAR (  VAR_2 = new TYPE_1 ( VAR_1 ) )  VAR_2 = new TYPE_1 ( VAR_1 ) (  VAR_2 = new TYPE_1 ( STRING_3 ) )  VAR_2 = new TYPE_1 ( STRING_3 ) (  VAR_2 . METHOD_4 ( ) )  VAR_2 . METHOD_4 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) == null ) COND ( VAR_1 ) == null ( THEN THEN ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.io.File ( VAR_3 , VAR_4 ) ) INIT = new java.io.File ( VAR_3 , VAR_4 ) ) VAR VAR ( IF IF ( COND VAR_2 . METHOD_2 ( ) ) COND VAR_2 . METHOD_2 ( ) ( THEN THEN (  VAR_1 = VAR_5 . METHOD_3 ( VAR_2 , false ) )  VAR_1 = VAR_5 . METHOD_3 ( VAR_2 , false ) ) THEN THEN ( ELSE ELSE (  VAR_5 . METHOD_4 ( this , VAR_3 , ( STRING_1 + ( VAR_3 . METHOD_5 ( ) ) ) ) )  VAR_5 . METHOD_4 ( this , VAR_3 , ( STRING_1 + ( VAR_3 . METHOD_5 ( ) ) ) ) (  return null ; )  return null ; ) ELSE ELSE ) IF IF ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Runnable ) TYPE java.lang.Runnable ( NAME r ) NAME r ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( STRING_1 ) )  VAR_1 . METHOD_2 ( STRING_1 ) (  METHOD_3 ( ) )  METHOD_3 ( ) (  VAR_1 . METHOD_2 ( STRING_2 ) )  VAR_1 . METHOD_2 ( STRING_2 ) (  Main . METHOD_4 ( r ) )  Main . METHOD_4 ( r ) (  VAR_1 . METHOD_2 ( STRING_3 ) )  VAR_1 . METHOD_2 ( STRING_3 ) (  METHOD_5 ( ) )  METHOD_5 ( ) (  VAR_1 . METHOD_2 ( STRING_4 ) )  VAR_1 . METHOD_2 ( STRING_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  TYPE_2 . METHOD_2 ( VAR_1 ) )  TYPE_2 . METHOD_2 ( VAR_1 ) ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK (  assertTrue ( VAR_3 . METHOD_3 ( ) ) )  assertTrue ( VAR_3 . METHOD_3 ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( BLOCK BLOCK (  fail ( STRING_1 ) )  fail ( STRING_1 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME toString ) NAME toString ( BLOCK BLOCK ( IF IF ( COND ( - 1 ) == ( VAR_1 ) ) COND ( - 1 ) == ( VAR_1 ) ( THEN THEN (  return super . toString ( ) ; )  return super . toString ( ) ; ) THEN THEN ) IF IF (  return type . get ( new TYPE_1 ( VAR_2 [ VAR_1 ] , VAR_3 . values [ VAR_1 ] ) ) . toString ( ) ; )  return type . get ( new TYPE_1 ( VAR_2 [ VAR_1 ] , VAR_3 . values [ VAR_1 ] ) ) . toString ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ) INIT = TYPE_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_1 . METHOD_4 ( new TYPE_2 ( ) , STRING_1 . METHOD_5 ( ) ) )  VAR_1 . METHOD_4 ( new TYPE_2 ( ) , STRING_1 . METHOD_5 ( ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME expected ) NAME expected ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  VAR_1 . METHOD_6 ( null , STRING_1 . METHOD_5 ( ) ) )  VAR_1 . METHOD_6 ( null , STRING_1 . METHOD_5 ( ) ) ( TRY TRY ( BLOCK BLOCK (  VAR_1 . METHOD_4 ( null , STRING_1 . METHOD_5 ( ) ) )  VAR_1 . METHOD_4 ( null , STRING_1 . METHOD_5 ( ) ) (  fail ( ) )  fail ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.NullPointerException ) TYPE java.lang.NullPointerException ( NAME expected ) NAME expected ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME expected ) NAME expected ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME offset ) NAME offset ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_2 ( ) ) INIT = VAR_2 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME line ) NAME line ( INIT = VAR_1 . METHOD_3 ( offset ) ) INIT = VAR_1 . METHOD_3 ( offset ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . METHOD_4 ( line ) ) INIT = VAR_1 . METHOD_4 ( line ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ( INIT = ( ( int ) ( VAR_1 . METHOD_5 ( offset ) ) ) ) INIT = ( ( int ) ( VAR_1 . METHOD_5 ( offset ) ) ) ) VAR VAR (  return METHOD_6 ( ( VAR_4 + ( VAR_2 . METHOD_7 ( ) ) ) , ( VAR_3 + ( VAR_2 . METHOD_8 ( ) ) ) ) ; )  return METHOD_6 ( ( VAR_4 + ( VAR_2 . METHOD_7 ( ) ) ) , ( VAR_3 + ( VAR_2 . METHOD_8 ( ) ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME state ) NAME state ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME arg ) NAME arg ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = mContext . METHOD_2 ( VAR_2 ) ) INIT = mContext . METHOD_2 ( VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = mContext . METHOD_2 ( VAR_4 ) ) INIT = mContext . METHOD_2 ( VAR_4 ) ) VAR VAR (  state . value = METHOD_3 ( ) . METHOD_4 ( ) )  state . value = METHOD_3 ( ) . METHOD_4 ( ) (  VAR_5 = mContext . METHOD_5 ( VAR_6 ) )  VAR_5 = mContext . METHOD_5 ( VAR_6 ) (  VAR_7 = new TYPE_3 ( ( state . value ? VAR_1 : VAR_3 ) ) )  VAR_7 = new TYPE_3 ( ( state . value ? VAR_1 : VAR_3 ) ) (  VAR_8 = VAR_9 class . getName ( ) )  VAR_8 = VAR_9 class . getName ( ) (  VAR_10 = VAR_5 )  VAR_10 = VAR_5 ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) == ( VAR_2 ) ) COND ( VAR_1 ) == ( VAR_2 ) ( THEN THEN (  throw new TYPE_2 ( ) ; )  throw new TYPE_2 ( ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ( INIT = VAR_3 [ VAR_1 ] ) INIT = VAR_3 [ VAR_1 ] ) VAR VAR ( IF IF ( COND ( ( VAR_4 ) != ( VAR_2 ) ) || ( result == null ) ) COND ( ( VAR_4 ) != ( VAR_2 ) ) || ( result == null ) ( THEN THEN (  throw new TYPE_3 ( ) ; )  throw new TYPE_3 ( ) ; ) THEN THEN ) IF IF (  VAR_5 = VAR_1 )  VAR_5 = VAR_1 (  VAR_1 = ( ( VAR_1 ) + 1 ) & ( ( VAR_3 . length ) - 1 ) )  VAR_1 = ( ( VAR_1 ) + 1 ) & ( ( VAR_3 . length ) - 1 ) (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND VAR_1 . METHOD_2 ( ) ) COND VAR_1 . METHOD_2 ( ) ( THEN THEN (  return STRING_1 ; )  return STRING_1 ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_1 . METHOD_1 ( this ) ) INIT = TYPE_1 . METHOD_1 ( this ) ) VAR VAR ( IF IF ( COND ( ! ( VAR_1 . METHOD_2 ( ) ) ) && ( VAR_2 . METHOD_2 ( ) ) ) COND ( ! ( VAR_1 . METHOD_2 ( ) ) ) && ( VAR_2 . METHOD_2 ( ) ) ( THEN THEN (  throw new TYPE_2 ( ( STRING_2 + ( this ) ) , ( STRING_3 + ( this ) ) , STRING_4 ) ; )  throw new TYPE_2 ( ( STRING_2 + ( this ) ) , ( STRING_3 + ( this ) ) , STRING_4 ) ; ) THEN THEN ) IF IF (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( ) ) INIT = TYPE_2 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_3 . METHOD_3 ( ) ) INIT = TYPE_3 . METHOD_3 ( ) ) VAR VAR (  VAR_1 . METHOD_4 ( VAR_2 , new TYPE_4 ( TYPE_3 . METHOD_3 ( ) , null ) ) )  VAR_1 . METHOD_4 ( VAR_2 , new TYPE_4 ( TYPE_3 . METHOD_3 ( ) , null ) ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_3 . METHOD_5 ( VAR_2 , true ) )  VAR_3 . METHOD_5 ( VAR_2 , true ) (  METHOD_6 ( VAR_1 , VAR_3 , true ) )  METHOD_6 ( VAR_1 , VAR_3 , true ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE short ) TYPE short ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME status ) NAME status ) VAR VAR ( VAR VAR ( TYPE short ) TYPE short ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  android.util.Log.v ( TYPE_2 . TAG , ( ( ( ( ( STRING_1 + id ) + STRING_2 ) + ( TYPE_2 . METHOD_2 ( status ) ) ) + STRING_3 ) + VAR_1 ) ) )  android.util.Log.v ( TYPE_2 . TAG , ( ( ( ( ( STRING_1 + id ) + STRING_2 ) + ( TYPE_2 . METHOD_2 ( status ) ) ) + STRING_3 ) + VAR_1 ) ) ) THEN THEN ) IF IF ( IF IF ( COND ( status . status ) == ( VAR_3 ) ) COND ( status . status ) == ( VAR_3 ) ( THEN THEN (  VAR_4 . METHOD_3 ( id , true , VAR_1 ) )  VAR_4 . METHOD_3 ( id , true , VAR_1 ) ) THEN THEN ( ELSE ELSE (  VAR_4 . METHOD_4 ( id , true , status . status ) )  VAR_4 . METHOD_4 ( id , true , status . status ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( VAR_1 . METHOD_3 ( VAR_2 ) ) )  VAR_1 . METHOD_2 ( VAR_1 . METHOD_3 ( VAR_2 ) ) (  org.mockito.Mockito.verify ( VAR_3 , TYPE_1 . METHOD_4 ( 0 ) ) . METHOD_5 ( TYPE_1 . METHOD_6 ( ) , TYPE_1 . METHOD_7 ( ) , TYPE_1 . METHOD_7 ( ) ) )  org.mockito.Mockito.verify ( VAR_3 , TYPE_1 . METHOD_4 ( 0 ) ) . METHOD_5 ( TYPE_1 . METHOD_6 ( ) , TYPE_1 . METHOD_7 ( ) , TYPE_1 . METHOD_7 ( ) ) (  org.mockito.Mockito.verify ( VAR_4 , TYPE_1 . METHOD_4 ( 0 ) ) . METHOD_8 ( 1 ) )  org.mockito.Mockito.verify ( VAR_4 , TYPE_1 . METHOD_4 ( 0 ) ) . METHOD_8 ( 1 ) (  org.mockito.Mockito.verify ( VAR_4 , TYPE_1 . METHOD_4 ( 0 ) ) . METHOD_9 ( FLOAT_1 ) )  org.mockito.Mockito.verify ( VAR_4 , TYPE_1 . METHOD_4 ( 0 ) ) . METHOD_9 ( FLOAT_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Class<?extendsTYPE_1> ) TYPE java.lang.Class<?extendsTYPE_1> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.StringBuilder ) TYPE java.lang.StringBuilder ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_3 . METHOD_2 ( TYPE_4 . METHOD_3 ( VAR_1 ) ) ) INIT = TYPE_3 . METHOD_2 ( TYPE_4 . METHOD_3 ( VAR_1 ) ) ) VAR VAR (  TYPE_5 . METHOD_4 ( VAR_3 , VAR_4 ) )  TYPE_5 . METHOD_4 ( VAR_3 , VAR_4 ) ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_5 ) NAME VAR_5 ( IN VAR_3 ) IN VAR_3 ( BLOCK BLOCK (  TYPE_6 . METHOD_1 ( VAR_5 , VAR_2 , VAR_6 ) )  TYPE_6 . METHOD_1 ( VAR_5 , VAR_2 , VAR_6 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN android.bluetooth.BluetoothDevice ) RETURN android.bluetooth.BluetoothDevice ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  android.util.Log.v ( TYPE_1 . TAG , STRING_1 ) )  android.util.Log.v ( TYPE_1 . TAG , STRING_1 ) ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME service ) NAME service ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( IF IF ( COND service == null ) COND service == null ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  android.util.Log.v ( TYPE_1 . TAG , ( STRING_2 + ( service . METHOD_3 ( ) ) ) ) )  android.util.Log.v ( TYPE_1 . TAG , ( STRING_2 + ( service . METHOD_3 ( ) ) ) ) ) THEN THEN ) IF IF (  return service . METHOD_3 ( ) ; )  return service . METHOD_3 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1[] ) TYPE TYPE_1[] ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME listener ) NAME listener ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  android.util.Log.w ( VAR_3 . TAG , STRING_1 ) )  android.util.Log.w ( VAR_3 . TAG , STRING_1 ) (  return ; )  return ; ) THEN THEN ( ELSE ELSE ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_5 . get ( ) ) INIT = VAR_5 . get ( ) ) VAR VAR ( IF IF ( COND VAR_4 == null ) COND VAR_4 == null ( THEN THEN (  android.util.Log.w ( VAR_3 . TAG , STRING_2 ) )  android.util.Log.w ( VAR_3 . TAG , STRING_2 ) (  return ; )  return ; ) THEN THEN ) IF IF (  VAR_4 . METHOD_1 ( VAR_6 , VAR_7 , VAR_1 , listener ) )  VAR_4 . METHOD_1 ( VAR_6 , VAR_7 , VAR_1 , listener ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_6 . METHOD_2 ( VAR_1 ) ) INIT = VAR_6 . METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_5 == null ) COND VAR_5 == null ( THEN THEN (  return 0 ; )  return 0 ; ) THEN THEN ) IF IF (  return VAR_5 . METHOD_3 ( VAR_2 , VAR_3 , VAR_4 ) ; )  return VAR_5 . METHOD_3 ( VAR_2 , VAR_3 , VAR_4 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = 0 ) INIT = 0 ) VAR VAR ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN ( SWITCH SWITCH ( NAME VAR_3 ) NAME VAR_3 ( CASE VAR_4 ( BLOCK BLOCK (  VAR_2 = INT_1 * INT_2 )  VAR_2 = INT_1 * INT_2 (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_4 ( CASE VAR_5 ( BLOCK BLOCK (  VAR_2 = INT_1 * 10 )  VAR_2 = INT_1 * 10 (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_5 ( CASE VAR_6 ( BLOCK BLOCK (  VAR_2 = INT_1 )  VAR_2 = INT_1 (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_6 ( DEFAULT DEFAULT ( BLOCK BLOCK (  VAR_2 = INT_1 )  VAR_2 = INT_1 (  break ; )  break ; ) BLOCK BLOCK ) DEFAULT DEFAULT ) SWITCH SWITCH (  VAR_2 *= VAR_7 )  VAR_2 *= VAR_7 ) THEN THEN ) IF IF (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME field ) NAME field ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME value ) NAME value ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND field == null ) COND field == null ( THEN THEN (  throw new java.lang.NullPointerException ( STRING_1 ) ; )  throw new java.lang.NullPointerException ( STRING_1 ) ; ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_1 ) != null ) COND ( VAR_1 ) != null ( THEN THEN (  throw new TYPE_3 ( STRING_2 ) ; )  throw new TYPE_3 ( STRING_2 ) ; ) THEN THEN ) IF IF (  VAR_2 . METHOD_2 ( field ) )  VAR_2 . METHOD_2 ( field ) (  VAR_3 . METHOD_3 ( field , value ) )  VAR_3 . METHOD_3 ( field , value ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME context ) NAME context ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME c ) NAME c ( INIT = null ) INIT = null ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  c = context . METHOD_2 ( ) . METHOD_3 ( VAR_1 , VAR_2 , null , null , null ) )  c = context . METHOD_2 ( ) . METHOD_3 ( VAR_1 , VAR_2 , null , null , null ) ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( c . METHOD_4 ( ) ) > 0 ) INIT = ( c . METHOD_4 ( ) ) > 0 ) VAR VAR (  TYPE_3 . METHOD_5 ( context , VAR_3 ) )  TYPE_3 . METHOD_5 ( context , VAR_3 ) (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ( FINALLY FINALLY ( IF IF ( COND c != null ) COND c != null ( THEN THEN (  c . METHOD_6 ( ) )  c . METHOD_6 ( ) ) THEN THEN ) IF IF ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME session ) NAME session ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME s ) NAME s ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME c ) NAME c ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME fd ) NAME fd ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME callback ) NAME callback ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  super . METHOD_1 ( VAR_2 , s , VAR_2 , VAR_1 , fd , callback ) )  super . METHOD_1 ( VAR_2 , s , VAR_2 , VAR_1 , fd , callback ) (  VAR_3 [ 0 ] = session )  VAR_3 [ 0 ] = session ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME slotId ) NAME slotId ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE android.os.Message ) TYPE android.os.Message ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  VAR_5 )  VAR_5 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_6 ) NAME VAR_6 ( INIT = METHOD_2 ( slotId , VAR_1 ) ) INIT = METHOD_2 ( slotId , VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_6 != null ) COND VAR_6 != null ( THEN THEN (  VAR_6 . METHOD_1 ( VAR_2 , VAR_3 , VAR_4 ) )  VAR_6 . METHOD_1 ( VAR_2 , VAR_3 , VAR_4 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private synchronized ) MODIFIER private synchronized ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE byte ) TYPE byte ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE byte ) TYPE byte ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME data ) NAME data ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_3 ) COND VAR_3 ( THEN THEN (  android.util.Log.v ( VAR_4 . TAG , ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + VAR_2 ) ) )  android.util.Log.v ( VAR_4 . TAG , ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + VAR_2 ) ) ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_5 ) NAME VAR_5 ( INIT = TYPE_1 . METHOD_2 ( data ) ) INIT = TYPE_1 . METHOD_2 ( data ) ) VAR VAR ( VAR VAR ( TYPE android.os.Message ) TYPE android.os.Message ( NAME msg ) NAME msg ( INIT = VAR_6 . METHOD_3 ( VAR_7 ) ) INIT = VAR_6 . METHOD_3 ( VAR_7 ) ) VAR VAR (  msg.arg1 = VAR_1 )  msg.arg1 = VAR_1 (  VAR_8 = VAR_2 )  VAR_8 = VAR_2 (  msg.obj = VAR_5 )  msg.obj = VAR_5 (  VAR_6 . METHOD_4 ( msg ) )  VAR_6 . METHOD_4 ( msg ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME c ) NAME c ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME s ) NAME s ( INIT = super . METHOD_1 ( c ) ) INIT = super . METHOD_1 ( c ) ) VAR VAR ( IF IF ( COND ( VAR_1 ) != null ) COND ( VAR_1 ) != null ( THEN THEN (  TYPE_2 . METHOD_2 ( s , VAR_1 ) )  TYPE_2 . METHOD_2 ( s , VAR_1 ) ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_2 ) != null ) COND ( VAR_2 ) != null ( THEN THEN (  TYPE_2 . METHOD_3 ( s , VAR_2 ) )  TYPE_2 . METHOD_3 ( s , VAR_2 ) ) THEN THEN ) IF IF ( IF IF ( COND VAR_3 ) COND VAR_3 ( THEN THEN (  TYPE_2 . METHOD_4 ( s ) )  TYPE_2 . METHOD_4 ( s ) ) THEN THEN ) IF IF (  return s ; )  return s ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 ) INIT = VAR_3 ) VAR VAR ( SWITCH SWITCH ( NAME VAR_1 ) NAME VAR_1 ( CASE 0 ( BLOCK BLOCK (  break ; )  break ; ) BLOCK BLOCK ) CASE 0 ( CASE 1 ( BLOCK BLOCK (  break ; )  break ; ) BLOCK BLOCK ) CASE 1 ( CASE 2 ( BLOCK BLOCK (  break ; )  break ; ) BLOCK BLOCK ) CASE 2 ( CASE 3 ( BLOCK BLOCK (  break ; )  break ; ) BLOCK BLOCK ) CASE 3 ( CASE 4 ( BLOCK BLOCK (  break ; )  break ; ) BLOCK BLOCK ) CASE 4 ( CASE 5 ( BLOCK BLOCK (  break ; )  break ; ) BLOCK BLOCK ) CASE 5 ( CASE 6 ( BLOCK BLOCK (  VAR_2 = VAR_4 )  VAR_2 = VAR_4 (  break ; )  break ; ) BLOCK BLOCK ) CASE 6 ( CASE 7 ( BLOCK BLOCK (  VAR_2 = VAR_4 )  VAR_2 = VAR_4 (  break ; )  break ; ) BLOCK BLOCK ) CASE 7 ( CASE 8 ( BLOCK BLOCK (  VAR_2 = VAR_4 )  VAR_2 = VAR_4 (  break ; )  break ; ) BLOCK BLOCK ) CASE 8 ( DEFAULT DEFAULT ( BLOCK BLOCK (  android.util.Log.e ( VAR_5 , STRING_1 ) )  android.util.Log.e ( VAR_5 , STRING_1 ) (  break ; )  break ; ) BLOCK BLOCK ) DEFAULT DEFAULT ) SWITCH SWITCH (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE char ) TYPE char ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_2 ) != null ) COND ( VAR_2 ) != null ( THEN THEN (  this . VAR_2 [ 0 ] = VAR_1 )  this . VAR_2 [ 0 ] = VAR_1 ( IF IF ( COND ( TYPE_1 . METHOD_2 ( VAR_1 , 10 ) ) == 0 ) COND ( TYPE_1 . METHOD_2 ( VAR_1 , 10 ) ) == 0 ( THEN THEN ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 1 ) INIT = 1 ) VAR VAR ) INIT INIT ( COND i < 10 ) COND i < 10 ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK (  this . VAR_2 [ i ] = ( ( char ) ( VAR_1 + i ) ) )  this . VAR_2 [ i ] = ( ( char ) ( VAR_1 + i ) ) ) BLOCK BLOCK ) FOR FOR ) THEN THEN ) IF IF ) THEN THEN ( ELSE ELSE (  this . VAR_1 = VAR_1 )  this . VAR_1 = VAR_1 ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME equals ) NAME equals ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME obj ) NAME obj ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( this ) == obj ) COND ( this ) == obj ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ( IF IF ( COND ( METHOD_1 ( ) ) != ( obj . METHOD_1 ( ) ) ) COND ( METHOD_1 ( ) ) != ( obj . METHOD_1 ( ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME b ) NAME b ( INIT = ( ( TYPE_1 ) ( obj ) ) ) INIT = ( ( TYPE_1 ) ( obj ) ) ) VAR VAR (  return ( VAR_1 ) == ( VAR_2 ) ; )  return ( VAR_1 ) == ( VAR_2 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME element ) NAME element ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME size ) NAME size ( INIT = VAR_2 . size ( ) ) INIT = VAR_2 . size ( ) ) VAR VAR ( IF IF ( COND VAR_1 < 0 ) COND VAR_1 < 0 ( THEN THEN (  VAR_1 = size + VAR_1 )  VAR_1 = size + VAR_1 ) THEN THEN ) IF IF ( IF IF ( COND VAR_1 == size ) COND VAR_1 == size ( THEN THEN (  METHOD_2 ( element ) )  METHOD_2 ( element ) ) THEN THEN ( ELSE ELSE (  VAR_2 . METHOD_3 ( VAR_1 , METHOD_4 ( ) ) )  VAR_2 . METHOD_3 ( VAR_1 , METHOD_4 ( ) ) (  element . METHOD_5 ( this ) )  element . METHOD_5 ( this ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<?extendsTYPE_2> ) TYPE TYPE_1<?extendsTYPE_2> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1<java.lang.String> ) TYPE TYPE_1<java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( IF IF ( COND ! ( TYPE_3 . METHOD_2 ( ( ( TYPE_4 ) ( VAR_3 ) ) ) ) ) COND ! ( TYPE_3 . METHOD_2 ( ( ( TYPE_4 ) ( VAR_3 ) ) ) ) ( THEN THEN (  VAR_2 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_3 ) ) )  VAR_2 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_3 ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<java.lang.Integer> ) TYPE TYPE_1<java.lang.Integer> ( NAME e ) NAME e ( INIT = new TYPE_1 < java.lang.Integer > ( 10 ) ) INIT = new TYPE_1 < java.lang.Integer > ( 10 ) ) VAR VAR (  e . METHOD_2 ( 1 ) )  e . METHOD_2 ( 1 ) (  assertEquals ( ( ( long ) ( e . size ( ) ) ) , ( ( long ) ( 1 ) ) ) )  assertEquals ( ( ( long ) ( e . size ( ) ) ) , ( ( long ) ( 1 ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  android.util.Log.v ( VAR_3 . TAG , ( STRING_1 + VAR_1 ) ) )  android.util.Log.v ( VAR_3 . TAG , ( STRING_1 + VAR_1 ) ) ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_4 ) != null ) COND ( VAR_4 ) != null ( THEN THEN (  VAR_4 . METHOD_2 ( ) )  VAR_4 . METHOD_2 ( ) (  VAR_4 = null )  VAR_4 = null ) THEN THEN ( ELSE ELSE (  android.util.Log.w ( VAR_3 . TAG , STRING_2 ) )  android.util.Log.w ( VAR_3 . TAG , STRING_2 ) ) ELSE ELSE ) IF IF (  VAR_5 . METHOD_3 ( ) )  VAR_5 . METHOD_3 ( ) (  VAR_6 . METHOD_4 ( VAR_1 ) )  VAR_6 . METHOD_4 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( mContext , VAR_2 ) ) INIT = new TYPE_1 ( mContext , VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME data ) NAME data ( INIT = VAR_1 . METHOD_1 ( ) ) INIT = VAR_1 . METHOD_1 ( ) ) VAR VAR ( IF IF ( COND data != null ) COND data != null ( THEN THEN ( IF IF ( COND VAR_3 ) COND VAR_3 ( THEN THEN (  android.util.Log.d ( VAR_4 . TAG , STRING_1 ) )  android.util.Log.d ( VAR_4 . TAG , STRING_1 ) ) THEN THEN ) IF IF (  METHOD_2 ( data , data . length ) )  METHOD_2 ( data , data . length ) ) THEN THEN ) IF IF (  METHOD_3 ( VAR_5 , 0 , null ) )  METHOD_3 ( VAR_5 , 0 , null ) ( IF IF ( COND data == null ) COND data == null ( THEN THEN (  VAR_6 . METHOD_4 ( VAR_7 , VAR_8 ) )  VAR_6 . METHOD_4 ( VAR_7 , VAR_8 ) ) THEN THEN ) IF IF (  VAR_9 . METHOD_5 ( ) )  VAR_9 . METHOD_5 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_4 ( ) ) )  TYPE_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_4 ( ) ) (  VAR_1 . METHOD_5 ( TYPE_1 . METHOD_4 ( ) ) )  VAR_1 . METHOD_5 ( TYPE_1 . METHOD_4 ( ) ) (  METHOD_6 ( ) )  METHOD_6 ( ) (  METHOD_7 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_4 ( ) ) )  METHOD_7 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_4 ( ) ) (  VAR_1 . METHOD_8 ( TYPE_1 . METHOD_3 ( ) ) )  VAR_1 . METHOD_8 ( TYPE_1 . METHOD_3 ( ) ) (  METHOD_9 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_4 ( ) ) )  METHOD_9 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_4 ( ) ) (  METHOD_10 ( TYPE_1 . METHOD_4 ( ) ) )  METHOD_10 ( TYPE_1 . METHOD_4 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME error ) NAME error ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.Throwable ) TYPE java.lang.Throwable ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_1 ( VAR_2 ) ) INIT = METHOD_1 ( VAR_2 ) ) VAR VAR (  TYPE_1 . log ( VAR_3 , STRING_1 , VAR_5 , VAR_4 ) )  TYPE_1 . log ( VAR_3 , STRING_1 , VAR_5 , VAR_4 ) ( IF IF ( COND VAR_3 != null ) COND VAR_3 != null ( THEN THEN (  VAR_6 = true )  VAR_6 = true ) THEN THEN ) IF IF (  METHOD_2 ( VAR_1 , VAR_4 ) )  METHOD_2 ( VAR_1 , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_1 ) ) COND ! ( VAR_1 ) ( THEN THEN (  android.util.Log.w ( VAR_2 , STRING_1 ) )  android.util.Log.w ( VAR_2 , STRING_1 ) ) THEN THEN ) IF IF (  VAR_1 = false )  VAR_1 = false ( IF IF ( COND ( VAR_3 ) != null ) COND ( VAR_3 ) != null ( THEN THEN (  VAR_3 . METHOD_2 ( METHOD_3 ( ) . getName ( ) , VAR_4 ) )  VAR_3 . METHOD_2 ( METHOD_3 ( ) . getName ( ) , VAR_4 ) ) THEN THEN ) IF IF ( IF IF ( COND ! ( METHOD_4 ( ) ) ) COND ! ( METHOD_4 ( ) ) ( THEN THEN (  android.util.Log.e ( VAR_2 , STRING_2 ) )  android.util.Log.e ( VAR_2 , STRING_2 ) ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_5 ) != null ) COND ( VAR_5 ) != null ( THEN THEN (  METHOD_5 ( ) . METHOD_6 ( VAR_5 ) )  METHOD_5 ( ) . METHOD_6 ( VAR_5 ) (  VAR_5 = null )  VAR_5 = null ) THEN THEN ) IF IF (  METHOD_7 ( ) )  METHOD_7 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME provider ) NAME provider ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  provider . METHOD_2 ( STRING_1 , ( ( VAR_1 ) + STRING_2 ) ) )  provider . METHOD_2 ( STRING_1 , ( ( VAR_1 ) + STRING_2 ) ) (  provider . METHOD_2 ( STRING_3 , STRING_4 ) )  provider . METHOD_2 ( STRING_3 , STRING_4 ) (  provider . METHOD_2 ( ( STRING_5 + ( VAR_2 ) ) , STRING_4 ) )  provider . METHOD_2 ( ( STRING_5 + ( VAR_2 ) ) , STRING_4 ) (  provider . METHOD_2 ( STRING_6 , ( ( VAR_1 ) + STRING_7 ) ) )  provider . METHOD_2 ( STRING_6 , ( ( VAR_1 ) + STRING_7 ) ) (  METHOD_3 ( provider , STRING_8 , ( ( VAR_1 ) + STRING_9 ) , ( ( VAR_1 ) + STRING_10 ) ) )  METHOD_3 ( provider , STRING_8 , ( ( VAR_1 ) + STRING_9 ) , ( ( VAR_1 ) + STRING_10 ) ) (  METHOD_4 ( provider , STRING_8 , VAR_3 ) )  METHOD_4 ( provider , STRING_8 , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN com.android.jack.ir.ast.JDefinedClassOrInterface ) RETURN com.android.jack.ir.ast.JDefinedClassOrInterface ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME session ) NAME session ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME type ) NAME type ( INIT = METHOD_2 ( VAR_1 , session . METHOD_3 ( ) ) ) INIT = METHOD_2 ( VAR_1 , session . METHOD_3 ( ) ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_5 . METHOD_4 ( TYPE_5 . METHOD_5 ( type . METHOD_6 ( ) ) ) ) INIT = TYPE_5 . METHOD_4 ( TYPE_5 . METHOD_5 ( type . METHOD_6 ( ) ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME VAR_3 ) NAME VAR_3 ( INIT = session . METHOD_7 ( ) . METHOD_8 ( VAR_2 ) ) INIT = session . METHOD_7 ( ) . METHOD_8 ( VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE com.android.jack.ir.ast.JDefinedClassOrInterface ) TYPE com.android.jack.ir.ast.JDefinedClassOrInterface ( NAME VAR_4 ) NAME VAR_4 ( INIT = type . METHOD_1 ( VAR_3 , this ) ) INIT = type . METHOD_1 ( VAR_3 , this ) ) VAR VAR (  return VAR_4 ; )  return VAR_4 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME action ) NAME action ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SWITCH SWITCH ( NAME action ) NAME action ( CASE VAR_1 ( BLOCK BLOCK (  METHOD_2 ( VAR_2 ) )  METHOD_2 ( VAR_2 ) (  ( ( TYPE_1 ) ( VAR_3 ) ) . METHOD_3 ( VAR_4 . TRUE ) )  ( ( TYPE_1 ) ( VAR_3 ) ) . METHOD_3 ( VAR_4 . TRUE ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_1 ( CASE VAR_5 ( BLOCK BLOCK ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_6 ) NAME VAR_6 ( INIT = TYPE_2 . METHOD_4 ( VAR_7 , VAR_8 ) ) INIT = TYPE_2 . METHOD_4 ( VAR_7 , VAR_8 ) ) VAR VAR (  METHOD_5 ( VAR_2 , VAR_6 ) )  METHOD_5 ( VAR_2 , VAR_6 ) (  ( ( TYPE_1 ) ( VAR_3 ) ) . METHOD_3 ( VAR_4 . FALSE ) )  ( ( TYPE_1 ) ( VAR_3 ) ) . METHOD_3 ( VAR_4 . FALSE ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_5 ( DEFAULT DEFAULT ( BLOCK BLOCK (  TYPE_3 . e ( VAR_9 , ( STRING_1 + action ) ) )  TYPE_3 . e ( VAR_9 , ( STRING_1 + action ) ) ) BLOCK BLOCK ) DEFAULT DEFAULT ) SWITCH SWITCH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME offset ) NAME offset ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME value ) NAME value ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( value < 0 ) || ( value > INT_1 ) ) COND ( value < 0 ) || ( value > INT_1 ) ( THEN THEN (  throw new java.lang.IllegalArgumentException ( ( STRING_1 + value ) ) ; )  throw new java.lang.IllegalArgumentException ( ( STRING_1 + value ) ) ; ) THEN THEN ) IF IF (  VAR_1 . METHOD_2 ( ( ( VAR_1 . METHOD_3 ( ) ) + offset ) , ( ( int ) ( value ) ) ) )  VAR_1 . METHOD_2 ( ( ( VAR_1 . METHOD_3 ( ) ) + offset ) , ( ( int ) ( value ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) == null ) COND ( VAR_1 ) == null ( THEN THEN (  throw new TYPE_3 ( STRING_1 ) ; )  throw new TYPE_3 ( STRING_1 ) ; ) THEN THEN ) IF IF ( TRY TRY ( BLOCK BLOCK (  return VAR_1 . METHOD_1 ( VAR_2 , VAR_3 , VAR_4 . METHOD_2 ( ) ) ; )  return VAR_1 . METHOD_1 ( VAR_2 , VAR_3 , VAR_4 . METHOD_2 ( ) ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME e ) NAME e ( BLOCK BLOCK (  android.util.Log.w ( VAR_5 , STRING_2 ) )  android.util.Log.w ( VAR_5 , STRING_2 ) (  VAR_1 = null )  VAR_1 = null (  throw new TYPE_2 ( VAR_6 ) ; )  throw new TYPE_2 ( VAR_6 ) ; ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME e ) NAME e ( BLOCK BLOCK (  android.util.Log.w ( VAR_5 , ( STRING_3 + e ) ) )  android.util.Log.w ( VAR_5 , ( STRING_3 + e ) ) (  throw new TYPE_2 ( VAR_7 ) ; )  throw new TYPE_2 ( VAR_7 ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME path ) NAME path ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME content ) NAME content ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.String> ) TYPE java.util.Map<java.lang.String,java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_1 . METHOD_2 ( path , content ) ) INIT = TYPE_1 . METHOD_2 ( path , content ) ) VAR VAR (  TYPE_2 . METHOD_3 ( VAR_1 , VAR_2 , VAR_3 < java.lang.String > of ( ) ) )  TYPE_2 . METHOD_3 ( VAR_1 , VAR_2 , VAR_3 < java.lang.String > of ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME format ) NAME format ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME pos ) NAME pos ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_1 ( ) ) INIT = METHOD_1 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_1 . METHOD_1 ( ) ) INIT = VAR_1 . METHOD_1 ( ) ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_4 . equals ( VAR_3 ) ) INIT = VAR_4 . equals ( VAR_3 ) ) VAR VAR ( IF IF ( COND ! VAR_5 ) COND ! VAR_5 ( THEN THEN (  METHOD_2 ( VAR_4 ) )  METHOD_2 ( VAR_4 ) ) THEN THEN ) IF IF (  format ( VAR_1 . METHOD_3 ( ) , VAR_2 , pos ) )  format ( VAR_1 . METHOD_3 ( ) , VAR_2 , pos ) ( IF IF ( COND ! VAR_5 ) COND ! VAR_5 ( THEN THEN (  METHOD_2 ( VAR_3 ) )  METHOD_2 ( VAR_3 ) ) THEN THEN ) IF IF (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( VAR_1 ) )  TYPE_1 . METHOD_2 ( VAR_1 ) (  fail ( ) )  fail ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.NullPointerException ) TYPE java.lang.NullPointerException ( NAME expected ) NAME expected ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ( VAR VAR ( TYPE int ) TYPE int ( NAME c ) NAME c ( INIT = TYPE_1 . METHOD_3 ( ) ) INIT = TYPE_1 . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME s ) NAME s ( INIT = TYPE_1 . METHOD_4 ( c ) ) INIT = TYPE_1 . METHOD_4 ( c ) ) VAR VAR (  assertTrue ( ( ( TYPE_1 . METHOD_2 ( s ) ) != 0 ) ) )  assertTrue ( ( ( TYPE_1 . METHOD_2 ( s ) ) != 0 ) ) (  TYPE_1 . METHOD_5 ( s ) )  TYPE_1 . METHOD_5 ( s ) (  TYPE_1 . METHOD_6 ( c ) )  TYPE_1 . METHOD_6 ( c ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME type ) NAME type ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( VAR_1 , type ) ) INIT = METHOD_2 ( VAR_1 , type ) ) VAR VAR ( IF IF ( COND ( VAR_2 != null ) && ( ! ( VAR_2 . METHOD_3 ( ) ) ) ) COND ( VAR_2 != null ) && ( ! ( VAR_2 . METHOD_3 ( ) ) ) ( THEN THEN (  return VAR_2 . get ( 0 ) ; )  return VAR_2 . get ( 0 ) ; ) THEN THEN ( ELSE ELSE (  TYPE_3 . e ( this , new java.lang.Exception ( ) , ( ( STRING_1 + VAR_1 ) + STRING_2 ) ) )  TYPE_3 . e ( this , new java.lang.Exception ( ) , ( ( STRING_1 + VAR_1 ) + STRING_2 ) ) (  return new TYPE_1 ( VAR_1 , false , type ) ; )  return new TYPE_1 ( VAR_1 , false , type ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_1 . METHOD_3 ( STRING_1 , STRING_2 ) ) INIT = TYPE_1 . METHOD_3 ( STRING_1 , STRING_2 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_3 . METHOD_4 ( VAR_4 class ) ) INIT = TYPE_3 . METHOD_4 ( VAR_4 class ) ) VAR VAR (  VAR_3 . METHOD_5 ( VAR_1 , VAR_2 , false ) )  VAR_3 . METHOD_5 ( VAR_1 , VAR_2 , false ) (  METHOD_6 ( VAR_2 , VAR_5 , STRING_3 , false ) )  METHOD_6 ( VAR_2 , VAR_5 , STRING_3 , false ) (  METHOD_6 ( VAR_2 , VAR_6 , STRING_4 , false ) )  METHOD_6 ( VAR_2 , VAR_6 , STRING_4 , false ) (  METHOD_6 ( VAR_2 , VAR_7 , STRING_5 , false ) )  METHOD_6 ( VAR_2 , VAR_7 , STRING_5 , false ) (  METHOD_6 ( VAR_2 , VAR_8 , STRING_6 , false ) )  METHOD_6 ( VAR_2 , VAR_8 , STRING_6 , false ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME config ) NAME config ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  android.util.Log.v ( VAR_1 . TAG , STRING_1 ) )  android.util.Log.v ( VAR_1 . TAG , STRING_1 ) ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME result ) NAME result ( INIT = false ) INIT = false ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME service ) NAME service ( INIT = VAR_2 ) INIT = VAR_2 ) VAR VAR ( IF IF ( COND service != null ) COND service != null ( THEN THEN ( TRY TRY ( BLOCK BLOCK (  result = service . METHOD_1 ( config ) )  result = service . METHOD_1 ( config ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME e ) NAME e ( BLOCK BLOCK (  android.util.Log.e ( VAR_1 . TAG , e.toString ( ) ) )  android.util.Log.e ( VAR_1 . TAG , e.toString ( ) ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) THEN THEN ( ELSE ELSE (  android.util.Log.w ( VAR_1 . TAG , STRING_2 ) )  android.util.Log.w ( VAR_1 . TAG , STRING_2 ) ) ELSE ELSE ) IF IF (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_2 . METHOD_2 ( VAR_1 ) )  VAR_2 . METHOD_2 ( VAR_1 ) ( IF IF ( COND RIL . RILJ_LOGD ) COND RIL . RILJ_LOGD ( THEN THEN (  VAR_2 . METHOD_3 ( VAR_3 ) )  VAR_2 . METHOD_3 ( VAR_3 ) ) THEN THEN ) IF IF (  VAR_2 . METHOD_4 ( false , null ) )  VAR_2 . METHOD_4 ( false , null ) (  VAR_2 . METHOD_5 ( VAR_4 , null ) )  VAR_2 . METHOD_5 ( VAR_4 , null ) (  VAR_2 . METHOD_6 ( ) )  VAR_2 . METHOD_6 ( ) (  VAR_2 . METHOD_7 ( INT_1 ) )  VAR_2 . METHOD_7 ( INT_1 ) (  VAR_2 . METHOD_8 ( true ) )  VAR_2 . METHOD_8 ( true ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . METHOD_2 ( VAR_4 ) ) INIT = VAR_1 . METHOD_2 ( VAR_4 ) ) VAR VAR ( IF IF ( COND VAR_3 != 4 ) COND VAR_3 != 4 ( THEN THEN (  throw new java.io.IOException ( STRING_1 ) ; )  throw new java.io.IOException ( STRING_1 ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME b ) NAME b ( INIT = TYPE_3 . METHOD_3 ( VAR_4 ) ) INIT = TYPE_3 . METHOD_3 ( VAR_4 ) ) VAR VAR (  return b . METHOD_4 ( ) ; )  return b . METHOD_4 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( STRING_1 ) ) INIT = TYPE_1 . METHOD_2 ( STRING_1 ) ) VAR VAR (  assertEquals ( 0 , TYPE_1 . METHOD_3 ( VAR_1 ) ) )  assertEquals ( 0 , TYPE_1 . METHOD_3 ( VAR_1 ) ) ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_1 . METHOD_2 ( STRING_2 ) ) INIT = TYPE_1 . METHOD_2 ( STRING_2 ) ) VAR VAR (  assertEquals ( 16 , TYPE_1 . METHOD_3 ( VAR_2 ) ) )  assertEquals ( 16 , TYPE_1 . METHOD_3 ( VAR_2 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( false ) )  METHOD_2 ( false ) (  METHOD_3 ( true ) )  METHOD_3 ( true ) (  METHOD_4 ( false ) )  METHOD_4 ( false ) (  METHOD_5 ( VAR_1 , false ) )  METHOD_5 ( VAR_1 , false ) (  METHOD_6 ( false ) )  METHOD_6 ( false ) (  assertEquals ( VAR_2 , TYPE_1 . METHOD_7 ( mContext , VAR_3 , VAR_4 ) ) )  assertEquals ( VAR_2 , TYPE_1 . METHOD_7 ( mContext , VAR_3 , VAR_4 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME w ) NAME w ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME h ) NAME h ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME d ) NAME d ) VAR VAR ( VAR VAR ( TYPE short[] ) TYPE short[] ( NAME data ) NAME data ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  mRS . METHOD_2 ( ) )  mRS . METHOD_2 ( ) (  METHOD_3 ( VAR_1 , VAR_2 , VAR_3 , w , h , d ) )  METHOD_3 ( VAR_1 , VAR_2 , VAR_3 , w , h , d ) (  mRS . METHOD_4 ( METHOD_5 ( ) , VAR_1 , VAR_2 , VAR_3 , VAR_4 , w , h , d , data , ( ( data . length ) * 2 ) ) )  mRS . METHOD_4 ( METHOD_5 ( ) , VAR_1 , VAR_2 , VAR_3 , VAR_4 , w , h , d , data , ( ( data . length ) * 2 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( ) )  VAR_1 . METHOD_2 ( ) ( IF IF ( COND ! ( VAR_2 ) ) COND ! ( VAR_2 ) ( THEN THEN (  TYPE_1 . METHOD_3 ( ) )  TYPE_1 . METHOD_3 ( ) (  TYPE_1 . METHOD_4 ( ) )  TYPE_1 . METHOD_4 ( ) (  VAR_2 = true )  VAR_2 = true ) THEN THEN ) IF IF ) BLOCK BLOCK ( FINALLY FINALLY (  VAR_1 . METHOD_5 ( ) )  VAR_1 . METHOD_5 ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_2 . METHOD_2 ( VAR_1 , VAR_2 ) )  TYPE_2 . METHOD_2 ( VAR_1 , VAR_2 ) (  TYPE_2 . METHOD_2 ( VAR_3 , VAR_4 ) )  TYPE_2 . METHOD_2 ( VAR_3 , VAR_4 ) (  METHOD_3 ( VAR_1 , VAR_2 ) )  METHOD_3 ( VAR_1 , VAR_2 ) (  METHOD_3 ( VAR_3 , VAR_4 ) )  METHOD_3 ( VAR_3 , VAR_4 ) (  METHOD_4 ( VAR_2 , VAR_4 ) )  METHOD_4 ( VAR_2 , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN long ) RETURN long ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) == null ) COND ( VAR_1 ) == null ( THEN THEN (  return - INT_1 ; )  return - INT_1 ; ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_1 . METHOD_2 ( ) ) == ( VAR_2 ) ) COND ( VAR_1 . METHOD_2 ( ) ) == ( VAR_2 ) ( THEN THEN (  return - INT_1 ; )  return - INT_1 ; ) THEN THEN ) IF IF ( IF IF ( COND METHOD_3 ( VAR_1 ) ) COND METHOD_3 ( VAR_1 ) ( THEN THEN (  return ( ( TYPE_1 . METHOD_4 ( ) ) - ( VAR_3 ) ) + ( VAR_1 . METHOD_2 ( ) ) ; )  return ( ( TYPE_1 . METHOD_4 ( ) ) - ( VAR_3 ) ) + ( VAR_1 . METHOD_2 ( ) ) ; ) THEN THEN ) IF IF (  return - INT_1 ; )  return - INT_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( ) ) INIT = TYPE_1 . METHOD_2 ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_1 . METHOD_3 ( false ) )  VAR_1 . METHOD_3 ( false ) (  VAR_1 . METHOD_4 ( ) . METHOD_5 ( null ) )  VAR_1 . METHOD_4 ( ) . METHOD_5 ( null ) (  METHOD_6 ( VAR_1 . METHOD_7 ( ) ) )  METHOD_6 ( VAR_1 . METHOD_7 ( ) ) ) BLOCK BLOCK ( FINALLY FINALLY (  VAR_1 . METHOD_8 ( ) )  VAR_1 . METHOD_8 ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME uri ) NAME uri ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND uri == null ) COND uri == null ( THEN THEN (  throw new java.lang.NullPointerException ( STRING_1 ) ; )  throw new java.lang.NullPointerException ( STRING_1 ) ; ) THEN THEN ) IF IF ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  throw new java.lang.NullPointerException ( STRING_2 ) ; )  throw new java.lang.NullPointerException ( STRING_2 ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( IF IF ( COND VAR_2 == 0 ) COND VAR_2 == 0 ( THEN THEN (  return - 1 ; )  return - 1 ; ) THEN THEN ) IF IF (  return TYPE_1 . METHOD_1 ( VAR_2 , uri , VAR_1 ) ; )  return TYPE_1 . METHOD_1 ( VAR_2 , uri , VAR_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  android.util.Slog.v ( com.android.server.am.ActivityManagerService.TAG , ( ( ( STRING_1 + ( this ) ) + STRING_2 ) + ( VAR_2 . METHOD_2 ( ) ) ) ) )  android.util.Slog.v ( com.android.server.am.ActivityManagerService.TAG , ( ( ( STRING_1 + ( this ) ) + STRING_2 ) + ( VAR_2 . METHOD_2 ( ) ) ) ) ) THEN THEN ) IF IF ( SYNCHRONIZED SYNCHRONIZED (  this )  this ( BLOCK BLOCK (  METHOD_3 ( VAR_3 , VAR_4 , VAR_2 ) )  METHOD_3 ( VAR_3 , VAR_4 , VAR_2 ) ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_2 ( VAR_3 , VAR_4 , false , null ) ) INIT = VAR_2 . METHOD_2 ( VAR_3 , VAR_4 , false , null ) ) VAR VAR (  assertEquals ( 1 , VAR_1 . size ( ) ) )  assertEquals ( 1 , VAR_1 . size ( ) ) (  assertEquals ( VAR_3 , VAR_1 . get ( 0 ) ) )  assertEquals ( VAR_3 , VAR_1 . get ( 0 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_1 ) )  VAR_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_1 ) (  ( VAR_3 ) ++ )  ( VAR_3 ) ++ ( IF IF ( COND ! ( VAR_4 ) ) COND ! ( VAR_4 ) ( THEN THEN (  METHOD_4 ( ( ( VAR_1 . getName ( ) ) + STRING_1 ) ) )  METHOD_4 ( ( ( VAR_1 . getName ( ) ) + STRING_1 ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( VAR_1 ) )  METHOD_2 ( VAR_1 ) ( IF IF ( COND ( VAR_2 ) != null ) COND ( VAR_2 ) != null ( THEN THEN (  VAR_2 . METHOD_1 ( ) )  VAR_2 . METHOD_1 ( ) ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_3 ) != null ) COND ( VAR_3 ) != null ( THEN THEN (  VAR_3 . METHOD_1 ( ) )  VAR_3 . METHOD_1 ( ) (  VAR_3 = null )  VAR_3 = null ) THEN THEN ) IF IF (  TYPE_1 . METHOD_3 ( ) )  TYPE_1 . METHOD_3 ( ) (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( VAR_3 . METHOD_3 ( ) . size ( ) ) + ( VAR_3 . METHOD_4 ( ) . size ( ) ) ) INIT = ( VAR_3 . METHOD_3 ( ) . size ( ) ) + ( VAR_3 . METHOD_4 ( ) . size ( ) ) ) VAR VAR ( IF IF ( COND VAR_4 ) COND VAR_4 ( THEN THEN (  android.util.Log.d ( VAR_5 . TAG , ( STRING_1 + VAR_2 ) ) )  android.util.Log.d ( VAR_5 . TAG , ( STRING_1 + VAR_2 ) ) ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME app ) NAME app ( INIT = null ) INIT = null ) VAR VAR (  app = VAR_6 . METHOD_5 ( VAR_7 ) )  app = VAR_6 . METHOD_5 ( VAR_7 ) ( IF IF ( COND app != null ) COND app != null ( THEN THEN (  app . METHOD_6 ( ) )  app . METHOD_6 ( ) ) THEN THEN ) IF IF (  VAR_3 . METHOD_1 ( VAR_1 ) )  VAR_3 . METHOD_1 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_4 ) NAME VAR_4 ( IN VAR_1 . METHOD_2 ( ) ) IN VAR_1 . METHOD_2 ( ) ( BLOCK BLOCK ( IF IF ( COND VAR_4 . METHOD_3 ( ) ) COND VAR_4 . METHOD_3 ( ) ( THEN THEN (  METHOD_1 ( VAR_4 , VAR_2 , VAR_3 ) )  METHOD_1 ( VAR_4 , VAR_2 , VAR_3 ) ) THEN THEN ( ELSE ELSE ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME path ) NAME path ( INIT = VAR_4 . METHOD_4 ( ) ) INIT = VAR_4 . METHOD_4 ( ) ) VAR VAR ( IF IF ( COND ( VAR_4 . getName ( ) . METHOD_5 ( VAR_2 ) ) && ( ! ( VAR_3 . METHOD_6 ( path ) ) ) ) COND ( VAR_4 . getName ( ) . METHOD_5 ( VAR_2 ) ) && ( ! ( VAR_3 . METHOD_6 ( path ) ) ) ( THEN THEN (  VAR_3 . METHOD_7 ( path ) )  VAR_3 . METHOD_7 ( path ) ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK (  VAR_1 . METHOD_1 ( this ) )  VAR_1 . METHOD_1 ( this ) ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( SYNCHRONIZED SYNCHRONIZED (  VAR_3 )  VAR_3 ( BLOCK BLOCK (  VAR_2 = METHOD_2 ( packageName , userId ) )  VAR_2 = METHOD_2 ( packageName , userId ) ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED (  METHOD_3 ( packageName , false ) )  METHOD_3 ( packageName , false ) ( IF IF ( COND VAR_4 != null ) COND VAR_4 != null ( THEN THEN ( TRY TRY ( BLOCK BLOCK (  VAR_4 . METHOD_4 ( packageName , VAR_2 ) )  VAR_4 . METHOD_4 ( packageName , VAR_2 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME e ) NAME e ( BLOCK BLOCK (  android.util.Log . i ( com.android.server.pm.PackageManagerService.TAG , STRING_1 ) )  android.util.Log . i ( com.android.server.pm.PackageManagerService.TAG , STRING_1 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( ) . METHOD_2 ( STRING_1 , STRING_2 , STRING_3 , STRING_4 ) . METHOD_3 ( STRING_5 ) . METHOD_4 ( true ) . build ( ) ) INIT = new TYPE_2 ( ) . METHOD_2 ( STRING_1 , STRING_2 , STRING_3 , STRING_4 ) . METHOD_3 ( STRING_5 ) . METHOD_4 ( true ) . build ( ) ) VAR VAR (  METHOD_1 ( VAR_1 , false ) )  METHOD_1 ( VAR_1 , false ) ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  METHOD_1 ( VAR_1 , true ) )  METHOD_1 ( VAR_1 , true ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public final ) MODIFIER public final ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME call ) NAME call ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ( INIT = METHOD_1 ( ) ) INIT = METHOD_1 ( ) ) VAR VAR (  METHOD_2 ( STRING_1 ) )  METHOD_2 ( STRING_1 ) (  return result ; )  return result ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( BLOCK BLOCK (  METHOD_3 ( TYPE_3 . METHOD_4 ( ) ) )  METHOD_3 ( TYPE_3 . METHOD_4 ( ) ) ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE java.lang.Throwable ) TYPE java.lang.Throwable ( NAME t ) NAME t ( BLOCK BLOCK (  METHOD_5 ( t ) )  METHOD_5 ( t ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( VAR_3 , new TYPE_2 ( STRING_1 ) , VAR_4 , new TYPE_2 ( STRING_2 ) , VAR_5 ) { public java.lang.String METHOD_2 ( ) { return VAR_1 ; } } ) INIT = new TYPE_1 ( VAR_3 , new TYPE_2 ( STRING_1 ) , VAR_4 , new TYPE_2 ( STRING_2 ) , VAR_5 ) { public java.lang.String METHOD_2 ( ) { return VAR_1 ; } } ) VAR VAR ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_2 ) NAME METHOD_2 ( BLOCK BLOCK (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD (  VAR_2 . METHOD_3 ( VAR_6 , new TYPE_2 ( STRING_3 ) , STRING_4 ) )  VAR_2 . METHOD_3 ( VAR_6 , new TYPE_2 ( STRING_3 ) , STRING_4 ) (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  m . METHOD_2 ( ) )  m . METHOD_2 ( ) (  assertFalse ( m . METHOD_3 ( true , null , new TYPE_1 [ 0 ] ) ) )  assertFalse ( m . METHOD_3 ( true , null , new TYPE_1 [ 0 ] ) ) (  assertFalse ( m . METHOD_4 ( true ) ) )  assertFalse ( m . METHOD_4 ( true ) ) (  assertEquals ( ( STRING_1 + STRING_2 ) , METHOD_5 ( m , true ) ) )  assertEquals ( ( STRING_1 + STRING_2 ) , METHOD_5 ( m , true ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_2 ( ) ) INIT = VAR_2 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME device ) NAME device ( INIT = VAR_2 . METHOD_3 ( ) ) INIT = VAR_2 . METHOD_3 ( ) ) VAR VAR (  TYPE_3 . METHOD_4 ( VAR_1 , STRING_1 ) )  TYPE_3 . METHOD_4 ( VAR_1 , STRING_1 ) (  TYPE_4 . METHOD_5 ( VAR_1 , STRING_2 ) )  TYPE_4 . METHOD_5 ( VAR_1 , STRING_2 ) (  device . METHOD_6 ( new TYPE_5 ( ) . METHOD_7 ( STRING_3 ) ) . METHOD_8 ( ) )  device . METHOD_6 ( new TYPE_5 ( ) . METHOD_7 ( STRING_3 ) ) . METHOD_8 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  server . METHOD_2 ( new TYPE_1 ( ) . METHOD_3 ( STRING_1 ) ) )  server . METHOD_2 ( new TYPE_1 ( ) . METHOD_3 ( STRING_1 ) ) (  server . METHOD_4 ( ) )  server . METHOD_4 ( ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME url ) NAME url ( INIT = new TYPE_2 ( STRING_2 , server . METHOD_5 ( ) , server . METHOD_6 ( ) , STRING_3 ) ) INIT = new TYPE_2 ( STRING_2 , server . METHOD_5 ( ) , server . METHOD_6 ( ) , STRING_3 ) ) VAR VAR (  assertEquals ( STRING_1 , METHOD_7 ( url . METHOD_8 ( ) . METHOD_9 ( ) , VAR_1 ) ) )  assertEquals ( STRING_1 , METHOD_7 ( url . METHOD_8 ( ) . METHOD_9 ( ) , VAR_1 ) ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME request ) NAME request ( INIT = server . METHOD_10 ( ) ) INIT = server . METHOD_10 ( ) ) VAR VAR (  assertEquals ( STRING_4 , request . METHOD_11 ( ) ) )  assertEquals ( STRING_4 , request . METHOD_11 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . get ( new TYPE_2 ( STRING_1 , STRING_2 ) ) ) INIT = TYPE_1 . get ( new TYPE_2 ( STRING_1 , STRING_2 ) ) ) VAR VAR (  assertEquals ( STRING_3 , VAR_2 [ 1 ] ) )  assertEquals ( STRING_3 , VAR_2 [ 1 ] ) (  assertEquals ( STRING_4 , VAR_3 [ 1 ] ) )  assertEquals ( STRING_4 , VAR_3 [ 1 ] ) (  assertEquals ( STRING_4 , VAR_4 [ 1 ] ) )  assertEquals ( STRING_4 , VAR_4 [ 1 ] ) (  assertEquals ( STRING_5 , VAR_5 [ 1 ] ) )  assertEquals ( STRING_5 , VAR_5 [ 1 ] ) (  assertEquals ( STRING_6 , VAR_6 [ 1 ] ) )  assertEquals ( STRING_6 , VAR_6 [ 1 ] ) (  assertEquals ( STRING_7 , VAR_7 [ 1 ] ) )  assertEquals ( STRING_7 , VAR_7 [ 1 ] ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_3 . i ( VAR_2 , ( STRING_1 + VAR_1 ) ) )  TYPE_3 . i ( VAR_2 , ( STRING_1 + VAR_1 ) ) ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_3 ) NAME VAR_3 ( INIT = new java.io.File ( VAR_1 , VAR_4 ) ) INIT = new java.io.File ( VAR_1 , VAR_4 ) ) VAR VAR ( IF IF ( COND ! ( VAR_3 . METHOD_2 ( ) ) ) COND ! ( VAR_3 . METHOD_2 ( ) ) ( THEN THEN (  throw new TYPE_2 ( ( STRING_2 + VAR_3 ) ) ; )  throw new TYPE_2 ( ( STRING_2 + VAR_3 ) ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_5 ) NAME VAR_5 ( INIT = TYPE_4 . METHOD_3 ( VAR_3 , VAR_6 ) ) INIT = TYPE_4 . METHOD_3 ( VAR_3 , VAR_6 ) ) VAR VAR (  return TYPE_1 . METHOD_4 ( VAR_5 ) ; )  return TYPE_1 . METHOD_4 ( VAR_5 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME status ) NAME status ( INIT = ( VAR_1 ) ? VAR_2 : VAR_3 ) INIT = ( VAR_1 ) ? VAR_2 : VAR_3 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME subId ) NAME subId ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  TYPE_1 . d ( VAR_4 , ( ( ( ( STRING_1 + status ) + STRING_2 ) + ( VAR_5 ) ) + subId ) ) )  TYPE_1 . d ( VAR_4 , ( ( ( ( STRING_1 + status ) + STRING_2 ) + ( VAR_5 ) ) + subId ) ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_6 ) NAME VAR_6 ( INIT = TYPE_3 . METHOD_3 ( mContext ) ) INIT = TYPE_3 . METHOD_3 ( mContext ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_7 ) NAME VAR_7 ( INIT = VAR_6 . METHOD_4 ( ) ) INIT = VAR_6 . METHOD_4 ( ) ) VAR VAR (  VAR_7 . METHOD_5 ( ( ( VAR_5 ) + subId ) , status ) )  VAR_7 . METHOD_5 ( ( ( VAR_5 ) + subId ) , status ) (  VAR_7 . METHOD_6 ( ) )  VAR_7 . METHOD_6 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN double ) RETURN double ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_2 ) NAME VAR_2 ( INIT = INT_1 ) INIT = INT_1 ) VAR VAR ( VAR VAR ( TYPE double ) TYPE double ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( VAR_1 . METHOD_2 ( VAR_4 ) ) / INT_2 ) INIT = ( VAR_1 . METHOD_2 ( VAR_4 ) ) / INT_2 ) VAR VAR (  return ( VAR_3 / ( ( ( ( double ) ( VAR_2 ) ) / 8 ) / INT_3 ) ) / ( INT_4 * INT_4 ) ; )  return ( VAR_3 / ( ( ( ( double ) ( VAR_2 ) ) / 8 ) / INT_3 ) ) / ( INT_4 * INT_4 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<java.lang.String> ) TYPE TYPE_1<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR ( IF IF ( COND VAR_1 . METHOD_3 ( ) ) COND VAR_1 . METHOD_3 ( ) ( THEN THEN (  VAR_2 . METHOD_4 ( VAR_1 . get ( ) ) )  VAR_2 . METHOD_4 ( VAR_1 . get ( ) ) ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_2 ( VAR_2 . size ( ) ) ) INIT = new TYPE_2 ( VAR_2 . size ( ) ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK (  METHOD_5 ( VAR_4 , VAR_3 ) )  METHOD_5 ( VAR_4 , VAR_3 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_5 ) NAME VAR_5 ( INIT = ( VAR_2 . size ( ) ) > 0 ) INIT = ( VAR_2 . size ( ) ) > 0 ) VAR VAR (  return VAR_5 ; )  return VAR_5 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE android.bluetooth.BluetoothDevice ) TYPE android.bluetooth.BluetoothDevice ( NAME device ) NAME device ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE android.content.Intent ) TYPE android.content.Intent ( NAME VAR_3 ) NAME VAR_3 ( INIT = new android.content.Intent ( VAR_4 ) ) INIT = new android.content.Intent ( VAR_4 ) ) VAR VAR (  VAR_3 . METHOD_2 ( VAR_5 , device ) )  VAR_3 . METHOD_2 ( VAR_5 , device ) (  VAR_3 . METHOD_2 ( VAR_6 , VAR_1 ) )  VAR_3 . METHOD_2 ( VAR_6 , VAR_1 ) ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN (  VAR_3 . METHOD_2 ( VAR_7 , VAR_2 ) )  VAR_3 . METHOD_2 ( VAR_7 , VAR_2 ) ) THEN THEN ) IF IF (  VAR_8 . METHOD_3 ( VAR_3 , VAR_9 ) )  VAR_8 . METHOD_3 ( VAR_3 , VAR_9 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME context ) NAME context ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME location ) NAME location ( INIT = VAR_2 . METHOD_2 ( ) ) INIT = VAR_2 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_2 . METHOD_3 ( ) ) INIT = VAR_2 . METHOD_3 ( ) ) VAR VAR ( IF IF ( COND VAR_4 instanceof TYPE_5 ) COND VAR_4 instanceof TYPE_5 ( THEN THEN ( IF IF ( COND context . METHOD_4 ( ) . METHOD_5 ( VAR_1 , ( ( TYPE_5 ) ( VAR_4 ) ) ) ) COND context . METHOD_4 ( ) . METHOD_5 ( VAR_1 , ( ( TYPE_5 ) ( VAR_4 ) ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  context . METHOD_1 ( VAR_1 , location , VAR_3 , null ) )  context . METHOD_1 ( VAR_1 , location , VAR_3 , null ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME parent ) NAME parent ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  parent . METHOD_2 ( new TYPE_3 ( 1 , false ) ) )  parent . METHOD_2 ( new TYPE_3 ( 1 , false ) ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME c ) NAME c ( INIT = new TYPE_2 ( parent , VAR_1 ) ) INIT = new TYPE_2 ( parent , VAR_1 ) ) VAR VAR (  c . METHOD_2 ( new TYPE_3 ( 1 , false ) ) )  c . METHOD_2 ( new TYPE_3 ( 1 , false ) ) (  c . METHOD_3 ( new TYPE_4 ( VAR_2 ) ) )  c . METHOD_3 ( new TYPE_4 ( VAR_2 ) ) (  METHOD_4 ( c ) )  METHOD_4 ( c ) (  METHOD_5 ( c ) )  METHOD_5 ( c ) (  METHOD_6 ( ) )  METHOD_6 ( ) (  return c ; )  return c ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private synchronized ) MODIFIER private synchronized ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME packageName ) NAME packageName ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = - 1 ) INIT = - 1 ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_2<java.lang.Integer,TYPE_1> ) TYPE TYPE_2<java.lang.Integer,TYPE_1> ( NAME entry ) NAME entry ( IN VAR_2 . METHOD_2 ( ) ) IN VAR_2 . METHOD_2 ( ) ( BLOCK BLOCK ( IF IF ( COND entry . METHOD_3 ( ) . METHOD_4 ( ) . equals ( packageName ) ) COND entry . METHOD_3 ( ) . METHOD_4 ( ) . equals ( packageName ) ( THEN THEN (  VAR_1 = entry . METHOD_5 ( ) )  VAR_1 = entry . METHOD_5 ( ) (  break ; )  break ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ( IF IF ( COND VAR_1 != ( - 1 ) ) COND VAR_1 != ( - 1 ) ( THEN THEN (  return VAR_2 . METHOD_6 ( VAR_1 ) ; )  return VAR_2 . METHOD_6 ( VAR_1 ) ; ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_5 ) == null ) COND ( VAR_5 ) == null ( THEN THEN (  VAR_5 = new TYPE_1 ( VAR_1 , VAR_2 , VAR_4 , VAR_3 ) )  VAR_5 = new TYPE_1 ( VAR_1 , VAR_2 , VAR_4 , VAR_3 ) ) THEN THEN ( ELSE ELSE (  VAR_5 . set ( VAR_1 , VAR_2 , VAR_4 , VAR_3 ) )  VAR_5 . set ( VAR_1 , VAR_2 , VAR_4 , VAR_3 ) ) ELSE ELSE ) IF IF ( IF IF ( COND ( VAR_6 ) != null ) COND ( VAR_6 ) != null ( THEN THEN (  VAR_6 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) )  VAR_6 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3<TYPE_4> ) TYPE TYPE_3<TYPE_4> ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( SYNCHRONIZED SYNCHRONIZED (  VAR_4 )  VAR_4 ( BLOCK BLOCK (  VAR_3 = VAR_5 . get ( VAR_2 ) )  VAR_3 = VAR_5 . get ( VAR_2 ) ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ( FOR-EACH FOR-EACH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_6 ) NAME VAR_6 ( IN VAR_3 ) IN VAR_3 ( BLOCK BLOCK ( IF IF ( COND VAR_6 . METHOD_1 ( ) ) COND VAR_6 . METHOD_1 ( ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME userId ) NAME userId ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME service ) NAME service ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_2 . METHOD_2 ( userId ) )  TYPE_2 . METHOD_2 ( userId ) (  TYPE_2 . METHOD_3 ( mContext ) )  TYPE_2 . METHOD_3 ( mContext ) ( IF IF ( COND ! ( METHOD_4 ( userId , service ) ) ) COND ! ( METHOD_4 ( userId , service ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  return VAR_1 . METHOD_1 ( service ) ; )  return VAR_1 . METHOD_1 ( service ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  METHOD_1 ( ) )  METHOD_1 ( ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_2 . METHOD_2 ( VAR_3 , VAR_1 , VAR_4 , VAR_5 ) )  VAR_2 . METHOD_2 ( VAR_3 , VAR_1 , VAR_4 , VAR_5 ) (  METHOD_3 ( VAR_1 . METHOD_4 ( ) ) )  METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME e ) NAME e ( BLOCK BLOCK (  METHOD_5 ( e ) )  METHOD_5 ( e ) ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK (  METHOD_5 ( e ) )  METHOD_5 ( e ) ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME e ) NAME e ( BLOCK BLOCK (  METHOD_5 ( e ) )  METHOD_5 ( e ) ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK (  METHOD_5 ( e ) )  METHOD_5 ( e ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<TYPE_2,TYPE_3> ) TYPE TYPE_1<TYPE_2,TYPE_3> ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  return false ; )  return false ; ) THEN THEN ( ELSE ELSE ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_3 ( ) ) INIT = VAR_1 . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . METHOD_4 ( ) ) INIT = VAR_1 . METHOD_4 ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  TYPE_4 . METHOD_5 ( VAR_2 , VAR_3 ) )  TYPE_4 . METHOD_5 ( VAR_2 , VAR_3 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME e ) NAME e ( BLOCK BLOCK (  TYPE_4 . log ( e , STRING_1 , VAR_2 . METHOD_6 ( ) . toString ( ) ) )  TYPE_4 . log ( e , STRING_1 , VAR_2 . METHOD_6 ( ) . toString ( ) ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  return true ; )  return true ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME args ) NAME args ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_1 . METHOD_1 ( ) )  TYPE_1 . METHOD_1 ( ) ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  VAR_1 . METHOD_2 ( ) )  VAR_1 . METHOD_2 ( ) (  VAR_2 . println ( STRING_1 ) )  VAR_2 . println ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( BLOCK BLOCK (  java.lang.System.out.println ( STRING_2 ) )  java.lang.System.out.println ( STRING_2 ) ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_4 ) NAME VAR_4 ( BLOCK BLOCK (  java.lang.System.out.println ( STRING_2 ) )  java.lang.System.out.println ( STRING_2 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME session ) NAME session ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_3 . METHOD_1 ( ) ) INIT = TYPE_3 . METHOD_1 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME event ) NAME event ( INIT = VAR_1 . start ( VAR_2 ) ) INIT = VAR_1 . start ( VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_6 . get ( VAR_4 ) ) INIT = TYPE_6 . get ( VAR_4 ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_3 . METHOD_2 ( VAR_5 ) )  VAR_3 . METHOD_2 ( VAR_5 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_7 ) TYPE TYPE_7 ( NAME e ) NAME e ( BLOCK BLOCK (  session . METHOD_3 ( ) . METHOD_4 ( VAR_6 , e ) )  session . METHOD_3 ( ) . METHOD_4 ( VAR_6 , e ) (  throw new TYPE_8 ( e ) ; )  throw new TYPE_8 ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ( FINALLY FINALLY (  event . METHOD_5 ( ) )  event . METHOD_5 ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static final ) MODIFIER public static final ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME provider ) NAME provider ) VAR VAR ( VAR VAR ( TYPE TYPE_2[] ) TYPE TYPE_2[] ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_3[] ) TYPE TYPE_3[] ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME context ) NAME context ( INIT = TYPE_1 . METHOD_2 ( VAR_1 , provider ) ) INIT = TYPE_1 . METHOD_2 ( VAR_1 , provider ) ) VAR VAR (  context . METHOD_3 ( VAR_2 , VAR_3 , new TYPE_4 ( ) ) )  context . METHOD_3 ( VAR_2 , VAR_3 , new TYPE_4 ( ) ) (  return context ; )  return context ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ( BLOCK BLOCK (  throw new java.lang.RuntimeException ( e ) ; )  throw new java.lang.RuntimeException ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( VAR_1 ) )  TYPE_1 . METHOD_2 ( VAR_1 ) (  fail ( ) )  fail ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.NullPointerException ) TYPE java.lang.NullPointerException ( NAME expected ) NAME expected ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ( VAR VAR ( TYPE int ) TYPE int ( NAME c ) NAME c ( INIT = TYPE_1 . METHOD_3 ( ) ) INIT = TYPE_1 . METHOD_3 ( ) ) VAR VAR (  TYPE_1 . METHOD_2 ( TYPE_1 . METHOD_4 ( c ) ) )  TYPE_1 . METHOD_2 ( TYPE_1 . METHOD_4 ( c ) ) (  TYPE_1 . METHOD_5 ( c ) )  TYPE_1 . METHOD_5 ( c ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.Class<?> ) TYPE java.lang.Class<?> ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE TYPE_3<java.lang.String> ) TYPE TYPE_3<java.lang.String> ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_6 ) NAME VAR_6 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_7 ) NAME VAR_7 ) VAR VAR ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME args ) NAME args ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND new TYPE_5 ( VAR_3 ) . METHOD_2 ( true , void . class , STRING_1 , java.lang.String [ ] . class ) ) COND new TYPE_5 ( VAR_3 ) . METHOD_2 ( true , void . class , STRING_1 , java.lang.String [ ] . class ) ( THEN THEN (  return new TYPE_6 ( VAR_1 , VAR_3 , args ) ; )  return new TYPE_6 ( VAR_1 , VAR_3 , args ) ; ) THEN THEN ( ELSE ELSE (  return null ; )  return null ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME flags ) NAME flags ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  VAR_1 )  VAR_1 ( BLOCK BLOCK (  VAR_2 . METHOD_2 ( ) )  VAR_2 . METHOD_2 ( ) ( IF IF ( COND ( VAR_3 . METHOD_3 ( ) ) > ( VAR_4 . METHOD_4 ( ) ) ) COND ( VAR_3 . METHOD_3 ( ) ) > ( VAR_4 . METHOD_4 ( ) ) ( THEN THEN (  VAR_3 . METHOD_5 ( ) )  VAR_3 . METHOD_5 ( ) ) THEN THEN ) IF IF ( TRY TRY ( BLOCK BLOCK (  METHOD_6 ( flags ) )  METHOD_6 ( flags ) ) BLOCK BLOCK ( FINALLY FINALLY (  VAR_2 . METHOD_7 ( ) )  VAR_2 . METHOD_7 ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  android.util.Log.w ( VAR_3 . TAG , STRING_1 ) )  android.util.Log.w ( VAR_3 . TAG , STRING_1 ) (  return null ; )  return null ; ) THEN THEN ( ELSE ELSE ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_5 . get ( ) ) INIT = VAR_5 . get ( ) ) VAR VAR ( IF IF ( COND VAR_4 == null ) COND VAR_4 == null ( THEN THEN (  android.util.Log.w ( VAR_3 . TAG , STRING_2 ) )  android.util.Log.w ( VAR_3 . TAG , STRING_2 ) (  return null ; )  return null ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_6 ) NAME VAR_6 ( INIT = ( ( this ) instanceof TYPE_3 ) ? VAR_7 : VAR_8 ) INIT = ( ( this ) instanceof TYPE_3 ) ? VAR_7 : VAR_8 ) VAR VAR (  return VAR_4 . METHOD_2 ( VAR_9 , VAR_6 , VAR_10 , VAR_1 , null ) ; )  return VAR_4 . METHOD_2 ( VAR_9 , VAR_6 , VAR_10 , VAR_1 , null ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_1 . METHOD_2 ( true ) )  VAR_1 . METHOD_2 ( true ) (  assertTrue ( STRING_1 , VAR_1 . METHOD_3 ( ) ) )  assertTrue ( STRING_1 , VAR_1 . METHOD_3 ( ) ) (  VAR_1 . METHOD_2 ( false ) )  VAR_1 . METHOD_2 ( false ) (  assertFalse ( STRING_2 , VAR_1 . METHOD_3 ( ) ) )  assertFalse ( STRING_2 , VAR_1 . METHOD_3 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME address ) NAME address ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME flags ) NAME flags ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME length ) NAME length ( INIT = VAR_3 . METHOD_2 ( ) ) INIT = VAR_3 . METHOD_2 ( ) ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < length ) COND i < length ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  VAR_3 . METHOD_3 ( i ) . METHOD_4 ( address , VAR_1 , flags , VAR_2 ) )  VAR_3 . METHOD_3 ( i ) . METHOD_4 ( address , VAR_1 , flags , VAR_2 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE java.lang.RuntimeException ) TYPE java.lang.RuntimeException ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) FOR FOR (  VAR_3 . METHOD_5 ( ) )  VAR_3 . METHOD_5 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( STRING_1 ) ) INIT = METHOD_2 ( STRING_1 ) ) VAR VAR (  s = new TYPE_1 ( TYPE_2 . METHOD_3 ( ) , VAR_1 , true ) )  s = new TYPE_1 ( TYPE_2 . METHOD_3 ( ) , VAR_1 , true ) (  assertTrue ( STRING_2 , ( ( s . METHOD_4 ( ) ) == VAR_1 ) ) )  assertTrue ( STRING_2 , ( ( s . METHOD_4 ( ) ) == VAR_1 ) ) (  s = new TYPE_1 ( TYPE_2 . METHOD_3 ( ) , VAR_1 , false ) )  s = new TYPE_1 ( TYPE_2 . METHOD_3 ( ) , VAR_1 , false ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public final ) MODIFIER public final ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE double ) TYPE double ( NAME x ) NAME x ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  throw new TYPE_2 ( ) ; )  throw new TYPE_2 ( ) ; ) THEN THEN ) IF IF ( IF IF ( COND ! ( VAR_2 ) ) COND ! ( VAR_2 ) ( THEN THEN (  throw new TYPE_3 ( STRING_1 ) ; )  throw new TYPE_3 ( STRING_1 ) ; ) THEN THEN ) IF IF (  METHOD_1 ( METHOD_2 ( METHOD_3 ( VAR_3 ) ) , x ) )  METHOD_1 ( METHOD_2 ( METHOD_3 ( VAR_3 ) ) , x ) (  return this ; )  return this ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_2 ) != null ) COND ( VAR_2 ) != null ( THEN THEN (  return ( STRING_1 + ( VAR_2 . toString ( ) ) ) + STRING_1 ; )  return ( STRING_1 + ( VAR_2 . toString ( ) ) ) + STRING_1 ; ) THEN THEN ( ELSE ELSE ( IF IF ( COND ( VAR_3 ) != null ) COND ( VAR_3 ) != null ( THEN THEN (  return ( STRING_1 + ( VAR_3 ) ) + STRING_1 ; )  return ( STRING_1 + ( VAR_3 ) ) + STRING_1 ; ) THEN THEN ( ELSE ELSE (  throw new java.lang.IllegalArgumentException ( STRING_2 ) ; )  throw new java.lang.IllegalArgumentException ( STRING_2 ) ; ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME uid ) NAME uid ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_2 ( VAR_3 , uid ) ) INIT = VAR_2 . METHOD_2 ( VAR_3 , uid ) ) VAR VAR (  return VAR_1 == ( VAR_4 ) ; )  return VAR_1 == ( VAR_4 ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME e ) NAME e ( BLOCK BLOCK (  android.util.Log.e ( VAR_5 . TAG , ( STRING_1 + e ) ) )  android.util.Log.e ( VAR_5 . TAG , ( STRING_1 + e ) ) (  return false ; )  return false ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME input ) NAME input ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  throw new TYPE_1 ( ) ; )  throw new TYPE_1 ( ) ; ) THEN THEN ) IF IF ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.Class<?> ) TYPE java.lang.Class<?> ( NAME c ) NAME c ( INIT = java.lang.Class . METHOD_2 ( STRING_1 ) ) INIT = java.lang.Class . METHOD_2 ( STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME m ) NAME m ( INIT = c . METHOD_3 ( name , new java.lang.Class [ ] { boolean . class } ) ) INIT = c . METHOD_3 ( name , new java.lang.Class [ ] { boolean . class } ) ) VAR VAR (  return ( ( java.lang.Integer ) ( m . invoke ( null , input ) ) ) ; )  return ( ( java.lang.Integer ) ( m . invoke ( null , input ) ) ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME ex ) NAME ex ( BLOCK BLOCK (  throw new TYPE_1 ( ex ) ; )  throw new TYPE_1 ( ex ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  VAR_3 . METHOD_5 ( VAR_2 . METHOD_4 ( ) , VAR_2 ) )  VAR_3 . METHOD_5 ( VAR_2 . METHOD_4 ( ) , VAR_2 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  org.junit.Assert.assertEquals ( VAR_1 [ 0 ] , ( ( VAR_2 ) + ( VAR_3 ) ) ) )  org.junit.Assert.assertEquals ( VAR_1 [ 0 ] , ( ( VAR_2 ) + ( VAR_3 ) ) ) (  org.junit.Assert.assertEquals ( VAR_1 [ 1 ] , STRING_1 ) )  org.junit.Assert.assertEquals ( VAR_1 [ 1 ] , STRING_1 ) (  org.junit.Assert.assertEquals ( VAR_1 [ 2 ] , TYPE_1 . METHOD_2 ( STRING_2 , STRING_3 ) ) )  org.junit.Assert.assertEquals ( VAR_1 [ 2 ] , TYPE_1 . METHOD_2 ( STRING_2 , STRING_3 ) ) (  TYPE_2 . assertTrue ( VAR_1 [ 3 ] . METHOD_3 ( STRING_4 ) ) )  TYPE_2 . assertTrue ( VAR_1 [ 3 ] . METHOD_3 ( STRING_4 ) ) (  org.junit.Assert.assertEquals ( VAR_1 . length , 4 ) )  org.junit.Assert.assertEquals ( VAR_1 . length , 4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME t ) NAME t ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND t instanceof com.android.jack.ir.ast.JDefinedClassOrInterface ) COND t instanceof com.android.jack.ir.ast.JDefinedClassOrInterface ( THEN THEN (  METHOD_1 ( ( ( com.android.jack.ir.ast.JDefinedClassOrInterface ) ( t ) ) ) )  METHOD_1 ( ( ( com.android.jack.ir.ast.JDefinedClassOrInterface ) ( t ) ) ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND t instanceof TYPE_2 ) COND t instanceof TYPE_2 ( THEN THEN (  METHOD_1 ( ( ( TYPE_2 ) ( t ) ) . METHOD_2 ( ) ) )  METHOD_1 ( ( ( TYPE_2 ) ( t ) ) . METHOD_2 ( ) ) ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE android.bluetooth.BluetoothDevice ) TYPE android.bluetooth.BluetoothDevice ( NAME device ) NAME device ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME type ) NAME type ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_4 ) IN VAR_4 ( BLOCK BLOCK ( IF IF ( COND ( ( ( VAR_3 . METHOD_2 ( ) . equals ( device ) ) && ( ( VAR_3 . METHOD_3 ( ) ) == type ) ) && ( ( VAR_3 . METHOD_4 ( ) ) == VAR_2 ) ) && ( VAR_3 . METHOD_5 ( ) . equals ( VAR_1 ) ) ) COND ( ( ( VAR_3 . METHOD_2 ( ) . equals ( device ) ) && ( ( VAR_3 . METHOD_3 ( ) ) == type ) ) && ( ( VAR_3 . METHOD_4 ( ) ) == VAR_2 ) ) && ( VAR_3 . METHOD_5 ( ) . equals ( VAR_1 ) ) ( THEN THEN (  return VAR_3 ; )  return VAR_3 ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) == 0 ) COND ( VAR_1 ) == 0 ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_1 . METHOD_2 ( VAR_3 , VAR_1 ) ) INIT = TYPE_1 . METHOD_2 ( VAR_3 , VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_1 . METHOD_2 ( VAR_5 , VAR_1 ) ) INIT = TYPE_1 . METHOD_2 ( VAR_5 , VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE int[] ) TYPE int[] ( NAME VAR_6 ) NAME VAR_6 ( INIT = TYPE_1 . METHOD_2 ( VAR_7 , VAR_1 ) ) INIT = TYPE_1 . METHOD_2 ( VAR_7 , VAR_1 ) ) VAR VAR (  VAR_8 . log ( new TYPE_2 ( VAR_9 , VAR_2 , VAR_4 , VAR_6 ) ) )  VAR_8 . log ( new TYPE_2 ( VAR_9 , VAR_2 , VAR_4 , VAR_6 ) ) (  TYPE_3 . METHOD_3 ( java.lang.String.format ( STRING_1 , VAR_1 , VAR_9 ) ) )  TYPE_3 . METHOD_3 ( java.lang.String.format ( STRING_1 , VAR_1 , VAR_9 ) ) (  VAR_1 = 0 )  VAR_1 = 0 ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( STRING_1 ) )  VAR_1 . METHOD_2 ( STRING_1 ) ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_3 . METHOD_3 ( ) ) INIT = VAR_3 . METHOD_3 ( ) ) VAR VAR (  TYPE_5 . METHOD_4 ( VAR_1 , VAR_2 , VAR_5 , ( ! ( VAR_4 . METHOD_5 ( ) ) ) , VAR_3 . METHOD_6 ( ) . METHOD_7 ( ) , ( VAR_4 . METHOD_5 ( ) ? null : VAR_4 . METHOD_6 ( ) . METHOD_7 ( ) ) ) )  TYPE_5 . METHOD_4 ( VAR_1 , VAR_2 , VAR_5 , ( ! ( VAR_4 . METHOD_5 ( ) ) ) , VAR_3 . METHOD_6 ( ) . METHOD_7 ( ) , ( VAR_4 . METHOD_5 ( ) ? null : VAR_4 . METHOD_6 ( ) . METHOD_7 ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME x ) NAME x ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME info ) NAME info ( INIT = METHOD_2 ( x ) ) INIT = METHOD_2 ( x ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME type ) NAME type ( INIT = METHOD_3 ( ) . get ( VAR_2 ) ) INIT = METHOD_3 ( ) . get ( VAR_2 ) ) VAR VAR (  METHOD_4 ( new TYPE_5 ( info , type , VAR_3 ) ) )  METHOD_4 ( new TYPE_5 ( info , type , VAR_3 ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Throwable ) TYPE java.lang.Throwable ( NAME e ) NAME e ( BLOCK BLOCK (  throw METHOD_5 ( x , e ) ; )  throw METHOD_5 ( x , e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE float ) TYPE float ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE float ) TYPE float ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_6 . METHOD_2 ( VAR_1 ) ) INIT = VAR_6 . METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_5 == null ) COND VAR_5 == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_7 ) NAME VAR_7 ( INIT = VAR_6 . METHOD_2 ( VAR_4 ) ) INIT = VAR_6 . METHOD_2 ( VAR_4 ) ) VAR VAR (  VAR_5 . offset ( VAR_2 , VAR_3 , VAR_7 ) )  VAR_5 . offset ( VAR_2 , VAR_3 , VAR_7 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME key ) NAME key ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  return ( VAR_2 . METHOD_2 ( VAR_1 , key , ( - 1 ) ) ) == ( VAR_3 ) ; )  return ( VAR_2 . METHOD_2 ( VAR_1 , key , ( - 1 ) ) ) == ( VAR_3 ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME e ) NAME e ( BLOCK BLOCK (  android.util.Log.w ( VAR_4 . TAG , STRING_1 , e ) )  android.util.Log.w ( VAR_4 . TAG , STRING_1 , e ) (  return false ; )  return false ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME v ) NAME v ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME id ) NAME id ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map ) TYPE java.util.Map ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( ( java.util.Map ) ( VAR_1 . METHOD_2 ( VAR_2 ) ) ) ) INIT = ( ( java.util.Map ) ( VAR_1 . METHOD_2 ( VAR_2 ) ) ) ) VAR VAR ( VAR VAR ( TYPE android.content.Intent ) TYPE android.content.Intent ( NAME VAR_4 ) NAME VAR_4 ( INIT = ( ( android.content.Intent ) ( VAR_3 . get ( STRING_1 ) ) ) ) INIT = ( ( android.content.Intent ) ( VAR_3 . get ( STRING_1 ) ) ) ) VAR VAR (  METHOD_3 ( VAR_4 ) )  METHOD_3 ( VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_5 . METHOD_2 ( VAR_1 ) ) INIT = VAR_5 . METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_4 == null ) COND VAR_4 == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_6 ) NAME VAR_6 ( INIT = VAR_5 . METHOD_2 ( VAR_2 ) ) INIT = VAR_5 . METHOD_2 ( VAR_2 ) ) VAR VAR ( IF IF ( COND VAR_6 == null ) COND VAR_6 == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( IF IF ( COND VAR_3 != null ) COND VAR_3 != null ( THEN THEN (  VAR_7 . append ( VAR_8 . METHOD_3 ( VAR_3 ) , false ) )  VAR_7 . append ( VAR_8 . METHOD_3 ( VAR_3 ) , false ) ) THEN THEN ( ELSE ELSE (  VAR_7 . append ( VAR_8 , false ) )  VAR_7 . append ( VAR_8 , false ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( ) ) INIT = TYPE_2 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3<java.lang.String,TYPE_4> ) TYPE TYPE_3<java.lang.String,TYPE_4> ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_3 ( ) ) INIT = VAR_1 . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_4> ) TYPE java.util.List<TYPE_4> ( NAME values ) NAME values ( INIT = VAR_2 . get ( STRING_1 ) ) INIT = VAR_2 . get ( STRING_1 ) ) VAR VAR (  assertEquals ( 2 , values . size ( ) ) )  assertEquals ( 2 , values . size ( ) ) ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_3 ) NAME VAR_3 ( INIT = values . get ( 1 ) ) INIT = values . get ( 1 ) ) VAR VAR (  METHOD_4 ( VAR_3 . METHOD_5 ( ) ) )  METHOD_4 ( VAR_3 . METHOD_5 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2.Allocation ) TYPE TYPE_2.Allocation ( NAME in ) NAME in ) VAR VAR ( VAR VAR ( TYPE TYPE_2.Allocation ) TYPE TYPE_2.Allocation ( NAME out ) NAME out ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . METHOD_2 ( VAR_1 ) ) INIT = VAR_3 . METHOD_2 ( VAR_1 ) ) VAR VAR (  VAR_2 . METHOD_3 ( VAR_1 ) )  VAR_2 . METHOD_3 ( VAR_1 ) (  VAR_2 . METHOD_4 ( this ) )  VAR_2 . METHOD_4 ( this ) ( IF IF ( COND VAR_2 . METHOD_5 ( ) ) COND VAR_2 . METHOD_5 ( ) ( THEN THEN (  VAR_2 . METHOD_6 ( in , out ) )  VAR_2 . METHOD_6 ( in , out ) ) THEN THEN ) IF IF (  VAR_2 . METHOD_7 ( ) )  VAR_2 . METHOD_7 ( ) (  VAR_2 . METHOD_4 ( null ) )  VAR_2 . METHOD_4 ( null ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME out ) NAME out ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < ( VAR_2 . size ( ) ) ) COND i < ( VAR_2 . size ( ) ) ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK (  out += java.lang.String.format ( VAR_3 , STRING_2 , VAR_1 [ i ] ) )  out += java.lang.String.format ( VAR_3 , STRING_2 , VAR_1 [ i ] ) ) BLOCK BLOCK ) FOR FOR (  return out ; )  return out ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  this . VAR_1 = VAR_1 )  this . VAR_1 = VAR_1 (  this . VAR_2 = VAR_2 )  this . VAR_2 = VAR_2 ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( ( TYPE_2 ) ( VAR_4 . get ( TYPE_3 . METHOD_2 ( VAR_1 ) ) ) ) ) INIT = ( ( TYPE_2 ) ( VAR_4 . get ( TYPE_3 . METHOD_2 ( VAR_1 ) ) ) ) ) VAR VAR ( IF IF ( COND VAR_3 == null ) COND VAR_3 == null ( THEN THEN (  throw new TYPE_4 ( STRING_1 ) ; )  throw new TYPE_4 ( STRING_1 ) ; ) THEN THEN ) IF IF ( TRY TRY ( BLOCK BLOCK (  METHOD_1 ( VAR_3 , VAR_2 ) )  METHOD_1 ( VAR_3 , VAR_2 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_4 ( STRING_2 ) ; )  throw new TYPE_4 ( STRING_2 ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME os ) NAME os ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( os ) ) INIT = METHOD_2 ( os ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_4 ( VAR_2 , new TYPE_5 ( VAR_2 ) ) ) INIT = new TYPE_4 ( VAR_2 , new TYPE_5 ( VAR_2 ) ) ) VAR VAR (  VAR_3 . METHOD_3 ( VAR_1 ) )  VAR_3 . METHOD_3 ( VAR_1 ) (  VAR_2 . METHOD_4 ( ) )  VAR_2 . METHOD_4 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  android.util.Log.d ( VAR_2 . TAG , STRING_1 ) )  android.util.Log.d ( VAR_2 . TAG , STRING_1 ) ) THEN THEN ) IF IF (  METHOD_2 ( ) )  METHOD_2 ( ) ( IF IF ( COND ( VAR_3 ) != null ) COND ( VAR_3 ) != null ( THEN THEN (  VAR_3 . METHOD_1 ( ) )  VAR_3 . METHOD_1 ( ) ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_4 ) != null ) COND ( VAR_4 ) != null ( THEN THEN (  VAR_4 . METHOD_1 ( ) )  VAR_4 . METHOD_1 ( ) ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_5 ) != null ) COND ( VAR_5 ) != null ( THEN THEN (  VAR_5 . METHOD_1 ( ) )  VAR_5 . METHOD_1 ( ) ) THEN THEN ) IF IF (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME equals ) NAME equals ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME obj ) NAME obj ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( super . equals ( obj ) ) ) COND ! ( super . equals ( obj ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_1 ) ( obj ) ) ) INIT = ( ( TYPE_1 ) ( obj ) ) ) VAR VAR (  return ( VAR_2 . equals ( VAR_3 ) ) && ( VAR_4 . equals ( VAR_5 ) ) ; )  return ( VAR_2 . equals ( VAR_3 ) ) && ( VAR_4 . equals ( VAR_5 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME packageName ) NAME packageName ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  VAR_3 )  VAR_3 ( BLOCK BLOCK ( IF IF ( COND ( VAR_3 . size ( ) ) > ( VAR_4 ) ) COND ( VAR_3 . size ( ) ) > ( VAR_4 ) ( THEN THEN (  VAR_3 . METHOD_2 ( ) )  VAR_3 . METHOD_2 ( ) ) THEN THEN ) IF IF (  VAR_3 . METHOD_3 ( new TYPE_1 ( VAR_1 , packageName , VAR_2 , TYPE_2 . METHOD_4 ( ) ) ) )  VAR_3 . METHOD_3 ( new TYPE_1 ( VAR_1 , packageName , VAR_2 , TYPE_2 . METHOD_4 ( ) ) ) ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ( VAR VAR ( TYPE int ) TYPE int ( NAME state ) NAME state ( INIT = ( VAR_2 ) ? VAR_5 : VAR_6 ) INIT = ( VAR_2 ) ? VAR_5 : VAR_6 ) VAR VAR (  TYPE_3 . METHOD_5 ( VAR_7 , TYPE_4 . METHOD_6 ( ) , null , state , VAR_1 , packageName ) )  TYPE_3 . METHOD_5 ( VAR_7 , TYPE_4 . METHOD_6 ( ) , null , state , VAR_1 , packageName ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( PARAMS PARAMS ( VAR VAR ( TYPE com.android.jack.ir.ast.JMethod ) TYPE com.android.jack.ir.ast.JMethod ( NAME method ) NAME method ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( ( method . METHOD_1 ( ) . METHOD_2 ( ) ) || ( method . METHOD_3 ( ) ) ) || ( method . METHOD_4 ( ) ) ) || ( ! ( VAR_1 . METHOD_5 ( this . METHOD_6 ( ) , method ) ) ) ) COND ( ( ( method . METHOD_1 ( ) . METHOD_2 ( ) ) || ( method . METHOD_3 ( ) ) ) || ( method . METHOD_4 ( ) ) ) || ( ! ( VAR_1 . METHOD_5 ( this . METHOD_6 ( ) , method ) ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME request ) NAME request ( INIT = new TYPE_1 ( method ) ) INIT = new TYPE_1 ( method ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 ( request ) ) INIT = new TYPE_2 ( request ) ) VAR VAR (  VAR_2 . METHOD_5 ( method ) )  VAR_2 . METHOD_5 ( method ) (  request . METHOD_7 ( ) )  request . METHOD_7 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME state ) NAME state ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME address ) NAME address ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME event ) NAME event ( INIT = new TYPE_1 ( VAR_1 ) ) INIT = new TYPE_1 ( VAR_1 ) ) VAR VAR (  VAR_2 = state )  VAR_2 = state (  event . device = METHOD_2 ( address ) )  event . device = METHOD_2 ( address ) ( IF IF ( COND VAR_3 ) COND VAR_3 ( THEN THEN (  android.util.Log.d ( VAR_4 . TAG , ( STRING_1 + event ) ) )  android.util.Log.d ( VAR_4 . TAG , ( STRING_1 + event ) ) ) THEN THEN ) IF IF (  METHOD_3 ( event ) )  METHOD_3 ( event ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME x ) NAME x ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME info ) NAME info ( INIT = METHOD_2 ( x ) ) INIT = METHOD_2 ( x ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_3 ( VAR_3 ) ) INIT = METHOD_3 ( VAR_3 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME action ) NAME action ( INIT = METHOD_3 ( x . action ) ) INIT = METHOD_3 ( x . action ) ) VAR VAR ( IF IF ( COND action == null ) COND action == null ( THEN THEN (  action = new TYPE_6 ( info ) )  action = new TYPE_6 ( info ) ) THEN THEN ) IF IF (  METHOD_4 ( new TYPE_7 ( info , VAR_2 , action ) ) )  METHOD_4 ( new TYPE_7 ( info , VAR_2 , action ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Throwable ) TYPE java.lang.Throwable ( NAME e ) NAME e ( BLOCK BLOCK (  throw METHOD_5 ( x , e ) ; )  throw METHOD_5 ( x , e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public final ) MODIFIER public final ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_2 ( ) ) INIT = TYPE_2 . METHOD_2 ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  this )  this ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_4 . METHOD_3 ( VAR_1 ) ) INIT = TYPE_4 . METHOD_3 ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_3 != null ) COND VAR_3 != null ( THEN THEN (  VAR_3 . METHOD_1 ( VAR_1 ) )  VAR_3 . METHOD_1 ( VAR_1 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ( FINALLY FINALLY (  TYPE_2 . METHOD_4 ( VAR_2 ) )  TYPE_2 . METHOD_4 ( VAR_2 ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1[] ) TYPE TYPE_1[] ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_3 . METHOD_2 ( VAR_1 ) . METHOD_3 ( ) ) INIT = TYPE_3 . METHOD_2 ( VAR_1 ) . METHOD_3 ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK ( IF IF ( COND ( VAR_3 . METHOD_4 ( VAR_4 ) ) != null ) COND ( VAR_3 . METHOD_4 ( VAR_4 ) ) != null ( THEN THEN (  return VAR_3 ; )  return VAR_3 ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ( IF IF ( COND ( VAR_2 . length ) > 0 ) COND ( VAR_2 . length ) > 0 ( THEN THEN (  return VAR_2 [ 0 ] ; )  return VAR_2 [ 0 ] ; ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_2 ( ) ) INIT = VAR_2 . METHOD_2 ( ) ) VAR VAR (  VAR_2 . METHOD_3 ( false ) )  VAR_2 . METHOD_3 ( false ) ( TRY TRY ( BLOCK BLOCK (  VAR_1 . METHOD_4 ( ) )  VAR_1 . METHOD_4 ( ) (  fail ( STRING_1 ) )  fail ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  VAR_2 . METHOD_5 ( ) )  VAR_2 . METHOD_5 ( ) ( TRY TRY ( BLOCK BLOCK (  VAR_1 . METHOD_4 ( ) )  VAR_1 . METHOD_4 ( ) (  fail ( STRING_1 ) )  fail ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME error ) NAME error ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  METHOD_2 ( ) )  METHOD_2 ( ) ) THEN THEN ) IF IF ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  android.util.Log.d ( VAR_3 , ( ( ( STRING_1 + ( VAR_1 . METHOD_3 ( ) ) ) + STRING_2 ) + error ) ) )  android.util.Log.d ( VAR_3 , ( ( ( STRING_1 + ( VAR_1 . METHOD_3 ( ) ) ) + STRING_2 ) + error ) ) ) THEN THEN ) IF IF ( IF IF ( COND VAR_4 ) COND VAR_4 ( THEN THEN (  METHOD_4 ( error ) )  METHOD_4 ( error ) ) THEN THEN ) IF IF (  VAR_1 . METHOD_5 ( false ) )  VAR_1 . METHOD_5 ( false ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN com.android.jack.ir.ast.JDefinedClassOrInterface ) RETURN com.android.jack.ir.ast.JDefinedClassOrInterface ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.android.jack.ir.ast.JDefinedClassOrInterface ) TYPE com.android.jack.ir.ast.JDefinedClassOrInterface ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_1 ) ( VAR_3 ) ) ) INIT = ( ( TYPE_1 ) ( VAR_3 ) ) ) VAR VAR ( WHILE WHILE ( COND ! ( TYPE_2 . METHOD_2 ( ( ( TYPE_1 ) ( VAR_1 ) ) , VAR_2 ) ) ) COND ! ( TYPE_2 . METHOD_2 ( ( ( TYPE_1 ) ( VAR_1 ) ) , VAR_2 ) ) ( BLOCK BLOCK (  VAR_2 = ( ( TYPE_1 ) ( VAR_2 . METHOD_3 ( ) ) ) )  VAR_2 = ( ( TYPE_1 ) ( VAR_2 . METHOD_3 ( ) ) ) ) BLOCK BLOCK ) WHILE WHILE (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ( IN VAR_2 . METHOD_2 ( ) ) IN VAR_2 . METHOD_2 ( ) ( BLOCK BLOCK ( IF IF ( COND VAR_2 . get ( name ) . METHOD_3 ( ) . equals ( VAR_1 ) ) COND VAR_2 . get ( name ) . METHOD_3 ( ) . equals ( VAR_1 ) ( THEN THEN (  return name ; )  return name ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( STRING_1 ) )  TYPE_1 . METHOD_2 ( STRING_1 ) ( IF IF ( COND ( VAR_1 ) != null ) COND ( VAR_1 ) != null ( THEN THEN (  VAR_1 . METHOD_3 ( ) )  VAR_1 . METHOD_3 ( ) ) THEN THEN ) IF IF ( IF IF ( COND ( ( VAR_2 ) != null ) && ( ! ( VAR_3 ) ) ) COND ( ( VAR_2 ) != null ) && ( ! ( VAR_3 ) ) ( THEN THEN (  TYPE_2 . METHOD_4 ( TYPE_3 . METHOD_5 ( context , VAR_2 ) , new TYPE_4 ( ) , TYPE_5 . METHOD_6 ( ) ) )  TYPE_2 . METHOD_4 ( TYPE_3 . METHOD_5 ( context , VAR_2 ) , new TYPE_4 ( ) , TYPE_5 . METHOD_6 ( ) ) ) THEN THEN ) IF IF (  VAR_3 = true )  VAR_3 = true ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_4 ( ) ) )  TYPE_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_4 ( ) ) (  VAR_1 . METHOD_5 ( TYPE_1 . METHOD_4 ( ) ) )  VAR_1 . METHOD_5 ( TYPE_1 . METHOD_4 ( ) ) (  TYPE_1 . METHOD_2 ( TYPE_1 . METHOD_6 ( ) , TYPE_1 . METHOD_7 ( ) ) )  TYPE_1 . METHOD_2 ( TYPE_1 . METHOD_6 ( ) , TYPE_1 . METHOD_7 ( ) ) (  VAR_1 . METHOD_5 ( TYPE_1 . METHOD_7 ( ) ) )  VAR_1 . METHOD_5 ( TYPE_1 . METHOD_7 ( ) ) (  METHOD_8 ( ) )  METHOD_8 ( ) (  METHOD_9 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_4 ( ) ) )  METHOD_9 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_4 ( ) ) (  METHOD_9 ( TYPE_1 . METHOD_6 ( ) , TYPE_1 . METHOD_7 ( ) ) )  METHOD_9 ( TYPE_1 . METHOD_6 ( ) , TYPE_1 . METHOD_7 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME context ) NAME context ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = callback . METHOD_2 ( ) ) INIT = callback . METHOD_2 ( ) ) VAR VAR (  TYPE_2 . METHOD_3 ( ( VAR_1 != ( VAR_2 ) ) ) )  TYPE_2 . METHOD_3 ( ( VAR_1 != ( VAR_2 ) ) ) (  TYPE_3 . i ( STRING_1 , ( STRING_2 + VAR_1 ) ) )  TYPE_3 . i ( STRING_1 , ( STRING_2 + VAR_1 ) ) (  call . METHOD_4 ( ) . METHOD_5 ( new TYPE_4 ( VAR_1 ) ) )  call . METHOD_4 ( ) . METHOD_5 ( new TYPE_4 ( VAR_1 ) ) (  METHOD_6 ( VAR_3 ) )  METHOD_6 ( VAR_3 ) (  listener . METHOD_7 ( false ) )  listener . METHOD_7 ( false ) (  VAR_4 . METHOD_8 ( VAR_5 ) )  VAR_4 . METHOD_8 ( VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME item ) NAME item ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_1 ) ) COND ! ( VAR_1 ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ( SWITCH SWITCH ( NAME item . METHOD_2 ( ) ) NAME item . METHOD_2 ( ) ( CASE VAR_2 ( BLOCK BLOCK (  METHOD_3 ( ) )  METHOD_3 ( ) (  VAR_1 = false )  VAR_1 = false (  METHOD_4 ( VAR_3 ) )  METHOD_4 ( VAR_3 ) (  METHOD_3 ( ) )  METHOD_3 ( ) (  METHOD_5 ( ) )  METHOD_5 ( ) (  return true ; )  return true ; ) BLOCK BLOCK ) CASE VAR_2 ( DEFAULT DEFAULT ( BLOCK BLOCK (  break ; )  break ; ) BLOCK BLOCK ) DEFAULT DEFAULT ) SWITCH SWITCH (  return super . METHOD_1 ( item ) ; )  return super . METHOD_1 ( item ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME log ) NAME log ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Throwable ) TYPE java.lang.Throwable ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME format ) NAME format ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME args ) NAME args ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN (  VAR_1 . METHOD_1 ( ) )  VAR_1 . METHOD_1 ( ) ) THEN THEN ) IF IF ( VAR VAR ( TYPE java.lang.StringBuilder ) TYPE java.lang.StringBuilder ( NAME sb ) NAME sb ( INIT = new java.lang.StringBuilder ( ) ) INIT = new java.lang.StringBuilder ( ) ) VAR VAR ( IF IF ( COND format != null ) COND format != null ( THEN THEN (  sb.append ( java.lang.String.format ( format , args ) ) )  sb.append ( java.lang.String.format ( format , args ) ) ) THEN THEN ) IF IF ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN (  sb.append ( VAR_1 . toString ( ) ) )  sb.append ( VAR_1 . toString ( ) ) ) THEN THEN ) IF IF (  VAR_2 . println ( sb ) )  VAR_2 . println ( sb ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private final ) MODIFIER private final ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( TYPE_2 . METHOD_2 ( ) ) ) INIT = new TYPE_1 ( TYPE_2 . METHOD_2 ( ) ) ) VAR VAR ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  METHOD_3 ( ) )  METHOD_3 ( ) (  VAR_3 = TYPE_2 . METHOD_4 ( VAR_1 , VAR_4 , key . METHOD_5 ( ) ) )  VAR_3 = TYPE_2 . METHOD_4 ( VAR_1 , VAR_4 , key . METHOD_5 ( ) ) ) THEN THEN ( ELSE ELSE (  VAR_3 = TYPE_2 . METHOD_6 ( VAR_1 , VAR_4 , key . METHOD_5 ( ) ) )  VAR_3 = TYPE_2 . METHOD_6 ( VAR_1 , VAR_4 , key . METHOD_5 ( ) ) ) ELSE ELSE ) IF IF (  METHOD_7 ( VAR_3 ) )  METHOD_7 ( VAR_3 ) (  this . VAR_5 = VAR_1 )  this . VAR_5 = VAR_1 ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  new TYPE_1 ( STRING_1 , new java.lang.String [ ] { STRING_2 , STRING_3 } ) )  new TYPE_1 ( STRING_1 , new java.lang.String [ ] { STRING_2 , STRING_3 } ) (  fail ( STRING_4 ) )  fail ( STRING_4 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ( TRY TRY ( BLOCK BLOCK (  new TYPE_1 ( STRING_1 , new java.lang.String [ ] { STRING_2 , STRING_5 } ) )  new TYPE_1 ( STRING_1 , new java.lang.String [ ] { STRING_2 , STRING_5 } ) (  fail ( STRING_4 ) )  fail ( STRING_4 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . get ( VAR_1 ) ) INIT = VAR_3 . get ( VAR_1 ) ) VAR VAR (  TYPE_2 . METHOD_2 ( FLOAT_1 ) )  TYPE_2 . METHOD_2 ( FLOAT_1 ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR (  VAR_2 = VAR_3 . get ( TYPE_5 . METHOD_3 ( VAR_1 ) ) )  VAR_2 = VAR_3 . get ( TYPE_5 . METHOD_3 ( VAR_1 ) ) ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_6 ) NAME VAR_6 ( IN VAR_3 . values ( ) ) IN VAR_3 . values ( ) ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_7 ) NAME VAR_7 ( IN VAR_6 . METHOD_4 ( ) ) IN VAR_6 . METHOD_4 ( ) ( BLOCK BLOCK ( IF IF ( COND VAR_1 . equals ( VAR_7 ) ) COND VAR_1 . equals ( VAR_7 ) ( THEN THEN (  return VAR_6 ; )  return VAR_6 ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  TYPE_2 . METHOD_5 ( FLOAT_2 ) )  TYPE_2 . METHOD_5 ( FLOAT_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME log ) NAME log ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( IN VAR_3 ) IN VAR_3 ( BLOCK BLOCK ( SWITCH SWITCH ( NAME VAR_4 ) NAME VAR_4 ( CASE VAR_5 ( BLOCK BLOCK (  VAR_1 . METHOD_1 ( VAR_6 ) )  VAR_1 . METHOD_1 ( VAR_6 ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_5 ( CASE VAR_7 ( BLOCK BLOCK (  VAR_1 . error ( null , VAR_6 ) )  VAR_1 . error ( null , VAR_6 ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_7 ( CASE VAR_8 ( BLOCK BLOCK (  VAR_1 . info ( VAR_6 ) )  VAR_1 . info ( VAR_6 ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_8 ( DEFAULT DEFAULT ( BLOCK BLOCK (  VAR_1 . error ( null , ( STRING_1 + ( VAR_4 ) ) ) )  VAR_1 . error ( null , ( STRING_1 + ( VAR_4 ) ) ) ) BLOCK BLOCK ) DEFAULT DEFAULT ) SWITCH SWITCH ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  VAR_9 . log ( VAR_1 ) )  VAR_9 . log ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private synchronized ) MODIFIER private synchronized ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME packageName ) NAME packageName ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME response ) NAME response ( INIT = false ) INIT = false ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = 0 ) INIT = 0 ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME info ) NAME info ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK ( IF IF ( COND VAR_3 . equals ( packageName ) ) COND VAR_3 . equals ( packageName ) ( THEN THEN (  response = true )  response = true (  break ; )  break ; ) THEN THEN ) IF IF (  VAR_1 ++ )  VAR_1 ++ ) BLOCK BLOCK ) FOR-EACH FOR-EACH ( IF IF ( COND ! response ) COND ! response ( THEN THEN (  VAR_1 = - 1 )  VAR_1 = - 1 ) THEN THEN ) IF IF ( IF IF ( COND VAR_4 ) COND VAR_4 ( THEN THEN (  android.util.Log.d ( VAR_5 . TAG , ( ( ( STRING_1 + packageName ) + STRING_2 ) + VAR_1 ) ) )  android.util.Log.d ( VAR_5 . TAG , ( ( ( STRING_1 + packageName ) + STRING_2 ) + VAR_1 ) ) ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( null == VAR_1 ) || ( VAR_1 . equals ( STRING_1 ) ) ) COND ( null == VAR_1 ) || ( VAR_1 . equals ( STRING_1 ) ) ( THEN THEN (  throw new java.lang.IllegalArgumentException ( ( ( STRING_2 + VAR_1 ) + STRING_3 ) ) ; )  throw new java.lang.IllegalArgumentException ( ( ( STRING_2 + VAR_1 ) + STRING_3 ) ) ; ) THEN THEN ( ELSE ELSE ( IF IF ( COND ( METHOD_2 ( ) ) == ( VAR_2 ) ) COND ( METHOD_2 ( ) ) == ( VAR_2 ) ( THEN THEN (  throw new TYPE_1 ( STRING_4 ) ; )  throw new TYPE_1 ( STRING_4 ) ; ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF (  METHOD_3 ( VAR_3 , VAR_1 ) )  METHOD_3 ( VAR_3 , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . METHOD_2 ( ) . METHOD_3 ( TYPE_5 ) ) INIT = VAR_1 . METHOD_2 ( ) . METHOD_3 ( TYPE_5 ) ) VAR VAR (  VAR_2 . METHOD_4 ( VAR_3 . METHOD_5 ( ) ) )  VAR_2 . METHOD_4 ( VAR_3 . METHOD_5 ( ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_4 . log ( VAR_5 , ( ( ( STRING_1 + ( TYPE_5 . METHOD_6 ( CHAR_1 ) ) ) + STRING_2 ) + VAR_1 ) , e ) )  VAR_4 . log ( VAR_5 , ( ( ( STRING_1 + ( TYPE_5 . METHOD_6 ( CHAR_1 ) ) ) + STRING_2 ) + VAR_1 ) , e ) (  throw new TYPE_3 ( VAR_1 . METHOD_7 ( ) ) ; )  throw new TYPE_3 ( VAR_1 . METHOD_7 ( ) ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER synchronized ) MODIFIER synchronized ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME w ) NAME w ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME h ) NAME h ) VAR VAR ( VAR VAR ( TYPE float[] ) TYPE float[] ( NAME d ) NAME d ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  METHOD_3 ( mContext , id , VAR_1 , VAR_2 , VAR_3 , VAR_4 , w , h , d , VAR_5 ) )  METHOD_3 ( mContext , id , VAR_1 , VAR_2 , VAR_3 , VAR_4 , w , h , d , VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME context ) NAME context ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME n ) NAME n ( INIT = name . length ( ) ) INIT = name . length ( ) ) VAR VAR ) INIT INIT ( COND i < n ) COND i < n ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK ( VAR VAR ( TYPE char ) TYPE char ( NAME c ) NAME c ( INIT = name . METHOD_3 ( i ) ) INIT = name . METHOD_3 ( i ) ) VAR VAR ( IF IF ( COND c == CHAR_1 ) COND c == CHAR_1 ( THEN THEN ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME location ) NAME location ( INIT = context . METHOD_4 ( VAR_1 ) ) INIT = context . METHOD_4 ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR (  context . METHOD_5 ( VAR_3 , null , location , VAR_2 , null ) )  context . METHOD_5 ( VAR_3 , null , location , VAR_2 , null ) (  break ; )  break ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR FOR ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME method ) NAME method ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME type ) NAME type ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_4 ) COND VAR_4 ( THEN THEN ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME value ) NAME value ( INIT = TYPE_4 . METHOD_1 ( method , VAR_2 ) ) INIT = TYPE_4 . METHOD_1 ( method , VAR_2 ) ) VAR VAR ( IF IF ( COND ( value != null ) && ( value . METHOD_2 ( ) ) ) COND ( value != null ) && ( value . METHOD_2 ( ) ) ( THEN THEN (  return value ; )  return value ; ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return super . METHOD_1 ( VAR_1 , method , VAR_2 , type , VAR_3 ) ; )  return super . METHOD_1 ( VAR_1 , method , VAR_2 , type , VAR_3 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected final ) MODIFIER protected final ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( IF IF ( COND VAR_1 . METHOD_2 ( ) ) COND VAR_1 . METHOD_2 ( ) ( THEN THEN (  VAR_1 . METHOD_3 ( VAR_2 , true , VAR_3 ) )  VAR_1 . METHOD_3 ( VAR_2 , true , VAR_3 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME msg ) NAME msg ( INIT = java.lang.String.format ( VAR_5 , VAR_2 , VAR_1 . toString ( ) ) ) INIT = java.lang.String.format ( VAR_5 , VAR_2 , VAR_1 . toString ( ) ) ) VAR VAR (  TYPE_3 . METHOD_4 ( METHOD_5 ( ) , msg ) )  TYPE_3 . METHOD_4 ( METHOD_5 ( ) , msg ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME status ) NAME status ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  VAR_3 )  VAR_3 ( BLOCK BLOCK ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME i ) NAME i ( INIT = VAR_4 . METHOD_2 ( ) ) INIT = VAR_4 . METHOD_2 ( ) ) VAR VAR ) INIT INIT ( COND i . METHOD_3 ( ) ) COND i . METHOD_3 ( ) ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_5 ) NAME VAR_5 ( INIT = i . METHOD_4 ( ) ) INIT = i . METHOD_4 ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_5 . METHOD_5 ( VAR_1 , VAR_2 , status ) )  VAR_5 . METHOD_5 ( VAR_1 , VAR_2 , status ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME e ) NAME e ( BLOCK BLOCK (  android.util.Log.w ( VAR_6 , ( ( STRING_1 + STRING_2 ) + ( e.getMessage ( ) ) ) ) )  android.util.Log.w ( VAR_6 , ( ( STRING_1 + STRING_2 ) + ( e.getMessage ( ) ) ) ) (  i . METHOD_6 ( ) )  i . METHOD_6 ( ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) FOR FOR ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( STRING_1 ) )  METHOD_2 ( STRING_1 ) ( TRY TRY ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_2 . METHOD_3 ( VAR_1 ) ) ) COND ! ( VAR_2 . METHOD_3 ( VAR_1 ) ) ( THEN THEN (  throw new TYPE_3 ( STRING_2 ) ; )  throw new TYPE_3 ( STRING_2 ) ; ) THEN THEN ) IF IF (  return new TYPE_1 ( mContext , true ) ; )  return new TYPE_1 ( mContext , true ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME e ) NAME e ( BLOCK BLOCK (  throw e . METHOD_4 ( ) ; )  throw e . METHOD_4 ( ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( ) ) INIT = TYPE_2 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_3 ( ) ) INIT = new TYPE_3 ( ) ) VAR VAR ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_2 . METHOD_3 ( ) ) INIT = TYPE_2 . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_4 ( STRING_1 ) ) INIT = new TYPE_4 ( STRING_1 ) ) VAR VAR (  VAR_4 . METHOD_4 ( VAR_3 ) )  VAR_4 . METHOD_4 ( VAR_3 ) (  VAR_4 . METHOD_5 ( VAR_2 ) )  VAR_4 . METHOD_5 ( VAR_2 ) (  METHOD_6 ( VAR_1 , VAR_4 , false ) )  METHOD_6 ( VAR_1 , VAR_4 , false ) (  METHOD_7 ( VAR_2 ) )  METHOD_7 ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME version ) NAME version ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME d ) NAME d ( INIT = TYPE_5 . METHOD_2 ( version , VAR_2 , VAR_3 , VAR_4 , VAR_1 ) . METHOD_3 ( ) ) INIT = TYPE_5 . METHOD_2 ( version , VAR_2 , VAR_3 , VAR_4 , VAR_1 ) . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME r ) NAME r ( INIT = new TYPE_6 ( d , VAR_5 ) ) INIT = new TYPE_6 ( d , VAR_5 ) ) VAR VAR (  VAR_6 . METHOD_4 ( d . METHOD_5 ( ) , r ) )  VAR_6 . METHOD_4 ( d . METHOD_5 ( ) , r ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER synchronized ) MODIFIER synchronized ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_6 ) NAME VAR_6 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_7 ) NAME VAR_7 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_8 ) NAME VAR_8 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_9 ) NAME VAR_9 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_10 ) NAME VAR_10 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_11 ) NAME VAR_11 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_12 ) NAME VAR_12 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  METHOD_3 ( mContext , VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 , VAR_8 , VAR_9 , VAR_10 , VAR_11 , VAR_12 ) )  METHOD_3 ( mContext , VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 , VAR_8 , VAR_9 , VAR_10 , VAR_11 , VAR_12 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME key ) NAME key ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME value ) NAME value ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND key . METHOD_2 ( STRING_1 ) ) COND key . METHOD_2 ( STRING_1 ) ( THEN THEN ) THEN THEN ( ELSE ELSE ( IF IF ( COND key . METHOD_2 ( STRING_2 ) ) COND key . METHOD_2 ( STRING_2 ) ( THEN THEN (  VAR_1 . METHOD_3 ( VAR_2 , VAR_3 , value ) )  VAR_1 . METHOD_3 ( VAR_2 , VAR_3 , value ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND ! ( VAR_4 ) ) COND ! ( VAR_4 ) ( THEN THEN (  VAR_5 . METHOD_4 ( key . toString ( ) , value . METHOD_5 ( ) ) )  VAR_5 . METHOD_4 ( key . toString ( ) , value . METHOD_5 ( ) ) ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME context ) NAME context ) VAR VAR ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = context . METHOD_2 ( ) . METHOD_3 ( ) ) INIT = context . METHOD_2 ( ) . METHOD_3 ( ) ) VAR VAR ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_2 . METHOD_4 ( ) . values ( ) ) IN VAR_2 . METHOD_4 ( ) . values ( ) ( BLOCK BLOCK ( IF IF ( COND VAR_3 . METHOD_5 ( ) . METHOD_6 ( ) ) COND VAR_3 . METHOD_5 ( ) . METHOD_6 ( ) ( THEN THEN ( IF IF ( COND VAR_1 . equals ( VAR_3 . METHOD_7 ( ) . METHOD_8 ( ) ) ) COND VAR_1 . equals ( VAR_3 . METHOD_7 ( ) . METHOD_8 ( ) ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( VAR_2 , VAR_3 ) )  VAR_1 . METHOD_2 ( VAR_2 , VAR_3 ) (  VAR_4 . METHOD_3 ( VAR_5 ) )  VAR_4 . METHOD_3 ( VAR_5 ) (  VAR_4 . METHOD_4 ( VAR_6 ) )  VAR_4 . METHOD_4 ( VAR_6 ) (  VAR_4 . METHOD_5 ( ) )  VAR_4 . METHOD_5 ( ) (  VAR_4 . METHOD_6 ( ) )  VAR_4 . METHOD_6 ( ) (  VAR_4 . METHOD_7 ( ) )  VAR_4 . METHOD_7 ( ) (  VAR_1 . METHOD_8 ( VAR_2 , ( ( VAR_3 ) + 1 ) ) )  VAR_1 . METHOD_8 ( VAR_2 , ( ( VAR_3 ) + 1 ) ) (  VAR_4 . METHOD_9 ( ) )  VAR_4 . METHOD_9 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR (  TYPE_1 . when ( VAR_2 . METHOD_2 ( ) ) . thenReturn ( VAR_1 ) )  TYPE_1 . when ( VAR_2 . METHOD_2 ( ) ) . thenReturn ( VAR_1 ) (  METHOD_3 ( false , false , false ) )  METHOD_3 ( false , false , false ) (  assertTrue ( ( ( VAR_3 . METHOD_4 ( ) ) == null ) ) )  assertTrue ( ( ( VAR_3 . METHOD_4 ( ) ) == null ) ) (  METHOD_5 ( 4 , false , false ) )  METHOD_5 ( 4 , false , false ) (  assertEquals ( VAR_1 , VAR_3 . METHOD_4 ( ) ) )  assertEquals ( VAR_1 , VAR_3 . METHOD_4 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME subId ) NAME subId ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_2 ( subId ) ) INIT = METHOD_2 ( subId ) ) VAR VAR ( IF IF ( COND VAR_3 != null ) COND VAR_3 != null ( THEN THEN ( IF IF ( COND ! ( TYPE_3 . METHOD_3 ( mContext , VAR_2 , STRING_1 ) ) ) COND ! ( TYPE_3 . METHOD_3 ( mContext , VAR_2 , STRING_1 ) ) ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF (  return VAR_3 . METHOD_1 ( VAR_1 ) ; )  return VAR_3 . METHOD_1 ( VAR_1 ) ; ) THEN THEN ( ELSE ELSE (  loge ( ( STRING_2 + subId ) ) )  loge ( ( STRING_2 + subId ) ) (  return null ; )  return null ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME e ) NAME e ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = e . METHOD_2 ( ) ) INIT = e . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND ( ( ( ! ( METHOD_3 ( ) ) ) && ( VAR_1 != null ) ) && ( ( VAR_2 ) <= 0 ) ) && ( ( e . METHOD_4 ( ) . VAR_3 ) > 0 ) ) COND ( ( ( ! ( METHOD_3 ( ) ) ) && ( VAR_1 != null ) ) && ( ( VAR_2 ) <= 0 ) ) && ( ( e . METHOD_4 ( ) . VAR_3 ) > 0 ) ( THEN THEN (  METHOD_5 ( ) )  METHOD_5 ( ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ! ( METHOD_2 ( ) ) ) COND ! ( METHOD_2 ( ) ) ( THEN THEN (  TYPE_1 . METHOD_3 ( TYPE_2 . TAG , STRING_1 ) )  TYPE_1 . METHOD_3 ( TYPE_2 . TAG , STRING_1 ) (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_4 ( VAR_2 ) ) INIT = TYPE_2 . METHOD_4 ( VAR_2 ) ) VAR VAR (  assertTrue ( STRING_2 , VAR_1 ) )  assertTrue ( STRING_2 , VAR_1 ) (  METHOD_5 ( VAR_3 , INT_1 , INT_2 , 4 ) )  METHOD_5 ( VAR_3 , INT_1 , INT_2 , 4 ) (  METHOD_5 ( VAR_4 , INT_3 , INT_4 , 2 ) )  METHOD_5 ( VAR_4 , INT_3 , INT_4 , 2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  Main . METHOD_2 ( ) )  Main . METHOD_2 ( ) (  Main . METHOD_3 ( ) )  Main . METHOD_3 ( ) (  Main . METHOD_4 ( ) )  Main . METHOD_4 ( ) (  Main . METHOD_5 ( ) )  Main . METHOD_5 ( ) (  Main . METHOD_6 ( ) )  Main . METHOD_6 ( ) (  Main . METHOD_7 ( ) )  Main . METHOD_7 ( ) (  Main . METHOD_8 ( ) )  Main . METHOD_8 ( ) (  Main . METHOD_9 ( ) )  Main . METHOD_9 ( ) (  Main . METHOD_10 ( ) )  Main . METHOD_10 ( ) (  VAR_1 . println ( STRING_1 ) )  VAR_1 . println ( STRING_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER final ) MODIFIER final ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 != 0 ) COND VAR_1 != 0 ( THEN THEN ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( VAR_1 & ( VAR_3 ) ) != 0 ) INIT = ( VAR_1 & ( VAR_3 ) ) != 0 ) VAR VAR ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  TYPE_1 . METHOD_2 ( ) )  TYPE_1 . METHOD_2 ( ) ( IF IF ( COND VAR_4 ) COND VAR_4 ( THEN THEN (  android.util.Slog.v ( VAR_5 . TAG , STRING_1 ) )  android.util.Slog.v ( VAR_5 . TAG , STRING_1 ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE android.content.Intent ) TYPE android.content.Intent ( NAME VAR_2 ) NAME VAR_2 ( INIT = new android.content.Intent ( VAR_3 ) ) INIT = new android.content.Intent ( VAR_3 ) ) VAR VAR (  VAR_2 . METHOD_2 ( VAR_4 , uri ) )  VAR_2 . METHOD_2 ( VAR_4 , uri ) (  VAR_2 . METHOD_3 ( STRING_1 ) )  VAR_2 . METHOD_3 ( STRING_1 ) (  VAR_2 . METHOD_4 ( VAR_5 ) )  VAR_2 . METHOD_4 ( VAR_5 ) (  VAR_2 . METHOD_5 ( VAR_6 , VAR_7 ) )  VAR_2 . METHOD_5 ( VAR_6 , VAR_7 ) ( TRY TRY ( BLOCK BLOCK (  METHOD_6 ( VAR_2 ) )  METHOD_6 ( VAR_2 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME e ) NAME e ( BLOCK BLOCK (  TYPE_3 . METHOD_7 ( this , VAR_8 , VAR_9 ) . METHOD_8 ( ) )  TYPE_3 . METHOD_7 ( this , VAR_8 , VAR_9 ) . METHOD_8 ( ) (  android.util.Log.e ( VAR_10 . TAG , STRING_2 , e ) )  android.util.Log.e ( VAR_10 . TAG , STRING_2 , e ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME element ) NAME element ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND element instanceof TYPE_2 ) COND element instanceof TYPE_2 ( THEN THEN ( IF IF ( COND ( ( ( TYPE_2 ) ( element ) ) . METHOD_2 ( ) ) == ( VAR_2 ) ) COND ( ( ( TYPE_2 ) ( element ) ) . METHOD_2 ( ) ) == ( VAR_2 ) ( THEN THEN (  return VAR_3 ; )  return VAR_3 ; ) THEN THEN ( ELSE ELSE ( IF IF ( COND ( ( ( TYPE_2 ) ( element ) ) . METHOD_2 ( ) ) == ( VAR_4 ) ) COND ( ( ( TYPE_2 ) ( element ) ) . METHOD_2 ( ) ) == ( VAR_4 ) ( THEN THEN (  return VAR_5 ; )  return VAR_5 ; ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ! ( METHOD_2 ( ) ) ) COND ! ( METHOD_2 ( ) ) ( THEN THEN (  TYPE_1 . METHOD_3 ( VAR_1 , STRING_1 ) )  TYPE_1 . METHOD_3 ( VAR_1 , STRING_1 ) (  return ; )  return ; ) THEN THEN ) IF IF (  METHOD_4 ( 0 ) )  METHOD_4 ( 0 ) (  METHOD_5 ( VAR_2 , VAR_3 ) )  METHOD_5 ( VAR_2 , VAR_3 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_6 ( VAR_2 , VAR_3 ) ) INIT = METHOD_6 ( VAR_2 , VAR_3 ) ) VAR VAR (  METHOD_7 ( VAR_4 , VAR_3 ) )  METHOD_7 ( VAR_4 , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( TYPE_1 . METHOD_2 ( VAR_1 ) ) ) COND ! ( TYPE_1 . METHOD_2 ( VAR_1 ) ) ( THEN THEN ( VAR VAR ( TYPE android.content.Intent ) TYPE android.content.Intent ( NAME VAR_2 ) NAME VAR_2 ( INIT = new android.content.Intent ( VAR_3 ) ) INIT = new android.content.Intent ( VAR_3 ) ) VAR VAR (  VAR_2 . METHOD_3 ( VAR_4 , VAR_1 ) )  VAR_2 . METHOD_3 ( VAR_4 , VAR_1 ) ( IF IF ( COND VAR_5 . METHOD_4 ( ) . METHOD_5 ( VAR_2 ) ) COND VAR_5 . METHOD_4 ( ) . METHOD_5 ( VAR_2 ) ( THEN THEN (  log ( ( STRING_1 + VAR_1 ) ) )  log ( ( STRING_1 + VAR_1 ) ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Integer ) TYPE java.lang.Integer ( NAME type ) NAME type ) VAR VAR ( VAR VAR ( TYPE java.lang.Integer ) TYPE java.lang.Integer ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE android.bluetooth.BluetoothDevice ) TYPE android.bluetooth.BluetoothDevice ( NAME device ) NAME device ( INIT = TYPE_2 . METHOD_2 ( VAR_3 . METHOD_3 ( ) , VAR_1 ) ) INIT = TYPE_2 . METHOD_2 ( VAR_3 . METHOD_3 ( ) , VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_2 . METHOD_4 ( ) ) INIT = VAR_2 . METHOD_4 ( ) ) VAR VAR (  return VAR_3 . METHOD_5 ( device , ( ( byte ) ( ( int ) ( type ) ) ) , ( ( byte ) ( ( int ) ( id ) ) ) , VAR_4 ) ; )  return VAR_3 . METHOD_5 ( device , ( ( byte ) ( ( int ) ( type ) ) ) , ( ( byte ) ( ( int ) ( id ) ) ) , VAR_4 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME uid ) NAME uid ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME event ) NAME event ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_3 = VAR_1 )  VAR_3 = VAR_1 (  VAR_4 = VAR_2 )  VAR_4 = VAR_2 (  event . uid = uid )  event . uid = uid (  VAR_5 . append ( event ) )  VAR_5 . append ( event ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_6 ) NAME VAR_6 ( INIT = VAR_7 . get ( VAR_1 ) ) INIT = VAR_7 . get ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_6 == null ) COND VAR_6 == null ( THEN THEN (  VAR_6 = new TYPE_2 ( VAR_1 ) )  VAR_6 = new TYPE_2 ( VAR_1 ) (  VAR_7 . METHOD_2 ( VAR_1 , VAR_6 ) )  VAR_7 . METHOD_2 ( VAR_1 , VAR_6 ) ) THEN THEN ) IF IF (  VAR_6 . METHOD_3 ( event ) )  VAR_6 . METHOD_3 ( event ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( ) ) INIT = TYPE_1 . METHOD_2 ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 ( ( ( int ) ( FLOAT_1 * INT_1 ) ) , STRING_1 ) ) INIT = new TYPE_2 ( ( ( int ) ( FLOAT_1 * INT_1 ) ) , STRING_1 ) ) VAR VAR (  TYPE_1 . METHOD_3 ( VAR_2 ) )  TYPE_1 . METHOD_3 ( VAR_2 ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME f ) NAME f ( INIT = new TYPE_3 ( ) ) INIT = new TYPE_3 ( ) ) VAR VAR ( IF IF ( COND ! ( f . METHOD_4 ( ) . equals ( VAR_2 ) ) ) COND ! ( f . METHOD_4 ( ) . equals ( VAR_2 ) ) ( THEN THEN (  errln ( STRING_2 ) )  errln ( STRING_2 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ( FINALLY FINALLY (  TYPE_1 . METHOD_3 ( VAR_1 ) )  TYPE_1 . METHOD_3 ( VAR_1 ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) == null ) COND ( VAR_1 ) == null ( THEN THEN ( IF IF ( COND ( ! ( METHOD_2 ( ) ) ) && ( ! ( METHOD_3 ( ) ) ) ) COND ( ! ( METHOD_2 ( ) ) ) && ( ! ( METHOD_3 ( ) ) ) ( THEN THEN (  throw new java.lang.IllegalArgumentException ( ( STRING_1 + ( VAR_2 ) ) ) ; )  throw new java.lang.IllegalArgumentException ( ( STRING_1 + ( VAR_2 ) ) ) ; ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_2 . METHOD_4 ( 0 ) ) == CHAR_1 ) COND ( VAR_2 . METHOD_4 ( 0 ) ) == CHAR_1 ( THEN THEN (  VAR_1 = VAR_2 )  VAR_1 = VAR_2 ) THEN THEN ( ELSE ELSE (  VAR_1 = VAR_2 . METHOD_5 ( 1 , ( ( VAR_2 . length ( ) ) - 1 ) ) )  VAR_1 = VAR_2 . METHOD_5 ( 1 , ( ( VAR_2 . length ( ) ) - 1 ) ) ) ELSE ELSE ) IF IF ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( ) ) INIT = TYPE_1 . METHOD_2 ( ) ) VAR VAR (  VAR_2 . METHOD_3 ( STRING_1 , TYPE_2 . METHOD_4 ( ( VAR_1 + ( VAR_3 ) ) ) ) )  VAR_2 . METHOD_3 ( STRING_1 , TYPE_2 . METHOD_4 ( ( VAR_1 + ( VAR_3 ) ) ) ) (  VAR_2 . METHOD_3 ( STRING_2 , TYPE_2 . METHOD_4 ( ( VAR_1 + ( 4 * ( VAR_3 ) ) ) ) ) )  VAR_2 . METHOD_3 ( STRING_2 , TYPE_2 . METHOD_4 ( ( VAR_1 + ( 4 * ( VAR_3 ) ) ) ) ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME entry ) NAME entry ( INIT = TYPE_4 . METHOD_5 ( response ) ) INIT = TYPE_4 . METHOD_5 ( response ) ) VAR VAR (  METHOD_6 ( ( VAR_1 + ( 3 * ( VAR_3 ) ) ) , VAR_4 , VAR_5 ) )  METHOD_6 ( ( VAR_1 + ( 3 * ( VAR_3 ) ) ) , VAR_4 , VAR_5 ) (  assertEquals ( VAR_6 , VAR_4 ) )  assertEquals ( VAR_6 , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  android.util.Log.v ( TAG , ( STRING_1 + ( VAR_3 ) ) ) )  android.util.Log.v ( TAG , ( STRING_1 + ( VAR_3 ) ) ) ) THEN THEN ) IF IF (  VAR_3 = VAR_1 )  VAR_3 = VAR_1 ( IF IF ( COND ( ( VAR_4 ) != null ) && ( ( VAR_4 . METHOD_2 ( ) ) != ( VAR_3 ) ) ) COND ( ( VAR_4 ) != null ) && ( ( VAR_4 . METHOD_2 ( ) ) != ( VAR_3 ) ) ( THEN THEN (  VAR_4 . METHOD_3 ( VAR_3 ) )  VAR_4 . METHOD_3 ( VAR_3 ) ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  android.util.Log.v ( TAG , ( STRING_2 + ( VAR_3 ) ) ) )  android.util.Log.v ( TAG , ( STRING_2 + ( VAR_3 ) ) ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME method ) NAME method ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME offset ) NAME offset ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_4 = METHOD_2 ( offset , VAR_4 ) )  VAR_4 = METHOD_2 ( offset , VAR_4 ) (  VAR_5 . METHOD_1 ( VAR_1 , method , VAR_2 , VAR_6 , VAR_3 ) )  VAR_5 . METHOD_1 ( VAR_1 , method , VAR_2 , VAR_6 , VAR_3 ) (  VAR_6 += VAR_3 . length ( VAR_6 ) )  VAR_6 += VAR_3 . length ( VAR_6 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME context ) NAME context ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( VAR_2 . METHOD_2 ( CHAR_1 ) ) != ( - 1 ) ) && ( ( ( VAR_3 ) & ( VAR_4 ) ) == 0 ) ) COND ( ( VAR_2 . METHOD_2 ( CHAR_1 ) ) != ( - 1 ) ) && ( ( ( VAR_3 ) & ( VAR_4 ) ) == 0 ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( IF IF ( COND TYPE_3 . METHOD_3 ( context , VAR_1 ) ) COND TYPE_3 . METHOD_3 ( context , VAR_1 ) ( THEN THEN (  METHOD_4 ( context , VAR_1 ) )  METHOD_4 ( context , VAR_1 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME userId ) NAME userId ) VAR VAR ( VAR VAR ( TYPE android.os.Bundle ) TYPE android.os.Bundle ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE android.os.Bundle ) TYPE android.os.Bundle ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ! ( VAR_1 . METHOD_2 ( VAR_3 ) ) ) && ( ! ( VAR_2 . METHOD_2 ( VAR_3 ) ) ) ) COND ( ! ( VAR_1 . METHOD_2 ( VAR_3 ) ) ) && ( ! ( VAR_2 . METHOD_2 ( VAR_3 ) ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_1 . METHOD_3 ( VAR_3 ) ) INIT = VAR_1 . METHOD_3 ( VAR_3 ) ) VAR VAR ( IF IF ( COND ( ( VAR_5 ) || ( VAR_6 ) ) && VAR_4 ) COND ( ( VAR_5 ) || ( VAR_6 ) ) && VAR_4 ( THEN THEN ( TRY TRY ( BLOCK BLOCK (  METHOD_4 ( STRING_1 , true ) )  METHOD_4 ( STRING_1 , true ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) THEN THEN ) IF IF (  METHOD_5 ( VAR_4 ) )  METHOD_5 ( VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<java.io.File> ) RETURN java.util.List<java.io.File> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) == null ) COND ( VAR_1 ) == null ( THEN THEN (  VAR_1 = new java.util.ArrayList < java.io.File > ( 1 ) )  VAR_1 = new java.util.ArrayList < java.io.File > ( 1 ) ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . METHOD_2 ( ) . METHOD_3 ( ) ) INIT = VAR_3 . METHOD_2 ( ) . METHOD_3 ( ) ) VAR VAR ( IF IF ( COND ( VAR_2 != null ) && ( VAR_2 . METHOD_4 ( ) ) ) COND ( VAR_2 != null ) && ( VAR_2 . METHOD_4 ( ) ) ( THEN THEN (  VAR_1 . METHOD_5 ( VAR_2 ) )  VAR_1 . METHOD_5 ( VAR_2 ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME in ) NAME in ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_1 = ( ( in . METHOD_2 ( ) ) != 0 ) ? true : false )  VAR_1 = ( ( in . METHOD_2 ( ) ) != 0 ) ? true : false (  VAR_2 = new ArrayList < TYPE_3 > ( ) )  VAR_2 = new ArrayList < TYPE_3 > ( ) (  in . METHOD_3 ( VAR_2 , VAR_3 ) )  in . METHOD_3 ( VAR_2 , VAR_3 ) (  VAR_4 = new ArrayList < TYPE_4 > ( ) )  VAR_4 = new ArrayList < TYPE_4 > ( ) (  in . METHOD_3 ( VAR_4 , VAR_5 ) )  in . METHOD_3 ( VAR_4 , VAR_5 ) ( IF IF ( COND ( in . METHOD_4 ( ) ) != 0 ) COND ( in . METHOD_4 ( ) ) != 0 ( THEN THEN (  android.util.Log.e ( TYPE_1 . TAG , STRING_1 ) )  android.util.Log.e ( TYPE_1 . TAG , STRING_1 ) ) THEN THEN ) IF IF (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( VAR_2 , null ) ) INIT = METHOD_2 ( VAR_2 , null ) ) VAR VAR ( IF IF ( COND VAR_1 . METHOD_3 ( ) ) COND VAR_1 . METHOD_3 ( ) ( THEN THEN ( VAR VAR ( TYPE TYPE_1<TYPE_3> ) TYPE TYPE_1<TYPE_3> ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . get ( ) . METHOD_4 ( TYPE_4 . METHOD_5 ( STRING_1 ) ) ) INIT = VAR_1 . get ( ) . METHOD_4 ( TYPE_4 . METHOD_5 ( STRING_1 ) ) ) VAR VAR ( IF IF ( COND VAR_3 . METHOD_3 ( ) ) COND VAR_3 . METHOD_3 ( ) ( THEN THEN (  return java.lang.Integer.parseInt ( VAR_3 . get ( ) . METHOD_6 ( ) ) ; )  return java.lang.Integer.parseInt ( VAR_3 . get ( ) . METHOD_6 ( ) ) ; ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return METHOD_7 ( ) ; )  return METHOD_7 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME set ) NAME set ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME type ) NAME type ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_2 = TYPE_1 . METHOD_1 ( VAR_2 , VAR_1 ) )  VAR_2 = TYPE_1 . METHOD_1 ( VAR_2 , VAR_1 ) ( WHILE WHILE ( COND VAR_1 >= ( VAR_3 . size ( ) ) ) COND VAR_1 >= ( VAR_3 . size ( ) ) ( BLOCK BLOCK (  VAR_3 . METHOD_2 ( VAR_4 ) )  VAR_3 . METHOD_2 ( VAR_4 ) ) BLOCK BLOCK ) WHILE WHILE (  VAR_3 . set ( VAR_1 , type ) )  VAR_3 . set ( VAR_1 , type ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 != null ) && ( VAR_2 != ( VAR_3 ) ) ) COND ( VAR_1 != null ) && ( VAR_2 != ( VAR_3 ) ) ( THEN THEN (  VAR_4 . METHOD_1 ( VAR_1 , VAR_2 ) )  VAR_4 . METHOD_1 ( VAR_1 , VAR_2 ) ) THEN THEN ( ELSE ELSE (  VAR_4 . METHOD_2 ( ) )  VAR_4 . METHOD_2 ( ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME slotId ) NAME slotId ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME status ) NAME status ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  VAR_2 )  VAR_2 ( BLOCK BLOCK (  android.util.Log . i ( VAR_3 , ( ( ( ( ( STRING_1 + slotId ) + STRING_2 ) + VAR_1 ) + STRING_3 ) + status ) ) )  android.util.Log . i ( VAR_3 , ( ( ( ( ( STRING_1 + slotId ) + STRING_2 ) + VAR_1 ) + STRING_3 ) + status ) ) ( IF IF ( COND ( ( VAR_4 ) == slotId ) && ( VAR_1 == ( VAR_5 ) ) ) COND ( ( VAR_4 ) == slotId ) && ( VAR_1 == ( VAR_5 ) ) ( THEN THEN (  VAR_6 = status )  VAR_6 = status ) THEN THEN ) IF IF ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ( IF IF ( COND ( VAR_7 ) != null ) COND ( VAR_7 ) != null ( THEN THEN (  VAR_7 . METHOD_2 ( ) )  VAR_7 . METHOD_2 ( ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) == null ) COND ( VAR_1 ) == null ( THEN THEN ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME data ) NAME data ( INIT = VAR_2 . METHOD_2 ( ) ) INIT = VAR_2 . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND data != null ) COND data != null ( THEN THEN ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = data . METHOD_3 ( METHOD_4 ( ) ) ) INIT = data . METHOD_3 ( METHOD_4 ( ) ) ) VAR VAR ( IF IF ( COND VAR_3 != null ) COND VAR_3 != null ( THEN THEN (  VAR_1 = new TYPE_1 ( STRING_1 , VAR_3 . METHOD_5 ( ) ) )  VAR_1 = new TYPE_1 ( STRING_1 , VAR_3 . METHOD_5 ( ) ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME context ) NAME context ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME element ) NAME element ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ( INIT = element . METHOD_2 ( VAR_2 , VAR_3 ) ) INIT = element . METHOD_2 ( VAR_2 , VAR_3 ) ) VAR VAR ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_1 . METHOD_3 ( ) ) INIT = VAR_1 . METHOD_3 ( ) ) VAR VAR ( IF IF ( COND ( TYPE_4 . METHOD_4 ( VAR_5 , VAR_4 ) ) >= 0 ) COND ( TYPE_4 . METHOD_4 ( VAR_5 , VAR_4 ) ) >= 0 ( THEN THEN (  context . METHOD_5 ( VAR_6 , context . METHOD_6 ( VAR_1 ) , STRING_1 , null ) )  context . METHOD_5 ( VAR_6 , context . METHOD_6 ( VAR_1 ) , STRING_1 , null ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME args ) NAME args ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME t ) NAME t ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  t . METHOD_2 ( 0 , 0 , false ) )  t . METHOD_2 ( 0 , 0 , false ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME in ) NAME in ( INIT = t . METHOD_3 ( args . in ) ) INIT = t . METHOD_3 ( args . in ) ) VAR VAR (  args.out = t . METHOD_3 ( TYPE_4 . METHOD_4 ( in . METHOD_5 ( ) ) , TYPE_4 . METHOD_4 ( in . METHOD_6 ( ) ) , TYPE_4 . METHOD_4 ( in . METHOD_7 ( ) ) ) )  args.out = t . METHOD_3 ( TYPE_4 . METHOD_4 ( in . METHOD_5 ( ) ) , TYPE_4 . METHOD_4 ( in . METHOD_6 ( ) ) , TYPE_4 . METHOD_4 ( in . METHOD_7 ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME location ) NAME location ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_1 . METHOD_2 ( ) ) ) COND ! ( VAR_1 . METHOD_2 ( ) ) ( THEN THEN (  throw new TYPE_2 ( location ) ; )  throw new TYPE_2 ( location ) ; ) THEN THEN ) IF IF ( IF IF ( COND VAR_1 . METHOD_3 ( ) ) COND VAR_1 . METHOD_3 ( ) ( THEN THEN (  throw new TYPE_3 ( location ) ; )  throw new TYPE_3 ( location ) ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public final ) MODIFIER public final ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE byte ) TYPE byte ( NAME x ) NAME x ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  throw new TYPE_2 ( ) ; )  throw new TYPE_2 ( ) ; ) THEN THEN ) IF IF ( IF IF ( COND ! ( VAR_2 ) ) COND ! ( VAR_2 ) ( THEN THEN (  throw new TYPE_3 ( STRING_1 ) ; )  throw new TYPE_3 ( STRING_1 ) ; ) THEN THEN ) IF IF (  METHOD_1 ( METHOD_2 ( METHOD_3 ( ) ) , x ) )  METHOD_1 ( METHOD_2 ( METHOD_3 ( ) ) , x ) (  return this ; )  return this ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<TYPE_2,TYPE_3> ) RETURN TYPE_1<TYPE_2,TYPE_3> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<TYPE_2,TYPE_3> ) TYPE TYPE_1<TYPE_2,TYPE_3> ( NAME VAR_1 ) NAME VAR_1 ( INIT = null ) INIT = null ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_1 = ( ( TYPE_1 < TYPE_2 , TYPE_3 > ) ( super . METHOD_1 ( ) ) ) )  VAR_1 = ( ( TYPE_1 < TYPE_2 , TYPE_3 > ) ( super . METHOD_1 ( ) ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_5 ( ) ; )  throw new TYPE_5 ( ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  VAR_1 . METHOD_2 ( ) )  VAR_1 . METHOD_2 ( ) (  VAR_1 . METHOD_3 ( this ) )  VAR_1 . METHOD_3 ( this ) (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_3 ( STRING_1 , VAR_3 ) ) INIT = METHOD_3 ( STRING_1 , VAR_3 ) ) VAR VAR (  TYPE_3 . when ( VAR_4 . METHOD_4 ( TYPE_4 . METHOD_5 ( VAR_5 class ) ) ) . thenReturn ( VAR_2 ) )  TYPE_3 . when ( VAR_4 . METHOD_4 ( TYPE_4 . METHOD_5 ( VAR_5 class ) ) ) . thenReturn ( VAR_2 ) ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_6 ) NAME VAR_6 ( INIT = VAR_7 . METHOD_6 ( ) ) INIT = VAR_7 . METHOD_6 ( ) ) VAR VAR (  assertEquals ( VAR_6 , ( ( VAR_8 ) + ( VAR_3 ) ) ) )  assertEquals ( VAR_6 , ( ( VAR_8 ) + ( VAR_3 ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( name ) ) INIT = TYPE_2 . METHOD_2 ( name ) ) VAR VAR (  assertTrue ( java.lang.String.format ( STRING_1 , name ) , VAR_1 . METHOD_3 ( ) ) )  assertTrue ( java.lang.String.format ( STRING_1 , name ) , VAR_1 . METHOD_3 ( ) ) (  assertTrue ( java.lang.String.format ( STRING_2 , name ) , VAR_1 . METHOD_4 ( ) ) )  assertTrue ( java.lang.String.format ( STRING_2 , name ) , VAR_1 . METHOD_4 ( ) ) (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.io.File[] ) TYPE java.io.File[] ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.io.File[] ) TYPE java.io.File[] ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_1 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , false , FLOAT_1 , ( ( TYPE_2 ) ( null ) ) , ( ( TYPE_3 [ ] ) ( null ) ) ) )  TYPE_1 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , false , FLOAT_1 , ( ( TYPE_2 ) ( null ) ) , ( ( TYPE_3 [ ] ) ( null ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME x ) NAME x ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME info ) NAME info ( INIT = METHOD_2 ( x ) ) INIT = METHOD_2 ( x ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_3 ( VAR_3 ) ) INIT = METHOD_3 ( VAR_3 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_3 ( VAR_5 ) ) INIT = METHOD_3 ( VAR_5 ) ) VAR VAR (  METHOD_4 ( new TYPE_5 ( info , VAR_4 , VAR_2 ) ) )  METHOD_4 ( new TYPE_5 ( info , VAR_4 , VAR_2 ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Throwable ) TYPE java.lang.Throwable ( NAME e ) NAME e ( BLOCK BLOCK (  throw METHOD_5 ( x , e ) ; )  throw METHOD_5 ( x , e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( VAR_1 ) )  TYPE_1 . METHOD_2 ( VAR_1 ) (  fail ( ) )  fail ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.NullPointerException ) TYPE java.lang.NullPointerException ( NAME expected ) NAME expected ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ( VAR VAR ( TYPE int ) TYPE int ( NAME c ) NAME c ( INIT = TYPE_1 . METHOD_3 ( ) ) INIT = TYPE_1 . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME s ) NAME s ( INIT = TYPE_1 . METHOD_4 ( c ) ) INIT = TYPE_1 . METHOD_4 ( c ) ) VAR VAR (  METHOD_5 ( TYPE_1 . METHOD_2 ( s ) ) )  METHOD_5 ( TYPE_1 . METHOD_2 ( s ) ) (  TYPE_1 . METHOD_6 ( s ) )  TYPE_1 . METHOD_6 ( s ) (  TYPE_1 . METHOD_7 ( c ) )  TYPE_1 . METHOD_7 ( c ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = null ) INIT = null ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_2 ( ) ) INIT = TYPE_2 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME f ) NAME f ( INIT = new java.io.File ( VAR_2 , VAR_3 ) ) INIT = new java.io.File ( VAR_2 , VAR_3 ) ) VAR VAR (  VAR_1 = new TYPE_1 ( f ) )  VAR_1 = new TYPE_1 ( f ) (  VAR_4 . METHOD_3 ( VAR_1 , STRING_1 ) )  VAR_4 . METHOD_3 ( VAR_1 , STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_5 ) NAME VAR_5 ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME VAR_5 ) NAME VAR_5 ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ( FINALLY FINALLY ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN ( TRY TRY ( BLOCK BLOCK (  VAR_1 . METHOD_4 ( ) )  VAR_1 . METHOD_4 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME VAR_5 ) NAME VAR_5 ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) THEN THEN ) IF IF ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 == null ) || ( VAR_1 . METHOD_2 ( ) ) ) COND ( VAR_1 == null ) || ( VAR_1 . METHOD_2 ( ) ) ( THEN THEN (  return VAR_2 ; )  return VAR_2 ; ) THEN THEN ( ELSE ELSE ( IF IF ( COND ( VAR_2 == null ) || ( VAR_2 . METHOD_2 ( ) ) ) COND ( VAR_2 == null ) || ( VAR_2 . METHOD_2 ( ) ) ( THEN THEN (  return VAR_1 ; )  return VAR_1 ; ) THEN THEN ( ELSE ELSE ( VAR VAR ( TYPE java.lang.StringBuilder ) TYPE java.lang.StringBuilder ( NAME VAR_3 ) NAME VAR_3 ( INIT = new java.lang.StringBuilder ( VAR_1 ) ) INIT = new java.lang.StringBuilder ( VAR_1 ) ) VAR VAR (  VAR_3 . append ( VAR_4 ) )  VAR_3 . append ( VAR_4 ) (  VAR_3 . append ( VAR_2 ) )  VAR_3 . append ( VAR_2 ) (  return VAR_3 . toString ( ) ; )  return VAR_3 . toString ( ) ; ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 . METHOD_2 ( ) . METHOD_3 ( TYPE_2 . METHOD_2 ( ) ) ) COND VAR_1 . METHOD_2 ( ) . METHOD_3 ( TYPE_2 . METHOD_2 ( ) ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF (  return ( ( VAR_1 instanceof TYPE_3 ) || ( VAR_1 instanceof TYPE_4 ) ) || ( VAR_1 instanceof TYPE_5 ) ; )  return ( ( VAR_1 instanceof TYPE_3 ) || ( VAR_1 instanceof TYPE_4 ) ) || ( VAR_1 instanceof TYPE_5 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1[] ) RETURN TYPE_1[] ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_3 . METHOD_2 ( ) ) INIT = TYPE_3 . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  VAR_1 = TYPE_2 . METHOD_3 ( ) )  VAR_1 = TYPE_2 . METHOD_3 ( ) ) THEN THEN ) IF IF ( VAR VAR ( TYPE java.lang.Class<?> ) TYPE java.lang.Class<?> ( NAME c ) NAME c ( INIT = java.lang.Class . METHOD_4 ( ( ( getName ( ) ) + STRING_1 ) , true , VAR_1 ) ) INIT = java.lang.Class . METHOD_4 ( ( ( getName ( ) ) + STRING_1 ) , true , VAR_1 ) ) VAR VAR (  return c . METHOD_1 ( ) ; )  return c . METHOD_1 ( ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME ex ) NAME ex ( BLOCK BLOCK (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  when ( VAR_1 . METHOD_2 ( METHOD_3 ( ) , METHOD_4 ( ) , METHOD_4 ( ) , METHOD_4 ( ) ) ) . thenReturn ( null ) )  when ( VAR_1 . METHOD_2 ( METHOD_3 ( ) , METHOD_4 ( ) , METHOD_4 ( ) , METHOD_4 ( ) ) ) . thenReturn ( null ) (  VAR_2 . METHOD_5 ( false ) )  VAR_2 . METHOD_5 ( false ) (  VAR_2 . METHOD_6 ( VAR_3 ) )  VAR_2 . METHOD_6 ( VAR_3 ) (  VAR_4 . METHOD_7 ( VAR_5 ) )  VAR_4 . METHOD_7 ( VAR_5 ) (  VAR_6 . METHOD_8 ( ) )  VAR_6 . METHOD_8 ( ) (  verify ( VAR_7 ) . METHOD_9 ( ) )  verify ( VAR_7 ) . METHOD_9 ( ) (  verify ( VAR_7 , METHOD_10 ( ) ) . METHOD_11 ( ) )  verify ( VAR_7 , METHOD_10 ( ) ) . METHOD_11 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( VAR_2 class . getName ( ) , null ) )  VAR_1 . METHOD_2 ( VAR_2 class . getName ( ) , null ) ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . METHOD_3 ( ) ) INIT = VAR_1 . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_2 . METHOD_4 ( ) ) INIT = TYPE_2 . METHOD_4 ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_5 ) NAME VAR_5 ( IN VAR_3 ) IN VAR_3 ( BLOCK BLOCK (  VAR_4 . METHOD_5 ( VAR_5 . getName ( ) ) )  VAR_4 . METHOD_5 ( VAR_5 . getName ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  assertEquals ( TYPE_3 . METHOD_6 ( STRING_1 ) , VAR_4 ) )  assertEquals ( TYPE_3 . METHOD_6 ( STRING_1 ) , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME callback ) NAME callback ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 . get ( ) ) INIT = VAR_4 . get ( ) ) VAR VAR ( IF IF ( COND VAR_3 == null ) COND VAR_3 == null ( THEN THEN (  android.util.Log.e ( VAR_5 . TAG , STRING_1 ) )  android.util.Log.e ( VAR_5 . TAG , STRING_1 ) (  return ; )  return ; ) THEN THEN ) IF IF ( IF IF ( COND VAR_6 ) COND VAR_6 ( THEN THEN (  android.util.Log.e ( VAR_5 . TAG , STRING_2 ) )  android.util.Log.e ( VAR_5 . TAG , STRING_2 ) (  return ; )  return ; ) THEN THEN ) IF IF (  VAR_3 . METHOD_1 ( VAR_7 , ( VAR_1 == null ? TYPE_5 . METHOD_2 ( ) : VAR_1 . METHOD_3 ( ) ) , VAR_2 , callback ) )  VAR_3 . METHOD_1 ( VAR_7 , ( VAR_1 == null ? TYPE_5 . METHOD_2 ( ) : VAR_1 . METHOD_3 ( ) ) , VAR_2 , callback ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static synchronized ) MODIFIER private static synchronized ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2<java.lang.Class<?extendsTYPE_3>> ) TYPE TYPE_2<java.lang.Class<?extendsTYPE_3>> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ( INIT = VAR_2 . get ( VAR_1 ) ) INIT = VAR_2 . get ( VAR_1 ) ) VAR VAR ( IF IF ( COND result == null ) COND result == null ( THEN THEN (  result = TYPE_1 . of ( VAR_1 ) )  result = TYPE_1 . of ( VAR_1 ) (  VAR_2 . METHOD_2 ( VAR_1 , result ) )  VAR_2 . METHOD_2 ( VAR_1 , result ) ) THEN THEN ) IF IF (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME type ) NAME type ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) == null ) COND ( VAR_1 ) == null ( THEN THEN (  VAR_1 = new java.util.ArrayList < java.util.List < ? > > ( ) )  VAR_1 = new java.util.ArrayList < java.util.List < ? > > ( ) ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2<java.lang.Object> ) TYPE TYPE_2<java.lang.Object> ( NAME entry ) NAME entry ( INIT = new TYPE_2 < java.lang.Object > ( ) ) INIT = new TYPE_2 < java.lang.Object > ( ) ) VAR VAR (  entry . METHOD_2 ( type ) )  entry . METHOD_2 ( type ) (  entry . METHOD_2 ( name ) )  entry . METHOD_2 ( name ) (  VAR_1 . METHOD_2 ( entry ) )  VAR_1 . METHOD_2 ( entry ) (  return this ; )  return this ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME equals ) NAME equals ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( this ) == VAR_1 ) COND ( this ) == VAR_1 ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_1 == null ) || ( ( METHOD_1 ( ) ) != ( VAR_1 . METHOD_1 ( ) ) ) ) COND ( VAR_1 == null ) || ( ( METHOD_1 ( ) ) != ( VAR_1 . METHOD_1 ( ) ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_1 ) ( VAR_1 ) ) ) INIT = ( ( TYPE_1 ) ( VAR_1 ) ) ) VAR VAR (  return ( ( METHOD_2 ( ) ) == ( VAR_2 . METHOD_2 ( ) ) ) && ( ( id ) == ( VAR_2 . id ) ) ; )  return ( ( METHOD_2 ( ) ) == ( VAR_2 . METHOD_2 ( ) ) ) && ( ( id ) == ( VAR_2 . id ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  METHOD_3 ( ) )  METHOD_3 ( ) (  METHOD_4 ( ) )  METHOD_4 ( ) ( IF IF ( COND ( VAR_2 . size ( ) ) <= 0 ) COND ( VAR_2 . size ( ) ) <= 0 ( THEN THEN (  METHOD_5 ( ) )  METHOD_5 ( ) ) THEN THEN ) IF IF ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( IF IF ( COND VAR_3 != VAR_1 ) COND VAR_3 != VAR_1 ( THEN THEN (  METHOD_6 ( ) )  METHOD_6 ( ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( VAR_2 ) ) INIT = TYPE_2 . METHOD_2 ( VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN (  VAR_3 = TYPE_3 . get ( VAR_1 ) )  VAR_3 = TYPE_3 . get ( VAR_1 ) ) THEN THEN ( ELSE ELSE (  VAR_3 = TYPE_4 . METHOD_3 ( STRING_1 ) )  VAR_3 = TYPE_4 . METHOD_3 ( STRING_1 ) (  TYPE_2 . METHOD_4 ( VAR_2 , VAR_3 . toString ( ) ) )  TYPE_2 . METHOD_4 ( VAR_2 , VAR_3 . toString ( ) ) ) ELSE ELSE ) IF IF (  TYPE_5 . METHOD_5 ( VAR_3 ) )  TYPE_5 . METHOD_5 ( VAR_3 ) (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME location ) NAME location ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 . METHOD_2 ( ) ) COND VAR_1 . METHOD_2 ( ) ( THEN THEN (  throw new TYPE_3 ( location ) ; )  throw new TYPE_3 ( location ) ; ) THEN THEN ) IF IF ( IF IF ( COND VAR_1 . METHOD_3 ( ) ) COND VAR_1 . METHOD_3 ( ) ( THEN THEN (  VAR_2 . log ( VAR_3 , STRING_1 , new java.lang.Object [ ] { location . METHOD_4 ( ) , VAR_1 . METHOD_5 ( ) } ) )  VAR_2 . log ( VAR_3 , STRING_1 , new java.lang.Object [ ] { location . METHOD_4 ( ) , VAR_1 . METHOD_5 ( ) } ) ) THEN THEN ( ELSE ELSE (  throw new TYPE_2 ( location ) ; )  throw new TYPE_2 ( location ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN java.lang.Class<?> ) RETURN java.lang.Class<?> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Class<?> ) TYPE java.lang.Class<?> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE java.lang.Class<?> ) TYPE java.lang.Class<?> ( NAME c ) NAME c ( INIT = VAR_1 ) INIT = VAR_1 ) VAR VAR ) INIT INIT ( COND c != ( VAR_2 . Object class ) ) COND c != ( VAR_2 . Object class ) ( UPDATE UPDATE (  c = c . METHOD_2 ( ) )  c = c . METHOD_2 ( ) ) UPDATE UPDATE ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME method ) NAME method ( IN TYPE_2 . METHOD_3 ( c ) ) IN TYPE_2 . METHOD_3 ( c ) ( BLOCK BLOCK ( IF IF ( COND TYPE_3 . METHOD_4 ( method ) ) COND TYPE_3 . METHOD_4 ( method ) ( THEN THEN (  return method . METHOD_5 ( ) [ 0 ] ; )  return method . METHOD_5 ( ) [ 0 ] ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) FOR FOR (  throw new TYPE_4 ( STRING_1 ) ; )  throw new TYPE_4 ( STRING_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE double ) TYPE double ( NAME a ) NAME a ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR (  a *= INT_1 )  a *= INT_1 (  a -= INT_2 )  a -= INT_2 (  a *= ( ( ( FLOAT_1 * INT_3 ) * INT_4 ) * INT_4 ) * INT_5 )  a *= ( ( ( FLOAT_1 * INT_3 ) * INT_4 ) * INT_4 ) * INT_5 (  return new TYPE_1 ( ( ( long ) ( a ) ) ) ; )  return new TYPE_1 ( ( ( long ) ( a ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( STRING_1 , VAR_1 , VAR_2 ) )  METHOD_2 ( STRING_1 , VAR_1 , VAR_2 ) ( IF IF ( COND VAR_3 . METHOD_3 ( VAR_1 ) ) COND VAR_3 . METHOD_3 ( VAR_1 ) ( THEN THEN ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME args ) NAME args ( INIT = TYPE_1 . METHOD_4 ( ) ) INIT = TYPE_1 . METHOD_4 ( ) ) VAR VAR (  args . arg1 = VAR_1 )  args . arg1 = VAR_1 (  VAR_4 = VAR_2 )  VAR_4 = VAR_2 (  VAR_5 . METHOD_5 ( VAR_6 , args ) . METHOD_6 ( ) )  VAR_5 . METHOD_5 ( VAR_6 , args ) . METHOD_6 ( ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 == VAR_2 ) COND VAR_1 == VAR_2 ( THEN THEN (  return new TYPE_1 ( ) ; )  return new TYPE_1 ( ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( ( TYPE_2 ) ( VAR_2 . METHOD_2 ( ) ) ) ) INIT = ( ( TYPE_2 ) ( VAR_2 . METHOD_2 ( ) ) ) ) VAR VAR (  return TYPE_3 . METHOD_1 ( VAR_1 , VAR_3 ) . append ( VAR_2 . getName ( ) ) . append ( CHAR_1 ) ; )  return TYPE_3 . METHOD_1 ( VAR_1 , VAR_3 ) . append ( VAR_2 . getName ( ) ) . append ( CHAR_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME out ) NAME out ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( context ) != null ) && ( TYPE_1 . METHOD_2 ( context ) ) ) COND ( ( context ) != null ) && ( TYPE_1 . METHOD_2 ( context ) ) ( THEN THEN (  METHOD_3 ( VAR_2 , VAR_3 , VAR_4 , INT_1 ) )  METHOD_3 ( VAR_2 , VAR_3 , VAR_4 , INT_1 ) (  METHOD_3 ( VAR_5 , VAR_3 , VAR_4 , INT_2 ) )  METHOD_3 ( VAR_5 , VAR_3 , VAR_4 , INT_2 ) ) THEN THEN ) IF IF ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_6 ) NAME VAR_6 ( INIT = VAR_2 . METHOD_1 ( out , VAR_1 ) ) INIT = VAR_2 . METHOD_1 ( out , VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_7 ) NAME VAR_7 ( INIT = VAR_5 . METHOD_1 ( out , ( VAR_1 + VAR_6 ) ) ) INIT = VAR_5 . METHOD_1 ( out , ( VAR_1 + VAR_6 ) ) ) VAR VAR (  return VAR_6 + VAR_7 ; )  return VAR_6 + VAR_7 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public synchronized ) MODIFIER public synchronized ( RETURN void ) RETURN void ( NAME run ) NAME run ( PARAMS PARAMS ( VAR VAR ( TYPE com.android.jack.ir.ast.JMethod ) TYPE com.android.jack.ir.ast.JMethod ( NAME method ) NAME method ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE com.android.jack.ir.ast.JDefinedClassOrInterface ) TYPE com.android.jack.ir.ast.JDefinedClassOrInterface ( NAME VAR_1 ) NAME VAR_1 ( INIT = method . METHOD_1 ( ) ) INIT = method . METHOD_1 ( ) ) VAR VAR ( IF IF ( COND ( ( ( ! ( VAR_1 instanceof TYPE_1 ) ) || ( VAR_1 . METHOD_2 ( ) ) ) || ( method . METHOD_3 ( ) ) ) || ( method . METHOD_4 ( ) ) ) COND ( ( ( ! ( VAR_1 instanceof TYPE_1 ) ) || ( VAR_1 . METHOD_2 ( ) ) ) || ( method . METHOD_3 ( ) ) ) || ( method . METHOD_4 ( ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 ( ( ( TYPE_1 ) ( VAR_1 ) ) ) ) INIT = new TYPE_2 ( ( ( TYPE_1 ) ( VAR_1 ) ) ) ) VAR VAR (  VAR_2 . METHOD_5 ( method ) )  VAR_2 . METHOD_5 ( method ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.Map<java.lang.String,TYPE_1> ) TYPE java.util.Map<java.lang.String,TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.String> ) TYPE java.util.Map<java.lang.String,java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_2 . METHOD_2 ( VAR_1 , ( STRING_1 + VAR_3 ) , STRING_2 ) )  TYPE_2 . METHOD_2 ( VAR_1 , ( STRING_1 + VAR_3 ) , STRING_2 ) (  TYPE_2 . METHOD_2 ( VAR_1 , ( STRING_3 + VAR_3 ) , STRING_2 ) )  TYPE_2 . METHOD_2 ( VAR_1 , ( STRING_3 + VAR_3 ) , STRING_2 ) (  VAR_2 . METHOD_3 ( ( STRING_1 + VAR_3 ) , VAR_3 ) )  VAR_2 . METHOD_3 ( ( STRING_1 + VAR_3 ) , VAR_3 ) (  VAR_2 . METHOD_3 ( ( STRING_3 + VAR_3 ) , VAR_3 ) )  VAR_2 . METHOD_3 ( ( STRING_3 + VAR_3 ) , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Integer ) TYPE java.lang.Integer ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE android.bluetooth.BluetoothDevice ) TYPE android.bluetooth.BluetoothDevice ( NAME device ) NAME device ( INIT = TYPE_2 . METHOD_2 ( VAR_3 . METHOD_3 ( ) , VAR_1 ) ) INIT = TYPE_2 . METHOD_2 ( VAR_3 . METHOD_3 ( ) , VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_2 . METHOD_4 ( ) ) INIT = VAR_2 . METHOD_4 ( ) ) VAR VAR (  return VAR_3 . METHOD_5 ( device , id , VAR_4 ) ; )  return VAR_3 . METHOD_5 ( device , id , VAR_4 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( 0 ) )  METHOD_2 ( 0 ) (  METHOD_3 ( VAR_1 , VAR_2 ) )  METHOD_3 ( VAR_1 , VAR_2 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_4 ( VAR_1 , VAR_2 ) ) INIT = METHOD_4 ( VAR_1 , VAR_2 ) ) VAR VAR (  METHOD_2 ( 1 ) )  METHOD_2 ( 1 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_4 ( VAR_1 , VAR_2 ) ) INIT = METHOD_4 ( VAR_1 , VAR_2 ) ) VAR VAR (  TYPE_2 . METHOD_5 ( VAR_3 , VAR_4 ) )  TYPE_2 . METHOD_5 ( VAR_3 , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME s ) NAME s ( INIT = METHOD_2 ( VAR_1 , 16 ) ) INIT = METHOD_2 ( VAR_1 , 16 ) ) VAR VAR (  this . METHOD_3 ( ) )  this . METHOD_3 ( ) ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_1 . METHOD_4 ( this . VAR_3 , s ) ) INIT = TYPE_1 . METHOD_4 ( this . VAR_3 , s ) ) VAR VAR (  TYPE_2 . METHOD_5 ( ( VAR_2 > 0 ) ) )  TYPE_2 . METHOD_5 ( ( VAR_2 > 0 ) ) ( IF IF ( COND VAR_2 < ( s . length ( ) ) ) COND VAR_2 < ( s . length ( ) ) ( THEN THEN (  throw METHOD_6 ( VAR_1 ) ; )  throw METHOD_6 ( VAR_1 ) ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_1 ) ) ) INIT = TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_1 ) ) ) VAR VAR (  assertNotNull ( VAR_4 ) )  assertNotNull ( VAR_4 ) ( VAR VAR ( TYPE java.util.List<?extendsTYPE_3> ) TYPE java.util.List<?extendsTYPE_3> ( NAME VAR_5 ) NAME VAR_5 ( INIT = METHOD_4 ( VAR_3 ) ) INIT = METHOD_4 ( VAR_3 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME match ) NAME match ( INIT = VAR_4 . METHOD_5 ( VAR_5 ) ) INIT = VAR_4 . METHOD_5 ( VAR_5 ) ) VAR VAR (  java.lang.System.out.println ( match . toString ( ) ) )  java.lang.System.out.println ( match . toString ( ) ) (  assertEquals ( VAR_2 , VAR_5 . METHOD_6 ( match ) ) )  assertEquals ( VAR_2 , VAR_5 . METHOD_6 ( match ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.util.Map<java.lang.String,java.lang.String> ) RETURN java.util.Map<java.lang.String,java.lang.String> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME d ) NAME d ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.String> ) TYPE java.util.Map<java.lang.String,java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_1 ( d . METHOD_2 ( ) ) ) INIT = TYPE_2 . METHOD_1 ( d . METHOD_2 ( ) ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME s ) NAME s ( IN d . METHOD_3 ( ) ) IN d . METHOD_3 ( ) ( BLOCK BLOCK ( IF IF ( COND s . METHOD_4 ( ) . equals ( VAR_2 ) ) COND s . METHOD_4 ( ) . equals ( VAR_2 ) ( THEN THEN (  VAR_1 . METHOD_5 ( STRING_1 , TYPE_2 . METHOD_6 ( true ) ) )  VAR_1 . METHOD_5 ( STRING_1 , TYPE_2 . METHOD_6 ( true ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return TYPE_2 . METHOD_1 ( d . METHOD_2 ( ) ) ; )  return TYPE_2 . METHOD_1 ( d . METHOD_2 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME device ) NAME device ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR (  METHOD_3 ( ) )  METHOD_3 ( ) ( IF IF ( COND METHOD_4 ( ) ) COND METHOD_4 ( ) ( THEN THEN (  METHOD_5 ( true ) )  METHOD_5 ( true ) ) THEN THEN ) IF IF (  TYPE_2 . assertFalse ( METHOD_4 ( ) ) )  TYPE_2 . assertFalse ( METHOD_4 ( ) ) (  METHOD_5 ( false ) )  METHOD_5 ( false ) (  METHOD_6 ( ) )  METHOD_6 ( ) (  new TYPE_3 ( device ) . METHOD_7 ( ) )  new TYPE_3 ( device ) . METHOD_7 ( ) (  TYPE_2 . assertTrue ( METHOD_4 ( ) ) )  TYPE_2 . assertTrue ( METHOD_4 ( ) ) (  METHOD_5 ( true ) )  METHOD_5 ( true ) (  TYPE_2 . assertFalse ( METHOD_4 ( ) ) )  TYPE_2 . assertFalse ( METHOD_4 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) INIT = VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_3> ) TYPE java.util.List<TYPE_3> ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . METHOD_4 ( ) ) INIT = VAR_1 . METHOD_4 ( ) ) VAR VAR ( IF IF ( COND ( ( ( ! ( VAR_3 . METHOD_5 ( ) ) ) && ( ( VAR_3 . size ( ) ) <= 5 ) ) && ( ( VAR_1 . METHOD_6 ( ) . size ( ) ) == 1 ) ) && ( VAR_2 . METHOD_7 ( TYPE_4 . METHOD_8 ( ) ) ) ) COND ( ( ( ! ( VAR_3 . METHOD_5 ( ) ) ) && ( ( VAR_3 . size ( ) ) <= 5 ) ) && ( ( VAR_1 . METHOD_6 ( ) . size ( ) ) == 1 ) ) && ( VAR_2 . METHOD_7 ( TYPE_4 . METHOD_8 ( ) ) ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE android.bluetooth.BluetoothDevice ) TYPE android.bluetooth.BluetoothDevice ( NAME device ) NAME device ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( device ) ) INIT = METHOD_2 ( device ) ) VAR VAR ( VAR VAR ( TYPE android.content.Intent ) TYPE android.content.Intent ( NAME VAR_2 ) NAME VAR_2 ( INIT = new android.content.Intent ( VAR_3 ) ) INIT = new android.content.Intent ( VAR_3 ) ) VAR VAR (  VAR_2 . METHOD_3 ( VAR_4 , device ) )  VAR_2 . METHOD_3 ( VAR_4 , device ) (  VAR_2 . METHOD_3 ( VAR_5 , ( VAR_1 == null ? null : VAR_6 ) ) )  VAR_2 . METHOD_3 ( VAR_5 , ( VAR_1 == null ? null : VAR_6 ) ) (  VAR_7 . METHOD_4 ( device , VAR_6 ) )  VAR_7 . METHOD_4 ( device , VAR_6 ) (  VAR_7 . METHOD_5 ( VAR_2 , VAR_8 ) )  VAR_7 . METHOD_5 ( VAR_2 , VAR_8 ) (  VAR_9 . METHOD_6 ( device ) )  VAR_9 . METHOD_6 ( device ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_6 . METHOD_2 ( VAR_1 ) ) INIT = VAR_6 . METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_5 == null ) COND VAR_5 == null ( THEN THEN (  return 0 ; )  return 0 ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_7 ) NAME VAR_7 ( INIT = TYPE_3 . METHOD_2 ( VAR_3 ) ) INIT = TYPE_3 . METHOD_2 ( VAR_3 ) ) VAR VAR ( IF IF ( COND VAR_7 == null ) COND VAR_7 == null ( THEN THEN (  return 0 ; )  return 0 ; ) THEN THEN ) IF IF (  return VAR_5 . METHOD_3 ( VAR_2 , VAR_7 , VAR_4 ) ; )  return VAR_5 . METHOD_3 ( VAR_2 , VAR_7 , VAR_4 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME sb ) NAME sb ( INIT = new TYPE_2 ( 100 ) ) INIT = new TYPE_2 ( 100 ) ) VAR VAR (  sb.append ( STRING_1 ) )  sb.append ( STRING_1 ) ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . size ( ) ) INIT = VAR_1 . size ( ) ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < VAR_2 ) COND i < VAR_2 ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK (  sb.append ( STRING_2 ) )  sb.append ( STRING_2 ) (  sb.append ( VAR_1 . METHOD_2 ( i ) . METHOD_3 ( ) ) )  sb.append ( VAR_1 . METHOD_2 ( i ) . METHOD_3 ( ) ) ) BLOCK BLOCK ) FOR FOR (  return sb . toString ( ) ; )  return sb . toString ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object[] ) TYPE java.lang.Object[] ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME index ) NAME index ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = index ) INIT = index ) VAR VAR ) INIT INIT ( COND i < VAR_3 ) COND i < VAR_3 ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK ( IF IF ( COND ( VAR_2 [ i ] ) == null ) COND ( VAR_2 [ i ] ) == null ( THEN THEN (  return i ; )  return i ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR FOR ) THEN THEN ( ELSE ELSE ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = index ) INIT = index ) VAR VAR ) INIT INIT ( COND i < VAR_3 ) COND i < VAR_3 ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK ( IF IF ( COND VAR_1 . equals ( VAR_2 [ i ] ) ) COND VAR_1 . equals ( VAR_2 [ i ] ) ( THEN THEN (  return i ; )  return i ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR FOR ) ELSE ELSE ) IF IF (  return - 1 ; )  return - 1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1[] ) RETURN TYPE_1[] ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME context ) NAME context ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME field ) NAME field ( INIT = VAR_1 . METHOD_2 ( VAR_2 . METHOD_3 ( ) , false ) ) INIT = VAR_1 . METHOD_2 ( VAR_2 . METHOD_3 ( ) , false ) ) VAR VAR (  return new TYPE_1 [ ] { new TYPE_6 ( VAR_2 , field , VAR_1 ) } ; )  return new TYPE_1 [ ] { new TYPE_6 ( VAR_2 , field , VAR_1 ) } ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public synchronized ) MODIFIER public synchronized ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME context ) NAME context ) VAR VAR ( VAR VAR ( TYPE java.lang.Throwable ) TYPE java.lang.Throwable ( NAME e ) NAME e ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  -- ( VAR_1 ) )  -- ( VAR_1 ) ( IF IF ( COND ( VAR_1 ) > 0 ) COND ( VAR_1 ) > 0 ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( IF IF ( COND ( ( VAR_2 ) != null ) && ( VAR_3 ) ) COND ( ( VAR_2 ) != null ) && ( VAR_3 ) ( THEN THEN ( TRY TRY ( BLOCK BLOCK (  TYPE_3 . METHOD_2 ( VAR_2 . METHOD_3 ( ) ) )  TYPE_3 . METHOD_2 ( VAR_2 . METHOD_3 ( ) ) (  com.android.tradefed.log.LogUtil.CLog.i ( STRING_1 , VAR_2 ) )  com.android.tradefed.log.LogUtil.CLog.i ( STRING_1 , VAR_2 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME VAR_4 ) NAME VAR_4 ( BLOCK BLOCK (  TYPE_4 . e ( STRING_2 , VAR_2 , VAR_4 ) )  TYPE_4 . e ( STRING_2 , VAR_2 , VAR_4 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  VAR_2 = null )  VAR_2 = null ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME node ) NAME node ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME parent ) NAME parent ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 == ( VAR_2 ) ) COND VAR_1 == ( VAR_2 ) ( THEN THEN ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 . METHOD_2 ( ) ) INIT = VAR_4 . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND VAR_3 != null ) COND VAR_3 != null ( THEN THEN (  node . METHOD_3 ( STRING_1 , new TYPE_3 ( null , VAR_5 , VAR_3 ) ) )  node . METHOD_3 ( STRING_1 , new TYPE_3 ( null , VAR_5 , VAR_3 ) ) ) THEN THEN ( ELSE ELSE (  parent . METHOD_4 ( node ) )  parent . METHOD_4 ( node ) ) ELSE ELSE ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME project ) NAME project ( INIT = METHOD_2 ( null , STRING_1 , STRING_2 , STRING_3 ) ) INIT = METHOD_2 ( null , STRING_1 , STRING_2 , STRING_3 ) ) VAR VAR (  METHOD_3 ( ( STRING_4 + ( ( STRING_5 + STRING_4 ) + STRING_6 ) ) , STRING_7 , VAR_1 , new java.lang.String [ ] { STRING_8 , STRING_9 , STRING_10 , new java.io.File ( project , STRING_11 ) . METHOD_4 ( ) , STRING_12 , STRING_13 , project . METHOD_4 ( ) } ) )  METHOD_3 ( ( STRING_4 + ( ( STRING_5 + STRING_4 ) + STRING_6 ) ) , STRING_7 , VAR_1 , new java.lang.String [ ] { STRING_8 , STRING_9 , STRING_10 , new java.io.File ( project , STRING_11 ) . METHOD_4 ( ) , STRING_12 , STRING_13 , project . METHOD_4 ( ) } ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME offset ) NAME offset ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < ( VAR_1 . size ( ) ) ) COND i < ( VAR_1 . size ( ) ) ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . get ( i ) ) INIT = VAR_1 . get ( i ) ) VAR VAR ( IF IF ( COND offset <= VAR_2 ) COND offset <= VAR_2 ( THEN THEN (  return i ; )  return i ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR FOR (  return - 1 ; )  return - 1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( ) )  VAR_1 . METHOD_2 ( ) ( IF IF ( COND ! VAR_2 ) COND ! VAR_2 ( THEN THEN (  VAR_3 . println ( STRING_1 ) )  VAR_3 . println ( STRING_1 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( BLOCK BLOCK ( IF IF ( COND ! VAR_2 ) COND ! VAR_2 ( THEN THEN (  java.lang.System.out.println ( STRING_2 ) )  java.lang.System.out.println ( STRING_2 ) ) THEN THEN ( ELSE ELSE (  throw VAR_4 ; )  throw VAR_4 ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME event ) NAME event ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SWITCH SWITCH ( NAME VAR_1 ) NAME VAR_1 ( CASE VAR_2 ( BLOCK BLOCK ( IF IF ( COND METHOD_2 ( ) ) COND METHOD_2 ( ) ( THEN THEN (  METHOD_3 ( VAR_3 ) )  METHOD_3 ( VAR_3 ) ) THEN THEN ) IF IF (  return true ; )  return true ; ) BLOCK BLOCK ) CASE VAR_2 ( CASE VAR_4 ( BLOCK BLOCK ( IF IF ( COND METHOD_4 ( ) ) COND METHOD_4 ( ) ( THEN THEN (  METHOD_3 ( VAR_5 ) )  METHOD_3 ( VAR_5 ) ) THEN THEN ) IF IF (  return true ; )  return true ; ) BLOCK BLOCK ) CASE VAR_4 ( CASE VAR_6 ( BLOCK BLOCK (  VAR_8 = true )  VAR_8 = true ) BLOCK BLOCK ) CASE VAR_6 ( CASE VAR_7 ( BLOCK BLOCK (  VAR_8 = true )  VAR_8 = true ) BLOCK BLOCK ) CASE VAR_7 ) SWITCH SWITCH (  return super . METHOD_1 ( VAR_1 , event ) ; )  return super . METHOD_1 ( VAR_1 , event ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( STRING_1 ) ) INIT = METHOD_2 ( STRING_1 ) ) VAR VAR ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN ( VAR VAR ( TYPE java.util.List<java.io.File> ) TYPE java.util.List<java.io.File> ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_3 ( VAR_1 ) ) INIT = TYPE_2 . METHOD_3 ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_1 . METHOD_4 ( null , VAR_2 ) ) INIT = TYPE_1 . METHOD_4 ( null , VAR_2 ) ) VAR VAR (  assertNotNull ( VAR_3 ) )  assertNotNull ( VAR_3 ) (  return VAR_3 ; )  return VAR_3 ; ) THEN THEN ( ELSE ELSE (  fail ( STRING_2 ) )  fail ( STRING_2 ) ) ELSE ELSE ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME test ) NAME test ( BLOCK BLOCK (  METHOD_1 ( ( ( FLOAT_1 - ( cts ) ) - ( VAR_1 ) ) ) )  METHOD_1 ( ( ( FLOAT_1 - ( cts ) ) - ( VAR_1 ) ) ) ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_1 . METHOD_2 ( METHOD_3 ( ) , VAR_3 ) ) INIT = TYPE_1 . METHOD_2 ( METHOD_3 ( ) , VAR_3 ) ) VAR VAR ( IF IF ( COND ( VAR_2 == null ) || ( ! ( VAR_2 . METHOD_4 ( VAR_4 ) ) ) ) COND ( VAR_2 == null ) || ( ! ( VAR_2 . METHOD_4 ( VAR_4 ) ) ) ( THEN THEN (  status = VAR_5 )  status = VAR_5 ) THEN THEN ( ELSE ELSE (  status = VAR_6 )  status = VAR_6 ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) != null ) COND ( VAR_1 ) != null ( THEN THEN (  return VAR_1 . METHOD_1 ( ) ; )  return VAR_1 . METHOD_1 ( ) ; ) THEN THEN ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  METHOD_2 ( ) )  METHOD_2 ( ) ( SYNCHRONIZED SYNCHRONIZED (  VAR_2 )  VAR_2 ( BLOCK BLOCK ( IF IF ( COND ! ( METHOD_3 ( ) ) ) COND ! ( METHOD_3 ( ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_3 ) == 0 ) COND ( VAR_3 ) == 0 ( THEN THEN (  android.util.Log.e ( VAR_4 , STRING_1 ) )  android.util.Log.e ( VAR_4 , STRING_1 ) (  return true ; )  return true ; ) THEN THEN ) IF IF (  VAR_3 = 0 )  VAR_3 = 0 (  return TYPE_2 . METHOD_4 ( VAR_5 , VAR_3 ) ; )  return TYPE_2 . METHOD_4 ( VAR_5 , VAR_3 ) ; ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME toString ) NAME toString ( BLOCK BLOCK ( IF IF ( COND ! ( METHOD_1 ( ) ) ) COND ! ( METHOD_1 ( ) ) ( THEN THEN (  return STRING_1 ; )  return STRING_1 ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME in ) NAME in ) VAR VAR ( IF IF ( COND ( ! ( TYPE_2 . METHOD_2 ( ) ) ) && ( ( TYPE_3 . METHOD_3 ( ) ) != null ) ) COND ( ! ( TYPE_2 . METHOD_2 ( ) ) ) && ( ( TYPE_3 . METHOD_3 ( ) ) != null ) ( THEN THEN (  in = TYPE_1 . METHOD_4 ( ) )  in = TYPE_1 . METHOD_4 ( ) ) THEN THEN ( ELSE ELSE (  in = VAR_1 . METHOD_5 ( ) )  in = VAR_1 . METHOD_5 ( ) ) ELSE ELSE ) IF IF (  return ( ( ( STRING_2 + in ) + STRING_3 ) + ( VAR_1 . METHOD_6 ( ) ) ) + STRING_4 ; )  return ( ( ( STRING_2 + in ) + STRING_3 ) + ( VAR_1 . METHOD_6 ( ) ) ) + STRING_4 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<TYPE_2> ) RETURN TYPE_1<TYPE_2> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Set<java.io.File> ) TYPE java.util.Set<java.io.File> ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_2 ( ) ) INIT = VAR_2 . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND VAR_1 . METHOD_3 ( ) ) COND VAR_1 . METHOD_3 ( ) ( THEN THEN (  return TYPE_3 . METHOD_4 ( ) ; )  return TYPE_3 . METHOD_4 ( ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE java.util.Set<TYPE_2> ) TYPE java.util.Set<TYPE_2> ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_4 . METHOD_5 ( ) ) INIT = TYPE_4 . METHOD_5 ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_4 ) NAME VAR_4 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  VAR_3 . METHOD_6 ( new TYPE_5 ( VAR_4 ) ) )  VAR_3 . METHOD_6 ( new TYPE_5 ( VAR_4 ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME context ) NAME context ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME element ) NAME element ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ! ( element . METHOD_2 ( VAR_1 , VAR_2 ) ) ) && ( ! ( element . METHOD_2 ( VAR_1 , VAR_3 ) ) ) ) COND ( ! ( element . METHOD_2 ( VAR_1 , VAR_2 ) ) ) && ( ! ( element . METHOD_2 ( VAR_1 , VAR_3 ) ) ) ( THEN THEN (  context . METHOD_3 ( VAR_4 , element , context . METHOD_4 ( element ) , ( STRING_1 + STRING_2 ) , null ) )  context . METHOD_3 ( VAR_4 , element , context . METHOD_4 ( element ) , ( STRING_1 + STRING_2 ) , null ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<TYPE_2> ) TYPE java.util.ArrayList<TYPE_2> ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_3 . get ( ( ( VAR_3 . size ( ) ) - 1 ) ) ) INIT = VAR_3 . get ( ( ( VAR_3 . size ( ) ) - 1 ) ) ) VAR VAR (  return ( ( ( VAR_4 . METHOD_3 ( ) ) != null ) || ( ( VAR_4 . METHOD_4 ( ) . size ( ) ) > 0 ) ) && ( ( VAR_2 . METHOD_5 ( ) . METHOD_6 ( ) ) > 1 ) ; )  return ( ( ( VAR_4 . METHOD_3 ( ) ) != null ) || ( ( VAR_4 . METHOD_4 ( ) . size ( ) ) > 0 ) ) && ( ( VAR_2 . METHOD_5 ( ) . METHOD_6 ( ) ) > 1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Throwable ) TYPE java.lang.Throwable ( NAME e ) NAME e ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME info ) NAME info ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_1 ( e ) ) INIT = METHOD_1 ( e ) ) VAR VAR ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME sb ) NAME sb ( INIT = new TYPE_4 ( ) ) INIT = new TYPE_4 ( ) ) VAR VAR (  VAR_1 . METHOD_2 ( 0 , sb ) )  VAR_1 . METHOD_2 ( 0 , sb ) (  VAR_2 . METHOD_3 ( VAR_1 . METHOD_4 ( ) . getName ( ) , sb . toString ( ) , info ) )  VAR_2 . METHOD_3 ( VAR_1 . METHOD_4 ( ) . getName ( ) , sb . toString ( ) , info ) ) THEN THEN ) IF IF (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_1 ) ( TYPE_1 . METHOD_2 ( STRING_1 , STRING_2 , VAR_2 ) ) ) ) INIT = ( ( TYPE_1 ) ( TYPE_1 . METHOD_2 ( STRING_1 , STRING_2 , VAR_2 ) ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . get ( STRING_3 ) ) INIT = VAR_1 . get ( STRING_3 ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_3 . METHOD_3 ( ) ) INIT = VAR_3 . METHOD_3 ( ) ) VAR VAR ( IF IF ( COND VAR_4 != null ) COND VAR_4 != null ( THEN THEN (  errln ( STRING_4 ) )  errln ( STRING_4 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.IllegalArgumentException ) TYPE java.lang.IllegalArgumentException ( NAME ex ) NAME ex ( BLOCK BLOCK (  logln ( STRING_5 ) )  logln ( STRING_5 ) ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME ex ) NAME ex ( BLOCK BLOCK (  METHOD_4 ( ( STRING_6 + ( ex . getMessage ( ) ) ) ) )  METHOD_4 ( ( STRING_6 + ( ex . getMessage ( ) ) ) ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME level ) NAME level ( INIT = VAR_1 ) INIT = VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_3 . METHOD_2 ( STRING_1 ) ) INIT = TYPE_3 . METHOD_2 ( STRING_1 ) ) VAR VAR ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN ( TRY TRY ( BLOCK BLOCK (  level = new TYPE_4 < TYPE_2 > ( VAR_3 class , TYPE_2 . values ( ) ) . METHOD_3 ( new TYPE_5 ( ) , VAR_2 ) )  level = new TYPE_4 < TYPE_2 > ( VAR_3 class , TYPE_2 . values ( ) ) . METHOD_3 ( new TYPE_5 ( ) , VAR_2 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_1 ( e.getMessage ( ) ) ; )  throw new TYPE_1 ( e.getMessage ( ) ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) THEN THEN ) IF IF (  TYPE_7 . METHOD_4 ( level ) )  TYPE_7 . METHOD_4 ( level ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME args ) NAME args ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( ) )  TYPE_1 . METHOD_2 ( ) ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  VAR_1 . METHOD_3 ( true ) )  VAR_1 . METHOD_3 ( true ) (  VAR_1 . METHOD_4 ( ) )  VAR_1 . METHOD_4 ( ) (  TYPE_3 . METHOD_5 ( ) . METHOD_6 ( ) )  TYPE_3 . METHOD_5 ( ) . METHOD_6 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ( BLOCK BLOCK (  e . METHOD_7 ( ) )  e . METHOD_7 ( ) ) BLOCK BLOCK ) CATCH CATCH ( FINALLY FINALLY (  TYPE_1 . METHOD_8 ( ) )  TYPE_1 . METHOD_8 ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME parent ) NAME parent ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  return METHOD_3 ( parent , name ) ; )  return METHOD_3 ( parent , name ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_2 ( METHOD_4 ( parent , name ) ) ; )  throw new TYPE_2 ( METHOD_4 ( parent , name ) ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( ) ) INIT = TYPE_2 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_3 . METHOD_3 ( ) ) INIT = TYPE_3 . METHOD_3 ( ) ) VAR VAR (  VAR_1 . METHOD_4 ( VAR_2 , new TYPE_4 ( TYPE_3 . METHOD_3 ( ) , VAR_3 , false , false ) ) )  VAR_1 . METHOD_4 ( VAR_2 , new TYPE_4 ( TYPE_3 . METHOD_3 ( ) , VAR_3 , false , false ) ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  assertTrue ( VAR_4 . METHOD_5 ( VAR_2 , true ) ) )  assertTrue ( VAR_4 . METHOD_5 ( VAR_2 , true ) ) (  METHOD_6 ( VAR_1 , VAR_4 , true ) )  METHOD_6 ( VAR_1 , VAR_4 , true ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR (  VAR_2 . METHOD_2 ( VAR_3 class . getName ( ) , VAR_1 ) )  VAR_2 . METHOD_2 ( VAR_3 class . getName ( ) , VAR_1 ) ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_2 . METHOD_3 ( ) ) INIT = VAR_2 . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_5 ) NAME VAR_5 ( INIT = TYPE_2 . METHOD_4 ( ) ) INIT = TYPE_2 . METHOD_4 ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_6 ) NAME VAR_6 ( IN VAR_4 ) IN VAR_4 ( BLOCK BLOCK (  VAR_5 . METHOD_5 ( VAR_6 . getName ( ) ) )  VAR_5 . METHOD_5 ( VAR_6 . getName ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  assertEquals ( TYPE_3 . METHOD_6 ( VAR_1 ) , VAR_5 ) )  assertEquals ( TYPE_3 . METHOD_6 ( VAR_1 ) , VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME d ) NAME d ( INIT = VAR_3 . METHOD_2 ( VAR_1 ) ) INIT = VAR_3 . METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND d == null ) COND d == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME src ) NAME src ( INIT = VAR_3 . METHOD_2 ( VAR_2 ) ) INIT = VAR_3 . METHOD_2 ( VAR_2 ) ) VAR VAR ( IF IF ( COND src == null ) COND src == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  TYPE_2 . METHOD_3 ( VAR_4 , 0 , VAR_5 , 0 , VAR_6 ) )  TYPE_2 . METHOD_3 ( VAR_4 , 0 , VAR_5 , 0 , VAR_6 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = STRING_1 + ( ( ( ( ( ( STRING_2 + STRING_3 ) + STRING_4 ) + STRING_5 ) + STRING_6 ) + STRING_7 ) + STRING_8 ) ) INIT = STRING_1 + ( ( ( ( ( ( STRING_2 + STRING_3 ) + STRING_4 ) + STRING_5 ) + STRING_6 ) + STRING_7 ) + STRING_8 ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME expected ) NAME expected ( INIT = STRING_9 + ( STRING_10 + STRING_11 ) ) INIT = STRING_9 + ( STRING_10 + STRING_11 ) ) VAR VAR (  assertEquals ( expected , METHOD_2 ( VAR_1 ) ) )  assertEquals ( expected , METHOD_2 ( VAR_1 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( VAR_2 ) == null ) || ( ! ( VAR_3 . METHOD_2 ( ) ) ) ) COND ( ( VAR_2 ) == null ) || ( ! ( VAR_3 . METHOD_2 ( ) ) ) ( THEN THEN (  METHOD_3 ( ) )  METHOD_3 ( ) ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_3 . METHOD_1 ( ) ) INIT = VAR_3 . METHOD_1 ( ) ) VAR VAR ( IF IF ( COND VAR_4 == null ) COND VAR_4 == null ( THEN THEN (  throw new TYPE_2 ( STRING_1 , VAR_5 ) ; )  throw new TYPE_2 ( STRING_1 , VAR_5 ) ; ) THEN THEN ) IF IF (  VAR_2 = new TYPE_1 ( VAR_4 ) )  VAR_2 = new TYPE_1 ( VAR_4 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_2 ( STRING_1 , e , VAR_6 ) ; )  throw new TYPE_2 ( STRING_1 , e , VAR_6 ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) THEN THEN ) IF IF (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE float ) TYPE float ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE float ) TYPE float ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE float ) TYPE float ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE float ) TYPE float ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_6 ) NAME VAR_6 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_7 ) NAME VAR_7 ( INIT = VAR_8 . METHOD_2 ( VAR_1 ) ) INIT = VAR_8 . METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_7 == null ) COND VAR_7 == null ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  return VAR_7 . METHOD_3 ( VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; )  return VAR_7 . METHOD_3 ( VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.Class<?> ) TYPE java.lang.Class<?> ( NAME target ) NAME target ( INIT = VAR_1 class ) INIT = VAR_1 class ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_2 ( target , STRING_1 , VAR_3 ) ) INIT = TYPE_2 . METHOD_2 ( target , STRING_1 , VAR_3 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_4 ( VAR_5 , VAR_6 , VAR_7 , 0 , VAR_2 ) ) INIT = new TYPE_4 ( VAR_5 , VAR_6 , VAR_7 , 0 , VAR_2 ) ) VAR VAR (  VAR_4 . run ( null ) )  VAR_4 . run ( null ) (  org.mockito.Mockito.verify ( VAR_5 ) . METHOD_3 ( VAR_8 class , ( ( target . getName ( ) ) + STRING_2 ) ) )  org.mockito.Mockito.verify ( VAR_5 ) . METHOD_3 ( VAR_8 class , ( ( target . getName ( ) ) + STRING_2 ) ) (  org.mockito.Mockito.verify ( VAR_5 ) . METHOD_4 ( VAR_9 ) )  org.mockito.Mockito.verify ( VAR_5 ) . METHOD_4 ( VAR_9 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME action ) NAME action ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( IF IF ( COND ! ( action . METHOD_3 ( ) ) ) COND ! ( action . METHOD_3 ( ) ) ( THEN THEN (  TYPE_2 . i ( VAR_2 . TAG , ( STRING_1 + action ) ) )  TYPE_2 . i ( VAR_2 . TAG , ( STRING_1 + action ) ) (  action . start ( ) )  action . start ( ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE android.content.Intent ) TYPE android.content.Intent ( NAME i ) NAME i ( INIT = new android.content.Intent ( this , VAR_3 class ) ) INIT = new android.content.Intent ( this , VAR_3 class ) ) VAR VAR (  i . METHOD_2 ( VAR_4 , VAR_2 ) )  i . METHOD_2 ( VAR_4 , VAR_2 ) (  VAR_1 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_2 . name , TYPE_4 . METHOD_5 ( VAR_5 ) , i , null ) ) )  VAR_1 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_2 . name , TYPE_4 . METHOD_5 ( VAR_5 ) , i , null ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME config ) NAME config ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND config == null ) COND config == null ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_2 != null ) && ( ! ( VAR_2 . METHOD_2 ( ) ) ) ) COND ( VAR_2 != null ) && ( ! ( VAR_2 . METHOD_2 ( ) ) ) ( THEN THEN (  VAR_3 . METHOD_3 ( config ) )  VAR_3 . METHOD_3 ( config ) (  config = VAR_3 )  config = VAR_3 (  VAR_2 . METHOD_4 ( VAR_1 , config ) )  VAR_2 . METHOD_4 ( VAR_1 , config ) ) THEN THEN ) IF IF (  return config ; )  return config ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( VAR_2 class . getName ( ) , null ) )  VAR_1 . METHOD_2 ( VAR_2 class . getName ( ) , null ) ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . METHOD_3 ( ) ) INIT = VAR_1 . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_2 . METHOD_4 ( ) ) INIT = TYPE_2 . METHOD_4 ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_5 ) NAME VAR_5 ( IN VAR_3 ) IN VAR_3 ( BLOCK BLOCK (  VAR_4 . METHOD_5 ( VAR_5 . getName ( ) ) )  VAR_4 . METHOD_5 ( VAR_5 . getName ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  assertEquals ( TYPE_3 . METHOD_6 ( STRING_1 , STRING_1 , STRING_2 ) , VAR_4 ) )  assertEquals ( TYPE_3 . METHOD_6 ( STRING_1 , STRING_1 , STRING_2 ) , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME session ) NAME session ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME s ) NAME s ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME c ) NAME c ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME fd ) NAME fd ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME callback ) NAME callback ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME id ) NAME id ( INIT = TYPE_4 . METHOD_2 ( session ) ) INIT = TYPE_4 . METHOD_2 ( session ) ) VAR VAR (  assertNotNull ( id ) )  assertNotNull ( id ) (  assertEquals ( INT_1 , id . length ) )  assertEquals ( INT_1 , id . length ) (  super . METHOD_1 ( session , s , c , VAR_1 , fd , callback ) )  super . METHOD_1 ( session , s , c , VAR_1 , fd , callback ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME d ) NAME d ( INIT = VAR_3 . METHOD_2 ( VAR_1 ) ) INIT = VAR_3 . METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND d == null ) COND d == null ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_3 . METHOD_2 ( VAR_2 ) ) INIT = VAR_3 . METHOD_2 ( VAR_2 ) ) VAR VAR ( IF IF ( COND VAR_4 == null ) COND VAR_4 == null ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  d . METHOD_3 ( VAR_5 ) )  d . METHOD_3 ( VAR_5 ) (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( STRING_1 , INT_1 ) ) INIT = TYPE_2 . METHOD_2 ( STRING_1 , INT_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 ( STRING_2 , INT_1 ) ) INIT = new TYPE_2 ( STRING_2 , INT_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_3 ( VAR_4 , VAR_1 ) ) INIT = new TYPE_3 ( VAR_4 , VAR_1 ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  new TYPE_4 ( VAR_3 ) )  new TYPE_4 ( VAR_3 ) (  fail ( STRING_3 ) )  fail ( STRING_3 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.IllegalArgumentException ) TYPE java.lang.IllegalArgumentException ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_5 ) NAME VAR_5 ( INIT = new TYPE_3 ( VAR_6 , VAR_1 ) ) INIT = new TYPE_3 ( VAR_6 , VAR_1 ) ) VAR VAR (  new TYPE_4 ( VAR_5 ) )  new TYPE_4 ( VAR_5 ) (  new TYPE_4 ( VAR_7 ) )  new TYPE_4 ( VAR_7 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME session ) NAME session ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME s ) NAME s ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME c ) NAME c ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME fd ) NAME fd ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME callback ) NAME callback ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  assertEquals ( VAR_2 , TYPE_4 . METHOD_2 ( s ) ) )  assertEquals ( VAR_2 , TYPE_4 . METHOD_2 ( s ) ) (  super . METHOD_1 ( session , s , c , VAR_1 , fd , callback ) )  super . METHOD_1 ( session , s , c , VAR_1 , fd , callback ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN java.lang.Class ) RETURN java.lang.Class ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.util.List<java.lang.Throwable> ) TYPE java.util.List<java.lang.Throwable> ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.Class ) TYPE java.lang.Class ( NAME result ) NAME result ( INIT = null ) INIT = null ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  result = TYPE_2 . METHOD_2 ( name , VAR_1 , VAR_2 ) )  result = TYPE_2 . METHOD_2 ( name , VAR_1 , VAR_2 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK ( IF IF ( COND VAR_3 != null ) COND VAR_3 != null ( THEN THEN (  VAR_3 . METHOD_3 ( e ) )  VAR_3 . METHOD_3 ( e ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME e ) NAME e ( BLOCK BLOCK ( IF IF ( COND VAR_3 != null ) COND VAR_3 != null ( THEN THEN (  VAR_3 . METHOD_3 ( e ) )  VAR_3 . METHOD_3 ( e ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE double ) TYPE double ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_1 . METHOD_2 ( VAR_1 ) ) INIT = TYPE_1 . METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND ( VAR_2 == INT_1 ) || ( VAR_2 == INT_2 ) ) COND ( VAR_2 == INT_1 ) || ( VAR_2 == INT_2 ) ( THEN THEN (  VAR_3 . METHOD_3 ( ( ( VAR_4 ) + ( ( int ) ( VAR_1 ) ) ) ) )  VAR_3 . METHOD_3 ( ( ( VAR_4 ) + ( ( int ) ( VAR_1 ) ) ) ) ) THEN THEN ( ELSE ELSE (  VAR_3 . METHOD_4 ( new TYPE_1 ( VAR_1 ) ) )  VAR_3 . METHOD_4 ( new TYPE_1 ( VAR_1 ) ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME path ) NAME path ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME action ) NAME action ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( null == path ) || ( path . equals ( STRING_1 ) ) ) || ( ! ( TYPE_1 . METHOD_2 ( action ) ) ) ) COND ( ( null == path ) || ( path . equals ( STRING_1 ) ) ) || ( ! ( TYPE_1 . METHOD_2 ( action ) ) ) ( THEN THEN (  throw new java.lang.IllegalArgumentException ( STRING_2 ) ; )  throw new java.lang.IllegalArgumentException ( STRING_2 ) ; ) THEN THEN ( ELSE ELSE ( IF IF ( COND ( VAR_1 ) == ( METHOD_3 ( ) ) ) COND ( VAR_1 ) == ( METHOD_3 ( ) ) ( THEN THEN (  throw new TYPE_2 ( STRING_3 ) ; )  throw new TYPE_2 ( STRING_3 ) ; ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF (  return METHOD_4 ( VAR_2 , path , action ) ; )  return METHOD_4 ( VAR_2 , path , action ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( VAR_2 class . getName ( ) ) ) INIT = new TYPE_1 ( VAR_2 class . getName ( ) ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( new TYPE_2 ( null , null ) , 0 ) )  VAR_1 . METHOD_2 ( new TYPE_2 ( null , null ) , 0 ) (  TYPE_3 . fail ( STRING_1 ) )  TYPE_3 . fail ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.IllegalArgumentException ) TYPE java.lang.IllegalArgumentException ( NAME expected ) NAME expected ( BLOCK BLOCK (  TYPE_4 . METHOD_3 ( expected ) . METHOD_4 ( ) . METHOD_5 ( STRING_2 ) )  TYPE_4 . METHOD_3 ( expected ) . METHOD_4 ( ) . METHOD_5 ( STRING_2 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME type ) NAME type ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SWITCH SWITCH ( NAME type . METHOD_2 ( ) ) NAME type . METHOD_2 ( ) ( CASE VAR_1 ( BLOCK BLOCK (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) CASE VAR_1 ( CASE VAR_3 ( BLOCK BLOCK (  return VAR_5 ; )  return VAR_5 ; ) BLOCK BLOCK ) CASE VAR_3 ( CASE VAR_4 ( BLOCK BLOCK (  return VAR_5 ; )  return VAR_5 ; ) BLOCK BLOCK ) CASE VAR_4 ( CASE VAR_6 ( BLOCK BLOCK (  return VAR_7 ; )  return VAR_7 ; ) BLOCK BLOCK ) CASE VAR_6 ( CASE VAR_8 ( BLOCK BLOCK (  return VAR_9 ; )  return VAR_9 ; ) BLOCK BLOCK ) CASE VAR_8 ( CASE VAR_10 ( BLOCK BLOCK (  return VAR_11 ; )  return VAR_11 ; ) BLOCK BLOCK ) CASE VAR_10 ( CASE VAR_12 ( BLOCK BLOCK (  return VAR_13 ; )  return VAR_13 ; ) BLOCK BLOCK ) CASE VAR_12 ) SWITCH SWITCH (  return TYPE_3 . METHOD_3 ( type ) ; )  return TYPE_3 . METHOD_3 ( type ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME output ) NAME output ( INIT = new byte [ INT_1 ] ) INIT = new byte [ INT_1 ] ) VAR VAR (  TYPE_1 . METHOD_2 ( output ) )  TYPE_1 . METHOD_2 ( output ) ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ( INIT = true ) INIT = true ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < ( output . length ) ) COND i < ( output . length ) ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK (  VAR_1 &= ( output [ i ] ) == 0 )  VAR_1 &= ( output [ i ] ) == 0 ) BLOCK BLOCK ) FOR FOR (  assertFalse ( ( STRING_1 + STRING_2 ) , VAR_1 ) )  assertFalse ( ( STRING_1 + STRING_2 ) , VAR_1 ) (  TYPE_2 . METHOD_3 ( ) )  TYPE_2 . METHOD_3 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN android.content.Intent ) RETURN android.content.Intent ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME context ) NAME context ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( TYPE_2 . METHOD_2 ( ) ) && ( TYPE_2 . METHOD_3 ( context ) ) ) && ( ( VAR_1 ) >= ( VAR_2 ) ) ) COND ( ( TYPE_2 . METHOD_2 ( ) ) && ( TYPE_2 . METHOD_3 ( context ) ) ) && ( ( VAR_1 ) >= ( VAR_2 ) ) ( THEN THEN (  return context . METHOD_4 ( VAR_3 class ) . METHOD_1 ( ) ; )  return context . METHOD_4 ( VAR_3 class ) . METHOD_1 ( ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE android.content.Intent ) TYPE android.content.Intent ( NAME VAR_4 ) NAME VAR_4 ( INIT = new android.content.Intent ( STRING_1 ) ) INIT = new android.content.Intent ( STRING_1 ) ) VAR VAR (  VAR_4 . METHOD_5 ( context . METHOD_6 ( ) ) )  VAR_4 . METHOD_5 ( context . METHOD_6 ( ) ) (  return VAR_4 ; )  return VAR_4 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN int[] ) RETURN int[] ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int[] ) TYPE int[] ( NAME VAR_2 ) NAME VAR_2 ( INIT = new int [ 6 ] ) INIT = new int [ 6 ] ) VAR VAR (  VAR_2 [ 0 ] = METHOD_2 ( VAR_1 ) )  VAR_2 [ 0 ] = METHOD_2 ( VAR_1 ) (  VAR_2 [ 1 ] = METHOD_2 ( VAR_1 ) )  VAR_2 [ 1 ] = METHOD_2 ( VAR_1 ) (  VAR_2 [ 2 ] = METHOD_2 ( VAR_1 ) )  VAR_2 [ 2 ] = METHOD_2 ( VAR_1 ) (  VAR_2 [ 3 ] = METHOD_2 ( VAR_1 ) )  VAR_2 [ 3 ] = METHOD_2 ( VAR_1 ) (  VAR_2 [ 4 ] = METHOD_2 ( VAR_1 ) )  VAR_2 [ 4 ] = METHOD_2 ( VAR_1 ) (  VAR_2 [ 5 ] = METHOD_2 ( VAR_1 ) )  VAR_2 [ 5 ] = METHOD_2 ( VAR_1 ) (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( new int [ ] { VAR_2 , VAR_3 } ) ) INIT = new TYPE_1 ( new int [ ] { VAR_2 , VAR_3 } ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_2 ( ) . addFeature ( VAR_5 ) . addFeature ( VAR_6 ) . build ( ) ) INIT = new TYPE_2 ( ) . addFeature ( VAR_5 ) . addFeature ( VAR_6 ) . build ( ) ) VAR VAR (  TYPE_3 . assertEquals ( VAR_1 , VAR_4 ) )  TYPE_3 . assertEquals ( VAR_1 , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( ! ( VAR_1 ) ) || ( ! ( VAR_2 ) ) ) COND ( ! ( VAR_1 ) ) || ( ! ( VAR_2 ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_3 ) == null ) COND ( VAR_3 ) == null ( THEN THEN (  throw new TYPE_1 ( STRING_1 ) ; )  throw new TYPE_1 ( STRING_1 ) ; ) THEN THEN ) IF IF ( IF IF ( COND ! ( VAR_3 . METHOD_2 ( ) ) ) COND ! ( VAR_3 . METHOD_2 ( ) ) ( THEN THEN (  throw new TYPE_1 ( ( STRING_2 + STRING_3 ) ) ; )  throw new TYPE_1 ( ( STRING_2 + STRING_3 ) ) ; ) THEN THEN ) IF IF (  VAR_3 = null )  VAR_3 = null (  VAR_1 = false )  VAR_1 = false (  VAR_2 = false )  VAR_2 = false ) BLOCK BLOCK ) METHOD METHOD
