( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE android.os.Bundle ) TYPE android.os.Bundle ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  super . METHOD_1 ( VAR_1 ) )  super . METHOD_1 ( VAR_1 ) (  VAR_2 = new TYPE_1 ( this ) )  VAR_2 = new TYPE_1 ( this ) (  METHOD_2 ( VAR_2 ) )  METHOD_2 ( VAR_2 ) (  VAR_3 = new TYPE_2 ( ) )  VAR_3 = new TYPE_2 ( ) ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK (  METHOD_3 ( ) )  METHOD_3 ( ) (  VAR_3 . METHOD_4 ( this , VAR_5 ) )  VAR_3 . METHOD_4 ( this , VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD (  VAR_4 = new java.lang.Runnable ( ) { public void run ( ) { METHOD_3 ( ) ; VAR_3 . METHOD_4 ( this , VAR_5 ) ; } } )  VAR_4 = new java.lang.Runnable ( ) { public void run ( ) { METHOD_3 ( ) ; VAR_3 . METHOD_4 ( this , VAR_5 ) ; } } (  VAR_3 . METHOD_4 ( VAR_4 , VAR_5 ) )  VAR_3 . METHOD_4 ( VAR_4 , VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < TYPE_1 > ( ) { { METHOD_2 ( METHOD_3 ( VAR_2 ) . build ( ) ) ; METHOD_2 ( METHOD_3 ( VAR_3 ) . build ( ) ) ; } } ) INIT = new java.util.ArrayList < TYPE_1 > ( ) { { METHOD_2 ( METHOD_3 ( VAR_2 ) . build ( ) ) ; METHOD_2 ( METHOD_3 ( VAR_3 ) . build ( ) ) ; } } ) VAR VAR ( STATIC-BLOCK STATIC-BLOCK (  METHOD_2 ( METHOD_3 ( VAR_2 ) . build ( ) ) )  METHOD_2 ( METHOD_3 ( VAR_2 ) . build ( ) ) (  METHOD_2 ( METHOD_3 ( VAR_3 ) . build ( ) ) )  METHOD_2 ( METHOD_3 ( VAR_3 ) . build ( ) ) ) STATIC-BLOCK STATIC-BLOCK (  TYPE_2 . when ( VAR_4 . METHOD_4 ( org.mockito.Matchers . METHOD_5 ( VAR_5 class ) ) ) . thenReturn ( VAR_1 ) )  TYPE_2 . when ( VAR_4 . METHOD_4 ( org.mockito.Matchers . METHOD_5 ( VAR_5 class ) ) ) . thenReturn ( VAR_1 ) (  assertEquals ( 2 , VAR_6 . METHOD_4 ( ) . size ( ) ) )  assertEquals ( 2 , VAR_6 . METHOD_4 ( ) . size ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME locale ) NAME locale ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 . METHOD_2 ( ) ) COND VAR_1 . METHOD_2 ( ) ( THEN THEN (  return STRING_1 ; )  return STRING_1 ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME result ) NAME result ( INIT = TYPE_2 . METHOD_3 ( METHOD_4 ( ) , locale . METHOD_4 ( ) ) ) INIT = TYPE_2 . METHOD_3 ( METHOD_4 ( ) , locale . METHOD_4 ( ) ) ) VAR VAR ( IF IF ( COND result == null ) COND result == null ( THEN THEN (  result = TYPE_2 . METHOD_3 ( METHOD_4 ( ) , TYPE_1 . METHOD_5 ( ) . METHOD_4 ( ) ) )  result = TYPE_2 . METHOD_3 ( METHOD_4 ( ) , TYPE_1 . METHOD_5 ( ) . METHOD_4 ( ) ) ) THEN THEN ) IF IF (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) == null ) COND ( VAR_1 ) == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  TYPE_1 . METHOD_2 ( VAR_2 ) )  TYPE_1 . METHOD_2 ( VAR_2 ) ( IF IF ( COND ( VAR_1 . METHOD_3 ( ) ) == ( VAR_3 ) ) COND ( VAR_1 . METHOD_3 ( ) ) == ( VAR_3 ) ( THEN THEN (  assertTrue ( VAR_1 . METHOD_4 ( ) ) )  assertTrue ( VAR_1 . METHOD_4 ( ) ) (  return ; )  return ; ) THEN THEN ) IF IF (  assertEquals ( VAR_4 , VAR_1 . METHOD_3 ( ) ) )  assertEquals ( VAR_4 , VAR_1 . METHOD_3 ( ) ) (  assertFalse ( VAR_1 . METHOD_4 ( ) ) )  assertFalse ( VAR_1 . METHOD_4 ( ) ) (  VAR_1 . METHOD_1 ( ) )  VAR_1 . METHOD_1 ( ) (  METHOD_5 ( ) )  METHOD_5 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  VAR_1 )  VAR_1 ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME size ) NAME size ( INIT = VAR_1 . length ( ) ) INIT = VAR_1 . length ( ) ) VAR VAR ( IF IF ( COND ( count ) != size ) COND ( count ) != size ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  return METHOD_2 ( 0 , new java.lang.String ( 0 , size , VAR_1 . METHOD_3 ( ) ) , 0 , size ) ; )  return METHOD_2 ( 0 , new java.lang.String ( 0 , size , VAR_1 . METHOD_3 ( ) ) , 0 , size ) ; ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  < TYPE_2 > VAR_1 = TYPE_1 . METHOD_2 ( VAR_2 class ) )  < TYPE_2 > VAR_1 = TYPE_1 . METHOD_2 ( VAR_2 class ) (  new TYPE_3 ( mContext ) )  new TYPE_3 ( mContext ) (  org.mockito.Mockito.verify ( mContext ) . METHOD_3 ( org.mockito.Matchers . METHOD_4 ( VAR_3 class ) , VAR_1 . METHOD_5 ( ) ) )  org.mockito.Mockito.verify ( mContext ) . METHOD_3 ( org.mockito.Matchers . METHOD_4 ( VAR_3 class ) , VAR_1 . METHOD_5 ( ) ) (  assertEquals ( 2 , VAR_1 . METHOD_6 ( ) . METHOD_7 ( ) ) )  assertEquals ( 2 , VAR_1 . METHOD_6 ( ) . METHOD_7 ( ) ) (  assertEquals ( VAR_4 , VAR_1 . METHOD_6 ( ) . METHOD_8 ( 0 ) ) )  assertEquals ( VAR_4 , VAR_1 . METHOD_6 ( ) . METHOD_8 ( 0 ) ) (  assertEquals ( VAR_5 , VAR_1 . METHOD_6 ( ) . METHOD_8 ( 1 ) ) )  assertEquals ( VAR_5 , VAR_1 . METHOD_6 ( ) . METHOD_8 ( 1 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME key ) NAME key ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_2 = METHOD_2 ( key ) )  VAR_2 = METHOD_2 ( key ) ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( key . length ( ) ) - ( TYPE_3 . METHOD_3 ( VAR_2 ) ) ) INIT = ( key . length ( ) ) - ( TYPE_3 . METHOD_3 ( VAR_2 ) ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( INIT = key . METHOD_4 ( 0 , VAR_3 ) ) INIT = key . METHOD_4 ( 0 , VAR_3 ) ) VAR VAR (  VAR_5 = TYPE_4 . METHOD_5 ( VAR_4 ) )  VAR_5 = TYPE_4 . METHOD_5 ( VAR_4 ) ( IF IF ( COND ( VAR_5 ) == null ) COND ( VAR_5 ) == null ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF (  return VAR_6 ; )  return VAR_6 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) == null ) COND ( VAR_1 ) == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  TYPE_1 . METHOD_2 ( VAR_2 ) )  TYPE_1 . METHOD_2 ( VAR_2 ) ( IF IF ( COND ( VAR_1 . METHOD_3 ( ) ) == ( VAR_3 ) ) COND ( VAR_1 . METHOD_3 ( ) ) == ( VAR_3 ) ( THEN THEN (  assertFalse ( VAR_1 . METHOD_4 ( ) ) )  assertFalse ( VAR_1 . METHOD_4 ( ) ) (  return ; )  return ; ) THEN THEN ) IF IF (  assertEquals ( VAR_4 , VAR_1 . METHOD_3 ( ) ) )  assertEquals ( VAR_4 , VAR_1 . METHOD_3 ( ) ) (  assertTrue ( VAR_1 . METHOD_4 ( ) ) )  assertTrue ( VAR_1 . METHOD_4 ( ) ) (  VAR_1 . METHOD_1 ( ) )  VAR_1 . METHOD_1 ( ) (  METHOD_5 ( ) )  METHOD_5 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME p ) NAME p ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME s ) NAME s ( INIT = new TYPE_3 ( p , STRING_1 , STRING_2 , STRING_3 , null , null ) ) INIT = new TYPE_3 ( p , STRING_1 , STRING_2 , STRING_3 , null , null ) ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ( INIT = s . METHOD_2 ( null ) ) INIT = s . METHOD_2 ( null ) ) VAR VAR (  assertTrue ( STRING_4 , ( VAR_1 instanceof TYPE_4 ) ) )  assertTrue ( STRING_4 , ( VAR_1 instanceof TYPE_4 ) ) ( TRY TRY ( BLOCK BLOCK (  VAR_1 = s . METHOD_2 ( new java.lang.Object ( ) ) )  VAR_1 = s . METHOD_2 ( new java.lang.Object ( ) ) (  fail ( STRING_5 ) )  fail ( STRING_5 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME b ) NAME b ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_2 . METHOD_2 ( VAR_1 , STRING_1 ) )  TYPE_2 . METHOD_2 ( VAR_1 , STRING_1 ) (  mRS . METHOD_3 ( ) )  mRS . METHOD_3 ( ) (  METHOD_4 ( b ) )  METHOD_4 ( b ) (  METHOD_5 ( b ) )  METHOD_5 ( b ) (  mRS . METHOD_6 ( METHOD_7 ( mRS ) , b ) )  mRS . METHOD_6 ( METHOD_7 ( mRS ) , b ) (  TYPE_2 . METHOD_8 ( VAR_1 ) )  TYPE_2 . METHOD_8 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<android.bluetooth.BluetoothDevice> ) RETURN java.util.List<android.bluetooth.BluetoothDevice> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int[] ) TYPE int[] ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  android.util.Log.v ( VAR_2 . TAG , ( STRING_1 + ( TYPE_1 . toString ( VAR_1 ) ) ) ) )  android.util.Log.v ( VAR_2 . TAG , ( STRING_1 + ( TYPE_1 . toString ( VAR_1 ) ) ) ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME service ) NAME service ( INIT = VAR_3 ) INIT = VAR_3 ) VAR VAR ( IF IF ( COND service != null ) COND service != null ( THEN THEN ( TRY TRY ( BLOCK BLOCK (  return service . METHOD_1 ( VAR_1 ) ; )  return service . METHOD_1 ( VAR_1 ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME e ) NAME e ( BLOCK BLOCK (  android.util.Log.e ( VAR_2 . TAG , e.toString ( ) ) )  android.util.Log.e ( VAR_2 . TAG , e.toString ( ) ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) THEN THEN ( ELSE ELSE (  android.util.Log.w ( VAR_2 . TAG , STRING_2 ) )  android.util.Log.w ( VAR_2 . TAG , STRING_2 ) ) ELSE ELSE ) IF IF (  return new java.util.ArrayList < android.bluetooth.BluetoothDevice > ( ) ; )  return new java.util.ArrayList < android.bluetooth.BluetoothDevice > ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 . METHOD_2 ( ) ) COND VAR_1 . METHOD_2 ( ) ( THEN THEN ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_3 ( ) ) INIT = VAR_1 . METHOD_3 ( ) ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < ( VAR_2 . length ) ) COND i < ( VAR_2 . length ) ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_1 ( new java.io.File ( VAR_1 , VAR_2 [ i ] ) ) ) INIT = METHOD_1 ( new java.io.File ( VAR_1 , VAR_2 [ i ] ) ) ) VAR VAR ( IF IF ( COND ! VAR_3 ) COND ! VAR_3 ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR FOR ) THEN THEN ) IF IF (  return VAR_1 . METHOD_4 ( ) ; )  return VAR_1 . METHOD_4 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME getName ) NAME getName ( PARAMS PARAMS ( VAR VAR ( TYPE com.android.jack.ir.ast.JMethod ) TYPE com.android.jack.ir.ast.JMethod ( NAME method ) NAME method ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.StringBuilder ) TYPE java.lang.StringBuilder ( NAME sb ) NAME sb ( INIT = new java.lang.StringBuilder ( ) ) INIT = new java.lang.StringBuilder ( ) ) VAR VAR (  sb.append ( CHAR_1 ) )  sb.append ( CHAR_1 ) ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME p ) NAME p ( IN method . METHOD_1 ( ) ) IN method . METHOD_1 ( ) ( BLOCK BLOCK ( IF IF ( COND ( p . METHOD_2 ( VAR_1 class ) ) != null ) COND ( p . METHOD_2 ( VAR_1 class ) ) != null ( THEN THEN (  continue ; )  continue ; ) THEN THEN ) IF IF (  sb.append ( getName ( p . METHOD_3 ( ) ) ) )  sb.append ( getName ( p . METHOD_3 ( ) ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  sb.append ( CHAR_2 ) )  sb.append ( CHAR_2 ) (  sb.append ( getName ( method . METHOD_3 ( ) ) ) )  sb.append ( getName ( method . METHOD_3 ( ) ) ) (  return sb . toString ( ) ; )  return sb . toString ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME context ) NAME context ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME call ) NAME call ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  mContext = TYPE_3 . METHOD_2 ( context ) )  mContext = TYPE_3 . METHOD_2 ( context ) ( IF IF ( COND call != null ) COND call != null ( THEN THEN (  VAR_1 = call )  VAR_1 = call ( IF IF ( COND ! ( call . METHOD_3 ( ) ) ) COND ! ( call . METHOD_3 ( ) ) ( THEN THEN (  METHOD_4 ( call , true , ( ( call . METHOD_5 ( ) ) == ( VAR_2 ) ) ) )  METHOD_4 ( call , true , ( ( call . METHOD_5 ( ) ) == ( VAR_2 ) ) ) ) THEN THEN ( ELSE ELSE (  METHOD_6 ( null , true , true ) )  METHOD_6 ( null , true , true ) ) ELSE ELSE ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.util.List<java.lang.String> ) RETURN java.util.List<java.lang.String> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) , VAR_3 ) ) INIT = TYPE_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) , VAR_3 ) ) VAR VAR ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_6 ) NAME METHOD_6 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return VAR_4 . METHOD_7 ( ) ; )  return VAR_4 . METHOD_7 ( ) ; ) BLOCK BLOCK ) METHOD METHOD (  return TYPE_3 . METHOD_5 ( VAR_2 , new TYPE_4 < TYPE_2 , java.lang.String > ( ) { public java.lang.String METHOD_6 ( TYPE_2 VAR_4 ) { return VAR_4 . METHOD_7 ( ) ; } } ) ; )  return TYPE_3 . METHOD_5 ( VAR_2 , new TYPE_4 < TYPE_2 , java.lang.String > ( ) { public java.lang.String METHOD_6 ( TYPE_2 VAR_4 ) { return VAR_4 . METHOD_7 ( ) ; } } ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_3 . METHOD_2 ( this , VAR_1 , VAR_2 ) )  VAR_3 . METHOD_2 ( this , VAR_1 , VAR_2 ) ( SYNCHRONIZED SYNCHRONIZED (  VAR_4 )  VAR_4 ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_5 ) ) COND ! ( VAR_5 ) ( THEN THEN ( TRY TRY ( BLOCK BLOCK (  VAR_4 . METHOD_3 ( ) )  VAR_4 . METHOD_3 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK (  TYPE_4 . d ( STRING_1 ) )  TYPE_4 . d ( STRING_1 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) THEN THEN ) IF IF (  VAR_6 . METHOD_4 ( ) )  VAR_6 . METHOD_4 ( ) ( IF IF ( COND VAR_4 . METHOD_5 ( ) ) COND VAR_4 . METHOD_5 ( ) ( THEN THEN (  return ; )  return ; ) THEN THEN ( ELSE ELSE (  VAR_4 . METHOD_6 ( false ) )  VAR_4 . METHOD_6 ( false ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_1 ( VAR_2 ) ) INIT = TYPE_1 . METHOD_1 ( VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME s ) NAME s ( INIT = new TYPE_2 ( VAR_1 , VAR_3 , VAR_4 ) ) INIT = new TYPE_2 ( VAR_1 , VAR_3 , VAR_4 ) ) VAR VAR (  VAR_1 . METHOD_2 ( VAR_5 ) )  VAR_1 . METHOD_2 ( VAR_5 ) (  METHOD_3 ( s ) )  METHOD_3 ( s ) (  s . METHOD_4 ( ) )  s . METHOD_4 ( ) (  VAR_1 . METHOD_5 ( ) )  VAR_1 . METHOD_5 ( ) (  METHOD_6 ( ) )  METHOD_6 ( ) (  VAR_1 . METHOD_7 ( ) )  VAR_1 . METHOD_7 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private synchronized ) MODIFIER private synchronized ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME address ) NAME address ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  android.util.Log.v ( VAR_3 . TAG , ( STRING_1 + VAR_1 ) ) )  android.util.Log.v ( VAR_3 . TAG , ( STRING_1 + VAR_1 ) ) ) THEN THEN ) IF IF ( VAR VAR ( TYPE android.os.Message ) TYPE android.os.Message ( NAME msg ) NAME msg ( INIT = VAR_4 . METHOD_2 ( VAR_5 ) ) INIT = VAR_4 . METHOD_2 ( VAR_5 ) ) VAR VAR (  msg.obj = address )  msg.obj = address (  msg.arg1 = ( VAR_1 ) ? 1 : 0 )  msg.arg1 = ( VAR_1 ) ? 1 : 0 (  VAR_4 . METHOD_3 ( msg ) )  VAR_4 . METHOD_3 ( msg ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public final ) MODIFIER public final ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME key ) NAME key ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_4 = false )  VAR_4 = false (  TYPE_6 . METHOD_2 ( VAR_1 ) )  TYPE_6 . METHOD_2 ( VAR_1 ) ( IF IF ( COND ( VAR_5 ) != null ) COND ( VAR_5 ) != null ( THEN THEN (  VAR_5 . METHOD_3 ( VAR_1 , key , VAR_2 , VAR_3 ) )  VAR_5 . METHOD_3 ( VAR_1 , key , VAR_2 , VAR_3 ) ) THEN THEN ( ELSE ELSE (  METHOD_4 ( VAR_6 , VAR_1 , key , VAR_2 , null , VAR_3 ) )  METHOD_4 ( VAR_6 , VAR_1 , key , VAR_2 , null , VAR_3 ) ) ELSE ELSE ) IF IF (  VAR_4 = true )  VAR_4 = true (  this . VAR_1 = VAR_1 )  this . VAR_1 = VAR_1 ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN byte[] ) RETURN byte[] ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_2 ( VAR_2 ) ) INIT = new TYPE_2 ( VAR_2 ) ) VAR VAR (  VAR_3 . METHOD_2 ( VAR_1 ) )  VAR_3 . METHOD_2 ( VAR_1 ) (  VAR_3 . METHOD_3 ( ) )  VAR_3 . METHOD_3 ( ) (  VAR_3 . METHOD_4 ( ) )  VAR_3 . METHOD_4 ( ) (  return VAR_2 . METHOD_5 ( ) ; )  return VAR_2 . METHOD_5 ( ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Throwable ) TYPE java.lang.Throwable ( NAME t ) NAME t ( BLOCK BLOCK (  METHOD_6 ( t ) )  METHOD_6 ( t ) (  return new byte [ 0 ] ; )  return new byte [ 0 ] ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME node ) NAME node ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME type ) NAME type ( INIT = TYPE_4 . METHOD_2 ( node ) ) INIT = TYPE_4 . METHOD_2 ( node ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ( INIT = TYPE_4 . getName ( node ) ) INIT = TYPE_4 . getName ( node ) ) VAR VAR ( IF IF ( COND ( type != null ) && ( name != null ) ) COND ( type != null ) && ( name != null ) ( THEN THEN (  return new TYPE_1 ( name , type , node ) ; )  return new TYPE_1 ( name , type , node ) ; ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN java.util.List<java.lang.String> ) RETURN java.util.List<java.lang.String> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.ArrayList < java.lang.String > ( VAR_3 ) ) INIT = new java.util.ArrayList < java.lang.String > ( VAR_3 ) ) VAR VAR ( IF IF ( COND ( VAR_4 ) != null ) COND ( VAR_4 ) != null ( THEN THEN (  VAR_2 . METHOD_2 ( STRING_1 ) )  VAR_2 . METHOD_2 ( STRING_1 ) (  VAR_2 . METHOD_2 ( VAR_4 . METHOD_3 ( STRING_2 , STRING_3 ) ) )  VAR_2 . METHOD_2 ( VAR_4 . METHOD_3 ( STRING_2 , STRING_3 ) ) ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_5 ) != null ) COND ( VAR_5 ) != null ( THEN THEN (  VAR_2 . METHOD_2 ( STRING_4 ) )  VAR_2 . METHOD_2 ( STRING_4 ) (  VAR_2 . METHOD_2 ( VAR_5 . METHOD_3 ( STRING_2 , STRING_3 ) ) )  VAR_2 . METHOD_2 ( VAR_5 . METHOD_3 ( STRING_2 , STRING_3 ) ) ) THEN THEN ) IF IF (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME project ) NAME project ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( ) ) INIT = TYPE_2 . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN ( TRY TRY ( BLOCK BLOCK (  return ( TYPE_2 . METHOD_3 ( project , VAR_1 ) ) != null ; )  return ( TYPE_2 . METHOD_3 ( project , VAR_1 ) ) != null ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ( BLOCK BLOCK (  TYPE_3 . log ( e , null ) )  TYPE_3 . log ( e , null ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) THEN THEN ) IF IF (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME e ) NAME e ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_2 ( null , STRING_1 ) ) INIT = VAR_2 . METHOD_2 ( null , STRING_1 ) ) VAR VAR ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . METHOD_3 ( ) ) INIT = VAR_1 . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_5 . METHOD_4 ( VAR_3 . METHOD_5 ( ) , VAR_5 . METHOD_3 ( ) . METHOD_5 ( ) ) ) INIT = TYPE_5 . METHOD_4 ( VAR_3 . METHOD_5 ( ) , VAR_5 . METHOD_3 ( ) . METHOD_5 ( ) ) ) VAR VAR (  METHOD_6 ( VAR_4 . toString ( ) , VAR_3 , ( - 1 ) ) )  METHOD_6 ( VAR_4 . toString ( ) , VAR_3 , ( - 1 ) ) (  METHOD_7 ( ) )  METHOD_7 ( ) (  VAR_6 = true )  VAR_6 = true ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( TYPE_2 . METHOD_2 ( ) ) <= INT_1 ) COND ( TYPE_2 . METHOD_2 ( ) ) <= INT_1 ( THEN THEN (  return device . METHOD_3 ( new TYPE_3 ( ) . METHOD_4 ( STRING_1 ) ) . METHOD_5 ( ) ; )  return device . METHOD_3 ( new TYPE_3 ( ) . METHOD_4 ( STRING_1 ) ) . METHOD_5 ( ) ; ) THEN THEN ( ELSE ELSE (  return device . METHOD_3 ( new TYPE_3 ( ) . text ( STRING_1 ) ) . METHOD_5 ( ) ; )  return device . METHOD_3 ( new TYPE_3 ( ) . text ( STRING_1 ) ) . METHOD_5 ( ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ! ( METHOD_2 ( ) ) ) COND ! ( METHOD_2 ( ) ) ( THEN THEN (  throw new TYPE_2 ( ) ; )  throw new TYPE_2 ( ) ; ) THEN THEN ) IF IF (  VAR_1 = ( VAR_2 ) ++ )  VAR_1 = ( VAR_2 ) ++ (  return type . get ( new TYPE_3 < TYPE_4 , TYPE_5 > ( ( ( TYPE_4 ) ( VAR_3 [ VAR_1 ] ) ) , ( ( TYPE_5 ) ( VAR_4 . values [ VAR_1 ] ) ) , VAR_4 ) ) ; )  return type . get ( new TYPE_3 < TYPE_4 , TYPE_5 > ( ( ( TYPE_4 ) ( VAR_3 [ VAR_1 ] ) ) , ( ( TYPE_5 ) ( VAR_4 . values [ VAR_1 ] ) ) , VAR_4 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ( VAR VAR ( TYPE java.util.List<?extendsTYPE_2> ) TYPE java.util.List<?extendsTYPE_2> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  return METHOD_2 ( name , VAR_1 , VAR_2 ) ; )  return METHOD_2 ( name , VAR_1 , VAR_2 ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME e ) NAME e ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME id ) NAME id ( INIT = METHOD_3 ( name , VAR_1 , VAR_2 ) ) INIT = METHOD_3 ( name , VAR_1 , VAR_2 ) ) VAR VAR ( IF IF ( COND id == null ) COND id == null ( THEN THEN (  id = new TYPE_1 ( name , VAR_1 , VAR_2 ) )  id = new TYPE_1 ( name , VAR_1 , VAR_2 ) (  VAR_3 . METHOD_4 ( id ) )  VAR_3 . METHOD_4 ( id ) ) THEN THEN ) IF IF (  return id ; )  return id ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( TYPE_1 . METHOD_2 ( ) ) ) COND ! ( TYPE_1 . METHOD_2 ( ) ) ( THEN THEN (  android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) )  android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME service ) NAME service ( INIT = METHOD_3 ( ) ) INIT = METHOD_3 ( ) ) VAR VAR ( IF IF ( COND service == null ) COND service == null ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  return service . METHOD_1 ( VAR_1 , VAR_2 ) ; )  return service . METHOD_1 ( VAR_1 , VAR_2 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = this . VAR_1 ) INIT = this . VAR_1 ) VAR VAR (  VAR_1 . METHOD_2 ( ) )  VAR_1 . METHOD_2 ( ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  result = ( ( size ) > 0 ) ? ( ( TYPE_1 ) ( VAR_2 [ 0 ] ) ) : null )  result = ( ( size ) > 0 ) ? ( ( TYPE_1 ) ( VAR_2 [ 0 ] ) ) : null ) BLOCK BLOCK ( FINALLY FINALLY (  VAR_1 . METHOD_3 ( ) )  VAR_1 . METHOD_3 ( ) ) FINALLY FINALLY ) TRY TRY (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME uid ) NAME uid ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int[] ) TYPE int[] ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE int[][] ) TYPE int[][] ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_6 ) NAME VAR_6 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( ) )  TYPE_1 . METHOD_2 ( ) (  TYPE_2 . METHOD_3 ( ) )  TYPE_2 . METHOD_3 ( ) (  TYPE_3 . METHOD_4 ( ) )  TYPE_3 . METHOD_4 ( ) ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_7 ) NAME VAR_7 ( INIT = TYPE_3 . METHOD_5 ( uid , VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ) INIT = TYPE_3 . METHOD_5 ( uid , VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ) VAR VAR ( IF IF ( COND VAR_7 == 0 ) COND VAR_7 == 0 ( THEN THEN (  TYPE_4 . METHOD_6 ( true , VAR_3 ) )  TYPE_4 . METHOD_6 ( true , VAR_3 ) ) THEN THEN ) IF IF (  TYPE_2 . METHOD_7 ( ) )  TYPE_2 . METHOD_7 ( ) (  return VAR_7 ; )  return VAR_7 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME element ) NAME element ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND element instanceof TYPE_1 ) COND element instanceof TYPE_1 ( THEN THEN ( IF IF ( COND VAR_1 == 0 ) COND VAR_1 == 0 ( THEN THEN (  return ( ( TYPE_1 ) ( element ) ) . METHOD_2 ( ) ; )  return ( ( TYPE_1 ) ( element ) ) . METHOD_2 ( ) ; ) THEN THEN ( ELSE ELSE (  return ( ( TYPE_1 ) ( element ) ) . METHOD_3 ( ) ; )  return ( ( TYPE_1 ) ( element ) ) . METHOD_3 ( ) ; ) ELSE ELSE ) IF IF ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_2 ) ( element ) ) ) INIT = ( ( TYPE_2 ) ( element ) ) ) VAR VAR ( SWITCH SWITCH ( NAME VAR_1 ) NAME VAR_1 ( CASE 0 ( BLOCK BLOCK (  return VAR_2 . METHOD_4 ( ) ; )  return VAR_2 . METHOD_4 ( ) ; ) BLOCK BLOCK ) CASE 0 ( CASE 1 ( BLOCK BLOCK (  return VAR_2 . METHOD_5 ( ) ; )  return VAR_2 . METHOD_5 ( ) ; ) BLOCK BLOCK ) CASE 1 ) SWITCH SWITCH (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 . length ( ) ) == 0 ) COND ( VAR_1 . length ( ) ) == 0 ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . METHOD_2 ( ) ) INIT = VAR_3 . METHOD_2 ( ) ) VAR VAR (  return ( VAR_2 != null ) && ( VAR_2 . METHOD_1 ( VAR_1 ) ) ; )  return ( VAR_2 != null ) && ( VAR_2 . METHOD_1 ( VAR_1 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME out ) NAME out ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME os ) NAME os ( INIT = null ) INIT = null ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  os = new TYPE_5 ( out . METHOD_2 ( ) ) )  os = new TYPE_5 ( out . METHOD_2 ( ) ) (  VAR_1 . METHOD_3 ( os ) )  VAR_1 . METHOD_3 ( os ) ) BLOCK BLOCK ( FINALLY FINALLY ( IF IF ( COND os != null ) COND os != null ( THEN THEN (  os . METHOD_4 ( ) )  os . METHOD_4 ( ) ) THEN THEN ) IF IF ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_3 ( e ) ; )  throw new TYPE_3 ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( ( VAR_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) || ( VAR_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) ) || ( VAR_4 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) ) || ( VAR_5 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) ) COND ( ( ( VAR_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) || ( VAR_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) ) || ( VAR_4 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) ) || ( VAR_5 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( INT_1 , STRING_1 ) ) INIT = TYPE_1 . METHOD_2 ( INT_1 , STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME f ) NAME f ( INIT = TYPE_1 . METHOD_3 ( ) ) INIT = TYPE_1 . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME out ) NAME out ( INIT = TYPE_1 . METHOD_4 ( f ) ) INIT = TYPE_1 . METHOD_4 ( f ) ) VAR VAR (  out . METHOD_5 ( new TYPE_3 ( VAR_1 ) ) )  out . METHOD_5 ( new TYPE_3 ( VAR_1 ) ) (  out . METHOD_6 ( ) )  out . METHOD_6 ( ) (  out . METHOD_7 ( ) )  out . METHOD_7 ( ) ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_4 ( f ) ) INIT = new TYPE_4 ( f ) ) VAR VAR (  assertNotNull ( VAR_2 . METHOD_8 ( VAR_1 ) ) )  assertNotNull ( VAR_2 . METHOD_8 ( VAR_1 ) ) (  VAR_2 . METHOD_7 ( ) )  VAR_2 . METHOD_7 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND METHOD_2 ( ) ) COND METHOD_2 ( ) ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( IN VAR_3 ) IN VAR_3 ( BLOCK BLOCK ( IF IF ( COND VAR_2 . METHOD_3 ( ) . equals ( VAR_1 ) ) COND VAR_2 . METHOD_3 ( ) . equals ( VAR_1 ) ( THEN THEN (  return VAR_2 ; )  return VAR_2 ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF (  return METHOD_4 ( ) . METHOD_1 ( VAR_1 ) ; )  return METHOD_4 ( ) . METHOD_1 ( VAR_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  super . METHOD_1 ( VAR_1 ) )  super . METHOD_1 ( VAR_1 ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  METHOD_3 ( VAR_2 , VAR_3 , VAR_4 ) )  METHOD_3 ( VAR_2 , VAR_3 , VAR_4 ) (  METHOD_3 ( VAR_2 , VAR_5 , VAR_4 ) )  METHOD_3 ( VAR_2 , VAR_5 , VAR_4 ) (  METHOD_3 ( VAR_2 , VAR_6 , VAR_4 ) )  METHOD_3 ( VAR_2 , VAR_6 , VAR_4 ) (  METHOD_3 ( VAR_2 , VAR_7 , VAR_8 ) )  METHOD_3 ( VAR_2 , VAR_7 , VAR_8 ) (  METHOD_3 ( VAR_2 , VAR_9 , VAR_4 ) )  METHOD_3 ( VAR_2 , VAR_9 , VAR_4 ) (  METHOD_3 ( VAR_2 , VAR_10 , VAR_4 ) )  METHOD_3 ( VAR_2 , VAR_10 , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER synchronized ) MODIFIER synchronized ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_2 ) == null ) COND ( VAR_2 ) == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( IF IF ( COND ( TYPE_2 . METHOD_2 ( ) ) == false ) COND ( TYPE_2 . METHOD_2 ( ) ) == false ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_3 ) != null ) COND ( VAR_3 ) != null ( THEN THEN (  TYPE_3 . d ( STRING_1 , ( STRING_2 + VAR_1 ) ) )  TYPE_3 . d ( STRING_1 , ( STRING_2 + VAR_1 ) ) (  VAR_4 = VAR_1 )  VAR_4 = VAR_1 (  METHOD_3 ( ) )  METHOD_3 ( ) ) THEN THEN ( ELSE ELSE (  VAR_4 = VAR_1 )  VAR_4 = VAR_1 ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 == ( VAR_2 ) ) COND VAR_1 == ( VAR_2 ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ( ELSE ELSE ( IF IF ( COND VAR_1 < ( VAR_3 ) ) COND VAR_1 < ( VAR_3 ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ( ELSE ELSE ( IF IF ( COND VAR_1 == ( VAR_3 ) ) COND VAR_1 == ( VAR_3 ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ( ELSE ELSE ( IF IF ( COND ( VAR_3 ) != 0 ) COND ( VAR_3 ) != 0 ( THEN THEN (  VAR_4 . METHOD_2 ( ( VAR_1 - ( VAR_3 ) ) ) )  VAR_4 . METHOD_2 ( ( VAR_1 - ( VAR_3 ) ) ) ) THEN THEN ) IF IF (  VAR_3 = VAR_1 )  VAR_3 = VAR_1 (  return false ; )  return false ; ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected final ) MODIFIER protected final ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) != null ) COND ( VAR_1 ) != null ( THEN THEN (  TYPE_1 . METHOD_2 ( VAR_1 ) )  TYPE_1 . METHOD_2 ( VAR_1 ) ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_2 ) != null ) COND ( VAR_2 ) != null ( THEN THEN ( SYNCHRONIZED SYNCHRONIZED (  VAR_2 )  VAR_2 ( BLOCK BLOCK (  transitionTo ( VAR_3 ) )  transitionTo ( VAR_3 ) ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) THEN THEN ) IF IF ) BLOCK BLOCK ( FINALLY FINALLY (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME context ) NAME context ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME call ) NAME call ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME arg ) NAME arg ( INIT = TYPE_3 . METHOD_2 ( call , VAR_2 ) ) INIT = TYPE_3 . METHOD_2 ( call , VAR_2 ) ) VAR VAR ( IF IF ( COND arg == null ) COND arg == null ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF (  return new TYPE_6 ( context , VAR_1 ) . METHOD_3 ( arg ) ; )  return new TYPE_6 ( context , VAR_1 ) . METHOD_3 ( arg ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.Class<?> ) TYPE java.lang.Class<?> ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE TYPE_3<java.lang.String> ) TYPE TYPE_3<java.lang.String> ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_6 ) NAME VAR_6 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_7 ) NAME VAR_7 ) VAR VAR ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME args ) NAME args ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_8 ) NAME VAR_8 ( IN VAR_9 ) IN VAR_9 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_10 ) NAME VAR_10 ( INIT = VAR_8 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 , args ) ) INIT = VAR_8 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 , args ) ) VAR VAR ( IF IF ( COND VAR_10 != null ) COND VAR_10 != null ( THEN THEN (  return VAR_10 ; )  return VAR_10 ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME request ) NAME request ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME in ) NAME in ( INIT = METHOD_2 ( request ) ) INIT = METHOD_2 ( request ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = in . METHOD_3 ( ) ) INIT = in . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME flags ) NAME flags ( INIT = in . METHOD_3 ( ) ) INIT = in . METHOD_3 ( ) ) VAR VAR ( IF IF ( COND false ) COND false ( THEN THEN (  android.util.Log.v ( STRING_1 , ( ( ( STRING_2 + VAR_1 ) + STRING_3 ) + flags ) ) )  android.util.Log.v ( STRING_1 , ( ( ( STRING_2 + VAR_1 ) + STRING_3 ) + flags ) ) ) THEN THEN ) IF IF ( TRY TRY ( BLOCK BLOCK (  TYPE_3 . METHOD_4 ( VAR_1 , flags ) )  TYPE_3 . METHOD_4 ( VAR_1 , flags ) (  return null ; )  return null ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.RuntimeException ) TYPE java.lang.RuntimeException ( NAME re ) NAME re ( BLOCK BLOCK (  return METHOD_5 ( 1 , re . getMessage ( ) ) ; )  return METHOD_5 ( 1 , re . getMessage ( ) ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME args ) NAME args ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 = new char [ INT_1 * INT_2 ] [ ] )  VAR_1 = new char [ INT_1 * INT_2 ] [ ] ( IF IF ( COND ! ( Main . METHOD_2 ( VAR_1 ) ) ) COND ! ( Main . METHOD_2 ( VAR_1 ) ) ( THEN THEN (  java.lang.System.out.println ( STRING_1 ) )  java.lang.System.out.println ( STRING_1 ) ) THEN THEN ) IF IF ( IF IF ( COND ! ( Main . METHOD_3 ( ) ) ) COND ! ( Main . METHOD_3 ( ) ) ( THEN THEN (  java.lang.System.out.println ( STRING_2 ) )  java.lang.System.out.println ( STRING_2 ) ) THEN THEN ) IF IF (  TYPE_1 . METHOD_4 ( ) )  TYPE_1 . METHOD_4 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_2 ( ) ) INIT = VAR_2 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_2 . METHOD_3 ( ) ) INIT = VAR_2 . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_2 . METHOD_4 ( ) ) INIT = VAR_2 . METHOD_4 ( ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_3 * ( VAR_6 ) ) INIT = VAR_3 * ( VAR_6 ) ) VAR VAR ( VAR VAR ( TYPE char[] ) TYPE char[] ( NAME VAR_7 ) NAME VAR_7 ( INIT = new char [ VAR_5 ] ) INIT = new char [ VAR_5 ] ) VAR VAR (  TYPE_1 . METHOD_5 ( VAR_2 . METHOD_6 ( ) , 0 , VAR_7 , 0 , VAR_4 ) )  TYPE_1 . METHOD_5 ( VAR_2 . METHOD_6 ( ) , 0 , VAR_7 , 0 , VAR_4 ) (  VAR_2 = TYPE_2 . METHOD_7 ( VAR_7 , 0 , VAR_5 ) )  VAR_2 = TYPE_2 . METHOD_7 ( VAR_7 , 0 , VAR_5 ) (  VAR_2 . METHOD_2 ( VAR_1 ) )  VAR_2 . METHOD_2 ( VAR_1 ) (  VAR_2 . METHOD_4 ( VAR_4 ) )  VAR_2 . METHOD_4 ( VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE float ) TYPE float ( NAME value ) NAME value ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( value ) ) INIT = TYPE_1 . METHOD_2 ( value ) ) VAR VAR ( IF IF ( COND ( ( VAR_1 == INT_1 ) || ( VAR_1 == INT_2 ) ) || ( VAR_1 == INT_3 ) ) COND ( ( VAR_1 == INT_1 ) || ( VAR_1 == INT_2 ) ) || ( VAR_1 == INT_3 ) ( THEN THEN (  VAR_2 . METHOD_3 ( ( ( VAR_3 ) + ( ( int ) ( value ) ) ) ) )  VAR_2 . METHOD_3 ( ( ( VAR_3 ) + ( ( int ) ( value ) ) ) ) ) THEN THEN ( ELSE ELSE (  VAR_2 . METHOD_4 ( new TYPE_2 . Float ( value ) ) )  VAR_2 . METHOD_4 ( new TYPE_2 . Float ( value ) ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME index ) NAME index ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME res ) NAME res ( INIT = this ) INIT = this ) VAR VAR ) INIT INIT ( COND res != null ) COND res != null ( UPDATE UPDATE (  res = res . METHOD_2 ( ) )  res = res . METHOD_2 ( ) ) UPDATE UPDATE ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME obj ) NAME obj ( INIT = res . METHOD_3 ( index , null , this ) ) INIT = res . METHOD_3 ( index , null , this ) ) VAR VAR ( IF IF ( COND obj != null ) COND obj != null ( THEN THEN (  ( ( TYPE_2 ) ( obj ) ) . METHOD_4 ( METHOD_5 ( ) ) )  ( ( TYPE_2 ) ( obj ) ) . METHOD_4 ( METHOD_5 ( ) ) (  return obj ; )  return obj ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR FOR (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME result ) NAME result ) VAR VAR ( DO-WHILE DO-WHILE ( COND result . METHOD_4 ( ) ) COND result . METHOD_4 ( ) ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  result = TYPE_3 . METHOD_2 ( VAR_1 , VAR_2 ) )  result = TYPE_3 . METHOD_2 ( VAR_1 , VAR_2 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME e ) NAME e ( BLOCK BLOCK (  METHOD_3 ( e ) )  METHOD_3 ( e ) (  return ; )  return ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) DO-WHILE DO-WHILE ( IF IF ( COND ( result . METHOD_5 ( ) ) == ( VAR_3 ) ) COND ( result . METHOD_5 ( ) ) == ( VAR_3 ) ( THEN THEN (  METHOD_6 ( ) )  METHOD_6 ( ) ) THEN THEN ( ELSE ELSE (  METHOD_3 ( new TYPE_4 ( result . METHOD_5 ( ) ) ) )  METHOD_3 ( new TYPE_4 ( result . METHOD_5 ( ) ) ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.ArrayList<TYPE_2> ) TYPE java.util.ArrayList<TYPE_2> ( NAME config ) NAME config ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME rr ) NAME rr ( INIT = VAR_2 . METHOD_2 ( VAR_1 ) ) INIT = VAR_2 . METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND rr != null ) COND rr != null ( THEN THEN ( VAR VAR ( TYPE java.util.ArrayList<TYPE_4> ) TYPE java.util.ArrayList<TYPE_4> ( NAME ret ) NAME ret ( INIT = null ) INIT = null ) VAR VAR ( IF IF ( COND ( VAR_1 . error ) == ( VAR_3 ) ) COND ( VAR_1 . error ) == ( VAR_3 ) ( THEN THEN (  ret = TYPE_5 . METHOD_3 ( config , VAR_2 ) )  ret = TYPE_5 . METHOD_3 ( config , VAR_2 ) (  TYPE_6 . METHOD_4 ( VAR_4 , ret ) )  TYPE_6 . METHOD_4 ( VAR_4 , ret ) ) THEN THEN ) IF IF (  VAR_2 . METHOD_5 ( rr , VAR_1 , ret ) )  VAR_2 . METHOD_5 ( rr , VAR_1 , ret ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2<TYPE_3> ) TYPE TYPE_2<TYPE_3> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . METHOD_2 ( VAR_2 ) ) INIT = VAR_1 . METHOD_2 ( VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME v ) NAME v ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME id ) NAME id ( INIT = METHOD_3 ( VAR_2 , VAR_3 . METHOD_4 ( ) ) ) INIT = METHOD_3 ( VAR_2 , VAR_3 . METHOD_4 ( ) ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_5 ) NAME VAR_5 ( INIT = id ) INIT = id ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_6 ) NAME VAR_6 ( INIT = METHOD_5 ( VAR_3 . METHOD_4 ( ) ) ) INIT = METHOD_5 ( VAR_3 . METHOD_4 ( ) ) ) VAR VAR (  v = METHOD_6 ( VAR_2 , id , VAR_5 , VAR_6 , null , VAR_7 ) )  v = METHOD_6 ( VAR_2 , id , VAR_5 , VAR_6 , null , VAR_7 ) (  return v ; )  return v ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN java.lang.Class ) RETURN java.lang.Class ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.util.List<java.lang.Throwable> ) TYPE java.util.List<java.lang.Throwable> ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.Class ) TYPE java.lang.Class ( NAME result ) NAME result ( INIT = null ) INIT = null ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  result = TYPE_2 . METHOD_2 ( name , VAR_1 , VAR_2 ) )  result = TYPE_2 . METHOD_2 ( name , VAR_1 , VAR_2 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK ( IF IF ( COND VAR_3 != null ) COND VAR_3 != null ( THEN THEN (  VAR_3 . METHOD_3 ( e ) )  VAR_3 . METHOD_3 ( e ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME e ) NAME e ( BLOCK BLOCK ( IF IF ( COND VAR_3 != null ) COND VAR_3 != null ( THEN THEN (  VAR_3 . METHOD_3 ( e ) )  VAR_3 . METHOD_3 ( e ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_2 . METHOD_2 ( VAR_3 , VAR_4 ) )  VAR_2 . METHOD_2 ( VAR_3 , VAR_4 ) (  VAR_5 . METHOD_3 ( VAR_6 ) )  VAR_5 . METHOD_3 ( VAR_6 ) (  VAR_5 . METHOD_4 ( VAR_7 ) )  VAR_5 . METHOD_4 ( VAR_7 ) (  VAR_5 . METHOD_5 ( ) )  VAR_5 . METHOD_5 ( ) (  VAR_5 . METHOD_6 ( java.lang.Integer . toString ( VAR_1 ) ) )  VAR_5 . METHOD_6 ( java.lang.Integer . toString ( VAR_1 ) ) (  VAR_2 . METHOD_7 ( VAR_3 , ( ( VAR_4 ) + 1 ) ) )  VAR_2 . METHOD_7 ( VAR_3 , ( ( VAR_4 ) + 1 ) ) (  VAR_5 . METHOD_8 ( ) )  VAR_5 . METHOD_8 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2<TYPE_3> ) TYPE TYPE_2<TYPE_3> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME d ) NAME d ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_2 ( VAR_1 , d ) ) INIT = METHOD_2 ( VAR_1 , d ) ) VAR VAR ( IF IF ( COND ! VAR_3 ) COND ! VAR_3 ( THEN THEN ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( INIT = ( d . METHOD_3 ( ) ) ? d . METHOD_4 ( ) : d . METHOD_5 ( ) ) INIT = ( d . METHOD_3 ( ) ) ? d . METHOD_4 ( ) : d . METHOD_5 ( ) ) VAR VAR (  TYPE_4 . METHOD_6 ( VAR_1 . METHOD_7 ( ) , ( STRING_1 + VAR_4 ) ) )  TYPE_4 . METHOD_6 ( VAR_1 . METHOD_7 ( ) , ( STRING_1 + VAR_4 ) ) (  continue ; )  continue ; ) THEN THEN ) IF IF (  METHOD_8 ( VAR_1 , d ) )  METHOD_8 ( VAR_1 , d ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  METHOD_9 ( VAR_1 ) )  METHOD_9 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME en ) NAME en ( INIT = VAR_1 ) INIT = VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean[] ) TYPE boolean[] ( NAME VAR_2 ) NAME VAR_2 ( INIT = new boolean [ 1 ] ) INIT = new boolean [ 1 ] ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_2 . METHOD_2 ( STRING_1 ) ) INIT = TYPE_2 . METHOD_2 ( STRING_1 ) ) VAR VAR ( IF IF ( COND ! ( METHOD_3 ( ) ) ) COND ! ( METHOD_3 ( ) ) ( THEN THEN (  assertEquals ( STRING_2 , STRING_3 , VAR_3 . getName ( en , VAR_4 , VAR_2 ) ) )  assertEquals ( STRING_2 , STRING_3 , VAR_3 . getName ( en , VAR_4 , VAR_2 ) ) (  assertEquals ( STRING_4 , STRING_5 , VAR_3 . getName ( en , VAR_5 , VAR_2 ) ) )  assertEquals ( STRING_4 , STRING_5 , VAR_3 . getName ( en , VAR_5 , VAR_2 ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE float ) TYPE float ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( INT_1 ) )  TYPE_1 . METHOD_2 ( INT_1 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 ( METHOD_3 ( ) , VAR_3 , VAR_4 ) ) INIT = new TYPE_2 ( METHOD_3 ( ) , VAR_3 , VAR_4 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_5 ) NAME VAR_5 ( INIT = TYPE_3 . METHOD_4 ( VAR_2 , 100 ) ) INIT = TYPE_3 . METHOD_4 ( VAR_2 , 100 ) ) VAR VAR (  VAR_5 . METHOD_5 ( new TYPE_4 ( VAR_1 , new float [ ] { FLOAT_1 , FLOAT_1 , FLOAT_1 } ) ) )  VAR_5 . METHOD_5 ( new TYPE_4 ( VAR_1 , new float [ ] { FLOAT_1 , FLOAT_1 , FLOAT_1 } ) ) (  VAR_5 . METHOD_6 ( METHOD_7 ( ) ) )  VAR_5 . METHOD_6 ( METHOD_7 ( ) ) (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( VAR_2 , true ) ) INIT = new TYPE_1 ( VAR_2 , true ) ) VAR VAR (  VAR_1 . METHOD_2 ( null , new TYPE_2 ( ) ) )  VAR_1 . METHOD_2 ( null , new TYPE_2 ( ) ) (  org.junit.Assert.assertEquals ( VAR_3 , VAR_1 . METHOD_3 ( ) ) )  org.junit.Assert.assertEquals ( VAR_3 , VAR_1 . METHOD_3 ( ) ) (  VAR_1 . METHOD_4 ( null , new TYPE_3 ( ) , new TYPE_2 ( ) ) )  VAR_1 . METHOD_4 ( null , new TYPE_3 ( ) , new TYPE_2 ( ) ) (  org.junit.Assert.assertEquals ( VAR_3 , VAR_1 . METHOD_3 ( ) ) )  org.junit.Assert.assertEquals ( VAR_3 , VAR_1 . METHOD_3 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1[] ) TYPE TYPE_1[] ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( VAR_1 == null ) || ( ( VAR_1 . length ) < 1 ) ) || ( ( VAR_1 [ 0 ] ) == null ) ) COND ( ( VAR_1 == null ) || ( ( VAR_1 . length ) < 1 ) ) || ( ( VAR_1 [ 0 ] ) == null ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 [ 0 ] . METHOD_2 ( ) ) INIT = VAR_1 [ 0 ] . METHOD_2 ( ) ) VAR VAR (  VAR_3 . METHOD_1 ( VAR_2 ) )  VAR_3 . METHOD_1 ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . get ( new TYPE_2 ( STRING_1 , STRING_2 ) ) ) INIT = TYPE_1 . get ( new TYPE_2 ( STRING_1 , STRING_2 ) ) ) VAR VAR (  assertEquals ( STRING_3 , VAR_2 [ 1 ] ) )  assertEquals ( STRING_3 , VAR_2 [ 1 ] ) (  assertEquals ( STRING_4 , VAR_3 [ 1 ] ) )  assertEquals ( STRING_4 , VAR_3 [ 1 ] ) (  assertEquals ( STRING_5 , VAR_4 [ 1 ] ) )  assertEquals ( STRING_5 , VAR_4 [ 1 ] ) (  assertEquals ( STRING_6 , VAR_5 [ 1 ] ) )  assertEquals ( STRING_6 , VAR_5 [ 1 ] ) (  assertEquals ( STRING_7 , VAR_6 [ 1 ] ) )  assertEquals ( STRING_7 , VAR_6 [ 1 ] ) (  assertEquals ( STRING_5 , VAR_7 [ 1 ] ) )  assertEquals ( STRING_5 , VAR_7 [ 1 ] ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME key ) NAME key ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME value ) NAME value ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3<TYPE_1,TYPE_2> ) TYPE TYPE_3<TYPE_1,TYPE_2> ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 ) INIT = VAR_4 ) VAR VAR ( IF IF ( COND ( VAR_3 != ( VAR_5 ) ) && ( METHOD_2 ( VAR_3 ) ) ) COND ( VAR_3 != ( VAR_5 ) ) && ( METHOD_2 ( VAR_3 ) ) ( THEN THEN (  METHOD_3 ( VAR_3 . key ) )  METHOD_3 ( VAR_3 . key ) ) THEN THEN ) IF IF (  super . METHOD_1 ( VAR_1 , key , value , VAR_2 ) )  super . METHOD_1 ( VAR_1 , key , value , VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) . METHOD_3 ( ) ) INIT = METHOD_2 ( ) . METHOD_3 ( ) ) VAR VAR ( IF IF ( COND VAR_1 . METHOD_4 ( ) ) COND VAR_1 . METHOD_4 ( ) ( THEN THEN (  return new TYPE_1 ( ) ; )  return new TYPE_1 ( ) ; ) THEN THEN ) IF IF (  return TYPE_1 . METHOD_5 ( TYPE_2 . on ( CHAR_1 ) . METHOD_6 ( VAR_1 ) ) ; )  return TYPE_1 . METHOD_5 ( TYPE_2 . on ( CHAR_1 ) . METHOD_6 ( VAR_1 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.StringBuilder ) TYPE java.lang.StringBuilder ( NAME sb ) NAME sb ( INIT = new java.lang.StringBuilder ( ) ) INIT = new java.lang.StringBuilder ( ) ) VAR VAR ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN (  sb.append ( VAR_1 ) )  sb.append ( VAR_1 ) ) THEN THEN ) IF IF ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN ( IF IF ( COND ( sb . length ( ) ) > 0 ) COND ( sb . length ( ) ) > 0 ( THEN THEN (  sb.append ( STRING_1 ) )  sb.append ( STRING_1 ) ) THEN THEN ) IF IF (  sb.append ( VAR_2 ) )  sb.append ( VAR_2 ) ) THEN THEN ) IF IF (  return sb . toString ( ) ; )  return sb . toString ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.io.File> ) TYPE java.util.List<java.io.File> ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_3 ( VAR_1 . size ( ) ) ) INIT = TYPE_2 . METHOD_3 ( VAR_1 . size ( ) ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  VAR_2 . METHOD_4 ( new TYPE_1 ( VAR_3 , true , true ) ) )  VAR_2 . METHOD_4 ( new TYPE_1 ( VAR_3 , true , true ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE android.bluetooth.BluetoothDevice ) TYPE android.bluetooth.BluetoothDevice ( NAME device ) NAME device ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  android.util.Log.v ( TYPE_1 . TAG , STRING_1 ) )  android.util.Log.v ( TYPE_1 . TAG , STRING_1 ) ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME service ) NAME service ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( IF IF ( COND service == null ) COND service == null ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  return ( ( service . METHOD_3 ( ) ) == ( VAR_2 ) ) && ( service . METHOD_4 ( ) . equals ( device ) ) ; )  return ( ( service . METHOD_3 ( ) ) == ( VAR_2 ) ) && ( service . METHOD_4 ( ) . equals ( device ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME time ) NAME time ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_3 ) != ( this ) ) COND ( VAR_3 ) != ( this ) ( THEN THEN (  throw new TYPE_4 ( ) ; )  throw new TYPE_4 ( ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_4 ) NAME VAR_4 ( INIT = this . VAR_4 ) INIT = this . VAR_4 ) VAR VAR ( IF IF ( COND ! ( VAR_4 . METHOD_2 ( time , VAR_2 ) ) ) COND ! ( VAR_4 . METHOD_2 ( time , VAR_2 ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_5 ) NAME VAR_5 ( INIT = false ) INIT = false ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_5 = VAR_1 . METHOD_3 ( ) )  VAR_5 = VAR_1 . METHOD_3 ( ) ) BLOCK BLOCK ( FINALLY FINALLY ( IF IF ( COND ! VAR_5 ) COND ! VAR_5 ( THEN THEN (  VAR_4 . METHOD_4 ( ) )  VAR_4 . METHOD_4 ( ) ) THEN THEN ) IF IF ) FINALLY FINALLY ) TRY TRY (  return VAR_5 ; )  return VAR_5 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER synchronized ) MODIFIER synchronized ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME w ) NAME w ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME h ) NAME h ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ( VAR VAR ( TYPE int[] ) TYPE int[] ( NAME d ) NAME d ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_6 ) NAME VAR_6 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  METHOD_3 ( mContext , id , VAR_1 , VAR_2 , VAR_3 , VAR_4 , w , h , VAR_5 , d , VAR_6 ) )  METHOD_3 ( mContext , id , VAR_1 , VAR_2 , VAR_3 , VAR_4 , w , h , VAR_5 , d , VAR_6 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME equals ) NAME equals ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME obj ) NAME obj ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( this ) == obj ) COND ( this ) == obj ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ( IF IF ( COND ! ( obj instanceof TYPE_1 ) ) COND ! ( obj instanceof TYPE_1 ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_1 ) ( obj ) ) ) INIT = ( ( TYPE_1 ) ( obj ) ) ) VAR VAR (  return VAR_2 . equals ( VAR_3 ) ; )  return VAR_2 . equals ( VAR_3 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME x ) NAME x ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  METHOD_4 ( METHOD_5 ( METHOD_6 ( x ) ) ) )  METHOD_4 ( METHOD_5 ( METHOD_6 ( x ) ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Throwable ) TYPE java.lang.Throwable ( NAME e ) NAME e ( BLOCK BLOCK (  throw METHOD_7 ( x , e ) ; )  throw METHOD_7 ( x , e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 > 0 ) COND VAR_1 > 0 ( THEN THEN ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . get ( VAR_1 ) ) INIT = VAR_3 . get ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_4 ) COND VAR_4 ( THEN THEN ( IF IF ( COND VAR_2 == null ) COND VAR_2 == null ( THEN THEN (  java.lang.System.out.println ( ( ( ( STRING_1 + ( VAR_5 . METHOD_2 ( ) ) ) + STRING_2 ) + VAR_1 ) ) )  java.lang.System.out.println ( ( ( ( STRING_1 + ( VAR_5 . METHOD_2 ( ) ) ) + STRING_2 ) + VAR_1 ) ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return VAR_2 ; )  return VAR_2 ; ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE char[] ) TYPE char[] ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME length ) NAME length ( INIT = VAR_1 . length ( ) ) INIT = VAR_1 . length ( ) ) VAR VAR ( IF IF ( COND ( VAR_2 . length ) != length ) COND ( VAR_2 . length ) != length ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < length ) COND i < length ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK ( IF IF ( COND ( VAR_2 [ i ] ) != ( VAR_1 . METHOD_2 ( i ) ) ) COND ( VAR_2 [ i ] ) != ( VAR_1 . METHOD_2 ( i ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR FOR (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 . METHOD_2 ( ) . equals ( VAR_3 ) ) && ( STRING_1 . equals ( VAR_1 . METHOD_3 ( STRING_2 ) ) ) ) COND ( VAR_1 . METHOD_2 ( ) . equals ( VAR_3 ) ) && ( STRING_1 . equals ( VAR_1 . METHOD_3 ( STRING_2 ) ) ) ( THEN THEN (  return TYPE_5 . METHOD_4 ( VAR_2 ) ; )  return TYPE_5 . METHOD_4 ( VAR_2 ) ; ) THEN THEN ( ELSE ELSE (  throw new TYPE_3 ( ( ( STRING_3 + VAR_2 ) + STRING_4 ) ) ; )  throw new TYPE_3 ( ( ( STRING_3 + VAR_2 ) + STRING_4 ) ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME equals ) NAME equals ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME obj ) NAME obj ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( obj != null ) && ( obj instanceof TYPE_1 ) ) COND ( obj != null ) && ( obj instanceof TYPE_1 ) ( THEN THEN ( VAR VAR ( TYPE TYPE_1<?> ) TYPE TYPE_1<?> ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_1 < ? > ) ( obj ) ) ) INIT = ( ( TYPE_1 < ? > ) ( obj ) ) ) VAR VAR ( IF IF ( COND ( METHOD_1 ( ) ) == ( VAR_1 . METHOD_1 ( ) ) ) COND ( METHOD_1 ( ) ) == ( VAR_1 . METHOD_1 ( ) ) ( THEN THEN (  return TYPE_1 . METHOD_2 ( METHOD_3 ( ) , VAR_1 . METHOD_3 ( ) ) ; )  return TYPE_1 . METHOD_2 ( METHOD_3 ( ) , VAR_1 . METHOD_3 ( ) ) ; ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( VAR_1 ) )  TYPE_1 . METHOD_2 ( VAR_1 ) (  fail ( ) )  fail ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.NullPointerException ) TYPE java.lang.NullPointerException ( NAME expected ) NAME expected ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ( VAR VAR ( TYPE int ) TYPE int ( NAME c ) NAME c ( INIT = TYPE_1 . METHOD_3 ( ) ) INIT = TYPE_1 . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME s ) NAME s ( INIT = TYPE_1 . METHOD_4 ( c ) ) INIT = TYPE_1 . METHOD_4 ( c ) ) VAR VAR (  METHOD_5 ( TYPE_1 . METHOD_2 ( s ) ) )  METHOD_5 ( TYPE_1 . METHOD_2 ( s ) ) (  TYPE_1 . METHOD_6 ( s ) )  TYPE_1 . METHOD_6 ( s ) (  TYPE_1 . METHOD_7 ( c ) )  TYPE_1 . METHOD_7 ( c ) (  TYPE_2 . METHOD_8 ( ) )  TYPE_2 . METHOD_8 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE android.content.Intent ) TYPE android.content.Intent ( NAME VAR_3 ) NAME VAR_3 ( INIT = new android.content.Intent ( this , METHOD_2 ( ) ) ) INIT = new android.content.Intent ( this , METHOD_2 ( ) ) ) VAR VAR (  VAR_3 . METHOD_3 ( VAR_4 , VAR_2 . METHOD_4 ( ) ) )  VAR_3 . METHOD_3 ( VAR_4 , VAR_2 . METHOD_4 ( ) ) (  VAR_1 . METHOD_5 ( TYPE_3 . METHOD_6 ( VAR_2 . METHOD_7 ( ) , VAR_2 . METHOD_4 ( ) , VAR_3 ) ) )  VAR_1 . METHOD_5 ( TYPE_3 . METHOD_6 ( VAR_2 . METHOD_7 ( ) , VAR_2 . METHOD_4 ( ) , VAR_3 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) (  VAR_1 = ( ( VAR_1 ) && ( ( METHOD_2 ( ) ) > 1 ) ) && ( METHOD_3 ( STRING_1 ) ) )  VAR_1 = ( ( VAR_1 ) && ( ( METHOD_2 ( ) ) > 1 ) ) && ( METHOD_3 ( STRING_1 ) ) ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  VAR_2 = METHOD_4 ( ) )  VAR_2 = METHOD_4 ( ) (  METHOD_5 ( VAR_3 ) )  METHOD_5 ( VAR_3 ) (  METHOD_6 ( ( ( ( VAR_4 ) + STRING_2 ) + ( VAR_5 ) ) , VAR_2 ) )  METHOD_6 ( ( ( ( VAR_4 ) + STRING_2 ) + ( VAR_5 ) ) , VAR_2 ) (  METHOD_7 ( VAR_2 ) )  METHOD_7 ( VAR_2 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME context ) NAME context ) VAR VAR ( VAR VAR ( TYPE android.content.Intent ) TYPE android.content.Intent ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  android.util.Log.v ( VAR_2 . TAG , STRING_1 ) )  android.util.Log.v ( VAR_2 . TAG , STRING_1 ) ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME action ) NAME action ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND action . equals ( VAR_3 ) ) COND action . equals ( VAR_3 ) ( THEN THEN ( VAR VAR ( TYPE android.bluetooth.BluetoothDevice ) TYPE android.bluetooth.BluetoothDevice ( NAME device ) NAME device ( INIT = VAR_1 . METHOD_3 ( VAR_4 ) ) INIT = VAR_1 . METHOD_3 ( VAR_4 ) ) VAR VAR ( IF IF ( COND ( METHOD_4 ( device ) ) >= ( VAR_5 ) ) COND ( METHOD_4 ( device ) ) >= ( VAR_5 ) ( THEN THEN (  METHOD_5 ( device ) )  METHOD_5 ( device ) ) THEN THEN ) IF IF ) THEN THEN ( ELSE ELSE ( IF IF ( COND action . equals ( VAR_6 ) ) COND action . equals ( VAR_6 ) ( THEN THEN ( VAR VAR ( TYPE android.bluetooth.BluetoothDevice ) TYPE android.bluetooth.BluetoothDevice ( NAME device ) NAME device ( INIT = VAR_1 . METHOD_3 ( VAR_4 ) ) INIT = VAR_1 . METHOD_3 ( VAR_4 ) ) VAR VAR (  METHOD_6 ( device ) )  METHOD_6 ( device ) ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME s ) NAME s ( INIT = new TYPE_1 ( STRING_1 , 0 , false ) ) INIT = new TYPE_1 ( STRING_1 , 0 , false ) ) VAR VAR (  s . METHOD_2 ( ) )  s . METHOD_2 ( ) ( TRY TRY ( BLOCK BLOCK (  s . METHOD_2 ( ) )  s . METHOD_2 ( ) (  fail ( STRING_2 ) )  fail ( STRING_2 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  s . METHOD_3 ( ) )  s . METHOD_3 ( ) ( TRY TRY ( BLOCK BLOCK (  s . METHOD_3 ( ) )  s . METHOD_3 ( ) (  fail ( STRING_2 ) )  fail ( STRING_2 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 . METHOD_2 ( VAR_1 ) ) INIT = VAR_4 . METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_3 == null ) COND VAR_3 == null ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_4 . METHOD_2 ( VAR_2 ) ) INIT = VAR_4 . METHOD_2 ( VAR_2 ) ) VAR VAR ( IF IF ( COND VAR_5 == null ) COND VAR_5 == null ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF (  VAR_6 . METHOD_3 ( ) )  VAR_6 . METHOD_3 ( ) (  VAR_6 . METHOD_4 ( VAR_7 ) )  VAR_6 . METHOD_4 ( VAR_7 ) (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN java.util.List<java.lang.String> ) RETURN java.util.List<java.lang.String> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE android.os.Bundle ) TYPE android.os.Bundle ( NAME args ) NAME args ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = args . METHOD_2 ( VAR_2 ) ) INIT = args . METHOD_2 ( VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  VAR_3 = null )  VAR_3 = null ) THEN THEN ( ELSE ELSE (  VAR_3 = TYPE_1 . METHOD_3 ( VAR_1 ) )  VAR_3 = TYPE_1 . METHOD_3 ( VAR_1 ) ) ELSE ELSE ) IF IF (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME context ) NAME context ) VAR VAR ( VAR VAR ( TYPE android.content.Intent ) TYPE android.content.Intent ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  METHOD_3 ( ) )  METHOD_3 ( ) (  METHOD_4 ( context ) )  METHOD_4 ( context ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.IllegalArgumentException ) TYPE java.lang.IllegalArgumentException ( NAME e ) NAME e ( BLOCK BLOCK (  TYPE_2 . e ( VAR_2 . TAG , STRING_1 , e ) )  TYPE_2 . e ( VAR_2 . TAG , STRING_1 , e ) ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK (  TYPE_2 . e ( VAR_2 . TAG , STRING_2 , e ) )  TYPE_2 . e ( VAR_2 . TAG , STRING_2 , e ) ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK (  TYPE_2 . e ( VAR_2 . TAG , STRING_2 , e ) )  TYPE_2 . e ( VAR_2 . TAG , STRING_2 , e ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1[] ) TYPE TYPE_1[] ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 [ 0 ] ) INIT = new TYPE_1 [ 0 ] ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME request ) NAME request ( INIT = new TYPE_4 ( ) . METHOD_2 ( VAR_1 ) . METHOD_3 ( new TYPE_5 ( ) . METHOD_4 ( VAR_3 ) ) . METHOD_5 ( VAR_2 ) . build ( ) ) INIT = new TYPE_4 ( ) . METHOD_2 ( VAR_1 ) . METHOD_3 ( new TYPE_5 ( ) . METHOD_4 ( VAR_3 ) ) . METHOD_5 ( VAR_2 ) . build ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME result ) NAME result ( INIT = METHOD_6 ( VAR_4 , request ) ) INIT = METHOD_6 ( VAR_4 , request ) ) VAR VAR (  org.junit.Assert.assertEquals ( request . METHOD_7 ( ) , result . METHOD_8 ( ) ) )  org.junit.Assert.assertEquals ( request . METHOD_7 ( ) , result . METHOD_8 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME f ) NAME f ( INIT = new java.io.File ( VAR_2 , ( ( STRING_1 + VAR_1 ) + STRING_2 ) ) ) INIT = new java.io.File ( VAR_2 , ( ( STRING_1 + VAR_1 ) + STRING_2 ) ) ) VAR VAR (  logln ( ( STRING_3 + ( f . METHOD_2 ( ) ) ) ) )  logln ( ( STRING_3 + ( f . METHOD_2 ( ) ) ) ) (  TYPE_2 . METHOD_3 ( f , VAR_3 ) )  TYPE_2 . METHOD_3 ( f , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME m ) NAME m ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME v ) NAME v ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME value ) NAME value ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = false ) INIT = false ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( v == null ) ? ( ( long ) ( m . METHOD_2 ( ) ) ) : ( ( long ) ( m . METHOD_2 ( v ) ) ) ) INIT = ( v == null ) ? ( ( long ) ( m . METHOD_2 ( ) ) ) : ( ( long ) ( m . METHOD_2 ( v ) ) ) ) VAR VAR (  TYPE_3 . assertTrue ( ( VAR_3 == value ) ) )  TYPE_3 . assertTrue ( ( VAR_3 == value ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_2 = true )  VAR_2 = true ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  TYPE_3 . assertEquals ( VAR_2 , VAR_1 ) )  TYPE_3 . assertEquals ( VAR_2 , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( ( this ) == ( VAR_2 ) ) && ( VAR_1 != ( VAR_2 ) ) ) || ( ( ( this ) != ( VAR_2 ) ) && ( VAR_1 == ( VAR_2 ) ) ) ) COND ( ( ( this ) == ( VAR_2 ) ) && ( VAR_1 != ( VAR_2 ) ) ) || ( ( ( this ) != ( VAR_2 ) ) && ( VAR_1 == ( VAR_2 ) ) ) ( THEN THEN (  throw new TYPE_2 ( ( ( ( this ) + STRING_1 ) + VAR_1 ) ) ; )  throw new TYPE_2 ( ( ( ( this ) + STRING_1 ) + VAR_1 ) ) ; ) THEN THEN ) IF IF (  return ( METHOD_2 ( ) ) > ( VAR_1 . METHOD_2 ( ) ) ; )  return ( METHOD_2 ( ) ) > ( VAR_1 . METHOD_2 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( IN VAR_2 . get ( action . METHOD_1 ( ) ) ) IN VAR_2 . get ( action . METHOD_1 ( ) ) ( BLOCK BLOCK ( IF IF ( COND VAR_1 instanceof TYPE_2 ) COND VAR_1 instanceof TYPE_2 ( THEN THEN ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME c ) NAME c ( INIT = ( ( TYPE_2 ) ( VAR_1 ) ) . METHOD_2 ( ) ) INIT = ( ( TYPE_2 ) ( VAR_1 ) ) . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND c != null ) COND c != null ( THEN THEN (  VAR_3 . METHOD_3 ( ( ( TYPE_2 ) ( VAR_1 ) ) . METHOD_2 ( ) , action , null , ( ! VAR_4 ) ) )  VAR_3 . METHOD_3 ( ( ( TYPE_2 ) ( VAR_1 ) ) . METHOD_2 ( ) , action , null , ( ! VAR_4 ) ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME fd ) NAME fd ) VAR VAR ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME args ) NAME args ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( new TYPE_3 ( fd ) ) ) INIT = new TYPE_2 ( new TYPE_3 ( fd ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME service ) NAME service ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( IF IF ( COND service == null ) COND service == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  service . METHOD_1 ( fd , VAR_1 , args ) )  service . METHOD_1 ( fd , VAR_1 , args ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  throw new java.lang.NullPointerException ( STRING_1 ) ; )  throw new java.lang.NullPointerException ( STRING_1 ) ; ) THEN THEN ) IF IF (  METHOD_2 ( ) )  METHOD_2 ( ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME value ) NAME value ( INIT = VAR_1 . METHOD_3 ( ) ) INIT = VAR_1 . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . get ( value ) ) INIT = VAR_3 . get ( value ) ) VAR VAR ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN (  return VAR_2 ; )  return VAR_2 ; ) THEN THEN ) IF IF (  VAR_3 . METHOD_4 ( value , VAR_1 ) )  VAR_3 . METHOD_4 ( value , VAR_1 ) (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.io.File ) RETURN java.io.File ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME target ) NAME target ( IN VAR_3 . METHOD_2 ( ) ) IN VAR_3 . METHOD_2 ( ) ( BLOCK BLOCK ( IF IF ( COND ( target . METHOD_3 ( ) ) && ( target . METHOD_4 ( ) . equals ( VAR_4 ) ) ) COND ( target . METHOD_3 ( ) ) && ( target . METHOD_4 ( ) . equals ( VAR_4 ) ) ( THEN THEN (  return new java.io.File ( target . METHOD_5 ( ) ) ; )  return new java.io.File ( target . METHOD_5 ( ) ) ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_5 ) NAME VAR_5 ( INIT = new java.io.File ( VAR_1 , VAR_6 ) ) INIT = new java.io.File ( VAR_1 , VAR_6 ) ) VAR VAR ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_7 ) NAME VAR_7 ( INIT = new java.io.File ( VAR_5 , java.lang.String.format ( STRING_1 , METHOD_4 ( ) . METHOD_6 ( ) ) ) ) INIT = new java.io.File ( VAR_5 , java.lang.String.format ( STRING_1 , METHOD_4 ( ) . METHOD_6 ( ) ) ) ) VAR VAR (  return VAR_7 ; )  return VAR_7 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.lang.String ) RETURN java.lang.String ( NAME format ) NAME format ( PARAMS PARAMS ( VAR VAR ( TYPE double ) TYPE double ( NAME number ) NAME number ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME result ) NAME result ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR ( IF IF ( COND ( METHOD_1 ( ) ) != ( VAR_2 ) ) COND ( METHOD_1 ( ) ) != ( VAR_2 ) ( THEN THEN (  number = new TYPE_3 ( TYPE_4 . toString ( number ) ) . METHOD_2 ( METHOD_3 ( ) , VAR_3 ) . METHOD_4 ( ) )  number = new TYPE_3 ( TYPE_4 . toString ( number ) ) . METHOD_2 ( METHOD_3 ( ) , VAR_3 ) . METHOD_4 ( ) ) THEN THEN ) IF IF (  VAR_1 . format ( number , result , 0 , 0 ) )  VAR_1 . format ( number , result , 0 , 0 ) (  METHOD_5 ( result , VAR_1 ) )  METHOD_5 ( result , VAR_1 ) (  return result . toString ( ) ; )  return result . toString ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 == null ) || ( VAR_2 ) ) COND ( VAR_1 == null ) || ( VAR_2 ) ( THEN THEN (  return java.lang.String . METHOD_2 ( VAR_1 ) ; )  return java.lang.String . METHOD_2 ( VAR_1 ) ; ) THEN THEN ) IF IF ( IF IF ( COND VAR_1 instanceof TYPE_1 ) COND VAR_1 instanceof TYPE_1 ( THEN THEN (  return TYPE_2 . METHOD_3 ( ( ( TYPE_1 ) ( VAR_1 ) ) ) ; )  return TYPE_2 . METHOD_3 ( ( ( TYPE_1 ) ( VAR_1 ) ) ) ; ) THEN THEN ) IF IF (  return ( STRING_1 + ( TYPE_2 . METHOD_4 ( java.lang.String . METHOD_2 ( VAR_1 ) . METHOD_5 ( ) ) ) ) + STRING_2 ; )  return ( STRING_1 + ( TYPE_2 . METHOD_4 ( java.lang.String . METHOD_2 ( VAR_1 ) . METHOD_5 ( ) ) ) ) + STRING_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME device ) NAME device ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Throwable ) TYPE java.lang.Throwable ( NAME e ) NAME e ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_2 . equals ( VAR_3 ) ) ) COND ! ( VAR_2 . equals ( VAR_3 ) ) ( THEN THEN (  device . METHOD_2 ( ( STRING_1 + ( VAR_2 ) ) ) )  device . METHOD_2 ( ( STRING_1 + ( VAR_2 ) ) ) ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_4 ) != null ) COND ( VAR_4 ) != null ( THEN THEN (  TYPE_4 . METHOD_3 ( VAR_4 ) )  TYPE_4 . METHOD_3 ( VAR_4 ) (  device . METHOD_2 ( ( STRING_2 + ( VAR_5 ) ) ) )  device . METHOD_2 ( ( STRING_2 + ( VAR_5 ) ) ) ) THEN THEN ) IF IF (  device . METHOD_2 ( STRING_3 ) )  device . METHOD_2 ( STRING_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  android.util.Log.v ( VAR_2 . TAG , ( ( ( ( ( STRING_1 + ( this ) ) + STRING_2 ) + ( VAR_3 ) ) + STRING_3 ) + ( VAR_4 ) ) ) )  android.util.Log.v ( VAR_2 . TAG , ( ( ( ( ( STRING_1 + ( this ) ) + STRING_2 ) + ( VAR_3 ) ) + STRING_3 ) + ( VAR_4 ) ) ) ) THEN THEN ) IF IF (  VAR_5 . METHOD_2 ( ) )  VAR_5 . METHOD_2 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<java.io.File> ) RETURN java.util.List<java.io.File> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.io.File> ) TYPE java.util.List<java.io.File> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( ) ) INIT = TYPE_1 . METHOD_2 ( ) ) VAR VAR (  VAR_1 . METHOD_3 ( VAR_2 . METHOD_4 ( ) ) )  VAR_1 . METHOD_3 ( VAR_2 . METHOD_4 ( ) ) ( IF IF ( COND ( VAR_3 ) != ( VAR_4 ) ) COND ( VAR_3 ) != ( VAR_4 ) ( THEN THEN (  VAR_1 . METHOD_3 ( VAR_5 . METHOD_4 ( ) ) )  VAR_1 . METHOD_3 ( VAR_5 . METHOD_4 ( ) ) ) THEN THEN ) IF IF ( IF IF ( COND METHOD_5 ( ) ) COND METHOD_5 ( ) ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_6 ) NAME VAR_6 ( IN VAR_7 ) IN VAR_7 ( BLOCK BLOCK (  VAR_1 . METHOD_3 ( VAR_6 . METHOD_4 ( ) ) )  VAR_1 . METHOD_3 ( VAR_6 . METHOD_4 ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( VAR_2 ) ) INIT = TYPE_2 . METHOD_2 ( VAR_2 ) ) VAR VAR (  METHOD_3 ( VAR_1 , FLOAT_1 , STRING_1 ) )  METHOD_3 ( VAR_1 , FLOAT_1 , STRING_1 ) (  VAR_1 . METHOD_4 ( 3 ) )  VAR_1 . METHOD_4 ( 3 ) (  METHOD_3 ( VAR_1 , FLOAT_1 , STRING_2 ) )  METHOD_3 ( VAR_1 , FLOAT_1 , STRING_2 ) (  VAR_1 . METHOD_5 ( 3 ) )  VAR_1 . METHOD_5 ( 3 ) (  METHOD_3 ( VAR_1 , FLOAT_1 , STRING_2 ) )  METHOD_3 ( VAR_1 , FLOAT_1 , STRING_2 ) (  VAR_1 . METHOD_4 ( ( - 1 ) ) )  VAR_1 . METHOD_4 ( ( - 1 ) ) (  METHOD_3 ( VAR_1 , FLOAT_1 , STRING_3 ) )  METHOD_3 ( VAR_1 , FLOAT_1 , STRING_3 ) (  VAR_1 . METHOD_5 ( ( - 1 ) ) )  VAR_1 . METHOD_5 ( ( - 1 ) ) (  METHOD_3 ( VAR_1 , FLOAT_1 , STRING_1 ) )  METHOD_3 ( VAR_1 , FLOAT_1 , STRING_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public synchronized ) MODIFIER public synchronized ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( ) ) INIT = TYPE_1 . METHOD_2 ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . METHOD_3 ( VAR_4 , VAR_5 ) ) INIT = VAR_3 . METHOD_3 ( VAR_4 , VAR_5 ) ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_6 ) NAME VAR_6 ( INIT = ( VAR_3 . METHOD_4 ( VAR_7 , 0 , VAR_5 ) ) != 0 ) INIT = ( VAR_3 . METHOD_4 ( VAR_7 , 0 , VAR_5 ) ) != 0 ) VAR VAR (  METHOD_5 ( VAR_2 , VAR_6 ) )  METHOD_5 ( VAR_2 , VAR_6 ) ) BLOCK BLOCK ( FINALLY FINALLY (  TYPE_1 . METHOD_6 ( VAR_1 ) )  TYPE_1 . METHOD_6 ( VAR_1 ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME expected ) NAME expected ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME p ) NAME p ( INIT = new TYPE_3 ( null , expected , ( - 1 ) , null , null , null , VAR_1 , VAR_2 , VAR_3 ) ) INIT = new TYPE_3 ( null , expected , ( - 1 ) , null , null , null , VAR_1 , VAR_2 , VAR_3 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  p . METHOD_3 ( VAR_4 ) )  p . METHOD_3 ( VAR_4 ) (  assertEquals ( expected , VAR_4 ) )  assertEquals ( expected , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME a ) NAME a ( INIT = VAR_3 . METHOD_2 ( VAR_1 ) ) INIT = VAR_3 . METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND a == null ) COND a == null ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME b ) NAME b ( INIT = VAR_3 . METHOD_2 ( VAR_2 ) ) INIT = VAR_3 . METHOD_2 ( VAR_2 ) ) VAR VAR ( IF IF ( COND b == null ) COND b == null ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < ( VAR_4 ) ) COND i < ( VAR_4 ) ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK ( IF IF ( COND ( VAR_5 [ i ] ) != ( VAR_6 [ i ] ) ) COND ( VAR_5 [ i ] ) != ( VAR_6 [ i ] ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR FOR (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_2 ) ( VAR_1 ) ) ) INIT = ( ( TYPE_2 ) ( VAR_1 ) ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 . METHOD_2 ( VAR_5 ) ) INIT = VAR_4 . METHOD_2 ( VAR_5 ) ) VAR VAR ( IF IF ( COND VAR_3 != 0 ) COND VAR_3 != 0 ( THEN THEN (  return VAR_3 ; )  return VAR_3 ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_6 ) NAME VAR_6 ( INIT = VAR_7 . getName ( ) ) INIT = VAR_7 . getName ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_8 ) NAME VAR_8 ( INIT = VAR_9 . getName ( ) ) INIT = VAR_9 . getName ( ) ) VAR VAR (  return VAR_6 . METHOD_2 ( VAR_8 ) ; )  return VAR_6 . METHOD_2 ( VAR_8 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected final ) MODIFIER protected final ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( VAR_1 + 7 ) / 8 ) INIT = ( VAR_1 + 7 ) / 8 ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME b ) NAME b ( INIT = new byte [ VAR_2 ] ) INIT = new byte [ VAR_2 ] ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = 0 ) INIT = 0 ) VAR VAR (  METHOD_2 ( b ) )  METHOD_2 ( b ) ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < VAR_2 ) COND i < VAR_2 ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK (  VAR_3 = ( VAR_3 < < 8 ) + ( ( b [ i ] ) & INT_1 ) )  VAR_3 = ( VAR_3 < < 8 ) + ( ( b [ i ] ) & INT_1 ) ) BLOCK BLOCK ) FOR FOR (  return VAR_3 > > > ( ( VAR_2 * 8 ) - VAR_1 ) ; )  return VAR_3 > > > ( ( VAR_2 * 8 ) - VAR_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME h ) NAME h ( INIT = VAR_1 ) INIT = VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ( INIT = VAR_2 [ h ] ) INIT = VAR_2 [ h ] ) VAR VAR ( IF IF ( COND result == null ) COND result == null ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF (  VAR_2 [ h ] = null )  VAR_2 [ h ] = null (  VAR_1 = ( h + 1 ) & ( ( VAR_2 . length ) - 1 ) )  VAR_1 = ( h + 1 ) & ( ( VAR_2 . length ) - 1 ) (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME context ) NAME context ) VAR VAR ( VAR VAR ( TYPE android.content.Intent ) TYPE android.content.Intent ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME action ) NAME action ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  log ( ( STRING_1 + action ) ) )  log ( ( STRING_1 + action ) ) ) THEN THEN ) IF IF ( IF IF ( COND action . equals ( VAR_3 ) ) COND action . equals ( VAR_3 ) ( THEN THEN ( IF IF ( COND ( VAR_4 ) == ( VAR_5 . METHOD_3 ( ) . METHOD_4 ( ) ) ) COND ( VAR_4 ) == ( VAR_5 . METHOD_3 ( ) . METHOD_4 ( ) ) ( THEN THEN (  METHOD_5 ( new android.content.Intent ( VAR_6 ) ) )  METHOD_5 ( new android.content.Intent ( VAR_6 ) ) ) THEN THEN ) IF IF (  METHOD_6 ( ) )  METHOD_6 ( ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE android.bluetooth.BluetoothDevice ) TYPE android.bluetooth.BluetoothDevice ( NAME device ) NAME device ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME result ) NAME result ( INIT = false ) INIT = false ) VAR VAR ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  android.util.Log.d ( TYPE_1 . TAG , STRING_1 ) )  android.util.Log.d ( TYPE_1 . TAG , STRING_1 ) ) THEN THEN ) IF IF ( IF IF ( COND ( ( METHOD_2 ( ) ) != null ) && ( METHOD_2 ( ) . equals ( device ) ) ) COND ( ( METHOD_2 ( ) ) != null ) && ( METHOD_2 ( ) . equals ( device ) ) ( THEN THEN ( SWITCH SWITCH ( NAME VAR_2 ) NAME VAR_2 ( CASE VAR_3 ( BLOCK BLOCK (  METHOD_3 ( ( - 1 ) ) )  METHOD_3 ( ( - 1 ) ) (  result = true )  result = true (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_3 ( DEFAULT DEFAULT ( BLOCK BLOCK (  break ; )  break ; ) BLOCK BLOCK ) DEFAULT DEFAULT ) SWITCH SWITCH ) THEN THEN ) IF IF (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME args ) NAME args ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME t ) NAME t ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  t . METHOD_2 ( 3 , 3 , false ) )  t . METHOD_2 ( 3 , 3 , false ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME in ) NAME in ( INIT = t . METHOD_3 ( VAR_1 ) ) INIT = t . METHOD_3 ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = t . METHOD_3 ( ( ( float ) ( FLOAT_1 / ( VAR_3 ) ) ) ) ) INIT = t . METHOD_3 ( ( ( float ) ( FLOAT_1 / ( VAR_3 ) ) ) ) ) VAR VAR (  args.out = t . METHOD_4 ( in , VAR_2 ) )  args.out = t . METHOD_4 ( in , VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN boolean ) RETURN boolean ( NAME equals ) NAME equals ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 == null ) || ( VAR_2 == null ) ) COND ( VAR_1 == null ) || ( VAR_2 == null ) ( THEN THEN (  return VAR_1 == VAR_2 ; )  return VAR_1 == VAR_2 ; ) THEN THEN ) IF IF (  return ( ( VAR_3 . equals ( VAR_4 ) ) && ( TYPE_2 . equals ( VAR_5 , VAR_6 ) ) ) && ( ( VAR_7 ) == ( VAR_8 ) ) ; )  return ( ( VAR_3 . equals ( VAR_4 ) ) && ( TYPE_2 . equals ( VAR_5 , VAR_6 ) ) ) && ( ( VAR_7 ) == ( VAR_8 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( VAR_1 , STRING_1 , new java.lang.Class < ? > [ ] { VAR_2 , VAR_3 class , VAR_4 class } , new java.lang.Object [ ] { VAR_5 , METHOD_3 ( ) , null } ) )  TYPE_1 . METHOD_2 ( VAR_1 , STRING_1 , new java.lang.Class < ? > [ ] { VAR_2 , VAR_3 class , VAR_4 class } , new java.lang.Object [ ] { VAR_5 , METHOD_3 ( ) , null } ) (  TYPE_2 . assertTrue ( VAR_1 . METHOD_4 ( VAR_6 ) . METHOD_5 ( ) ) )  TYPE_2 . assertTrue ( VAR_1 . METHOD_4 ( VAR_6 ) . METHOD_5 ( ) ) (  METHOD_6 ( VAR_7 , 10 , VAR_8 ) )  METHOD_6 ( VAR_7 , 10 , VAR_8 ) (  TYPE_2 . assertFalse ( VAR_1 . METHOD_4 ( VAR_6 ) . METHOD_5 ( ) ) )  TYPE_2 . assertFalse ( VAR_1 . METHOD_4 ( VAR_6 ) . METHOD_5 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME args ) NAME args ( INIT = new java.lang.String [ ] { STRING_1 , VAR_2 . METHOD_2 ( ) , VAR_1 . METHOD_2 ( ) , STRING_2 } ) INIT = new java.lang.String [ ] { STRING_1 , VAR_2 . METHOD_2 ( ) , VAR_1 . METHOD_2 ( ) , STRING_2 } ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME options ) NAME options ( INIT = TYPE_2 . METHOD_3 ( args ) ) INIT = TYPE_2 . METHOD_3 ( args ) ) VAR VAR (  new TYPE_3 ( options , STRING_3 ) . METHOD_4 ( options . METHOD_5 ( ) ) )  new TYPE_3 ( options , STRING_3 ) . METHOD_4 ( options . METHOD_5 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  VAR_1 . METHOD_3 ( VAR_2 , null , null ) )  VAR_1 . METHOD_3 ( VAR_2 , null , null ) (  METHOD_4 ( ) )  METHOD_4 ( ) ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 . METHOD_5 ( VAR_5 ) ) INIT = VAR_4 . METHOD_5 ( VAR_5 ) ) VAR VAR ( IF IF ( COND ( ( TYPE_1 . METHOD_6 ( VAR_6 ) ) == false ) && ( ( VAR_4 . METHOD_5 ( VAR_6 ) ) != null ) ) COND ( ( TYPE_1 . METHOD_6 ( VAR_6 ) ) == false ) && ( ( VAR_4 . METHOD_5 ( VAR_6 ) ) != null ) ( THEN THEN (  VAR_3 = true )  VAR_3 = true ) THEN THEN ) IF IF ( IF IF ( COND VAR_3 ) COND VAR_3 ( THEN THEN (  METHOD_7 ( ) )  METHOD_7 ( ) ) THEN THEN ) IF IF (  VAR_5 . METHOD_8 ( ) )  VAR_5 . METHOD_8 ( ) (  VAR_7 = null )  VAR_7 = null (  METHOD_9 ( VAR_8 ) )  METHOD_9 ( VAR_8 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 = ( VAR_2 ) & ( METHOD_2 ( ) ) )  VAR_1 = ( VAR_2 ) & ( METHOD_2 ( ) ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_3 ( ) ) INIT = METHOD_3 ( ) ) VAR VAR ( IF IF ( COND ( ( VAR_1 ) & ( VAR_3 . METHOD_4 ( ) ) ) == 0 ) COND ( ( VAR_1 ) & ( VAR_3 . METHOD_4 ( ) ) ) == 0 ( THEN THEN (  METHOD_5 ( METHOD_6 ( false ) ) )  METHOD_5 ( METHOD_6 ( false ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( ) ) INIT = TYPE_1 . METHOD_2 ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_1 . METHOD_3 ( ) )  VAR_1 . METHOD_3 ( ) (  VAR_1 . METHOD_4 ( STRING_1 ) )  VAR_1 . METHOD_4 ( STRING_1 ) (  errln ( ( STRING_2 + ( STRING_3 + STRING_4 ) ) ) )  errln ( ( STRING_2 + ( STRING_3 + STRING_4 ) ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  VAR_1 = ( ( TYPE_1 ) ( VAR_1 . METHOD_5 ( ) ) ) )  VAR_1 = ( ( TYPE_1 ) ( VAR_1 . METHOD_5 ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME version ) NAME version ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_6 ) NAME VAR_6 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_7 ) == false ) COND ( VAR_7 ) == false ( THEN THEN (  throw new java.lang.RuntimeException ( ( ( VAR_8 . TAG ) + STRING_1 ) ) ; )  throw new java.lang.RuntimeException ( ( ( VAR_8 . TAG ) + STRING_1 ) ) ; ) THEN THEN ) IF IF (  return METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , version , VAR_5 , VAR_6 ) ; )  return METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , version , VAR_5 , VAR_6 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( ) )  VAR_1 . METHOD_2 ( ) (  VAR_2 . METHOD_3 ( ) )  VAR_2 . METHOD_3 ( ) ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = 0 ) INIT = 0 ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( IN VAR_5 ) IN VAR_5 ( BLOCK BLOCK ( IF IF ( COND ( VAR_4 . METHOD_4 ( ) . METHOD_5 ( ) ) > VAR_3 ) COND ( VAR_4 . METHOD_4 ( ) . METHOD_5 ( ) ) > VAR_3 ( THEN THEN (  VAR_3 = VAR_4 . METHOD_4 ( ) . METHOD_5 ( ) )  VAR_3 = VAR_4 . METHOD_4 ( ) . METHOD_5 ( ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  VAR_6 . METHOD_6 ( VAR_3 ) )  VAR_6 . METHOD_6 ( VAR_3 ) (  VAR_1 . METHOD_2 ( ) )  VAR_1 . METHOD_2 ( ) (  VAR_2 . METHOD_3 ( ) )  VAR_2 . METHOD_3 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME node ) NAME node ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = node . METHOD_2 ( ) ) INIT = node . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND VAR_1 . equals ( STRING_1 ) ) COND VAR_1 . equals ( STRING_1 ) ( THEN THEN ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME location ) NAME location ( INIT = mContext . METHOD_3 ( node ) ) INIT = mContext . METHOD_3 ( node ) ) VAR VAR (  mContext . METHOD_4 ( VAR_2 , node , location , ( STRING_2 + STRING_3 ) , null ) )  mContext . METHOD_4 ( VAR_2 , node , location , ( STRING_2 + STRING_3 ) , null ) ) THEN THEN ) IF IF (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME method ) NAME method ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME offset ) NAME offset ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_4 = METHOD_2 ( offset , VAR_4 ) )  VAR_4 = METHOD_2 ( offset , VAR_4 ) (  METHOD_3 ( offset , VAR_5 ) )  METHOD_3 ( offset , VAR_5 ) (  VAR_6 . METHOD_1 ( VAR_1 , method , VAR_2 , VAR_7 , VAR_3 ) )  VAR_6 . METHOD_1 ( VAR_1 , method , VAR_2 , VAR_7 , VAR_3 ) (  VAR_7 += VAR_3 . length ( VAR_7 ) )  VAR_7 += VAR_3 . length ( VAR_7 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_1 ( VAR_2 ) ) INIT = TYPE_1 . METHOD_1 ( VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME s ) NAME s ( INIT = new TYPE_2 ( VAR_1 ) ) INIT = new TYPE_2 ( VAR_1 ) ) VAR VAR (  VAR_1 . METHOD_2 ( VAR_3 ) )  VAR_1 . METHOD_2 ( VAR_3 ) (  METHOD_3 ( VAR_1 , s ) )  METHOD_3 ( VAR_1 , s ) (  s . METHOD_4 ( VAR_4 , VAR_5 ) )  s . METHOD_4 ( VAR_4 , VAR_5 ) (  s . METHOD_5 ( VAR_5 , VAR_5 ) )  s . METHOD_5 ( VAR_5 , VAR_5 ) (  s . METHOD_6 ( VAR_5 , VAR_5 ) )  s . METHOD_6 ( VAR_5 , VAR_5 ) (  s . METHOD_7 ( VAR_5 ) )  s . METHOD_7 ( VAR_5 ) (  VAR_1 . METHOD_8 ( ) )  VAR_1 . METHOD_8 ( ) (  METHOD_9 ( ) )  METHOD_9 ( ) (  VAR_1 . METHOD_10 ( ) )  VAR_1 . METHOD_10 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  this )  this ( BLOCK BLOCK ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME node ) NAME node ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  node = METHOD_2 ( ) )  node = METHOD_2 ( ) (  node . METHOD_3 ( VAR_1 ) )  node . METHOD_3 ( VAR_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_4 ( METHOD_4 ( VAR_1 ) , e ) ; )  throw new TYPE_4 ( METHOD_4 ( VAR_1 ) , e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  VAR_2 = true )  VAR_2 = true ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME key ) NAME key ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 != null ) && ( ! ( ( VAR_1 instanceof TYPE_6 ) || ( VAR_1 instanceof TYPE_7 ) ) ) ) COND ( VAR_1 != null ) && ( ! ( ( VAR_1 instanceof TYPE_6 ) || ( VAR_1 instanceof TYPE_7 ) ) ) ( THEN THEN (  throw new TYPE_4 ( STRING_1 ) ; )  throw new TYPE_4 ( STRING_1 ) ; ) THEN THEN ) IF IF (  METHOD_2 ( key , VAR_1 ) )  METHOD_2 ( key , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public synchronized ) MODIFIER public synchronized ( RETURN void ) RETURN void ( NAME run ) NAME run ( PARAMS PARAMS ( VAR VAR ( TYPE com.android.jack.ir.ast.JDefinedClassOrInterface ) TYPE com.android.jack.ir.ast.JDefinedClassOrInterface ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 . METHOD_1 ( ) ) || ( ( VAR_1 . METHOD_2 ( ) ) == ( VAR_2 ) ) ) COND ( VAR_1 . METHOD_1 ( ) ) || ( ( VAR_1 . METHOD_2 ( ) ) == ( VAR_2 ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  TYPE_1 . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( VAR_1 . METHOD_2 ( ) . METHOD_6 ( ) , VAR_1 ) )  TYPE_1 . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( VAR_1 . METHOD_2 ( ) . METHOD_6 ( ) , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public final ) MODIFIER public final ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  this )  this ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_4 ) ) COND ! ( VAR_4 ) ( THEN THEN (  throw new java.lang.RuntimeException ( STRING_1 ) ; )  throw new java.lang.RuntimeException ( STRING_1 ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_5 ) NAME VAR_5 ( INIT = METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ) INIT = METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ) VAR VAR ( IF IF ( COND VAR_5 != 0 ) COND VAR_5 != 0 ( THEN THEN ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME res ) NAME res ( INIT = new TYPE_2 ( VAR_5 ) ) INIT = new TYPE_2 ( VAR_5 ) ) VAR VAR (  METHOD_3 ( res . METHOD_4 ( ) ) )  METHOD_3 ( res . METHOD_4 ( ) ) (  return res ; )  return res ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED (  throw new TYPE_3 ( ( STRING_2 + VAR_2 ) ) ; )  throw new TYPE_3 ( ( STRING_2 + VAR_2 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  VAR_1 = TYPE_1 . METHOD_1 ( ) )  VAR_1 = TYPE_1 . METHOD_1 ( ) (  TYPE_1 . METHOD_2 ( ) )  TYPE_1 . METHOD_2 ( ) (  VAR_2 = new TYPE_2 ( ) )  VAR_2 = new TYPE_2 ( ) (  METHOD_3 ( ) )  METHOD_3 ( ) (  VAR_3 . METHOD_4 ( ) )  VAR_3 . METHOD_4 ( ) (  TYPE_1 . METHOD_5 ( ) )  TYPE_1 . METHOD_5 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK (  e . METHOD_6 ( ) )  e . METHOD_6 ( ) (  fail ( STRING_1 ) )  fail ( STRING_1 ) ) BLOCK BLOCK ) CATCH CATCH ( FINALLY FINALLY (  METHOD_7 ( ) )  METHOD_7 ( ) (  VAR_2 = null )  VAR_2 = null (  VAR_1 = null )  VAR_1 = null ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME x ) NAME x ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME info ) NAME info ( INIT = METHOD_2 ( x ) ) INIT = METHOD_2 ( x ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_3 ( VAR_3 ) ) INIT = METHOD_3 ( VAR_3 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_3 ( VAR_5 ) ) INIT = METHOD_3 ( VAR_5 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_6 ) NAME VAR_6 ( INIT = METHOD_3 ( VAR_7 ) ) INIT = METHOD_3 ( VAR_7 ) ) VAR VAR (  METHOD_4 ( new TYPE_5 ( info , VAR_6 , VAR_4 , VAR_2 ) ) )  METHOD_4 ( new TYPE_5 ( info , VAR_6 , VAR_4 , VAR_2 ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Throwable ) TYPE java.lang.Throwable ( NAME e ) NAME e ( BLOCK BLOCK (  throw METHOD_5 ( x , e ) ; )  throw METHOD_5 ( x , e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME status ) NAME status ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  android.util.Log.v ( VAR_3 . TAG , ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + status ) ) )  android.util.Log.v ( VAR_3 . TAG , ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + status ) ) ) THEN THEN ) IF IF (  VAR_4 . METHOD_2 ( VAR_1 , ( status == ( VAR_5 ) ? VAR_6 : VAR_7 ) , false ) )  VAR_4 . METHOD_2 ( VAR_1 , ( status == ( VAR_5 ) ? VAR_6 : VAR_7 ) , false ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2[] ) TYPE TYPE_2[] ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR (  VAR_3 . METHOD_3 ( VAR_1 , true ) )  VAR_3 . METHOD_3 ( VAR_1 , true ) ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME node ) NAME node ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK ( IF IF ( COND ( node . METHOD_4 ( ) ) == false ) COND ( node . METHOD_4 ( ) ) == false ( THEN THEN (  VAR_3 . METHOD_3 ( node , true ) )  VAR_3 . METHOD_3 ( node , true ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . METHOD_3 ( VAR_4 ) ) INIT = VAR_3 . METHOD_3 ( VAR_4 ) ) VAR VAR (  org.mockito.Mockito.verify ( VAR_5 ) . METHOD_4 ( org.mockito.Matchers.eq ( VAR_1 ) , org.mockito.Matchers . METHOD_5 ( int . class ) ) )  org.mockito.Mockito.verify ( VAR_5 ) . METHOD_4 ( org.mockito.Matchers.eq ( VAR_1 ) , org.mockito.Matchers . METHOD_5 ( int . class ) ) (  assertEquals ( VAR_2 , true ) )  assertEquals ( VAR_2 , true ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_1 ( VAR_1 . METHOD_2 ( ) , VAR_2 , VAR_3 , VAR_5 , 0 , 0 , true ) ) INIT = new TYPE_1 ( VAR_1 . METHOD_2 ( ) , VAR_2 , VAR_3 , VAR_5 , 0 , 0 , true ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_6 ) NAME VAR_6 ( INIT = METHOD_3 ( ) ) INIT = METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_7 ) NAME VAR_7 ( INIT = TYPE_3 . METHOD_4 ( VAR_8 class ) ) INIT = TYPE_3 . METHOD_4 ( VAR_8 class ) ) VAR VAR (  VAR_9 . METHOD_5 ( VAR_6 , VAR_4 , VAR_7 ) )  VAR_9 . METHOD_5 ( VAR_6 , VAR_4 , VAR_7 ) (  org.mockito.Mockito.verify ( VAR_10 ) . METHOD_5 ( VAR_6 , VAR_4 , VAR_7 ) )  org.mockito.Mockito.verify ( VAR_10 ) . METHOD_5 ( VAR_6 , VAR_4 , VAR_7 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME out ) NAME out ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME os ) NAME os ( INIT = null ) INIT = null ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  os = new TYPE_5 ( out . METHOD_2 ( ) ) )  os = new TYPE_5 ( out . METHOD_2 ( ) ) (  VAR_1 . METHOD_3 ( os ) )  VAR_1 . METHOD_3 ( os ) ) BLOCK BLOCK ( FINALLY FINALLY ( IF IF ( COND os != null ) COND os != null ( THEN THEN (  os . METHOD_4 ( ) )  os . METHOD_4 ( ) ) THEN THEN ) IF IF ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_3 ( e ) ; )  throw new TYPE_3 ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  TYPE_3 . d ( VAR_3 , ( ( STRING_1 + VAR_1 ) + STRING_2 ) ) )  TYPE_3 . d ( VAR_3 , ( ( STRING_1 + VAR_1 ) + STRING_2 ) ) (  TYPE_3 . d ( VAR_3 , this . toString ( ) ) )  TYPE_3 . d ( VAR_3 , this . toString ( ) ) ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR (  VAR_4 . METHOD_1 ( ) )  VAR_4 . METHOD_1 ( ) ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  TYPE_3 . d ( VAR_3 , ( ( STRING_3 + VAR_1 ) + STRING_2 ) ) )  TYPE_3 . d ( VAR_3 , ( ( STRING_3 + VAR_1 ) + STRING_2 ) ) (  TYPE_3 . d ( VAR_3 , this . toString ( ) ) )  TYPE_3 . d ( VAR_3 , this . toString ( ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME subId ) NAME subId ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( TYPE_2 . METHOD_2 ( VAR_2 , VAR_1 , STRING_1 ) ) ) COND ! ( TYPE_2 . METHOD_2 ( VAR_2 , VAR_1 , STRING_1 ) ) ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_3 ( subId ) ) INIT = METHOD_3 ( subId ) ) VAR VAR ( IF IF ( COND VAR_3 != null ) COND VAR_3 != null ( THEN THEN (  return VAR_3 . METHOD_1 ( ) ; )  return VAR_3 . METHOD_1 ( ) ; ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME m ) NAME m ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME v ) NAME v ) VAR VAR ( VAR VAR ( TYPE double ) TYPE double ( NAME value ) NAME value ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = false ) INIT = false ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE double ) TYPE double ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( v == null ) ? ( ( double ) ( m . METHOD_2 ( ) ) ) : ( ( double ) ( m . METHOD_2 ( v ) ) ) ) INIT = ( v == null ) ? ( ( double ) ( m . METHOD_2 ( ) ) ) : ( ( double ) ( m . METHOD_2 ( v ) ) ) ) VAR VAR (  TYPE_3 . assertTrue ( ( VAR_3 == value ) ) )  TYPE_3 . assertTrue ( ( VAR_3 == value ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_2 = true )  VAR_2 = true ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  TYPE_3 . METHOD_3 ( VAR_2 , VAR_1 ) )  TYPE_3 . METHOD_3 ( VAR_2 , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( TYPE_1 . METHOD_2 ( ) ) || ( TYPE_2 . METHOD_3 ( STRING_1 , false ) ) ) COND ( TYPE_1 . METHOD_2 ( ) ) || ( TYPE_2 . METHOD_3 ( STRING_1 , false ) ) ( THEN THEN (  TYPE_3 . METHOD_4 ( VAR_1 ) . METHOD_5 ( METHOD_6 ( ) , STRING_2 ) )  TYPE_3 . METHOD_4 ( VAR_1 ) . METHOD_5 ( METHOD_6 ( ) , STRING_2 ) ) THEN THEN ( ELSE ELSE ( VAR VAR ( TYPE android.os.Bundle ) TYPE android.os.Bundle ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_7 ( ) . METHOD_8 ( ) ) INIT = METHOD_7 ( ) . METHOD_8 ( ) ) VAR VAR (  VAR_2 . METHOD_9 ( VAR_3 , VAR_4 ) )  VAR_2 . METHOD_9 ( VAR_3 , VAR_4 ) ( VAR VAR ( TYPE android.content.Intent ) TYPE android.content.Intent ( NAME VAR_5 ) NAME VAR_5 ( INIT = new android.content.Intent ( this , VAR_6 class ) . METHOD_10 ( VAR_7 , VAR_2 ) ) INIT = new android.content.Intent ( this , VAR_6 class ) . METHOD_10 ( VAR_7 , VAR_2 ) ) VAR VAR (  METHOD_11 ( VAR_5 , VAR_8 ) )  METHOD_11 ( VAR_5 , VAR_8 ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME context ) NAME context ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME node ) NAME node ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( node . METHOD_2 ( ) . size ( ) ) == 1 ) && ( ! ( node . METHOD_2 ( ) . METHOD_3 ( ) . toString ( ) . equals ( STRING_1 ) ) ) ) COND ( ( node . METHOD_2 ( ) . size ( ) ) == 1 ) && ( ! ( node . METHOD_2 ( ) . METHOD_3 ( ) . toString ( ) . equals ( STRING_1 ) ) ) ( THEN THEN (  context . METHOD_4 ( VAR_2 , node , context . METHOD_5 ( node ) , ( STRING_2 + STRING_3 ) , null ) )  context . METHOD_4 ( VAR_2 , node , context . METHOD_5 ( node ) , ( STRING_2 + STRING_3 ) , null ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SWITCH SWITCH ( NAME VAR_1 ) NAME VAR_1 ( CASE VAR_2 ( BLOCK BLOCK (  return STRING_1 ; )  return STRING_1 ; ) BLOCK BLOCK ) CASE VAR_2 ( CASE VAR_3 ( BLOCK BLOCK (  return STRING_2 ; )  return STRING_2 ; ) BLOCK BLOCK ) CASE VAR_3 ( CASE VAR_4 ( BLOCK BLOCK (  return STRING_3 ; )  return STRING_3 ; ) BLOCK BLOCK ) CASE VAR_4 ( CASE VAR_5 ( BLOCK BLOCK (  return STRING_4 ; )  return STRING_4 ; ) BLOCK BLOCK ) CASE VAR_5 ( CASE VAR_6 ( BLOCK BLOCK (  return STRING_5 ; )  return STRING_5 ; ) BLOCK BLOCK ) CASE VAR_6 ( CASE VAR_7 ( BLOCK BLOCK (  return STRING_6 ; )  return STRING_6 ; ) BLOCK BLOCK ) CASE VAR_7 ( CASE VAR_8 ( BLOCK BLOCK (  return STRING_7 ; )  return STRING_7 ; ) BLOCK BLOCK ) CASE VAR_8 ( CASE VAR_9 ( BLOCK BLOCK (  return STRING_8 ; )  return STRING_8 ; ) BLOCK BLOCK ) CASE VAR_9 ( CASE VAR_10 ( BLOCK BLOCK (  return STRING_9 ; )  return STRING_9 ; ) BLOCK BLOCK ) CASE VAR_10 ( CASE VAR_11 ( BLOCK BLOCK (  return STRING_10 ; )  return STRING_10 ; ) BLOCK BLOCK ) CASE VAR_11 ( CASE VAR_12 ( BLOCK BLOCK (  return STRING_11 ; )  return STRING_11 ; ) BLOCK BLOCK ) CASE VAR_12 ( CASE VAR_13 ( BLOCK BLOCK (  return STRING_12 ; )  return STRING_12 ; ) BLOCK BLOCK ) CASE VAR_13 ( DEFAULT DEFAULT ( BLOCK BLOCK (  return java.lang.Integer . toString ( VAR_1 ) ; )  return java.lang.Integer . toString ( VAR_1 ) ; ) BLOCK BLOCK ) DEFAULT DEFAULT ) SWITCH SWITCH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( false ) )  METHOD_2 ( false ) ( TRY TRY ( BLOCK BLOCK (  key . METHOD_3 ( VAR_1 ) )  key . METHOD_3 ( VAR_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME expected ) NAME expected ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  key . METHOD_4 ( ) )  key . METHOD_4 ( ) ( TRY TRY ( BLOCK BLOCK (  key . METHOD_3 ( VAR_1 ) )  key . METHOD_3 ( VAR_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME expected ) NAME expected ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME x ) NAME x ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_2 ( VAR_1 ) ) INIT = TYPE_2 . METHOD_2 ( VAR_1 ) ) VAR VAR (  VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) )  VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME out ) NAME out ( INIT = new TYPE_4 ( VAR_2 ) ) INIT = new TYPE_4 ( VAR_2 ) ) VAR VAR (  out . METHOD_5 ( x . METHOD_6 ( ) ) )  out . METHOD_5 ( x . METHOD_6 ( ) ) (  out . METHOD_7 ( ) )  out . METHOD_7 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ( BLOCK BLOCK (  throw new java.lang.RuntimeException ( e ) ; )  throw new java.lang.RuntimeException ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1[] ) TYPE TYPE_1[] ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 [ 0 ] ) INIT = new TYPE_1 [ 0 ] ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME request ) NAME request ( INIT = new TYPE_3 ( ) . METHOD_2 ( VAR_1 ) . METHOD_3 ( new TYPE_4 ( ) . METHOD_4 ( VAR_2 ) ) . build ( ) ) INIT = new TYPE_3 ( ) . METHOD_2 ( VAR_1 ) . METHOD_3 ( new TYPE_4 ( ) . METHOD_4 ( VAR_2 ) ) . build ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME result ) NAME result ( INIT = METHOD_5 ( request ) ) INIT = METHOD_5 ( request ) ) VAR VAR (  TYPE_6 . METHOD_6 ( result . METHOD_7 ( ) ) )  TYPE_6 . METHOD_6 ( result . METHOD_7 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_2 . METHOD_2 ( ) ) == VAR_1 ) COND ( VAR_2 . METHOD_2 ( ) ) == VAR_1 ( THEN THEN (  return VAR_2 ; )  return VAR_2 ; ) THEN THEN ) IF IF ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_2 . METHOD_3 ( ) ) IN VAR_2 . METHOD_3 ( ) ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME v ) NAME v ( INIT = METHOD_1 ( VAR_1 , VAR_3 ) ) INIT = METHOD_1 ( VAR_1 , VAR_3 ) ) VAR VAR ( IF IF ( COND v != null ) COND v != null ( THEN THEN (  return v ; )  return v ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( VAR_2 , VAR_3 , VAR_4 ) )  VAR_1 . METHOD_2 ( VAR_2 , VAR_3 , VAR_4 ) (  VAR_1 . METHOD_3 ( VAR_2 , VAR_3 , 0 , 0 , 0 ) )  VAR_1 . METHOD_3 ( VAR_2 , VAR_3 , 0 , 0 , 0 ) (  org.mockito.Mockito.verify ( VAR_5 ) . METHOD_3 ( org.mockito.Matchers . METHOD_4 ( ) , org.mockito.Matchers . METHOD_4 ( ) , org.mockito.Matchers . METHOD_4 ( ) ) )  org.mockito.Mockito.verify ( VAR_5 ) . METHOD_3 ( org.mockito.Matchers . METHOD_4 ( ) , org.mockito.Matchers . METHOD_4 ( ) , org.mockito.Matchers . METHOD_4 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_5 . METHOD_2 ( VAR_1 ) ) INIT = VAR_5 . METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_4 == null ) COND VAR_4 == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  VAR_4 . METHOD_3 ( VAR_6 , VAR_7 , VAR_8 , VAR_9 , VAR_3 ) )  VAR_4 . METHOD_3 ( VAR_6 , VAR_7 , VAR_8 , VAR_9 , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( ( VAR_4 ) == null ) ? true : ! ( VAR_4 . get ( VAR_1 ) ) ) INIT = ( ( VAR_4 ) == null ) ? true : ! ( VAR_4 . get ( VAR_1 ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ( IF IF ( COND VAR_3 ) COND VAR_3 ( THEN THEN (  VAR_5 = VAR_2 . METHOD_2 ( VAR_6 ) )  VAR_5 = VAR_2 . METHOD_2 ( VAR_6 ) ( IF IF ( COND ! ( VAR_7 ) ) COND ! ( VAR_7 ) ( THEN THEN (  VAR_6 += VAR_5 . METHOD_3 ( ) )  VAR_6 += VAR_5 . METHOD_3 ( ) ) THEN THEN ) IF IF (  VAR_7 = false )  VAR_7 = false ) THEN THEN ( ELSE ELSE (  VAR_5 = VAR_2 )  VAR_5 = VAR_2 ) ELSE ELSE ) IF IF (  result . METHOD_4 ( VAR_1 , VAR_5 ) )  result . METHOD_4 ( VAR_1 , VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ! ( TYPE_1 . METHOD_2 ( VAR_1 ) ) ) COND ! ( TYPE_1 . METHOD_2 ( VAR_1 ) ) ( THEN THEN (  android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) )  android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) (  return VAR_2 ; )  return VAR_2 ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME service ) NAME service ( INIT = METHOD_3 ( ) ) INIT = METHOD_3 ( ) ) VAR VAR ( IF IF ( COND service == null ) COND service == null ( THEN THEN (  return VAR_2 ; )  return VAR_2 ; ) THEN THEN ) IF IF (  return service . METHOD_1 ( ) ; )  return service . METHOD_1 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN byte[] ) RETURN byte[] ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME os ) NAME os ( INIT = new TYPE_2 ( VAR_2 ) ) INIT = new TYPE_2 ( VAR_2 ) ) VAR VAR (  os . METHOD_2 ( VAR_1 ) )  os . METHOD_2 ( VAR_1 ) (  os . METHOD_3 ( ) )  os . METHOD_3 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ( BLOCK BLOCK (  android.util.Log.w ( VAR_3 . TAG , ( ( ( STRING_1 + e ) + STRING_2 ) + VAR_1 ) ) )  android.util.Log.w ( VAR_3 . TAG , ( ( ( STRING_1 + e ) + STRING_2 ) + VAR_1 ) ) ) BLOCK BLOCK ) CATCH CATCH ( FINALLY FINALLY (  return VAR_2 . METHOD_4 ( ) ; )  return VAR_2 . METHOD_4 ( ) ; ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME v ) NAME v ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND TYPE_2 . METHOD_2 ( ) ) COND TYPE_2 . METHOD_2 ( ) ( THEN THEN (  VAR_1 . METHOD_1 ( new TYPE_1 ( v . METHOD_3 ( ) ) ) )  VAR_1 . METHOD_1 ( new TYPE_1 ( v . METHOD_3 ( ) ) ) (  return ; )  return ; ) THEN THEN ) IF IF ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < ( VAR_2 . length ) ) COND i < ( VAR_2 . length ) ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK (  METHOD_4 ( VAR_2 [ i ] ) )  METHOD_4 ( VAR_2 [ i ] ) ) BLOCK BLOCK ) FOR FOR ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME provider ) NAME provider ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_1 ( provider , ( ( byte ) ( 1 ) ) , TYPE_1 . METHOD_2 ( STRING_1 ) , TYPE_1 . METHOD_3 ( STRING_1 ) ) )  METHOD_1 ( provider , ( ( byte ) ( 1 ) ) , TYPE_1 . METHOD_2 ( STRING_1 ) , TYPE_1 . METHOD_3 ( STRING_1 ) ) (  METHOD_1 ( provider , ( ( byte ) ( 2 ) ) , TYPE_1 . METHOD_3 ( STRING_1 ) , TYPE_1 . METHOD_2 ( STRING_1 ) ) )  METHOD_1 ( provider , ( ( byte ) ( 2 ) ) , TYPE_1 . METHOD_3 ( STRING_1 ) , TYPE_1 . METHOD_2 ( STRING_1 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( VAR_2 class ) ) INIT = METHOD_2 ( VAR_2 class ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ( INIT = null ) INIT = null ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_1 . METHOD_3 ( ) ) IN VAR_1 . METHOD_3 ( ) ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_1 . METHOD_4 ( VAR_3 ) ) INIT = VAR_1 . METHOD_4 ( VAR_3 ) ) VAR VAR ( IF IF ( COND VAR_4 . METHOD_5 ( VAR_5 ) ) COND VAR_4 . METHOD_5 ( VAR_5 ) ( THEN THEN (  TYPE_4 . i ( STRING_1 , ( VAR_3 + STRING_2 ) ) )  TYPE_4 . i ( STRING_1 , ( VAR_3 + STRING_2 ) ) ( IF IF ( COND result != null ) COND result != null ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF (  result = VAR_3 )  result = VAR_3 ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 == VAR_2 ) COND VAR_1 == VAR_2 ( THEN THEN (  return new TYPE_1 ( ) ; )  return new TYPE_1 ( ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_2 . METHOD_2 ( ) ) INIT = VAR_2 . METHOD_2 ( ) ) VAR VAR (  return TYPE_3 . METHOD_1 ( VAR_1 , VAR_3 ) . append ( VAR_2 . getName ( ) ) . append ( CHAR_1 ) ; )  return TYPE_3 . METHOD_1 ( VAR_1 , VAR_3 ) . append ( VAR_2 . getName ( ) ) . append ( CHAR_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( IN VAR_3 ) IN VAR_3 ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( IN VAR_2 . METHOD_2 ( ) ) IN VAR_2 . METHOD_2 ( ) ( BLOCK BLOCK ( IF IF ( COND VAR_1 . equals ( VAR_4 . METHOD_3 ( ) ) ) COND VAR_1 . equals ( VAR_4 . METHOD_3 ( ) ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME target ) NAME target ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) == 1 ) COND ( VAR_1 ) == 1 ( THEN THEN (  target . append ( CHAR_1 ) )  target . append ( CHAR_1 ) (  target . append ( CHAR_2 ) )  target . append ( CHAR_2 ) (  target . append ( CHAR_3 ) )  target . append ( CHAR_3 ) (  ( VAR_1 ) ++ )  ( VAR_1 ) ++ (  return 3 ; )  return 3 ; ) THEN THEN ( ELSE ELSE ( IF IF ( COND ( VAR_1 ) == 2 ) COND ( VAR_1 ) == 2 ( THEN THEN (  target . append ( CHAR_4 ) )  target . append ( CHAR_4 ) (  ( VAR_1 ) ++ )  ( VAR_1 ) ++ (  return 1 ; )  return 1 ; ) THEN THEN ( ELSE ELSE (  throw new java.io.IOException ( ) ; )  throw new java.io.IOException ( ) ; ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE android.os.Bundle ) TYPE android.os.Bundle ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  super . METHOD_1 ( VAR_1 ) )  super . METHOD_1 ( VAR_1 ) ( VAR VAR ( TYPE android.content.Intent ) TYPE android.content.Intent ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  METHOD_3 ( VAR_2 ) )  METHOD_3 ( VAR_2 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( ( TYPE_1 ) ( METHOD_4 ( VAR_4 ) ) ) ) INIT = ( ( TYPE_1 ) ( METHOD_4 ( VAR_4 ) ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_5 ) NAME VAR_5 ( INIT = new TYPE_2 ( VAR_3 . METHOD_5 ( ) ) ) INIT = new TYPE_2 ( VAR_3 . METHOD_5 ( ) ) ) VAR VAR (  new TYPE_3 ( this , VAR_5 ) . METHOD_6 ( METHOD_2 ( ) , METHOD_7 ( ) , true ) )  new TYPE_3 ( this , VAR_5 ) . METHOD_6 ( METHOD_2 ( ) , METHOD_7 ( ) , true ) (  METHOD_8 ( ) )  METHOD_8 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME context ) NAME context ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME element ) NAME element ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ( INIT = element . METHOD_2 ( VAR_2 , VAR_3 ) ) INIT = element . METHOD_2 ( VAR_2 , VAR_3 ) ) VAR VAR ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_1 . METHOD_3 ( ) ) INIT = VAR_1 . METHOD_3 ( ) ) VAR VAR ( IF IF ( COND ( TYPE_4 . METHOD_4 ( VAR_5 , VAR_4 ) ) >= 0 ) COND ( TYPE_4 . METHOD_4 ( VAR_5 , VAR_4 ) ) >= 0 ( THEN THEN (  context . METHOD_5 ( VAR_6 , element , context . METHOD_6 ( VAR_1 ) , STRING_1 , null ) )  context . METHOD_5 ( VAR_6 , element , context . METHOD_6 ( VAR_1 ) , STRING_1 , null ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( VAR_1 . METHOD_3 ( new TYPE_2 ( time ) ) ) ? VAR_1 . METHOD_4 ( ) : 0 ) INIT = ( VAR_1 . METHOD_3 ( new TYPE_2 ( time ) ) ) ? VAR_1 . METHOD_4 ( ) : 0 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . METHOD_5 ( ) ) INIT = VAR_1 . METHOD_5 ( ) ) VAR VAR (  VAR_4 [ VAR_5 ] = VAR_2 )  VAR_4 [ VAR_5 ] = VAR_2 (  VAR_4 [ VAR_6 ] = VAR_3 )  VAR_4 [ VAR_6 ] = VAR_3 (  METHOD_6 ( time , VAR_3 ) )  METHOD_6 ( time , VAR_3 ) ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < ( VAR_7 ) ) COND i < ( VAR_7 ) ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK (  VAR_8 [ i ] = true )  VAR_8 [ i ] = true ) BLOCK BLOCK ) FOR FOR ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( STRING_1 ) ) INIT = new TYPE_1 ( STRING_1 ) ) VAR VAR (  fail ( STRING_2 ) )  fail ( STRING_2 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  TYPE_2 . METHOD_2 ( VAR_2 , null , VAR_3 ) )  TYPE_2 . METHOD_2 ( VAR_2 , null , VAR_3 ) ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( INIT = new java.io.File ( VAR_2 , VAR_3 ) . METHOD_3 ( ) ) INIT = new java.io.File ( VAR_2 , VAR_3 ) . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( VAR_4 ) ) INIT = new TYPE_1 ( VAR_4 ) ) VAR VAR (  VAR_1 . METHOD_4 ( ) )  VAR_1 . METHOD_4 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE android.os.Message ) TYPE android.os.Message ( NAME msg ) NAME msg ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SWITCH SWITCH ( NAME VAR_1 ) NAME VAR_1 ( CASE VAR_2 ( BLOCK BLOCK (  VAR_3 . METHOD_2 ( mContext , VAR_4 , VAR_5 , 0 ) )  VAR_3 . METHOD_2 ( mContext , VAR_4 , VAR_5 , 0 ) (  METHOD_3 ( true ) )  METHOD_3 ( true ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_2 ( DEFAULT DEFAULT ( BLOCK BLOCK (  METHOD_4 ( ( STRING_1 + ( VAR_1 ) ) ) )  METHOD_4 ( ( STRING_1 + ( VAR_1 ) ) ) (  break ; )  break ; ) BLOCK BLOCK ) DEFAULT DEFAULT ) SWITCH SWITCH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME session ) NAME session ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME c ) NAME c ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME fd ) NAME fd ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME callback ) NAME callback ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_4 . METHOD_2 ( VAR_1 ) ) INIT = TYPE_4 . METHOD_2 ( VAR_1 ) ) VAR VAR (  assertEquals ( STRING_1 , new java.lang.String ( VAR_3 ) ) )  assertEquals ( STRING_1 , new java.lang.String ( VAR_3 ) ) (  assertEquals ( STRING_2 , 0 , ( ( TYPE_4 . METHOD_3 ( VAR_1 ) ) & ( VAR_4 ) ) ) )  assertEquals ( STRING_2 , 0 , ( ( TYPE_4 . METHOD_3 ( VAR_1 ) ) & ( VAR_4 ) ) ) (  super . METHOD_1 ( session , VAR_1 , c , VAR_2 , fd , callback ) )  super . METHOD_1 ( session , VAR_1 , c , VAR_2 , fd , callback ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME pkg ) NAME pkg ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2<java.lang.String> ) TYPE TYPE_2<java.lang.String> ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_5 ) NAME VAR_5 ( INIT = false ) INIT = false ) VAR VAR ( IF IF ( COND VAR_3 && ( ( ( VAR_6 ) != null ) || ( ( VAR_7 ) != null ) ) ) COND VAR_3 && ( ( ( VAR_6 ) != null ) || ( ( VAR_7 ) != null ) ) ( THEN THEN (  VAR_4 = new TYPE_2 < java.lang.String > ( ) )  VAR_4 = new TYPE_2 < java.lang.String > ( ) (  VAR_4 . METHOD_2 ( pkg . packageName ) )  VAR_4 . METHOD_2 ( pkg . packageName ) ) THEN THEN ( ELSE ELSE (  VAR_4 = null )  VAR_4 = null ) ELSE ELSE ) IF IF (  return METHOD_1 ( pkg , VAR_1 , VAR_2 , VAR_4 ) ; )  return METHOD_1 ( pkg , VAR_1 , VAR_2 , VAR_4 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.Class<?> ) TYPE java.lang.Class<?> ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . get ( ) ) INIT = VAR_2 . get ( ) ) VAR VAR ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  throw new TYPE_2 ( ) ; )  throw new TYPE_2 ( ) ; ) THEN THEN ) IF IF ( TRY TRY ( BLOCK BLOCK (  return VAR_1 . METHOD_2 ( STRING_1 ) ; )  return VAR_1 . METHOD_2 ( STRING_1 ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_4 ( e ) ; )  throw new TYPE_4 ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( VAR_1 , VAR_2 . METHOD_3 ( ) , VAR_3 ) )  METHOD_2 ( VAR_1 , VAR_2 . METHOD_3 ( ) , VAR_3 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_4 ( VAR_2 ) ) INIT = METHOD_4 ( VAR_2 ) ) VAR VAR (  TYPE_2 . assertNotNull ( VAR_4 ) )  TYPE_2 . assertNotNull ( VAR_4 ) (  TYPE_2 . assertTrue ( VAR_4 . METHOD_5 ( ) ) )  TYPE_2 . assertTrue ( VAR_4 . METHOD_5 ( ) ) (  TYPE_2 . assertTrue ( VAR_4 . METHOD_6 ( ) . METHOD_7 ( ) ) )  TYPE_2 . assertTrue ( VAR_4 . METHOD_6 ( ) . METHOD_7 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_2 ( ) ) INIT = TYPE_2 . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_4 ) IN VAR_4 ( BLOCK BLOCK (  VAR_3 . METHOD_3 ( VAR_2 ) )  VAR_3 . METHOD_3 ( VAR_2 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_5 ) NAME VAR_5 ( INIT = TYPE_4 . METHOD_4 ( VAR_2 ) ) INIT = TYPE_4 . METHOD_4 ( VAR_2 ) ) VAR VAR (  TYPE_5 . METHOD_5 ( VAR_5 , VAR_1 , VAR_6 ) )  TYPE_5 . METHOD_5 ( VAR_5 , VAR_1 , VAR_6 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public final ) MODIFIER public final ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME key ) NAME key ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_4 = false )  VAR_4 = false (  TYPE_6 . METHOD_2 ( VAR_1 ) )  TYPE_6 . METHOD_2 ( VAR_1 ) ( IF IF ( COND ( VAR_5 ) != null ) COND ( VAR_5 ) != null ( THEN THEN (  VAR_5 . METHOD_3 ( VAR_1 , key , VAR_2 , VAR_3 ) )  VAR_5 . METHOD_3 ( VAR_1 , key , VAR_2 , VAR_3 ) ) THEN THEN ( ELSE ELSE (  METHOD_4 ( VAR_6 , VAR_1 , key , null , VAR_2 , VAR_3 ) )  METHOD_4 ( VAR_6 , VAR_1 , key , null , VAR_2 , VAR_3 ) ) ELSE ELSE ) IF IF (  VAR_4 = true )  VAR_4 = true (  this . VAR_1 = VAR_1 )  this . VAR_1 = VAR_1 ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND METHOD_2 ( ) ) COND METHOD_2 ( ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE android.bluetooth.BluetoothDevice ) TYPE android.bluetooth.BluetoothDevice ( NAME device ) NAME device ( INIT = METHOD_3 ( STRING_1 ) ) INIT = METHOD_3 ( STRING_1 ) ) VAR VAR (  TYPE_1 . METHOD_4 ( VAR_1 . METHOD_5 ( ) . get ( device ) ) )  TYPE_1 . METHOD_4 ( VAR_1 . METHOD_5 ( ) . get ( device ) ) (  TYPE_1 . assertTrue ( VAR_1 . METHOD_6 ( device ) ) )  TYPE_1 . assertTrue ( VAR_1 . METHOD_6 ( device ) ) ( VAR VAR ( TYPE java.util.Map<android.bluetooth.BluetoothDevice,TYPE_2> ) TYPE java.util.Map<android.bluetooth.BluetoothDevice,TYPE_2> ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_5 ( ) ) INIT = VAR_1 . METHOD_5 ( ) ) VAR VAR (  org.junit.Assert.assertEquals ( 1 , VAR_2 . size ( ) ) )  org.junit.Assert.assertEquals ( 1 , VAR_2 . size ( ) ) (  TYPE_1 . assertNotNull ( VAR_2 . get ( device ) ) )  TYPE_1 . assertNotNull ( VAR_2 . get ( device ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = INT_1 ) INIT = INT_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME result ) NAME result ( INIT = 1 ) INIT = 1 ) VAR VAR (  result = ( VAR_1 * result ) + ( ( VAR_2 ) == null ? 0 : VAR_2 . METHOD_1 ( ) ) )  result = ( VAR_1 * result ) + ( ( VAR_2 ) == null ? 0 : VAR_2 . METHOD_1 ( ) ) ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK (  result += VAR_3 . METHOD_1 ( ) )  result += VAR_3 . METHOD_1 ( ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  s = new TYPE_1 ( new TYPE_2 ( ) ) )  s = new TYPE_1 ( new TYPE_2 ( ) ) (  assertNotNull ( s ) )  assertNotNull ( s ) (  s . METHOD_2 ( ) )  s . METHOD_2 ( ) ( TRY TRY ( BLOCK BLOCK (  s = new TYPE_1 ( ( ( TYPE_3 ) ( null ) ) ) )  s = new TYPE_1 ( ( ( TYPE_3 ) ( null ) ) ) (  fail ( STRING_1 ) )  fail ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.NullPointerException ) TYPE java.lang.NullPointerException ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME result ) NAME result ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( ( ( result [ 0 ] ) != ( VAR_1 [ 0 ] ) ) || ( ( result [ 1 ] ) != ( VAR_1 [ 1 ] ) ) ) || ( ( result [ 2 ] ) != ( VAR_1 [ 2 ] ) ) ) || ( ( result [ 3 ] ) != ( VAR_1 [ 3 ] ) ) ) COND ( ( ( ( result [ 0 ] ) != ( VAR_1 [ 0 ] ) ) || ( ( result [ 1 ] ) != ( VAR_1 [ 1 ] ) ) ) || ( ( result [ 2 ] ) != ( VAR_1 [ 2 ] ) ) ) || ( ( result [ 3 ] ) != ( VAR_1 [ 3 ] ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  METHOD_2 ( ) )  METHOD_2 ( ) ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_2 ) != null ) COND ( VAR_2 ) != null ( THEN THEN (  METHOD_3 ( VAR_2 ) )  METHOD_3 ( VAR_2 ) ) THEN THEN ) IF IF ( IF IF ( COND ( ( VAR_2 ) != null ) && ( VAR_3 ) ) COND ( ( VAR_2 ) != null ) && ( VAR_3 ) ( THEN THEN (  METHOD_3 ( VAR_2 ) )  METHOD_3 ( VAR_2 ) ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_4 ) != null ) COND ( VAR_4 ) != null ( THEN THEN (  METHOD_3 ( VAR_4 ) )  METHOD_3 ( VAR_4 ) ) THEN THEN ) IF IF (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) (  VAR_5 = false )  VAR_5 = false ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_3 ) NAME METHOD_3 ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  VAR_2 )  VAR_2 ( BLOCK BLOCK ( IF IF ( COND ( VAR_3 ) == 0 ) COND ( VAR_3 ) == 0 ( THEN THEN (  TYPE_1 . METHOD_4 ( this , STRING_2 ) )  TYPE_1 . METHOD_4 ( this , STRING_2 ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND ( -- ( VAR_3 ) ) == 0 ) COND ( -- ( VAR_3 ) ) == 0 ( THEN THEN (  VAR_4 . METHOD_5 ( false ) )  VAR_4 . METHOD_5 ( false ) ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD (  VAR_1 . METHOD_2 ( new java.lang.Runnable ( STRING_1 ) { public void METHOD_3 ( ) { synchronized ( VAR_2 ) { if ( ( VAR_3 ) == 0 ) { TYPE_1 . METHOD_4 ( this , STRING_2 ) ; } else if ( ( -- ( VAR_3 ) ) == 0 ) { VAR_4 . METHOD_5 ( false ) ; } } } } . METHOD_6 ( ) ) )  VAR_1 . METHOD_2 ( new java.lang.Runnable ( STRING_1 ) { public void METHOD_3 ( ) { synchronized ( VAR_2 ) { if ( ( VAR_3 ) == 0 ) { TYPE_1 . METHOD_4 ( this , STRING_2 ) ; } else if ( ( -- ( VAR_3 ) ) == 0 ) { VAR_4 . METHOD_5 ( false ) ; } } } } . METHOD_6 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  VAR_1 )  VAR_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 . size ( ) ) == 0 ) COND ( VAR_1 . size ( ) ) == 0 ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE java.util.ArrayList<java.lang.Runnable> ) TYPE java.util.ArrayList<java.lang.Runnable> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.ArrayList < java.lang.Runnable > ( VAR_1 ) ) INIT = new java.util.ArrayList < java.lang.Runnable > ( VAR_1 ) ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < ( VAR_2 . size ( ) ) ) COND i < ( VAR_2 . size ( ) ) ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK (  VAR_2 . get ( i ) . run ( ) )  VAR_2 . get ( i ) . run ( ) ) BLOCK BLOCK ) FOR FOR ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_5 ) NAME VAR_5 ( INIT = new TYPE_2 ( VAR_6 ) . METHOD_2 ( VAR_2 ) . METHOD_3 ( VAR_4 ) . build ( ) ) INIT = new TYPE_2 ( VAR_6 ) . METHOD_2 ( VAR_2 ) . METHOD_3 ( VAR_4 ) . build ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_7 ) NAME VAR_7 ( INIT = TYPE_3 . METHOD_4 ( VAR_5 , VAR_8 ) ) INIT = TYPE_3 . METHOD_4 ( VAR_5 , VAR_8 ) ) VAR VAR (  assertEquals ( VAR_1 , VAR_9 ) )  assertEquals ( VAR_1 , VAR_9 ) (  assertEquals ( VAR_3 , VAR_10 ) )  assertEquals ( VAR_3 , VAR_10 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME is ) NAME is ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  assertEquals ( CHAR_1 , METHOD_3 ( is ) ) )  assertEquals ( CHAR_1 , METHOD_3 ( is ) ) ( TRY TRY ( BLOCK BLOCK (  assertEquals ( CHAR_2 , METHOD_4 ( is ) ) )  assertEquals ( CHAR_2 , METHOD_4 ( is ) ) (  fail ( STRING_1 ) )  fail ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK (  assertEquals ( STRING_2 , e.getMessage ( ) ) )  assertEquals ( STRING_2 , e.getMessage ( ) ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ( FINALLY FINALLY (  is . METHOD_5 ( ) )  is . METHOD_5 ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . METHOD_3 ( ) ) INIT = VAR_1 . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME length ) NAME length ( INIT = VAR_1 . METHOD_4 ( ) ) INIT = VAR_1 . METHOD_4 ( ) ) VAR VAR ( IF IF ( COND length != 0 ) COND length != 0 ( THEN THEN ( TRY TRY ( BLOCK BLOCK (  return TYPE_3 . METHOD_5 ( VAR_2 , VAR_3 , length ) ; )  return TYPE_3 . METHOD_5 ( VAR_2 , VAR_3 , length ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_2 ( VAR_4 ) ; )  throw new TYPE_2 ( VAR_4 ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) THEN THEN ( ELSE ELSE (  return VAR_5 ; )  return VAR_5 ; ) ELSE ELSE ) IF IF ) THEN THEN ( ELSE ELSE (  return VAR_5 ; )  return VAR_5 ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN TYPE_1<TYPE_2>.VAR_1 ) RETURN TYPE_1<TYPE_2>.VAR_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3<TYPE_1<TYPE_2>.VAR_1> ) TYPE TYPE_3<TYPE_1<TYPE_2>.VAR_1> ( NAME i ) NAME i ( INIT = VAR_2 . METHOD_2 ( ) ) INIT = VAR_2 . METHOD_2 ( ) ) VAR VAR ( WHILE WHILE ( COND i . METHOD_3 ( ) ) COND i . METHOD_3 ( ) ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<TYPE_2>.VAR_1 ) TYPE TYPE_1<TYPE_2>.VAR_1 ( NAME entry ) NAME entry ( INIT = i . METHOD_4 ( ) ) INIT = i . METHOD_4 ( ) ) VAR VAR ( IF IF ( COND VAR_3 . equals ( name ) ) COND VAR_3 . equals ( name ) ( THEN THEN (  return entry ; )  return entry ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) WHILE WHILE (  android.util.Log.e ( TYPE_1 . TAG , ( STRING_1 + name ) ) )  android.util.Log.e ( TYPE_1 . TAG , ( STRING_1 + name ) ) (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  new TYPE_1 ( log ) . args ( STRING_1 , STRING_2 , java.lang.Integer . toString ( VAR_2 ) , VAR_3 , STRING_3 , STRING_4 , STRING_5 , VAR_1 . METHOD_2 ( ) ) . METHOD_3 ( ) . METHOD_4 ( ) )  new TYPE_1 ( log ) . args ( STRING_1 , STRING_2 , java.lang.Integer . toString ( VAR_2 ) , VAR_3 , STRING_3 , STRING_4 , STRING_5 , VAR_1 . METHOD_2 ( ) ) . METHOD_3 ( ) . METHOD_4 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME test ) NAME test ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME result ) NAME result ( INIT = new java.util.ArrayList ( TYPE_1 . METHOD_1 ( ) . VAR_1 ) ) INIT = new java.util.ArrayList ( TYPE_1 . METHOD_1 ( ) . VAR_1 ) ) VAR VAR ( IF IF ( COND ( result . size ( ) ) == 0 ) COND ( result . size ( ) ) == 0 ( THEN THEN (  status = VAR_2 )  status = VAR_2 ) THEN THEN ( ELSE ELSE (  METHOD_2 ( ) )  METHOD_2 ( ) (  status = VAR_3 )  status = VAR_3 (  METHOD_3 ( ( ( FLOAT_1 - ( cts ) ) - ( VAR_4 ) ) ) )  METHOD_3 ( ( ( FLOAT_1 - ( cts ) ) - ( VAR_4 ) ) ) ) ELSE ELSE ) IF IF (  METHOD_4 ( ) )  METHOD_4 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER synchronized ) MODIFIER synchronized ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME w ) NAME w ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME h ) NAME h ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME d ) NAME d ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_6 ) NAME VAR_6 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  METHOD_3 ( mContext , id , VAR_1 , VAR_2 , VAR_3 , VAR_4 , w , h , d , VAR_5 , VAR_7 ) )  METHOD_3 ( mContext , id , VAR_1 , VAR_2 , VAR_3 , VAR_4 , w , h , d , VAR_5 , VAR_7 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME event ) NAME event ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  android.util.Log.v ( VAR_2 . TAG , ( ( ( ( ( STRING_1 + ( VAR_3 ) ) + STRING_2 ) + ( java.lang.String . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_4 ) ) ) ) + STRING_3 ) + ( VAR_5 ) ) ) )  android.util.Log.v ( VAR_2 . TAG , ( ( ( ( ( STRING_1 + ( VAR_3 ) ) + STRING_2 ) + ( java.lang.String . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_4 ) ) ) ) + STRING_3 ) + ( VAR_5 ) ) ) ) THEN THEN ) IF IF (  VAR_6 . METHOD_4 ( VAR_3 , VAR_4 , VAR_5 , METHOD_5 ( VAR_7 ) ) )  VAR_6 . METHOD_4 ( VAR_3 , VAR_4 , VAR_5 , METHOD_5 ( VAR_7 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME version ) NAME version ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME d ) NAME d ( INIT = TYPE_5 . METHOD_2 ( version , VAR_2 , VAR_3 , VAR_1 ) . METHOD_3 ( ) ) INIT = TYPE_5 . METHOD_2 ( version , VAR_2 , VAR_3 , VAR_1 ) . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME r ) NAME r ( INIT = new TYPE_6 ( d , VAR_4 ) ) INIT = new TYPE_6 ( d , VAR_4 ) ) VAR VAR (  VAR_5 . METHOD_4 ( d . METHOD_5 ( ) , r ) )  VAR_5 . METHOD_4 ( d . METHOD_5 ( ) , r ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return new TYPE_2 ( METHOD_3 ( ) , METHOD_4 ( ) , VAR_1 , METHOD_5 ( ) , METHOD_6 ( ) , METHOD_7 ( ) , a , b , c , d ) ; )  return new TYPE_2 ( METHOD_3 ( ) , METHOD_4 ( ) , VAR_1 , METHOD_5 ( ) , METHOD_6 ( ) , METHOD_7 ( ) , a , b , c , d ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE long ) TYPE long ( NAME session ) NAME session ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME s ) NAME s ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME c ) NAME c ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME fd ) NAME fd ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME callback ) NAME callback ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  assertEquals ( VAR_2 , TYPE_4 . METHOD_2 ( s ) ) )  assertEquals ( VAR_2 , TYPE_4 . METHOD_2 ( s ) ) (  super . METHOD_1 ( session , s , c , VAR_1 , fd , callback ) )  super . METHOD_1 ( session , s , c , VAR_1 , fd , callback ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME provider ) NAME provider ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  provider . METHOD_2 ( STRING_1 , ( ( VAR_1 ) + STRING_2 ) ) )  provider . METHOD_2 ( STRING_1 , ( ( VAR_1 ) + STRING_2 ) ) (  provider . METHOD_2 ( STRING_3 , ( ( VAR_1 ) + STRING_4 ) ) )  provider . METHOD_2 ( STRING_3 , ( ( VAR_1 ) + STRING_4 ) ) (  provider . METHOD_2 ( STRING_5 , ( ( VAR_1 ) + STRING_6 ) ) )  provider . METHOD_2 ( STRING_5 , ( ( VAR_1 ) + STRING_6 ) ) (  provider . METHOD_2 ( STRING_7 , STRING_8 ) )  provider . METHOD_2 ( STRING_7 , STRING_8 ) (  provider . METHOD_2 ( STRING_9 , STRING_8 ) )  provider . METHOD_2 ( STRING_9 , STRING_8 ) (  provider . METHOD_2 ( STRING_10 , STRING_8 ) )  provider . METHOD_2 ( STRING_10 , STRING_8 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME m ) NAME m ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME v ) NAME v ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME value ) NAME value ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = false ) INIT = false ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( IF IF ( COND v == null ) COND v == null ( THEN THEN (  m . METHOD_2 ( value ) )  m . METHOD_2 ( value ) ) THEN THEN ( ELSE ELSE (  m . METHOD_2 ( v , value ) )  m . METHOD_2 ( v , value ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_2 = true )  VAR_2 = true ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  TYPE_4 . assertEquals ( VAR_2 , VAR_1 ) )  TYPE_4 . assertEquals ( VAR_2 , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME node ) NAME node ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME in ) NAME in ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( TYPE_3 . METHOD_2 ( node , in ) ) ) COND ! ( TYPE_3 . METHOD_2 ( node , in ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < ( VAR_1 . size ( ) ) ) COND i < ( VAR_1 . size ( ) ) ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK ( IF IF ( COND ! ( TYPE_3 . METHOD_1 ( VAR_1 . get ( i ) , in ) ) ) COND ! ( TYPE_3 . METHOD_1 ( VAR_1 . get ( i ) , in ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR FOR (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME call ) NAME call ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_2 . d ( this , STRING_1 , call ) )  TYPE_2 . d ( this , STRING_1 , call ) ( IF IF ( COND ! ( VAR_1 . METHOD_2 ( call ) ) ) COND ! ( VAR_1 . METHOD_2 ( call ) ) ( THEN THEN (  VAR_1 . METHOD_3 ( call ) )  VAR_1 . METHOD_3 ( call ) ) THEN THEN ) IF IF ( IF IF ( COND TYPE_3 . equals ( VAR_2 , call . METHOD_4 ( ) ) ) COND TYPE_3 . equals ( VAR_2 , call . METHOD_4 ( ) ) ( THEN THEN (  METHOD_5 ( ) )  METHOD_5 ( ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  VAR_4 )  VAR_4 ( BLOCK BLOCK ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_5 ) NAME VAR_5 ( INIT = TYPE_2 . METHOD_2 ( ) ) INIT = TYPE_2 . METHOD_2 ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  return VAR_6 . METHOD_3 ( METHOD_4 ( this , VAR_1 ) , VAR_2 , VAR_3 ) ; )  return VAR_6 . METHOD_3 ( METHOD_4 ( this , VAR_1 ) , VAR_2 , VAR_3 ) ; ) BLOCK BLOCK ( FINALLY FINALLY (  TYPE_2 . METHOD_5 ( VAR_5 ) )  TYPE_2 . METHOD_5 ( VAR_5 ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME type ) NAME type ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME config ) NAME config ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_4> ) TYPE java.util.List<TYPE_4> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_5 . METHOD_2 ( type ) ) INIT = TYPE_5 . METHOD_2 ( type ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME t ) NAME t ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( IF IF ( COND t == ( VAR_2 ) ) COND t == ( VAR_2 ) ( THEN THEN (  continue ; )  continue ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME match ) NAME match ( INIT = METHOD_1 ( name , type , config ) ) INIT = METHOD_1 ( name , type , config ) ) VAR VAR ( IF IF ( COND match != null ) COND match != null ( THEN THEN (  return match ; )  return match ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public synchronized ) MODIFIER public synchronized ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  VAR_1 = true )  VAR_1 = true ( IF IF ( COND ( ( path ) == null ) || ( path . METHOD_2 ( ) ) ) COND ( ( path ) == null ) || ( path . METHOD_2 ( ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( TRY TRY ( BLOCK BLOCK (  VAR_2 = new TYPE_1 ( path . METHOD_3 ( ) ) )  VAR_2 = new TYPE_1 ( path . METHOD_3 ( ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME VAR_3 ) NAME VAR_3 ( BLOCK BLOCK (  TYPE_2 . METHOD_4 ( ( STRING_1 + ( path ) ) , VAR_3 ) )  TYPE_2 . METHOD_4 ( ( STRING_1 + ( path ) ) , VAR_3 ) (  VAR_2 = null )  VAR_2 = null ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) )  METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) (  METHOD_2 ( TYPE_1 . METHOD_4 ( ) ) )  METHOD_2 ( TYPE_1 . METHOD_4 ( ) ) (  METHOD_2 ( TYPE_1 . METHOD_5 ( ) ) )  METHOD_2 ( TYPE_1 . METHOD_5 ( ) ) (  assertFalse ( VAR_1 . METHOD_6 ( ) . METHOD_7 ( ) ) )  assertFalse ( VAR_1 . METHOD_6 ( ) . METHOD_7 ( ) ) (  assertTrue ( VAR_1 . METHOD_8 ( VAR_2 ) ) )  assertTrue ( VAR_1 . METHOD_8 ( VAR_2 ) ) (  assertTrue ( VAR_1 . METHOD_6 ( ) . METHOD_7 ( ) ) )  assertTrue ( VAR_1 . METHOD_6 ( ) . METHOD_7 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private synchronized ) MODIFIER private synchronized ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME packageName ) NAME packageName ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR (  METHOD_3 ( packageName ) )  METHOD_3 ( packageName ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME info ) NAME info ( INIT = new TYPE_2 ( TYPE_1 . METHOD_4 ( VAR_1 ) , VAR_2 , VAR_3 , METHOD_5 ( VAR_1 . METHOD_6 ( ) ) , METHOD_7 ( packageName ) , METHOD_8 ( packageName ) ) ) INIT = new TYPE_2 ( TYPE_1 . METHOD_4 ( VAR_1 ) , VAR_2 , VAR_3 , METHOD_5 ( VAR_1 . METHOD_6 ( ) ) , METHOD_7 ( packageName ) , METHOD_8 ( packageName ) ) ) VAR VAR (  METHOD_9 ( info ) )  METHOD_9 ( info ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME flags ) NAME flags ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  VAR_2 . METHOD_2 ( ) )  VAR_2 . METHOD_2 ( ) ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  TYPE_1 . METHOD_3 ( id ) )  TYPE_1 . METHOD_3 ( id ) ) THEN THEN ) IF IF (  TYPE_1 . METHOD_4 ( id , VAR_3 , flags ) )  TYPE_1 . METHOD_4 ( id , VAR_3 , flags ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Throwable ) TYPE java.lang.Throwable ( NAME e ) NAME e ( BLOCK BLOCK (  throw TYPE_2 . METHOD_5 ( e ) ; )  throw TYPE_2 . METHOD_5 ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ( FINALLY FINALLY (  VAR_2 . METHOD_6 ( ) )  VAR_2 . METHOD_6 ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME set ) NAME set ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME config ) NAME config ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND config != null ) COND config != null ( THEN THEN ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < ( VAR_2 ) ) COND i < ( VAR_2 ) ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 [ i ] ) INIT = VAR_4 [ i ] ) VAR VAR ( IF IF ( COND ( ( VAR_1 == false ) || ( VAR_3 == null ) ) || ( ( VAR_3 . METHOD_1 ( ) ) == false ) ) COND ( ( VAR_1 == false ) || ( VAR_3 == null ) ) || ( ( VAR_3 . METHOD_1 ( ) ) == false ) ( THEN THEN (  VAR_5 [ i ] = VAR_3 )  VAR_5 [ i ] = VAR_3 ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR FOR ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME event ) NAME event ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME event ) NAME event ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME format ) NAME format ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME args ) NAME args ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME msg ) NAME msg ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  msg = ( ( args == null ) || ( ( args . length ) == 0 ) ) ? format : java.lang.String.format ( VAR_2 , format , args ) )  msg = ( ( args == null ) || ( ( args . length ) == 0 ) ) ? format : java.lang.String.format ( VAR_2 , format , args ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( BLOCK BLOCK (  TYPE_3 . e ( STRING_1 , VAR_3 , STRING_2 , format , args . length ) )  TYPE_3 . e ( STRING_1 , VAR_3 , STRING_2 , format , args . length ) (  msg = format + STRING_3 )  msg = format + STRING_3 ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  event ( VAR_1 , event , msg ) )  event ( VAR_1 , event , msg ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME expected ) NAME expected ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  < TYPE_3 > VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 class ) )  < TYPE_3 > VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 class ) (  org.mockito.Mockito.verify ( VAR_3 , TYPE_4 . METHOD_3 ( ) ) . log ( VAR_1 . METHOD_4 ( ) ) )  org.mockito.Mockito.verify ( VAR_3 , TYPE_4 . METHOD_3 ( ) ) . log ( VAR_1 . METHOD_4 ( ) ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_5 ( VAR_1 . METHOD_6 ( ) ) ) INIT = METHOD_5 ( VAR_1 . METHOD_6 ( ) ) ) VAR VAR ( IF IF ( COND ! ( METHOD_7 ( expected , VAR_4 ) ) ) COND ! ( METHOD_7 ( expected , VAR_4 ) ) ( THEN THEN (  assertEquals ( expected , VAR_4 ) )  assertEquals ( expected , VAR_4 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private synchronized ) MODIFIER private synchronized ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME address ) NAME address ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME state ) NAME state ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  android.util.Log.v ( VAR_2 . TAG , ( ( ( STRING_1 + ( TYPE_1 . toString ( address ) ) ) + STRING_2 ) + state ) ) )  android.util.Log.v ( VAR_2 . TAG , ( ( ( STRING_1 + ( TYPE_1 . toString ( address ) ) ) + STRING_2 ) + state ) ) ) THEN THEN ) IF IF ( VAR VAR ( TYPE android.os.Message ) TYPE android.os.Message ( NAME msg ) NAME msg ( INIT = VAR_3 . METHOD_2 ( VAR_4 ) ) INIT = VAR_3 . METHOD_2 ( VAR_4 ) ) VAR VAR (  msg.obj = address )  msg.obj = address (  msg.arg1 = state )  msg.arg1 = state (  VAR_3 . METHOD_3 ( msg ) )  VAR_3 . METHOD_3 ( msg ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static final ) MODIFIER public static final ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.StringBuilder ) TYPE java.lang.StringBuilder ( NAME b ) NAME b ( INIT = new java.lang.StringBuilder ( ) ) INIT = new java.lang.StringBuilder ( ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 1 ) INIT = 1 ) VAR VAR ) INIT INIT ( COND i <= VAR_2 ) COND i <= VAR_2 ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME s ) NAME s ( INIT = VAR_1 . METHOD_3 ( i ) ) INIT = VAR_1 . METHOD_3 ( i ) ) VAR VAR (  VAR_3 . println ( ( ( ( STRING_1 + i ) + STRING_2 ) + s ) ) )  VAR_3 . println ( ( ( ( STRING_1 + i ) + STRING_2 ) + s ) ) ( IF IF ( COND s != null ) COND s != null ( THEN THEN (  b . append ( s ) )  b . append ( s ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR FOR (  return b . toString ( ) ; )  return b . toString ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_4 ( ) ) )  TYPE_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_4 ( ) ) (  TYPE_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_5 ( ) ) )  TYPE_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_5 ( ) ) (  METHOD_6 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_4 ( ) ) )  METHOD_6 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_4 ( ) ) (  METHOD_7 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_5 ( ) ) )  METHOD_7 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_5 ( ) ) (  METHOD_8 ( TYPE_1 . METHOD_4 ( ) , TYPE_1 . METHOD_5 ( ) ) )  METHOD_8 ( TYPE_1 . METHOD_4 ( ) , TYPE_1 . METHOD_5 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME path ) NAME path ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( null == path ) || ( path . equals ( STRING_1 ) ) ) COND ( null == path ) || ( path . equals ( STRING_1 ) ) ( THEN THEN (  throw new java.lang.IllegalArgumentException ( STRING_2 ) ; )  throw new java.lang.IllegalArgumentException ( STRING_2 ) ; ) THEN THEN ( ELSE ELSE ( IF IF ( COND ( METHOD_2 ( ) ) == ( VAR_1 ) ) COND ( METHOD_2 ( ) ) == ( VAR_1 ) ( THEN THEN (  throw new TYPE_1 ( STRING_3 ) ; )  throw new TYPE_1 ( STRING_3 ) ; ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF (  return METHOD_3 ( VAR_2 , path ) ; )  return METHOD_3 ( VAR_2 , path ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE float ) TYPE float ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE float ) TYPE float ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME d ) NAME d ( INIT = VAR_4 . METHOD_2 ( VAR_1 ) ) INIT = VAR_4 . METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND d == null ) COND d == null ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  d . METHOD_3 ( TYPE_1 . METHOD_4 ( VAR_2 , VAR_3 ) ) )  d . METHOD_3 ( TYPE_1 . METHOD_4 ( VAR_2 , VAR_3 ) ) (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Integer ) RETURN java.lang.Integer ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Integer ) TYPE java.lang.Integer ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  VAR_3 )  VAR_3 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME session ) NAME session ( INIT = VAR_4 . get ( VAR_1 ) ) INIT = VAR_4 . get ( VAR_1 ) ) VAR VAR ( IF IF ( COND session == null ) COND session == null ( THEN THEN (  throw new TYPE_4 ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) ) ; )  throw new TYPE_4 ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_5 ) NAME VAR_5 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  session . METHOD_3 ( TYPE_5 . METHOD_4 ( VAR_2 ) , new TYPE_6 ( VAR_5 ) ) )  session . METHOD_3 ( TYPE_5 . METHOD_4 ( VAR_2 ) , new TYPE_6 ( VAR_5 ) ) (  return VAR_5 ; )  return VAR_5 ; ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( VAR_2 ) ) INIT = new TYPE_1 ( VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE java.lang.Integer[] ) TYPE java.lang.Integer[] ( NAME VAR_3 ) NAME VAR_3 ( INIT = new java.lang.Integer [ VAR_2 ] ) INIT = new java.lang.Integer [ VAR_2 ] ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < ( ( VAR_2 ) - 1 ) ) COND i < ( ( VAR_2 ) - 1 ) ( UPDATE UPDATE (  ++ i )  ++ i ) UPDATE UPDATE ( BLOCK BLOCK (  VAR_3 [ i ] = new java.lang.Integer ( i ) )  VAR_3 [ i ] = new java.lang.Integer ( i ) ) BLOCK BLOCK ) FOR FOR (  VAR_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_3 ) ) )  VAR_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_3 ) ) (  METHOD_4 ( ) )  METHOD_4 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.NullPointerException ) TYPE java.lang.NullPointerException ( NAME VAR_4 ) NAME VAR_4 ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME x ) NAME x ( INIT = 0 ) INIT = 0 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME y ) NAME y ( INIT = 1 ) INIT = 1 ) VAR VAR ( WHILE WHILE ( COND ( y ++ ) < 10 ) COND ( y ++ ) < 10 ( BLOCK BLOCK ( IF IF ( COND y > 1 ) COND y > 1 ( THEN THEN (  x = INT_1 )  x = INT_1 ) THEN THEN ( ELSE ELSE (  x = INT_2 )  x = INT_2 ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) WHILE WHILE (  return x ; )  return x ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN long ) RETURN long ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_6 ) NAME VAR_6 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_7 ) NAME VAR_7 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_8 ) NAME VAR_8 ( INIT = new TYPE_3 ( VAR_1 ) ) INIT = new TYPE_3 ( VAR_1 ) ) VAR VAR (  VAR_8 . METHOD_2 ( ) )  VAR_8 . METHOD_2 ( ) (  VAR_8 . set ( VAR_2 , ( VAR_3 - 1 ) , VAR_4 , VAR_5 , VAR_6 , VAR_7 ) )  VAR_8 . set ( VAR_2 , ( VAR_3 - 1 ) , VAR_4 , VAR_5 , VAR_6 , VAR_7 ) (  return VAR_8 . METHOD_3 ( ) ; )  return VAR_8 . METHOD_3 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = 10 ) INIT = 10 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_1 . METHOD_2 ( ) ) INIT = TYPE_1 . METHOD_2 ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_2 . METHOD_3 ( ) ) INIT = VAR_2 . METHOD_3 ( ) ) VAR VAR (  VAR_3 . METHOD_4 ( null ) )  VAR_3 . METHOD_4 ( null ) (  VAR_2 . METHOD_5 ( false ) )  VAR_2 . METHOD_5 ( false ) (  VAR_3 . METHOD_6 ( VAR_1 ) )  VAR_3 . METHOD_6 ( VAR_1 ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_2 . METHOD_7 ( ) ) INIT = VAR_2 . METHOD_7 ( ) ) VAR VAR (  METHOD_8 ( VAR_4 ) )  METHOD_8 ( VAR_4 ) ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_3 . METHOD_9 ( ) ) INIT = VAR_3 . METHOD_9 ( ) ) VAR VAR (  assertEquals ( VAR_1 , VAR_5 ) )  assertEquals ( VAR_1 , VAR_5 ) ) BLOCK BLOCK ( FINALLY FINALLY (  VAR_2 . METHOD_10 ( ) )  VAR_2 . METHOD_10 ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  TYPE_1 . d ( VAR_2 , STRING_1 ) )  TYPE_1 . d ( VAR_2 , STRING_1 ) (  TYPE_1 . d ( VAR_2 , this . toString ( ) ) )  TYPE_1 . d ( VAR_2 , this . toString ( ) ) ) THEN THEN ) IF IF ( IF IF ( COND METHOD_2 ( ) ) COND METHOD_2 ( ) ( THEN THEN (  METHOD_3 ( ) . METHOD_1 ( ) )  METHOD_3 ( ) . METHOD_1 ( ) ) THEN THEN ) IF IF ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  TYPE_1 . d ( VAR_2 , STRING_2 ) )  TYPE_1 . d ( VAR_2 , STRING_2 ) (  TYPE_1 . d ( VAR_2 , this . toString ( ) ) )  TYPE_1 . d ( VAR_2 , this . toString ( ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME entry ) NAME entry ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME uid ) NAME uid ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME set ) NAME set ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  assertEquals ( VAR_1 , VAR_5 ) )  assertEquals ( VAR_1 , VAR_5 ) (  assertEquals ( uid , entry . uid ) )  assertEquals ( uid , entry . uid ) (  assertEquals ( set , entry . set ) )  assertEquals ( set , entry . set ) (  assertEquals ( VAR_2 , VAR_6 ) )  assertEquals ( VAR_2 , VAR_6 ) (  assertEquals ( VAR_3 , VAR_7 ) )  assertEquals ( VAR_3 , VAR_7 ) (  assertEquals ( VAR_4 , VAR_8 ) )  assertEquals ( VAR_4 , VAR_8 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME subId ) NAME subId ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( TYPE_1 . METHOD_2 ( VAR_2 , VAR_1 , STRING_1 ) ) ) COND ! ( TYPE_1 . METHOD_2 ( VAR_2 , VAR_1 , STRING_1 ) ) ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_3 ( subId ) ) INIT = METHOD_3 ( subId ) ) VAR VAR ( IF IF ( COND VAR_3 != null ) COND VAR_3 != null ( THEN THEN (  return VAR_3 . METHOD_4 ( ) ; )  return VAR_3 . METHOD_4 ( ) ; ) THEN THEN ( ELSE ELSE (  return null ; )  return null ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1[] ) RETURN TYPE_1[] ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1[] ) TYPE TYPE_1[] ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 [ VAR_3 ] ) INIT = new TYPE_1 [ VAR_3 ] ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i <= ( ( VAR_3 ) - 1 ) ) COND i <= ( ( VAR_3 ) - 1 ) ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK (  VAR_2 [ i ] = TYPE_2 . METHOD_2 ( ( ( VAR_1 + ( i + 1 ) ) + STRING_1 ) ) )  VAR_2 [ i ] = TYPE_2 . METHOD_2 ( ( ( VAR_1 + ( i + 1 ) ) + STRING_1 ) ) ) BLOCK BLOCK ) FOR FOR (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME path ) NAME path ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME action ) NAME action ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( null == path ) || ( path . equals ( STRING_1 ) ) ) || ( ! ( TYPE_2 . METHOD_2 ( action ) ) ) ) COND ( ( null == path ) || ( path . equals ( STRING_1 ) ) ) || ( ! ( TYPE_2 . METHOD_2 ( action ) ) ) ( THEN THEN (  throw new java.lang.IllegalArgumentException ( STRING_2 ) ; )  throw new java.lang.IllegalArgumentException ( STRING_2 ) ; ) THEN THEN ( ELSE ELSE ( IF IF ( COND ( VAR_1 ) == ( METHOD_3 ( ) ) ) COND ( VAR_1 ) == ( METHOD_3 ( ) ) ( THEN THEN (  throw new TYPE_3 ( STRING_3 ) ; )  throw new TYPE_3 ( STRING_3 ) ; ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF (  return METHOD_4 ( VAR_2 , path , action ) ; )  return METHOD_4 ( VAR_2 , path , action ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME context ) NAME context ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( TYPE_2 . METHOD_2 ( ) ) ) COND ! ( TYPE_2 . METHOD_2 ( ) ) ( THEN THEN (  TYPE_3 . i ( STRING_1 , STRING_2 ) )  TYPE_3 . i ( STRING_1 , STRING_2 ) (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME provider ) NAME provider ( INIT = new TYPE_4 ( context ) ) INIT = new TYPE_4 ( context ) ) VAR VAR ( IF IF ( COND ! ( provider . METHOD_3 ( ) ) ) COND ! ( provider . METHOD_3 ( ) ) ( THEN THEN (  TYPE_3 . i ( STRING_1 , STRING_3 ) )  TYPE_3 . i ( STRING_1 , STRING_3 ) (  return false ; )  return false ; ) THEN THEN ) IF IF (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  throw new java.lang.NullPointerException ( STRING_1 ) ; )  throw new java.lang.NullPointerException ( STRING_1 ) ; ) THEN THEN ) IF IF (  METHOD_2 ( ) )  METHOD_2 ( ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME s ) NAME s ( INIT = VAR_2 . get ( VAR_1 ) ) INIT = VAR_2 . get ( VAR_1 ) ) VAR VAR ( IF IF ( COND s == null ) COND s == null ( THEN THEN (  throw new java.lang.IllegalArgumentException ( STRING_2 ) ; )  throw new java.lang.IllegalArgumentException ( STRING_2 ) ; ) THEN THEN ) IF IF (  return s . METHOD_3 ( ) ; )  return s . METHOD_3 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<?extendsTYPE_2> ) TYPE TYPE_1<?extendsTYPE_2> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME node ) NAME node ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( IF IF ( COND node instanceof TYPE_3 ) COND node instanceof TYPE_3 ( THEN THEN (  node . METHOD_2 ( this ) )  node . METHOD_2 ( this ) ) THEN THEN ( ELSE ELSE (  METHOD_3 ( node ) )  METHOD_3 ( node ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ( WHILE WHILE ( COND ! ( VAR_2 . METHOD_4 ( ) ) ) COND ! ( VAR_2 . METHOD_4 ( ) ) ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME node ) NAME node ( INIT = VAR_2 . METHOD_5 ( ) ) INIT = VAR_2 . METHOD_5 ( ) ) VAR VAR ( IF IF ( COND VAR_3 . METHOD_6 ( node . METHOD_7 ( ) ) ) COND VAR_3 . METHOD_6 ( node . METHOD_7 ( ) ) ( THEN THEN (  node . METHOD_2 ( this ) )  node . METHOD_2 ( this ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) WHILE WHILE ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  VAR_3 = ( VAR_4 ) ++ )  VAR_3 = ( VAR_4 ) ++ ( IF IF ( COND VAR_5 ) COND VAR_5 ( THEN THEN (  android.util.Log.v ( VAR_6 . TAG , ( STRING_1 + ( VAR_2 . METHOD_2 ( ) ) ) ) )  android.util.Log.v ( VAR_6 . TAG , ( STRING_1 + ( VAR_2 . METHOD_2 ( ) ) ) ) ) THEN THEN ) IF IF (  METHOD_3 ( VAR_2 ) )  METHOD_3 ( VAR_2 ) (  VAR_7 . METHOD_4 ( VAR_2 ) )  VAR_7 . METHOD_4 ( VAR_2 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME equals ) NAME equals ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 == ( this ) ) COND VAR_1 == ( this ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ( IF IF ( COND ( ( ( VAR_1 instanceof TYPE_1 ) && ( METHOD_1 ( ) ) ) && ( ( ( TYPE_1 < ? > ) ( VAR_1 ) ) . METHOD_1 ( ) ) ) && ( ( METHOD_2 ( ) ) != ( VAR_1 . METHOD_2 ( ) ) ) ) COND ( ( ( VAR_1 instanceof TYPE_1 ) && ( METHOD_1 ( ) ) ) && ( ( ( TYPE_1 < ? > ) ( VAR_1 ) ) . METHOD_1 ( ) ) ) && ( ( METHOD_2 ( ) ) != ( VAR_1 . METHOD_2 ( ) ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  return TYPE_2 . METHOD_3 ( this , VAR_1 ) ; )  return TYPE_2 . METHOD_3 ( this , VAR_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 < ( VAR_3 ) ) COND VAR_1 < ( VAR_3 ) ( THEN THEN ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = TYPE_1 . METHOD_2 ( VAR_2 , ( ( count ) - 1 ) ) ) INIT = TYPE_1 . METHOD_2 ( VAR_2 , ( ( count ) - 1 ) ) ) VAR VAR ( FOR FOR ( COND i >= 0 ) COND i >= 0 ( UPDATE UPDATE (  i -- )  i -- ) UPDATE UPDATE ( BLOCK BLOCK ( IF IF ( COND ( METHOD_3 ( i ) ) == VAR_1 ) COND ( METHOD_3 ( i ) ) == VAR_1 ( THEN THEN (  return i ; )  return i ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR FOR (  return - 1 ; )  return - 1 ; ) THEN THEN ( ELSE ELSE (  return METHOD_4 ( VAR_1 , VAR_2 ) ; )  return METHOD_4 ( VAR_1 , VAR_2 ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.io.File ( VAR_1 , VAR_3 ) ) INIT = new java.io.File ( VAR_1 , VAR_3 ) ) VAR VAR ( IF IF ( COND ! ( VAR_2 . METHOD_2 ( ) ) ) COND ! ( VAR_2 . METHOD_2 ( ) ) ( THEN THEN ( IF IF ( COND ! ( VAR_2 . METHOD_3 ( ) ) ) COND ! ( VAR_2 . METHOD_3 ( ) ) ( THEN THEN (  android.util.Log . METHOD_4 ( TYPE_2 . TAG , ( STRING_1 + VAR_2 ) ) )  android.util.Log . METHOD_4 ( TYPE_2 . TAG , ( STRING_1 + VAR_2 ) ) (  return null ; )  return null ; ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return new TYPE_1 ( new java.io.File ( VAR_2 , VAR_4 ) ) ; )  return new TYPE_1 ( new java.io.File ( VAR_2 , VAR_4 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME call ) NAME call ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ! ( call . METHOD_2 ( ) . METHOD_3 ( ) ) ) || ( ! ( ( call . METHOD_4 ( ) ) instanceof TYPE_3 ) ) ) COND ( ! ( call . METHOD_2 ( ) . METHOD_3 ( ) ) ) || ( ! ( ( call . METHOD_4 ( ) ) instanceof TYPE_3 ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  return call . METHOD_8 ( ) . METHOD_9 ( VAR_1 . METHOD_10 ( ) ) ; )  return call . METHOD_8 ( ) . METHOD_9 ( VAR_1 . METHOD_10 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . set ( new java.lang.Object ( ) ) )  VAR_1 . set ( new java.lang.Object ( ) ) (  VAR_1 . METHOD_2 ( new TYPE_2 ( ) ) )  VAR_1 . METHOD_2 ( new TYPE_2 ( ) ) ( FOR-EACH FOR-EACH ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ( IN new boolean [ ] { true , false } ) IN new boolean [ ] { true , false } ( BLOCK BLOCK (  VAR_1 . METHOD_3 ( true ) )  VAR_1 . METHOD_3 ( true ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME server ) NAME server ( INIT = new TYPE_1 ( 0 ) ) INIT = new TYPE_1 ( 0 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( TYPE_3 . METHOD_2 ( ) , server . METHOD_3 ( ) ) ) INIT = new TYPE_2 ( TYPE_3 . METHOD_2 ( ) , server . METHOD_3 ( ) ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = 100 ) INIT = 100 ) VAR VAR (  VAR_1 . METHOD_4 ( VAR_2 ) )  VAR_1 . METHOD_4 ( VAR_2 ) ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . METHOD_5 ( ) ) INIT = VAR_1 . METHOD_5 ( ) ) VAR VAR (  assertTrue ( STRING_1 , ( ( TYPE_4 . METHOD_6 ( ( VAR_2 - VAR_3 ) ) ) <= 10 ) ) )  assertTrue ( STRING_1 , ( ( TYPE_4 . METHOD_6 ( ( VAR_2 - VAR_3 ) ) ) <= 10 ) ) (  VAR_1 . METHOD_7 ( ) )  VAR_1 . METHOD_7 ( ) (  server . METHOD_7 ( ) )  server . METHOD_7 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_1 ( ) ) INIT = VAR_2 . METHOD_1 ( ) ) VAR VAR (  assertEquals ( VAR_3 , VAR_1 . status ) )  assertEquals ( VAR_3 , VAR_1 . status ) (  assertEquals ( VAR_4 , VAR_5 . packageName ) )  assertEquals ( VAR_4 , VAR_5 . packageName ) (  org.mockito.Mockito.verify ( VAR_6 ) . METHOD_2 ( TYPE_2 . eq ( VAR_7 ) ) )  org.mockito.Mockito.verify ( VAR_6 ) . METHOD_2 ( TYPE_2 . eq ( VAR_7 ) ) (  VAR_8 . METHOD_3 ( ) )  VAR_8 . METHOD_3 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN byte[] ) RETURN byte[] ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_2 ) NAME VAR_2 ( INIT = new byte [ INT_1 ] ) INIT = new byte [ INT_1 ] ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR ( TRY TRY ( RESOURCES RESOURCES ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_2 ( VAR_1 ) ) INIT = new TYPE_2 ( VAR_1 ) ) VAR VAR ) RESOURCES RESOURCES ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME count ) NAME count ) VAR VAR ( WHILE WHILE ( COND ( count = VAR_4 . METHOD_2 ( VAR_2 ) ) != ( - 1 ) ) COND ( count = VAR_4 . METHOD_2 ( VAR_2 ) ) != ( - 1 ) ( BLOCK BLOCK (  VAR_3 . METHOD_3 ( VAR_2 , 0 , count ) )  VAR_3 . METHOD_3 ( VAR_2 , 0 , count ) ) BLOCK BLOCK ) WHILE WHILE ) BLOCK BLOCK ) TRY TRY (  return VAR_3 . METHOD_4 ( ) ; )  return VAR_3 . METHOD_4 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SWITCH SWITCH ( NAME VAR_1 ) NAME VAR_1 ( CASE VAR_2 ( BLOCK BLOCK ( IF IF ( COND ( VAR_3 ) == null ) COND ( VAR_3 ) == null ( THEN THEN (  TYPE_1 . METHOD_2 ( VAR_1 ) )  TYPE_1 . METHOD_2 ( VAR_1 ) ) THEN THEN ) IF IF (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) CASE VAR_2 ( CASE VAR_4 ( BLOCK BLOCK ( IF IF ( COND ( VAR_5 ) == null ) COND ( VAR_5 ) == null ( THEN THEN (  TYPE_1 . METHOD_2 ( VAR_1 ) )  TYPE_1 . METHOD_2 ( VAR_1 ) ) THEN THEN ) IF IF (  return VAR_5 ; )  return VAR_5 ; ) BLOCK BLOCK ) CASE VAR_4 ( DEFAULT DEFAULT ( BLOCK BLOCK ) BLOCK BLOCK ) DEFAULT DEFAULT ) SWITCH SWITCH (  return TYPE_1 . METHOD_1 ( ) ; )  return TYPE_1 . METHOD_1 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN boolean ) RETURN boolean ( NAME start ) NAME start ( BLOCK BLOCK ( IF IF ( COND ( ( ( VAR_1 ) != null ) && ( ( VAR_2 ) != null ) ) && ( ( ! ( VAR_3 ) ) || ( ! ( METHOD_1 ( ) ) ) ) ) COND ( ( ( VAR_1 ) != null ) && ( ( VAR_2 ) != null ) ) && ( ( ! ( VAR_3 ) ) || ( ! ( METHOD_1 ( ) ) ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  VAR_4 = true )  VAR_4 = true (  VAR_5 = new TYPE_1 ( this ) )  VAR_5 = new TYPE_1 ( this ) (  VAR_5 . start ( ) )  VAR_5 . start ( ) (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE long ) TYPE long ( NAME session ) NAME session ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME s ) NAME s ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME c ) NAME c ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME fd ) NAME fd ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME callback ) NAME callback ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_2 ) NAME VAR_2 ( INIT = new byte [ 1 ] ) INIT = new byte [ 1 ] ) VAR VAR (  TYPE_4 . METHOD_2 ( s , fd , callback , VAR_2 , 0 , 1 , 0 ) )  TYPE_4 . METHOD_2 ( s , fd , callback , VAR_2 , 0 , 1 , 0 ) (  assertEquals ( INT_1 , VAR_2 [ 0 ] ) )  assertEquals ( INT_1 , VAR_2 [ 0 ] ) (  super . METHOD_1 ( session , s , c , VAR_1 , fd , callback ) )  super . METHOD_1 ( session , s , c , VAR_1 , fd , callback ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( VAR_1 , false ) )  METHOD_2 ( VAR_1 , false ) ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . METHOD_3 ( VAR_1 ) ) INIT = VAR_3 . METHOD_3 ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_2 >= 0 ) COND VAR_2 >= 0 ( THEN THEN ( IF IF ( COND VAR_4 ) COND VAR_4 ( THEN THEN (  android.util.Log.v ( TYPE_2 . TAG , ( ( ( STRING_1 + VAR_2 ) + STRING_2 ) + VAR_1 ) ) )  android.util.Log.v ( TYPE_2 . TAG , ( ( ( STRING_1 + VAR_2 ) + STRING_2 ) + VAR_1 ) ) ) THEN THEN ) IF IF (  VAR_3 . METHOD_4 ( VAR_2 ) )  VAR_3 . METHOD_4 ( VAR_2 ) (  METHOD_5 ( VAR_2 , VAR_1 ) )  METHOD_5 ( VAR_2 , VAR_1 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( null == VAR_2 ) || ( 0 >= ( VAR_2 . length ) ) ) COND ( null == VAR_2 ) || ( 0 >= ( VAR_2 . length ) ) ( THEN THEN (  throw new java.lang.IllegalArgumentException ( STRING_1 ) ; )  throw new java.lang.IllegalArgumentException ( STRING_1 ) ; ) THEN THEN ( ELSE ELSE ( IF IF ( COND ( METHOD_2 ( ) ) == ( VAR_3 ) ) COND ( METHOD_2 ( ) ) == ( VAR_3 ) ( THEN THEN (  throw new TYPE_2 ( STRING_2 ) ; )  throw new TYPE_2 ( STRING_2 ) ; ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF (  return METHOD_3 ( VAR_4 , VAR_1 , VAR_2 ) ; )  return METHOD_3 ( VAR_4 , VAR_1 , VAR_2 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME fd ) NAME fd ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  fd = VAR_2 . METHOD_1 ( VAR_3 , ( VAR_1 ? VAR_4 : VAR_5 ) , 0 ) )  fd = VAR_2 . METHOD_1 ( VAR_3 , ( VAR_1 ? VAR_4 : VAR_5 ) , 0 ) ( IF IF ( COND ! VAR_1 ) COND ! VAR_1 ( THEN THEN (  VAR_2 . METHOD_2 ( fd , VAR_6 , VAR_7 , 1 ) )  VAR_2 . METHOD_2 ( fd , VAR_6 , VAR_7 , 1 ) ) THEN THEN ) IF IF (  return fd ; )  return fd ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_8 ) NAME VAR_8 ( BLOCK BLOCK (  throw VAR_8 . METHOD_3 ( ) ; )  throw VAR_8 . METHOD_3 ( ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( VAR_2 , STRING_1 , STRING_2 , STRING_3 ) ) INIT = new TYPE_1 ( VAR_2 , STRING_1 , STRING_2 , STRING_3 ) ) VAR VAR (  VAR_1 . METHOD_2 ( VAR_3 ) )  VAR_1 . METHOD_2 ( VAR_3 ) (  assertEquals ( VAR_3 , VAR_1 . METHOD_3 ( ) ) )  assertEquals ( VAR_3 , VAR_1 . METHOD_3 ( ) ) (  assertEquals ( VAR_4 , VAR_1 . METHOD_4 ( ) ) )  assertEquals ( VAR_4 , VAR_1 . METHOD_4 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  server . METHOD_2 ( new TYPE_1 ( ) . METHOD_3 ( STRING_1 ) ) )  server . METHOD_2 ( new TYPE_1 ( ) . METHOD_3 ( STRING_1 ) ) (  server . METHOD_4 ( ) )  server . METHOD_4 ( ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_2 ) ( server . METHOD_5 ( STRING_2 ) . METHOD_6 ( ) ) ) ) INIT = ( ( TYPE_2 ) ( server . METHOD_5 ( STRING_2 ) . METHOD_6 ( ) ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME in ) NAME in ( INIT = ( ( TYPE_3 ) ( VAR_1 . METHOD_7 ( ) ) ) ) INIT = ( ( TYPE_3 ) ( VAR_1 . METHOD_7 ( ) ) ) ) VAR VAR (  assertEquals ( STRING_1 , METHOD_8 ( in , VAR_2 ) ) )  assertEquals ( STRING_1 , METHOD_8 ( in , VAR_2 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_1 ) ( server . METHOD_2 ( STRING_1 ) . METHOD_3 ( ) ) ) ) INIT = ( ( TYPE_1 ) ( server . METHOD_2 ( STRING_1 ) . METHOD_3 ( ) ) ) ) VAR VAR (  VAR_2 . METHOD_4 ( VAR_1 ) )  VAR_2 . METHOD_4 ( VAR_1 ) (  assertEquals ( VAR_1 , VAR_2 . METHOD_5 ( ) ) )  assertEquals ( VAR_1 , VAR_2 . METHOD_5 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME context ) NAME context ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME element ) NAME element ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( TYPE_3 . METHOD_2 ( element ) ) && ( TYPE_3 . METHOD_3 ( element ) ) ) COND ( TYPE_3 . METHOD_2 ( element ) ) && ( TYPE_3 . METHOD_3 ( element ) ) ( THEN THEN (  context . METHOD_4 ( VAR_1 , element , context . METHOD_5 ( element ) , STRING_1 , null ) )  context . METHOD_4 ( VAR_1 , element , context . METHOD_5 ( element ) , STRING_1 , null ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME is ) NAME is ( INIT = new TYPE_1 ( VAR_1 . METHOD_1 ( ) ) ) INIT = new TYPE_1 ( VAR_1 . METHOD_1 ( ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 ( is ) ) INIT = new TYPE_2 ( is ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( WHILE WHILE ( COND true ) COND true ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME line ) NAME line ( INIT = VAR_2 . METHOD_2 ( ) ) INIT = VAR_2 . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND line != null ) COND line != null ( THEN THEN (  VAR_3 . METHOD_3 ( STRING_1 , VAR_4 , line ) )  VAR_3 . METHOD_3 ( STRING_1 , VAR_4 , line ) ) THEN THEN ( ELSE ELSE (  break ; )  break ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) WHILE WHILE ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME address ) NAME address ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME value ) NAME value ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME service ) NAME service ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( IF IF ( COND service == null ) COND service == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  service . METHOD_1 ( VAR_1 , address , VAR_2 , VAR_3 , VAR_4 , value ) )  service . METHOD_1 ( VAR_1 , address , VAR_2 , VAR_3 , VAR_4 , value ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . get ( i ) ) INIT = VAR_2 . get ( i ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME j ) NAME j ( INIT = 0 ) INIT = 0 ) VAR VAR ( TRY TRY ( RESOURCES RESOURCES ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 . METHOD_1 ( TYPE_3 . METHOD_2 ( VAR_1 , 0 , ( ( VAR_5 * VAR_6 ) / 2 ) ) , null , null , null , null ) ) INIT = VAR_4 . METHOD_1 ( TYPE_3 . METHOD_2 ( VAR_1 , 0 , ( ( VAR_5 * VAR_6 ) / 2 ) ) , null , null , null , null ) ) VAR VAR ) RESOURCES RESOURCES ( BLOCK BLOCK ( WHILE WHILE ( COND VAR_3 . METHOD_3 ( ) ) COND VAR_3 . METHOD_3 ( ) ( BLOCK BLOCK (  ++ j )  ++ j ) BLOCK BLOCK ) WHILE WHILE ) BLOCK BLOCK ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND TYPE_1 . METHOD_2 ( VAR_1 ) ) COND TYPE_1 . METHOD_2 ( VAR_1 ) ( THEN THEN (  throw new TYPE_2 ( ( ( TYPE_1 . METHOD_3 ( VAR_2 ) ? STRING_1 : STRING_2 ) + STRING_3 ) ) ; )  throw new TYPE_2 ( ( ( TYPE_1 . METHOD_3 ( VAR_2 ) ? STRING_1 : STRING_2 ) + STRING_3 ) ) ; ) THEN THEN ) IF IF (  VAR_3 . METHOD_4 ( VAR_1 , VAR_4 ) )  VAR_3 . METHOD_4 ( VAR_1 , VAR_4 ) (  VAR_5 . METHOD_5 ( VAR_6 ) )  VAR_5 . METHOD_5 ( VAR_6 ) (  VAR_5 . METHOD_6 ( ) )  VAR_5 . METHOD_6 ( ) (  METHOD_7 ( ) )  METHOD_7 ( ) (  METHOD_8 ( ) )  METHOD_8 ( ) (  VAR_3 . METHOD_9 ( VAR_1 , VAR_7 ) )  VAR_3 . METHOD_9 ( VAR_1 , VAR_7 ) (  VAR_5 . METHOD_10 ( ) )  VAR_5 . METHOD_10 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( new TYPE_2 ( STRING_1 ) , null , null , TYPE_3 . of ( ) , TYPE_3 . of ( ) , TYPE_3 . of ( ) , TYPE_3 . of ( ) ) ) INIT = new TYPE_1 ( new TYPE_2 ( STRING_1 ) , null , null , TYPE_3 . of ( ) , TYPE_3 . of ( ) , TYPE_3 . of ( ) , TYPE_3 . of ( ) ) ) VAR VAR (  TYPE_4 . METHOD_2 ( VAR_1 . METHOD_3 ( STRING_2 ) ) . METHOD_4 ( STRING_3 ) )  TYPE_4 . METHOD_2 ( VAR_1 . METHOD_3 ( STRING_2 ) ) . METHOD_4 ( STRING_3 ) (  TYPE_4 . METHOD_2 ( VAR_1 . METHOD_3 ( STRING_4 ) ) . METHOD_4 ( STRING_4 ) )  TYPE_4 . METHOD_2 ( VAR_1 . METHOD_3 ( STRING_4 ) ) . METHOD_4 ( STRING_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( METHOD_2 ( ) ) ) COND ! ( METHOD_2 ( ) ) ( THEN THEN (  TYPE_2 . METHOD_3 ( VAR_2 ) )  TYPE_2 . METHOD_3 ( VAR_2 ) (  return ; )  return ; ) THEN THEN ) IF IF ( TRY TRY ( BLOCK BLOCK (  METHOD_4 ( ) . METHOD_1 ( VAR_1 , mContext . METHOD_5 ( ) , VAR_2 ) )  METHOD_4 ( ) . METHOD_1 ( VAR_1 , mContext . METHOD_5 ( ) , VAR_2 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME e ) NAME e ( BLOCK BLOCK (  throw e . METHOD_6 ( ) ; )  throw e . METHOD_6 ( ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME run ) NAME run ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME run ) NAME run ( INIT = new TYPE_1 ( this ) ) INIT = new TYPE_1 ( this ) ) VAR VAR ( IF IF ( COND ( VAR_1 . length ) > 0 ) COND ( VAR_1 . length ) > 0 ( THEN THEN (  VAR_2 . METHOD_1 ( ( STRING_1 + ( TYPE_2 . METHOD_2 ( STRING_2 , VAR_1 ) ) ) ) )  VAR_2 . METHOD_1 ( ( STRING_1 + ( TYPE_2 . METHOD_2 ( STRING_2 , VAR_1 ) ) ) ) ) THEN THEN ) IF IF (  return VAR_3 . METHOD_3 ( VAR_4 , VAR_5 ) ; )  return VAR_3 . METHOD_3 ( VAR_4 , VAR_5 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i <= 100 ) COND i <= 100 ( UPDATE UPDATE (  ++ i )  ++ i ) UPDATE UPDATE ( BLOCK BLOCK (  Main . METHOD_2 ( VAR_1 ) )  Main . METHOD_2 ( VAR_1 ) ( IF IF ( COND ( i % 10 ) == 0 ) COND ( i % 10 ) == 0 ( THEN THEN (  TYPE_2 . METHOD_3 ( ) . METHOD_4 ( ) )  TYPE_2 . METHOD_3 ( ) . METHOD_4 ( ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR FOR ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 = new TYPE_1 ( VAR_2 ) )  VAR_1 = new TYPE_1 ( VAR_2 ) (  VAR_1 . METHOD_2 ( new TYPE_2 ( STRING_1 ) ) )  VAR_1 . METHOD_2 ( new TYPE_2 ( STRING_1 ) ) (  VAR_1 . METHOD_3 ( ) )  VAR_1 . METHOD_3 ( ) (  VAR_1 . METHOD_4 ( ) )  VAR_1 . METHOD_4 ( ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( new TYPE_3 ( ) ) ) INIT = new TYPE_1 ( new TYPE_3 ( ) ) ) VAR VAR (  VAR_1 . METHOD_2 ( new TYPE_2 ( STRING_2 ) ) )  VAR_1 . METHOD_2 ( new TYPE_2 ( STRING_2 ) ) (  VAR_1 . METHOD_4 ( ) )  VAR_1 . METHOD_4 ( ) (  VAR_1 . METHOD_4 ( ) )  VAR_1 . METHOD_4 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME key ) NAME key ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = TYPE_1 . METHOD_2 ( VAR_1 , 0 , VAR_2 , key ) ) INIT = TYPE_1 . METHOD_2 ( VAR_1 , 0 , VAR_2 , key ) ) VAR VAR ( IF IF ( COND i >= 0 ) COND i >= 0 ( THEN THEN ( IF IF ( COND ( VAR_3 [ i ] ) != ( VAR_4 ) ) COND ( VAR_3 [ i ] ) != ( VAR_4 ) ( THEN THEN (  VAR_3 [ i ] = VAR_4 )  VAR_3 [ i ] = VAR_4 (  VAR_5 = true )  VAR_5 = true ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( VAR_3 , new TYPE_2 ( STRING_1 ) , VAR_4 , new TYPE_2 ( STRING_2 ) , VAR_5 , STRING_3 ) { public java.lang.String METHOD_2 ( ) { return VAR_1 ; } protected void METHOD_3 ( ) { } } ) INIT = new TYPE_1 ( VAR_3 , new TYPE_2 ( STRING_1 ) , VAR_4 , new TYPE_2 ( STRING_2 ) , VAR_5 , STRING_3 ) { public java.lang.String METHOD_2 ( ) { return VAR_1 ; } protected void METHOD_3 ( ) { } } ) VAR VAR ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_2 ) NAME METHOD_2 ( BLOCK BLOCK (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD ( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_3 ) NAME METHOD_3 ( BLOCK BLOCK ) BLOCK BLOCK ) METHOD METHOD (  VAR_2 . METHOD_4 ( VAR_6 , new TYPE_2 ( STRING_4 ) ) )  VAR_2 . METHOD_4 ( VAR_6 , new TYPE_2 ( STRING_4 ) ) (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public final ) MODIFIER public final ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( this ) )  VAR_1 . METHOD_2 ( this ) ( IF IF ( COND ( VAR_2 ) == ( VAR_3 ) ) COND ( VAR_2 ) == ( VAR_3 ) ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME value ) NAME value ( IN METHOD_3 ( ) ) IN METHOD_3 ( ) ( BLOCK BLOCK ( IF IF ( COND value instanceof TYPE_2 ) COND value instanceof TYPE_2 ( THEN THEN ( IF IF ( COND ! ( VAR_4 ) ) COND ! ( VAR_4 ) ( THEN THEN (  ( ( TYPE_2 ) ( value ) ) . METHOD_4 ( this ) )  ( ( TYPE_2 ) ( value ) ) . METHOD_4 ( this ) ) THEN THEN ) IF IF (  VAR_1 . METHOD_5 ( ( ( TYPE_2 ) ( value ) ) ) )  VAR_1 . METHOD_5 ( ( ( TYPE_2 ) ( value ) ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  VAR_4 = true )  VAR_4 = true ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = STRING_1 + ( ( ( ( STRING_2 + STRING_3 ) + STRING_4 ) + STRING_3 ) + STRING_5 ) ) INIT = STRING_1 + ( ( ( ( STRING_2 + STRING_3 ) + STRING_4 ) + STRING_3 ) + STRING_5 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_2 ( VAR_1 ) ) INIT = TYPE_2 . METHOD_2 ( VAR_1 ) ) VAR VAR (  VAR_1 = TYPE_3 . METHOD_3 ( VAR_2 , true ) )  VAR_1 = TYPE_3 . METHOD_3 ( VAR_2 , true ) (  assertEquals ( ( STRING_1 + ( STRING_2 + STRING_6 ) ) , VAR_1 ) )  assertEquals ( ( STRING_1 + ( STRING_2 + STRING_6 ) ) , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME args ) NAME args ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( TYPE_1 . METHOD_2 ( args ) ) ) COND ! ( TYPE_1 . METHOD_2 ( args ) ) ( THEN THEN (  TYPE_1 . METHOD_3 ( ) )  TYPE_1 . METHOD_3 ( ) (  TYPE_2 . METHOD_4 ( ( - 1 ) ) )  TYPE_2 . METHOD_4 ( ( - 1 ) ) ) THEN THEN ) IF IF ( VAR VAR ( TYPE long ) TYPE long ( NAME start ) NAME start ( INIT = TYPE_2 . METHOD_5 ( ) ) INIT = TYPE_2 . METHOD_5 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( false ) ) INIT = new TYPE_1 ( false ) ) VAR VAR (  VAR_1 . METHOD_6 ( ) )  VAR_1 . METHOD_6 ( ) ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_5 ( ) ) INIT = TYPE_2 . METHOD_5 ( ) ) VAR VAR (  java.lang.System.out.println ( ( STRING_1 + ( ( VAR_2 - start ) / INT_1 ) ) ) )  java.lang.System.out.println ( ( STRING_1 + ( ( VAR_2 - start ) / INT_1 ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME path ) NAME path ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  VAR_1 = TYPE_1 . METHOD_2 ( path ) )  VAR_1 = TYPE_1 . METHOD_2 ( path ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( BLOCK BLOCK (  return false ; )  return false ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ( TRY TRY ( BLOCK BLOCK (  METHOD_3 ( ) )  METHOD_3 ( ) (  return true ; )  return true ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME ex ) NAME ex ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  VAR_1 . METHOD_4 ( ) )  VAR_1 . METHOD_4 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  TYPE_3 . METHOD_5 ( ( ( STRING_1 + path ) + STRING_2 ) , ex ) )  TYPE_3 . METHOD_5 ( ( ( STRING_1 + path ) + STRING_2 ) , ex ) (  return false ; )  return false ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  VAR_2 )  VAR_2 ( BLOCK BLOCK ( IF IF ( COND ( ( ( VAR_3 ) == null ) || ( VAR_1 == null ) ) || ( ( VAR_4 . METHOD_2 ( ) ) != ( VAR_1 . METHOD_2 ( ) ) ) ) COND ( ( ( VAR_3 ) == null ) || ( VAR_1 == null ) ) || ( ( VAR_4 . METHOD_2 ( ) ) != ( VAR_1 . METHOD_2 ( ) ) ) ( THEN THEN (  android.util.Slog.w ( VAR_5 . TAG , ( STRING_1 + VAR_1 ) ) )  android.util.Slog.w ( VAR_5 . TAG , ( STRING_1 + VAR_1 ) ) ) THEN THEN ) IF IF (  VAR_6 . METHOD_3 ( VAR_7 ) )  VAR_6 . METHOD_3 ( VAR_7 ) ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME uid ) NAME uid ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int[] ) TYPE int[] ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE int[][] ) TYPE int[][] ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_5 ) NAME VAR_5 ( INIT = ( VAR_3 ) ? VAR_6 : 0 ) INIT = ( VAR_3 ) ? VAR_6 : 0 ) VAR VAR (  return TYPE_1 . METHOD_2 ( uid , VAR_1 , VAR_2 , VAR_5 , VAR_4 ) ; )  return TYPE_1 . METHOD_2 ( uid , VAR_1 , VAR_2 , VAR_5 , VAR_4 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2[] ) TYPE TYPE_2[] ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK ( IF IF ( COND ( ( ( VAR_4 ) == false ) || ( ( VAR_3 . METHOD_2 ( ) ) == false ) ) && ( ( VAR_3 . METHOD_3 ( ) ) == false ) ) COND ( ( ( VAR_4 ) == false ) || ( ( VAR_3 . METHOD_2 ( ) ) == false ) ) && ( ( VAR_3 . METHOD_3 ( ) ) == false ) ( THEN THEN (  VAR_1 . METHOD_4 ( VAR_3 . METHOD_5 ( ) ) )  VAR_1 . METHOD_4 ( VAR_3 . METHOD_5 ( ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_5 . METHOD_2 ( VAR_1 ) ) INIT = VAR_5 . METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_4 == null ) COND VAR_4 == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  VAR_6 . append ( new TYPE_3 . Float ( VAR_7 , VAR_8 , VAR_2 . METHOD_3 ( ) , VAR_2 . METHOD_4 ( ) ) , false ) )  VAR_6 . append ( new TYPE_3 . Float ( VAR_7 , VAR_8 , VAR_2 . METHOD_3 ( ) , VAR_2 . METHOD_4 ( ) ) , false ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME path ) NAME path ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( null == path ) || ( path . equals ( STRING_1 ) ) ) && ( ( null == VAR_1 ) || ( VAR_1 . equals ( STRING_1 ) ) ) ) COND ( ( null == path ) || ( path . equals ( STRING_1 ) ) ) && ( ( null == VAR_1 ) || ( VAR_1 . equals ( STRING_1 ) ) ) ( THEN THEN (  throw new java.lang.IllegalArgumentException ( STRING_2 ) ; )  throw new java.lang.IllegalArgumentException ( STRING_2 ) ; ) THEN THEN ( ELSE ELSE ( IF IF ( COND ( VAR_2 ) == ( METHOD_2 ( ) ) ) COND ( VAR_2 ) == ( METHOD_2 ( ) ) ( THEN THEN (  throw new TYPE_1 ( STRING_3 ) ; )  throw new TYPE_1 ( STRING_3 ) ; ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF (  return METHOD_3 ( VAR_3 , path , VAR_1 ) ; )  return METHOD_3 ( VAR_3 , path , VAR_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME c ) NAME c ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME s ) NAME s ( INIT = super . METHOD_1 ( c ) ) INIT = super . METHOD_1 ( c ) ) VAR VAR (  TYPE_2 . METHOD_2 ( s , TYPE_3 . METHOD_3 ( ) ) )  TYPE_2 . METHOD_2 ( s , TYPE_3 . METHOD_3 ( ) ) (  TYPE_2 . METHOD_4 ( s , ( ( VAR_1 ) | ( VAR_2 ) ) ) )  TYPE_2 . METHOD_4 ( s , ( ( VAR_1 ) | ( VAR_2 ) ) ) (  return s ; )  return s ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME device ) NAME device ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_3 ) NAME METHOD_3 ( BLOCK BLOCK (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_4 ) NAME METHOD_4 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME line ) NAME line ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( IF IF ( COND ! ( line . METHOD_5 ( ) ) ) COND ! ( line . METHOD_5 ( ) ) ( THEN THEN (  device . METHOD_6 ( name , line ) )  device . METHOD_6 ( name , line ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD (  device . METHOD_2 ( ( STRING_1 + name ) , new TYPE_5 ( ) { public boolean METHOD_3 ( ) { return false ; } public void METHOD_4 ( java.lang.String [ ] VAR_1 ) { for ( java.lang.String line : VAR_1 ) { if ( ! ( line . METHOD_5 ( ) ) ) { device . METHOD_6 ( name , line ) ; } } } } ) )  device . METHOD_2 ( ( STRING_1 + name ) , new TYPE_5 ( ) { public boolean METHOD_3 ( ) { return false ; } public void METHOD_4 ( java.lang.String [ ] VAR_1 ) { for ( java.lang.String line : VAR_1 ) { if ( ! ( line . METHOD_5 ( ) ) ) { device . METHOD_6 ( name , line ) ; } } } } ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME type ) NAME type ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( SWITCH SWITCH ( NAME type ) NAME type ( CASE VAR_2 ( BLOCK BLOCK (  VAR_3 . METHOD_1 ( VAR_1 ) )  VAR_3 . METHOD_1 ( VAR_1 ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_2 ( CASE VAR_4 ( BLOCK BLOCK (  VAR_3 . METHOD_2 ( VAR_1 ) )  VAR_3 . METHOD_2 ( VAR_1 ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_4 ( CASE VAR_5 ( BLOCK BLOCK (  VAR_3 . METHOD_3 ( VAR_1 ) )  VAR_3 . METHOD_3 ( VAR_1 ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_5 ) SWITCH SWITCH ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK (  TYPE_2 . log ( VAR_6 , ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + type ) , e ) )  TYPE_2 . log ( VAR_6 , ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + type ) , e ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( VAR_2 . METHOD_2 ( ) , VAR_3 . getName ( ) , TYPE_2 . METHOD_3 ( ) . METHOD_4 ( VAR_3 . METHOD_5 ( ) ) , VAR_2 . METHOD_6 ( ) ) ) INIT = new TYPE_1 ( VAR_2 . METHOD_2 ( ) , VAR_3 . getName ( ) , TYPE_2 . METHOD_3 ( ) . METHOD_4 ( VAR_3 . METHOD_5 ( ) ) , VAR_2 . METHOD_6 ( ) ) ) VAR VAR ( IF IF ( COND ( VAR_1 . METHOD_7 ( ) ) == ( VAR_4 ) ) COND ( VAR_1 . METHOD_7 ( ) ) == ( VAR_4 ) ( THEN THEN ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME config ) NAME config ( INIT = new TYPE_3 ( ) ) INIT = new TYPE_3 ( ) ) VAR VAR (  VAR_1 . METHOD_8 ( config ) )  VAR_1 . METHOD_8 ( config ) (  METHOD_9 ( config ) )  METHOD_9 ( config ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( PARAMS PARAMS ( VAR VAR ( TYPE com.android.jack.ir.ast.JMethod ) TYPE com.android.jack.ir.ast.JMethod ( NAME method ) NAME method ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( ( method . METHOD_1 ( ) . METHOD_2 ( ) ) || ( method . METHOD_3 ( ) ) ) || ( method . METHOD_4 ( ) ) ) || ( ! ( VAR_1 . METHOD_5 ( this . METHOD_6 ( ) , method ) ) ) ) COND ( ( ( method . METHOD_1 ( ) . METHOD_2 ( ) ) || ( method . METHOD_3 ( ) ) ) || ( method . METHOD_4 ( ) ) ) || ( ! ( VAR_1 . METHOD_5 ( this . METHOD_6 ( ) , method ) ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  new TYPE_1 ( ) . METHOD_5 ( method ) )  new TYPE_1 ( ) . METHOD_5 ( method ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<java.lang.Object> ) TYPE TYPE_1<java.lang.Object> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 < java.lang.Object > ( ) ) INIT = new TYPE_1 < java.lang.Object > ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME a ) NAME a ( INIT = new java.lang.Object ( ) ) INIT = new java.lang.Object ( ) ) VAR VAR (  TYPE_2 . assertTrue ( VAR_1 . METHOD_2 ( a ) ) )  TYPE_2 . assertTrue ( VAR_1 . METHOD_2 ( a ) ) (  TYPE_2 . assertFalse ( VAR_1 . METHOD_2 ( a ) ) )  TYPE_2 . assertFalse ( VAR_1 . METHOD_2 ( a ) ) ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME b ) NAME b ( INIT = new java.lang.Object ( ) ) INIT = new java.lang.Object ( ) ) VAR VAR (  TYPE_2 . assertTrue ( VAR_1 . METHOD_2 ( b ) ) )  TYPE_2 . assertTrue ( VAR_1 . METHOD_2 ( b ) ) (  TYPE_2 . assertFalse ( VAR_1 . METHOD_2 ( null ) ) )  TYPE_2 . assertFalse ( VAR_1 . METHOD_2 ( null ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME n ) NAME n ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND n < ( VAR_1 . length ( ) ) ) COND n < ( VAR_1 . length ( ) ) ( UPDATE UPDATE (  n ++ )  n ++ ) UPDATE UPDATE ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 . METHOD_2 ( n ) ) != 0 ) COND ( VAR_1 . METHOD_2 ( n ) ) != 0 ( THEN THEN (  return VAR_1 ; )  return VAR_1 ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR FOR (  return STRING_1 ; )  return STRING_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME rr ) NAME rr ( INIT = VAR_3 . METHOD_2 ( VAR_1 ) ) INIT = VAR_3 . METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND rr != null ) COND rr != null ( THEN THEN ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME ret ) NAME ret ( INIT = null ) INIT = null ) VAR VAR ( IF IF ( COND ( VAR_1 . error ) == ( VAR_4 ) ) COND ( VAR_1 . error ) == ( VAR_4 ) ( THEN THEN (  ret = TYPE_5 . METHOD_3 ( VAR_2 , VAR_3 ) )  ret = TYPE_5 . METHOD_3 ( VAR_2 , VAR_3 ) (  TYPE_6 . METHOD_4 ( VAR_5 , ret ) )  TYPE_6 . METHOD_4 ( VAR_5 , ret ) ) THEN THEN ) IF IF (  VAR_3 . METHOD_5 ( rr , VAR_1 , ret ) )  VAR_3 . METHOD_5 ( rr , VAR_1 , ret ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public final ) MODIFIER public final ( RETURN TYPE_1<TYPE_2> ) RETURN TYPE_1<TYPE_2> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_3<?superTYPE_2> ) TYPE TYPE_3<?superTYPE_2> ( NAME action ) NAME action ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_4 . METHOD_2 ( action ) )  TYPE_4 . METHOD_2 ( action ) ( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN TYPE_6<TYPE_2> ) RETURN TYPE_6<TYPE_2> ( NAME METHOD_3 ) NAME METHOD_3 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME flags ) NAME flags ) VAR VAR ( VAR VAR ( TYPE TYPE_6<TYPE_2> ) TYPE TYPE_6<TYPE_2> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_4 ) NAME METHOD_4 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  action . METHOD_4 ( VAR_3 ) )  action . METHOD_4 ( VAR_3 ) (  VAR_4 . METHOD_4 ( VAR_3 ) )  VAR_4 . METHOD_4 ( VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD (  return new TYPE_7 < TYPE_2 , TYPE_2 > ( VAR_2 ) { public void METHOD_4 ( TYPE_2 VAR_3 ) { action . METHOD_4 ( VAR_3 ) ; VAR_4 . METHOD_4 ( VAR_3 ) ; } } ; )  return new TYPE_7 < TYPE_2 , TYPE_2 > ( VAR_2 ) { public void METHOD_4 ( TYPE_2 VAR_3 ) { action . METHOD_4 ( VAR_3 ) ; VAR_4 . METHOD_4 ( VAR_3 ) ; } } ; ) BLOCK BLOCK ) METHOD METHOD (  return new TYPE_5 < TYPE_2 , TYPE_2 > ( this , VAR_1 , 0 ) { TYPE_6 < TYPE_2 > METHOD_3 ( int flags , TYPE_6 < TYPE_2 > VAR_2 ) { return new TYPE_7 < TYPE_2 , TYPE_2 > ( VAR_2 ) { public void METHOD_4 ( TYPE_2 VAR_3 ) { action . METHOD_4 ( VAR_3 ) ; VAR_4 . METHOD_4 ( VAR_3 ) ; } } ; } } ; )  return new TYPE_5 < TYPE_2 , TYPE_2 > ( this , VAR_1 , 0 ) { TYPE_6 < TYPE_2 > METHOD_3 ( int flags , TYPE_6 < TYPE_2 > VAR_2 ) { return new TYPE_7 < TYPE_2 , TYPE_2 > ( VAR_2 ) { public void METHOD_4 ( TYPE_2 VAR_3 ) { action . METHOD_4 ( VAR_3 ) ; VAR_4 . METHOD_4 ( VAR_3 ) ; } } ; } } ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_2 . METHOD_3 ( VAR_2 ) ) INIT = TYPE_2 . METHOD_3 ( VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( INIT = this . VAR_4 ) INIT = this . VAR_4 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_5 ) NAME VAR_5 ( INIT = ( METHOD_4 ( VAR_1 , VAR_4 ) ) ? VAR_6 : VAR_7 ) INIT = ( METHOD_4 ( VAR_1 , VAR_4 ) ) ? VAR_6 : VAR_7 ) VAR VAR ( IF IF ( COND VAR_3 < VAR_5 ) COND VAR_3 < VAR_5 ( THEN THEN (  VAR_8 = TYPE_2 . METHOD_5 ( VAR_2 , TYPE_2 . METHOD_6 ( VAR_5 ) ) )  VAR_8 = TYPE_2 . METHOD_5 ( VAR_2 , TYPE_2 . METHOD_6 ( VAR_5 ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  mRS . METHOD_2 ( ) )  mRS . METHOD_2 ( ) ( VAR VAR ( TYPE int ) TYPE int ( NAME id ) NAME id ( INIT = mRS . METHOD_3 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 , VAR_8 , VAR_9 ) ) INIT = mRS . METHOD_3 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 , VAR_8 , VAR_9 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_10 ) NAME VAR_10 ( INIT = new TYPE_1 ( id , mRS ) ) INIT = new TYPE_1 ( id , mRS ) ) VAR VAR (  VAR_11 = VAR_12 )  VAR_11 = VAR_12 (  VAR_13 = VAR_5 )  VAR_13 = VAR_5 (  VAR_14 = VAR_1 )  VAR_14 = VAR_1 (  VAR_15 = VAR_2 )  VAR_15 = VAR_2 (  VAR_16 = VAR_3 )  VAR_16 = VAR_3 (  VAR_17 = VAR_4 )  VAR_17 = VAR_4 (  VAR_18 = VAR_19 )  VAR_18 = VAR_19 (  VAR_20 = VAR_21 )  VAR_20 = VAR_21 (  VAR_22 = VAR_6 )  VAR_22 = VAR_6 (  return VAR_10 ; )  return VAR_10 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( METHOD_2 ( ) ) ) COND ! ( METHOD_2 ( ) ) ( THEN THEN (  TYPE_2 . METHOD_3 ( VAR_1 ) )  TYPE_2 . METHOD_3 ( VAR_1 ) (  return ; )  return ; ) THEN THEN ) IF IF ( TRY TRY ( BLOCK BLOCK (  METHOD_4 ( ) . METHOD_1 ( mContext . METHOD_5 ( ) , VAR_1 ) )  METHOD_4 ( ) . METHOD_1 ( mContext . METHOD_5 ( ) , VAR_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME e ) NAME e ( BLOCK BLOCK (  throw e . METHOD_6 ( ) ; )  throw e . METHOD_6 ( ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME device ) NAME device ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_6<java.lang.String,java.lang.String> ) TYPE TYPE_6<java.lang.String,java.lang.String> ( NAME entry ) NAME entry ( IN TYPE_7 . METHOD_2 ( ) ) IN TYPE_7 . METHOD_2 ( ) ( BLOCK BLOCK (  VAR_1 . METHOD_3 ( entry . METHOD_4 ( ) , TYPE_8 . METHOD_5 ( STRING_1 , device . METHOD_6 ( entry . METHOD_7 ( ) ) ) ) )  VAR_1 . METHOD_3 ( entry . METHOD_4 ( ) , TYPE_8 . METHOD_5 ( STRING_1 , device . METHOD_6 ( entry . METHOD_7 ( ) ) ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  device . METHOD_8 ( STRING_2 ) )  device . METHOD_8 ( STRING_2 ) (  device . METHOD_8 ( STRING_3 ) )  device . METHOD_8 ( STRING_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) == 0 ) COND ( VAR_1 ) == 0 ( THEN THEN (  VAR_2 = TYPE_1 . METHOD_1 ( ) )  VAR_2 = TYPE_1 . METHOD_1 ( ) ) THEN THEN ) IF IF (  VAR_3 = ( TYPE_1 . METHOD_1 ( ) ) - ( ( VAR_2 ) + ( 100 * ( VAR_1 ) ) ) )  VAR_3 = ( TYPE_1 . METHOD_1 ( ) ) - ( ( VAR_2 ) + ( 100 * ( VAR_1 ) ) ) (  ( VAR_1 ) ++ )  ( VAR_1 ) ++ ( IF IF ( COND ( VAR_1 ) == 2 ) COND ( VAR_1 ) == 2 ( THEN THEN ( TRY TRY ( BLOCK BLOCK (  TYPE_2 . METHOD_2 ( INT_1 ) )  TYPE_2 . METHOD_2 ( INT_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = 1 ) INIT = 1 ) VAR VAR (  VAR_1 = ( VAR_1 * INT_1 ) + ( ( int ) ( VAR_2 ) ) )  VAR_1 = ( VAR_1 * INT_1 ) + ( ( int ) ( VAR_2 ) ) (  VAR_1 = ( VAR_1 * INT_2 ) + ( ( int ) ( ( VAR_3 ) == null ? 0 : VAR_3 . METHOD_2 ( ) ) ) )  VAR_1 = ( VAR_1 * INT_2 ) + ( ( int ) ( ( VAR_3 ) == null ? 0 : VAR_3 . METHOD_2 ( ) ) ) (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 . METHOD_2 ( VAR_1 ) ) INIT = VAR_4 . METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_3 == null ) COND VAR_3 == null ( THEN THEN (  return 0 ; )  return 0 ; ) THEN THEN ) IF IF (  VAR_5 = TYPE_2 . METHOD_2 ( VAR_2 ) )  VAR_5 = TYPE_2 . METHOD_2 ( VAR_2 ) (  VAR_3 . METHOD_3 ( ) )  VAR_3 . METHOD_3 ( ) (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE long ) TYPE long ( NAME x ) NAME x ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  throw new TYPE_2 ( ) ; )  throw new TYPE_2 ( ) ; ) THEN THEN ) IF IF ( IF IF ( COND ! ( VAR_2 ) ) COND ! ( VAR_2 ) ( THEN THEN (  throw new TYPE_3 ( STRING_1 ) ; )  throw new TYPE_3 ( STRING_1 ) ; ) THEN THEN ) IF IF (  METHOD_1 ( METHOD_2 ( METHOD_3 ( VAR_3 ) ) , x ) )  METHOD_1 ( METHOD_2 ( METHOD_3 ( VAR_3 ) ) , x ) (  return this ; )  return this ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_1 . METHOD_2 ( true ) ) ) COND ! ( VAR_1 . METHOD_2 ( true ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR ( IF IF ( COND ! ( METHOD_3 ( VAR_2 ) ) ) COND ! ( METHOD_3 ( VAR_2 ) ) ( THEN THEN ( IF IF ( COND VAR_3 ) COND VAR_3 ( THEN THEN (  log ( VAR_2 . METHOD_4 ( ) ) )  log ( VAR_2 . METHOD_4 ( ) ) ) THEN THEN ) IF IF (  return false ; )  return false ; ) THEN THEN ) IF IF ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( IN VAR_5 . values ( ) ) IN VAR_5 . values ( ) ( BLOCK BLOCK ( IF IF ( COND METHOD_5 ( VAR_4 ) ) COND METHOD_5 ( VAR_4 ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  return - 1 ; )  return - 1 ; ) THEN THEN ) IF IF ( SYNCHRONIZED SYNCHRONIZED (  VAR_2 )  VAR_2 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 . METHOD_2 ( VAR_1 , 0 , false ) ) INIT = VAR_4 . METHOD_2 ( VAR_1 , 0 , false ) ) VAR VAR ( IF IF ( COND VAR_3 == null ) COND VAR_3 == null ( THEN THEN (  return - 1 ; )  return - 1 ; ) THEN THEN ) IF IF (  return VAR_3 . userId ; )  return VAR_3 . userId ; ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR (  VAR_1 = new TYPE_1 ( TYPE_2 . METHOD_2 ( STRING_1 ) ) )  VAR_1 = new TYPE_1 ( TYPE_2 . METHOD_2 ( STRING_1 ) ) (  assertEquals ( CHAR_1 , VAR_1 . METHOD_3 ( ) ) )  assertEquals ( CHAR_1 , VAR_1 . METHOD_3 ( ) ) (  assertEquals ( CHAR_2 , VAR_1 . METHOD_4 ( ) ) )  assertEquals ( CHAR_2 , VAR_1 . METHOD_4 ( ) ) (  VAR_1 = new TYPE_1 ( TYPE_2 . METHOD_2 ( STRING_2 ) ) )  VAR_1 = new TYPE_1 ( TYPE_2 . METHOD_2 ( STRING_2 ) ) (  assertEquals ( CHAR_3 , VAR_1 . METHOD_3 ( ) ) )  assertEquals ( CHAR_3 , VAR_1 . METHOD_3 ( ) ) (  assertEquals ( CHAR_4 , VAR_1 . METHOD_4 ( ) ) )  assertEquals ( CHAR_4 , VAR_1 . METHOD_4 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) )  METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) (  METHOD_2 ( TYPE_1 . METHOD_4 ( ) ) )  METHOD_2 ( TYPE_1 . METHOD_4 ( ) ) (  METHOD_2 ( TYPE_1 . METHOD_5 ( ) ) )  METHOD_2 ( TYPE_1 . METHOD_5 ( ) ) (  assertFalse ( VAR_1 . METHOD_6 ( ) . METHOD_7 ( ) ) )  assertFalse ( VAR_1 . METHOD_6 ( ) . METHOD_7 ( ) ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME app ) NAME app ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  app . uid = VAR_2 )  app . uid = VAR_2 (  app . packageName = VAR_3 )  app . packageName = VAR_3 (  assertTrue ( VAR_1 . METHOD_8 ( app ) ) )  assertTrue ( VAR_1 . METHOD_8 ( app ) ) (  assertTrue ( VAR_1 . METHOD_6 ( ) . METHOD_7 ( ) ) )  assertTrue ( VAR_1 . METHOD_6 ( ) . METHOD_7 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public synchronized ) MODIFIER public synchronized ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 < 0 ) COND VAR_1 < 0 ( THEN THEN (  VAR_1 = 0 )  VAR_1 = 0 ) THEN THEN ) IF IF ( IF IF ( COND VAR_1 != ( VAR_2 ) ) COND VAR_1 != ( VAR_2 ) ( THEN THEN (  VAR_2 = VAR_1 )  VAR_2 = VAR_1 (  METHOD_2 ( ) )  METHOD_2 ( ) ( IF IF ( COND ( VAR_3 ) > VAR_1 ) COND ( VAR_3 ) > VAR_1 ( THEN THEN (  VAR_3 = VAR_1 )  VAR_3 = VAR_1 (  METHOD_3 ( VAR_4 , VAR_3 , false ) )  METHOD_3 ( VAR_4 , VAR_3 , false ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_2 ( ) ) INIT = VAR_2 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 . METHOD_3 ( ) ) INIT = VAR_4 . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_6 . METHOD_3 ( ) ) INIT = VAR_6 . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_7 ) NAME VAR_7 ( INIT = ( VAR_2 . METHOD_2 ( ) ) - VAR_1 ) INIT = ( VAR_2 . METHOD_2 ( ) ) - VAR_1 ) VAR VAR (  android.util.Log.d ( VAR_8 . TAG , ( ( STRING_1 + VAR_7 ) + STRING_2 ) ) )  android.util.Log.d ( VAR_8 . TAG , ( ( STRING_1 + VAR_7 ) + STRING_2 ) ) (  return TYPE_1 . METHOD_4 ( VAR_3 , VAR_5 ) ; )  return TYPE_1 . METHOD_4 ( VAR_3 , VAR_5 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME device ) NAME device ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME project ) NAME project ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME packageName ) NAME packageName ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME pos ) NAME pos ( INIT = VAR_1 . METHOD_2 ( STRING_1 ) ) INIT = VAR_1 . METHOD_2 ( STRING_1 ) ) VAR VAR ( IF IF ( COND pos != ( - 1 ) ) COND pos != ( - 1 ) ( THEN THEN (  packageName = VAR_1 . METHOD_3 ( 0 , pos ) )  packageName = VAR_1 . METHOD_3 ( 0 , pos ) ) THEN THEN ( ELSE ELSE (  packageName = STRING_2 )  packageName = STRING_2 ) ELSE ELSE ) IF IF (  return METHOD_4 ( packageName , device , project , VAR_2 ) ; )  return METHOD_4 ( packageName , device , project , VAR_2 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.Throwable ) TYPE java.lang.Throwable ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_2 ( VAR_2 ) ) INIT = METHOD_2 ( VAR_2 ) ) VAR VAR (  TYPE_1 . log ( VAR_3 , STRING_1 , VAR_5 , VAR_4 ) )  TYPE_1 . log ( VAR_3 , STRING_1 , VAR_5 , VAR_4 ) ( IF IF ( COND VAR_3 != null ) COND VAR_3 != null ( THEN THEN (  VAR_6 = true )  VAR_6 = true ) THEN THEN ) IF IF (  METHOD_3 ( VAR_1 , VAR_4 ) )  METHOD_3 ( VAR_1 , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  assertEquals ( STRING_1 , ( - 1 ) , VAR_1 . METHOD_2 ( ) ) )  assertEquals ( STRING_1 , ( - 1 ) , VAR_1 . METHOD_2 ( ) ) ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = INT_1 ) INIT = INT_1 ) VAR VAR (  VAR_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( ) , VAR_2 ) )  VAR_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( ) , VAR_2 ) (  assertEquals ( STRING_2 , VAR_2 , VAR_1 . METHOD_2 ( ) ) )  assertEquals ( STRING_2 , VAR_2 , VAR_1 . METHOD_2 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = STRING_2 ) INIT = STRING_2 ) VAR VAR (  assertEquals ( STRING_3 , VAR_2 , TYPE_1 . METHOD_2 ( VAR_1 ) ) )  assertEquals ( STRING_3 , VAR_2 , TYPE_1 . METHOD_2 ( VAR_1 ) ) (  VAR_1 = STRING_4 )  VAR_1 = STRING_4 (  VAR_2 = STRING_5 )  VAR_2 = STRING_5 (  assertEquals ( STRING_3 , VAR_2 , TYPE_1 . METHOD_2 ( VAR_1 ) ) )  assertEquals ( STRING_3 , VAR_2 , TYPE_1 . METHOD_2 ( VAR_1 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ! ( TYPE_1 . METHOD_2 ( context ) ) ) COND ! ( TYPE_1 . METHOD_2 ( context ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  return ( ( ( ( ( ! ( METHOD_3 ( ) ) ) && ( ! ( METHOD_4 ( ) ) ) ) && ( ! ( METHOD_5 ( ) ) ) ) && ( ! ( METHOD_6 ( ) ) ) ) && ( ! ( METHOD_7 ( ) ) ) ) && ( ! ( METHOD_8 ( ) ) ) ; )  return ( ( ( ( ( ! ( METHOD_3 ( ) ) ) && ( ! ( METHOD_4 ( ) ) ) ) && ( ! ( METHOD_5 ( ) ) ) ) && ( ! ( METHOD_6 ( ) ) ) ) && ( ! ( METHOD_7 ( ) ) ) ) && ( ! ( METHOD_8 ( ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1<java.lang.String> ) RETURN TYPE_1<java.lang.String> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_3 . METHOD_2 ( ) ) INIT = TYPE_3 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . get ( VAR_3 , STRING_1 ) ) INIT = VAR_1 . get ( VAR_3 , STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1<java.lang.String> ) TYPE TYPE_1<java.lang.String> ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_4 < java.lang.String > ( ) ) INIT = new TYPE_4 < java.lang.String > ( ) ) VAR VAR ( IF IF ( COND VAR_2 . METHOD_3 ( ) ) COND VAR_2 . METHOD_3 ( ) ( THEN THEN (  return VAR_4 ; )  return VAR_4 ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_5 ) NAME VAR_5 ( INIT = TYPE_5 . on ( VAR_6 ) . METHOD_4 ( ) ) INIT = TYPE_5 . on ( VAR_6 ) . METHOD_4 ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_7 ) NAME VAR_7 ( IN VAR_5 . METHOD_5 ( VAR_2 ) ) IN VAR_5 . METHOD_5 ( VAR_2 ) ( BLOCK BLOCK (  VAR_4 . METHOD_6 ( VAR_7 ) )  VAR_4 . METHOD_6 ( VAR_7 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_4 ; )  return VAR_4 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1<TYPE_2> ) RETURN TYPE_1<TYPE_2> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return VAR_1 . METHOD_2 ( ) . METHOD_3 ( ( entry ) - > entry . getName ( ) . METHOD_4 ( STRING_1 ) ) . METHOD_5 ( TYPE_4 . METHOD_6 ( TYPE_2 : : getName ) ) . METHOD_7 ( TYPE_1 . METHOD_8 ( TYPE_1 ) ) ; )  return VAR_1 . METHOD_2 ( ) . METHOD_3 ( ( entry ) - > entry . getName ( ) . METHOD_4 ( STRING_1 ) ) . METHOD_5 ( TYPE_4 . METHOD_6 ( TYPE_2 : : getName ) ) . METHOD_7 ( TYPE_1 . METHOD_8 ( TYPE_1 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.StringBuilder ) TYPE java.lang.StringBuilder ( NAME sb ) NAME sb ( INIT = new java.lang.StringBuilder ( ) ) INIT = new java.lang.StringBuilder ( ) ) VAR VAR ( VAR VAR ( TYPE byte ) TYPE byte ( NAME b ) NAME b ) VAR VAR ( WHILE WHILE ( COND ( b = VAR_1 . get ( VAR_2 ) ) != 0 ) COND ( b = VAR_1 . get ( VAR_2 ) ) != 0 ( BLOCK BLOCK (  ++ VAR_2 )  ++ VAR_2 (  sb.append ( ( ( char ) ( b ) ) ) )  sb.append ( ( ( char ) ( b ) ) ) ) BLOCK BLOCK ) WHILE WHILE (  return sb . toString ( ) ; )  return sb . toString ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME listener ) NAME listener ( INIT = new TYPE_1 ( 0 ) ) INIT = new TYPE_1 ( 0 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2<TYPE_3> ) TYPE TYPE_2<TYPE_3> ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( listener , VAR_2 ) ) INIT = METHOD_2 ( listener , VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2<TYPE_3> ) TYPE TYPE_2<TYPE_3> ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_2 ( listener , VAR_4 ) ) INIT = METHOD_2 ( listener , VAR_4 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_1 . get ( VAR_6 , VAR_7 ) ) INIT = VAR_1 . get ( VAR_6 , VAR_7 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME server ) NAME server ( INIT = VAR_3 . get ( VAR_6 , VAR_7 ) ) INIT = VAR_3 . get ( VAR_6 , VAR_7 ) ) VAR VAR ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE android.bluetooth.BluetoothDevice ) TYPE android.bluetooth.BluetoothDevice ( NAME device ) NAME device ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( TYPE_2 . METHOD_2 ( VAR_3 ) ) ) COND ! ( TYPE_2 . METHOD_2 ( VAR_3 ) ) ( THEN THEN (  android.util.Log.w ( TYPE_3 . TAG , STRING_1 ) )  android.util.Log.w ( TYPE_3 . TAG , STRING_1 ) (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME service ) NAME service ( INIT = METHOD_3 ( ) ) INIT = METHOD_3 ( ) ) VAR VAR ( IF IF ( COND service == null ) COND service == null ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  return service . METHOD_4 ( device , VAR_1 , VAR_2 ) ; )  return service . METHOD_4 ( device , VAR_1 , VAR_2 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE android.content.Intent ) TYPE android.content.Intent ( NAME VAR_4 ) NAME VAR_4 ( INIT = new android.content.Intent ( VAR_5 ) ) INIT = new android.content.Intent ( VAR_5 ) ) VAR VAR ( VAR VAR ( TYPE byte[][] ) TYPE byte[][] ( NAME VAR_6 ) NAME VAR_6 ( INIT = new byte [ 2 ] [ ] ) INIT = new byte [ 2 ] [ ] ) VAR VAR (  VAR_6 [ 0 ] = VAR_7 )  VAR_6 [ 0 ] = VAR_7 (  VAR_6 [ 1 ] = VAR_8 )  VAR_6 [ 1 ] = VAR_8 (  VAR_4 . METHOD_2 ( STRING_1 , TYPE_2 . METHOD_3 ( VAR_6 , VAR_2 , VAR_3 ) ) )  VAR_4 . METHOD_2 ( STRING_1 , TYPE_2 . METHOD_3 ( VAR_6 , VAR_2 , VAR_3 ) ) (  VAR_1 . METHOD_4 ( VAR_4 , VAR_9 , VAR_10 , VAR_11 , null , null , VAR_12 , null , null ) )  VAR_1 . METHOD_4 ( VAR_4 , VAR_9 , VAR_10 , VAR_11 , null , null , VAR_12 , null , null ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.Class<?> ) TYPE java.lang.Class<?> ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE TYPE_3<java.lang.String> ) TYPE TYPE_3<java.lang.String> ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_6 ) NAME VAR_6 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_7 ) NAME VAR_7 ) VAR VAR ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME args ) NAME args ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_8 . METHOD_2 ( VAR_3 ) ) COND VAR_8 . METHOD_2 ( VAR_3 ) ( THEN THEN (  return new TYPE_5 ( VAR_1 , VAR_7 , VAR_3 , args ) ; )  return new TYPE_5 ( VAR_1 , VAR_7 , VAR_3 , args ) ; ) THEN THEN ( ELSE ELSE (  return null ; )  return null ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME index ) NAME index ( INIT = METHOD_2 ( VAR_1 , true ) ) INIT = METHOD_2 ( VAR_1 , true ) ) VAR VAR ( IF IF ( COND index >= 0 ) COND index >= 0 ( THEN THEN ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME r ) NAME r ( INIT = ( ( TYPE_1 ) ( VAR_2 . get ( index ) ) ) ) INIT = ( ( TYPE_1 ) ( VAR_2 . get ( index ) ) ) ) VAR VAR ( IF IF ( COND r != null ) COND r != null ( THEN THEN (  return VAR_3 ; )  return VAR_3 ; ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) == null ) COND ( VAR_1 ) == null ( THEN THEN ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.io.File ( VAR_3 , VAR_4 ) ) INIT = new java.io.File ( VAR_3 , VAR_4 ) ) VAR VAR ( IF IF ( COND VAR_2 . METHOD_2 ( ) ) COND VAR_2 . METHOD_2 ( ) ( THEN THEN (  VAR_1 = TYPE_2 . METHOD_3 ( VAR_2 , false ) )  VAR_1 = TYPE_2 . METHOD_3 ( VAR_2 , false ) ) THEN THEN ( ELSE ELSE (  VAR_5 . METHOD_4 ( this , VAR_3 , ( STRING_1 + ( VAR_3 . METHOD_5 ( ) ) ) ) )  VAR_5 . METHOD_4 ( this , VAR_3 , ( STRING_1 + ( VAR_3 . METHOD_5 ( ) ) ) ) (  return null ; )  return null ; ) ELSE ELSE ) IF IF ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME context ) NAME context ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 = TYPE_2 . get ( context . METHOD_2 ( ) ) )  VAR_1 = TYPE_2 . get ( context . METHOD_2 ( ) ) ( IF IF ( COND ! ( VAR_2 ) ) COND ! ( VAR_2 ) ( THEN THEN (  VAR_2 = true )  VAR_2 = true (  context . METHOD_3 ( VAR_3 , TYPE_3 . METHOD_4 ( VAR_4 ) , STRING_1 , null ) )  context . METHOD_3 ( VAR_3 , TYPE_3 . METHOD_4 ( VAR_4 ) , STRING_1 , null ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME server ) NAME server ( INIT = new TYPE_1 ( 0 ) ) INIT = new TYPE_1 ( 0 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( TYPE_3 . METHOD_2 ( ) , server . METHOD_3 ( ) ) ) INIT = new TYPE_2 ( TYPE_3 . METHOD_2 ( ) , server . METHOD_3 ( ) ) ) VAR VAR (  VAR_1 . METHOD_4 ( INT_1 ) )  VAR_1 . METHOD_4 ( INT_1 ) (  assertTrue ( STRING_1 , ( ( VAR_1 . METHOD_5 ( ) ) >= INT_1 ) ) )  assertTrue ( STRING_1 , ( ( VAR_1 . METHOD_5 ( ) ) >= INT_1 ) ) (  VAR_1 . METHOD_6 ( ) )  VAR_1 . METHOD_6 ( ) (  server . METHOD_6 ( ) )  server . METHOD_6 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( VAR_2 ) ) INIT = new TYPE_1 ( VAR_2 ) ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < ( VAR_2 ) ) COND i < ( VAR_2 ) ( UPDATE UPDATE (  ++ i )  ++ i ) UPDATE UPDATE ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.Integer ) TYPE java.lang.Integer ( NAME VAR_3 ) NAME VAR_3 ( INIT = new java.lang.Integer ( i ) ) INIT = new java.lang.Integer ( i ) ) VAR VAR (  VAR_1 . METHOD_2 ( VAR_3 ) )  VAR_1 . METHOD_2 ( VAR_3 ) (  assertEquals ( VAR_3 , VAR_1 . METHOD_3 ( ) ) )  assertEquals ( VAR_3 , VAR_1 . METHOD_3 ( ) ) ) BLOCK BLOCK ) FOR FOR (  assertEquals ( 0 , VAR_1 . METHOD_4 ( ) ) )  assertEquals ( 0 , VAR_1 . METHOD_4 ( ) ) (  VAR_1 . METHOD_2 ( new java.lang.Integer ( VAR_2 ) ) )  VAR_1 . METHOD_2 ( new java.lang.Integer ( VAR_2 ) ) (  METHOD_5 ( ) )  METHOD_5 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( TYPE_2 . METHOD_2 ( ) ) - ( VAR_3 ) ) INIT = ( TYPE_2 . METHOD_2 ( ) ) - ( VAR_3 ) ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_2 < ( TYPE_3 . METHOD_3 ( ) ) ) INIT = VAR_2 < ( TYPE_3 . METHOD_3 ( ) ) ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_1 == ( VAR_6 ) ) INIT = VAR_1 == ( VAR_6 ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_7 ) NAME VAR_7 ( INIT = TYPE_4 . METHOD_4 ( VAR_4 , VAR_5 ) ) INIT = TYPE_4 . METHOD_4 ( VAR_4 , VAR_5 ) ) VAR VAR (  VAR_8 . log ( new TYPE_4 ( VAR_9 , VAR_7 ) ) )  VAR_8 . log ( new TYPE_4 ( VAR_9 , VAR_7 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN long ) RETURN long ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_3 . METHOD_2 ( VAR_1 ) ) INIT = TYPE_3 . METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_3 >= VAR_2 ) COND VAR_3 >= VAR_2 ( THEN THEN (  throw new TYPE_2 ( ( ( ( STRING_1 + VAR_3 ) + STRING_2 ) + VAR_2 ) ) ; )  throw new TYPE_2 ( ( ( ( STRING_1 + VAR_3 ) + STRING_2 ) + VAR_2 ) ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_3 . METHOD_3 ( VAR_1 ) ) INIT = TYPE_3 . METHOD_3 ( VAR_1 ) ) VAR VAR ( IF IF ( COND ( VAR_3 + VAR_4 ) != VAR_2 ) COND ( VAR_3 + VAR_4 ) != VAR_2 ( THEN THEN (  throw new TYPE_2 ( ( STRING_3 + STRING_4 ) ) ; )  throw new TYPE_2 ( ( STRING_3 + STRING_4 ) ) ; ) THEN THEN ) IF IF (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME context ) NAME context ) VAR VAR ( VAR VAR ( TYPE android.content.Intent ) TYPE android.content.Intent ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_2 ( VAR_3 ) ) INIT = VAR_1 . METHOD_2 ( VAR_3 ) ) VAR VAR ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME pkg ) NAME pkg ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  this )  this ( BLOCK BLOCK ( IF IF ( COND METHOD_3 ( pkg , ( - 1 ) , false , false , false ) ) COND METHOD_3 ( pkg , ( - 1 ) , false , false , false ) ( THEN THEN (  METHOD_4 ( VAR_4 ) )  METHOD_4 ( VAR_4 ) (  return ; )  return ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME m ) NAME m ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME v ) NAME v ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME value ) NAME value ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = false ) INIT = false ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( IF IF ( COND v == null ) COND v == null ( THEN THEN (  m . METHOD_2 ( value ) )  m . METHOD_2 ( value ) ) THEN THEN ( ELSE ELSE (  m . METHOD_2 ( v , value ) )  m . METHOD_2 ( v , value ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_2 = true )  VAR_2 = true ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  TYPE_4 . assertEquals ( VAR_2 , VAR_1 ) )  TYPE_4 . assertEquals ( VAR_2 , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME key ) NAME key ( INIT = ( ( VAR_2 . METHOD_3 ( ) ) + STRING_1 ) + VAR_3 ) INIT = ( ( VAR_2 . METHOD_3 ( ) ) + STRING_1 ) + VAR_3 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_4 . get ( key ) ) INIT = TYPE_4 . get ( key ) ) VAR VAR ( IF IF ( COND VAR_4 == null ) COND VAR_4 == null ( THEN THEN ( TRY TRY ( BLOCK BLOCK (  VAR_4 = TYPE_2 . METHOD_4 ( VAR_2 , VAR_3 ) )  VAR_4 = TYPE_2 . METHOD_4 ( VAR_2 , VAR_3 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_4 = new TYPE_1 ( VAR_5 , null ) )  VAR_4 = new TYPE_1 ( VAR_5 , null ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  TYPE_4 . METHOD_5 ( key , VAR_4 ) )  TYPE_4 . METHOD_5 ( key , VAR_4 ) ) THEN THEN ) IF IF (  return VAR_4 ; )  return VAR_4 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1[] ) RETURN TYPE_1[] ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( STRING_1 ) ) INIT = TYPE_2 . METHOD_2 ( STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_1 ) ( VAR_1 . METHOD_3 ( new TYPE_3 ( TYPE_4 . METHOD_4 ( ) ) ) ) ) ) INIT = ( ( TYPE_1 ) ( VAR_1 . METHOD_3 ( new TYPE_3 ( TYPE_4 . METHOD_4 ( ) ) ) ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1[] ) TYPE TYPE_1[] ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_1 [ ] { VAR_2 } ) INIT = new TYPE_1 [ ] { VAR_2 } ) VAR VAR (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME ex ) NAME ex ( BLOCK BLOCK (  fail ( ( STRING_2 + ex ) ) )  fail ( ( STRING_2 + ex ) ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( VAR_2 ) )  VAR_1 . METHOD_2 ( VAR_2 ) (  VAR_1 . METHOD_3 ( false , METHOD_4 ( ) ) )  VAR_1 . METHOD_3 ( false , METHOD_4 ( ) ) (  assertTrue ( VAR_3 . METHOD_5 ( VAR_4 ) ) )  assertTrue ( VAR_3 . METHOD_5 ( VAR_4 ) ) (  assertFalse ( VAR_5 . METHOD_6 ( ) ) )  assertFalse ( VAR_5 . METHOD_6 ( ) ) (  assertFalse ( VAR_2 . METHOD_6 ( ) ) )  assertFalse ( VAR_2 . METHOD_6 ( ) ) (  VAR_3 . METHOD_7 ( VAR_4 ) )  VAR_3 . METHOD_7 ( VAR_4 ) (  VAR_6 . METHOD_8 ( ) )  VAR_6 . METHOD_8 ( ) (  assertTrue ( VAR_5 . METHOD_6 ( ) ) )  assertTrue ( VAR_5 . METHOD_6 ( ) ) (  assertTrue ( VAR_2 . METHOD_6 ( ) ) )  assertTrue ( VAR_2 . METHOD_6 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME data ) NAME data ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME offset ) NAME offset ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME length ) NAME length ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( METHOD_2 ( ) ) ) COND ! ( METHOD_2 ( ) ) ( THEN THEN ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME s ) NAME s ( INIT = null ) INIT = null ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  s = new java.lang.String ( data , offset , length , STRING_1 ) )  s = new java.lang.String ( data , offset , length , STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME e ) NAME e ( BLOCK BLOCK (  s = new java.lang.String ( data , offset , length ) )  s = new java.lang.String ( data , offset , length ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  VAR_1 . append ( s ) )  VAR_1 . append ( s ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  s = new TYPE_1 ( STRING_1 ) )  s = new TYPE_1 ( STRING_1 ) ( TRY TRY ( BLOCK BLOCK (  s . METHOD_2 ( ( ( VAR_1 ) - 1 ) ) )  s . METHOD_2 ( ( ( VAR_1 ) - 1 ) ) (  fail ( STRING_2 ) )  fail ( STRING_2 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.IllegalArgumentException ) TYPE java.lang.IllegalArgumentException ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ( TRY TRY ( BLOCK BLOCK (  s . METHOD_2 ( ( ( VAR_2 ) + 1 ) ) )  s . METHOD_2 ( ( ( VAR_2 ) + 1 ) ) (  fail ( STRING_2 ) )  fail ( STRING_2 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.IllegalArgumentException ) TYPE java.lang.IllegalArgumentException ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  s . METHOD_2 ( 11 ) )  s . METHOD_2 ( 11 ) (  assertEquals ( 11 , s . METHOD_3 ( ) ) )  assertEquals ( 11 , s . METHOD_3 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME a ) NAME a ( INIT = METHOD_2 ( STRING_1 ) ) INIT = METHOD_2 ( STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME b ) NAME b ( INIT = METHOD_2 ( STRING_2 ) ) INIT = METHOD_2 ( STRING_2 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( a , b , VAR_2 ) . METHOD_3 ( ) ) INIT = new TYPE_2 ( a , b , VAR_2 ) . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_2 ( a , VAR_1 , VAR_2 ) ) INIT = new TYPE_2 ( a , VAR_1 , VAR_2 ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_3 . METHOD_3 ( ) )  VAR_3 . METHOD_3 ( ) (  fail ( ) )  fail ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME expected ) NAME expected ( BLOCK BLOCK (  assertEquals ( STRING_3 , expected . getMessage ( ) ) )  assertEquals ( STRING_3 , expected . getMessage ( ) ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( ) ) INIT = TYPE_2 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.Integer[] ) TYPE java.lang.Integer[] ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.lang.Integer [ VAR_3 ] ) INIT = new java.lang.Integer [ VAR_3 ] ) VAR VAR (  VAR_1 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_2 ) ) )  VAR_1 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_2 ) ) (  METHOD_5 ( ) )  METHOD_5 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.NullPointerException ) TYPE java.lang.NullPointerException ( NAME VAR_4 ) NAME VAR_4 ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN ( IF IF ( COND ( VAR_2 ) || ( VAR_3 ) ) COND ( VAR_2 ) || ( VAR_3 ) ( THEN THEN (  android.util.Log.v ( VAR_4 . TAG , ( STRING_1 + ( VAR_5 ) ) ) )  android.util.Log.v ( VAR_4 . TAG , ( STRING_1 + ( VAR_5 ) ) ) ) THEN THEN ) IF IF (  VAR_6 = true )  VAR_6 = true (  VAR_1 = false )  VAR_1 = false (  return true ; )  return true ; ) THEN THEN ) IF IF (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.lang.Integer ) RETURN java.lang.Integer ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.Integer ) TYPE java.lang.Integer ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME v ) NAME v ( INIT = null ) INIT = null ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  v = TYPE_1 . METHOD_2 ( VAR_1 ) )  v = TYPE_1 . METHOD_2 ( VAR_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.IllegalArgumentException ) TYPE java.lang.IllegalArgumentException ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE java.lang.NullPointerException ) TYPE java.lang.NullPointerException ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ( IF IF ( COND v != null ) COND v != null ( THEN THEN ( TRY TRY ( BLOCK BLOCK (  return java.lang.Integer . METHOD_3 ( v ) ; )  return java.lang.Integer . METHOD_3 ( v ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) THEN THEN ) IF IF (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( ( VAR_4 ) >= ( VAR_5 ) ) ? TYPE_2 : VAR_6 ) INIT = ( ( VAR_4 ) >= ( VAR_5 ) ) ? TYPE_2 : VAR_6 ) VAR VAR (  return VAR_3 . METHOD_2 ( ) . METHOD_3 ( VAR_1 ) . METHOD_4 ( VAR_7 , java.lang.String . METHOD_5 ( VAR_2 ) ) . METHOD_4 ( VAR_8 , STRING_1 ) . METHOD_4 ( VAR_9 , VAR_10 ) . build ( ) ; )  return VAR_3 . METHOD_2 ( ) . METHOD_3 ( VAR_1 ) . METHOD_4 ( VAR_7 , java.lang.String . METHOD_5 ( VAR_2 ) ) . METHOD_4 ( VAR_8 , STRING_1 ) . METHOD_4 ( VAR_9 , VAR_10 ) . build ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_6 ) NAME VAR_6 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_7 ) NAME VAR_7 ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME callback ) NAME callback ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 , callback , new TYPE_5 ( TYPE_6 . METHOD_2 ( ) ) ) )  METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 , callback , new TYPE_5 ( TYPE_6 . METHOD_2 ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_4 . info ( STRING_1 ) )  VAR_4 . info ( STRING_1 ) (  VAR_1 . METHOD_2 ( VAR_5 ) )  VAR_1 . METHOD_2 ( VAR_5 ) (  METHOD_3 ( VAR_1 , 0 , VAR_6 ) )  METHOD_3 ( VAR_1 , 0 , VAR_6 ) (  METHOD_4 ( ) )  METHOD_4 ( ) (  VAR_4 . METHOD_5 ( STRING_2 ) )  VAR_4 . METHOD_5 ( STRING_2 ) (  VAR_4 . info ( STRING_3 ) )  VAR_4 . info ( STRING_3 ) (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( ) ) INIT = TYPE_2 . METHOD_2 ( ) ) VAR VAR (  METHOD_3 ( VAR_1 , STRING_1 , STRING_2 , STRING_3 , STRING_4 , STRING_5 , STRING_6 , STRING_7 , STRING_8 , STRING_9 , STRING_10 , STRING_11 , STRING_12 , STRING_13 , STRING_14 , STRING_15 , STRING_16 , STRING_17 , STRING_18 , STRING_19 , STRING_20 , STRING_21 , STRING_22 , STRING_23 , STRING_24 , STRING_25 ) )  METHOD_3 ( VAR_1 , STRING_1 , STRING_2 , STRING_3 , STRING_4 , STRING_5 , STRING_6 , STRING_7 , STRING_8 , STRING_9 , STRING_10 , STRING_11 , STRING_12 , STRING_13 , STRING_14 , STRING_15 , STRING_16 , STRING_17 , STRING_18 , STRING_19 , STRING_20 , STRING_21 , STRING_22 , STRING_23 , STRING_24 , STRING_25 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.Set<java.lang.String> ) TYPE java.util.Set<java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND METHOD_2 ( VAR_1 ) ) COND METHOD_2 ( VAR_1 ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ( IF IF ( COND VAR_2 == null ) COND VAR_2 == null ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  return METHOD_1 ( TYPE_1 . METHOD_3 ( VAR_1 ) , VAR_2 , 0 ) ; )  return METHOD_1 ( TYPE_1 . METHOD_3 ( VAR_1 ) , VAR_2 , 0 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 . METHOD_2 ( this ) ) COND VAR_1 . METHOD_2 ( this ) ( THEN THEN (  VAR_1 . METHOD_3 ( VAR_2 ) )  VAR_1 . METHOD_3 ( VAR_2 ) ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_4 ) IN VAR_4 ( BLOCK BLOCK ( IF IF ( COND VAR_3 == null ) COND VAR_3 == null ( THEN THEN (  throw new java.lang.RuntimeException ( STRING_1 ) ; )  throw new java.lang.RuntimeException ( STRING_1 ) ; ) THEN THEN ) IF IF (  VAR_1 . METHOD_3 ( VAR_3 ) )  VAR_1 . METHOD_3 ( VAR_3 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF (  VAR_1 . METHOD_4 ( this ) )  VAR_1 . METHOD_4 ( this ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME event ) NAME event ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( event . METHOD_3 ( ) ) ) INIT = METHOD_2 ( event . METHOD_3 ( ) ) ) VAR VAR ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_3 ) ( VAR_3 . METHOD_4 ( ) ) ) ) INIT = ( ( TYPE_3 ) ( VAR_3 . METHOD_4 ( ) ) ) ) VAR VAR ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN (  VAR_2 . METHOD_5 ( VAR_1 . METHOD_6 ( ) ) )  VAR_2 . METHOD_5 ( VAR_1 . METHOD_6 ( ) ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER synchronized ) MODIFIER synchronized ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME w ) NAME w ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME h ) NAME h ) VAR VAR ( VAR VAR ( TYPE int[] ) TYPE int[] ( NAME d ) NAME d ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  METHOD_3 ( mContext , id , VAR_1 , VAR_2 , VAR_3 , VAR_4 , w , h , d , VAR_5 ) )  METHOD_3 ( mContext , id , VAR_1 , VAR_2 , VAR_3 , VAR_4 , w , h , d , VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = ( VAR_1 . METHOD_2 ( ) ) ? TYPE_1 . METHOD_3 ( ) : VAR_1 ) INIT = ( VAR_1 . METHOD_2 ( ) ) ? TYPE_1 . METHOD_3 ( ) : VAR_1 ) VAR VAR ( IF IF ( COND ( VAR_5 ) && ( METHOD_4 ( ) ) ) COND ( VAR_5 ) && ( METHOD_4 ( ) ) ( THEN THEN (  METHOD_5 ( VAR_1 , VAR_2 , 0 ) )  METHOD_5 ( VAR_1 , VAR_2 , 0 ) ) THEN THEN ( ELSE ELSE (  TYPE_2 . METHOD_1 ( fd , VAR_4 , VAR_2 , VAR_3 ) )  TYPE_2 . METHOD_1 ( fd , VAR_4 , VAR_2 , VAR_3 ) ) ELSE ELSE ) IF IF (  super . address = VAR_4 )  super . address = VAR_4 (  super . VAR_6 = VAR_2 )  super . VAR_6 = VAR_2 ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME res ) NAME res ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN (  return VAR_2 . toString ( ) ; )  return VAR_2 . toString ( ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME r ) NAME r ( INIT = METHOD_2 ( VAR_1 ) ) INIT = METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND r != null ) COND r != null ( THEN THEN (  return r . METHOD_3 ( res ) ; )  return r . METHOD_3 ( res ) ; ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( 3 ) . METHOD_2 ( 1 , 2 ) . METHOD_2 ( 2 , 3 ) . METHOD_2 ( 3 , 1 ) . METHOD_3 ( 1 ) . METHOD_4 ( ) ) INIT = new TYPE_2 ( 3 ) . METHOD_2 ( 1 , 2 ) . METHOD_2 ( 2 , 3 ) . METHOD_2 ( 3 , 1 ) . METHOD_3 ( 1 ) . METHOD_4 ( ) ) VAR VAR (  assertEquals ( 6 , VAR_1 . METHOD_5 ( 1 ) . METHOD_6 ( ) ) )  assertEquals ( 6 , VAR_1 . METHOD_5 ( 1 ) . METHOD_6 ( ) ) (  assertEquals ( 6 , VAR_1 . METHOD_5 ( 2 ) . METHOD_6 ( ) ) )  assertEquals ( 6 , VAR_1 . METHOD_5 ( 2 ) . METHOD_6 ( ) ) (  assertEquals ( 6 , VAR_1 . METHOD_5 ( 3 ) . METHOD_6 ( ) ) )  assertEquals ( 6 , VAR_1 . METHOD_5 ( 3 ) . METHOD_6 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( PARAMS PARAMS ( VAR VAR ( TYPE com.android.jack.ir.ast.JMethod ) TYPE com.android.jack.ir.ast.JMethod ( NAME method ) NAME method ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE com.android.jack.ir.ast.JDefinedClassOrInterface ) TYPE com.android.jack.ir.ast.JDefinedClassOrInterface ( NAME VAR_1 ) NAME VAR_1 ( INIT = method . METHOD_1 ( ) ) INIT = method . METHOD_1 ( ) ) VAR VAR ( IF IF ( COND ( ( ( VAR_1 . METHOD_2 ( ) ) || ( method . METHOD_3 ( ) ) ) || ( method . METHOD_4 ( ) ) ) || ( ! ( VAR_2 . METHOD_5 ( this . METHOD_6 ( ) , method ) ) ) ) COND ( ( ( VAR_1 . METHOD_2 ( ) ) || ( method . METHOD_3 ( ) ) ) || ( method . METHOD_4 ( ) ) ) || ( ! ( VAR_2 . METHOD_5 ( this . METHOD_6 ( ) , method ) ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_1 ( method ) ) INIT = new TYPE_1 ( method ) ) VAR VAR (  VAR_3 . METHOD_5 ( method ) )  VAR_3 . METHOD_5 ( method ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 . METHOD_2 ( ) ) == ( VAR_2 ) ) COND ( VAR_1 . METHOD_2 ( ) ) == ( VAR_2 ) ( THEN THEN (  VAR_3 = true )  VAR_3 = true (  VAR_4 . METHOD_3 ( VAR_5 , METHOD_4 ( VAR_6 , new TYPE_1 ( ) ) ) )  VAR_4 . METHOD_3 ( VAR_5 , METHOD_4 ( VAR_6 , new TYPE_1 ( ) ) ) (  ( VAR_7 ) ++ )  ( VAR_7 ) ++ (  VAR_4 . METHOD_3 ( VAR_8 , METHOD_4 ( VAR_6 , new TYPE_2 ( ) ) ) )  VAR_4 . METHOD_3 ( VAR_8 , METHOD_4 ( VAR_6 , new TYPE_2 ( ) ) ) (  ( VAR_7 ) ++ )  ( VAR_7 ) ++ ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME path ) NAME path ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_4 = TYPE_1 . METHOD_2 ( path , VAR_1 , VAR_2 , VAR_3 ) )  VAR_4 = TYPE_1 . METHOD_2 ( path , VAR_1 , VAR_2 , VAR_3 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME VAR_5 ) NAME VAR_5 ( BLOCK BLOCK (  android.util.Slog.w ( VAR_6 . TAG , ( STRING_1 + path ) , VAR_5 ) )  android.util.Slog.w ( VAR_6 . TAG , ( STRING_1 + path ) , VAR_5 ) (  return VAR_7 ; )  return VAR_7 ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  return METHOD_3 ( VAR_4 ) ; )  return METHOD_3 ( VAR_4 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME in ) NAME in ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME address ) NAME address ( INIT = null ) INIT = null ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = 0 ) INIT = 0 ) VAR VAR ( IF IF ( COND ( in . METHOD_2 ( ) ) == 1 ) COND ( in . METHOD_2 ( ) ) == 1 ( THEN THEN ( TRY TRY ( BLOCK BLOCK (  address = TYPE_3 . METHOD_3 ( in . METHOD_4 ( ) ) )  address = TYPE_3 . METHOD_3 ( in . METHOD_4 ( ) ) (  VAR_1 = in . METHOD_5 ( ) )  VAR_1 = in . METHOD_5 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) THEN THEN ) IF IF (  return new TYPE_1 ( address , VAR_1 ) ; )  return new TYPE_1 ( address , VAR_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( METHOD_2 ( ) ) == false ) COND ( METHOD_2 ( ) ) == false ( THEN THEN (  android.util.Log.e ( android.bluetooth.BluetoothDevice . TAG , STRING_1 ) )  android.util.Log.e ( android.bluetooth.BluetoothDevice . TAG , STRING_1 ) (  throw new java.io.IOException ( ) ; )  throw new java.io.IOException ( ) ; ) THEN THEN ) IF IF (  return new TYPE_1 ( VAR_2 , ( - 1 ) , true , true , this , VAR_1 , null ) ; )  return new TYPE_1 ( VAR_2 , ( - 1 ) , true , true , this , VAR_1 , null ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME toString ) NAME toString ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME sb ) NAME sb ( INIT = new TYPE_1 ( ( ( ( size ) * 5 ) + 10 ) ) ) INIT = new TYPE_1 ( ( ( ( size ) * 5 ) + 10 ) ) ) VAR VAR (  sb.append ( CHAR_1 ) )  sb.append ( CHAR_1 ) ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < ( size ) ) COND i < ( size ) ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK ( IF IF ( COND i != 0 ) COND i != 0 ( THEN THEN (  sb.append ( STRING_1 ) )  sb.append ( STRING_1 ) ) THEN THEN ) IF IF (  sb.append ( values [ i ] ) )  sb.append ( values [ i ] ) ) BLOCK BLOCK ) FOR FOR (  sb.append ( CHAR_2 ) )  sb.append ( CHAR_2 ) (  return sb . toString ( ) ; )  return sb . toString ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_1 ) ( TYPE_1 . METHOD_2 ( STRING_1 , TYPE_2 . METHOD_3 ( ) . toString ( ) , VAR_2 ) ) ) ) INIT = ( ( TYPE_1 ) ( TYPE_1 . METHOD_2 ( STRING_1 , TYPE_2 . METHOD_3 ( ) . toString ( ) , VAR_2 ) ) ) ) VAR VAR ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  errln ( STRING_2 ) )  errln ( STRING_2 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME ex ) NAME ex ( BLOCK BLOCK (  METHOD_4 ( ( STRING_3 + ( ex . getMessage ( ) ) ) ) )  METHOD_4 ( ( STRING_3 + ( ex . getMessage ( ) ) ) ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE char[][] ) TYPE char[][] ( NAME name ) NAME name ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < ( name . length ) ) COND i < ( name . length ) ( UPDATE UPDATE (  ++ i )  ++ i ) UPDATE UPDATE ( BLOCK BLOCK ( IF IF ( COND i > 0 ) COND i > 0 ( THEN THEN (  result . append ( CHAR_1 ) )  result . append ( CHAR_1 ) ) THEN THEN ) IF IF (  result . append ( name [ i ] ) )  result . append ( name [ i ] ) ) BLOCK BLOCK ) FOR FOR (  return result . toString ( ) ; )  return result . toString ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME equals ) NAME equals ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 == ( this ) ) COND VAR_1 == ( this ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ( IF IF ( COND ! ( VAR_1 instanceof TYPE_1 ) ) COND ! ( VAR_1 instanceof TYPE_1 ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_1 ) ( VAR_1 ) ) ) INIT = ( ( TYPE_1 ) ( VAR_1 ) ) ) VAR VAR (  return ( ( this . VAR_3 ) == ( VAR_4 ) ) && ( TYPE_2 . equals ( this . entry . METHOD_1 ( ) , VAR_5 . METHOD_1 ( ) ) ) ; )  return ( ( this . VAR_3 ) == ( VAR_4 ) ) && ( TYPE_2 . equals ( this . entry . METHOD_1 ( ) , VAR_5 . METHOD_1 ( ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN byte[] ) RETURN byte[] ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( ( VAR_1 . equals ( VAR_2 ) ) || ( VAR_1 . equals ( VAR_3 ) ) ) || ( VAR_1 . equals ( VAR_4 ) ) ) COND ( ( VAR_1 . equals ( VAR_2 ) ) || ( VAR_1 . equals ( VAR_3 ) ) ) || ( VAR_1 . equals ( VAR_4 ) ) ( THEN THEN ( IF IF ( COND ( content ) == null ) COND ( content ) == null ( THEN THEN (  return null ; )  return null ; ) THEN THEN ( ELSE ELSE (  return content . METHOD_2 ( ) ; )  return content . METHOD_2 ( ) ; ) ELSE ELSE ) IF IF ) THEN THEN ) IF IF (  throw new java.io.IOException ( ( STRING_1 + ( VAR_1 ) ) ) ; )  throw new java.io.IOException ( ( STRING_1 + ( VAR_1 ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME a ) NAME a ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME b ) NAME b ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME c ) NAME c ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int[] ) TYPE int[] ( NAME values ) NAME values ( INIT = new int [ ] { a , b , c } ) INIT = new int [ ] { a , b , c } ) VAR VAR (  VAR_1 . println ( ( ( STRING_1 + ( TYPE_1 . toString ( values ) ) ) + STRING_2 ) ) )  VAR_1 . println ( ( ( STRING_1 + ( TYPE_1 . toString ( values ) ) ) + STRING_2 ) ) (  return a > b ? a : b ; )  return a > b ? a : b ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1<?> ) RETURN TYPE_1<?> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . get ( ) ) INIT = VAR_2 . get ( ) ) VAR VAR (  METHOD_2 ( VAR_3 ) )  METHOD_2 ( VAR_3 ) ( IF IF ( COND ( METHOD_3 ( ) ) && ( ( VAR_2 . get ( ) ) == VAR_1 ) ) COND ( METHOD_3 ( ) ) && ( ( VAR_2 . get ( ) ) == VAR_1 ) ( THEN THEN ( VAR VAR ( TYPE TYPE_1<?> ) TYPE TYPE_1<?> ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_5 ) INIT = VAR_5 ) VAR VAR (  METHOD_2 ( VAR_6 ) )  METHOD_2 ( VAR_6 ) ( IF IF ( COND ( METHOD_3 ( ) ) && ( ( VAR_2 . get ( ) ) == VAR_1 ) ) COND ( METHOD_3 ( ) ) && ( ( VAR_2 . get ( ) ) == VAR_1 ) ( THEN THEN (  return VAR_4 ; )  return VAR_4 ; ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  android.util.Log.d ( VAR_2 . TAG , ( ( STRING_1 + ( VAR_3 ) ) + STRING_2 ) ) )  android.util.Log.d ( VAR_2 . TAG , ( ( STRING_1 + ( VAR_3 ) ) + STRING_2 ) ) ) THEN THEN ) IF IF ( IF IF ( COND METHOD_2 ( VAR_3 ) ) COND METHOD_2 ( VAR_3 ) ( THEN THEN ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_1 ( VAR_3 , false ) ) INIT = new TYPE_1 ( VAR_3 , false ) ) VAR VAR (  VAR_5 = true )  VAR_5 = true (  METHOD_3 ( VAR_4 ) )  METHOD_3 ( VAR_4 ) ) THEN THEN ( ELSE ELSE ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_2 ( VAR_3 ) ) INIT = new TYPE_2 ( VAR_3 ) ) VAR VAR (  VAR_5 = true )  VAR_5 = true (  METHOD_4 ( VAR_4 ) )  METHOD_4 ( VAR_4 ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public final ) MODIFIER public final ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE float ) TYPE float ( NAME x ) NAME x ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  throw new TYPE_2 ( ) ; )  throw new TYPE_2 ( ) ; ) THEN THEN ) IF IF ( IF IF ( COND ! ( VAR_2 ) ) COND ! ( VAR_2 ) ( THEN THEN (  throw new TYPE_3 ( STRING_1 ) ; )  throw new TYPE_3 ( STRING_1 ) ; ) THEN THEN ) IF IF (  METHOD_1 ( METHOD_2 ( METHOD_3 ( VAR_3 ) ) , x ) )  METHOD_1 ( METHOD_2 ( METHOD_3 ( VAR_3 ) ) , x ) (  return this ; )  return this ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE android.os.Message ) TYPE android.os.Message ( NAME msg ) NAME msg ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SWITCH SWITCH ( NAME VAR_1 ) NAME VAR_1 ( CASE VAR_2 ( BLOCK BLOCK ( IF IF ( COND ( VAR_3 ) != null ) COND ( VAR_3 ) != null ( THEN THEN (  VAR_3 . METHOD_2 ( ) )  VAR_3 . METHOD_2 ( ) ) THEN THEN ) IF IF (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_2 ( CASE VAR_4 ( BLOCK BLOCK (  METHOD_3 ( ) )  METHOD_3 ( ) (  VAR_5 . METHOD_4 ( ) )  VAR_5 . METHOD_4 ( ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_4 ( CASE VAR_6 ( BLOCK BLOCK (  METHOD_5 ( ) )  METHOD_5 ( ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_6 ) SWITCH SWITCH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME context ) NAME context ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME location ) NAME location ( INIT = VAR_2 . METHOD_2 ( ) ) INIT = VAR_2 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_2 . METHOD_3 ( ) ) INIT = VAR_2 . METHOD_3 ( ) ) VAR VAR ( IF IF ( COND VAR_4 instanceof TYPE_5 ) COND VAR_4 instanceof TYPE_5 ( THEN THEN ( IF IF ( COND context . METHOD_4 ( ) . METHOD_5 ( null , VAR_1 , ( ( TYPE_5 ) ( VAR_4 ) ) ) ) COND context . METHOD_4 ( ) . METHOD_5 ( null , VAR_1 , ( ( TYPE_5 ) ( VAR_4 ) ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  context . METHOD_1 ( VAR_1 , location , VAR_3 , null ) )  context . METHOD_1 ( VAR_1 , location , VAR_3 , null ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME context ) NAME context ) VAR VAR ( VAR VAR ( TYPE android.content.Intent ) TYPE android.content.Intent ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_2 ( VAR_3 ) ) INIT = VAR_1 . METHOD_2 ( VAR_3 ) ) VAR VAR ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME pkg ) NAME pkg ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK ( IF IF ( COND METHOD_3 ( pkg , ( - 1 ) , false , false , false ) ) COND METHOD_3 ( pkg , ( - 1 ) , false , false , false ) ( THEN THEN (  METHOD_4 ( VAR_4 ) )  METHOD_4 ( VAR_4 ) (  return ; )  return ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_2 . METHOD_3 ( ) )  VAR_2 . METHOD_3 ( ) ( FOR-EACH FOR-EACH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_4 ) IN VAR_4 ( BLOCK BLOCK (  new TYPE_4 ( VAR_2 , VAR_5 , VAR_1 , VAR_3 , VAR_6 ) . METHOD_4 ( ) )  new TYPE_4 ( VAR_2 , VAR_5 , VAR_1 , VAR_3 , VAR_6 ) . METHOD_4 ( ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  VAR_2 . METHOD_5 ( ) )  VAR_2 . METHOD_5 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  VAR_3 . METHOD_2 ( VAR_1 , VAR_2 ) )  VAR_3 . METHOD_2 ( VAR_1 , VAR_2 ) (  VAR_3 . METHOD_3 ( VAR_1 , VAR_2 ) )  VAR_3 . METHOD_3 ( VAR_1 , VAR_2 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_3 ( e ) ; )  throw new TYPE_3 ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_3 . METHOD_2 ( VAR_1 ) )  VAR_3 . METHOD_2 ( VAR_1 ) ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN (  VAR_3 . METHOD_3 ( VAR_1 . length ( ) ) )  VAR_3 . METHOD_3 ( VAR_1 . length ( ) ) (  VAR_4 = VAR_1 )  VAR_4 = VAR_1 ) THEN THEN ) IF IF ( IF IF ( COND VAR_2 && ( ! ( TYPE_2 . METHOD_4 ( VAR_1 ) ) ) ) COND VAR_2 && ( ! ( TYPE_2 . METHOD_4 ( VAR_1 ) ) ) ( THEN THEN (  METHOD_5 ( ) )  METHOD_5 ( ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME m ) NAME m ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME v ) NAME v ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME value ) NAME value ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = false ) INIT = false ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( IF IF ( COND v == null ) COND v == null ( THEN THEN (  m . METHOD_2 ( value ) )  m . METHOD_2 ( value ) ) THEN THEN ( ELSE ELSE (  m . METHOD_2 ( v , value ) )  m . METHOD_2 ( v , value ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_2 = true )  VAR_2 = true ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  TYPE_4 . assertEquals ( VAR_2 , VAR_1 ) )  TYPE_4 . assertEquals ( VAR_2 , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE android.bluetooth.BluetoothDevice ) TYPE android.bluetooth.BluetoothDevice ( NAME device ) NAME device ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( TYPE_1 . METHOD_2 ( ) ) ) COND ! ( TYPE_1 . METHOD_2 ( ) ) ( THEN THEN (  android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) )  android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME service ) NAME service ( INIT = METHOD_3 ( ) ) INIT = METHOD_3 ( ) ) VAR VAR ( IF IF ( COND service == null ) COND service == null ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  return service . METHOD_1 ( device , VAR_1 ) ; )  return service . METHOD_1 ( device , VAR_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_3 ) <= 0 ) COND ( VAR_3 ) <= 0 ( THEN THEN (  return VAR_4 ; )  return VAR_4 ; ) THEN THEN ) IF IF (  VAR_5 = ( ( VAR_6 ) & ( VAR_7 ) ) == ( VAR_7 ) )  VAR_5 = ( ( VAR_6 ) & ( VAR_7 ) ) == ( VAR_7 ) (  VAR_6 &= ~ ( VAR_7 ) )  VAR_6 &= ~ ( VAR_7 ) ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_8 ) NAME VAR_8 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  VAR_2 . METHOD_3 ( ) )  VAR_2 . METHOD_3 ( ) (  TYPE_4 . METHOD_4 ( VAR_9 , STRING_1 ) )  TYPE_4 . METHOD_4 ( VAR_9 , STRING_1 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_10 ) NAME VAR_10 ( INIT = VAR_1 . METHOD_5 ( ) ) INIT = VAR_1 . METHOD_5 ( ) ) VAR VAR (  TYPE_4 . METHOD_6 ( VAR_9 ) )  TYPE_4 . METHOD_6 ( VAR_9 ) (  METHOD_7 ( VAR_8 ) )  METHOD_7 ( VAR_8 ) (  return VAR_10 ; )  return VAR_10 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) (  TYPE_1 . d ( VAR_1 , ( ( ( STRING_1 + ( VAR_2 ) ) + STRING_2 ) + ( VAR_3 ) ) ) )  TYPE_1 . d ( VAR_1 , ( ( ( STRING_1 + ( VAR_2 ) ) + STRING_2 ) + ( VAR_3 ) ) ) ( IF IF ( COND ( ! ( VAR_2 ) ) && ( ! ( VAR_4 . METHOD_2 ( VAR_3 ) ) ) ) COND ( ! ( VAR_2 ) ) && ( ! ( VAR_4 . METHOD_2 ( VAR_3 ) ) ) ( THEN THEN (  METHOD_3 ( VAR_5 , false ) )  METHOD_3 ( VAR_5 , false ) ) THEN THEN ) IF IF (  METHOD_4 ( ) )  METHOD_4 ( ) ( IF IF ( COND ( VAR_6 ) != null ) COND ( VAR_6 ) != null ( THEN THEN (  METHOD_5 ( VAR_6 ) )  METHOD_5 ( VAR_6 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.Map ) TYPE java.util.Map ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.Map ) TYPE java.util.Map ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 . equals ( VAR_2 ) ) COND VAR_1 . equals ( VAR_2 ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR ( VAR VAR ( TYPE java.util.Set ) TYPE java.util.Set ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE java.util.Set ) TYPE java.util.Set ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_2 . METHOD_2 ( ) ) INIT = VAR_2 . METHOD_2 ( ) ) VAR VAR (  METHOD_3 ( STRING_1 , VAR_4 , VAR_5 , VAR_3 , 20 ) )  METHOD_3 ( STRING_1 , VAR_4 , VAR_5 , VAR_3 , 20 ) (  METHOD_3 ( STRING_2 , VAR_5 , VAR_4 , VAR_3 , 20 ) )  METHOD_3 ( STRING_2 , VAR_5 , VAR_4 , VAR_3 , 20 ) (  errln ( VAR_3 . toString ( ) ) )  errln ( VAR_3 . toString ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  assertTrue ( STRING_1 , ( ( VAR_1 . METHOD_2 ( ) . length ) > 0 ) ) )  assertTrue ( STRING_1 , ( ( VAR_1 . METHOD_2 ( ) . length ) > 0 ) ) ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME target ) NAME target ( IN VAR_1 . METHOD_2 ( ) ) IN VAR_1 . METHOD_2 ( ) ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME status ) NAME status ( INIT = new TYPE_4 ( target ) . run ( new TYPE_5 ( ) ) ) INIT = new TYPE_4 ( target ) . run ( new TYPE_5 ( ) ) ) VAR VAR ( IF IF ( COND ( status . METHOD_3 ( ) ) != ( VAR_2 ) ) COND ( status . METHOD_3 ( ) ) != ( VAR_2 ) ( THEN THEN (  fail ( STRING_2 ) )  fail ( STRING_2 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( os ) ) INIT = new TYPE_1 ( os ) ) VAR VAR (  VAR_1 . METHOD_2 ( ) )  VAR_1 . METHOD_2 ( ) ( TRY TRY ( BLOCK BLOCK (  VAR_1 . METHOD_3 ( ) )  VAR_1 . METHOD_3 ( ) (  fail ( STRING_1 ) )  fail ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  VAR_1 = new TYPE_1 ( os ) )  VAR_1 = new TYPE_1 ( os ) (  VAR_1 . METHOD_3 ( ) )  VAR_1 . METHOD_3 ( ) (  VAR_1 . METHOD_3 ( ) )  VAR_1 . METHOD_3 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( INT_1 , STRING_1 ) ) INIT = TYPE_1 . METHOD_2 ( INT_1 , STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME f ) NAME f ( INIT = METHOD_3 ( ) ) INIT = METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME out ) NAME out ( INIT = TYPE_1 . METHOD_4 ( f ) ) INIT = TYPE_1 . METHOD_4 ( f ) ) VAR VAR (  out . METHOD_5 ( new TYPE_3 ( VAR_1 ) ) )  out . METHOD_5 ( new TYPE_3 ( VAR_1 ) ) (  out . METHOD_6 ( ) )  out . METHOD_6 ( ) (  out . METHOD_7 ( ) )  out . METHOD_7 ( ) ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_4 ( f ) ) INIT = new TYPE_4 ( f ) ) VAR VAR (  assertNotNull ( VAR_2 . METHOD_8 ( VAR_1 ) ) )  assertNotNull ( VAR_2 . METHOD_8 ( VAR_1 ) ) (  VAR_2 . METHOD_7 ( ) )  VAR_2 . METHOD_7 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . when ( VAR_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_2 . METHOD_4 ( ) . VAR_3 ) ) ) . thenReturn ( true ) )  TYPE_1 . when ( VAR_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_2 . METHOD_4 ( ) . VAR_3 ) ) ) . thenReturn ( true ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME result ) NAME result ( INIT = VAR_4 . METHOD_5 ( TYPE_4 . METHOD_6 ( VAR_2 ) , null , null , false , true , null ) ) INIT = VAR_4 . METHOD_5 ( TYPE_4 . METHOD_6 ( VAR_2 ) , null , null , false , true , null ) ) VAR VAR (  TYPE_5 . METHOD_7 ( result ) )  TYPE_5 . METHOD_7 ( result ) (  TYPE_1 . METHOD_8 ( VAR_5 ) )  TYPE_1 . METHOD_8 ( VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME entry ) NAME entry ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( entry , VAR_2 , false ) )  METHOD_2 ( entry , VAR_2 , false ) ( IF IF ( COND ( entry . name ) != null ) COND ( entry . name ) != null ( THEN THEN (  TYPE_2 . d ( VAR_3 . TAG , ( STRING_1 + entry ) ) )  TYPE_2 . d ( VAR_3 . TAG , ( STRING_1 + entry ) ) ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_4 ) != null ) COND ( VAR_4 ) != null ( THEN THEN (  TYPE_3 . METHOD_3 ( mContext , VAR_4 ) )  TYPE_3 . METHOD_3 ( mContext , VAR_4 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) != null ) COND ( VAR_1 ) != null ( THEN THEN ( TRY TRY ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( ) )  VAR_1 . METHOD_2 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME e ) NAME e ( BLOCK BLOCK (  android.util.Log.e ( VAR_2 . TAG , android.util.Log . METHOD_3 ( new java.lang.Throwable ( ) ) ) )  android.util.Log.e ( VAR_2 . TAG , android.util.Log . METHOD_3 ( new java.lang.Throwable ( ) ) ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) THEN THEN ( ELSE ELSE (  android.util.Log.e ( VAR_2 . TAG , STRING_1 ) )  android.util.Log.e ( VAR_2 . TAG , STRING_1 ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME callback ) NAME callback ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  VAR_1 )  VAR_1 ( BLOCK BLOCK (  VAR_2 . METHOD_2 ( callback ) )  VAR_2 . METHOD_2 ( callback ) ( IF IF ( COND ( ( VAR_3 ) == null ) || ( VAR_3 . METHOD_3 ( ) ) ) COND ( ( VAR_3 ) == null ) || ( VAR_3 . METHOD_3 ( ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( TRY TRY ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME i ) NAME i ( IN VAR_3 ) IN VAR_3 ( BLOCK BLOCK (  callback . METHOD_4 ( i . slotId , VAR_4 ) )  callback . METHOD_4 ( i . slotId , VAR_4 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME e ) NAME e ( BLOCK BLOCK (  android.util.Log.w ( VAR_5 , STRING_1 ) )  android.util.Log.w ( VAR_5 , STRING_1 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME info ) NAME info ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE com.android.jack.ir.ast.JDefinedClassOrInterface ) TYPE com.android.jack.ir.ast.JDefinedClassOrInterface ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE com.android.jack.ir.ast.JMethod ) TYPE com.android.jack.ir.ast.JMethod ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_3 . METHOD_2 ( ) ) INIT = VAR_3 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME call ) NAME call ( INIT = new TYPE_1 ( info , VAR_1 , VAR_2 , VAR_4 , VAR_3 . METHOD_4 ( ) , VAR_4 . METHOD_5 ( ) ) ) INIT = new TYPE_1 ( info , VAR_1 , VAR_2 , VAR_4 , VAR_3 . METHOD_4 ( ) , VAR_4 . METHOD_5 ( ) ) ) VAR VAR (  call . METHOD_6 ( new TYPE_5 ( VAR_3 ) ) )  call . METHOD_6 ( new TYPE_5 ( VAR_3 ) ) (  return call ; )  return call ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME path ) NAME path ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME result ) NAME result ( INIT = device . METHOD_1 ( path , true ) ) INIT = device . METHOD_1 ( path , true ) ) VAR VAR ( IF IF ( COND result != null ) COND result != null ( THEN THEN (  TYPE_1 . log ( VAR_1 , ( STRING_1 + result ) ) )  TYPE_1 . log ( VAR_1 , ( STRING_1 + result ) ) (  return false ; )  return false ; ) THEN THEN ) IF IF (  return true ; )  return true ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME e ) NAME e ( BLOCK BLOCK (  TYPE_1 . log ( VAR_1 , ( STRING_2 + path ) , e ) )  TYPE_1 . log ( VAR_1 , ( STRING_2 + path ) , e ) (  return false ; )  return false ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_1 ) ) COND ! ( VAR_1 ) ( THEN THEN (  throw new TYPE_2 ( STRING_1 ) ; )  throw new TYPE_2 ( STRING_1 ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = this . METHOD_2 ( ) ) INIT = this . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = this . METHOD_3 ( ) ) INIT = this . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ( INIT = ( VAR_2 <= VAR_3 ) ? VAR_3 - VAR_2 : 0 ) INIT = ( VAR_2 <= VAR_3 ) ? VAR_3 - VAR_2 : 0 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME size ) NAME size ( INIT = VAR_4 > > 3 ) INIT = VAR_4 > > 3 ) VAR VAR (  return ( ( TYPE_1 ) ( new TYPE_3 ( this , ( - 1 ) , 0 , size , size , VAR_2 , METHOD_4 ( ) ) ) ) ; )  return ( ( TYPE_1 ) ( new TYPE_3 ( this , ( - 1 ) , 0 , size , size , VAR_2 , METHOD_4 ( ) ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = super . METHOD_1 ( VAR_1 ) ) INIT = super . METHOD_1 ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_2 != 0 ) COND VAR_2 != 0 ( THEN THEN (  return VAR_2 ; )  return VAR_2 ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( ( TYPE_2 ) ( VAR_1 ) ) ) INIT = ( ( TYPE_2 ) ( VAR_1 ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_2 ( ) . METHOD_3 ( ) ) INIT = METHOD_2 ( ) . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_3 . METHOD_2 ( ) . METHOD_3 ( ) ) INIT = VAR_3 . METHOD_2 ( ) . METHOD_3 ( ) ) VAR VAR (  return VAR_4 . METHOD_4 ( VAR_5 ) ; )  return VAR_4 . METHOD_4 ( VAR_5 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME callback ) NAME callback ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( VAR_2 , STRING_1 ) )  METHOD_2 ( VAR_2 , STRING_1 ) ( IF IF ( COND VAR_3 ) COND VAR_3 ( THEN THEN (  android.util.Log.d ( VAR_4 . TAG , ( STRING_2 + VAR_1 ) ) )  android.util.Log.d ( VAR_4 . TAG , ( STRING_2 + VAR_1 ) ) ) THEN THEN ) IF IF (  VAR_5 . METHOD_3 ( VAR_1 , callback , this ) )  VAR_5 . METHOD_3 ( VAR_1 , callback , this ) (  METHOD_4 ( VAR_1 . METHOD_5 ( ) , VAR_1 . METHOD_6 ( ) ) )  METHOD_4 ( VAR_1 . METHOD_5 ( ) , VAR_1 . METHOD_6 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_2 ) != null ) COND ( VAR_2 ) != null ( THEN THEN (  return ( STRING_1 + ( VAR_2 . toString ( ) ) ) + STRING_1 ; )  return ( STRING_1 + ( VAR_2 . toString ( ) ) ) + STRING_1 ; ) THEN THEN ( ELSE ELSE ( IF IF ( COND ( VAR_3 ) != null ) COND ( VAR_3 ) != null ( THEN THEN (  return ( STRING_1 + ( VAR_3 ) ) + STRING_1 ; )  return ( STRING_1 + ( VAR_3 ) ) + STRING_1 ; ) THEN THEN ( ELSE ELSE (  throw new java.lang.IllegalArgumentException ( STRING_2 ) ; )  throw new java.lang.IllegalArgumentException ( STRING_2 ) ; ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME context ) NAME context ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_4 . METHOD_2 ( VAR_3 , VAR_4 , VAR_5 ) ) INIT = TYPE_4 . METHOD_2 ( VAR_3 , VAR_4 , VAR_5 ) ) VAR VAR ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_6 ) NAME VAR_6 ( INIT = TYPE_4 . METHOD_3 ( VAR_7 , VAR_8 , VAR_9 , VAR_10 ) ) INIT = TYPE_4 . METHOD_3 ( VAR_7 , VAR_8 , VAR_9 , VAR_10 ) ) VAR VAR ( IF IF ( COND VAR_6 == null ) COND VAR_6 == null ( THEN THEN ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_11 ) NAME VAR_11 ( INIT = java.lang.String.format ( STRING_1 , VAR_1 . name ) ) INIT = java.lang.String.format ( STRING_1 , VAR_1 . name ) ) VAR VAR (  context . METHOD_4 ( VAR_12 , context . METHOD_5 ( VAR_2 , VAR_1 ) , VAR_11 , null ) )  context . METHOD_4 ( VAR_12 , context . METHOD_5 ( VAR_2 , VAR_1 ) , VAR_11 , null ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<TYPE_2,TYPE_3> ) TYPE TYPE_1<TYPE_2,TYPE_3> ( NAME m ) NAME m ( INIT = ( ( TYPE_1 < TYPE_2 , TYPE_3 > ) ( super . METHOD_1 ( ) ) ) ) INIT = ( ( TYPE_1 < TYPE_2 , TYPE_3 > ) ( super . METHOD_1 ( ) ) ) ) VAR VAR (  VAR_1 = null )  VAR_1 = null (  VAR_2 = VAR_3 . METHOD_1 ( ) )  VAR_2 = VAR_3 . METHOD_1 ( ) (  return m ; )  return m ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_5 ( ) ; )  throw new TYPE_5 ( ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( new TYPE_2 ( STRING_1 ) , null , TYPE_3 . of ( ) , TYPE_3 . of ( ) ) ) INIT = new TYPE_1 ( new TYPE_2 ( STRING_1 ) , null , TYPE_3 . of ( ) , TYPE_3 . of ( ) ) ) VAR VAR (  TYPE_4 . METHOD_2 ( VAR_1 . METHOD_3 ( STRING_2 ) ) . METHOD_4 ( STRING_3 ) )  TYPE_4 . METHOD_2 ( VAR_1 . METHOD_3 ( STRING_2 ) ) . METHOD_4 ( STRING_3 ) (  TYPE_4 . METHOD_2 ( VAR_1 . METHOD_3 ( STRING_4 ) ) . METHOD_4 ( STRING_4 ) )  TYPE_4 . METHOD_2 ( VAR_1 . METHOD_3 ( STRING_4 ) ) . METHOD_4 ( STRING_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME config ) NAME config ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  config . METHOD_2 ( STRING_1 ) )  config . METHOD_2 ( STRING_1 ) (  config . METHOD_3 ( STRING_2 ) )  config . METHOD_3 ( STRING_2 ) (  config . METHOD_4 ( INT_1 ) )  config . METHOD_4 ( INT_1 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( null , config ) ) INIT = new TYPE_2 ( null , config ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 ( null , config ) ) INIT = new TYPE_2 ( null , config ) ) VAR VAR (  TYPE_3 . assertFalse ( TYPE_2 . equals ( VAR_1 , VAR_2 ) ) )  TYPE_3 . assertFalse ( TYPE_2 . equals ( VAR_1 , VAR_2 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME flags ) NAME flags ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( VAR_2 ) )  VAR_1 . METHOD_2 ( VAR_2 ) (  VAR_1 . METHOD_2 ( VAR_3 ) )  VAR_1 . METHOD_2 ( VAR_3 ) (  VAR_1 . METHOD_3 ( METHOD_4 ( ) . toString ( ) ) )  VAR_1 . METHOD_3 ( METHOD_4 ( ) . toString ( ) ) (  VAR_1 . METHOD_2 ( METHOD_5 ( ) ) )  VAR_1 . METHOD_2 ( METHOD_5 ( ) ) (  VAR_1 . METHOD_6 ( METHOD_7 ( ) ) )  VAR_1 . METHOD_6 ( METHOD_7 ( ) ) (  VAR_1 . METHOD_8 ( TYPE_2 . METHOD_9 ( VAR_4 ) ) )  VAR_1 . METHOD_8 ( TYPE_2 . METHOD_9 ( VAR_4 ) ) (  VAR_1 . METHOD_3 ( METHOD_10 ( ) ) )  VAR_1 . METHOD_3 ( METHOD_10 ( ) ) (  VAR_1 . METHOD_3 ( METHOD_11 ( ) ) )  VAR_1 . METHOD_3 ( METHOD_11 ( ) ) (  VAR_1 . METHOD_12 ( VAR_5 , 0 ) )  VAR_1 . METHOD_12 ( VAR_5 , 0 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 == ( VAR_2 ) ) COND VAR_1 == ( VAR_2 ) ( THEN THEN (  android.util.Log.e ( VAR_3 . TAG , STRING_1 ) )  android.util.Log.e ( VAR_3 . TAG , STRING_1 ) (  return null ; )  return null ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_5 . METHOD_2 ( VAR_1 ) ) INIT = VAR_5 . METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_4 == null ) COND VAR_4 == null ( THEN THEN (  android.util.Log.e ( VAR_3 . TAG , ( STRING_2 + VAR_1 ) ) )  android.util.Log.e ( VAR_3 . TAG , ( STRING_2 + VAR_1 ) ) ) THEN THEN ) IF IF (  return VAR_4 ; )  return VAR_4 ; ) BLOCK BLOCK ) METHOD METHOD
