( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE long[] ) TYPE long[] ( NAME values ) NAME values ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_3 . METHOD_2 ( VAR_1 ) ) INIT = TYPE_3 . METHOD_2 ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_4> ) TYPE java.util.List<TYPE_4> ( NAME VAR_4 ) NAME VAR_4 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE long ) TYPE long ( NAME value ) NAME value ( IN values ) IN values ( BLOCK BLOCK (  VAR_4 . METHOD_3 ( value ) )  VAR_4 . METHOD_3 ( value ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; )  return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2[] ) TYPE TYPE_2[] ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_6 ) NAME VAR_6 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME rule ) NAME rule ( INIT = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) INIT = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) VAR VAR ( IF IF ( COND rule != null ) COND rule != null ( THEN THEN ( TRY TRY ( BLOCK BLOCK (  rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) )  rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ( BLOCK BLOCK (  METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) )  METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) COND ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME node ) NAME node ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ) INIT = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ) VAR VAR (  mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) )  mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE double ) TYPE double ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( METHOD_3 ( ) ) ) INIT = METHOD_2 ( METHOD_3 ( ) ) ) VAR VAR (  android.util.Log . i ( VAR_2 . TAG , ( STRING_1 + VAR_1 ) ) )  android.util.Log . i ( VAR_2 . TAG , ( STRING_1 + VAR_1 ) ) ( IF IF ( COND ( VAR_1 >= FLOAT_1 ) && ( VAR_1 <= FLOAT_2 ) ) COND ( VAR_1 >= FLOAT_1 ) && ( VAR_1 <= FLOAT_2 ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( IF IF ( COND METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( VAR_3 ) ) COND METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( VAR_3 ) ( THEN THEN ( IF IF ( COND ( VAR_1 >= FLOAT_3 ) && ( VAR_1 <= FLOAT_2 ) ) COND ( VAR_1 >= FLOAT_3 ) && ( VAR_1 <= FLOAT_2 ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  fail ( ( STRING_2 + VAR_1 ) ) )  fail ( ( STRING_2 + VAR_1 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<android.bluetooth.BluetoothDevice> ) RETURN java.util.List<android.bluetooth.BluetoothDevice> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  android.util.Log.v ( VAR_1 . TAG , STRING_1 ) )  android.util.Log.v ( VAR_1 . TAG , STRING_1 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME service ) NAME service ( INIT = VAR_2 ) INIT = VAR_2 ) VAR VAR ( IF IF ( COND service != null ) COND service != null ( THEN THEN ( TRY TRY ( BLOCK BLOCK (  return service . METHOD_1 ( ) ; )  return service . METHOD_1 ( ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME e ) NAME e ( BLOCK BLOCK (  android.util.Log.e ( VAR_1 . TAG , e.toString ( ) ) )  android.util.Log.e ( VAR_1 . TAG , e.toString ( ) ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) THEN THEN ( ELSE ELSE (  android.util.Log.w ( VAR_1 . TAG , STRING_2 ) )  android.util.Log.w ( VAR_1 . TAG , STRING_2 ) ) ELSE ELSE ) IF IF (  return new java.util.ArrayList < android.bluetooth.BluetoothDevice > ( ) ; )  return new java.util.ArrayList < android.bluetooth.BluetoothDevice > ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = INT_1 ) INIT = INT_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_1 . METHOD_2 ( 10 ) ) INIT = TYPE_1 . METHOD_2 ( 10 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_1 . METHOD_2 ( 100 ) ) INIT = TYPE_1 . METHOD_2 ( 100 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_5 ) NAME VAR_5 ( INIT = METHOD_3 ( VAR_1 , VAR_2 ) ) INIT = METHOD_3 ( VAR_1 , VAR_2 ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_5 . METHOD_4 ( VAR_3 , VAR_4 ) )  VAR_5 . METHOD_4 ( VAR_3 , VAR_4 ) (  fail ( STRING_2 ) )  fail ( STRING_2 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_6 ) NAME VAR_6 ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ( BLOCK BLOCK (  fail ( ( e + STRING_3 ) ) )  fail ( ( e + STRING_3 ) ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME test ) NAME test ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  assertNotNull ( STRING_1 , VAR_2 ) )  assertNotNull ( STRING_1 , VAR_2 ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_4 . METHOD_2 ( test , STRING_2 ) ) INIT = TYPE_4 . METHOD_2 ( test , STRING_2 ) ) VAR VAR (  VAR_2 . METHOD_3 ( ( ( TYPE_3 ) ( VAR_1 ) ) , VAR_3 ) )  VAR_2 . METHOD_3 ( ( ( TYPE_3 ) ( VAR_1 ) ) , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( ) )  VAR_1 . METHOD_2 ( ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_3 ( ) . METHOD_4 ( ) ) INIT = TYPE_2 . METHOD_3 ( ) . METHOD_4 ( ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_3> ) TYPE java.util.List<TYPE_3> ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_4 . METHOD_5 ( VAR_4 ) ) INIT = TYPE_4 . METHOD_5 ( VAR_4 ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_5 ) NAME VAR_5 ( IN VAR_3 ) IN VAR_3 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_6 ) NAME VAR_6 ( INIT = VAR_2 . METHOD_6 ( VAR_5 ) ) INIT = VAR_2 . METHOD_6 ( VAR_5 ) ) VAR VAR ( IF IF ( COND ( VAR_6 . METHOD_7 ( ) ) && ( ( VAR_6 . equals ( METHOD_8 ( ) ) ) == false ) ) COND ( VAR_6 . METHOD_7 ( ) ) && ( ( VAR_6 . equals ( METHOD_8 ( ) ) ) == false ) ( THEN THEN (  METHOD_9 ( VAR_6 , VAR_6 ) )  METHOD_9 ( VAR_6 , VAR_6 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME test ) NAME test ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_2 ) != null ) COND ( VAR_2 ) != null ( THEN THEN (  VAR_2 . METHOD_2 ( java.lang.String.format ( STRING_1 , test . METHOD_3 ( ) , test . METHOD_4 ( ) , VAR_3 ) ) )  VAR_2 . METHOD_2 ( java.lang.String.format ( STRING_1 , test . METHOD_3 ( ) , test . METHOD_4 ( ) , VAR_3 ) ) (  VAR_2 . METHOD_2 ( METHOD_5 ( VAR_1 ) ) )  VAR_2 . METHOD_2 ( METHOD_5 ( VAR_1 ) ) ) THEN THEN ) IF IF (  VAR_4 . METHOD_6 ( test ) )  VAR_4 . METHOD_6 ( test ) (  super . METHOD_1 ( test , VAR_1 ) )  super . METHOD_1 ( test , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_3 ( VAR_3 , VAR_4 ) ) INIT = VAR_1 . METHOD_3 ( VAR_3 , VAR_4 ) ) VAR VAR ( IF IF ( COND ( VAR_2 . length ( ) ) > 0 ) COND ( VAR_2 . length ( ) ) > 0 ( THEN THEN (  return VAR_2 ; )  return VAR_2 ; ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME equals ) NAME equals ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( this ) == VAR_1 ) COND ( this ) == VAR_1 ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_1 == null ) || ( ( METHOD_1 ( ) ) != ( VAR_1 . METHOD_1 ( ) ) ) ) COND ( VAR_1 == null ) || ( ( METHOD_1 ( ) ) != ( VAR_1 . METHOD_1 ( ) ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( IF IF ( COND ! ( super . equals ( VAR_1 ) ) ) COND ! ( super . equals ( VAR_1 ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_1 ) ( VAR_1 ) ) ) INIT = ( ( TYPE_1 ) ( VAR_1 ) ) ) VAR VAR ( IF IF ( COND ( VAR_3 ) != ( VAR_4 ) ) COND ( VAR_3 ) != ( VAR_4 ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_4 . METHOD_2 ( VAR_5 , VAR_1 ) )  VAR_4 . METHOD_2 ( VAR_5 , VAR_1 ) (  VAR_4 . METHOD_3 ( VAR_6 ) )  VAR_4 . METHOD_3 ( VAR_6 ) (  VAR_4 . METHOD_4 ( VAR_3 ) )  VAR_4 . METHOD_4 ( VAR_3 ) (  VAR_4 . METHOD_5 ( VAR_7 , VAR_1 , STRING_1 , VAR_2 ) )  VAR_4 . METHOD_5 ( VAR_7 , VAR_1 , STRING_1 , VAR_2 ) (  VAR_4 . METHOD_3 ( VAR_8 ) )  VAR_4 . METHOD_3 ( VAR_8 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME subId ) NAME subId ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ( INIT = false ) INIT = false ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME telephony ) NAME telephony ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( IF IF ( COND telephony != null ) COND telephony != null ( THEN THEN (  VAR_1 = telephony . METHOD_1 ( subId ) )  VAR_1 = telephony . METHOD_1 ( subId ) ) THEN THEN ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME e ) NAME e ( BLOCK BLOCK (  android.util.Log.e ( VAR_2 . TAG , STRING_1 , e ) )  android.util.Log.e ( VAR_2 . TAG , STRING_1 , e ) ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE java.lang.NullPointerException ) TYPE java.lang.NullPointerException ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  android.util.Log.d ( VAR_2 . TAG , ( STRING_2 + VAR_1 ) ) )  android.util.Log.d ( VAR_2 . TAG , ( STRING_2 + VAR_1 ) ) (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME parent ) NAME parent ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME c ) NAME c ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = c . METHOD_2 ( ) ) INIT = c . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND METHOD_3 ( VAR_2 , parent , METHOD_4 ( ) ) ) COND METHOD_3 ( VAR_2 , parent , METHOD_4 ( ) ) ( THEN THEN ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME value ) NAME value ( INIT = METHOD_5 ( c . METHOD_6 ( ) ) ) INIT = METHOD_5 ( c . METHOD_6 ( ) ) ) VAR VAR (  METHOD_7 ( context , VAR_2 , value , parent , VAR_1 , c ) )  METHOD_7 ( context , VAR_2 , value , parent , VAR_1 , c ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME context ) NAME context ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND TYPE_2 . METHOD_2 ( context ) ) COND TYPE_2 . METHOD_2 ( context ) ( THEN THEN ( IF IF ( COND ( VAR_1 ) >= ( VAR_2 ) ) COND ( VAR_1 ) >= ( VAR_2 ) ( THEN THEN (  return TYPE_2 . METHOD_3 ( context ) . METHOD_4 ( ) ; )  return TYPE_2 . METHOD_3 ( context ) . METHOD_4 ( ) ; ) THEN THEN ( ELSE ELSE (  return TYPE_2 . METHOD_3 ( context ) . METHOD_1 ( ) ; )  return TYPE_2 . METHOD_3 ( context ) . METHOD_1 ( ) ; ) ELSE ELSE ) IF IF ) THEN THEN ) IF IF (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( METHOD_2 ( ) . METHOD_3 ( ) ) )  super . METHOD_1 ( METHOD_2 ( ) . METHOD_3 ( ) ) (  VAR_1 = new TYPE_1 [ ] { } )  VAR_1 = new TYPE_1 [ ] { } (  VAR_2 = VAR_3 = VAR_4 = - 1 )  VAR_2 = VAR_3 = VAR_4 = - 1 (  VAR_5 = new TYPE_2 ( INT_1 , 0 , TYPE_3 . METHOD_4 ( STRING_1 ) ) )  VAR_5 = new TYPE_2 ( INT_1 , 0 , TYPE_3 . METHOD_4 ( STRING_1 ) ) (  VAR_6 . METHOD_5 ( VAR_5 ) )  VAR_6 . METHOD_5 ( VAR_5 ) (  VAR_7 = new TYPE_4 ( TAG ) )  VAR_7 = new TYPE_4 ( TAG ) (  VAR_7 . start ( ) )  VAR_7 . start ( ) (  METHOD_6 ( ) )  METHOD_6 ( ) (  METHOD_7 ( VAR_8 class , STRING_2 , VAR_9 , VAR_10 ) )  METHOD_7 ( VAR_8 class , STRING_2 , VAR_9 , VAR_10 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_1 ( name ) ) INIT = TYPE_2 . METHOD_1 ( name ) ) VAR VAR ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  VAR_1 = TYPE_3 . METHOD_1 ( name ) )  VAR_1 = TYPE_3 . METHOD_1 ( name ) ) THEN THEN ) IF IF ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  VAR_1 = TYPE_4 . METHOD_1 ( name ) )  VAR_1 = TYPE_4 . METHOD_1 ( name ) ) THEN THEN ) IF IF ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  VAR_1 = TYPE_5 . METHOD_1 ( name ) )  VAR_1 = TYPE_5 . METHOD_1 ( name ) ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( VAR_2 , 1 ) . METHOD_3 ( 2 , 1 ) . METHOD_4 ( ) ) INIT = TYPE_2 . METHOD_2 ( VAR_2 , 1 ) . METHOD_3 ( 2 , 1 ) . METHOD_4 ( ) ) VAR VAR (  assertEquals ( VAR_3 , VAR_4 . METHOD_5 ( VAR_1 . METHOD_6 ( ) ) ) )  assertEquals ( VAR_3 , VAR_4 . METHOD_5 ( VAR_1 . METHOD_6 ( ) ) ) (  METHOD_7 ( ) )  METHOD_7 ( ) (  METHOD_8 ( ) )  METHOD_8 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  android.util.Log.v ( com.android.server.am.ActivityManagerService.TAG , ( ( ( STRING_1 + ( this ) ) + STRING_2 ) + ( VAR_2 . METHOD_2 ( ) ) ) ) )  android.util.Log.v ( com.android.server.am.ActivityManagerService.TAG , ( ( ( STRING_1 + ( this ) ) + STRING_2 ) + ( VAR_2 . METHOD_2 ( ) ) ) ) ) THEN THEN ) IF IF (  METHOD_3 ( VAR_3 ) )  METHOD_3 ( VAR_3 ) ( SYNCHRONIZED SYNCHRONIZED (  this )  this ( BLOCK BLOCK (  METHOD_4 ( VAR_3 , VAR_4 , VAR_2 ) )  METHOD_4 ( VAR_3 , VAR_4 , VAR_2 ) ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( VAR_1 ) ) INIT = new TYPE_1 ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME c ) NAME c ( INIT = VAR_2 . METHOD_2 ( ) ) INIT = VAR_2 . METHOD_2 ( ) ) VAR VAR (  VAR_2 . METHOD_3 ( ) )  VAR_2 . METHOD_3 ( ) ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_3 . METHOD_4 ( ) ) INIT = TYPE_3 . METHOD_4 ( ) ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_4 ) NAME VAR_4 ( INIT = 10 ) INIT = 10 ) VAR VAR (  assertFalse ( c . METHOD_5 ( VAR_4 , VAR_5 ) ) )  assertFalse ( c . METHOD_5 ( VAR_4 , VAR_5 ) ) (  assertTrue ( ( ( METHOD_6 ( VAR_3 ) ) >= VAR_4 ) ) )  assertTrue ( ( ( METHOD_6 ( VAR_3 ) ) >= VAR_4 ) ) (  VAR_2 . METHOD_7 ( ) )  VAR_2 . METHOD_7 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME e ) NAME e ( BLOCK BLOCK (  METHOD_8 ( e ) )  METHOD_8 ( e ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 ) INIT = VAR_2 ) VAR VAR (  when ( VAR_3 . METHOD_2 ( ) ) . thenReturn ( true ) )  when ( VAR_3 . METHOD_2 ( ) ) . thenReturn ( true ) (  when ( VAR_4 . METHOD_2 ( ) ) . thenReturn ( false ) )  when ( VAR_4 . METHOD_2 ( ) ) . thenReturn ( false ) (  VAR_5 . METHOD_3 ( VAR_1 ) )  VAR_5 . METHOD_3 ( VAR_1 ) (  VAR_6 . verify ( VAR_4 , METHOD_4 ( ) ) . METHOD_5 ( METHOD_6 ( VAR_7 class ) ) )  VAR_6 . verify ( VAR_4 , METHOD_4 ( ) ) . METHOD_5 ( METHOD_6 ( VAR_7 class ) ) (  VAR_6 . verify ( VAR_4 , METHOD_4 ( ) ) . METHOD_7 ( METHOD_8 ( ) , METHOD_6 ( VAR_8 class ) ) )  VAR_6 . verify ( VAR_4 , METHOD_4 ( ) ) . METHOD_7 ( METHOD_8 ( ) , METHOD_6 ( VAR_8 class ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 = TYPE_1 . METHOD_2 ( VAR_2 class ) )  VAR_1 = TYPE_1 . METHOD_2 ( VAR_2 class ) (  TYPE_1 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) . METHOD_5 ( STRING_1 ) )  TYPE_1 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) . METHOD_5 ( STRING_1 ) (  VAR_3 = TYPE_1 . METHOD_6 ( VAR_4 class ) )  VAR_3 = TYPE_1 . METHOD_6 ( VAR_4 class ) (  VAR_5 = new TYPE_2 ( VAR_6 , VAR_7 , VAR_1 ) )  VAR_5 = new TYPE_2 ( VAR_6 , VAR_7 , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( ( VAR_1 . length ) > 0 ) && ( ( VAR_1 [ 0 ] ) != null ) ) COND ( ( VAR_1 . length ) > 0 ) && ( ( VAR_1 [ 0 ] ) != null ) ( THEN THEN ( IF IF ( COND ( VAR_2 ) == null ) COND ( VAR_2 ) == null ( THEN THEN (  VAR_2 = TYPE_1 . METHOD_2 ( VAR_3 , mContext , VAR_4 , VAR_5 ) )  VAR_2 = TYPE_1 . METHOD_2 ( VAR_3 , mContext , VAR_4 , VAR_5 ) ) THEN THEN ( ELSE ELSE (  VAR_2 . METHOD_3 ( VAR_3 , mContext , VAR_4 ) )  VAR_2 . METHOD_3 ( VAR_3 , mContext , VAR_4 ) ) ELSE ELSE ) IF IF ) THEN THEN ( ELSE ELSE ( IF IF ( COND ( VAR_2 ) != null ) COND ( VAR_2 ) != null ( THEN THEN (  VAR_2 . METHOD_4 ( ) )  VAR_2 . METHOD_4 ( ) ) THEN THEN ) IF IF (  VAR_2 = null )  VAR_2 = null ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Object ) RETURN java.lang.Object ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME e ) NAME e ( INIT = ( ( TYPE_1 ) ( super . METHOD_1 ( ) ) ) ) INIT = ( ( TYPE_1 ) ( super . METHOD_1 ( ) ) ) ) VAR VAR (  VAR_1 = ( ( VAR_2 ) == null ) ? null : VAR_2 . METHOD_1 ( ) )  VAR_1 = ( ( VAR_2 ) == null ) ? null : VAR_2 . METHOD_1 ( ) (  return e ; )  return e ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_3 ( ) ; )  throw new TYPE_3 ( ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN android.os.Bundle ) RETURN android.os.Bundle ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME action ) NAME action ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME x ) NAME x ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME y ) NAME y ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE android.os.Bundle ) TYPE android.os.Bundle ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  VAR_5 )  VAR_5 ( BLOCK BLOCK ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_6 ) NAME VAR_6 ( INIT = TYPE_2 . METHOD_2 ( ) ) INIT = TYPE_2 . METHOD_2 ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  return METHOD_3 ( METHOD_4 ( this , VAR_1 ) , action , x , y , VAR_2 , VAR_3 , VAR_4 ) ; )  return METHOD_3 ( METHOD_4 ( this , VAR_1 ) , action , x , y , VAR_2 , VAR_3 , VAR_4 ) ; ) BLOCK BLOCK ( FINALLY FINALLY (  TYPE_2 . METHOD_5 ( VAR_6 ) )  TYPE_2 . METHOD_5 ( VAR_6 ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.android.jack.ir.ast.JMethod ) TYPE com.android.jack.ir.ast.JMethod ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ! ( VAR_1 . METHOD_2 ( ) ) ) && ( ( VAR_1 . METHOD_3 ( ) ) instanceof TYPE_1 ) ) COND ( ! ( VAR_1 . METHOD_2 ( ) ) ) && ( ( VAR_1 . METHOD_3 ( ) ) instanceof TYPE_1 ) ( THEN THEN ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_4 ( ) ) INIT = VAR_1 . METHOD_4 ( ) ) VAR VAR ( IF IF ( COND ( VAR_2 . METHOD_5 ( VAR_3 class ) ) == null ) COND ( VAR_2 . METHOD_5 ( VAR_3 class ) ) == null ( THEN THEN (  VAR_2 . METHOD_6 ( new TYPE_3 ( VAR_2 ) ) )  VAR_2 . METHOD_6 ( new TYPE_3 ( VAR_2 ) ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return super . METHOD_1 ( VAR_1 ) ; )  return super . METHOD_1 ( VAR_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = VAR_2 ) INIT = VAR_2 ) VAR VAR ) INIT INIT ( COND i < VAR_3 ) COND i < VAR_3 ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_1 [ i ] ) INIT = VAR_1 [ i ] ) VAR VAR ( IF IF ( COND TYPE_1 . METHOD_2 ( VAR_5 ) ) COND TYPE_1 . METHOD_2 ( VAR_5 ) ( THEN THEN (  VAR_4 . METHOD_3 ( VAR_5 . METHOD_4 ( VAR_6 ) ) )  VAR_4 . METHOD_3 ( VAR_5 . METHOD_4 ( VAR_6 ) ) ) THEN THEN ( ELSE ELSE (  break ; )  break ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) FOR FOR ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE short ) TYPE short ( NAME VAR_1 ) NAME VAR_1 ( INIT = INT_1 ) INIT = INT_1 ) VAR VAR ( VAR VAR ( TYPE android.os.Bundle ) TYPE android.os.Bundle ( NAME args ) NAME args ( INIT = new android.os.Bundle ( ) ) INIT = new android.os.Bundle ( ) ) VAR VAR (  args . METHOD_2 ( STRING_1 , VAR_2 ) )  args . METHOD_2 ( STRING_1 , VAR_2 ) (  args . METHOD_2 ( STRING_2 , 0 ) )  args . METHOD_2 ( STRING_2 , 0 ) (  args . METHOD_2 ( STRING_3 , VAR_3 ) )  args . METHOD_2 ( STRING_3 , VAR_3 ) (  TYPE_2 . METHOD_3 ( VAR_1 , TYPE_3 . METHOD_4 ( args ) . toString ( ) ) )  TYPE_2 . METHOD_3 ( VAR_1 , TYPE_3 . METHOD_4 ( args ) . toString ( ) ) (  org.mockito.Mockito.verify ( VAR_4 ) . METHOD_5 ( VAR_1 , VAR_5 ) )  org.mockito.Mockito.verify ( VAR_4 ) . METHOD_5 ( VAR_1 , VAR_5 ) (  TYPE_4 . METHOD_6 ( VAR_4 ) )  TYPE_4 . METHOD_6 ( VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ( IF IF ( COND TYPE_3 . METHOD_2 ( ) ) COND TYPE_3 . METHOD_2 ( ) ( THEN THEN (  VAR_5 = TYPE_4 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , null ) )  VAR_5 = TYPE_4 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , null ) ) THEN THEN ( ELSE ELSE (  VAR_5 = TYPE_5 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) )  VAR_5 = TYPE_5 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ) ELSE ELSE ) IF IF (  return new TYPE_1 ( VAR_5 ) ; )  return new TYPE_1 ( VAR_5 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.util.ArrayList<TYPE_1> ) RETURN java.util.ArrayList<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_3> ) TYPE java.util.List<TYPE_3> ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_4 . METHOD_2 ( VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) ) . METHOD_5 ( ) . VAR_3 ) INIT = TYPE_4 . METHOD_2 ( VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) ) . METHOD_5 ( ) . VAR_3 ) VAR VAR (  return TYPE_5 . METHOD_6 ( TYPE_6 . METHOD_7 ( VAR_2 , true , VAR_1 ) ) ; )  return TYPE_5 . METHOD_6 ( TYPE_6 . METHOD_7 ( VAR_2 , true , VAR_1 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.util.Set<java.lang.Integer> ) RETURN java.util.Set<java.lang.Integer> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = 1 ) INIT = 1 ) VAR VAR ( VAR VAR ( TYPE java.util.Set<java.lang.Integer> ) TYPE java.util.Set<java.lang.Integer> ( NAME result ) NAME result ( INIT = null ) INIT = null ) VAR VAR ( WHILE WHILE ( COND VAR_1 != 0 ) COND VAR_1 != 0 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 & 1 ) != 0 ) COND ( VAR_1 & 1 ) != 0 ( THEN THEN ( IF IF ( COND result == null ) COND result == null ( THEN THEN (  result = new TYPE_1 < java.lang.Integer > ( ) )  result = new TYPE_1 < java.lang.Integer > ( ) ) THEN THEN ) IF IF (  result . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_2 ) ) )  result . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_2 ) ) ) THEN THEN ) IF IF (  VAR_1 >>>= 1 )  VAR_1 >>>= 1 (  VAR_2 <<= 1 )  VAR_2 <<= 1 ) BLOCK BLOCK ) WHILE WHILE (  return result != null ? result : VAR_3 < java.lang.Integer > METHOD_4 ( ) ; )  return result != null ? result : VAR_3 < java.lang.Integer > METHOD_4 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME toString ) NAME toString ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME sb ) NAME sb ( INIT = new TYPE_1 ( 100 ) ) INIT = new TYPE_1 ( 100 ) ) VAR VAR (  sb.append ( METHOD_1 ( ) . getName ( ) ) )  sb.append ( METHOD_1 ( ) . getName ( ) ) (  sb.append ( CHAR_1 ) )  sb.append ( CHAR_1 ) (  sb.append ( VAR_1 . toString ( ) ) )  sb.append ( VAR_1 . toString ( ) ) (  sb.append ( CHAR_2 ) )  sb.append ( CHAR_2 ) (  sb.append ( type . METHOD_2 ( ) ) )  sb.append ( type . METHOD_2 ( ) ) (  sb.append ( CHAR_3 ) )  sb.append ( CHAR_3 ) (  return sb . toString ( ) ; )  return sb . toString ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( PARAMS PARAMS ( VAR VAR ( TYPE com.android.jack.ir.ast.JMethod ) TYPE com.android.jack.ir.ast.JMethod ( NAME method ) NAME method ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE com.android.jack.ir.ast.JDefinedClassOrInterface ) TYPE com.android.jack.ir.ast.JDefinedClassOrInterface ( NAME VAR_1 ) NAME VAR_1 ( INIT = method . METHOD_1 ( ) ) INIT = method . METHOD_1 ( ) ) VAR VAR ( IF IF ( COND ( ( ( VAR_1 . METHOD_2 ( ) ) || ( method . METHOD_3 ( ) ) ) || ( method . METHOD_4 ( ) ) ) || ( ! ( VAR_2 . METHOD_5 ( this . METHOD_6 ( ) , method ) ) ) ) COND ( ( ( VAR_1 . METHOD_2 ( ) ) || ( method . METHOD_3 ( ) ) ) || ( method . METHOD_4 ( ) ) ) || ( ! ( VAR_2 . METHOD_5 ( this . METHOD_6 ( ) , method ) ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  session = VAR_1 . METHOD_7 ( ) )  session = VAR_1 . METHOD_7 ( ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_1 ( method ) ) INIT = new TYPE_1 ( method ) ) VAR VAR (  VAR_3 . METHOD_5 ( method ) )  VAR_3 . METHOD_5 ( method ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_2 ) == null ) COND ( VAR_2 ) == null ( THEN THEN (  VAR_3 = VAR_1 )  VAR_3 = VAR_1 (  VAR_2 = VAR_4 . METHOD_2 ( VAR_5 , VAR_1 ) )  VAR_2 = VAR_4 . METHOD_2 ( VAR_5 , VAR_1 ) ) THEN THEN ) IF IF ( IF IF ( COND ! ( VAR_2 . METHOD_3 ( ) ) ) COND ! ( VAR_2 . METHOD_3 ( ) ) ( THEN THEN (  VAR_2 . METHOD_4 ( ) )  VAR_2 . METHOD_4 ( ) ) THEN THEN ) IF IF (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  TYPE_2 . i ( STRING_1 , STRING_2 ) )  TYPE_2 . i ( STRING_1 , STRING_2 ) (  throw new java.lang.NullPointerException ( STRING_3 ) ; )  throw new java.lang.NullPointerException ( STRING_3 ) ; ) THEN THEN ) IF IF (  return ( ( ( ( VAR_2 ) >= ( VAR_3 ) ) && ( ( VAR_2 ) <= ( VAR_4 ) ) ) && ( ! ( TYPE_3 . METHOD_2 ( ) ) ) ) && ( VAR_1 . METHOD_3 ( STRING_4 , false ) ) ; )  return ( ( ( ( VAR_2 ) >= ( VAR_3 ) ) && ( ( VAR_2 ) <= ( VAR_4 ) ) ) && ( ! ( TYPE_3 . METHOD_2 ( ) ) ) ) && ( VAR_1 . METHOD_3 ( STRING_4 , false ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_2 ( ( ( VAR_3 ) + STRING_1 ) ) ) INIT = TYPE_2 . METHOD_2 ( ( ( VAR_3 ) + STRING_1 ) ) ) VAR VAR (  VAR_2 . METHOD_3 ( VAR_4 , VAR_5 , VAR_1 ) )  VAR_2 . METHOD_3 ( VAR_4 , VAR_5 , VAR_1 ) (  VAR_2 = TYPE_2 . METHOD_2 ( STRING_2 ) )  VAR_2 = TYPE_2 . METHOD_2 ( STRING_2 ) ( TRY TRY ( BLOCK BLOCK (  VAR_2 . METHOD_3 ( VAR_4 , VAR_5 , VAR_1 ) )  VAR_2 . METHOD_3 ( VAR_4 , VAR_5 , VAR_1 ) (  fail ( ) )  fail ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME expected ) NAME expected ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME config ) NAME config ( INIT = new TYPE_2 ( ) . addFeature ( VAR_1 ) . addFeature ( VAR_2 ) . build ( ) ) INIT = new TYPE_2 ( ) . addFeature ( VAR_1 ) . addFeature ( VAR_2 ) . build ( ) ) VAR VAR (  VAR_3 = config )  VAR_3 = config ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ( INIT = VAR_4 . METHOD_2 ( ) ) INIT = VAR_4 . METHOD_2 ( ) ) VAR VAR (  TYPE_3 . assertEquals ( config , result ) )  TYPE_3 . assertEquals ( config , result ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE android.bluetooth.BluetoothDevice ) TYPE android.bluetooth.BluetoothDevice ( NAME device ) NAME device ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( TYPE_1 . METHOD_2 ( ) ) ) COND ! ( TYPE_1 . METHOD_2 ( ) ) ( THEN THEN (  android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) )  android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME service ) NAME service ( INIT = METHOD_3 ( ) ) INIT = METHOD_3 ( ) ) VAR VAR ( IF IF ( COND service == null ) COND service == null ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  return service . METHOD_1 ( device ) ; )  return service . METHOD_1 ( device ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  this )  this ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_3 ( ) ) INIT = METHOD_3 ( ) ) VAR VAR (  VAR_1 . METHOD_1 ( ) )  VAR_1 . METHOD_1 ( ) (  VAR_1 . METHOD_4 ( ) )  VAR_1 . METHOD_4 ( ) (  VAR_2 . METHOD_4 ( ) )  VAR_2 . METHOD_4 ( ) ( IF IF ( COND VAR_3 ) COND VAR_3 ( THEN THEN (  out . METHOD_5 ( ) )  out . METHOD_5 ( ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME x ) NAME x ( BLOCK BLOCK (  TYPE_3 . METHOD_6 ( ) . METHOD_7 ( ) )  TYPE_3 . METHOD_6 ( ) . METHOD_7 ( ) ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME x ) NAME x ( BLOCK BLOCK (  VAR_4 = true )  VAR_4 = true ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE char[] ) TYPE char[] ( NAME s ) NAME s ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < ( s . length ) ) COND i < ( s . length ) ( UPDATE UPDATE (  ++ i )  ++ i ) UPDATE UPDATE ( BLOCK BLOCK ( IF IF ( COND i != 0 ) COND i != 0 ( THEN THEN (  result . append ( CHAR_1 ) )  result . append ( CHAR_1 ) ) THEN THEN ) IF IF (  result . append ( TYPE_2 . METHOD_1 ( s [ i ] ) ) )  result . append ( TYPE_2 . METHOD_1 ( s [ i ] ) ) ) BLOCK BLOCK ) FOR FOR (  return result . toString ( ) ; )  return result . toString ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.StringBuilder ) TYPE java.lang.StringBuilder ( NAME sb ) NAME sb ( INIT = new java.lang.StringBuilder ( ) ) INIT = new java.lang.StringBuilder ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( IN m . METHOD_2 ( VAR_2 ) ) IN m . METHOD_2 ( VAR_2 ) ( BLOCK BLOCK (  sb.append ( VAR_3 . toString ( ) ) . append ( CHAR_1 ) )  sb.append ( VAR_3 . toString ( ) ) . append ( CHAR_1 ) ( FOR-EACH FOR-EACH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME item ) NAME item ( IN VAR_3 . METHOD_3 ( ) ) IN VAR_3 . METHOD_3 ( ) ( BLOCK BLOCK (  sb.append ( STRING_1 ) . append ( item . toString ( ) ) . append ( CHAR_1 ) )  sb.append ( STRING_1 ) . append ( item . toString ( ) ) . append ( CHAR_1 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return sb . toString ( ) ; )  return sb . toString ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME index ) NAME index ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_3 ) COND VAR_3 ( THEN THEN (  TYPE_1 . d ( VAR_4 . TAG , ( ( ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + index ) + STRING_3 ) + VAR_2 ) ) )  TYPE_1 . d ( VAR_4 . TAG , ( ( ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + index ) + STRING_3 ) + VAR_2 ) ) ) THEN THEN ) IF IF (  VAR_5 . METHOD_2 ( VAR_2 ) )  VAR_5 . METHOD_2 ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3<TYPE_4> ) TYPE TYPE_3<TYPE_4> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_4> ) TYPE java.util.List<TYPE_4> ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_5 . METHOD_2 ( VAR_2 ) ) INIT = TYPE_5 . METHOD_2 ( VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_5 . METHOD_3 ( VAR_5 , VAR_1 . METHOD_4 ( ) ) ) INIT = TYPE_5 . METHOD_3 ( VAR_5 , VAR_1 . METHOD_4 ( ) ) ) VAR VAR (  VAR_3 . METHOD_5 ( VAR_4 ) )  VAR_3 . METHOD_5 ( VAR_4 ) (  return new TYPE_6 ( TYPE_7 . METHOD_6 ( VAR_1 . METHOD_7 ( ) ) , TYPE_8 . METHOD_8 ( VAR_1 . METHOD_9 ( ) ) , VAR_3 ) ; )  return new TYPE_6 ( TYPE_7 . METHOD_6 ( VAR_1 . METHOD_7 ( ) ) , TYPE_8 . METHOD_8 ( VAR_1 . METHOD_9 ( ) ) , VAR_3 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , STRING_1 , VAR_1 ) )  TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , STRING_1 , VAR_1 ) ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME size ) NAME size ( INIT = VAR_3 . size ( ) ) INIT = VAR_3 . size ( ) ) VAR VAR ) INIT INIT ( COND i < size ) COND i < size ( UPDATE UPDATE (  ++ i )  ++ i ) UPDATE UPDATE ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME type ) NAME type ( INIT = VAR_3 . get ( i ) ) INIT = VAR_3 . get ( i ) ) VAR VAR ( IF IF ( COND type == VAR_1 ) COND type == VAR_1 ( THEN THEN (  VAR_3 . set ( i , VAR_2 ) )  VAR_3 . set ( i , VAR_2 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR FOR ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1<TYPE_2> ) RETURN TYPE_1<TYPE_2> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.android.jack.ir.ast.JDefinedClassOrInterface ) TYPE com.android.jack.ir.ast.JDefinedClassOrInterface ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Set<TYPE_2> ) TYPE java.util.Set<TYPE_2> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_3 < TYPE_2 > ( ) ) INIT = new TYPE_3 < TYPE_2 > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE com.android.jack.ir.ast.JDefinedClassOrInterface ) TYPE com.android.jack.ir.ast.JDefinedClassOrInterface ( NAME type ) NAME type ( IN VAR_3 ) IN VAR_3 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 . METHOD_2 ( type ) ) || ( type . METHOD_2 ( VAR_1 ) ) ) COND ( VAR_1 . METHOD_2 ( type ) ) || ( type . METHOD_2 ( VAR_1 ) ) ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE com.android.jack.ir.ast.JMethod ) TYPE com.android.jack.ir.ast.JMethod ( NAME method ) NAME method ( IN type . METHOD_3 ( ) ) IN type . METHOD_3 ( ) ( BLOCK BLOCK (  VAR_2 . METHOD_4 ( method . METHOD_5 ( ) ) )  VAR_2 . METHOD_4 ( method . METHOD_5 ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN long ) RETURN long ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) . METHOD_3 ( VAR_2 class ) ) INIT = METHOD_2 ( ) . METHOD_3 ( VAR_2 class ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . METHOD_4 ( ) . METHOD_5 ( VAR_4 ) ) INIT = VAR_1 . METHOD_4 ( ) . METHOD_5 ( VAR_4 ) ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_5 ) NAME VAR_5 ( INIT = ( VAR_3 >= 0 ) && ( VAR_3 <= ( VAR_6 ) ) ) INIT = ( VAR_3 >= 0 ) && ( VAR_3 <= ( VAR_6 ) ) ) VAR VAR (  return VAR_5 ? VAR_3 : TYPE_1 . METHOD_6 ( ) . METHOD_5 ( VAR_4 ) ; )  return VAR_5 ? VAR_3 : TYPE_1 . METHOD_6 ( ) . METHOD_5 ( VAR_4 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME s ) NAME s ( INIT = new TYPE_2 ( VAR_1 ) ) INIT = new TYPE_2 ( VAR_1 ) ) VAR VAR (  VAR_1 . METHOD_2 ( VAR_2 ) )  VAR_1 . METHOD_2 ( VAR_2 ) (  METHOD_3 ( VAR_1 , s ) )  METHOD_3 ( VAR_1 , s ) (  s . METHOD_4 ( ) )  s . METHOD_4 ( ) (  VAR_1 . METHOD_5 ( ) )  VAR_1 . METHOD_5 ( ) (  s . METHOD_6 ( ) . METHOD_7 ( ) . METHOD_8 ( ) )  s . METHOD_6 ( ) . METHOD_7 ( ) . METHOD_8 ( ) (  s . METHOD_6 ( ) . getElement ( ) . METHOD_8 ( ) )  s . METHOD_6 ( ) . getElement ( ) . METHOD_8 ( ) (  s . METHOD_8 ( ) )  s . METHOD_8 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( VAR_2 class ) ) INIT = TYPE_2 . METHOD_2 ( VAR_2 class ) ) VAR VAR ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_3 = TYPE_3 . METHOD_3 ( STRING_1 , STRING_2 ) )  VAR_3 = TYPE_3 . METHOD_3 ( STRING_1 , STRING_2 ) (  VAR_1 . METHOD_4 ( TYPE_4 . getName ( ) , TYPE_5 . toString ( VAR_4 ) ) )  VAR_1 . METHOD_4 ( TYPE_4 . getName ( ) , TYPE_5 . toString ( VAR_4 ) ) (  VAR_1 . METHOD_4 ( TYPE_6 . getName ( ) , STRING_3 ) )  VAR_1 . METHOD_4 ( TYPE_6 . getName ( ) , STRING_3 ) (  VAR_1 . METHOD_4 ( TYPE_7 . getName ( ) , VAR_3 . METHOD_5 ( ) ) )  VAR_1 . METHOD_4 ( TYPE_7 . getName ( ) , VAR_3 . METHOD_5 ( ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_8 ( e ) ; )  throw new TYPE_8 ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_3 ) COND VAR_3 ( THEN THEN (  METHOD_2 ( ) )  METHOD_2 ( ) ) THEN THEN ) IF IF ( IF IF ( COND VAR_3 ) COND VAR_3 ( THEN THEN (  android.util.Log.d ( VAR_4 , ( ( ( STRING_1 + ( VAR_1 . METHOD_3 ( ) ) ) + STRING_2 ) + VAR_2 ) ) )  android.util.Log.d ( VAR_4 , ( ( ( STRING_1 + ( VAR_1 . METHOD_3 ( ) ) ) + STRING_2 ) + VAR_2 ) ) ) THEN THEN ) IF IF (  VAR_5 . METHOD_4 ( VAR_1 . METHOD_3 ( ) ) )  VAR_5 . METHOD_4 ( VAR_1 . METHOD_3 ( ) ) ( IF IF ( COND ( VAR_5 . METHOD_5 ( ) ) && ( VAR_6 ) ) COND ( VAR_5 . METHOD_5 ( ) ) && ( VAR_6 ) ( THEN THEN ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  METHOD_6 ( VAR_7 ) )  METHOD_6 ( VAR_7 ) ) THEN THEN ( ELSE ELSE (  METHOD_6 ( VAR_8 ) )  METHOD_6 ( VAR_8 ) ) ELSE ELSE ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_3 ( VAR_3 , STRING_1 , VAR_1 , VAR_4 , ( ( TYPE_4 ) ( VAR_5 . METHOD_2 ( ) ) ) ) ) INIT = new TYPE_3 ( VAR_3 , STRING_1 , VAR_1 , VAR_4 , ( ( TYPE_4 ) ( VAR_5 . METHOD_2 ( ) ) ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_6 ) NAME VAR_6 ( INIT = new TYPE_1 ( VAR_3 , VAR_7 < TYPE_5 > METHOD_3 ( VAR_1 ) , VAR_2 ) ) INIT = new TYPE_1 ( VAR_3 , VAR_7 < TYPE_5 > METHOD_3 ( VAR_1 ) , VAR_2 ) ) VAR VAR (  return VAR_6 ; )  return VAR_6 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_3 . METHOD_2 ( ) )  TYPE_3 . METHOD_2 ( ) (  VAR_1 . METHOD_3 ( TYPE_4 . METHOD_4 ( VAR_2 . METHOD_5 ( ) ) ) )  VAR_1 . METHOD_3 ( TYPE_4 . METHOD_4 ( VAR_2 . METHOD_5 ( ) ) ) (  VAR_1 . METHOD_6 ( null ) )  VAR_1 . METHOD_6 ( null ) ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_7 ( VAR_2 ) ) INIT = METHOD_7 ( VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_6<TYPE_7> ) TYPE TYPE_6<TYPE_7> ( NAME request ) NAME request ( INIT = METHOD_8 ( TYPE_8 . with ( VAR_1 ) , VAR_2 ) . METHOD_9 ( VAR_3 ) . METHOD_10 ( VAR_3 ) ) INIT = METHOD_8 ( TYPE_8 . with ( VAR_1 ) , VAR_2 ) . METHOD_9 ( VAR_3 ) . METHOD_10 ( VAR_3 ) ) VAR VAR ( IF IF ( COND VAR_2 . METHOD_11 ( ) ) COND VAR_2 . METHOD_11 ( ) ( THEN THEN (  request . METHOD_12 ( ) )  request . METHOD_12 ( ) ) THEN THEN ) IF IF (  request . METHOD_13 ( VAR_1 ) )  request . METHOD_13 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME uri ) NAME uri ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( VAR_5 ) ++ ) > 0 ) COND ( ( VAR_5 ) ++ ) > 0 ( THEN THEN (  super . METHOD_1 ( uri , VAR_1 , VAR_2 , VAR_3 , VAR_4 ) )  super . METHOD_1 ( uri , VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 ) INIT = VAR_3 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ( INIT = ( ( int ) ( METHOD_2 ( VAR_5 ) ) ) ) INIT = ( ( int ) ( METHOD_2 ( VAR_5 ) ) ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_6 ) NAME VAR_6 ( INIT = VAR_4 + ( VAR_7 ) ) INIT = VAR_4 + ( VAR_7 ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_8 ) NAME VAR_8 ( INIT = METHOD_3 ( VAR_1 ) ) INIT = METHOD_3 ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_9 ) NAME VAR_9 ( INIT = METHOD_4 ( VAR_5 ) ) INIT = METHOD_4 ( VAR_5 ) ) VAR VAR ( IF IF ( COND VAR_10 . METHOD_5 ( ) ) COND VAR_10 . METHOD_5 ( ) ( THEN THEN (  METHOD_6 ( VAR_2 , VAR_4 , VAR_6 , VAR_8 , VAR_11 , VAR_9 ) )  METHOD_6 ( VAR_2 , VAR_4 , VAR_6 , VAR_8 , VAR_11 , VAR_9 ) ) THEN THEN ( ELSE ELSE ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME b ) NAME b ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList<TYPE_2> ) TYPE java.util.ArrayList<TYPE_2> ( NAME VAR_1 ) NAME VAR_1 ( INIT = b . METHOD_2 ( ) ) INIT = b . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . get ( ( ( VAR_1 . size ( ) ) - 1 ) ) ) INIT = VAR_1 . get ( ( ( VAR_1 . size ( ) ) - 1 ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_2 . METHOD_3 ( ) ) INIT = VAR_2 . METHOD_3 ( ) ) VAR VAR ( IF IF ( COND ( ( VAR_3 . METHOD_4 ( ) ) != ( VAR_4 ) ) && ( VAR_3 != ( VAR_5 ) ) ) COND ( ( VAR_3 . METHOD_4 ( ) ) != ( VAR_4 ) ) && ( VAR_3 != ( VAR_5 ) ) ( THEN THEN (  throw new java.lang.RuntimeException ( ( STRING_1 + STRING_2 ) ) ; )  throw new java.lang.RuntimeException ( ( STRING_1 + STRING_2 ) ) ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( new java.util.HashMap < > ( ) ) . METHOD_3 ( 1 , FLOAT_1 , FLOAT_2 ) )  TYPE_1 . METHOD_2 ( new java.util.HashMap < > ( ) ) . METHOD_3 ( 1 , FLOAT_1 , FLOAT_2 ) (  fail ( ) )  fail ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME expected ) NAME expected ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ( VAR VAR ( TYPE java.util.HashMap<java.lang.Integer,TYPE_3> ) TYPE java.util.HashMap<java.lang.Integer,TYPE_3> ( NAME m ) NAME m ( INIT = new java.util.HashMap < > ( ) ) INIT = new java.util.HashMap < > ( ) ) VAR VAR (  m . METHOD_4 ( 1 , FLOAT_1 ) )  m . METHOD_4 ( 1 , FLOAT_1 ) ( TRY TRY ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( m ) . METHOD_3 ( 1 , FLOAT_1 , FLOAT_2 ) )  TYPE_1 . METHOD_2 ( m ) . METHOD_3 ( 1 , FLOAT_1 , FLOAT_2 ) (  fail ( ) )  fail ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME expected ) NAME expected ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME match ) NAME match ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( ) ) INIT = TYPE_2 . METHOD_2 ( ) ) VAR VAR (  VAR_1 . METHOD_3 ( TYPE_3 . METHOD_4 ( ) ) )  VAR_1 . METHOD_3 ( TYPE_3 . METHOD_4 ( ) ) (  VAR_1 . METHOD_3 ( TYPE_3 . METHOD_5 ( STRING_1 ) ) )  VAR_1 . METHOD_3 ( TYPE_3 . METHOD_5 ( STRING_1 ) ) (  VAR_1 . METHOD_3 ( ( match = TYPE_3 . METHOD_5 ( STRING_2 ) ) ) )  VAR_1 . METHOD_3 ( ( match = TYPE_3 . METHOD_5 ( STRING_2 ) ) ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ( INIT = TYPE_3 . METHOD_6 ( VAR_1 , INT_1 , STRING_2 , STRING_1 ) ) INIT = TYPE_3 . METHOD_6 ( VAR_1 , INT_1 , STRING_2 , STRING_1 ) ) VAR VAR (  assertEquals ( match , result ) )  assertEquals ( match , result ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public synchronized ) MODIFIER public synchronized ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 < 0 ) || ( VAR_1 > INT_1 ) ) COND ( VAR_1 < 0 ) || ( VAR_1 > INT_1 ) ( THEN THEN (  throw new java.lang.IllegalArgumentException ( STRING_1 ) ; )  throw new java.lang.IllegalArgumentException ( STRING_1 ) ; ) THEN THEN ) IF IF ( IF IF ( COND METHOD_2 ( ) ) COND METHOD_2 ( ) ( THEN THEN (  throw new TYPE_1 ( STRING_2 ) ; )  throw new TYPE_1 ( STRING_2 ) ; ) THEN THEN ) IF IF ( TRY TRY ( BLOCK BLOCK (  METHOD_3 ( ) . METHOD_4 ( VAR_2 , VAR_1 ) )  METHOD_3 ( ) . METHOD_4 ( VAR_2 , VAR_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( BLOCK BLOCK ( IF IF ( COND ! ( METHOD_5 ( ) ) ) COND ! ( METHOD_5 ( ) ) ( THEN THEN (  throw VAR_3 ; )  throw VAR_3 ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE long ) TYPE long ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( status ) & ( VAR_2 ) ) == 0 ) COND ( ( status ) & ( VAR_2 ) ) == 0 ( THEN THEN (  status |= VAR_2 )  status |= VAR_2 (  VAR_3 = new int [ ( ( VAR_1 - 1 ) / INT_1 ) + 1 ] )  VAR_3 = new int [ ( ( VAR_1 - 1 ) / INT_1 ) + 1 ] ) THEN THEN ) IF IF (  VAR_3 [ ( ( int ) ( id > > > INT_1 ) ) ] |= ( ( int ) ( id ) ) )  VAR_3 [ ( ( int ) ( id > > > INT_1 ) ) ] |= ( ( int ) ( id ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME session ) NAME session ) VAR VAR ( VAR VAR ( TYPE TYPE_2<TYPE_3> ) TYPE TYPE_2<TYPE_3> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_2 . METHOD_2 ( VAR_3 ) ) COND VAR_2 . METHOD_2 ( VAR_3 ) ( THEN THEN ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_1 . METHOD_3 ( VAR_2 , session . METHOD_4 ( ) ) ) INIT = VAR_1 . METHOD_3 ( VAR_2 , session . METHOD_4 ( ) ) ) VAR VAR (  session . METHOD_5 ( ) . METHOD_6 ( VAR_4 ) )  session . METHOD_5 ( ) . METHOD_6 ( VAR_4 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public synchronized ) MODIFIER public synchronized ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  return METHOD_2 ( name ) ; )  return METHOD_2 ( name ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_1 ( this , name ) ) INIT = VAR_2 . METHOD_1 ( this , name ) ) VAR VAR (  VAR_3 . METHOD_3 ( name , VAR_1 ) )  VAR_3 . METHOD_3 ( name , VAR_1 ) (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_2 ( VAR_2 . METHOD_4 ( this , name ) ) ; )  throw new TYPE_2 ( VAR_2 . METHOD_4 ( this , name ) ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME equals ) NAME equals ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_1 instanceof TYPE_1 ) ) COND ! ( VAR_1 instanceof TYPE_1 ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_1 ) ( VAR_1 ) ) ) INIT = ( ( TYPE_1 ) ( VAR_1 ) ) ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < ( VAR_3 . length ) ) COND i < ( VAR_3 . length ) ( UPDATE UPDATE (  ++ i )  ++ i ) UPDATE UPDATE ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_3 [ i ] . equals ( VAR_4 [ i ] ) ) ) COND ! ( VAR_3 [ i ] . equals ( VAR_4 [ i ] ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR FOR (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3[] ) TYPE TYPE_3[] ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 ) INIT = VAR_4 ) VAR VAR ( IF IF ( COND METHOD_2 ( VAR_3 ) ) COND METHOD_2 ( VAR_3 ) ( THEN THEN ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_6 ) INIT = VAR_6 ) VAR VAR ( IF IF ( COND VAR_5 == null ) COND VAR_5 == null ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_7 ) NAME VAR_7 ( INIT = TYPE_5 . METHOD_3 ( VAR_2 ) ) INIT = TYPE_5 . METHOD_3 ( VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME item ) NAME item ( INIT = TYPE_7 . METHOD_4 ( VAR_7 , VAR_5 ) ) INIT = TYPE_7 . METHOD_4 ( VAR_7 , VAR_5 ) ) VAR VAR ( IF IF ( COND item != null ) COND item != null ( THEN THEN (  METHOD_5 ( VAR_7 , item ) )  METHOD_5 ( VAR_7 , item ) (  METHOD_6 ( VAR_3 , item ) )  METHOD_6 ( VAR_3 , item ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_2 ) == VAR_1 ) COND ( VAR_2 ) == VAR_1 ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  VAR_2 = VAR_1 )  VAR_2 = VAR_1 ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  VAR_3 . METHOD_2 ( VAR_4 ) )  VAR_3 . METHOD_2 ( VAR_4 ) (  TYPE_1 . METHOD_3 ( mContext , VAR_5 ) )  TYPE_1 . METHOD_3 ( mContext , VAR_5 ) ) THEN THEN ( ELSE ELSE (  VAR_3 . METHOD_4 ( VAR_4 ) )  VAR_3 . METHOD_4 ( VAR_4 ) (  TYPE_1 . METHOD_5 ( mContext , VAR_5 ) )  TYPE_1 . METHOD_5 ( mContext , VAR_5 ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  METHOD_3 ( VAR_1 , VAR_2 ) )  METHOD_3 ( VAR_1 , VAR_2 ) ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 . METHOD_4 ( VAR_5 ) ) INIT = VAR_4 . METHOD_4 ( VAR_5 ) ) VAR VAR (  org.mockito.Mockito.verify ( VAR_6 ) . METHOD_5 ( org.mockito.Matchers.eq ( VAR_1 ) ) )  org.mockito.Mockito.verify ( VAR_6 ) . METHOD_5 ( org.mockito.Matchers.eq ( VAR_1 ) ) (  assertEquals ( VAR_3 , true ) )  assertEquals ( VAR_3 , true ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( WHILE WHILE ( COND VAR_1 != null ) COND VAR_1 != null ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.Class<?extendsTYPE_1> ) TYPE java.lang.Class<?extendsTYPE_1> ( NAME type ) NAME type ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND ( type == ( VAR_2 class ) ) || ( type == ( VAR_3 class ) ) ) COND ( type == ( VAR_2 class ) ) || ( type == ( VAR_3 class ) ) ( THEN THEN (  return VAR_1 ; )  return VAR_1 ; ) THEN THEN ) IF IF (  VAR_1 = VAR_1 . METHOD_3 ( ) )  VAR_1 = VAR_1 . METHOD_3 ( ) ) BLOCK BLOCK ) WHILE WHILE (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  VAR_3 )  VAR_3 ( BLOCK BLOCK ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME i ) NAME i ( INIT = VAR_4 . METHOD_2 ( ) ) INIT = VAR_4 . METHOD_2 ( ) ) VAR VAR ) INIT INIT ( COND i . METHOD_3 ( ) ) COND i . METHOD_3 ( ) ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_5 ) NAME VAR_5 ( INIT = i . METHOD_4 ( ) ) INIT = i . METHOD_4 ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_5 . METHOD_5 ( VAR_1 , VAR_2 ) )  VAR_5 . METHOD_5 ( VAR_1 , VAR_2 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME e ) NAME e ( BLOCK BLOCK (  android.util.Log.w ( VAR_6 , ( ( STRING_1 + STRING_2 ) + ( e.getMessage ( ) ) ) ) )  android.util.Log.w ( VAR_6 , ( ( STRING_1 + STRING_2 ) + ( e.getMessage ( ) ) ) ) (  i . METHOD_6 ( ) )  i . METHOD_6 ( ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) FOR FOR ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME size ) NAME size ( INIT = ( this . METHOD_2 ( ) ) > > 2 ) INIT = ( this . METHOD_2 ( ) ) > > 2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_3 ( ) ) INIT = METHOD_3 ( ) ) VAR VAR (  return ( ( TYPE_1 ) ( new TYPE_2 ( this , ( - 1 ) , 0 , size , size , VAR_1 , METHOD_4 ( ) ) ) ) ; )  return ( ( TYPE_1 ) ( new TYPE_2 ( this , ( - 1 ) , 0 , size , size , VAR_1 , METHOD_4 ( ) ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( VAR_1 ) )  METHOD_2 ( VAR_1 ) (  VAR_2 . METHOD_3 ( STRING_1 , STRING_2 , VAR_3 . TAG , null , null , null , null , false , ( - 1 ) , false , ( - 1 ) ) )  VAR_2 . METHOD_3 ( STRING_1 , STRING_2 , VAR_3 . TAG , null , null , null , null , false , ( - 1 ) , false , ( - 1 ) ) (  org.mockito.Mockito.verify ( VAR_4 ) . METHOD_4 ( TYPE_1 . eq ( STRING_3 ) , TYPE_1 . eq ( STRING_4 ) , TYPE_1 . eq ( 0 ) , TYPE_1 . eq ( 0 ) , org.mockito.Matchers . METHOD_5 ( VAR_5 class ) ) )  org.mockito.Mockito.verify ( VAR_4 ) . METHOD_4 ( TYPE_1 . eq ( STRING_3 ) , TYPE_1 . eq ( STRING_4 ) , TYPE_1 . eq ( 0 ) , TYPE_1 . eq ( 0 ) , org.mockito.Matchers . METHOD_5 ( VAR_5 class ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ( INIT = TYPE_2 . getName ( VAR_1 ) ) INIT = TYPE_2 . getName ( VAR_1 ) ) VAR VAR ( IF IF ( COND name == null ) COND name == null ( THEN THEN (  name = TYPE_3 . getName ( VAR_1 ) )  name = TYPE_3 . getName ( VAR_1 ) ( IF IF ( COND name == null ) COND name == null ( THEN THEN (  name = TYPE_4 . getName ( VAR_1 ) )  name = TYPE_4 . getName ( VAR_1 ) ) THEN THEN ) IF IF ( IF IF ( COND name == null ) COND name == null ( THEN THEN (  name = TYPE_5 . getName ( VAR_1 ) )  name = TYPE_5 . getName ( VAR_1 ) ) THEN THEN ) IF IF ( IF IF ( COND name == null ) COND name == null ( THEN THEN (  name = TYPE_6 . getName ( VAR_1 ) )  name = TYPE_6 . getName ( VAR_1 ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return name ; )  return name ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME a ) NAME a ( INIT = METHOD_2 ( STRING_1 ) ) INIT = METHOD_2 ( STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME b ) NAME b ( INIT = METHOD_2 ( STRING_2 ) ) INIT = METHOD_2 ( STRING_2 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( new TYPE_1 [ ] { a , b } , VAR_2 ) . METHOD_3 ( ) ) INIT = new TYPE_2 ( new TYPE_1 [ ] { a , b } , VAR_2 ) . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_2 ( new TYPE_1 [ ] { a , VAR_1 } , VAR_2 ) ) INIT = new TYPE_2 ( new TYPE_1 [ ] { a , VAR_1 } , VAR_2 ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_3 . METHOD_3 ( ) )  VAR_3 . METHOD_3 ( ) (  fail ( ) )  fail ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME expected ) NAME expected ( BLOCK BLOCK (  assertEquals ( STRING_3 , expected . getMessage ( ) ) )  assertEquals ( STRING_3 , expected . getMessage ( ) ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME type ) NAME type ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SWITCH SWITCH ( NAME type . METHOD_2 ( ) ) NAME type . METHOD_2 ( ) ( CASE VAR_1 ( BLOCK BLOCK (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) CASE VAR_1 ( CASE VAR_3 ( BLOCK BLOCK (  return VAR_4 ; )  return VAR_4 ; ) BLOCK BLOCK ) CASE VAR_3 ( CASE VAR_5 ( BLOCK BLOCK (  return VAR_6 ; )  return VAR_6 ; ) BLOCK BLOCK ) CASE VAR_5 ( CASE VAR_7 ( BLOCK BLOCK (  return VAR_8 ; )  return VAR_8 ; ) BLOCK BLOCK ) CASE VAR_7 ( CASE VAR_9 ( BLOCK BLOCK (  return VAR_10 ; )  return VAR_10 ; ) BLOCK BLOCK ) CASE VAR_9 ( CASE VAR_11 ( BLOCK BLOCK (  return VAR_4 ; )  return VAR_4 ; ) BLOCK BLOCK ) CASE VAR_11 ) SWITCH SWITCH (  return TYPE_3 . METHOD_3 ( type ) ; )  return TYPE_3 . METHOD_3 ( type ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ! ( METHOD_2 ( VAR_1 ) ) ) && ( VAR_2 . METHOD_3 ( ) ) ) COND ( ! ( METHOD_2 ( VAR_1 ) ) ) && ( VAR_2 . METHOD_3 ( ) ) ( THEN THEN (  android.util.Log.w ( VAR_3 . TAG , ( ( STRING_1 + ( VAR_4 ) ) + STRING_2 ) ) )  android.util.Log.w ( VAR_3 . TAG , ( ( STRING_1 + ( VAR_4 ) ) + STRING_2 ) ) (  METHOD_4 ( VAR_1 ) )  METHOD_4 ( VAR_1 ) (  METHOD_5 ( VAR_4 ) )  METHOD_5 ( VAR_4 ) (  VAR_2 . METHOD_6 ( ) )  VAR_2 . METHOD_6 ( ) ) THEN THEN ) IF IF (  METHOD_7 ( ) )  METHOD_7 ( ) ( IF IF ( COND ( METHOD_8 ( ) ) == 0 ) COND ( METHOD_8 ( ) ) == 0 ( THEN THEN ( IF IF ( COND VAR_5 ) COND VAR_5 ( THEN THEN (  android.util.Log.d ( VAR_3 . TAG , STRING_3 ) )  android.util.Log.d ( VAR_3 . TAG , STRING_3 ) ) THEN THEN ) IF IF (  METHOD_9 ( false ) )  METHOD_9 ( false ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE android.os.Message ) TYPE android.os.Message ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  log ( ( ( ( getName ( ) ) + ( VAR_1 . toString ( ) ) ) + STRING_1 ) ) )  log ( ( ( ( getName ( ) ) + ( VAR_1 . toString ( ) ) ) + STRING_1 ) ) ) THEN THEN ) IF IF ( SWITCH SWITCH ( NAME VAR_3 ) NAME VAR_3 ( CASE VAR_4 ( BLOCK BLOCK ( IF IF ( COND ( message.arg1 ) == ( VAR_5 ) ) COND ( message.arg1 ) == ( VAR_5 ) ( THEN THEN (  METHOD_2 ( VAR_1 ) )  METHOD_2 ( VAR_1 ) ) THEN THEN ) IF IF (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_4 ( CASE VAR_6 ( BLOCK BLOCK (  METHOD_2 ( VAR_1 ) )  METHOD_2 ( VAR_1 ) (  METHOD_3 ( ) )  METHOD_3 ( ) (  transitionTo ( VAR_7 ) )  transitionTo ( VAR_7 ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_6 ( DEFAULT DEFAULT ( BLOCK BLOCK (  return VAR_8 ; )  return VAR_8 ; ) BLOCK BLOCK ) DEFAULT DEFAULT ) SWITCH SWITCH (  TYPE_1 . METHOD_4 ( VAR_9 , VAR_3 ) )  TYPE_1 . METHOD_4 ( VAR_9 , VAR_3 ) (  return VAR_10 ; )  return VAR_10 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME match ) NAME match ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( ) ) INIT = TYPE_2 . METHOD_2 ( ) ) VAR VAR (  VAR_1 . METHOD_3 ( TYPE_3 . METHOD_4 ( ) ) )  VAR_1 . METHOD_3 ( TYPE_3 . METHOD_4 ( ) ) (  VAR_1 . METHOD_3 ( ( match = TYPE_3 . METHOD_5 ( INT_1 ) ) ) )  VAR_1 . METHOD_3 ( ( match = TYPE_3 . METHOD_5 ( INT_1 ) ) ) (  VAR_1 . METHOD_3 ( TYPE_3 . METHOD_5 ( INT_2 ) ) )  VAR_1 . METHOD_3 ( TYPE_3 . METHOD_5 ( INT_2 ) ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ( INIT = TYPE_3 . METHOD_6 ( VAR_1 , INT_1 , STRING_1 ) ) INIT = TYPE_3 . METHOD_6 ( VAR_1 , INT_1 , STRING_1 ) ) VAR VAR (  assertEquals ( match , result ) )  assertEquals ( match , result ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME path ) NAME path ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.io.File ( VAR_2 ) ) INIT = new java.io.File ( VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_1 ( new TYPE_2 ( VAR_1 , false ) ) ) INIT = new TYPE_1 ( new TYPE_2 ( VAR_1 , false ) ) ) VAR VAR (  TYPE_3 . METHOD_2 ( VAR_3 , path ) )  TYPE_3 . METHOD_2 ( VAR_3 , path ) (  VAR_3 . METHOD_3 ( ) )  VAR_3 . METHOD_3 ( ) (  VAR_3 . METHOD_4 ( ) )  VAR_3 . METHOD_4 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ( BLOCK BLOCK (  android.util.Log.e ( VAR_4 , ( STRING_1 + ( e.getMessage ( ) ) ) ) )  android.util.Log.e ( VAR_4 , ( STRING_1 + ( e.getMessage ( ) ) ) ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME context ) NAME context ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_2 ) < ( VAR_3 ) ) COND ( VAR_2 ) < ( VAR_3 ) ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  TYPE_4 . i ( STRING_1 , STRING_2 ) )  TYPE_4 . i ( STRING_1 , STRING_2 ) (  VAR_1 = TYPE_5 . METHOD_2 ( context ) )  VAR_1 = TYPE_5 . METHOD_2 ( context ) ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  TYPE_4 . i ( STRING_1 , STRING_3 ) )  TYPE_4 . i ( STRING_1 , STRING_3 ) (  return null ; )  return null ; ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return context . METHOD_3 ( VAR_4 class ) . METHOD_1 ( VAR_1 ) ; )  return context . METHOD_3 ( VAR_4 class ) . METHOD_1 ( VAR_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME start ) NAME start ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.StringBuilder ) TYPE java.lang.StringBuilder ( NAME VAR_3 ) NAME VAR_3 ( INIT = new java.lang.StringBuilder ( INT_1 ) ) INIT = new java.lang.StringBuilder ( INT_1 ) ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = start ) INIT = start ) VAR VAR ) INIT INIT ( COND i < VAR_2 ) COND i < VAR_2 ( UPDATE UPDATE (  ++ i )  ++ i ) UPDATE UPDATE ( BLOCK BLOCK ( IF IF ( COND i != 0 ) COND i != 0 ( THEN THEN (  VAR_3 . append ( CHAR_1 ) )  VAR_3 . append ( CHAR_1 ) ) THEN THEN ) IF IF (  VAR_3 . append ( VAR_1 [ i ] ) )  VAR_3 . append ( VAR_1 [ i ] ) ) BLOCK BLOCK ) FOR FOR (  return VAR_3 . toString ( ) ; )  return VAR_3 . toString ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE android.renderscript.Allocation ) TYPE android.renderscript.Allocation ( NAME VAR_1 ) NAME VAR_1 ( INIT = android.renderscript.Allocation.createSized ( mRS , TYPE_1 . METHOD_2 ( mRS ) , android.renderscript.cts.INPUTSIZE ) ) INIT = android.renderscript.Allocation.createSized ( mRS , TYPE_1 . METHOD_2 ( mRS ) , android.renderscript.cts.INPUTSIZE ) ) VAR VAR (  n = new int [ ( INPUTSIZE ) * 4 ] )  n = new int [ ( INPUTSIZE ) * 4 ] (  TYPE_2 . METHOD_3 ( INT_1 , INT_2 , 1 , n ) )  TYPE_2 . METHOD_3 ( INT_1 , INT_2 , 1 , n ) (  VAR_1 . METHOD_4 ( n ) )  VAR_1 . METHOD_4 ( n ) (  VAR_2 . METHOD_5 ( VAR_1 ) )  VAR_2 . METHOD_5 ( VAR_1 ) (  METHOD_6 ( INT_3 , 16 ) )  METHOD_6 ( INT_3 , 16 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 . METHOD_3 ( this ) ) COND VAR_1 . METHOD_3 ( this ) ( THEN THEN ( IF IF ( COND VAR_1 . METHOD_4 ( ) ) COND VAR_1 . METHOD_4 ( ) ( THEN THEN (  METHOD_5 ( ) )  METHOD_5 ( ) (  METHOD_6 ( ) )  METHOD_6 ( ) ) THEN THEN ) IF IF (  VAR_1 . METHOD_7 ( VAR_4 ) )  VAR_1 . METHOD_7 ( VAR_4 ) (  VAR_1 . METHOD_7 ( VAR_5 ) )  VAR_1 . METHOD_7 ( VAR_5 ) ) THEN THEN ) IF IF (  VAR_1 . METHOD_8 ( this ) )  VAR_1 . METHOD_8 ( this ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_2 ( ) ) INIT = VAR_2 . METHOD_2 ( ) ) VAR VAR (  TYPE_2 . METHOD_3 ( VAR_1 , STRING_1 ) )  TYPE_2 . METHOD_3 ( VAR_1 , STRING_1 ) (  TYPE_2 . METHOD_3 ( VAR_1 , STRING_2 ) )  TYPE_2 . METHOD_3 ( VAR_1 , STRING_2 ) (  TYPE_3 . assertTrue ( STRING_3 , TYPE_2 . METHOD_4 ( VAR_1 , STRING_4 , null ) ) )  TYPE_3 . assertTrue ( STRING_3 , TYPE_2 . METHOD_4 ( VAR_1 , STRING_4 , null ) ) (  TYPE_3 . assertTrue ( STRING_5 , TYPE_2 . METHOD_4 ( VAR_1 , STRING_6 , null ) ) )  TYPE_3 . assertTrue ( STRING_5 , TYPE_2 . METHOD_4 ( VAR_1 , STRING_6 , null ) ) (  TYPE_2 . METHOD_5 ( VAR_1 , STRING_4 , null ) )  TYPE_2 . METHOD_5 ( VAR_1 , STRING_4 , null ) (  TYPE_2 . METHOD_5 ( VAR_1 , STRING_6 , null ) )  TYPE_2 . METHOD_5 ( VAR_1 , STRING_6 , null ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ! ( METHOD_2 ( ) ) ) || ( VAR_2 . METHOD_3 ( ) ) ) COND ( ! ( METHOD_2 ( ) ) ) || ( VAR_2 . METHOD_3 ( ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  VAR_1 . print ( STRING_1 ) )  VAR_1 . print ( STRING_1 ) (  VAR_1 . print ( METHOD_4 ( ) ) )  VAR_1 . print ( METHOD_4 ( ) ) (  VAR_1 . println ( STRING_2 ) )  VAR_1 . println ( STRING_2 ) ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK (  VAR_3 . METHOD_1 ( VAR_1 ) )  VAR_3 . METHOD_1 ( VAR_1 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  VAR_1 . print ( STRING_3 ) )  VAR_1 . print ( STRING_3 ) (  VAR_1 . println ( ) )  VAR_1 . println ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.Class<?> ) TYPE java.lang.Class<?> ( NAME target ) NAME target ( INIT = VAR_1 class ) INIT = VAR_1 class ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_2 ( VAR_4 , VAR_2 , null , target , VAR_5 , VAR_6 , 0 ) ) INIT = new TYPE_2 ( VAR_4 , VAR_2 , null , target , VAR_5 , VAR_6 , 0 ) ) VAR VAR (  VAR_3 . run ( STRING_2 , null , null ) )  VAR_3 . run ( STRING_2 , null , null ) (  org.mockito.Mockito.verify ( VAR_4 , TYPE_3 . METHOD_2 ( 8 ) ) . METHOD_3 ( VAR_7 ) )  org.mockito.Mockito.verify ( VAR_4 , TYPE_3 . METHOD_2 ( 8 ) ) . METHOD_3 ( VAR_7 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( path ) ) INIT = TYPE_1 . METHOD_2 ( path ) ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME b ) NAME b ( INIT = new byte [ 1 ] ) INIT = new byte [ 1 ] ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME res ) NAME res ( INIT = - 1 ) INIT = - 1 ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  res = METHOD_1 ( b , 0 , 1 ) )  res = METHOD_1 ( b , 0 , 1 ) ) BLOCK BLOCK ( FINALLY FINALLY (  TYPE_1 . METHOD_3 ( VAR_1 , res ) )  TYPE_1 . METHOD_3 ( VAR_1 , res ) ) FINALLY FINALLY ) TRY TRY (  return res != ( - 1 ) ? ( b [ 0 ] ) & INT_1 : - 1 ; )  return res != ( - 1 ) ? ( b [ 0 ] ) & INT_1 : - 1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME error ) NAME error ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME location ) NAME location ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SWITCH SWITCH ( NAME VAR_1 ) NAME VAR_1 ( CASE VAR_4 ( BLOCK BLOCK (  VAR_5 . METHOD_1 ( STRING_1 , location , java.lang.String.format ( VAR_2 , VAR_3 ) ) )  VAR_5 . METHOD_1 ( STRING_1 , location , java.lang.String.format ( VAR_2 , VAR_3 ) ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_4 ( CASE VAR_6 ( BLOCK BLOCK (  VAR_5 . METHOD_2 ( STRING_1 , location , java.lang.String.format ( VAR_2 , VAR_3 ) ) )  VAR_5 . METHOD_2 ( STRING_1 , location , java.lang.String.format ( VAR_2 , VAR_3 ) ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_6 ( CASE VAR_7 ( BLOCK BLOCK (  VAR_5 . error ( null , STRING_1 , location , java.lang.String.format ( VAR_2 , VAR_3 ) ) )  VAR_5 . error ( null , STRING_1 , location , java.lang.String.format ( VAR_2 , VAR_3 ) ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_7 ) SWITCH SWITCH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( false , false , false ) )  METHOD_2 ( false , false , false ) (  TYPE_1 . when ( VAR_1 . METHOD_3 ( METHOD_4 ( ) ) ) . METHOD_5 ( VAR_2 ) )  TYPE_1 . when ( VAR_1 . METHOD_3 ( METHOD_4 ( ) ) ) . METHOD_5 ( VAR_2 ) (  assertFalse ( VAR_3 . METHOD_3 ( ) ) )  assertFalse ( VAR_3 . METHOD_3 ( ) ) (  assertFalse ( VAR_3 . METHOD_6 ( ) ) )  assertFalse ( VAR_3 . METHOD_6 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME uid ) NAME uid ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int[] ) TYPE int[] ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE int[][] ) TYPE int[][] ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_5 ) NAME VAR_5 ( INIT = ( VAR_3 ) ? VAR_6 : 0 ) INIT = ( VAR_3 ) ? VAR_6 : 0 ) VAR VAR (  return TYPE_1 . METHOD_1 ( uid , VAR_1 , VAR_2 , VAR_5 , VAR_4 ) ; )  return TYPE_1 . METHOD_1 ( uid , VAR_1 , VAR_2 , VAR_5 , VAR_4 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . size ( ) ) INIT = VAR_2 . size ( ) ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < VAR_1 ) COND i < VAR_1 ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME w ) NAME w ( INIT = VAR_2 . get ( i ) ) INIT = VAR_2 . get ( i ) ) VAR VAR ( IF IF ( COND VAR_3 ) COND VAR_3 ( THEN THEN (  android.util.Log.v ( TYPE_2 . TAG , ( STRING_1 + w ) ) )  android.util.Log.v ( TYPE_2 . TAG , ( STRING_1 + w ) ) ) THEN THEN ) IF IF (  w . METHOD_2 ( ) )  w . METHOD_2 ( ) ) BLOCK BLOCK ) FOR FOR ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Integer ) RETURN java.lang.Integer ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.Integer ) TYPE java.lang.Integer ( NAME result ) NAME result ( INIT = 0 ) INIT = 0 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_2 ( VAR_3 , null , null , null , null ) ) INIT = VAR_2 . METHOD_2 ( VAR_3 , null , null , null , null ) ) VAR VAR ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN (  result = VAR_1 . METHOD_3 ( ) )  result = VAR_1 . METHOD_3 ( ) (  VAR_1 . METHOD_4 ( ) )  VAR_1 . METHOD_4 ( ) ) THEN THEN ) IF IF (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME args ) NAME args ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  TYPE_3 . METHOD_2 ( VAR_2 class . METHOD_3 ( ) , new java.lang.Class < ? > [ ] { VAR_3 class , VAR_4 class , VAR_5 class , VAR_6 class } , VAR_1 ) )  TYPE_3 . METHOD_2 ( VAR_2 class . METHOD_3 ( ) , new java.lang.Class < ? > [ ] { VAR_3 class , VAR_4 class , VAR_5 class , VAR_6 class } , VAR_1 ) (  VAR_7 . println ( STRING_1 ) )  VAR_7 . println ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.IllegalArgumentException ) TYPE java.lang.IllegalArgumentException ( NAME VAR_8 ) NAME VAR_8 ( BLOCK BLOCK (  java.lang.System.out.println ( STRING_2 ) )  java.lang.System.out.println ( STRING_2 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<TYPE_2> ) RETURN TYPE_1<TYPE_2> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME VAR_1 ) NAME VAR_1 ( INIT = null ) INIT = null ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_1 = ( ( TYPE_1 < TYPE_2 > ) ( super . METHOD_1 ( ) ) ) )  VAR_1 = ( ( TYPE_1 < TYPE_2 > ) ( super . METHOD_1 ( ) ) ) (  VAR_1 . METHOD_2 ( new TYPE_3 ( m ) ) )  VAR_1 . METHOD_2 ( new TYPE_3 ( m ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_5 ( ) ; )  throw new TYPE_5 ( ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private synchronized ) MODIFIER private synchronized ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( ( VAR_1 ) == true ) || ( ( VAR_2 ) != null ) ) COND ( ( VAR_1 ) == true ) || ( ( VAR_2 ) != null ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME pm ) NAME pm ( INIT = ( ( TYPE_1 ) ( mContext . METHOD_2 ( VAR_3 ) ) ) ) INIT = ( ( TYPE_1 ) ( mContext . METHOD_2 ( VAR_3 ) ) ) ) VAR VAR (  VAR_2 = pm . METHOD_3 ( VAR_4 , VAR_5 ) )  VAR_2 = pm . METHOD_3 ( VAR_4 , VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( ) )  VAR_1 . METHOD_2 ( ) ( VAR VAR ( TYPE java.lang.Class[] ) TYPE java.lang.Class[] ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_1 . METHOD_3 ( ) ) INIT = TYPE_1 . METHOD_3 ( ) ) VAR VAR ( IF IF ( COND ( ( VAR_3 . size ( ) ) < 1 ) || ( ( ( VAR_3 . size ( ) ) == 1 ) && ( VAR_4 class . METHOD_4 ( ) . equals ( VAR_3 . get ( 0 ) . getName ( ) ) ) ) ) COND ( ( VAR_3 . size ( ) ) < 1 ) || ( ( ( VAR_3 . size ( ) ) == 1 ) && ( VAR_4 class . METHOD_4 ( ) . equals ( VAR_3 . get ( 0 ) . getName ( ) ) ) ) ( THEN THEN (  METHOD_5 ( STRING_1 ) )  METHOD_5 ( STRING_1 ) (  VAR_5 . METHOD_6 ( VAR_6 ) )  VAR_5 . METHOD_6 ( VAR_6 ) ) THEN THEN ) IF IF (  METHOD_7 ( VAR_2 , VAR_7 ) )  METHOD_7 ( VAR_2 , VAR_7 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME c ) NAME c ( INIT = TYPE_1 . METHOD_2 ( ) ) INIT = TYPE_1 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME e ) NAME e ( INIT = VAR_1 . METHOD_3 ( ) ) INIT = VAR_1 . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME VAR_2 ) NAME VAR_2 ( INIT = e . METHOD_4 ( ) ) INIT = e . METHOD_4 ( ) ) VAR VAR (  TYPE_3 . METHOD_5 ( VAR_3 , VAR_2 ) )  TYPE_3 . METHOD_5 ( VAR_3 , VAR_2 ) (  METHOD_6 ( VAR_2 , e . METHOD_4 ( ) ) )  METHOD_6 ( VAR_2 , e . METHOD_4 ( ) ) (  c . METHOD_7 ( ) )  c . METHOD_7 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME context ) NAME context ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) != null ) COND ( VAR_1 ) != null ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE TYPE_2<java.lang.String,TYPE_3> ) TYPE TYPE_2<java.lang.String,TYPE_3> ( NAME VAR_2 ) NAME VAR_2 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_2 . METHOD_2 ( ) ) INIT = VAR_2 . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND ( ( VAR_4 ) == null ) || ( ! ( VAR_4 . METHOD_3 ( VAR_3 ) ) ) ) COND ( ( VAR_4 ) == null ) || ( ! ( VAR_4 . METHOD_3 ( VAR_3 ) ) ) ( THEN THEN (  continue ; )  continue ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME location ) NAME location ( INIT = VAR_2 . METHOD_4 ( ) ) INIT = VAR_2 . METHOD_4 ( ) ) VAR VAR (  context . METHOD_5 ( VAR_5 , location , VAR_6 , null ) )  context . METHOD_5 ( VAR_5 , location , VAR_6 , null ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.StringBuilder ) TYPE java.lang.StringBuilder ( NAME sb ) NAME sb ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  sb.append ( STRING_1 ) )  sb.append ( STRING_1 ) ( IF IF ( COND ( VAR_1 ) == null ) COND ( VAR_1 ) == null ( THEN THEN (  sb.append ( STRING_2 ) )  sb.append ( STRING_2 ) (  return ; )  return ; ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_2 ) != null ) COND ( VAR_2 ) != null ( THEN THEN (  VAR_2 . METHOD_1 ( sb ) )  VAR_2 . METHOD_1 ( sb ) ) THEN THEN ( ELSE ELSE (  sb.append ( STRING_3 ) )  sb.append ( STRING_3 ) ) ELSE ELSE ) IF IF (  VAR_3 . METHOD_1 ( sb ) )  VAR_3 . METHOD_1 ( sb ) (  sb.append ( STRING_4 ) )  sb.append ( STRING_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static final ) MODIFIER public static final ( RETURN java.util.HashMap ) RETURN java.util.HashMap ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME in ) NAME in ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_4 . METHOD_2 ( ) ) INIT = TYPE_4 . METHOD_2 ( ) ) VAR VAR (  VAR_1 . METHOD_3 ( in , null ) )  VAR_1 . METHOD_3 ( in , null ) (  return ( ( java.util.HashMap ) ( TYPE_5 . METHOD_4 ( VAR_1 , new java.lang.String [ 1 ] ) ) ) ; )  return ( ( java.util.HashMap ) ( TYPE_5 . METHOD_4 ( VAR_1 , new java.lang.String [ 1 ] ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN char ) RETURN char ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_1 ) ) COND ! ( VAR_1 ) ( THEN THEN (  throw new TYPE_1 ( STRING_1 ) ; )  throw new TYPE_1 ( STRING_1 ) ; ) THEN THEN ) IF IF (  METHOD_2 ( i , VAR_2 ) )  METHOD_2 ( i , VAR_2 ) ( VAR VAR ( TYPE char ) TYPE char ( NAME x ) NAME x ( INIT = ( ( char ) ( TYPE_2 . METHOD_3 ( METHOD_4 ( i ) , ( ! ( VAR_3 ) ) ) ) ) ) INIT = ( ( char ) ( TYPE_2 . METHOD_3 ( METHOD_4 ( i ) , ( ! ( VAR_3 ) ) ) ) ) ) VAR VAR (  return x ; )  return x ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME listener ) NAME listener ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) ( IF IF ( COND listener == null ) COND listener == null ( THEN THEN (  throw new java.lang.NullPointerException ( STRING_1 ) ; )  throw new java.lang.NullPointerException ( STRING_1 ) ; ) THEN THEN ) IF IF ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME p ) NAME p ( INIT = METHOD_3 ( VAR_1 , listener ) ) INIT = METHOD_3 ( VAR_1 , listener ) ) VAR VAR (  VAR_2 . METHOD_4 ( p ) )  VAR_2 . METHOD_4 ( p ) (  VAR_3 . METHOD_1 ( VAR_4 , p ) )  VAR_3 . METHOD_1 ( VAR_4 , p ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_2 ( STRING_2 , e , VAR_5 ) ; )  throw new TYPE_2 ( STRING_2 , e , VAR_5 ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_1 ( VAR_1 , ( ( ( VAR_4 ) | ( VAR_5 ) ) | ( VAR_6 ) ) ) ) INIT = new TYPE_1 ( VAR_1 , ( ( ( VAR_4 ) | ( VAR_5 ) ) | ( VAR_6 ) ) ) ) VAR VAR (  VAR_3 . METHOD_2 ( new TYPE_4 [ ] { TYPE_5 . METHOD_3 ( ) } ) )  VAR_3 . METHOD_2 ( new TYPE_4 [ ] { TYPE_5 . METHOD_3 ( ) } ) (  VAR_3 . METHOD_4 ( VAR_2 ) )  VAR_3 . METHOD_4 ( VAR_2 ) (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME context ) NAME context ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) != null ) COND ( VAR_1 ) != null ( THEN THEN ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = context . METHOD_2 ( ) ) INIT = context . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND ( VAR_2 != null ) && ( VAR_2 != ( VAR_3 ) ) ) COND ( VAR_2 != null ) && ( VAR_2 != ( VAR_3 ) ) ( THEN THEN ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ( INIT = TYPE_3 . METHOD_3 ( VAR_4 . getName ( ) ) ) INIT = TYPE_3 . METHOD_3 ( VAR_4 . getName ( ) ) ) VAR VAR ( IF IF ( COND ! ( name . METHOD_4 ( VAR_1 ) ) ) COND ! ( name . METHOD_4 ( VAR_1 ) ) ( THEN THEN ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME location ) NAME location ( INIT = TYPE_4 . METHOD_5 ( VAR_4 ) ) INIT = TYPE_4 . METHOD_5 ( VAR_4 ) ) VAR VAR (  context . METHOD_6 ( VAR_5 , location , METHOD_7 ( name ) , null ) )  context . METHOD_6 ( VAR_5 , location , METHOD_7 ( name ) , null ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.lang.Class<?extendsTYPE_3>> ) TYPE java.util.List<java.lang.Class<?extendsTYPE_3>> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < java.lang.Class < ? extends TYPE_3 > > ( 1 ) ) INIT = new java.util.ArrayList < java.lang.Class < ? extends TYPE_3 > > ( 1 ) ) VAR VAR (  VAR_1 . METHOD_2 ( VAR_2 class ) )  VAR_1 . METHOD_2 ( VAR_2 class ) (  VAR_1 . METHOD_2 ( VAR_3 class ) )  VAR_1 . METHOD_2 ( VAR_3 class ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = null ) INIT = null ) VAR VAR (  VAR_4 = TYPE_4 . METHOD_3 ( VAR_5 class , VAR_1 ) )  VAR_4 = TYPE_4 . METHOD_3 ( VAR_5 class , VAR_1 ) ( VAR VAR ( TYPE java.io.File[] ) TYPE java.io.File[] ( NAME VAR_6 ) NAME VAR_6 ( INIT = VAR_4 . METHOD_4 ( ) ) INIT = VAR_4 . METHOD_4 ( ) ) VAR VAR (  VAR_4 . METHOD_5 ( VAR_6 ) )  VAR_4 . METHOD_5 ( VAR_6 ) (  VAR_4 . METHOD_6 ( VAR_7 ) )  VAR_4 . METHOD_6 ( VAR_7 ) (  return VAR_4 ; )  return VAR_4 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME c ) NAME c ( INIT = VAR_4 . METHOD_2 ( ) ) INIT = VAR_4 . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND ( c != null ) && ( c . METHOD_3 ( VAR_1 ) ) ) COND ( c != null ) && ( c . METHOD_3 ( VAR_1 ) ) ( THEN THEN ( VAR VAR ( TYPE android.content.Intent ) TYPE android.content.Intent ( NAME VAR_5 ) NAME VAR_5 ( INIT = METHOD_4 ( c , VAR_2 , VAR_3 ) ) INIT = METHOD_4 ( c , VAR_2 , VAR_3 ) ) VAR VAR (  METHOD_5 ( VAR_5 ) )  METHOD_5 ( VAR_5 ) (  return true ; )  return true ; ) THEN THEN ) IF IF (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SWITCH SWITCH ( NAME VAR_1 ) NAME VAR_1 ( CASE VAR_6 ( BLOCK BLOCK (  VAR_7 . METHOD_2 ( STRING_1 , VAR_2 , VAR_3 , java.lang.String.format ( VAR_4 , VAR_5 ) ) )  VAR_7 . METHOD_2 ( STRING_1 , VAR_2 , VAR_3 , java.lang.String.format ( VAR_4 , VAR_5 ) ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_6 ( CASE VAR_8 ( BLOCK BLOCK (  VAR_7 . METHOD_3 ( STRING_1 , VAR_2 , VAR_3 , java.lang.String.format ( VAR_4 , VAR_5 ) ) )  VAR_7 . METHOD_3 ( STRING_1 , VAR_2 , VAR_3 , java.lang.String.format ( VAR_4 , VAR_5 ) ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_8 ( CASE VAR_9 ( BLOCK BLOCK (  VAR_7 . error ( null , STRING_1 , VAR_2 , VAR_3 , java.lang.String.format ( VAR_4 , VAR_5 ) ) )  VAR_7 . error ( null , STRING_1 , VAR_2 , VAR_3 , java.lang.String.format ( VAR_4 , VAR_5 ) ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_9 ) SWITCH SWITCH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( STRING_1 , VAR_2 . METHOD_3 ( ) , VAR_3 ) ) INIT = METHOD_2 ( STRING_1 , VAR_2 . METHOD_3 ( ) , VAR_3 ) ) VAR VAR (  assertEquals ( VAR_4 , VAR_5 . METHOD_4 ( VAR_6 ) . METHOD_5 ( ) ) )  assertEquals ( VAR_4 , VAR_5 . METHOD_4 ( VAR_6 ) . METHOD_5 ( ) ) (  VAR_7 . METHOD_6 ( VAR_6 ) )  VAR_7 . METHOD_6 ( VAR_6 ) (  TYPE_2 . METHOD_7 ( VAR_8 ) )  TYPE_2 . METHOD_7 ( VAR_8 ) (  org.mockito.Mockito.verify ( VAR_3 . METHOD_8 ( ) , TYPE_3 . METHOD_9 ( ) ) . METHOD_6 ( org.mockito.Matchers.eq ( VAR_6 ) , org.mockito.Matchers . METHOD_10 ( ) ) )  org.mockito.Mockito.verify ( VAR_3 . METHOD_8 ( ) , TYPE_3 . METHOD_9 ( ) ) . METHOD_6 ( org.mockito.Matchers.eq ( VAR_6 ) , org.mockito.Matchers . METHOD_10 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME path ) NAME path ( INIT = METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ) INIT = METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ) VAR VAR ( IF IF ( COND ( ! ( path . METHOD_1 ( ) ) ) || ( path . METHOD_5 ( ) ) ) COND ( ! ( path . METHOD_1 ( ) ) ) || ( path . METHOD_5 ( ) ) ( THEN THEN (  throw new TYPE_2 ( VAR_1 . METHOD_6 ( ) ) ; )  throw new TYPE_2 ( VAR_1 . METHOD_6 ( ) ) ; ) THEN THEN ) IF IF (  VAR_1 . METHOD_7 ( ) )  VAR_1 . METHOD_7 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_2 . METHOD_2 ( ) ) INIT = VAR_2 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_2 . METHOD_3 ( ) ) INIT = VAR_2 . METHOD_3 ( ) ) VAR VAR (  VAR_5 . METHOD_4 ( VAR_3 ) )  VAR_5 . METHOD_4 ( VAR_3 ) (  VAR_6 . METHOD_4 ( VAR_4 ) )  VAR_6 . METHOD_4 ( VAR_4 ) ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  METHOD_5 ( ) )  METHOD_5 ( ) ) THEN THEN ( ELSE ELSE (  METHOD_6 ( ) )  METHOD_6 ( ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( this . METHOD_2 ( ) . METHOD_3 ( ) ) )  super . METHOD_1 ( this . METHOD_2 ( ) . METHOD_3 ( ) ) (  VAR_1 . METHOD_4 ( true , null ) )  VAR_1 . METHOD_4 ( true , null ) (  VAR_2 = this . VAR_1 )  VAR_2 = this . VAR_1 (  VAR_3 . METHOD_5 ( VAR_4 , new java.lang.String [ ] { } ) )  VAR_3 . METHOD_5 ( VAR_4 , new java.lang.String [ ] { } ) (  new TYPE_1 ( TAG ) . start ( ) )  new TYPE_1 ( TAG ) . start ( ) (  METHOD_6 ( ) )  METHOD_6 ( ) (  METHOD_7 ( STRING_1 ) )  METHOD_7 ( STRING_1 ) (  TYPE_2 . METHOD_8 ( 100 ) )  TYPE_2 . METHOD_8 ( 100 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME context ) NAME context ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_4 ( VAR_3 ) ) INIT = new TYPE_4 ( VAR_3 ) ) VAR VAR (  VAR_2 . METHOD_2 ( new java.lang.String [ ] { context . METHOD_3 ( VAR_4 ) } ) )  VAR_2 . METHOD_2 ( new java.lang.String [ ] { context . METHOD_3 ( VAR_4 ) } ) (  return new TYPE_1 ( new TYPE_5 [ ] { VAR_2 , VAR_1 } ) ; )  return new TYPE_1 ( new TYPE_5 [ ] { VAR_2 , VAR_1 } ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN ( IF IF ( COND ( ( VAR_3 ) == ( VAR_4 ) ) || ( ( VAR_3 ) == ( VAR_5 ) ) ) COND ( ( VAR_3 ) == ( VAR_4 ) ) || ( ( VAR_3 ) == ( VAR_5 ) ) ( THEN THEN (  return 0 ; )  return 0 ; ) THEN THEN ) IF IF ) THEN THEN ( ELSE ELSE ( IF IF ( COND ( ( VAR_3 ) == ( VAR_6 ) ) || ( ( VAR_3 ) == ( VAR_7 ) ) ) COND ( ( VAR_3 ) == ( VAR_6 ) ) || ( ( VAR_3 ) == ( VAR_7 ) ) ( THEN THEN (  return 0 ; )  return 0 ; ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF (  throw VAR_2 . METHOD_2 ( ) ; )  throw VAR_2 . METHOD_2 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( IF IF ( COND VAR_2 == null ) COND VAR_2 == null ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ( INIT = false ) INIT = false ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( IN VAR_2 . METHOD_3 ( ) ) IN VAR_2 . METHOD_3 ( ) ( BLOCK BLOCK ( IF IF ( COND VAR_4 . METHOD_4 ( ) . equals ( VAR_1 . METHOD_4 ( ) ) ) COND VAR_4 . METHOD_4 ( ) . equals ( VAR_1 . METHOD_4 ( ) ) ( THEN THEN (  VAR_3 = true )  VAR_3 = true ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE android.renderscript.Allocation ) TYPE android.renderscript.Allocation ( NAME VAR_1 ) NAME VAR_1 ( INIT = android.renderscript.Allocation.createSized ( mRS , TYPE_1 . METHOD_2 ( mRS ) , android.renderscript.cts.INPUTSIZE ) ) INIT = android.renderscript.Allocation.createSized ( mRS , TYPE_1 . METHOD_2 ( mRS ) , android.renderscript.cts.INPUTSIZE ) ) VAR VAR (  n = new int [ ( INPUTSIZE ) * 2 ] )  n = new int [ ( INPUTSIZE ) * 2 ] (  TYPE_2 . METHOD_3 ( INT_1 , INT_2 , 1 , n ) )  TYPE_2 . METHOD_3 ( INT_1 , INT_2 , 1 , n ) (  VAR_1 . METHOD_4 ( n ) )  VAR_1 . METHOD_4 ( n ) (  VAR_2 . METHOD_5 ( VAR_1 ) )  VAR_2 . METHOD_5 ( VAR_1 ) (  METHOD_6 ( INT_1 , 16 ) )  METHOD_6 ( INT_1 , 16 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . i ( VAR_1 , STRING_1 ) )  TYPE_1 . i ( VAR_1 , STRING_1 ) ( IF IF ( COND VAR_2 . METHOD_2 ( ) ) COND VAR_2 . METHOD_2 ( ) ( THEN THEN (  VAR_3 . METHOD_3 ( VAR_4 , VAR_5 ) )  VAR_3 . METHOD_3 ( VAR_4 , VAR_5 ) ( IF IF ( COND ( VAR_6 ) == ( VAR_7 ) ) COND ( VAR_6 ) == ( VAR_7 ) ( THEN THEN (  TYPE_1 . i ( VAR_1 , ( STRING_2 + STRING_3 ) ) )  TYPE_1 . i ( VAR_1 , ( STRING_2 + STRING_3 ) ) (  VAR_3 . METHOD_4 ( VAR_8 ) )  VAR_3 . METHOD_4 ( VAR_8 ) ) THEN THEN ) IF IF (  VAR_3 . METHOD_4 ( VAR_9 ) )  VAR_3 . METHOD_4 ( VAR_9 ) (  VAR_2 . METHOD_5 ( VAR_10 ) )  VAR_2 . METHOD_5 ( VAR_10 ) ) THEN THEN ( ELSE ELSE (  TYPE_1 . i ( VAR_1 , STRING_4 ) )  TYPE_1 . i ( VAR_1 , STRING_4 ) ) ELSE ELSE ) IF IF (  VAR_2 . METHOD_6 ( ) )  VAR_2 . METHOD_6 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN java.util.List<TYPE_1<TYPE_2>> ) RETURN java.util.List<TYPE_1<TYPE_2>> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1<TYPE_2>> ) TYPE java.util.List<TYPE_1<TYPE_2>> ( NAME VAR_1 ) NAME VAR_1 ( INIT = super . METHOD_1 ( ) ) INIT = super . METHOD_1 ( ) ) VAR VAR (  < TYPE_2 > VAR_2 = TYPE_3 . not ( new TYPE_4 ( VAR_3 class ) ) )  < TYPE_2 > VAR_2 = TYPE_3 . not ( new TYPE_4 ( VAR_3 class ) ) (  VAR_1 . METHOD_2 ( VAR_2 ) )  VAR_1 . METHOD_2 ( VAR_2 ) (  VAR_1 . METHOD_2 ( METHOD_3 ( ) ) )  VAR_1 . METHOD_2 ( METHOD_3 ( ) ) ( IF IF ( COND ! ( VAR_4 ) ) COND ! ( VAR_4 ) ( THEN THEN (  < TYPE_2 > VAR_5 = TYPE_3 . not ( new TYPE_4 ( VAR_6 class ) ) )  < TYPE_2 > VAR_5 = TYPE_3 . not ( new TYPE_4 ( VAR_6 class ) ) (  VAR_1 . METHOD_2 ( VAR_5 ) )  VAR_1 . METHOD_2 ( VAR_5 ) ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME context ) NAME context ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND ( VAR_2 != null ) && ( VAR_2 . METHOD_3 ( ) . equals ( VAR_3 ) ) ) COND ( VAR_2 != null ) && ( VAR_2 . METHOD_3 ( ) . equals ( VAR_3 ) ) ( THEN THEN (  context . METHOD_4 ( VAR_4 , VAR_2 , context . METHOD_5 ( VAR_2 ) , STRING_1 , null ) )  context . METHOD_4 ( VAR_4 , VAR_2 , context . METHOD_5 ( VAR_2 ) , STRING_1 , null ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME toString ) NAME toString ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME sb ) NAME sb ( INIT = new TYPE_1 ( 100 ) ) INIT = new TYPE_1 ( 100 ) ) VAR VAR (  sb.append ( METHOD_1 ( ) . getName ( ) ) )  sb.append ( METHOD_1 ( ) . getName ( ) ) (  sb.append ( CHAR_1 ) )  sb.append ( CHAR_1 ) (  sb.append ( VAR_1 . METHOD_2 ( ) ) )  sb.append ( VAR_1 . METHOD_2 ( ) ) (  sb.append ( CHAR_2 ) )  sb.append ( CHAR_2 ) (  return sb . toString ( ) ; )  return sb . toString ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME x ) NAME x ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME info ) NAME info ( INIT = METHOD_2 ( x ) ) INIT = METHOD_2 ( x ) ) VAR VAR (  METHOD_3 ( new TYPE_4 ( info , METHOD_4 ( info , VAR_2 ) ) ) )  METHOD_3 ( new TYPE_4 ( info , METHOD_4 ( info , VAR_2 ) ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Throwable ) TYPE java.lang.Throwable ( NAME e ) NAME e ( BLOCK BLOCK (  throw METHOD_5 ( x , e ) ; )  throw METHOD_5 ( x , e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = ( VAR_1 . size ( ) ) - 1 ) INIT = ( VAR_1 . size ( ) ) - 1 ) VAR VAR ) INIT INIT ( COND i >= 0 ) COND i >= 0 ( UPDATE UPDATE (  i -- )  i -- ) UPDATE UPDATE ( BLOCK BLOCK (  android.util.Log.v ( VAR_2 . TAG , ( ( ( STRING_1 + i ) + STRING_2 ) + ( VAR_1 . get ( i ) . VAR_3 ) ) ) )  android.util.Log.v ( VAR_2 . TAG , ( ( ( STRING_1 + i ) + STRING_2 ) + ( VAR_1 . get ( i ) . VAR_3 ) ) ) ) BLOCK BLOCK ) FOR FOR ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_2 ( VAR_1 , VAR_2 ) ) INIT = METHOD_2 ( VAR_1 , VAR_2 ) ) VAR VAR ( IF IF ( COND VAR_3 == null ) COND VAR_3 == null ( THEN THEN (  android.util.Log.d ( TYPE_2 . TAG , ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + VAR_2 ) ) )  android.util.Log.d ( TYPE_2 . TAG , ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + VAR_2 ) ) (  return - 1 ; )  return - 1 ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_3 ( VAR_3 ) ) INIT = METHOD_3 ( VAR_3 ) ) VAR VAR ( IF IF ( COND VAR_4 != null ) COND VAR_4 != null ( THEN THEN (  android.util.Log.d ( TYPE_2 . TAG , ( ( ( STRING_3 + VAR_1 ) + STRING_2 ) + VAR_2 ) ) )  android.util.Log.d ( TYPE_2 . TAG , ( ( ( STRING_3 + VAR_1 ) + STRING_2 ) + VAR_2 ) ) (  METHOD_4 ( VAR_4 ) )  METHOD_4 ( VAR_4 ) ) THEN THEN ) IF IF (  return 1 ; )  return 1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1[] ) TYPE TYPE_1[] ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 [ 0 ] ) INIT = new TYPE_1 [ 0 ] ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME request ) NAME request ( INIT = new TYPE_3 ( ) . METHOD_2 ( VAR_1 ) . METHOD_3 ( new TYPE_4 ( ) . METHOD_4 ( VAR_2 ) ) . build ( ) ) INIT = new TYPE_3 ( ) . METHOD_2 ( VAR_1 ) . METHOD_3 ( new TYPE_4 ( ) . METHOD_4 ( VAR_2 ) ) . build ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME result ) NAME result ( INIT = METHOD_5 ( VAR_3 , request ) ) INIT = METHOD_5 ( VAR_3 , request ) ) VAR VAR (  TYPE_6 . METHOD_6 ( result . METHOD_7 ( ) ) )  TYPE_6 . METHOD_6 ( result . METHOD_7 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_3 = VAR_4 )  VAR_3 = VAR_4 (  VAR_5 = VAR_6 )  VAR_5 = VAR_6 (  VAR_7 = VAR_8 )  VAR_7 = VAR_8 (  VAR_9 = VAR_10 )  VAR_9 = VAR_10 (  VAR_11 = VAR_12 )  VAR_11 = VAR_12 (  VAR_13 = VAR_14 )  VAR_13 = VAR_14 (  VAR_15 = VAR_16 )  VAR_15 = VAR_16 (  VAR_17 = VAR_18 )  VAR_17 = VAR_18 (  VAR_19 = VAR_20 )  VAR_19 = VAR_20 (  VAR_21 = VAR_22 )  VAR_21 = VAR_22 (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE android.os.Message ) TYPE android.os.Message ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SWITCH SWITCH ( NAME VAR_2 ) NAME VAR_2 ( CASE VAR_3 ( BLOCK BLOCK (  VAR_4 . METHOD_2 ( this ) )  VAR_4 . METHOD_2 ( this ) ) BLOCK BLOCK ) CASE VAR_3 ( CASE VAR_5 ( BLOCK BLOCK (  transitionTo ( VAR_6 ) )  transitionTo ( VAR_6 ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_5 ( CASE VAR_7 ( BLOCK BLOCK (  METHOD_3 ( ) )  METHOD_3 ( ) (  transitionTo ( VAR_8 ) )  transitionTo ( VAR_8 ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_7 ( CASE VAR_9 ( BLOCK BLOCK (  VAR_10 . METHOD_4 ( VAR_11 , this ) )  VAR_10 . METHOD_4 ( VAR_11 , this ) (  VAR_10 . METHOD_5 ( VAR_11 , this ) . METHOD_6 ( ) )  VAR_10 . METHOD_5 ( VAR_11 , this ) . METHOD_6 ( ) (  transitionTo ( VAR_8 ) )  transitionTo ( VAR_8 ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_9 ) SWITCH SWITCH (  return VAR_12 ; )  return VAR_12 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  throw new java.lang.NullPointerException ( STRING_1 ) ; )  throw new java.lang.NullPointerException ( STRING_1 ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_4 . METHOD_2 ( VAR_2 ) ) INIT = TYPE_4 . METHOD_2 ( VAR_2 ) ) VAR VAR ( IF IF ( COND VAR_3 == null ) COND VAR_3 == null ( THEN THEN (  throw new TYPE_3 ( ( STRING_2 + VAR_2 ) ) ; )  throw new TYPE_3 ( ( STRING_2 + VAR_2 ) ) ; ) THEN THEN ) IF IF (  return TYPE_5 . METHOD_1 ( VAR_1 , VAR_3 ) ; )  return TYPE_5 . METHOD_1 ( VAR_1 , VAR_3 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME log ) NAME log ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND METHOD_2 ( log , false ) ) COND METHOD_2 ( log , false ) ( THEN THEN ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK (  METHOD_4 ( VAR_2 , ( STRING_1 + log ) ) )  METHOD_4 ( VAR_2 , ( STRING_1 + log ) ) ) BLOCK BLOCK ) METHOD METHOD (  METHOD_3 ( VAR_1 , new java.lang.Runnable ( ) { public void run ( ) { METHOD_4 ( VAR_2 , ( STRING_1 + log ) ) ; } } ) )  METHOD_3 ( VAR_1 , new java.lang.Runnable ( ) { public void run ( ) { METHOD_4 ( VAR_2 , ( STRING_1 + log ) ) ; } } ) ( IF IF ( COND ( VAR_3 ) != null ) COND ( VAR_3 ) != null ( THEN THEN (  VAR_3 . METHOD_5 ( STRING_2 , log ) )  VAR_3 . METHOD_5 ( STRING_2 , log ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_2 . d ( this , STRING_1 , VAR_1 ) )  TYPE_2 . d ( this , STRING_1 , VAR_1 ) ( IF IF ( COND TYPE_3 . equals ( VAR_2 , VAR_1 ) ) COND TYPE_3 . equals ( VAR_2 , VAR_1 ) ( THEN THEN (  VAR_3 . METHOD_2 ( VAR_4 , VAR_5 ) )  VAR_3 . METHOD_2 ( VAR_4 , VAR_5 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_6 ) NAME VAR_6 ( INIT = null ) INIT = null ) VAR VAR ( IF IF ( COND ( VAR_5 ) != null ) COND ( VAR_5 ) != null ( THEN THEN (  VAR_6 = VAR_7 . METHOD_3 ( ) )  VAR_6 = VAR_7 . METHOD_3 ( ) ) THEN THEN ) IF IF (  METHOD_4 ( VAR_6 ) )  METHOD_4 ( VAR_6 ) (  METHOD_5 ( ) )  METHOD_5 ( ) ( IF IF ( COND ( VAR_5 ) != null ) COND ( VAR_5 ) != null ( THEN THEN (  METHOD_6 ( VAR_5 ) )  METHOD_6 ( VAR_5 ) (  VAR_5 = null )  VAR_5 = null ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME offset ) NAME offset ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 [ offset ] = ( ( byte ) ( i > > 16 ) ) )  VAR_1 [ offset ] = ( ( byte ) ( i > > 16 ) ) (  VAR_1 [ ( offset + 1 ) ] = ( ( byte ) ( i > > 8 ) ) )  VAR_1 [ ( offset + 1 ) ] = ( ( byte ) ( i > > 8 ) ) (  VAR_1 [ ( offset + 2 ) ] = ( ( byte ) ( i ) ) )  VAR_1 [ ( offset + 2 ) ] = ( ( byte ) ( i ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND METHOD_2 ( ) ) COND METHOD_2 ( ) ( THEN THEN (  METHOD_3 ( ) )  METHOD_3 ( ) ) THEN THEN ) IF IF (  server = METHOD_4 ( VAR_1 , VAR_2 ) )  server = METHOD_4 ( VAR_1 , VAR_2 ) ( TRY TRY ( BLOCK BLOCK (  out = new TYPE_2 ( new TYPE_3 ( server . METHOD_5 ( ) ) , true , VAR_3 ) )  out = new TYPE_2 ( new TYPE_3 ( server . METHOD_5 ( ) ) , true , VAR_3 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_5 ( ( ( VAR_3 ) + STRING_1 ) ) ; )  throw new TYPE_5 ( ( ( VAR_3 ) + STRING_1 ) ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  in = new TYPE_6 ( server . METHOD_6 ( ) ) )  in = new TYPE_6 ( server . METHOD_6 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.Class<?> ) TYPE java.lang.Class<?> ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE TYPE_3<java.lang.String> ) TYPE TYPE_3<java.lang.String> ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_6 ) NAME VAR_6 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_7 ) NAME VAR_7 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND new TYPE_5 ( VAR_3 ) . METHOD_2 ( true , void . class , STRING_1 , java.lang.String [ ] . class ) ) COND new TYPE_5 ( VAR_3 ) . METHOD_2 ( true , void . class , STRING_1 , java.lang.String [ ] . class ) ( THEN THEN (  return new TYPE_6 ( VAR_1 , VAR_3 ) ; )  return new TYPE_6 ( VAR_1 , VAR_3 ) ; ) THEN THEN ( ELSE ELSE (  return null ; )  return null ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . when ( VAR_1 . METHOD_2 ( org.mockito.Matchers . METHOD_3 ( ) ) ) . thenReturn ( false ) )  TYPE_1 . when ( VAR_1 . METHOD_2 ( org.mockito.Matchers . METHOD_3 ( ) ) ) . thenReturn ( false ) (  TYPE_1 . when ( VAR_2 . METHOD_4 ( TYPE_1 . METHOD_5 ( VAR_3 class ) ) ) . thenReturn ( TYPE_2 . METHOD_6 ( ) ) )  TYPE_1 . when ( VAR_2 . METHOD_4 ( TYPE_1 . METHOD_5 ( VAR_3 class ) ) ) . thenReturn ( TYPE_2 . METHOD_6 ( ) ) (  VAR_4 . METHOD_7 ( TYPE_3 . METHOD_8 ( VAR_5 , VAR_6 , VAR_7 ) , null , null , false , true , null ) )  VAR_4 . METHOD_7 ( TYPE_3 . METHOD_8 ( VAR_5 , VAR_6 , VAR_7 ) , null , null , false , true , null ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME res ) NAME res ( INIT = new java.lang.String [ ] { STRING_1 , STRING_2 , STRING_1 , STRING_1 } ) INIT = new java.lang.String [ ] { STRING_1 , STRING_2 , STRING_1 , STRING_1 } ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( STRING_3 ) ) INIT = TYPE_1 . METHOD_2 ( STRING_3 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_3 ( STRING_4 ) ) INIT = VAR_1 . METHOD_3 ( STRING_4 ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = 0 ) INIT = 0 ) VAR VAR ( FOR FOR ( COND VAR_2 . METHOD_4 ( ) ) COND VAR_2 . METHOD_4 ( ) ( UPDATE UPDATE (  VAR_3 ++ )  VAR_3 ++ ) UPDATE UPDATE ( BLOCK BLOCK (  assertEquals ( res [ VAR_3 ] , VAR_2 . METHOD_5 ( ) ) )  assertEquals ( res [ VAR_3 ] , VAR_2 . METHOD_5 ( ) ) ) BLOCK BLOCK ) FOR FOR ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.ArrayList ) TYPE java.util.ArrayList ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList ( 5 ) ) INIT = new java.util.ArrayList ( 5 ) ) VAR VAR (  assertEquals ( STRING_1 , 0 , VAR_1 . size ( ) ) )  assertEquals ( STRING_1 , 0 , VAR_1 . size ( ) ) ( TRY TRY ( BLOCK BLOCK (  new java.util.ArrayList ( ( - 10 ) ) )  new java.util.ArrayList ( ( - 10 ) ) (  fail ( STRING_2 ) )  fail ( STRING_2 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.IllegalArgumentException ) TYPE java.lang.IllegalArgumentException ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR (  VAR_1 = METHOD_2 ( true , STRING_1 ) )  VAR_1 = METHOD_2 ( true , STRING_1 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( VAR_1 ) ) INIT = new TYPE_1 ( VAR_1 ) ) VAR VAR (  METHOD_3 ( VAR_2 , VAR_3 , STRING_2 ) )  METHOD_3 ( VAR_2 , VAR_3 , STRING_2 ) (  METHOD_3 ( VAR_2 , VAR_4 , STRING_3 ) )  METHOD_3 ( VAR_2 , VAR_4 , STRING_3 ) (  METHOD_3 ( VAR_2 , VAR_5 , STRING_4 ) )  METHOD_3 ( VAR_2 , VAR_5 , STRING_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Set<java.io.File> ) TYPE java.util.Set<java.io.File> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( new java.io.File ( STRING_1 ) ) ) INIT = TYPE_1 . METHOD_2 ( new java.io.File ( STRING_1 ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.Set<java.io.File> ) TYPE java.util.Set<java.io.File> ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_1 . METHOD_3 ( VAR_3 ) ) INIT = TYPE_1 . METHOD_3 ( VAR_3 ) ) VAR VAR (  VAR_1 . METHOD_4 ( VAR_2 ) )  VAR_1 . METHOD_4 ( VAR_2 ) (  assertTrue ( ( STRING_2 + ( VAR_1 . toString ( ) ) ) , VAR_1 . METHOD_5 ( ) ) )  assertTrue ( ( STRING_2 + ( VAR_1 . toString ( ) ) ) , VAR_1 . METHOD_5 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME value ) NAME value ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  throw new TYPE_1 ( ) ; )  throw new TYPE_1 ( ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = INT_1 ) INIT = INT_1 ) VAR VAR (  return ( ( ( value < < ( VAR_1 | INT_2 ) ) + ( value > > ( VAR_1 ^ INT_3 ) ) ) + ( value > > > ( VAR_1 + INT_4 ) ) ) + ( value < < ( VAR_1 - VAR_3 ) ) ; )  return ( ( ( value < < ( VAR_1 | INT_2 ) ) + ( value > > ( VAR_1 ^ INT_3 ) ) ) + ( value > > > ( VAR_1 + INT_4 ) ) ) + ( value < < ( VAR_1 - VAR_3 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < ( VAR_1 ) ) COND i < ( VAR_1 ) ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK ( IF IF ( COND ( VAR_2 [ i ] ) != ( VAR_3 [ i ] . get ( ) ) ) COND ( VAR_2 [ i ] ) != ( VAR_3 [ i ] . get ( ) ) ( THEN THEN (  VAR_4 . println ( ( ( ( ( ( STRING_1 + i ) + STRING_2 ) + ( VAR_2 [ i ] ) ) + STRING_3 ) + ( VAR_3 [ i ] . get ( ) ) ) ) )  VAR_4 . println ( ( ( ( ( ( STRING_1 + i ) + STRING_2 ) + ( VAR_2 [ i ] ) ) + STRING_3 ) + ( VAR_3 [ i ] . get ( ) ) ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR FOR ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public final ) MODIFIER public final ( RETURN void ) RETURN void ( NAME verify ) NAME verify ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME key ) NAME key ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_7 . METHOD_1 ( c . METHOD_2 ( ) ) ) INIT = TYPE_7 . METHOD_1 ( c . METHOD_2 ( ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_8 ) TYPE TYPE_8 ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_8 . METHOD_3 ( VAR_2 , VAR_1 ) ) INIT = TYPE_8 . METHOD_3 ( VAR_2 , VAR_1 ) ) VAR VAR (  METHOD_4 ( key , VAR_3 ) )  METHOD_4 ( key , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME index ) NAME index ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_4 ) COND VAR_4 ( THEN THEN (  TYPE_2 . d ( VAR_5 . TAG , ( ( ( ( ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + index ) + STRING_3 ) + VAR_2 ) + STRING_4 ) + VAR_3 ) ) )  TYPE_2 . d ( VAR_5 . TAG , ( ( ( ( ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + index ) + STRING_3 ) + VAR_2 ) + STRING_4 ) + VAR_3 ) ) ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_6 ) NAME VAR_6 ( INIT = new TYPE_3 ( mContext , VAR_1 , null ) ) INIT = new TYPE_3 ( mContext , VAR_1 , null ) ) VAR VAR (  VAR_6 . set ( VAR_3 ) )  VAR_6 . set ( VAR_3 ) (  VAR_7 . METHOD_2 ( VAR_6 , VAR_2 , new TYPE_4 ( VAR_8 , VAR_8 ) ) )  VAR_7 . METHOD_2 ( VAR_6 , VAR_2 , new TYPE_4 ( VAR_8 , VAR_8 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME element ) NAME element ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = element . METHOD_2 ( ) ) INIT = element . METHOD_2 ( ) ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME j ) NAME j ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND j < ( VAR_1 . METHOD_3 ( ) ) ) COND j < ( VAR_1 . METHOD_3 ( ) ) ( UPDATE UPDATE (  j ++ )  j ++ ) UPDATE UPDATE ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . item ( j ) ) INIT = VAR_1 . item ( j ) ) VAR VAR ( IF IF ( COND ( VAR_2 . METHOD_4 ( ) ) == ( VAR_3 ) ) COND ( VAR_2 . METHOD_4 ( ) ) == ( VAR_3 ) ( THEN THEN (  return VAR_2 . METHOD_5 ( ) . METHOD_6 ( ) ; )  return VAR_2 . METHOD_5 ( ) . METHOD_6 ( ) ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR FOR (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME state ) NAME state ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return new TYPE_1 ( state , false , VAR_2 , new TYPE_2 ( VAR_3 ) , null , null , null , null , null , false , false , false , false , false , false , false , 0 , false , false , false , true , VAR_4 , false , VAR_1 ) ; )  return new TYPE_1 ( state , false , VAR_2 , new TYPE_2 ( VAR_3 ) , null , null , null , null , null , false , false , false , false , false , false , false , 0 , false , false , false , true , VAR_4 , false , VAR_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME version ) NAME version ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_6 ) == false ) COND ( VAR_6 ) == false ( THEN THEN (  throw new java.lang.RuntimeException ( ( ( VAR_7 . TAG ) + STRING_1 ) ) ; )  throw new java.lang.RuntimeException ( ( ( VAR_7 . TAG ) + STRING_1 ) ) ; ) THEN THEN ) IF IF (  return METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , version , VAR_4 , VAR_5 ) ; )  return METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , version , VAR_4 , VAR_5 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return ( ( ( ( ! ( VAR_1 . METHOD_2 ( STRING_1 ) ) ) && ( ! ( VAR_1 . METHOD_2 ( STRING_2 ) ) ) ) && ( ! ( VAR_1 . METHOD_2 ( STRING_3 ) ) ) ) && ( ! ( VAR_1 . METHOD_2 ( STRING_4 ) ) ) ) && ( ! ( VAR_1 . METHOD_3 ( STRING_5 ) ) ) ; )  return ( ( ( ( ! ( VAR_1 . METHOD_2 ( STRING_1 ) ) ) && ( ! ( VAR_1 . METHOD_2 ( STRING_2 ) ) ) ) && ( ! ( VAR_1 . METHOD_2 ( STRING_3 ) ) ) ) && ( ! ( VAR_1 . METHOD_2 ( STRING_4 ) ) ) ) && ( ! ( VAR_1 . METHOD_3 ( STRING_5 ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME expected ) NAME expected ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) INIT = TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) VAR VAR (  org.junit.Assert.assertEquals ( expected . length , VAR_2 . length ) )  org.junit.Assert.assertEquals ( expected . length , VAR_2 . length ) ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < ( expected . length ) ) COND i < ( expected . length ) ( UPDATE UPDATE (  ++ i )  ++ i ) UPDATE UPDATE ( BLOCK BLOCK (  org.junit.Assert.assertEquals ( ( STRING_1 + i ) , expected [ i ] , VAR_2 [ i ] ) )  org.junit.Assert.assertEquals ( ( STRING_1 + i ) , expected [ i ] , VAR_2 [ i ] ) ) BLOCK BLOCK ) FOR FOR ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME context ) NAME context ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME msg ) NAME msg ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME pm ) NAME pm ( INIT = context . METHOD_2 ( ) ) INIT = context . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ( INIT = pm . METHOD_3 ( context . METHOD_4 ( ) , 0 ) ) INIT = pm . METHOD_3 ( context . METHOD_4 ( ) , 0 ) ) VAR VAR (  msg = STRING_2 )  msg = STRING_2 ( IF IF ( COND ( VAR_2 ) != null ) COND ( VAR_2 ) != null ( THEN THEN (  msg = VAR_2 )  msg = VAR_2 ) THEN THEN ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME e ) NAME e ( BLOCK BLOCK (  TYPE_5 . d ( VAR_3 . TAG , msg ) )  TYPE_5 . d ( VAR_3 . TAG , msg ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  return msg ; )  return msg ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME key ) NAME key ( INIT = ( ( ( VAR_1 + STRING_1 ) + VAR_2 ) + STRING_1 ) + VAR_3 ) INIT = ( ( ( VAR_1 + STRING_1 ) + VAR_2 ) + STRING_1 ) + VAR_3 ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_5 . get ( key ) ) INIT = TYPE_5 . get ( key ) ) VAR VAR ( IF IF ( COND VAR_4 == null ) COND VAR_4 == null ( THEN THEN (  VAR_4 = TYPE_6 . METHOD_2 ( new TYPE_7 ( VAR_1 ) , null , VAR_2 , VAR_3 ) )  VAR_4 = TYPE_6 . METHOD_2 ( new TYPE_7 ( VAR_1 ) , null , VAR_2 , VAR_3 ) (  TYPE_5 . METHOD_3 ( key , VAR_4 ) )  TYPE_5 . METHOD_3 ( key , VAR_4 ) ) THEN THEN ) IF IF (  return VAR_4 ; )  return VAR_4 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE short ) TYPE short ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME status ) NAME status ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  android.util.Log.v ( TYPE_2 . TAG , ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + ( TYPE_2 . METHOD_2 ( status ) ) ) ) )  android.util.Log.v ( TYPE_2 . TAG , ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + ( TYPE_2 . METHOD_2 ( status ) ) ) ) ) THEN THEN ) IF IF (  VAR_3 . METHOD_3 ( VAR_1 , status . status , true ) )  VAR_3 . METHOD_3 ( VAR_1 , status . status , true ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 == ( VAR_4 ) ) && ( VAR_2 >= 0 ) ) COND ( VAR_1 == ( VAR_4 ) ) && ( VAR_2 >= 0 ) ( THEN THEN ( IF IF ( COND VAR_3 == ( VAR_5 ) ) COND VAR_3 == ( VAR_5 ) ( THEN THEN ( IF IF ( COND VAR_2 <= ( VAR_6 ) ) COND VAR_2 <= ( VAR_6 ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ) THEN THEN ( ELSE ELSE ( IF IF ( COND ( VAR_3 < ( VAR_5 ) ) && ( VAR_3 >= ( VAR_7 ) ) ) COND ( VAR_3 < ( VAR_5 ) ) && ( VAR_3 >= ( VAR_7 ) ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ) THEN THEN ) IF IF (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_2 . d ( STRING_1 , STRING_2 ) )  TYPE_2 . d ( STRING_1 , STRING_2 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = null ) INIT = null ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_1 = TYPE_1 . METHOD_2 ( TYPE_3 . METHOD_3 ( ) ) )  VAR_1 = TYPE_1 . METHOD_2 ( TYPE_3 . METHOD_3 ( ) ) (  VAR_1 . METHOD_4 ( ) . METHOD_5 ( true ) )  VAR_1 . METHOD_4 ( ) . METHOD_5 ( true ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( VAR_2 . METHOD_2 ( ) , VAR_3 . getName ( ) , TYPE_2 . METHOD_3 ( ) . METHOD_4 ( VAR_3 . METHOD_5 ( ) ) , VAR_4 . METHOD_6 ( ) ) ) INIT = new TYPE_1 ( VAR_2 . METHOD_2 ( ) , VAR_3 . getName ( ) , TYPE_2 . METHOD_3 ( ) . METHOD_4 ( VAR_3 . METHOD_5 ( ) ) , VAR_4 . METHOD_6 ( ) ) ) VAR VAR ( IF IF ( COND ( VAR_1 . METHOD_7 ( ) ) == ( VAR_5 ) ) COND ( VAR_1 . METHOD_7 ( ) ) == ( VAR_5 ) ( THEN THEN ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME config ) NAME config ( INIT = new TYPE_3 ( ) ) INIT = new TYPE_3 ( ) ) VAR VAR (  VAR_1 . METHOD_8 ( config ) )  VAR_1 . METHOD_8 ( config ) (  METHOD_9 ( config ) )  METHOD_9 ( config ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) == null ) COND ( VAR_1 ) == null ( THEN THEN (  throw new TYPE_2 ( STRING_1 ) ; )  throw new TYPE_2 ( STRING_1 ) ; ) THEN THEN ) IF IF ( TRY TRY ( BLOCK BLOCK (  VAR_1 . METHOD_1 ( VAR_2 , VAR_3 , VAR_4 . METHOD_2 ( ) ) )  VAR_1 . METHOD_1 ( VAR_2 , VAR_3 , VAR_4 . METHOD_2 ( ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK (  android.util.Log.w ( VAR_5 , STRING_2 ) )  android.util.Log.w ( VAR_5 , STRING_2 ) (  VAR_1 = null )  VAR_1 = null (  throw new TYPE_1 ( VAR_6 ) ; )  throw new TYPE_1 ( VAR_6 ) ; ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME e ) NAME e ( BLOCK BLOCK (  android.util.Log.w ( VAR_5 , ( STRING_3 + e ) ) )  android.util.Log.w ( VAR_5 , ( STRING_3 + e ) ) (  throw new TYPE_1 ( VAR_7 ) ; )  throw new TYPE_1 ( VAR_7 ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 . METHOD_2 ( VAR_1 ) ) INIT = VAR_4 . METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_3 == null ) COND VAR_3 == null ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME path ) NAME path ( INIT = TYPE_2 . METHOD_2 ( VAR_2 ) ) INIT = TYPE_2 . METHOD_2 ( VAR_2 ) ) VAR VAR ( IF IF ( COND path == null ) COND path == null ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( IF IF ( COND VAR_5 . METHOD_3 ( ) ) COND VAR_5 . METHOD_3 ( ) ( THEN THEN (  path . METHOD_4 ( ) )  path . METHOD_4 ( ) (  return false ; )  return false ; ) THEN THEN ) IF IF (  path . METHOD_5 ( VAR_5 . METHOD_6 ( new TYPE_3 ( ) ) ) )  path . METHOD_5 ( VAR_5 . METHOD_6 ( new TYPE_3 ( ) ) ) (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE int[] ) TYPE int[] ( NAME VAR_1 ) NAME VAR_1 ( INIT = new int [ ] { VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 , VAR_8 , VAR_9 , VAR_10 } ) INIT = new int [ ] { VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 , VAR_8 , VAR_9 , VAR_10 } ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < ( VAR_1 . length ) ) COND i < ( VAR_1 . length ) ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  new TYPE_1 ( ) . METHOD_2 ( VAR_1 [ i ] , STRING_1 ) )  new TYPE_1 ( ) . METHOD_2 ( VAR_1 [ i ] , STRING_1 ) (  fail ( ( STRING_2 + ( VAR_1 [ i ] ) ) ) )  fail ( ( STRING_2 + ( VAR_1 [ i ] ) ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME expected ) NAME expected ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) FOR FOR ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME pkg ) NAME pkg ( INIT = super . METHOD_1 ( ) ) INIT = super . METHOD_1 ( ) ) VAR VAR ( IF IF ( COND pkg == null ) COND pkg == null ( THEN THEN ( TRY TRY ( BLOCK BLOCK (  pkg = TYPE_2 . METHOD_2 ( null , METHOD_3 ( ) , 0 , null , STRING_1 , null , TYPE_3 . METHOD_4 ( ) , TYPE_4 . METHOD_5 ( ) , METHOD_6 ( ) . METHOD_7 ( ) ) )  pkg = TYPE_2 . METHOD_2 ( null , METHOD_3 ( ) , 0 , null , STRING_1 , null , TYPE_3 . METHOD_4 ( ) , TYPE_4 . METHOD_5 ( ) , METHOD_6 ( ) . METHOD_7 ( ) ) (  METHOD_8 ( pkg ) )  METHOD_8 ( pkg ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ( BLOCK BLOCK (  METHOD_9 ( STRING_2 , e.toString ( ) ) )  METHOD_9 ( STRING_2 , e.toString ( ) ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) THEN THEN ) IF IF (  return pkg ; )  return pkg ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN float ) RETURN float ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE float ) TYPE float ( NAME a ) NAME a ) VAR VAR ( VAR VAR ( TYPE float ) TYPE float ( NAME b ) NAME b ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND a != a ) COND a != a ( THEN THEN (  return a ; )  return a ; ) THEN THEN ) IF IF ( IF IF ( COND ( ( a == FLOAT_1 ) && ( b == FLOAT_1 ) ) && ( ( TYPE_1 . METHOD_2 ( a ) ) == ( VAR_1 ) ) ) COND ( ( a == FLOAT_1 ) && ( b == FLOAT_1 ) ) && ( ( TYPE_1 . METHOD_2 ( a ) ) == ( VAR_1 ) ) ( THEN THEN (  return b ; )  return b ; ) THEN THEN ) IF IF (  return a >= b ? a : b ; )  return a >= b ? a : b ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) (  VAR_1 = new TYPE_1 ( VAR_2 , TYPE_2 . METHOD_2 ( ) ) )  VAR_1 = new TYPE_1 ( VAR_2 , TYPE_2 . METHOD_2 ( ) ) (  VAR_3 = TYPE_3 . METHOD_3 ( VAR_4 , VAR_5 ) )  VAR_3 = TYPE_3 . METHOD_3 ( VAR_4 , VAR_5 ) (  VAR_6 = TYPE_3 . METHOD_3 ( VAR_7 , VAR_8 ) )  VAR_6 = TYPE_3 . METHOD_3 ( VAR_7 , VAR_8 ) (  < TYPE_5 > VAR_9 = TYPE_4 . METHOD_4 ( VAR_10 class ) )  < TYPE_5 > VAR_9 = TYPE_4 . METHOD_4 ( VAR_10 class ) (  org.mockito.Mockito.verify ( VAR_2 ) . METHOD_5 ( VAR_9 . METHOD_6 ( ) ) )  org.mockito.Mockito.verify ( VAR_2 ) . METHOD_5 ( VAR_9 . METHOD_6 ( ) ) (  VAR_11 = VAR_9 . METHOD_7 ( ) )  VAR_11 = VAR_9 . METHOD_7 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE double ) TYPE double ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( java.lang.String.format ( STRING_1 , VAR_1 ) ) )  METHOD_2 ( java.lang.String.format ( STRING_1 , VAR_1 ) ) (  METHOD_2 ( STRING_2 ) )  METHOD_2 ( STRING_2 ) (  METHOD_3 ( ) )  METHOD_3 ( ) (  TYPE_1 . METHOD_4 ( TYPE_2 . METHOD_5 ( 10 , VAR_3 ) ) )  TYPE_1 . METHOD_4 ( TYPE_2 . METHOD_5 ( 10 , VAR_3 ) ) ( TRY TRY ( BLOCK BLOCK (  METHOD_6 ( VAR_2 ) )  METHOD_6 ( VAR_2 ) ) BLOCK BLOCK ( FINALLY FINALLY (  METHOD_7 ( ) )  METHOD_7 ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.ArrayList<TYPE_1> ) RETURN java.util.ArrayList<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  VAR_1 )  VAR_1 ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . size ( ) ) INIT = VAR_1 . size ( ) ) VAR VAR ( VAR VAR ( TYPE java.util.ArrayList<TYPE_1> ) TYPE java.util.ArrayList<TYPE_1> ( NAME VAR_3 ) NAME VAR_3 ( INIT = new java.util.ArrayList < TYPE_1 > ( VAR_2 ) ) INIT = new java.util.ArrayList < TYPE_1 > ( VAR_2 ) ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < VAR_2 ) COND i < VAR_2 ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK (  VAR_3 . METHOD_2 ( VAR_1 . METHOD_3 ( i ) ) )  VAR_3 . METHOD_2 ( VAR_1 . METHOD_3 ( i ) ) ) BLOCK BLOCK ) FOR FOR (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public synchronized ) MODIFIER public synchronized ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( VAR_2 , STRING_1 ) )  METHOD_2 ( VAR_2 , STRING_1 ) ( IF IF ( COND VAR_3 . METHOD_3 ( VAR_4 , VAR_5 ) ) COND VAR_3 . METHOD_3 ( VAR_4 , VAR_5 ) ( THEN THEN (  METHOD_4 ( STRING_2 ) )  METHOD_4 ( STRING_2 ) (  return false ; )  return false ; ) THEN THEN ) IF IF (  METHOD_4 ( ( STRING_3 + VAR_1 ) ) )  METHOD_4 ( ( STRING_3 + VAR_1 ) ) (  VAR_6 = VAR_1 )  VAR_6 = VAR_1 ( VAR VAR ( TYPE android.os.Message ) TYPE android.os.Message ( NAME m ) NAME m ( INIT = VAR_7 . METHOD_5 ( VAR_8 ) ) INIT = VAR_7 . METHOD_5 ( VAR_8 ) ) VAR VAR (  VAR_7 . METHOD_6 ( m ) )  VAR_7 . METHOD_6 ( m ) (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Class<?> ) TYPE java.lang.Class<?> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  output . METHOD_2 ( VAR_3 ) )  output . METHOD_2 ( VAR_3 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_1 . METHOD_3 ( VAR_1 ) ) INIT = TYPE_1 . METHOD_3 ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_4 . METHOD_4 ( ) ) COND VAR_4 . METHOD_4 ( ) ( THEN THEN (  METHOD_5 ( VAR_1 , VAR_4 , VAR_2 ) )  METHOD_5 ( VAR_1 , VAR_4 , VAR_2 ) ) THEN THEN ( ELSE ELSE (  METHOD_6 ( VAR_4 , VAR_2 ) )  METHOD_6 ( VAR_4 , VAR_2 ) ) ELSE ELSE ) IF IF ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_5 ) NAME VAR_5 ( INIT = METHOD_7 ( ) ) INIT = METHOD_7 ( ) ) VAR VAR ( IF IF ( COND ! VAR_2 ) COND ! VAR_2 ( THEN THEN (  VAR_6 . METHOD_8 ( VAR_1 , VAR_5 ) )  VAR_6 . METHOD_8 ( VAR_1 , VAR_5 ) ) THEN THEN ) IF IF (  return VAR_5 ; )  return VAR_5 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  throw new java.lang.NullPointerException ( STRING_1 ) ; )  throw new java.lang.NullPointerException ( STRING_1 ) ; ) THEN THEN ) IF IF (  METHOD_2 ( ) )  METHOD_2 ( ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME item ) NAME item ( INIT = VAR_2 . get ( VAR_1 ) ) INIT = VAR_2 . get ( VAR_1 ) ) VAR VAR ( IF IF ( COND item == null ) COND item == null ( THEN THEN (  throw new java.lang.IllegalArgumentException ( STRING_2 ) ; )  throw new java.lang.IllegalArgumentException ( STRING_2 ) ; ) THEN THEN ) IF IF (  return item . METHOD_3 ( ) ; )  return item . METHOD_3 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Integer ) RETURN java.lang.Integer ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME n ) NAME n ( INIT = number ) INIT = number ) VAR VAR ( IF IF ( COND n <= 1 ) COND n <= 1 ( THEN THEN (  return n ; )  return n ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( ( n - 1 ) ) ) INIT = new TYPE_1 ( ( n - 1 ) ) ) VAR VAR (  VAR_1 . METHOD_2 ( ) )  VAR_1 . METHOD_2 ( ) (  return ( new TYPE_1 ( ( n - 2 ) ) . METHOD_1 ( ) ) + ( VAR_1 . METHOD_3 ( ) ) ; )  return ( new TYPE_1 ( ( n - 2 ) ) . METHOD_1 ( ) ) + ( VAR_1 . METHOD_3 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  assertTrue ( STRING_1 , ( ( VAR_1 . get ( INT_1 ) ) == ( VAR_2 [ INT_1 ] ) ) ) )  assertTrue ( STRING_1 , ( ( VAR_1 . get ( INT_1 ) ) == ( VAR_2 [ INT_1 ] ) ) ) ( TRY TRY ( BLOCK BLOCK (  VAR_1 . get ( INT_2 ) )  VAR_1 . get ( INT_2 ) (  fail ( STRING_2 ) )  fail ( STRING_2 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_2 . d ( this , STRING_1 ) )  TYPE_2 . d ( this , STRING_1 ) ( IF IF ( COND ! ( METHOD_2 ( ) ) ) COND ! ( METHOD_2 ( ) ) ( THEN THEN ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_3 ( VAR_1 ) ) INIT = METHOD_3 ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_2 != ( VAR_3 ) ) COND VAR_2 != ( VAR_3 ) ( THEN THEN (  METHOD_4 ( VAR_2 ) )  METHOD_4 ( VAR_2 ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME name ) NAME name ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_1 = TYPE_2 . METHOD_2 ( STRING_1 ) )  VAR_1 = TYPE_2 . METHOD_2 ( STRING_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( BLOCK BLOCK (  throw new TYPE_4 ( STRING_2 ) ; )  throw new TYPE_4 ( STRING_2 ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . METHOD_3 ( name ) ) INIT = VAR_1 . METHOD_3 ( name ) ) VAR VAR (  VAR_3 [ 6 ] &= INT_1 )  VAR_3 [ 6 ] &= INT_1 (  VAR_3 [ 6 ] |= INT_2 )  VAR_3 [ 6 ] |= INT_2 (  VAR_3 [ 8 ] &= INT_3 )  VAR_3 [ 8 ] &= INT_3 (  VAR_3 [ 8 ] |= INT_4 )  VAR_3 [ 8 ] |= INT_4 (  return new TYPE_1 ( VAR_3 ) ; )  return new TYPE_1 ( VAR_3 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SWITCH SWITCH ( NAME VAR_1 ) NAME VAR_1 ( CASE VAR_2 ( BLOCK BLOCK (  return VAR_6 ; )  return VAR_6 ; ) BLOCK BLOCK ) CASE VAR_2 ( CASE VAR_3 ( BLOCK BLOCK (  return VAR_6 ; )  return VAR_6 ; ) BLOCK BLOCK ) CASE VAR_3 ( CASE VAR_4 ( BLOCK BLOCK (  return VAR_6 ; )  return VAR_6 ; ) BLOCK BLOCK ) CASE VAR_4 ( CASE VAR_5 ( BLOCK BLOCK (  return VAR_6 ; )  return VAR_6 ; ) BLOCK BLOCK ) CASE VAR_5 ( CASE VAR_7 ( BLOCK BLOCK (  return VAR_11 ; )  return VAR_11 ; ) BLOCK BLOCK ) CASE VAR_7 ( CASE VAR_8 ( BLOCK BLOCK (  return VAR_11 ; )  return VAR_11 ; ) BLOCK BLOCK ) CASE VAR_8 ( CASE VAR_9 ( BLOCK BLOCK (  return VAR_11 ; )  return VAR_11 ; ) BLOCK BLOCK ) CASE VAR_9 ( CASE VAR_10 ( BLOCK BLOCK (  return VAR_11 ; )  return VAR_11 ; ) BLOCK BLOCK ) CASE VAR_10 ( DEFAULT DEFAULT ( BLOCK BLOCK (  throw new java.lang.IllegalArgumentException ( ( STRING_1 + ( TYPE_1 . METHOD_2 ( ( VAR_1 & - 1 ) ) ) ) ) ; )  throw new java.lang.IllegalArgumentException ( ( STRING_1 + ( TYPE_1 . METHOD_2 ( ( VAR_1 & - 1 ) ) ) ) ) ; ) BLOCK BLOCK ) DEFAULT DEFAULT ) SWITCH SWITCH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  VAR_3 . METHOD_2 ( VAR_1 , VAR_2 ) )  VAR_3 . METHOD_2 ( VAR_1 , VAR_2 ) ( TRY TRY ( BLOCK BLOCK (  VAR_3 . METHOD_3 ( VAR_1 , VAR_2 ) )  VAR_3 . METHOD_3 ( VAR_1 , VAR_2 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_5 ( e ) ; )  throw new TYPE_5 ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_5 ( e ) ; )  throw new TYPE_5 ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_7 ) TYPE TYPE_7 ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE TYPE_8 ) TYPE TYPE_8 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_3 ( e ) ; )  throw new TYPE_3 ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  assertTrue ( STRING_1 , TYPE_1 . METHOD_2 ( CHAR_1 ) ) )  assertTrue ( STRING_1 , TYPE_1 . METHOD_2 ( CHAR_1 ) ) (  assertTrue ( STRING_2 , TYPE_1 . METHOD_2 ( CHAR_2 ) ) )  assertTrue ( STRING_2 , TYPE_1 . METHOD_2 ( CHAR_2 ) ) (  assertTrue ( STRING_3 , TYPE_1 . METHOD_2 ( CHAR_3 ) ) )  assertTrue ( STRING_3 , TYPE_1 . METHOD_2 ( CHAR_3 ) ) (  assertTrue ( STRING_4 , TYPE_1 . METHOD_2 ( CHAR_4 ) ) )  assertTrue ( STRING_4 , TYPE_1 . METHOD_2 ( CHAR_4 ) ) (  assertTrue ( STRING_5 , TYPE_1 . METHOD_2 ( CHAR_5 ) ) )  assertTrue ( STRING_5 , TYPE_1 . METHOD_2 ( CHAR_5 ) ) (  assertTrue ( STRING_6 , TYPE_1 . METHOD_2 ( CHAR_6 ) ) )  assertTrue ( STRING_6 , TYPE_1 . METHOD_2 ( CHAR_6 ) ) (  assertTrue ( STRING_7 , ( ! ( TYPE_1 . METHOD_2 ( CHAR_7 ) ) ) ) )  assertTrue ( STRING_7 , ( ! ( TYPE_1 . METHOD_2 ( CHAR_7 ) ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( this ) )  TYPE_1 . METHOD_2 ( this ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME context ) NAME context ( INIT = METHOD_3 ( VAR_1 class ) ) INIT = METHOD_3 ( VAR_1 class ) ) VAR VAR (  when ( context . METHOD_4 ( VAR_2 ) ) . thenReturn ( VAR_3 ) )  when ( context . METHOD_4 ( VAR_2 ) ) . thenReturn ( VAR_3 ) (  METHOD_5 ( ) . when ( VAR_3 ) . METHOD_6 ( METHOD_7 ( ) , METHOD_8 ( ) , METHOD_9 ( VAR_4 . String class ) , VAR_5 . METHOD_10 ( ) , METHOD_9 ( VAR_6 class ) ) )  METHOD_5 ( ) . when ( VAR_3 ) . METHOD_6 ( METHOD_7 ( ) , METHOD_8 ( ) , METHOD_9 ( VAR_4 . String class ) , VAR_5 . METHOD_10 ( ) , METHOD_9 ( VAR_6 class ) ) (  VAR_7 = new TYPE_3 ( context , VAR_8 , VAR_9 , VAR_10 , VAR_11 , VAR_12 , VAR_13 ) )  VAR_7 = new TYPE_3 ( context , VAR_8 , VAR_9 , VAR_10 , VAR_11 , VAR_12 , VAR_13 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE android.bluetooth.BluetoothDevice ) TYPE android.bluetooth.BluetoothDevice ( NAME device ) NAME device ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( TYPE_1 . METHOD_2 ( ) ) ) COND ! ( TYPE_1 . METHOD_2 ( ) ) ( THEN THEN (  android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) )  android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME service ) NAME service ( INIT = METHOD_3 ( ) ) INIT = METHOD_3 ( ) ) VAR VAR ( IF IF ( COND service == null ) COND service == null ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  return service . METHOD_1 ( device , VAR_1 , VAR_2 , VAR_3 ) ; )  return service . METHOD_1 ( device , VAR_1 , VAR_2 , VAR_3 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( IF IF ( COND VAR_1 == 16 ) COND VAR_1 == 16 ( THEN THEN (  VAR_3 = STRING_1 )  VAR_3 = STRING_1 ) THEN THEN ( ELSE ELSE (  VAR_3 = STRING_2 )  VAR_3 = STRING_2 ) ELSE ELSE ) IF IF ( IF IF ( COND VAR_2 == ( VAR_4 ) ) COND VAR_2 == ( VAR_4 ) ( THEN THEN (  return VAR_3 ; )  return VAR_3 ; ) THEN THEN ( ELSE ELSE (  return ( VAR_3 + STRING_3 ) + ( VAR_2 . toString ( ) . METHOD_2 ( VAR_5 ) ) ; )  return ( VAR_3 + STRING_3 ) + ( VAR_2 . toString ( ) . METHOD_2 ( VAR_5 ) ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) INIT = TYPE_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME type ) NAME type ( INIT = VAR_1 . METHOD_4 ( ) ) INIT = VAR_1 . METHOD_4 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_6 . METHOD_5 ( TYPE_3 . METHOD_6 ( type ) ) ) INIT = TYPE_6 . METHOD_5 ( TYPE_3 . METHOD_6 ( type ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_7 ) TYPE TYPE_7 ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_3 . METHOD_7 ( VAR_1 ) ) INIT = TYPE_3 . METHOD_7 ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_8 ) TYPE TYPE_8 ( NAME VAR_5 ) NAME VAR_5 ( INIT = new TYPE_9 ( VAR_3 , VAR_4 , VAR_6 , METHOD_8 ( ) , VAR_2 ) ) INIT = new TYPE_9 ( VAR_3 , VAR_4 , VAR_6 , METHOD_8 ( ) , VAR_2 ) ) VAR VAR (  METHOD_9 ( VAR_5 ) )  METHOD_9 ( VAR_5 ) (  METHOD_10 ( VAR_7 , VAR_4 ) )  METHOD_10 ( VAR_7 , VAR_4 ) (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.android.jack.ir.ast.JMethod ) TYPE com.android.jack.ir.ast.JMethod ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . get ( ) ) INIT = VAR_3 . get ( ) ) VAR VAR ( IF IF ( COND ( VAR_2 == null ) || ( ( VAR_2 . METHOD_2 ( ) ) != ( VAR_4 ) ) ) COND ( VAR_2 == null ) || ( ( VAR_2 . METHOD_2 ( ) ) != ( VAR_4 ) ) ( THEN THEN ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_6 . METHOD_1 ( VAR_4 , VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( ) ) ) INIT = VAR_6 . METHOD_1 ( VAR_4 , VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( ) ) ) VAR VAR (  VAR_2 = VAR_5 . METHOD_6 ( VAR_1 ) )  VAR_2 = VAR_5 . METHOD_6 ( VAR_1 ) ) THEN THEN ) IF IF (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_2 . METHOD_2 ( ) ) INIT = TYPE_2 . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME data ) NAME data ( INIT = VAR_2 . METHOD_3 ( VAR_1 ) ) INIT = VAR_2 . METHOD_3 ( VAR_1 ) ) VAR VAR ( IF IF ( COND data != null ) COND data != null ( THEN THEN ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_3 ) NAME VAR_3 ( INIT = data . METHOD_4 ( ) ) INIT = data . METHOD_4 ( ) ) VAR VAR (  VAR_3 . METHOD_5 ( VAR_4 . METHOD_6 ( ) ) )  VAR_3 . METHOD_5 ( VAR_4 . METHOD_6 ( ) ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF ( IF IF ( COND ( ( VAR_5 ) != null ) && ( VAR_5 . METHOD_7 ( ) ) ) COND ( ( VAR_5 ) != null ) && ( VAR_5 . METHOD_7 ( ) ) ( THEN THEN (  VAR_5 = null )  VAR_5 = null ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME is ) NAME is ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_3 ( name ) ) INIT = new TYPE_3 ( name ) ) VAR VAR (  VAR_1 . METHOD_2 ( VAR_2 ) )  VAR_1 . METHOD_2 ( VAR_2 ) (  METHOD_3 ( is , VAR_1 , name ) )  METHOD_3 ( is , VAR_1 , name ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_4 ( ( STRING_1 + name ) , e ) ; )  throw new TYPE_4 ( ( STRING_1 + name ) , e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static synchronized ) MODIFIER public static synchronized ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME provider ) NAME provider ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = provider . getName ( ) ) INIT = provider . getName ( ) ) VAR VAR (  TYPE_2 . METHOD_2 ( ( STRING_1 + VAR_2 ) ) )  TYPE_2 . METHOD_2 ( ( STRING_1 + VAR_2 ) ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_4 . METHOD_3 ( ) ) INIT = TYPE_4 . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_3 . METHOD_4 ( VAR_3 , provider , ( VAR_1 - 1 ) ) ) INIT = TYPE_3 . METHOD_4 ( VAR_3 , provider , ( VAR_1 - 1 ) ) ) VAR VAR ( IF IF ( COND VAR_3 == VAR_4 ) COND VAR_3 == VAR_4 ( THEN THEN (  return - 1 ; )  return - 1 ; ) THEN THEN ) IF IF (  TYPE_2 . METHOD_5 ( ) )  TYPE_2 . METHOD_5 ( ) (  TYPE_4 . METHOD_6 ( VAR_4 ) )  TYPE_4 . METHOD_6 ( VAR_4 ) (  return ( VAR_4 . METHOD_7 ( VAR_2 ) ) + 1 ; )  return ( VAR_4 . METHOD_7 ( VAR_2 ) ) + 1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME count ) NAME count ) VAR VAR ( VAR VAR ( TYPE float[] ) TYPE float[] ( NAME d ) NAME d ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( VAR_3 . METHOD_2 ( ) ) * count ) INIT = ( VAR_3 . METHOD_2 ( ) ) * count ) VAR VAR (  METHOD_3 ( VAR_1 , count , ( ( d . length ) * 4 ) , VAR_2 ) )  METHOD_3 ( VAR_1 , count , ( ( d . length ) * 4 ) , VAR_2 ) (  mRS . METHOD_4 ( METHOD_5 ( ) , VAR_1 , VAR_4 , count , d , VAR_2 ) )  mRS . METHOD_4 ( METHOD_5 ( ) , VAR_1 , VAR_4 , count , d , VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME is ) NAME is ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_4 ( is ) ) INIT = new TYPE_4 ( is ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_5 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) INIT = TYPE_5 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) VAR VAR ( IF IF ( COND VAR_2 == INT_1 ) COND VAR_2 == INT_1 ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF (  return new TYPE_1 ( VAR_2 ) ; )  return new TYPE_1 ( VAR_2 ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_3 ( e ) ; )  throw new TYPE_3 ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ( FINALLY FINALLY (  VAR_1 . METHOD_4 ( ) )  VAR_1 . METHOD_4 ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME s ) NAME s ( INIT = METHOD_2 ( VAR_1 , 10 ) ) INIT = METHOD_2 ( VAR_1 , 10 ) ) VAR VAR (  this . METHOD_3 ( ) )  this . METHOD_3 ( ) ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_1 . METHOD_4 ( this . VAR_3 , s ) ) INIT = TYPE_1 . METHOD_4 ( this . VAR_3 , s ) ) VAR VAR (  TYPE_2 . METHOD_5 ( ( VAR_2 > 0 ) ) )  TYPE_2 . METHOD_5 ( ( VAR_2 > 0 ) ) ( IF IF ( COND VAR_2 < ( s . length ( ) ) ) COND VAR_2 < ( s . length ( ) ) ( THEN THEN (  throw METHOD_6 ( VAR_1 ) ; )  throw METHOD_6 ( VAR_1 ) ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE android.os.Bundle ) TYPE android.os.Bundle ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) . METHOD_1 ( ) ) INIT = METHOD_2 ( ) . METHOD_1 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_1 . METHOD_3 ( VAR_1 ) ) INIT = TYPE_1 . METHOD_3 ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_2 . METHOD_4 ( ) ) COND VAR_2 . METHOD_4 ( ) ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME ex ) NAME ex ( BLOCK BLOCK (  return null ; )  return null ; ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE java.lang.NullPointerException ) TYPE java.lang.NullPointerException ( NAME ex ) NAME ex ( BLOCK BLOCK (  return null ; )  return null ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER synchronized ) MODIFIER synchronized ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME w ) NAME w ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME h ) NAME h ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME d ) NAME d ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_6 ) NAME VAR_6 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  METHOD_3 ( mContext , id , VAR_1 , VAR_2 , VAR_3 , VAR_4 , w , h , VAR_5 , d , VAR_6 ) )  METHOD_3 ( mContext , id , VAR_1 , VAR_2 , VAR_3 , VAR_4 , w , h , VAR_5 , d , VAR_6 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( ) ) INIT = TYPE_2 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR (  VAR_2 . METHOD_3 ( VAR_1 ) )  VAR_2 . METHOD_3 ( VAR_1 ) (  METHOD_4 ( VAR_1 ) )  METHOD_4 ( VAR_1 ) (  METHOD_5 ( VAR_1 ) )  METHOD_5 ( VAR_1 ) (  assertTrue ( VAR_3 . METHOD_6 ( ) . METHOD_7 ( ) ) )  assertTrue ( VAR_3 . METHOD_6 ( ) . METHOD_7 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME device ) NAME device ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( device . METHOD_2 ( VAR_1 ) ) ) COND ! ( device . METHOD_2 ( VAR_1 ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = device . METHOD_3 ( ) ) INIT = device . METHOD_3 ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME listener ) NAME listener ( IN VAR_3 ) IN VAR_3 ( BLOCK BLOCK (  listener . METHOD_4 ( VAR_2 ) )  listener . METHOD_4 ( VAR_2 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME e ) NAME e ( BLOCK BLOCK (  android.util.Log.e ( TYPE_4 . TAG , STRING_1 , e ) )  android.util.Log.e ( TYPE_4 . TAG , STRING_1 , e ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private final ) MODIFIER private final ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME uri ) NAME uri ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME uid ) NAME uid ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( uid == 0 ) || ( ! ( TYPE_2 . METHOD_2 ( ) ) ) ) COND ( uid == 0 ) || ( ! ( TYPE_2 . METHOD_2 ( ) ) ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE java.util.HashMap<TYPE_1,TYPE_3> ) TYPE java.util.HashMap<TYPE_1,TYPE_3> ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . get ( uid ) ) INIT = VAR_3 . get ( uid ) ) VAR VAR ( IF IF ( COND VAR_2 == null ) COND VAR_2 == null ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_2 . get ( uri ) ) INIT = VAR_2 . get ( uri ) ) VAR VAR ( IF IF ( COND VAR_4 == null ) COND VAR_4 == null ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  return ( VAR_1 & ( VAR_5 ) ) == VAR_1 ; )  return ( VAR_1 & ( VAR_5 ) ) == VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( new TYPE_2 ( STRING_1 ) , null , null , TYPE_3 . of ( ) , TYPE_3 . of ( ) , TYPE_3 . of ( ) ) ) INIT = new TYPE_1 ( new TYPE_2 ( STRING_1 ) , null , null , TYPE_3 . of ( ) , TYPE_3 . of ( ) , TYPE_3 . of ( ) ) ) VAR VAR (  TYPE_4 . METHOD_2 ( VAR_1 . METHOD_3 ( STRING_2 ) ) . METHOD_4 ( STRING_3 ) )  TYPE_4 . METHOD_2 ( VAR_1 . METHOD_3 ( STRING_2 ) ) . METHOD_4 ( STRING_3 ) (  TYPE_4 . METHOD_2 ( VAR_1 . METHOD_3 ( STRING_4 ) ) . METHOD_4 ( STRING_4 ) )  TYPE_4 . METHOD_2 ( VAR_1 . METHOD_3 ( STRING_4 ) ) . METHOD_4 ( STRING_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME rr ) NAME rr ( INIT = VAR_3 . METHOD_2 ( VAR_1 ) ) INIT = VAR_3 . METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND rr != null ) COND rr != null ( THEN THEN ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME ret ) NAME ret ( INIT = null ) INIT = null ) VAR VAR ( IF IF ( COND ( VAR_1 . error ) == ( VAR_4 ) ) COND ( VAR_1 . error ) == ( VAR_4 ) ( THEN THEN (  ret = VAR_2 )  ret = VAR_2 (  TYPE_3 . METHOD_3 ( VAR_5 , ret ) )  TYPE_3 . METHOD_3 ( VAR_5 , ret ) ) THEN THEN ) IF IF (  VAR_3 . METHOD_4 ( rr , VAR_1 , ret ) )  VAR_3 . METHOD_4 ( rr , VAR_1 , ret ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME c ) NAME c ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return new TYPE_1 ( VAR_1 . METHOD_2 ( ) , c . state , VAR_2 , VAR_3 , VAR_4 , VAR_1 . METHOD_3 ( ) , VAR_5 , VAR_6 , VAR_7 , VAR_8 , VAR_9 , false , false , 0 , VAR_10 , VAR_11 , VAR_12 , VAR_13 ) ; )  return new TYPE_1 ( VAR_1 . METHOD_2 ( ) , c . state , VAR_2 , VAR_3 , VAR_4 , VAR_1 . METHOD_3 ( ) , VAR_5 , VAR_6 , VAR_7 , VAR_8 , VAR_9 , false , false , 0 , VAR_10 , VAR_11 , VAR_12 , VAR_13 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME device ) NAME device ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND device != null ) COND device != null ( THEN THEN ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME msg ) NAME msg ( INIT = STRING_1 + ( device . METHOD_2 ( ) ) ) INIT = STRING_1 + ( device . METHOD_2 ( ) ) ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_5 . METHOD_3 ( msg ) ) INIT = TYPE_5 . METHOD_3 ( msg ) ) VAR VAR (  TYPE_5 . METHOD_4 ( VAR_1 , VAR_2 ) )  TYPE_5 . METHOD_4 ( VAR_1 , VAR_2 ) ( VAR VAR ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_5 . METHOD_5 ( VAR_1 , false ) ) INIT = TYPE_5 . METHOD_5 ( VAR_1 , false ) ) VAR VAR ( IF IF ( COND ( VAR_4 ) == false ) COND ( VAR_4 ) == false ( THEN THEN (  throw new TYPE_3 ( VAR_5 , true ) ; )  throw new TYPE_3 ( VAR_5 , true ) ; ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_3 = new TYPE_3 ( new TYPE_4 ( this ) , VAR_4 . value ( ) ) )  VAR_3 = new TYPE_3 ( new TYPE_4 ( this ) , VAR_4 . value ( ) ) (  VAR_3 . start ( ) )  VAR_3 . start ( ) (  VAR_5 = new TYPE_5 ( ) )  VAR_5 = new TYPE_5 ( ) ( IF IF ( COND ( VAR_1 != null ) && ( ( VAR_1 . length ( ) ) > 0 ) ) COND ( VAR_1 != null ) && ( ( VAR_1 . length ( ) ) > 0 ) ( THEN THEN (  METHOD_2 ( VAR_1 , VAR_2 ) )  METHOD_2 ( VAR_1 , VAR_2 ) ) THEN THEN ( ELSE ELSE ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_6 ) NAME VAR_6 ( IN METHOD_3 ( ) ) IN METHOD_3 ( ) ( BLOCK BLOCK (  METHOD_2 ( VAR_6 , VAR_2 ) )  METHOD_2 ( VAR_6 , VAR_2 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME rr ) NAME rr ( INIT = VAR_3 . METHOD_2 ( VAR_1 ) ) INIT = VAR_3 . METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND rr != null ) COND rr != null ( THEN THEN ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME ret ) NAME ret ( INIT = TYPE_5 . METHOD_3 ( VAR_2 ) ) INIT = TYPE_5 . METHOD_3 ( VAR_2 ) ) VAR VAR ( IF IF ( COND ( VAR_1 . error ) == ( VAR_4 ) ) COND ( VAR_1 . error ) == ( VAR_4 ) ( THEN THEN (  TYPE_6 . METHOD_4 ( VAR_5 , ret ) )  TYPE_6 . METHOD_4 ( VAR_5 , ret ) ) THEN THEN ) IF IF (  VAR_3 . METHOD_5 ( rr , VAR_1 , ret ) )  VAR_3 . METHOD_5 ( rr , VAR_1 , ret ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  assertTrue ( VAR_1 . METHOD_2 ( VAR_2 ) ) )  assertTrue ( VAR_1 . METHOD_2 ( VAR_2 ) ) (  VAR_1 . METHOD_3 ( VAR_3 ) )  VAR_1 . METHOD_3 ( VAR_3 ) (  assertTrue ( VAR_1 . METHOD_2 ( VAR_2 ) ) )  assertTrue ( VAR_1 . METHOD_2 ( VAR_2 ) ) (  VAR_1 . METHOD_4 ( VAR_2 , VAR_4 ) )  VAR_1 . METHOD_4 ( VAR_2 , VAR_4 ) (  assertTrue ( TYPE_1 . equals ( VAR_4 , VAR_1 . get ( VAR_2 ) ) ) )  assertTrue ( TYPE_1 . equals ( VAR_4 , VAR_1 . get ( VAR_2 ) ) ) (  assertTrue ( VAR_1 . METHOD_2 ( VAR_2 ) ) )  assertTrue ( VAR_1 . METHOD_2 ( VAR_2 ) ) (  METHOD_5 ( VAR_1 . get ( VAR_2 ) ) )  METHOD_5 ( VAR_1 . get ( VAR_2 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME uid ) NAME uid ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_6 ) NAME VAR_6 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME config ) NAME config ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_7 = VAR_2 )  VAR_7 = VAR_2 (  VAR_8 = VAR_1 )  VAR_8 = VAR_1 (  VAR_9 = uid )  VAR_9 = uid (  VAR_10 = VAR_3 )  VAR_10 = VAR_3 (  config . status = ( VAR_4 ) ? VAR_11 : VAR_12 )  config . status = ( VAR_4 ) ? VAR_11 : VAR_12 ( IF IF ( COND VAR_5 != null ) COND VAR_5 != null ( THEN THEN (  VAR_13 = VAR_5 )  VAR_13 = VAR_5 (  VAR_14 = VAR_6 )  VAR_14 = VAR_6 (  VAR_15 . METHOD_2 ( VAR_16 ) )  VAR_15 . METHOD_2 ( VAR_16 ) ) THEN THEN ) IF IF (  return config ; )  return config ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME p ) NAME p ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE byte ) TYPE byte ( NAME a ) NAME a ) VAR VAR ( VAR VAR ( TYPE byte ) TYPE byte ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3[] ) TYPE TYPE_3[] ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( IF IF ( COND a == 0 ) COND a == 0 ( THEN THEN (  VAR_4 = VAR_5 )  VAR_4 = VAR_5 ) THEN THEN ( ELSE ELSE (  VAR_4 = VAR_6 )  VAR_4 = VAR_6 ) ELSE ELSE ) IF IF ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_7 ) NAME VAR_7 ( INIT = TYPE_6 . METHOD_2 ( VAR_3 , VAR_8 ) ) INIT = TYPE_6 . METHOD_2 ( VAR_3 , VAR_8 ) ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_9 ) NAME VAR_9 ( INIT = TYPE_6 . METHOD_3 ( VAR_3 , VAR_1 , VAR_8 , TYPE_5 . METHOD_4 ( VAR_10 ) , VAR_7 , VAR_4 ) ) INIT = TYPE_6 . METHOD_3 ( VAR_3 , VAR_1 , VAR_8 , TYPE_5 . METHOD_4 ( VAR_10 ) , VAR_7 , VAR_4 ) ) VAR VAR (  return TYPE_7 . METHOD_5 ( p , VAR_9 , VAR_2 ) ; )  return TYPE_7 . METHOD_5 ( p , VAR_9 , VAR_2 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int[] ) RETURN int[] ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int[] ) TYPE int[] ( NAME src ) NAME src ) VAR VAR ( VAR VAR ( TYPE int[] ) TYPE int[] ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return new int [ ] { src [ 0 ] , VAR_1 [ 1 ] , VAR_1 [ 2 ] , TYPE_1 . METHOD_2 ( INT_1 , ( ( src [ 3 ] ) + ( VAR_1 [ 3 ] ) ) ) } ; )  return new int [ ] { src [ 0 ] , VAR_1 [ 1 ] , VAR_1 [ 2 ] , TYPE_1 . METHOD_2 ( INT_1 , ( ( src [ 3 ] ) + ( VAR_1 [ 3 ] ) ) ) } ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int[] ) TYPE int[] ( NAME a ) NAME a ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME x ) NAME x ( INIT = 0 ) INIT = 0 ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = TYPE_1 . METHOD_2 ( VAR_1 ) ) INIT = TYPE_1 . METHOD_2 ( VAR_1 ) ) VAR VAR ) INIT INIT ( COND i < ( a . length ) ) COND i < ( a . length ) ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK (  x += a [ i ] )  x += a [ i ] ) BLOCK BLOCK ) FOR FOR (  return x ; )  return x ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( PARAMS PARAMS ( VAR VAR ( TYPE com.android.jack.ir.ast.JMethod ) TYPE com.android.jack.ir.ast.JMethod ( NAME method ) NAME method ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( ( method . METHOD_1 ( ) . METHOD_2 ( ) ) || ( method . METHOD_3 ( ) ) ) || ( method . METHOD_4 ( ) ) ) || ( ! ( VAR_1 . METHOD_5 ( this . METHOD_6 ( ) , method ) ) ) ) COND ( ( ( method . METHOD_1 ( ) . METHOD_2 ( ) ) || ( method . METHOD_3 ( ) ) ) || ( method . METHOD_4 ( ) ) ) || ( ! ( VAR_1 . METHOD_5 ( this . METHOD_6 ( ) , method ) ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  METHOD_7 ( method ) )  METHOD_7 ( method ) (  VAR_2 . METHOD_8 ( method ) )  VAR_2 . METHOD_8 ( method ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  assertEquals ( VAR_1 . METHOD_2 ( ) , STRING_1 ) )  assertEquals ( VAR_1 . METHOD_2 ( ) , STRING_1 ) (  assertEquals ( VAR_2 . METHOD_2 ( ) , STRING_2 ) )  assertEquals ( VAR_2 . METHOD_2 ( ) , STRING_2 ) (  assertEquals ( VAR_3 . METHOD_2 ( ) , STRING_3 ) )  assertEquals ( VAR_3 . METHOD_2 ( ) , STRING_3 ) (  assertEquals ( VAR_4 . METHOD_2 ( ) , STRING_4 ) )  assertEquals ( VAR_4 . METHOD_2 ( ) , STRING_4 ) (  assertEquals ( VAR_5 . METHOD_2 ( ) , STRING_5 ) )  assertEquals ( VAR_5 . METHOD_2 ( ) , STRING_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  log ( STRING_1 ) )  log ( STRING_1 ) ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_2 ) == false ) COND ( VAR_2 ) == false ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( IF IF ( COND ( METHOD_2 ( ) ) == false ) COND ( METHOD_2 ( ) ) == false ( THEN THEN (  METHOD_3 ( VAR_3 ) )  METHOD_3 ( VAR_3 ) (  METHOD_4 ( VAR_3 ) )  METHOD_4 ( VAR_3 ) ) THEN THEN ( ELSE ELSE (  METHOD_5 ( VAR_3 ) )  METHOD_5 ( VAR_3 ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_4 . METHOD_1 ( VAR_1 . METHOD_2 ( ) ) ) INIT = TYPE_4 . METHOD_1 ( VAR_1 . METHOD_2 ( ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_5 . METHOD_1 ( TYPE_6 . METHOD_3 ( VAR_2 . METHOD_4 ( ) ) , VAR_2 , VAR_1 . METHOD_5 ( ) ) ) INIT = TYPE_5 . METHOD_1 ( TYPE_6 . METHOD_3 ( VAR_2 . METHOD_4 ( ) ) , VAR_2 , VAR_1 . METHOD_5 ( ) ) ) VAR VAR (  return new TYPE_1 ( TYPE_6 . METHOD_6 ( VAR_2 . METHOD_4 ( ) , VAR_3 . METHOD_4 ( ) , null ) ) ; )  return new TYPE_1 ( TYPE_6 . METHOD_6 ( VAR_2 . METHOD_4 ( ) , VAR_3 . METHOD_4 ( ) , null ) ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_3 ( e ) ; )  throw new TYPE_3 ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( IF IF ( COND VAR_2 == null ) COND VAR_2 == null ( THEN THEN (  return VAR_3 ; )  return VAR_3 ; ) THEN THEN ) IF IF (  return new java.lang.StringBuilder ( ) . append ( ( ( METHOD_3 ( ) ) != null ? METHOD_3 ( ) . print ( VAR_1 ) : STRING_1 ) ) . append ( STRING_2 ) . append ( VAR_2 . METHOD_4 ( ) ) . append ( STRING_2 ) . append ( VAR_2 . METHOD_5 ( ) ) . toString ( ) ; )  return new java.lang.StringBuilder ( ) . append ( ( ( METHOD_3 ( ) ) != null ? METHOD_3 ( ) . print ( VAR_1 ) : STRING_1 ) ) . append ( STRING_2 ) . append ( VAR_2 . METHOD_4 ( ) ) . append ( STRING_2 ) . append ( VAR_2 . METHOD_5 ( ) ) . toString ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( VAR_1 ) ) INIT = METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND ( VAR_3 ) && ( VAR_2 != ( VAR_4 ) ) ) COND ( VAR_3 ) && ( VAR_2 != ( VAR_4 ) ) ( THEN THEN (  return VAR_5 ; )  return VAR_5 ; ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_6 . METHOD_3 ( ) ) && ( ( VAR_2 . METHOD_4 ( VAR_7 ) ) < 0 ) ) COND ( VAR_6 . METHOD_3 ( ) ) && ( ( VAR_2 . METHOD_4 ( VAR_7 ) ) < 0 ) ( THEN THEN (  VAR_2 = VAR_8 )  VAR_2 = VAR_8 ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_6 . METHOD_5 ( ) ) && ( VAR_2 == ( VAR_9 ) ) ) COND ( VAR_6 . METHOD_5 ( ) ) && ( VAR_2 == ( VAR_9 ) ) ( THEN THEN (  VAR_2 = VAR_5 )  VAR_2 = VAR_5 ) THEN THEN ) IF IF (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME m ) NAME m ( INIT = VAR_2 . METHOD_2 ( VAR_1 ) ) INIT = VAR_2 . METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND m . METHOD_3 ( ) ) COND m . METHOD_3 ( ) ( THEN THEN ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME v ) NAME v ( INIT = m . METHOD_4 ( 1 ) ) INIT = m . METHOD_4 ( 1 ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = - 1 ) INIT = - 1 ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_3 = java.lang.Integer.parseInt ( v ) )  VAR_3 = java.lang.Integer.parseInt ( v ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK (  return null ; )  return null ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_1 ( VAR_3 ) ) INIT = new TYPE_1 ( VAR_3 ) ) VAR VAR (  return VAR_4 ; )  return VAR_4 ; ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME count ) NAME count ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME d ) NAME d ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( VAR_3 . METHOD_2 ( ) ) * count ) INIT = ( VAR_3 . METHOD_2 ( ) ) * count ) VAR VAR (  METHOD_3 ( VAR_1 , count , d . length , VAR_2 ) )  METHOD_3 ( VAR_1 , count , d . length , VAR_2 ) (  mRS . METHOD_4 ( METHOD_5 ( ) , VAR_1 , VAR_4 , count , d , VAR_2 ) )  mRS . METHOD_4 ( METHOD_5 ( ) , VAR_1 , VAR_4 , count , d , VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = java.util.HashMap . METHOD_2 ( VAR_1 ) ) INIT = java.util.HashMap . METHOD_2 ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE float ) TYPE float ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_2 * ( VAR_4 ) ) INIT = VAR_2 * ( VAR_4 ) ) VAR VAR ( IF IF ( COND VAR_3 > ( ( VAR_5 ) + 1 ) ) COND VAR_3 > ( ( VAR_5 ) + 1 ) ( THEN THEN (  VAR_3 = ( VAR_5 ) + 1 )  VAR_3 = ( VAR_5 ) + 1 ) THEN THEN ) IF IF (  VAR_6 = ( ( int ) ( VAR_3 ) ) )  VAR_6 = ( ( int ) ( VAR_3 ) ) (  VAR_7 = new TYPE_1 [ VAR_2 ] )  VAR_7 = new TYPE_1 [ VAR_2 ] (  METHOD_3 ( VAR_2 ) )  METHOD_3 ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_6 ) NAME VAR_6 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_7 ) NAME VAR_7 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_8 ) NAME VAR_8 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_9 ) NAME VAR_9 ( INIT = new TYPE_2 ( VAR_8 , VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 ) ) INIT = new TYPE_2 ( VAR_8 , VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_9 . METHOD_2 ( ) )  VAR_9 . METHOD_2 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK (  throw new java.lang.RuntimeException ( e ) ; )  throw new java.lang.RuntimeException ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME path ) NAME path ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME fd ) NAME fd ( INIT = VAR_1 . METHOD_2 ( path , VAR_2 , 0 ) ) INIT = VAR_1 . METHOD_2 ( path , VAR_2 , 0 ) ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME size ) NAME size ( INIT = VAR_1 . METHOD_3 ( fd ) . VAR_3 ) INIT = VAR_1 . METHOD_3 ( fd ) . VAR_3 ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME address ) NAME address ( INIT = VAR_1 . METHOD_4 ( INT_1 , size , VAR_4 , VAR_5 , fd , 0 ) ) INIT = VAR_1 . METHOD_4 ( INT_1 , size , VAR_4 , VAR_5 , fd , 0 ) ) VAR VAR (  VAR_1 . METHOD_5 ( fd ) )  VAR_1 . METHOD_5 ( fd ) (  return new TYPE_1 ( address , size ) ; )  return new TYPE_1 ( address , size ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN java.util.Set<java.lang.String> ) RETURN java.util.Set<java.lang.String> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Set<java.lang.String> ) TYPE java.util.Set<java.lang.String> ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_4 < java.lang.String > ( ) ) INIT = new TYPE_4 < java.lang.String > ( ) ) VAR VAR ( IF IF ( COND VAR_2 . METHOD_2 ( VAR_3 ) ) COND VAR_2 . METHOD_2 ( VAR_3 ) ( THEN THEN (  VAR_4 . METHOD_3 ( TYPE_5 . METHOD_4 ( VAR_1 , VAR_5 ) ) )  VAR_4 . METHOD_3 ( TYPE_5 . METHOD_4 ( VAR_1 , VAR_5 ) ) ) THEN THEN ( ELSE ELSE (  VAR_4 . METHOD_3 ( TYPE_5 . METHOD_5 ( VAR_2 . METHOD_6 ( VAR_3 ) ) ) )  VAR_4 . METHOD_3 ( TYPE_5 . METHOD_5 ( VAR_2 . METHOD_6 ( VAR_3 ) ) ) ) ELSE ELSE ) IF IF (  return VAR_4 ; )  return VAR_4 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_2 ( VAR_3 ) ) INIT = VAR_2 . METHOD_2 ( VAR_3 ) ) VAR VAR ( IF IF ( COND VAR_1 > 0 ) COND VAR_1 > 0 ( THEN THEN (  VAR_4 = VAR_5 )  VAR_4 = VAR_5 ) THEN THEN ( ELSE ELSE ( IF IF ( COND VAR_1 == 0 ) COND VAR_1 == 0 ( THEN THEN (  VAR_4 = VAR_6 )  VAR_4 = VAR_6 ) THEN THEN ( ELSE ELSE (  VAR_4 = VAR_7 )  VAR_4 = VAR_7 ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_1 . METHOD_3 ( STRING_1 ) ) INIT = VAR_1 . METHOD_3 ( STRING_1 ) ) VAR VAR ( IF IF ( COND VAR_4 != null ) COND VAR_4 != null ( THEN THEN (  VAR_3 . METHOD_4 ( VAR_4 ) )  VAR_3 . METHOD_4 ( VAR_4 ) ) THEN THEN ) IF IF (  VAR_3 . METHOD_5 ( null ) )  VAR_3 . METHOD_5 ( null ) ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_5 ) NAME VAR_5 ( INIT = TYPE_5 . METHOD_6 ( VAR_2 ) ) INIT = TYPE_5 . METHOD_6 ( VAR_2 ) ) VAR VAR (  VAR_5 . METHOD_7 ( VAR_3 , STRING_1 ) )  VAR_5 . METHOD_7 ( VAR_3 , STRING_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = false ) INIT = false ) VAR VAR (  VAR_3 = VAR_1 )  VAR_3 = VAR_1 ( IF IF ( COND ! ( VAR_4 ) ) COND ! ( VAR_4 ) ( THEN THEN (  METHOD_2 ( ) )  METHOD_2 ( ) ( IF IF ( COND VAR_5 ) COND VAR_5 ( THEN THEN (  TYPE_1 . d ( VAR_6 , ( STRING_1 + VAR_1 ) ) )  TYPE_1 . d ( VAR_6 , ( STRING_1 + VAR_1 ) ) ) THEN THEN ) IF IF (  VAR_7 . METHOD_3 ( ) . METHOD_4 ( this ) )  VAR_7 . METHOD_3 ( ) . METHOD_4 ( this ) ( IF IF ( COND ( VAR_8 ) != null ) COND ( VAR_8 ) != null ( THEN THEN (  VAR_2 = VAR_8 . METHOD_5 ( this ) )  VAR_2 = VAR_8 . METHOD_5 ( this ) ) THEN THEN ) IF IF (  VAR_9 = null )  VAR_9 = null ) THEN THEN ) IF IF (  METHOD_6 ( ) )  METHOD_6 ( ) (  METHOD_7 ( ) )  METHOD_7 ( ) (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME key ) NAME key ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_2 != null ) && ( ( VAR_4 ) != ( VAR_5 ) ) ) COND ( VAR_2 != null ) && ( ( VAR_4 ) != ( VAR_5 ) ) ( THEN THEN (  throw new TYPE_4 ( ( STRING_1 + ( VAR_2 . METHOD_2 ( ) . getName ( ) ) ) ) ; )  throw new TYPE_4 ( ( STRING_1 + ( VAR_2 . METHOD_2 ( ) . getName ( ) ) ) ) ; ) THEN THEN ) IF IF (  METHOD_3 ( VAR_1 , key ) )  METHOD_3 ( VAR_1 , key ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME r ) NAME r ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME b ) NAME b ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( VAR_1 , ( ( ( - INT_1 | ( r < < 16 ) ) | ( ( VAR_2 & INT_2 ) < < 8 ) ) | ( b & INT_2 ) ) , VAR_3 ) )  TYPE_1 . METHOD_2 ( VAR_1 , ( ( ( - INT_1 | ( r < < 16 ) ) | ( ( VAR_2 & INT_2 ) < < 8 ) ) | ( b & INT_2 ) ) , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ! ( e . METHOD_2 ( TYPE_3 . METHOD_3 ( VAR_1 ) ) ) ) && ( ! ( e . METHOD_2 ( TYPE_3 . METHOD_4 ( VAR_1 ) ) ) ) ) COND ( ! ( e . METHOD_2 ( TYPE_3 . METHOD_3 ( VAR_1 ) ) ) ) && ( ! ( e . METHOD_2 ( TYPE_3 . METHOD_4 ( VAR_1 ) ) ) ) ( THEN THEN (  throw new TYPE_4 ( STRING_1 ) ; )  throw new TYPE_4 ( STRING_1 ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE int ) TYPE int ( NAME id ) NAME id ( INIT = VAR_1 . METHOD_5 ( 5 , e . METHOD_6 ( VAR_1 ) ) ) INIT = VAR_1 . METHOD_5 ( 5 , e . METHOD_6 ( VAR_1 ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( id , VAR_1 ) ) INIT = new TYPE_1 ( id , VAR_1 ) ) VAR VAR (  VAR_2 . METHOD_7 ( FLOAT_1 ) )  VAR_2 . METHOD_7 ( FLOAT_1 ) (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( ) . build ( ) ) INIT = new TYPE_2 ( ) . build ( ) ) VAR VAR (  VAR_2 . METHOD_2 ( STRING_1 , VAR_3 , TYPE_3 . METHOD_3 ( VAR_4 ) ) )  VAR_2 . METHOD_2 ( STRING_1 , VAR_3 , TYPE_3 . METHOD_3 ( VAR_4 ) ) (  VAR_2 . METHOD_2 ( STRING_2 , VAR_5 , TYPE_3 . METHOD_3 ( VAR_6 ) ) )  VAR_2 . METHOD_2 ( STRING_2 , VAR_5 , TYPE_3 . METHOD_3 ( VAR_6 ) ) (  VAR_2 . METHOD_2 ( STRING_3 , 0 , TYPE_3 . METHOD_3 ( VAR_7 ) ) )  VAR_2 . METHOD_2 ( STRING_3 , 0 , TYPE_3 . METHOD_3 ( VAR_7 ) ) (  VAR_2 . METHOD_2 ( STRING_4 , false , TYPE_3 . METHOD_3 ( VAR_8 ) ) )  VAR_2 . METHOD_2 ( STRING_4 , false , TYPE_3 . METHOD_3 ( VAR_8 ) ) (  VAR_2 . METHOD_2 ( STRING_5 , false , TYPE_3 . METHOD_3 ( VAR_9 ) ) )  VAR_2 . METHOD_2 ( STRING_5 , false , TYPE_3 . METHOD_3 ( VAR_9 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME expected ) NAME expected ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) INIT = TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) VAR VAR (  assertEquals ( expected . length , VAR_2 . length ) )  assertEquals ( expected . length , VAR_2 . length ) ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < ( expected . length ) ) COND i < ( expected . length ) ( UPDATE UPDATE (  ++ i )  ++ i ) UPDATE UPDATE ( BLOCK BLOCK (  assertEquals ( ( STRING_1 + i ) , expected [ i ] , VAR_2 [ i ] ) )  assertEquals ( ( STRING_1 + i ) , expected [ i ] , VAR_2 [ i ] ) ) BLOCK BLOCK ) FOR FOR ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( STRING_1 ) ) INIT = METHOD_2 ( STRING_1 ) ) VAR VAR (  s = new TYPE_1 ( TYPE_2 . METHOD_3 ( ) . METHOD_4 ( ) , VAR_1 , true ) )  s = new TYPE_1 ( TYPE_2 . METHOD_3 ( ) . METHOD_4 ( ) , VAR_1 , true ) (  assertTrue ( STRING_2 , ( ( s . METHOD_5 ( ) ) == VAR_1 ) ) )  assertTrue ( STRING_2 , ( ( s . METHOD_5 ( ) ) == VAR_1 ) ) (  s = new TYPE_1 ( TYPE_2 . METHOD_3 ( ) . METHOD_4 ( ) , VAR_1 , false ) )  s = new TYPE_1 ( TYPE_2 . METHOD_3 ( ) . METHOD_4 ( ) , VAR_1 , false ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public final ) MODIFIER public final ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME sb ) NAME sb ( INIT = new TYPE_1 ( 100 ) ) INIT = new TYPE_1 ( 100 ) ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ( INIT = true ) INIT = true ) VAR VAR (  sb.append ( STRING_1 ) )  sb.append ( STRING_1 ) ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME i ) NAME i ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  VAR_1 = false )  VAR_1 = false ) THEN THEN ( ELSE ELSE (  sb.append ( STRING_2 ) )  sb.append ( STRING_2 ) ) ELSE ELSE ) IF IF (  sb.append ( i . METHOD_1 ( ) ) )  sb.append ( i . METHOD_1 ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  sb.append ( STRING_3 ) )  sb.append ( STRING_3 ) (  return sb . toString ( ) ; )  return sb . toString ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN com.android.jack.ir.ast.JDefinedClassOrInterface ) RETURN com.android.jack.ir.ast.JDefinedClassOrInterface ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_4 ) IN VAR_4 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  return VAR_3 . METHOD_1 ( this , VAR_1 ) ; )  return VAR_3 . METHOD_1 ( this , VAR_1 ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  throw new TYPE_4 ( this , VAR_1 ) ; )  throw new TYPE_4 ( this , VAR_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_1 ) ) COND ! ( VAR_1 ) ( THEN THEN (  throw new TYPE_2 ( STRING_1 ) ; )  throw new TYPE_2 ( STRING_1 ) ; ) THEN THEN ) IF IF (  return new TYPE_3 ( VAR_2 , this . METHOD_2 ( ) , this . METHOD_3 ( ) , this . METHOD_4 ( ) , this . METHOD_5 ( ) , offset , true ) ; )  return new TYPE_3 ( VAR_2 , this . METHOD_2 ( ) , this . METHOD_3 ( ) , this . METHOD_4 ( ) , this . METHOD_5 ( ) , offset , true ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  when ( VAR_1 . METHOD_2 ( METHOD_3 ( ) , METHOD_4 ( ) , METHOD_4 ( ) , METHOD_4 ( ) ) ) . thenReturn ( null ) )  when ( VAR_1 . METHOD_2 ( METHOD_3 ( ) , METHOD_4 ( ) , METHOD_4 ( ) , METHOD_4 ( ) ) ) . thenReturn ( null ) (  VAR_2 . METHOD_5 ( false ) )  VAR_2 . METHOD_5 ( false ) ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_2 . METHOD_6 ( ) ) INIT = VAR_2 . METHOD_6 ( ) ) VAR VAR (  VAR_2 . METHOD_7 ( VAR_4 ) )  VAR_2 . METHOD_7 ( VAR_4 ) ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_2 . METHOD_6 ( ) ) INIT = VAR_2 . METHOD_6 ( ) ) VAR VAR (  assertEquals ( ( VAR_3 * 2 ) , VAR_5 ) )  assertEquals ( ( VAR_3 * 2 ) , VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( METHOD_2 ( VAR_1 ) ) == ( VAR_3 ) ) COND ( METHOD_2 ( VAR_1 ) ) == ( VAR_3 ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME msg ) NAME msg ( INIT = ( ( ( ( ( ( STRING_1 + VAR_2 ) + STRING_2 ) + ( TYPE_1 . METHOD_3 ( ) ) ) + STRING_3 ) + ( TYPE_1 . METHOD_4 ( ) ) ) + STRING_4 ) + VAR_1 ) INIT = ( ( ( ( ( ( STRING_1 + VAR_2 ) + STRING_2 ) + ( TYPE_1 . METHOD_3 ( ) ) ) + STRING_3 ) + ( TYPE_1 . METHOD_4 ( ) ) ) + STRING_4 ) + VAR_1 ) VAR VAR (  android.util.Log.w ( com.android.server.am.ActivityManagerService.TAG , msg ) )  android.util.Log.w ( com.android.server.am.ActivityManagerService.TAG , msg ) (  throw new TYPE_2 ( msg ) ; )  throw new TYPE_2 ( msg ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( SWITCH SWITCH ( NAME VAR_1 ) NAME VAR_1 ( CASE VAR_2 ( BLOCK BLOCK (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) CASE VAR_2 ( CASE VAR_4 ( BLOCK BLOCK (  return VAR_8 ; )  return VAR_8 ; ) BLOCK BLOCK ) CASE VAR_4 ( CASE VAR_5 ( BLOCK BLOCK (  return VAR_8 ; )  return VAR_8 ; ) BLOCK BLOCK ) CASE VAR_5 ( CASE VAR_6 ( BLOCK BLOCK (  return VAR_8 ; )  return VAR_8 ; ) BLOCK BLOCK ) CASE VAR_6 ( CASE VAR_7 ( BLOCK BLOCK (  return VAR_8 ; )  return VAR_8 ; ) BLOCK BLOCK ) CASE VAR_7 ( CASE VAR_9 ( BLOCK BLOCK (  return VAR_13 ; )  return VAR_13 ; ) BLOCK BLOCK ) CASE VAR_9 ( CASE VAR_10 ( BLOCK BLOCK (  return VAR_13 ; )  return VAR_13 ; ) BLOCK BLOCK ) CASE VAR_10 ( CASE VAR_11 ( BLOCK BLOCK (  return VAR_13 ; )  return VAR_13 ; ) BLOCK BLOCK ) CASE VAR_11 ( CASE VAR_12 ( BLOCK BLOCK (  return VAR_13 ; )  return VAR_13 ; ) BLOCK BLOCK ) CASE VAR_12 ( CASE VAR_14 ( BLOCK BLOCK (  return VAR_15 ; )  return VAR_15 ; ) BLOCK BLOCK ) CASE VAR_14 ( CASE VAR_16 ( BLOCK BLOCK (  return VAR_17 ; )  return VAR_17 ; ) BLOCK BLOCK ) CASE VAR_16 ( CASE VAR_18 ( BLOCK BLOCK (  return VAR_19 ; )  return VAR_19 ; ) BLOCK BLOCK ) CASE VAR_18 ( CASE VAR_20 ( BLOCK BLOCK (  return VAR_21 ; )  return VAR_21 ; ) BLOCK BLOCK ) CASE VAR_20 ( DEFAULT DEFAULT ( BLOCK BLOCK (  return VAR_22 ; )  return VAR_22 ; ) BLOCK BLOCK ) DEFAULT DEFAULT ) SWITCH SWITCH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( STRING_1 ) ) INIT = new TYPE_2 ( STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_2 ( STRING_2 ) ) INIT = new TYPE_2 ( STRING_2 ) ) VAR VAR (  assertEquals ( VAR_3 . METHOD_2 ( ) . size ( ) , 0 ) )  assertEquals ( VAR_3 . METHOD_2 ( ) . size ( ) , 0 ) (  VAR_3 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_1 , VAR_2 ) ) )  VAR_3 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_1 , VAR_2 ) ) (  assertEquals ( VAR_3 . METHOD_2 ( ) . size ( ) , 2 ) )  assertEquals ( VAR_3 . METHOD_2 ( ) . size ( ) , 2 ) (  VAR_3 . METHOD_5 ( TYPE_3 . METHOD_4 ( VAR_1 , VAR_2 ) ) )  VAR_3 . METHOD_5 ( TYPE_3 . METHOD_4 ( VAR_1 , VAR_2 ) ) (  assertEquals ( VAR_3 . METHOD_2 ( ) . size ( ) , 0 ) )  assertEquals ( VAR_3 . METHOD_2 ( ) . size ( ) , 0 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( true ) ) INIT = new TYPE_1 ( true ) ) VAR VAR ( WHILE WHILE ( COND ! ( VAR_1 . METHOD_2 ( true , false ) ) ) COND ! ( VAR_1 . METHOD_2 ( true , false ) ) ( BLOCK BLOCK ) BLOCK BLOCK ) WHILE WHILE (  assertFalse ( VAR_1 . get ( ) ) )  assertFalse ( VAR_1 . get ( ) ) ( WHILE WHILE ( COND ! ( VAR_1 . METHOD_2 ( false , false ) ) ) COND ! ( VAR_1 . METHOD_2 ( false , false ) ) ( BLOCK BLOCK ) BLOCK BLOCK ) WHILE WHILE (  assertFalse ( VAR_1 . get ( ) ) )  assertFalse ( VAR_1 . get ( ) ) ( WHILE WHILE ( COND ! ( VAR_1 . METHOD_2 ( false , true ) ) ) COND ! ( VAR_1 . METHOD_2 ( false , true ) ) ( BLOCK BLOCK ) BLOCK BLOCK ) WHILE WHILE (  assertTrue ( VAR_1 . get ( ) ) )  assertTrue ( VAR_1 . get ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( VAR_2 , false ) ) INIT = new TYPE_1 ( VAR_2 , false ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_1 ( VAR_2 , false ) ) INIT = new TYPE_1 ( VAR_2 , false ) ) VAR VAR (  assertEquals ( VAR_1 , VAR_3 ) )  assertEquals ( VAR_1 , VAR_3 ) (  VAR_3 = new TYPE_1 ( VAR_2 , true ) )  VAR_3 = new TYPE_1 ( VAR_2 , true ) (  assertFalse ( VAR_1 . equals ( VAR_3 ) ) )  assertFalse ( VAR_1 . equals ( VAR_3 ) ) (  VAR_3 = new TYPE_1 ( VAR_4 , false ) )  VAR_3 = new TYPE_1 ( VAR_4 , false ) (  assertFalse ( VAR_1 . equals ( VAR_3 ) ) )  assertFalse ( VAR_1 . equals ( VAR_3 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) != null ) COND ( VAR_1 ) != null ( THEN THEN (  VAR_1 . METHOD_2 ( ) )  VAR_1 . METHOD_2 ( ) (  VAR_1 = null )  VAR_1 = null ) THEN THEN ) IF IF ( TRY TRY ( BLOCK BLOCK (  VAR_2 . METHOD_2 ( ) )  VAR_2 . METHOD_2 ( ) (  VAR_2 = null )  VAR_2 = null ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK (  android.util.Log.e ( VAR_3 . TAG , ( STRING_1 + ( e.toString ( ) ) ) ) )  android.util.Log.e ( VAR_3 . TAG , ( STRING_1 + ( e.toString ( ) ) ) ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  VAR_4 . METHOD_3 ( VAR_5 ) . METHOD_4 ( ) )  VAR_4 . METHOD_3 ( VAR_5 ) . METHOD_4 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = INT_1 ) INIT = INT_1 ) VAR VAR ( VAR VAR ( TYPE android.os.Bundle ) TYPE android.os.Bundle ( NAME args ) NAME args ( INIT = new android.os.Bundle ( ) ) INIT = new android.os.Bundle ( ) ) VAR VAR (  args . METHOD_2 ( STRING_1 , VAR_1 ) )  args . METHOD_2 ( STRING_1 , VAR_1 ) (  args . METHOD_2 ( STRING_2 , VAR_2 ) )  args . METHOD_2 ( STRING_2 , VAR_2 ) (  TYPE_2 . METHOD_3 ( TYPE_3 . METHOD_4 ( args ) . toString ( ) ) )  TYPE_2 . METHOD_3 ( TYPE_3 . METHOD_4 ( args ) . toString ( ) ) (  org.mockito.Mockito.verify ( VAR_3 ) . METHOD_5 ( VAR_1 , VAR_4 , true ) )  org.mockito.Mockito.verify ( VAR_3 ) . METHOD_5 ( VAR_1 , VAR_4 , true ) (  TYPE_4 . METHOD_6 ( VAR_3 ) )  TYPE_4 . METHOD_6 ( VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) == null ) COND ( VAR_1 ) == null ( THEN THEN ( IF IF ( COND ! ( ( METHOD_2 ( ) ) || ( METHOD_3 ( ) ) ) ) COND ! ( ( METHOD_2 ( ) ) || ( METHOD_3 ( ) ) ) ( THEN THEN (  throw new java.lang.IllegalArgumentException ( ( STRING_1 + ( VAR_2 ) ) ) ; )  throw new java.lang.IllegalArgumentException ( ( STRING_1 + ( VAR_2 ) ) ) ; ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_2 . METHOD_4 ( 0 ) ) == CHAR_1 ) COND ( VAR_2 . METHOD_4 ( 0 ) ) == CHAR_1 ( THEN THEN (  VAR_1 = VAR_2 )  VAR_1 = VAR_2 ) THEN THEN ( ELSE ELSE (  VAR_1 = VAR_2 . METHOD_5 ( 1 , ( ( VAR_2 . length ( ) ) - 1 ) ) )  VAR_1 = VAR_2 . METHOD_5 ( 1 , ( ( VAR_2 . length ( ) ) - 1 ) ) ) ELSE ELSE ) IF IF ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  VAR_2 . METHOD_2 ( ) )  VAR_2 . METHOD_2 ( ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_2 . METHOD_3 ( ) ) INIT = TYPE_2 . METHOD_3 ( ) ) VAR VAR ( IF IF ( COND VAR_4 ) COND VAR_4 ( THEN THEN (  VAR_3 . METHOD_4 ( VAR_1 , false ) )  VAR_3 . METHOD_4 ( VAR_1 , false ) ) THEN THEN ( ELSE ELSE (  VAR_3 . METHOD_4 ( VAR_1 ) )  VAR_3 . METHOD_4 ( VAR_1 ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Throwable ) TYPE java.lang.Throwable ( NAME e ) NAME e ( BLOCK BLOCK (  throw TYPE_3 . METHOD_5 ( e ) ; )  throw TYPE_3 . METHOD_5 ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ( FINALLY FINALLY (  VAR_2 . METHOD_6 ( ) )  VAR_2 . METHOD_6 ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 . METHOD_2 ( ) ) COND VAR_1 . METHOD_2 ( ) ( THEN THEN (  VAR_2 . METHOD_3 ( this ) )  VAR_2 . METHOD_3 ( this ) (  VAR_2 . METHOD_4 ( this ) )  VAR_2 . METHOD_4 ( this ) ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_3 ) != null ) COND ( VAR_3 ) != null ( THEN THEN (  VAR_1 . METHOD_5 ( VAR_3 ) )  VAR_1 . METHOD_5 ( VAR_3 ) ) THEN THEN ) IF IF (  VAR_1 . METHOD_5 ( VAR_4 ) )  VAR_1 . METHOD_5 ( VAR_4 ) ( IF IF ( COND ( VAR_5 ) != null ) COND ( VAR_5 ) != null ( THEN THEN (  VAR_1 . METHOD_5 ( VAR_5 ) )  VAR_1 . METHOD_5 ( VAR_5 ) ) THEN THEN ) IF IF (  VAR_6 . METHOD_6 ( VAR_1 ) )  VAR_6 . METHOD_6 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SWITCH SWITCH ( NAME VAR_1 ) NAME VAR_1 ( CASE VAR_2 ( BLOCK BLOCK (  VAR_3 . METHOD_2 ( VAR_4 ) )  VAR_3 . METHOD_2 ( VAR_4 ) (  VAR_3 . METHOD_3 ( true ) )  VAR_3 . METHOD_3 ( true ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_2 ( CASE VAR_5 ( BLOCK BLOCK (  VAR_3 . METHOD_2 ( VAR_6 ) )  VAR_3 . METHOD_2 ( VAR_6 ) (  VAR_3 . METHOD_3 ( true ) )  VAR_3 . METHOD_3 ( true ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_5 ( CASE VAR_7 ( BLOCK BLOCK (  VAR_3 . METHOD_2 ( VAR_8 ) )  VAR_3 . METHOD_2 ( VAR_8 ) (  VAR_3 . METHOD_3 ( true ) )  VAR_3 . METHOD_3 ( true ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_7 ( DEFAULT DEFAULT ( BLOCK BLOCK (  VAR_3 . METHOD_2 ( null ) )  VAR_3 . METHOD_2 ( null ) (  VAR_3 . METHOD_3 ( false ) )  VAR_3 . METHOD_3 ( false ) (  break ; )  break ; ) BLOCK BLOCK ) DEFAULT DEFAULT ) SWITCH SWITCH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) (  TYPE_1 . METHOD_2 ( this ) )  TYPE_1 . METHOD_2 ( this ) (  VAR_1 = TYPE_2 . METHOD_3 ( VAR_2 class ) )  VAR_1 = TYPE_2 . METHOD_3 ( VAR_2 class ) (  TYPE_2 . METHOD_4 ( VAR_2 class ) )  TYPE_2 . METHOD_4 ( VAR_2 class ) (  TYPE_2 . METHOD_5 ( VAR_2 class , VAR_3 ) )  TYPE_2 . METHOD_5 ( VAR_2 class , VAR_3 ) (  TYPE_3 . when ( mContext . METHOD_6 ( VAR_4 ) ) . thenReturn ( VAR_5 ) )  TYPE_3 . when ( mContext . METHOD_6 ( VAR_4 ) ) . thenReturn ( VAR_5 ) (  TYPE_3 . when ( mContext . METHOD_6 ( VAR_6 ) ) . thenReturn ( VAR_7 ) )  TYPE_3 . when ( mContext . METHOD_6 ( VAR_6 ) ) . thenReturn ( VAR_7 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_1 . METHOD_2 ( ) . length ( ) ) == 0 ) COND ( VAR_1 . METHOD_2 ( ) . length ( ) ) == 0 ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( VAR_1 ) ) INIT = new TYPE_1 ( VAR_1 ) ) VAR VAR (  return ( VAR_2 . METHOD_3 ( ) ) == ( VAR_3 ) ; )  return ( VAR_2 . METHOD_3 ( ) ) == ( VAR_3 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( IN TYPE_3 . METHOD_2 ( ) ) IN TYPE_3 . METHOD_2 ( ) ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME project ) NAME project ( INIT = VAR_1 . METHOD_3 ( ) ) INIT = VAR_1 . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME state ) NAME state ( INIT = TYPE_5 . METHOD_4 ( project ) ) INIT = TYPE_5 . METHOD_4 ( project ) ) VAR VAR ( IF IF ( COND state . METHOD_5 ( ) ) COND state . METHOD_5 ( ) ( THEN THEN ( VAR VAR ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_6 . get ( project ) ) INIT = TYPE_6 . get ( project ) ) VAR VAR ( IF IF ( COND VAR_2 . METHOD_6 ( ) . equals ( STRING_1 ) ) COND VAR_2 . METHOD_6 ( ) . equals ( STRING_1 ) ( THEN THEN (  return project ; )  return project ; ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME a ) NAME a ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME b ) NAME b ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME c ) NAME c ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME d ) NAME d ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME e ) NAME e ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME f ) NAME f ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int[] ) TYPE int[] ( NAME values ) NAME values ( INIT = new int [ ] { a , b , c , d , e , f } ) INIT = new int [ ] { a , b , c , d , e , f } ) VAR VAR (  VAR_1 . println ( ( ( STRING_1 + ( TYPE_1 . toString ( values ) ) ) + STRING_2 ) ) )  VAR_1 . println ( ( ( STRING_1 + ( TYPE_1 . toString ( values ) ) ) + STRING_2 ) ) (  return a > b ? a : b ; )  return a > b ? a : b ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( VAR_2 ) ) INIT = new TYPE_2 ( VAR_2 ) ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < ( VAR_2 ) ) COND i < ( VAR_2 ) ( UPDATE UPDATE (  ++ i )  ++ i ) UPDATE UPDATE ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.Integer ) TYPE java.lang.Integer ( NAME VAR_3 ) NAME VAR_3 ( INIT = new java.lang.Integer ( i ) ) INIT = new java.lang.Integer ( i ) ) VAR VAR (  VAR_1 . METHOD_2 ( VAR_3 ) )  VAR_1 . METHOD_2 ( VAR_3 ) (  assertTrue ( VAR_1 . METHOD_3 ( VAR_3 ) ) )  assertTrue ( VAR_1 . METHOD_3 ( VAR_3 ) ) ) BLOCK BLOCK ) FOR FOR (  assertEquals ( 0 , VAR_1 . METHOD_4 ( ) ) )  assertEquals ( 0 , VAR_1 . METHOD_4 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME context ) NAME context ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND context . METHOD_2 ( VAR_2 ) ) COND context . METHOD_2 ( VAR_2 ) ( THEN THEN ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_4 ) NAME VAR_4 ( INIT = context . METHOD_3 ( ) ) INIT = context . METHOD_3 ( ) ) VAR VAR ( IF IF ( COND VAR_4 ) COND VAR_4 ( THEN THEN ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_5 ) NAME VAR_5 ( INIT = METHOD_4 ( context , VAR_1 ) ) INIT = METHOD_4 ( context , VAR_1 ) ) VAR VAR ( IF IF ( COND ( VAR_5 >= 0 ) && ( context . METHOD_5 ( VAR_5 , VAR_2 ) ) ) COND ( VAR_5 >= 0 ) && ( context . METHOD_5 ( VAR_5 , VAR_2 ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  context . METHOD_1 ( VAR_2 , METHOD_6 ( context , VAR_1 ) , VAR_3 , null ) )  context . METHOD_1 ( VAR_2 , METHOD_6 ( context , VAR_1 ) , VAR_3 , null ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME count ) NAME count ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND count < 0 ) COND count < 0 ( THEN THEN (  throw new java.lang.IllegalArgumentException ( STRING_1 ) ; )  throw new java.lang.IllegalArgumentException ( STRING_1 ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( VAR_2 ) + count ) INIT = ( VAR_2 ) + count ) VAR VAR ( IF IF ( COND VAR_3 ) COND VAR_3 ( THEN THEN (  METHOD_2 ( VAR_1 ) )  METHOD_2 ( VAR_1 ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND VAR_1 > ( data . length ) ) COND VAR_1 > ( data . length ) ( THEN THEN (  TYPE_1 . METHOD_3 ( ) )  TYPE_1 . METHOD_3 ( ) (  return ; )  return ; ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF (  TYPE_2 . METHOD_4 ( data , VAR_2 , VAR_1 , ( ( byte ) ( 0 ) ) ) )  TYPE_2 . METHOD_4 ( data , VAR_2 , VAR_1 , ( ( byte ) ( 0 ) ) ) (  VAR_2 = VAR_1 )  VAR_2 = VAR_1 ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN TYPE_1<TYPE_2> ) RETURN TYPE_1<TYPE_2> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME context ) NAME context ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( TYPE_4 . get ( context ) . METHOD_2 ( VAR_1 , false ) ) ) COND ! ( TYPE_4 . get ( context ) . METHOD_2 ( VAR_1 , false ) ) ( THEN THEN (  return TYPE_1 . METHOD_3 ( ) ; )  return TYPE_1 . METHOD_3 ( ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_5 . METHOD_4 ( context ) . METHOD_5 ( ) ) INIT = TYPE_5 . METHOD_4 ( context ) . METHOD_5 ( ) ) VAR VAR (  return TYPE_6 . METHOD_6 ( VAR_2 ) ? TYPE_1 . of ( TYPE_6 . get ( VAR_2 ) ) : TYPE_1 . METHOD_3 ( ) ; )  return TYPE_6 . METHOD_6 ( VAR_2 ) ? TYPE_1 . of ( TYPE_6 . get ( VAR_2 ) ) : TYPE_1 . METHOD_3 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) (  VAR_1 . METHOD_2 ( VAR_2 ) )  VAR_1 . METHOD_2 ( VAR_2 ) (  VAR_3 . METHOD_3 ( VAR_4 ) )  VAR_3 . METHOD_3 ( VAR_4 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_5 ) NAME VAR_5 ( INIT = ( ( TYPE_1 ) ( VAR_6 . METHOD_4 ( ) ) ) ) INIT = ( ( TYPE_1 ) ( VAR_6 . METHOD_4 ( ) ) ) ) VAR VAR (  VAR_5 . flags &= ~ ( VAR_7 ) )  VAR_5 . flags &= ~ ( VAR_7 ) (  VAR_8 . METHOD_5 ( VAR_6 , VAR_5 ) )  VAR_8 . METHOD_5 ( VAR_6 , VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME server ) NAME server ( INIT = new TYPE_1 ( 0 ) ) INIT = new TYPE_1 ( 0 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( TYPE_3 . METHOD_2 ( ) , server . METHOD_3 ( ) , null , 0 ) ) INIT = new TYPE_2 ( TYPE_3 . METHOD_2 ( ) , server . METHOD_3 ( ) , null , 0 ) ) VAR VAR (  VAR_1 . METHOD_4 ( true ) )  VAR_1 . METHOD_4 ( true ) (  assertTrue ( STRING_1 , VAR_1 . METHOD_5 ( ) ) )  assertTrue ( STRING_1 , VAR_1 . METHOD_5 ( ) ) (  VAR_1 . METHOD_4 ( false ) )  VAR_1 . METHOD_4 ( false ) (  assertFalse ( STRING_2 , VAR_1 . METHOD_5 ( ) ) )  assertFalse ( STRING_2 , VAR_1 . METHOD_5 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE short ) TYPE short ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE short ) TYPE short ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_5 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) )  VAR_5 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME error ) NAME error ( INIT = new byte [ 2 ] ) INIT = new byte [ 2 ] ) VAR VAR (  error [ 0 ] = ( ( byte ) ( VAR_1 ) ) )  error [ 0 ] = ( ( byte ) ( VAR_1 ) ) (  error [ 1 ] = ( ( byte ) ( VAR_2 ) ) )  error [ 1 ] = ( ( byte ) ( VAR_2 ) ) (  METHOD_3 ( VAR_6 , error , 0 , 2 ) )  METHOD_3 ( VAR_6 , error , 0 , 2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE long ) TYPE long ( NAME i ) NAME i ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME output ) NAME output ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  output . METHOD_2 ( ( ( int ) ( i > > INT_1 ) ) ) )  output . METHOD_2 ( ( ( int ) ( i > > INT_1 ) ) ) (  output . METHOD_2 ( ( ( int ) ( i > > 16 ) ) ) )  output . METHOD_2 ( ( ( int ) ( i > > 16 ) ) ) (  output . METHOD_2 ( ( ( int ) ( i > > 8 ) ) ) )  output . METHOD_2 ( ( ( int ) ( i > > 8 ) ) ) (  output . METHOD_2 ( ( ( int ) ( i ) ) ) )  output . METHOD_2 ( ( ( int ) ( i ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_3 ( ) ) INIT = METHOD_3 ( ) ) VAR VAR (  return ( ( ( ( ( VAR_1 == 0 ? STRING_1 : ( TYPE_2 . toString ( VAR_1 ) ) + STRING_2 ) + ( VAR_2 instanceof java.lang.Class ? TYPE_3 . METHOD_4 ( ( ( java.lang.Class ) ( VAR_2 ) ) ) : VAR_2 . toString ( ) ) ) + STRING_2 ) + ( TYPE_3 . METHOD_4 ( METHOD_5 ( ) ) ) ) + STRING_3 ) + ( getName ( ) ) ; )  return ( ( ( ( ( VAR_1 == 0 ? STRING_1 : ( TYPE_2 . toString ( VAR_1 ) ) + STRING_2 ) + ( VAR_2 instanceof java.lang.Class ? TYPE_3 . METHOD_4 ( ( ( java.lang.Class ) ( VAR_2 ) ) ) : VAR_2 . toString ( ) ) ) + STRING_2 ) + ( TYPE_3 . METHOD_4 ( METHOD_5 ( ) ) ) ) + STRING_3 ) + ( getName ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( PARAMS PARAMS ( VAR VAR ( TYPE com.android.jack.ir.ast.JMethod ) TYPE com.android.jack.ir.ast.JMethod ( NAME method ) NAME method ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( ( method . METHOD_1 ( ) . METHOD_2 ( ) ) || ( method . METHOD_3 ( ) ) ) || ( method . METHOD_4 ( ) ) ) || ( ! ( VAR_1 . METHOD_5 ( this . METHOD_6 ( ) , method ) ) ) ) COND ( ( ( method . METHOD_1 ( ) . METHOD_2 ( ) ) || ( method . METHOD_3 ( ) ) ) || ( method . METHOD_4 ( ) ) ) || ( ! ( VAR_1 . METHOD_5 ( this . METHOD_6 ( ) , method ) ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( method ) ) INIT = new TYPE_1 ( method ) ) VAR VAR (  VAR_2 . METHOD_5 ( method ) )  VAR_2 . METHOD_5 ( method ) (  new TYPE_2 ( ) . METHOD_5 ( method ) )  new TYPE_2 ( ) . METHOD_5 ( method ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME element ) NAME element ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = element . METHOD_2 ( VAR_2 , VAR_3 ) ) INIT = element . METHOD_2 ( VAR_2 , VAR_3 ) ) VAR VAR ( IF IF ( COND ( VAR_1 != null ) && ( ! ( VAR_1 . METHOD_3 ( ) ) ) ) COND ( VAR_1 != null ) && ( ! ( VAR_1 . METHOD_3 ( ) ) ) ( THEN THEN (  return TYPE_2 . METHOD_4 ( VAR_1 ) ; )  return TYPE_2 . METHOD_4 ( VAR_1 ) ; ) THEN THEN ( ELSE ELSE ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( IN TYPE_3 . METHOD_5 ( element ) ) IN TYPE_3 . METHOD_5 ( element ) ( BLOCK BLOCK ( IF IF ( COND VAR_4 . METHOD_6 ( ) . equals ( VAR_5 ) ) COND VAR_4 . METHOD_6 ( ) . equals ( VAR_5 ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) ELSE ELSE ) IF IF (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  this )  this ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) == null ) COND ( VAR_1 ) == null ( THEN THEN ( TRY TRY ( BLOCK BLOCK (  VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 class . METHOD_3 ( VAR_3 ) ) )  VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 class . METHOD_3 ( VAR_3 ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_4 . error ( e , null ) )  VAR_4 . error ( e , null ) (  VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) )  VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_4 . error ( null , STRING_1 ) )  VAR_4 . error ( null , STRING_1 ) (  VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) )  VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) THEN THEN ) IF IF ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . METHOD_3 ( ) ) INIT = VAR_3 . METHOD_3 ( ) ) VAR VAR (  org.mockito.Mockito.verify ( VAR_4 ) . METHOD_3 ( org.mockito.Matchers.eq ( VAR_1 ) , org.mockito.Matchers . METHOD_4 ( int . class ) ) )  org.mockito.Mockito.verify ( VAR_4 ) . METHOD_3 ( org.mockito.Matchers.eq ( VAR_1 ) , org.mockito.Matchers . METHOD_4 ( int . class ) ) (  assertEquals ( VAR_2 , true ) )  assertEquals ( VAR_2 , true ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public final ) MODIFIER public final ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME format ) NAME format ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  VAR_4 )  VAR_4 ( BLOCK BLOCK ( IF IF ( COND ( VAR_5 ) == null ) COND ( VAR_5 ) == null ( THEN THEN (  throw new TYPE_1 ( STRING_1 ) ; )  throw new TYPE_1 ( STRING_1 ) ; ) THEN THEN ) IF IF ( TRY TRY ( BLOCK BLOCK (  VAR_5 . METHOD_1 ( VAR_1 , VAR_2 , format , VAR_3 ) )  VAR_5 . METHOD_1 ( VAR_1 , VAR_2 , format , VAR_3 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME e ) NAME e ( BLOCK BLOCK (  android.util.Log.e ( VAR_6 , ( STRING_2 + ( e.getMessage ( ) ) ) ) )  android.util.Log.e ( VAR_6 , ( STRING_2 + ( e.getMessage ( ) ) ) ) (  METHOD_2 ( VAR_1 , VAR_2 , VAR_7 ) )  METHOD_2 ( VAR_1 , VAR_2 , VAR_7 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( VAR_1 ) )  TYPE_1 . METHOD_2 ( VAR_1 ) (  VAR_2 = null )  VAR_2 = null (  VAR_1 = null )  VAR_1 = null (  VAR_3 = null )  VAR_3 = null (  VAR_4 = null )  VAR_4 = null (  VAR_5 = null )  VAR_5 = null (  VAR_6 = null )  VAR_6 = null (  VAR_7 . METHOD_3 ( ) )  VAR_7 . METHOD_3 ( ) (  VAR_8 = null )  VAR_8 = null (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND METHOD_2 ( ) . METHOD_3 ( ) ) COND METHOD_2 ( ) . METHOD_3 ( ) ( THEN THEN (  com.android.tradefed.log.LogUtil.CLog.i ( STRING_1 ) )  com.android.tradefed.log.LogUtil.CLog.i ( STRING_1 ) (  METHOD_4 ( STRING_2 ) )  METHOD_4 ( STRING_2 ) (  METHOD_4 ( java.lang.String.format ( STRING_3 , VAR_2 ) ) )  METHOD_4 ( java.lang.String.format ( STRING_3 , VAR_2 ) ) (  METHOD_4 ( STRING_4 ) )  METHOD_4 ( STRING_4 ) (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_2 ( ) { public boolean run ( ) throws TYPE_3 , TYPE_4 , java.io.IOException { METHOD_2 ( ) . METHOD_5 ( VAR_1 ) ; return true ; } } ) INIT = new TYPE_2 ( ) { public boolean run ( ) throws TYPE_3 , TYPE_4 , java.io.IOException { METHOD_2 ( ) . METHOD_5 ( VAR_1 ) ; return true ; } } ) VAR VAR ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME run ) NAME run ( BLOCK BLOCK (  METHOD_2 ( ) . METHOD_5 ( VAR_1 ) )  METHOD_2 ( ) . METHOD_5 ( VAR_1 ) (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD (  METHOD_6 ( STRING_5 , VAR_3 , VAR_4 ) )  METHOD_6 ( STRING_5 , VAR_3 , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public synchronized ) MODIFIER public synchronized ( RETURN long ) RETURN long ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE long ) TYPE long ( NAME n ) NAME n ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  return 0 ; )  return 0 ; ) THEN THEN ) IF IF ( IF IF ( COND ( in ) instanceof TYPE_1 ) COND ( in ) instanceof TYPE_1 ( THEN THEN (  n = in . METHOD_1 ( n ) )  n = in . METHOD_1 ( n ) ) THEN THEN ( ELSE ELSE ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( n > ( ( expected ) - ( count ) ) ) ? ( expected ) - ( count ) : n ) INIT = ( n > ( ( expected ) - ( count ) ) ) ? ( expected ) - ( count ) : n ) VAR VAR (  n = in . METHOD_1 ( VAR_2 ) )  n = in . METHOD_1 ( VAR_2 ) ) ELSE ELSE ) IF IF (  METHOD_2 ( n ) )  METHOD_2 ( n ) (  return n ; )  return n ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME line ) NAME line ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_3 ) != null ) COND ( VAR_3 ) != null ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( IN VAR_3 ) IN VAR_3 ( BLOCK BLOCK ( IF IF ( COND VAR_4 . METHOD_1 ( VAR_1 , VAR_2 , line ) ) COND VAR_4 . METHOD_1 ( VAR_1 , VAR_2 , line ) ( THEN THEN (  break ; )  break ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME c ) NAME c ( INIT = TYPE_1 . METHOD_2 ( ) ) INIT = TYPE_1 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME s ) NAME s ( INIT = TYPE_1 . METHOD_3 ( c ) ) INIT = TYPE_1 . METHOD_3 ( c ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  TYPE_1 . METHOD_4 ( s ) )  TYPE_1 . METHOD_4 ( s ) (  fail ( ) )  fail ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME expected ) NAME expected ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  TYPE_1 . METHOD_5 ( s ) )  TYPE_1 . METHOD_5 ( s ) (  TYPE_1 . METHOD_6 ( c ) )  TYPE_1 . METHOD_6 ( c ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) ( SYNCHRONIZED SYNCHRONIZED (  VAR_3 )  VAR_3 ( BLOCK BLOCK (  ( VAR_4 ) ++ )  ( VAR_4 ) ++ (  VAR_3 . METHOD_3 ( new TYPE_2 ( VAR_2 , VAR_1 ) ) )  VAR_3 . METHOD_3 ( new TYPE_2 ( VAR_2 , VAR_1 ) ) (  VAR_5 . METHOD_4 ( ) )  VAR_5 . METHOD_4 ( ) ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ( VAR VAR ( TYPE int ) TYPE int ( NAME uid ) NAME uid ( INIT = TYPE_3 . METHOD_5 ( ) ) INIT = TYPE_3 . METHOD_5 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_6 ) NAME VAR_6 ( INIT = TYPE_3 . METHOD_6 ( ) ) INIT = TYPE_3 . METHOD_6 ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_7 . METHOD_7 ( uid ) )  VAR_7 . METHOD_7 ( uid ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ( FINALLY FINALLY (  TYPE_3 . METHOD_8 ( VAR_6 ) )  TYPE_3 . METHOD_8 ( VAR_6 ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 = VAR_2 . METHOD_2 ( 0 , STRING_1 , STRING_2 , null , null ) )  VAR_1 = VAR_2 . METHOD_2 ( 0 , STRING_1 , STRING_2 , null , null ) (  VAR_1 . METHOD_3 ( ) )  VAR_1 . METHOD_3 ( ) (  VAR_1 . METHOD_4 ( VAR_3 , 0 ) )  VAR_1 . METHOD_4 ( VAR_3 , 0 ) (  VAR_1 . METHOD_5 ( VAR_4 , STRING_3 , STRING_1 , STRING_2 ) )  VAR_1 . METHOD_5 ( VAR_4 , STRING_3 , STRING_1 , STRING_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<TYPE_2> ) RETURN TYPE_1<TYPE_2> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( METHOD_2 ( VAR_1 ) ) ) COND ! ( METHOD_2 ( VAR_1 ) ) ( THEN THEN (  return VAR_2 < TYPE_2 > of ( ) . METHOD_1 ( ) ; )  return VAR_2 < TYPE_2 > of ( ) . METHOD_1 ( ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME VAR_3 ) NAME VAR_3 ( INIT = new java.util.ArrayList < TYPE_2 > ( ) ) INIT = new java.util.ArrayList < TYPE_2 > ( ) ) VAR VAR (  METHOD_3 ( METHOD_4 ( VAR_1 ) . METHOD_5 ( ) , VAR_1 , VAR_3 ) )  METHOD_3 ( METHOD_4 ( VAR_1 ) . METHOD_5 ( ) , VAR_1 , VAR_3 ) (  return VAR_3 . METHOD_6 ( ) ; )  return VAR_3 . METHOD_6 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . i ( STRING_1 , STRING_2 ) )  TYPE_1 . i ( STRING_1 , STRING_2 ) (  TYPE_2 . METHOD_2 ( mContext ) )  TYPE_2 . METHOD_2 ( mContext ) (  METHOD_3 ( VAR_1 . METHOD_4 ( ) , METHOD_5 ( ) ) )  METHOD_3 ( VAR_1 . METHOD_4 ( ) , METHOD_5 ( ) ) (  METHOD_6 ( VAR_1 . METHOD_7 ( ) , VAR_1 . METHOD_8 ( ) , VAR_1 . METHOD_9 ( ) . METHOD_10 ( ) , VAR_1 . METHOD_11 ( ) ) )  METHOD_6 ( VAR_1 . METHOD_7 ( ) , VAR_1 . METHOD_8 ( ) , VAR_1 . METHOD_9 ( ) . METHOD_10 ( ) , VAR_1 . METHOD_11 ( ) ) (  TYPE_3 . METHOD_12 ( ) . METHOD_13 ( ) . METHOD_1 ( ) )  TYPE_3 . METHOD_12 ( ) . METHOD_13 ( ) . METHOD_1 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME packageName ) NAME packageName ) VAR VAR ( VAR VAR ( TYPE java.util.Set<java.lang.String> ) TYPE java.util.Set<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.Set<java.lang.String> ) TYPE java.util.Set<java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = packageName + CHAR_1 ) INIT = packageName + CHAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_3 . METHOD_2 ( CHAR_1 , CHAR_2 ) ) INIT = VAR_3 . METHOD_2 ( CHAR_1 , CHAR_2 ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME entry ) NAME entry ( IN VAR_5 ) IN VAR_5 ( BLOCK BLOCK ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_6 ) NAME VAR_6 ( INIT = new java.io.File ( entry ) ) INIT = new java.io.File ( entry ) ) VAR VAR ( IF IF ( COND ( VAR_6 . METHOD_3 ( ) ) && ( ! ( VAR_6 . METHOD_4 ( ) ) ) ) COND ( VAR_6 . METHOD_3 ( ) ) && ( ! ( VAR_6 . METHOD_4 ( ) ) ) ( THEN THEN (  VAR_7 . METHOD_5 ( VAR_6 , VAR_4 , packageName , VAR_1 , VAR_2 ) )  VAR_7 . METHOD_5 ( VAR_6 , VAR_4 , packageName , VAR_1 , VAR_2 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME expected ) NAME expected ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( expected . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) ) COND ! ( expected . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) ( THEN THEN ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( ( TYPE_3 ) ( expected ) ) ) INIT = ( ( TYPE_3 ) ( expected ) ) ) VAR VAR (  return new TYPE_4 ( VAR_1 . METHOD_4 ( ) , VAR_1 , VAR_2 ) ; )  return new TYPE_4 ( VAR_1 . METHOD_4 ( ) , VAR_1 , VAR_2 ) ; ) THEN THEN ( ELSE ELSE (  return VAR_1 ; )  return VAR_1 ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME event ) NAME event ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND event . METHOD_2 ( ) . equals ( VAR_1 ) ) COND event . METHOD_2 ( ) . equals ( VAR_1 ) ( THEN THEN (  VAR_2 . METHOD_3 ( VAR_1 . METHOD_4 ( ) , METHOD_5 ( ) ) )  VAR_2 . METHOD_3 ( VAR_1 . METHOD_4 ( ) , METHOD_5 ( ) ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND event . METHOD_2 ( ) . equals ( VAR_3 ) ) COND event . METHOD_2 ( ) . equals ( VAR_3 ) ( THEN THEN (  TYPE_2 . METHOD_6 ( VAR_3 . METHOD_7 ( ) ) )  TYPE_2 . METHOD_6 ( VAR_3 . METHOD_7 ( ) ) ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SWITCH SWITCH ( NAME VAR_1 ) NAME VAR_1 ( CASE VAR_3 ( BLOCK BLOCK (  return new TYPE_4 ( this ) ; )  return new TYPE_4 ( this ) ; ) BLOCK BLOCK ) CASE VAR_3 ( CASE VAR_4 ( BLOCK BLOCK (  return new TYPE_5 ( this , VAR_1 , VAR_2 ) ; )  return new TYPE_5 ( this , VAR_1 , VAR_2 ) ; ) BLOCK BLOCK ) CASE VAR_4 ( CASE VAR_5 ( BLOCK BLOCK (  return new TYPE_5 ( this , VAR_1 , VAR_2 ) ; )  return new TYPE_5 ( this , VAR_1 , VAR_2 ) ; ) BLOCK BLOCK ) CASE VAR_5 ( CASE VAR_6 ( BLOCK BLOCK (  return new TYPE_5 ( this , VAR_1 , VAR_2 ) ; )  return new TYPE_5 ( this , VAR_1 , VAR_2 ) ; ) BLOCK BLOCK ) CASE VAR_6 ( CASE VAR_7 ( BLOCK BLOCK (  return new TYPE_6 ( this , VAR_1 , VAR_2 ) ; )  return new TYPE_6 ( this , VAR_1 , VAR_2 ) ; ) BLOCK BLOCK ) CASE VAR_7 ( CASE VAR_8 ( BLOCK BLOCK (  return new TYPE_6 ( this , VAR_1 , VAR_2 ) ; )  return new TYPE_6 ( this , VAR_1 , VAR_2 ) ; ) BLOCK BLOCK ) CASE VAR_8 ( CASE VAR_9 ( BLOCK BLOCK (  return new TYPE_6 ( this , VAR_1 , VAR_2 ) ; )  return new TYPE_6 ( this , VAR_1 , VAR_2 ) ; ) BLOCK BLOCK ) CASE VAR_9 ( CASE VAR_10 ( BLOCK BLOCK (  return new TYPE_6 ( this , VAR_1 , VAR_2 ) ; )  return new TYPE_6 ( this , VAR_1 , VAR_2 ) ; ) BLOCK BLOCK ) CASE VAR_10 ( CASE VAR_11 ( BLOCK BLOCK (  return new TYPE_7 ( this ) ; )  return new TYPE_7 ( this ) ; ) BLOCK BLOCK ) CASE VAR_11 ( DEFAULT DEFAULT ( BLOCK BLOCK (  throw new java.lang.IllegalArgumentException ( ( STRING_1 + VAR_1 ) ) ; )  throw new java.lang.IllegalArgumentException ( ( STRING_1 + VAR_1 ) ) ; ) BLOCK BLOCK ) DEFAULT DEFAULT ) SWITCH SWITCH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME key ) NAME key ( INIT = VAR_2 + VAR_3 ) INIT = VAR_2 + VAR_3 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_6 ) NAME VAR_6 ( INIT = VAR_7 . get ( key ) ) INIT = VAR_7 . get ( key ) ) VAR VAR ( IF IF ( COND VAR_6 == null ) COND VAR_6 == null ( THEN THEN (  return new TYPE_1 ( VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; )  return new TYPE_1 ( VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; ) THEN THEN ) IF IF (  return new TYPE_1 ( VAR_8 , VAR_3 , TYPE_3 . METHOD_2 ( VAR_1 , VAR_8 ) , ( VAR_5 - ( VAR_9 ) ) ) ; )  return new TYPE_1 ( VAR_8 , VAR_3 , TYPE_3 . METHOD_2 ( VAR_1 , VAR_8 ) , ( VAR_5 - ( VAR_9 ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( 1 , 1 , VAR_2 , 1 ) ) INIT = new TYPE_1 ( 1 , 1 , VAR_2 , 1 ) ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR (  VAR_3 [ ( ( VAR_3 . length ) - 3 ) ] = CHAR_1 )  VAR_3 [ ( ( VAR_3 . length ) - 3 ) ] = CHAR_1 ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_3 . METHOD_3 ( VAR_3 ) ) INIT = TYPE_3 . METHOD_3 ( VAR_3 ) ) VAR VAR (  assertEquals ( VAR_5 , VAR_6 . METHOD_4 ( VAR_4 . METHOD_5 ( ) ) ) )  assertEquals ( VAR_5 , VAR_6 . METHOD_4 ( VAR_4 . METHOD_5 ( ) ) ) (  METHOD_6 ( ) )  METHOD_6 ( ) (  METHOD_7 ( ) )  METHOD_7 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.android.jack.ir.ast.JMethod ) TYPE com.android.jack.ir.ast.JMethod ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  this )  this ( BLOCK BLOCK ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME node ) NAME node ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  node = METHOD_2 ( VAR_3 ) )  node = METHOD_2 ( VAR_3 ) (  node . METHOD_3 ( VAR_1 ) )  node . METHOD_3 ( VAR_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_3 ( METHOD_4 ( VAR_1 ) , e ) ; )  throw new TYPE_3 ( METHOD_4 ( VAR_1 ) , e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  VAR_2 = true )  VAR_2 = true ( IF IF ( COND VAR_4 ) COND VAR_4 ( THEN THEN (  VAR_1 . METHOD_5 ( ) )  VAR_1 . METHOD_5 ( ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = INT_1 * INT_1 ) INIT = INT_1 * INT_1 ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_2 ) NAME VAR_2 ( INIT = new byte [ INT_2 ] ) INIT = new byte [ INT_2 ] ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME in ) NAME in ( INIT = new TYPE_1 ( new TYPE_2 ( METHOD_2 ( VAR_1 ) ) ) ) INIT = new TYPE_1 ( new TYPE_2 ( METHOD_2 ( VAR_1 ) ) ) ) VAR VAR ( WHILE WHILE ( COND ( in . METHOD_3 ( ) ) != null ) COND ( in . METHOD_3 ( ) ) != null ( BLOCK BLOCK ( WHILE WHILE ( COND ( in . METHOD_4 ( VAR_2 , 0 , VAR_2 . length ) ) != ( - 1 ) ) COND ( in . METHOD_4 ( VAR_2 , 0 , VAR_2 . length ) ) != ( - 1 ) ( BLOCK BLOCK ) BLOCK BLOCK ) WHILE WHILE ) BLOCK BLOCK ) WHILE WHILE (  in . METHOD_5 ( ) )  in . METHOD_5 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  VAR_1 )  VAR_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 . METHOD_2 ( ) ) == 1 ) COND ( VAR_1 . METHOD_2 ( ) ) == 1 ( THEN THEN ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( STRING_1 ) ) INIT = new TYPE_1 ( STRING_1 ) ) VAR VAR (  VAR_2 . start ( ) )  VAR_2 . start ( ) (  VAR_3 = new TYPE_2 ( VAR_2 . METHOD_3 ( ) , VAR_4 , VAR_1 , this ) )  VAR_3 = new TYPE_2 ( VAR_2 . METHOD_3 ( ) , VAR_4 , VAR_1 , this ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME location ) NAME location ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_1 . METHOD_2 ( ) ) ) COND ! ( VAR_1 . METHOD_2 ( ) ) ( THEN THEN (  throw new TYPE_2 ( location ) ; )  throw new TYPE_2 ( location ) ; ) THEN THEN ) IF IF ( IF IF ( COND ! ( VAR_1 . METHOD_3 ( ) ) ) COND ! ( VAR_1 . METHOD_3 ( ) ) ( THEN THEN (  throw new TYPE_3 ( ( ( TYPE_4 ) ( location ) ) ) ; )  throw new TYPE_3 ( ( ( TYPE_4 ) ( location ) ) ) ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME obj ) NAME obj ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( obj == null ) || ( obj instanceof TYPE_2 ) ) COND ( obj == null ) || ( obj instanceof TYPE_2 ) ( THEN THEN (  return ( ( TYPE_1 ) ( obj ) ) ; )  return ( ( TYPE_1 ) ( obj ) ) ; ) THEN THEN ) IF IF ( IF IF ( COND obj instanceof TYPE_3 ) COND obj instanceof TYPE_3 ( THEN THEN (  return new TYPE_1 ( ( ( TYPE_3 ) ( obj ) ) ) ; )  return new TYPE_1 ( ( ( TYPE_3 ) ( obj ) ) ) ; ) THEN THEN ) IF IF (  throw new java.lang.IllegalArgumentException ( ( STRING_1 + ( obj . METHOD_2 ( ) . getName ( ) ) ) ) ; )  throw new java.lang.IllegalArgumentException ( ( STRING_1 + ( obj . METHOD_2 ( ) . getName ( ) ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1[] ) TYPE TYPE_1[] ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . length ) INIT = VAR_1 . length ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE TYPE_2<TYPE_3,TYPE_4> ) TYPE TYPE_2<TYPE_3,TYPE_4> ( NAME e ) NAME e ( INIT = VAR_4 ) INIT = VAR_4 ) VAR VAR ) INIT INIT ( COND e != ( VAR_5 ) ) COND e != ( VAR_5 ) ( UPDATE UPDATE (  e = VAR_6 )  e = VAR_6 ) UPDATE UPDATE ( BLOCK BLOCK ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  VAR_7 = ( ( e . key ) == null ) ? 0 : java.util.HashMap . METHOD_2 ( e . key ) )  VAR_7 = ( ( e . key ) == null ) ? 0 : java.util.HashMap . METHOD_2 ( e . key ) ) THEN THEN ) IF IF ( VAR VAR ( TYPE int ) TYPE int ( NAME index ) NAME index ( INIT = METHOD_3 ( VAR_7 , VAR_3 ) ) INIT = METHOD_3 ( VAR_7 , VAR_3 ) ) VAR VAR (  VAR_8 = VAR_1 [ index ] )  VAR_8 = VAR_1 [ index ] (  VAR_1 [ index ] = e )  VAR_1 [ index ] = e ) BLOCK BLOCK ) FOR FOR ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( VAR_1 ) . when ( VAR_2 ) . METHOD_3 ( org.mockito.Matchers . METHOD_4 ( VAR_3 class ) ) )  TYPE_1 . METHOD_2 ( VAR_1 ) . when ( VAR_2 ) . METHOD_3 ( org.mockito.Matchers . METHOD_4 ( VAR_3 class ) ) (  VAR_4 . METHOD_5 ( ) )  VAR_4 . METHOD_5 ( ) (  VAR_5 . METHOD_6 ( VAR_6 , VAR_7 ) )  VAR_5 . METHOD_6 ( VAR_6 , VAR_7 ) (  < TYPE_3 > VAR_8 = TYPE_2 . METHOD_7 ( VAR_3 class ) )  < TYPE_3 > VAR_8 = TYPE_2 . METHOD_7 ( VAR_3 class ) (  org.mockito.Mockito.verify ( VAR_2 , TYPE_1 . METHOD_8 ( VAR_6 ) ) . METHOD_3 ( VAR_8 . METHOD_9 ( ) ) )  org.mockito.Mockito.verify ( VAR_2 , TYPE_1 . METHOD_8 ( VAR_6 ) ) . METHOD_3 ( VAR_8 . METHOD_9 ( ) ) (  TYPE_4 . assertEquals ( VAR_9 , VAR_8 . METHOD_10 ( ) . METHOD_11 ( ) ) )  TYPE_4 . assertEquals ( VAR_9 , VAR_8 . METHOD_10 ( ) . METHOD_11 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<TYPE_2,TYPE_3> ) RETURN TYPE_1<TYPE_2,TYPE_3> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.Map<?extendsTYPE_2,?extendsTYPE_3> ) TYPE java.util.Map<?extendsTYPE_2,?extendsTYPE_3> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_2 . METHOD_2 ( ( ( VAR_2 . size ( ) ) + ( VAR_1 . size ( ) ) ) ) )  VAR_2 . METHOD_2 ( ( ( VAR_2 . size ( ) ) + ( VAR_1 . size ( ) ) ) ) ( FOR-EACH FOR-EACH ( TYPE TYPE_4<?extendsTYPE_2,?extendsTYPE_3> ) TYPE TYPE_4<?extendsTYPE_2,?extendsTYPE_3> ( NAME entry ) NAME entry ( IN VAR_1 . METHOD_3 ( ) ) IN VAR_1 . METHOD_3 ( ) ( BLOCK BLOCK (  METHOD_4 ( entry . METHOD_5 ( ) , entry . METHOD_6 ( ) ) )  METHOD_4 ( entry . METHOD_5 ( ) , entry . METHOD_6 ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return this ; )  return this ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_3 . METHOD_2 ( ) ) INIT = TYPE_3 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_3 ( ) ) INIT = VAR_1 . METHOD_3 ( ) ) VAR VAR ( IF IF ( COND VAR_2 == null ) COND VAR_2 == null ( THEN THEN ( VAR VAR ( TYPE TYPE_4[] ) TYPE TYPE_4[] ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . METHOD_4 ( ) ) INIT = VAR_1 . METHOD_4 ( ) ) VAR VAR ( IF IF ( COND ( VAR_3 . length ) > 0 ) COND ( VAR_3 . length ) > 0 ( THEN THEN (  VAR_2 = VAR_3 [ 0 ] )  VAR_2 = VAR_3 [ 0 ] ) THEN THEN ) IF IF ) THEN THEN ) IF IF ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_2 . METHOD_5 ( ) ) INIT = VAR_2 . METHOD_5 ( ) ) VAR VAR ( IF IF ( COND VAR_4 != null ) COND VAR_4 != null ( THEN THEN (  return VAR_4 . METHOD_1 ( ) ; )  return VAR_4 . METHOD_1 ( ) ; ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE android.bluetooth.BluetoothDevice ) TYPE android.bluetooth.BluetoothDevice ( NAME device ) NAME device ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME value ) NAME value ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( TYPE_1 . METHOD_2 ( ) ) ) COND ! ( TYPE_1 . METHOD_2 ( ) ) ( THEN THEN (  android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) )  android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME service ) NAME service ( INIT = METHOD_3 ( ) ) INIT = METHOD_3 ( ) ) VAR VAR ( IF IF ( COND service == null ) COND service == null ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF (  return service . METHOD_1 ( device , value ) ; )  return service . METHOD_1 ( device , value ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  VAR_2 . METHOD_2 ( VAR_3 ) )  VAR_2 . METHOD_2 ( VAR_3 ) ) THEN THEN ( ELSE ELSE (  VAR_2 . METHOD_2 ( VAR_4 ) )  VAR_2 . METHOD_2 ( VAR_4 ) ) ELSE ELSE ) IF IF (  return this ; )  return this ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_3 ( e ) ; )  throw new TYPE_3 ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_3 ) <= 0 ) COND ( VAR_3 ) <= 0 ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( IF IF ( COND ( ( VAR_4 . size ( ) ) > 0 ) && ( ( VAR_5 ) > VAR_1 ) ) COND ( ( VAR_4 . size ( ) ) > 0 ) && ( ( VAR_5 ) > VAR_1 ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_6 ) NAME VAR_6 ( INIT = VAR_1 - ( VAR_3 ) ) INIT = VAR_1 - ( VAR_3 ) ) VAR VAR (  return VAR_6 <= ( METHOD_2 ( VAR_1 ) ) ; )  return VAR_6 <= ( METHOD_2 ( VAR_1 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN com.android.jack.ir.ast.JMethod ) RETURN com.android.jack.ir.ast.JMethod ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE com.android.jack.ir.ast.JMethod ) TYPE com.android.jack.ir.ast.JMethod ( NAME m ) NAME m ( IN VAR_1 . METHOD_2 ( ) ) IN VAR_1 . METHOD_2 ( ) ( BLOCK BLOCK ( IF IF ( COND ( m . METHOD_3 ( ) . equals ( VAR_2 ) ) && ( m . METHOD_4 ( ) . equals ( VAR_3 ) ) ) COND ( m . METHOD_3 ( ) . equals ( VAR_2 ) ) && ( m . METHOD_4 ( ) . equals ( VAR_3 ) ) ( THEN THEN (  return m ; )  return m ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ! ( METHOD_2 ( ) ) ) COND ! ( METHOD_2 ( ) ) ( THEN THEN (  TYPE_1 . METHOD_3 ( VAR_1 , STRING_1 ) )  TYPE_1 . METHOD_3 ( VAR_1 , STRING_1 ) (  return ; )  return ; ) THEN THEN ) IF IF (  METHOD_4 ( 0 ) )  METHOD_4 ( 0 ) (  METHOD_5 ( VAR_2 , VAR_3 ) )  METHOD_5 ( VAR_2 , VAR_3 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_6 ( VAR_2 , VAR_3 ) ) INIT = METHOD_6 ( VAR_2 , VAR_3 ) ) VAR VAR (  METHOD_4 ( 1 ) )  METHOD_4 ( 1 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_5 ) NAME VAR_5 ( INIT = METHOD_6 ( VAR_2 , VAR_3 ) ) INIT = METHOD_6 ( VAR_2 , VAR_3 ) ) VAR VAR (  TYPE_3 . METHOD_7 ( VAR_4 , VAR_5 ) )  TYPE_3 . METHOD_7 ( VAR_4 , VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_4 = ( java.lang.Integer.parseInt ( VAR_3 . METHOD_2 ( VAR_5 ) ) ) == 1 )  VAR_4 = ( java.lang.Integer.parseInt ( VAR_3 . METHOD_2 ( VAR_5 ) ) ) == 1 (  VAR_6 = ( java.lang.Integer.parseInt ( VAR_3 . METHOD_2 ( VAR_7 ) ) ) == 1 )  VAR_6 = ( java.lang.Integer.parseInt ( VAR_3 . METHOD_2 ( VAR_7 ) ) ) == 1 (  VAR_8 = ( java.lang.Integer.parseInt ( VAR_3 . METHOD_2 ( VAR_9 ) ) ) == 1 )  VAR_8 = ( java.lang.Integer.parseInt ( VAR_3 . METHOD_2 ( VAR_9 ) ) ) == 1 (  VAR_10 = ( java.lang.Integer.parseInt ( VAR_3 . METHOD_2 ( VAR_11 ) ) ) == 1 )  VAR_10 = ( java.lang.Integer.parseInt ( VAR_3 . METHOD_2 ( VAR_11 ) ) ) == 1 ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return TYPE_2 . METHOD_1 ( VAR_1 , VAR_2 , name , TYPE_3 . on ( CHAR_1 ) . METHOD_2 ( ) . METHOD_3 ( VAR_3 ) , VAR_4 ) ; )  return TYPE_2 . METHOD_1 ( VAR_1 , VAR_2 , name , TYPE_3 . on ( CHAR_1 ) . METHOD_2 ( ) . METHOD_3 ( VAR_3 ) , VAR_4 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME index ) NAME index ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( METHOD_2 ( ) ) ) COND ! ( METHOD_2 ( ) ) ( THEN THEN (  throw new TYPE_2 ( STRING_1 ) ; )  throw new TYPE_2 ( STRING_1 ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = size ( ) ) INIT = size ( ) ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < VAR_2 ) COND i < VAR_2 ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( ( TYPE_1 ) ( METHOD_3 ( i ) ) ) ) INIT = ( ( TYPE_1 ) ( METHOD_3 ( i ) ) ) ) VAR VAR ( IF IF ( COND ( VAR_3 != null ) && ( VAR_3 . METHOD_4 ( VAR_1 , index ) ) ) COND ( VAR_3 != null ) && ( VAR_3 . METHOD_4 ( VAR_1 , index ) ) ( THEN THEN (  return VAR_3 ; )  return VAR_3 ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR FOR (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ! ( TYPE_1 . METHOD_2 ( ) ) ) COND ! ( TYPE_1 . METHOD_2 ( ) ) ( THEN THEN ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME msg ) NAME msg ( INIT = STRING_2 + STRING_3 ) INIT = STRING_2 + STRING_3 ) VAR VAR (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) (  TYPE_2 . METHOD_3 ( msg , VAR_1 ) )  TYPE_2 . METHOD_3 ( msg , VAR_1 ) (  throw new TYPE_3 ( msg ) ; )  throw new TYPE_3 ( msg ) ; ) THEN THEN ) IF IF (  METHOD_4 ( new TYPE_4 ( VAR_2 , METHOD_5 ( ) ) ) )  METHOD_4 ( new TYPE_4 ( VAR_2 , METHOD_5 ( ) ) ) (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = 5 ) INIT = 5 ) VAR VAR (  METHOD_3 ( VAR_1 , false , false ) )  METHOD_3 ( VAR_1 , false , false ) (  TYPE_1 . when ( VAR_2 . METHOD_4 ( org.mockito.Matchers . METHOD_5 ( ) ) ) . thenReturn ( false ) )  TYPE_1 . when ( VAR_2 . METHOD_4 ( org.mockito.Matchers . METHOD_5 ( ) ) ) . thenReturn ( false ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_2 ( ) ) INIT = new TYPE_2 ( ) ) VAR VAR (  VAR_4 = VAR_1 )  VAR_4 = VAR_1 (  VAR_3 . METHOD_6 ( ) . METHOD_7 ( STRING_1 ) )  VAR_3 . METHOD_6 ( ) . METHOD_7 ( STRING_1 ) (  assertFalse ( VAR_5 . METHOD_8 ( VAR_3 ) ) )  assertFalse ( VAR_5 . METHOD_8 ( VAR_3 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_3> ) TYPE java.util.List<TYPE_3> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_3 . METHOD_2 ( VAR_2 ) . METHOD_3 ( ) ) INIT = VAR_3 . METHOD_2 ( VAR_2 ) . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_1 . METHOD_4 ( VAR_3 ) ) INIT = VAR_1 . METHOD_4 ( VAR_3 ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_6 ) NAME VAR_6 ( INIT = VAR_1 . METHOD_5 ( VAR_3 ) ) INIT = VAR_1 . METHOD_5 ( VAR_3 ) ) VAR VAR (  return TYPE_6 . METHOD_6 ( VAR_4 , VAR_5 , VAR_6 ) ; )  return TYPE_6 . METHOD_6 ( VAR_4 , VAR_5 , VAR_6 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_1 . when ( VAR_4 . METHOD_2 ( org.mockito.Matchers . METHOD_3 ( ) , org.mockito.Matchers . METHOD_3 ( ) , org.mockito.Matchers . METHOD_4 ( ) , org.mockito.Matchers . METHOD_4 ( ) , org.mockito.Matchers . METHOD_3 ( ) ) ) . thenReturn ( VAR_3 ) )  TYPE_1 . when ( VAR_4 . METHOD_2 ( org.mockito.Matchers . METHOD_3 ( ) , org.mockito.Matchers . METHOD_3 ( ) , org.mockito.Matchers . METHOD_4 ( ) , org.mockito.Matchers . METHOD_4 ( ) , org.mockito.Matchers . METHOD_3 ( ) ) ) . thenReturn ( VAR_3 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_6 . METHOD_5 ( VAR_1 , TYPE_3 . METHOD_6 ( VAR_2 ) . METHOD_7 ( ) , VAR_7 , new TYPE_4 ( ) ) ) INIT = VAR_6 . METHOD_5 ( VAR_1 , TYPE_3 . METHOD_6 ( VAR_2 ) . METHOD_7 ( ) , VAR_7 , new TYPE_4 ( ) ) ) VAR VAR (  return VAR_8 ; )  return VAR_8 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME service ) NAME service ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( IF IF ( COND service != null ) COND service != null ( THEN THEN ( TRY TRY ( BLOCK BLOCK (  return service . METHOD_1 ( VAR_1 ) ; )  return service . METHOD_1 ( VAR_1 ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME e ) NAME e ( BLOCK BLOCK (  android.util.Log.e ( VAR_2 . TAG , STRING_1 , e ) )  android.util.Log.e ( VAR_2 . TAG , STRING_1 , e ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) THEN THEN ) IF IF (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME uri ) NAME uri ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( VAR_5 ) ++ ) > 0 ) COND ( ( VAR_5 ) ++ ) > 0 ( THEN THEN (  super . METHOD_1 ( uri , VAR_1 , VAR_2 , VAR_3 , VAR_4 ) )  super . METHOD_1 ( uri , VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME callback ) NAME callback ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND callback == null ) COND callback == null ( THEN THEN (  android.util.Log.w ( VAR_1 . TAG , STRING_1 ) )  android.util.Log.w ( VAR_1 . TAG , STRING_1 ) (  return null ; )  return null ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE android.os.Message ) TYPE android.os.Message ( NAME msg ) NAME msg ( INIT = VAR_2 . METHOD_2 ( VAR_3 ) ) INIT = VAR_2 . METHOD_2 ( VAR_3 ) ) VAR VAR (  msg.obj = callback )  msg.obj = callback (  VAR_2 . METHOD_3 ( msg ) )  VAR_2 . METHOD_3 ( msg ) ( SYNCHRONIZED SYNCHRONIZED (  VAR_4 )  VAR_4 ( BLOCK BLOCK (  return VAR_5 ; )  return VAR_5 ; ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 = null )  VAR_1 = null ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  METHOD_2 ( ) )  METHOD_2 ( ) (  VAR_2 = false )  VAR_2 = false ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_3 ) != null ) COND ( VAR_3 ) != null ( THEN THEN (  VAR_3 . METHOD_3 ( ) )  VAR_3 . METHOD_3 ( ) ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_4 ) != null ) COND ( VAR_4 ) != null ( THEN THEN (  VAR_4 . METHOD_3 ( ) )  VAR_4 . METHOD_3 ( ) ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_5 ) != null ) COND ( VAR_5 ) != null ( THEN THEN (  VAR_5 . METHOD_3 ( ) )  VAR_5 . METHOD_3 ( ) ) THEN THEN ) IF IF (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( METHOD_2 ( ) ) ) COND ! ( METHOD_2 ( ) ) ( THEN THEN (  TYPE_3 . METHOD_3 ( VAR_3 ) )  TYPE_3 . METHOD_3 ( VAR_3 ) (  return ; )  return ; ) THEN THEN ) IF IF ( TRY TRY ( BLOCK BLOCK (  TYPE_3 . METHOD_4 ( ) . METHOD_1 ( VAR_1 , VAR_2 , mContext . METHOD_5 ( ) , VAR_3 ) )  TYPE_3 . METHOD_4 ( ) . METHOD_1 ( VAR_1 , VAR_2 , mContext . METHOD_5 ( ) , VAR_3 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME e ) NAME e ( BLOCK BLOCK (  throw e . METHOD_6 ( ) ; )  throw e . METHOD_6 ( ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( VAR_2 ) ) INIT = METHOD_2 ( VAR_2 ) ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < ( VAR_3 ) ) COND i < ( VAR_3 ) ( UPDATE UPDATE (  ++ i )  ++ i ) UPDATE UPDATE ( BLOCK BLOCK (  assertEquals ( new TYPE_2 ( i ) , ( ( TYPE_2 ) ( VAR_1 . METHOD_3 ( ) ) ) ) )  assertEquals ( new TYPE_2 ( i ) , ( ( TYPE_2 ) ( VAR_1 . METHOD_3 ( ) ) ) ) ) BLOCK BLOCK ) FOR FOR (  METHOD_4 ( VAR_1 . METHOD_3 ( ) ) )  METHOD_4 ( VAR_1 . METHOD_3 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) (  assertNotNull ( VAR_1 ) )  assertNotNull ( VAR_1 ) ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = 7 ) INIT = 7 ) VAR VAR (  VAR_1 . METHOD_3 ( TYPE_1 . METHOD_4 ( VAR_3 ) , VAR_2 ) )  VAR_1 . METHOD_3 ( TYPE_1 . METHOD_4 ( VAR_3 ) , VAR_2 ) (  org.mockito.Mockito.verify ( VAR_4 ) . METHOD_5 ( org.mockito.Matchers.eq ( VAR_5 ) , org.mockito.Matchers.eq ( VAR_2 ) , org.mockito.Matchers.eq ( VAR_3 ) ) )  org.mockito.Mockito.verify ( VAR_4 ) . METHOD_5 ( org.mockito.Matchers.eq ( VAR_5 ) , org.mockito.Matchers.eq ( VAR_2 ) , org.mockito.Matchers.eq ( VAR_3 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE short ) TYPE short ( NAME VAR_1 ) NAME VAR_1 ( INIT = INT_1 ) INIT = INT_1 ) VAR VAR ( VAR VAR ( TYPE android.os.Bundle ) TYPE android.os.Bundle ( NAME args ) NAME args ( INIT = new android.os.Bundle ( ) ) INIT = new android.os.Bundle ( ) ) VAR VAR (  args . METHOD_2 ( STRING_1 , VAR_2 ) )  args . METHOD_2 ( STRING_1 , VAR_2 ) (  args . METHOD_2 ( STRING_2 , 0 ) )  args . METHOD_2 ( STRING_2 , 0 ) (  args . METHOD_2 ( STRING_3 , VAR_3 ) )  args . METHOD_2 ( STRING_3 , VAR_3 ) (  TYPE_2 . METHOD_3 ( VAR_1 , TYPE_3 . METHOD_4 ( args ) . toString ( ) ) )  TYPE_2 . METHOD_3 ( VAR_1 , TYPE_3 . METHOD_4 ( args ) . toString ( ) ) (  org.mockito.Mockito.verify ( VAR_4 ) . METHOD_5 ( VAR_1 ) )  org.mockito.Mockito.verify ( VAR_4 ) . METHOD_5 ( VAR_1 ) (  TYPE_4 . METHOD_6 ( VAR_4 ) )  TYPE_4 . METHOD_6 ( VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( PARAMS PARAMS ( VAR VAR ( TYPE com.android.jack.ir.ast.JMethod ) TYPE com.android.jack.ir.ast.JMethod ( NAME method ) NAME method ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( ( method . METHOD_1 ( ) . METHOD_2 ( ) ) || ( method . METHOD_3 ( ) ) ) || ( method . METHOD_4 ( ) ) ) || ( ! ( VAR_1 . METHOD_5 ( this . METHOD_6 ( ) , method ) ) ) ) COND ( ( ( method . METHOD_1 ( ) . METHOD_2 ( ) ) || ( method . METHOD_3 ( ) ) ) || ( method . METHOD_4 ( ) ) ) || ( ! ( VAR_1 . METHOD_5 ( this . METHOD_6 ( ) , method ) ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( method ) ) INIT = new TYPE_1 ( method ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_2 ( VAR_2 , method ) ) INIT = new TYPE_2 ( VAR_2 , method ) ) VAR VAR (  VAR_3 . METHOD_5 ( method ) )  VAR_3 . METHOD_5 ( method ) (  VAR_2 . METHOD_7 ( ) )  VAR_2 . METHOD_7 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( ) ) INIT = TYPE_1 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME out ) NAME out ( INIT = METHOD_3 ( VAR_1 ) ) INIT = METHOD_3 ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_3 ( STRING_1 ) ) INIT = new TYPE_3 ( STRING_1 ) ) VAR VAR (  VAR_2 . METHOD_4 ( STRING_2 ) )  VAR_2 . METHOD_4 ( STRING_2 ) (  out . METHOD_5 ( VAR_2 ) )  out . METHOD_5 ( VAR_2 ) (  out . METHOD_6 ( ) )  out . METHOD_6 ( ) ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_4 ( VAR_1 ) ) INIT = new TYPE_4 ( VAR_1 ) ) VAR VAR (  assertEquals ( null , VAR_3 . METHOD_7 ( ) ) )  assertEquals ( null , VAR_3 . METHOD_7 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_2 ( ) ) INIT = VAR_2 . METHOD_2 ( ) ) VAR VAR (  METHOD_3 ( VAR_3 , VAR_1 , VAR_4 ) )  METHOD_3 ( VAR_3 , VAR_1 , VAR_4 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_5 ) NAME VAR_5 ( INIT = METHOD_4 ( VAR_2 ) ) INIT = METHOD_4 ( VAR_2 ) ) VAR VAR (  TYPE_2 . assertNotNull ( VAR_5 ) )  TYPE_2 . assertNotNull ( VAR_5 ) (  TYPE_2 . assertFalse ( VAR_5 . METHOD_5 ( ) ) )  TYPE_2 . assertFalse ( VAR_5 . METHOD_5 ( ) ) (  org.junit.Assert.assertEquals ( VAR_1 . size ( ) , VAR_5 . METHOD_6 ( ) . size ( ) ) )  org.junit.Assert.assertEquals ( VAR_1 . size ( ) , VAR_5 . METHOD_6 ( ) . size ( ) ) (  METHOD_7 ( VAR_3 , VAR_5 , VAR_1 , true , VAR_4 ) )  METHOD_7 ( VAR_3 , VAR_5 , VAR_1 , true , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME request ) NAME request ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( VAR_1 ) ? + 1 : - 1 ) INIT = ( VAR_1 ) ? + 1 : - 1 ) VAR VAR ( SWITCH SWITCH ( NAME request . type ) NAME request . type ( CASE VAR_3 ( BLOCK BLOCK (  VAR_5 += VAR_2 )  VAR_5 += VAR_2 (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_3 ( CASE VAR_4 ( BLOCK BLOCK (  VAR_5 += VAR_2 )  VAR_5 += VAR_2 (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_4 ( CASE VAR_6 ( BLOCK BLOCK (  VAR_5 += VAR_2 )  VAR_5 += VAR_2 (  VAR_7 += VAR_2 )  VAR_7 += VAR_2 (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_6 ( CASE VAR_8 ( BLOCK BLOCK (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_8 ( CASE VAR_9 ( BLOCK BLOCK (  android.util.Log . METHOD_2 ( VAR_10 . TAG , ( STRING_1 + ( request . type ) ) ) )  android.util.Log . METHOD_2 ( VAR_10 . TAG , ( STRING_1 + ( request . type ) ) ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_9 ( DEFAULT DEFAULT ( BLOCK BLOCK (  android.util.Log . METHOD_2 ( VAR_10 . TAG , ( STRING_1 + ( request . type ) ) ) )  android.util.Log . METHOD_2 ( VAR_10 . TAG , ( STRING_1 + ( request . type ) ) ) (  break ; )  break ; ) BLOCK BLOCK ) DEFAULT DEFAULT ) SWITCH SWITCH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK (  TYPE_1 . METHOD_1 ( VAR_1 class ) )  TYPE_1 . METHOD_1 ( VAR_1 class ) (  java.lang.System.out.println ( STRING_1 ) )  java.lang.System.out.println ( STRING_1 ) ( IF IF ( COND TYPE_2 . METHOD_2 ( ) ) COND TYPE_2 . METHOD_2 ( ) ( THEN THEN (  java.lang.System.out.println ( STRING_2 ) )  java.lang.System.out.println ( STRING_2 ) ) THEN THEN ) IF IF ( IF IF ( COND TYPE_2 . METHOD_3 ( ) ) COND TYPE_2 . METHOD_3 ( ) ( THEN THEN (  java.lang.System.out.println ( STRING_3 ) )  java.lang.System.out.println ( STRING_3 ) ) THEN THEN ) IF IF (  TYPE_2 . set ( 0 ) )  TYPE_2 . set ( 0 ) (  TYPE_2 . set ( 1 ) )  TYPE_2 . set ( 1 ) (  TYPE_2 . set ( 2 ) )  TYPE_2 . set ( 2 ) (  TYPE_2 . set ( 4 ) )  TYPE_2 . set ( 4 ) (  TYPE_2 . set ( 8 ) )  TYPE_2 . set ( 8 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( VAR_2 ) == null ) || ( ! ( VAR_3 . METHOD_2 ( ) ) ) ) COND ( ( VAR_2 ) == null ) || ( ! ( VAR_3 . METHOD_2 ( ) ) ) ( THEN THEN (  METHOD_3 ( ) )  METHOD_3 ( ) ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_3 . METHOD_4 ( VAR_1 ) ) INIT = VAR_3 . METHOD_4 ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_4 == null ) COND VAR_4 == null ( THEN THEN (  throw new TYPE_2 ( STRING_1 , VAR_5 ) ; )  throw new TYPE_2 ( STRING_1 , VAR_5 ) ; ) THEN THEN ) IF IF (  VAR_2 = new TYPE_4 ( VAR_4 ) )  VAR_2 = new TYPE_4 ( VAR_4 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE android.os.RemoteException ) TYPE android.os.RemoteException ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_2 ( STRING_1 , e , VAR_6 ) ; )  throw new TYPE_2 ( STRING_1 , e , VAR_6 ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) THEN THEN ) IF IF (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME expected ) NAME expected ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME source ) NAME source ( INIT = ( ( ( ( ( ( ( STRING_1 + ( ( ( STRING_2 + STRING_3 ) + STRING_4 ) + STRING_5 ) ) + VAR_1 ) + STRING_6 ) + STRING_7 ) + STRING_8 ) + STRING_9 ) + STRING_10 ) + STRING_11 ) INIT = ( ( ( ( ( ( ( STRING_1 + ( ( ( STRING_2 + STRING_3 ) + STRING_4 ) + STRING_5 ) ) + VAR_1 ) + STRING_6 ) + STRING_7 ) + STRING_8 ) + STRING_9 ) + STRING_10 ) + STRING_11 ) VAR VAR (  TYPE_1 . METHOD_2 ( expected , source , STRING_12 ) )  TYPE_1 . METHOD_2 ( expected , source , STRING_12 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR (  VAR_1 = new TYPE_1 ( STRING_1 , STRING_2 ) )  VAR_1 = new TYPE_1 ( STRING_1 , STRING_2 ) (  java.lang.System.out.println ( ( STRING_3 + VAR_1 ) ) )  java.lang.System.out.println ( ( STRING_3 + VAR_1 ) ) (  java.lang.System.out.println ( ( STRING_4 + ( VAR_1 . METHOD_2 ( ) ) ) ) )  java.lang.System.out.println ( ( STRING_4 + ( VAR_1 . METHOD_2 ( ) ) ) ) (  VAR_1 = new TYPE_1 ( STRING_5 , STRING_6 ) )  VAR_1 = new TYPE_1 ( STRING_5 , STRING_6 ) (  java.lang.System.out.println ( ( STRING_3 + VAR_1 ) ) )  java.lang.System.out.println ( ( STRING_3 + VAR_1 ) ) ( TRY TRY ( BLOCK BLOCK (  java.lang.System.out.println ( ( STRING_4 + ( VAR_1 . METHOD_2 ( ) ) ) ) )  java.lang.System.out.println ( ( STRING_4 + ( VAR_1 . METHOD_2 ( ) ) ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( BLOCK BLOCK (  VAR_3 . println ( STRING_7 ) )  VAR_3 . println ( STRING_7 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( TYPE_2 . METHOD_2 ( ) ) <= INT_1 ) COND ( TYPE_2 . METHOD_2 ( ) ) <= INT_1 ( THEN THEN (  return device . METHOD_3 ( new TYPE_3 ( ) . METHOD_4 ( ( STRING_1 + VAR_1 ) ) ) . METHOD_5 ( ) ; )  return device . METHOD_3 ( new TYPE_3 ( ) . METHOD_4 ( ( STRING_1 + VAR_1 ) ) ) . METHOD_5 ( ) ; ) THEN THEN ( ELSE ELSE (  return device . METHOD_3 ( new TYPE_3 ( ) . text ( ( STRING_1 + VAR_1 ) ) ) . METHOD_5 ( ) ; )  return device . METHOD_3 ( new TYPE_3 ( ) . text ( ( STRING_1 + VAR_1 ) ) ) . METHOD_5 ( ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.Class ) RETURN java.lang.Class ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ( VAR VAR ( TYPE java.util.List<java.lang.Throwable> ) TYPE java.util.List<java.lang.Throwable> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME element ) NAME element ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 ) INIT = VAR_4 ) VAR VAR ( IF IF ( COND VAR_3 != null ) COND VAR_3 != null ( THEN THEN ( VAR VAR ( TYPE java.lang.Class ) TYPE java.lang.Class ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_3 . METHOD_2 ( name , VAR_6 , VAR_1 ) ) INIT = VAR_3 . METHOD_2 ( name , VAR_6 , VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_5 != null ) COND VAR_5 != null ( THEN THEN (  return VAR_5 ; )  return VAR_5 ; ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ( IF IF ( COND ( VAR_7 ) != null ) COND ( VAR_7 ) != null ( THEN THEN (  VAR_1 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_7 ) ) )  VAR_1 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_7 ) ) ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE char ) TYPE char ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 ) INIT = VAR_4 ) VAR VAR ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN ( IF IF ( COND VAR_5 . METHOD_2 ( VAR_1 ) ) COND VAR_5 . METHOD_2 ( VAR_1 ) ( THEN THEN (  VAR_3 = VAR_5 )  VAR_3 = VAR_5 ) THEN THEN ( ELSE ELSE ( IF IF ( COND VAR_6 . METHOD_2 ( VAR_1 ) ) COND VAR_6 . METHOD_2 ( VAR_1 ) ( THEN THEN (  VAR_3 = VAR_6 )  VAR_3 = VAR_6 ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ) THEN THEN ( ELSE ELSE ( IF IF ( COND VAR_7 . METHOD_2 ( VAR_1 ) ) COND VAR_7 . METHOD_2 ( VAR_1 ) ( THEN THEN (  VAR_3 = VAR_7 )  VAR_3 = VAR_7 ) THEN THEN ( ELSE ELSE ( IF IF ( COND VAR_8 . METHOD_2 ( VAR_1 ) ) COND VAR_8 . METHOD_2 ( VAR_1 ) ( THEN THEN (  VAR_3 = VAR_8 )  VAR_3 = VAR_8 ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE float[] ) TYPE float[] ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  assertEquals ( VAR_2 , VAR_1 . METHOD_2 ( VAR_4 ) ) )  assertEquals ( VAR_2 , VAR_1 . METHOD_2 ( VAR_4 ) ) ( VAR VAR ( TYPE float[] ) TYPE float[] ( NAME VAR_5 ) NAME VAR_5 ( INIT = ( ( float [ ] ) ( VAR_1 . METHOD_2 ( VAR_6 ) ) ) ) INIT = ( ( float [ ] ) ( VAR_1 . METHOD_2 ( VAR_6 ) ) ) ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < ( VAR_3 . length ) ) COND i < ( VAR_3 . length ) ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK (  assertEquals ( VAR_3 [ i ] , VAR_5 [ i ] , FLOAT_1 ) )  assertEquals ( VAR_3 [ i ] , VAR_5 [ i ] , FLOAT_1 ) ) BLOCK BLOCK ) FOR FOR ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_1 ) ( TYPE_1 . METHOD_2 ( STRING_1 , TYPE_2 . METHOD_3 ( ) , VAR_2 ) ) ) ) INIT = ( ( TYPE_1 ) ( TYPE_1 . METHOD_2 ( STRING_1 , TYPE_2 . METHOD_3 ( ) , VAR_2 ) ) ) ) VAR VAR ( IF IF ( COND VAR_1 == null ) COND VAR_1 == null ( THEN THEN (  errln ( STRING_2 ) )  errln ( STRING_2 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME ex ) NAME ex ( BLOCK BLOCK (  METHOD_4 ( ( STRING_3 + ( ex . getMessage ( ) ) ) ) )  METHOD_4 ( ( STRING_3 + ( ex . getMessage ( ) ) ) ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( STRING_1 , STRING_2 ) , STRING_3 ) ) && ( ! ( TYPE_3 . METHOD_4 ( STRING_4 ) ) ) ) COND ( TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( STRING_1 , STRING_2 ) , STRING_3 ) ) && ( ! ( TYPE_3 . METHOD_4 ( STRING_4 ) ) ) ( THEN THEN (  METHOD_5 ( STRING_5 ) )  METHOD_5 ( STRING_5 ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND TYPE_1 . METHOD_6 ( TYPE_2 . METHOD_3 ( STRING_6 , STRING_2 ) , STRING_7 ) ) COND TYPE_1 . METHOD_6 ( TYPE_2 . METHOD_3 ( STRING_6 , STRING_2 ) , STRING_7 ) ( THEN THEN (  METHOD_5 ( STRING_8 ) )  METHOD_5 ( STRING_8 ) ) THEN THEN ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER synchronized ) MODIFIER synchronized ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_5> ) TYPE java.util.List<TYPE_5> ( NAME VAR_5 ) NAME VAR_5 ( INIT = METHOD_3 ( VAR_1 ) ) INIT = METHOD_3 ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_6 ) NAME VAR_6 ( INIT = new TYPE_5 ( VAR_2 , new TYPE_6 ( VAR_4 . METHOD_4 ( ) . METHOD_5 ( ) , VAR_1 . METHOD_6 ( ) ) , VAR_1 . METHOD_7 ( ) , null , VAR_3 ) ) INIT = new TYPE_5 ( VAR_2 , new TYPE_6 ( VAR_4 . METHOD_4 ( ) . METHOD_5 ( ) , VAR_1 . METHOD_6 ( ) ) , VAR_1 . METHOD_7 ( ) , null , VAR_3 ) ) VAR VAR (  VAR_5 . METHOD_8 ( VAR_6 ) )  VAR_5 . METHOD_8 ( VAR_6 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME service ) NAME service ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( IF IF ( COND service == null ) COND service == null ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = service . METHOD_1 ( VAR_1 ) ) INIT = service . METHOD_1 ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_2 == null ) COND VAR_2 == null ( THEN THEN (  METHOD_3 ( STRING_1 ) )  METHOD_3 ( STRING_1 ) (  return null ; )  return null ; ) THEN THEN ) IF IF (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( METHOD_2 ( VAR_2 , STRING_1 ) ) ) COND ! ( METHOD_2 ( VAR_2 , STRING_1 ) ) ( THEN THEN (  throw new TYPE_2 ( STRING_2 ) ; )  throw new TYPE_2 ( STRING_2 ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( SYNCHRONIZED SYNCHRONIZED (  VAR_4 )  VAR_4 ( BLOCK BLOCK (  VAR_3 = METHOD_3 ( VAR_1 ) )  VAR_3 = METHOD_3 ( VAR_1 ) ( IF IF ( COND VAR_3 == null ) COND VAR_3 == null ( THEN THEN (  android.util.Log.w ( TYPE_4 . TAG , ( STRING_3 + VAR_1 ) ) )  android.util.Log.w ( TYPE_4 . TAG , ( STRING_3 + VAR_1 ) ) (  return ; )  return ; ) THEN THEN ) IF IF (  VAR_5 = true )  VAR_5 = true ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2[] ) TYPE TYPE_2[] ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR (  VAR_3 = new java.lang.String [ VAR_2 . length ] )  VAR_3 = new java.lang.String [ VAR_2 . length ] ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < ( VAR_2 . length ) ) COND i < ( VAR_2 . length ) ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK (  VAR_3 [ i ] = VAR_2 [ i ] . getName ( ) )  VAR_3 [ i ] = VAR_2 [ i ] . getName ( ) ) BLOCK BLOCK ) FOR FOR (  VAR_4 = METHOD_3 ( VAR_1 ) )  VAR_4 = METHOD_3 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 < 0 ) COND VAR_1 < 0 ( THEN THEN (  throw new TYPE_1 ( this , VAR_1 ) ; )  throw new TYPE_1 ( this , VAR_1 ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = ( count ) - VAR_1 ) INIT = ( count ) - VAR_1 ) VAR VAR ( IF IF ( COND VAR_2 < 0 ) COND VAR_2 < 0 ( THEN THEN (  throw new TYPE_1 ( this , VAR_1 ) ; )  throw new TYPE_1 ( this , VAR_1 ) ; ) THEN THEN ) IF IF (  return VAR_1 == 0 ? this : METHOD_2 ( VAR_1 , VAR_2 ) ; )  return VAR_1 == 0 ? this : METHOD_2 ( VAR_1 , VAR_2 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) || ( VAR_2 ) ) COND ( VAR_1 ) || ( VAR_2 ) ( THEN THEN ( IF IF ( COND ! ( VAR_3 . METHOD_2 ( ) ) ) COND ! ( VAR_3 . METHOD_2 ( ) ) ( THEN THEN (  VAR_3 . METHOD_3 ( ) )  VAR_3 . METHOD_3 ( ) ( IF IF ( COND VAR_4 . METHOD_2 ( ) ) COND VAR_4 . METHOD_2 ( ) ( THEN THEN (  VAR_4 . METHOD_4 ( ) )  VAR_4 . METHOD_4 ( ) (  VAR_5 . METHOD_5 ( VAR_6 ) )  VAR_5 . METHOD_5 ( VAR_6 ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_7 ) == null ) COND ( VAR_7 ) == null ( THEN THEN ( IF IF ( COND VAR_8 ) COND VAR_8 ( THEN THEN (  android.util.Log.v ( com.android.server.am.ActivityManagerService.TAG , STRING_1 ) )  android.util.Log.v ( com.android.server.am.ActivityManagerService.TAG , STRING_1 ) ) THEN THEN ) IF IF ( IF IF ( COND VAR_9 ) COND VAR_9 ( THEN THEN (  android.util.Log.v ( com.android.server.am.ActivityManagerService.TAG , STRING_2 ) )  android.util.Log.v ( com.android.server.am.ActivityManagerService.TAG , STRING_2 ) ) THEN THEN ) IF IF (  METHOD_6 ( false , true ) )  METHOD_6 ( false , true ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN java.util.Map<java.lang.String,java.lang.Object> ) RETURN java.util.Map<java.lang.String,java.lang.Object> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME packageName ) NAME packageName ) VAR VAR ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.Object> ) TYPE java.util.Map<java.lang.String,java.lang.Object> ( NAME args ) NAME args ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( STRING_1 , STRING_2 , STRING_3 , STRING_4 , packageName ) ) INIT = TYPE_1 . METHOD_2 ( STRING_1 , STRING_2 , STRING_3 , STRING_4 , packageName ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME result ) NAME result ( INIT = METHOD_3 ( VAR_1 . METHOD_4 ( VAR_2 ) ) ) INIT = METHOD_3 ( VAR_1 . METHOD_4 ( VAR_2 ) ) ) VAR VAR (  return TYPE_2 . METHOD_5 ( result ) ; )  return TYPE_2 . METHOD_5 ( result ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME msg ) NAME msg ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_3 . METHOD_2 ( msg . METHOD_3 ( 0 ) . METHOD_4 ( 0 ) ) ) INIT = TYPE_3 . METHOD_2 ( msg . METHOD_3 ( 0 ) . METHOD_4 ( 0 ) ) ) VAR VAR ( VAR VAR ( TYPE java.lang.Integer ) TYPE java.lang.Integer ( NAME VAR_2 ) NAME VAR_2 ( INIT = java.lang.Integer . METHOD_2 ( ( ( VAR_1 . value ) - ( VAR_3 . value ) ) ) ) INIT = java.lang.Integer . METHOD_2 ( ( ( VAR_1 . value ) - ( VAR_3 . value ) ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_4 ( TYPE_5 . METHOD_5 ( msg . METHOD_6 ( ) , VAR_5 , VAR_6 ) , VAR_2 ) ) INIT = new TYPE_4 ( TYPE_5 . METHOD_5 ( msg . METHOD_6 ( ) , VAR_5 , VAR_6 ) , VAR_2 ) ) VAR VAR (  return TYPE_6 . METHOD_7 ( VAR_4 ) ; )  return TYPE_6 . METHOD_7 ( VAR_4 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME equals ) NAME equals ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME obj ) NAME obj ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( obj == null ) || ( ! ( obj instanceof TYPE_1 ) ) ) COND ( obj == null ) || ( ! ( obj instanceof TYPE_1 ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_1 ) ( obj ) ) ) INIT = ( ( TYPE_1 ) ( obj ) ) ) VAR VAR ( IF IF ( COND ( this ) == VAR_1 ) COND ( this ) == VAR_1 ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF (  return ( VAR_2 . equals ( VAR_1 . METHOD_1 ( ) ) ) && ( VAR_3 . equals ( VAR_1 . METHOD_2 ( ) ) ) ; )  return ( VAR_2 . equals ( VAR_1 . METHOD_1 ( ) ) ) && ( VAR_3 . equals ( VAR_1 . METHOD_2 ( ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME server ) NAME server ( INIT = new TYPE_1 ( 0 ) ) INIT = new TYPE_1 ( 0 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( TYPE_3 . METHOD_2 ( ) , server . METHOD_3 ( ) ) ) INIT = new TYPE_2 ( TYPE_3 . METHOD_2 ( ) , server . METHOD_3 ( ) ) ) VAR VAR (  VAR_1 . METHOD_4 ( true , INT_1 ) )  VAR_1 . METHOD_4 ( true , INT_1 ) (  assertEquals ( STRING_1 , INT_1 , VAR_1 . METHOD_5 ( ) ) )  assertEquals ( STRING_1 , INT_1 , VAR_1 . METHOD_5 ( ) ) (  VAR_1 . METHOD_4 ( false , 0 ) )  VAR_1 . METHOD_4 ( false , 0 ) (  VAR_1 . METHOD_6 ( ) )  VAR_1 . METHOD_6 ( ) (  server . METHOD_6 ( ) )  server . METHOD_6 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND null == ( VAR_2 ) ) COND null == ( VAR_2 ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ( IF IF ( COND null == ( VAR_3 ) ) COND null == ( VAR_3 ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( IN VAR_3 ) IN VAR_3 ( BLOCK BLOCK ( IF IF ( COND VAR_4 . METHOD_2 ( VAR_5 ) ) COND VAR_4 . METHOD_2 ( VAR_5 ) ( THEN THEN (  return true ; )  return true ; ) THEN THEN ) IF IF ( IF IF ( COND ! ( VAR_1 . METHOD_3 ( VAR_4 ) ) ) COND ! ( VAR_1 . METHOD_3 ( VAR_4 ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_1 ) ) COND ! ( VAR_1 ) ( THEN THEN (  throw new TYPE_2 ( STRING_1 ) ; )  throw new TYPE_2 ( STRING_1 ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = this . METHOD_2 ( ) ) INIT = this . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = this . METHOD_3 ( ) ) INIT = this . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ( INIT = ( VAR_2 <= VAR_3 ) ? VAR_3 - VAR_2 : 0 ) INIT = ( VAR_2 <= VAR_3 ) ? VAR_3 - VAR_2 : 0 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME size ) NAME size ( INIT = VAR_4 > > 2 ) INIT = VAR_4 > > 2 ) VAR VAR (  return ( ( TYPE_1 ) ( new TYPE_3 ( this , ( - 1 ) , 0 , size , size , VAR_2 , METHOD_4 ( ) ) ) ) ; )  return ( ( TYPE_1 ) ( new TYPE_3 ( this , ( - 1 ) , 0 , size , size , VAR_2 , METHOD_4 ( ) ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME res ) NAME res ( INIT = VAR_3 ) INIT = VAR_3 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_4 ) NAME VAR_4 ( INIT = res . METHOD_2 ( ) . VAR_4 ) INIT = res . METHOD_2 ( ) . VAR_4 ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  METHOD_3 ( res , VAR_1 , VAR_2 ) )  METHOD_3 ( res , VAR_1 , VAR_2 ) ) BLOCK BLOCK ( FINALLY FINALLY (  TYPE_3 . METHOD_4 ( res , VAR_4 ) )  TYPE_3 . METHOD_4 ( res , VAR_4 ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2<TYPE_3<TYPE_4>> ) TYPE TYPE_2<TYPE_3<TYPE_4>> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME key ) NAME key ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  VAR_2 )  VAR_2 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3<TYPE_4> ) TYPE TYPE_3<TYPE_4> ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . get ( key ) ) INIT = VAR_1 . get ( key ) ) VAR VAR ( IF IF ( COND VAR_3 != null ) COND VAR_3 != null ( THEN THEN ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME entry ) NAME entry ( INIT = VAR_3 . get ( ) ) INIT = VAR_3 . get ( ) ) VAR VAR ( IF IF ( COND entry != null ) COND entry != null ( THEN THEN (  return entry . METHOD_2 ( ) ; )  return entry . METHOD_2 ( ) ; ) THEN THEN ( ELSE ELSE (  VAR_1 . METHOD_3 ( key ) )  VAR_1 . METHOD_3 ( key ) ) ELSE ELSE ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) (  METHOD_2 ( ) )  METHOD_2 ( ) (  METHOD_3 ( ) )  METHOD_3 ( ) ( IF IF ( COND ( VAR_1 ) == null ) COND ( VAR_1 ) == null ( THEN THEN ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_4 ) NAME METHOD_4 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.Object ) TYPE java.lang.Object ( NAME arg ) NAME arg ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_3 ( ) )  METHOD_3 ( ) ) BLOCK BLOCK ) METHOD METHOD (  VAR_1 = new TYPE_1 ( ) { public void METHOD_4 ( TYPE_2 VAR_2 , java.lang.Object arg ) { METHOD_3 ( ) ; } } )  VAR_1 = new TYPE_1 ( ) { public void METHOD_4 ( TYPE_2 VAR_2 , java.lang.Object arg ) { METHOD_3 ( ) ; } } (  VAR_3 . METHOD_5 ( VAR_1 ) )  VAR_3 . METHOD_5 ( VAR_1 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 = new TYPE_1 ( VAR_2 . METHOD_2 ( ) , VAR_3 , new TYPE_2 ( ) , VAR_4 , new TYPE_3 ( ) , VAR_5 . METHOD_3 ( ) ) )  VAR_1 = new TYPE_1 ( VAR_2 . METHOD_2 ( ) , VAR_3 , new TYPE_2 ( ) , VAR_4 , new TYPE_3 ( ) , VAR_5 . METHOD_3 ( ) ) ( IF IF ( COND ( VAR_6 ) >= ( VAR_7 ) ) COND ( VAR_6 ) >= ( VAR_7 ) ( THEN THEN (  TYPE_1 . METHOD_4 ( ) )  TYPE_1 . METHOD_4 ( ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME res ) NAME res ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) ) INIT = VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_2 . METHOD_2 ( ) . METHOD_4 ( ) ) INIT = VAR_2 . METHOD_2 ( ) . METHOD_4 ( ) ) VAR VAR (  VAR_4 = new TYPE_2 ( mRS , res , VAR_5 ) )  VAR_4 = new TYPE_2 ( mRS , res , VAR_5 ) (  VAR_4 . METHOD_5 ( VAR_1 ) )  VAR_4 . METHOD_5 ( VAR_1 ) (  VAR_4 . METHOD_6 ( VAR_3 ) )  VAR_4 . METHOD_6 ( VAR_3 ) (  VAR_4 . METHOD_7 ( INT_1 ) )  VAR_4 . METHOD_7 ( INT_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  server . METHOD_2 ( new TYPE_1 ( ) . METHOD_3 ( STRING_1 ) ) )  server . METHOD_2 ( new TYPE_1 ( ) . METHOD_3 ( STRING_1 ) ) (  server . METHOD_4 ( ) )  server . METHOD_4 ( ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( ( TYPE_2 ) ( server . METHOD_5 ( STRING_2 ) . METHOD_6 ( ) ) ) ) INIT = ( ( TYPE_2 ) ( server . METHOD_5 ( STRING_2 ) . METHOD_6 ( ) ) ) ) VAR VAR (  assertEquals ( 3 , VAR_1 . METHOD_7 ( ) ) )  assertEquals ( 3 , VAR_1 . METHOD_7 ( ) ) (  VAR_1 . METHOD_8 ( ) )  VAR_1 . METHOD_8 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_1 ) ) COND ! ( VAR_1 ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( IF IF ( COND METHOD_2 ( 1 ) ) COND METHOD_2 ( 1 ) ( THEN THEN ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_3 ( ) ) INIT = METHOD_3 ( ) ) VAR VAR (  METHOD_4 ( VAR_2 ) )  METHOD_4 ( VAR_2 ) ) THEN THEN ) IF IF ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_5 ( VAR_4 , VAR_5 , VAR_6 ) ) INIT = METHOD_5 ( VAR_4 , VAR_5 , VAR_6 ) ) VAR VAR (  METHOD_6 ( VAR_7 , VAR_8 , STRING_1 , VAR_9 ) )  METHOD_6 ( VAR_7 , VAR_8 , STRING_1 , VAR_9 ) (  METHOD_4 ( VAR_3 , VAR_5 ) )  METHOD_4 ( VAR_3 , VAR_5 ) (  METHOD_6 ( VAR_7 , VAR_8 , STRING_2 , VAR_9 ) )  METHOD_6 ( VAR_7 , VAR_8 , STRING_2 , VAR_9 ) (  METHOD_7 ( VAR_3 , VAR_5 ) )  METHOD_7 ( VAR_3 , VAR_5 ) (  METHOD_6 ( VAR_7 , VAR_8 , STRING_1 , VAR_9 ) )  METHOD_6 ( VAR_7 , VAR_8 , STRING_1 , VAR_9 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME session ) NAME session ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME s ) NAME s ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME c ) NAME c ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME fd ) NAME fd ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME callback ) NAME callback ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_4 . METHOD_2 ( VAR_2 [ 0 ] , session ) )  TYPE_4 . METHOD_2 ( VAR_2 [ 0 ] , session ) (  super . METHOD_1 ( VAR_3 , s , VAR_3 , VAR_1 , fd , callback ) )  super . METHOD_1 ( VAR_3 , s , VAR_3 , VAR_1 , fd , callback ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME context ) NAME context ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  super . METHOD_1 ( context ) )  super . METHOD_1 ( context ) (  METHOD_2 ( ) )  METHOD_2 ( ) (  TYPE_2 . METHOD_1 ( ) )  TYPE_2 . METHOD_1 ( ) (  TYPE_3 . METHOD_3 ( ) )  TYPE_3 . METHOD_3 ( ) (  VAR_1 . METHOD_3 ( ) )  VAR_1 . METHOD_3 ( ) ( SYNCHRONIZED SYNCHRONIZED (  VAR_2 class )  VAR_2 class ( BLOCK BLOCK (  VAR_3 = null )  VAR_3 = null ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  org.mockito.Mockito.verify ( VAR_3 , TYPE_1 . METHOD_2 ( VAR_2 ) ) . METHOD_3 ( TYPE_1 . METHOD_4 ( new TYPE_2 ( VAR_1 ) ) ) )  org.mockito.Mockito.verify ( VAR_3 , TYPE_1 . METHOD_2 ( VAR_2 ) ) . METHOD_3 ( TYPE_1 . METHOD_4 ( new TYPE_2 ( VAR_1 ) ) ) (  VAR_4 . METHOD_5 ( ) )  VAR_4 . METHOD_5 ( ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME response ) NAME response ( INIT = VAR_4 . METHOD_6 ( ) ) INIT = VAR_4 . METHOD_6 ( ) ) VAR VAR (  assertEquals ( VAR_5 , response . status ) )  assertEquals ( VAR_5 , response . status ) (  assertEquals ( VAR_1 , VAR_6 . packageName ) )  assertEquals ( VAR_1 , VAR_6 . packageName ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.io.File[] ) TYPE java.io.File[] ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.io.File[] ) TYPE java.io.File[] ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ( VAR VAR ( TYPE float ) TYPE float ( NAME VAR_6 ) NAME VAR_6 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_1 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , ( ( TYPE_2 ) ( null ) ) , ( ( TYPE_3 [ ] ) ( null ) ) ) )  TYPE_1 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , ( ( TYPE_2 ) ( null ) ) , ( ( TYPE_3 [ ] ) ( null ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_1 . METHOD_2 ( VAR_2 ) ) ) COND ! ( VAR_1 . METHOD_2 ( VAR_2 ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_1 ( mContext ) ) INIT = new TYPE_1 ( mContext ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME test ) NAME test ( IN VAR_4 ) IN VAR_4 ( BLOCK BLOCK (  assertEquals ( ( ( ( STRING_1 + ( VAR_5 ) ) + STRING_2 ) + ( test . address ) ) , VAR_6 , ( METHOD_3 ( test . address ) ? VAR_7 : VAR_3 . METHOD_4 ( test . address , VAR_5 ) ) ) )  assertEquals ( ( ( ( STRING_1 + ( VAR_5 ) ) + STRING_2 ) + ( test . address ) ) , VAR_6 , ( METHOD_3 ( test . address ) ? VAR_7 : VAR_3 . METHOD_4 ( test . address , VAR_5 ) ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME device ) NAME device ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = device . METHOD_2 ( ) ) INIT = device . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . METHOD_1 ( VAR_1 ) ) INIT = VAR_3 . METHOD_1 ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_1 ( device ) ) INIT = new TYPE_1 ( device ) ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME result ) NAME result ( INIT = VAR_4 . METHOD_3 ( VAR_1 , VAR_2 ) ) INIT = VAR_4 . METHOD_3 ( VAR_1 , VAR_2 ) ) VAR VAR (  VAR_2 . METHOD_4 ( ) )  VAR_2 . METHOD_4 ( ) ( IF IF ( COND result ) COND result ( THEN THEN (  return VAR_4 ; )  return VAR_4 ; ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ( BLOCK BLOCK (  android.util.Log.e ( VAR_5 . TAG , STRING_1 , e ) )  android.util.Log.e ( VAR_5 . TAG , STRING_1 , e ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN byte[] ) RETURN byte[] ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.ArrayList<TYPE_1> ) TYPE java.util.ArrayList<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_2 ) NAME VAR_2 ( INIT = new byte [ VAR_1 . size ( ) ] ) INIT = new byte [ VAR_1 . size ( ) ] ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME b ) NAME b ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  VAR_2 [ ( i ++ ) ] = b )  VAR_2 [ ( i ++ ) ] = b ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.util.Set<java.lang.String> ) TYPE java.util.Set<java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  VAR_4 = ( VAR_5 ) ++ )  VAR_4 = ( VAR_5 ) ++ ( IF IF ( COND VAR_6 ) COND VAR_6 ( THEN THEN (  android.util.Log.v ( VAR_7 . TAG , ( STRING_1 + ( VAR_3 . METHOD_2 ( ) ) ) ) )  android.util.Log.v ( VAR_7 . TAG , ( STRING_1 + ( VAR_3 . METHOD_2 ( ) ) ) ) ) THEN THEN ) IF IF (  METHOD_3 ( VAR_3 ) )  METHOD_3 ( VAR_3 ) (  VAR_8 . METHOD_4 ( VAR_3 ) )  VAR_8 . METHOD_4 ( VAR_3 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_9 ) NAME VAR_9 ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK (  VAR_10 . METHOD_5 ( VAR_9 ) )  VAR_10 . METHOD_5 ( VAR_9 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = ( METHOD_1 ( ) ) ? VAR_2 . METHOD_2 ( false ) : METHOD_3 ( ) ) INIT = ( METHOD_1 ( ) ) ? VAR_2 . METHOD_2 ( false ) : METHOD_3 ( ) ) VAR VAR ( IF IF ( COND android.util.Log . METHOD_4 ( VAR_3 , VAR_4 ) ) COND android.util.Log . METHOD_4 ( VAR_3 , VAR_4 ) ( THEN THEN (  TYPE_2 . log ( ( STRING_1 + VAR_5 ) ) )  TYPE_2 . log ( ( STRING_1 + VAR_5 ) ) (  TYPE_2 . log ( ( STRING_2 + VAR_1 ) ) )  TYPE_2 . log ( ( STRING_2 + VAR_1 ) ) ) THEN THEN ) IF IF (  METHOD_5 ( VAR_1 ) )  METHOD_5 ( VAR_1 ) (  this . VAR_6 . METHOD_6 ( ) )  this . VAR_6 . METHOD_6 ( ) ( IF IF ( COND ( VAR_2 ) != null ) COND ( VAR_2 ) != null ( THEN THEN (  VAR_2 . METHOD_7 ( VAR_1 ) )  VAR_2 . METHOD_7 ( VAR_1 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME context ) NAME context ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_2 . METHOD_2 ( VAR_1 ) )  TYPE_2 . METHOD_2 ( VAR_1 ) ( IF IF ( COND TYPE_3 . METHOD_3 ( context ) ) COND TYPE_3 . METHOD_3 ( context ) ( THEN THEN (  return VAR_2 . METHOD_4 ( VAR_3 ) ; )  return VAR_2 . METHOD_4 ( VAR_3 ) ; ) THEN THEN ( ELSE ELSE (  return TYPE_3 . METHOD_5 ( context ) . METHOD_4 ( VAR_3 , false ) ; )  return TYPE_3 . METHOD_5 ( context ) . METHOD_4 ( VAR_3 , false ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME method ) NAME method ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME call ) NAME call ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_4 ( null , method , call , 0 ) ) INIT = new TYPE_4 ( null , method , call , 0 ) ) VAR VAR (  method . METHOD_2 ( VAR_1 ) )  method . METHOD_2 ( VAR_1 ) ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ( INIT = VAR_1 . METHOD_3 ( ) ) INIT = VAR_1 . METHOD_3 ( ) ) VAR VAR (  return name ; )  return name ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME call ) NAME call ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME callback ) NAME callback ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  org.mockito.Mockito.verify ( callback ) . METHOD_2 ( call ) )  org.mockito.Mockito.verify ( callback ) . METHOD_2 ( call ) (  org.mockito.Mockito.verify ( call . METHOD_3 ( ) , TYPE_4 . METHOD_4 ( ( VAR_2 ? 1 : 0 ) ) ) . METHOD_5 ( ) )  org.mockito.Mockito.verify ( call . METHOD_3 ( ) , TYPE_4 . METHOD_4 ( ( VAR_2 ? 1 : 0 ) ) ) . METHOD_5 ( ) (  assertEquals ( call . METHOD_3 ( ) , VAR_1 . METHOD_6 ( ) ) )  assertEquals ( call . METHOD_3 ( ) , VAR_1 . METHOD_6 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE java.lang.Class<?> ) TYPE java.lang.Class<?> ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE TYPE_3<java.lang.String> ) TYPE TYPE_3<java.lang.String> ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_6 ) NAME VAR_6 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_7 ) NAME VAR_7 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_8 ) NAME VAR_8 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND new TYPE_5 ( VAR_4 ) . METHOD_2 ( true , void . class , STRING_1 , java.lang.String [ ] . class ) ) COND new TYPE_5 ( VAR_4 ) . METHOD_2 ( true , void . class , STRING_1 , java.lang.String [ ] . class ) ( THEN THEN (  return new TYPE_6 ( VAR_1 , VAR_4 ) ; )  return new TYPE_6 ( VAR_1 , VAR_4 ) ; ) THEN THEN ( ELSE ELSE (  return null ; )  return null ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND METHOD_2 ( ) ) COND METHOD_2 ( ) ( THEN THEN ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_3 ( ) . METHOD_1 ( ) ) INIT = METHOD_3 ( ) . METHOD_1 ( ) ) VAR VAR ( IF IF ( COND ( VAR_1 & ( VAR_2 ) ) != 0 ) COND ( VAR_1 & ( VAR_2 ) ) != 0 ( THEN THEN (  VAR_1 &= ~ ( ( VAR_2 ) | ( VAR_3 ) ) )  VAR_1 &= ~ ( ( VAR_2 ) | ( VAR_3 ) ) ) THEN THEN ) IF IF (  return ( ( VAR_4 ) | ( VAR_5 ) ) | VAR_1 ; )  return ( ( VAR_4 ) | ( VAR_5 ) ) | VAR_1 ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_6 ) NAME VAR_6 ( INIT = INT_1 ) INIT = INT_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_7 ) NAME VAR_7 ( INIT = TYPE_1 . METHOD_4 ( this , ( ( VAR_8 ) & VAR_6 ) ) ) INIT = TYPE_1 . METHOD_4 ( this , ( ( VAR_8 ) & VAR_6 ) ) ) VAR VAR (  return VAR_7 & VAR_6 ; )  return VAR_7 & VAR_6 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME context ) NAME context ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) ) INIT = VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_4 ) NAME VAR_4 ( INIT = ! ( TYPE_4 . METHOD_4 ( VAR_2 . METHOD_2 ( ) . METHOD_5 ( ) ) ) ) INIT = ! ( TYPE_4 . METHOD_4 ( VAR_2 . METHOD_2 ( ) . METHOD_5 ( ) ) ) ) VAR VAR (  VAR_1 . METHOD_6 ( new TYPE_5 ( context , TYPE_6 . METHOD_7 ( context , VAR_2 . METHOD_8 ( ) , TYPE_7 . METHOD_9 ( VAR_2 ) , VAR_3 , VAR_4 ) , VAR_5 , VAR_6 ) ) )  VAR_1 . METHOD_6 ( new TYPE_5 ( context , TYPE_6 . METHOD_7 ( context , VAR_2 . METHOD_8 ( ) , TYPE_7 . METHOD_9 ( VAR_2 ) , VAR_3 , VAR_4 ) , VAR_5 , VAR_6 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = STRING_1 + ( ( ( STRING_2 + STRING_3 ) + STRING_4 ) + STRING_5 ) ) INIT = STRING_1 + ( ( ( STRING_2 + STRING_3 ) + STRING_4 ) + STRING_5 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR ( VAR VAR ( TYPE java.io.File ) TYPE java.io.File ( NAME VAR_3 ) NAME VAR_3 ( INIT = java.io.File . METHOD_2 ( STRING_6 , STRING_7 ) ) INIT = java.io.File . METHOD_2 ( STRING_6 , STRING_7 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_3 ( new TYPE_4 ( VAR_3 ) ) ) INIT = new TYPE_3 ( new TYPE_4 ( VAR_3 ) ) ) VAR VAR (  VAR_4 . METHOD_3 ( VAR_1 ) )  VAR_4 . METHOD_3 ( VAR_1 ) (  VAR_4 . METHOD_4 ( ) )  VAR_4 . METHOD_4 ( ) ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_2 . METHOD_5 ( new TYPE_6 ( VAR_3 ) ) ) INIT = VAR_2 . METHOD_5 ( new TYPE_6 ( VAR_3 ) ) ) VAR VAR (  assertNotNull ( VAR_5 ) )  assertNotNull ( VAR_5 ) (  VAR_3 . METHOD_6 ( ) )  VAR_3 . METHOD_6 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private synchronized ) MODIFIER private synchronized ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE android.bluetooth.BluetoothDevice ) TYPE android.bluetooth.BluetoothDevice ( NAME device ) NAME device ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  android.util.Log.d ( TAG , ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + ( VAR_3 ) ) ) )  android.util.Log.d ( TAG , ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + ( VAR_3 ) ) ) ) THEN THEN ) IF IF ( IF IF ( COND ( ( VAR_3 ) == false ) && ( ( VAR_4 . METHOD_1 ( device , VAR_1 ) ) == true ) ) COND ( ( VAR_3 ) == false ) && ( ( VAR_4 . METHOD_1 ( device , VAR_1 ) ) == true ) ( THEN THEN (  VAR_3 = true )  VAR_3 = true (  return true ; )  return true ; ) THEN THEN ) IF IF (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.Throwable ) TYPE java.lang.Throwable ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_2 ( VAR_1 , VAR_2 ) ) INIT = METHOD_2 ( VAR_1 , VAR_2 ) ) VAR VAR (  TYPE_1 . log ( VAR_3 , STRING_1 , VAR_5 , VAR_4 ) )  TYPE_1 . log ( VAR_3 , STRING_1 , VAR_5 , VAR_4 ) ( IF IF ( COND VAR_3 != null ) COND VAR_3 != null ( THEN THEN (  VAR_6 = true )  VAR_6 = true ) THEN THEN ) IF IF (  METHOD_3 ( VAR_4 ) )  METHOD_3 ( VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_2 . METHOD_2 ( ) ) INIT = VAR_2 . METHOD_2 ( ) ) VAR VAR ( WHILE WHILE ( COND VAR_3 != null ) COND VAR_3 != null ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR (  TYPE_2 . assertEquals ( VAR_4 , VAR_3 ) )  TYPE_2 . assertEquals ( VAR_4 , VAR_3 ) (  VAR_3 = VAR_2 . METHOD_2 ( ) )  VAR_3 = VAR_2 . METHOD_2 ( ) ) BLOCK BLOCK ) WHILE WHILE (  TYPE_2 . METHOD_3 ( VAR_1 . METHOD_2 ( ) ) )  TYPE_2 . METHOD_3 ( VAR_1 . METHOD_2 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( ) ) INIT = TYPE_2 . METHOD_2 ( ) ) VAR VAR (  VAR_1 . METHOD_3 ( TYPE_3 . METHOD_4 ( INT_1 ) ) )  VAR_1 . METHOD_3 ( TYPE_3 . METHOD_4 ( INT_1 ) ) (  VAR_1 . METHOD_3 ( TYPE_3 . METHOD_4 ( INT_2 ) ) )  VAR_1 . METHOD_3 ( TYPE_3 . METHOD_4 ( INT_2 ) ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ( INIT = TYPE_3 . METHOD_5 ( VAR_1 , INT_3 , STRING_1 ) ) INIT = TYPE_3 . METHOD_5 ( VAR_1 , INT_3 , STRING_1 ) ) VAR VAR (  METHOD_6 ( result ) )  METHOD_6 ( result ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  VAR_1 . METHOD_2 ( true , true , true ) )  VAR_1 . METHOD_2 ( true , true , true ) ) THEN THEN ( ELSE ELSE ( IF IF ( COND VAR_3 ) COND VAR_3 ( THEN THEN (  VAR_1 . METHOD_2 ( false , false , true ) )  VAR_1 . METHOD_2 ( false , false , true ) (  VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( ( ! ( VAR_4 ) ) ) )  VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( ( ! ( VAR_4 ) ) ) ) THEN THEN ( ELSE ELSE (  VAR_1 . METHOD_2 ( true , ( ! ( VAR_4 ) ) , true ) )  VAR_1 . METHOD_2 ( true , ( ! ( VAR_4 ) ) , true ) ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_2 ( ) ) INIT = VAR_2 . METHOD_2 ( ) ) VAR VAR (  METHOD_3 ( VAR_2 , VAR_1 , VAR_3 ) )  METHOD_3 ( VAR_2 , VAR_1 , VAR_3 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = METHOD_4 ( VAR_2 ) ) INIT = METHOD_4 ( VAR_2 ) ) VAR VAR (  TYPE_2 . assertNotNull ( VAR_4 ) )  TYPE_2 . assertNotNull ( VAR_4 ) (  TYPE_2 . assertFalse ( VAR_4 . METHOD_5 ( ) ) )  TYPE_2 . assertFalse ( VAR_4 . METHOD_5 ( ) ) (  org.junit.Assert.assertEquals ( VAR_1 . size ( ) , VAR_4 . METHOD_6 ( ) . size ( ) ) )  org.junit.Assert.assertEquals ( VAR_1 . size ( ) , VAR_4 . METHOD_6 ( ) . size ( ) ) (  METHOD_7 ( VAR_2 , VAR_4 , VAR_1 , false , VAR_3 ) )  METHOD_7 ( VAR_2 , VAR_4 , VAR_1 , false , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_5<TYPE_6> ) TYPE TYPE_5<TYPE_6> ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_5 . of ( VAR_1 , VAR_2 , VAR_3 ) ) INIT = TYPE_5 . of ( VAR_1 , VAR_2 , VAR_3 ) ) VAR VAR ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_2 ) RETURN TYPE_2 ( NAME METHOD_2 ) NAME METHOD_2 ( BLOCK BLOCK (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_5<TYPE_6> ) RETURN TYPE_5<TYPE_6> ( NAME METHOD_3 ) NAME METHOD_3 ( BLOCK BLOCK (  return VAR_4 ; )  return VAR_4 ; ) BLOCK BLOCK ) METHOD METHOD ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_5<TYPE_6> ) RETURN TYPE_5<TYPE_6> ( NAME METHOD_4 ) NAME METHOD_4 ( BLOCK BLOCK (  return VAR_4 . METHOD_5 ( 1 , VAR_4 . size ( ) ) ; )  return VAR_4 . METHOD_5 ( 1 , VAR_4 . size ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD (  return new TYPE_1 ( ) { public TYPE_2 METHOD_2 ( ) { return VAR_1 ; } public TYPE_5 < TYPE_6 > METHOD_3 ( ) { return VAR_4 ; } public TYPE_5 < TYPE_6 > METHOD_4 ( ) { return VAR_4 . METHOD_5 ( 1 , VAR_4 . size ( ) ) ; } } ; )  return new TYPE_1 ( ) { public TYPE_2 METHOD_2 ( ) { return VAR_1 ; } public TYPE_5 < TYPE_6 > METHOD_3 ( ) { return VAR_4 ; } public TYPE_5 < TYPE_6 > METHOD_4 ( ) { return VAR_4 . METHOD_5 ( 1 , VAR_4 . size ( ) ) ; } } ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_2 ( VAR_3 ) ) INIT = VAR_1 . METHOD_2 ( VAR_3 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_3 ( VAR_2 ) ) INIT = new TYPE_3 ( VAR_2 ) ) VAR VAR ( IF IF ( COND VAR_4 . METHOD_3 ( ) ) COND VAR_4 . METHOD_3 ( ) ( THEN THEN ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_5 ) NAME VAR_5 ( INIT = new TYPE_4 ( ) ) INIT = new TYPE_4 ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_5 . METHOD_4 ( VAR_4 ) )  VAR_5 . METHOD_4 ( VAR_4 ) (  VAR_5 . METHOD_5 ( VAR_4 , TYPE_5 . METHOD_6 ( ) ) )  VAR_5 . METHOD_5 ( VAR_4 , TYPE_5 . METHOD_6 ( ) ) (  return VAR_5 ; )  return VAR_5 ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) THEN THEN ) IF IF (  return null ; )  return null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE android.bluetooth.BluetoothDevice ) TYPE android.bluetooth.BluetoothDevice ( NAME device ) NAME device ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( METHOD_3 ( ) , TYPE_1 . METHOD_4 ( device . METHOD_5 ( ) ) , VAR_1 ) )  TYPE_1 . METHOD_2 ( METHOD_3 ( ) , TYPE_1 . METHOD_4 ( device . METHOD_5 ( ) ) , VAR_1 ) ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  android.util.Log.v ( VAR_3 . TAG , ( ( ( STRING_1 + device ) + STRING_2 ) + VAR_1 ) ) )  android.util.Log.v ( VAR_3 . TAG , ( ( ( STRING_1 + device ) + STRING_2 ) + VAR_1 ) ) ) THEN THEN ) IF IF (  return true ; )  return true ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME context ) NAME context ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_2 . METHOD_2 ( VAR_1 ) )  TYPE_2 . METHOD_2 ( VAR_1 ) ( IF IF ( COND TYPE_3 . METHOD_3 ( context ) ) COND TYPE_3 . METHOD_3 ( context ) ( THEN THEN (  return VAR_2 . METHOD_4 ( VAR_3 , VAR_4 ) ; )  return VAR_2 . METHOD_4 ( VAR_3 , VAR_4 ) ; ) THEN THEN ( ELSE ELSE (  return TYPE_3 . METHOD_5 ( context ) . METHOD_4 ( VAR_3 , VAR_4 ) ; )  return TYPE_3 . METHOD_5 ( context ) . METHOD_4 ( VAR_3 , VAR_4 ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME method ) NAME method ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME call ) NAME call ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_4 ( method , call , VAR_1 ) ) INIT = new TYPE_4 ( method , call , VAR_1 ) ) VAR VAR (  method . METHOD_2 ( VAR_2 ) )  method . METHOD_2 ( VAR_2 ) ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ( INIT = VAR_2 . METHOD_3 ( ) ) INIT = VAR_2 . METHOD_3 ( ) ) VAR VAR (  return name ; )  return name ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE float ) TYPE float ( NAME x ) NAME x ) VAR VAR ( VAR VAR ( TYPE float ) TYPE float ( NAME y ) NAME y ) VAR VAR ( VAR VAR ( TYPE float ) TYPE float ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_5 . METHOD_2 ( VAR_1 ) ) INIT = VAR_5 . METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND VAR_4 == null ) COND VAR_4 == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  VAR_6 . append ( new TYPE_2 . Float ( ( x - VAR_2 ) , ( y - VAR_2 ) , ( VAR_2 * 2 ) , ( VAR_2 * 2 ) ) , false ) )  VAR_6 . append ( new TYPE_2 . Float ( ( x - VAR_2 ) , ( y - VAR_2 ) , ( VAR_2 * 2 ) , ( VAR_2 * 2 ) ) , false ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME in ) NAME in ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME config ) NAME config ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_1 = in . METHOD_2 ( ) )  VAR_1 = in . METHOD_2 ( ) (  VAR_2 = ( ( TYPE_3 ) ( in . METHOD_3 ( null ) ) ) )  VAR_2 = ( ( TYPE_3 ) ( in . METHOD_3 ( null ) ) ) (  VAR_3 = in . METHOD_4 ( ) )  VAR_3 = in . METHOD_4 ( ) (  VAR_4 = TYPE_4 . METHOD_5 ( in . METHOD_2 ( ) ) )  VAR_4 = TYPE_4 . METHOD_5 ( in . METHOD_2 ( ) ) (  return config ; )  return config ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME type ) NAME type ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . get ( id ) ) INIT = VAR_3 . get ( id ) ) VAR VAR ( IF IF ( COND VAR_2 == null ) COND VAR_2 == null ( THEN THEN (  VAR_2 = new TYPE_1 ( id , name , type , VAR_1 ) )  VAR_2 = new TYPE_1 ( id , name , type , VAR_1 ) (  VAR_3 . METHOD_2 ( id , VAR_2 ) )  VAR_3 . METHOD_2 ( id , VAR_2 ) ) THEN THEN ) IF IF (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( null ) )  TYPE_1 . when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( null ) ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . METHOD_3 ( VAR_4 ) ) INIT = VAR_3 . METHOD_3 ( VAR_4 ) ) VAR VAR (  org.mockito.Mockito.verify ( VAR_1 , TYPE_1 . METHOD_4 ( ) ) . METHOD_5 ( org.mockito.Matchers . METHOD_6 ( VAR_5 class ) , org.mockito.Matchers . METHOD_7 ( ) ) )  org.mockito.Mockito.verify ( VAR_1 , TYPE_1 . METHOD_4 ( ) ) . METHOD_5 ( org.mockito.Matchers . METHOD_6 ( VAR_5 class ) , org.mockito.Matchers . METHOD_7 ( ) ) (  org.mockito.Mockito.verify ( VAR_1 , TYPE_1 . METHOD_4 ( ) ) . METHOD_8 ( org.mockito.Matchers . METHOD_6 ( VAR_5 class ) ) )  org.mockito.Mockito.verify ( VAR_1 , TYPE_1 . METHOD_4 ( ) ) . METHOD_8 ( org.mockito.Matchers . METHOD_6 ( VAR_5 class ) ) (  assertEquals ( VAR_2 , false ) )  assertEquals ( VAR_2 , false ) ) BLOCK BLOCK ) METHOD METHOD
