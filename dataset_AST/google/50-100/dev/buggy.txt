( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN org.eclipse.jgit.lib.Repository ) RETURN org.eclipse.jgit.lib.Repository ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.NameKey ) TYPE TYPE_1.NameKey ( NAME name ) NAME name ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  return VAR_1 . METHOD_1 ( name . get ( ) ) ; )  return VAR_1 . METHOD_1 ( name . get ( ) ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME err ) NAME err ( BLOCK BLOCK (  VAR_2 . METHOD_2 ( ( STRING_1 + ( name . get ( ) ) ) , err ) )  VAR_2 . METHOD_2 ( ( STRING_1 + ( name . get ( ) ) ) , err ) (  return null ; )  return null ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return new TYPE_3 ( VAR_2 , true , ( ! ( TYPE_1 . METHOD_2 ( VAR_3 class , VAR_1 . METHOD_3 ( ) ) ) ) , TYPE_1 . METHOD_2 ( VAR_4 class , VAR_1 . METHOD_3 ( ) ) , TYPE_1 . METHOD_2 ( VAR_5 class , VAR_1 . METHOD_3 ( ) ) , null , null ) ; )  return new TYPE_3 ( VAR_2 , true , ( ! ( TYPE_1 . METHOD_2 ( VAR_3 class , VAR_1 . METHOD_3 ( ) ) ) ) , TYPE_1 . METHOD_2 ( VAR_4 class , VAR_1 . METHOD_3 ( ) ) , TYPE_1 . METHOD_2 ( VAR_5 class , VAR_1 . METHOD_3 ( ) ) , null , null ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( ) )  VAR_1 . METHOD_2 ( ) ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . METHOD_3 ( ) ) INIT = VAR_3 . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_4 ) NAME VAR_4 ( INIT = ( ( TYPE_5 ) ( VAR_5 ) ) ) INIT = ( ( TYPE_5 ) ( VAR_5 ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_6.Change ) TYPE TYPE_6.Change ( NAME change ) NAME change ( INIT = TYPE_7 . get ( VAR_1 ) ) INIT = TYPE_7 . get ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_8.NameKey ) TYPE TYPE_8.NameKey ( NAME name ) NAME name ( INIT = change . getProject ( ) ) INIT = change . getProject ( ) ) VAR VAR ( IF IF ( COND ! ( VAR_2 . METHOD_4 ( TYPE_9 . create ( name . get ( ) ) , VAR_6 ) ) ) COND ! ( VAR_2 . METHOD_4 ( TYPE_9 . create ( name . get ( ) ) , VAR_6 ) ) ( THEN THEN (  return VAR_1 . METHOD_5 ( ) ; )  return VAR_1 . METHOD_5 ( ) ; ) THEN THEN ) IF IF (  return VAR_7 ; )  return VAR_7 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Project.NameKey ) TYPE com.google.gerrit.reviewdb.client.Project.NameKey ( NAME p ) NAME p ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME repo ) NAME repo ( INIT = VAR_1 . METHOD_2 ( p ) ) INIT = VAR_1 . METHOD_2 ( p ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = repo . METHOD_3 ( ) ) INIT = repo . METHOD_3 ( ) ) VAR VAR (  return new TYPE_1 ( repo , new org.eclipse.jgit.revwalk.RevWalk ( VAR_2 . METHOD_4 ( ) ) , VAR_2 , new TYPE_3 ( ) , true ) ; )  return new TYPE_1 ( repo , new org.eclipse.jgit.revwalk.RevWalk ( VAR_2 . METHOD_4 ( ) ) , VAR_2 , new TYPE_3 ( ) , true ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_4 < > ( ) ) INIT = new TYPE_4 < > ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_4 ) IN VAR_4 ( BLOCK BLOCK (  VAR_2 . METHOD_2 ( VAR_3 . METHOD_3 ( VAR_1 ) ) )  VAR_2 . METHOD_2 ( VAR_3 . METHOD_3 ( VAR_1 ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_2 . METHOD_2 ( e . METHOD_4 ( ) ) )  VAR_2 . METHOD_2 ( e . METHOD_4 ( ) ) (  throw new TYPE_3 ( e . getMessage ( ) , VAR_2 ) ; )  throw new TYPE_3 ( e . getMessage ( ) , VAR_2 ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Project.NameKey ) TYPE com.google.gerrit.reviewdb.client.Project.NameKey ( NAME project ) NAME project ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.PatchSet ) TYPE com.google.gerrit.reviewdb.client.PatchSet ( NAME ps ) NAME ps ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( type . getRevision ( ) ) ) INIT = new TYPE_1 ( type . getRevision ( ) ) ) VAR VAR ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.lang.String> ) TYPE java.util.Map<java.lang.String,java.lang.String> ( NAME p ) NAME p ( INIT = new TYPE_2 < java.lang.String , java.lang.String > ( ) ) INIT = new TYPE_2 < java.lang.String , java.lang.String > ( ) ) VAR VAR (  p . put ( STRING_1 , METHOD_2 ( project . get ( ) ) ) )  p . put ( STRING_1 , METHOD_2 ( project . get ( ) ) ) (  p . put ( STRING_2 , METHOD_2 ( ps . getRevision ( ) . get ( ) ) ) )  p . put ( STRING_2 , METHOD_2 ( ps . getRevision ( ) . get ( ) ) ) (  return ( VAR_2 ) + ( VAR_1 . METHOD_3 ( p ) ) ; )  return ( VAR_2 ) + ( VAR_1 . METHOD_3 ( p ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME id ) NAME id ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME p ) NAME p ( INIT = VAR_2 . get ( ) . METHOD_1 ( VAR_3 , id ) ) INIT = VAR_2 . get ( ) . METHOD_1 ( VAR_3 , id ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_4 ) NAME VAR_4 ( IN p . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) IN p . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ( BLOCK BLOCK ( IF IF ( COND VAR_1 . METHOD_5 ( ) . equals ( VAR_4 . getProject ( ) . METHOD_5 ( ) ) ) COND VAR_1 . METHOD_5 ( ) . equals ( VAR_4 . getProject ( ) . METHOD_5 ( ) ) ( THEN THEN (  return new TYPE_1 ( VAR_1 , p . METHOD_2 ( ) ) ; )  return new TYPE_1 ( VAR_1 , p . METHOD_2 ( ) ) ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  throw new TYPE_4 ( id ) ; )  throw new TYPE_4 ( id ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME add ) NAME add ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 instanceof TYPE_2 ) COND VAR_1 instanceof TYPE_2 ( THEN THEN ( IF IF ( COND ( VAR_2 ) == null ) COND ( VAR_2 ) == null ( THEN THEN (  VAR_2 = TYPE_3 . METHOD_1 ( ) )  VAR_2 = TYPE_3 . METHOD_1 ( ) ) THEN THEN ) IF IF (  VAR_2 . add ( ( ( TYPE_2 < ? > ) ( VAR_1 ) ) ) )  VAR_2 . add ( ( ( TYPE_2 < ? > ) ( VAR_1 ) ) ) ) THEN THEN ) IF IF (  VAR_3 . add ( VAR_1 ) )  VAR_3 . add ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2.PatchSet ) TYPE TYPE_2.PatchSet ( NAME patchSet ) NAME patchSet ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME p ) NAME p ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  p . revision = patchSet . getRevision ( ) . get ( ) )  p . revision = patchSet . getRevision ( ) . get ( ) (  VAR_1 = TYPE_3 . toString ( patchSet . METHOD_2 ( ) ) )  VAR_1 = TYPE_3 . toString ( patchSet . METHOD_2 ( ) ) (  p . ref = patchSet . getRefName ( ) )  p . ref = patchSet . getRefName ( ) ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . get ( patchSet . METHOD_3 ( ) ) ) INIT = VAR_3 . get ( patchSet . METHOD_3 ( ) ) ) VAR VAR (  VAR_4 = METHOD_4 ( VAR_2 . METHOD_5 ( ) ) )  VAR_4 = METHOD_4 ( VAR_2 . METHOD_5 ( ) ) (  return p ; )  return p ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 = TYPE_1 . METHOD_2 ( STRING_1 ) )  VAR_1 = TYPE_1 . METHOD_2 ( STRING_1 ) (  METHOD_3 ( VAR_2 , VAR_1 , VAR_3 , VAR_4 ) )  METHOD_3 ( VAR_2 , VAR_1 , VAR_3 , VAR_4 ) (  com.google.common.truth.Truth.assertThat ( TYPE_2 . METHOD_4 ( VAR_3 ) ) . METHOD_5 ( TYPE_2 . METHOD_6 ( TYPE_3 . METHOD_7 ( STRING_1 , STRING_2 ) ) ) )  com.google.common.truth.Truth.assertThat ( TYPE_2 . METHOD_4 ( VAR_3 ) ) . METHOD_5 ( TYPE_2 . METHOD_6 ( TYPE_3 . METHOD_7 ( STRING_1 , STRING_2 ) ) ) (  com.google.common.truth.Truth.assertThat ( VAR_4 ) . METHOD_8 ( TYPE_4 . of ( STRING_3 , STRING_4 , STRING_5 , STRING_2 , STRING_6 , STRING_7 ) ) )  com.google.common.truth.Truth.assertThat ( VAR_4 ) . METHOD_8 ( TYPE_4 . of ( STRING_3 , STRING_4 , STRING_5 , STRING_2 , STRING_6 , STRING_7 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) != null ) COND ( VAR_1 ) != null ( THEN THEN (  VAR_1 . close ( ) )  VAR_1 . close ( ) ) THEN THEN ) IF IF (  VAR_1 = null )  VAR_1 = null ( IF IF ( COND ( db ) != null ) COND ( db ) != null ( THEN THEN ( TRY TRY ( BLOCK BLOCK (  db . close ( ) )  db . close ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_2 ( STRING_1 , e ) ; )  throw new TYPE_2 ( STRING_1 , e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) THEN THEN ) IF IF (  db = null )  db = null ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  com.google.common.truth.Truth.assertThat ( VAR_1 . equals ( null ) ) . METHOD_2 ( ) )  com.google.common.truth.Truth.assertThat ( VAR_1 . equals ( null ) ) . METHOD_2 ( ) (  com.google.common.truth.Truth.assertThat ( VAR_1 . equals ( STRING_1 ) ) . METHOD_2 ( ) )  com.google.common.truth.Truth.assertThat ( VAR_1 . equals ( STRING_1 ) ) . METHOD_2 ( ) (  com.google.common.truth.Truth.assertThat ( VAR_1 . equals ( VAR_1 ) ) . METHOD_3 ( ) )  com.google.common.truth.Truth.assertThat ( VAR_1 . equals ( VAR_1 ) ) . METHOD_3 ( ) (  com.google.common.truth.Truth.assertThat ( VAR_1 . equals ( VAR_2 ) ) . METHOD_2 ( ) )  com.google.common.truth.Truth.assertThat ( VAR_1 . equals ( VAR_2 ) ) . METHOD_2 ( ) (  com.google.common.truth.Truth.assertThat ( VAR_1 . equals ( VAR_3 ) ) . METHOD_3 ( ) )  com.google.common.truth.Truth.assertThat ( VAR_1 . equals ( VAR_3 ) ) . METHOD_3 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<com.google.gerrit.server.query.change.ChangeData> ) TYPE TYPE_1<com.google.gerrit.server.query.change.ChangeData> ( NAME in ) NAME in ( INIT = METHOD_2 ( STRING_1 ) ) INIT = METHOD_2 ( STRING_1 ) ) VAR VAR (  assertEquals ( query ( in ) , METHOD_3 ( in ) ) )  assertEquals ( query ( in ) , METHOD_3 ( in ) ) (  VAR_1 . METHOD_4 ( new TYPE_2 ( VAR_2 ) ) )  VAR_1 . METHOD_4 ( new TYPE_2 ( VAR_2 ) ) ( VAR VAR ( TYPE TYPE_1<com.google.gerrit.server.query.change.ChangeData> ) TYPE TYPE_1<com.google.gerrit.server.query.change.ChangeData> ( NAME out ) NAME out ( INIT = METHOD_3 ( in ) ) INIT = METHOD_3 ( in ) ) VAR VAR (  METHOD_5 ( ( out instanceof TYPE_3 ) ) )  METHOD_5 ( ( out instanceof TYPE_3 ) ) (  assertEquals ( TYPE_4 . of ( query ( in . METHOD_6 ( 0 ) ) , in . METHOD_6 ( 1 ) ) , out . METHOD_7 ( ) ) )  assertEquals ( TYPE_4 . of ( query ( in . METHOD_6 ( 0 ) ) , in . METHOD_6 ( 1 ) ) , out . METHOD_7 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( STRING_1 ) ) INIT = TYPE_2 . METHOD_2 ( STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME n ) NAME n ( INIT = VAR_1 . METHOD_3 ( ) ) INIT = VAR_1 . METHOD_3 ( ) ) VAR VAR (  org.junit.Assert.assertEquals ( TYPE_2 . METHOD_4 ( ( ( TYPE_2 . METHOD_4 ( STRING_2 ) ) + STRING_3 ) ) , n . METHOD_5 ( ) ) )  org.junit.Assert.assertEquals ( TYPE_2 . METHOD_4 ( ( ( TYPE_2 . METHOD_4 ( STRING_2 ) ) + STRING_3 ) ) , n . METHOD_5 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.Set<java.lang.String> ) RETURN java.util.Set<java.lang.String> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevCommit ) TYPE org.eclipse.jgit.revwalk.RevCommit ( NAME commit ) NAME commit ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = commit . METHOD_2 ( VAR_2 ) ) INIT = commit . METHOD_2 ( VAR_2 ) ) VAR VAR ( IF IF ( COND ( VAR_1 . isEmpty ( ) ) || ( ( VAR_1 . size ( ) ) > 1 ) ) COND ( VAR_1 . isEmpty ( ) ) || ( ( VAR_1 . size ( ) ) > 1 ) ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF ( IF IF ( COND VAR_1 . get ( 0 ) . isEmpty ( ) ) COND VAR_1 . get ( 0 ) . isEmpty ( ) ( THEN THEN (  return TYPE_1 . of ( ) ; )  return TYPE_1 . of ( ) ; ) THEN THEN ( ELSE ELSE (  return TYPE_2 . METHOD_3 ( TYPE_3 . on ( CHAR_1 ) . METHOD_4 ( VAR_1 . get ( 0 ) ) ) ; )  return TYPE_2 . METHOD_3 ( TYPE_3 . on ( CHAR_1 ) . METHOD_4 ( VAR_1 . get ( 0 ) ) ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.util.Map<java.lang.String,java.util.Set<java.lang.String>> ) TYPE java.util.Map<java.lang.String,java.util.Set<java.lang.String>> ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( IN METHOD_2 ( VAR_1 ) ) IN METHOD_2 ( VAR_1 ) ( BLOCK BLOCK (  < java.lang.String > VAR_5 = VAR_3 . METHOD_3 ( VAR_4 , ( VAR_6 ) - > TYPE_1 . METHOD_4 ( ) ) )  < java.lang.String > VAR_5 = VAR_3 . METHOD_3 ( VAR_4 , ( VAR_6 ) - > TYPE_1 . METHOD_4 ( ) ) (  VAR_5 . add ( VAR_2 ) )  VAR_5 . add ( VAR_2 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_2 . METHOD_2 ( change . getProject ( ) . equals ( project ) , ( STRING_1 + STRING_2 ) , project , changeId , change . getProject ( ) ) )  TYPE_2 . METHOD_2 ( change . getProject ( ) . equals ( project ) , ( STRING_1 + STRING_2 ) , project , changeId , change . getProject ( ) ) (  return new TYPE_1 ( args , change ) . METHOD_3 ( ) ; )  return new TYPE_1 ( args , change ) . METHOD_3 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  METHOD_1 ( ) )  METHOD_1 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME err ) NAME err ( BLOCK BLOCK (  throw new TYPE_1 ( ( STRING_1 + ( err . getMessage ( ) ) ) ) ; )  throw new TYPE_1 ( ( STRING_1 + ( err . getMessage ( ) ) ) ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ( INIT = factory . create ( in , out ) ) INIT = factory . create ( in , out ) ) VAR VAR (  VAR_1 . METHOD_2 ( format ) )  VAR_1 . METHOD_2 ( format ) ( IF IF ( COND ( query ) != null ) COND ( query ) != null ( THEN THEN (  VAR_1 . METHOD_3 ( query ) )  VAR_1 . METHOD_3 ( query ) ) THEN THEN ( ELSE ELSE (  VAR_1 . run ( ) )  VAR_1 . run ( ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_2 . METHOD_2 ( STRING_1 ) ) INIT = TYPE_2 . METHOD_2 ( STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME n ) NAME n ( INIT = VAR_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( new TYPE_3 ( STRING_2 , STRING_3 ) ) ) ) INIT = VAR_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( new TYPE_3 ( STRING_2 , STRING_3 ) ) ) ) VAR VAR (  METHOD_5 ( VAR_1 , n ) )  METHOD_5 ( VAR_1 , n ) (  assertEquals ( STRING_4 , n . METHOD_6 ( ) ) )  assertEquals ( STRING_4 , n . METHOD_6 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME line ) NAME line ( INIT = ( cm . METHOD_1 ( ) . METHOD_2 ( ) ) ? cm . METHOD_3 ( cm . METHOD_1 ( ) . METHOD_4 ( ) ) : 0 ) INIT = ( cm . METHOD_1 ( ) . METHOD_2 ( ) ) ? cm . METHOD_3 ( cm . METHOD_1 ( ) . METHOD_4 ( ) ) : 0 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME res ) NAME res ( INIT = java.util.Collections . METHOD_5 ( VAR_1 , new TYPE_1 ( cm . METHOD_6 ( ) , 0 , 0 , 0 , line , false ) , METHOD_7 ( ) ) ) INIT = java.util.Collections . METHOD_5 ( VAR_1 , new TYPE_1 ( cm . METHOD_6 ( ) , 0 , 0 , 0 , line , false ) , METHOD_7 ( ) ) ) VAR VAR (  METHOD_8 ( VAR_1 , VAR_2 , res , VAR_3 ) )  METHOD_8 ( VAR_1 , VAR_2 , res , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.eclipse.jgit.lib.ObjectId ) TYPE org.eclipse.jgit.lib.ObjectId ( NAME id ) NAME id ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME r ) NAME r ( INIT = VAR_1 . get ( ( ( ( STRING_1 + ( project . get ( ) ) ) + STRING_2 ) + ( id . name ( ) ) ) ) ) INIT = VAR_1 . get ( ( ( ( STRING_1 + ( project . get ( ) ) ) + STRING_2 ) + ( id . name ( ) ) ) ) ) VAR VAR (  org.junit.Assert.assertEquals ( VAR_2 , r . METHOD_2 ( ) ) )  org.junit.Assert.assertEquals ( VAR_2 , r . METHOD_2 ( ) ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ( INIT = METHOD_3 ( ) . METHOD_4 ( r . METHOD_5 ( ) , VAR_3 class ) ) INIT = METHOD_3 ( ) . METHOD_4 ( r . METHOD_5 ( ) , VAR_3 class ) ) VAR VAR (  r . METHOD_6 ( ) )  r . METHOD_6 ( ) (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_1 ) NAME VAR_1 ( INIT = INT_1 ) INIT = INT_1 ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_2 ) NAME VAR_2 ( INIT = INT_2 ) INIT = INT_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME p ) NAME p ( INIT = new TYPE_1 ( VAR_1 ) ) INIT = new TYPE_1 ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME c ) NAME c ( INIT = new TYPE_2 ( p , VAR_2 ) ) INIT = new TYPE_2 ( p , VAR_2 ) ) VAR VAR (  METHOD_2 ( p , c . getParentKey ( ) ) )  METHOD_2 ( p , c . getParentKey ( ) ) (  METHOD_3 ( ( VAR_2 != ( c . METHOD_4 ( ) ) ) ) )  METHOD_3 ( ( VAR_2 != ( c . METHOD_4 ( ) ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME p ) NAME p ( INIT = TYPE_2 . METHOD_2 ( STRING_1 , STRING_2 ) ) INIT = TYPE_2 . METHOD_2 ( STRING_1 , STRING_2 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3<java.lang.String> ) TYPE TYPE_3<java.lang.String> ( NAME n ) NAME n ( INIT = TYPE_3 . not ( p ) ) INIT = TYPE_3 . not ( p ) ) VAR VAR (  assertEquals ( 1 , n . METHOD_3 ( ) ) )  assertEquals ( 1 , n . METHOD_3 ( ) ) (  METHOD_4 ( p , n . METHOD_5 ( 0 ) ) )  METHOD_4 ( p , n . METHOD_5 ( 0 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevCommit[] ) TYPE org.eclipse.jgit.revwalk.RevCommit[] ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevWalk ) TYPE org.eclipse.jgit.revwalk.RevWalk ( NAME walk ) NAME walk ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.ArrayList < TYPE_1 > ( VAR_1 . length ) ) INIT = new java.util.ArrayList < TYPE_1 > ( VAR_1 . length ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE org.eclipse.jgit.revwalk.RevCommit ) TYPE org.eclipse.jgit.revwalk.RevCommit ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  walk . METHOD_2 ( VAR_3 ) )  walk . METHOD_2 ( VAR_3 ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_3 ( VAR_3 . getId ( ) . name ( ) ) ) INIT = new TYPE_3 ( VAR_3 . getId ( ) . name ( ) ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME msg ) NAME msg ( INIT = VAR_3 . METHOD_3 ( ) ) INIT = VAR_3 . METHOD_3 ( ) ) VAR VAR (  VAR_2 . add ( new TYPE_1 ( VAR_4 , msg ) ) )  VAR_2 . add ( new TYPE_1 ( VAR_4 , msg ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 = new TYPE_2 ( this , METHOD_2 ( ) , getRevision ( ) , METHOD_3 ( ) , result . METHOD_4 ( ) , METHOD_5 ( ) . METHOD_6 ( ) ) )  VAR_1 = new TYPE_2 ( this , METHOD_2 ( ) , getRevision ( ) , METHOD_3 ( ) , result . METHOD_4 ( ) , METHOD_5 ( ) . METHOD_6 ( ) ) (  METHOD_7 ( result . METHOD_8 ( ) ) )  METHOD_7 ( result . METHOD_8 ( ) ) (  display ( VAR_2 ) )  display ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , STRING_1 ) )  TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , STRING_1 ) (  TYPE_1 . METHOD_3 ( VAR_4 , VAR_2 , VAR_3 , STRING_1 ) )  TYPE_1 . METHOD_3 ( VAR_4 , VAR_2 , VAR_3 , STRING_1 ) (  TYPE_1 . METHOD_2 ( VAR_4 , VAR_2 , VAR_3 , STRING_2 ) )  TYPE_1 . METHOD_2 ( VAR_4 , VAR_2 , VAR_3 , STRING_2 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME u ) NAME u ( INIT = user ( VAR_4 ) ) INIT = user ( VAR_4 ) ) VAR VAR (  METHOD_4 ( u ) )  METHOD_4 ( u ) (  METHOD_5 ( STRING_3 , u ) )  METHOD_5 ( STRING_3 , u ) (  METHOD_5 ( STRING_4 , u ) )  METHOD_5 ( STRING_4 , u ) (  METHOD_6 ( STRING_5 , u ) )  METHOD_6 ( STRING_5 , u ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  rpc ( VAR_1 class ) )  rpc ( VAR_1 class ) (  rpc ( VAR_2 class ) )  rpc ( VAR_2 class ) (  rpc ( VAR_3 class ) )  rpc ( VAR_3 class ) (  rpc ( VAR_4 class ) )  rpc ( VAR_4 class ) (  install ( new TYPE_1 ( ) ) )  install ( new TYPE_1 ( ) ) (  install ( new TYPE_2 ( ) ) )  install ( new TYPE_2 ( ) ) (  install ( new TYPE_3 ( ) ) )  install ( new TYPE_3 ( ) ) (  install ( new TYPE_4 ( ) ) )  install ( new TYPE_4 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<java.lang.String> ) TYPE TYPE_1<java.lang.String> ( NAME e ) NAME e ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = e . getValue ( ) ) INIT = e . getValue ( ) ) VAR VAR ( IF IF ( COND ( VAR_1 != null ) && ( ( VAR_1 . length ( ) ) > 0 ) ) COND ( VAR_1 != null ) && ( ( VAR_1 . length ( ) ) > 0 ) ( THEN THEN (  VAR_2 . METHOD_2 ( TYPE_2 . METHOD_3 ( 1 , TYPE_3 . METHOD_4 ( VAR_1 ) ) ) )  VAR_2 . METHOD_2 ( TYPE_2 . METHOD_3 ( 1 , TYPE_3 . METHOD_4 ( VAR_1 ) ) ) (  view . METHOD_5 ( VAR_2 . METHOD_2 ( ) ) )  view . METHOD_5 ( VAR_2 . METHOD_2 ( ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME plugins ) NAME plugins ( INIT = VAR_1 ) INIT = VAR_1 ) VAR VAR (  TYPE_2 . METHOD_2 ( plugins ) )  TYPE_2 . METHOD_2 ( plugins ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = plugins . METHOD_3 ( STRING_1 ) ) INIT = plugins . METHOD_3 ( STRING_1 ) ) VAR VAR (  TYPE_2 . METHOD_4 ( VAR_2 , STRING_2 . METHOD_5 ( VAR_3 ) ) )  TYPE_2 . METHOD_4 ( VAR_2 , STRING_2 . METHOD_5 ( VAR_3 ) ) (  VAR_4 . METHOD_6 ( STRING_3 ) )  VAR_4 . METHOD_6 ( STRING_3 ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME i ) NAME i ( INIT = VAR_5 . config ( ) . server ( ) . METHOD_7 ( ) ) INIT = VAR_5 . config ( ) . server ( ) . METHOD_7 ( ) ) VAR VAR (  com.google.common.truth.Truth.assertThat ( VAR_6 ) . METHOD_8 ( 1 ) )  com.google.common.truth.Truth.assertThat ( VAR_6 ) . METHOD_8 ( 1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Project.NameKey ) TYPE com.google.gerrit.reviewdb.client.Project.NameKey ( NAME project ) NAME project ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME repo ) NAME repo ( INIT = VAR_1 . METHOD_2 ( project ) ) INIT = VAR_1 . METHOD_2 ( project ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = repo . METHOD_3 ( ) ) INIT = repo . METHOD_3 ( ) ) VAR VAR (  return new TYPE_1 ( repo , new org.eclipse.jgit.revwalk.RevWalk ( VAR_2 . METHOD_4 ( ) ) , VAR_2 , new TYPE_3 ( ) , true ) ; )  return new TYPE_1 ( repo , new org.eclipse.jgit.revwalk.RevWalk ( VAR_2 . METHOD_4 ( ) ) , VAR_2 , new TYPE_3 ( ) , true ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.ChangeInfo ) TYPE TYPE_1.ChangeInfo ( NAME c ) NAME c ( INIT = get ( changeId , VAR_1 , VAR_2 ) ) INIT = get ( changeId , VAR_1 , VAR_2 ) ) VAR VAR (  com.google.common.truth.Truth.assertThat ( VAR_3 ) . METHOD_2 ( 1 ) )  com.google.common.truth.Truth.assertThat ( VAR_3 ) . METHOD_2 ( 1 ) (  com.google.common.truth.Truth.assertThat ( VAR_4 ) . isEqualTo ( METHOD_3 ( 2 ) ) )  com.google.common.truth.Truth.assertThat ( VAR_4 ) . isEqualTo ( METHOD_3 ( 2 ) ) (  com.google.common.truth.Truth.assertThat ( ( ( TYPE_2 < ? > ) ( VAR_3 . METHOD_4 ( ) ) ) ) . METHOD_5 ( TYPE_3 . of ( METHOD_3 ( 2 ) ) ) )  com.google.common.truth.Truth.assertThat ( ( ( TYPE_2 < ? > ) ( VAR_3 . METHOD_4 ( ) ) ) ) . METHOD_5 ( TYPE_3 . of ( METHOD_3 ( 2 ) ) ) (  com.google.common.truth.Truth.assertThat ( VAR_3 . get ( METHOD_3 ( 2 ) ) . VAR_5 ) . isEqualTo ( INT_1 ) )  com.google.common.truth.Truth.assertThat ( VAR_3 . get ( METHOD_3 ( 2 ) ) . VAR_5 ) . isEqualTo ( INT_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<TYPE_2.NameKey> ) TYPE TYPE_1<TYPE_2.NameKey> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( STRING_1 ) )  METHOD_2 ( STRING_1 ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . create ( VAR_4 ) ) INIT = VAR_3 . create ( VAR_4 ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_2 . METHOD_1 ( VAR_1 ) )  VAR_2 . METHOD_1 ( VAR_1 ) (  METHOD_2 ( STRING_2 ) )  METHOD_2 ( STRING_2 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME e ) NAME e ( BLOCK BLOCK (  METHOD_3 ( ( STRING_3 + STRING_4 ) , e ) )  METHOD_3 ( ( STRING_3 + STRING_4 ) , e ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR (  METHOD_2 ( VAR_1 , null , true ) )  METHOD_2 ( VAR_1 , null , true ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME r ) NAME r ( INIT = VAR_2 . put ( ( ( STRING_2 + ( project . get ( ) ) ) + STRING_3 ) , METHOD_3 ( VAR_1 ) ) ) INIT = VAR_2 . put ( ( ( STRING_2 + ( project . get ( ) ) ) + STRING_3 ) , METHOD_3 ( VAR_1 ) ) ) VAR VAR (  com.google.common.truth.Truth.assertThat ( r . METHOD_4 ( ) ) . isEqualTo ( VAR_3 ) )  com.google.common.truth.Truth.assertThat ( r . METHOD_4 ( ) ) . isEqualTo ( VAR_3 ) (  r . METHOD_5 ( ) )  r . METHOD_5 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME apply ) NAME apply ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( format ) == ( VAR_2 ) ) COND ( format ) == ( VAR_2 ) ( THEN THEN ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_4 ( ) ) INIT = new TYPE_4 ( ) ) VAR VAR (  display ( VAR_3 ) )  display ( VAR_3 ) (  return TYPE_5 . create ( VAR_3 . METHOD_1 ( ) ) . METHOD_2 ( STRING_1 ) . METHOD_3 ( TYPE_6 . name ( ) ) ; )  return TYPE_5 . create ( VAR_3 . METHOD_1 ( ) ) . METHOD_2 ( STRING_1 ) . METHOD_3 ( TYPE_6 . name ( ) ) ; ) THEN THEN ) IF IF (  return apply ( ) ; )  return apply ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN org.eclipse.jgit.lib.ObjectId ) RETURN org.eclipse.jgit.lib.ObjectId ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME repo ) NAME repo ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.lib.ObjectId ) TYPE org.eclipse.jgit.lib.ObjectId ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME path ) NAME path ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevWalk ) TYPE org.eclipse.jgit.revwalk.RevWalk ( NAME rw ) NAME rw ( INIT = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ) INIT = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  rw . METHOD_2 ( rw . parseCommit ( VAR_1 ) ) )  rw . METHOD_2 ( rw . parseCommit ( VAR_1 ) ) (  rw . METHOD_3 ( false ) )  rw . METHOD_3 ( false ) (  rw . METHOD_4 ( TYPE_1 . create ( TYPE_2 . METHOD_5 ( path ) , VAR_2 ) ) )  rw . METHOD_4 ( TYPE_1 . create ( TYPE_2 . METHOD_5 ( path ) , VAR_2 ) ) (  return rw . METHOD_6 ( ) ; )  return rw . METHOD_6 ( ) ; ) BLOCK BLOCK ( FINALLY FINALLY (  rw . METHOD_7 ( ) )  rw . METHOD_7 ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( db ) != null ) COND ( db ) != null ( THEN THEN ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2.Project ) TYPE TYPE_2.Project ( NAME project ) NAME project ( INIT = getProject ( ) ) INIT = getProject ( ) ) VAR VAR ( IF IF ( COND project != null ) COND project != null ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME w ) NAME w ( IN db . METHOD_2 ( ) . METHOD_3 ( project . getId ( ) ) ) IN db . METHOD_2 ( ) . METHOD_3 ( project . getId ( ) ) ( BLOCK BLOCK (  add ( VAR_1 , w . getAccountId ( ) ) )  add ( VAR_1 , w . getAccountId ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4.OrmException ) TYPE TYPE_4.OrmException ( NAME err ) NAME err ( BLOCK BLOCK ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) != null ) COND ( VAR_1 ) != null ( THEN THEN ( IF IF ( COND ( VAR_1 . METHOD_2 ( ) ) != null ) COND ( VAR_1 . METHOD_2 ( ) ) != null ( THEN THEN (  return VAR_1 . METHOD_2 ( ) ; )  return VAR_1 . METHOD_2 ( ) ; ) THEN THEN ) IF IF (  return VAR_1 . METHOD_3 ( ) . toString ( ) ; )  return VAR_1 . METHOD_3 ( ) . toString ( ) ; ) THEN THEN ) IF IF (  return VAR_2 . getName ( ) ; )  return VAR_2 . getName ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<com.google.gerrit.server.query.change.ChangeData> ) TYPE TYPE_1<com.google.gerrit.server.query.change.ChangeData> ( NAME in ) NAME in ( INIT = METHOD_2 ( STRING_1 ) ) INIT = METHOD_2 ( STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1<com.google.gerrit.server.query.change.ChangeData> ) TYPE TYPE_1<com.google.gerrit.server.query.change.ChangeData> ( NAME out ) NAME out ( INIT = METHOD_3 ( in ) ) INIT = METHOD_3 ( in ) ) VAR VAR (  METHOD_4 ( VAR_1 class , out . METHOD_5 ( ) ) )  METHOD_4 ( VAR_1 class , out . METHOD_5 ( ) ) (  assertEquals ( TYPE_2 . of ( query ( TYPE_1 . METHOD_6 ( in . METHOD_7 ( 0 ) , in . METHOD_7 ( 2 ) ) ) , in . METHOD_7 ( 1 ) , in . METHOD_7 ( INT_1 ) ) , out . METHOD_8 ( ) ) )  assertEquals ( TYPE_2 . of ( query ( TYPE_1 . METHOD_6 ( in . METHOD_7 ( 0 ) , in . METHOD_7 ( 2 ) ) ) , in . METHOD_7 ( 1 ) , in . METHOD_7 ( INT_1 ) ) , out . METHOD_8 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME m ) NAME m ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  m . METHOD_2 ( ) )  m . METHOD_2 ( ) (  m . METHOD_3 ( ) )  m . METHOD_3 ( ) (  m . METHOD_4 ( TYPE_2 . css ( ) . METHOD_5 ( ) ) )  m . METHOD_4 ( TYPE_2 . css ( ) . METHOD_5 ( ) ) ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  m . METHOD_6 ( TYPE_2 . css ( ) . METHOD_7 ( ) ) )  m . METHOD_6 ( TYPE_2 . css ( ) . METHOD_7 ( ) ) ) THEN THEN ( ELSE ELSE (  m . METHOD_8 ( STRING_1 , STRING_2 ) )  m . METHOD_8 ( STRING_1 , STRING_2 ) ) ELSE ELSE ) IF IF (  m . METHOD_9 ( ) )  m . METHOD_9 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME b ) NAME b ( INIT = ( ( base ) != null ) ? java.lang.String . METHOD_1 ( base . get ( ) ) : null ) INIT = ( ( base ) != null ) ? java.lang.String . METHOD_1 ( base . get ( ) ) : null ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = java.lang.String . METHOD_1 ( revision . get ( ) ) ) INIT = java.lang.String . METHOD_1 ( revision . get ( ) ) ) VAR VAR (  TYPE_2 . display ( TYPE_3 . METHOD_2 ( changeId , VAR_1 ) , new TYPE_4 ( changeId , b , VAR_1 , VAR_2 ) ) )  TYPE_2 . display ( TYPE_3 . METHOD_2 ( changeId , VAR_1 ) , new TYPE_4 ( changeId , b , VAR_1 , VAR_2 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<?extendsjava.util.Set<java.lang.String>> ) RETURN TYPE_1<?extendsjava.util.Set<java.lang.String>> ( NAME apply ) NAME apply ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME req ) NAME req ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_1 ) NAME VAR_1 ( INIT = req . METHOD_1 ( ) ) INIT = req . METHOD_1 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME notes ) NAME notes ( INIT = VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) INIT = VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE java.util.Set<java.lang.String> ) TYPE java.util.Set<java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ( INIT = notes . METHOD_4 ( ) ) INIT = notes . METHOD_4 ( ) ) VAR VAR ( IF IF ( COND VAR_2 == null ) COND VAR_2 == null ( THEN THEN (  VAR_2 = java.util.Collections . METHOD_5 ( ) )  VAR_2 = java.util.Collections . METHOD_5 ( ) ) THEN THEN ) IF IF (  return TYPE_1 . METHOD_6 ( new TYPE_7 < java.lang.String > ( VAR_2 ) ) ; )  return TYPE_1 . METHOD_6 ( new TYPE_7 < java.lang.String > ( VAR_2 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME change ) NAME change ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME patch ) NAME patch ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME branch ) NAME branch ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( branch . METHOD_2 ( TYPE_1 ) ) == 0 ) COND ( branch . METHOD_2 ( TYPE_1 ) ) == 0 ( THEN THEN (  branch = branch . METHOD_3 ( TYPE_1 . length ( ) ) )  branch = branch . METHOD_3 ( TYPE_1 . length ( ) ) ) THEN THEN ) IF IF (  return ( ( ( change + STRING_1 ) + patch ) + STRING_1 ) + branch ; )  return ( ( ( change + STRING_1 ) + patch ) + STRING_1 ) + branch ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.PatchSetApproval ) TYPE com.google.gerrit.reviewdb.client.PatchSetApproval ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME msg ) NAME msg ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND msg != null ) COND msg != null ( THEN THEN ( IF IF ( COND ( VAR_1 != null ) && ( ( msg . METHOD_2 ( ) ) == null ) ) COND ( VAR_1 != null ) && ( ( msg . METHOD_2 ( ) ) == null ) ( THEN THEN (  msg . METHOD_3 ( VAR_1 . getAccountId ( ) ) )  msg . METHOD_3 ( VAR_1 . getAccountId ( ) ) ) THEN THEN ) IF IF ( TRY TRY ( BLOCK BLOCK (  db . METHOD_4 ( ) . insert ( java.util.Collections.singleton ( msg ) ) )  db . METHOD_4 ( ) . insert ( java.util.Collections.singleton ( msg ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE com.google.gwtorm.server.OrmException ) TYPE com.google.gwtorm.server.OrmException ( NAME err ) NAME err ( BLOCK BLOCK (  VAR_2 . METHOD_5 ( STRING_1 , err ) )  VAR_2 . METHOD_5 ( STRING_1 , err ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME out ) NAME out ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME repo ) NAME repo ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevWalk ) TYPE org.eclipse.jgit.revwalk.RevWalk ( NAME walk ) NAME walk ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME path ) NAME path ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME diff ) NAME diff ( INIT = new TYPE_4 ( VAR_3 , out ) ) INIT = new TYPE_4 ( VAR_3 , out ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( IF IF ( COND ! ( path . equals ( STRING_1 ) ) ) COND ! ( path . equals ( STRING_1 ) ) ( THEN THEN (  diff . METHOD_2 ( TYPE_5 . create ( path ) ) )  diff . METHOD_2 ( TYPE_5 . create ( path ) ) ) THEN THEN ) IF IF (  diff . METHOD_3 ( repo ) )  diff . METHOD_3 ( repo ) (  diff . METHOD_4 ( true ) )  diff . METHOD_4 ( true ) (  diff . format ( VAR_1 , VAR_2 ) )  diff . format ( VAR_1 , VAR_2 ) ) BLOCK BLOCK ( FINALLY FINALLY (  diff . METHOD_5 ( ) )  diff . METHOD_5 ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.List<TYPE_1> ) RETURN java.util.List<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_3 . METHOD_2 ( ) ) INIT = TYPE_3 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = false ) INIT = false ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_4 ) IN VAR_4 ( BLOCK BLOCK (  VAR_1 . METHOD_3 ( VAR_3 . METHOD_4 ( event ) ) )  VAR_1 . METHOD_3 ( VAR_3 . METHOD_4 ( event ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_1 . add ( new TYPE_1 ( e . getMessage ( ) , true ) ) )  VAR_1 . add ( new TYPE_1 ( e . getMessage ( ) , true ) ) (  VAR_2 = true )  VAR_2 = true ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ( IF IF ( COND VAR_2 ) COND VAR_2 ( THEN THEN (  METHOD_5 ( VAR_1 , event ) )  METHOD_5 ( VAR_1 , event ) ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME equals ) NAME equals ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 instanceof TYPE_2 ) COND VAR_1 instanceof TYPE_2 ( THEN THEN ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME p ) NAME p ( INIT = ( ( TYPE_2 ) ( VAR_1 ) ) ) INIT = ( ( TYPE_2 ) ( VAR_1 ) ) ) VAR VAR (  return ( METHOD_1 ( ) . equals ( p . METHOD_1 ( ) ) ) && ( id . equals ( p . id ) ) ; )  return ( METHOD_1 ( ) . equals ( p . METHOD_1 ( ) ) ) && ( id . equals ( p . id ) ) ; ) THEN THEN ) IF IF (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.Id ) TYPE TYPE_1.Id ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME msg ) NAME msg ) VAR VAR ( VAR VAR ( TYPE java.util.Set<TYPE_2.Id> ) TYPE java.util.Set<TYPE_2.Id> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_3<TYPE_4> ) TYPE TYPE_3<TYPE_4> ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_5 . METHOD_2 ( VAR_4 . create ( VAR_1 , msg , VAR_2 ) ) . to ( VAR_3 ) )  TYPE_5 . METHOD_2 ( VAR_4 . create ( VAR_1 , msg , VAR_2 ) ) . to ( VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Account.Id ) TYPE com.google.gerrit.reviewdb.client.Account.Id ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Account ) TYPE com.google.gerrit.reviewdb.client.Account ( NAME account ) NAME account ( INIT = new com.google.gerrit.reviewdb.client.Account ( VAR_1 , TYPE_2 . METHOD_2 ( ) ) ) INIT = new com.google.gerrit.reviewdb.client.Account ( VAR_1 , TYPE_2 . METHOD_2 ( ) ) ) VAR VAR (  account . METHOD_3 ( false ) )  account . METHOD_3 ( false ) ( VAR VAR ( TYPE java.util.Set<TYPE_3> ) TYPE java.util.Set<TYPE_3> ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_4 . of ( ) ) INIT = TYPE_4 . of ( ) ) VAR VAR (  return new TYPE_1 ( VAR_3 , account , VAR_2 , java.util.Collections . METHOD_4 ( ) , new TYPE_5 < TYPE_6 , java.util.Set < TYPE_7 > > ( ) ) ; )  return new TYPE_1 ( VAR_3 , account , VAR_2 , java.util.Collections . METHOD_4 ( ) , new TYPE_5 < TYPE_6 , java.util.Set < TYPE_7 > > ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME key ) NAME key ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN TYPE_3 ) RETURN TYPE_3 ( NAME METHOD_2 ) NAME METHOD_2 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_4 . METHOD_3 ( VAR_1 , key ) ) INIT = TYPE_4 . METHOD_3 ( VAR_1 , key ) ) VAR VAR (  return VAR_3 . METHOD_4 ( TYPE_5 . on ( STRING_4 ) . METHOD_5 ( VAR_4 , STRING_5 , VAR_1 ) , VAR_2 ) ; )  return VAR_3 . METHOD_4 ( TYPE_5 . on ( STRING_4 ) . METHOD_5 ( VAR_4 , STRING_5 , VAR_1 ) , VAR_2 ) ; ) BLOCK BLOCK ) METHOD METHOD (  return new TYPE_2 ( ( ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + key ) + STRING_3 ) ) { TYPE_3 METHOD_2 ( ) throws java.io.IOException { java.lang.String VAR_2 = TYPE_4 . METHOD_3 ( VAR_1 , key ) ; return VAR_3 . METHOD_4 ( TYPE_5 . on ( STRING_4 ) . METHOD_5 ( VAR_4 , STRING_5 , VAR_1 ) , VAR_2 ) ; } } . METHOD_6 ( ) ; )  return new TYPE_2 ( ( ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + key ) + STRING_3 ) ) { TYPE_3 METHOD_2 ( ) throws java.io.IOException { java.lang.String VAR_2 = TYPE_4 . METHOD_3 ( VAR_1 , key ) ; return VAR_3 . METHOD_4 ( TYPE_5 . on ( STRING_4 ) . METHOD_5 ( VAR_4 , STRING_5 , VAR_1 ) , VAR_2 ) ; } } . METHOD_6 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_4 . METHOD_2 ( VAR_2 . get ( ) ) ) INIT = TYPE_4 . METHOD_2 ( VAR_2 . get ( ) ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_1 ( VAR_1 ) ) INIT = new TYPE_1 ( VAR_1 ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( IF IF ( COND VAR_3 . METHOD_3 ( ) ) COND VAR_3 . METHOD_3 ( ) ( THEN THEN (  return VAR_3 ; )  return VAR_3 ; ) THEN THEN ( ELSE ELSE (  throw new TYPE_2 ( STRING_1 ) ; )  throw new TYPE_2 ( STRING_1 ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME VAR_4 ) NAME VAR_4 ( BLOCK BLOCK (  throw new TYPE_2 ( STRING_2 ) ; )  throw new TYPE_2 ( STRING_2 ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER static ) MODIFIER static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return new TYPE_3 ( VAR_1 , VAR_2 , true , ( ! ( TYPE_1 . METHOD_2 ( VAR_3 class , VAR_1 . METHOD_3 ( ) ) ) ) , TYPE_1 . METHOD_2 ( VAR_4 class , VAR_1 . METHOD_3 ( ) ) , TYPE_1 . METHOD_2 ( VAR_5 class , VAR_1 . METHOD_3 ( ) ) , null , null ) ; )  return new TYPE_3 ( VAR_1 , VAR_2 , true , ( ! ( TYPE_1 . METHOD_2 ( VAR_3 class , VAR_1 . METHOD_3 ( ) ) ) ) , TYPE_1 . METHOD_2 ( VAR_4 class , VAR_1 . METHOD_3 ( ) ) , TYPE_1 . METHOD_2 ( VAR_5 class , VAR_1 . METHOD_3 ( ) ) , null , null ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN com.google.gerrit.reviewdb.client.Change.Id ) RETURN com.google.gerrit.reviewdb.client.Change.Id ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.server.ReviewDb ) TYPE com.google.gerrit.reviewdb.server.ReviewDb ( NAME db ) NAME db ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME email ) NAME email ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4.Key ) TYPE TYPE_4.Key ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_4 . Key ( VAR_3 , VAR_1 ) ) INIT = new TYPE_4 . Key ( VAR_3 , VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_4 ) NAME VAR_4 ( INIT = db . METHOD_2 ( ) ) INIT = db . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_4 . get ( VAR_2 ) ) INIT = VAR_4 . get ( VAR_2 ) ) VAR VAR ( IF IF ( COND VAR_5 == null ) COND VAR_5 == null ( THEN THEN (  return VAR_6 . METHOD_3 ( VAR_1 , name , email ) ; )  return VAR_6 . METHOD_3 ( VAR_1 , name , email ) ; ) THEN THEN ) IF IF (  return VAR_5 . getAccountId ( ) ; )  return VAR_5 . getAccountId ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.Result ) TYPE TYPE_1.Result ( NAME change ) NAME change ( INIT = METHOD_2 ( git , true ) ) INIT = METHOD_2 ( git , true ) ) VAR VAR (  METHOD_2 ( git , false ) )  METHOD_2 ( git , false ) ( VAR VAR ( TYPE java.util.Set<java.lang.String> ) TYPE java.util.Set<java.lang.String> ( NAME changes ) NAME changes ( INIT = METHOD_3 ( change ) ) INIT = METHOD_3 ( change ) ) VAR VAR (  com.google.common.truth.Truth.assertThat ( ( ( TYPE_2 < ? > ) ( changes ) ) ) . isEmpty ( ) )  com.google.common.truth.Truth.assertThat ( ( ( TYPE_2 < ? > ) ( changes ) ) ) . isEmpty ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN org.eclipse.jgit.lib.ObjectId ) RETURN org.eclipse.jgit.lib.ObjectId ( NAME commit ) NAME commit ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . create ( METHOD_1 ( ) ) ) INIT = VAR_2 . create ( METHOD_1 ( ) ) ) VAR VAR (  VAR_1 . add ( this ) )  VAR_1 . add ( this ) (  TYPE_2 . METHOD_2 ( getChange ( ) , VAR_1 . METHOD_3 ( ) . get ( getId ( ) ) ) )  TYPE_2 . METHOD_2 ( getChange ( ) , VAR_1 . METHOD_3 ( ) . get ( getId ( ) ) ) (  VAR_1 . METHOD_4 ( ) )  VAR_1 . METHOD_4 ( ) (  return METHOD_5 ( ) ; )  return METHOD_5 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME path ) NAME path ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME res ) NAME res ( INIT = METHOD_2 ( path , ( STRING_1 + VAR_1 ) , VAR_2 ) ) INIT = METHOD_2 ( path , ( STRING_1 + VAR_1 ) , VAR_2 ) ) VAR VAR (  com.google.common.truth.Truth.assertThat ( res . METHOD_3 ( VAR_3 ) ) . isEqualTo ( STRING_2 ) )  com.google.common.truth.Truth.assertThat ( res . METHOD_3 ( VAR_3 ) ) . isEqualTo ( STRING_2 ) ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ( INIT = res . METHOD_4 ( ) ) INIT = res . METHOD_4 ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_5 ) NAME VAR_5 ( INIT = STRING_3 ) INIT = STRING_3 ) VAR VAR (  com.google.common.truth.Truth.assertThat ( VAR_4 ) . METHOD_5 ( VAR_5 ) )  com.google.common.truth.Truth.assertThat ( VAR_4 ) . METHOD_5 ( VAR_5 ) ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME result ) NAME result ( INIT = VAR_4 . METHOD_6 ( VAR_5 . length ( ) ) ) INIT = VAR_4 . METHOD_6 ( VAR_5 . length ( ) ) ) VAR VAR (  VAR_6 . METHOD_7 ( result ) )  VAR_6 . METHOD_7 ( result ) (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME topic ) NAME topic ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME topic ) NAME topic ) VAR VAR ( VAR VAR ( TYPE TYPE_1<java.lang.String> ) TYPE TYPE_1<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_3 . METHOD_1 ( id , STRING_1 ) ) INIT = TYPE_3 . METHOD_1 ( id , STRING_1 ) ) VAR VAR (  topic = TYPE_3 . METHOD_2 ( topic ) )  topic = TYPE_3 . METHOD_2 ( topic ) ( IF IF ( COND topic != null ) COND topic != null ( THEN THEN ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME input ) NAME input ( INIT = TYPE_4 . create ( ) ) INIT = TYPE_4 . create ( ) ) VAR VAR (  input . topic ( topic ) )  input . topic ( topic ) (  VAR_2 . put ( input , TYPE_5 . METHOD_3 ( VAR_1 ) ) )  VAR_2 . put ( input , TYPE_5 . METHOD_3 ( VAR_1 ) ) ) THEN THEN ( ELSE ELSE (  VAR_2 . delete ( TYPE_5 . METHOD_3 ( VAR_1 ) ) )  VAR_2 . delete ( TYPE_5 . METHOD_3 ( VAR_1 ) ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( ( ! ( METHOD_2 ( VAR_1 ) ) ) && ( ! ( METHOD_2 ( VAR_2 ) ) ) ) && ( ! ( METHOD_3 ( ) ) ) ) COND ( ( ! ( METHOD_2 ( VAR_1 ) ) ) && ( ! ( METHOD_2 ( VAR_2 ) ) ) ) && ( ! ( METHOD_3 ( ) ) ) ( THEN THEN ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 . getProject ( ) . getName ( ) ) INIT = VAR_4 . getProject ( ) . getName ( ) ) VAR VAR (  return new TYPE_1 ( ( ( STRING_1 + VAR_3 ) + STRING_2 ) ) ; )  return new TYPE_1 ( ( ( STRING_1 + VAR_3 ) + STRING_2 ) ) ; ) THEN THEN ) IF IF ( IF IF ( COND VAR_4 . METHOD_4 ( ) ) COND VAR_4 . METHOD_4 ( ) ( THEN THEN (  return METHOD_5 ( ) ; )  return METHOD_5 ( ) ; ) THEN THEN ) IF IF (  return VAR_5 ; )  return VAR_5 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( STRING_1 , null , STRING_2 ) ) . METHOD_4 ( STRING_3 ) . METHOD_5 ( ) )  TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( STRING_1 , null , STRING_2 ) ) . METHOD_4 ( STRING_3 ) . METHOD_5 ( ) (  TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( STRING_1 , null , STRING_4 ) ) . METHOD_4 ( STRING_5 ) . METHOD_5 ( ) )  TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( STRING_1 , null , STRING_4 ) ) . METHOD_4 ( STRING_5 ) . METHOD_5 ( ) (  TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( STRING_1 , null , STRING_6 ) ) . METHOD_4 ( STRING_5 ) . METHOD_5 ( ) )  TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( STRING_1 , null , STRING_6 ) ) . METHOD_4 ( STRING_5 ) . METHOD_5 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.Result ) TYPE TYPE_1.Result ( NAME result ) NAME result ( INIT = METHOD_2 ( STRING_1 , STRING_2 , STRING_3 , STRING_4 ) ) INIT = METHOD_2 ( STRING_1 , STRING_2 , STRING_3 , STRING_4 ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME projectName ) NAME projectName ( INIT = result . getChange ( ) . change ( ) . getProject ( ) . get ( ) ) INIT = result . getChange ( ) . change ( ) . getProject ( ) . get ( ) ) VAR VAR (  METHOD_3 ( new TYPE_2 . NameKey ( projectName , STRING_5 ) ) )  METHOD_3 ( new TYPE_2 . NameKey ( projectName , STRING_5 ) ) (  METHOD_4 ( STRING_6 , projectName ) )  METHOD_4 ( STRING_6 , projectName ) (  METHOD_5 ( result . getChangeId ( ) ) )  METHOD_5 ( result . getChangeId ( ) ) (  result . METHOD_6 ( ) )  result . METHOD_6 ( ) (  METHOD_7 ( result ) )  METHOD_7 ( result ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( false ) )  METHOD_2 ( false ) (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<TYPE_3.Branch> ) TYPE java.util.List<TYPE_3.Branch> ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( true ) )  METHOD_2 ( true ) (  VAR_2 . display ( result ) )  VAR_2 . display ( result ) ) BLOCK BLOCK ) METHOD METHOD (  TYPE_1 . METHOD_3 ( VAR_1 , new TYPE_2 < java.util.List < TYPE_3 . Branch > > ( ) { public void onSuccess ( final java.util.List < TYPE_3 . Branch > result ) { METHOD_2 ( true ) ; VAR_2 . display ( result ) ; } } ) )  TYPE_1 . METHOD_3 ( VAR_1 , new TYPE_2 < java.util.List < TYPE_3 . Branch > > ( ) { public void onSuccess ( final java.util.List < TYPE_3 . Branch > result ) { METHOD_2 ( true ) ; VAR_2 . display ( result ) ; } } ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN java.util.List<TYPE_1<com.google.gerrit.server.query.change.ChangeData>> ) RETURN java.util.List<TYPE_1<com.google.gerrit.server.query.change.ChangeData>> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2<com.google.gerrit.server.query.change.ChangeData> ) TYPE TYPE_2<com.google.gerrit.server.query.change.ChangeData> ( NAME schema ) NAME schema ) VAR VAR ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1<com.google.gerrit.server.query.change.ChangeData>> ) TYPE java.util.List<TYPE_1<com.google.gerrit.server.query.change.ChangeData>> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new java.util.ArrayList < > ( VAR_1 . size ( ) ) ) INIT = new java.util.ArrayList < > ( VAR_1 . size ( ) ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE java.lang.String ) TYPE java.lang.String ( NAME s ) NAME s ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK (  VAR_2 . add ( TYPE_3 . commit ( schema , s ) ) )  VAR_2 . add ( TYPE_3 . commit ( schema , s ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME refs ) NAME refs ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( refs ) )  METHOD_2 ( refs ) ( VAR VAR ( TYPE java.util.List<org.eclipse.jgit.revwalk.RevCommit> ) TYPE java.util.List<org.eclipse.jgit.revwalk.RevCommit> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_3 < > ( ) ) INIT = new TYPE_3 < > ( ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<org.eclipse.jgit.revwalk.RevCommit> ) TYPE java.util.List<org.eclipse.jgit.revwalk.RevCommit> ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_3 < > ( ) ) INIT = new TYPE_3 < > ( ) ) VAR VAR (  METHOD_3 ( VAR_1 , VAR_2 ) )  METHOD_3 ( VAR_1 , VAR_2 ) (  rw . METHOD_4 ( ) )  rw . METHOD_4 ( ) (  return ( ! ( METHOD_5 ( VAR_2 , 1 ) . isEmpty ( ) ) ) || ( ! ( METHOD_5 ( VAR_1 , 1 ) . isEmpty ( ) ) ) ; )  return ( ! ( METHOD_5 ( VAR_2 , 1 ) . isEmpty ( ) ) ) || ( ! ( METHOD_5 ( VAR_1 , 1 ) . isEmpty ( ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_4 . METHOD_2 ( VAR_3 ) )  VAR_4 . METHOD_2 ( VAR_3 ) (  VAR_5 . METHOD_2 ( VAR_2 ) )  VAR_5 . METHOD_2 ( VAR_2 ) (  VAR_6 . METHOD_2 ( VAR_1 ) )  VAR_6 . METHOD_2 ( VAR_1 ) (  VAR_7 . METHOD_2 ( VAR_1 ) )  VAR_7 . METHOD_2 ( VAR_1 ) (  VAR_8 . METHOD_2 ( VAR_3 ) )  VAR_8 . METHOD_2 ( VAR_3 ) (  VAR_9 . METHOD_2 ( ( ( VAR_1 || VAR_2 ) || VAR_3 ) ) )  VAR_9 . METHOD_2 ( ( ( VAR_1 || VAR_2 ) || VAR_3 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME update ) NAME update ( PARAMS PARAMS ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_2 += VAR_1 )  VAR_2 += VAR_1 ( IF IF ( COND ( VAR_3 ) != ( VAR_4 ) ) COND ( VAR_3 ) != ( VAR_4 ) ( THEN THEN ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_5 ) NAME VAR_5 ( INIT = ( ( VAR_2 ) * INT_1 ) / ( VAR_3 ) ) INIT = ( ( VAR_2 ) * INT_1 ) / ( VAR_3 ) ) VAR VAR ( IF IF ( COND VAR_5 > ( VAR_6 ) ) COND VAR_5 > ( VAR_6 ) ( THEN THEN (  VAR_6 = VAR_5 )  VAR_6 = VAR_5 (  METHOD_1 ( ) )  METHOD_1 ( ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  repo = new TYPE_1 < TYPE_2 > ( new TYPE_3 ( new TYPE_4 ( STRING_1 ) ) ) )  repo = new TYPE_1 < TYPE_2 > ( new TYPE_3 ( new TYPE_4 ( STRING_1 ) ) ) (  walk = new org.eclipse.jgit.revwalk.RevWalk ( repo . METHOD_2 ( ) ) )  walk = new org.eclipse.jgit.revwalk.RevWalk ( repo . METHOD_2 ( ) ) (  VAR_1 = new TYPE_5 ( ) )  VAR_1 = new TYPE_5 ( ) (  VAR_2 = ( repo . METHOD_3 ( ) . METHOD_4 ( ) ) / INT_1 )  VAR_2 = ( repo . METHOD_3 ( ) . METHOD_4 ( ) ) / INT_1 ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME path ) NAME path ( IN METHOD_2 ( ) ) IN METHOD_2 ( ) ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_3 ( path ) ) INIT = METHOD_3 ( path ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_3 ( VAR_1 . METHOD_4 ( ) ) ) INIT = new TYPE_3 ( VAR_1 . METHOD_4 ( ) ) ) VAR VAR ( IF IF ( COND VAR_2 . METHOD_5 ( new TYPE_3 ( ) ) ) COND VAR_2 . METHOD_5 ( new TYPE_3 ( ) ) ( THEN THEN (  METHOD_6 ( path ) )  METHOD_6 ( path ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_1 ( VAR_1 ) ) INIT = new TYPE_1 ( VAR_1 ) ) VAR VAR (  assertEquals ( STRING_2 , VAR_2 . toString ( ) ) )  assertEquals ( STRING_2 , VAR_2 . toString ( ) ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_1 ( STRING_3 ) ) INIT = new TYPE_1 ( STRING_3 ) ) VAR VAR (  VAR_3 . METHOD_2 ( VAR_2 . toString ( ) ) )  VAR_3 . METHOD_2 ( VAR_2 . toString ( ) ) (  assertEquals ( VAR_2 , VAR_3 ) )  assertEquals ( VAR_2 , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1.Result ) RETURN TYPE_1.Result ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME index ) NAME index ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_4 ( new TYPE_5 ( VAR_2 ) ) ) INIT = new TYPE_4 ( new TYPE_5 ( VAR_2 ) ) ) VAR VAR (  VAR_1 . METHOD_2 ( 2 ) )  VAR_1 . METHOD_2 ( 2 ) ( VAR VAR ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME VAR_3 ) NAME VAR_3 ( INIT = TYPE_6 . METHOD_3 ( ) ) INIT = TYPE_6 . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<com.google.gerrit.reviewdb.client.Project.NameKey> ) TYPE java.util.List<com.google.gerrit.reviewdb.client.Project.NameKey> ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_4 = METHOD_4 ( VAR_1 ) )  VAR_4 = METHOD_4 ( VAR_1 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE com.google.gwtorm.server.OrmException ) TYPE com.google.gwtorm.server.OrmException ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_5 . error ( STRING_1 , e ) )  VAR_5 . error ( STRING_1 , e ) (  return new TYPE_7 . Result ( VAR_3 , false , 0 , 0 ) ; )  return new TYPE_7 . Result ( VAR_3 , false , 0 , 0 ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  return METHOD_5 ( index , VAR_4 , VAR_1 ) ; )  return METHOD_5 ( index , VAR_4 , VAR_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public final ) MODIFIER public final ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND METHOD_1 ( ) ) COND METHOD_1 ( ) ( THEN THEN ( IF IF ( COND ( ( result . size ( ) ) == 1 ) && ( TYPE_2 . METHOD_2 ( query ) ) ) COND ( ( result . size ( ) ) == 1 ) && ( TYPE_2 . METHOD_2 ( query ) ) ( THEN THEN ( VAR VAR ( TYPE TYPE_3.ChangeInfo ) TYPE TYPE_3.ChangeInfo ( NAME c ) NAME c ( INIT = result . get ( 0 ) ) INIT = result . get ( 0 ) ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change.Id ) TYPE com.google.gerrit.reviewdb.client.Change.Id ( NAME id ) NAME id ( INIT = c . METHOD_3 ( ) ) INIT = c . METHOD_3 ( ) ) VAR VAR (  TYPE_4 . display ( TYPE_5 . METHOD_4 ( id ) , new TYPE_6 ( id ) ) )  TYPE_4 . display ( TYPE_5 . METHOD_4 ( id ) , new TYPE_6 ( id ) ) ) THEN THEN ( ELSE ELSE (  display ( result ) )  display ( result ) (  this . display ( ) )  this . display ( ) ) ELSE ELSE ) IF IF ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME commit ) NAME commit ( PARAMS PARAMS ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_1 . METHOD_1 ( ) . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_1 ( ) . METHOD_2 ( ) ) VAR VAR ( TRY TRY ( RESOURCES RESOURCES ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_5 ) NAME VAR_5 ( INIT = METHOD_3 ( VAR_1 , VAR_4 ) ) INIT = METHOD_3 ( VAR_1 , VAR_4 ) ) VAR VAR ) RESOURCES RESOURCES ( BLOCK BLOCK (  VAR_2 . commit ( VAR_5 ) )  VAR_2 . commit ( VAR_5 ) ) BLOCK BLOCK ) TRY TRY ( TRY TRY ( RESOURCES RESOURCES ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_5 ) NAME VAR_5 ( INIT = METHOD_3 ( VAR_1 , VAR_4 ) ) INIT = METHOD_3 ( VAR_1 , VAR_4 ) ) VAR VAR ) RESOURCES RESOURCES ( BLOCK BLOCK (  VAR_3 . commit ( VAR_5 ) )  VAR_3 . commit ( VAR_5 ) ) BLOCK BLOCK ) TRY TRY ( TRY TRY ( RESOURCES RESOURCES ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevWalk ) TYPE org.eclipse.jgit.revwalk.RevWalk ( NAME VAR_6 ) NAME VAR_6 ( INIT = new org.eclipse.jgit.revwalk.RevWalk ( VAR_1 ) ) INIT = new org.eclipse.jgit.revwalk.RevWalk ( VAR_1 ) ) VAR VAR ) RESOURCES RESOURCES ( BLOCK BLOCK (  TYPE_5 . METHOD_4 ( VAR_4 , VAR_6 ) )  TYPE_5 . METHOD_4 ( VAR_4 , VAR_6 ) ) BLOCK BLOCK ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1<java.lang.String> ) RETURN TYPE_1<java.lang.String> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<java.lang.String> ) TYPE TYPE_1<java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_3 . METHOD_2 ( ) ) INIT = TYPE_3 . METHOD_2 ( ) ) VAR VAR ( WHILE WHILE ( COND VAR_1 != null ) COND VAR_1 != null ( BLOCK BLOCK (  VAR_2 . METHOD_3 ( VAR_1 . value ( ) ) )  VAR_2 . METHOD_3 ( VAR_1 . value ( ) ) (  VAR_1 = TYPE_4 . METHOD_4 ( VAR_1 ) )  VAR_1 = TYPE_4 . METHOD_4 ( VAR_1 ) ) BLOCK BLOCK ) WHILE WHILE (  VAR_2 . METHOD_5 ( ) )  VAR_2 . METHOD_5 ( ) (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME msg ) NAME msg ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( info ) == null ) && ( ( VAR_1 ) != null ) ) COND ( ( info ) == null ) && ( ( VAR_1 ) != null ) ( THEN THEN (  info = new TYPE_1 ( TYPE_2 . info ( ) ) )  info = new TYPE_1 ( TYPE_2 . info ( ) ) (  VAR_1 . add ( info ) )  VAR_1 . add ( info ) ) THEN THEN ) IF IF (  info . METHOD_2 ( msg ) )  info . METHOD_2 ( msg ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 . METHOD_2 ( ) ) && ( ( getRevision ( ) ) == null ) ) COND ( VAR_1 . METHOD_2 ( ) ) && ( ( getRevision ( ) ) == null ) ( THEN THEN ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME repo ) NAME repo ( INIT = VAR_2 . METHOD_3 ( METHOD_4 ( ) ) ) INIT = VAR_2 . METHOD_3 ( METHOD_4 ( ) ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  METHOD_1 ( repo ) )  METHOD_1 ( repo ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new java.io.IOException ( e ) ; )  throw new java.io.IOException ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ( FINALLY FINALLY (  repo . close ( ) )  repo . close ( ) ) FINALLY FINALLY ) TRY TRY ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) != null ) COND ( VAR_1 ) != null ( THEN THEN (  return METHOD_2 ( VAR_1 ) ; )  return METHOD_2 ( VAR_1 ) ; ) THEN THEN ( ELSE ELSE ( SWITCH SWITCH ( NAME status . getStatus ( ) ) NAME status . getStatus ( ) ( CASE VAR_2 ( BLOCK BLOCK (  return STRING_1 ; )  return STRING_1 ; ) BLOCK BLOCK ) CASE VAR_2 ( CASE VAR_3 ( BLOCK BLOCK (  return STRING_2 ; )  return STRING_2 ; ) BLOCK BLOCK ) CASE VAR_3 ( DEFAULT DEFAULT ( BLOCK BLOCK (  return ( ( ( ( ( STRING_3 + ( VAR_4 ) ) + STRING_4 ) + ( VAR_5 ) ) + STRING_5 ) + ( VAR_6 ) ) + STRING_6 ; )  return ( ( ( ( ( STRING_3 + ( VAR_4 ) ) + STRING_4 ) + ( VAR_5 ) ) + STRING_5 ) + ( VAR_6 ) ) + STRING_6 ; ) BLOCK BLOCK ) DEFAULT DEFAULT ) SWITCH SWITCH ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = name + STRING_1 ) INIT = name + STRING_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . METHOD_2 ( VAR_1 ) ) INIT = VAR_3 . METHOD_2 ( VAR_1 ) ) VAR VAR ( IF IF ( COND TYPE_3 . METHOD_3 ( VAR_2 ) ) COND TYPE_3 . METHOD_3 ( VAR_2 ) ( THEN THEN (  return METHOD_4 ( VAR_1 ) ; )  return METHOD_4 ( VAR_1 ) ; ) THEN THEN ( ELSE ELSE (  return METHOD_5 ( name ) ; )  return METHOD_5 ( name ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  VAR_1 = TYPE_1 . METHOD_2 ( VAR_2 class ) )  VAR_1 = TYPE_1 . METHOD_2 ( VAR_2 class ) (  TYPE_1 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) . METHOD_5 ( TYPE_2 . METHOD_6 ( TYPE_3 . get ( STRING_1 ) ) ) . METHOD_7 ( ) )  TYPE_1 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) . METHOD_5 ( TYPE_2 . METHOD_6 ( TYPE_3 . get ( STRING_1 ) ) ) . METHOD_7 ( ) (  TYPE_1 . METHOD_8 ( VAR_1 ) )  TYPE_1 . METHOD_8 ( VAR_1 ) (  VAR_3 = new TYPE_4 ( VAR_4 , cfg , TYPE_1 . METHOD_2 ( VAR_5 class ) , VAR_1 ) )  VAR_3 = new TYPE_4 ( VAR_4 , cfg , TYPE_1 . METHOD_2 ( VAR_5 class ) , VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( RESOURCES RESOURCES ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_4 ( VAR_1 ) ) INIT = new TYPE_4 ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME in ) NAME in ( INIT = TYPE_5 . METHOD_2 ( VAR_2 ) ) INIT = TYPE_5 . METHOD_2 ( VAR_2 ) ) VAR VAR ) RESOURCES RESOURCES ( BLOCK BLOCK (  return new TYPE_6 ( in ) ; )  return new TYPE_6 ( in ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_7 ( ( STRING_1 + VAR_1 ) , e ) ; )  throw new TYPE_7 ( ( STRING_1 + VAR_1 ) , e ) ; ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE TYPE_8 ) TYPE TYPE_8 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_7 ( ( STRING_1 + VAR_1 ) , e ) ; )  throw new TYPE_7 ( ( STRING_1 + VAR_1 ) , e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME ctx ) NAME ctx ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  change = ctx . getChange ( ) )  change = ctx . getChange ( ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME update ) NAME update ( INIT = ctx . METHOD_2 ( psId ) ) INIT = ctx . METHOD_2 ( psId ) ) VAR VAR (  VAR_1 = ( change . getStatus ( ) ) == ( VAR_2 ) )  VAR_1 = ( change . getStatus ( ) ) == ( VAR_2 ) ( IF IF ( COND VAR_1 ) COND VAR_1 ( THEN THEN (  change . METHOD_3 ( VAR_3 ) )  change . METHOD_3 ( VAR_3 ) (  update . METHOD_3 ( change . getStatus ( ) ) )  update . METHOD_3 ( change . getStatus ( ) ) (  ctx . METHOD_1 ( ) )  ctx . METHOD_1 ( ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME in ) NAME in ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  return changes . id ( VAR_1 . get ( ) . apply ( revision , in ) . VAR_2 ) ; )  return changes . id ( VAR_1 . get ( ) . apply ( revision , in ) . VAR_2 ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE com.google.gwtorm.server.OrmException ) TYPE com.google.gwtorm.server.OrmException ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_3 ( STRING_1 , e ) ; )  throw new TYPE_3 ( STRING_1 , e ) ; ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_3 ( STRING_1 , e ) ; )  throw new TYPE_3 ( STRING_1 , e ) ; ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_3 ( STRING_1 , e ) ; )  throw new TYPE_3 ( STRING_1 , e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) != null ) COND ( VAR_1 ) != null ( THEN THEN (  VAR_1 . METHOD_2 ( ) )  VAR_1 . METHOD_2 ( ) (  VAR_1 = null )  VAR_1 = null ) THEN THEN ) IF IF ( IF IF ( COND ( VAR_2 ) != null ) COND ( VAR_2 ) != null ( THEN THEN (  VAR_2 . METHOD_2 ( ) )  VAR_2 . METHOD_2 ( ) (  VAR_2 = null )  VAR_2 = null ) THEN THEN ) IF IF (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME event ) NAME event ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME update ) NAME update ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return ( ( ( update != null ) && ( ( TYPE_3 . METHOD_2 ( VAR_1 ) ) == ( TYPE_3 . METHOD_2 ( update . METHOD_3 ( ) ) ) ) ) && ( VAR_2 . equals ( update . METHOD_4 ( ) ) ) ) && ( VAR_3 . equals ( update . METHOD_5 ( ) ) ) ; )  return ( ( ( update != null ) && ( ( TYPE_3 . METHOD_2 ( VAR_1 ) ) == ( TYPE_3 . METHOD_2 ( update . METHOD_3 ( ) ) ) ) ) && ( VAR_2 . equals ( update . METHOD_4 ( ) ) ) ) && ( VAR_3 . equals ( update . METHOD_5 ( ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change.Status ) TYPE com.google.gerrit.reviewdb.client.Change.Status ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME c ) NAME c ( INIT = getChange ( ) . change ( ) ) INIT = getChange ( ) . change ( ) ) VAR VAR (  com.google.common.truth.Truth.assertThat ( VAR_4 ) . isEqualTo ( c . METHOD_2 ( ) ) )  com.google.common.truth.Truth.assertThat ( VAR_4 ) . isEqualTo ( c . METHOD_2 ( ) ) (  com.google.common.truth.Truth.assertThat ( VAR_1 ) . isEqualTo ( c . getStatus ( ) ) )  com.google.common.truth.Truth.assertThat ( VAR_1 ) . isEqualTo ( c . getStatus ( ) ) (  com.google.common.truth.Truth.assertThat ( VAR_2 ) . isEqualTo ( TYPE_2 . METHOD_3 ( c . METHOD_4 ( ) ) ) )  com.google.common.truth.Truth.assertThat ( VAR_2 ) . isEqualTo ( TYPE_2 . METHOD_3 ( c . METHOD_4 ( ) ) ) (  METHOD_5 ( c , VAR_3 ) )  METHOD_5 ( c , VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  factory ( VAR_1 . Factory class ) )  factory ( VAR_1 . Factory class ) (  factory ( VAR_2 . Factory class ) )  factory ( VAR_2 . Factory class ) (  factory ( VAR_3 . Factory class ) )  factory ( VAR_3 . Factory class ) (  factory ( VAR_4 . Factory class ) )  factory ( VAR_4 . Factory class ) (  factory ( VAR_5 . Factory class ) )  factory ( VAR_5 . Factory class ) (  factory ( VAR_6 . Factory class ) )  factory ( VAR_6 . Factory class ) (  factory ( VAR_7 . Factory class ) )  factory ( VAR_7 . Factory class ) (  factory ( VAR_8 . Factory class ) )  factory ( VAR_8 . Factory class ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_1 ) NAME VAR_1 ( INIT = INT_1 ) INIT = INT_1 ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_2 ) NAME VAR_2 ( INIT = INT_2 ) INIT = INT_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_1 ( new TYPE_2 ( VAR_1 ) , VAR_2 ) ) INIT = new TYPE_1 ( new TYPE_2 ( VAR_1 ) , VAR_2 ) ) VAR VAR (  assertEquals ( ( ( VAR_1 + STRING_1 ) + VAR_2 ) , VAR_3 . toString ( ) ) )  assertEquals ( ( ( VAR_1 + STRING_1 ) + VAR_2 ) , VAR_3 . toString ( ) ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = new TYPE_1 ( new TYPE_2 ( 0 ) , 0 ) ) INIT = new TYPE_1 ( new TYPE_2 ( 0 ) , 0 ) ) VAR VAR (  VAR_4 . METHOD_2 ( VAR_3 . toString ( ) ) )  VAR_4 . METHOD_2 ( VAR_3 . toString ( ) ) (  assertEquals ( VAR_3 , VAR_4 ) )  assertEquals ( VAR_3 , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevWalk ) TYPE org.eclipse.jgit.revwalk.RevWalk ( NAME walk ) NAME walk ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE org.eclipse.jgit.lib.ObjectId ) TYPE org.eclipse.jgit.lib.ObjectId ( NAME id ) NAME id ( INIT = repo . METHOD_1 ( name ) ) INIT = repo . METHOD_1 ( name ) ) VAR VAR (  return id != null ? walk . METHOD_2 ( id ) : null ; )  return id != null ? walk . METHOD_2 ( id ) : null ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME e ) NAME e ( BLOCK BLOCK (  return null ; )  return null ; ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK (  return null ; )  return null ; ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME e ) NAME e ( BLOCK BLOCK (  return null ; )  return null ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.server.ReviewDb ) TYPE com.google.gerrit.reviewdb.server.ReviewDb ( NAME db ) NAME db ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.PatchSet.Id ) TYPE com.google.gerrit.reviewdb.client.PatchSet.Id ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.PatchSet ) TYPE com.google.gerrit.reviewdb.client.PatchSet ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3<com.google.gerrit.reviewdb.client.PatchSetApproval> ) TYPE TYPE_3<com.google.gerrit.reviewdb.client.PatchSetApproval> ( NAME VAR_5 ) NAME VAR_5 ( INIT = db . METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ) INIT = db . METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ) VAR VAR (  TYPE_4 . METHOD_1 ( db , VAR_1 , VAR_5 , VAR_2 , VAR_3 , VAR_4 ) )  TYPE_4 . METHOD_1 ( db , VAR_1 , VAR_5 , VAR_2 , VAR_3 , VAR_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( server , admin ) ) INIT = new TYPE_1 ( server , admin ) ) VAR VAR (  VAR_2 = new com.google.gerrit.reviewdb.client.Project.NameKey ( STRING_1 ) )  VAR_2 = new com.google.gerrit.reviewdb.client.Project.NameKey ( STRING_1 ) (  TYPE_2 . METHOD_2 ( VAR_1 , VAR_2 . get ( ) ) )  TYPE_2 . METHOD_2 ( VAR_1 , VAR_2 . get ( ) ) (  VAR_3 = new com.google.gerrit.reviewdb.client.Project.NameKey ( STRING_2 ) )  VAR_3 = new com.google.gerrit.reviewdb.client.Project.NameKey ( STRING_2 ) (  TYPE_2 . METHOD_2 ( VAR_1 , VAR_3 . get ( ) ) )  TYPE_2 . METHOD_2 ( VAR_1 , VAR_3 . get ( ) ) (  VAR_1 . close ( ) )  VAR_1 . close ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.ChangeInfo ) TYPE TYPE_1.ChangeInfo ( NAME change ) NAME change ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME revision ) NAME revision ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_3 . METHOD_2 ( ) . METHOD_3 ( ) ) ) COND ! ( VAR_3 . METHOD_2 ( ) . METHOD_3 ( ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME event ) NAME event ( INIT = new TYPE_5 ( change , revision , VAR_1 , VAR_2 ) ) INIT = new TYPE_5 ( change , revision , VAR_1 , VAR_2 ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME VAR_4 ) NAME VAR_4 ( IN VAR_3 ) IN VAR_3 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  VAR_4 . METHOD_4 ( event ) )  VAR_4 . METHOD_4 ( event ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.lang.Exception ) TYPE java.lang.Exception ( NAME e ) NAME e ( BLOCK BLOCK (  util . METHOD_5 ( TYPE_7 . log , e ) )  util . METHOD_5 ( TYPE_7 . log , e ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME changeId ) NAME changeId ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.lib.ObjectId ) TYPE org.eclipse.jgit.lib.ObjectId ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.ChangeInfo ) TYPE TYPE_1.ChangeInfo ( NAME c ) NAME c ( INIT = getChange ( changeId , VAR_3 ) ) INIT = getChange ( changeId , VAR_3 ) ) VAR VAR (  org.junit.Assert.assertEquals ( VAR_2 . name ( ) , VAR_4 ) )  org.junit.Assert.assertEquals ( VAR_2 . name ( ) , VAR_4 ) (  org.junit.Assert.assertEquals ( VAR_1 , VAR_5 . get ( VAR_2 . name ( ) ) . VAR_6 ) )  org.junit.Assert.assertEquals ( VAR_1 , VAR_5 . get ( VAR_2 . name ( ) ) . VAR_6 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.ReceiveCommand ) TYPE TYPE_1.ReceiveCommand ( NAME cmd ) NAME cmd ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME ctl ) NAME ctl ( INIT = VAR_1 . METHOD_2 ( cmd . getRefName ( ) ) ) INIT = VAR_1 . METHOD_2 ( cmd . getRefName ( ) ) ) VAR VAR ( IF IF ( COND ctl . METHOD_3 ( ) ) COND ctl . METHOD_3 ( ) ( THEN THEN (  cmd . METHOD_4 ( rp ) )  cmd . METHOD_4 ( rp ) ) THEN THEN ( ELSE ELSE (  TYPE_3 . reject ( cmd , STRING_1 ) )  TYPE_3 . reject ( cmd , STRING_1 ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_2 . METHOD_2 ( VAR_1 ) )  VAR_2 . METHOD_2 ( VAR_1 ) (  commit . METHOD_2 ( ( VAR_1 ? ! ( VAR_3 . METHOD_3 ( ) . isEmpty ( ) ) : false ) ) )  commit . METHOD_2 ( ( VAR_1 ? ! ( VAR_3 . METHOD_3 ( ) . isEmpty ( ) ) : false ) ) (  VAR_4 . METHOD_2 ( ( VAR_1 ? VAR_3 . METHOD_4 ( ) : false ) ) )  VAR_4 . METHOD_2 ( ( VAR_1 ? VAR_3 . METHOD_4 ( ) : false ) ) (  VAR_5 . METHOD_2 ( VAR_1 ) )  VAR_5 . METHOD_2 ( VAR_1 ) (  VAR_6 . METHOD_2 ( VAR_1 ) )  VAR_6 . METHOD_2 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME ctx ) NAME ctx ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME cm ) NAME cm ( INIT = VAR_1 . create ( change.getId ( ) ) ) INIT = VAR_1 . create ( change.getId ( ) ) ) VAR VAR (  cm . METHOD_2 ( ctx . METHOD_3 ( ) . getAccountId ( ) ) )  cm . METHOD_2 ( ctx . METHOD_3 ( ) . getAccountId ( ) ) (  cm . METHOD_4 ( patchSet , VAR_2 ) )  cm . METHOD_4 ( patchSet , VAR_2 ) (  cm . METHOD_5 ( VAR_3 . METHOD_6 ( ) ) )  cm . METHOD_5 ( VAR_3 . METHOD_6 ( ) ) (  cm . METHOD_7 ( VAR_3 . METHOD_8 ( ) ) )  cm . METHOD_7 ( VAR_3 . METHOD_8 ( ) ) (  cm . METHOD_9 ( ) )  cm . METHOD_9 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevWalk ) TYPE org.eclipse.jgit.revwalk.RevWalk ( NAME rw ) NAME rw ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND TYPE_4 . METHOD_2 ( VAR_1 , VAR_3 ) ) COND TYPE_4 . METHOD_2 ( VAR_1 , VAR_3 ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ( TRY TRY ( BLOCK BLOCK (  return ( VAR_2 == null ) || ( rw . METHOD_3 ( VAR_2 , VAR_3 ) ) ; )  return ( VAR_2 == null ) || ( rw . METHOD_3 ( VAR_2 , VAR_3 ) ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_3 ( STRING_1 , e ) ; )  throw new TYPE_3 ( STRING_1 , e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected static ) MODIFIER protected static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.server.ReviewDb ) TYPE com.google.gerrit.reviewdb.server.ReviewDb ( NAME db ) NAME db ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME table ) NAME table ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME to ) NAME to ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME s ) NAME s ( INIT = ( ( TYPE_1 ) ( db ) ) ) INIT = ( ( TYPE_1 ) ( db ) ) ) VAR VAR ( TRY TRY ( RESOURCES RESOURCES ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME e ) NAME e ( INIT = new TYPE_2 ( s ) ) INIT = new TYPE_2 ( s ) ) VAR VAR ) RESOURCES RESOURCES ( BLOCK BLOCK (  s . METHOD_2 ( e , table , VAR_1 , to ) )  s . METHOD_2 ( e , table , VAR_1 , to ) ) BLOCK BLOCK ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME projectName ) NAME projectName ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Project.NameKey ) TYPE com.google.gerrit.reviewdb.client.Project.NameKey ( NAME key ) NAME key ( INIT = new com.google.gerrit.reviewdb.client.Project.NameKey ( projectName ) ) INIT = new com.google.gerrit.reviewdb.client.Project.NameKey ( projectName ) ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME git ) NAME git ( INIT = VAR_1 . METHOD_2 ( key ) ) INIT = VAR_1 . METHOD_2 ( key ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2.ProjectConfig ) TYPE TYPE_2.ProjectConfig ( NAME cfg ) NAME cfg ( INIT = new TYPE_2 . ProjectConfig ( key ) ) INIT = new TYPE_2 . ProjectConfig ( key ) ) VAR VAR (  cfg . METHOD_1 ( git ) )  cfg . METHOD_1 ( git ) (  return VAR_2 . create ( cfg ) ; )  return VAR_2 . create ( cfg ) ; ) BLOCK BLOCK ( FINALLY FINALLY (  git . close ( ) )  git . close ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SWITCH SWITCH ( NAME type ) NAME type ( CASE VAR_2 ( BLOCK BLOCK (  this . VAR_3 = ( VAR_1 != null ) ? TYPE_2 . METHOD_2 ( TYPE_3 . METHOD_3 ( VAR_1 ) ) : null )  this . VAR_3 = ( VAR_1 != null ) ? TYPE_2 . METHOD_2 ( TYPE_3 . METHOD_3 ( VAR_1 ) ) : null (  return this ; )  return this ; ) BLOCK BLOCK ) CASE VAR_2 ( CASE VAR_4 ( BLOCK BLOCK (  throw new TYPE_4 ( java.lang.String.format ( STRING_1 , type ) ) ; )  throw new TYPE_4 ( java.lang.String.format ( STRING_1 , type ) ) ; ) BLOCK BLOCK ) CASE VAR_4 ( CASE VAR_5 ( BLOCK BLOCK (  throw new TYPE_4 ( java.lang.String.format ( STRING_1 , type ) ) ; )  throw new TYPE_4 ( java.lang.String.format ( STRING_1 , type ) ) ; ) BLOCK BLOCK ) CASE VAR_5 ( CASE VAR_6 ( BLOCK BLOCK (  throw new TYPE_4 ( java.lang.String.format ( STRING_1 , type ) ) ; )  throw new TYPE_4 ( java.lang.String.format ( STRING_1 , type ) ) ; ) BLOCK BLOCK ) CASE VAR_6 ( CASE VAR_7 ( BLOCK BLOCK (  throw new TYPE_4 ( java.lang.String.format ( STRING_1 , type ) ) ; )  throw new TYPE_4 ( java.lang.String.format ( STRING_1 , type ) ) ; ) BLOCK BLOCK ) CASE VAR_7 ( CASE VAR_8 ( BLOCK BLOCK (  throw new TYPE_4 ( java.lang.String.format ( STRING_1 , type ) ) ; )  throw new TYPE_4 ( java.lang.String.format ( STRING_1 , type ) ) ; ) BLOCK BLOCK ) CASE VAR_8 ( CASE VAR_9 ( BLOCK BLOCK (  throw new TYPE_4 ( java.lang.String.format ( STRING_1 , type ) ) ; )  throw new TYPE_4 ( java.lang.String.format ( STRING_1 , type ) ) ; ) BLOCK BLOCK ) CASE VAR_9 ( CASE VAR_10 ( BLOCK BLOCK (  throw new TYPE_4 ( java.lang.String.format ( STRING_1 , type ) ) ; )  throw new TYPE_4 ( java.lang.String.format ( STRING_1 , type ) ) ; ) BLOCK BLOCK ) CASE VAR_10 ( CASE VAR_11 ( BLOCK BLOCK (  throw new TYPE_4 ( java.lang.String.format ( STRING_1 , type ) ) ; )  throw new TYPE_4 ( java.lang.String.format ( STRING_1 , type ) ) ; ) BLOCK BLOCK ) CASE VAR_11 ( CASE VAR_12 ( BLOCK BLOCK (  throw new TYPE_4 ( java.lang.String.format ( STRING_1 , type ) ) ; )  throw new TYPE_4 ( java.lang.String.format ( STRING_1 , type ) ) ; ) BLOCK BLOCK ) CASE VAR_12 ( CASE VAR_13 ( BLOCK BLOCK (  throw new TYPE_4 ( java.lang.String.format ( STRING_1 , type ) ) ; )  throw new TYPE_4 ( java.lang.String.format ( STRING_1 , type ) ) ; ) BLOCK BLOCK ) CASE VAR_13 ( CASE VAR_14 ( BLOCK BLOCK (  throw new TYPE_4 ( java.lang.String.format ( STRING_1 , type ) ) ; )  throw new TYPE_4 ( java.lang.String.format ( STRING_1 , type ) ) ; ) BLOCK BLOCK ) CASE VAR_14 ( CASE VAR_15 ( BLOCK BLOCK (  throw new TYPE_4 ( java.lang.String.format ( STRING_1 , type ) ) ; )  throw new TYPE_4 ( java.lang.String.format ( STRING_1 , type ) ) ; ) BLOCK BLOCK ) CASE VAR_15 ( DEFAULT DEFAULT ( BLOCK BLOCK (  throw new TYPE_4 ( java.lang.String.format ( STRING_1 , type ) ) ; )  throw new TYPE_4 ( java.lang.String.format ( STRING_1 , type ) ) ; ) BLOCK BLOCK ) DEFAULT DEFAULT ) SWITCH SWITCH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME is ) NAME is ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 = new TYPE_2 ( ) )  VAR_1 = new TYPE_2 ( ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME input ) NAME input ( INIT = new TYPE_3 ( is ) ) INIT = new TYPE_3 ( is ) ) VAR VAR ( VAR VAR ( TYPE char[] ) TYPE char[] ( NAME VAR_2 ) NAME VAR_2 ( INIT = new char [ INT_1 ] ) INIT = new char [ INT_1 ] ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME n ) NAME n ( INIT = 0 ) INIT = 0 ) VAR VAR ( WHILE WHILE ( COND ( n = input . METHOD_2 ( VAR_2 ) ) != ( - 1 ) ) COND ( n = input . METHOD_2 ( VAR_2 ) ) != ( - 1 ) ( BLOCK BLOCK (  VAR_1 . METHOD_3 ( VAR_2 , 0 , n ) )  VAR_1 . METHOD_3 ( VAR_2 , 0 , n ) ) BLOCK BLOCK ) WHILE WHILE (  return VAR_1 . toString ( ) ; )  return VAR_1 . toString ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME ctx ) NAME ctx ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  patchSet = ctx . METHOD_2 ( ) . patchSets ( ) . get ( psId ) )  patchSet = ctx . METHOD_2 ( ) . patchSets ( ) . get ( psId ) ( IF IF ( COND ! ( patchSet . METHOD_3 ( ) ) ) COND ! ( patchSet . METHOD_3 ( ) ) ( THEN THEN (  throw new TYPE_3 ( STRING_1 ) ; )  throw new TYPE_3 ( STRING_1 ) ; ) THEN THEN ) IF IF (  patchSet . METHOD_4 ( false ) )  patchSet . METHOD_4 ( false ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1.Result ) TYPE TYPE_1.Result ( NAME r ) NAME r ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = STRING_1 + ( r . getChangeId ( ) ) ) INIT = STRING_1 + ( r . getChangeId ( ) ) ) VAR VAR (  VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( VAR_1 ) )  VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( VAR_1 ) (  com.google.common.truth.Truth.assertThat ( getChange ( VAR_1 ) . VAR_3 ) . METHOD_6 ( ) )  com.google.common.truth.Truth.assertThat ( getChange ( VAR_1 ) . VAR_3 ) . METHOD_6 ( ) (  VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_7 ( VAR_1 ) )  VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_7 ( VAR_1 ) (  com.google.common.truth.Truth.assertThat ( getChange ( VAR_1 ) . VAR_3 ) . METHOD_8 ( ) )  com.google.common.truth.Truth.assertThat ( getChange ( VAR_1 ) . VAR_3 ) . METHOD_8 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  com.google.gerrit.extensions.registration.DynamicSet . bind ( binder ( ) , VAR_1 class ) . to ( VAR_2 class ) )  com.google.gerrit.extensions.registration.DynamicSet . bind ( binder ( ) , VAR_1 class ) . to ( VAR_2 class ) (  bind ( VAR_3 class ) . to ( VAR_4 class ) )  bind ( VAR_3 class ) . to ( VAR_4 class ) (  install ( TYPE_1 . METHOD_2 ( ) ) )  install ( TYPE_1 . METHOD_2 ( ) ) (  bind ( VAR_5 class ) . METHOD_3 ( TYPE_2 . create ( ) ) . to ( VAR_6 class ) )  bind ( VAR_5 class ) . METHOD_3 ( TYPE_2 . create ( ) ) . to ( VAR_6 class ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static synchronized ) MODIFIER private static synchronized ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME p ) NAME p ( INIT = new TYPE_3 ( ) ) INIT = new TYPE_3 ( ) ) VAR VAR (  p . METHOD_2 ( STRING_1 , VAR_1 class . getName ( ) ) )  p . METHOD_2 ( STRING_1 , VAR_1 class . getName ( ) ) (  p . METHOD_2 ( STRING_2 , ( ( STRING_3 + STRING_4 ) + ( ++ ( VAR_2 ) ) ) ) )  p . METHOD_2 ( STRING_2 , ( ( STRING_3 + STRING_4 ) + ( ++ ( VAR_2 ) ) ) ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( INIT = new TYPE_4 ( p ) ) INIT = new TYPE_4 ( p ) ) VAR VAR (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.server.ReviewDb ) TYPE com.google.gerrit.reviewdb.server.ReviewDb ( NAME db ) NAME db ) VAR VAR ( VAR VAR ( TYPE TYPE_1[] ) TYPE TYPE_1[] ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME d ) NAME d ( INIT = new TYPE_5 ( ) ) INIT = new TYPE_5 ( ) ) VAR VAR ( IF IF ( COND ( VAR_1 == null ) || ( ( VAR_1 . length ) == 0 ) ) COND ( VAR_1 == null ) || ( ( VAR_1 . length ) == 0 ) ( THEN THEN (  VAR_2 = VAR_3 )  VAR_2 = VAR_3 ) THEN THEN ( ELSE ELSE (  VAR_2 = VAR_4 )  VAR_2 = VAR_4 (  VAR_5 = TYPE_6 . METHOD_2 ( VAR_1 [ 0 ] ) )  VAR_5 = TYPE_6 . METHOD_2 ( VAR_1 [ 0 ] ) ) ELSE ELSE ) IF IF (  METHOD_1 ( db , d ) )  METHOD_1 ( db , d ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN org.eclipse.jgit.lib.ObjectId ) RETURN org.eclipse.jgit.lib.ObjectId ( NAME commit ) NAME commit ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . create ( METHOD_1 ( ) ) ) INIT = VAR_2 . create ( METHOD_1 ( ) ) ) VAR VAR (  VAR_1 . add ( this ) )  VAR_1 . add ( this ) (  TYPE_2 . METHOD_2 ( getChange ( ) , VAR_1 . METHOD_3 ( ) . get ( ctl . getId ( ) ) ) )  TYPE_2 . METHOD_2 ( getChange ( ) , VAR_1 . METHOD_3 ( ) . get ( ctl . getId ( ) ) ) (  VAR_1 . METHOD_4 ( ) )  VAR_1 . METHOD_4 ( ) (  return METHOD_5 ( ) ; )  return METHOD_5 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public synchronized ) MODIFIER public synchronized ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME index ) NAME index ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = index . METHOD_2 ( ) . METHOD_3 ( ) ) INIT = index . METHOD_2 ( ) . METHOD_3 ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME i ) NAME i ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK ( IF IF ( COND ( i . METHOD_2 ( ) . METHOD_3 ( ) ) == VAR_1 ) COND ( i . METHOD_2 ( ) . METHOD_3 ( ) ) == VAR_1 ( THEN THEN (  throw new TYPE_2 ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) ) ; )  throw new TYPE_2 ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) ) ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  VAR_2 . add ( index ) )  VAR_2 . add ( index ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN PatchSet.Id ) RETURN PatchSet.Id ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevCommit ) TYPE org.eclipse.jgit.revwalk.RevCommit ( NAME commit ) NAME commit ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = commit . METHOD_2 ( VAR_2 ) ) INIT = commit . METHOD_2 ( VAR_2 ) ) VAR VAR ( IF IF ( COND ( VAR_1 . size ( ) ) != 1 ) COND ( VAR_1 . size ( ) ) != 1 ( THEN THEN (  throw METHOD_3 ( STRING_1 , VAR_2 , VAR_1 ) ; )  throw METHOD_3 ( STRING_1 , VAR_2 , VAR_1 ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME psId ) NAME psId ( INIT = TYPE_3 . METHOD_4 ( VAR_1 . get ( 0 ) ) ) INIT = TYPE_3 . METHOD_4 ( VAR_1 . get ( 0 ) ) ) VAR VAR ( IF IF ( COND psId == null ) COND psId == null ( THEN THEN (  throw METHOD_3 ( STRING_2 , VAR_2 , VAR_1 . get ( 0 ) ) ; )  throw METHOD_3 ( STRING_2 , VAR_2 , VAR_1 . get ( 0 ) ) ; ) THEN THEN ) IF IF (  return new com.google.gerrit.reviewdb.client.PatchSet.Id ( change.getId ( ) , psId ) ; )  return new com.google.gerrit.reviewdb.client.PatchSet.Id ( change.getId ( ) , psId ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( 0 ) )  METHOD_2 ( 0 ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR (  METHOD_3 ( ( ( VAR_2 ) - FLOAT_1 ) ) )  METHOD_3 ( ( ( VAR_2 ) - FLOAT_1 ) ) (  METHOD_4 ( ) )  METHOD_4 ( ) ( VAR VAR ( TYPE TYPE_2.ChangeInfo ) TYPE TYPE_2.ChangeInfo ( NAME info ) NAME info ( INIT = METHOD_5 ( METHOD_6 ( VAR_3 ) ) ) INIT = METHOD_5 ( METHOD_6 ( VAR_3 ) ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME message ) NAME message ( INIT = VAR_4 . get ( VAR_5 ) . commit . message ) INIT = VAR_4 . get ( VAR_5 ) . commit . message ) VAR VAR (  com.google.common.truth.Truth.assertThat ( message ) . contains ( java.lang.String.format ( STRING_1 , VAR_6 , admin . METHOD_7 ( ) . METHOD_8 ( ) ) ) )  com.google.common.truth.Truth.assertThat ( message ) . contains ( java.lang.String.format ( STRING_1 , VAR_6 , admin . METHOD_7 ( ) . METHOD_8 ( ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME create ) NAME create ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3<TYPE_2> ) TYPE TYPE_3<TYPE_2> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.util.Map<java.lang.String,TYPE_4> ) TYPE java.util.Map<java.lang.String,TYPE_4> ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return new TYPE_5 ( VAR_1 , TYPE_6 . METHOD_1 ( VAR_2 ) , TYPE_7 . METHOD_1 ( VAR_3 ) , VAR_4 , VAR_5 ) ; )  return new TYPE_5 ( VAR_1 , TYPE_6 . METHOD_1 ( VAR_2 ) , TYPE_7 . METHOD_1 ( VAR_3 ) , VAR_4 , VAR_5 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.Result ) TYPE TYPE_1.Result ( NAME r ) NAME r ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  revision ( r ) . METHOD_2 ( TYPE_2 . METHOD_3 ( ) ) )  revision ( r ) . METHOD_2 ( TYPE_2 . METHOD_3 ( ) ) (  revision ( r ) . submit ( ) )  revision ( r ) . submit ( ) ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME repo ) NAME repo ( INIT = VAR_1 . METHOD_4 ( project ) ) INIT = VAR_1 . METHOD_4 ( project ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  org.junit.Assert.assertEquals ( r . METHOD_5 ( ) , repo . METHOD_6 ( STRING_1 ) . METHOD_7 ( ) ) )  org.junit.Assert.assertEquals ( r . METHOD_5 ( ) , repo . METHOD_6 ( STRING_1 ) . METHOD_7 ( ) ) ) BLOCK BLOCK ( FINALLY FINALLY (  repo . close ( ) )  repo . close ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( TYPE_1 . METHOD_3 ( TYPE_2 . r ( TYPE_2 . b ( 0 ) ) ) ) )  METHOD_2 ( TYPE_1 . METHOD_3 ( TYPE_2 . r ( TYPE_2 . b ( 0 ) ) ) ) (  assertEquals ( STRING_1 , TYPE_1 . METHOD_3 ( TYPE_2 . r ( TYPE_2 . b ( 1 , CHAR_1 ) ) ) ) )  assertEquals ( STRING_1 , TYPE_1 . METHOD_3 ( TYPE_2 . r ( TYPE_2 . b ( 1 , CHAR_1 ) ) ) ) (  assertEquals ( STRING_2 , TYPE_1 . METHOD_3 ( TYPE_2 . r ( TYPE_2 . b ( INT_1 , CHAR_2 , CHAR_3 , CHAR_4 , CHAR_4 , CHAR_5 , CHAR_5 , CHAR_6 ) ) ) ) )  assertEquals ( STRING_2 , TYPE_1 . METHOD_3 ( TYPE_2 . r ( TYPE_2 . b ( INT_1 , CHAR_2 , CHAR_3 , CHAR_4 , CHAR_4 , CHAR_5 , CHAR_5 , CHAR_6 ) ) ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( ) )  METHOD_2 ( ) ( VAR VAR ( TYPE TYPE_1.Result ) TYPE TYPE_1.Result ( NAME r ) NAME r ( INIT = METHOD_3 ( ) ) INIT = METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME revision ) NAME revision ( INIT = VAR_1 . changes ( ) . id ( r . getChangeId ( ) ) . METHOD_4 ( ) ) INIT = VAR_1 . changes ( ) . id ( r . getChangeId ( ) ) . METHOD_4 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME in ) NAME in ( INIT = new TYPE_3 ( ) ) INIT = new TYPE_3 ( ) ) VAR VAR (  VAR_2 = VAR_3 . toString ( ) )  VAR_2 = VAR_3 . toString ( ) (  in . label ( STRING_1 , INT_1 ) )  in . label ( STRING_1 , INT_1 ) (  VAR_4 . METHOD_5 ( VAR_5 class ) )  VAR_4 . METHOD_5 ( VAR_5 class ) (  VAR_4 . METHOD_6 ( STRING_2 ) )  VAR_4 . METHOD_6 ( STRING_2 ) (  revision . METHOD_7 ( in ) )  revision . METHOD_7 ( in ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME apply ) NAME apply ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME input ) NAME input ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_7 ) TYPE TYPE_7 ( NAME in ) NAME in ( INIT = new TYPE_7 ( ) ) INIT = new TYPE_7 ( ) ) VAR VAR (  VAR_2 = TYPE_8 . of ( id ) )  VAR_2 = TYPE_8 . of ( id ) ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_3 ) NAME VAR_3 ( INIT = put . get ( ) . apply ( VAR_1 , in ) ) INIT = put . get ( ) . apply ( VAR_1 , in ) ) VAR VAR ( IF IF ( COND ( VAR_3 . size ( ) ) == 1 ) COND ( VAR_3 . size ( ) ) == 1 ( THEN THEN (  return VAR_3 . get ( 0 ) ; )  return VAR_3 . get ( 0 ) ; ) THEN THEN ( ELSE ELSE (  throw new TYPE_9 ( ) ; )  throw new TYPE_9 ( ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  return ( ( ( TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ) != null ) && ( TYPE_1 . METHOD_4 ( ) . auth ( ) . METHOD_5 ( ) ) ) && ( ! ( TYPE_1 . METHOD_2 ( ) . METHOD_6 ( ) ) ) ; )  return ( ( ( TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ) != null ) && ( TYPE_1 . METHOD_4 ( ) . auth ( ) . METHOD_5 ( ) ) ) && ( ! ( TYPE_1 . METHOD_2 ( ) . METHOD_6 ( ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Account.Id ) TYPE com.google.gerrit.reviewdb.client.Account.Id ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Account ) TYPE com.google.gerrit.reviewdb.client.Account ( NAME account ) NAME account ( INIT = new com.google.gerrit.reviewdb.client.Account ( VAR_1 , TYPE_2 . METHOD_2 ( ) ) ) INIT = new com.google.gerrit.reviewdb.client.Account ( VAR_1 , TYPE_2 . METHOD_2 ( ) ) ) VAR VAR (  account . METHOD_3 ( false ) )  account . METHOD_3 ( false ) ( VAR VAR ( TYPE TYPE_3<TYPE_4> ) TYPE TYPE_3<TYPE_4> ( NAME VAR_2 ) NAME VAR_2 ( INIT = java.util.Collections . METHOD_4 ( ) ) INIT = java.util.Collections . METHOD_4 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3<TYPE_5> ) TYPE TYPE_3<TYPE_5> ( NAME VAR_3 ) NAME VAR_3 ( INIT = java.util.Collections . METHOD_4 ( ) ) INIT = java.util.Collections . METHOD_4 ( ) ) VAR VAR ( VAR VAR ( TYPE java.util.Set<TYPE_6> ) TYPE java.util.Set<TYPE_6> ( NAME VAR_4 ) NAME VAR_4 ( INIT = TYPE_7 . of ( ) ) INIT = TYPE_7 . of ( ) ) VAR VAR (  return new TYPE_1 ( account , VAR_4 , VAR_2 , VAR_3 ) ; )  return new TYPE_1 ( account , VAR_4 , VAR_2 , VAR_3 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SWITCH SWITCH ( NAME VAR_1 ) NAME VAR_1 ( CASE VAR_2 ( BLOCK BLOCK (  return )  return (  ( ) )  ( ) (  - > )  - > (  ( VAR_3 ? VAR_4 : VAR_5 ) . METHOD_2 ( ) )  ( VAR_3 ? VAR_4 : VAR_5 ) . METHOD_2 ( ) ) BLOCK BLOCK ) CASE VAR_2 ( CASE VAR_6 ( BLOCK BLOCK (  return )  return (  ( ) )  ( ) (  - > )  - > (  ( VAR_7 ? VAR_8 : VAR_5 ) . METHOD_2 ( ) )  ( VAR_7 ? VAR_8 : VAR_5 ) . METHOD_2 ( ) ) BLOCK BLOCK ) CASE VAR_6 ( DEFAULT DEFAULT ( BLOCK BLOCK (  return )  return (  ( ) )  ( ) (  - > )  - > ) BLOCK BLOCK ) DEFAULT DEFAULT ) SWITCH SWITCH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2.PatchSetApproval ) TYPE TYPE_2.PatchSetApproval ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN (  return VAR_2 . create ( VAR_1 . getAccountId ( ) ) . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_3 . METHOD_4 ( ) ) ; )  return VAR_2 . create ( VAR_1 . getAccountId ( ) ) . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_3 . METHOD_4 ( ) ) ; ) THEN THEN ) IF IF (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.Set<TYPE_1> ) RETURN java.util.Set<TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<com.google.gerrit.server.query.change.ChangeData> ) TYPE java.util.List<com.google.gerrit.server.query.change.ChangeData> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2<TYPE_1> ) TYPE TYPE_2<TYPE_1> ( NAME result ) NAME result ( INIT = TYPE_3 . METHOD_2 ( VAR_1 . size ( ) ) ) INIT = TYPE_3 . METHOD_2 ( VAR_1 . size ( ) ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE com.google.gerrit.server.query.change.ChangeData ) TYPE com.google.gerrit.server.query.change.ChangeData ( NAME cd ) NAME cd ( IN VAR_1 ) IN VAR_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME commit ) NAME commit ( INIT = VAR_2 . get ( cd . getId ( ) ) ) INIT = VAR_2 . get ( cd . getId ( ) ) ) VAR VAR (  TYPE_4 . METHOD_3 ( ( commit != null ) , STRING_1 , cd . change ( ) . getId ( ) ) )  TYPE_4 . METHOD_3 ( ( commit != null ) , STRING_1 , cd . change ( ) . getId ( ) ) (  result . add ( commit ) )  result . add ( commit ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( VAR_2 ) ) INIT = METHOD_2 ( VAR_2 ) ) VAR VAR (  METHOD_3 ( VAR_3 ) )  METHOD_3 ( VAR_3 ) (  METHOD_4 ( VAR_1 . changeId , VAR_4 ) )  METHOD_4 ( VAR_1 . changeId , VAR_4 ) (  assertThat ( VAR_5 ) . METHOD_5 ( STRING_1 , VAR_1 ) . to ( VAR_3 ) . to ( VAR_6 ) . METHOD_6 ( VAR_7 , VAR_8 ) . METHOD_6 ( VAR_9 ) . METHOD_7 ( VAR_10 ) . METHOD_7 ( VAR_2 ) )  assertThat ( VAR_5 ) . METHOD_5 ( STRING_1 , VAR_1 ) . to ( VAR_3 ) . to ( VAR_6 ) . METHOD_6 ( VAR_7 , VAR_8 ) . METHOD_6 ( VAR_9 ) . METHOD_7 ( VAR_10 ) . METHOD_7 ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1<com.google.gerrit.reviewdb.client.PatchSet.Id,com.google.gerrit.reviewdb.client.PatchSetApproval> ) RETURN TYPE_1<com.google.gerrit.reviewdb.client.PatchSet.Id,com.google.gerrit.reviewdb.client.PatchSetApproval> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2<com.google.gerrit.reviewdb.server.ReviewDb> ) TYPE TYPE_2<com.google.gerrit.reviewdb.server.ReviewDb> ( NAME db ) NAME db ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) == null ) COND ( VAR_1 ) == null ( THEN THEN (  VAR_1 = TYPE_3 . create ( ) )  VAR_1 = TYPE_3 . create ( ) ( FOR-EACH FOR-EACH ( TYPE com.google.gerrit.reviewdb.client.PatchSetApproval ) TYPE com.google.gerrit.reviewdb.client.PatchSetApproval ( NAME VAR_2 ) NAME VAR_2 ( IN com.google.gerrit.server.query.change.ChangeData . METHOD_2 ( db . get ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_3 ) ) ) IN com.google.gerrit.server.query.change.ChangeData . METHOD_2 ( db . get ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_3 ) ) ( BLOCK BLOCK (  VAR_1 . put ( VAR_2 . METHOD_5 ( ) , VAR_2 ) )  VAR_1 . put ( VAR_2 . METHOD_5 ( ) , VAR_2 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) ( IF IF ( COND ( TYPE_1 . METHOD_2 ( ) ) != null ) COND ( TYPE_1 . METHOD_2 ( ) ) != null ( THEN THEN (  table . METHOD_3 ( 0 , VAR_1 , TYPE_2 . METHOD_4 ( ) ) )  table . METHOD_3 ( 0 , VAR_1 , TYPE_2 . METHOD_4 ( ) ) (  table . METHOD_5 ( ) . METHOD_6 ( 0 , VAR_1 , TYPE_3 . css ( ) . METHOD_7 ( ) ) )  table . METHOD_5 ( ) . METHOD_6 ( 0 , VAR_1 , TYPE_3 . css ( ) . METHOD_7 ( ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = TYPE_1 . METHOD_2 ( git , VAR_2 ) ) INIT = TYPE_1 . METHOD_2 ( git , VAR_2 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME res ) NAME res ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  res = METHOD_3 ( VAR_1 ) )  res = METHOD_3 ( VAR_1 ) (  METHOD_4 ( ) )  METHOD_4 ( ) ) BLOCK BLOCK ( FINALLY FINALLY ( TRY TRY ( BLOCK BLOCK (  VAR_1 . close ( ) )  VAR_1 . close ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( BLOCK BLOCK (  VAR_4 . METHOD_5 ( ( STRING_1 + ( VAR_2 ) ) , VAR_3 ) )  VAR_4 . METHOD_5 ( ( STRING_1 + ( VAR_2 ) ) , VAR_3 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) FINALLY FINALLY ) TRY TRY (  METHOD_6 ( res . METHOD_7 ( ) ) )  METHOD_6 ( res . METHOD_7 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  METHOD_2 ( false ) )  METHOD_2 ( false ) ( IF IF ( COND ( ( VAR_1 ) != null ) && ( ( VAR_2 ) >= 0 ) ) COND ( ( VAR_1 ) != null ) && ( ( VAR_2 ) >= 0 ) ( THEN THEN ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME c ) NAME c ( INIT = TYPE_2 . METHOD_3 ( VAR_2 ) ) INIT = TYPE_2 . METHOD_3 ( VAR_2 ) ) VAR VAR ( IF IF ( COND c != null ) COND c != null ( THEN THEN (  VAR_3 . put ( VAR_1 , METHOD_4 ( c ) ) )  VAR_3 . put ( VAR_1 , METHOD_4 ( c ) ) ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  super . METHOD_1 ( ) )  super . METHOD_1 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.util.Map<java.lang.String,TYPE_1> ) RETURN java.util.Map<java.lang.String,TYPE_1> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME base ) NAME base ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  return ( ( java.util.Map < java.lang.String , TYPE_1 > ) ( VAR_1 . get ( ) . METHOD_2 ( base ) . apply ( revision ) . value ( ) ) ) ; )  return ( ( java.util.Map < java.lang.String , TYPE_1 > ) ( VAR_1 . get ( ) . METHOD_2 ( base ) . apply ( revision ) . value ( ) ) ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE com.google.gwtorm.server.OrmException|java.io.IOException ) TYPE com.google.gwtorm.server.OrmException|java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_2 ( STRING_1 , e ) ; )  throw new TYPE_2 ( STRING_1 , e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  return changes . id ( VAR_1 . get ( ) . apply ( revision , null ) . VAR_2 ) ; )  return changes . id ( VAR_1 . get ( ) . apply ( revision , null ) . VAR_2 ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE com.google.gwtorm.server.OrmException ) TYPE com.google.gwtorm.server.OrmException ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_2 ( STRING_1 , e ) ; )  throw new TYPE_2 ( STRING_1 , e ) ; ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME e ) NAME e ( BLOCK BLOCK (  throw new TYPE_2 ( STRING_1 , e ) ; )  throw new TYPE_2 ( STRING_1 , e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . get ( ) ) INIT = VAR_2 . get ( ) ) VAR VAR ( IF IF ( COND VAR_1 != null ) COND VAR_1 != null ( THEN THEN (  VAR_1 . close ( ) )  VAR_1 . close ( ) ) THEN THEN ) IF IF ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_4 ) IN VAR_4 ( BLOCK BLOCK ( IF IF ( COND VAR_3 != VAR_1 ) COND VAR_3 != VAR_1 ( THEN THEN (  VAR_3 . METHOD_1 ( ) )  VAR_3 . METHOD_1 ( ) (  VAR_3 . close ( ) )  VAR_3 . close ( ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Account.Id ) TYPE com.google.gerrit.reviewdb.client.Account.Id ( NAME VAR_1 ) NAME VAR_1 ( INIT = notes . getChange ( ) . METHOD_2 ( ) ) INIT = notes . getChange ( ) . METHOD_2 ( ) ) VAR VAR ( IF IF ( COND ( VAR_1 != null ) && ( METHOD_3 ( ) . METHOD_4 ( ) ) ) COND ( VAR_1 != null ) && ( METHOD_3 ( ) . METHOD_4 ( ) ) ( THEN THEN ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Account.Id ) TYPE com.google.gerrit.reviewdb.client.Account.Id ( NAME id ) NAME id ( INIT = METHOD_3 ( ) . getAccountId ( ) ) INIT = METHOD_3 ( ) . getAccountId ( ) ) VAR VAR (  return id . equals ( VAR_1 . get ( ) ) ; )  return id . equals ( VAR_1 . get ( ) ) ; ) THEN THEN ) IF IF (  return false ; )  return false ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN org.eclipse.jgit.lib.ObjectId ) RETURN org.eclipse.jgit.lib.ObjectId ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME repo ) NAME repo ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevWalk ) TYPE org.eclipse.jgit.revwalk.RevWalk ( NAME rw ) NAME rw ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevCommit ) TYPE org.eclipse.jgit.revwalk.RevCommit ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_6 ) NAME VAR_6 ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevCommit ) TYPE org.eclipse.jgit.revwalk.RevCommit ( NAME base ) NAME base ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_7 ) NAME VAR_7 ( INIT = TYPE_6 . METHOD_2 ( VAR_4 , VAR_3 ) ) INIT = TYPE_6 . METHOD_2 ( VAR_4 , VAR_3 ) ) VAR VAR (  TYPE_6 . METHOD_3 ( VAR_1 , repo , rw , base , VAR_7 . METHOD_4 ( ) , VAR_2 , VAR_5 , VAR_6 ) )  TYPE_6 . METHOD_3 ( VAR_1 , repo , rw , base , VAR_7 . METHOD_4 ( ) , VAR_2 , VAR_5 , VAR_6 ) (  return VAR_7 . METHOD_5 ( VAR_2 ) ; )  return VAR_7 . METHOD_5 ( VAR_2 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME run ) NAME run ( BLOCK BLOCK (  METHOD_1 ( ) )  METHOD_1 ( ) ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = factory . create ( in , out ) ) INIT = factory . create ( in , out ) ) VAR VAR (  VAR_1 . METHOD_2 ( format ) )  VAR_1 . METHOD_2 ( format ) ( IF IF ( COND ( query ) != null ) COND ( query ) != null ( THEN THEN (  VAR_1 . METHOD_3 ( query ) )  VAR_1 . METHOD_3 ( query ) ) THEN THEN ( ELSE ELSE (  VAR_1 . run ( ) )  VAR_1 . run ( ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , STRING_1 ) . METHOD_3 ( ) )  TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , STRING_1 ) . METHOD_3 ( ) (  TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_4 , STRING_1 ) )  TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_4 , STRING_1 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME u ) NAME u ( INIT = util . user ( VAR_1 , VAR_4 ) ) INIT = util . user ( VAR_1 , VAR_4 ) ) VAR VAR (  METHOD_4 ( STRING_2 , u . METHOD_5 ( STRING_3 ) . METHOD_6 ( ) ) )  METHOD_4 ( STRING_2 , u . METHOD_5 ( STRING_3 ) . METHOD_6 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_1 . get ( VAR_1 ) ) INIT = TYPE_1 . get ( VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_3 = METHOD_2 ( VAR_2 , null ) )  VAR_3 = METHOD_2 ( VAR_2 , null ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_3 = false )  VAR_3 = false ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  return VAR_3 ? TYPE_1 . METHOD_3 ( VAR_1 ) : null ; )  return VAR_3 ? TYPE_1 . METHOD_3 ( VAR_1 ) : null ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME event ) NAME event ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) == null ) COND ( VAR_1 ) == null ( THEN THEN ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_3 ( result ) )  METHOD_3 ( result ) (  VAR_2 . METHOD_4 ( true ) )  VAR_2 . METHOD_4 ( true ) ) BLOCK BLOCK ) METHOD METHOD (  TYPE_3 . METHOD_2 ( patchSet . getId ( ) , new TYPE_4 < TYPE_5 > ( ) { public void onSuccess ( final TYPE_5 result ) { METHOD_3 ( result ) ; VAR_2 . METHOD_4 ( true ) ; } } ) )  TYPE_3 . METHOD_2 ( patchSet . getId ( ) , new TYPE_4 < TYPE_5 > ( ) { public void onSuccess ( final TYPE_5 result ) { METHOD_3 ( result ) ; VAR_2 . METHOD_4 ( true ) ; } } ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR (  TYPE_1 . METHOD_2 ( VAR_2 , VAR_1 , null , true ) )  TYPE_1 . METHOD_2 ( VAR_2 , VAR_1 , null , true ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME r ) NAME r ( INIT = VAR_3 . put ( ( ( STRING_2 + ( project . get ( ) ) ) + STRING_3 ) , METHOD_3 ( VAR_1 ) ) ) INIT = VAR_3 . put ( ( ( STRING_2 + ( project . get ( ) ) ) + STRING_3 ) , METHOD_3 ( VAR_1 ) ) ) VAR VAR (  com.google.common.truth.Truth.assertThat ( r . METHOD_4 ( ) ) . isEqualTo ( VAR_4 ) )  com.google.common.truth.Truth.assertThat ( r . METHOD_4 ( ) ) . isEqualTo ( VAR_4 ) (  r . METHOD_5 ( ) )  r . METHOD_5 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < TYPE_1 > ( ) ) INIT = new java.util.ArrayList < TYPE_1 > ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2<?> ) TYPE TYPE_2<?> ( NAME in ) NAME in ( INIT = VAR_2 ) INIT = VAR_2 ) VAR VAR ( WHILE WHILE ( COND in != null ) COND in != null ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_3 ) NAME VAR_3 ( IN in . METHOD_2 ( ) ) IN in . METHOD_2 ( ) ( BLOCK BLOCK ( IF IF ( COND ( VAR_3 . METHOD_3 ( VAR_4 class ) ) != null ) COND ( VAR_3 . METHOD_3 ( VAR_4 class ) ) != null ( THEN THEN (  VAR_1 . add ( new TYPE_1 ( VAR_3 ) ) )  VAR_1 . add ( new TYPE_1 ( VAR_3 ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  in = in . METHOD_4 ( ) )  in = in . METHOD_4 ( ) ) BLOCK BLOCK ) WHILE WHILE (  METHOD_1 ( VAR_1 ) )  METHOD_1 ( VAR_1 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2<TYPE_3,TYPE_4> ) TYPE TYPE_2<TYPE_3,TYPE_4> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME p ) NAME p ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( IF IF ( COND ( VAR_2 ) != null ) COND ( VAR_2 ) != null ( THEN THEN (  return new TYPE_6 ( VAR_1 , VAR_2 ) ; )  return new TYPE_6 ( VAR_1 , VAR_2 ) ; ) THEN THEN ( ELSE ELSE (  return new TYPE_7 ( VAR_1 , VAR_3 , p . METHOD_3 ( ) ) ; )  return new TYPE_7 ( VAR_1 , VAR_3 , p . METHOD_3 ( ) ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.server.ReviewDb ) TYPE com.google.gerrit.reviewdb.server.ReviewDb ( NAME db ) NAME db ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME change ) NAME change ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME user ) NAME user ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.server.query.change.ChangeData ) TYPE com.google.gerrit.server.query.change.ChangeData ( NAME cd ) NAME cd ( INIT = VAR_1 . create ( db , change . getProject ( ) , change.getId ( ) ) ) INIT = VAR_1 . create ( db , change . getProject ( ) , change.getId ( ) ) ) VAR VAR (  cd . METHOD_2 ( user ) )  cd . METHOD_2 ( user ) ( IF IF ( COND TYPE_5 . METHOD_3 ( cfg ) ) COND TYPE_5 . METHOD_3 ( cfg ) ( THEN THEN (  return METHOD_4 ( db , new TYPE_1 ( cd , db , null ) , user ) ; )  return METHOD_4 ( db , new TYPE_1 ( cd , db , null ) , user ) ; ) THEN THEN ) IF IF (  return METHOD_5 ( db , new TYPE_1 ( cd , db , null ) , user ) ; )  return METHOD_5 ( db , new TYPE_1 ( cd , db , null ) , user ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_2 ) NAME VAR_2 ( INIT = false ) INIT = false ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME ref ) NAME ref ( IN VAR_3 . values ( ) ) IN VAR_3 . values ( ) ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3.AccountGroup ) TYPE TYPE_3.AccountGroup ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_1 . get ( ref . METHOD_2 ( ) ) ) INIT = VAR_1 . get ( ref . METHOD_2 ( ) ) ) VAR VAR ( IF IF ( COND ( VAR_4 != null ) && ( ! ( VAR_4 . getName ( ) . equals ( ref . getName ( ) ) ) ) ) COND ( VAR_4 != null ) && ( ! ( VAR_4 . getName ( ) . equals ( ref . getName ( ) ) ) ) ( THEN THEN (  VAR_2 = true )  VAR_2 = true (  ref . METHOD_3 ( VAR_4 . getName ( ) ) )  ref . METHOD_3 ( VAR_4 . getName ( ) ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_2 ; )  return VAR_2 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME repo ) NAME repo ( INIT = METHOD_2 ( STRING_1 ) ) INIT = METHOD_2 ( STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . METHOD_3 ( TYPE_3 . METHOD_4 ( STRING_2 ) ) . getAccountId ( ) . get ( ) ) INIT = VAR_2 . METHOD_3 ( TYPE_3 . METHOD_4 ( STRING_2 ) ) . getAccountId ( ) . get ( ) ) VAR VAR ( FOR FOR ( INIT INIT ( VAR VAR ( TYPE int ) TYPE int ( NAME i ) NAME i ( INIT = 0 ) INIT = 0 ) VAR VAR ) INIT INIT ( COND i < INT_1 ) COND i < INT_1 ( UPDATE UPDATE (  i ++ )  i ++ ) UPDATE UPDATE ( BLOCK BLOCK (  METHOD_5 ( repo , null , null , VAR_1 , null ) . insert ( ) )  METHOD_5 ( repo , null , null , VAR_1 , null ) . insert ( ) ) BLOCK BLOCK ) FOR FOR (  METHOD_6 ( STRING_3 ) )  METHOD_6 ( STRING_3 ) (  METHOD_6 ( STRING_4 ) )  METHOD_6 ( STRING_4 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME p ) NAME p ( INIT = VAR_2 . projects ( ) . name ( ( VAR_1 + STRING_2 ) ) . create ( ) . get ( ) ) INIT = VAR_2 . projects ( ) . name ( ( VAR_1 + STRING_2 ) ) . create ( ) . get ( ) ) VAR VAR (  com.google.common.truth.Truth.assertThat ( p . name ) . isEqualTo ( VAR_1 ) )  com.google.common.truth.Truth.assertThat ( p . name ) . isEqualTo ( VAR_1 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 . get ( new com.google.gerrit.reviewdb.client.Project.NameKey ( VAR_1 ) ) ) INIT = VAR_4 . get ( new com.google.gerrit.reviewdb.client.Project.NameKey ( VAR_1 ) ) ) VAR VAR (  com.google.common.truth.Truth.assertThat ( VAR_3 ) . METHOD_2 ( ) )  com.google.common.truth.Truth.assertThat ( VAR_3 ) . METHOD_2 ( ) (  TYPE_3 . METHOD_3 ( VAR_3 . getProject ( ) , p ) )  TYPE_3 . METHOD_3 ( VAR_3 . getProject ( ) , p ) (  METHOD_4 ( VAR_1 , STRING_3 ) )  METHOD_4 ( VAR_1 , STRING_3 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  VAR_2 . METHOD_3 ( VAR_3 class , new TYPE_4 < TYPE_1 > ( VAR_1 , this ) ) )  VAR_2 . METHOD_3 ( VAR_3 class , new TYPE_4 < TYPE_1 > ( VAR_1 , this ) ) (  VAR_2 . create ( ) . METHOD_4 ( TYPE_5 . METHOD_5 ( VAR_1 ) , VAR_3 class ) )  VAR_2 . create ( ) . METHOD_4 ( TYPE_5 . METHOD_5 ( VAR_1 ) , VAR_3 class ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME err ) NAME err ( BLOCK BLOCK (  VAR_4 = null )  VAR_4 = null (  VAR_5 = null )  VAR_5 = null (  throw err ; )  throw err ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( binder ( ) , VAR_1 ) )  TYPE_1 . METHOD_2 ( binder ( ) , VAR_1 ) (  bind ( VAR_2 class ) )  bind ( VAR_2 class ) (  METHOD_3 ( VAR_3 , STRING_1 ) . to ( VAR_2 class ) )  METHOD_3 ( VAR_3 , STRING_1 ) . to ( VAR_2 class ) (  delete ( VAR_1 ) . to ( VAR_4 class ) )  delete ( VAR_1 ) . to ( VAR_4 class ) (  get ( VAR_5 , STRING_2 ) . to ( VAR_6 class ) )  get ( VAR_5 , STRING_2 ) . to ( VAR_6 class ) (  put ( VAR_5 , STRING_2 ) . to ( VAR_7 class ) )  put ( VAR_5 , STRING_2 ) . to ( VAR_7 class ) (  get ( VAR_8 , STRING_3 ) . to ( VAR_9 class ) )  get ( VAR_8 , STRING_3 ) . to ( VAR_9 class ) (  put ( VAR_8 , STRING_3 ) . to ( VAR_10 class ) )  put ( VAR_8 , STRING_3 ) . to ( VAR_10 class ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . create ( db , admin . METHOD_2 ( ) ) ) INIT = VAR_2 . create ( db , admin . METHOD_2 ( ) ) ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.PatchSet.Id ) TYPE com.google.gerrit.reviewdb.client.PatchSet.Id ( NAME ps ) NAME ps ( INIT = VAR_1 . to ( git , STRING_1 ) . METHOD_3 ( ) ) INIT = VAR_1 . to ( git , STRING_1 ) . METHOD_3 ( ) ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME VAR_3 ) NAME VAR_3 ( INIT = METHOD_4 ( ps ) ) INIT = METHOD_4 ( ps ) ) VAR VAR (  org.junit.Assert.assertEquals ( 0 , VAR_3 . size ( ) ) )  org.junit.Assert.assertEquals ( 0 , VAR_3 . size ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME p ) NAME p ( INIT = VAR_2 . projects ( ) . create ( VAR_1 ) . get ( ) ) INIT = VAR_2 . projects ( ) . create ( VAR_1 ) . get ( ) ) VAR VAR (  com.google.common.truth.Truth.assertThat ( p . name ) . isEqualTo ( VAR_1 ) )  com.google.common.truth.Truth.assertThat ( p . name ) . isEqualTo ( VAR_1 ) ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_4 . get ( new com.google.gerrit.reviewdb.client.Project.NameKey ( VAR_1 ) ) ) INIT = VAR_4 . get ( new com.google.gerrit.reviewdb.client.Project.NameKey ( VAR_1 ) ) ) VAR VAR (  com.google.common.truth.Truth.assertThat ( VAR_3 ) . METHOD_2 ( ) )  com.google.common.truth.Truth.assertThat ( VAR_3 ) . METHOD_2 ( ) (  TYPE_3 . METHOD_3 ( VAR_3 . getProject ( ) , p ) )  TYPE_3 . METHOD_3 ( VAR_3 . getProject ( ) , p ) (  METHOD_4 ( VAR_1 , STRING_2 ) )  METHOD_4 ( VAR_1 , STRING_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN com.google.gerrit.reviewdb.client.AccountGroup ) RETURN com.google.gerrit.reviewdb.client.AccountGroup ( NAME group ) NAME group ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME args ) NAME args ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  args . METHOD_1 ( name ) )  args . METHOD_1 ( name ) (  VAR_1 = java.util.Collections.singleton ( admin . getId ( ) ) )  VAR_1 = java.util.Collections.singleton ( admin . getId ( ) ) (  return VAR_2 . create ( args ) . METHOD_2 ( ) ; )  return VAR_2 . create ( args ) . METHOD_2 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME delete ) NAME delete ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME path ) NAME path ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_1 ( ) )  METHOD_1 ( ) ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_4 . display ( TYPE_5 . METHOD_2 ( changeId ) ) )  TYPE_4 . display ( TYPE_5 . METHOD_2 ( changeId ) ) ) BLOCK BLOCK ) METHOD METHOD ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_3 ) NAME METHOD_3 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ) BLOCK BLOCK ) METHOD METHOD (  TYPE_1 . delete ( changeId . get ( ) , path , new TYPE_2 < TYPE_3 > ( ) { public void onSuccess ( TYPE_3 result ) { TYPE_4 . display ( TYPE_5 . METHOD_2 ( changeId ) ) ; } public void METHOD_3 ( TYPE_6 VAR_1 ) { } } ) )  TYPE_1 . delete ( changeId . get ( ) , path , new TYPE_2 < TYPE_3 > ( ) { public void onSuccess ( TYPE_3 result ) { TYPE_4 . display ( TYPE_5 . METHOD_2 ( changeId ) ) ; } public void METHOD_3 ( TYPE_6 VAR_1 ) { } } ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN com.google.gerrit.reviewdb.client.Change.Id ) RETURN com.google.gerrit.reviewdb.client.Change.Id ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.server.ReviewDb ) TYPE com.google.gerrit.reviewdb.server.ReviewDb ( NAME db ) NAME db ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME email ) NAME email ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4.Key ) TYPE TYPE_4.Key ( NAME VAR_2 ) NAME VAR_2 ( INIT = new TYPE_4 . Key ( VAR_3 , VAR_1 ) ) INIT = new TYPE_4 . Key ( VAR_3 , VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_4 ) NAME VAR_4 ( INIT = db . METHOD_2 ( ) ) INIT = db . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_4 . get ( VAR_2 ) ) INIT = VAR_4 . get ( VAR_2 ) ) VAR VAR ( IF IF ( COND VAR_5 == null ) COND VAR_5 == null ( THEN THEN (  return VAR_6 . METHOD_3 ( VAR_1 , name , email ) ; )  return VAR_6 . METHOD_3 ( VAR_1 , name , email ) ; ) THEN THEN ( ELSE ELSE (  return VAR_5 . getAccountId ( ) ; )  return VAR_5 . getAccountId ( ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1<java.lang.String> ) RETURN TYPE_1<java.lang.String> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<java.lang.String> ) TYPE TYPE_1<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 < java.lang.String > ( ) ) INIT = new TYPE_2 < java.lang.String > ( ) ) VAR VAR (  VAR_1 . add ( STRING_1 ) )  VAR_1 . add ( STRING_1 ) ( FOR-EACH FOR-EACH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME c ) NAME c ( IN METHOD_2 ( ) ) IN METHOD_2 ( ) ( BLOCK BLOCK (  VAR_1 . add ( c . getName ( ) ) )  VAR_1 . add ( c . getName ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN java.lang.StringBuilder ) RETURN java.lang.StringBuilder ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Account.Id ) TYPE com.google.gerrit.reviewdb.client.Account.Id ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.StringBuilder ) TYPE java.lang.StringBuilder ( NAME r ) NAME r ( INIT = new java.lang.StringBuilder ( ) ) INIT = new java.lang.StringBuilder ( ) ) VAR VAR (  r . append ( VAR_1 ) )  r . append ( VAR_1 ) ( VAR VAR ( TYPE int ) TYPE int ( NAME n ) NAME n ( INIT = ( VAR_2 . get ( ) ) % INT_1 ) INIT = ( VAR_2 . get ( ) ) % INT_1 ) VAR VAR ( IF IF ( COND n < INT_2 ) COND n < INT_2 ( THEN THEN (  r . append ( CHAR_1 ) )  r . append ( CHAR_1 ) ) THEN THEN ) IF IF (  r . append ( n ) )  r . append ( n ) (  r . append ( CHAR_2 ) )  r . append ( CHAR_2 ) (  r . append ( VAR_2 . get ( ) ) )  r . append ( VAR_2 . get ( ) ) (  r . append ( CHAR_2 ) )  r . append ( CHAR_2 ) (  return r ; )  return r ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2.Key ) TYPE TYPE_2.Key ( NAME key ) NAME key ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Account.Id ) TYPE com.google.gerrit.reviewdb.client.Account.Id ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . getAccountId ( ) ) INIT = VAR_1 . getAccountId ( ) ) VAR VAR ( VAR VAR ( TYPE boolean ) TYPE boolean ( NAME VAR_3 ) NAME VAR_3 ( INIT = VAR_1 . METHOD_2 ( ) ) INIT = VAR_1 . METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3.Key ) TYPE TYPE_3.Key ( NAME VAR_4 ) NAME VAR_4 ( INIT = VAR_1 . METHOD_3 ( ) ) INIT = VAR_1 . METHOD_3 ( ) ) VAR VAR (  return METHOD_1 ( key , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; )  return METHOD_1 ( key , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN long ) RETURN long ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME n ) NAME n ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE long ) TYPE long ( NAME d ) NAME d ( INIT = TYPE_1 . METHOD_2 ( VAR_2 , TYPE_2 ) ) INIT = TYPE_1 . METHOD_2 ( VAR_2 , TYPE_2 ) ) VAR VAR ( VAR VAR ( TYPE long ) TYPE long ( NAME m ) NAME m ) VAR VAR (  m = TYPE_3 . METHOD_3 ( config , STRING_1 , n , VAR_1 , d , TYPE_1 ) )  m = TYPE_3 . METHOD_3 ( config , STRING_1 , n , VAR_1 , d , TYPE_1 ) (  return TYPE_2 . METHOD_2 ( m , TYPE_1 ) ; )  return TYPE_2 . METHOD_2 ( m , TYPE_1 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME add ) NAME add ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.server.ReviewDb ) TYPE com.google.gerrit.reviewdb.server.ReviewDb ( NAME db ) NAME db ) VAR VAR ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  VAR_1 . add ( new TYPE_1 ( VAR_2 . getKey ( ) , TYPE_3 . METHOD_1 ( VAR_2 ) ) ) )  VAR_1 . add ( new TYPE_1 ( VAR_2 . getKey ( ) , TYPE_3 . METHOD_1 ( VAR_2 ) ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME e ) NAME e ( BLOCK BLOCK (  throw e ; )  throw e ; ) BLOCK BLOCK ) CATCH CATCH ( CATCH CATCH ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME e ) NAME e ( BLOCK BLOCK (  METHOD_2 ( db , VAR_2 ) )  METHOD_2 ( db , VAR_2 ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( VAR_2 ) ) INIT = METHOD_2 ( VAR_2 ) ) VAR VAR (  METHOD_3 ( VAR_1 . changeId , VAR_3 , VAR_4 ) )  METHOD_3 ( VAR_1 . changeId , VAR_3 , VAR_4 ) (  assertThat ( VAR_5 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_6 ) . to ( VAR_7 ) . METHOD_6 ( VAR_8 , VAR_9 ) . METHOD_6 ( VAR_10 ) . METHOD_7 ( VAR_11 ) . METHOD_7 ( VAR_2 ) )  assertThat ( VAR_5 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_6 ) . to ( VAR_7 ) . METHOD_6 ( VAR_8 , VAR_9 ) . METHOD_6 ( VAR_10 ) . METHOD_7 ( VAR_11 ) . METHOD_7 ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME get ) NAME get ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME p ) NAME p ( INIT = VAR_1 ) INIT = VAR_1 ) VAR VAR ( IF IF ( COND ( VAR_2 ) && ( p . METHOD_1 ( ) ) ) COND ( VAR_2 ) && ( p . METHOD_1 ( ) ) ( THEN THEN ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  VAR_3 = new TYPE_1 ( ) )  VAR_3 = new TYPE_1 ( ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_4 . error ( STRING_1 , e ) )  VAR_4 . error ( STRING_1 , e ) (  return p ; )  return p ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY (  p = VAR_3 )  p = VAR_3 (  VAR_1 = p )  VAR_1 = p ) THEN THEN ) IF IF (  return p ; )  return p ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME git ) NAME git ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_4.Result ) TYPE TYPE_4.Result ( NAME change ) NAME change ( INIT = METHOD_3 ( git , true ) ) INIT = METHOD_3 ( git , true ) ) VAR VAR (  METHOD_3 ( git , false ) )  METHOD_3 ( git , false ) ( VAR VAR ( TYPE java.util.Set<java.lang.String> ) TYPE java.util.Set<java.lang.String> ( NAME changes ) NAME changes ( INIT = METHOD_4 ( change ) ) INIT = METHOD_4 ( change ) ) VAR VAR (  org.junit.Assert.assertEquals ( 0 , changes . size ( ) ) )  org.junit.Assert.assertEquals ( 0 , changes . size ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.Set<java.lang.String> ) RETURN java.util.Set<java.lang.String> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME notes ) NAME notes ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.Set<java.lang.String> ) TYPE java.util.Set<java.lang.String> ( NAME result ) NAME result ( INIT = new TYPE_2 < > ( ) ) INIT = new TYPE_2 < > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE com.google.gerrit.reviewdb.client.PatchSet ) TYPE com.google.gerrit.reviewdb.client.PatchSet ( NAME ps ) NAME ps ( IN VAR_1 . METHOD_2 ( db . get ( ) , notes ) ) IN VAR_1 . METHOD_2 ( db . get ( ) , notes ) ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ( INIT = ps . METHOD_3 ( ) ) INIT = ps . METHOD_3 ( ) ) VAR VAR ( IF IF ( COND VAR_2 != null ) COND VAR_2 != null ( THEN THEN (  result . METHOD_4 ( VAR_2 ) )  result . METHOD_4 ( VAR_2 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME add ) NAME add ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( VAR_2 ) != null ) COND ( VAR_2 ) != null ( THEN THEN ( IF IF ( COND VAR_1 instanceof TYPE_2 ) COND VAR_1 instanceof TYPE_2 ( THEN THEN ( IF IF ( COND ( VAR_3 ) == null ) COND ( VAR_3 ) == null ( THEN THEN (  VAR_3 = TYPE_3 . METHOD_1 ( ) )  VAR_3 = TYPE_3 . METHOD_1 ( ) ) THEN THEN ) IF IF (  VAR_3 . add ( ( ( TYPE_2 < ? > ) ( VAR_1 ) ) ) )  VAR_3 . add ( ( ( TYPE_2 < ? > ) ( VAR_1 ) ) ) ) THEN THEN ) IF IF (  VAR_2 . add ( VAR_1 ) )  VAR_2 . add ( VAR_1 ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_8 ) TYPE TYPE_8 ( NAME result ) NAME result ( INIT = VAR_1 . create ( VAR_2 , message ) . METHOD_1 ( ) ) INIT = VAR_1 . create ( VAR_2 , message ) . METHOD_1 ( ) ) VAR VAR ( IF IF ( COND ( result . METHOD_2 ( ) . size ( ) ) > 0 ) COND ( result . METHOD_2 ( ) . size ( ) ) > 0 ( THEN THEN (  throw new TYPE_6 ( result . getChangeId ( ) ) ; )  throw new TYPE_6 ( result . getChangeId ( ) ) ; ) THEN THEN ) IF IF (  return VAR_3 . create ( result . getChangeId ( ) ) . METHOD_1 ( ) ; )  return VAR_3 . create ( result . getChangeId ( ) ) . METHOD_1 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME r ) NAME r ( INIT = TYPE_2 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , STRING_1 ) ) INIT = TYPE_2 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , STRING_1 ) ) VAR VAR (  r . METHOD_3 ( ) )  r . METHOD_3 ( ) (  r . METHOD_4 ( true ) )  r . METHOD_4 ( true ) (  TYPE_2 . METHOD_2 ( VAR_1 , VAR_2 , VAR_4 , STRING_1 ) )  TYPE_2 . METHOD_2 ( VAR_1 , VAR_2 , VAR_4 , STRING_1 ) ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME u ) NAME u ( INIT = util . user ( VAR_1 , VAR_4 ) ) INIT = util . user ( VAR_1 , VAR_4 ) ) VAR VAR (  METHOD_5 ( STRING_2 , u . METHOD_6 ( STRING_3 ) . METHOD_7 ( ) ) )  METHOD_5 ( STRING_2 , u . METHOD_6 ( STRING_3 ) . METHOD_7 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME value ) NAME value ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . create ( project ) ) INIT = VAR_2 . create ( project ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3.ProjectConfig ) TYPE TYPE_3.ProjectConfig ( NAME config ) NAME config ( INIT = TYPE_4 . METHOD_2 ( VAR_1 ) ) INIT = TYPE_4 . METHOD_2 ( VAR_1 ) ) VAR VAR (  config . getProject ( ) . METHOD_1 ( value ) )  config . getProject ( ) . METHOD_1 ( value ) (  config . commit ( VAR_1 ) )  config . commit ( VAR_1 ) (  VAR_3 . METHOD_3 ( config . getProject ( ) ) )  VAR_3 . METHOD_3 ( config . getProject ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.Key ) TYPE TYPE_1.Key ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.PatchSet.Id ) TYPE com.google.gerrit.reviewdb.client.PatchSet.Id ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.PatchSet.Id ) TYPE com.google.gerrit.reviewdb.client.PatchSet.Id ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE TYPE_3<TYPE_4> ) TYPE TYPE_3<TYPE_4> ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_3 == null ) COND VAR_3 == null ( THEN THEN (  VAR_5 . METHOD_2 ( new TYPE_5 ( ) ) )  VAR_5 . METHOD_2 ( new TYPE_5 ( ) ) (  return ; )  return ; ) THEN THEN ) IF IF (  TYPE_6 . METHOD_3 ( VAR_6 . create ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ) . to ( VAR_5 ) )  TYPE_6 . METHOD_3 ( VAR_6 . create ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ) . to ( VAR_5 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1.NameKey ) TYPE TYPE_1.NameKey ( NAME project ) NAME project ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME ref ) NAME ref ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME cfg ) NAME cfg ( IN TYPE_3 . METHOD_2 ( ) ) IN TYPE_3 . METHOD_2 ( ) ( BLOCK BLOCK ( IF IF ( COND cfg . METHOD_3 ( ref ) ) COND cfg . METHOD_3 ( ref ) ( THEN THEN ( FOR-EACH FOR-EACH ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_1 ) NAME VAR_1 ( IN cfg . METHOD_4 ( project ) ) IN cfg . METHOD_4 ( project ) ( BLOCK BLOCK (  TYPE_3 . METHOD_5 ( project , ref , cfg , VAR_1 ) )  TYPE_3 . METHOD_5 ( project , ref , cfg , VAR_1 ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  bind ( VAR_1 class ) . METHOD_2 ( VAR_2 class ) . METHOD_3 ( VAR_3 class ) )  bind ( VAR_1 class ) . METHOD_2 ( VAR_2 class ) . METHOD_3 ( VAR_3 class ) (  bind ( VAR_4 class ) . in ( VAR_5 ) )  bind ( VAR_4 class ) . in ( VAR_5 ) (  bind ( VAR_6 class ) . METHOD_3 ( VAR_7 class ) . in ( VAR_5 ) )  bind ( VAR_6 class ) . METHOD_3 ( VAR_7 class ) . in ( VAR_5 ) (  factory ( VAR_8 . Factory class ) )  factory ( VAR_8 . Factory class ) (  factory ( VAR_9 . Factory class ) )  factory ( VAR_9 . Factory class ) (  com.google.gerrit.extensions.registration.DynamicSet . bind ( binder ( ) , VAR_10 class ) . to ( VAR_11 class ) )  com.google.gerrit.extensions.registration.DynamicSet . bind ( binder ( ) , VAR_10 class ) . to ( VAR_11 class ) (  install ( VAR_12 ) )  install ( VAR_12 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SYNCHRONIZED SYNCHRONIZED (  VAR_2 )  VAR_2 ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_2<java.lang.String,TYPE_3<TYPE_4<?,?>>> ) TYPE TYPE_2<java.lang.String,TYPE_3<TYPE_4<?,?>>> ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_4 . METHOD_2 ( VAR_1 . getName ( ) ) . METHOD_3 ( ) ) IN VAR_4 . METHOD_2 ( VAR_1 . getName ( ) ) . METHOD_3 ( ) ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4<?,?> ) TYPE TYPE_4<?,?> ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_3 . getValue ( ) . get ( ) ) INIT = VAR_3 . getValue ( ) . get ( ) ) VAR VAR ( IF IF ( COND VAR_2 . METHOD_4 ( VAR_5 ) ) COND VAR_2 . METHOD_4 ( VAR_5 ) ( THEN THEN (  ( ( TYPE_5 < ? , ? > ) ( VAR_5 ) ) . METHOD_5 ( ) )  ( ( TYPE_5 < ? , ? > ) ( VAR_5 ) ) . METHOD_5 ( ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH ) BLOCK BLOCK ) SYNCHRONIZED SYNCHRONIZED ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  bind ( VAR_1 class ) . METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) )  bind ( VAR_1 class ) . METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) (  factory ( VAR_2 . Factory class ) )  factory ( VAR_2 . Factory class ) (  install ( new TYPE_2 ( VAR_3 ) ) )  install ( new TYPE_2 ( VAR_3 ) ) ( IF IF ( COND ( ( VAR_4 ) == null ) && ( ( base ) == null ) ) COND ( ( VAR_4 ) == null ) && ( ( base ) == null ) ( THEN THEN (  install ( new TYPE_3 ( ) ) )  install ( new TYPE_3 ( ) ) ) THEN THEN ( ELSE ELSE (  install ( new TYPE_4 ( ) ) )  install ( new TYPE_4 ( ) ) ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME create ) NAME create ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME r ) NAME r ( INIT = new java.util.ArrayList < TYPE_2 > ( out . size ( ) ) ) INIT = new java.util.ArrayList < TYPE_2 > ( out . size ( ) ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE com.google.gerrit.reviewdb.client.Account ) TYPE com.google.gerrit.reviewdb.client.Account ( NAME a ) NAME a ( IN out . values ( ) ) IN out . values ( ) ( BLOCK BLOCK (  r . add ( new TYPE_2 ( a ) ) )  r . add ( new TYPE_2 ( a ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return new TYPE_1 ( r ) ; )  return new TYPE_1 ( r ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND ( TYPE_1 . equals ( VAR_1 ) ) && ( ! ( VAR_2 . METHOD_2 ( ) ) ) ) COND ( TYPE_1 . equals ( VAR_1 ) ) && ( ! ( VAR_2 . METHOD_2 ( ) ) ) ( THEN THEN ( IF IF ( COND ! ( ( VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) ) && ( METHOD_5 ( ) . METHOD_6 ( ) . METHOD_7 ( ) ) ) ) COND ! ( ( VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) ) && ( METHOD_5 ( ) . METHOD_6 ( ) . METHOD_7 ( ) ) ) ( THEN THEN (  return false ; )  return false ; ) THEN THEN ) IF IF ) THEN THEN ) IF IF (  return ( METHOD_8 ( VAR_3 ) ) && ( METHOD_9 ( ) ) ; )  return ( METHOD_8 ( VAR_3 ) ) && ( METHOD_9 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN int ) RETURN int ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<com.google.gerrit.server.query.change.ChangeData> ) TYPE TYPE_1<com.google.gerrit.server.query.change.ChangeData> ( NAME s ) NAME s ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE int ) TYPE int ( NAME n ) NAME n ( INIT = ( VAR_1 . METHOD_2 ( s ) ) ? VAR_1 . METHOD_3 ( s ) : VAR_2 ) INIT = ( VAR_1 . METHOD_2 ( s ) ) ? VAR_1 . METHOD_3 ( s ) : VAR_2 ) VAR VAR (  return ( VAR_3 ) > 0 ? ( TYPE_2 . METHOD_4 ( n , VAR_3 ) ) + 1 : n ; )  return ( VAR_3 ) > 0 ? ( TYPE_2 . METHOD_4 ( n , VAR_3 ) ) + 1 : n ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.server.ReviewDb ) TYPE com.google.gerrit.reviewdb.server.ReviewDb ( NAME db ) NAME db ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  return ( ( ( ( ( METHOD_2 ( ) ) || ( VAR_1 . METHOD_3 ( METHOD_2 ( ) ) ) ) || ( VAR_1 . METHOD_1 ( ) ) ) && ( VAR_1 . METHOD_4 ( ) . METHOD_5 ( VAR_2 ) ) ) && ( METHOD_6 ( ) . METHOD_7 ( ) . METHOD_8 ( ) ) ) && ( ! ( METHOD_9 ( db ) ) ) ; )  return ( ( ( ( ( METHOD_2 ( ) ) || ( VAR_1 . METHOD_3 ( METHOD_2 ( ) ) ) ) || ( VAR_1 . METHOD_1 ( ) ) ) && ( VAR_1 . METHOD_4 ( ) . METHOD_5 ( VAR_2 ) ) ) && ( METHOD_6 ( ) . METHOD_7 ( ) . METHOD_8 ( ) ) ) && ( ! ( METHOD_9 ( db ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2.Id ) TYPE TYPE_2.Id ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4.AccountGroup ) TYPE TYPE_4.AccountGroup ( NAME group ) NAME group ( INIT = VAR_2 . get ( VAR_1 ) ) INIT = VAR_2 . get ( VAR_1 ) ) VAR VAR ( IF IF ( COND group == null ) COND group == null ( THEN THEN (  throw new TYPE_3 ( VAR_1 ) ; )  throw new TYPE_3 ( VAR_1 ) ; ) THEN THEN ) IF IF (  return new TYPE_1 ( user . get ( ) , group ) ; )  return new TYPE_1 ( user . get ( ) , group ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  VAR_2 . METHOD_3 ( VAR_3 class , new TYPE_4 < TYPE_1 > ( VAR_1 , this ) ) )  VAR_2 . METHOD_3 ( VAR_3 class , new TYPE_4 < TYPE_1 > ( VAR_1 , this ) ) (  VAR_2 . create ( ) . METHOD_4 ( METHOD_5 ( VAR_1 ) , VAR_3 class ) )  VAR_2 . create ( ) . METHOD_4 ( METHOD_5 ( VAR_1 ) , VAR_3 class ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME err ) NAME err ( BLOCK BLOCK (  VAR_4 = null )  VAR_4 = null (  VAR_5 = null )  VAR_5 = null (  throw err ; )  throw err ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1<TYPE_2> ) RETURN TYPE_1<TYPE_2> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME create ) NAME create ( INIT = VAR_1 . create ( name ) ) INIT = VAR_1 . create ( name ) ) VAR VAR (  create . apply ( VAR_2 , new TYPE_4 ( ) ) )  create . apply ( VAR_2 , new TYPE_4 ( ) ) (  return new TYPE_1 < TYPE_2 > ( VAR_3 . METHOD_2 ( new com.google.gerrit.reviewdb.client.Project.NameKey ( name ) ) ) ; )  return new TYPE_1 < TYPE_2 > ( VAR_3 . METHOD_2 ( new com.google.gerrit.reviewdb.client.Project.NameKey ( name ) ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1<?extendsTYPE_2> ) RETURN TYPE_1<?extendsTYPE_2> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND TYPE_5 . METHOD_2 ( name ) ) COND TYPE_5 . METHOD_2 ( name ) ( THEN THEN (  return null ; )  return null ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_1<?> ) TYPE TYPE_1<?> ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_1 . METHOD_3 ( name , false , VAR_1 ) ) INIT = TYPE_1 . METHOD_3 ( name , false , VAR_1 ) ) VAR VAR ( IF IF ( COND ! ( VAR_3 class . METHOD_4 ( VAR_2 ) ) ) COND ! ( VAR_3 class . METHOD_4 ( VAR_2 ) ) ( THEN THEN (  throw new TYPE_6 ( java.lang.String.format ( STRING_1 , name , VAR_3 class . getName ( ) ) ) ; )  throw new TYPE_6 ( java.lang.String.format ( STRING_1 , name , VAR_3 class . getName ( ) ) ) ; ) THEN THEN ) IF IF (  return ( ( TYPE_1 < ? extends TYPE_2 > ) ( VAR_2 ) ) ; )  return ( ( TYPE_1 < ? extends TYPE_2 > ) ( VAR_2 ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.List<TYPE_1> ) TYPE java.util.List<TYPE_1> ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME r ) NAME r ( INIT = new java.util.ArrayList < TYPE_2 > ( result . size ( ) ) ) INIT = new java.util.ArrayList < TYPE_2 > ( result . size ( ) ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( IN result ) IN result ( BLOCK BLOCK (  r . add ( new TYPE_2 ( VAR_1 ) ) )  r . add ( new TYPE_2 ( VAR_1 ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  VAR_2 . METHOD_1 ( req , new TYPE_3 ( r ) ) )  VAR_2 . METHOD_1 ( req , new TYPE_3 ( r ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2<com.google.gerrit.reviewdb.client.AccountGroup> ) TYPE TYPE_2<com.google.gerrit.reviewdb.client.AccountGroup> ( NAME schema ) NAME schema ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME cfg ) NAME cfg ) VAR VAR ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND TYPE_5 . METHOD_2 ( cfg ) ) COND TYPE_5 . METHOD_2 ( cfg ) ( THEN THEN (  return new TYPE_6 ( ) ; )  return new TYPE_6 ( ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_7 ) TYPE TYPE_7 ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_8 . METHOD_3 ( VAR_1 , ( ( VAR_3 ) + STRING_1 ) , schema ) ) INIT = TYPE_8 . METHOD_3 ( VAR_1 , ( ( VAR_3 ) + STRING_1 ) , schema ) ) VAR VAR (  return TYPE_9 . METHOD_4 ( VAR_2 ) ; )  return TYPE_9 . METHOD_4 ( VAR_2 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN boolean ) RETURN boolean ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME key ) NAME key ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN TYPE_3 ) RETURN TYPE_3 ( NAME METHOD_3 ) NAME METHOD_3 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = TYPE_4 . METHOD_4 ( VAR_1 , key ) ) INIT = TYPE_4 . METHOD_4 ( VAR_1 , key ) ) VAR VAR (  return VAR_3 . METHOD_5 ( TYPE_5 . on ( STRING_4 ) . METHOD_6 ( VAR_4 , STRING_5 , VAR_1 ) , VAR_2 ) ; )  return VAR_3 . METHOD_5 ( TYPE_5 . on ( STRING_4 ) . METHOD_6 ( VAR_4 , STRING_5 , VAR_1 ) , VAR_2 ) ; ) BLOCK BLOCK ) METHOD METHOD (  return new TYPE_2 ( ( ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + ( METHOD_2 ( key ) ) ) + STRING_3 ) ) { TYPE_3 METHOD_3 ( ) throws java.io.IOException { java.lang.String VAR_2 = TYPE_4 . METHOD_4 ( VAR_1 , key ) ; return VAR_3 . METHOD_5 ( TYPE_5 . on ( STRING_4 ) . METHOD_6 ( VAR_4 , STRING_5 , VAR_1 ) , VAR_2 ) ; } } . METHOD_7 ( ) ; )  return new TYPE_2 ( ( ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + ( METHOD_2 ( key ) ) ) + STRING_3 ) ) { TYPE_3 METHOD_3 ( ) throws java.io.IOException { java.lang.String VAR_2 = TYPE_4 . METHOD_4 ( VAR_1 , key ) ; return VAR_3 . METHOD_5 ( TYPE_5 . on ( STRING_4 ) . METHOD_6 ( VAR_4 , STRING_5 , VAR_1 ) , VAR_2 ) ; } } . METHOD_7 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME repo ) NAME repo ( INIT = METHOD_2 ( STRING_1 ) ) INIT = METHOD_2 ( STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME VAR_1 ) NAME VAR_1 ( INIT = insert ( METHOD_3 ( repo ) ) ) INIT = insert ( METHOD_3 ( repo ) ) ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME VAR_2 ) NAME VAR_2 ( INIT = insert ( METHOD_3 ( repo ) ) ) INIT = insert ( METHOD_3 ( repo ) ) ) VAR VAR (  METHOD_4 ( STRING_2 ) )  METHOD_4 ( STRING_2 ) (  METHOD_4 ( VAR_1 . getId ( ) . get ( ) , VAR_1 ) )  METHOD_4 ( VAR_1 . getId ( ) . get ( ) , VAR_1 ) (  METHOD_4 ( VAR_2 . getId ( ) . get ( ) , VAR_2 ) )  METHOD_4 ( VAR_2 . getId ( ) . get ( ) , VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1.ChangeInfo ) RETURN TYPE_1.ChangeInfo ( NAME apply ) NAME apply ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME req ) NAME req ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME input ) NAME input ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME VAR_1 ) NAME VAR_1 ( INIT = req . METHOD_1 ( ) ) INIT = req . METHOD_1 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_7 ) TYPE TYPE_7 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) INIT = VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) VAR VAR ( IF IF ( COND ! ( VAR_1 . METHOD_4 ( VAR_3 . get ( ) ) ) ) COND ! ( VAR_1 . METHOD_4 ( VAR_3 . get ( ) ) ) ( THEN THEN (  throw new TYPE_8 ( STRING_1 ) ; )  throw new TYPE_8 ( STRING_1 ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME change ) NAME change ( INIT = METHOD_5 ( VAR_1 , input . message , VAR_2 . METHOD_6 ( ) ) ) INIT = METHOD_5 ( VAR_1 , input . message , VAR_2 . METHOD_6 ( ) ) ) VAR VAR (  return VAR_4 . create ( VAR_5 ) . format ( change ) ; )  return VAR_4 . create ( VAR_5 ) . format ( change ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  bind ( VAR_1 class ) . METHOD_2 ( VAR_2 class ) . METHOD_3 ( VAR_3 class ) )  bind ( VAR_1 class ) . METHOD_2 ( VAR_2 class ) . METHOD_3 ( VAR_3 class ) (  bind ( VAR_4 class ) . in ( VAR_5 ) )  bind ( VAR_4 class ) . in ( VAR_5 ) (  bind ( VAR_6 class ) . METHOD_3 ( VAR_7 class ) . in ( VAR_5 ) )  bind ( VAR_6 class ) . METHOD_3 ( VAR_7 class ) . in ( VAR_5 ) (  factory ( VAR_8 . Factory class ) )  factory ( VAR_8 . Factory class ) (  com.google.gerrit.extensions.registration.DynamicSet . bind ( binder ( ) , VAR_9 class ) . to ( VAR_10 class ) )  com.google.gerrit.extensions.registration.DynamicSet . bind ( binder ( ) , VAR_9 class ) . to ( VAR_10 class ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.reviewdb.server.ReviewDb ) TYPE com.google.gerrit.reviewdb.server.ReviewDb ( NAME db ) NAME db ( INIT = schema . METHOD_2 ( ) ) INIT = schema . METHOD_2 ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2.Key ) TYPE TYPE_2.Key ( NAME key ) NAME key ( INIT = new TYPE_2 . Key ( VAR_2 , VAR_1 ) ) INIT = new TYPE_2 . Key ( VAR_2 , VAR_1 ) ) VAR VAR (  return auth ( db . METHOD_3 ( ) . get ( key ) ) ; )  return auth ( db . METHOD_3 ( ) . get ( key ) ) ; ) BLOCK BLOCK ( FINALLY FINALLY (  db . close ( ) )  db . close ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ( CATCH CATCH ( TYPE com.google.gwtorm.server.OrmException ) TYPE com.google.gwtorm.server.OrmException ( NAME e ) NAME e ( BLOCK BLOCK (  METHOD_4 ( ) . log ( STRING_1 , e ) )  METHOD_4 ( ) . log ( STRING_1 , e ) (  return null ; )  return null ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME user ) NAME user ( INIT = VAR_1 . METHOD_1 ( ) ) INIT = VAR_1 . METHOD_1 ( ) ) VAR VAR ( IF IF ( COND ( user != null ) && ( user . METHOD_2 ( ) ) ) COND ( user != null ) && ( user . METHOD_2 ( ) ) ( THEN THEN ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ( INIT = VAR_3 . create ( ( ( TYPE_2 ) ( user ) ) . getAccountId ( ) ) ) INIT = VAR_3 . create ( ( ( TYPE_2 ) ( user ) ) . getAccountId ( ) ) ) VAR VAR (  VAR_2 . METHOD_3 ( user . METHOD_4 ( ) ) )  VAR_2 . METHOD_3 ( user . METHOD_4 ( ) ) (  return VAR_2 ; )  return VAR_2 ; ) THEN THEN ) IF IF (  return user ; )  return user ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  TYPE_2 . METHOD_3 ( VAR_2 . METHOD_4 ( STRING_1 , STRING_2 , STRING_3 ) ) . METHOD_5 ( null ) . METHOD_6 ( ) )  TYPE_2 . METHOD_3 ( VAR_2 . METHOD_4 ( STRING_1 , STRING_2 , STRING_3 ) ) . METHOD_5 ( null ) . METHOD_6 ( ) (  METHOD_7 ( ) )  METHOD_7 ( ) (  METHOD_8 ( STRING_4 , VAR_1 . METHOD_9 ( ) ) )  METHOD_8 ( STRING_4 , VAR_1 . METHOD_9 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME run ) NAME run ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.server.ReviewDb ) TYPE com.google.gerrit.reviewdb.server.ReviewDb ( NAME db ) NAME db ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Account.Id ) TYPE com.google.gerrit.reviewdb.client.Account.Id ( NAME me ) NAME me ( INIT = getAccountId ( ) ) INIT = getAccountId ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_3.Key ) TYPE TYPE_3.Key ( NAME VAR_1 ) NAME VAR_1 ( IN VAR_2 ) IN VAR_2 ( BLOCK BLOCK ( IF IF ( COND ! ( me . equals ( VAR_1 . getParentKey ( ) ) ) ) COND ! ( me . equals ( VAR_1 . getParentKey ( ) ) ) ( THEN THEN (  throw new TYPE_2 ( new TYPE_4 ( ) ) ; )  throw new TYPE_2 ( new TYPE_4 ( ) ) ; ) THEN THEN ) IF IF ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  db . METHOD_1 ( ) . METHOD_2 ( VAR_2 ) )  db . METHOD_1 ( ) . METHOD_2 ( VAR_2 ) (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 ( admin ) ) INIT = new TYPE_2 ( admin ) ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME result ) NAME result ( INIT = VAR_1 . METHOD_2 ( STRING_1 ) ) INIT = VAR_1 . METHOD_2 ( STRING_1 ) ) VAR VAR (  org.junit.Assert . METHOD_3 ( result . contains ( STRING_2 ) ) )  org.junit.Assert . METHOD_3 ( result . contains ( STRING_2 ) ) (  org.junit.Assert . METHOD_3 ( result . contains ( STRING_3 ) ) )  org.junit.Assert . METHOD_3 ( result . contains ( STRING_3 ) ) (  org.junit.Assert . METHOD_3 ( result . contains ( STRING_4 ) ) )  org.junit.Assert . METHOD_3 ( result . contains ( STRING_4 ) ) (  org.junit.Assert . METHOD_3 ( result . contains ( STRING_5 ) ) )  org.junit.Assert . METHOD_3 ( result . contains ( STRING_5 ) ) (  org.junit.Assert . METHOD_3 ( result . contains ( STRING_6 ) ) )  org.junit.Assert . METHOD_3 ( result . contains ( STRING_6 ) ) (  VAR_1 . close ( ) )  VAR_1 . close ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME r ) NAME r ( INIT = VAR_1 . delete ( ( ( ( STRING_1 + ( project . get ( ) ) ) + STRING_2 ) + ( branch . METHOD_2 ( ) ) ) ) ) INIT = VAR_1 . delete ( ( ( ( STRING_1 + ( project . get ( ) ) ) + STRING_2 ) + ( branch . METHOD_2 ( ) ) ) ) ) VAR VAR (  org.junit.Assert.assertEquals ( VAR_2 , r . METHOD_3 ( ) ) )  org.junit.Assert.assertEquals ( VAR_2 , r . METHOD_3 ( ) ) (  r . METHOD_4 ( ) )  r . METHOD_4 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.PatchSet.Id ) TYPE com.google.gerrit.reviewdb.client.PatchSet.Id ( NAME psId ) NAME psId ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.lib.ObjectId ) TYPE org.eclipse.jgit.lib.ObjectId ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME result ) NAME result ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  VAR_3 = psId . getParentKey ( ) . get ( ) )  VAR_3 = psId . getParentKey ( ) . get ( ) (  result . commit = new TYPE_2 ( ) )  result . commit = new TYPE_2 ( ) (  VAR_4 . commit = VAR_1 . name ( ) )  VAR_4 . commit = VAR_1 . name ( ) (  VAR_5 = psId . get ( ) )  VAR_5 = psId . get ( ) (  VAR_6 = VAR_2 )  VAR_6 = VAR_2 (  result . status = STRING_1 )  result . status = STRING_1 (  return result ; )  return result ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME repo ) NAME repo ( INIT = METHOD_2 ( STRING_1 ) ) INIT = METHOD_2 ( STRING_1 ) ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME VAR_1 ) NAME VAR_1 ( INIT = insert ( METHOD_3 ( repo , null , null , null , null ) ) ) INIT = insert ( METHOD_3 ( repo , null , null , null , null ) ) ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME VAR_2 ) NAME VAR_2 ( INIT = insert ( METHOD_3 ( repo , null , null , null , null ) ) ) INIT = insert ( METHOD_3 ( repo , null , null , null , null ) ) ) VAR VAR (  METHOD_4 ( STRING_2 ) )  METHOD_4 ( STRING_2 ) (  METHOD_4 ( VAR_1 . getId ( ) . get ( ) , VAR_1 ) )  METHOD_4 ( VAR_1 . getId ( ) . get ( ) , VAR_1 ) (  METHOD_4 ( VAR_2 . getId ( ) . get ( ) , VAR_2 ) )  METHOD_4 ( VAR_2 . getId ( ) . get ( ) , VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME delete ) NAME delete ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME edit ) NAME edit ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME change ) NAME change ( INIT = edit . getChange ( ) ) INIT = edit . getChange ( ) ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME repo ) NAME repo ( INIT = VAR_1 . METHOD_1 ( change . getProject ( ) ) ) INIT = VAR_1 . METHOD_1 ( change . getProject ( ) ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  TYPE_2 . METHOD_2 ( repo , edit ) )  TYPE_2 . METHOD_2 ( repo , edit ) ) BLOCK BLOCK ( FINALLY FINALLY (  repo . close ( ) )  repo . close ( ) ) FINALLY FINALLY ) TRY TRY (  VAR_2 . index ( db . get ( ) , change ) )  VAR_2 . index ( db . get ( ) , change ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1.OrmException ) RETURN TYPE_1.OrmException ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME err ) NAME err ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ( ( err . METHOD_2 ( ) ) == null ) && ( ( err . METHOD_3 ( ) ) != null ) ) COND ( ( err . METHOD_2 ( ) ) == null ) && ( ( err . METHOD_3 ( ) ) != null ) ( THEN THEN (  err . METHOD_4 ( err . METHOD_3 ( ) ) )  err . METHOD_4 ( err . METHOD_3 ( ) ) ) THEN THEN ) IF IF (  return schema . METHOD_5 ( ) . METHOD_1 ( VAR_1 , TYPE_3 . METHOD_6 ( ) , err ) ; )  return schema . METHOD_5 ( ) . METHOD_1 ( VAR_1 , TYPE_3 . METHOD_6 ( ) , err ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME in ) NAME in ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK (  TYPE_1 . METHOD_2 ( in ) )  TYPE_1 . METHOD_2 ( in ) (  METHOD_3 ( ( STRING_1 + in ) ) )  METHOD_3 ( ( STRING_1 + in ) ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME e ) NAME e ( BLOCK BLOCK (  assertEquals ( ( STRING_2 + in ) , e . getMessage ( ) ) )  assertEquals ( ( STRING_2 + in ) , e . getMessage ( ) ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE byte[] ) TYPE byte[] ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME p ) NAME p ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( WHILE WHILE ( COND ( ( p . value ) < ( VAR_1 . length ) ) && ( ( VAR_1 [ p . value ] ) == CHAR_1 ) ) COND ( ( p . value ) < ( VAR_1 . length ) ) && ( ( VAR_1 [ p . value ] ) == CHAR_1 ) ( BLOCK BLOCK (  ( p . value ) ++ )  ( p . value ) ++ ) BLOCK BLOCK ) WHILE WHILE ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( IF IF ( COND VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) . equals ( VAR_2 ) ) COND VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) . equals ( VAR_2 ) ( THEN THEN (  return VAR_1 . METHOD_2 ( ) . METHOD_4 ( VAR_3 ) ; )  return VAR_1 . METHOD_2 ( ) . METHOD_4 ( VAR_3 ) ; ) THEN THEN ) IF IF (  return VAR_1 . METHOD_5 ( ) . METHOD_6 ( VAR_2 ) . METHOD_4 ( VAR_3 ) ; )  return VAR_1 . METHOD_5 ( ) . METHOD_6 ( VAR_2 ) . METHOD_4 ( VAR_3 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME run ) NAME run ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2.ReviewDb ) TYPE TYPE_2.ReviewDb ( NAME db ) NAME db ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_1 ( db , VAR_1 ) )  METHOD_1 ( db , VAR_1 ) ( VAR VAR ( TYPE TYPE_2.AccountGroup ) TYPE TYPE_2.AccountGroup ( NAME group ) NAME group ( INIT = db . METHOD_2 ( ) . get ( VAR_1 ) ) INIT = db . METHOD_2 ( ) . get ( VAR_1 ) ) VAR VAR ( IF IF ( COND group == null ) COND group == null ( THEN THEN (  throw new TYPE_3 ( new TYPE_5 ( ) ) ; )  throw new TYPE_3 ( new TYPE_5 ( ) ) ; ) THEN THEN ) IF IF (  group . METHOD_3 ( VAR_2 ) )  group . METHOD_3 ( VAR_2 ) (  db . METHOD_2 ( ) . update ( java.util.Collections.singleton ( group ) ) )  db . METHOD_2 ( ) . update ( java.util.Collections.singleton ( group ) ) (  return VAR_3 ; )  return VAR_3 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME run ) NAME run ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2.ReviewDb ) TYPE TYPE_2.ReviewDb ( NAME db ) NAME db ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2.Change ) TYPE TYPE_2.Change ( NAME change ) NAME change ( INIT = db . changes ( ) . get ( id ) ) INIT = db . changes ( ) . get ( id ) ) VAR VAR ( IF IF ( COND change == null ) COND change == null ( THEN THEN (  throw new TYPE_3 ( new TYPE_5 ( ) ) ; )  throw new TYPE_3 ( new TYPE_5 ( ) ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_6 ( ) ) INIT = new TYPE_6 ( ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME d ) NAME d ( INIT = new TYPE_1 ( ) ) INIT = new TYPE_1 ( ) ) VAR VAR (  d . METHOD_1 ( db , new TYPE_7 ( db ) , VAR_1 , change ) )  d . METHOD_1 ( db , new TYPE_7 ( db ) , VAR_1 , change ) (  return d ; )  return d ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN org.eclipse.jgit.lib.ObjectId ) RETURN org.eclipse.jgit.lib.ObjectId ( NAME commit ) NAME commit ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = VAR_2 . create ( METHOD_1 ( ) ) ) INIT = VAR_2 . create ( METHOD_1 ( ) ) ) VAR VAR (  VAR_1 . add ( this ) )  VAR_1 . add ( this ) (  VAR_1 . METHOD_2 ( getChange ( ) ) )  VAR_1 . METHOD_2 ( getChange ( ) ) (  VAR_1 . METHOD_3 ( ) )  VAR_1 . METHOD_3 ( ) (  return METHOD_4 ( ) ; )  return METHOD_4 ( ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1<TYPE_2> ) RETURN TYPE_1<TYPE_2> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_2 . equals ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) ) COND VAR_2 . equals ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) ( THEN THEN (  return VAR_1 . METHOD_2 ( ) . METHOD_4 ( VAR_3 , VAR_4 ) ; )  return VAR_1 . METHOD_2 ( ) . METHOD_4 ( VAR_3 , VAR_4 ) ; ) THEN THEN ( ELSE ELSE ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_1 . METHOD_2 ( ) . METHOD_5 ( ) . METHOD_6 ( VAR_2 ) ) INIT = VAR_1 . METHOD_2 ( ) . METHOD_5 ( ) . METHOD_6 ( VAR_2 ) ) VAR VAR (  return VAR_5 . METHOD_4 ( VAR_3 ) ; )  return VAR_5 . METHOD_4 ( VAR_3 ) ; ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK (  bind ( VAR_1 class ) . to ( VAR_2 class ) )  bind ( VAR_1 class ) . to ( VAR_2 class ) (  install ( new TYPE_1 ( ) ) )  install ( new TYPE_1 ( ) ) (  install ( new TYPE_1 ( ) ) )  install ( new TYPE_1 ( ) ) (  install ( new TYPE_1 ( ) ) )  install ( new TYPE_1 ( ) ) (  install ( new TYPE_1 ( ) ) )  install ( new TYPE_1 ( ) ) (  install ( new TYPE_1 ( ) ) )  install ( new TYPE_1 ( ) ) (  install ( new TYPE_1 ( ) ) )  install ( new TYPE_1 ( ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN Project.NameKey ) RETURN Project.NameKey ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME p ) NAME p ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME projectName ) NAME projectName ( INIT = VAR_1 . METHOD_2 ( p ) . toString ( ) ) INIT = VAR_1 . METHOD_2 ( p ) . toString ( ) ) VAR VAR ( IF IF ( COND ( VAR_2 ) != CHAR_1 ) COND ( VAR_2 ) != CHAR_1 ( THEN THEN (  projectName = projectName . METHOD_3 ( VAR_2 , CHAR_1 ) )  projectName = projectName . METHOD_3 ( VAR_2 , CHAR_1 ) ) THEN THEN ) IF IF ( IF IF ( COND projectName . METHOD_4 ( TYPE_2 ) ) COND projectName . METHOD_4 ( TYPE_2 ) ( THEN THEN ( VAR VAR ( TYPE int ) TYPE int ( NAME VAR_3 ) NAME VAR_3 ( INIT = ( projectName . length ( ) ) - ( TYPE_2 . length ( ) ) ) INIT = ( projectName . length ( ) ) - ( TYPE_2 . length ( ) ) ) VAR VAR (  projectName = projectName . METHOD_5 ( 0 , VAR_3 ) )  projectName = projectName . METHOD_5 ( 0 , VAR_3 ) ) THEN THEN ) IF IF (  return new com.google.gerrit.reviewdb.client.Project.NameKey ( projectName ) ; )  return new com.google.gerrit.reviewdb.client.Project.NameKey ( projectName ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME onSuccess ) NAME onSuccess ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME result ) NAME result ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  TYPE_4 . display ( VAR_2 ) )  TYPE_4 . display ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD ( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_3 ) NAME METHOD_3 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_5 ) TYPE TYPE_5 ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_4 . METHOD_4 ( STRING_2 ) )  VAR_4 . METHOD_4 ( STRING_2 ) (  super . METHOD_3 ( VAR_3 ) )  super . METHOD_3 ( VAR_3 ) ) BLOCK BLOCK ) METHOD METHOD (  TYPE_1 . METHOD_2 ( STRING_1 , VAR_1 . getName ( ) , new TYPE_2 < TYPE_3 > ( ) { public void onSuccess ( TYPE_3 result ) { TYPE_4 . display ( VAR_2 ) ; } public void METHOD_3 ( TYPE_5 VAR_3 ) { VAR_4 . METHOD_4 ( STRING_2 ) ; super . METHOD_3 ( VAR_3 ) ; } } ) )  TYPE_1 . METHOD_2 ( STRING_1 , VAR_1 . getName ( ) , new TYPE_2 < TYPE_3 > ( ) { public void onSuccess ( TYPE_3 result ) { TYPE_4 . display ( VAR_2 ) ; } public void METHOD_3 ( TYPE_5 VAR_3 ) { VAR_4 . METHOD_4 ( STRING_2 ) ; super . METHOD_3 ( VAR_3 ) ; } } ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private static ) MODIFIER private static ( RETURN TYPE_1.Test ) RETURN TYPE_1.Test ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND STRING_1 . equals ( VAR_1 ) ) COND STRING_1 . equals ( VAR_1 ) ( THEN THEN (  return VAR_2 ; )  return VAR_2 ; ) THEN THEN ( ELSE ELSE ( IF IF ( COND STRING_2 . equals ( VAR_1 ) ) COND STRING_2 . equals ( VAR_1 ) ( THEN THEN (  return VAR_3 ; )  return VAR_3 ; ) THEN THEN ( ELSE ELSE ( IF IF ( COND STRING_3 . equals ( VAR_1 ) ) COND STRING_3 . equals ( VAR_1 ) ( THEN THEN (  return VAR_4 ; )  return VAR_4 ; ) THEN THEN ( ELSE ELSE (  throw new TYPE_2 ( ( STRING_4 + VAR_1 ) ) ; )  throw new TYPE_2 ( ( STRING_4 + VAR_1 ) ) ; ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) ELSE ELSE ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME event ) NAME event ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME change ) NAME change ( INIT = VAR_1 . get ( ) ) INIT = VAR_1 . get ( ) ) VAR VAR ( IF IF ( COND VAR_2 . METHOD_2 ( change ) ) COND VAR_2 . METHOD_2 ( change ) ( THEN THEN (  METHOD_3 ( change ) )  METHOD_3 ( change ) ) THEN THEN ) IF IF ( TRY TRY ( BLOCK BLOCK (  METHOD_4 ( change ) )  METHOD_4 ( change ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE com.google.gwtorm.server.OrmException|TYPE_3|java.io.IOException|TYPE_4 ) TYPE com.google.gwtorm.server.OrmException|TYPE_3|java.io.IOException|TYPE_4 ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_3 . error ( ( STRING_1 + ( VAR_4 ) ) , e ) )  VAR_3 . error ( ( STRING_1 + ( VAR_4 ) ) , e ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<TYPE_2> ) TYPE java.util.List<TYPE_2> ( NAME modules ) NAME modules ( INIT = new java.util.ArrayList < TYPE_2 > ( ) ) INIT = new java.util.ArrayList < TYPE_2 > ( ) ) VAR VAR (  modules.add ( VAR_1 . METHOD_2 ( VAR_2 class ) ) )  modules.add ( VAR_1 . METHOD_2 ( VAR_2 class ) ) (  modules.add ( VAR_1 . METHOD_2 ( VAR_3 class ) ) )  modules.add ( VAR_1 . METHOD_2 ( VAR_3 class ) ) (  return VAR_4 . METHOD_3 ( modules ) ; )  return VAR_4 . METHOD_3 ( modules ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER protected ) MODIFIER protected ( RETURN TYPE_1<java.lang.String> ) RETURN TYPE_1<java.lang.String> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1<java.lang.String> ) TYPE TYPE_1<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_2 < java.lang.String > ( ) ) INIT = new TYPE_2 < java.lang.String > ( ) ) VAR VAR (  VAR_1 . add ( STRING_1 ) )  VAR_1 . add ( STRING_1 ) (  VAR_1 . add ( STRING_2 ) )  VAR_1 . add ( STRING_2 ) ( FOR-EACH FOR-EACH ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME c ) NAME c ( IN METHOD_2 ( ) ) IN METHOD_2 ( ) ( BLOCK BLOCK (  VAR_1 . add ( c . getName ( ) ) )  VAR_1 . add ( c . getName ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN java.lang.String ) RETURN java.lang.String ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME s ) NAME s ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR ( IF IF ( COND ( s == null ) || ( ( s . length ( ) ) == 0 ) ) COND ( s == null ) || ( ( s . length ( ) ) == 0 ) ( THEN THEN (  return STRING_1 ; )  return STRING_1 ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE java.lang.String[] ) TYPE java.lang.String[] ( NAME VAR_1 ) NAME VAR_1 ( INIT = s . METHOD_3 ( STRING_2 ) ) INIT = s . METHOD_3 ( STRING_2 ) ) VAR VAR ( IF IF ( COND ( VAR_1 . length ) < INT_1 ) COND ( VAR_1 . length ) < INT_1 ( THEN THEN (  return STRING_1 ; )  return STRING_1 ; ) THEN THEN ) IF IF (  return VAR_1 [ INT_1 ] ; )  return VAR_1 [ INT_1 ] ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME config ) NAME config ( INIT = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ) INIT = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = new TYPE_1 ( new TYPE_2 ( projectName , config ) , new TYPE_3 ( STRING_5 , STRING_6 ) , new TYPE_4 ( ) ) ) INIT = new TYPE_1 ( new TYPE_2 ( projectName , config ) , new TYPE_3 ( STRING_5 , STRING_6 ) , new TYPE_4 ( ) ) ) VAR VAR (  com.google.common.truth.Truth.assertThat ( VAR_1 . METHOD_2 ( projectName , STRING_7 , STRING_8 ) ) . METHOD_3 ( ) )  com.google.common.truth.Truth.assertThat ( VAR_1 . METHOD_2 ( projectName , STRING_7 , STRING_8 ) ) . METHOD_3 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Change ) TYPE com.google.gerrit.reviewdb.client.Change ( NAME change ) NAME change ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Account.Id ) TYPE com.google.gerrit.reviewdb.client.Account.Id ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_1<java.lang.String> ) TYPE TYPE_1<java.lang.String> ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE java.util.Set<java.lang.String> ) TYPE java.util.Set<java.lang.String> ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE java.util.Set<java.lang.String> ) TYPE java.util.Set<java.lang.String> ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND ! ( VAR_6 . METHOD_2 ( ) . METHOD_3 ( ) ) ) COND ! ( VAR_6 . METHOD_2 ( ) . METHOD_3 ( ) ) ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF ( TRY TRY ( BLOCK BLOCK (  METHOD_1 ( util . METHOD_4 ( change ) , util . METHOD_5 ( VAR_1 ) , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) )  METHOD_1 ( util . METHOD_4 ( change ) , util . METHOD_5 ( VAR_1 ) , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE com.google.gwtorm.server.OrmException ) TYPE com.google.gwtorm.server.OrmException ( NAME e ) NAME e ( BLOCK BLOCK (  VAR_7 . error ( STRING_1 , e ) )  VAR_7 . error ( STRING_1 , e ) ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ( INIT = STRING_1 ) INIT = STRING_1 ) VAR VAR (  repo . branch ( STRING_2 ) . commit ( ) . add ( STRING_3 , VAR_1 ) . create ( ) )  repo . branch ( STRING_2 ) . commit ( ) . add ( STRING_3 , VAR_1 ) . create ( ) ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ( INIT = METHOD_2 ( STRING_4 ) ) INIT = METHOD_2 ( STRING_4 ) ) VAR VAR (  org.junit.Assert . METHOD_3 ( VAR_2 . contains ( STRING_5 ) ) )  org.junit.Assert . METHOD_3 ( VAR_2 . contains ( STRING_5 ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( TRY TRY ( BLOCK BLOCK ( IF IF ( COND ( VAR_1 ) == null ) COND ( VAR_1 ) == null ( THEN THEN (  return ; )  return ; ) THEN THEN ) IF IF (  message . insert ( 0 , STRING_1 ) )  message . insert ( 0 , STRING_1 ) (  VAR_2 . create ( project , git , VAR_3 ) . METHOD_2 ( VAR_1 , VAR_4 , VAR_5 , message . toString ( ) ) )  VAR_2 . create ( project , git , VAR_3 ) . METHOD_2 ( VAR_1 , VAR_4 , VAR_5 , message . toString ( ) ) ) BLOCK BLOCK ( FINALLY FINALLY ( IF IF ( COND ( VAR_3 ) != null ) COND ( VAR_3 ) != null ( THEN THEN (  VAR_3 . METHOD_3 ( ) )  VAR_3 . METHOD_3 ( ) ) THEN THEN ) IF IF ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.util.Set<TYPE_1> ) TYPE java.util.Set<TYPE_1> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_3 ) NAME VAR_3 ( IN VAR_2 . METHOD_2 ( ) ) IN VAR_2 . METHOD_2 ( ) ( BLOCK BLOCK (  com.google.common.truth.Truth.assertThat ( VAR_1 . METHOD_3 ( VAR_3 ) ) . METHOD_4 ( ) )  com.google.common.truth.Truth.assertThat ( VAR_1 . METHOD_3 ( VAR_3 ) ) . METHOD_4 ( ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  com.google.common.truth.Truth.assertThat ( ( ( TYPE_3 < ? > ) ( VAR_1 ) ) ) . isEmpty ( ) )  com.google.common.truth.Truth.assertThat ( ( ( TYPE_3 < ? > ) ( VAR_1 ) ) ) . isEmpty ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME info ) NAME info ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  VAR_1 . METHOD_2 ( ) . METHOD_3 ( TYPE_3 . css ( ) . METHOD_4 ( ) ) )  VAR_1 . METHOD_2 ( ) . METHOD_3 ( TYPE_3 . css ( ) . METHOD_4 ( ) ) ( IF IF ( COND ( ! ( TYPE_4 . equals ( info . path ( ) ) ) ) && ( ! ( info . METHOD_5 ( ) ) ) ) COND ( ! ( TYPE_4 . equals ( info . path ( ) ) ) ) && ( ! ( info . METHOD_5 ( ) ) ) ( THEN THEN (  VAR_1 . append ( ( ( info . METHOD_6 ( ) ) - ( info . METHOD_7 ( ) ) ) ) )  VAR_1 . append ( ( ( info . METHOD_6 ( ) ) - ( info . METHOD_7 ( ) ) ) ) ) THEN THEN ) IF IF (  VAR_1 . METHOD_8 ( ) )  VAR_1 . METHOD_8 ( ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( ) ) INIT = METHOD_2 ( ) ) VAR VAR (  METHOD_3 ( VAR_1 , VAR_2 ) )  METHOD_3 ( VAR_1 , VAR_2 ) (  assertThat ( VAR_3 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_4 ) . to ( VAR_2 ) . to ( VAR_5 ) . METHOD_6 ( VAR_6 , VAR_7 , VAR_8 ) . METHOD_6 ( VAR_9 ) . METHOD_7 ( VAR_10 ) . METHOD_7 ( VAR_11 ) )  assertThat ( VAR_3 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_4 ) . to ( VAR_2 ) . to ( VAR_5 ) . METHOD_6 ( VAR_6 , VAR_7 , VAR_8 ) . METHOD_6 ( VAR_9 ) . METHOD_7 ( VAR_10 ) . METHOD_7 ( VAR_11 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME revision ) NAME revision ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( SWITCH SWITCH ( NAME type ) NAME type ( CASE VAR_1 ( BLOCK BLOCK (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_1 ( CASE VAR_2 ( BLOCK BLOCK (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_2 ( CASE VAR_3 ( BLOCK BLOCK (  revision = TYPE_3 . METHOD_2 ( revision , VAR_14 ) )  revision = TYPE_3 . METHOD_2 ( revision , VAR_14 ) (  TYPE_4 . METHOD_3 ( ( revision == ( VAR_14 ) ) , STRING_1 , type ) )  TYPE_4 . METHOD_3 ( ( revision == ( VAR_14 ) ) , STRING_1 , type ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_3 ( CASE VAR_4 ( BLOCK BLOCK (  revision = TYPE_3 . METHOD_2 ( revision , VAR_14 ) )  revision = TYPE_3 . METHOD_2 ( revision , VAR_14 ) (  TYPE_4 . METHOD_3 ( ( revision == ( VAR_14 ) ) , STRING_1 , type ) )  TYPE_4 . METHOD_3 ( ( revision == ( VAR_14 ) ) , STRING_1 , type ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_4 ( CASE VAR_5 ( BLOCK BLOCK (  revision = TYPE_3 . METHOD_2 ( revision , VAR_14 ) )  revision = TYPE_3 . METHOD_2 ( revision , VAR_14 ) (  TYPE_4 . METHOD_3 ( ( revision == ( VAR_14 ) ) , STRING_1 , type ) )  TYPE_4 . METHOD_3 ( ( revision == ( VAR_14 ) ) , STRING_1 , type ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_5 ( CASE VAR_6 ( BLOCK BLOCK (  revision = TYPE_3 . METHOD_2 ( revision , VAR_14 ) )  revision = TYPE_3 . METHOD_2 ( revision , VAR_14 ) (  TYPE_4 . METHOD_3 ( ( revision == ( VAR_14 ) ) , STRING_1 , type ) )  TYPE_4 . METHOD_3 ( ( revision == ( VAR_14 ) ) , STRING_1 , type ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_6 ( CASE VAR_7 ( BLOCK BLOCK (  revision = TYPE_3 . METHOD_2 ( revision , VAR_14 ) )  revision = TYPE_3 . METHOD_2 ( revision , VAR_14 ) (  TYPE_4 . METHOD_3 ( ( revision == ( VAR_14 ) ) , STRING_1 , type ) )  TYPE_4 . METHOD_3 ( ( revision == ( VAR_14 ) ) , STRING_1 , type ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_7 ( CASE VAR_8 ( BLOCK BLOCK (  revision = TYPE_3 . METHOD_2 ( revision , VAR_14 ) )  revision = TYPE_3 . METHOD_2 ( revision , VAR_14 ) (  TYPE_4 . METHOD_3 ( ( revision == ( VAR_14 ) ) , STRING_1 , type ) )  TYPE_4 . METHOD_3 ( ( revision == ( VAR_14 ) ) , STRING_1 , type ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_8 ( CASE VAR_9 ( BLOCK BLOCK (  revision = TYPE_3 . METHOD_2 ( revision , VAR_14 ) )  revision = TYPE_3 . METHOD_2 ( revision , VAR_14 ) (  TYPE_4 . METHOD_3 ( ( revision == ( VAR_14 ) ) , STRING_1 , type ) )  TYPE_4 . METHOD_3 ( ( revision == ( VAR_14 ) ) , STRING_1 , type ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_9 ( CASE VAR_10 ( BLOCK BLOCK (  revision = TYPE_3 . METHOD_2 ( revision , VAR_14 ) )  revision = TYPE_3 . METHOD_2 ( revision , VAR_14 ) (  TYPE_4 . METHOD_3 ( ( revision == ( VAR_14 ) ) , STRING_1 , type ) )  TYPE_4 . METHOD_3 ( ( revision == ( VAR_14 ) ) , STRING_1 , type ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_10 ( CASE VAR_11 ( BLOCK BLOCK (  revision = TYPE_3 . METHOD_2 ( revision , VAR_14 ) )  revision = TYPE_3 . METHOD_2 ( revision , VAR_14 ) (  TYPE_4 . METHOD_3 ( ( revision == ( VAR_14 ) ) , STRING_1 , type ) )  TYPE_4 . METHOD_3 ( ( revision == ( VAR_14 ) ) , STRING_1 , type ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_11 ( CASE VAR_12 ( BLOCK BLOCK (  revision = TYPE_3 . METHOD_2 ( revision , VAR_14 ) )  revision = TYPE_3 . METHOD_2 ( revision , VAR_14 ) (  TYPE_4 . METHOD_3 ( ( revision == ( VAR_14 ) ) , STRING_1 , type ) )  TYPE_4 . METHOD_3 ( ( revision == ( VAR_14 ) ) , STRING_1 , type ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_12 ( CASE VAR_13 ( BLOCK BLOCK (  revision = TYPE_3 . METHOD_2 ( revision , VAR_14 ) )  revision = TYPE_3 . METHOD_2 ( revision , VAR_14 ) (  TYPE_4 . METHOD_3 ( ( revision == ( VAR_14 ) ) , STRING_1 , type ) )  TYPE_4 . METHOD_3 ( ( revision == ( VAR_14 ) ) , STRING_1 , type ) (  break ; )  break ; ) BLOCK BLOCK ) CASE VAR_13 ( DEFAULT DEFAULT ( BLOCK BLOCK (  revision = TYPE_3 . METHOD_2 ( revision , VAR_14 ) )  revision = TYPE_3 . METHOD_2 ( revision , VAR_14 ) (  TYPE_4 . METHOD_3 ( ( revision == ( VAR_14 ) ) , STRING_1 , type ) )  TYPE_4 . METHOD_3 ( ( revision == ( VAR_14 ) ) , STRING_1 , type ) (  break ; )  break ; ) BLOCK BLOCK ) DEFAULT DEFAULT ) SWITCH SWITCH (  this . VAR_15 = revision )  this . VAR_15 = revision (  return this ; )  return this ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public final ) MODIFIER public final ( RETURN java.util.List<java.lang.String> ) RETURN java.util.List<java.lang.String> ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE java.util.List<java.lang.String> ) TYPE java.util.List<java.lang.String> ( NAME VAR_1 ) NAME VAR_1 ( INIT = new java.util.ArrayList < > ( ) ) INIT = new java.util.ArrayList < > ( ) ) VAR VAR ( FOR-EACH FOR-EACH ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_2 ) NAME VAR_2 ( IN TYPE_2 . METHOD_2 ( METHOD_3 ( ) ) ) IN TYPE_2 . METHOD_2 ( METHOD_3 ( ) ) ( BLOCK BLOCK (  VAR_1 . add ( VAR_2 . get ( ) ) )  VAR_1 . add ( VAR_2 . get ( ) ) ) BLOCK BLOCK ) FOR-EACH FOR-EACH (  return VAR_1 ; )  return VAR_1 ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN com.google.gerrit.reviewdb.client.PatchSet ) RETURN com.google.gerrit.reviewdb.client.PatchSet ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.PatchSet.Id ) TYPE com.google.gerrit.reviewdb.client.PatchSet.Id ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.lib.ObjectId ) TYPE org.eclipse.jgit.lib.ObjectId ( NAME revision ) NAME revision ) VAR VAR ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.Account.Id ) TYPE com.google.gerrit.reviewdb.client.Account.Id ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.reviewdb.client.PatchSet ) TYPE com.google.gerrit.reviewdb.client.PatchSet ( NAME ps ) NAME ps ( INIT = new com.google.gerrit.reviewdb.client.PatchSet ( id ) ) INIT = new com.google.gerrit.reviewdb.client.PatchSet ( id ) ) VAR VAR (  ps . METHOD_2 ( new TYPE_1 ( revision . name ( ) ) ) )  ps . METHOD_2 ( new TYPE_1 ( revision . name ( ) ) ) (  ps . METHOD_3 ( VAR_1 ) )  ps . METHOD_3 ( VAR_1 ) (  ps . METHOD_4 ( TYPE_2 . METHOD_5 ( ) ) )  ps . METHOD_4 ( TYPE_2 . METHOD_5 ( ) ) (  return ps ; )  return ps ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN java.util.Set<java.lang.String> ) RETURN java.util.Set<java.lang.String> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE org.eclipse.jgit.lib.Repository ) TYPE org.eclipse.jgit.lib.Repository ( NAME repo ) NAME repo ) VAR VAR ( TRY TRY ( BLOCK BLOCK (  repo = VAR_2 . METHOD_2 ( VAR_3 ) )  repo = VAR_2 . METHOD_2 ( VAR_3 ) ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK (  throw new com.google.gwtorm.server.OrmException ( e ) ; )  throw new com.google.gwtorm.server.OrmException ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ) TRY TRY ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_4 ) NAME VAR_4 ( INIT = repo . METHOD_3 ( ) ) INIT = repo . METHOD_3 ( ) ) VAR VAR (  return VAR_4 . METHOD_4 ( VAR_1 ) . METHOD_5 ( ) ; )  return VAR_4 . METHOD_4 ( VAR_1 ) . METHOD_5 ( ) ; ) BLOCK BLOCK ( CATCH CATCH ( TYPE java.io.IOException ) TYPE java.io.IOException ( NAME e ) NAME e ( BLOCK BLOCK (  throw new com.google.gwtorm.server.OrmException ( e ) ; )  throw new com.google.gwtorm.server.OrmException ( e ) ; ) BLOCK BLOCK ) CATCH CATCH ( FINALLY FINALLY (  repo . close ( ) )  repo . close ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME VAR_1 ) NAME VAR_1 ( INIT = METHOD_2 ( VAR_2 ) ) INIT = METHOD_2 ( VAR_2 ) ) VAR VAR (  METHOD_3 ( VAR_1 . changeId , VAR_3 , VAR_4 ) )  METHOD_3 ( VAR_1 . changeId , VAR_3 , VAR_4 ) (  assertThat ( VAR_5 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_3 , VAR_6 ) . METHOD_6 ( VAR_7 , VAR_8 ) . to ( VAR_9 ) . METHOD_6 ( VAR_10 ) . METHOD_5 ( VAR_2 ) )  assertThat ( VAR_5 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_3 , VAR_6 ) . METHOD_6 ( VAR_7 , VAR_8 ) . to ( VAR_9 ) . METHOD_6 ( VAR_10 ) . METHOD_5 ( VAR_2 ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1 ) TYPE TYPE_1 ( NAME cfg ) NAME cfg ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK (  METHOD_2 ( TYPE_2 . METHOD_3 ( true , java.util.Collections . METHOD_4 ( TYPE_3 . METHOD_5 ( VAR_1 , VAR_2 ) ) , VAR_3 ) ) )  METHOD_2 ( TYPE_2 . METHOD_3 ( true , java.util.Collections . METHOD_4 ( TYPE_3 . METHOD_5 ( VAR_1 , VAR_2 ) ) , VAR_3 ) ) ( VAR VAR ( TYPE TYPE_4<TYPE_5> ) TYPE TYPE_4<TYPE_5> ( NAME factory ) NAME factory ) VAR VAR ( IF IF ( COND cfg . METHOD_6 ( STRING_1 , null , STRING_2 , false ) ) COND cfg . METHOD_6 ( STRING_1 , null , STRING_2 , false ) ( THEN THEN (  factory = new TYPE_6 . Factory ( ) )  factory = new TYPE_6 . Factory ( ) ) THEN THEN ( ELSE ELSE (  factory = TYPE_7 . METHOD_7 ( ) )  factory = TYPE_7 . METHOD_7 ( ) ) ELSE ELSE ) IF IF (  METHOD_8 ( new TYPE_8 ( factory ) ) )  METHOD_8 ( new TYPE_8 ( factory ) ) ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER private ) MODIFIER private ( RETURN TYPE_1<TYPE_2> ) RETURN TYPE_1<TYPE_2> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( IF IF ( COND VAR_2 . equals ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) ) COND VAR_2 . equals ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) ( THEN THEN (  return VAR_1 . METHOD_2 ( ) . METHOD_4 ( VAR_3 , VAR_4 ) ; )  return VAR_1 . METHOD_2 ( ) . METHOD_4 ( VAR_3 , VAR_4 ) ; ) THEN THEN ) IF IF ( VAR VAR ( TYPE TYPE_4 ) TYPE TYPE_4 ( NAME VAR_5 ) NAME VAR_5 ( INIT = VAR_1 . METHOD_2 ( ) . METHOD_5 ( ) . METHOD_6 ( VAR_2 ) ) INIT = VAR_1 . METHOD_2 ( ) . METHOD_5 ( ) . METHOD_6 ( VAR_2 ) ) VAR VAR (  return VAR_5 . METHOD_4 ( VAR_3 ) ; )  return VAR_5 . METHOD_4 ( VAR_3 ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER MODIFIER ) MODIFIER MODIFIER ( RETURN void ) RETURN void ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE TYPE_1<TYPE_2> ) TYPE TYPE_1<TYPE_2> ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ) VAR VAR ( VAR VAR ( TYPE TYPE_1<TYPE_4<TYPE_5>> ) TYPE TYPE_1<TYPE_4<TYPE_5>> ( NAME VAR_3 ) NAME VAR_3 ) VAR VAR ( VAR VAR ( TYPE TYPE_1<TYPE_4<TYPE_5>> ) TYPE TYPE_1<TYPE_4<TYPE_5>> ( NAME VAR_4 ) NAME VAR_4 ) VAR VAR ( VAR VAR ( TYPE TYPE_6 ) TYPE TYPE_6 ( NAME VAR_5 ) NAME VAR_5 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_4<TYPE_2> ) TYPE TYPE_4<TYPE_2> ( NAME VAR_6 ) NAME VAR_6 ( INIT = VAR_1 . values ( ) ) INIT = VAR_1 . values ( ) ) VAR VAR (  TYPE_2 . METHOD_2 ( VAR_6 ) )  TYPE_2 . METHOD_2 ( VAR_6 ) ( VAR VAR ( TYPE TYPE_7 ) TYPE TYPE_7 ( NAME cmd ) NAME cmd ( INIT = new TYPE_7 ( VAR_1 , VAR_6 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ) INIT = new TYPE_7 ( VAR_1 , VAR_6 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ) VAR VAR ( IF IF ( COND cmd . METHOD_3 ( ) ) COND cmd . METHOD_3 ( ) ( THEN THEN (  cmd . METHOD_4 ( ) )  cmd . METHOD_4 ( ) (  TYPE_8 . get ( ) . METHOD_5 ( cmd ) )  TYPE_8 . get ( ) . METHOD_5 ( cmd ) ) THEN THEN ) IF IF ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public static ) MODIFIER public static ( RETURN TYPE_1 ) RETURN TYPE_1 ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME name ) NAME name ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.lib.ObjectId ) TYPE org.eclipse.jgit.lib.ObjectId ( NAME id ) NAME id ) VAR VAR ( VAR VAR ( TYPE org.eclipse.jgit.revwalk.RevWalk ) TYPE org.eclipse.jgit.revwalk.RevWalk ( NAME walk ) NAME walk ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_1 ) NAME VAR_1 ( INIT = walk . METHOD_2 ( id ) ) INIT = walk . METHOD_2 ( id ) ) VAR VAR ( VAR VAR ( TYPE TYPE_3 ) TYPE TYPE_3 ( NAME VAR_2 ) NAME VAR_2 ( INIT = walk . METHOD_1 ( VAR_1 ) ) INIT = walk . METHOD_1 ( VAR_1 ) ) VAR VAR (  return new TYPE_1 ( name , VAR_1 , VAR_1 . METHOD_3 ( ) , VAR_2 , VAR_2 . METHOD_3 ( ) ) ; )  return new TYPE_1 ( name , VAR_1 , VAR_1 . METHOD_3 ( ) , VAR_2 , VAR_2 . METHOD_3 ( ) ) ; ) BLOCK BLOCK ) METHOD METHOD
( METHOD METHOD ( MODIFIER public ) MODIFIER public ( RETURN TYPE_1<com.google.gerrit.reviewdb.client.Account.Id> ) RETURN TYPE_1<com.google.gerrit.reviewdb.client.Account.Id> ( NAME METHOD_1 ) NAME METHOD_1 ( PARAMS PARAMS ( VAR VAR ( TYPE java.lang.String ) TYPE java.lang.String ( NAME VAR_1 ) NAME VAR_1 ) VAR VAR ) PARAMS PARAMS ( BLOCK BLOCK ( VAR VAR ( TYPE com.google.gerrit.reviewdb.server.ReviewDb ) TYPE com.google.gerrit.reviewdb.server.ReviewDb ( NAME db ) NAME db ( INIT = schema . METHOD_2 ( ) ) INIT = schema . METHOD_2 ( ) ) VAR VAR ( TRY TRY ( BLOCK BLOCK ( VAR VAR ( TYPE TYPE_2.Key ) TYPE TYPE_2.Key ( NAME key ) NAME key ( INIT = new TYPE_2 . Key ( VAR_2 , VAR_1 ) ) INIT = new TYPE_2 . Key ( VAR_2 , VAR_1 ) ) VAR VAR ( VAR VAR ( TYPE TYPE_2 ) TYPE TYPE_2 ( NAME id ) NAME id ( INIT = db . METHOD_3 ( ) . get ( key ) ) INIT = db . METHOD_3 ( ) . get ( key ) ) VAR VAR ( IF IF ( COND id != null ) COND id != null ( THEN THEN (  return TYPE_1 . of ( id . getAccountId ( ) ) ; )  return TYPE_1 . of ( id . getAccountId ( ) ) ; ) THEN THEN ) IF IF (  return TYPE_1 . METHOD_4 ( ) ; )  return TYPE_1 . METHOD_4 ( ) ; ) BLOCK BLOCK ( FINALLY FINALLY (  db . close ( ) )  db . close ( ) ) FINALLY FINALLY ) TRY TRY ) BLOCK BLOCK ) METHOD METHOD
